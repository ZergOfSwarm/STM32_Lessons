
LAN_zagotovka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001632c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008ddc  080164bc  080164bc  000264bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f298  0801f298  00030520  2**0
                  CONTENTS
  4 .ARM          00000008  0801f298  0801f298  0002f298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f2a0  0801f2a0  00030520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f2a0  0801f2a0  0002f2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f2a4  0801f2a4  0002f2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000520  20000000  0801f2a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030520  2**0
                  CONTENTS
 10 .bss          0000d2e8  20000520  20000520  00030520  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000d808  2000d808  00030520  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030520  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e835  00000000  00000000  00030550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000754d  00000000  00000000  0006ed85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e20  00000000  00000000  000762d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d38  00000000  00000000  000780f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030c57  00000000  00000000  00079e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000310aa  00000000  00000000  000aaa87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebf71  00000000  00000000  000dbb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c7aa2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000088bc  00000000  00000000  001c7af8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000520 	.word	0x20000520
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080164a4 	.word	0x080164a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000524 	.word	0x20000524
 80001cc:	080164a4 	.word	0x080164a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
/* we will use character "x", "y","z" as tag for SSI */
char const *TAGCHAR[] = { "json", "formjson", "formjson2", "jsontag1", "jsontag2", "jsontag3" };
char const **TAGS = TAGCHAR;
int f = 0;
//
uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen, u16_t current_tag_part, u16_t *next_tag_part) {
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	b095      	sub	sp, #84	; 0x54
 800059c:	af0a      	add	r7, sp, #40	; 0x28
 800059e:	6278      	str	r0, [r7, #36]	; 0x24
 80005a0:	6239      	str	r1, [r7, #32]
 80005a2:	61fa      	str	r2, [r7, #28]
 80005a4:	837b      	strh	r3, [r7, #26]
	//printf("%d \n", jsongo);
	switch (iIndex) {
 80005a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	f000 84b8 	beq.w	8000f1e <ssi_handler+0x986>
 80005ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	f300 84b6 	bgt.w	8000f22 <ssi_handler+0x98a>
 80005b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d005      	beq.n	80005c8 <ssi_handler+0x30>
 80005bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005be:	2b01      	cmp	r3, #1
 80005c0:	f000 83aa 	beq.w	8000d18 <ssi_handler+0x780>
//			memset(json, '\0', sizeof(json));
//			memset(arrline, '\0', sizeof(arrline));
//			return strlen(pcInsert);
		break;
	default:
		break;
 80005c4:	f000 bcad 	b.w	8000f22 <ssi_handler+0x98a>
		if (variable == tabline) {
 80005c8:	4b95      	ldr	r3, [pc, #596]	; (8000820 <ssi_handler+0x288>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b95      	ldr	r3, [pc, #596]	; (8000824 <ssi_handler+0x28c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d104      	bne.n	80005de <ssi_handler+0x46>
			variable = 0;
 80005d4:	4b92      	ldr	r3, [pc, #584]	; (8000820 <ssi_handler+0x288>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
			break;
 80005da:	f000 bca3 	b.w	8000f24 <ssi_handler+0x98c>
			if (variable == 0) {
 80005de:	4b90      	ldr	r3, [pc, #576]	; (8000820 <ssi_handler+0x288>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	f040 812c 	bne.w	8000840 <ssi_handler+0x2a8>
				if (jsongo == 1) {
 80005e8:	4b8f      	ldr	r3, [pc, #572]	; (8000828 <ssi_handler+0x290>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d17c      	bne.n	80006ea <ssi_handler+0x152>
					sprintf(pcInsert, "[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype,
 80005f0:	4b8b      	ldr	r3, [pc, #556]	; (8000820 <ssi_handler+0x288>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a8d      	ldr	r2, [pc, #564]	; (800082c <ssi_handler+0x294>)
 80005f6:	2168      	movs	r1, #104	; 0x68
 80005f8:	fb01 f303 	mul.w	r3, r1, r3
 80005fc:	4413      	add	r3, r2
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	4b87      	ldr	r3, [pc, #540]	; (8000820 <ssi_handler+0x288>)
 8000604:	6819      	ldr	r1, [r3, #0]
 8000606:	6139      	str	r1, [r7, #16]
 8000608:	4b85      	ldr	r3, [pc, #532]	; (8000820 <ssi_handler+0x288>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4613      	mov	r3, r2
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4413      	add	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4a86      	ldr	r2, [pc, #536]	; (8000830 <ssi_handler+0x298>)
 8000616:	1899      	adds	r1, r3, r2
 8000618:	60f9      	str	r1, [r7, #12]
 800061a:	4b81      	ldr	r3, [pc, #516]	; (8000820 <ssi_handler+0x288>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2268      	movs	r2, #104	; 0x68
 8000620:	fb02 f303 	mul.w	r3, r2, r3
 8000624:	3318      	adds	r3, #24
 8000626:	4a81      	ldr	r2, [pc, #516]	; (800082c <ssi_handler+0x294>)
 8000628:	189c      	adds	r4, r3, r2
 800062a:	4b7d      	ldr	r3, [pc, #500]	; (8000820 <ssi_handler+0x288>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a7f      	ldr	r2, [pc, #508]	; (800082c <ssi_handler+0x294>)
 8000630:	2168      	movs	r1, #104	; 0x68
 8000632:	fb01 f303 	mul.w	r3, r1, r3
 8000636:	4413      	add	r3, r2
 8000638:	332c      	adds	r3, #44	; 0x2c
 800063a:	681d      	ldr	r5, [r3, #0]
 800063c:	4b78      	ldr	r3, [pc, #480]	; (8000820 <ssi_handler+0x288>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a7a      	ldr	r2, [pc, #488]	; (800082c <ssi_handler+0x294>)
 8000642:	2168      	movs	r1, #104	; 0x68
 8000644:	fb01 f303 	mul.w	r3, r1, r3
 8000648:	4413      	add	r3, r2
 800064a:	3330      	adds	r3, #48	; 0x30
 800064c:	681e      	ldr	r6, [r3, #0]
 800064e:	4b74      	ldr	r3, [pc, #464]	; (8000820 <ssi_handler+0x288>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a76      	ldr	r2, [pc, #472]	; (800082c <ssi_handler+0x294>)
 8000654:	2168      	movs	r1, #104	; 0x68
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	4413      	add	r3, r2
 800065c:	3334      	adds	r3, #52	; 0x34
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	60ba      	str	r2, [r7, #8]
 8000662:	4b6f      	ldr	r3, [pc, #444]	; (8000820 <ssi_handler+0x288>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a71      	ldr	r2, [pc, #452]	; (800082c <ssi_handler+0x294>)
 8000668:	2168      	movs	r1, #104	; 0x68
 800066a:	fb01 f303 	mul.w	r3, r1, r3
 800066e:	4413      	add	r3, r2
 8000670:	3338      	adds	r3, #56	; 0x38
 8000672:	6819      	ldr	r1, [r3, #0]
 8000674:	6079      	str	r1, [r7, #4]
 8000676:	4b6a      	ldr	r3, [pc, #424]	; (8000820 <ssi_handler+0x288>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a6c      	ldr	r2, [pc, #432]	; (800082c <ssi_handler+0x294>)
 800067c:	2168      	movs	r1, #104	; 0x68
 800067e:	fb01 f303 	mul.w	r3, r1, r3
 8000682:	4413      	add	r3, r2
 8000684:	333c      	adds	r3, #60	; 0x3c
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b65      	ldr	r3, [pc, #404]	; (8000820 <ssi_handler+0x288>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a67      	ldr	r2, [pc, #412]	; (800082c <ssi_handler+0x294>)
 8000690:	2168      	movs	r1, #104	; 0x68
 8000692:	fb01 f303 	mul.w	r3, r1, r3
 8000696:	4413      	add	r3, r2
 8000698:	3340      	adds	r3, #64	; 0x40
 800069a:	6819      	ldr	r1, [r3, #0]
							T[variable].binter, T[variable].hinter, T[variable].repeat, T[variable].rinter, T[variable].dcinter, T[variable].pclick, T[variable].info, T[variable].onoff);
 800069c:	4b60      	ldr	r3, [pc, #384]	; (8000820 <ssi_handler+0x288>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2268      	movs	r2, #104	; 0x68
 80006a2:	fb02 f303 	mul.w	r3, r2, r3
 80006a6:	3340      	adds	r3, #64	; 0x40
 80006a8:	4a60      	ldr	r2, [pc, #384]	; (800082c <ssi_handler+0x294>)
 80006aa:	4413      	add	r3, r2
 80006ac:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert, "[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype,
 80006ae:	4b5c      	ldr	r3, [pc, #368]	; (8000820 <ssi_handler+0x288>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	485e      	ldr	r0, [pc, #376]	; (800082c <ssi_handler+0x294>)
 80006b4:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80006b8:	fb0c f303 	mul.w	r3, ip, r3
 80006bc:	4403      	add	r3, r0
 80006be:	3364      	adds	r3, #100	; 0x64
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	9309      	str	r3, [sp, #36]	; 0x24
 80006c4:	9208      	str	r2, [sp, #32]
 80006c6:	9107      	str	r1, [sp, #28]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	9306      	str	r3, [sp, #24]
 80006cc:	6879      	ldr	r1, [r7, #4]
 80006ce:	9105      	str	r1, [sp, #20]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	9204      	str	r2, [sp, #16]
 80006d4:	9603      	str	r6, [sp, #12]
 80006d6:	9502      	str	r5, [sp, #8]
 80006d8:	9401      	str	r4, [sp, #4]
 80006da:	68f9      	ldr	r1, [r7, #12]
 80006dc:	9100      	str	r1, [sp, #0]
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	4954      	ldr	r1, [pc, #336]	; (8000834 <ssi_handler+0x29c>)
 80006e4:	6a38      	ldr	r0, [r7, #32]
 80006e6:	f014 fc51 	bl	8014f8c <siprintf>
				if (jsongo == 2) {
 80006ea:	4b4f      	ldr	r3, [pc, #316]	; (8000828 <ssi_handler+0x290>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d177      	bne.n	80007e2 <ssi_handler+0x24a>
					sprintf(pcInsert, "[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 80006f2:	4b4b      	ldr	r3, [pc, #300]	; (8000820 <ssi_handler+0x288>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a4d      	ldr	r2, [pc, #308]	; (800082c <ssi_handler+0x294>)
 80006f8:	2168      	movs	r1, #104	; 0x68
 80006fa:	fb01 f303 	mul.w	r3, r1, r3
 80006fe:	4413      	add	r3, r2
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	617b      	str	r3, [r7, #20]
 8000704:	4b46      	ldr	r3, [pc, #280]	; (8000820 <ssi_handler+0x288>)
 8000706:	6819      	ldr	r1, [r3, #0]
 8000708:	6139      	str	r1, [r7, #16]
 800070a:	4b45      	ldr	r3, [pc, #276]	; (8000820 <ssi_handler+0x288>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4a46      	ldr	r2, [pc, #280]	; (8000830 <ssi_handler+0x298>)
 8000718:	4413      	add	r3, r2
 800071a:	4a41      	ldr	r2, [pc, #260]	; (8000820 <ssi_handler+0x288>)
 800071c:	6812      	ldr	r2, [r2, #0]
 800071e:	2168      	movs	r1, #104	; 0x68
 8000720:	fb01 f202 	mul.w	r2, r1, r2
 8000724:	3218      	adds	r2, #24
 8000726:	4941      	ldr	r1, [pc, #260]	; (800082c <ssi_handler+0x294>)
 8000728:	440a      	add	r2, r1
 800072a:	493d      	ldr	r1, [pc, #244]	; (8000820 <ssi_handler+0x288>)
 800072c:	6809      	ldr	r1, [r1, #0]
 800072e:	483f      	ldr	r0, [pc, #252]	; (800082c <ssi_handler+0x294>)
 8000730:	2468      	movs	r4, #104	; 0x68
 8000732:	fb04 f101 	mul.w	r1, r4, r1
 8000736:	4401      	add	r1, r0
 8000738:	3104      	adds	r1, #4
 800073a:	6809      	ldr	r1, [r1, #0]
 800073c:	4838      	ldr	r0, [pc, #224]	; (8000820 <ssi_handler+0x288>)
 800073e:	6800      	ldr	r0, [r0, #0]
 8000740:	4c3a      	ldr	r4, [pc, #232]	; (800082c <ssi_handler+0x294>)
 8000742:	2568      	movs	r5, #104	; 0x68
 8000744:	fb05 f000 	mul.w	r0, r5, r0
 8000748:	4420      	add	r0, r4
 800074a:	3008      	adds	r0, #8
 800074c:	6800      	ldr	r0, [r0, #0]
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	4c33      	ldr	r4, [pc, #204]	; (8000820 <ssi_handler+0x288>)
 8000752:	6824      	ldr	r4, [r4, #0]
 8000754:	4d35      	ldr	r5, [pc, #212]	; (800082c <ssi_handler+0x294>)
 8000756:	2668      	movs	r6, #104	; 0x68
 8000758:	fb06 f404 	mul.w	r4, r6, r4
 800075c:	442c      	add	r4, r5
 800075e:	340c      	adds	r4, #12
 8000760:	6820      	ldr	r0, [r4, #0]
 8000762:	60b8      	str	r0, [r7, #8]
 8000764:	4d2e      	ldr	r5, [pc, #184]	; (8000820 <ssi_handler+0x288>)
 8000766:	682d      	ldr	r5, [r5, #0]
 8000768:	4e30      	ldr	r6, [pc, #192]	; (800082c <ssi_handler+0x294>)
 800076a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800076e:	fb0c f505 	mul.w	r5, ip, r5
 8000772:	4435      	add	r5, r6
 8000774:	3510      	adds	r5, #16
 8000776:	682d      	ldr	r5, [r5, #0]
 8000778:	4e29      	ldr	r6, [pc, #164]	; (8000820 <ssi_handler+0x288>)
 800077a:	6836      	ldr	r6, [r6, #0]
 800077c:	482b      	ldr	r0, [pc, #172]	; (800082c <ssi_handler+0x294>)
 800077e:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000782:	fb0c f606 	mul.w	r6, ip, r6
 8000786:	4406      	add	r6, r0
 8000788:	3614      	adds	r6, #20
 800078a:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue, T[variable].ponr, T[variable].info, T[variable].onoff);
 800078c:	4824      	ldr	r0, [pc, #144]	; (8000820 <ssi_handler+0x288>)
 800078e:	6800      	ldr	r0, [r0, #0]
 8000790:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000794:	fb0c fc00 	mul.w	ip, ip, r0
 8000798:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800079c:	4823      	ldr	r0, [pc, #140]	; (800082c <ssi_handler+0x294>)
 800079e:	4484      	add	ip, r0
 80007a0:	f10c 0004 	add.w	r0, ip, #4
 80007a4:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert, "[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 80007a6:	481e      	ldr	r0, [pc, #120]	; (8000820 <ssi_handler+0x288>)
 80007a8:	6800      	ldr	r0, [r0, #0]
 80007aa:	4c20      	ldr	r4, [pc, #128]	; (800082c <ssi_handler+0x294>)
 80007ac:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80007b0:	fb0c fc00 	mul.w	ip, ip, r0
 80007b4:	44a4      	add	ip, r4
 80007b6:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 80007ba:	f8dc 0000 	ldr.w	r0, [ip]
 80007be:	9008      	str	r0, [sp, #32]
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	9007      	str	r0, [sp, #28]
 80007c4:	9606      	str	r6, [sp, #24]
 80007c6:	9505      	str	r5, [sp, #20]
 80007c8:	68b8      	ldr	r0, [r7, #8]
 80007ca:	9004      	str	r0, [sp, #16]
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	9003      	str	r0, [sp, #12]
 80007d0:	9102      	str	r1, [sp, #8]
 80007d2:	9201      	str	r2, [sp, #4]
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	697a      	ldr	r2, [r7, #20]
 80007da:	4917      	ldr	r1, [pc, #92]	; (8000838 <ssi_handler+0x2a0>)
 80007dc:	6a38      	ldr	r0, [r7, #32]
 80007de:	f014 fbd5 	bl	8014f8c <siprintf>
				if (jsongo == 3) {
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <ssi_handler+0x290>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	f040 8278 	bne.w	8000cdc <ssi_handler+0x744>
					sprintf(pcInsert, "[{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},", variable, tp[variable].pins, T[variable].topin);
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <ssi_handler+0x288>)
 80007ee:	6819      	ldr	r1, [r3, #0]
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <ssi_handler+0x288>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4613      	mov	r3, r2
 80007f6:	009b      	lsls	r3, r3, #2
 80007f8:	4413      	add	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <ssi_handler+0x298>)
 80007fe:	441a      	add	r2, r3
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <ssi_handler+0x288>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <ssi_handler+0x294>)
 8000806:	2468      	movs	r4, #104	; 0x68
 8000808:	fb04 f303 	mul.w	r3, r4, r3
 800080c:	4403      	add	r3, r0
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	4613      	mov	r3, r2
 8000814:	460a      	mov	r2, r1
 8000816:	4909      	ldr	r1, [pc, #36]	; (800083c <ssi_handler+0x2a4>)
 8000818:	6a38      	ldr	r0, [r7, #32]
 800081a:	f014 fbb7 	bl	8014f8c <siprintf>
 800081e:	e25d      	b.n	8000cdc <ssi_handler+0x744>
 8000820:	2000053c 	.word	0x2000053c
 8000824:	20000488 	.word	0x20000488
 8000828:	20000540 	.word	0x20000540
 800082c:	20000b60 	.word	0x20000b60
 8000830:	20000000 	.word	0x20000000
 8000834:	08016500 	.word	0x08016500
 8000838:	08016590 	.word	0x08016590
 800083c:	0801660c 	.word	0x0801660c
			} else if (variable == tabline - 1) {
 8000840:	4b91      	ldr	r3, [pc, #580]	; (8000a88 <ssi_handler+0x4f0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1e5a      	subs	r2, r3, #1
 8000846:	4b91      	ldr	r3, [pc, #580]	; (8000a8c <ssi_handler+0x4f4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	429a      	cmp	r2, r3
 800084c:	f040 812c 	bne.w	8000aa8 <ssi_handler+0x510>
				if (jsongo == 1) {
 8000850:	4b8f      	ldr	r3, [pc, #572]	; (8000a90 <ssi_handler+0x4f8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d17c      	bne.n	8000952 <ssi_handler+0x3ba>
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}]", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].binter,
 8000858:	4b8c      	ldr	r3, [pc, #560]	; (8000a8c <ssi_handler+0x4f4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a8d      	ldr	r2, [pc, #564]	; (8000a94 <ssi_handler+0x4fc>)
 800085e:	2168      	movs	r1, #104	; 0x68
 8000860:	fb01 f303 	mul.w	r3, r1, r3
 8000864:	4413      	add	r3, r2
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	4b88      	ldr	r3, [pc, #544]	; (8000a8c <ssi_handler+0x4f4>)
 800086c:	6819      	ldr	r1, [r3, #0]
 800086e:	6139      	str	r1, [r7, #16]
 8000870:	4b86      	ldr	r3, [pc, #536]	; (8000a8c <ssi_handler+0x4f4>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	4a86      	ldr	r2, [pc, #536]	; (8000a98 <ssi_handler+0x500>)
 800087e:	1899      	adds	r1, r3, r2
 8000880:	60f9      	str	r1, [r7, #12]
 8000882:	4b82      	ldr	r3, [pc, #520]	; (8000a8c <ssi_handler+0x4f4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	2268      	movs	r2, #104	; 0x68
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	3318      	adds	r3, #24
 800088e:	4a81      	ldr	r2, [pc, #516]	; (8000a94 <ssi_handler+0x4fc>)
 8000890:	189c      	adds	r4, r3, r2
 8000892:	4b7e      	ldr	r3, [pc, #504]	; (8000a8c <ssi_handler+0x4f4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a7f      	ldr	r2, [pc, #508]	; (8000a94 <ssi_handler+0x4fc>)
 8000898:	2168      	movs	r1, #104	; 0x68
 800089a:	fb01 f303 	mul.w	r3, r1, r3
 800089e:	4413      	add	r3, r2
 80008a0:	332c      	adds	r3, #44	; 0x2c
 80008a2:	681d      	ldr	r5, [r3, #0]
 80008a4:	4b79      	ldr	r3, [pc, #484]	; (8000a8c <ssi_handler+0x4f4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a7a      	ldr	r2, [pc, #488]	; (8000a94 <ssi_handler+0x4fc>)
 80008aa:	2168      	movs	r1, #104	; 0x68
 80008ac:	fb01 f303 	mul.w	r3, r1, r3
 80008b0:	4413      	add	r3, r2
 80008b2:	3330      	adds	r3, #48	; 0x30
 80008b4:	681e      	ldr	r6, [r3, #0]
 80008b6:	4b75      	ldr	r3, [pc, #468]	; (8000a8c <ssi_handler+0x4f4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a76      	ldr	r2, [pc, #472]	; (8000a94 <ssi_handler+0x4fc>)
 80008bc:	2168      	movs	r1, #104	; 0x68
 80008be:	fb01 f303 	mul.w	r3, r1, r3
 80008c2:	4413      	add	r3, r2
 80008c4:	3334      	adds	r3, #52	; 0x34
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	60ba      	str	r2, [r7, #8]
 80008ca:	4b70      	ldr	r3, [pc, #448]	; (8000a8c <ssi_handler+0x4f4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a71      	ldr	r2, [pc, #452]	; (8000a94 <ssi_handler+0x4fc>)
 80008d0:	2168      	movs	r1, #104	; 0x68
 80008d2:	fb01 f303 	mul.w	r3, r1, r3
 80008d6:	4413      	add	r3, r2
 80008d8:	3338      	adds	r3, #56	; 0x38
 80008da:	6819      	ldr	r1, [r3, #0]
 80008dc:	6079      	str	r1, [r7, #4]
 80008de:	4b6b      	ldr	r3, [pc, #428]	; (8000a8c <ssi_handler+0x4f4>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a6c      	ldr	r2, [pc, #432]	; (8000a94 <ssi_handler+0x4fc>)
 80008e4:	2168      	movs	r1, #104	; 0x68
 80008e6:	fb01 f303 	mul.w	r3, r1, r3
 80008ea:	4413      	add	r3, r2
 80008ec:	333c      	adds	r3, #60	; 0x3c
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b66      	ldr	r3, [pc, #408]	; (8000a8c <ssi_handler+0x4f4>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a67      	ldr	r2, [pc, #412]	; (8000a94 <ssi_handler+0x4fc>)
 80008f8:	2168      	movs	r1, #104	; 0x68
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3340      	adds	r3, #64	; 0x40
 8000902:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat, T[variable].rinter, T[variable].dcinter, T[variable].pclick, T[variable].info, T[variable].onoff);
 8000904:	4b61      	ldr	r3, [pc, #388]	; (8000a8c <ssi_handler+0x4f4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2268      	movs	r2, #104	; 0x68
 800090a:	fb02 f303 	mul.w	r3, r2, r3
 800090e:	3340      	adds	r3, #64	; 0x40
 8000910:	4a60      	ldr	r2, [pc, #384]	; (8000a94 <ssi_handler+0x4fc>)
 8000912:	4413      	add	r3, r2
 8000914:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}]", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].binter,
 8000916:	4b5d      	ldr	r3, [pc, #372]	; (8000a8c <ssi_handler+0x4f4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	485e      	ldr	r0, [pc, #376]	; (8000a94 <ssi_handler+0x4fc>)
 800091c:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000920:	fb0c f303 	mul.w	r3, ip, r3
 8000924:	4403      	add	r3, r0
 8000926:	3364      	adds	r3, #100	; 0x64
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	9309      	str	r3, [sp, #36]	; 0x24
 800092c:	9208      	str	r2, [sp, #32]
 800092e:	9107      	str	r1, [sp, #28]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	9306      	str	r3, [sp, #24]
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	9105      	str	r1, [sp, #20]
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	9204      	str	r2, [sp, #16]
 800093c:	9603      	str	r6, [sp, #12]
 800093e:	9502      	str	r5, [sp, #8]
 8000940:	9401      	str	r4, [sp, #4]
 8000942:	68f9      	ldr	r1, [r7, #12]
 8000944:	9100      	str	r1, [sp, #0]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	4954      	ldr	r1, [pc, #336]	; (8000a9c <ssi_handler+0x504>)
 800094c:	6a38      	ldr	r0, [r7, #32]
 800094e:	f014 fb1d 	bl	8014f8c <siprintf>
				if (jsongo == 2) {
 8000952:	4b4f      	ldr	r3, [pc, #316]	; (8000a90 <ssi_handler+0x4f8>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d177      	bne.n	8000a4a <ssi_handler+0x4b2>
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}]", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 800095a:	4b4c      	ldr	r3, [pc, #304]	; (8000a8c <ssi_handler+0x4f4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a4d      	ldr	r2, [pc, #308]	; (8000a94 <ssi_handler+0x4fc>)
 8000960:	2168      	movs	r1, #104	; 0x68
 8000962:	fb01 f303 	mul.w	r3, r1, r3
 8000966:	4413      	add	r3, r2
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	4b47      	ldr	r3, [pc, #284]	; (8000a8c <ssi_handler+0x4f4>)
 800096e:	6819      	ldr	r1, [r3, #0]
 8000970:	6139      	str	r1, [r7, #16]
 8000972:	4b46      	ldr	r3, [pc, #280]	; (8000a8c <ssi_handler+0x4f4>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4613      	mov	r3, r2
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	4413      	add	r3, r2
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	4a46      	ldr	r2, [pc, #280]	; (8000a98 <ssi_handler+0x500>)
 8000980:	4413      	add	r3, r2
 8000982:	4a42      	ldr	r2, [pc, #264]	; (8000a8c <ssi_handler+0x4f4>)
 8000984:	6812      	ldr	r2, [r2, #0]
 8000986:	2168      	movs	r1, #104	; 0x68
 8000988:	fb01 f202 	mul.w	r2, r1, r2
 800098c:	3218      	adds	r2, #24
 800098e:	4941      	ldr	r1, [pc, #260]	; (8000a94 <ssi_handler+0x4fc>)
 8000990:	440a      	add	r2, r1
 8000992:	493e      	ldr	r1, [pc, #248]	; (8000a8c <ssi_handler+0x4f4>)
 8000994:	6809      	ldr	r1, [r1, #0]
 8000996:	483f      	ldr	r0, [pc, #252]	; (8000a94 <ssi_handler+0x4fc>)
 8000998:	2468      	movs	r4, #104	; 0x68
 800099a:	fb04 f101 	mul.w	r1, r4, r1
 800099e:	4401      	add	r1, r0
 80009a0:	3104      	adds	r1, #4
 80009a2:	6809      	ldr	r1, [r1, #0]
 80009a4:	4839      	ldr	r0, [pc, #228]	; (8000a8c <ssi_handler+0x4f4>)
 80009a6:	6800      	ldr	r0, [r0, #0]
 80009a8:	4c3a      	ldr	r4, [pc, #232]	; (8000a94 <ssi_handler+0x4fc>)
 80009aa:	2568      	movs	r5, #104	; 0x68
 80009ac:	fb05 f000 	mul.w	r0, r5, r0
 80009b0:	4420      	add	r0, r4
 80009b2:	3008      	adds	r0, #8
 80009b4:	6800      	ldr	r0, [r0, #0]
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	4c34      	ldr	r4, [pc, #208]	; (8000a8c <ssi_handler+0x4f4>)
 80009ba:	6824      	ldr	r4, [r4, #0]
 80009bc:	4d35      	ldr	r5, [pc, #212]	; (8000a94 <ssi_handler+0x4fc>)
 80009be:	2668      	movs	r6, #104	; 0x68
 80009c0:	fb06 f404 	mul.w	r4, r6, r4
 80009c4:	442c      	add	r4, r5
 80009c6:	340c      	adds	r4, #12
 80009c8:	6820      	ldr	r0, [r4, #0]
 80009ca:	60b8      	str	r0, [r7, #8]
 80009cc:	4d2f      	ldr	r5, [pc, #188]	; (8000a8c <ssi_handler+0x4f4>)
 80009ce:	682d      	ldr	r5, [r5, #0]
 80009d0:	4e30      	ldr	r6, [pc, #192]	; (8000a94 <ssi_handler+0x4fc>)
 80009d2:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80009d6:	fb0c f505 	mul.w	r5, ip, r5
 80009da:	4435      	add	r5, r6
 80009dc:	3510      	adds	r5, #16
 80009de:	682d      	ldr	r5, [r5, #0]
 80009e0:	4e2a      	ldr	r6, [pc, #168]	; (8000a8c <ssi_handler+0x4f4>)
 80009e2:	6836      	ldr	r6, [r6, #0]
 80009e4:	482b      	ldr	r0, [pc, #172]	; (8000a94 <ssi_handler+0x4fc>)
 80009e6:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80009ea:	fb0c f606 	mul.w	r6, ip, r6
 80009ee:	4406      	add	r6, r0
 80009f0:	3614      	adds	r6, #20
 80009f2:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue, T[variable].ponr, T[variable].info, T[variable].onoff);
 80009f4:	4825      	ldr	r0, [pc, #148]	; (8000a8c <ssi_handler+0x4f4>)
 80009f6:	6800      	ldr	r0, [r0, #0]
 80009f8:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80009fc:	fb0c fc00 	mul.w	ip, ip, r0
 8000a00:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000a04:	4823      	ldr	r0, [pc, #140]	; (8000a94 <ssi_handler+0x4fc>)
 8000a06:	4484      	add	ip, r0
 8000a08:	f10c 0004 	add.w	r0, ip, #4
 8000a0c:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}]", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 8000a0e:	481f      	ldr	r0, [pc, #124]	; (8000a8c <ssi_handler+0x4f4>)
 8000a10:	6800      	ldr	r0, [r0, #0]
 8000a12:	4c20      	ldr	r4, [pc, #128]	; (8000a94 <ssi_handler+0x4fc>)
 8000a14:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000a18:	fb0c fc00 	mul.w	ip, ip, r0
 8000a1c:	44a4      	add	ip, r4
 8000a1e:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000a22:	f8dc 0000 	ldr.w	r0, [ip]
 8000a26:	9008      	str	r0, [sp, #32]
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	9007      	str	r0, [sp, #28]
 8000a2c:	9606      	str	r6, [sp, #24]
 8000a2e:	9505      	str	r5, [sp, #20]
 8000a30:	68b8      	ldr	r0, [r7, #8]
 8000a32:	9004      	str	r0, [sp, #16]
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	9003      	str	r0, [sp, #12]
 8000a38:	9102      	str	r1, [sp, #8]
 8000a3a:	9201      	str	r2, [sp, #4]
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	4917      	ldr	r1, [pc, #92]	; (8000aa0 <ssi_handler+0x508>)
 8000a44:	6a38      	ldr	r0, [r7, #32]
 8000a46:	f014 faa1 	bl	8014f8c <siprintf>
				if (jsongo == 3) {
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <ssi_handler+0x4f8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b03      	cmp	r3, #3
 8000a50:	f040 8144 	bne.w	8000cdc <ssi_handler+0x744>
					sprintf(pcInsert, "{\"id\":%d,\"pins\":\"%s\",\"topin\":%d}]", variable, tp[variable].pins, T[variable].topin);
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <ssi_handler+0x4f4>)
 8000a56:	6819      	ldr	r1, [r3, #0]
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <ssi_handler+0x4f4>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4a0c      	ldr	r2, [pc, #48]	; (8000a98 <ssi_handler+0x500>)
 8000a66:	441a      	add	r2, r3
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <ssi_handler+0x4f4>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <ssi_handler+0x4fc>)
 8000a6e:	2468      	movs	r4, #104	; 0x68
 8000a70:	fb04 f303 	mul.w	r3, r4, r3
 8000a74:	4403      	add	r3, r0
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	4909      	ldr	r1, [pc, #36]	; (8000aa4 <ssi_handler+0x50c>)
 8000a80:	6a38      	ldr	r0, [r7, #32]
 8000a82:	f014 fa83 	bl	8014f8c <siprintf>
 8000a86:	e129      	b.n	8000cdc <ssi_handler+0x744>
 8000a88:	20000488 	.word	0x20000488
 8000a8c:	2000053c 	.word	0x2000053c
 8000a90:	20000540 	.word	0x20000540
 8000a94:	20000b60 	.word	0x20000b60
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	08016630 	.word	0x08016630
 8000aa0:	080166c0 	.word	0x080166c0
 8000aa4:	0801673c 	.word	0x0801673c
				if (jsongo == 1) {
 8000aa8:	4b94      	ldr	r3, [pc, #592]	; (8000cfc <ssi_handler+0x764>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d17c      	bne.n	8000baa <ssi_handler+0x612>
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].binter,
 8000ab0:	4b93      	ldr	r3, [pc, #588]	; (8000d00 <ssi_handler+0x768>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a93      	ldr	r2, [pc, #588]	; (8000d04 <ssi_handler+0x76c>)
 8000ab6:	2168      	movs	r1, #104	; 0x68
 8000ab8:	fb01 f303 	mul.w	r3, r1, r3
 8000abc:	4413      	add	r3, r2
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	4b8f      	ldr	r3, [pc, #572]	; (8000d00 <ssi_handler+0x768>)
 8000ac4:	6819      	ldr	r1, [r3, #0]
 8000ac6:	6139      	str	r1, [r7, #16]
 8000ac8:	4b8d      	ldr	r3, [pc, #564]	; (8000d00 <ssi_handler+0x768>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4a8c      	ldr	r2, [pc, #560]	; (8000d08 <ssi_handler+0x770>)
 8000ad6:	1899      	adds	r1, r3, r2
 8000ad8:	60f9      	str	r1, [r7, #12]
 8000ada:	4b89      	ldr	r3, [pc, #548]	; (8000d00 <ssi_handler+0x768>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2268      	movs	r2, #104	; 0x68
 8000ae0:	fb02 f303 	mul.w	r3, r2, r3
 8000ae4:	3318      	adds	r3, #24
 8000ae6:	4a87      	ldr	r2, [pc, #540]	; (8000d04 <ssi_handler+0x76c>)
 8000ae8:	189c      	adds	r4, r3, r2
 8000aea:	4b85      	ldr	r3, [pc, #532]	; (8000d00 <ssi_handler+0x768>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a85      	ldr	r2, [pc, #532]	; (8000d04 <ssi_handler+0x76c>)
 8000af0:	2168      	movs	r1, #104	; 0x68
 8000af2:	fb01 f303 	mul.w	r3, r1, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	332c      	adds	r3, #44	; 0x2c
 8000afa:	681d      	ldr	r5, [r3, #0]
 8000afc:	4b80      	ldr	r3, [pc, #512]	; (8000d00 <ssi_handler+0x768>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a80      	ldr	r2, [pc, #512]	; (8000d04 <ssi_handler+0x76c>)
 8000b02:	2168      	movs	r1, #104	; 0x68
 8000b04:	fb01 f303 	mul.w	r3, r1, r3
 8000b08:	4413      	add	r3, r2
 8000b0a:	3330      	adds	r3, #48	; 0x30
 8000b0c:	681e      	ldr	r6, [r3, #0]
 8000b0e:	4b7c      	ldr	r3, [pc, #496]	; (8000d00 <ssi_handler+0x768>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a7c      	ldr	r2, [pc, #496]	; (8000d04 <ssi_handler+0x76c>)
 8000b14:	2168      	movs	r1, #104	; 0x68
 8000b16:	fb01 f303 	mul.w	r3, r1, r3
 8000b1a:	4413      	add	r3, r2
 8000b1c:	3334      	adds	r3, #52	; 0x34
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	4b77      	ldr	r3, [pc, #476]	; (8000d00 <ssi_handler+0x768>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a77      	ldr	r2, [pc, #476]	; (8000d04 <ssi_handler+0x76c>)
 8000b28:	2168      	movs	r1, #104	; 0x68
 8000b2a:	fb01 f303 	mul.w	r3, r1, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	3338      	adds	r3, #56	; 0x38
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	6079      	str	r1, [r7, #4]
 8000b36:	4b72      	ldr	r3, [pc, #456]	; (8000d00 <ssi_handler+0x768>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a72      	ldr	r2, [pc, #456]	; (8000d04 <ssi_handler+0x76c>)
 8000b3c:	2168      	movs	r1, #104	; 0x68
 8000b3e:	fb01 f303 	mul.w	r3, r1, r3
 8000b42:	4413      	add	r3, r2
 8000b44:	333c      	adds	r3, #60	; 0x3c
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b6d      	ldr	r3, [pc, #436]	; (8000d00 <ssi_handler+0x768>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a6d      	ldr	r2, [pc, #436]	; (8000d04 <ssi_handler+0x76c>)
 8000b50:	2168      	movs	r1, #104	; 0x68
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	4413      	add	r3, r2
 8000b58:	3340      	adds	r3, #64	; 0x40
 8000b5a:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat, T[variable].rinter, T[variable].dcinter, T[variable].pclick, T[variable].info, T[variable].onoff);
 8000b5c:	4b68      	ldr	r3, [pc, #416]	; (8000d00 <ssi_handler+0x768>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2268      	movs	r2, #104	; 0x68
 8000b62:	fb02 f303 	mul.w	r3, r2, r3
 8000b66:	3340      	adds	r3, #64	; 0x40
 8000b68:	4a66      	ldr	r2, [pc, #408]	; (8000d04 <ssi_handler+0x76c>)
 8000b6a:	4413      	add	r3, r2
 8000b6c:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].binter,
 8000b6e:	4b64      	ldr	r3, [pc, #400]	; (8000d00 <ssi_handler+0x768>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4864      	ldr	r0, [pc, #400]	; (8000d04 <ssi_handler+0x76c>)
 8000b74:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000b78:	fb0c f303 	mul.w	r3, ip, r3
 8000b7c:	4403      	add	r3, r0
 8000b7e:	3364      	adds	r3, #100	; 0x64
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	9309      	str	r3, [sp, #36]	; 0x24
 8000b84:	9208      	str	r2, [sp, #32]
 8000b86:	9107      	str	r1, [sp, #28]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	9306      	str	r3, [sp, #24]
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	9105      	str	r1, [sp, #20]
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	9204      	str	r2, [sp, #16]
 8000b94:	9603      	str	r6, [sp, #12]
 8000b96:	9502      	str	r5, [sp, #8]
 8000b98:	9401      	str	r4, [sp, #4]
 8000b9a:	68f9      	ldr	r1, [r7, #12]
 8000b9c:	9100      	str	r1, [sp, #0]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	495a      	ldr	r1, [pc, #360]	; (8000d0c <ssi_handler+0x774>)
 8000ba4:	6a38      	ldr	r0, [r7, #32]
 8000ba6:	f014 f9f1 	bl	8014f8c <siprintf>
				if (jsongo == 2) {
 8000baa:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <ssi_handler+0x764>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d177      	bne.n	8000ca2 <ssi_handler+0x70a>
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 8000bb2:	4b53      	ldr	r3, [pc, #332]	; (8000d00 <ssi_handler+0x768>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a53      	ldr	r2, [pc, #332]	; (8000d04 <ssi_handler+0x76c>)
 8000bb8:	2168      	movs	r1, #104	; 0x68
 8000bba:	fb01 f303 	mul.w	r3, r1, r3
 8000bbe:	4413      	add	r3, r2
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	617b      	str	r3, [r7, #20]
 8000bc4:	4b4e      	ldr	r3, [pc, #312]	; (8000d00 <ssi_handler+0x768>)
 8000bc6:	6819      	ldr	r1, [r3, #0]
 8000bc8:	6139      	str	r1, [r7, #16]
 8000bca:	4b4d      	ldr	r3, [pc, #308]	; (8000d00 <ssi_handler+0x768>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	4a4c      	ldr	r2, [pc, #304]	; (8000d08 <ssi_handler+0x770>)
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a49      	ldr	r2, [pc, #292]	; (8000d00 <ssi_handler+0x768>)
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	2168      	movs	r1, #104	; 0x68
 8000be0:	fb01 f202 	mul.w	r2, r1, r2
 8000be4:	3218      	adds	r2, #24
 8000be6:	4947      	ldr	r1, [pc, #284]	; (8000d04 <ssi_handler+0x76c>)
 8000be8:	440a      	add	r2, r1
 8000bea:	4945      	ldr	r1, [pc, #276]	; (8000d00 <ssi_handler+0x768>)
 8000bec:	6809      	ldr	r1, [r1, #0]
 8000bee:	4845      	ldr	r0, [pc, #276]	; (8000d04 <ssi_handler+0x76c>)
 8000bf0:	2468      	movs	r4, #104	; 0x68
 8000bf2:	fb04 f101 	mul.w	r1, r4, r1
 8000bf6:	4401      	add	r1, r0
 8000bf8:	3104      	adds	r1, #4
 8000bfa:	6809      	ldr	r1, [r1, #0]
 8000bfc:	4840      	ldr	r0, [pc, #256]	; (8000d00 <ssi_handler+0x768>)
 8000bfe:	6800      	ldr	r0, [r0, #0]
 8000c00:	4c40      	ldr	r4, [pc, #256]	; (8000d04 <ssi_handler+0x76c>)
 8000c02:	2568      	movs	r5, #104	; 0x68
 8000c04:	fb05 f000 	mul.w	r0, r5, r0
 8000c08:	4420      	add	r0, r4
 8000c0a:	3008      	adds	r0, #8
 8000c0c:	6800      	ldr	r0, [r0, #0]
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	4c3b      	ldr	r4, [pc, #236]	; (8000d00 <ssi_handler+0x768>)
 8000c12:	6824      	ldr	r4, [r4, #0]
 8000c14:	4d3b      	ldr	r5, [pc, #236]	; (8000d04 <ssi_handler+0x76c>)
 8000c16:	2668      	movs	r6, #104	; 0x68
 8000c18:	fb06 f404 	mul.w	r4, r6, r4
 8000c1c:	442c      	add	r4, r5
 8000c1e:	340c      	adds	r4, #12
 8000c20:	6820      	ldr	r0, [r4, #0]
 8000c22:	60b8      	str	r0, [r7, #8]
 8000c24:	4d36      	ldr	r5, [pc, #216]	; (8000d00 <ssi_handler+0x768>)
 8000c26:	682d      	ldr	r5, [r5, #0]
 8000c28:	4e36      	ldr	r6, [pc, #216]	; (8000d04 <ssi_handler+0x76c>)
 8000c2a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000c2e:	fb0c f505 	mul.w	r5, ip, r5
 8000c32:	4435      	add	r5, r6
 8000c34:	3510      	adds	r5, #16
 8000c36:	682d      	ldr	r5, [r5, #0]
 8000c38:	4e31      	ldr	r6, [pc, #196]	; (8000d00 <ssi_handler+0x768>)
 8000c3a:	6836      	ldr	r6, [r6, #0]
 8000c3c:	4831      	ldr	r0, [pc, #196]	; (8000d04 <ssi_handler+0x76c>)
 8000c3e:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000c42:	fb0c f606 	mul.w	r6, ip, r6
 8000c46:	4406      	add	r6, r0
 8000c48:	3614      	adds	r6, #20
 8000c4a:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue, T[variable].ponr, T[variable].info, T[variable].onoff);
 8000c4c:	482c      	ldr	r0, [pc, #176]	; (8000d00 <ssi_handler+0x768>)
 8000c4e:	6800      	ldr	r0, [r0, #0]
 8000c50:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000c54:	fb0c fc00 	mul.w	ip, ip, r0
 8000c58:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000c5c:	4829      	ldr	r0, [pc, #164]	; (8000d04 <ssi_handler+0x76c>)
 8000c5e:	4484      	add	ip, r0
 8000c60:	f10c 0004 	add.w	r0, ip, #4
 8000c64:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 8000c66:	4826      	ldr	r0, [pc, #152]	; (8000d00 <ssi_handler+0x768>)
 8000c68:	6800      	ldr	r0, [r0, #0]
 8000c6a:	4c26      	ldr	r4, [pc, #152]	; (8000d04 <ssi_handler+0x76c>)
 8000c6c:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000c70:	fb0c fc00 	mul.w	ip, ip, r0
 8000c74:	44a4      	add	ip, r4
 8000c76:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000c7a:	f8dc 0000 	ldr.w	r0, [ip]
 8000c7e:	9008      	str	r0, [sp, #32]
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	9007      	str	r0, [sp, #28]
 8000c84:	9606      	str	r6, [sp, #24]
 8000c86:	9505      	str	r5, [sp, #20]
 8000c88:	68b8      	ldr	r0, [r7, #8]
 8000c8a:	9004      	str	r0, [sp, #16]
 8000c8c:	68f8      	ldr	r0, [r7, #12]
 8000c8e:	9003      	str	r0, [sp, #12]
 8000c90:	9102      	str	r1, [sp, #8]
 8000c92:	9201      	str	r2, [sp, #4]
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	491d      	ldr	r1, [pc, #116]	; (8000d10 <ssi_handler+0x778>)
 8000c9c:	6a38      	ldr	r0, [r7, #32]
 8000c9e:	f014 f975 	bl	8014f8c <siprintf>
				if (jsongo == 3) {
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <ssi_handler+0x764>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	d118      	bne.n	8000cdc <ssi_handler+0x744>
					sprintf(pcInsert, "{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},", variable, tp[variable].pins, T[variable].topin);
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <ssi_handler+0x768>)
 8000cac:	6819      	ldr	r1, [r3, #0]
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <ssi_handler+0x768>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <ssi_handler+0x770>)
 8000cbc:	441a      	add	r2, r3
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <ssi_handler+0x768>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4810      	ldr	r0, [pc, #64]	; (8000d04 <ssi_handler+0x76c>)
 8000cc4:	2468      	movs	r4, #104	; 0x68
 8000cc6:	fb04 f303 	mul.w	r3, r4, r3
 8000cca:	4403      	add	r3, r0
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	460a      	mov	r2, r1
 8000cd4:	490f      	ldr	r1, [pc, #60]	; (8000d14 <ssi_handler+0x77c>)
 8000cd6:	6a38      	ldr	r0, [r7, #32]
 8000cd8:	f014 f958 	bl	8014f8c <siprintf>
			*next_tag_part = variable;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <ssi_handler+0x768>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ce4:	801a      	strh	r2, [r3, #0]
			variable++;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <ssi_handler+0x768>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <ssi_handler+0x768>)
 8000cee:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 8000cf0:	6a38      	ldr	r0, [r7, #32]
 8000cf2:	f7ff fa77 	bl	80001e4 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	e114      	b.n	8000f26 <ssi_handler+0x98e>
 8000cfc:	20000540 	.word	0x20000540
 8000d00:	2000053c 	.word	0x2000053c
 8000d04:	20000b60 	.word	0x20000b60
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	08016760 	.word	0x08016760
 8000d10:	080167f0 	.word	0x080167f0
 8000d14:	0801686c 	.word	0x0801686c
		if (idtab == 1) {
 8000d18:	4b85      	ldr	r3, [pc, #532]	; (8000f30 <ssi_handler+0x998>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d17c      	bne.n	8000e1a <ssi_handler+0x882>
			sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}", T[id].topin, id, tp[id].pins, T[id].ptype, T[id].binter, T[id].hinter, T[id].repeat,
 8000d20:	4b84      	ldr	r3, [pc, #528]	; (8000f34 <ssi_handler+0x99c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a84      	ldr	r2, [pc, #528]	; (8000f38 <ssi_handler+0x9a0>)
 8000d26:	2168      	movs	r1, #104	; 0x68
 8000d28:	fb01 f303 	mul.w	r3, r1, r3
 8000d2c:	4413      	add	r3, r2
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	4b80      	ldr	r3, [pc, #512]	; (8000f34 <ssi_handler+0x99c>)
 8000d34:	6819      	ldr	r1, [r3, #0]
 8000d36:	6139      	str	r1, [r7, #16]
 8000d38:	4b7e      	ldr	r3, [pc, #504]	; (8000f34 <ssi_handler+0x99c>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	4413      	add	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4a7d      	ldr	r2, [pc, #500]	; (8000f3c <ssi_handler+0x9a4>)
 8000d46:	1899      	adds	r1, r3, r2
 8000d48:	60f9      	str	r1, [r7, #12]
 8000d4a:	4b7a      	ldr	r3, [pc, #488]	; (8000f34 <ssi_handler+0x99c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2268      	movs	r2, #104	; 0x68
 8000d50:	fb02 f303 	mul.w	r3, r2, r3
 8000d54:	3318      	adds	r3, #24
 8000d56:	4a78      	ldr	r2, [pc, #480]	; (8000f38 <ssi_handler+0x9a0>)
 8000d58:	189c      	adds	r4, r3, r2
 8000d5a:	4b76      	ldr	r3, [pc, #472]	; (8000f34 <ssi_handler+0x99c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a76      	ldr	r2, [pc, #472]	; (8000f38 <ssi_handler+0x9a0>)
 8000d60:	2168      	movs	r1, #104	; 0x68
 8000d62:	fb01 f303 	mul.w	r3, r1, r3
 8000d66:	4413      	add	r3, r2
 8000d68:	332c      	adds	r3, #44	; 0x2c
 8000d6a:	681d      	ldr	r5, [r3, #0]
 8000d6c:	4b71      	ldr	r3, [pc, #452]	; (8000f34 <ssi_handler+0x99c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a71      	ldr	r2, [pc, #452]	; (8000f38 <ssi_handler+0x9a0>)
 8000d72:	2168      	movs	r1, #104	; 0x68
 8000d74:	fb01 f303 	mul.w	r3, r1, r3
 8000d78:	4413      	add	r3, r2
 8000d7a:	3330      	adds	r3, #48	; 0x30
 8000d7c:	681e      	ldr	r6, [r3, #0]
 8000d7e:	4b6d      	ldr	r3, [pc, #436]	; (8000f34 <ssi_handler+0x99c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a6d      	ldr	r2, [pc, #436]	; (8000f38 <ssi_handler+0x9a0>)
 8000d84:	2168      	movs	r1, #104	; 0x68
 8000d86:	fb01 f303 	mul.w	r3, r1, r3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	3334      	adds	r3, #52	; 0x34
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	4b68      	ldr	r3, [pc, #416]	; (8000f34 <ssi_handler+0x99c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a68      	ldr	r2, [pc, #416]	; (8000f38 <ssi_handler+0x9a0>)
 8000d98:	2168      	movs	r1, #104	; 0x68
 8000d9a:	fb01 f303 	mul.w	r3, r1, r3
 8000d9e:	4413      	add	r3, r2
 8000da0:	3338      	adds	r3, #56	; 0x38
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	6079      	str	r1, [r7, #4]
 8000da6:	4b63      	ldr	r3, [pc, #396]	; (8000f34 <ssi_handler+0x99c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a63      	ldr	r2, [pc, #396]	; (8000f38 <ssi_handler+0x9a0>)
 8000dac:	2168      	movs	r1, #104	; 0x68
 8000dae:	fb01 f303 	mul.w	r3, r1, r3
 8000db2:	4413      	add	r3, r2
 8000db4:	333c      	adds	r3, #60	; 0x3c
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b5e      	ldr	r3, [pc, #376]	; (8000f34 <ssi_handler+0x99c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a5e      	ldr	r2, [pc, #376]	; (8000f38 <ssi_handler+0x9a0>)
 8000dc0:	2168      	movs	r1, #104	; 0x68
 8000dc2:	fb01 f303 	mul.w	r3, r1, r3
 8000dc6:	4413      	add	r3, r2
 8000dc8:	3340      	adds	r3, #64	; 0x40
 8000dca:	6819      	ldr	r1, [r3, #0]
					T[id].rinter, T[id].dcinter, T[id].pclick, T[id].info, T[id].onoff);
 8000dcc:	4b59      	ldr	r3, [pc, #356]	; (8000f34 <ssi_handler+0x99c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2268      	movs	r2, #104	; 0x68
 8000dd2:	fb02 f303 	mul.w	r3, r2, r3
 8000dd6:	3340      	adds	r3, #64	; 0x40
 8000dd8:	4a57      	ldr	r2, [pc, #348]	; (8000f38 <ssi_handler+0x9a0>)
 8000dda:	4413      	add	r3, r2
 8000ddc:	1d1a      	adds	r2, r3, #4
			sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}", T[id].topin, id, tp[id].pins, T[id].ptype, T[id].binter, T[id].hinter, T[id].repeat,
 8000dde:	4b55      	ldr	r3, [pc, #340]	; (8000f34 <ssi_handler+0x99c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4855      	ldr	r0, [pc, #340]	; (8000f38 <ssi_handler+0x9a0>)
 8000de4:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000de8:	fb0c f303 	mul.w	r3, ip, r3
 8000dec:	4403      	add	r3, r0
 8000dee:	3364      	adds	r3, #100	; 0x64
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	9309      	str	r3, [sp, #36]	; 0x24
 8000df4:	9208      	str	r2, [sp, #32]
 8000df6:	9107      	str	r1, [sp, #28]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	9306      	str	r3, [sp, #24]
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	9105      	str	r1, [sp, #20]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	9204      	str	r2, [sp, #16]
 8000e04:	9603      	str	r6, [sp, #12]
 8000e06:	9502      	str	r5, [sp, #8]
 8000e08:	9401      	str	r4, [sp, #4]
 8000e0a:	68f9      	ldr	r1, [r7, #12]
 8000e0c:	9100      	str	r1, [sp, #0]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	494b      	ldr	r1, [pc, #300]	; (8000f40 <ssi_handler+0x9a8>)
 8000e14:	6a38      	ldr	r0, [r7, #32]
 8000e16:	f014 f8b9 	bl	8014f8c <siprintf>
		if (idtab == 2) {
 8000e1a:	4b45      	ldr	r3, [pc, #276]	; (8000f30 <ssi_handler+0x998>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d177      	bne.n	8000f12 <ssi_handler+0x97a>
			sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}", T[id].topin, id, tp[id].pins, T[id].ptype, T[id].pwm, T[id].on, T[id].istate, T[id].dvalue, T[id].ponr, T[id].info,
 8000e22:	4b44      	ldr	r3, [pc, #272]	; (8000f34 <ssi_handler+0x99c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a44      	ldr	r2, [pc, #272]	; (8000f38 <ssi_handler+0x9a0>)
 8000e28:	2168      	movs	r1, #104	; 0x68
 8000e2a:	fb01 f303 	mul.w	r3, r1, r3
 8000e2e:	4413      	add	r3, r2
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	4b3f      	ldr	r3, [pc, #252]	; (8000f34 <ssi_handler+0x99c>)
 8000e36:	6819      	ldr	r1, [r3, #0]
 8000e38:	6139      	str	r1, [r7, #16]
 8000e3a:	4b3e      	ldr	r3, [pc, #248]	; (8000f34 <ssi_handler+0x99c>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <ssi_handler+0x9a4>)
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a3a      	ldr	r2, [pc, #232]	; (8000f34 <ssi_handler+0x99c>)
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	2168      	movs	r1, #104	; 0x68
 8000e50:	fb01 f202 	mul.w	r2, r1, r2
 8000e54:	3218      	adds	r2, #24
 8000e56:	4938      	ldr	r1, [pc, #224]	; (8000f38 <ssi_handler+0x9a0>)
 8000e58:	440a      	add	r2, r1
 8000e5a:	4936      	ldr	r1, [pc, #216]	; (8000f34 <ssi_handler+0x99c>)
 8000e5c:	6809      	ldr	r1, [r1, #0]
 8000e5e:	4836      	ldr	r0, [pc, #216]	; (8000f38 <ssi_handler+0x9a0>)
 8000e60:	2468      	movs	r4, #104	; 0x68
 8000e62:	fb04 f101 	mul.w	r1, r4, r1
 8000e66:	4401      	add	r1, r0
 8000e68:	3104      	adds	r1, #4
 8000e6a:	6809      	ldr	r1, [r1, #0]
 8000e6c:	4831      	ldr	r0, [pc, #196]	; (8000f34 <ssi_handler+0x99c>)
 8000e6e:	6800      	ldr	r0, [r0, #0]
 8000e70:	4c31      	ldr	r4, [pc, #196]	; (8000f38 <ssi_handler+0x9a0>)
 8000e72:	2568      	movs	r5, #104	; 0x68
 8000e74:	fb05 f000 	mul.w	r0, r5, r0
 8000e78:	4420      	add	r0, r4
 8000e7a:	3008      	adds	r0, #8
 8000e7c:	6800      	ldr	r0, [r0, #0]
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	4c2c      	ldr	r4, [pc, #176]	; (8000f34 <ssi_handler+0x99c>)
 8000e82:	6824      	ldr	r4, [r4, #0]
 8000e84:	4d2c      	ldr	r5, [pc, #176]	; (8000f38 <ssi_handler+0x9a0>)
 8000e86:	2668      	movs	r6, #104	; 0x68
 8000e88:	fb06 f404 	mul.w	r4, r6, r4
 8000e8c:	442c      	add	r4, r5
 8000e8e:	340c      	adds	r4, #12
 8000e90:	6820      	ldr	r0, [r4, #0]
 8000e92:	60b8      	str	r0, [r7, #8]
 8000e94:	4d27      	ldr	r5, [pc, #156]	; (8000f34 <ssi_handler+0x99c>)
 8000e96:	682d      	ldr	r5, [r5, #0]
 8000e98:	4e27      	ldr	r6, [pc, #156]	; (8000f38 <ssi_handler+0x9a0>)
 8000e9a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000e9e:	fb0c f505 	mul.w	r5, ip, r5
 8000ea2:	4435      	add	r5, r6
 8000ea4:	3510      	adds	r5, #16
 8000ea6:	682d      	ldr	r5, [r5, #0]
 8000ea8:	4e22      	ldr	r6, [pc, #136]	; (8000f34 <ssi_handler+0x99c>)
 8000eaa:	6836      	ldr	r6, [r6, #0]
 8000eac:	4822      	ldr	r0, [pc, #136]	; (8000f38 <ssi_handler+0x9a0>)
 8000eae:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000eb2:	fb0c f606 	mul.w	r6, ip, r6
 8000eb6:	4406      	add	r6, r0
 8000eb8:	3614      	adds	r6, #20
 8000eba:	6836      	ldr	r6, [r6, #0]
 8000ebc:	481d      	ldr	r0, [pc, #116]	; (8000f34 <ssi_handler+0x99c>)
 8000ebe:	6800      	ldr	r0, [r0, #0]
 8000ec0:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000ec4:	fb0c fc00 	mul.w	ip, ip, r0
 8000ec8:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000ecc:	481a      	ldr	r0, [pc, #104]	; (8000f38 <ssi_handler+0x9a0>)
 8000ece:	4484      	add	ip, r0
 8000ed0:	f10c 0004 	add.w	r0, ip, #4
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <ssi_handler+0x99c>)
 8000ed8:	6800      	ldr	r0, [r0, #0]
 8000eda:	4c17      	ldr	r4, [pc, #92]	; (8000f38 <ssi_handler+0x9a0>)
 8000edc:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8000ee0:	fb0c fc00 	mul.w	ip, ip, r0
 8000ee4:	44a4      	add	ip, r4
 8000ee6:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000eea:	f8dc 0000 	ldr.w	r0, [ip]
 8000eee:	9008      	str	r0, [sp, #32]
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	9007      	str	r0, [sp, #28]
 8000ef4:	9606      	str	r6, [sp, #24]
 8000ef6:	9505      	str	r5, [sp, #20]
 8000ef8:	68b8      	ldr	r0, [r7, #8]
 8000efa:	9004      	str	r0, [sp, #16]
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	9003      	str	r0, [sp, #12]
 8000f00:	9102      	str	r1, [sp, #8]
 8000f02:	9201      	str	r2, [sp, #4]
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	490e      	ldr	r1, [pc, #56]	; (8000f44 <ssi_handler+0x9ac>)
 8000f0c:	6a38      	ldr	r0, [r7, #32]
 8000f0e:	f014 f83d 	bl	8014f8c <siprintf>
		return strlen(pcInsert);
 8000f12:	6a38      	ldr	r0, [r7, #32]
 8000f14:	f7ff f966 	bl	80001e4 <strlen>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	e003      	b.n	8000f26 <ssi_handler+0x98e>
		break;
 8000f1e:	bf00      	nop
 8000f20:	e000      	b.n	8000f24 <ssi_handler+0x98c>
		break;
 8000f22:	bf00      	nop
	}
	return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	372c      	adds	r7, #44	; 0x2c
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000548 	.word	0x20000548
 8000f34:	20000544 	.word	0x20000544
 8000f38:	20000b60 	.word	0x20000b60
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	08016890 	.word	0x08016890
 8000f44:	08016920 	.word	0x08016920

08000f48 <CGIForm_Handler>:
static const tCGI URL_TABLES[] = { { "/json.shtml", CGIForm_Handler }, { "/form1.shtml", CGIForm_Handler1 }, { "/form2.shtml", CGIForm_Handler1 } };

const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));

//tCGI CGI_TAB[3]; // 3. For LED создадим массив для LED CGI
const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	603b      	str	r3, [r7, #0]
	printf("GET OK 1 \n");
 8000f56:	4816      	ldr	r0, [pc, #88]	; (8000fb0 <CGIForm_Handler+0x68>)
 8000f58:	f013 ff9c 	bl	8014e94 <puts>
	if (iIndex == 0) {
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d120      	bne.n	8000fa4 <CGIForm_Handler+0x5c>
		for (int i = 0; i < iNumParams; i++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	e019      	b.n	8000f9c <CGIForm_Handler+0x54>
			if (strcmp(pcParam[i], "jsongo") == 0)  // if the fname string is found
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	4413      	add	r3, r2
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4910      	ldr	r1, [pc, #64]	; (8000fb4 <CGIForm_Handler+0x6c>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f92b 	bl	80001d0 <strcmp>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d10a      	bne.n	8000f96 <CGIForm_Handler+0x4e>
					{
				//memset(name, '\0', 30);  // Очищаем массив перед записью новых данных.
				//strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
				jsongo = atoi(pcValue[i]);
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f013 fe96 	bl	8014cbc <atoi>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a09      	ldr	r2, [pc, #36]	; (8000fb8 <CGIForm_Handler+0x70>)
 8000f94:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	dbe1      	blt.n	8000f68 <CGIForm_Handler+0x20>
			}
		}
	}
	return "/json.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <CGIForm_Handler+0x74>)
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	080169c4 	.word	0x080169c4
 8000fb4:	080169d0 	.word	0x080169d0
 8000fb8:	20000540 	.word	0x20000540
 8000fbc:	08016998 	.word	0x08016998

08000fc0 <CGIForm_Handler1>:

const char* CGIForm_Handler1(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
	printf("GET 1 OK  \n");
 8000fce:	4828      	ldr	r0, [pc, #160]	; (8001070 <CGIForm_Handler1+0xb0>)
 8000fd0:	f013 ff60 	bl	8014e94 <puts>
	if (iIndex == 1 || iIndex == 2) {
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d002      	beq.n	8000fe0 <CGIForm_Handler1+0x20>
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d137      	bne.n	8001050 <CGIForm_Handler1+0x90>
		for (int i = 0; i < iNumParams; i++) {
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e030      	b.n	8001048 <CGIForm_Handler1+0x88>
			if (strcmp(pcParam[i], "id") == 0)  // if the fname string is found
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4920      	ldr	r1, [pc, #128]	; (8001074 <CGIForm_Handler1+0xb4>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8ec 	bl	80001d0 <strcmp>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10a      	bne.n	8001014 <CGIForm_Handler1+0x54>
					{
				id = atoi(pcValue[i]);
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f013 fe57 	bl	8014cbc <atoi>
 800100e:	4603      	mov	r3, r0
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <CGIForm_Handler1+0xb8>)
 8001012:	6013      	str	r3, [r2, #0]
				//printf("+++++++++ %d \n", id);
			}
			if (strcmp(pcParam[i], "tab") == 0)  // if the fname string is found
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4917      	ldr	r1, [pc, #92]	; (800107c <CGIForm_Handler1+0xbc>)
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f8d5 	bl	80001d0 <strcmp>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d10a      	bne.n	8001042 <CGIForm_Handler1+0x82>
					{
				idtab = atoi(pcValue[i]);
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	4413      	add	r3, r2
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f013 fe40 	bl	8014cbc <atoi>
 800103c:	4603      	mov	r3, r0
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <CGIForm_Handler1+0xc0>)
 8001040:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbca      	blt.n	8000fe6 <CGIForm_Handler1+0x26>
				//printf("+++++++++ %d \n", idtab);
			}
		}
	}
	if (iIndex == 1) {
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d101      	bne.n	800105a <CGIForm_Handler1+0x9a>
		return "/form1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <CGIForm_Handler1+0xc4>)
 8001058:	e005      	b.n	8001066 <CGIForm_Handler1+0xa6>
	} else if (iIndex == 2) {
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d101      	bne.n	8001064 <CGIForm_Handler1+0xa4>
		return "/form2.shtml";
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <CGIForm_Handler1+0xc8>)
 8001062:	e000      	b.n	8001066 <CGIForm_Handler1+0xa6>
	} else {
		return "/404.html";
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <CGIForm_Handler1+0xcc>)
	}
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	080169d8 	.word	0x080169d8
 8001074:	080169e4 	.word	0x080169e4
 8001078:	20000544 	.word	0x20000544
 800107c:	080169e8 	.word	0x080169e8
 8001080:	20000548 	.word	0x20000548
 8001084:	080169a4 	.word	0x080169a4
 8001088:	080169b4 	.word	0x080169b4
 800108c:	080169ec 	.word	0x080169ec

08001090 <httpd_post_begin>:
static void *current_connection;
static void *valid_connection;
int http_post_content_len;
// char *urls;!!!!!!!!!!!!!!!!!!!!!!!!!!
char urls[30] = { 0 };
err_t httpd_post_begin(void *connection, const char *uri, const char *http_request, uint16_t http_request_len, int content_len, char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	807b      	strh	r3, [r7, #2]
	//LWIP_UNUSED_ARG(connection);
	//LWIP_UNUSED_ARG(http_request);
	//LWIP_UNUSED_ARG(http_request_len);
	//LWIP_UNUSED_ARG(content_len);
	//LWIP_UNUSED_ARG(post_auto_wnd);
	http_post_content_len = content_len;
 800109e:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <httpd_post_begin+0x44>)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	6013      	str	r3, [r2, #0]
	strncpy(urls, uri, 15);
 80010a4:	220f      	movs	r2, #15
 80010a6:	68b9      	ldr	r1, [r7, #8]
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <httpd_post_begin+0x48>)
 80010aa:	f013 ffc5 	bl	8015038 <strncpy>
	//printf("+++++++++uri %s +++++++++++------- \r\n",uri);  // Вывод /select.shtml +
	//printf("httpd_post_begin: Post Content: %s\n",  http_request);
	//printf("%d \r\n",  http_post_content_len);
	if (current_connection != connection) {
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <httpd_post_begin+0x4c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d007      	beq.n	80010c8 <httpd_post_begin+0x38>
		current_connection = connection;
 80010b8:	4a08      	ldr	r2, [pc, #32]	; (80010dc <httpd_post_begin+0x4c>)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <httpd_post_begin+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
		//snprintf(response_uri, response_uri_len, "/cgi_leds.html");
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e001      	b.n	80010cc <httpd_post_begin+0x3c>
	}
	return ERR_VAL;
 80010c8:	f06f 0305 	mvn.w	r3, #5
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000b5c 	.word	0x20000b5c
 80010d8:	20000554 	.word	0x20000554
 80010dc:	2000054c 	.word	0x2000054c
 80010e0:	20000550 	.word	0x20000550

080010e4 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
	printf("OK POST 2 \r\n");
 80010ee:	4817      	ldr	r0, [pc, #92]	; (800114c <httpd_post_receive_data+0x68>)
 80010f0:	f013 fed0 	bl	8014e94 <puts>
	char *data;
	if (current_connection == connection && p != NULL) {
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <httpd_post_receive_data+0x6c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d117      	bne.n	800112e <httpd_post_receive_data+0x4a>
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d014      	beq.n	800112e <httpd_post_receive_data+0x4a>
		data = p->payload;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	60fb      	str	r3, [r7, #12]
		printf("DATA %s \r\n", data);
 800110a:	68f9      	ldr	r1, [r7, #12]
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <httpd_post_receive_data+0x70>)
 800110e:	f013 fe3b 	bl	8014d88 <iprintf>
		strcat(bufervar, data);
 8001112:	68f9      	ldr	r1, [r7, #12]
 8001114:	4810      	ldr	r0, [pc, #64]	; (8001158 <httpd_post_receive_data+0x74>)
 8001116:	f013 ff59 	bl	8014fcc <strcat>
		pbuf_free(p);
 800111a:	6838      	ldr	r0, [r7, #0]
 800111c:	f00a fd26 	bl	800bb6c <pbuf_free>
		memset(data, '\0', sizeof(*data));
 8001120:	2201      	movs	r2, #1
 8001122:	2100      	movs	r1, #0
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f013 fe27 	bl	8014d78 <memset>
		return ERR_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e00a      	b.n	8001144 <httpd_post_receive_data+0x60>
	}
	if (p != NULL) {
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d005      	beq.n	8001140 <httpd_post_receive_data+0x5c>
		printf("END \r\n");
 8001134:	4809      	ldr	r0, [pc, #36]	; (800115c <httpd_post_receive_data+0x78>)
 8001136:	f013 fead 	bl	8014e94 <puts>
		pbuf_free(p);
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f00a fd16 	bl	800bb6c <pbuf_free>
	}
	return ERR_VAL;
 8001140:	f06f 0305 	mvn.w	r3, #5
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	080169f8 	.word	0x080169f8
 8001150:	2000054c 	.word	0x2000054c
 8001154:	08016a04 	.word	0x08016a04
 8001158:	200022f0 	.word	0x200022f0
 800115c:	08016a10 	.word	0x08016a10

08001160 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len) {
 8001160:	b580      	push	{r7, lr}
 8001162:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8001166:	af00      	add	r7, sp, #0
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	6018      	str	r0, [r3, #0]
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	6019      	str	r1, [r3, #0]
 8001174:	1dbb      	adds	r3, r7, #6
 8001176:	801a      	strh	r2, [r3, #0]
	printf("OK POST 3 \r\n");
 8001178:	48cc      	ldr	r0, [pc, #816]	; (80014ac <httpd_post_finished+0x34c>)
 800117a:	f013 fe8b 	bl	8014e94 <puts>

	char *token;
	char *token1;
	char *token2;
	char *name1;
	int z = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	//char urlline[http_post_content_len];
	char urlline[1000];
	char name0[50];
	char nametoken[50];

	memset(name0, '\0', sizeof(name0));
 8001184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001188:	2232      	movs	r2, #50	; 0x32
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f013 fdf3 	bl	8014d78 <memset>
	//memset(urlline, '\0', sizeof(urlline));
	strncpy(urlline, bufervar, http_post_content_len);
 8001192:	4bc7      	ldr	r3, [pc, #796]	; (80014b0 <httpd_post_finished+0x350>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800119c:	49c5      	ldr	r1, [pc, #788]	; (80014b4 <httpd_post_finished+0x354>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f013 ff4a 	bl	8015038 <strncpy>

	printf("%s \r\n", urlline);
 80011a4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80011a8:	4619      	mov	r1, r3
 80011aa:	48c3      	ldr	r0, [pc, #780]	; (80014b8 <httpd_post_finished+0x358>)
 80011ac:	f013 fdec 	bl	8014d88 <iprintf>
	printf("COUNT %d \r\n", http_post_content_len);
 80011b0:	4bbf      	ldr	r3, [pc, #764]	; (80014b0 <httpd_post_finished+0x350>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	48c1      	ldr	r0, [pc, #772]	; (80014bc <httpd_post_finished+0x35c>)
 80011b8:	f013 fde6 	bl	8014d88 <iprintf>
	char *rest = urlline;
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80011c4:	601a      	str	r2, [r3, #0]
	while ((token = strtok_r(rest, "&", &rest))) {
 80011c6:	e211      	b.n	80015ec <httpd_post_finished+0x48c>
		//printf("%s\n", token);
		char *rest1 = token;
 80011c8:	f107 0318 	add.w	r3, r7, #24
 80011cc:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 80011d0:	601a      	str	r2, [r3, #0]
		strcat(name0, token); // решение с пустой строкой
 80011d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011d6:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 80011da:	4618      	mov	r0, r3
 80011dc:	f013 fef6 	bl	8014fcc <strcat>
		y = 0;
 80011e0:	4bb7      	ldr	r3, [pc, #732]	; (80014c0 <httpd_post_finished+0x360>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 80011e6:	e1bd      	b.n	8001564 <httpd_post_finished+0x404>
			z = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
			if (y == 0) {
 80011ee:	4bb4      	ldr	r3, [pc, #720]	; (80014c0 <httpd_post_finished+0x360>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d12b      	bne.n	800124e <httpd_post_finished+0xee>
				//printf("NAME %s\n", token1);
				// получение id
				char *rest2 = token1;
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 80011fe:	601a      	str	r2, [r3, #0]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8001200:	e016      	b.n	8001230 <httpd_post_finished+0xd0>
					if (z == 0) {
 8001202:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <httpd_post_finished+0xb2>
						name1 = token2;
 800120a:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800120e:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
					}
					if (z == 1) {
 8001212:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001216:	2b01      	cmp	r3, #1
 8001218:	d105      	bne.n	8001226 <httpd_post_finished+0xc6>
						id = atoi(token2);
 800121a:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 800121e:	f013 fd4d 	bl	8014cbc <atoi>
 8001222:	f8c7 047c 	str.w	r0, [r7, #1148]	; 0x47c
						//printf("ID %d\n", id);
					}
					z++;
 8001226:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800122a:	3301      	adds	r3, #1
 800122c:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f107 0214 	add.w	r2, r7, #20
 800123a:	49a2      	ldr	r1, [pc, #648]	; (80014c4 <httpd_post_finished+0x364>)
 800123c:	4618      	mov	r0, r3
 800123e:	f013 ff4d 	bl	80150dc <strtok_r>
 8001242:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
 8001246:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1d9      	bne.n	8001202 <httpd_post_finished+0xa2>
				}
			}
			if (y == 1) {
 800124e:	4b9c      	ldr	r3, [pc, #624]	; (80014c0 <httpd_post_finished+0x360>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	f040 8181 	bne.w	800155a <httpd_post_finished+0x3fa>
				// значение переменной
				//printf("VAL %s\n", token1);
				// пишем в структуру
				if (strcmp(name1, "ptype") == 0) {
 8001258:	499b      	ldr	r1, [pc, #620]	; (80014c8 <httpd_post_finished+0x368>)
 800125a:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800125e:	f7fe ffb7 	bl	80001d0 <strcmp>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d10d      	bne.n	8001284 <httpd_post_finished+0x124>
					strcpy(T[id].ptype, token1);
 8001268:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800126c:	2268      	movs	r2, #104	; 0x68
 800126e:	fb02 f303 	mul.w	r3, r2, r3
 8001272:	3318      	adds	r3, #24
 8001274:	4a95      	ldr	r2, [pc, #596]	; (80014cc <httpd_post_finished+0x36c>)
 8001276:	4413      	add	r3, r2
 8001278:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 800127c:	4618      	mov	r0, r3
 800127e:	f013 fec1 	bl	8015004 <strcpy>
 8001282:	e16a      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "topin") == 0) {
 8001284:	4992      	ldr	r1, [pc, #584]	; (80014d0 <httpd_post_finished+0x370>)
 8001286:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800128a:	f7fe ffa1 	bl	80001d0 <strcmp>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10d      	bne.n	80012b0 <httpd_post_finished+0x150>
					T[id].topin = atoi(token1);
 8001294:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001298:	f013 fd10 	bl	8014cbc <atoi>
 800129c:	4602      	mov	r2, r0
 800129e:	498b      	ldr	r1, [pc, #556]	; (80014cc <httpd_post_finished+0x36c>)
 80012a0:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80012a4:	2068      	movs	r0, #104	; 0x68
 80012a6:	fb00 f303 	mul.w	r3, r0, r3
 80012aa:	440b      	add	r3, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e154      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "binter") == 0) {
 80012b0:	4988      	ldr	r1, [pc, #544]	; (80014d4 <httpd_post_finished+0x374>)
 80012b2:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 80012b6:	f7fe ff8b 	bl	80001d0 <strcmp>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10e      	bne.n	80012de <httpd_post_finished+0x17e>
					T[id].binter = atoi(token1);
 80012c0:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80012c4:	f013 fcfa 	bl	8014cbc <atoi>
 80012c8:	4602      	mov	r2, r0
 80012ca:	4980      	ldr	r1, [pc, #512]	; (80014cc <httpd_post_finished+0x36c>)
 80012cc:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80012d0:	2068      	movs	r0, #104	; 0x68
 80012d2:	fb00 f303 	mul.w	r3, r0, r3
 80012d6:	440b      	add	r3, r1
 80012d8:	332c      	adds	r3, #44	; 0x2c
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e13d      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "hinter") == 0) {
 80012de:	497e      	ldr	r1, [pc, #504]	; (80014d8 <httpd_post_finished+0x378>)
 80012e0:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 80012e4:	f7fe ff74 	bl	80001d0 <strcmp>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10e      	bne.n	800130c <httpd_post_finished+0x1ac>
					T[id].hinter = atoi(token1);
 80012ee:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80012f2:	f013 fce3 	bl	8014cbc <atoi>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4974      	ldr	r1, [pc, #464]	; (80014cc <httpd_post_finished+0x36c>)
 80012fa:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80012fe:	2068      	movs	r0, #104	; 0x68
 8001300:	fb00 f303 	mul.w	r3, r0, r3
 8001304:	440b      	add	r3, r1
 8001306:	3330      	adds	r3, #48	; 0x30
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	e126      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "repeat") == 0) {
 800130c:	4973      	ldr	r1, [pc, #460]	; (80014dc <httpd_post_finished+0x37c>)
 800130e:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001312:	f7fe ff5d 	bl	80001d0 <strcmp>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10e      	bne.n	800133a <httpd_post_finished+0x1da>
					T[id].repeat = atoi(token1);
 800131c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001320:	f013 fccc 	bl	8014cbc <atoi>
 8001324:	4602      	mov	r2, r0
 8001326:	4969      	ldr	r1, [pc, #420]	; (80014cc <httpd_post_finished+0x36c>)
 8001328:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800132c:	2068      	movs	r0, #104	; 0x68
 800132e:	fb00 f303 	mul.w	r3, r0, r3
 8001332:	440b      	add	r3, r1
 8001334:	3334      	adds	r3, #52	; 0x34
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e10f      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "rinter") == 0) {
 800133a:	4969      	ldr	r1, [pc, #420]	; (80014e0 <httpd_post_finished+0x380>)
 800133c:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001340:	f7fe ff46 	bl	80001d0 <strcmp>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10e      	bne.n	8001368 <httpd_post_finished+0x208>
					T[id].rinter = atoi(token1);
 800134a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800134e:	f013 fcb5 	bl	8014cbc <atoi>
 8001352:	4602      	mov	r2, r0
 8001354:	495d      	ldr	r1, [pc, #372]	; (80014cc <httpd_post_finished+0x36c>)
 8001356:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800135a:	2068      	movs	r0, #104	; 0x68
 800135c:	fb00 f303 	mul.w	r3, r0, r3
 8001360:	440b      	add	r3, r1
 8001362:	3338      	adds	r3, #56	; 0x38
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e0f8      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "dcinter") == 0) {
 8001368:	495e      	ldr	r1, [pc, #376]	; (80014e4 <httpd_post_finished+0x384>)
 800136a:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800136e:	f7fe ff2f 	bl	80001d0 <strcmp>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d10e      	bne.n	8001396 <httpd_post_finished+0x236>
					T[id].dcinter = atoi(token1);
 8001378:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800137c:	f013 fc9e 	bl	8014cbc <atoi>
 8001380:	4602      	mov	r2, r0
 8001382:	4952      	ldr	r1, [pc, #328]	; (80014cc <httpd_post_finished+0x36c>)
 8001384:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001388:	2068      	movs	r0, #104	; 0x68
 800138a:	fb00 f303 	mul.w	r3, r0, r3
 800138e:	440b      	add	r3, r1
 8001390:	333c      	adds	r3, #60	; 0x3c
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	e0e1      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "pclick") == 0) {
 8001396:	4954      	ldr	r1, [pc, #336]	; (80014e8 <httpd_post_finished+0x388>)
 8001398:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800139c:	f7fe ff18 	bl	80001d0 <strcmp>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d10e      	bne.n	80013c4 <httpd_post_finished+0x264>
					T[id].pclick = atoi(token1);
 80013a6:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80013aa:	f013 fc87 	bl	8014cbc <atoi>
 80013ae:	4602      	mov	r2, r0
 80013b0:	4946      	ldr	r1, [pc, #280]	; (80014cc <httpd_post_finished+0x36c>)
 80013b2:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80013b6:	2068      	movs	r0, #104	; 0x68
 80013b8:	fb00 f303 	mul.w	r3, r0, r3
 80013bc:	440b      	add	r3, r1
 80013be:	3340      	adds	r3, #64	; 0x40
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	e0ca      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "info") == 0) {
 80013c4:	4949      	ldr	r1, [pc, #292]	; (80014ec <httpd_post_finished+0x38c>)
 80013c6:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 80013ca:	f7fe ff01 	bl	80001d0 <strcmp>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10e      	bne.n	80013f2 <httpd_post_finished+0x292>
					//memset(T[id].info, '\0', sizeof(T[id].info));
					strcpy(T[id].info, token1);
 80013d4:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80013d8:	2268      	movs	r2, #104	; 0x68
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	3340      	adds	r3, #64	; 0x40
 80013e0:	4a3a      	ldr	r2, [pc, #232]	; (80014cc <httpd_post_finished+0x36c>)
 80013e2:	4413      	add	r3, r2
 80013e4:	3304      	adds	r3, #4
 80013e6:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 80013ea:	4618      	mov	r0, r3
 80013ec:	f013 fe0a 	bl	8015004 <strcpy>
 80013f0:	e0b3      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "onoff") == 0) {
 80013f2:	493f      	ldr	r1, [pc, #252]	; (80014f0 <httpd_post_finished+0x390>)
 80013f4:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 80013f8:	f7fe feea 	bl	80001d0 <strcmp>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10e      	bne.n	8001420 <httpd_post_finished+0x2c0>
					T[id].onoff = atoi(token1);
 8001402:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001406:	f013 fc59 	bl	8014cbc <atoi>
 800140a:	4602      	mov	r2, r0
 800140c:	492f      	ldr	r1, [pc, #188]	; (80014cc <httpd_post_finished+0x36c>)
 800140e:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001412:	2068      	movs	r0, #104	; 0x68
 8001414:	fb00 f303 	mul.w	r3, r0, r3
 8001418:	440b      	add	r3, r1
 800141a:	3364      	adds	r3, #100	; 0x64
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e09c      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "pwm") == 0) {
 8001420:	4934      	ldr	r1, [pc, #208]	; (80014f4 <httpd_post_finished+0x394>)
 8001422:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001426:	f7fe fed3 	bl	80001d0 <strcmp>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10e      	bne.n	800144e <httpd_post_finished+0x2ee>
					T[id].pwm = atoi(token1);
 8001430:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001434:	f013 fc42 	bl	8014cbc <atoi>
 8001438:	4602      	mov	r2, r0
 800143a:	4924      	ldr	r1, [pc, #144]	; (80014cc <httpd_post_finished+0x36c>)
 800143c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001440:	2068      	movs	r0, #104	; 0x68
 8001442:	fb00 f303 	mul.w	r3, r0, r3
 8001446:	440b      	add	r3, r1
 8001448:	3304      	adds	r3, #4
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e085      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "on") == 0) {
 800144e:	492a      	ldr	r1, [pc, #168]	; (80014f8 <httpd_post_finished+0x398>)
 8001450:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001454:	f7fe febc 	bl	80001d0 <strcmp>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10e      	bne.n	800147c <httpd_post_finished+0x31c>
					T[id].on = atoi(token1);
 800145e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001462:	f013 fc2b 	bl	8014cbc <atoi>
 8001466:	4602      	mov	r2, r0
 8001468:	4918      	ldr	r1, [pc, #96]	; (80014cc <httpd_post_finished+0x36c>)
 800146a:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800146e:	2068      	movs	r0, #104	; 0x68
 8001470:	fb00 f303 	mul.w	r3, r0, r3
 8001474:	440b      	add	r3, r1
 8001476:	3308      	adds	r3, #8
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e06e      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "istate") == 0) {
 800147c:	491f      	ldr	r1, [pc, #124]	; (80014fc <httpd_post_finished+0x39c>)
 800147e:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001482:	f7fe fea5 	bl	80001d0 <strcmp>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d139      	bne.n	8001500 <httpd_post_finished+0x3a0>
					T[id].istate = atoi(token1);
 800148c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001490:	f013 fc14 	bl	8014cbc <atoi>
 8001494:	4602      	mov	r2, r0
 8001496:	490d      	ldr	r1, [pc, #52]	; (80014cc <httpd_post_finished+0x36c>)
 8001498:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800149c:	2068      	movs	r0, #104	; 0x68
 800149e:	fb00 f303 	mul.w	r3, r0, r3
 80014a2:	440b      	add	r3, r1
 80014a4:	330c      	adds	r3, #12
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e057      	b.n	800155a <httpd_post_finished+0x3fa>
 80014aa:	bf00      	nop
 80014ac:	08016a18 	.word	0x08016a18
 80014b0:	20000b5c 	.word	0x20000b5c
 80014b4:	200022f0 	.word	0x200022f0
 80014b8:	08016a24 	.word	0x08016a24
 80014bc:	08016a2c 	.word	0x08016a2c
 80014c0:	20004bf4 	.word	0x20004bf4
 80014c4:	08016a38 	.word	0x08016a38
 80014c8:	08016a3c 	.word	0x08016a3c
 80014cc:	20000b60 	.word	0x20000b60
 80014d0:	08016a44 	.word	0x08016a44
 80014d4:	08016a4c 	.word	0x08016a4c
 80014d8:	08016a54 	.word	0x08016a54
 80014dc:	08016a5c 	.word	0x08016a5c
 80014e0:	08016a64 	.word	0x08016a64
 80014e4:	08016a6c 	.word	0x08016a6c
 80014e8:	08016a74 	.word	0x08016a74
 80014ec:	08016a7c 	.word	0x08016a7c
 80014f0:	08016a84 	.word	0x08016a84
 80014f4:	08016a8c 	.word	0x08016a8c
 80014f8:	08016a90 	.word	0x08016a90
 80014fc:	08016a94 	.word	0x08016a94
				} else if (strcmp(name1, "dvalue") == 0) {
 8001500:	4960      	ldr	r1, [pc, #384]	; (8001684 <httpd_post_finished+0x524>)
 8001502:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001506:	f7fe fe63 	bl	80001d0 <strcmp>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10e      	bne.n	800152e <httpd_post_finished+0x3ce>
					T[id].dvalue = atoi(token1);
 8001510:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001514:	f013 fbd2 	bl	8014cbc <atoi>
 8001518:	4602      	mov	r2, r0
 800151a:	495b      	ldr	r1, [pc, #364]	; (8001688 <httpd_post_finished+0x528>)
 800151c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001520:	2068      	movs	r0, #104	; 0x68
 8001522:	fb00 f303 	mul.w	r3, r0, r3
 8001526:	440b      	add	r3, r1
 8001528:	3310      	adds	r3, #16
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e015      	b.n	800155a <httpd_post_finished+0x3fa>
				} else if (strcmp(name1, "ponr") == 0) {
 800152e:	4957      	ldr	r1, [pc, #348]	; (800168c <httpd_post_finished+0x52c>)
 8001530:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001534:	f7fe fe4c 	bl	80001d0 <strcmp>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10d      	bne.n	800155a <httpd_post_finished+0x3fa>
					T[id].ponr = atoi(token1);
 800153e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001542:	f013 fbbb 	bl	8014cbc <atoi>
 8001546:	4602      	mov	r2, r0
 8001548:	494f      	ldr	r1, [pc, #316]	; (8001688 <httpd_post_finished+0x528>)
 800154a:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800154e:	2068      	movs	r0, #104	; 0x68
 8001550:	fb00 f303 	mul.w	r3, r0, r3
 8001554:	440b      	add	r3, r1
 8001556:	3314      	adds	r3, #20
 8001558:	601a      	str	r2, [r3, #0]
				}
			}
			y++;
 800155a:	4b4d      	ldr	r3, [pc, #308]	; (8001690 <httpd_post_finished+0x530>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <httpd_post_finished+0x530>)
 8001562:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8001564:	f107 0318 	add.w	r3, r7, #24
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f107 0218 	add.w	r2, r7, #24
 800156e:	4949      	ldr	r1, [pc, #292]	; (8001694 <httpd_post_finished+0x534>)
 8001570:	4618      	mov	r0, r3
 8001572:	f013 fdb3 	bl	80150dc <strtok_r>
 8001576:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
 800157a:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 800157e:	2b00      	cmp	r3, #0
 8001580:	f47f ae32 	bne.w	80011e8 <httpd_post_finished+0x88>
		}
		// решение с пустой строкой
		sprintf(nametoken, "infofield_%d=", id); // Если поле пустое то его заполняем "null".
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 800158c:	4942      	ldr	r1, [pc, #264]	; (8001698 <httpd_post_finished+0x538>)
 800158e:	4618      	mov	r0, r3
 8001590:	f013 fcfc 	bl	8014f8c <siprintf>
		if (strcmp(name0, nametoken) == 0) {
 8001594:	f107 0220 	add.w	r2, r7, #32
 8001598:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800159c:	4611      	mov	r1, r2
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe fe16 	bl	80001d0 <strcmp>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d10d      	bne.n	80015c6 <httpd_post_finished+0x466>
			strcpy(T[id].info, "null");
 80015aa:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80015ae:	2268      	movs	r2, #104	; 0x68
 80015b0:	fb02 f303 	mul.w	r3, r2, r3
 80015b4:	3340      	adds	r3, #64	; 0x40
 80015b6:	4a34      	ldr	r2, [pc, #208]	; (8001688 <httpd_post_finished+0x528>)
 80015b8:	4413      	add	r3, r2
 80015ba:	3304      	adds	r3, #4
 80015bc:	4a37      	ldr	r2, [pc, #220]	; (800169c <httpd_post_finished+0x53c>)
 80015be:	6810      	ldr	r0, [r2, #0]
 80015c0:	6018      	str	r0, [r3, #0]
 80015c2:	7912      	ldrb	r2, [r2, #4]
 80015c4:	711a      	strb	r2, [r3, #4]
			//printf("Yes \n");
		}
		memset(name0, '\0', sizeof(name0));
 80015c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015ca:	2232      	movs	r2, #50	; 0x32
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f013 fbd2 	bl	8014d78 <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 80015d4:	f107 0320 	add.w	r3, r7, #32
 80015d8:	2232      	movs	r2, #50	; 0x32
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f013 fbcb 	bl	8014d78 <memset>
		z++;
 80015e2:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80015e6:	3301      	adds	r3, #1
 80015e8:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	while ((token = strtok_r(rest, "&", &rest))) {
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f107 021c 	add.w	r2, r7, #28
 80015f6:	492a      	ldr	r1, [pc, #168]	; (80016a0 <httpd_post_finished+0x540>)
 80015f8:	4618      	mov	r0, r3
 80015fa:	f013 fd6f 	bl	80150dc <strtok_r>
 80015fe:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
 8001602:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f adde 	bne.w	80011c8 <httpd_post_finished+0x68>
	}

	memset(urlline, '\0', sizeof(urlline));
 800160c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f013 fbae 	bl	8014d78 <memset>
	memset(bufervar, '\0', sizeof(bufervar));
 800161c:	f642 1204 	movw	r2, #10500	; 0x2904
 8001620:	2100      	movs	r1, #0
 8001622:	4820      	ldr	r0, [pc, #128]	; (80016a4 <httpd_post_finished+0x544>)
 8001624:	f013 fba8 	bl	8014d78 <memset>
	//memset(json, '\0', sizeof(json));
	//printf("----------- %s ------- \r\n", urls);
	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	//snprintf(response_uri, response_uri_len, "/tab.shtml");
	snprintf(response_uri, response_uri_len, urls);
 8001628:	1dbb      	adds	r3, r7, #6
 800162a:	8819      	ldrh	r1, [r3, #0]
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <httpd_post_finished+0x548>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	f013 fc76 	bl	8014f24 <sniprintf>
	if (current_connection == connection) {
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <httpd_post_finished+0x54c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f107 020c 	add.w	r2, r7, #12
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d114      	bne.n	8001670 <httpd_post_finished+0x510>
		if (valid_connection == connection) {
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <httpd_post_finished+0x550>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f107 020c 	add.w	r2, r7, #12
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d107      	bne.n	8001664 <httpd_post_finished+0x504>
			/* login succeeded */
			//snprintf(response_uri, response_uri_len, "/tab.shtml");
			snprintf(response_uri, response_uri_len, urls);
 8001654:	1dbb      	adds	r3, r7, #6
 8001656:	8819      	ldrh	r1, [r3, #0]
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <httpd_post_finished+0x548>)
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	f013 fc60 	bl	8014f24 <sniprintf>
		}
		current_connection = NULL;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <httpd_post_finished+0x54c>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <httpd_post_finished+0x550>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
}
 8001678:	bf00      	nop
 800167a:	f507 6791 	add.w	r7, r7, #1160	; 0x488
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	08016a9c 	.word	0x08016a9c
 8001688:	20000b60 	.word	0x20000b60
 800168c:	08016aa4 	.word	0x08016aa4
 8001690:	20004bf4 	.word	0x20004bf4
 8001694:	08016aac 	.word	0x08016aac
 8001698:	08016ab0 	.word	0x08016ab0
 800169c:	08016ac0 	.word	0x08016ac0
 80016a0:	08016ac8 	.word	0x08016ac8
 80016a4:	200022f0 	.word	0x200022f0
 80016a8:	20000554 	.word	0x20000554
 80016ac:	2000054c 	.word	0x2000054c
 80016b0:	20000550 	.word	0x20000550

080016b4 <http_server_init>:

//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	httpd_init();
 80016b8:	f008 fe34 	bl	800a324 <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 6);
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <http_server_init+0x24>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2206      	movs	r2, #6
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <http_server_init+0x28>)
 80016c6:	f008 fe4d 	bl	800a364 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	//CGI_TAB[0] = FORM_CGI; // CGI структуру
	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); // 5. И теперь мы передадим структуру массива в CGI_handle!
 80016ca:	2303      	movs	r3, #3
 80016cc:	4619      	mov	r1, r3
 80016ce:	4804      	ldr	r0, [pc, #16]	; (80016e0 <http_server_init+0x2c>)
 80016d0:	f008 fe8a 	bl	800a3e8 <http_set_cgi_handlers>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200004a4 	.word	0x200004a4
 80016dc:	08000599 	.word	0x08000599
 80016e0:	08019c4c 	.word	0x08019c4c

080016e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001700:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001704:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001708:	2b00      	cmp	r3, #0
 800170a:	d00b      	beq.n	8001724 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800170c:	e000      	b.n	8001710 <ITM_SendChar+0x2c>
    {
      __NOP();
 800170e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001710:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f9      	beq.n	800170e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800171a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001724:	687b      	ldr	r3, [r7, #4]
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	b29a      	uxth	r2, r3
 8001744:	2332      	movs	r3, #50	; 0x32
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <_write+0x48>)
 800174a:	f004 ff2e 	bl	80065aa <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e009      	b.n	8001768 <_write+0x34>
		ITM_SendChar(*ptr++);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60ba      	str	r2, [r7, #8]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ffc1 	bl	80016e4 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf1      	blt.n	8001754 <_write+0x20>
	}
	return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20004d90 	.word	0x20004d90

08001780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001784:	f000 fc80 	bl	8002088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001788:	f000 f816 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800178c:	f000 f8f0 	bl	8001970 <MX_GPIO_Init>
  MX_DMA_Init();
 8001790:	f000 f8c6 	bl	8001920 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001794:	f000 f87a 	bl	800188c <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 8001798:	f000 f898 	bl	80018cc <MX_USART6_UART_Init>
  MX_LWIP_Init();
 800179c:	f006 f980 	bl	8007aa0 <MX_LWIP_Init>
  MX_FATFS_Init();
 80017a0:	f005 ff40 	bl	8007624 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 80017a4:	f7ff ff86 	bl	80016b4 <http_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      ethernetif_input(&gnetif);/* Read a received packet from the Ethernet buffers and send it
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <main+0x34>)
 80017aa:	f006 fd51 	bl	8008250 <ethernetif_input>
       to the lwIP for handling */
      sys_check_timeouts();/* Handle timeouts */
 80017ae:	f010 fdc9 	bl	8012344 <sys_check_timeouts>
      ethernetif_input(&gnetif);/* Read a received packet from the Ethernet buffers and send it
 80017b2:	e7f9      	b.n	80017a8 <main+0x28>
 80017b4:	20004c78 	.word	0x20004c78

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b094      	sub	sp, #80	; 0x50
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	f107 0320 	add.w	r3, r7, #32
 80017c2:	2230      	movs	r2, #48	; 0x30
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f013 fad6 	bl	8014d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <SystemClock_Config+0xcc>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	4a27      	ldr	r2, [pc, #156]	; (8001884 <SystemClock_Config+0xcc>)
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ea:	6413      	str	r3, [r2, #64]	; 0x40
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <SystemClock_Config+0xcc>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <SystemClock_Config+0xd0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a21      	ldr	r2, [pc, #132]	; (8001888 <SystemClock_Config+0xd0>)
 8001802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <SystemClock_Config+0xd0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001814:	2301      	movs	r3, #1
 8001816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800181e:	2302      	movs	r3, #2
 8001820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001828:	2304      	movs	r3, #4
 800182a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800182c:	23a8      	movs	r3, #168	; 0xa8
 800182e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001830:	2302      	movs	r3, #2
 8001832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001834:	2307      	movs	r3, #7
 8001836:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001838:	f107 0320 	add.w	r3, r7, #32
 800183c:	4618      	mov	r0, r3
 800183e:	f002 fbe5 	bl	800400c <HAL_RCC_OscConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001848:	f000 f910 	bl	8001a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800184c:	230f      	movs	r3, #15
 800184e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001858:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800185c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800185e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001862:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	2105      	movs	r1, #5
 800186a:	4618      	mov	r0, r3
 800186c:	f002 fe46 	bl	80044fc <HAL_RCC_ClockConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001876:	f000 f8f9 	bl	8001a6c <Error_Handler>
  }
}
 800187a:	bf00      	nop
 800187c:	3750      	adds	r7, #80	; 0x50
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800
 8001888:	40007000 	.word	0x40007000

0800188c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_SDIO_SD_Init+0x38>)
 8001892:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <MX_SDIO_SD_Init+0x3c>)
 8001894:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_SDIO_SD_Init+0x38>)
 8001898:	2200      	movs	r2, #0
 800189a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_SDIO_SD_Init+0x38>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_SDIO_SD_Init+0x38>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_SDIO_SD_Init+0x38>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <MX_SDIO_SD_Init+0x38>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <MX_SDIO_SD_Init+0x38>)
 80018b6:	2205      	movs	r2, #5
 80018b8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	20004d0c 	.word	0x20004d0c
 80018c8:	40012c00 	.word	0x40012c00

080018cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <MX_USART6_UART_Init+0x4c>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <MX_USART6_UART_Init+0x50>)
 80018d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <MX_USART6_UART_Init+0x4c>)
 80018d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <MX_USART6_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <MX_USART6_UART_Init+0x4c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <MX_USART6_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <MX_USART6_UART_Init+0x4c>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <MX_USART6_UART_Init+0x4c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <MX_USART6_UART_Init+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <MX_USART6_UART_Init+0x4c>)
 8001904:	f004 fe04 	bl	8006510 <HAL_UART_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800190e:	f000 f8ad 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20004d90 	.word	0x20004d90
 800191c:	40011400 	.word	0x40011400

08001920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <MX_DMA_Init+0x4c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <MX_DMA_Init+0x4c>)
 8001930:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <MX_DMA_Init+0x4c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	203b      	movs	r0, #59	; 0x3b
 8001948:	f000 fcbc 	bl	80022c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800194c:	203b      	movs	r0, #59	; 0x3b
 800194e:	f000 fcd5 	bl	80022fc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2045      	movs	r0, #69	; 0x45
 8001958:	f000 fcb4 	bl	80022c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800195c:	2045      	movs	r0, #69	; 0x45
 800195e:	f000 fccd 	bl	80022fc <HAL_NVIC_EnableIRQ>

}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
 800198a:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <MX_GPIO_Init+0xd0>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a2c      	ldr	r2, [pc, #176]	; (8001a40 <MX_GPIO_Init+0xd0>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <MX_GPIO_Init+0xd0>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <MX_GPIO_Init+0xd0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a25      	ldr	r2, [pc, #148]	; (8001a40 <MX_GPIO_Init+0xd0>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <MX_GPIO_Init+0xd0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <MX_GPIO_Init+0xd0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a1e      	ldr	r2, [pc, #120]	; (8001a40 <MX_GPIO_Init+0xd0>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <MX_GPIO_Init+0xd0>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_GPIO_Init+0xd0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a17      	ldr	r2, [pc, #92]	; (8001a40 <MX_GPIO_Init+0xd0>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_GPIO_Init+0xd0>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_GPIO_Init+0xd0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <MX_GPIO_Init+0xd0>)
 8001a00:	f043 0308 	orr.w	r3, r3, #8
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_GPIO_Init+0xd0>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2101      	movs	r1, #1
 8001a16:	480b      	ldr	r0, [pc, #44]	; (8001a44 <MX_GPIO_Init+0xd4>)
 8001a18:	f002 fade 	bl	8003fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_GPIO_Init+0xd4>)
 8001a34:	f002 f934 	bl	8003ca0 <HAL_GPIO_Init>

}
 8001a38:	bf00      	nop
 8001a3a:	3728      	adds	r7, #40	; 0x28
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020c00 	.word	0x40020c00

08001a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d101      	bne.n	8001a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a5a:	f000 fb37 	bl	80020cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40002000 	.word	0x40002000

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <Error_Handler+0x8>
	...

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	603b      	str	r3, [r7, #0]
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	; 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a70      	ldr	r2, [pc, #448]	; (8001ca8 <HAL_SD_MspInit+0x1e0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	f040 80da 	bne.w	8001ca0 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	4b6e      	ldr	r3, [pc, #440]	; (8001cac <HAL_SD_MspInit+0x1e4>)
 8001af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af4:	4a6d      	ldr	r2, [pc, #436]	; (8001cac <HAL_SD_MspInit+0x1e4>)
 8001af6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001afa:	6453      	str	r3, [r2, #68]	; 0x44
 8001afc:	4b6b      	ldr	r3, [pc, #428]	; (8001cac <HAL_SD_MspInit+0x1e4>)
 8001afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	4b67      	ldr	r3, [pc, #412]	; (8001cac <HAL_SD_MspInit+0x1e4>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	4a66      	ldr	r2, [pc, #408]	; (8001cac <HAL_SD_MspInit+0x1e4>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6313      	str	r3, [r2, #48]	; 0x30
 8001b18:	4b64      	ldr	r3, [pc, #400]	; (8001cac <HAL_SD_MspInit+0x1e4>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b24:	2300      	movs	r3, #0
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	4b60      	ldr	r3, [pc, #384]	; (8001cac <HAL_SD_MspInit+0x1e4>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	4a5f      	ldr	r2, [pc, #380]	; (8001cac <HAL_SD_MspInit+0x1e4>)
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	6313      	str	r3, [r2, #48]	; 0x30
 8001b34:	4b5d      	ldr	r3, [pc, #372]	; (8001cac <HAL_SD_MspInit+0x1e4>)
 8001b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001b40:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b52:	230c      	movs	r3, #12
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4854      	ldr	r0, [pc, #336]	; (8001cb0 <HAL_SD_MspInit+0x1e8>)
 8001b5e:	f002 f89f 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b74:	230c      	movs	r3, #12
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	484c      	ldr	r0, [pc, #304]	; (8001cb0 <HAL_SD_MspInit+0x1e8>)
 8001b80:	f002 f88e 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b84:	2304      	movs	r3, #4
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b94:	230c      	movs	r3, #12
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4845      	ldr	r0, [pc, #276]	; (8001cb4 <HAL_SD_MspInit+0x1ec>)
 8001ba0:	f002 f87e 	bl	8003ca0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001ba4:	4b44      	ldr	r3, [pc, #272]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001ba6:	4a45      	ldr	r2, [pc, #276]	; (8001cbc <HAL_SD_MspInit+0x1f4>)
 8001ba8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001baa:	4b43      	ldr	r3, [pc, #268]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bb0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb2:	4b41      	ldr	r3, [pc, #260]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb8:	4b3f      	ldr	r3, [pc, #252]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bbe:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bcc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001bce:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bd0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bd4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bd8:	2220      	movs	r2, #32
 8001bda:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001be2:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001be4:	2204      	movs	r2, #4
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bea:	2203      	movs	r2, #3
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001bee:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bf0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001bf6:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001bf8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001bfe:	482e      	ldr	r0, [pc, #184]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001c00:	f000 fb8a 	bl	8002318 <HAL_DMA_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001c0a:	f7ff ff2f 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a29      	ldr	r2, [pc, #164]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
 8001c14:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <HAL_SD_MspInit+0x1f0>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c1c:	4a29      	ldr	r2, [pc, #164]	; (8001cc4 <HAL_SD_MspInit+0x1fc>)
 8001c1e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001c20:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c26:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c28:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c2a:	2240      	movs	r2, #64	; 0x40
 8001c2c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c3a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c42:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c4a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001c4c:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c4e:	2220      	movs	r2, #32
 8001c50:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c60:	2203      	movs	r2, #3
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c6e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001c74:	4812      	ldr	r0, [pc, #72]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c76:	f000 fb4f 	bl	8002318 <HAL_DMA_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001c80:	f7ff fef4 	bl	8001a6c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c88:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c8a:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_SD_MspInit+0x1f8>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2031      	movs	r0, #49	; 0x31
 8001c96:	f000 fb15 	bl	80022c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001c9a:	2031      	movs	r0, #49	; 0x31
 8001c9c:	f000 fb2e 	bl	80022fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40012c00 	.word	0x40012c00
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020800 	.word	0x40020800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	20004c18 	.word	0x20004c18
 8001cbc:	40026458 	.word	0x40026458
 8001cc0:	20004cac 	.word	0x20004cac
 8001cc4:	400264a0 	.word	0x400264a0

08001cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <HAL_UART_MspInit+0x84>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d12b      	bne.n	8001d42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_UART_MspInit+0x88>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_UART_MspInit+0x88>)
 8001cf4:	f043 0320 	orr.w	r3, r3, #32
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_UART_MspInit+0x88>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_UART_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <HAL_UART_MspInit+0x88>)
 8001d10:	f043 0304 	orr.w	r3, r3, #4
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_UART_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d32:	2308      	movs	r3, #8
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <HAL_UART_MspInit+0x8c>)
 8001d3e:	f001 ffaf 	bl	8003ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40011400 	.word	0x40011400
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020800 	.word	0x40020800

08001d58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	; 0x30
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	202d      	movs	r0, #45	; 0x2d
 8001d6e:	f000 faa9 	bl	80022c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001d72:	202d      	movs	r0, #45	; 0x2d
 8001d74:	f000 fac2 	bl	80022fc <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_InitTick+0xa4>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <HAL_InitTick+0xa4>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6413      	str	r3, [r2, #64]	; 0x40
 8001d88:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <HAL_InitTick+0xa4>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d94:	f107 0210 	add.w	r2, r7, #16
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fda8 	bl	80048f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001da4:	f002 fd7e 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 8001da8:	4603      	mov	r3, r0
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db0:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <HAL_InitTick+0xa8>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0c9b      	lsrs	r3, r3, #18
 8001db8:	3b01      	subs	r3, #1
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_InitTick+0xac>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <HAL_InitTick+0xb0>)
 8001dc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_InitTick+0xac>)
 8001dc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dc8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001dca:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <HAL_InitTick+0xac>)
 8001dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dce:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_InitTick+0xac>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_InitTick+0xac>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <HAL_InitTick+0xac>)
 8001dde:	f004 f8ea 	bl	8005fb6 <HAL_TIM_Base_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001de8:	4806      	ldr	r0, [pc, #24]	; (8001e04 <HAL_InitTick+0xac>)
 8001dea:	f004 f93d 	bl	8006068 <HAL_TIM_Base_Start_IT>
 8001dee:	4603      	mov	r3, r0
 8001df0:	e000      	b.n	8001df4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3730      	adds	r7, #48	; 0x30
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	431bde83 	.word	0x431bde83
 8001e04:	20004dd4 	.word	0x20004dd4
 8001e08:	40002000 	.word	0x40002000

08001e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <NMI_Handler+0x4>

08001e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <HardFault_Handler+0x4>

08001e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <MemManage_Handler+0x4>

08001e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001e6a:	f004 f96d 	bl	8006148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20004dd4 	.word	0x20004dd4

08001e78 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <SDIO_IRQHandler+0x10>)
 8001e7e:	f002 ffe1 	bl	8004e44 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20004d0c 	.word	0x20004d0c

08001e8c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <DMA2_Stream3_IRQHandler+0x10>)
 8001e92:	f000 fb69 	bl	8002568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20004c18 	.word	0x20004c18

08001ea0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA2_Stream6_IRQHandler+0x10>)
 8001ea6:	f000 fb5f 	bl	8002568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20004cac 	.word	0x20004cac

08001eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
	return 1;
 8001eb8:	2301      	movs	r3, #1
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_kill>:

int _kill(int pid, int sig)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ece:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <_kill+0x20>)
 8001ed0:	2216      	movs	r2, #22
 8001ed2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	2000d7f8 	.word	0x2000d7f8

08001ee8 <_exit>:

void _exit (int status)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ffe5 	bl	8001ec4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001efa:	e7fe      	b.n	8001efa <_exit+0x12>

08001efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e00a      	b.n	8001f24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f0e:	f3af 8000 	nop.w
 8001f12:	4601      	mov	r1, r0
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	60ba      	str	r2, [r7, #8]
 8001f1a:	b2ca      	uxtb	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf0      	blt.n	8001f0e <_read+0x12>
	}

return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_isatty>:

int _isatty(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	return 1;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d205      	bcs.n	8001fdc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <_sbrk+0x6c>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fda:	e009      	b.n	8001ff0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <_sbrk+0x64>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a06      	ldr	r2, [pc, #24]	; (8002004 <_sbrk+0x64>)
 8001fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	20020000 	.word	0x20020000
 8002000:	00000400 	.word	0x00000400
 8002004:	20000574 	.word	0x20000574
 8002008:	2000d808 	.word	0x2000d808
 800200c:	2000d7f8 	.word	0x2000d7f8

08002010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800206c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800203a:	490e      	ldr	r1, [pc, #56]	; (8002074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800203c:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0b      	ldr	r2, [pc, #44]	; (800207c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002050:	4c0b      	ldr	r4, [pc, #44]	; (8002080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800205e:	f7ff ffd7 	bl	8002010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002062:	f012 fe2f 	bl	8014cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002066:	f7ff fb8b 	bl	8001780 <main>
  bx  lr    
 800206a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800206c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	20000520 	.word	0x20000520
  ldr r2, =_sidata
 8002078:	0801f2a8 	.word	0x0801f2a8
  ldr r2, =_sbss
 800207c:	20000520 	.word	0x20000520
  ldr r4, =_ebss
 8002080:	2000d808 	.word	0x2000d808

08002084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC_IRQHandler>
	...

08002088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <HAL_Init+0x40>)
 8002092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_Init+0x40>)
 800209e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_Init+0x40>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f000 f8fc 	bl	80022ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b6:	200f      	movs	r0, #15
 80020b8:	f7ff fe4e 	bl	8001d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020bc:	f7ff fcdc 	bl	8001a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023c00 	.word	0x40023c00

080020cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x20>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_IncTick+0x24>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_IncTick+0x24>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	200004b0 	.word	0x200004b0
 80020f0:	20004e1c 	.word	0x20004e1c

080020f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return uwTick;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_GetTick+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20004e1c 	.word	0x20004e1c

0800210c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002114:	f7ff ffee 	bl	80020f4 <HAL_GetTick>
 8002118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002124:	d005      	beq.n	8002132 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002126:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <HAL_Delay+0x44>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002132:	bf00      	nop
 8002134:	f7ff ffde 	bl	80020f4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	429a      	cmp	r2, r3
 8002142:	d8f7      	bhi.n	8002134 <HAL_Delay+0x28>
  {
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200004b0 	.word	0x200004b0

08002154 <__NVIC_SetPriorityGrouping>:
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002170:	4013      	ands	r3, r2
 8002172:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800217c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002186:	4a04      	ldr	r2, [pc, #16]	; (8002198 <__NVIC_SetPriorityGrouping+0x44>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	60d3      	str	r3, [r2, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <__NVIC_GetPriorityGrouping>:
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <__NVIC_GetPriorityGrouping+0x18>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 0307 	and.w	r3, r3, #7
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_EnableIRQ>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	db0b      	blt.n	80021e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ca:	79fb      	ldrb	r3, [r7, #7]
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4907      	ldr	r1, [pc, #28]	; (80021f0 <__NVIC_EnableIRQ+0x38>)
 80021d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	2001      	movs	r0, #1
 80021da:	fa00 f202 	lsl.w	r2, r0, r2
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <__NVIC_SetPriority>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	6039      	str	r1, [r7, #0]
 80021fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db0a      	blt.n	800221e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	b2da      	uxtb	r2, r3
 800220c:	490c      	ldr	r1, [pc, #48]	; (8002240 <__NVIC_SetPriority+0x4c>)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	0112      	lsls	r2, r2, #4
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	440b      	add	r3, r1
 8002218:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800221c:	e00a      	b.n	8002234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4908      	ldr	r1, [pc, #32]	; (8002244 <__NVIC_SetPriority+0x50>)
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	3b04      	subs	r3, #4
 800222c:	0112      	lsls	r2, r2, #4
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	440b      	add	r3, r1
 8002232:	761a      	strb	r2, [r3, #24]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000e100 	.word	0xe000e100
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <NVIC_EncodePriority>:
{
 8002248:	b480      	push	{r7}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f1c3 0307 	rsb	r3, r3, #7
 8002262:	2b04      	cmp	r3, #4
 8002264:	bf28      	it	cs
 8002266:	2304      	movcs	r3, #4
 8002268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3304      	adds	r3, #4
 800226e:	2b06      	cmp	r3, #6
 8002270:	d902      	bls.n	8002278 <NVIC_EncodePriority+0x30>
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3b03      	subs	r3, #3
 8002276:	e000      	b.n	800227a <NVIC_EncodePriority+0x32>
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	401a      	ands	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002290:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	43d9      	mvns	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	4313      	orrs	r3, r2
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff ff4c 	bl	8002154 <__NVIC_SetPriorityGrouping>
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d6:	f7ff ff61 	bl	800219c <__NVIC_GetPriorityGrouping>
 80022da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	6978      	ldr	r0, [r7, #20]
 80022e2:	f7ff ffb1 	bl	8002248 <NVIC_EncodePriority>
 80022e6:	4602      	mov	r2, r0
 80022e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ff80 	bl	80021f4 <__NVIC_SetPriority>
}
 80022f4:	bf00      	nop
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff54 	bl	80021b8 <__NVIC_EnableIRQ>
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff fee6 	bl	80020f4 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e099      	b.n	8002468 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0201 	bic.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002354:	e00f      	b.n	8002376 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002356:	f7ff fecd 	bl	80020f4 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b05      	cmp	r3, #5
 8002362:	d908      	bls.n	8002376 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2203      	movs	r2, #3
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e078      	b.n	8002468 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e8      	bne.n	8002356 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_DMA_Init+0x158>)
 8002390:	4013      	ands	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d107      	bne.n	80023e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	4313      	orrs	r3, r2
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f023 0307 	bic.w	r3, r3, #7
 80023f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	4313      	orrs	r3, r2
 8002400:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	2b04      	cmp	r3, #4
 8002408:	d117      	bne.n	800243a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00e      	beq.n	800243a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 fa9d 	bl	800295c <DMA_CheckFifoParam>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002436:	2301      	movs	r3, #1
 8002438:	e016      	b.n	8002468 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fa54 	bl	80028f0 <DMA_CalcBaseAndBitshift>
 8002448:	4603      	mov	r3, r0
 800244a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	223f      	movs	r2, #63	; 0x3f
 8002452:	409a      	lsls	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	f010803f 	.word	0xf010803f

08002474 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_DMA_Start_IT+0x26>
 8002496:	2302      	movs	r3, #2
 8002498:	e040      	b.n	800251c <HAL_DMA_Start_IT+0xa8>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d12f      	bne.n	800250e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2202      	movs	r2, #2
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f9e6 	bl	8002894 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	223f      	movs	r2, #63	; 0x3f
 80024ce:	409a      	lsls	r2, r3
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0216 	orr.w	r2, r2, #22
 80024e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0208 	orr.w	r2, r2, #8
 80024fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0201 	orr.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e005      	b.n	800251a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002516:	2302      	movs	r3, #2
 8002518:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800251a:	7dfb      	ldrb	r3, [r7, #23]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d004      	beq.n	8002542 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00c      	b.n	800255c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2205      	movs	r2, #5
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002574:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <HAL_DMA_IRQHandler+0x258>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a92      	ldr	r2, [pc, #584]	; (80027c4 <HAL_DMA_IRQHandler+0x25c>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0a9b      	lsrs	r3, r3, #10
 8002580:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002592:	2208      	movs	r2, #8
 8002594:	409a      	lsls	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4013      	ands	r3, r2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01a      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d013      	beq.n	80025d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0204 	bic.w	r2, r2, #4
 80025ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	2208      	movs	r2, #8
 80025c2:	409a      	lsls	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	2201      	movs	r2, #1
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d012      	beq.n	800260a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	2201      	movs	r2, #1
 80025f8:	409a      	lsls	r2, r3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f043 0202 	orr.w	r2, r3, #2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2204      	movs	r2, #4
 8002610:	409a      	lsls	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4013      	ands	r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d012      	beq.n	8002640 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00b      	beq.n	8002640 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2204      	movs	r2, #4
 800262e:	409a      	lsls	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	f043 0204 	orr.w	r2, r3, #4
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002644:	2210      	movs	r2, #16
 8002646:	409a      	lsls	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4013      	ands	r3, r2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d043      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d03c      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	2210      	movs	r2, #16
 8002664:	409a      	lsls	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d018      	beq.n	80026aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d108      	bne.n	8002698 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d024      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4798      	blx	r3
 8002696:	e01f      	b.n	80026d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01b      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	4798      	blx	r3
 80026a8:	e016      	b.n	80026d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0208 	bic.w	r2, r2, #8
 80026c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	2220      	movs	r2, #32
 80026de:	409a      	lsls	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 808e 	beq.w	8002806 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 8086 	beq.w	8002806 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fe:	2220      	movs	r2, #32
 8002700:	409a      	lsls	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b05      	cmp	r3, #5
 8002710:	d136      	bne.n	8002780 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0216 	bic.w	r2, r2, #22
 8002720:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002730:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <HAL_DMA_IRQHandler+0x1da>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0208 	bic.w	r2, r2, #8
 8002750:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002756:	223f      	movs	r2, #63	; 0x3f
 8002758:	409a      	lsls	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002772:	2b00      	cmp	r3, #0
 8002774:	d07d      	beq.n	8002872 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
        }
        return;
 800277e:	e078      	b.n	8002872 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01c      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d108      	bne.n	80027ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d030      	beq.n	8002806 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
 80027ac:	e02b      	b.n	8002806 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d027      	beq.n	8002806 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
 80027be:	e022      	b.n	8002806 <HAL_DMA_IRQHandler+0x29e>
 80027c0:	200004a8 	.word	0x200004a8
 80027c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0210 	bic.w	r2, r2, #16
 80027e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	2b00      	cmp	r3, #0
 800280c:	d032      	beq.n	8002874 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d022      	beq.n	8002860 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2205      	movs	r2, #5
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3301      	adds	r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	429a      	cmp	r2, r3
 800283c:	d307      	bcc.n	800284e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f2      	bne.n	8002832 <HAL_DMA_IRQHandler+0x2ca>
 800284c:	e000      	b.n	8002850 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800284e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	4798      	blx	r3
 8002870:	e000      	b.n	8002874 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002872:	bf00      	nop
    }
  }
}
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop

0800287c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d108      	bne.n	80028d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028d2:	e007      	b.n	80028e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	60da      	str	r2, [r3, #12]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3b10      	subs	r3, #16
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <DMA_CalcBaseAndBitshift+0x64>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <DMA_CalcBaseAndBitshift+0x68>)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2b03      	cmp	r3, #3
 800291c:	d909      	bls.n	8002932 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002926:	f023 0303 	bic.w	r3, r3, #3
 800292a:	1d1a      	adds	r2, r3, #4
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	659a      	str	r2, [r3, #88]	; 0x58
 8002930:	e007      	b.n	8002942 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	aaaaaaab 	.word	0xaaaaaaab
 8002958:	08019c7c 	.word	0x08019c7c

0800295c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002964:	2300      	movs	r3, #0
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d11f      	bne.n	80029b6 <DMA_CheckFifoParam+0x5a>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b03      	cmp	r3, #3
 800297a:	d856      	bhi.n	8002a2a <DMA_CheckFifoParam+0xce>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <DMA_CheckFifoParam+0x28>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	08002995 	.word	0x08002995
 8002988:	080029a7 	.word	0x080029a7
 800298c:	08002995 	.word	0x08002995
 8002990:	08002a2b 	.word	0x08002a2b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d046      	beq.n	8002a2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a4:	e043      	b.n	8002a2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ae:	d140      	bne.n	8002a32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b4:	e03d      	b.n	8002a32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029be:	d121      	bne.n	8002a04 <DMA_CheckFifoParam+0xa8>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d837      	bhi.n	8002a36 <DMA_CheckFifoParam+0xda>
 80029c6:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <DMA_CheckFifoParam+0x70>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	080029dd 	.word	0x080029dd
 80029d0:	080029e3 	.word	0x080029e3
 80029d4:	080029dd 	.word	0x080029dd
 80029d8:	080029f5 	.word	0x080029f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      break;
 80029e0:	e030      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d025      	beq.n	8002a3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f2:	e022      	b.n	8002a3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029fc:	d11f      	bne.n	8002a3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a02:	e01c      	b.n	8002a3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d903      	bls.n	8002a12 <DMA_CheckFifoParam+0xb6>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d003      	beq.n	8002a18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a10:	e018      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
      break;
 8002a16:	e015      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00e      	beq.n	8002a42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
      break;
 8002a28:	e00b      	b.n	8002a42 <DMA_CheckFifoParam+0xe6>
      break;
 8002a2a:	bf00      	nop
 8002a2c:	e00a      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e008      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
 8002a34:	e006      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;
 8002a36:	bf00      	nop
 8002a38:	e004      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e002      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a3e:	bf00      	nop
 8002a40:	e000      	b.n	8002a44 <DMA_CheckFifoParam+0xe8>
      break;
 8002a42:	bf00      	nop
    }
  } 
  
  return status; 
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop

08002a54 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002a64:	4baa      	ldr	r3, [pc, #680]	; (8002d10 <HAL_ETH_Init+0x2bc>)
 8002a66:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e183      	b.n	8002d82 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f005 f938 	bl	8007d04 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	4b9e      	ldr	r3, [pc, #632]	; (8002d14 <HAL_ETH_Init+0x2c0>)
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	4a9d      	ldr	r2, [pc, #628]	; (8002d14 <HAL_ETH_Init+0x2c0>)
 8002a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa2:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa4:	4b9b      	ldr	r3, [pc, #620]	; (8002d14 <HAL_ETH_Init+0x2c0>)
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ab0:	4b99      	ldr	r3, [pc, #612]	; (8002d18 <HAL_ETH_Init+0x2c4>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a98      	ldr	r2, [pc, #608]	; (8002d18 <HAL_ETH_Init+0x2c4>)
 8002ab6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aba:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002abc:	4b96      	ldr	r3, [pc, #600]	; (8002d18 <HAL_ETH_Init+0x2c4>)
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4994      	ldr	r1, [pc, #592]	; (8002d18 <HAL_ETH_Init+0x2c4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0201 	orr.w	r2, r2, #1
 8002adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ae0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae2:	f7ff fb07 	bl	80020f4 <HAL_GetTick>
 8002ae6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002ae8:	e011      	b.n	8002b0e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002aea:	f7ff fb03 	bl	80020f4 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002af8:	d909      	bls.n	8002b0e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2203      	movs	r2, #3
 8002afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e139      	b.n	8002d82 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1e4      	bne.n	8002aea <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f023 031c 	bic.w	r3, r3, #28
 8002b2e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b30:	f001 feac 	bl	800488c <HAL_RCC_GetHCLKFreq>
 8002b34:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	4a78      	ldr	r2, [pc, #480]	; (8002d1c <HAL_ETH_Init+0x2c8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d908      	bls.n	8002b50 <HAL_ETH_Init+0xfc>
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4a77      	ldr	r2, [pc, #476]	; (8002d20 <HAL_ETH_Init+0x2cc>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d804      	bhi.n	8002b50 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f043 0308 	orr.w	r3, r3, #8
 8002b4c:	61fb      	str	r3, [r7, #28]
 8002b4e:	e027      	b.n	8002ba0 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4a73      	ldr	r2, [pc, #460]	; (8002d20 <HAL_ETH_Init+0x2cc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d908      	bls.n	8002b6a <HAL_ETH_Init+0x116>
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	4a6d      	ldr	r2, [pc, #436]	; (8002d10 <HAL_ETH_Init+0x2bc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d204      	bcs.n	8002b6a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f043 030c 	orr.w	r3, r3, #12
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	e01a      	b.n	8002ba0 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	4a68      	ldr	r2, [pc, #416]	; (8002d10 <HAL_ETH_Init+0x2bc>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d303      	bcc.n	8002b7a <HAL_ETH_Init+0x126>
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4a6b      	ldr	r2, [pc, #428]	; (8002d24 <HAL_ETH_Init+0x2d0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d911      	bls.n	8002b9e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	4a69      	ldr	r2, [pc, #420]	; (8002d24 <HAL_ETH_Init+0x2d0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d908      	bls.n	8002b94 <HAL_ETH_Init+0x140>
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4a68      	ldr	r2, [pc, #416]	; (8002d28 <HAL_ETH_Init+0x2d4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d804      	bhi.n	8002b94 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e005      	b.n	8002ba0 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f043 0310 	orr.w	r3, r3, #16
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	e000      	b.n	8002ba0 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002b9e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002ba8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002bac:	2100      	movs	r1, #0
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fb98 	bl	80032e4 <HAL_ETH_WritePHYRegister>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002bbe:	6939      	ldr	r1, [r7, #16]
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fd4d 	bl	8003660 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0d7      	b.n	8002d82 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002bd2:	20ff      	movs	r0, #255	; 0xff
 8002bd4:	f7ff fa9a 	bl	800210c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 80a5 	beq.w	8002d2c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002be2:	f7ff fa87 	bl	80020f4 <HAL_GetTick>
 8002be6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	461a      	mov	r2, r3
 8002bee:	2101      	movs	r1, #1
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fb0f 	bl	8003214 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002bf6:	f7ff fa7d 	bl	80020f4 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d90f      	bls.n	8002c28 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002c0c:	6939      	ldr	r1, [r7, #16]
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fd26 	bl	8003660 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e0ac      	b.n	8002d82 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0da      	beq.n	8002be8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002c32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c36:	2100      	movs	r1, #0
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 fb53 	bl	80032e4 <HAL_ETH_WritePHYRegister>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002c48:	6939      	ldr	r1, [r7, #16]
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fd08 	bl	8003660 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e092      	b.n	8002d82 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7ff fa4a 	bl	80020f4 <HAL_GetTick>
 8002c60:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	461a      	mov	r2, r3
 8002c68:	2101      	movs	r1, #1
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fad2 	bl	8003214 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002c70:	f7ff fa40 	bl	80020f4 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d90f      	bls.n	8002ca2 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002c86:	6939      	ldr	r1, [r7, #16]
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fce9 	bl	8003660 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e06f      	b.n	8002d82 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0da      	beq.n	8002c62 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002cac:	f107 030c 	add.w	r3, r7, #12
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	2110      	movs	r1, #16
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 faad 	bl	8003214 <HAL_ETH_ReadPHYRegister>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00b      	beq.n	8002cd8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002cc4:	6939      	ldr	r1, [r7, #16]
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 fcca 	bl	8003660 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e054      	b.n	8002d82 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d004      	beq.n	8002cec <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	e002      	b.n	8002cf2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	e035      	b.n	8002d70 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	e030      	b.n	8002d70 <HAL_ETH_Init+0x31c>
 8002d0e:	bf00      	nop
 8002d10:	03938700 	.word	0x03938700
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40013800 	.word	0x40013800
 8002d1c:	01312cff 	.word	0x01312cff
 8002d20:	02160ebf 	.word	0x02160ebf
 8002d24:	05f5e0ff 	.word	0x05f5e0ff
 8002d28:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	2100      	movs	r1, #0
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 facd 	bl	80032e4 <HAL_ETH_WritePHYRegister>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00b      	beq.n	8002d68 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002d54:	6939      	ldr	r1, [r7, #16]
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fc82 	bl	8003660 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e00c      	b.n	8002d82 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002d68:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002d6c:	f7ff f9ce 	bl	800210c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002d70:	6939      	ldr	r1, [r7, #16]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fc74 	bl	8003660 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop

08002d8c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_ETH_DMATxDescListInit+0x20>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e052      	b.n	8002e52 <HAL_ETH_DMATxDescListInit+0xc6>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e030      	b.n	8002e2a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	015b      	lsls	r3, r3, #5
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	4413      	add	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dd8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002de0:	fb02 f303 	mul.w	r3, r2, r3
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	461a      	mov	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d208      	bcs.n	8002e1e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	015b      	lsls	r3, r3, #5
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	4413      	add	r3, r2
 8002e16:	461a      	mov	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	e002      	b.n	8002e24 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	3301      	adds	r3, #1
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d3ca      	bcc.n	8002dc8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e3c:	3310      	adds	r3, #16
 8002e3e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	371c      	adds	r7, #28
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b087      	sub	sp, #28
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	60f8      	str	r0, [r7, #12]
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_ETH_DMARxDescListInit+0x20>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e056      	b.n	8002f2c <HAL_ETH_DMARxDescListInit+0xce>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e034      	b.n	8002f04 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	015b      	lsls	r3, r3, #5
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002eaa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002eb2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d208      	bcs.n	8002ef8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	015b      	lsls	r3, r3, #5
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	4413      	add	r3, r2
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	60da      	str	r2, [r3, #12]
 8002ef6:	e002      	b.n	8002efe <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3301      	adds	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d3c6      	bcc.n	8002e9a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f16:	330c      	adds	r3, #12
 8002f18:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_ETH_TransmitFrame+0x24>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e0cd      	b.n	80030f8 <HAL_ETH_TransmitFrame+0x1c0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2202      	movs	r2, #2
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0b8      	b.n	80030f8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da09      	bge.n	8002fa4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2212      	movs	r2, #18
 8002f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0a9      	b.n	80030f8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d915      	bls.n	8002fda <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	4a54      	ldr	r2, [pc, #336]	; (8003104 <HAL_ETH_TransmitFrame+0x1cc>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0a9b      	lsrs	r3, r3, #10
 8002fb8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	4b51      	ldr	r3, [pc, #324]	; (8003104 <HAL_ETH_TransmitFrame+0x1cc>)
 8002fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc2:	0a9b      	lsrs	r3, r3, #10
 8002fc4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e001      	b.n	8002fde <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d11c      	bne.n	800301e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002ff2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002ffe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800300e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
 800301c:	e04b      	b.n	80030b6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	e044      	b.n	80030ae <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003032:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d107      	bne.n	800304a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003048:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003052:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3b01      	subs	r3, #1
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	429a      	cmp	r2, r3
 800305c:	d116      	bne.n	800308c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800306c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	4a25      	ldr	r2, [pc, #148]	; (8003108 <HAL_ETH_TransmitFrame+0x1d0>)
 8003072:	fb02 f203 	mul.w	r2, r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	4413      	add	r3, r2
 800307a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800307e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800308a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800309a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	461a      	mov	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	3301      	adds	r3, #1
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3b6      	bcc.n	8003024 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030be:	3314      	adds	r3, #20
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d2:	3314      	adds	r3, #20
 80030d4:	2204      	movs	r2, #4
 80030d6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e0:	3304      	adds	r3, #4
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	ac02b00b 	.word	0xac02b00b
 8003108:	fffffa0c 	.word	0xfffffa0c

0800310c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_ETH_GetReceivedFrame+0x1a>
 8003122:	2302      	movs	r3, #2
 8003124:	e070      	b.n	8003208 <HAL_ETH_GetReceivedFrame+0xfc>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2202      	movs	r2, #2
 8003132:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db5a      	blt.n	80031f6 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d030      	beq.n	80031b0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	2b01      	cmp	r3, #1
 800315e:	d103      	bne.n	8003168 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	0c1b      	lsrs	r3, r3, #16
 8003178:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800317c:	3b04      	subs	r3, #4
 800317e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	461a      	mov	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e02b      	b.n	8003208 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d010      	beq.n	80031e0 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	461a      	mov	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	629a      	str	r2, [r3, #40]	; 0x28
 80031de:	e00a      	b.n	80031f6 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e4:	1c5a      	adds	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	461a      	mov	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	460b      	mov	r3, r1
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8003222:	2300      	movs	r3, #0
 8003224:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b82      	cmp	r3, #130	; 0x82
 8003234:	d101      	bne.n	800323a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003236:	2302      	movs	r3, #2
 8003238:	e050      	b.n	80032dc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2282      	movs	r2, #130	; 0x82
 800323e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f003 031c 	and.w	r3, r3, #28
 8003250:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8a1b      	ldrh	r3, [r3, #16]
 8003256:	02db      	lsls	r3, r3, #11
 8003258:	b29b      	uxth	r3, r3
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4313      	orrs	r3, r2
 800325e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003260:	897b      	ldrh	r3, [r7, #10]
 8003262:	019b      	lsls	r3, r3, #6
 8003264:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f023 0302 	bic.w	r3, r3, #2
 8003274:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003286:	f7fe ff35 	bl	80020f4 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800328c:	e015      	b.n	80032ba <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800328e:	f7fe ff31 	bl	80020f4 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329c:	d309      	bcc.n	80032b2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e014      	b.n	80032dc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e4      	bne.n	800328e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	460b      	mov	r3, r1
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b42      	cmp	r3, #66	; 0x42
 8003304:	d101      	bne.n	800330a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003306:	2302      	movs	r3, #2
 8003308:	e04e      	b.n	80033a8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2242      	movs	r2, #66	; 0x42
 800330e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	f003 031c 	and.w	r3, r3, #28
 8003320:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8a1b      	ldrh	r3, [r3, #16]
 8003326:	02db      	lsls	r3, r3, #11
 8003328:	b29b      	uxth	r3, r3
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003330:	897b      	ldrh	r3, [r7, #10]
 8003332:	019b      	lsls	r3, r3, #6
 8003334:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f043 0302 	orr.w	r3, r3, #2
 8003344:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003360:	f7fe fec8 	bl	80020f4 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003366:	e015      	b.n	8003394 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003368:	f7fe fec4 	bl	80020f4 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003376:	d309      	bcc.n	800338c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e00d      	b.n	80033a8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e4      	bne.n	8003368 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_ETH_Start+0x16>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e01f      	b.n	8003406 <HAL_ETH_Start+0x56>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fb44 	bl	8003a64 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fb7b 	bl	8003ad8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fc12 	bl	8003c0c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fbaf 	bl	8003b4c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fbdc 	bl	8003bac <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_ETH_Stop+0x16>
 8003420:	2302      	movs	r3, #2
 8003422:	e01f      	b.n	8003464 <HAL_ETH_Stop+0x56>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fba1 	bl	8003b7c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fbce 	bl	8003bdc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fb66 	bl	8003b12 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fbe0 	bl	8003c0c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fb26 	bl	8003a9e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_ETH_ConfigMAC+0x1c>
 8003484:	2302      	movs	r3, #2
 8003486:	e0e4      	b.n	8003652 <HAL_ETH_ConfigMAC+0x1e6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80b1 	beq.w	8003602 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4b6c      	ldr	r3, [pc, #432]	; (800365c <HAL_ETH_ConfigMAC+0x1f0>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80034b8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80034be:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80034c4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80034ca:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80034d0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80034d6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80034dc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80034e2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80034e8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80034ee:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80034f4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80034fa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003512:	2001      	movs	r0, #1
 8003514:	f7fe fdfa 	bl	800210c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003528:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800352e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003534:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800353a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003540:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003546:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003552:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003554:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800355e:	2001      	movs	r0, #1
 8003560:	f7fe fdd4 	bl	800210c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003574:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800357e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800358e:	4013      	ands	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003596:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800359c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80035a2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80035a8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80035ae:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80035b4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80035cc:	2001      	movs	r0, #1
 80035ce:	f7fe fd9d 	bl	800210c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80035f2:	2001      	movs	r0, #1
 80035f4:	f7fe fd8a 	bl	800210c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	61da      	str	r2, [r3, #28]
 8003600:	e01e      	b.n	8003640 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003610:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	4313      	orrs	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003632:	2001      	movs	r0, #1
 8003634:	f7fe fd6a 	bl	800210c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	ff20810f 	.word	0xff20810f

08003660 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b0b0      	sub	sp, #192	; 0xc0
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800367c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003684:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800368a:	2300      	movs	r3, #0
 800368c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800368e:	2300      	movs	r3, #0
 8003690:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003696:	2300      	movs	r3, #0
 8003698:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800369a:	2300      	movs	r3, #0
 800369c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d103      	bne.n	80036ae <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80036a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036aa:	663b      	str	r3, [r7, #96]	; 0x60
 80036ac:	e001      	b.n	80036b2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80036b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036b6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80036bc:	2300      	movs	r3, #0
 80036be:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80036c4:	2300      	movs	r3, #0
 80036c6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80036c8:	2300      	movs	r3, #0
 80036ca:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80036cc:	2340      	movs	r3, #64	; 0x40
 80036ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003706:	2300      	movs	r3, #0
 8003708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003712:	2300      	movs	r3, #0
 8003714:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003734:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003738:	4bac      	ldr	r3, [pc, #688]	; (80039ec <ETH_MACDMAConfig+0x38c>)
 800373a:	4013      	ands	r3, r2
 800373c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003740:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003744:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003748:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800374a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800374c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003752:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003754:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003756:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800375a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003760:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003764:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003768:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800376a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800376c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800376e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003770:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003774:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003776:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800377a:	4313      	orrs	r3, r2
 800377c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003788:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003794:	2001      	movs	r0, #1
 8003796:	f7fe fcb9 	bl	800210c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037a2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80037a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80037a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80037a8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80037aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80037ac:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80037ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80037b2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80037b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80037b8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80037ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80037be:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80037c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80037c4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80037c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80037d0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80037d2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80037de:	2001      	movs	r0, #1
 80037e0:	f7fe fc94 	bl	800210c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037ec:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037f6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003800:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800380c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003810:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003814:	4013      	ands	r3, r2
 8003816:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800381a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800381e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003820:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003824:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003826:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800382a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800382c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003830:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003836:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003838:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800383c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800383e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003850:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800385c:	2001      	movs	r0, #1
 800385e:	f7fe fc55 	bl	800210c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800386a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800386c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003870:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003886:	2001      	movs	r0, #1
 8003888:	f7fe fc40 	bl	800210c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003894:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800389a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800389e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80038a0:	2300      	movs	r3, #0
 80038a2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80038a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80038a8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80038b6:	2300      	movs	r3, #0
 80038b8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80038ba:	2304      	movs	r3, #4
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80038be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80038c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038c8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80038ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80038d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80038d6:	2380      	movs	r3, #128	; 0x80
 80038d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80038de:	2300      	movs	r3, #0
 80038e0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ea:	3318      	adds	r3, #24
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80038f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038f6:	4b3e      	ldr	r3, [pc, #248]	; (80039f0 <ETH_MACDMAConfig+0x390>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80038fe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003900:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003902:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003904:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003906:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003908:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800390a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800390c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800390e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003910:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003912:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003914:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003916:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800391a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800391e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003920:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003924:	4313      	orrs	r3, r2
 8003926:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003932:	3318      	adds	r3, #24
 8003934:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003938:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003942:	3318      	adds	r3, #24
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800394a:	2001      	movs	r0, #1
 800394c:	f7fe fbde 	bl	800210c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003958:	3318      	adds	r3, #24
 800395a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800395e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003964:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003968:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800396a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800396c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800396e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003970:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003974:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003976:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800397a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003988:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003998:	2001      	movs	r0, #1
 800399a:	f7fe fbb7 	bl	800210c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039aa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d10f      	bne.n	80039d4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039bc:	331c      	adds	r3, #28
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80039c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d0:	331c      	adds	r3, #28
 80039d2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	461a      	mov	r2, r3
 80039da:	2100      	movs	r1, #0
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f809 	bl	80039f4 <ETH_MACAddressConfig>
}
 80039e2:	bf00      	nop
 80039e4:	37c0      	adds	r7, #192	; 0xc0
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	ff20810f 	.word	0xff20810f
 80039f0:	f8de3f23 	.word	0xf8de3f23

080039f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3305      	adds	r3, #5
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	3204      	adds	r2, #4
 8003a0c:	7812      	ldrb	r2, [r2, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <ETH_MACAddressConfig+0x68>)
 8003a16:	4413      	add	r3, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3303      	adds	r3, #3
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	061a      	lsls	r2, r3, #24
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3302      	adds	r3, #2
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	041b      	lsls	r3, r3, #16
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3301      	adds	r3, #1
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	7812      	ldrb	r2, [r2, #0]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <ETH_MACAddressConfig+0x6c>)
 8003a46:	4413      	add	r3, r2
 8003a48:	461a      	mov	r2, r3
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	6013      	str	r3, [r2, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40028040 	.word	0x40028040
 8003a60:	40028044 	.word	0x40028044

08003a64 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0208 	orr.w	r2, r2, #8
 8003a7e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f000 f8e9 	bl	8003c60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	601a      	str	r2, [r3, #0]
}
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0208 	bic.w	r2, r2, #8
 8003ab8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f000 f8cc 	bl	8003c60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	601a      	str	r2, [r3, #0]
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0204 	orr.w	r2, r2, #4
 8003af2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003afc:	2001      	movs	r0, #1
 8003afe:	f000 f8af 	bl	8003c60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0204 	bic.w	r2, r2, #4
 8003b2c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003b36:	2001      	movs	r0, #1
 8003b38:	f000 f892 	bl	8003c60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	601a      	str	r2, [r3, #0]
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5c:	3318      	adds	r3, #24
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b6c:	3318      	adds	r3, #24
 8003b6e:	601a      	str	r2, [r3, #0]
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b8c:	3318      	adds	r3, #24
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b9c:	3318      	adds	r3, #24
 8003b9e:	601a      	str	r2, [r3, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bbc:	3318      	adds	r3, #24
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0202 	orr.w	r2, r2, #2
 8003bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bcc:	3318      	adds	r3, #24
 8003bce:	601a      	str	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bec:	3318      	adds	r3, #24
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0202 	bic.w	r2, r2, #2
 8003bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bfc:	3318      	adds	r3, #24
 8003bfe:	601a      	str	r2, [r3, #0]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c20:	3318      	adds	r3, #24
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c30:	3318      	adds	r3, #24
 8003c32:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c3c:	3318      	adds	r3, #24
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003c42:	2001      	movs	r0, #1
 8003c44:	f000 f80c 	bl	8003c60 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c52:	3318      	adds	r3, #24
 8003c54:	601a      	str	r2, [r3, #0]
}
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <ETH_Delay+0x38>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a0b      	ldr	r2, [pc, #44]	; (8003c9c <ETH_Delay+0x3c>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	0a5b      	lsrs	r3, r3, #9
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003c7c:	bf00      	nop
  } 
  while (Delay --);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1e5a      	subs	r2, r3, #1
 8003c82:	60fa      	str	r2, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f9      	bne.n	8003c7c <ETH_Delay+0x1c>
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	200004a8 	.word	0x200004a8
 8003c9c:	10624dd3 	.word	0x10624dd3

08003ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b089      	sub	sp, #36	; 0x24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	e16b      	b.n	8003f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	f040 815a 	bne.w	8003f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d005      	beq.n	8003cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d130      	bne.n	8003d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	2203      	movs	r2, #3
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68da      	ldr	r2, [r3, #12]
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d28:	2201      	movs	r2, #1
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 0201 	and.w	r2, r3, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b03      	cmp	r3, #3
 8003d5e:	d017      	beq.n	8003d90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	2203      	movs	r2, #3
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d123      	bne.n	8003de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	08da      	lsrs	r2, r3, #3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3208      	adds	r2, #8
 8003da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	220f      	movs	r2, #15
 8003db4:	fa02 f303 	lsl.w	r3, r2, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	08da      	lsrs	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3208      	adds	r2, #8
 8003dde:	69b9      	ldr	r1, [r7, #24]
 8003de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0203 	and.w	r2, r3, #3
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 80b4 	beq.w	8003f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	4b60      	ldr	r3, [pc, #384]	; (8003fac <HAL_GPIO_Init+0x30c>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	4a5f      	ldr	r2, [pc, #380]	; (8003fac <HAL_GPIO_Init+0x30c>)
 8003e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e34:	6453      	str	r3, [r2, #68]	; 0x44
 8003e36:	4b5d      	ldr	r3, [pc, #372]	; (8003fac <HAL_GPIO_Init+0x30c>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e42:	4a5b      	ldr	r2, [pc, #364]	; (8003fb0 <HAL_GPIO_Init+0x310>)
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	089b      	lsrs	r3, r3, #2
 8003e48:	3302      	adds	r3, #2
 8003e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	220f      	movs	r2, #15
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a52      	ldr	r2, [pc, #328]	; (8003fb4 <HAL_GPIO_Init+0x314>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d02b      	beq.n	8003ec6 <HAL_GPIO_Init+0x226>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a51      	ldr	r2, [pc, #324]	; (8003fb8 <HAL_GPIO_Init+0x318>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d025      	beq.n	8003ec2 <HAL_GPIO_Init+0x222>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a50      	ldr	r2, [pc, #320]	; (8003fbc <HAL_GPIO_Init+0x31c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01f      	beq.n	8003ebe <HAL_GPIO_Init+0x21e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a4f      	ldr	r2, [pc, #316]	; (8003fc0 <HAL_GPIO_Init+0x320>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d019      	beq.n	8003eba <HAL_GPIO_Init+0x21a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a4e      	ldr	r2, [pc, #312]	; (8003fc4 <HAL_GPIO_Init+0x324>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <HAL_GPIO_Init+0x216>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a4d      	ldr	r2, [pc, #308]	; (8003fc8 <HAL_GPIO_Init+0x328>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00d      	beq.n	8003eb2 <HAL_GPIO_Init+0x212>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4c      	ldr	r2, [pc, #304]	; (8003fcc <HAL_GPIO_Init+0x32c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d007      	beq.n	8003eae <HAL_GPIO_Init+0x20e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a4b      	ldr	r2, [pc, #300]	; (8003fd0 <HAL_GPIO_Init+0x330>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d101      	bne.n	8003eaa <HAL_GPIO_Init+0x20a>
 8003ea6:	2307      	movs	r3, #7
 8003ea8:	e00e      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	e00c      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003eae:	2306      	movs	r3, #6
 8003eb0:	e00a      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003eb2:	2305      	movs	r3, #5
 8003eb4:	e008      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	e006      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e004      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e002      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_GPIO_Init+0x228>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	f002 0203 	and.w	r2, r2, #3
 8003ece:	0092      	lsls	r2, r2, #2
 8003ed0:	4093      	lsls	r3, r2
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed8:	4935      	ldr	r1, [pc, #212]	; (8003fb0 <HAL_GPIO_Init+0x310>)
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f0a:	4a32      	ldr	r2, [pc, #200]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f10:	4b30      	ldr	r3, [pc, #192]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d003      	beq.n	8003f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f34:	4a27      	ldr	r2, [pc, #156]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f5e:	4a1d      	ldr	r2, [pc, #116]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4013      	ands	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f88:	4a12      	ldr	r2, [pc, #72]	; (8003fd4 <HAL_GPIO_Init+0x334>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3301      	adds	r3, #1
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	f67f ae90 	bls.w	8003cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3724      	adds	r7, #36	; 0x24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	40013800 	.word	0x40013800
 8003fb4:	40020000 	.word	0x40020000
 8003fb8:	40020400 	.word	0x40020400
 8003fbc:	40020800 	.word	0x40020800
 8003fc0:	40020c00 	.word	0x40020c00
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40021400 	.word	0x40021400
 8003fcc:	40021800 	.word	0x40021800
 8003fd0:	40021c00 	.word	0x40021c00
 8003fd4:	40013c00 	.word	0x40013c00

08003fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe8:	787b      	ldrb	r3, [r7, #1]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ff4:	e003      	b.n	8003ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ff6:	887b      	ldrh	r3, [r7, #2]
 8003ff8:	041a      	lsls	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	619a      	str	r2, [r3, #24]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e264      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d075      	beq.n	8004116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800402a:	4ba3      	ldr	r3, [pc, #652]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 030c 	and.w	r3, r3, #12
 8004032:	2b04      	cmp	r3, #4
 8004034:	d00c      	beq.n	8004050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004036:	4ba0      	ldr	r3, [pc, #640]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800403e:	2b08      	cmp	r3, #8
 8004040:	d112      	bne.n	8004068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004042:	4b9d      	ldr	r3, [pc, #628]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404e:	d10b      	bne.n	8004068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	4b99      	ldr	r3, [pc, #612]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d05b      	beq.n	8004114 <HAL_RCC_OscConfig+0x108>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d157      	bne.n	8004114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e23f      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004070:	d106      	bne.n	8004080 <HAL_RCC_OscConfig+0x74>
 8004072:	4b91      	ldr	r3, [pc, #580]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a90      	ldr	r2, [pc, #576]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	e01d      	b.n	80040bc <HAL_RCC_OscConfig+0xb0>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCC_OscConfig+0x98>
 800408a:	4b8b      	ldr	r3, [pc, #556]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a8a      	ldr	r2, [pc, #552]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	4b88      	ldr	r3, [pc, #544]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a87      	ldr	r2, [pc, #540]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e00b      	b.n	80040bc <HAL_RCC_OscConfig+0xb0>
 80040a4:	4b84      	ldr	r3, [pc, #528]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a83      	ldr	r2, [pc, #524]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4b81      	ldr	r3, [pc, #516]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a80      	ldr	r2, [pc, #512]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 80040b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d013      	beq.n	80040ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c4:	f7fe f816 	bl	80020f4 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fe f812 	bl	80020f4 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e204      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	4b76      	ldr	r3, [pc, #472]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0xc0>
 80040ea:	e014      	b.n	8004116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ec:	f7fe f802 	bl	80020f4 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f4:	f7fd fffe 	bl	80020f4 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b64      	cmp	r3, #100	; 0x64
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e1f0      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004106:	4b6c      	ldr	r3, [pc, #432]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0xe8>
 8004112:	e000      	b.n	8004116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d063      	beq.n	80041ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004122:	4b65      	ldr	r3, [pc, #404]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 030c 	and.w	r3, r3, #12
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00b      	beq.n	8004146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412e:	4b62      	ldr	r3, [pc, #392]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004136:	2b08      	cmp	r3, #8
 8004138:	d11c      	bne.n	8004174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413a:	4b5f      	ldr	r3, [pc, #380]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d116      	bne.n	8004174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004146:	4b5c      	ldr	r3, [pc, #368]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d005      	beq.n	800415e <HAL_RCC_OscConfig+0x152>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d001      	beq.n	800415e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e1c4      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800415e:	4b56      	ldr	r3, [pc, #344]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4952      	ldr	r1, [pc, #328]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 800416e:	4313      	orrs	r3, r2
 8004170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004172:	e03a      	b.n	80041ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800417c:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <HAL_RCC_OscConfig+0x2b0>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004182:	f7fd ffb7 	bl	80020f4 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418a:	f7fd ffb3 	bl	80020f4 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e1a5      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419c:	4b46      	ldr	r3, [pc, #280]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a8:	4b43      	ldr	r3, [pc, #268]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4940      	ldr	r1, [pc, #256]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	600b      	str	r3, [r1, #0]
 80041bc:	e015      	b.n	80041ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041be:	4b3f      	ldr	r3, [pc, #252]	; (80042bc <HAL_RCC_OscConfig+0x2b0>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fd ff96 	bl	80020f4 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041cc:	f7fd ff92 	bl	80020f4 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e184      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041de:	4b36      	ldr	r3, [pc, #216]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d030      	beq.n	8004258 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d016      	beq.n	800422c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041fe:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <HAL_RCC_OscConfig+0x2b4>)
 8004200:	2201      	movs	r2, #1
 8004202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004204:	f7fd ff76 	bl	80020f4 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800420c:	f7fd ff72 	bl	80020f4 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e164      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421e:	4b26      	ldr	r3, [pc, #152]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x200>
 800422a:	e015      	b.n	8004258 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800422c:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <HAL_RCC_OscConfig+0x2b4>)
 800422e:	2200      	movs	r2, #0
 8004230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004232:	f7fd ff5f 	bl	80020f4 <HAL_GetTick>
 8004236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800423a:	f7fd ff5b 	bl	80020f4 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e14d      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 800424e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f0      	bne.n	800423a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80a0 	beq.w	80043a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426a:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10f      	bne.n	8004296 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a0e      	ldr	r2, [pc, #56]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
 8004286:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004296:	4b0b      	ldr	r3, [pc, #44]	; (80042c4 <HAL_RCC_OscConfig+0x2b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d121      	bne.n	80042e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a2:	4b08      	ldr	r3, [pc, #32]	; (80042c4 <HAL_RCC_OscConfig+0x2b8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a07      	ldr	r2, [pc, #28]	; (80042c4 <HAL_RCC_OscConfig+0x2b8>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ae:	f7fd ff21 	bl	80020f4 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	e011      	b.n	80042da <HAL_RCC_OscConfig+0x2ce>
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
 80042bc:	42470000 	.word	0x42470000
 80042c0:	42470e80 	.word	0x42470e80
 80042c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fd ff14 	bl	80020f4 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e106      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042da:	4b85      	ldr	r3, [pc, #532]	; (80044f0 <HAL_RCC_OscConfig+0x4e4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x2f0>
 80042ee:	4b81      	ldr	r3, [pc, #516]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	4a80      	ldr	r2, [pc, #512]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	6713      	str	r3, [r2, #112]	; 0x70
 80042fa:	e01c      	b.n	8004336 <HAL_RCC_OscConfig+0x32a>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b05      	cmp	r3, #5
 8004302:	d10c      	bne.n	800431e <HAL_RCC_OscConfig+0x312>
 8004304:	4b7b      	ldr	r3, [pc, #492]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	4a7a      	ldr	r2, [pc, #488]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 800430a:	f043 0304 	orr.w	r3, r3, #4
 800430e:	6713      	str	r3, [r2, #112]	; 0x70
 8004310:	4b78      	ldr	r3, [pc, #480]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4a77      	ldr	r2, [pc, #476]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
 800431c:	e00b      	b.n	8004336 <HAL_RCC_OscConfig+0x32a>
 800431e:	4b75      	ldr	r3, [pc, #468]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	4a74      	ldr	r2, [pc, #464]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 8004324:	f023 0301 	bic.w	r3, r3, #1
 8004328:	6713      	str	r3, [r2, #112]	; 0x70
 800432a:	4b72      	ldr	r3, [pc, #456]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432e:	4a71      	ldr	r2, [pc, #452]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 8004330:	f023 0304 	bic.w	r3, r3, #4
 8004334:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d015      	beq.n	800436a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433e:	f7fd fed9 	bl	80020f4 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004344:	e00a      	b.n	800435c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004346:	f7fd fed5 	bl	80020f4 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3288 	movw	r2, #5000	; 0x1388
 8004354:	4293      	cmp	r3, r2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e0c5      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435c:	4b65      	ldr	r3, [pc, #404]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ee      	beq.n	8004346 <HAL_RCC_OscConfig+0x33a>
 8004368:	e014      	b.n	8004394 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436a:	f7fd fec3 	bl	80020f4 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004370:	e00a      	b.n	8004388 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004372:	f7fd febf 	bl	80020f4 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e0af      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004388:	4b5a      	ldr	r3, [pc, #360]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 800438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ee      	bne.n	8004372 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004394:	7dfb      	ldrb	r3, [r7, #23]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d105      	bne.n	80043a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439a:	4b56      	ldr	r3, [pc, #344]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a55      	ldr	r2, [pc, #340]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 80043a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f000 809b 	beq.w	80044e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b0:	4b50      	ldr	r3, [pc, #320]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d05c      	beq.n	8004476 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d141      	bne.n	8004448 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c4:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <HAL_RCC_OscConfig+0x4ec>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fd fe93 	bl	80020f4 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d2:	f7fd fe8f 	bl	80020f4 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e081      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e4:	4b43      	ldr	r3, [pc, #268]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1f0      	bne.n	80043d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69da      	ldr	r2, [r3, #28]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fe:	019b      	lsls	r3, r3, #6
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	3b01      	subs	r3, #1
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	061b      	lsls	r3, r3, #24
 8004414:	4937      	ldr	r1, [pc, #220]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 8004416:	4313      	orrs	r3, r2
 8004418:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441a:	4b37      	ldr	r3, [pc, #220]	; (80044f8 <HAL_RCC_OscConfig+0x4ec>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fd fe68 	bl	80020f4 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004428:	f7fd fe64 	bl	80020f4 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e056      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443a:	4b2e      	ldr	r3, [pc, #184]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0x41c>
 8004446:	e04e      	b.n	80044e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004448:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <HAL_RCC_OscConfig+0x4ec>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444e:	f7fd fe51 	bl	80020f4 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004456:	f7fd fe4d 	bl	80020f4 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e03f      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004468:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1f0      	bne.n	8004456 <HAL_RCC_OscConfig+0x44a>
 8004474:	e037      	b.n	80044e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e032      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004482:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <HAL_RCC_OscConfig+0x4e8>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d028      	beq.n	80044e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d121      	bne.n	80044e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d11a      	bne.n	80044e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044b2:	4013      	ands	r3, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d111      	bne.n	80044e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	3b01      	subs	r3, #1
 80044cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044de:	429a      	cmp	r2, r3
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40007000 	.word	0x40007000
 80044f4:	40023800 	.word	0x40023800
 80044f8:	42470060 	.word	0x42470060

080044fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0cc      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004510:	4b68      	ldr	r3, [pc, #416]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d90c      	bls.n	8004538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b65      	ldr	r3, [pc, #404]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b63      	ldr	r3, [pc, #396]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0b8      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d020      	beq.n	8004586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004550:	4b59      	ldr	r3, [pc, #356]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4a58      	ldr	r2, [pc, #352]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800455a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004568:	4b53      	ldr	r3, [pc, #332]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	4a52      	ldr	r2, [pc, #328]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800456e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004574:	4b50      	ldr	r3, [pc, #320]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	494d      	ldr	r1, [pc, #308]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	4313      	orrs	r3, r2
 8004584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d044      	beq.n	800461c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	4b47      	ldr	r3, [pc, #284]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d119      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e07f      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d003      	beq.n	80045ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	4b3f      	ldr	r3, [pc, #252]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e06f      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ca:	4b3b      	ldr	r3, [pc, #236]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e067      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045da:	4b37      	ldr	r3, [pc, #220]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f023 0203 	bic.w	r2, r3, #3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4934      	ldr	r1, [pc, #208]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ec:	f7fd fd82 	bl	80020f4 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	e00a      	b.n	800460a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f4:	f7fd fd7e 	bl	80020f4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e04f      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460a:	4b2b      	ldr	r3, [pc, #172]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 020c 	and.w	r2, r3, #12
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	429a      	cmp	r2, r3
 800461a:	d1eb      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d20c      	bcs.n	8004644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e032      	b.n	80046aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004650:	4b19      	ldr	r3, [pc, #100]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	4916      	ldr	r1, [pc, #88]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0308 	and.w	r3, r3, #8
 800466a:	2b00      	cmp	r3, #0
 800466c:	d009      	beq.n	8004682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800466e:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	490e      	ldr	r1, [pc, #56]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004682:	f000 f821 	bl	80046c8 <HAL_RCC_GetSysClockFreq>
 8004686:	4602      	mov	r2, r0
 8004688:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	490a      	ldr	r1, [pc, #40]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004694:	5ccb      	ldrb	r3, [r1, r3]
 8004696:	fa22 f303 	lsr.w	r3, r2, r3
 800469a:	4a09      	ldr	r2, [pc, #36]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800469c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_ClockConfig+0x1c8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd fb58 	bl	8001d58 <HAL_InitTick>

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	40023c00 	.word	0x40023c00
 80046b8:	40023800 	.word	0x40023800
 80046bc:	08019c64 	.word	0x08019c64
 80046c0:	200004a8 	.word	0x200004a8
 80046c4:	200004ac 	.word	0x200004ac

080046c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	2300      	movs	r3, #0
 80046da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e0:	4b67      	ldr	r3, [pc, #412]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 030c 	and.w	r3, r3, #12
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d00d      	beq.n	8004708 <HAL_RCC_GetSysClockFreq+0x40>
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	f200 80bd 	bhi.w	800486c <HAL_RCC_GetSysClockFreq+0x1a4>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x34>
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d003      	beq.n	8004702 <HAL_RCC_GetSysClockFreq+0x3a>
 80046fa:	e0b7      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046fc:	4b61      	ldr	r3, [pc, #388]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046fe:	60bb      	str	r3, [r7, #8]
       break;
 8004700:	e0b7      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004702:	4b61      	ldr	r3, [pc, #388]	; (8004888 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004704:	60bb      	str	r3, [r7, #8]
      break;
 8004706:	e0b4      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004708:	4b5d      	ldr	r3, [pc, #372]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004710:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004712:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d04d      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471e:	4b58      	ldr	r3, [pc, #352]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	099b      	lsrs	r3, r3, #6
 8004724:	461a      	mov	r2, r3
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800472e:	f04f 0100 	mov.w	r1, #0
 8004732:	ea02 0800 	and.w	r8, r2, r0
 8004736:	ea03 0901 	and.w	r9, r3, r1
 800473a:	4640      	mov	r0, r8
 800473c:	4649      	mov	r1, r9
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	014b      	lsls	r3, r1, #5
 8004748:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800474c:	0142      	lsls	r2, r0, #5
 800474e:	4610      	mov	r0, r2
 8004750:	4619      	mov	r1, r3
 8004752:	ebb0 0008 	subs.w	r0, r0, r8
 8004756:	eb61 0109 	sbc.w	r1, r1, r9
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	018b      	lsls	r3, r1, #6
 8004764:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004768:	0182      	lsls	r2, r0, #6
 800476a:	1a12      	subs	r2, r2, r0
 800476c:	eb63 0301 	sbc.w	r3, r3, r1
 8004770:	f04f 0000 	mov.w	r0, #0
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	00d9      	lsls	r1, r3, #3
 800477a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800477e:	00d0      	lsls	r0, r2, #3
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	eb12 0208 	adds.w	r2, r2, r8
 8004788:	eb43 0309 	adc.w	r3, r3, r9
 800478c:	f04f 0000 	mov.w	r0, #0
 8004790:	f04f 0100 	mov.w	r1, #0
 8004794:	0259      	lsls	r1, r3, #9
 8004796:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800479a:	0250      	lsls	r0, r2, #9
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4610      	mov	r0, r2
 80047a2:	4619      	mov	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	461a      	mov	r2, r3
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	f7fb fd78 	bl	80002a0 <__aeabi_uldivmod>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4613      	mov	r3, r2
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e04a      	b.n	8004850 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ba:	4b31      	ldr	r3, [pc, #196]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	099b      	lsrs	r3, r3, #6
 80047c0:	461a      	mov	r2, r3
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	ea02 0400 	and.w	r4, r2, r0
 80047d2:	ea03 0501 	and.w	r5, r3, r1
 80047d6:	4620      	mov	r0, r4
 80047d8:	4629      	mov	r1, r5
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	014b      	lsls	r3, r1, #5
 80047e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047e8:	0142      	lsls	r2, r0, #5
 80047ea:	4610      	mov	r0, r2
 80047ec:	4619      	mov	r1, r3
 80047ee:	1b00      	subs	r0, r0, r4
 80047f0:	eb61 0105 	sbc.w	r1, r1, r5
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	018b      	lsls	r3, r1, #6
 80047fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004802:	0182      	lsls	r2, r0, #6
 8004804:	1a12      	subs	r2, r2, r0
 8004806:	eb63 0301 	sbc.w	r3, r3, r1
 800480a:	f04f 0000 	mov.w	r0, #0
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	00d9      	lsls	r1, r3, #3
 8004814:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004818:	00d0      	lsls	r0, r2, #3
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	1912      	adds	r2, r2, r4
 8004820:	eb45 0303 	adc.w	r3, r5, r3
 8004824:	f04f 0000 	mov.w	r0, #0
 8004828:	f04f 0100 	mov.w	r1, #0
 800482c:	0299      	lsls	r1, r3, #10
 800482e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004832:	0290      	lsls	r0, r2, #10
 8004834:	4602      	mov	r2, r0
 8004836:	460b      	mov	r3, r1
 8004838:	4610      	mov	r0, r2
 800483a:	4619      	mov	r1, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	461a      	mov	r2, r3
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	f7fb fd2c 	bl	80002a0 <__aeabi_uldivmod>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4613      	mov	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	0c1b      	lsrs	r3, r3, #16
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	3301      	adds	r3, #1
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	fbb2 f3f3 	udiv	r3, r2, r3
 8004868:	60bb      	str	r3, [r7, #8]
      break;
 800486a:	e002      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800486c:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800486e:	60bb      	str	r3, [r7, #8]
      break;
 8004870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004872:	68bb      	ldr	r3, [r7, #8]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800487e:	bf00      	nop
 8004880:	40023800 	.word	0x40023800
 8004884:	00f42400 	.word	0x00f42400
 8004888:	007a1200 	.word	0x007a1200

0800488c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004890:	4b03      	ldr	r3, [pc, #12]	; (80048a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004892:	681b      	ldr	r3, [r3, #0]
}
 8004894:	4618      	mov	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	200004a8 	.word	0x200004a8

080048a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048a8:	f7ff fff0 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048ac:	4602      	mov	r2, r0
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	0a9b      	lsrs	r3, r3, #10
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	4903      	ldr	r1, [pc, #12]	; (80048c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ba:	5ccb      	ldrb	r3, [r1, r3]
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40023800 	.word	0x40023800
 80048c8:	08019c74 	.word	0x08019c74

080048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048d0:	f7ff ffdc 	bl	800488c <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	; (80048ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0b5b      	lsrs	r3, r3, #13
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4903      	ldr	r1, [pc, #12]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	08019c74 	.word	0x08019c74

080048f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	220f      	movs	r2, #15
 8004902:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004904:	4b12      	ldr	r3, [pc, #72]	; (8004950 <HAL_RCC_GetClockConfig+0x5c>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 0203 	and.w	r2, r3, #3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <HAL_RCC_GetClockConfig+0x5c>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <HAL_RCC_GetClockConfig+0x5c>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCC_GetClockConfig+0x5c>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	08db      	lsrs	r3, r3, #3
 800492e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004936:	4b07      	ldr	r3, [pc, #28]	; (8004954 <HAL_RCC_GetClockConfig+0x60>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0207 	and.w	r2, r3, #7
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	601a      	str	r2, [r3, #0]
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	40023c00 	.word	0x40023c00

08004958 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e022      	b.n	80049b0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d105      	bne.n	8004982 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7fd f8a3 	bl	8001ac8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2203      	movs	r2, #3
 8004986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f814 	bl	80049b8 <HAL_SD_InitCard>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e00a      	b.n	80049b0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80049b8:	b5b0      	push	{r4, r5, r7, lr}
 80049ba:	b08e      	sub	sp, #56	; 0x38
 80049bc:	af04      	add	r7, sp, #16
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80049c0:	2300      	movs	r3, #0
 80049c2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80049d4:	2376      	movs	r3, #118	; 0x76
 80049d6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681d      	ldr	r5, [r3, #0]
 80049dc:	466c      	mov	r4, sp
 80049de:	f107 0314 	add.w	r3, r7, #20
 80049e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80049e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80049ea:	f107 0308 	add.w	r3, r7, #8
 80049ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049f0:	4628      	mov	r0, r5
 80049f2:	f002 f8a3 	bl	8006b3c <SDIO_Init>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80049fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e04c      	b.n	8004aa2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004a08:	4b28      	ldr	r3, [pc, #160]	; (8004aac <HAL_SD_InitCard+0xf4>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f002 f8db 	bl	8006bce <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004a18:	4b24      	ldr	r3, [pc, #144]	; (8004aac <HAL_SD_InitCard+0xf4>)
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 f804 	bl	8005a2c <SD_PowerON>
 8004a24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e02e      	b.n	8004aa2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 ff25 	bl	8005894 <SD_InitCard>
 8004a4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e01b      	b.n	8004aa2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a72:	4618      	mov	r0, r3
 8004a74:	f002 f93e 	bl	8006cf4 <SDMMC_CmdBlockLength>
 8004a78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00f      	beq.n	8004aa0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <HAL_SD_InitCard+0xf8>)
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3728      	adds	r7, #40	; 0x28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	422580a0 	.word	0x422580a0
 8004ab0:	004005ff 	.word	0x004005ff

08004ab4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08c      	sub	sp, #48	; 0x30
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d107      	bne.n	8004adc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0c0      	b.n	8004c5e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	f040 80b9 	bne.w	8004c5c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	441a      	add	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d907      	bls.n	8004b0e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e0a7      	b.n	8004c5e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2203      	movs	r2, #3
 8004b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	6812      	ldr	r2, [r2, #0]
 8004b28:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004b2c:	f043 0302 	orr.w	r3, r3, #2
 8004b30:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	4a4c      	ldr	r2, [pc, #304]	; (8004c68 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004b38:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	4a4b      	ldr	r2, [pc, #300]	; (8004c6c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004b40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2200      	movs	r2, #0
 8004b48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	2200      	movs	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3380      	adds	r3, #128	; 0x80
 8004b78:	4619      	mov	r1, r3
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	025b      	lsls	r3, r3, #9
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	f7fd fc77 	bl	8002474 <HAL_DMA_Start_IT>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d017      	beq.n	8004bbc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004b9a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a33      	ldr	r2, [pc, #204]	; (8004c70 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004ba2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e050      	b.n	8004c5e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004bbc:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d002      	beq.n	8004bd0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	025b      	lsls	r3, r3, #9
 8004bce:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bd4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	025b      	lsls	r3, r3, #9
 8004bda:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004bdc:	2390      	movs	r3, #144	; 0x90
 8004bde:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004be0:	2302      	movs	r3, #2
 8004be2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004be8:	2301      	movs	r3, #1
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f107 0210 	add.w	r2, r7, #16
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f002 f850 	bl	8006c9c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d90a      	bls.n	8004c18 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2282      	movs	r2, #130	; 0x82
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f002 f8b4 	bl	8006d7c <SDMMC_CmdReadMultiBlock>
 8004c14:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004c16:	e009      	b.n	8004c2c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2281      	movs	r2, #129	; 0x81
 8004c1c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c24:	4618      	mov	r0, r3
 8004c26:	f002 f887 	bl	8006d38 <SDMMC_CmdReadSingleBlock>
 8004c2a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d012      	beq.n	8004c58 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a0e      	ldr	r2, [pc, #56]	; (8004c70 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c40:	431a      	orrs	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e002      	b.n	8004c5e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e000      	b.n	8004c5e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004c5c:	2302      	movs	r3, #2
  }
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3730      	adds	r7, #48	; 0x30
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	080056a3 	.word	0x080056a3
 8004c6c:	08005715 	.word	0x08005715
 8004c70:	004005ff 	.word	0x004005ff
 8004c74:	4225858c 	.word	0x4225858c

08004c78 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08c      	sub	sp, #48	; 0x30
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d107      	bne.n	8004ca0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0c5      	b.n	8004e2c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	f040 80be 	bne.w	8004e2a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d907      	bls.n	8004cd2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0ac      	b.n	8004e2c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfa:	4a4e      	ldr	r2, [pc, #312]	; (8004e34 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004cfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d02:	4a4d      	ldr	r2, [pc, #308]	; (8004e38 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004d04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d002      	beq.n	8004d1c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d18:	025b      	lsls	r3, r3, #9
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d90a      	bls.n	8004d38 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	22a0      	movs	r2, #160	; 0xa0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f002 f868 	bl	8006e04 <SDMMC_CmdWriteMultiBlock>
 8004d34:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004d36:	e009      	b.n	8004d4c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2290      	movs	r2, #144	; 0x90
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d44:	4618      	mov	r0, r3
 8004d46:	f002 f83b 	bl	8006dc0 <SDMMC_CmdWriteSingleBlock>
 8004d4a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d012      	beq.n	8004d78 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a39      	ldr	r2, [pc, #228]	; (8004e3c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e059      	b.n	8004e2c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004d78:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d82:	2240      	movs	r2, #64	; 0x40
 8004d84:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3380      	adds	r3, #128	; 0x80
 8004dae:	461a      	mov	r2, r3
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	025b      	lsls	r3, r3, #9
 8004db4:	089b      	lsrs	r3, r3, #2
 8004db6:	f7fd fb5d 	bl	8002474 <HAL_DMA_Start_IT>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d01c      	beq.n	8004dfa <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004dce:	f023 0302 	bic.w	r3, r3, #2
 8004dd2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004dda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e018      	b.n	8004e2c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dfe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	025b      	lsls	r3, r3, #9
 8004e04:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004e06:	2390      	movs	r3, #144	; 0x90
 8004e08:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004e12:	2301      	movs	r3, #1
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f107 0210 	add.w	r2, r7, #16
 8004e1e:	4611      	mov	r1, r2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 ff3b 	bl	8006c9c <SDIO_ConfigData>

      return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
  }
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3730      	adds	r7, #48	; 0x30
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	08005679 	.word	0x08005679
 8004e38:	08005715 	.word	0x08005715
 8004e3c:	004005ff 	.word	0x004005ff
 8004e40:	4225858c 	.word	0x4225858c

08004e44 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_SD_IRQHandler+0x2e>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0308 	and.w	r3, r3, #8
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fffd 	bl	8005e6a <SD_Read_IT>
 8004e70:	e165      	b.n	800513e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f000 808f 	beq.w	8004fa0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8004e9a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8004e9e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0201 	bic.w	r2, r2, #1
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d039      	beq.n	8004f2e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <HAL_SD_IRQHandler+0x8a>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d011      	beq.n	8004ef2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 ffb8 	bl	8006e48 <SDMMC_CmdStopTransfer>
 8004ed8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f92f 	bl	8005150 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f240 523a 	movw	r2, #1338	; 0x53a
 8004efa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <HAL_SD_IRQHandler+0xda>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f002 fc1e 	bl	8007760 <HAL_SD_RxCpltCallback>
 8004f24:	e10b      	b.n	800513e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f002 fc10 	bl	800774c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f2c:	e107      	b.n	800513e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 8102 	beq.w	800513e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f003 0320 	and.w	r3, r3, #32
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d011      	beq.n	8004f68 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f001 ff7d 	bl	8006e48 <SDMMC_CmdStopTransfer>
 8004f4e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	431a      	orrs	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f8f4 	bl	8005150 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f040 80e5 	bne.w	800513e <HAL_SD_IRQHandler+0x2fa>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 80df 	bne.w	800513e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0208 	bic.w	r2, r2, #8
 8004f8e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f002 fbd7 	bl	800774c <HAL_SD_TxCpltCallback>
}
 8004f9e:	e0ce      	b.n	800513e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d008      	beq.n	8004fc0 <HAL_SD_IRQHandler+0x17c>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 ffa7 	bl	8005f0c <SD_Write_IT>
 8004fbe:	e0be      	b.n	800513e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc6:	f240 233a 	movw	r3, #570	; 0x23a
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 80b6 	beq.w	800513e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	f043 0202 	orr.w	r2, r3, #2
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	f043 0208 	orr.w	r2, r3, #8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	f003 0310 	and.w	r3, r3, #16
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	f043 0210 	orr.w	r2, r3, #16
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504c:	f043 0208 	orr.w	r2, r3, #8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f240 723a 	movw	r2, #1850	; 0x73a
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800506c:	f023 0302 	bic.w	r3, r3, #2
 8005070:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f001 fee6 	bl	8006e48 <SDMMC_CmdStopTransfer>
 800507c:	4602      	mov	r2, r0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f855 	bl	8005150 <HAL_SD_ErrorCallback>
}
 80050a6:	e04a      	b.n	800513e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d045      	beq.n	800513e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <HAL_SD_IRQHandler+0x282>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d011      	beq.n	80050ea <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ca:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <HAL_SD_IRQHandler+0x304>)
 80050cc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd fa26 	bl	8002524 <HAL_DMA_Abort_IT>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d02f      	beq.n	800513e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 fb68 	bl	80057b8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80050e8:	e029      	b.n	800513e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_SD_IRQHandler+0x2ba>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d011      	beq.n	8005122 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	4a12      	ldr	r2, [pc, #72]	; (800514c <HAL_SD_IRQHandler+0x308>)
 8005104:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	4618      	mov	r0, r3
 800510c:	f7fd fa0a 	bl	8002524 <HAL_DMA_Abort_IT>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d013      	beq.n	800513e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fb83 	bl	8005826 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005120:	e00d      	b.n	800513e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f002 fafe 	bl	8007738 <HAL_SD_AbortCallback>
}
 800513c:	e7ff      	b.n	800513e <HAL_SD_IRQHandler+0x2fa>
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	080057b9 	.word	0x080057b9
 800514c:	08005827 	.word	0x08005827

08005150 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005172:	0f9b      	lsrs	r3, r3, #30
 8005174:	b2da      	uxtb	r2, r3
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800517e:	0e9b      	lsrs	r3, r3, #26
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	b2da      	uxtb	r2, r3
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005190:	0e1b      	lsrs	r3, r3, #24
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	b2da      	uxtb	r2, r3
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a2:	0c1b      	lsrs	r3, r3, #16
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ae:	0a1b      	lsrs	r3, r3, #8
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051c4:	0d1b      	lsrs	r3, r3, #20
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051e2:	0bdb      	lsrs	r3, r3, #15
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f4:	0b9b      	lsrs	r3, r3, #14
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005206:	0b5b      	lsrs	r3, r3, #13
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005218:	0b1b      	lsrs	r3, r3, #12
 800521a:	b2db      	uxtb	r3, r3
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	b2da      	uxtb	r2, r3
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2200      	movs	r2, #0
 800522a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005230:	2b00      	cmp	r3, #0
 8005232:	d163      	bne.n	80052fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005238:	009a      	lsls	r2, r3, #2
 800523a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800523e:	4013      	ands	r3, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005244:	0f92      	lsrs	r2, r2, #30
 8005246:	431a      	orrs	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005250:	0edb      	lsrs	r3, r3, #27
 8005252:	b2db      	uxtb	r3, r3
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	b2da      	uxtb	r2, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005262:	0e1b      	lsrs	r3, r3, #24
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	b2da      	uxtb	r2, r3
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005274:	0d5b      	lsrs	r3, r3, #21
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	b2da      	uxtb	r2, r3
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005286:	0c9b      	lsrs	r3, r3, #18
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	b2da      	uxtb	r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005298:	0bdb      	lsrs	r3, r3, #15
 800529a:	b2db      	uxtb	r3, r3
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	7e1b      	ldrb	r3, [r3, #24]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	3302      	adds	r3, #2
 80052bc:	2201      	movs	r2, #1
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80052c6:	fb02 f203 	mul.w	r2, r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	7a1b      	ldrb	r3, [r3, #8]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	2201      	movs	r2, #1
 80052da:	409a      	lsls	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80052e8:	0a52      	lsrs	r2, r2, #9
 80052ea:	fb02 f203 	mul.w	r2, r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052f8:	661a      	str	r2, [r3, #96]	; 0x60
 80052fa:	e031      	b.n	8005360 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005300:	2b01      	cmp	r3, #1
 8005302:	d11d      	bne.n	8005340 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005312:	0c1b      	lsrs	r3, r3, #16
 8005314:	431a      	orrs	r2, r3
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	3301      	adds	r3, #1
 8005320:	029a      	lsls	r2, r3, #10
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005334:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	661a      	str	r2, [r3, #96]	; 0x60
 800533e:	e00f      	b.n	8005360 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a58      	ldr	r2, [pc, #352]	; (80054a8 <HAL_SD_GetCardCSD+0x344>)
 8005346:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e09d      	b.n	800549c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005364:	0b9b      	lsrs	r3, r3, #14
 8005366:	b2db      	uxtb	r3, r3
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	b2da      	uxtb	r2, r3
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005376:	09db      	lsrs	r3, r3, #7
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537e:	b2da      	uxtb	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005388:	b2db      	uxtb	r3, r3
 800538a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800538e:	b2da      	uxtb	r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	0fdb      	lsrs	r3, r3, #31
 800539a:	b2da      	uxtb	r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	0f5b      	lsrs	r3, r3, #29
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	f003 0303 	and.w	r3, r3, #3
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	0e9b      	lsrs	r3, r3, #26
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	0d9b      	lsrs	r3, r3, #22
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053da:	0d5b      	lsrs	r3, r3, #21
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f6:	0c1b      	lsrs	r3, r3, #16
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540a:	0bdb      	lsrs	r3, r3, #15
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	b2da      	uxtb	r2, r3
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	0b9b      	lsrs	r3, r3, #14
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	b2da      	uxtb	r2, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	0b5b      	lsrs	r3, r3, #13
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	b2da      	uxtb	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	0b1b      	lsrs	r3, r3, #12
 8005448:	b2db      	uxtb	r3, r3
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	b2da      	uxtb	r2, r3
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800545a:	0a9b      	lsrs	r3, r3, #10
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	b2da      	uxtb	r2, r3
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	0a1b      	lsrs	r3, r3, #8
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	b2da      	uxtb	r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800548a:	b2da      	uxtb	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	004005ff 	.word	0x004005ff

080054ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005504:	b5b0      	push	{r4, r5, r7, lr}
 8005506:	b08e      	sub	sp, #56	; 0x38
 8005508:	af04      	add	r7, sp, #16
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2203      	movs	r2, #3
 8005518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005520:	2b03      	cmp	r3, #3
 8005522:	d02e      	beq.n	8005582 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552a:	d106      	bne.n	800553a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	639a      	str	r2, [r3, #56]	; 0x38
 8005538:	e029      	b.n	800558e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005540:	d10a      	bne.n	8005558 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fb28 	bl	8005b98 <SD_WideBus_Enable>
 8005548:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800554e:	6a3b      	ldr	r3, [r7, #32]
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
 8005556:	e01a      	b.n	800558e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10a      	bne.n	8005574 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fb65 	bl	8005c2e <SD_WideBus_Disable>
 8005564:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556a:	6a3b      	ldr	r3, [r7, #32]
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	639a      	str	r2, [r3, #56]	; 0x38
 8005572:	e00c      	b.n	800558e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
 8005580:	e005      	b.n	800558e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a26      	ldr	r2, [pc, #152]	; (8005634 <HAL_SD_ConfigWideBusOperation+0x130>)
 800559c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80055ac:	e01f      	b.n	80055ee <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681d      	ldr	r5, [r3, #0]
 80055d4:	466c      	mov	r4, sp
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80055de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80055e2:	f107 0308 	add.w	r3, r7, #8
 80055e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e8:	4628      	mov	r0, r5
 80055ea:	f001 faa7 	bl	8006b3c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 fb7c 	bl	8006cf4 <SDMMC_CmdBlockLength>
 80055fc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00c      	beq.n	800561e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a0a      	ldr	r2, [pc, #40]	; (8005634 <HAL_SD_ConfigWideBusOperation+0x130>)
 800560a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800562a:	4618      	mov	r0, r3
 800562c:	3728      	adds	r7, #40	; 0x28
 800562e:	46bd      	mov	sp, r7
 8005630:	bdb0      	pop	{r4, r5, r7, pc}
 8005632:	bf00      	nop
 8005634:	004005ff 	.word	0x004005ff

08005638 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005644:	f107 030c 	add.w	r3, r7, #12
 8005648:	4619      	mov	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fa7c 	bl	8005b48 <SD_SendStatus>
 8005650:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	431a      	orrs	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	0a5b      	lsrs	r3, r3, #9
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800566e:	693b      	ldr	r3, [r7, #16]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005694:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	2b82      	cmp	r3, #130	; 0x82
 80056b6:	d111      	bne.n	80056dc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4618      	mov	r0, r3
 80056be:	f001 fbc3 	bl	8006e48 <SDMMC_CmdStopTransfer>
 80056c2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d008      	beq.n	80056dc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff fd3a 	bl	8005150 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0208 	bic.w	r2, r2, #8
 80056ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f002 f82b 	bl	8007760 <HAL_SD_RxCpltCallback>
#endif
}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
	...

08005714 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fd f8aa 	bl	800287c <HAL_DMA_GetError>
 8005728:	4603      	mov	r3, r0
 800572a:	2b02      	cmp	r3, #2
 800572c:	d03e      	beq.n	80057ac <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d002      	beq.n	800574a <SD_DMAError+0x36>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d12d      	bne.n	80057a6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a19      	ldr	r2, [pc, #100]	; (80057b4 <SD_DMAError+0xa0>)
 8005750:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005760:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800576e:	6978      	ldr	r0, [r7, #20]
 8005770:	f7ff ff62 	bl	8005638 <HAL_SD_GetCardState>
 8005774:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2b06      	cmp	r3, #6
 800577a:	d002      	beq.n	8005782 <SD_DMAError+0x6e>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b05      	cmp	r3, #5
 8005780:	d10a      	bne.n	8005798 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f001 fb5e 	bl	8006e48 <SDMMC_CmdStopTransfer>
 800578c:	4602      	mov	r2, r0
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005792:	431a      	orrs	r2, r3
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2200      	movs	r2, #0
 80057a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80057a6:	6978      	ldr	r0, [r7, #20]
 80057a8:	f7ff fcd2 	bl	8005150 <HAL_SD_ErrorCallback>
#endif
  }
}
 80057ac:	bf00      	nop
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	004005ff 	.word	0x004005ff

080057b8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f240 523a 	movw	r2, #1338	; 0x53a
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7ff ff31 	bl	8005638 <HAL_SD_GetCardState>
 80057d6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b06      	cmp	r3, #6
 80057ea:	d002      	beq.n	80057f2 <SD_DMATxAbort+0x3a>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	2b05      	cmp	r3, #5
 80057f0:	d10a      	bne.n	8005808 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 fb26 	bl	8006e48 <SDMMC_CmdStopTransfer>
 80057fc:	4602      	mov	r2, r0
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	431a      	orrs	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d103      	bne.n	8005818 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f001 ff91 	bl	8007738 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005816:	e002      	b.n	800581e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f7ff fc99 	bl	8005150 <HAL_SD_ErrorCallback>
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f240 523a 	movw	r2, #1338	; 0x53a
 800583c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fefa 	bl	8005638 <HAL_SD_GetCardState>
 8005844:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b06      	cmp	r3, #6
 8005858:	d002      	beq.n	8005860 <SD_DMARxAbort+0x3a>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b05      	cmp	r3, #5
 800585e:	d10a      	bne.n	8005876 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f001 faef 	bl	8006e48 <SDMMC_CmdStopTransfer>
 800586a:	4602      	mov	r2, r0
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	431a      	orrs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	2b00      	cmp	r3, #0
 800587c:	d103      	bne.n	8005886 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f001 ff5a 	bl	8007738 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005884:	e002      	b.n	800588c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f7ff fc62 	bl	8005150 <HAL_SD_ErrorCallback>
}
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005894:	b5b0      	push	{r4, r5, r7, lr}
 8005896:	b094      	sub	sp, #80	; 0x50
 8005898:	af04      	add	r7, sp, #16
 800589a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800589c:	2301      	movs	r3, #1
 800589e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 f9a1 	bl	8006bec <SDIO_GetPowerState>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80058b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80058b4:	e0b6      	b.n	8005a24 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d02f      	beq.n	800591e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f001 fbca 	bl	800705c <SDMMC_CmdSendCID>
 80058c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80058ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80058d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d2:	e0a7      	b.n	8005a24 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2100      	movs	r1, #0
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 f9cb 	bl	8006c76 <SDIO_GetResponse>
 80058e0:	4602      	mov	r2, r0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2104      	movs	r1, #4
 80058ec:	4618      	mov	r0, r3
 80058ee:	f001 f9c2 	bl	8006c76 <SDIO_GetResponse>
 80058f2:	4602      	mov	r2, r0
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2108      	movs	r1, #8
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 f9b9 	bl	8006c76 <SDIO_GetResponse>
 8005904:	4602      	mov	r2, r0
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	210c      	movs	r1, #12
 8005910:	4618      	mov	r0, r3
 8005912:	f001 f9b0 	bl	8006c76 <SDIO_GetResponse>
 8005916:	4602      	mov	r2, r0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005922:	2b03      	cmp	r3, #3
 8005924:	d00d      	beq.n	8005942 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f107 020e 	add.w	r2, r7, #14
 800592e:	4611      	mov	r1, r2
 8005930:	4618      	mov	r0, r3
 8005932:	f001 fbd0 	bl	80070d6 <SDMMC_CmdSetRelAdd>
 8005936:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <SD_InitCard+0xae>
    {
      return errorstate;
 800593e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005940:	e070      	b.n	8005a24 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005946:	2b03      	cmp	r3, #3
 8005948:	d036      	beq.n	80059b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800594a:	89fb      	ldrh	r3, [r7, #14]
 800594c:	461a      	mov	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595a:	041b      	lsls	r3, r3, #16
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	f001 fb9a 	bl	8007098 <SDMMC_CmdSendCSD>
 8005964:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <SD_InitCard+0xdc>
    {
      return errorstate;
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	e059      	b.n	8005a24 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2100      	movs	r1, #0
 8005976:	4618      	mov	r0, r3
 8005978:	f001 f97d 	bl	8006c76 <SDIO_GetResponse>
 800597c:	4602      	mov	r2, r0
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2104      	movs	r1, #4
 8005988:	4618      	mov	r0, r3
 800598a:	f001 f974 	bl	8006c76 <SDIO_GetResponse>
 800598e:	4602      	mov	r2, r0
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2108      	movs	r1, #8
 800599a:	4618      	mov	r0, r3
 800599c:	f001 f96b 	bl	8006c76 <SDIO_GetResponse>
 80059a0:	4602      	mov	r2, r0
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	210c      	movs	r1, #12
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 f962 	bl	8006c76 <SDIO_GetResponse>
 80059b2:	4602      	mov	r2, r0
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2104      	movs	r1, #4
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 f959 	bl	8006c76 <SDIO_GetResponse>
 80059c4:	4603      	mov	r3, r0
 80059c6:	0d1a      	lsrs	r2, r3, #20
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80059cc:	f107 0310 	add.w	r3, r7, #16
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fbc6 	bl	8005164 <HAL_SD_GetCardCSD>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80059e2:	e01f      	b.n	8005a24 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6819      	ldr	r1, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ec:	041b      	lsls	r3, r3, #16
 80059ee:	461a      	mov	r2, r3
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	4608      	mov	r0, r1
 80059f6:	f001 fa49 	bl	8006e8c <SDMMC_CmdSelDesel>
 80059fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80059fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <SD_InitCard+0x172>
  {
    return errorstate;
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	e00e      	b.n	8005a24 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681d      	ldr	r5, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	466c      	mov	r4, sp
 8005a0e:	f103 0210 	add.w	r2, r3, #16
 8005a12:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a18:	3304      	adds	r3, #4
 8005a1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	f001 f88d 	bl	8006b3c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3740      	adds	r7, #64	; 0x40
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bdb0      	pop	{r4, r5, r7, pc}

08005a2c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 fa44 	bl	8006ed2 <SDMMC_CmdGoIdleState>
 8005a4a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	e072      	b.n	8005b3c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 fa57 	bl	8006f0e <SDMMC_CmdOperCond>
 8005a60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00d      	beq.n	8005a84 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f001 fa2d 	bl	8006ed2 <SDMMC_CmdGoIdleState>
 8005a78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	e05b      	b.n	8005b3c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d137      	bne.n	8005b02 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2100      	movs	r1, #0
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f001 fa57 	bl	8006f4c <SDMMC_CmdAppCommand>
 8005a9e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d02d      	beq.n	8005b02 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005aa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005aaa:	e047      	b.n	8005b3c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 fa4a 	bl	8006f4c <SDMMC_CmdAppCommand>
 8005ab8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <SD_PowerON+0x98>
    {
      return errorstate;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	e03b      	b.n	8005b3c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	491e      	ldr	r1, [pc, #120]	; (8005b44 <SD_PowerON+0x118>)
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fa60 	bl	8006f90 <SDMMC_CmdAppOperCommand>
 8005ad0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ad8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005adc:	e02e      	b.n	8005b3c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f001 f8c6 	bl	8006c76 <SDIO_GetResponse>
 8005aea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	0fdb      	lsrs	r3, r3, #31
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <SD_PowerON+0xcc>
 8005af4:	2301      	movs	r3, #1
 8005af6:	e000      	b.n	8005afa <SD_PowerON+0xce>
 8005af8:	2300      	movs	r3, #0
 8005afa:	613b      	str	r3, [r7, #16]

    count++;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d802      	bhi.n	8005b12 <SD_PowerON+0xe6>
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d0cc      	beq.n	8005aac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d902      	bls.n	8005b22 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b20:	e00c      	b.n	8005b3c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	645a      	str	r2, [r3, #68]	; 0x44
 8005b32:	e002      	b.n	8005b3a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	c1100000 	.word	0xc1100000

08005b48 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005b58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b5c:	e018      	b.n	8005b90 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b66:	041b      	lsls	r3, r3, #16
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f001 fad4 	bl	8007118 <SDMMC_CmdSendStatus>
 8005b70:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	e009      	b.n	8005b90 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2100      	movs	r1, #0
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 f877 	bl	8006c76 <SDIO_GetResponse>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2100      	movs	r1, #0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f001 f861 	bl	8006c76 <SDIO_GetResponse>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bbe:	d102      	bne.n	8005bc6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005bc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bc4:	e02f      	b.n	8005c26 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005bc6:	f107 030c 	add.w	r3, r7, #12
 8005bca:	4619      	mov	r1, r3
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f879 	bl	8005cc4 <SD_FindSCR>
 8005bd2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	e023      	b.n	8005c26 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01c      	beq.n	8005c22 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	f001 f9a9 	bl	8006f4c <SDMMC_CmdAppCommand>
 8005bfa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	e00f      	b.n	8005c26 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2102      	movs	r1, #2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f001 f9e2 	bl	8006fd6 <SDMMC_CmdBusWidth>
 8005c12:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	e003      	b.n	8005c26 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e001      	b.n	8005c26 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b086      	sub	sp, #24
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2100      	movs	r1, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f001 f816 	bl	8006c76 <SDIO_GetResponse>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c54:	d102      	bne.n	8005c5c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c5a:	e02f      	b.n	8005cbc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c5c:	f107 030c 	add.w	r3, r7, #12
 8005c60:	4619      	mov	r1, r3
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f82e 	bl	8005cc4 <SD_FindSCR>
 8005c68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	e023      	b.n	8005cbc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d01c      	beq.n	8005cb8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c86:	041b      	lsls	r3, r3, #16
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4610      	mov	r0, r2
 8005c8c:	f001 f95e 	bl	8006f4c <SDMMC_CmdAppCommand>
 8005c90:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	e00f      	b.n	8005cbc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 f997 	bl	8006fd6 <SDMMC_CmdBusWidth>
 8005ca8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d001      	beq.n	8005cb4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	e003      	b.n	8005cbc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	e001      	b.n	8005cbc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005cb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005cc4:	b590      	push	{r4, r7, lr}
 8005cc6:	b08f      	sub	sp, #60	; 0x3c
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005cce:	f7fc fa11 	bl	80020f4 <HAL_GetTick>
 8005cd2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2108      	movs	r1, #8
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 f802 	bl	8006cf4 <SDMMC_CmdBlockLength>
 8005cf0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <SD_FindSCR+0x38>
  {
    return errorstate;
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	e0b2      	b.n	8005e62 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d04:	041b      	lsls	r3, r3, #16
 8005d06:	4619      	mov	r1, r3
 8005d08:	4610      	mov	r0, r2
 8005d0a:	f001 f91f 	bl	8006f4c <SDMMC_CmdAppCommand>
 8005d0e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	e0a3      	b.n	8005e62 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d1e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005d20:	2308      	movs	r3, #8
 8005d22:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005d24:	2330      	movs	r3, #48	; 0x30
 8005d26:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f107 0210 	add.w	r2, r7, #16
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 ffac 	bl	8006c9c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 f966 	bl	800701a <SDMMC_CmdSendSCR>
 8005d4e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d02a      	beq.n	8005dac <SD_FindSCR+0xe8>
  {
    return errorstate;
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	e083      	b.n	8005e62 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00f      	beq.n	8005d88 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6819      	ldr	r1, [r3, #0]
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	f107 0208 	add.w	r2, r7, #8
 8005d74:	18d4      	adds	r4, r2, r3
 8005d76:	4608      	mov	r0, r1
 8005d78:	f000 ff0b 	bl	8006b92 <SDIO_ReadFIFO>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	6023      	str	r3, [r4, #0]
      index++;
 8005d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d82:	3301      	adds	r3, #1
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
 8005d86:	e006      	b.n	8005d96 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d012      	beq.n	8005dbc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005d96:	f7fc f9ad 	bl	80020f4 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da4:	d102      	bne.n	8005dac <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005da6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005daa:	e05a      	b.n	8005e62 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0cf      	beq.n	8005d5a <SD_FindSCR+0x96>
 8005dba:	e000      	b.n	8005dbe <SD_FindSCR+0xfa>
      break;
 8005dbc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc4:	f003 0308 	and.w	r3, r3, #8
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	e044      	b.n	8005e62 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2202      	movs	r2, #2
 8005dec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005dee:	2302      	movs	r3, #2
 8005df0:	e037      	b.n	8005e62 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d005      	beq.n	8005e0c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2220      	movs	r2, #32
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005e08:	2320      	movs	r3, #32
 8005e0a:	e02a      	b.n	8005e62 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f240 523a 	movw	r2, #1338	; 0x53a
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	061a      	lsls	r2, r3, #24
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e22:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	0a1b      	lsrs	r3, r3, #8
 8005e28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e2c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	0e1b      	lsrs	r3, r3, #24
 8005e32:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e36:	601a      	str	r2, [r3, #0]
    scr++;
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	061a      	lsls	r2, r3, #24
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e4a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e54:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	0e1b      	lsrs	r3, r3, #24
 8005e5a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	373c      	adds	r7, #60	; 0x3c
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd90      	pop	{r4, r7, pc}

08005e6a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b086      	sub	sp, #24
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d03f      	beq.n	8005f04 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005e84:	2300      	movs	r3, #0
 8005e86:	617b      	str	r3, [r7, #20]
 8005e88:	e033      	b.n	8005ef2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fe7f 	bl	8006b92 <SDIO_ReadFIFO>
 8005e94:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	0a1b      	lsrs	r3, r3, #8
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	0e1b      	lsrs	r3, r3, #24
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2b07      	cmp	r3, #7
 8005ef6:	d9c8      	bls.n	8005e8a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005f04:	bf00      	nop
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d043      	beq.n	8005fae <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005f26:	2300      	movs	r3, #0
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	e037      	b.n	8005f9c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	021a      	lsls	r2, r3, #8
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	041a      	lsls	r2, r3, #16
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3301      	adds	r3, #1
 8005f66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	061a      	lsls	r2, r3, #24
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f107 0208 	add.w	r2, r7, #8
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fe0b 	bl	8006bac <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b07      	cmp	r3, #7
 8005fa0:	d9c4      	bls.n	8005f2c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005fae:	bf00      	nop
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b082      	sub	sp, #8
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e041      	b.n	800604c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 f839 	bl	8006054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	f000 f9d7 	bl	80063a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b085      	sub	sp, #20
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006076:	b2db      	uxtb	r3, r3
 8006078:	2b01      	cmp	r3, #1
 800607a:	d001      	beq.n	8006080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e04e      	b.n	800611e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0201 	orr.w	r2, r2, #1
 8006096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a23      	ldr	r2, [pc, #140]	; (800612c <HAL_TIM_Base_Start_IT+0xc4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d022      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060aa:	d01d      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1f      	ldr	r2, [pc, #124]	; (8006130 <HAL_TIM_Base_Start_IT+0xc8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d018      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1e      	ldr	r2, [pc, #120]	; (8006134 <HAL_TIM_Base_Start_IT+0xcc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d013      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1c      	ldr	r2, [pc, #112]	; (8006138 <HAL_TIM_Base_Start_IT+0xd0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00e      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1b      	ldr	r2, [pc, #108]	; (800613c <HAL_TIM_Base_Start_IT+0xd4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d009      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a19      	ldr	r2, [pc, #100]	; (8006140 <HAL_TIM_Base_Start_IT+0xd8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d004      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x80>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a18      	ldr	r2, [pc, #96]	; (8006144 <HAL_TIM_Base_Start_IT+0xdc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d111      	bne.n	800610c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2b06      	cmp	r3, #6
 80060f8:	d010      	beq.n	800611c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f042 0201 	orr.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610a:	e007      	b.n	800611c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0201 	orr.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40010000 	.word	0x40010000
 8006130:	40000400 	.word	0x40000400
 8006134:	40000800 	.word	0x40000800
 8006138:	40000c00 	.word	0x40000c00
 800613c:	40010400 	.word	0x40010400
 8006140:	40014000 	.word	0x40014000
 8006144:	40001800 	.word	0x40001800

08006148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b02      	cmp	r3, #2
 800615c:	d122      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f003 0302 	and.w	r3, r3, #2
 8006168:	2b02      	cmp	r3, #2
 800616a:	d11b      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0202 	mvn.w	r2, #2
 8006174:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f8ee 	bl	800636c <HAL_TIM_IC_CaptureCallback>
 8006190:	e005      	b.n	800619e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f8e0 	bl	8006358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f8f1 	bl	8006380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0304 	and.w	r3, r3, #4
 80061ae:	2b04      	cmp	r3, #4
 80061b0:	d122      	bne.n	80061f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d11b      	bne.n	80061f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0204 	mvn.w	r2, #4
 80061c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d003      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f8c4 	bl	800636c <HAL_TIM_IC_CaptureCallback>
 80061e4:	e005      	b.n	80061f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f8b6 	bl	8006358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 f8c7 	bl	8006380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b08      	cmp	r3, #8
 8006204:	d122      	bne.n	800624c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0308 	and.w	r3, r3, #8
 8006210:	2b08      	cmp	r3, #8
 8006212:	d11b      	bne.n	800624c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0208 	mvn.w	r2, #8
 800621c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2204      	movs	r2, #4
 8006222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f89a 	bl	800636c <HAL_TIM_IC_CaptureCallback>
 8006238:	e005      	b.n	8006246 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f88c 	bl	8006358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f89d 	bl	8006380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b10      	cmp	r3, #16
 8006258:	d122      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b10      	cmp	r3, #16
 8006266:	d11b      	bne.n	80062a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f06f 0210 	mvn.w	r2, #16
 8006270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2208      	movs	r2, #8
 8006276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f870 	bl	800636c <HAL_TIM_IC_CaptureCallback>
 800628c:	e005      	b.n	800629a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f862 	bl	8006358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f873 	bl	8006380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d10e      	bne.n	80062cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0301 	and.w	r3, r3, #1
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d107      	bne.n	80062cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0201 	mvn.w	r2, #1
 80062c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fb fbbe 	bl	8001a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d6:	2b80      	cmp	r3, #128	; 0x80
 80062d8:	d10e      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b80      	cmp	r3, #128	; 0x80
 80062e6:	d107      	bne.n	80062f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f902 	bl	80064fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006302:	2b40      	cmp	r3, #64	; 0x40
 8006304:	d10e      	bne.n	8006324 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d107      	bne.n	8006324 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800631c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f838 	bl	8006394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0320 	and.w	r3, r3, #32
 800632e:	2b20      	cmp	r3, #32
 8006330:	d10e      	bne.n	8006350 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b20      	cmp	r3, #32
 800633e:	d107      	bne.n	8006350 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0220 	mvn.w	r2, #32
 8006348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f8cc 	bl	80064e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a40      	ldr	r2, [pc, #256]	; (80064bc <TIM_Base_SetConfig+0x114>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d013      	beq.n	80063e8 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c6:	d00f      	beq.n	80063e8 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a3d      	ldr	r2, [pc, #244]	; (80064c0 <TIM_Base_SetConfig+0x118>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00b      	beq.n	80063e8 <TIM_Base_SetConfig+0x40>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a3c      	ldr	r2, [pc, #240]	; (80064c4 <TIM_Base_SetConfig+0x11c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d007      	beq.n	80063e8 <TIM_Base_SetConfig+0x40>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a3b      	ldr	r2, [pc, #236]	; (80064c8 <TIM_Base_SetConfig+0x120>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d003      	beq.n	80063e8 <TIM_Base_SetConfig+0x40>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a3a      	ldr	r2, [pc, #232]	; (80064cc <TIM_Base_SetConfig+0x124>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d108      	bne.n	80063fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2f      	ldr	r2, [pc, #188]	; (80064bc <TIM_Base_SetConfig+0x114>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d02b      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006408:	d027      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2c      	ldr	r2, [pc, #176]	; (80064c0 <TIM_Base_SetConfig+0x118>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d023      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2b      	ldr	r2, [pc, #172]	; (80064c4 <TIM_Base_SetConfig+0x11c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01f      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a2a      	ldr	r2, [pc, #168]	; (80064c8 <TIM_Base_SetConfig+0x120>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01b      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a29      	ldr	r2, [pc, #164]	; (80064cc <TIM_Base_SetConfig+0x124>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d017      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a28      	ldr	r2, [pc, #160]	; (80064d0 <TIM_Base_SetConfig+0x128>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d013      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a27      	ldr	r2, [pc, #156]	; (80064d4 <TIM_Base_SetConfig+0x12c>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00f      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a26      	ldr	r2, [pc, #152]	; (80064d8 <TIM_Base_SetConfig+0x130>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00b      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a25      	ldr	r2, [pc, #148]	; (80064dc <TIM_Base_SetConfig+0x134>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d007      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a24      	ldr	r2, [pc, #144]	; (80064e0 <TIM_Base_SetConfig+0x138>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d003      	beq.n	800645a <TIM_Base_SetConfig+0xb2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a23      	ldr	r2, [pc, #140]	; (80064e4 <TIM_Base_SetConfig+0x13c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d108      	bne.n	800646c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	4313      	orrs	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a0a      	ldr	r2, [pc, #40]	; (80064bc <TIM_Base_SetConfig+0x114>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d003      	beq.n	80064a0 <TIM_Base_SetConfig+0xf8>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a0c      	ldr	r2, [pc, #48]	; (80064cc <TIM_Base_SetConfig+0x124>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d103      	bne.n	80064a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	615a      	str	r2, [r3, #20]
}
 80064ae:	bf00      	nop
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	40010400 	.word	0x40010400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800
 80064dc:	40001800 	.word	0x40001800
 80064e0:	40001c00 	.word	0x40001c00
 80064e4:	40002000 	.word	0x40002000

080064e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e03f      	b.n	80065a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fb fbc6 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2224      	movs	r2, #36	; 0x24
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68da      	ldr	r2, [r3, #12]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006552:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f929 	bl	80067ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006568:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695a      	ldr	r2, [r3, #20]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006578:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006588:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2220      	movs	r2, #32
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b08a      	sub	sp, #40	; 0x28
 80065ae:	af02      	add	r7, sp, #8
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d17c      	bne.n	80066c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_UART_Transmit+0x2c>
 80065d0:	88fb      	ldrh	r3, [r7, #6]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e075      	b.n	80066c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_UART_Transmit+0x3e>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e06e      	b.n	80066c6 <HAL_UART_Transmit+0x11c>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2221      	movs	r2, #33	; 0x21
 80065fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065fe:	f7fb fd79 	bl	80020f4 <HAL_GetTick>
 8006602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	88fa      	ldrh	r2, [r7, #6]
 8006608:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	88fa      	ldrh	r2, [r7, #6]
 800660e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006618:	d108      	bne.n	800662c <HAL_UART_Transmit+0x82>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d104      	bne.n	800662c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	e003      	b.n	8006634 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006630:	2300      	movs	r3, #0
 8006632:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800663c:	e02a      	b.n	8006694 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2200      	movs	r2, #0
 8006646:	2180      	movs	r1, #128	; 0x80
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f840 	bl	80066ce <UART_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e036      	b.n	80066c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10b      	bne.n	8006676 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	881b      	ldrh	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800666c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	3302      	adds	r3, #2
 8006672:	61bb      	str	r3, [r7, #24]
 8006674:	e007      	b.n	8006686 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	781a      	ldrb	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	3301      	adds	r3, #1
 8006684:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800668a:	b29b      	uxth	r3, r3
 800668c:	3b01      	subs	r3, #1
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006698:	b29b      	uxth	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1cf      	bne.n	800663e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2140      	movs	r1, #64	; 0x40
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f810 	bl	80066ce <UART_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e006      	b.n	80066c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	e000      	b.n	80066c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066c4:	2302      	movs	r3, #2
  }
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3720      	adds	r7, #32
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b090      	sub	sp, #64	; 0x40
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	60b9      	str	r1, [r7, #8]
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	4613      	mov	r3, r2
 80066dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066de:	e050      	b.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066e6:	d04c      	beq.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80066e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <UART_WaitOnFlagUntilTimeout+0x30>
 80066ee:	f7fb fd01 	bl	80020f4 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d241      	bcs.n	8006782 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	330c      	adds	r3, #12
 800671c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800671e:	637a      	str	r2, [r7, #52]	; 0x34
 8006720:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e5      	bne.n	80066fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3314      	adds	r3, #20
 8006738:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	613b      	str	r3, [r7, #16]
   return(result);
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	63bb      	str	r3, [r7, #56]	; 0x38
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3314      	adds	r3, #20
 8006750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006752:	623a      	str	r2, [r7, #32]
 8006754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006756:	69f9      	ldr	r1, [r7, #28]
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1e5      	bne.n	8006732 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2220      	movs	r2, #32
 8006772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e00f      	b.n	80067a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	4013      	ands	r3, r2
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	bf0c      	ite	eq
 8006792:	2301      	moveq	r3, #1
 8006794:	2300      	movne	r3, #0
 8006796:	b2db      	uxtb	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	429a      	cmp	r2, r3
 800679e:	d09f      	beq.n	80066e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3740      	adds	r7, #64	; 0x40
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b0:	b09f      	sub	sp, #124	; 0x7c
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c2:	68d9      	ldr	r1, [r3, #12]
 80067c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	ea40 0301 	orr.w	r3, r0, r1
 80067cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	431a      	orrs	r2, r3
 80067de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80067e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80067f0:	f021 010c 	bic.w	r1, r1, #12
 80067f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067fa:	430b      	orrs	r3, r1
 80067fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680a:	6999      	ldr	r1, [r3, #24]
 800680c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	ea40 0301 	orr.w	r3, r0, r1
 8006814:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4bc5      	ldr	r3, [pc, #788]	; (8006b30 <UART_SetConfig+0x384>)
 800681c:	429a      	cmp	r2, r3
 800681e:	d004      	beq.n	800682a <UART_SetConfig+0x7e>
 8006820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4bc3      	ldr	r3, [pc, #780]	; (8006b34 <UART_SetConfig+0x388>)
 8006826:	429a      	cmp	r2, r3
 8006828:	d103      	bne.n	8006832 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800682a:	f7fe f84f 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 800682e:	6778      	str	r0, [r7, #116]	; 0x74
 8006830:	e002      	b.n	8006838 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006832:	f7fe f837 	bl	80048a4 <HAL_RCC_GetPCLK1Freq>
 8006836:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006840:	f040 80b6 	bne.w	80069b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006846:	461c      	mov	r4, r3
 8006848:	f04f 0500 	mov.w	r5, #0
 800684c:	4622      	mov	r2, r4
 800684e:	462b      	mov	r3, r5
 8006850:	1891      	adds	r1, r2, r2
 8006852:	6439      	str	r1, [r7, #64]	; 0x40
 8006854:	415b      	adcs	r3, r3
 8006856:	647b      	str	r3, [r7, #68]	; 0x44
 8006858:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800685c:	1912      	adds	r2, r2, r4
 800685e:	eb45 0303 	adc.w	r3, r5, r3
 8006862:	f04f 0000 	mov.w	r0, #0
 8006866:	f04f 0100 	mov.w	r1, #0
 800686a:	00d9      	lsls	r1, r3, #3
 800686c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006870:	00d0      	lsls	r0, r2, #3
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	1911      	adds	r1, r2, r4
 8006878:	6639      	str	r1, [r7, #96]	; 0x60
 800687a:	416b      	adcs	r3, r5
 800687c:	667b      	str	r3, [r7, #100]	; 0x64
 800687e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	461a      	mov	r2, r3
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	1891      	adds	r1, r2, r2
 800688a:	63b9      	str	r1, [r7, #56]	; 0x38
 800688c:	415b      	adcs	r3, r3
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006890:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006894:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006898:	f7f9 fd02 	bl	80002a0 <__aeabi_uldivmod>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4ba5      	ldr	r3, [pc, #660]	; (8006b38 <UART_SetConfig+0x38c>)
 80068a2:	fba3 2302 	umull	r2, r3, r3, r2
 80068a6:	095b      	lsrs	r3, r3, #5
 80068a8:	011e      	lsls	r6, r3, #4
 80068aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ac:	461c      	mov	r4, r3
 80068ae:	f04f 0500 	mov.w	r5, #0
 80068b2:	4622      	mov	r2, r4
 80068b4:	462b      	mov	r3, r5
 80068b6:	1891      	adds	r1, r2, r2
 80068b8:	6339      	str	r1, [r7, #48]	; 0x30
 80068ba:	415b      	adcs	r3, r3
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
 80068be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068c2:	1912      	adds	r2, r2, r4
 80068c4:	eb45 0303 	adc.w	r3, r5, r3
 80068c8:	f04f 0000 	mov.w	r0, #0
 80068cc:	f04f 0100 	mov.w	r1, #0
 80068d0:	00d9      	lsls	r1, r3, #3
 80068d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068d6:	00d0      	lsls	r0, r2, #3
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	1911      	adds	r1, r2, r4
 80068de:	65b9      	str	r1, [r7, #88]	; 0x58
 80068e0:	416b      	adcs	r3, r5
 80068e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	461a      	mov	r2, r3
 80068ea:	f04f 0300 	mov.w	r3, #0
 80068ee:	1891      	adds	r1, r2, r2
 80068f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80068f2:	415b      	adcs	r3, r3
 80068f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80068fe:	f7f9 fccf 	bl	80002a0 <__aeabi_uldivmod>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4b8c      	ldr	r3, [pc, #560]	; (8006b38 <UART_SetConfig+0x38c>)
 8006908:	fba3 1302 	umull	r1, r3, r3, r2
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	2164      	movs	r1, #100	; 0x64
 8006910:	fb01 f303 	mul.w	r3, r1, r3
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	3332      	adds	r3, #50	; 0x32
 800691a:	4a87      	ldr	r2, [pc, #540]	; (8006b38 <UART_SetConfig+0x38c>)
 800691c:	fba2 2303 	umull	r2, r3, r2, r3
 8006920:	095b      	lsrs	r3, r3, #5
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006928:	441e      	add	r6, r3
 800692a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800692c:	4618      	mov	r0, r3
 800692e:	f04f 0100 	mov.w	r1, #0
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	1894      	adds	r4, r2, r2
 8006938:	623c      	str	r4, [r7, #32]
 800693a:	415b      	adcs	r3, r3
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
 800693e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006942:	1812      	adds	r2, r2, r0
 8006944:	eb41 0303 	adc.w	r3, r1, r3
 8006948:	f04f 0400 	mov.w	r4, #0
 800694c:	f04f 0500 	mov.w	r5, #0
 8006950:	00dd      	lsls	r5, r3, #3
 8006952:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006956:	00d4      	lsls	r4, r2, #3
 8006958:	4622      	mov	r2, r4
 800695a:	462b      	mov	r3, r5
 800695c:	1814      	adds	r4, r2, r0
 800695e:	653c      	str	r4, [r7, #80]	; 0x50
 8006960:	414b      	adcs	r3, r1
 8006962:	657b      	str	r3, [r7, #84]	; 0x54
 8006964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	461a      	mov	r2, r3
 800696a:	f04f 0300 	mov.w	r3, #0
 800696e:	1891      	adds	r1, r2, r2
 8006970:	61b9      	str	r1, [r7, #24]
 8006972:	415b      	adcs	r3, r3
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800697a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800697e:	f7f9 fc8f 	bl	80002a0 <__aeabi_uldivmod>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4b6c      	ldr	r3, [pc, #432]	; (8006b38 <UART_SetConfig+0x38c>)
 8006988:	fba3 1302 	umull	r1, r3, r3, r2
 800698c:	095b      	lsrs	r3, r3, #5
 800698e:	2164      	movs	r1, #100	; 0x64
 8006990:	fb01 f303 	mul.w	r3, r1, r3
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	3332      	adds	r3, #50	; 0x32
 800699a:	4a67      	ldr	r2, [pc, #412]	; (8006b38 <UART_SetConfig+0x38c>)
 800699c:	fba2 2303 	umull	r2, r3, r2, r3
 80069a0:	095b      	lsrs	r3, r3, #5
 80069a2:	f003 0207 	and.w	r2, r3, #7
 80069a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4432      	add	r2, r6
 80069ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069ae:	e0b9      	b.n	8006b24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069b2:	461c      	mov	r4, r3
 80069b4:	f04f 0500 	mov.w	r5, #0
 80069b8:	4622      	mov	r2, r4
 80069ba:	462b      	mov	r3, r5
 80069bc:	1891      	adds	r1, r2, r2
 80069be:	6139      	str	r1, [r7, #16]
 80069c0:	415b      	adcs	r3, r3
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069c8:	1912      	adds	r2, r2, r4
 80069ca:	eb45 0303 	adc.w	r3, r5, r3
 80069ce:	f04f 0000 	mov.w	r0, #0
 80069d2:	f04f 0100 	mov.w	r1, #0
 80069d6:	00d9      	lsls	r1, r3, #3
 80069d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069dc:	00d0      	lsls	r0, r2, #3
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	eb12 0804 	adds.w	r8, r2, r4
 80069e6:	eb43 0905 	adc.w	r9, r3, r5
 80069ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f04f 0100 	mov.w	r1, #0
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	008b      	lsls	r3, r1, #2
 80069fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a02:	0082      	lsls	r2, r0, #2
 8006a04:	4640      	mov	r0, r8
 8006a06:	4649      	mov	r1, r9
 8006a08:	f7f9 fc4a 	bl	80002a0 <__aeabi_uldivmod>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	460b      	mov	r3, r1
 8006a10:	4b49      	ldr	r3, [pc, #292]	; (8006b38 <UART_SetConfig+0x38c>)
 8006a12:	fba3 2302 	umull	r2, r3, r3, r2
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	011e      	lsls	r6, r3, #4
 8006a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f04f 0100 	mov.w	r1, #0
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	1894      	adds	r4, r2, r2
 8006a28:	60bc      	str	r4, [r7, #8]
 8006a2a:	415b      	adcs	r3, r3
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a32:	1812      	adds	r2, r2, r0
 8006a34:	eb41 0303 	adc.w	r3, r1, r3
 8006a38:	f04f 0400 	mov.w	r4, #0
 8006a3c:	f04f 0500 	mov.w	r5, #0
 8006a40:	00dd      	lsls	r5, r3, #3
 8006a42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a46:	00d4      	lsls	r4, r2, #3
 8006a48:	4622      	mov	r2, r4
 8006a4a:	462b      	mov	r3, r5
 8006a4c:	1814      	adds	r4, r2, r0
 8006a4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006a50:	414b      	adcs	r3, r1
 8006a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f04f 0100 	mov.w	r1, #0
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	008b      	lsls	r3, r1, #2
 8006a68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a6c:	0082      	lsls	r2, r0, #2
 8006a6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006a72:	f7f9 fc15 	bl	80002a0 <__aeabi_uldivmod>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4b2f      	ldr	r3, [pc, #188]	; (8006b38 <UART_SetConfig+0x38c>)
 8006a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a80:	095b      	lsrs	r3, r3, #5
 8006a82:	2164      	movs	r1, #100	; 0x64
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	3332      	adds	r3, #50	; 0x32
 8006a8e:	4a2a      	ldr	r2, [pc, #168]	; (8006b38 <UART_SetConfig+0x38c>)
 8006a90:	fba2 2303 	umull	r2, r3, r2, r3
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a9a:	441e      	add	r6, r3
 8006a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f04f 0100 	mov.w	r1, #0
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	1894      	adds	r4, r2, r2
 8006aaa:	603c      	str	r4, [r7, #0]
 8006aac:	415b      	adcs	r3, r3
 8006aae:	607b      	str	r3, [r7, #4]
 8006ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab4:	1812      	adds	r2, r2, r0
 8006ab6:	eb41 0303 	adc.w	r3, r1, r3
 8006aba:	f04f 0400 	mov.w	r4, #0
 8006abe:	f04f 0500 	mov.w	r5, #0
 8006ac2:	00dd      	lsls	r5, r3, #3
 8006ac4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ac8:	00d4      	lsls	r4, r2, #3
 8006aca:	4622      	mov	r2, r4
 8006acc:	462b      	mov	r3, r5
 8006ace:	eb12 0a00 	adds.w	sl, r2, r0
 8006ad2:	eb43 0b01 	adc.w	fp, r3, r1
 8006ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f04f 0100 	mov.w	r1, #0
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	f04f 0300 	mov.w	r3, #0
 8006ae8:	008b      	lsls	r3, r1, #2
 8006aea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006aee:	0082      	lsls	r2, r0, #2
 8006af0:	4650      	mov	r0, sl
 8006af2:	4659      	mov	r1, fp
 8006af4:	f7f9 fbd4 	bl	80002a0 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <UART_SetConfig+0x38c>)
 8006afe:	fba3 1302 	umull	r1, r3, r3, r2
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	2164      	movs	r1, #100	; 0x64
 8006b06:	fb01 f303 	mul.w	r3, r1, r3
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	3332      	adds	r3, #50	; 0x32
 8006b10:	4a09      	ldr	r2, [pc, #36]	; (8006b38 <UART_SetConfig+0x38c>)
 8006b12:	fba2 2303 	umull	r2, r3, r2, r3
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	f003 020f 	and.w	r2, r3, #15
 8006b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4432      	add	r2, r6
 8006b22:	609a      	str	r2, [r3, #8]
}
 8006b24:	bf00      	nop
 8006b26:	377c      	adds	r7, #124	; 0x7c
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2e:	bf00      	nop
 8006b30:	40011000 	.word	0x40011000
 8006b34:	40011400 	.word	0x40011400
 8006b38:	51eb851f 	.word	0x51eb851f

08006b3c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	f107 001c 	add.w	r0, r7, #28
 8006b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006b52:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006b54:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006b56:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006b5a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006b5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006b62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006b66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006b68:	68fa      	ldr	r2, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006b76:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	b004      	add	sp, #16
 8006b90:	4770      	bx	lr

08006b92 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2203      	movs	r2, #3
 8006bda:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006bdc:	2002      	movs	r0, #2
 8006bde:	f7fb fa95 	bl	800210c <HAL_Delay>
  
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0303 	and.w	r3, r3, #3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	370c      	adds	r7, #12
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c26:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006c2c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006c32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006c42:	f023 030f 	bic.w	r3, r3, #15
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3714      	adds	r7, #20
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	b2db      	uxtb	r3, r3
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3314      	adds	r3, #20
 8006c84:	461a      	mov	r2, r3
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	4413      	add	r3, r2
 8006c8a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
}  
 8006c90:	4618      	mov	r0, r3
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006cc2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006cc8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006cce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cda:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0

}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b088      	sub	sp, #32
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006d02:	2310      	movs	r3, #16
 8006d04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d06:	2340      	movs	r3, #64	; 0x40
 8006d08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d14:	f107 0308 	add.w	r3, r7, #8
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff ff74 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d24:	2110      	movs	r1, #16
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa44 	bl	80071b4 <SDMMC_GetCmdResp1>
 8006d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d2e:	69fb      	ldr	r3, [r7, #28]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006d46:	2311      	movs	r3, #17
 8006d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d58:	f107 0308 	add.w	r3, r7, #8
 8006d5c:	4619      	mov	r1, r3
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff ff52 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d68:	2111      	movs	r1, #17
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fa22 	bl	80071b4 <SDMMC_GetCmdResp1>
 8006d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d72:	69fb      	ldr	r3, [r7, #28]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3720      	adds	r7, #32
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006d8a:	2312      	movs	r3, #18
 8006d8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d8e:	2340      	movs	r3, #64	; 0x40
 8006d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d9c:	f107 0308 	add.w	r3, r7, #8
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7ff ff30 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dac:	2112      	movs	r1, #18
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f000 fa00 	bl	80071b4 <SDMMC_GetCmdResp1>
 8006db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006db6:	69fb      	ldr	r3, [r7, #28]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006dce:	2318      	movs	r3, #24
 8006dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dd2:	2340      	movs	r3, #64	; 0x40
 8006dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006de0:	f107 0308 	add.w	r3, r7, #8
 8006de4:	4619      	mov	r1, r3
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7ff ff0e 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df0:	2118      	movs	r1, #24
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f9de 	bl	80071b4 <SDMMC_GetCmdResp1>
 8006df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3720      	adds	r7, #32
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b088      	sub	sp, #32
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006e12:	2319      	movs	r3, #25
 8006e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e16:	2340      	movs	r3, #64	; 0x40
 8006e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e24:	f107 0308 	add.w	r3, r7, #8
 8006e28:	4619      	mov	r1, r3
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff feec 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e34:	2119      	movs	r1, #25
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f9bc 	bl	80071b4 <SDMMC_GetCmdResp1>
 8006e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3720      	adds	r7, #32
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006e54:	230c      	movs	r3, #12
 8006e56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e58:	2340      	movs	r3, #64	; 0x40
 8006e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e66:	f107 0308 	add.w	r3, r7, #8
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff fecb 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006e72:	4a05      	ldr	r2, [pc, #20]	; (8006e88 <SDMMC_CmdStopTransfer+0x40>)
 8006e74:	210c      	movs	r1, #12
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f99c 	bl	80071b4 <SDMMC_GetCmdResp1>
 8006e7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	05f5e100 	.word	0x05f5e100

08006e8c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	; 0x28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006e9c:	2307      	movs	r3, #7
 8006e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ea0:	2340      	movs	r3, #64	; 0x40
 8006ea2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006eae:	f107 0310 	add.w	r3, r7, #16
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff fea7 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ebe:	2107      	movs	r1, #7
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f977 	bl	80071b4 <SDMMC_GetCmdResp1>
 8006ec6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3728      	adds	r7, #40	; 0x28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b088      	sub	sp, #32
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006eea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ef0:	f107 0308 	add.w	r3, r7, #8
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fe86 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f92d 	bl	800715c <SDMMC_GetCmdError>
 8006f02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f04:	69fb      	ldr	r3, [r7, #28]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3720      	adds	r7, #32
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b088      	sub	sp, #32
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006f16:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f20:	2340      	movs	r3, #64	; 0x40
 8006f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f2e:	f107 0308 	add.w	r3, r7, #8
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fe67 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fb24 	bl	8007588 <SDMMC_GetCmdResp7>
 8006f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f42:	69fb      	ldr	r3, [r7, #28]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3720      	adds	r7, #32
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006f5a:	2337      	movs	r3, #55	; 0x37
 8006f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f5e:	2340      	movs	r3, #64	; 0x40
 8006f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f6c:	f107 0308 	add.w	r3, r7, #8
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7ff fe48 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f7c:	2137      	movs	r1, #55	; 0x37
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f918 	bl	80071b4 <SDMMC_GetCmdResp1>
 8006f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f86:	69fb      	ldr	r3, [r7, #28]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3720      	adds	r7, #32
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b088      	sub	sp, #32
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006fa6:	2329      	movs	r3, #41	; 0x29
 8006fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006faa:	2340      	movs	r3, #64	; 0x40
 8006fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff fe22 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fa2b 	bl	8007420 <SDMMC_GetCmdResp3>
 8006fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b088      	sub	sp, #32
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006fe4:	2306      	movs	r3, #6
 8006fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ff6:	f107 0308 	add.w	r3, r7, #8
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff fe03 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007002:	f241 3288 	movw	r2, #5000	; 0x1388
 8007006:	2106      	movs	r1, #6
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f8d3 	bl	80071b4 <SDMMC_GetCmdResp1>
 800700e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007010:	69fb      	ldr	r3, [r7, #28]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b088      	sub	sp, #32
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007026:	2333      	movs	r3, #51	; 0x33
 8007028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800702a:	2340      	movs	r3, #64	; 0x40
 800702c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007036:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007038:	f107 0308 	add.w	r3, r7, #8
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7ff fde2 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007044:	f241 3288 	movw	r2, #5000	; 0x1388
 8007048:	2133      	movs	r1, #51	; 0x33
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f8b2 	bl	80071b4 <SDMMC_GetCmdResp1>
 8007050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007052:	69fb      	ldr	r3, [r7, #28]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3720      	adds	r7, #32
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007068:	2302      	movs	r3, #2
 800706a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800706c:	23c0      	movs	r3, #192	; 0xc0
 800706e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007070:	2300      	movs	r3, #0
 8007072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007078:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800707a:	f107 0308 	add.w	r3, r7, #8
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fdc1 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f982 	bl	8007390 <SDMMC_GetCmdResp2>
 800708c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800708e:	69fb      	ldr	r3, [r7, #28]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3720      	adds	r7, #32
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80070a6:	2309      	movs	r3, #9
 80070a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80070aa:	23c0      	movs	r3, #192	; 0xc0
 80070ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070ae:	2300      	movs	r3, #0
 80070b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070b8:	f107 0308 	add.w	r3, r7, #8
 80070bc:	4619      	mov	r1, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff fda2 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f963 	bl	8007390 <SDMMC_GetCmdResp2>
 80070ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070cc:	69fb      	ldr	r3, [r7, #28]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3720      	adds	r7, #32
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b088      	sub	sp, #32
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
 80070de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80070e4:	2303      	movs	r3, #3
 80070e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070e8:	2340      	movs	r3, #64	; 0x40
 80070ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070f6:	f107 0308 	add.w	r3, r7, #8
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7ff fd83 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	2103      	movs	r1, #3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f9c8 	bl	800749c <SDMMC_GetCmdResp6>
 800710c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800710e:	69fb      	ldr	r3, [r7, #28]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3720      	adds	r7, #32
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007126:	230d      	movs	r3, #13
 8007128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800712a:	2340      	movs	r3, #64	; 0x40
 800712c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800712e:	2300      	movs	r3, #0
 8007130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007136:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007138:	f107 0308 	add.w	r3, r7, #8
 800713c:	4619      	mov	r1, r3
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fd62 	bl	8006c08 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007144:	f241 3288 	movw	r2, #5000	; 0x1388
 8007148:	210d      	movs	r1, #13
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f832 	bl	80071b4 <SDMMC_GetCmdResp1>
 8007150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007152:	69fb      	ldr	r3, [r7, #28]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3720      	adds	r7, #32
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007164:	4b11      	ldr	r3, [pc, #68]	; (80071ac <SDMMC_GetCmdError+0x50>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a11      	ldr	r2, [pc, #68]	; (80071b0 <SDMMC_GetCmdError+0x54>)
 800716a:	fba2 2303 	umull	r2, r3, r2, r3
 800716e:	0a5b      	lsrs	r3, r3, #9
 8007170:	f241 3288 	movw	r2, #5000	; 0x1388
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	1e5a      	subs	r2, r3, #1
 800717e:	60fa      	str	r2, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d102      	bne.n	800718a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007188:	e009      	b.n	800719e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0f1      	beq.n	800717a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	22c5      	movs	r2, #197	; 0xc5
 800719a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	200004a8 	.word	0x200004a8
 80071b0:	10624dd3 	.word	0x10624dd3

080071b4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	460b      	mov	r3, r1
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80071c2:	4b70      	ldr	r3, [pc, #448]	; (8007384 <SDMMC_GetCmdResp1+0x1d0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a70      	ldr	r2, [pc, #448]	; (8007388 <SDMMC_GetCmdResp1+0x1d4>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	0a5a      	lsrs	r2, r3, #9
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	fb02 f303 	mul.w	r3, r2, r3
 80071d4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	1e5a      	subs	r2, r3, #1
 80071da:	61fa      	str	r2, [r7, #28]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d102      	bne.n	80071e6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071e4:	e0c9      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0ef      	beq.n	80071d6 <SDMMC_GetCmdResp1+0x22>
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1ea      	bne.n	80071d6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2204      	movs	r2, #4
 8007210:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007212:	2304      	movs	r3, #4
 8007214:	e0b1      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007228:	2301      	movs	r3, #1
 800722a:	e0a6      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	22c5      	movs	r2, #197	; 0xc5
 8007230:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f7ff fd12 	bl	8006c5c <SDIO_GetCommandResponse>
 8007238:	4603      	mov	r3, r0
 800723a:	461a      	mov	r2, r3
 800723c:	7afb      	ldrb	r3, [r7, #11]
 800723e:	4293      	cmp	r3, r2
 8007240:	d001      	beq.n	8007246 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007242:	2301      	movs	r3, #1
 8007244:	e099      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007246:	2100      	movs	r1, #0
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f7ff fd14 	bl	8006c76 <SDIO_GetResponse>
 800724e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	4b4e      	ldr	r3, [pc, #312]	; (800738c <SDMMC_GetCmdResp1+0x1d8>)
 8007254:	4013      	ands	r3, r2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800725a:	2300      	movs	r3, #0
 800725c:	e08d      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	2b00      	cmp	r3, #0
 8007262:	da02      	bge.n	800726a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007268:	e087      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007274:	2340      	movs	r3, #64	; 0x40
 8007276:	e080      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007282:	2380      	movs	r3, #128	; 0x80
 8007284:	e079      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007294:	e071      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80072a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072a4:	e069      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80072b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072b4:	e061      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80072c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072c4:	e059      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80072d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072d4:	e051      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80072e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072e4:	e049      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d002      	beq.n	80072f6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80072f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072f4:	e041      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d002      	beq.n	8007306 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007304:	e039      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007314:	e031      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007320:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007324:	e029      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d002      	beq.n	8007336 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007330:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007334:	e021      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007340:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007344:	e019      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007350:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007354:	e011      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007360:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007364:	e009      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007370:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007374:	e001      	b.n	800737a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	200004a8 	.word	0x200004a8
 8007388:	10624dd3 	.word	0x10624dd3
 800738c:	fdffe008 	.word	0xfdffe008

08007390 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007398:	4b1f      	ldr	r3, [pc, #124]	; (8007418 <SDMMC_GetCmdResp2+0x88>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a1f      	ldr	r2, [pc, #124]	; (800741c <SDMMC_GetCmdResp2+0x8c>)
 800739e:	fba2 2303 	umull	r2, r3, r2, r3
 80073a2:	0a5b      	lsrs	r3, r3, #9
 80073a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a8:	fb02 f303 	mul.w	r3, r2, r3
 80073ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	1e5a      	subs	r2, r3, #1
 80073b2:	60fa      	str	r2, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d102      	bne.n	80073be <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80073b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073bc:	e026      	b.n	800740c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0ef      	beq.n	80073ae <SDMMC_GetCmdResp2+0x1e>
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ea      	bne.n	80073ae <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073dc:	f003 0304 	and.w	r3, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2204      	movs	r2, #4
 80073e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073ea:	2304      	movs	r3, #4
 80073ec:	e00e      	b.n	800740c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d004      	beq.n	8007404 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007400:	2301      	movs	r3, #1
 8007402:	e003      	b.n	800740c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	22c5      	movs	r2, #197	; 0xc5
 8007408:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	200004a8 	.word	0x200004a8
 800741c:	10624dd3 	.word	0x10624dd3

08007420 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007428:	4b1a      	ldr	r3, [pc, #104]	; (8007494 <SDMMC_GetCmdResp3+0x74>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1a      	ldr	r2, [pc, #104]	; (8007498 <SDMMC_GetCmdResp3+0x78>)
 800742e:	fba2 2303 	umull	r2, r3, r2, r3
 8007432:	0a5b      	lsrs	r3, r3, #9
 8007434:	f241 3288 	movw	r2, #5000	; 0x1388
 8007438:	fb02 f303 	mul.w	r3, r2, r3
 800743c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1e5a      	subs	r2, r3, #1
 8007442:	60fa      	str	r2, [r7, #12]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d102      	bne.n	800744e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007448:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800744c:	e01b      	b.n	8007486 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007452:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0ef      	beq.n	800743e <SDMMC_GetCmdResp3+0x1e>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1ea      	bne.n	800743e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746c:	f003 0304 	and.w	r3, r3, #4
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800747a:	2304      	movs	r3, #4
 800747c:	e003      	b.n	8007486 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	22c5      	movs	r2, #197	; 0xc5
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	200004a8 	.word	0x200004a8
 8007498:	10624dd3 	.word	0x10624dd3

0800749c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	460b      	mov	r3, r1
 80074a6:	607a      	str	r2, [r7, #4]
 80074a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074aa:	4b35      	ldr	r3, [pc, #212]	; (8007580 <SDMMC_GetCmdResp6+0xe4>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a35      	ldr	r2, [pc, #212]	; (8007584 <SDMMC_GetCmdResp6+0xe8>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	0a5b      	lsrs	r3, r3, #9
 80074b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	1e5a      	subs	r2, r3, #1
 80074c4:	61fa      	str	r2, [r7, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d102      	bne.n	80074d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074ce:	e052      	b.n	8007576 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0ef      	beq.n	80074c0 <SDMMC_GetCmdResp6+0x24>
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1ea      	bne.n	80074c0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2204      	movs	r2, #4
 80074fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074fc:	2304      	movs	r3, #4
 80074fe:	e03a      	b.n	8007576 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2201      	movs	r2, #1
 8007510:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007512:	2301      	movs	r3, #1
 8007514:	e02f      	b.n	8007576 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fba0 	bl	8006c5c <SDIO_GetCommandResponse>
 800751c:	4603      	mov	r3, r0
 800751e:	461a      	mov	r2, r3
 8007520:	7afb      	ldrb	r3, [r7, #11]
 8007522:	4293      	cmp	r3, r2
 8007524:	d001      	beq.n	800752a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007526:	2301      	movs	r3, #1
 8007528:	e025      	b.n	8007576 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	22c5      	movs	r2, #197	; 0xc5
 800752e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007530:	2100      	movs	r1, #0
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff fb9f 	bl	8006c76 <SDIO_GetResponse>
 8007538:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d106      	bne.n	8007552 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	0c1b      	lsrs	r3, r3, #16
 8007548:	b29a      	uxth	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800754e:	2300      	movs	r3, #0
 8007550:	e011      	b.n	8007576 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800755c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007560:	e009      	b.n	8007576 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800756c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007570:	e001      	b.n	8007576 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007572:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007576:	4618      	mov	r0, r3
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	200004a8 	.word	0x200004a8
 8007584:	10624dd3 	.word	0x10624dd3

08007588 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007590:	4b22      	ldr	r3, [pc, #136]	; (800761c <SDMMC_GetCmdResp7+0x94>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a22      	ldr	r2, [pc, #136]	; (8007620 <SDMMC_GetCmdResp7+0x98>)
 8007596:	fba2 2303 	umull	r2, r3, r2, r3
 800759a:	0a5b      	lsrs	r3, r3, #9
 800759c:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a0:	fb02 f303 	mul.w	r3, r2, r3
 80075a4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	1e5a      	subs	r2, r3, #1
 80075aa:	60fa      	str	r2, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d102      	bne.n	80075b6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075b4:	e02c      	b.n	8007610 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0ef      	beq.n	80075a6 <SDMMC_GetCmdResp7+0x1e>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1ea      	bne.n	80075a6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d4:	f003 0304 	and.w	r3, r3, #4
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d004      	beq.n	80075e6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2204      	movs	r2, #4
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075e2:	2304      	movs	r3, #4
 80075e4:	e014      	b.n	8007610 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d004      	beq.n	80075fc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e009      	b.n	8007610 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2240      	movs	r2, #64	; 0x40
 800760c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800760e:	2300      	movs	r3, #0
  
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	200004a8 	.word	0x200004a8
 8007620:	10624dd3 	.word	0x10624dd3

08007624 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007628:	4904      	ldr	r1, [pc, #16]	; (800763c <MX_FATFS_Init+0x18>)
 800762a:	4805      	ldr	r0, [pc, #20]	; (8007640 <MX_FATFS_Init+0x1c>)
 800762c:	f000 ff38 	bl	80084a0 <FATFS_LinkDriver>
 8007630:	4603      	mov	r3, r0
 8007632:	461a      	mov	r2, r3
 8007634:	4b03      	ldr	r3, [pc, #12]	; (8007644 <MX_FATFS_Init+0x20>)
 8007636:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007638:	bf00      	nop
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20004e24 	.word	0x20004e24
 8007640:	08019c84 	.word	0x08019c84
 8007644:	20004e20 	.word	0x20004e20

08007648 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007652:	f000 f896 	bl	8007782 <BSP_SD_IsDetected>
 8007656:	4603      	mov	r3, r0
 8007658:	2b01      	cmp	r3, #1
 800765a:	d001      	beq.n	8007660 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e012      	b.n	8007686 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007660:	480b      	ldr	r0, [pc, #44]	; (8007690 <BSP_SD_Init+0x48>)
 8007662:	f7fd f979 	bl	8004958 <HAL_SD_Init>
 8007666:	4603      	mov	r3, r0
 8007668:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800766a:	79fb      	ldrb	r3, [r7, #7]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d109      	bne.n	8007684 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007674:	4806      	ldr	r0, [pc, #24]	; (8007690 <BSP_SD_Init+0x48>)
 8007676:	f7fd ff45 	bl	8005504 <HAL_SD_ConfigWideBusOperation>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007684:	79fb      	ldrb	r3, [r7, #7]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20004d0c 	.word	0x20004d0c

08007694 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	68f9      	ldr	r1, [r7, #12]
 80076aa:	4806      	ldr	r0, [pc, #24]	; (80076c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80076ac:	f7fd fa02 	bl	8004ab4 <HAL_SD_ReadBlocks_DMA>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20004d0c 	.word	0x20004d0c

080076c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	68f9      	ldr	r1, [r7, #12]
 80076de:	4806      	ldr	r0, [pc, #24]	; (80076f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80076e0:	f7fd faca 	bl	8004c78 <HAL_SD_WriteBlocks_DMA>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20004d0c 	.word	0x20004d0c

080076fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007700:	4805      	ldr	r0, [pc, #20]	; (8007718 <BSP_SD_GetCardState+0x1c>)
 8007702:	f7fd ff99 	bl	8005638 <HAL_SD_GetCardState>
 8007706:	4603      	mov	r3, r0
 8007708:	2b04      	cmp	r3, #4
 800770a:	bf14      	ite	ne
 800770c:	2301      	movne	r3, #1
 800770e:	2300      	moveq	r3, #0
 8007710:	b2db      	uxtb	r3, r3
}
 8007712:	4618      	mov	r0, r3
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20004d0c 	.word	0x20004d0c

0800771c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	4803      	ldr	r0, [pc, #12]	; (8007734 <BSP_SD_GetCardInfo+0x18>)
 8007728:	f7fd fec0 	bl	80054ac <HAL_SD_GetCardInfo>
}
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	20004d0c 	.word	0x20004d0c

08007738 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007740:	f000 f818 	bl	8007774 <BSP_SD_AbortCallback>
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007754:	f000 f98c 	bl	8007a70 <BSP_SD_WriteCpltCallback>
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007768:	f000 f98e 	bl	8007a88 <BSP_SD_ReadCpltCallback>
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007774:	b480      	push	{r7}
 8007776:	af00      	add	r7, sp, #0

}
 8007778:	bf00      	nop
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007788:	2301      	movs	r3, #1
 800778a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	b2db      	uxtb	r3, r3
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80077a4:	f7fa fca6 	bl	80020f4 <HAL_GetTick>
 80077a8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80077aa:	e006      	b.n	80077ba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80077ac:	f7ff ffa6 	bl	80076fc <BSP_SD_GetCardState>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	e009      	b.n	80077ce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80077ba:	f7fa fc9b 	bl	80020f4 <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d8f0      	bhi.n	80077ac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80077ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80077e2:	4b0b      	ldr	r3, [pc, #44]	; (8007810 <SD_CheckStatus+0x38>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80077e8:	f7ff ff88 	bl	80076fc <BSP_SD_GetCardState>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d107      	bne.n	8007802 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80077f2:	4b07      	ldr	r3, [pc, #28]	; (8007810 <SD_CheckStatus+0x38>)
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	f023 0301 	bic.w	r3, r3, #1
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	4b04      	ldr	r3, [pc, #16]	; (8007810 <SD_CheckStatus+0x38>)
 8007800:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007802:	4b03      	ldr	r3, [pc, #12]	; (8007810 <SD_CheckStatus+0x38>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	b2db      	uxtb	r3, r3
}
 8007808:	4618      	mov	r0, r3
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	200004b1 	.word	0x200004b1

08007814 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800781e:	f7ff ff13 	bl	8007648 <BSP_SD_Init>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d107      	bne.n	8007838 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff ffd4 	bl	80077d8 <SD_CheckStatus>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	4b04      	ldr	r3, [pc, #16]	; (8007848 <SD_initialize+0x34>)
 8007836:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007838:	4b03      	ldr	r3, [pc, #12]	; (8007848 <SD_initialize+0x34>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	b2db      	uxtb	r3, r3
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	200004b1 	.word	0x200004b1

0800784c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	4603      	mov	r3, r0
 8007854:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	4618      	mov	r0, r3
 800785a:	f7ff ffbd 	bl	80077d8 <SD_CheckStatus>
 800785e:	4603      	mov	r3, r0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	4603      	mov	r3, r0
 8007876:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800787c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007880:	f7ff ff8c 	bl	800779c <SD_CheckStatusWithTimeout>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	da01      	bge.n	800788e <SD_read+0x26>
  {
    return res;
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	e03b      	b.n	8007906 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	68b8      	ldr	r0, [r7, #8]
 8007894:	f7ff fefe 	bl	8007694 <BSP_SD_ReadBlocks_DMA>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d132      	bne.n	8007904 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800789e:	4b1c      	ldr	r3, [pc, #112]	; (8007910 <SD_read+0xa8>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80078a4:	f7fa fc26 	bl	80020f4 <HAL_GetTick>
 80078a8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80078aa:	bf00      	nop
 80078ac:	4b18      	ldr	r3, [pc, #96]	; (8007910 <SD_read+0xa8>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d108      	bne.n	80078c6 <SD_read+0x5e>
 80078b4:	f7fa fc1e 	bl	80020f4 <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1ad3      	subs	r3, r2, r3
 80078be:	f247 522f 	movw	r2, #29999	; 0x752f
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d9f2      	bls.n	80078ac <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80078c6:	4b12      	ldr	r3, [pc, #72]	; (8007910 <SD_read+0xa8>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d102      	bne.n	80078d4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	75fb      	strb	r3, [r7, #23]
 80078d2:	e017      	b.n	8007904 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80078d4:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <SD_read+0xa8>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80078da:	f7fa fc0b 	bl	80020f4 <HAL_GetTick>
 80078de:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80078e0:	e007      	b.n	80078f2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80078e2:	f7ff ff0b 	bl	80076fc <BSP_SD_GetCardState>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <SD_read+0x8a>
          {
            res = RES_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80078f0:	e008      	b.n	8007904 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80078f2:	f7fa fbff 	bl	80020f4 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	f247 522f 	movw	r2, #29999	; 0x752f
 8007900:	4293      	cmp	r3, r2
 8007902:	d9ee      	bls.n	80078e2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007904:	7dfb      	ldrb	r3, [r7, #23]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	2000057c 	.word	0x2000057c

08007914 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60b9      	str	r1, [r7, #8]
 800791c:	607a      	str	r2, [r7, #4]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007928:	4b24      	ldr	r3, [pc, #144]	; (80079bc <SD_write+0xa8>)
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800792e:	f247 5030 	movw	r0, #30000	; 0x7530
 8007932:	f7ff ff33 	bl	800779c <SD_CheckStatusWithTimeout>
 8007936:	4603      	mov	r3, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	da01      	bge.n	8007940 <SD_write+0x2c>
  {
    return res;
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	e038      	b.n	80079b2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	68b8      	ldr	r0, [r7, #8]
 8007946:	f7ff febf 	bl	80076c8 <BSP_SD_WriteBlocks_DMA>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d12f      	bne.n	80079b0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007950:	f7fa fbd0 	bl	80020f4 <HAL_GetTick>
 8007954:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007956:	bf00      	nop
 8007958:	4b18      	ldr	r3, [pc, #96]	; (80079bc <SD_write+0xa8>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d108      	bne.n	8007972 <SD_write+0x5e>
 8007960:	f7fa fbc8 	bl	80020f4 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	f247 522f 	movw	r2, #29999	; 0x752f
 800796e:	4293      	cmp	r3, r2
 8007970:	d9f2      	bls.n	8007958 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007972:	4b12      	ldr	r3, [pc, #72]	; (80079bc <SD_write+0xa8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d102      	bne.n	8007980 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	75fb      	strb	r3, [r7, #23]
 800797e:	e017      	b.n	80079b0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007980:	4b0e      	ldr	r3, [pc, #56]	; (80079bc <SD_write+0xa8>)
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007986:	f7fa fbb5 	bl	80020f4 <HAL_GetTick>
 800798a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800798c:	e007      	b.n	800799e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800798e:	f7ff feb5 	bl	80076fc <BSP_SD_GetCardState>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d102      	bne.n	800799e <SD_write+0x8a>
          {
            res = RES_OK;
 8007998:	2300      	movs	r3, #0
 800799a:	75fb      	strb	r3, [r7, #23]
            break;
 800799c:	e008      	b.n	80079b0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800799e:	f7fa fba9 	bl	80020f4 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	f247 522f 	movw	r2, #29999	; 0x752f
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d9ee      	bls.n	800798e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80079b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000578 	.word	0x20000578

080079c0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b08c      	sub	sp, #48	; 0x30
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	4603      	mov	r3, r0
 80079c8:	603a      	str	r2, [r7, #0]
 80079ca:	71fb      	strb	r3, [r7, #7]
 80079cc:	460b      	mov	r3, r1
 80079ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80079d6:	4b25      	ldr	r3, [pc, #148]	; (8007a6c <SD_ioctl+0xac>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <SD_ioctl+0x28>
 80079e4:	2303      	movs	r3, #3
 80079e6:	e03c      	b.n	8007a62 <SD_ioctl+0xa2>

  switch (cmd)
 80079e8:	79bb      	ldrb	r3, [r7, #6]
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d834      	bhi.n	8007a58 <SD_ioctl+0x98>
 80079ee:	a201      	add	r2, pc, #4	; (adr r2, 80079f4 <SD_ioctl+0x34>)
 80079f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f4:	08007a05 	.word	0x08007a05
 80079f8:	08007a0d 	.word	0x08007a0d
 80079fc:	08007a25 	.word	0x08007a25
 8007a00:	08007a3f 	.word	0x08007a3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a0a:	e028      	b.n	8007a5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fe83 	bl	800771c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a22:	e01c      	b.n	8007a5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a24:	f107 030c 	add.w	r3, r7, #12
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fe77 	bl	800771c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a3c:	e00f      	b.n	8007a5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007a3e:	f107 030c 	add.w	r3, r7, #12
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fe6a 	bl	800771c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	0a5a      	lsrs	r2, r3, #9
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007a56:	e002      	b.n	8007a5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007a58:	2304      	movs	r3, #4
 8007a5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3730      	adds	r7, #48	; 0x30
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200004b1 	.word	0x200004b1

08007a70 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007a70:	b480      	push	{r7}
 8007a72:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007a74:	4b03      	ldr	r3, [pc, #12]	; (8007a84 <BSP_SD_WriteCpltCallback+0x14>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
}
 8007a7a:	bf00      	nop
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	20000578 	.word	0x20000578

08007a88 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8007a8c:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <BSP_SD_ReadCpltCallback+0x14>)
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
}
 8007a92:	bf00      	nop
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	2000057c 	.word	0x2000057c

08007aa0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007aa6:	4b8d      	ldr	r3, [pc, #564]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007aa8:	22c0      	movs	r2, #192	; 0xc0
 8007aaa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007aac:	4b8b      	ldr	r3, [pc, #556]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007aae:	22a8      	movs	r2, #168	; 0xa8
 8007ab0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8007ab2:	4b8a      	ldr	r3, [pc, #552]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007ab4:	2212      	movs	r2, #18
 8007ab6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8007ab8:	4b88      	ldr	r3, [pc, #544]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007aba:	226f      	movs	r2, #111	; 0x6f
 8007abc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007abe:	4b88      	ldr	r3, [pc, #544]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007ac0:	22ff      	movs	r2, #255	; 0xff
 8007ac2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007ac4:	4b86      	ldr	r3, [pc, #536]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007ac6:	22ff      	movs	r2, #255	; 0xff
 8007ac8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007aca:	4b85      	ldr	r3, [pc, #532]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007acc:	22ff      	movs	r2, #255	; 0xff
 8007ace:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007ad0:	4b83      	ldr	r3, [pc, #524]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007ad6:	4b83      	ldr	r3, [pc, #524]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007ad8:	22c0      	movs	r2, #192	; 0xc0
 8007ada:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007adc:	4b81      	ldr	r3, [pc, #516]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007ade:	22a8      	movs	r2, #168	; 0xa8
 8007ae0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8007ae2:	4b80      	ldr	r3, [pc, #512]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007ae4:	2212      	movs	r2, #18
 8007ae6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007ae8:	4b7e      	ldr	r3, [pc, #504]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8007aee:	f002 fdb7 	bl	800a660 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007af2:	4b7a      	ldr	r3, [pc, #488]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	061a      	lsls	r2, r3, #24
 8007af8:	4b78      	ldr	r3, [pc, #480]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007afa:	785b      	ldrb	r3, [r3, #1]
 8007afc:	041b      	lsls	r3, r3, #16
 8007afe:	431a      	orrs	r2, r3
 8007b00:	4b76      	ldr	r3, [pc, #472]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b02:	789b      	ldrb	r3, [r3, #2]
 8007b04:	021b      	lsls	r3, r3, #8
 8007b06:	4313      	orrs	r3, r2
 8007b08:	4a74      	ldr	r2, [pc, #464]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b0a:	78d2      	ldrb	r2, [r2, #3]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	061a      	lsls	r2, r3, #24
 8007b10:	4b72      	ldr	r3, [pc, #456]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	0619      	lsls	r1, r3, #24
 8007b16:	4b71      	ldr	r3, [pc, #452]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b18:	785b      	ldrb	r3, [r3, #1]
 8007b1a:	041b      	lsls	r3, r3, #16
 8007b1c:	4319      	orrs	r1, r3
 8007b1e:	4b6f      	ldr	r3, [pc, #444]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b20:	789b      	ldrb	r3, [r3, #2]
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	430b      	orrs	r3, r1
 8007b26:	496d      	ldr	r1, [pc, #436]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b28:	78c9      	ldrb	r1, [r1, #3]
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b32:	431a      	orrs	r2, r3
 8007b34:	4b69      	ldr	r3, [pc, #420]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	0619      	lsls	r1, r3, #24
 8007b3a:	4b68      	ldr	r3, [pc, #416]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b3c:	785b      	ldrb	r3, [r3, #1]
 8007b3e:	041b      	lsls	r3, r3, #16
 8007b40:	4319      	orrs	r1, r3
 8007b42:	4b66      	ldr	r3, [pc, #408]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b44:	789b      	ldrb	r3, [r3, #2]
 8007b46:	021b      	lsls	r3, r3, #8
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	4964      	ldr	r1, [pc, #400]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b4c:	78c9      	ldrb	r1, [r1, #3]
 8007b4e:	430b      	orrs	r3, r1
 8007b50:	0a1b      	lsrs	r3, r3, #8
 8007b52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b56:	431a      	orrs	r2, r3
 8007b58:	4b60      	ldr	r3, [pc, #384]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	0619      	lsls	r1, r3, #24
 8007b5e:	4b5f      	ldr	r3, [pc, #380]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b60:	785b      	ldrb	r3, [r3, #1]
 8007b62:	041b      	lsls	r3, r3, #16
 8007b64:	4319      	orrs	r1, r3
 8007b66:	4b5d      	ldr	r3, [pc, #372]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b68:	789b      	ldrb	r3, [r3, #2]
 8007b6a:	021b      	lsls	r3, r3, #8
 8007b6c:	430b      	orrs	r3, r1
 8007b6e:	495b      	ldr	r1, [pc, #364]	; (8007cdc <MX_LWIP_Init+0x23c>)
 8007b70:	78c9      	ldrb	r1, [r1, #3]
 8007b72:	430b      	orrs	r3, r1
 8007b74:	0e1b      	lsrs	r3, r3, #24
 8007b76:	4313      	orrs	r3, r2
 8007b78:	4a5b      	ldr	r2, [pc, #364]	; (8007ce8 <MX_LWIP_Init+0x248>)
 8007b7a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007b7c:	4b58      	ldr	r3, [pc, #352]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	061a      	lsls	r2, r3, #24
 8007b82:	4b57      	ldr	r3, [pc, #348]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007b84:	785b      	ldrb	r3, [r3, #1]
 8007b86:	041b      	lsls	r3, r3, #16
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	4b55      	ldr	r3, [pc, #340]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007b8c:	789b      	ldrb	r3, [r3, #2]
 8007b8e:	021b      	lsls	r3, r3, #8
 8007b90:	4313      	orrs	r3, r2
 8007b92:	4a53      	ldr	r2, [pc, #332]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007b94:	78d2      	ldrb	r2, [r2, #3]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	061a      	lsls	r2, r3, #24
 8007b9a:	4b51      	ldr	r3, [pc, #324]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	0619      	lsls	r1, r3, #24
 8007ba0:	4b4f      	ldr	r3, [pc, #316]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007ba2:	785b      	ldrb	r3, [r3, #1]
 8007ba4:	041b      	lsls	r3, r3, #16
 8007ba6:	4319      	orrs	r1, r3
 8007ba8:	4b4d      	ldr	r3, [pc, #308]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007baa:	789b      	ldrb	r3, [r3, #2]
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	430b      	orrs	r3, r1
 8007bb0:	494b      	ldr	r1, [pc, #300]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007bb2:	78c9      	ldrb	r1, [r1, #3]
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	021b      	lsls	r3, r3, #8
 8007bb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	4b48      	ldr	r3, [pc, #288]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	0619      	lsls	r1, r3, #24
 8007bc4:	4b46      	ldr	r3, [pc, #280]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007bc6:	785b      	ldrb	r3, [r3, #1]
 8007bc8:	041b      	lsls	r3, r3, #16
 8007bca:	4319      	orrs	r1, r3
 8007bcc:	4b44      	ldr	r3, [pc, #272]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007bce:	789b      	ldrb	r3, [r3, #2]
 8007bd0:	021b      	lsls	r3, r3, #8
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	4942      	ldr	r1, [pc, #264]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007bd6:	78c9      	ldrb	r1, [r1, #3]
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007be0:	431a      	orrs	r2, r3
 8007be2:	4b3f      	ldr	r3, [pc, #252]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	0619      	lsls	r1, r3, #24
 8007be8:	4b3d      	ldr	r3, [pc, #244]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007bea:	785b      	ldrb	r3, [r3, #1]
 8007bec:	041b      	lsls	r3, r3, #16
 8007bee:	4319      	orrs	r1, r3
 8007bf0:	4b3b      	ldr	r3, [pc, #236]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007bf2:	789b      	ldrb	r3, [r3, #2]
 8007bf4:	021b      	lsls	r3, r3, #8
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	4939      	ldr	r1, [pc, #228]	; (8007ce0 <MX_LWIP_Init+0x240>)
 8007bfa:	78c9      	ldrb	r1, [r1, #3]
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	0e1b      	lsrs	r3, r3, #24
 8007c00:	4313      	orrs	r3, r2
 8007c02:	4a3a      	ldr	r2, [pc, #232]	; (8007cec <MX_LWIP_Init+0x24c>)
 8007c04:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007c06:	4b37      	ldr	r3, [pc, #220]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	061a      	lsls	r2, r3, #24
 8007c0c:	4b35      	ldr	r3, [pc, #212]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	041b      	lsls	r3, r3, #16
 8007c12:	431a      	orrs	r2, r3
 8007c14:	4b33      	ldr	r3, [pc, #204]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c16:	789b      	ldrb	r3, [r3, #2]
 8007c18:	021b      	lsls	r3, r3, #8
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	4a31      	ldr	r2, [pc, #196]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c1e:	78d2      	ldrb	r2, [r2, #3]
 8007c20:	4313      	orrs	r3, r2
 8007c22:	061a      	lsls	r2, r3, #24
 8007c24:	4b2f      	ldr	r3, [pc, #188]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	0619      	lsls	r1, r3, #24
 8007c2a:	4b2e      	ldr	r3, [pc, #184]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c2c:	785b      	ldrb	r3, [r3, #1]
 8007c2e:	041b      	lsls	r3, r3, #16
 8007c30:	4319      	orrs	r1, r3
 8007c32:	4b2c      	ldr	r3, [pc, #176]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c34:	789b      	ldrb	r3, [r3, #2]
 8007c36:	021b      	lsls	r3, r3, #8
 8007c38:	430b      	orrs	r3, r1
 8007c3a:	492a      	ldr	r1, [pc, #168]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c3c:	78c9      	ldrb	r1, [r1, #3]
 8007c3e:	430b      	orrs	r3, r1
 8007c40:	021b      	lsls	r3, r3, #8
 8007c42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c46:	431a      	orrs	r2, r3
 8007c48:	4b26      	ldr	r3, [pc, #152]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	0619      	lsls	r1, r3, #24
 8007c4e:	4b25      	ldr	r3, [pc, #148]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c50:	785b      	ldrb	r3, [r3, #1]
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	4319      	orrs	r1, r3
 8007c56:	4b23      	ldr	r3, [pc, #140]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c58:	789b      	ldrb	r3, [r3, #2]
 8007c5a:	021b      	lsls	r3, r3, #8
 8007c5c:	430b      	orrs	r3, r1
 8007c5e:	4921      	ldr	r1, [pc, #132]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c60:	78c9      	ldrb	r1, [r1, #3]
 8007c62:	430b      	orrs	r3, r1
 8007c64:	0a1b      	lsrs	r3, r3, #8
 8007c66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c6a:	431a      	orrs	r2, r3
 8007c6c:	4b1d      	ldr	r3, [pc, #116]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	0619      	lsls	r1, r3, #24
 8007c72:	4b1c      	ldr	r3, [pc, #112]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c74:	785b      	ldrb	r3, [r3, #1]
 8007c76:	041b      	lsls	r3, r3, #16
 8007c78:	4319      	orrs	r1, r3
 8007c7a:	4b1a      	ldr	r3, [pc, #104]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c7c:	789b      	ldrb	r3, [r3, #2]
 8007c7e:	021b      	lsls	r3, r3, #8
 8007c80:	430b      	orrs	r3, r1
 8007c82:	4918      	ldr	r1, [pc, #96]	; (8007ce4 <MX_LWIP_Init+0x244>)
 8007c84:	78c9      	ldrb	r1, [r1, #3]
 8007c86:	430b      	orrs	r3, r1
 8007c88:	0e1b      	lsrs	r3, r3, #24
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	4a18      	ldr	r2, [pc, #96]	; (8007cf0 <MX_LWIP_Init+0x250>)
 8007c8e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007c90:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <MX_LWIP_Init+0x254>)
 8007c92:	9302      	str	r3, [sp, #8]
 8007c94:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <MX_LWIP_Init+0x258>)
 8007c96:	9301      	str	r3, [sp, #4]
 8007c98:	2300      	movs	r3, #0
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	4b14      	ldr	r3, [pc, #80]	; (8007cf0 <MX_LWIP_Init+0x250>)
 8007c9e:	4a13      	ldr	r2, [pc, #76]	; (8007cec <MX_LWIP_Init+0x24c>)
 8007ca0:	4911      	ldr	r1, [pc, #68]	; (8007ce8 <MX_LWIP_Init+0x248>)
 8007ca2:	4816      	ldr	r0, [pc, #88]	; (8007cfc <MX_LWIP_Init+0x25c>)
 8007ca4:	f003 f982 	bl	800afac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007ca8:	4814      	ldr	r0, [pc, #80]	; (8007cfc <MX_LWIP_Init+0x25c>)
 8007caa:	f003 fb31 	bl	800b310 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007cae:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <MX_LWIP_Init+0x25c>)
 8007cb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007cb4:	089b      	lsrs	r3, r3, #2
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d003      	beq.n	8007cc8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007cc0:	480e      	ldr	r0, [pc, #56]	; (8007cfc <MX_LWIP_Init+0x25c>)
 8007cc2:	f003 fb35 	bl	800b330 <netif_set_up>
 8007cc6:	e002      	b.n	8007cce <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007cc8:	480c      	ldr	r0, [pc, #48]	; (8007cfc <MX_LWIP_Init+0x25c>)
 8007cca:	f003 fb9d 	bl	800b408 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007cce:	490c      	ldr	r1, [pc, #48]	; (8007d00 <MX_LWIP_Init+0x260>)
 8007cd0:	480a      	ldr	r0, [pc, #40]	; (8007cfc <MX_LWIP_Init+0x25c>)
 8007cd2:	f003 fbcb 	bl	800b46c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007cd6:	bf00      	nop
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20006e98 	.word	0x20006e98
 8007ce0:	20006e94 	.word	0x20006e94
 8007ce4:	20006e8c 	.word	0x20006e8c
 8007ce8:	20006e90 	.word	0x20006e90
 8007cec:	20006e9c 	.word	0x20006e9c
 8007cf0:	20006ea0 	.word	0x20006ea0
 8007cf4:	08014b11 	.word	0x08014b11
 8007cf8:	08008291 	.word	0x08008291
 8007cfc:	20004c78 	.word	0x20004c78
 8007d00:	080082fd 	.word	0x080082fd

08007d04 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08e      	sub	sp, #56	; 0x38
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d10:	2200      	movs	r2, #0
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	605a      	str	r2, [r3, #4]
 8007d16:	609a      	str	r2, [r3, #8]
 8007d18:	60da      	str	r2, [r3, #12]
 8007d1a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a46      	ldr	r2, [pc, #280]	; (8007e3c <HAL_ETH_MspInit+0x138>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	f040 8085 	bne.w	8007e32 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007d28:	2300      	movs	r3, #0
 8007d2a:	623b      	str	r3, [r7, #32]
 8007d2c:	4b44      	ldr	r3, [pc, #272]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d30:	4a43      	ldr	r2, [pc, #268]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d36:	6313      	str	r3, [r2, #48]	; 0x30
 8007d38:	4b41      	ldr	r3, [pc, #260]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d40:	623b      	str	r3, [r7, #32]
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	2300      	movs	r3, #0
 8007d46:	61fb      	str	r3, [r7, #28]
 8007d48:	4b3d      	ldr	r3, [pc, #244]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4c:	4a3c      	ldr	r2, [pc, #240]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d52:	6313      	str	r3, [r2, #48]	; 0x30
 8007d54:	4b3a      	ldr	r3, [pc, #232]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d5c:	61fb      	str	r3, [r7, #28]
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	2300      	movs	r3, #0
 8007d62:	61bb      	str	r3, [r7, #24]
 8007d64:	4b36      	ldr	r3, [pc, #216]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d68:	4a35      	ldr	r2, [pc, #212]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8007d70:	4b33      	ldr	r3, [pc, #204]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d78:	61bb      	str	r3, [r7, #24]
 8007d7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	4b2f      	ldr	r3, [pc, #188]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d84:	4a2e      	ldr	r2, [pc, #184]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d86:	f043 0304 	orr.w	r3, r3, #4
 8007d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8007d8c:	4b2c      	ldr	r3, [pc, #176]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	f003 0304 	and.w	r3, r3, #4
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d98:	2300      	movs	r3, #0
 8007d9a:	613b      	str	r3, [r7, #16]
 8007d9c:	4b28      	ldr	r3, [pc, #160]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	4a27      	ldr	r2, [pc, #156]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	6313      	str	r3, [r2, #48]	; 0x30
 8007da8:	4b25      	ldr	r3, [pc, #148]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	4b21      	ldr	r3, [pc, #132]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbc:	4a20      	ldr	r2, [pc, #128]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007dbe:	f043 0302 	orr.w	r3, r3, #2
 8007dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8007dc4:	4b1e      	ldr	r3, [pc, #120]	; (8007e40 <HAL_ETH_MspInit+0x13c>)
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc8:	f003 0302 	and.w	r3, r3, #2
 8007dcc:	60fb      	str	r3, [r7, #12]
 8007dce:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007dd0:	2332      	movs	r3, #50	; 0x32
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007de0:	230b      	movs	r3, #11
 8007de2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007de8:	4619      	mov	r1, r3
 8007dea:	4816      	ldr	r0, [pc, #88]	; (8007e44 <HAL_ETH_MspInit+0x140>)
 8007dec:	f7fb ff58 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007df0:	2386      	movs	r3, #134	; 0x86
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007df4:	2302      	movs	r3, #2
 8007df6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007e00:	230b      	movs	r3, #11
 8007e02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e08:	4619      	mov	r1, r3
 8007e0a:	480f      	ldr	r0, [pc, #60]	; (8007e48 <HAL_ETH_MspInit+0x144>)
 8007e0c:	f7fb ff48 	bl	8003ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007e10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e16:	2302      	movs	r3, #2
 8007e18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007e22:	230b      	movs	r3, #11
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4807      	ldr	r0, [pc, #28]	; (8007e4c <HAL_ETH_MspInit+0x148>)
 8007e2e:	f7fb ff37 	bl	8003ca0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007e32:	bf00      	nop
 8007e34:	3738      	adds	r7, #56	; 0x38
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	40028000 	.word	0x40028000
 8007e40:	40023800 	.word	0x40023800
 8007e44:	40020800 	.word	0x40020800
 8007e48:	40020000 	.word	0x40020000
 8007e4c:	40020400 	.word	0x40020400

08007e50 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007e5c:	4b4d      	ldr	r3, [pc, #308]	; (8007f94 <low_level_init+0x144>)
 8007e5e:	4a4e      	ldr	r2, [pc, #312]	; (8007f98 <low_level_init+0x148>)
 8007e60:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007e62:	4b4c      	ldr	r3, [pc, #304]	; (8007f94 <low_level_init+0x144>)
 8007e64:	2201      	movs	r2, #1
 8007e66:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007e68:	4b4a      	ldr	r3, [pc, #296]	; (8007f94 <low_level_init+0x144>)
 8007e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e6e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007e70:	4b48      	ldr	r3, [pc, #288]	; (8007f94 <low_level_init+0x144>)
 8007e72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e76:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007e78:	4b46      	ldr	r3, [pc, #280]	; (8007f94 <low_level_init+0x144>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007e82:	2380      	movs	r3, #128	; 0x80
 8007e84:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007e86:	23e1      	movs	r3, #225	; 0xe1
 8007e88:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007e92:	2300      	movs	r3, #0
 8007e94:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007e96:	4a3f      	ldr	r2, [pc, #252]	; (8007f94 <low_level_init+0x144>)
 8007e98:	f107 0308 	add.w	r3, r7, #8
 8007e9c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007e9e:	4b3d      	ldr	r3, [pc, #244]	; (8007f94 <low_level_init+0x144>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007ea4:	4b3b      	ldr	r3, [pc, #236]	; (8007f94 <low_level_init+0x144>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007eaa:	4b3a      	ldr	r3, [pc, #232]	; (8007f94 <low_level_init+0x144>)
 8007eac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007eb0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007eb2:	4838      	ldr	r0, [pc, #224]	; (8007f94 <low_level_init+0x144>)
 8007eb4:	f7fa fdce 	bl	8002a54 <HAL_ETH_Init>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d108      	bne.n	8007ed4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007ec8:	f043 0304 	orr.w	r3, r3, #4
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	4a31      	ldr	r2, [pc, #196]	; (8007f9c <low_level_init+0x14c>)
 8007ed8:	4931      	ldr	r1, [pc, #196]	; (8007fa0 <low_level_init+0x150>)
 8007eda:	482e      	ldr	r0, [pc, #184]	; (8007f94 <low_level_init+0x144>)
 8007edc:	f7fa ff56 	bl	8002d8c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	4a30      	ldr	r2, [pc, #192]	; (8007fa4 <low_level_init+0x154>)
 8007ee4:	4930      	ldr	r1, [pc, #192]	; (8007fa8 <low_level_init+0x158>)
 8007ee6:	482b      	ldr	r0, [pc, #172]	; (8007f94 <low_level_init+0x144>)
 8007ee8:	f7fa ffb9 	bl	8002e5e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2206      	movs	r2, #6
 8007ef0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007ef4:	4b27      	ldr	r3, [pc, #156]	; (8007f94 <low_level_init+0x144>)
 8007ef6:	695b      	ldr	r3, [r3, #20]
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007f00:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <low_level_init+0x144>)
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	785a      	ldrb	r2, [r3, #1]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007f0c:	4b21      	ldr	r3, [pc, #132]	; (8007f94 <low_level_init+0x144>)
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	789a      	ldrb	r2, [r3, #2]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007f18:	4b1e      	ldr	r3, [pc, #120]	; (8007f94 <low_level_init+0x144>)
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	78da      	ldrb	r2, [r3, #3]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007f24:	4b1b      	ldr	r3, [pc, #108]	; (8007f94 <low_level_init+0x144>)
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	791a      	ldrb	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007f30:	4b18      	ldr	r3, [pc, #96]	; (8007f94 <low_level_init+0x144>)
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	795a      	ldrb	r2, [r3, #5]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007f42:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f4a:	f043 030a 	orr.w	r3, r3, #10
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007f56:	480f      	ldr	r0, [pc, #60]	; (8007f94 <low_level_init+0x144>)
 8007f58:	f7fb fa2a 	bl	80033b0 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007f5c:	f107 0310 	add.w	r3, r7, #16
 8007f60:	461a      	mov	r2, r3
 8007f62:	211d      	movs	r1, #29
 8007f64:	480b      	ldr	r0, [pc, #44]	; (8007f94 <low_level_init+0x144>)
 8007f66:	f7fb f955 	bl	8003214 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f043 030b 	orr.w	r3, r3, #11
 8007f70:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	461a      	mov	r2, r3
 8007f76:	211d      	movs	r1, #29
 8007f78:	4806      	ldr	r0, [pc, #24]	; (8007f94 <low_level_init+0x144>)
 8007f7a:	f7fb f9b3 	bl	80032e4 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007f7e:	f107 0310 	add.w	r3, r7, #16
 8007f82:	461a      	mov	r2, r3
 8007f84:	211d      	movs	r1, #29
 8007f86:	4803      	ldr	r0, [pc, #12]	; (8007f94 <low_level_init+0x144>)
 8007f88:	f7fb f944 	bl	8003214 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007f8c:	bf00      	nop
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20008774 	.word	0x20008774
 8007f98:	40028000 	.word	0x40028000
 8007f9c:	200087bc 	.word	0x200087bc
 8007fa0:	20006ea4 	.word	0x20006ea4
 8007fa4:	20006f24 	.word	0x20006f24
 8007fa8:	200086f4 	.word	0x200086f4

08007fac <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b08a      	sub	sp, #40	; 0x28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007fb6:	4b4b      	ldr	r3, [pc, #300]	; (80080e4 <low_level_output+0x138>)
 8007fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007fce:	4b45      	ldr	r3, [pc, #276]	; (80080e4 <low_level_output+0x138>)
 8007fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	623b      	str	r3, [r7, #32]
 8007fdc:	e05a      	b.n	8008094 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	da03      	bge.n	8007fee <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007fe6:	23f8      	movs	r3, #248	; 0xf8
 8007fe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007fec:	e05c      	b.n	80080a8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007fee:	6a3b      	ldr	r3, [r7, #32]
 8007ff0:	895b      	ldrh	r3, [r3, #10]
 8007ff2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007ff8:	e02f      	b.n	800805a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	18d0      	adds	r0, r2, r3
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	18d1      	adds	r1, r2, r3
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800800e:	3304      	adds	r3, #4
 8008010:	461a      	mov	r2, r3
 8008012:	f00c fe89 	bl	8014d28 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	da03      	bge.n	800802c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008024:	23f8      	movs	r3, #248	; 0xf8
 8008026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800802a:	e03d      	b.n	80080a8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	4413      	add	r3, r2
 8008038:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800803c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008048:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008054:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	4413      	add	r3, r2
 8008060:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008064:	4293      	cmp	r3, r2
 8008066:	d8c8      	bhi.n	8007ffa <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008068:	69fa      	ldr	r2, [r7, #28]
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	18d0      	adds	r0, r2, r3
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	4413      	add	r3, r2
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4619      	mov	r1, r3
 800807a:	f00c fe55 	bl	8014d28 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	4413      	add	r3, r2
 800808c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	623b      	str	r3, [r7, #32]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1a1      	bne.n	8007fde <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800809a:	6979      	ldr	r1, [r7, #20]
 800809c:	4811      	ldr	r0, [pc, #68]	; (80080e4 <low_level_output+0x138>)
 800809e:	f7fa ff4b 	bl	8002f38 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80080a8:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <low_level_output+0x138>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080b0:	3314      	adds	r3, #20
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00d      	beq.n	80080d8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80080bc:	4b09      	ldr	r3, [pc, #36]	; (80080e4 <low_level_output+0x138>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080c4:	3314      	adds	r3, #20
 80080c6:	2220      	movs	r2, #32
 80080c8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80080ca:	4b06      	ldr	r3, [pc, #24]	; (80080e4 <low_level_output+0x138>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d2:	3304      	adds	r3, #4
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80080d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3728      	adds	r7, #40	; 0x28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20008774 	.word	0x20008774

080080e8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08c      	sub	sp, #48	; 0x30
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80080f0:	2300      	movs	r3, #0
 80080f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80080f4:	2300      	movs	r3, #0
 80080f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008108:	2300      	movs	r3, #0
 800810a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800810c:	484f      	ldr	r0, [pc, #316]	; (800824c <low_level_input+0x164>)
 800810e:	f7fa fffd 	bl	800310c <HAL_ETH_GetReceivedFrame>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <low_level_input+0x34>

    return NULL;
 8008118:	2300      	movs	r3, #0
 800811a:	e092      	b.n	8008242 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800811c:	4b4b      	ldr	r3, [pc, #300]	; (800824c <low_level_input+0x164>)
 800811e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008120:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8008122:	4b4a      	ldr	r3, [pc, #296]	; (800824c <low_level_input+0x164>)
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008128:	89fb      	ldrh	r3, [r7, #14]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800812e:	89fb      	ldrh	r3, [r7, #14]
 8008130:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008134:	4619      	mov	r1, r3
 8008136:	2000      	movs	r0, #0
 8008138:	f003 fa34 	bl	800b5a4 <pbuf_alloc>
 800813c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008140:	2b00      	cmp	r3, #0
 8008142:	d04b      	beq.n	80081dc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008144:	4b41      	ldr	r3, [pc, #260]	; (800824c <low_level_input+0x164>)
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008150:	62bb      	str	r3, [r7, #40]	; 0x28
 8008152:	e040      	b.n	80081d6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008156:	895b      	ldrh	r3, [r3, #10]
 8008158:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800815a:	2300      	movs	r3, #0
 800815c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800815e:	e021      	b.n	80081a4 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	18d0      	adds	r0, r2, r3
 8008168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	18d1      	adds	r1, r2, r3
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008174:	3304      	adds	r3, #4
 8008176:	461a      	mov	r2, r3
 8008178:	f00c fdd6 	bl	8014d28 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	4413      	add	r3, r2
 800818e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008192:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008194:	69ba      	ldr	r2, [r7, #24]
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800819e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	4413      	add	r3, r2
 80081aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d8d6      	bhi.n	8008160 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	18d0      	adds	r0, r2, r3
 80081ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	4413      	add	r3, r2
 80081c0:	697a      	ldr	r2, [r7, #20]
 80081c2:	4619      	mov	r1, r3
 80081c4:	f00c fdb0 	bl	8014d28 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	4413      	add	r3, r2
 80081ce:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1bb      	bne.n	8008154 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80081dc:	4b1b      	ldr	r3, [pc, #108]	; (800824c <low_level_input+0x164>)
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80081e2:	2300      	movs	r3, #0
 80081e4:	613b      	str	r3, [r7, #16]
 80081e6:	e00b      	b.n	8008200 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	3301      	adds	r3, #1
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	4b12      	ldr	r3, [pc, #72]	; (800824c <low_level_input+0x164>)
 8008202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	429a      	cmp	r2, r3
 8008208:	d3ee      	bcc.n	80081e8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800820a:	4b10      	ldr	r3, [pc, #64]	; (800824c <low_level_input+0x164>)
 800820c:	2200      	movs	r2, #0
 800820e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8008210:	4b0e      	ldr	r3, [pc, #56]	; (800824c <low_level_input+0x164>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008218:	3314      	adds	r3, #20
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00d      	beq.n	8008240 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008224:	4b09      	ldr	r3, [pc, #36]	; (800824c <low_level_input+0x164>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822c:	3314      	adds	r3, #20
 800822e:	2280      	movs	r2, #128	; 0x80
 8008230:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8008232:	4b06      	ldr	r3, [pc, #24]	; (800824c <low_level_input+0x164>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800823a:	3308      	adds	r3, #8
 800823c:	2200      	movs	r2, #0
 800823e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008242:	4618      	mov	r0, r3
 8008244:	3730      	adds	r7, #48	; 0x30
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20008774 	.word	0x20008774

08008250 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff ff45 	bl	80080e8 <low_level_input>
 800825e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d010      	beq.n	8008288 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	4798      	blx	r3
 8008270:	4603      	mov	r3, r0
 8008272:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008274:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d006      	beq.n	800828a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f003 fc75 	bl	800bb6c <pbuf_free>
    p = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e000      	b.n	800828a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8008288:	bf00      	nop
  }
}
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b082      	sub	sp, #8
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <ethernetif_init+0x1c>
 800829e:	4b0e      	ldr	r3, [pc, #56]	; (80082d8 <ethernetif_init+0x48>)
 80082a0:	f44f 7202 	mov.w	r2, #520	; 0x208
 80082a4:	490d      	ldr	r1, [pc, #52]	; (80082dc <ethernetif_init+0x4c>)
 80082a6:	480e      	ldr	r0, [pc, #56]	; (80082e0 <ethernetif_init+0x50>)
 80082a8:	f00c fd6e 	bl	8014d88 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2273      	movs	r2, #115	; 0x73
 80082b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2274      	movs	r2, #116	; 0x74
 80082b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a09      	ldr	r2, [pc, #36]	; (80082e4 <ethernetif_init+0x54>)
 80082c0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a08      	ldr	r2, [pc, #32]	; (80082e8 <ethernetif_init+0x58>)
 80082c6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff fdc1 	bl	8007e50 <low_level_init>

  return ERR_OK;
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	08016acc 	.word	0x08016acc
 80082dc:	08016ae8 	.word	0x08016ae8
 80082e0:	08016af8 	.word	0x08016af8
 80082e4:	08012fd5 	.word	0x08012fd5
 80082e8:	08007fad 	.word	0x08007fad

080082ec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80082f0:	f7f9 ff00 	bl	80020f4 <HAL_GetTick>
 80082f4:	4603      	mov	r3, r0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008312:	089b      	lsrs	r3, r3, #2
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d05d      	beq.n	80083da <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800831e:	4b34      	ldr	r3, [pc, #208]	; (80083f0 <ethernetif_update_config+0xf4>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d03f      	beq.n	80083a6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800832a:	2100      	movs	r1, #0
 800832c:	4830      	ldr	r0, [pc, #192]	; (80083f0 <ethernetif_update_config+0xf4>)
 800832e:	f7fa ffd9 	bl	80032e4 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008332:	f7f9 fedf 	bl	80020f4 <HAL_GetTick>
 8008336:	4603      	mov	r3, r0
 8008338:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800833a:	f107 0308 	add.w	r3, r7, #8
 800833e:	461a      	mov	r2, r3
 8008340:	2101      	movs	r1, #1
 8008342:	482b      	ldr	r0, [pc, #172]	; (80083f0 <ethernetif_update_config+0xf4>)
 8008344:	f7fa ff66 	bl	8003214 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008348:	f7f9 fed4 	bl	80020f4 <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008356:	d828      	bhi.n	80083aa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0eb      	beq.n	800833a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008362:	f107 0308 	add.w	r3, r7, #8
 8008366:	461a      	mov	r2, r3
 8008368:	2110      	movs	r1, #16
 800836a:	4821      	ldr	r0, [pc, #132]	; (80083f0 <ethernetif_update_config+0xf4>)
 800836c:	f7fa ff52 	bl	8003214 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800837a:	4b1d      	ldr	r3, [pc, #116]	; (80083f0 <ethernetif_update_config+0xf4>)
 800837c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008380:	60da      	str	r2, [r3, #12]
 8008382:	e002      	b.n	800838a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008384:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <ethernetif_update_config+0xf4>)
 8008386:	2200      	movs	r2, #0
 8008388:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f003 0302 	and.w	r3, r3, #2
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008394:	4b16      	ldr	r3, [pc, #88]	; (80083f0 <ethernetif_update_config+0xf4>)
 8008396:	2200      	movs	r2, #0
 8008398:	609a      	str	r2, [r3, #8]
 800839a:	e016      	b.n	80083ca <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800839c:	4b14      	ldr	r3, [pc, #80]	; (80083f0 <ethernetif_update_config+0xf4>)
 800839e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80083a2:	609a      	str	r2, [r3, #8]
 80083a4:	e011      	b.n	80083ca <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80083a6:	bf00      	nop
 80083a8:	e000      	b.n	80083ac <ethernetif_update_config+0xb0>
          goto error;
 80083aa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80083ac:	4b10      	ldr	r3, [pc, #64]	; (80083f0 <ethernetif_update_config+0xf4>)
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	08db      	lsrs	r3, r3, #3
 80083b2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80083b4:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <ethernetif_update_config+0xf4>)
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	085b      	lsrs	r3, r3, #1
 80083ba:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80083bc:	4313      	orrs	r3, r2
 80083be:	b29b      	uxth	r3, r3
 80083c0:	461a      	mov	r2, r3
 80083c2:	2100      	movs	r1, #0
 80083c4:	480a      	ldr	r0, [pc, #40]	; (80083f0 <ethernetif_update_config+0xf4>)
 80083c6:	f7fa ff8d 	bl	80032e4 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80083ca:	2100      	movs	r1, #0
 80083cc:	4808      	ldr	r0, [pc, #32]	; (80083f0 <ethernetif_update_config+0xf4>)
 80083ce:	f7fb f84d 	bl	800346c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80083d2:	4807      	ldr	r0, [pc, #28]	; (80083f0 <ethernetif_update_config+0xf4>)
 80083d4:	f7fa ffec 	bl	80033b0 <HAL_ETH_Start>
 80083d8:	e002      	b.n	80083e0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80083da:	4805      	ldr	r0, [pc, #20]	; (80083f0 <ethernetif_update_config+0xf4>)
 80083dc:	f7fb f817 	bl	800340e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f807 	bl	80083f4 <ethernetif_notify_conn_changed>
}
 80083e6:	bf00      	nop
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20008774 	.word	0x20008774

080083f4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	4613      	mov	r3, r2
 8008414:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008416:	2301      	movs	r3, #1
 8008418:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800841e:	4b1f      	ldr	r3, [pc, #124]	; (800849c <FATFS_LinkDriverEx+0x94>)
 8008420:	7a5b      	ldrb	r3, [r3, #9]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b00      	cmp	r3, #0
 8008426:	d131      	bne.n	800848c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008428:	4b1c      	ldr	r3, [pc, #112]	; (800849c <FATFS_LinkDriverEx+0x94>)
 800842a:	7a5b      	ldrb	r3, [r3, #9]
 800842c:	b2db      	uxtb	r3, r3
 800842e:	461a      	mov	r2, r3
 8008430:	4b1a      	ldr	r3, [pc, #104]	; (800849c <FATFS_LinkDriverEx+0x94>)
 8008432:	2100      	movs	r1, #0
 8008434:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008436:	4b19      	ldr	r3, [pc, #100]	; (800849c <FATFS_LinkDriverEx+0x94>)
 8008438:	7a5b      	ldrb	r3, [r3, #9]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	4a17      	ldr	r2, [pc, #92]	; (800849c <FATFS_LinkDriverEx+0x94>)
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008446:	4b15      	ldr	r3, [pc, #84]	; (800849c <FATFS_LinkDriverEx+0x94>)
 8008448:	7a5b      	ldrb	r3, [r3, #9]
 800844a:	b2db      	uxtb	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	4b13      	ldr	r3, [pc, #76]	; (800849c <FATFS_LinkDriverEx+0x94>)
 8008450:	4413      	add	r3, r2
 8008452:	79fa      	ldrb	r2, [r7, #7]
 8008454:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008456:	4b11      	ldr	r3, [pc, #68]	; (800849c <FATFS_LinkDriverEx+0x94>)
 8008458:	7a5b      	ldrb	r3, [r3, #9]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	b2d1      	uxtb	r1, r2
 8008460:	4a0e      	ldr	r2, [pc, #56]	; (800849c <FATFS_LinkDriverEx+0x94>)
 8008462:	7251      	strb	r1, [r2, #9]
 8008464:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008466:	7dbb      	ldrb	r3, [r7, #22]
 8008468:	3330      	adds	r3, #48	; 0x30
 800846a:	b2da      	uxtb	r2, r3
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	3301      	adds	r3, #1
 8008474:	223a      	movs	r2, #58	; 0x3a
 8008476:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	3302      	adds	r3, #2
 800847c:	222f      	movs	r2, #47	; 0x2f
 800847e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	3303      	adds	r3, #3
 8008484:	2200      	movs	r2, #0
 8008486:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
}
 800848e:	4618      	mov	r0, r3
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	20000580 	.word	0x20000580

080084a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80084aa:	2200      	movs	r2, #0
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7ff ffaa 	bl	8008408 <FATFS_LinkDriverEx>
 80084b4:	4603      	mov	r3, r0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <fs_open+0x16>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d102      	bne.n	80084dc <fs_open+0x1c>
    return ERR_ARG;
 80084d6:	f06f 030f 	mvn.w	r3, #15
 80084da:	e028      	b.n	800852e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80084dc:	4b16      	ldr	r3, [pc, #88]	; (8008538 <fs_open+0x78>)
 80084de:	60fb      	str	r3, [r7, #12]
 80084e0:	e020      	b.n	8008524 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6838      	ldr	r0, [r7, #0]
 80084ea:	f7f7 fe71 	bl	80001d0 <strcmp>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d114      	bne.n	800851e <fs_open+0x5e>
      file->data = (const char *)f->data;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	689a      	ldr	r2, [r3, #8]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	7c1a      	ldrb	r2, [r3, #16]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	e007      	b.n	800852e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1db      	bne.n	80084e2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800852a:	f06f 0305 	mvn.w	r3, #5
}
 800852e:	4618      	mov	r0, r3
 8008530:	3710      	adds	r7, #16
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	0801ee68 	.word	0x0801ee68

0800853c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	1ad3      	subs	r3, r2, r3
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8008574:	f44f 7090 	mov.w	r0, #288	; 0x120
 8008578:	f002 fb2c 	bl	800abd4 <mem_malloc>
 800857c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8008584:	f44f 7290 	mov.w	r2, #288	; 0x120
 8008588:	2100      	movs	r1, #0
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f00c fbf4 	bl	8014d78 <memset>
  }
  return ret;
 8008590:	687b      	ldr	r3, [r7, #4]
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f002 f9ad 	bl	800a908 <mem_free>
  }
}
 80085ae:	bf00      	nop
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b082      	sub	sp, #8
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80085be:	22d8      	movs	r2, #216	; 0xd8
 80085c0:	2100      	movs	r1, #0
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f00c fbd8 	bl	8014d78 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2205      	movs	r2, #5
 80085cc:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80085d0:	bf00      	nop
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80085de:	20d8      	movs	r0, #216	; 0xd8
 80085e0:	f002 faf8 	bl	800abd4 <mem_malloc>
 80085e4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d002      	beq.n	80085f2 <http_state_alloc+0x1a>
    http_state_init(ret);
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f7ff ffe2 	bl	80085b6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80085f2:	687b      	ldr	r3, [r7, #4]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	695b      	ldr	r3, [r3, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d007      	beq.n	800861c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff ff93 	bl	800853c <fs_close>
    hs->handle = NULL;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008620:	2b00      	cmp	r3, #0
 8008622:	d007      	beq.n	8008634 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff ffb6 	bl	800859a <http_ssi_state_free>
    hs->ssi = NULL;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d007      	beq.n	800864c <http_state_eof+0x50>
    pbuf_free(hs->req);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	4618      	mov	r0, r3
 8008642:	f003 fa93 	bl	800bb6c <pbuf_free>
    hs->req = NULL;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800864c:	bf00      	nop
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <http_state_free+0x1a>
    http_state_eof(hs);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7ff ffca 	bl	80085fc <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f002 f94d 	bl	800a908 <mem_free>
  }
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d106      	bne.n	800869a <http_write+0x22>
 800868c:	4b2c      	ldr	r3, [pc, #176]	; (8008740 <http_write+0xc8>)
 800868e:	f240 2219 	movw	r2, #537	; 0x219
 8008692:	492c      	ldr	r1, [pc, #176]	; (8008744 <http_write+0xcc>)
 8008694:	482c      	ldr	r0, [pc, #176]	; (8008748 <http_write+0xd0>)
 8008696:	f00c fb77 	bl	8014d88 <iprintf>
  len = *length;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80086a0:	8afb      	ldrh	r3, [r7, #22]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d101      	bne.n	80086aa <http_write+0x32>
    return ERR_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	e045      	b.n	8008736 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80086b0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80086b2:	8aba      	ldrh	r2, [r7, #20]
 80086b4:	8afb      	ldrh	r3, [r7, #22]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d201      	bcs.n	80086be <http_write+0x46>
    len = max_len;
 80086ba:	8abb      	ldrh	r3, [r7, #20]
 80086bc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80086c6:	8afa      	ldrh	r2, [r7, #22]
 80086c8:	8abb      	ldrh	r3, [r7, #20]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d901      	bls.n	80086d2 <http_write+0x5a>
    len = max_len;
 80086ce:	8abb      	ldrh	r3, [r7, #20]
 80086d0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	8afa      	ldrh	r2, [r7, #22]
 80086d6:	68b9      	ldr	r1, [r7, #8]
 80086d8:	68f8      	ldr	r0, [r7, #12]
 80086da:	f007 ffcb 	bl	8010674 <tcp_write>
 80086de:	4603      	mov	r3, r0
 80086e0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80086e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80086e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ea:	d10f      	bne.n	800870c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	d902      	bls.n	8008706 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8008700:	2301      	movs	r3, #1
 8008702:	82fb      	strh	r3, [r7, #22]
 8008704:	e002      	b.n	800870c <http_write+0x94>
      } else {
        len /= 2;
 8008706:	8afb      	ldrh	r3, [r7, #22]
 8008708:	085b      	lsrs	r3, r3, #1
 800870a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800870c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008714:	d102      	bne.n	800871c <http_write+0xa4>
 8008716:	8afb      	ldrh	r3, [r7, #22]
 8008718:	2b01      	cmp	r3, #1
 800871a:	d8da      	bhi.n	80086d2 <http_write+0x5a>

  if (err == ERR_OK) {
 800871c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d103      	bne.n	800872c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	8afa      	ldrh	r2, [r7, #22]
 8008728:	801a      	strh	r2, [r3, #0]
 800872a:	e002      	b.n	8008732 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8008732:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	08016ff0 	.word	0x08016ff0
 8008744:	08017028 	.word	0x08017028
 8008748:	08017038 	.word	0x08017038

0800874c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	60b9      	str	r1, [r7, #8]
 8008756:	4613      	mov	r3, r2
 8008758:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00c      	beq.n	800877a <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008766:	2b00      	cmp	r3, #0
 8008768:	d007      	beq.n	800877a <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800876a:	4b1f      	ldr	r3, [pc, #124]	; (80087e8 <http_close_or_abort_conn+0x9c>)
 800876c:	2200      	movs	r2, #0
 800876e:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8008770:	223f      	movs	r2, #63	; 0x3f
 8008772:	491d      	ldr	r1, [pc, #116]	; (80087e8 <http_close_or_abort_conn+0x9c>)
 8008774:	68b8      	ldr	r0, [r7, #8]
 8008776:	f7f8 fcf3 	bl	8001160 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800877a:	2100      	movs	r1, #0
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f005 f83b 	bl	800d7f8 <tcp_arg>
  altcp_recv(pcb, NULL);
 8008782:	2100      	movs	r1, #0
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f005 f849 	bl	800d81c <tcp_recv>
  altcp_err(pcb, NULL);
 800878a:	2100      	movs	r1, #0
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f005 f889 	bl	800d8a4 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8008792:	2200      	movs	r2, #0
 8008794:	2100      	movs	r1, #0
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f005 f8be 	bl	800d918 <tcp_poll>
  altcp_sent(pcb, NULL);
 800879c:	2100      	movs	r1, #0
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f005 f85e 	bl	800d860 <tcp_sent>
  if (hs != NULL) {
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 80087aa:	68b8      	ldr	r0, [r7, #8]
 80087ac:	f7ff ff52 	bl	8008654 <http_state_free>
  }

  if (abort_conn) {
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d004      	beq.n	80087c0 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f003 ff60 	bl	800c67c <tcp_abort>
    return ERR_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	e00f      	b.n	80087e0 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f003 fe71 	bl	800c4a8 <tcp_close>
 80087c6:	4603      	mov	r3, r0
 80087c8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80087ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d004      	beq.n	80087dc <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80087d2:	2204      	movs	r2, #4
 80087d4:	4905      	ldr	r1, [pc, #20]	; (80087ec <http_close_or_abort_conn+0xa0>)
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f005 f89e 	bl	800d918 <tcp_poll>
  }
  return err;
 80087dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	2000098c 	.word	0x2000098c
 80087ec:	0800a05f 	.word	0x0800a05f

080087f0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80087fa:	2200      	movs	r2, #0
 80087fc:	6839      	ldr	r1, [r7, #0]
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7ff ffa4 	bl	800874c <http_close_or_abort_conn>
 8008804:	4603      	mov	r3, r0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
 8008816:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8008818:	6839      	ldr	r1, [r7, #0]
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f7ff ffe8 	bl	80087f0 <http_close_conn>
  }
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <extract_uri_parameters+0x18>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <extract_uri_parameters+0x1c>
    return (0);
 8008840:	2300      	movs	r3, #0
 8008842:	e04b      	b.n	80088dc <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008848:	2300      	movs	r3, #0
 800884a:	613b      	str	r3, [r7, #16]
 800884c:	e03f      	b.n	80088ce <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	320c      	adds	r2, #12
 8008854:	6979      	ldr	r1, [r7, #20]
 8008856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800885e:	2126      	movs	r1, #38	; 0x26
 8008860:	6978      	ldr	r0, [r7, #20]
 8008862:	f00c fbc2 	bl	8014fea <strchr>
 8008866:	6178      	str	r0, [r7, #20]
    if (pair) {
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d006      	beq.n	800887c <extract_uri_parameters+0x54>
      *pair = '\0';
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	2200      	movs	r2, #0
 8008872:	701a      	strb	r2, [r3, #0]
      pair++;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	3301      	adds	r3, #1
 8008878:	617b      	str	r3, [r7, #20]
 800887a:	e00c      	b.n	8008896 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800887c:	2120      	movs	r1, #32
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f00c fbb3 	bl	8014fea <strchr>
 8008884:	6178      	str	r0, [r7, #20]
      if (pair) {
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <extract_uri_parameters+0x6a>
        *pair = '\0';
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	2200      	movs	r2, #0
 8008890:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8008892:	2300      	movs	r3, #0
 8008894:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8008896:	213d      	movs	r1, #61	; 0x3d
 8008898:	68f8      	ldr	r0, [r7, #12]
 800889a:	f00c fba6 	bl	8014fea <strchr>
 800889e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <extract_uri_parameters+0x94>
      *equals = '\0';
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	1c59      	adds	r1, r3, #1
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	321c      	adds	r2, #28
 80088b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80088ba:	e005      	b.n	80088c8 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	321c      	adds	r2, #28
 80088c2:	2100      	movs	r1, #0
 80088c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	3301      	adds	r3, #1
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2b0f      	cmp	r3, #15
 80088d2:	dc02      	bgt.n	80088da <extract_uri_parameters+0xb2>
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1b9      	bne.n	800884e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80088da:	693b      	ldr	r3, [r7, #16]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80088e4:	b590      	push	{r4, r7, lr}
 80088e6:	b089      	sub	sp, #36	; 0x24
 80088e8:	af02      	add	r7, sp, #8
 80088ea:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d106      	bne.n	8008900 <get_tag_insert+0x1c>
 80088f2:	4b58      	ldr	r3, [pc, #352]	; (8008a54 <get_tag_insert+0x170>)
 80088f4:	f44f 7241 	mov.w	r2, #772	; 0x304
 80088f8:	4957      	ldr	r1, [pc, #348]	; (8008a58 <get_tag_insert+0x174>)
 80088fa:	4858      	ldr	r0, [pc, #352]	; (8008a5c <get_tag_insert+0x178>)
 80088fc:	f00c fa44 	bl	8014d88 <iprintf>
  ssi = hs->ssi;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d106      	bne.n	800891a <get_tag_insert+0x36>
 800890c:	4b51      	ldr	r3, [pc, #324]	; (8008a54 <get_tag_insert+0x170>)
 800890e:	f240 3206 	movw	r2, #774	; 0x306
 8008912:	4953      	ldr	r1, [pc, #332]	; (8008a60 <get_tag_insert+0x17c>)
 8008914:	4851      	ldr	r0, [pc, #324]	; (8008a5c <get_tag_insert+0x178>)
 8008916:	f00c fa37 	bl	8014d88 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	8a9b      	ldrh	r3, [r3, #20]
 800891e:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008926:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8008928:	4b4e      	ldr	r3, [pc, #312]	; (8008a64 <get_tag_insert+0x180>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d033      	beq.n	8008998 <get_tag_insert+0xb4>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8008930:	4b4d      	ldr	r3, [pc, #308]	; (8008a68 <get_tag_insert+0x184>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d02f      	beq.n	8008998 <get_tag_insert+0xb4>
 8008938:	4b4c      	ldr	r3, [pc, #304]	; (8008a6c <get_tag_insert+0x188>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d02b      	beq.n	8008998 <get_tag_insert+0xb4>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8008940:	2300      	movs	r3, #0
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	e023      	b.n	800898e <get_tag_insert+0xaa>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	f103 0018 	add.w	r0, r3, #24
 800894c:	4b46      	ldr	r3, [pc, #280]	; (8008a68 <get_tag_insert+0x184>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4619      	mov	r1, r3
 800895a:	f7f7 fc39 	bl	80001d0 <strcmp>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d111      	bne.n	8008988 <get_tag_insert+0xa4>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8008964:	4b3f      	ldr	r3, [pc, #252]	; (8008a64 <get_tag_insert+0x180>)
 8008966:	681c      	ldr	r4, [r3, #0]
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	3314      	adds	r3, #20
 8008972:	89fa      	ldrh	r2, [r7, #14]
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	4613      	mov	r3, r2
 8008978:	22fa      	movs	r2, #250	; 0xfa
 800897a:	6978      	ldr	r0, [r7, #20]
 800897c:	47a0      	blx	r4
 800897e:	4603      	mov	r3, r0
 8008980:	461a      	mov	r2, r3
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8008986:	e061      	b.n	8008a4c <get_tag_insert+0x168>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	3301      	adds	r3, #1
 800898c:	617b      	str	r3, [r7, #20]
 800898e:	4b37      	ldr	r3, [pc, #220]	; (8008a6c <get_tag_insert+0x188>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	429a      	cmp	r2, r3
 8008996:	dbd6      	blt.n	8008946 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	3318      	adds	r3, #24
 800899c:	4618      	mov	r0, r3
 800899e:	f7f7 fc21 	bl	80001e4 <strlen>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2be0      	cmp	r3, #224	; 0xe0
 80089a6:	d818      	bhi.n	80089da <get_tag_insert+0xf6>
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	3318      	adds	r3, #24
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7f7 fc19 	bl	80001e4 <strlen>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b09      	cmp	r3, #9
 80089b6:	d810      	bhi.n	80089da <get_tag_insert+0xf6>
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	3318      	adds	r3, #24
 80089bc:	4618      	mov	r0, r3
 80089be:	f7f7 fc11 	bl	80001e4 <strlen>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2be0      	cmp	r3, #224	; 0xe0
 80089c6:	d806      	bhi.n	80089d6 <get_tag_insert+0xf2>
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	3318      	adds	r3, #24
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7f7 fc09 	bl	80001e4 <strlen>
 80089d2:	4603      	mov	r3, r0
 80089d4:	e002      	b.n	80089dc <get_tag_insert+0xf8>
 80089d6:	23e1      	movs	r3, #225	; 0xe1
 80089d8:	e000      	b.n	80089dc <get_tag_insert+0xf8>
 80089da:	2309      	movs	r3, #9
 80089dc:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	3321      	adds	r3, #33	; 0x21
 80089e2:	2212      	movs	r2, #18
 80089e4:	4922      	ldr	r1, [pc, #136]	; (8008a70 <get_tag_insert+0x18c>)
 80089e6:	4618      	mov	r0, r3
 80089e8:	f00c f99e 	bl	8014d28 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	f103 0033 	add.w	r0, r3, #51	; 0x33
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	3318      	adds	r3, #24
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	4619      	mov	r1, r3
 80089fa:	f00c f995 	bl	8014d28 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	3312      	adds	r3, #18
 8008a02:	3320      	adds	r3, #32
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	4413      	add	r3, r2
 8008a08:	3301      	adds	r3, #1
 8008a0a:	2207      	movs	r2, #7
 8008a0c:	4919      	ldr	r1, [pc, #100]	; (8008a74 <get_tag_insert+0x190>)
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f00c f98a 	bl	8014d28 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	3319      	adds	r3, #25
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	3321      	adds	r3, #33	; 0x21
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7f7 fbdc 	bl	80001e4 <strlen>
 8008a2c:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a34:	d306      	bcc.n	8008a44 <get_tag_insert+0x160>
 8008a36:	4b07      	ldr	r3, [pc, #28]	; (8008a54 <get_tag_insert+0x170>)
 8008a38:	f240 323f 	movw	r2, #831	; 0x33f
 8008a3c:	490e      	ldr	r1, [pc, #56]	; (8008a78 <get_tag_insert+0x194>)
 8008a3e:	4807      	ldr	r0, [pc, #28]	; (8008a5c <get_tag_insert+0x178>)
 8008a40:	f00c f9a2 	bl	8014d88 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	825a      	strh	r2, [r3, #18]
}
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd90      	pop	{r4, r7, pc}
 8008a52:	bf00      	nop
 8008a54:	08016ff0 	.word	0x08016ff0
 8008a58:	08017060 	.word	0x08017060
 8008a5c:	08017038 	.word	0x08017038
 8008a60:	0801706c 	.word	0x0801706c
 8008a64:	200009cc 	.word	0x200009cc
 8008a68:	200009d4 	.word	0x200009d4
 8008a6c:	200009d0 	.word	0x200009d0
 8008a70:	08017078 	.word	0x08017078
 8008a74:	0801708c 	.word	0x0801708c
 8008a78:	08017094 	.word	0x08017094

08008a7c <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 8008a86:	4a55      	ldr	r2, [pc, #340]	; (8008bdc <get_http_headers+0x160>)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d110      	bne.n	8008ac6 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8008aa4:	4a4e      	ldr	r2, [pc, #312]	; (8008be0 <get_http_headers+0x164>)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 8008aac:	4a4d      	ldr	r2, [pc, #308]	; (8008be4 <get_http_headers+0x168>)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 8008ac4:	e087      	b.n	8008bd6 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 8008ac6:	4948      	ldr	r1, [pc, #288]	; (8008be8 <get_http_headers+0x16c>)
 8008ac8:	6838      	ldr	r0, [r7, #0]
 8008aca:	f00c fac8 	bl	801505e <strstr>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d004      	beq.n	8008ade <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8008ad4:	4a42      	ldr	r2, [pc, #264]	; (8008be0 <get_http_headers+0x164>)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008adc:	e01b      	b.n	8008b16 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 8008ade:	4943      	ldr	r1, [pc, #268]	; (8008bec <get_http_headers+0x170>)
 8008ae0:	6838      	ldr	r0, [r7, #0]
 8008ae2:	f00c fabc 	bl	801505e <strstr>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d004      	beq.n	8008af6 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 8008aec:	4a40      	ldr	r2, [pc, #256]	; (8008bf0 <get_http_headers+0x174>)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008af4:	e00f      	b.n	8008b16 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 8008af6:	493f      	ldr	r1, [pc, #252]	; (8008bf4 <get_http_headers+0x178>)
 8008af8:	6838      	ldr	r0, [r7, #0]
 8008afa:	f00c fab0 	bl	801505e <strstr>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d004      	beq.n	8008b0e <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 8008b04:	4a3c      	ldr	r2, [pc, #240]	; (8008bf8 <get_http_headers+0x17c>)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008b0c:	e003      	b.n	8008b16 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 8008b0e:	4a3b      	ldr	r2, [pc, #236]	; (8008bfc <get_http_headers+0x180>)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 8008b16:	213f      	movs	r1, #63	; 0x3f
 8008b18:	6838      	ldr	r0, [r7, #0]
 8008b1a:	f00c fa66 	bl	8014fea <strchr>
 8008b1e:	60b8      	str	r0, [r7, #8]
  if (vars) {
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <get_http_headers+0xb0>
    *vars = '\0';
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 8008b30:	212e      	movs	r1, #46	; 0x2e
 8008b32:	6838      	ldr	r0, [r7, #0]
 8008b34:	f00c fa59 	bl	8014fea <strchr>
 8008b38:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8008b3a:	e007      	b.n	8008b4c <get_http_headers+0xd0>
    ext = tmp + 1;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 8008b42:	212e      	movs	r1, #46	; 0x2e
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f00c fa50 	bl	8014fea <strchr>
 8008b4a:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f4      	bne.n	8008b3c <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d014      	beq.n	8008b82 <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8008b58:	2300      	movs	r3, #0
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	e00d      	b.n	8008b7a <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 8008b5e:	4a28      	ldr	r2, [pc, #160]	; (8008c00 <get_http_headers+0x184>)
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008b66:	68f9      	ldr	r1, [r7, #12]
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 fcd1 	bl	800a510 <lwip_stricmp>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d009      	beq.n	8008b88 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	3301      	adds	r3, #1
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b13      	cmp	r3, #19
 8008b7e:	d9ee      	bls.n	8008b5e <get_http_headers+0xe2>
 8008b80:	e003      	b.n	8008b8a <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 8008b82:	2314      	movs	r3, #20
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	e000      	b.n	8008b8a <get_http_headers+0x10e>
        break;
 8008b88:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d002      	beq.n	8008b96 <get_http_headers+0x11a>
    *vars = '?';
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	223f      	movs	r2, #63	; 0x3f
 8008b94:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b13      	cmp	r3, #19
 8008b9a:	d808      	bhi.n	8008bae <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 8008b9c:	4a18      	ldr	r2, [pc, #96]	; (8008c00 <get_http_headers+0x184>)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	00db      	lsls	r3, r3, #3
 8008ba2:	4413      	add	r3, r2
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8008bac:	e00b      	b.n	8008bc6 <get_http_headers+0x14a>
  } else if (!ext) {
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d104      	bne.n	8008bbe <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a13      	ldr	r2, [pc, #76]	; (8008c04 <get_http_headers+0x188>)
 8008bb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8008bbc:	e003      	b.n	8008bc6 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a11      	ldr	r2, [pc, #68]	; (8008c08 <get_http_headers+0x18c>)
 8008bc2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	08016c70 	.word	0x08016c70
 8008be0:	08016b34 	.word	0x08016b34
 8008be4:	08016cb0 	.word	0x08016cb0
 8008be8:	080170a4 	.word	0x080170a4
 8008bec:	080170a8 	.word	0x080170a8
 8008bf0:	08016b54 	.word	0x08016b54
 8008bf4:	080170ac 	.word	0x080170ac
 8008bf8:	08016b70 	.word	0x08016b70
 8008bfc:	08016b20 	.word	0x08016b20
 8008c00:	0801ee7c 	.word	0x0801ee7c
 8008c04:	08016e44 	.word	0x08016e44
 8008c08:	080170b0 	.word	0x080170b0

08008c0c <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d006      	beq.n	8008c30 <get_http_content_length+0x24>
 8008c22:	4b27      	ldr	r3, [pc, #156]	; (8008cc0 <get_http_content_length+0xb4>)
 8008c24:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8008c28:	4926      	ldr	r1, [pc, #152]	; (8008cc4 <get_http_content_length+0xb8>)
 8008c2a:	4827      	ldr	r0, [pc, #156]	; (8008cc8 <get_http_content_length+0xbc>)
 8008c2c:	f00c f8ac 	bl	8014d88 <iprintf>

  add_content_len = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d10c      	bne.n	8008c56 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	695b      	ldr	r3, [r3, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d008      	beq.n	8008c56 <get_http_content_length+0x4a>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	7c1b      	ldrb	r3, [r3, #16]
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <get_http_content_length+0x4a>
      add_content_len = 1;
 8008c52:	2301      	movs	r3, #1
 8008c54:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d025      	beq.n	8008ca8 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	210c      	movs	r1, #12
 8008c6c:	f001 fc84 	bl	800a578 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	33c4      	adds	r3, #196	; 0xc4
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7f7 fab5 	bl	80001e4 <strlen>
 8008c7a:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b09      	cmp	r3, #9
 8008c80:	d810      	bhi.n	8008ca4 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	33c0      	adds	r3, #192	; 0xc0
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	4413      	add	r3, r2
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	490f      	ldr	r1, [pc, #60]	; (8008ccc <get_http_content_length+0xc0>)
 8008c90:	4618      	mov	r0, r3
 8008c92:	f00c f849 	bl	8014d28 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8008ca2:	e001      	b.n	8008ca8 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 8008cae:	4a08      	ldr	r2, [pc, #32]	; (8008cd0 <get_http_content_length+0xc4>)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	08016ff0 	.word	0x08016ff0
 8008cc4:	080170d0 	.word	0x080170d0
 8008cc8:	08017038 	.word	0x08017038
 8008ccc:	080170e4 	.word	0x080170e4
 8008cd0:	08016c00 	.word	0x08016c00

08008cd4 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b088      	sub	sp, #32
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d102      	bne.n	8008cf2 <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 8008cec:	6838      	ldr	r0, [r7, #0]
 8008cee:	f7ff ff8d 	bl	8008c0c <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008cf8:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 8008cfa:	8bfb      	ldrh	r3, [r7, #30]
 8008cfc:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8008cfe:	e08b      	b.n	8008e18 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008d06:	461a      	mov	r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	322c      	adds	r2, #44	; 0x2c
 8008d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7f7 fa67 	bl	80001e4 <strlen>
 8008d16:	4603      	mov	r3, r0
 8008d18:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8008d1a:	8b7b      	ldrh	r3, [r7, #26]
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 8008d22:	1a9a      	subs	r2, r3, r2
 8008d24:	8bfb      	ldrh	r3, [r7, #30]
 8008d26:	4293      	cmp	r3, r2
 8008d28:	bfa8      	it	ge
 8008d2a:	4613      	movge	r3, r2
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008d36:	461a      	mov	r2, r3
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	322c      	adds	r2, #44	; 0x2c
 8008d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 8008d46:	4413      	add	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 8008d4a:	89fb      	ldrh	r3, [r7, #14]
 8008d4c:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8008d4e:	2300      	movs	r3, #0
 8008d50:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008d58:	2b03      	cmp	r3, #3
 8008d5a:	d103      	bne.n	8008d64 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 8008d5c:	7f3b      	ldrb	r3, [r7, #28]
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d803      	bhi.n	8008d76 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 8008d6e:	7f3b      	ldrb	r3, [r7, #28]
 8008d70:	f043 0302 	orr.w	r3, r3, #2
 8008d74:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 8008d76:	7f3b      	ldrb	r3, [r7, #28]
 8008d78:	f107 020e 	add.w	r2, r7, #14
 8008d7c:	6979      	ldr	r1, [r7, #20]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff fc7a 	bl	8008678 <http_write>
 8008d84:	4603      	mov	r3, r0
 8008d86:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8008d88:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d106      	bne.n	8008d9e <http_send_headers+0xca>
 8008d90:	89fb      	ldrh	r3, [r7, #14]
 8008d92:	8a7a      	ldrh	r2, [r7, #18]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d002      	beq.n	8008d9e <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	777b      	strb	r3, [r7, #29]
 8008d9c:	e005      	b.n	8008daa <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 8008d9e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 8008da6:	2300      	movs	r3, #0
 8008da8:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8008db0:	89fb      	ldrh	r3, [r7, #14]
 8008db2:	4413      	add	r3, r2
 8008db4:	b29a      	uxth	r2, r3
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 8008dbc:	89fb      	ldrh	r3, [r7, #14]
 8008dbe:	8bfa      	ldrh	r2, [r7, #30]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8008dca:	8b7a      	ldrh	r2, [r7, #26]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d123      	bne.n	8008e18 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8008de0:	e007      	b.n	8008df2 <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008de8:	3301      	adds	r3, #1
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008df8:	2b04      	cmp	r3, #4
 8008dfa:	d809      	bhi.n	8008e10 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008e02:	461a      	mov	r2, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	322c      	adds	r2, #44	; 0x2c
 8008e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0e8      	beq.n	8008de2 <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2200      	movs	r2, #0
 8008e14:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8008e18:	8bfb      	ldrh	r3, [r7, #30]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d008      	beq.n	8008e30 <http_send_headers+0x15c>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008e24:	2b04      	cmp	r3, #4
 8008e26:	d803      	bhi.n	8008e30 <http_send_headers+0x15c>
 8008e28:	89fb      	ldrh	r3, [r7, #14]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f47f af68 	bne.w	8008d00 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d90f      	bls.n	8008e5a <http_send_headers+0x186>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10b      	bne.n	8008e5a <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f819 	bl	8008e7c <http_check_eof>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 8008e50:	2302      	movs	r3, #2
 8008e52:	777b      	strb	r3, [r7, #29]
 8008e54:	e001      	b.n	8008e5a <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e00b      	b.n	8008e72 <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d903      	bls.n	8008e6c <http_send_headers+0x198>
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e000      	b.n	8008e72 <http_send_headers+0x19e>
  }
  return data_to_send;
 8008e70:	7f7b      	ldrb	r3, [r7, #29]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3720      	adds	r7, #32
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d105      	bne.n	8008e9a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7ff fcbc 	bl	800880e <http_eof>
    return 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	e016      	b.n	8008ec8 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7ff fb56 	bl	8008550 <fs_bytes_left>
 8008ea4:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dc05      	bgt.n	8008eb8 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f7ff fcad 	bl	800880e <http_eof>
    return 0;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e007      	b.n	8008ec8 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8008eb8:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <http_check_eof+0x54>)
 8008eba:	f240 429d 	movw	r2, #1181	; 0x49d
 8008ebe:	4905      	ldr	r1, [pc, #20]	; (8008ed4 <http_check_eof+0x58>)
 8008ec0:	4805      	ldr	r0, [pc, #20]	; (8008ed8 <http_check_eof+0x5c>)
 8008ec2:	f00b ff61 	bl	8014d88 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8008ec6:	2301      	movs	r3, #1
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	08016ff0 	.word	0x08016ff0
 8008ed4:	080170e8 	.word	0x080170e8
 8008ed8:	08017038 	.word	0x08017038

08008edc <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d803      	bhi.n	8008efe <http_send_data_nonssi+0x22>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	e001      	b.n	8008f02 <http_send_data_nonssi+0x26>
 8008efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f02:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	6999      	ldr	r1, [r3, #24]
 8008f08:	f107 020c 	add.w	r2, r7, #12
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff fbb2 	bl	8008678 <http_write>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8008f18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10d      	bne.n	8008f3c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8008f20:	2301      	movs	r3, #1
 8008f22:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	89ba      	ldrh	r2, [r7, #12]
 8008f2a:	441a      	add	r2, r3
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	89ba      	ldrh	r2, [r7, #12]
 8008f36:	1a9a      	subs	r2, r3, r2
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
	...

08008f48 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8008f56:	2300      	movs	r3, #0
 8008f58:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <http_send_data_ssi+0x2c>
 8008f66:	4b89      	ldr	r3, [pc, #548]	; (800918c <http_send_data_ssi+0x244>)
 8008f68:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008f6c:	4988      	ldr	r1, [pc, #544]	; (8009190 <http_send_data_ssi+0x248>)
 8008f6e:	4889      	ldr	r0, [pc, #548]	; (8009194 <http_send_data_ssi+0x24c>)
 8008f70:	f00b ff0a 	bl	8014d88 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008f7a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	f240 82c5 	bls.w	8009514 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	dc06      	bgt.n	8008faa <http_send_data_ssi+0x62>
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	699b      	ldr	r3, [r3, #24]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	e001      	b.n	8008fae <http_send_data_ssi+0x66>
 8008faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fae:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	6999      	ldr	r1, [r3, #24]
 8008fb4:	f107 020e 	add.w	r2, r7, #14
 8008fb8:	2300      	movs	r3, #0
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff fb5c 	bl	8008678 <http_write>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8008fc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10d      	bne.n	8008fe8 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	89fa      	ldrh	r2, [r7, #14]
 8008fd6:	441a      	add	r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	89fa      	ldrh	r2, [r7, #14]
 8008fe2:	1a9a      	subs	r2, r3, r2
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f040 8290 	bne.w	8009514 <http_send_data_ssi+0x5cc>
      return data_to_send;
 8008ff4:	7dbb      	ldrb	r3, [r7, #22]
 8008ff6:	e2d6      	b.n	80095a6 <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8008ff8:	89fb      	ldrh	r3, [r7, #14]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <http_send_data_ssi+0xba>
      return data_to_send;
 8008ffe:	7dbb      	ldrb	r3, [r7, #22]
 8009000:	e2d1      	b.n	80095a6 <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009008:	2b04      	cmp	r3, #4
 800900a:	f200 8282 	bhi.w	8009512 <http_send_data_ssi+0x5ca>
 800900e:	a201      	add	r2, pc, #4	; (adr r2, 8009014 <http_send_data_ssi+0xcc>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	08009029 	.word	0x08009029
 8009018:	08009083 	.word	0x08009083
 800901c:	080090f5 	.word	0x080090f5
 8009020:	0800923d 	.word	0x0800923d
 8009024:	080093b3 	.word	0x080093b3
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8009028:	2300      	movs	r3, #0
 800902a:	757b      	strb	r3, [r7, #21]
 800902c:	e01b      	b.n	8009066 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	781a      	ldrb	r2, [r3, #0]
 8009034:	7d7b      	ldrb	r3, [r7, #21]
 8009036:	4958      	ldr	r1, [pc, #352]	; (8009198 <http_send_data_ssi+0x250>)
 8009038:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	429a      	cmp	r2, r3
 8009040:	d10e      	bne.n	8009060 <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	7d7a      	ldrb	r2, [r7, #21]
 8009046:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            ssi->tag_index = 1;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	2201      	movs	r2, #1
 8009054:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800905e:	e005      	b.n	800906c <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8009060:	7d7b      	ldrb	r3, [r7, #21]
 8009062:	3301      	adds	r3, #1
 8009064:	757b      	strb	r3, [r7, #21]
 8009066:	7d7b      	ldrb	r3, [r7, #21]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d9e0      	bls.n	800902e <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	1e5a      	subs	r2, r3, #1
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	601a      	str	r2, [r3, #0]
        break;
 8009080:	e248      	b.n	8009514 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	7d9b      	ldrb	r3, [r3, #22]
 8009086:	461a      	mov	r2, r3
 8009088:	4b43      	ldr	r3, [pc, #268]	; (8009198 <http_send_data_ssi+0x250>)
 800908a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	8a12      	ldrh	r2, [r2, #16]
 8009092:	4413      	add	r3, r2
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d107      	bne.n	80090aa <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	2200      	movs	r2, #0
 800909e:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 80090a8:	e234      	b.n	8009514 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	781a      	ldrb	r2, [r3, #0]
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	7d9b      	ldrb	r3, [r3, #22]
 80090b4:	4619      	mov	r1, r3
 80090b6:	4b38      	ldr	r3, [pc, #224]	; (8009198 <http_send_data_ssi+0x250>)
 80090b8:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 80090bc:	6939      	ldr	r1, [r7, #16]
 80090be:	8a09      	ldrh	r1, [r1, #16]
 80090c0:	440b      	add	r3, r1
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d106      	bne.n	80090d6 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	8a1b      	ldrh	r3, [r3, #16]
 80090cc:	3301      	adds	r3, #1
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	821a      	strh	r2, [r3, #16]
 80090d4:	e003      	b.n	80090de <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	2200      	movs	r2, #0
 80090da:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	1e5a      	subs	r2, r3, #1
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	601a      	str	r2, [r3, #0]
        }
        break;
 80090f2:	e20f      	b.n	8009514 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	8a1b      	ldrh	r3, [r3, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d11e      	bne.n	800913a <http_send_data_ssi+0x1f2>
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	2b20      	cmp	r3, #32
 8009104:	d00e      	beq.n	8009124 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800910c:	2b09      	cmp	r3, #9
 800910e:	d009      	beq.n	8009124 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	2b0a      	cmp	r3, #10
 8009118:	d004      	beq.n	8009124 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009120:	2b0d      	cmp	r3, #13
 8009122:	d10a      	bne.n	800913a <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	1e5a      	subs	r2, r3, #1
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	1c5a      	adds	r2, r3, #1
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	601a      	str	r2, [r3, #0]
          break;
 8009138:	e1ec      	b.n	8009514 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	781a      	ldrb	r2, [r3, #0]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	7d9b      	ldrb	r3, [r3, #22]
 8009144:	4914      	ldr	r1, [pc, #80]	; (8009198 <http_send_data_ssi+0x250>)
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	440b      	add	r3, r1
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	429a      	cmp	r2, r3
 8009150:	d013      	beq.n	800917a <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8009158:	2b20      	cmp	r3, #32
 800915a:	d00e      	beq.n	800917a <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	2b09      	cmp	r3, #9
 8009164:	d009      	beq.n	800917a <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800916c:	2b0a      	cmp	r3, #10
 800916e:	d004      	beq.n	800917a <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	2b0d      	cmp	r3, #13
 8009178:	d13f      	bne.n	80091fa <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	8a1b      	ldrh	r3, [r3, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10c      	bne.n	800919c <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8009182:	693b      	ldr	r3, [r7, #16]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          if (ssi->tag_index == 0) {
 800918a:	e04c      	b.n	8009226 <http_send_data_ssi+0x2de>
 800918c:	08016ff0 	.word	0x08016ff0
 8009190:	0801706c 	.word	0x0801706c
 8009194:	08017038 	.word	0x08017038
 8009198:	0801ef58 	.word	0x0801ef58
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	2203      	movs	r2, #3
 80091a0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	8a1b      	ldrh	r3, [r3, #16]
 80091a8:	2bff      	cmp	r3, #255	; 0xff
 80091aa:	d906      	bls.n	80091ba <http_send_data_ssi+0x272>
 80091ac:	4b92      	ldr	r3, [pc, #584]	; (80093f8 <http_send_data_ssi+0x4b0>)
 80091ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80091b2:	4992      	ldr	r1, [pc, #584]	; (80093fc <http_send_data_ssi+0x4b4>)
 80091b4:	4892      	ldr	r0, [pc, #584]	; (8009400 <http_send_data_ssi+0x4b8>)
 80091b6:	f00b fde7 	bl	8014d88 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	8a1b      	ldrh	r3, [r3, #16]
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	8a1b      	ldrh	r3, [r3, #16]
 80091c8:	461a      	mov	r2, r3
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	4413      	add	r3, r2
 80091ce:	2200      	movs	r2, #0
 80091d0:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	781a      	ldrb	r2, [r3, #0]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	7d9b      	ldrb	r3, [r3, #22]
 80091dc:	4989      	ldr	r1, [pc, #548]	; (8009404 <http_send_data_ssi+0x4bc>)
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	440b      	add	r3, r1
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d103      	bne.n	80091f2 <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	2201      	movs	r2, #1
 80091ee:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 80091f0:	e019      	b.n	8009226 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2200      	movs	r2, #0
 80091f6:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 80091f8:	e015      	b.n	8009226 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	8a1b      	ldrh	r3, [r3, #16]
 80091fe:	2b07      	cmp	r3, #7
 8009200:	d80d      	bhi.n	800921e <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	8a1b      	ldrh	r3, [r3, #16]
 800920a:	1c59      	adds	r1, r3, #1
 800920c:	b288      	uxth	r0, r1
 800920e:	6939      	ldr	r1, [r7, #16]
 8009210:	8208      	strh	r0, [r1, #16]
 8009212:	4619      	mov	r1, r3
 8009214:	7812      	ldrb	r2, [r2, #0]
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	440b      	add	r3, r1
 800921a:	761a      	strb	r2, [r3, #24]
 800921c:	e003      	b.n	8009226 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	68db      	ldr	r3, [r3, #12]
 800922a:	1e5a      	subs	r2, r3, #1
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	601a      	str	r2, [r3, #0]

        break;
 800923a:	e16b      	b.n	8009514 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	8a1b      	ldrh	r3, [r3, #16]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d11e      	bne.n	8009282 <http_send_data_ssi+0x33a>
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b20      	cmp	r3, #32
 800924c:	d00e      	beq.n	800926c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009254:	2b09      	cmp	r3, #9
 8009256:	d009      	beq.n	800926c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	2b0a      	cmp	r3, #10
 8009260:	d004      	beq.n	800926c <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009268:	2b0d      	cmp	r3, #13
 800926a:	d10a      	bne.n	8009282 <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	1e5a      	subs	r2, r3, #1
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	1c5a      	adds	r2, r3, #1
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	601a      	str	r2, [r3, #0]
          break;
 8009280:	e148      	b.n	8009514 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	781a      	ldrb	r2, [r3, #0]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	7d9b      	ldrb	r3, [r3, #22]
 800928c:	495d      	ldr	r1, [pc, #372]	; (8009404 <http_send_data_ssi+0x4bc>)
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	440b      	add	r3, r1
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	6939      	ldr	r1, [r7, #16]
 8009296:	8a09      	ldrh	r1, [r1, #16]
 8009298:	440b      	add	r3, r1
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	429a      	cmp	r2, r3
 800929e:	d179      	bne.n	8009394 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	1e5a      	subs	r2, r3, #1
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	8a1b      	ldrh	r3, [r3, #16]
 80092b8:	3301      	adds	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	7d9b      	ldrb	r3, [r3, #22]
 80092c4:	4a4f      	ldr	r2, [pc, #316]	; (8009404 <http_send_data_ssi+0x4bc>)
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	4413      	add	r3, r2
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	693a      	ldr	r2, [r7, #16]
 80092ce:	8a12      	ldrh	r2, [r2, #16]
 80092d0:	4413      	add	r3, r2
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f040 811d 	bne.w	8009514 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	2200      	movs	r2, #0
 80092de:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80092e0:	6838      	ldr	r0, [r7, #0]
 80092e2:	f7ff faff 	bl	80088e4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2200      	movs	r2, #0
 80092ea:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	2204      	movs	r2, #4
 80092f0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            ssi->tag_end = ssi->parsed;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	689a      	ldr	r2, [r3, #8]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	429a      	cmp	r2, r3
 800930e:	f240 8101 	bls.w	8009514 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009320:	4293      	cmp	r3, r2
 8009322:	dc06      	bgt.n	8009332 <http_send_data_ssi+0x3ea>
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	b29b      	uxth	r3, r3
 8009330:	e001      	b.n	8009336 <http_send_data_ssi+0x3ee>
 8009332:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009336:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	6999      	ldr	r1, [r3, #24]
 800933c:	f107 020e 	add.w	r2, r7, #14
 8009340:	2300      	movs	r3, #0
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff f998 	bl	8008678 <http_write>
 8009348:	4603      	mov	r3, r0
 800934a:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800934c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009350:	2b00      	cmp	r3, #0
 8009352:	f040 80df 	bne.w	8009514 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 8009356:	2301      	movs	r3, #1
 8009358:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	429a      	cmp	r2, r3
 8009364:	d809      	bhi.n	800937a <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	689a      	ldr	r2, [r3, #8]
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	b29a      	uxth	r2, r3
 8009372:	89fb      	ldrh	r3, [r7, #14]
 8009374:	4413      	add	r3, r2
 8009376:	b29b      	uxth	r3, r3
 8009378:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	89fa      	ldrh	r2, [r7, #14]
 8009380:	441a      	add	r2, r3
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	89fa      	ldrh	r2, [r7, #14]
 800938c:	1a9a      	subs	r2, r3, r2
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	625a      	str	r2, [r3, #36]	; 0x24
 8009392:	e0bf      	b.n	8009514 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	1e5a      	subs	r2, r3, #1
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	1c5a      	adds	r2, r3, #1
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
        }
        break;
 80093b0:	e0b0      	b.n	8009514 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d95c      	bls.n	8009478 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d206      	bcs.n	80093d8 <http_send_data_ssi+0x490>
 80093ca:	4b0b      	ldr	r3, [pc, #44]	; (80093f8 <http_send_data_ssi+0x4b0>)
 80093cc:	f240 52ac 	movw	r2, #1452	; 0x5ac
 80093d0:	490d      	ldr	r1, [pc, #52]	; (8009408 <http_send_data_ssi+0x4c0>)
 80093d2:	480b      	ldr	r0, [pc, #44]	; (8009400 <http_send_data_ssi+0x4b8>)
 80093d4:	f00b fcd8 	bl	8014d88 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	1ad3      	subs	r3, r2, r3
 80093e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80093e6:	4293      	cmp	r3, r2
 80093e8:	dc10      	bgt.n	800940c <http_send_data_ssi+0x4c4>
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	699b      	ldr	r3, [r3, #24]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	e00b      	b.n	8009410 <http_send_data_ssi+0x4c8>
 80093f8:	08016ff0 	.word	0x08016ff0
 80093fc:	08017120 	.word	0x08017120
 8009400:	08017038 	.word	0x08017038
 8009404:	0801ef58 	.word	0x0801ef58
 8009408:	08017138 	.word	0x08017138
 800940c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009410:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8009412:	89fb      	ldrh	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d00a      	beq.n	800942e <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	6999      	ldr	r1, [r3, #24]
 800941c:	f107 020e 	add.w	r2, r7, #14
 8009420:	2300      	movs	r3, #0
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff f928 	bl	8008678 <http_write>
 8009428:	4603      	mov	r3, r0
 800942a:	75fb      	strb	r3, [r7, #23]
 800942c:	e001      	b.n	8009432 <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8009432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d16c      	bne.n	8009514 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 800943a:	2301      	movs	r3, #1
 800943c:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	429a      	cmp	r2, r3
 8009448:	d809      	bhi.n	800945e <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	1ad3      	subs	r3, r2, r3
 8009454:	b29a      	uxth	r2, r3
 8009456:	89fb      	ldrh	r3, [r7, #14]
 8009458:	4413      	add	r3, r2
 800945a:	b29b      	uxth	r3, r3
 800945c:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	89fa      	ldrh	r2, [r7, #14]
 8009464:	441a      	add	r2, r3
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	89fa      	ldrh	r2, [r7, #14]
 8009470:	1a9a      	subs	r2, r3, r2
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	625a      	str	r2, [r3, #36]	; 0x24
 8009476:	e04d      	b.n	8009514 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	8a1a      	ldrh	r2, [r3, #16]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	8a5b      	ldrh	r3, [r3, #18]
 8009480:	429a      	cmp	r2, r3
 8009482:	d30b      	bcc.n	800949c <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	8a9b      	ldrh	r3, [r3, #20]
 8009488:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800948c:	4293      	cmp	r3, r2
 800948e:	d005      	beq.n	800949c <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2200      	movs	r2, #0
 8009494:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 8009496:	6838      	ldr	r0, [r7, #0]
 8009498:	f7ff fa24 	bl	80088e4 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	8a1a      	ldrh	r2, [r3, #16]
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	8a5b      	ldrh	r3, [r3, #18]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d222      	bcs.n	80094ee <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	8a5a      	ldrh	r2, [r3, #18]
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	8a1b      	ldrh	r3, [r3, #16]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	8a1b      	ldrh	r3, [r3, #16]
 80094ba:	3320      	adds	r3, #32
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4413      	add	r3, r2
 80094c0:	1c59      	adds	r1, r3, #1
 80094c2:	f107 020e 	add.w	r2, r7, #14
 80094c6:	2301      	movs	r3, #1
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff f8d5 	bl	8008678 <http_write>
 80094ce:	4603      	mov	r3, r0
 80094d0:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 80094d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d11c      	bne.n	8009514 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 80094da:	2301      	movs	r3, #1
 80094dc:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	8a1a      	ldrh	r2, [r3, #16]
 80094e2:	89fb      	ldrh	r3, [r7, #14]
 80094e4:	4413      	add	r3, r2
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	821a      	strh	r2, [r3, #16]
 80094ec:	e012      	b.n	8009514 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	8a9b      	ldrh	r3, [r3, #20]
 80094f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d10c      	bne.n	8009514 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	2200      	movs	r2, #0
 80094fe:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	689a      	ldr	r2, [r3, #8]
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8009510:	e000      	b.n	8009514 <http_send_data_ssi+0x5cc>
        default:
          break;
 8009512:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800951a:	2b04      	cmp	r3, #4
 800951c:	d003      	beq.n	8009526 <http_send_data_ssi+0x5de>
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d004      	beq.n	8009530 <http_send_data_ssi+0x5e8>
 8009526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f43f ad64 	beq.w	8008ff8 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009536:	2b04      	cmp	r3, #4
 8009538:	d034      	beq.n	80095a4 <http_send_data_ssi+0x65c>
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	429a      	cmp	r2, r3
 8009544:	d92e      	bls.n	80095a4 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009554:	4293      	cmp	r3, r2
 8009556:	dc06      	bgt.n	8009566 <http_send_data_ssi+0x61e>
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	b29b      	uxth	r3, r3
 8009564:	e001      	b.n	800956a <http_send_data_ssi+0x622>
 8009566:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800956a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	6999      	ldr	r1, [r3, #24]
 8009570:	f107 020e 	add.w	r2, r7, #14
 8009574:	2300      	movs	r3, #0
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f7ff f87e 	bl	8008678 <http_write>
 800957c:	4603      	mov	r3, r0
 800957e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8009580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d10d      	bne.n	80095a4 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 8009588:	2301      	movs	r3, #1
 800958a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	89fa      	ldrh	r2, [r7, #14]
 8009592:	441a      	add	r2, r3
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	89fa      	ldrh	r2, [r7, #14]
 800959e:	1a9a      	subs	r2, r3, r2
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 80095a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop

080095b0 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80095ba:	2300      	movs	r3, #0
 80095bc:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <http_send+0x18>
    return 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	e048      	b.n	800965a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80095ce:	2b04      	cmp	r3, #4
 80095d0:	d812      	bhi.n	80095f8 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7ff fb7d 	bl	8008cd4 <http_send_headers>
 80095da:	4603      	mov	r3, r0
 80095dc:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 80095de:	7bfb      	ldrb	r3, [r7, #15]
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d007      	beq.n	80095f4 <http_send+0x44>
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d006      	beq.n	80095f8 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d801      	bhi.n	80095f8 <http_send+0x48>
      return data_to_send;
 80095f4:	7bfb      	ldrb	r3, [r7, #15]
 80095f6:	e030      	b.n	800965a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d108      	bne.n	8009612 <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f7ff fc3a 	bl	8008e7c <http_check_eof>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <http_send+0x62>
      return 0;
 800960e:	2300      	movs	r3, #0
 8009610:	e023      	b.n	800965a <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009616:	2b00      	cmp	r3, #0
 8009618:	d006      	beq.n	8009628 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7ff fc93 	bl	8008f48 <http_send_data_ssi>
 8009622:	4603      	mov	r3, r0
 8009624:	73fb      	strb	r3, [r7, #15]
 8009626:	e005      	b.n	8009634 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7ff fc56 	bl	8008edc <http_send_data_nonssi>
 8009630:	4603      	mov	r3, r0
 8009632:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10d      	bne.n	8009658 <http_send+0xa8>
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	4618      	mov	r0, r3
 8009642:	f7fe ff85 	bl	8008550 <fs_bytes_left>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	dc05      	bgt.n	8009658 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff f8dd 	bl	800880e <http_eof>
    return 0;
 8009654:	2300      	movs	r3, #0
 8009656:	e000      	b.n	800965a <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	4a1c      	ldr	r2, [pc, #112]	; (80096e4 <http_get_404_file+0x80>)
 8009672:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4619      	mov	r1, r3
 800967c:	4610      	mov	r0, r2
 800967e:	f7fe ff1f 	bl	80084c0 <fs_open>
 8009682:	4603      	mov	r3, r0
 8009684:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d024      	beq.n	80096d8 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	4a15      	ldr	r2, [pc, #84]	; (80096e8 <http_get_404_file+0x84>)
 8009692:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4619      	mov	r1, r3
 800969c:	4610      	mov	r0, r2
 800969e:	f7fe ff0f 	bl	80084c0 <fs_open>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80096a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d014      	beq.n	80096d8 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	4a0e      	ldr	r2, [pc, #56]	; (80096ec <http_get_404_file+0x88>)
 80096b2:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4619      	mov	r1, r3
 80096bc:	4610      	mov	r0, r2
 80096be:	f7fe feff 	bl	80084c0 <fs_open>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80096c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d004      	beq.n	80096d8 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2200      	movs	r2, #0
 80096d2:	601a      	str	r2, [r3, #0]
        return NULL;
 80096d4:	2300      	movs	r3, #0
 80096d6:	e000      	b.n	80096da <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 80096d8:	687b      	ldr	r3, [r7, #4]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	08017150 	.word	0x08017150
 80096e8:	0801715c 	.word	0x0801715c
 80096ec:	08017168 	.word	0x08017168

080096f0 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 80096f8:	4b08      	ldr	r3, [pc, #32]	; (800971c <http_handle_post_finished+0x2c>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80096fe:	223f      	movs	r2, #63	; 0x3f
 8009700:	4906      	ldr	r1, [pc, #24]	; (800971c <http_handle_post_finished+0x2c>)
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7f7 fd2c 	bl	8001160 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8009708:	2200      	movs	r2, #0
 800970a:	4904      	ldr	r1, [pc, #16]	; (800971c <http_handle_post_finished+0x2c>)
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 faab 	bl	8009c68 <http_find_file>
 8009712:	4603      	mov	r3, r0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	2000098c 	.word	0x2000098c

08009720 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d014      	beq.n	800975a <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	8912      	ldrh	r2, [r2, #8]
 800973a:	4293      	cmp	r3, r2
 800973c:	d204      	bcs.n	8009748 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009746:	e008      	b.n	800975a <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800974e:	683a      	ldr	r2, [r7, #0]
 8009750:	8912      	ldrh	r2, [r2, #8]
 8009752:	1a9a      	subs	r2, r3, r2
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d006      	beq.n	800976e <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 8009760:	6839      	ldr	r1, [r7, #0]
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7f7 fcbe 	bl	80010e4 <httpd_post_receive_data>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
 800976c:	e001      	b.n	8009772 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 8009772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7ff ffaf 	bl	80096f0 <http_handle_post_finished>
 8009792:	4603      	mov	r3, r0
 8009794:	e000      	b.n	8009798 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b092      	sub	sp, #72	; 0x48
 80097a4:	af04      	add	r7, sp, #16
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
 80097ac:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 80097ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b0:	1c58      	adds	r0, r3, #1
 80097b2:	887a      	ldrh	r2, [r7, #2]
 80097b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b6:	1c59      	adds	r1, r3, #1
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	1acb      	subs	r3, r1, r3
 80097bc:	1ad3      	subs	r3, r2, r3
 80097be:	461a      	mov	r2, r3
 80097c0:	4965      	ldr	r1, [pc, #404]	; (8009958 <http_post_request+0x1b8>)
 80097c2:	f000 fe6f 	bl	800a4a4 <lwip_strnstr>
 80097c6:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f000 80be 	beq.w	800994c <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 80097d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d2:	1c58      	adds	r0, r3, #1
 80097d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d6:	3301      	adds	r3, #1
 80097d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097da:	1ad3      	subs	r3, r2, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	495f      	ldr	r1, [pc, #380]	; (800995c <http_post_request+0x1bc>)
 80097e0:	f000 fe60 	bl	800a4a4 <lwip_strnstr>
 80097e4:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 80ac 	beq.w	8009946 <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 80097ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f0:	3310      	adds	r3, #16
 80097f2:	220a      	movs	r2, #10
 80097f4:	495a      	ldr	r1, [pc, #360]	; (8009960 <http_post_request+0x1c0>)
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fe54 	bl	800a4a4 <lwip_strnstr>
 80097fc:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 80a0 	beq.w	8009946 <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	3310      	adds	r3, #16
 800980a:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800980c:	69f8      	ldr	r0, [r7, #28]
 800980e:	f00b fa55 	bl	8014cbc <atoi>
 8009812:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8009814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10b      	bne.n	8009832 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	2b30      	cmp	r3, #48	; 0x30
 8009820:	d104      	bne.n	800982c <http_post_request+0x8c>
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	3301      	adds	r3, #1
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	2b0d      	cmp	r3, #13
 800982a:	d002      	beq.n	8009832 <http_post_request+0x92>
            content_len = -1;
 800982c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009830:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 8009832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009834:	2b00      	cmp	r3, #0
 8009836:	f2c0 8083 	blt.w	8009940 <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800983a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800983c:	3301      	adds	r3, #1
 800983e:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8009840:	887a      	ldrh	r2, [r7, #2]
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	1d19      	adds	r1, r3, #4
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	1acb      	subs	r3, r1, r3
 800984a:	429a      	cmp	r2, r3
 800984c:	db05      	blt.n	800985a <http_post_request+0xba>
 800984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009850:	1d1a      	adds	r2, r3, #4
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	b29b      	uxth	r3, r3
 8009858:	e000      	b.n	800985c <http_post_request+0xbc>
 800985a:	887b      	ldrh	r3, [r7, #2]
 800985c:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800985e:	887a      	ldrh	r2, [r7, #2]
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	1d19      	adds	r1, r3, #4
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	1acb      	subs	r3, r1, r3
 8009868:	429a      	cmp	r2, r3
 800986a:	db05      	blt.n	8009878 <http_post_request+0xd8>
 800986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986e:	1d1a      	adds	r2, r3, #4
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	b29b      	uxth	r3, r3
 8009876:	e000      	b.n	800987a <http_post_request+0xda>
 8009878:	887b      	ldrh	r3, [r7, #2]
 800987a:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800987c:	2301      	movs	r3, #1
 800987e:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 8009880:	4b38      	ldr	r3, [pc, #224]	; (8009964 <http_post_request+0x1c4>)
 8009882:	2200      	movs	r2, #0
 8009884:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	2200      	movs	r2, #0
 800988a:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800988c:	8aba      	ldrh	r2, [r7, #20]
 800988e:	f107 0312 	add.w	r3, r7, #18
 8009892:	9303      	str	r3, [sp, #12]
 8009894:	233f      	movs	r3, #63	; 0x3f
 8009896:	9302      	str	r3, [sp, #8]
 8009898:	4b32      	ldr	r3, [pc, #200]	; (8009964 <http_post_request+0x1c4>)
 800989a:	9301      	str	r3, [sp, #4]
 800989c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	4613      	mov	r3, r2
 80098a2:	69ba      	ldr	r2, [r7, #24]
 80098a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098a6:	68b8      	ldr	r0, [r7, #8]
 80098a8:	f7f7 fbf2 	bl	8001090 <httpd_post_begin>
 80098ac:	4603      	mov	r3, r0
 80098ae:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 80098b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d13c      	bne.n	8009932 <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 80098bc:	8afb      	ldrh	r3, [r7, #22]
 80098be:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 80098c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 80098c8:	e007      	b.n	80098da <http_post_request+0x13a>
              start_offset -= q->len;
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	895b      	ldrh	r3, [r3, #10]
 80098ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 80098d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 80098da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d004      	beq.n	80098ea <http_post_request+0x14a>
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	895b      	ldrh	r3, [r3, #10]
 80098e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d2ef      	bcs.n	80098ca <http_post_request+0x12a>
            }
            if (q != NULL) {
 80098ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00d      	beq.n	800990c <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 80098f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80098f2:	4619      	mov	r1, r3
 80098f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098f6:	f002 f8b3 	bl	800ba60 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 80098fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098fc:	f002 f9d6 	bl	800bcac <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8009900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009902:	68b8      	ldr	r0, [r7, #8]
 8009904:	f7ff ff0c 	bl	8009720 <http_post_rxpbuf>
 8009908:	4603      	mov	r3, r0
 800990a:	e021      	b.n	8009950 <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10b      	bne.n	800992e <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8009916:	2241      	movs	r2, #65	; 0x41
 8009918:	2100      	movs	r1, #0
 800991a:	2000      	movs	r0, #0
 800991c:	f001 fe42 	bl	800b5a4 <pbuf_alloc>
 8009920:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 8009922:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009924:	68b8      	ldr	r0, [r7, #8]
 8009926:	f7ff fefb 	bl	8009720 <http_post_rxpbuf>
 800992a:	4603      	mov	r3, r0
 800992c:	e010      	b.n	8009950 <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	e00e      	b.n	8009950 <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8009932:	2200      	movs	r2, #0
 8009934:	490b      	ldr	r1, [pc, #44]	; (8009964 <http_post_request+0x1c4>)
 8009936:	68b8      	ldr	r0, [r7, #8]
 8009938:	f000 f996 	bl	8009c68 <http_find_file>
 800993c:	4603      	mov	r3, r0
 800993e:	e007      	b.n	8009950 <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 8009940:	f06f 030f 	mvn.w	r3, #15
 8009944:	e004      	b.n	8009950 <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 8009946:	f06f 030f 	mvn.w	r3, #15
 800994a:	e001      	b.n	8009950 <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800994c:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009950:	4618      	mov	r0, r3
 8009952:	3738      	adds	r7, #56	; 0x38
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	08017174 	.word	0x08017174
 800995c:	08016c00 	.word	0x08016c00
 8009960:	080170e4 	.word	0x080170e4
 8009964:	2000098c 	.word	0x2000098c

08009968 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b092      	sub	sp, #72	; 0x48
 800996c:	af02      	add	r7, sp, #8
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <http_parse_request+0x24>
 800997e:	4b87      	ldr	r3, [pc, #540]	; (8009b9c <http_parse_request+0x234>)
 8009980:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8009984:	4986      	ldr	r1, [pc, #536]	; (8009ba0 <http_parse_request+0x238>)
 8009986:	4887      	ldr	r0, [pc, #540]	; (8009ba4 <http_parse_request+0x23c>)
 8009988:	f00b f9fe 	bl	8014d88 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d106      	bne.n	80099a0 <http_parse_request+0x38>
 8009992:	4b82      	ldr	r3, [pc, #520]	; (8009b9c <http_parse_request+0x234>)
 8009994:	f240 72af 	movw	r2, #1967	; 0x7af
 8009998:	4983      	ldr	r1, [pc, #524]	; (8009ba8 <http_parse_request+0x240>)
 800999a:	4882      	ldr	r0, [pc, #520]	; (8009ba4 <http_parse_request+0x23c>)
 800999c:	f00b f9f4 	bl	8014d88 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d103      	bne.n	80099b0 <http_parse_request+0x48>
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80099b0:	f06f 0307 	mvn.w	r3, #7
 80099b4:	e0ed      	b.n	8009b92 <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	6a1b      	ldr	r3, [r3, #32]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d103      	bne.n	80099c6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c2:	621a      	str	r2, [r3, #32]
 80099c4:	e005      	b.n	80099d2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099cc:	4618      	mov	r0, r3
 80099ce:	f002 f98f 	bl	800bcf0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80099d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099d4:	f002 f96a 	bl	800bcac <pbuf_ref>

  if (hs->req->next != NULL) {
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6a1b      	ldr	r3, [r3, #32]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d012      	beq.n	8009a08 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	891b      	ldrh	r3, [r3, #8]
 80099e8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80099ec:	4293      	cmp	r3, r2
 80099ee:	bf28      	it	cs
 80099f0:	4613      	movcs	r3, r2
 80099f2:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	6a18      	ldr	r0, [r3, #32]
 80099f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80099fa:	2300      	movs	r3, #0
 80099fc:	496b      	ldr	r1, [pc, #428]	; (8009bac <http_parse_request+0x244>)
 80099fe:	f002 fa9f 	bl	800bf40 <pbuf_copy_partial>
    data = httpd_req_buf;
 8009a02:	4b6a      	ldr	r3, [pc, #424]	; (8009bac <http_parse_request+0x244>)
 8009a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a06:	e005      	b.n	8009a14 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8009a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a10:	895b      	ldrh	r3, [r3, #10]
 8009a12:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8009a14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009a16:	2b06      	cmp	r3, #6
 8009a18:	f240 80a1 	bls.w	8009b5e <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8009a1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009a1e:	461a      	mov	r2, r3
 8009a20:	4963      	ldr	r1, [pc, #396]	; (8009bb0 <http_parse_request+0x248>)
 8009a22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009a24:	f000 fd3e 	bl	800a4a4 <lwip_strnstr>
 8009a28:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 8096 	beq.w	8009b5e <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8009a3a:	2204      	movs	r2, #4
 8009a3c:	495d      	ldr	r1, [pc, #372]	; (8009bb4 <http_parse_request+0x24c>)
 8009a3e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009a40:	f00b fae8 	bl	8015014 <strncmp>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d103      	bne.n	8009a52 <http_parse_request+0xea>
        sp1 = data + 3;
 8009a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4c:	3303      	adds	r3, #3
 8009a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a50:	e014      	b.n	8009a7c <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 8009a52:	2205      	movs	r2, #5
 8009a54:	4958      	ldr	r1, [pc, #352]	; (8009bb8 <http_parse_request+0x250>)
 8009a56:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009a58:	f00b fadc 	bl	8015014 <strncmp>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d105      	bne.n	8009a6e <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 8009a62:	2301      	movs	r3, #1
 8009a64:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 8009a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a68:	3304      	adds	r3, #4
 8009a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a6c:	e006      	b.n	8009a7c <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 8009a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a70:	3304      	adds	r3, #4
 8009a72:	2200      	movs	r2, #0
 8009a74:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 8009a76:	f06f 030f 	mvn.w	r3, #15
 8009a7a:	e08a      	b.n	8009b92 <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8009a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8009a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8e:	3301      	adds	r3, #1
 8009a90:	8bfa      	ldrh	r2, [r7, #30]
 8009a92:	494a      	ldr	r1, [pc, #296]	; (8009bbc <http_parse_request+0x254>)
 8009a94:	4618      	mov	r0, r3
 8009a96:	f000 fd05 	bl	800a4a4 <lwip_strnstr>
 8009a9a:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d10c      	bne.n	8009abc <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	8bfa      	ldrh	r2, [r7, #30]
 8009aa8:	4941      	ldr	r1, [pc, #260]	; (8009bb0 <http_parse_request+0x248>)
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f000 fcfa 	bl	800a4a4 <lwip_strnstr>
 8009ab0:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 8009ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d163      	bne.n	8009b84 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8009abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abe:	3301      	adds	r3, #1
 8009ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d048      	beq.n	8009b5e <http_parse_request+0x1f6>
 8009acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d944      	bls.n	8009b5e <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8009ad4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	4939      	ldr	r1, [pc, #228]	; (8009bc0 <http_parse_request+0x258>)
 8009ada:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009adc:	f000 fce2 	bl	800a4a4 <lwip_strnstr>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d03b      	beq.n	8009b5e <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae8:	3301      	adds	r3, #1
 8009aea:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aee:	2200      	movs	r2, #0
 8009af0:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8009af2:	8bbb      	ldrh	r3, [r7, #28]
 8009af4:	69ba      	ldr	r2, [r7, #24]
 8009af6:	4413      	add	r3, r2
 8009af8:	2200      	movs	r2, #0
 8009afa:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 8009afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d026      	beq.n	8009b50 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 8009b08:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0c:	9301      	str	r3, [sp, #4]
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	9300      	str	r3, [sp, #0]
 8009b12:	4613      	mov	r3, r2
 8009b14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009b16:	68b9      	ldr	r1, [r7, #8]
 8009b18:	6978      	ldr	r0, [r7, #20]
 8009b1a:	f7ff fe41 	bl	80097a0 <http_post_request>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8009b22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 8009b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	2220      	movs	r2, #32
 8009b34:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 8009b36:	8bbb      	ldrh	r3, [r7, #28]
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8009b40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b44:	f113 0f10 	cmn.w	r3, #16
 8009b48:	d01e      	beq.n	8009b88 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 8009b4a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b4e:	e020      	b.n	8009b92 <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8009b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b52:	69b9      	ldr	r1, [r7, #24]
 8009b54:	68b8      	ldr	r0, [r7, #8]
 8009b56:	f000 f887 	bl	8009c68 <http_find_file>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	e019      	b.n	8009b92 <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	6a1b      	ldr	r3, [r3, #32]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f002 f88a 	bl	800bc7c <pbuf_clen>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	6a1b      	ldr	r3, [r3, #32]
 8009b70:	891b      	ldrh	r3, [r3, #8]
 8009b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b76:	d209      	bcs.n	8009b8c <http_parse_request+0x224>
 8009b78:	8a3b      	ldrh	r3, [r7, #16]
 8009b7a:	2b05      	cmp	r3, #5
 8009b7c:	d806      	bhi.n	8009b8c <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8009b7e:	f06f 0304 	mvn.w	r3, #4
 8009b82:	e006      	b.n	8009b92 <http_parse_request+0x22a>
          goto badrequest;
 8009b84:	bf00      	nop
 8009b86:	e002      	b.n	8009b8e <http_parse_request+0x226>
              goto badrequest;
 8009b88:	bf00      	nop
 8009b8a:	e000      	b.n	8009b8e <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8009b8c:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8009b8e:	f06f 030f 	mvn.w	r3, #15
  }
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3740      	adds	r7, #64	; 0x40
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	08016ff0 	.word	0x08016ff0
 8009ba0:	0801717c 	.word	0x0801717c
 8009ba4:	08017038 	.word	0x08017038
 8009ba8:	08017060 	.word	0x08017060
 8009bac:	2000058c 	.word	0x2000058c
 8009bb0:	080170e4 	.word	0x080170e4
 8009bb4:	08017188 	.word	0x08017188
 8009bb8:	08017190 	.word	0x08017190
 8009bbc:	08017198 	.word	0x08017198
 8009bc0:	08017174 	.word	0x08017174

08009bc4 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b088      	sub	sp, #32
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d040      	beq.n	8009c5a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8009bdc:	213f      	movs	r1, #63	; 0x3f
 8009bde:	6838      	ldr	r0, [r7, #0]
 8009be0:	f00b fa03 	bl	8014fea <strchr>
 8009be4:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d002      	beq.n	8009bf2 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	613b      	str	r3, [r7, #16]
    ext = uri;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8009bfa:	212e      	movs	r1, #46	; 0x2e
 8009bfc:	6938      	ldr	r0, [r7, #16]
 8009bfe:	f00b f9f4 	bl	8014fea <strchr>
 8009c02:	6138      	str	r0, [r7, #16]
 8009c04:	e009      	b.n	8009c1a <http_uri_is_ssi+0x56>
      ext = sub;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	617b      	str	r3, [r7, #20]
      sub++;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8009c10:	212e      	movs	r1, #46	; 0x2e
 8009c12:	6938      	ldr	r0, [r7, #16]
 8009c14:	f00b f9e9 	bl	8014fea <strchr>
 8009c18:	6138      	str	r0, [r7, #16]
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1f2      	bne.n	8009c06 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8009c20:	2300      	movs	r3, #0
 8009c22:	61fb      	str	r3, [r7, #28]
 8009c24:	e010      	b.n	8009c48 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8009c26:	4a0f      	ldr	r2, [pc, #60]	; (8009c64 <http_uri_is_ssi+0xa0>)
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6978      	ldr	r0, [r7, #20]
 8009c32:	f000 fc6d 	bl	800a510 <lwip_stricmp>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d102      	bne.n	8009c42 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	76fb      	strb	r3, [r7, #27]
        break;
 8009c40:	e005      	b.n	8009c4e <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	3301      	adds	r3, #1
 8009c46:	61fb      	str	r3, [r7, #28]
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	2b04      	cmp	r3, #4
 8009c4c:	d9eb      	bls.n	8009c26 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <http_uri_is_ssi+0x96>
      *param = '?';
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	223f      	movs	r2, #63	; 0x3f
 8009c58:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8009c5a:	7efb      	ldrb	r3, [r7, #27]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	0801ef1c 	.word	0x0801ef1c

08009c68 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8009c68:	b590      	push	{r4, r7, lr}
 8009c6a:	b093      	sub	sp, #76	; 0x4c
 8009c6c:	af02      	add	r7, sp, #8
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8009c74:	2300      	movs	r3, #0
 8009c76:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7f6 faad 	bl	80001e4 <strlen>
 8009c8a:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d072      	beq.n	8009d78 <http_find_file+0x110>
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	3b01      	subs	r3, #1
 8009c98:	4413      	add	r3, r2
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b2f      	cmp	r3, #47	; 0x2f
 8009c9e:	d16b      	bne.n	8009d78 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009ca0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009ca2:	4a80      	ldr	r2, [pc, #512]	; (8009ea4 <http_find_file+0x23c>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d102      	bne.n	8009cae <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d164      	bne.n	8009d78 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	2b3f      	cmp	r3, #63	; 0x3f
 8009cb4:	bf28      	it	cs
 8009cb6:	233f      	movcs	r3, #63	; 0x3f
 8009cb8:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	6a3a      	ldr	r2, [r7, #32]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4877      	ldr	r0, [pc, #476]	; (8009ea4 <http_find_file+0x23c>)
 8009cc8:	f00b f82e 	bl	8014d28 <memcpy>
      http_uri_buf[copy_len] = 0;
 8009ccc:	4a75      	ldr	r2, [pc, #468]	; (8009ea4 <http_find_file+0x23c>)
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cda:	e04a      	b.n	8009d72 <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d028      	beq.n	8009d34 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8009ce2:	6a3b      	ldr	r3, [r7, #32]
 8009ce4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8009ce8:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01e      	beq.n	8009d2e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8009cf0:	4a6d      	ldr	r2, [pc, #436]	; (8009ea8 <http_find_file+0x240>)
 8009cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cf4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7f6 fa73 	bl	80001e4 <strlen>
 8009cfe:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8009d00:	69ba      	ldr	r2, [r7, #24]
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	4293      	cmp	r3, r2
 8009d06:	bf28      	it	cs
 8009d08:	4613      	movcs	r3, r2
 8009d0a:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	4a65      	ldr	r2, [pc, #404]	; (8009ea4 <http_find_file+0x23c>)
 8009d10:	1898      	adds	r0, r3, r2
 8009d12:	4a65      	ldr	r2, [pc, #404]	; (8009ea8 <http_find_file+0x240>)
 8009d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	f00b f803 	bl	8014d28 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8009d22:	6a3a      	ldr	r2, [r7, #32]
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	4413      	add	r3, r2
 8009d28:	4a5e      	ldr	r2, [pc, #376]	; (8009ea4 <http_find_file+0x23c>)
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8009d2e:	4b5d      	ldr	r3, [pc, #372]	; (8009ea4 <http_find_file+0x23c>)
 8009d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d32:	e004      	b.n	8009d3e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8009d34:	4a5c      	ldr	r2, [pc, #368]	; (8009ea8 <http_find_file+0x240>)
 8009d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d3c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe fbbc 	bl	80084c0 <fs_open>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8009d4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10b      	bne.n	8009d6c <http_find_file+0x104>
        uri = file_name;
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8009d5c:	4a52      	ldr	r2, [pc, #328]	; (8009ea8 <http_find_file+0x240>)
 8009d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d60:	00db      	lsls	r3, r3, #3
 8009d62:	4413      	add	r3, r2
 8009d64:	791b      	ldrb	r3, [r3, #4]
 8009d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8009d6a:	e005      	b.n	8009d78 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d6e:	3301      	adds	r3, #1
 8009d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d74:	2b04      	cmp	r3, #4
 8009d76:	d9b1      	bls.n	8009cdc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8009d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d176      	bne.n	8009e6c <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	213f      	movs	r1, #63	; 0x3f
 8009d82:	4618      	mov	r0, r3
 8009d84:	f00b f931 	bl	8014fea <strchr>
 8009d88:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d005      	beq.n	8009d9c <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8009d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d92:	2200      	movs	r2, #0
 8009d94:	701a      	strb	r2, [r3, #0]
      params++;
 8009d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d98:	3301      	adds	r3, #1
 8009d9a:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8009d9c:	4b43      	ldr	r3, [pc, #268]	; (8009eac <http_find_file+0x244>)
 8009d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009da2:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 8009da4:	4b42      	ldr	r3, [pc, #264]	; (8009eb0 <http_find_file+0x248>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d034      	beq.n	8009e16 <http_find_file+0x1ae>
 8009dac:	4b41      	ldr	r3, [pc, #260]	; (8009eb4 <http_find_file+0x24c>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d030      	beq.n	8009e16 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8009db4:	2300      	movs	r3, #0
 8009db6:	633b      	str	r3, [r7, #48]	; 0x30
 8009db8:	e028      	b.n	8009e0c <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8009dba:	68b8      	ldr	r0, [r7, #8]
 8009dbc:	4b3d      	ldr	r3, [pc, #244]	; (8009eb4 <http_find_file+0x24c>)
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	4413      	add	r3, r2
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4619      	mov	r1, r3
 8009dca:	f7f6 fa01 	bl	80001d0 <strcmp>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d118      	bne.n	8009e06 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8009dd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7fe fd26 	bl	8008828 <extract_uri_parameters>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4a33      	ldr	r2, [pc, #204]	; (8009eac <http_find_file+0x244>)
 8009de0:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8009de2:	4b34      	ldr	r3, [pc, #208]	; (8009eb4 <http_find_file+0x24c>)
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de8:	00db      	lsls	r3, r3, #3
 8009dea:	4413      	add	r3, r2
 8009dec:	685c      	ldr	r4, [r3, #4]
 8009dee:	4b2f      	ldr	r3, [pc, #188]	; (8009eac <http_find_file+0x244>)
 8009df0:	6819      	ldr	r1, [r3, #0]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8009dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dfe:	47a0      	blx	r4
 8009e00:	4603      	mov	r3, r0
 8009e02:	60bb      	str	r3, [r7, #8]
          break;
 8009e04:	e007      	b.n	8009e16 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	3301      	adds	r3, #1
 8009e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8009e0c:	4b28      	ldr	r3, [pc, #160]	; (8009eb0 <http_find_file+0x248>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e12:	429a      	cmp	r2, r3
 8009e14:	dbd1      	blt.n	8009dba <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	68ba      	ldr	r2, [r7, #8]
 8009e1a:	4611      	mov	r1, r2
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7fe fb4f 	bl	80084c0 <fs_open>
 8009e22:	4603      	mov	r3, r0
 8009e24:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8009e26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <http_find_file+0x1cc>
      file = &hs->file_handle;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e32:	e006      	b.n	8009e42 <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8009e34:	f107 0308 	add.w	r3, r7, #8
 8009e38:	4619      	mov	r1, r3
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7ff fc12 	bl	8009664 <http_get_404_file>
 8009e40:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d011      	beq.n	8009e6c <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8009e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e4a:	7c1b      	ldrb	r3, [r3, #16]
 8009e4c:	f003 0308 	and.w	r3, r3, #8
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d003      	beq.n	8009e5c <http_find_file+0x1f4>
        tag_check = 1;
 8009e54:	2301      	movs	r3, #1
 8009e56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009e5a:	e007      	b.n	8009e6c <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e62:	f7ff feaf 	bl	8009bc4 <http_uri_is_ssi>
 8009e66:	4603      	mov	r3, r0
 8009e68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d106      	bne.n	8009e80 <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8009e72:	f107 0308 	add.w	r3, r7, #8
 8009e76:	4619      	mov	r1, r3
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	f7ff fbf3 	bl	8009664 <http_get_404_file>
 8009e7e:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e84:	9301      	str	r3, [sp, #4]
 8009e86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f000 f810 	bl	8009eb8 <http_init_file>
 8009e98:	4603      	mov	r3, r0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3744      	adds	r7, #68	; 0x44
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd90      	pop	{r4, r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	2000098c 	.word	0x2000098c
 8009ea8:	0801ef30 	.word	0x0801ef30
 8009eac:	200009e0 	.word	0x200009e0
 8009eb0:	200009dc 	.word	0x200009dc
 8009eb4:	200009d8 	.word	0x200009d8

08009eb8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	60b9      	str	r1, [r7, #8]
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d06f      	beq.n	8009fac <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d106      	bne.n	8009ee2 <http_init_file+0x2a>
 8009ed4:	4b46      	ldr	r3, [pc, #280]	; (8009ff0 <http_init_file+0x138>)
 8009ed6:	f640 120b 	movw	r2, #2315	; 0x90b
 8009eda:	4946      	ldr	r1, [pc, #280]	; (8009ff4 <http_init_file+0x13c>)
 8009edc:	4846      	ldr	r0, [pc, #280]	; (8009ff8 <http_init_file+0x140>)
 8009ede:	f00a ff53 	bl	8014d88 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8009ee2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d01c      	beq.n	8009f24 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8009eea:	f7fe fb40 	bl	800856e <http_ssi_state_alloc>
 8009eee:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8009ef0:	69fb      	ldr	r3, [r7, #28]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d016      	beq.n	8009f24 <http_init_file+0x6c>
        ssi->tag_index = 0;
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
        ssi->parsed = file->data;
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	461a      	mov	r2, r3
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	69fa      	ldr	r2, [r7, #28]
 8009f22:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	68ba      	ldr	r2, [r7, #8]
 8009f28:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	685b      	ldr	r3, [r3, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	da06      	bge.n	8009f48 <http_init_file+0x90>
 8009f3a:	4b2d      	ldr	r3, [pc, #180]	; (8009ff0 <http_init_file+0x138>)
 8009f3c:	f640 1234 	movw	r2, #2356	; 0x934
 8009f40:	492e      	ldr	r1, [pc, #184]	; (8009ffc <http_init_file+0x144>)
 8009f42:	482d      	ldr	r0, [pc, #180]	; (8009ff8 <http_init_file+0x140>)
 8009f44:	f00a ff20 	bl	8014d88 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d032      	beq.n	8009fc6 <http_init_file+0x10e>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	7c1b      	ldrb	r3, [r3, #16]
 8009f66:	f003 0301 	and.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d02b      	beq.n	8009fc6 <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6998      	ldr	r0, [r3, #24]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f76:	461a      	mov	r2, r3
 8009f78:	4921      	ldr	r1, [pc, #132]	; (800a000 <http_init_file+0x148>)
 8009f7a:	f000 fa93 	bl	800a4a4 <lwip_strnstr>
 8009f7e:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d01f      	beq.n	8009fc6 <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	1d1a      	adds	r2, r3, #4
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	1ad3      	subs	r3, r2, r3
 8009f90:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	699a      	ldr	r2, [r3, #24]
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	441a      	add	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	1ad2      	subs	r2, r2, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	625a      	str	r2, [r3, #36]	; 0x24
 8009faa:	e00c      	b.n	8009fc6 <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <http_init_file+0x124>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	7c1b      	ldrb	r3, [r3, #16]
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d103      	bne.n	8009fe4 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7fe fd4c 	bl	8008a7c <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3720      	adds	r7, #32
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	08016ff0 	.word	0x08016ff0
 8009ff4:	0801719c 	.word	0x0801719c
 8009ff8:	08017038 	.word	0x08017038
 8009ffc:	080171b0 	.word	0x080171b0
 800a000:	08017174 	.word	0x08017174

0800a004 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <http_err+0x1c>
    http_state_free(hs);
 800a01a:	68f8      	ldr	r0, [r7, #12]
 800a01c:	f7fe fb1a 	bl	8008654 <http_state_free>
  }
}
 800a020:	bf00      	nop
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	4613      	mov	r3, r2
 800a034:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <http_sent+0x1c>
    return ERR_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	e008      	b.n	800a056 <http_sent+0x2e>
  }

  hs->retries = 0;
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	2200      	movs	r2, #0
 800a048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800a04c:	6979      	ldr	r1, [r7, #20]
 800a04e:	68b8      	ldr	r0, [r7, #8]
 800a050:	f7ff faae 	bl	80095b0 <http_send>

  return ERR_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b084      	sub	sp, #16
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d107      	bne.n	800a082 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800a072:	2100      	movs	r1, #0
 800a074:	6838      	ldr	r0, [r7, #0]
 800a076:	f7fe fbbb 	bl	80087f0 <http_close_conn>
 800a07a:	4603      	mov	r3, r0
 800a07c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	e021      	b.n	800a0c6 <http_poll+0x68>
  } else {
    hs->retries++;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a088:	3301      	adds	r3, #1
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a098:	2b04      	cmp	r3, #4
 800a09a:	d105      	bne.n	800a0a8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800a09c:	68f9      	ldr	r1, [r7, #12]
 800a09e:	6838      	ldr	r0, [r7, #0]
 800a0a0:	f7fe fba6 	bl	80087f0 <http_close_conn>
      return ERR_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e00e      	b.n	800a0c6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	695b      	ldr	r3, [r3, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d009      	beq.n	800a0c4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800a0b0:	68f9      	ldr	r1, [r7, #12]
 800a0b2:	6838      	ldr	r0, [r7, #0]
 800a0b4:	f7ff fa7c 	bl	80095b0 <http_send>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d002      	beq.n	800a0c4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800a0be:	6838      	ldr	r0, [r7, #0]
 800a0c0:	f007 f8c2 	bl	8011248 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
 800a0dc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a0e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d105      	bne.n	800a0f6 <http_recv+0x26>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <http_recv+0x26>
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d111      	bne.n	800a11a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d008      	beq.n	800a10e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	891b      	ldrh	r3, [r3, #8]
 800a100:	4619      	mov	r1, r3
 800a102:	68b8      	ldr	r0, [r7, #8]
 800a104:	f002 fc94 	bl	800ca30 <tcp_recved>
      pbuf_free(p);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f001 fd2f 	bl	800bb6c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a10e:	6979      	ldr	r1, [r7, #20]
 800a110:	68b8      	ldr	r0, [r7, #8]
 800a112:	f7fe fb6d 	bl	80087f0 <http_close_conn>
    return ERR_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	e072      	b.n	800a200 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	891b      	ldrh	r3, [r3, #8]
 800a11e:	4619      	mov	r1, r3
 800a120:	68b8      	ldr	r0, [r7, #8]
 800a122:	f002 fc85 	bl	800ca30 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d012      	beq.n	800a156 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2200      	movs	r2, #0
 800a134:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800a138:	6879      	ldr	r1, [r7, #4]
 800a13a:	6978      	ldr	r0, [r7, #20]
 800a13c:	f7ff faf0 	bl	8009720 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a146:	2b00      	cmp	r3, #0
 800a148:	d103      	bne.n	800a152 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800a14a:	6979      	ldr	r1, [r7, #20]
 800a14c:	68b8      	ldr	r0, [r7, #8]
 800a14e:	f7ff fa2f 	bl	80095b0 <http_send>
    }
    return ERR_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	e054      	b.n	800a200 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d14c      	bne.n	800a1f8 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	6979      	ldr	r1, [r7, #20]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7ff fc00 	bl	8009968 <http_parse_request>
 800a168:	4603      	mov	r3, r0
 800a16a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a16c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d015      	beq.n	800a1a0 <http_recv+0xd0>
 800a174:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a178:	f113 0f05 	cmn.w	r3, #5
 800a17c:	d010      	beq.n	800a1a0 <http_recv+0xd0>
 800a17e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a182:	f113 0f10 	cmn.w	r3, #16
 800a186:	d00b      	beq.n	800a1a0 <http_recv+0xd0>
 800a188:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a18c:	f113 0f08 	cmn.w	r3, #8
 800a190:	d006      	beq.n	800a1a0 <http_recv+0xd0>
 800a192:	4b1d      	ldr	r3, [pc, #116]	; (800a208 <http_recv+0x138>)
 800a194:	f640 2204 	movw	r2, #2564	; 0xa04
 800a198:	491c      	ldr	r1, [pc, #112]	; (800a20c <http_recv+0x13c>)
 800a19a:	481d      	ldr	r0, [pc, #116]	; (800a210 <http_recv+0x140>)
 800a19c:	f00a fdf4 	bl	8014d88 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800a1a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1a4:	f113 0f05 	cmn.w	r3, #5
 800a1a8:	d00b      	beq.n	800a1c2 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <http_recv+0xf2>
          pbuf_free(hs->req);
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f001 fcd8 	bl	800bb6c <pbuf_free>
          hs->req = NULL;
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f001 fcd2 	bl	800bb6c <pbuf_free>
      if (parsed == ERR_OK) {
 800a1c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d109      	bne.n	800a1e4 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d111      	bne.n	800a1fe <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800a1da:	6979      	ldr	r1, [r7, #20]
 800a1dc:	68b8      	ldr	r0, [r7, #8]
 800a1de:	f7ff f9e7 	bl	80095b0 <http_send>
 800a1e2:	e00c      	b.n	800a1fe <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800a1e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1e8:	f113 0f10 	cmn.w	r3, #16
 800a1ec:	d107      	bne.n	800a1fe <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800a1ee:	6979      	ldr	r1, [r7, #20]
 800a1f0:	68b8      	ldr	r0, [r7, #8]
 800a1f2:	f7fe fafd 	bl	80087f0 <http_close_conn>
 800a1f6:	e002      	b.n	800a1fe <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f001 fcb7 	bl	800bb6c <pbuf_free>
    }
  }
  return ERR_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	08016ff0 	.word	0x08016ff0
 800a20c:	080171d0 	.word	0x080171d0
 800a210:	08017038 	.word	0x08017038

0800a214 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d102      	bne.n	800a230 <http_accept+0x1c>
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d102      	bne.n	800a236 <http_accept+0x22>
    return ERR_VAL;
 800a230:	f06f 0305 	mvn.w	r3, #5
 800a234:	e025      	b.n	800a282 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a236:	2101      	movs	r1, #1
 800a238:	68b8      	ldr	r0, [r7, #8]
 800a23a:	f003 f8dd 	bl	800d3f8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800a23e:	f7fe f9cb 	bl	80085d8 <http_state_alloc>
 800a242:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d102      	bne.n	800a250 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800a24a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a24e:	e018      	b.n	800a282 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	68ba      	ldr	r2, [r7, #8]
 800a254:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800a256:	6979      	ldr	r1, [r7, #20]
 800a258:	68b8      	ldr	r0, [r7, #8]
 800a25a:	f003 facd 	bl	800d7f8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800a25e:	490b      	ldr	r1, [pc, #44]	; (800a28c <http_accept+0x78>)
 800a260:	68b8      	ldr	r0, [r7, #8]
 800a262:	f003 fadb 	bl	800d81c <tcp_recv>
  altcp_err(pcb, http_err);
 800a266:	490a      	ldr	r1, [pc, #40]	; (800a290 <http_accept+0x7c>)
 800a268:	68b8      	ldr	r0, [r7, #8]
 800a26a:	f003 fb1b 	bl	800d8a4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a26e:	2204      	movs	r2, #4
 800a270:	4908      	ldr	r1, [pc, #32]	; (800a294 <http_accept+0x80>)
 800a272:	68b8      	ldr	r0, [r7, #8]
 800a274:	f003 fb50 	bl	800d918 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800a278:	4907      	ldr	r1, [pc, #28]	; (800a298 <http_accept+0x84>)
 800a27a:	68b8      	ldr	r0, [r7, #8]
 800a27c:	f003 faf0 	bl	800d860 <tcp_sent>

  return ERR_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3718      	adds	r7, #24
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	0800a0d1 	.word	0x0800a0d1
 800a290:	0800a005 	.word	0x0800a005
 800a294:	0800a05f 	.word	0x0800a05f
 800a298:	0800a029 	.word	0x0800a029

0800a29c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d029      	beq.n	800a302 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f003 f8a1 	bl	800d3f8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800a2b6:	887b      	ldrh	r3, [r7, #2]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4914      	ldr	r1, [pc, #80]	; (800a30c <httpd_init_pcb+0x70>)
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f002 f9e9 	bl	800c694 <tcp_bind>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800a2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d006      	beq.n	800a2dc <httpd_init_pcb+0x40>
 800a2ce:	4b10      	ldr	r3, [pc, #64]	; (800a310 <httpd_init_pcb+0x74>)
 800a2d0:	f640 2257 	movw	r2, #2647	; 0xa57
 800a2d4:	490f      	ldr	r1, [pc, #60]	; (800a314 <httpd_init_pcb+0x78>)
 800a2d6:	4810      	ldr	r0, [pc, #64]	; (800a318 <httpd_init_pcb+0x7c>)
 800a2d8:	f00a fd56 	bl	8014d88 <iprintf>
    pcb = altcp_listen(pcb);
 800a2dc:	21ff      	movs	r1, #255	; 0xff
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f002 fa90 	bl	800c804 <tcp_listen_with_backlog>
 800a2e4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d106      	bne.n	800a2fa <httpd_init_pcb+0x5e>
 800a2ec:	4b08      	ldr	r3, [pc, #32]	; (800a310 <httpd_init_pcb+0x74>)
 800a2ee:	f640 2259 	movw	r2, #2649	; 0xa59
 800a2f2:	490a      	ldr	r1, [pc, #40]	; (800a31c <httpd_init_pcb+0x80>)
 800a2f4:	4808      	ldr	r0, [pc, #32]	; (800a318 <httpd_init_pcb+0x7c>)
 800a2f6:	f00a fd47 	bl	8014d88 <iprintf>
    altcp_accept(pcb, http_accept);
 800a2fa:	4909      	ldr	r1, [pc, #36]	; (800a320 <httpd_init_pcb+0x84>)
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f003 faf3 	bl	800d8e8 <tcp_accept>
  }
}
 800a302:	bf00      	nop
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	0801f038 	.word	0x0801f038
 800a310:	08016ff0 	.word	0x08016ff0
 800a314:	080171fc 	.word	0x080171fc
 800a318:	08017038 	.word	0x08017038
 800a31c:	08017218 	.word	0x08017218
 800a320:	0800a215 	.word	0x0800a215

0800a324 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800a32a:	202e      	movs	r0, #46	; 0x2e
 800a32c:	f003 fa56 	bl	800d7dc <tcp_new_ip_type>
 800a330:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d106      	bne.n	800a346 <httpd_init+0x22>
 800a338:	4b07      	ldr	r3, [pc, #28]	; (800a358 <httpd_init+0x34>)
 800a33a:	f640 2272 	movw	r2, #2674	; 0xa72
 800a33e:	4907      	ldr	r1, [pc, #28]	; (800a35c <httpd_init+0x38>)
 800a340:	4807      	ldr	r0, [pc, #28]	; (800a360 <httpd_init+0x3c>)
 800a342:	f00a fd21 	bl	8014d88 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800a346:	2150      	movs	r1, #80	; 0x50
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff ffa7 	bl	800a29c <httpd_init_pcb>
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	08016ff0 	.word	0x08016ff0
 800a35c:	08017238 	.word	0x08017238
 800a360:	08017038 	.word	0x08017038

0800a364 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <http_set_ssi_handler+0x20>
 800a376:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <http_set_ssi_handler+0x64>)
 800a378:	f640 2297 	movw	r2, #2711	; 0xa97
 800a37c:	4913      	ldr	r1, [pc, #76]	; (800a3cc <http_set_ssi_handler+0x68>)
 800a37e:	4814      	ldr	r0, [pc, #80]	; (800a3d0 <http_set_ssi_handler+0x6c>)
 800a380:	f00a fd02 	bl	8014d88 <iprintf>
  httpd_ssi_handler = ssi_handler;
 800a384:	4a13      	ldr	r2, [pc, #76]	; (800a3d4 <http_set_ssi_handler+0x70>)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d106      	bne.n	800a39e <http_set_ssi_handler+0x3a>
 800a390:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <http_set_ssi_handler+0x64>)
 800a392:	f640 229e 	movw	r2, #2718	; 0xa9e
 800a396:	4910      	ldr	r1, [pc, #64]	; (800a3d8 <http_set_ssi_handler+0x74>)
 800a398:	480d      	ldr	r0, [pc, #52]	; (800a3d0 <http_set_ssi_handler+0x6c>)
 800a39a:	f00a fcf5 	bl	8014d88 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dc06      	bgt.n	800a3b2 <http_set_ssi_handler+0x4e>
 800a3a4:	4b08      	ldr	r3, [pc, #32]	; (800a3c8 <http_set_ssi_handler+0x64>)
 800a3a6:	f640 229f 	movw	r2, #2719	; 0xa9f
 800a3aa:	490c      	ldr	r1, [pc, #48]	; (800a3dc <http_set_ssi_handler+0x78>)
 800a3ac:	4808      	ldr	r0, [pc, #32]	; (800a3d0 <http_set_ssi_handler+0x6c>)
 800a3ae:	f00a fceb 	bl	8014d88 <iprintf>

  httpd_tags = tags;
 800a3b2:	4a0b      	ldr	r2, [pc, #44]	; (800a3e0 <http_set_ssi_handler+0x7c>)
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800a3b8:	4a0a      	ldr	r2, [pc, #40]	; (800a3e4 <http_set_ssi_handler+0x80>)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	08016ff0 	.word	0x08016ff0
 800a3cc:	08017254 	.word	0x08017254
 800a3d0:	08017038 	.word	0x08017038
 800a3d4:	200009cc 	.word	0x200009cc
 800a3d8:	0801726c 	.word	0x0801726c
 800a3dc:	0801727c 	.word	0x0801727c
 800a3e0:	200009d4 	.word	0x200009d4
 800a3e4:	200009d0 	.word	0x200009d0

0800a3e8 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d106      	bne.n	800a406 <http_set_cgi_handlers+0x1e>
 800a3f8:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <http_set_cgi_handlers+0x48>)
 800a3fa:	f640 22b2 	movw	r2, #2738	; 0xab2
 800a3fe:	490d      	ldr	r1, [pc, #52]	; (800a434 <http_set_cgi_handlers+0x4c>)
 800a400:	480d      	ldr	r0, [pc, #52]	; (800a438 <http_set_cgi_handlers+0x50>)
 800a402:	f00a fcc1 	bl	8014d88 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dc06      	bgt.n	800a41a <http_set_cgi_handlers+0x32>
 800a40c:	4b08      	ldr	r3, [pc, #32]	; (800a430 <http_set_cgi_handlers+0x48>)
 800a40e:	f640 22b3 	movw	r2, #2739	; 0xab3
 800a412:	490a      	ldr	r1, [pc, #40]	; (800a43c <http_set_cgi_handlers+0x54>)
 800a414:	4808      	ldr	r0, [pc, #32]	; (800a438 <http_set_cgi_handlers+0x50>)
 800a416:	f00a fcb7 	bl	8014d88 <iprintf>

  httpd_cgis = cgis;
 800a41a:	4a09      	ldr	r2, [pc, #36]	; (800a440 <http_set_cgi_handlers+0x58>)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800a420:	4a08      	ldr	r2, [pc, #32]	; (800a444 <http_set_cgi_handlers+0x5c>)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	6013      	str	r3, [r2, #0]
}
 800a426:	bf00      	nop
 800a428:	3708      	adds	r7, #8
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	08016ff0 	.word	0x08016ff0
 800a434:	08017294 	.word	0x08017294
 800a438:	08017038 	.word	0x08017038
 800a43c:	080172a4 	.word	0x080172a4
 800a440:	200009d8 	.word	0x200009d8
 800a444:	200009dc 	.word	0x200009dc

0800a448 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a452:	88fb      	ldrh	r3, [r7, #6]
 800a454:	021b      	lsls	r3, r3, #8
 800a456:	b21a      	sxth	r2, r3
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	0a1b      	lsrs	r3, r3, #8
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	b21b      	sxth	r3, r3
 800a460:	4313      	orrs	r3, r2
 800a462:	b21b      	sxth	r3, r3
 800a464:	b29b      	uxth	r3, r3
}
 800a466:	4618      	mov	r0, r3
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a472:	b480      	push	{r7}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	061a      	lsls	r2, r3, #24
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	021b      	lsls	r3, r3, #8
 800a482:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a486:	431a      	orrs	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	0a1b      	lsrs	r3, r3, #8
 800a48c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a490:	431a      	orrs	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	0e1b      	lsrs	r3, r3, #24
 800a496:	4313      	orrs	r3, r2
}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800a4b0:	68b8      	ldr	r0, [r7, #8]
 800a4b2:	f7f5 fe97 	bl	80001e4 <strlen>
 800a4b6:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	e022      	b.n	800a508 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	617b      	str	r3, [r7, #20]
 800a4c6:	e012      	b.n	800a4ee <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	781a      	ldrb	r2, [r3, #0]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d109      	bne.n	800a4e8 <lwip_strnstr+0x44>
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	68b9      	ldr	r1, [r7, #8]
 800a4d8:	6978      	ldr	r0, [r7, #20]
 800a4da:	f00a fd9b 	bl	8015014 <strncmp>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	e00f      	b.n	800a508 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	617b      	str	r3, [r7, #20]
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d007      	beq.n	800a506 <lwip_strnstr+0x62>
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	441a      	add	r2, r3
 800a4fc:	68f9      	ldr	r1, [r7, #12]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	440b      	add	r3, r1
 800a502:	429a      	cmp	r2, r3
 800a504:	d9e0      	bls.n	800a4c8 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3718      	adds	r7, #24
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	603a      	str	r2, [r7, #0]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800a52e:	7bfa      	ldrb	r2, [r7, #15]
 800a530:	7bbb      	ldrb	r3, [r7, #14]
 800a532:	429a      	cmp	r2, r3
 800a534:	d016      	beq.n	800a564 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800a536:	7bfb      	ldrb	r3, [r7, #15]
 800a538:	f043 0320 	orr.w	r3, r3, #32
 800a53c:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a53e:	7b7b      	ldrb	r3, [r7, #13]
 800a540:	2b60      	cmp	r3, #96	; 0x60
 800a542:	d90c      	bls.n	800a55e <lwip_stricmp+0x4e>
 800a544:	7b7b      	ldrb	r3, [r7, #13]
 800a546:	2b7a      	cmp	r3, #122	; 0x7a
 800a548:	d809      	bhi.n	800a55e <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
 800a54c:	f043 0320 	orr.w	r3, r3, #32
 800a550:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800a552:	7b7a      	ldrb	r2, [r7, #13]
 800a554:	7b3b      	ldrb	r3, [r7, #12]
 800a556:	429a      	cmp	r2, r3
 800a558:	d003      	beq.n	800a562 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e006      	b.n	800a56c <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800a55e:	2301      	movs	r3, #1
 800a560:	e004      	b.n	800a56c <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a562:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800a564:	7bfb      	ldrb	r3, [r7, #15]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1d7      	bne.n	800a51a <lwip_stricmp+0xa>
  return 0;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b088      	sub	sp, #32
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
  char *res = result;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	4413      	add	r3, r2
 800a590:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b00      	cmp	r3, #0
 800a596:	bfb8      	it	lt
 800a598:	425b      	neglt	r3, r3
 800a59a:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	d806      	bhi.n	800a5b0 <lwip_itoa+0x38>
    if (bufsize == 1) {
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d154      	bne.n	800a652 <lwip_itoa+0xda>
      *result = 0;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	701a      	strb	r2, [r3, #0]
    }
    return;
 800a5ae:	e050      	b.n	800a652 <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	da04      	bge.n	800a5c0 <lwip_itoa+0x48>
    *res++ = '-';
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	61fa      	str	r2, [r7, #28]
 800a5bc:	222d      	movs	r2, #45	; 0x2d
 800a5be:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800a5c6:	e01c      	b.n	800a602 <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	4b24      	ldr	r3, [pc, #144]	; (800a65c <lwip_itoa+0xe4>)
 800a5cc:	fb83 1302 	smull	r1, r3, r3, r2
 800a5d0:	1099      	asrs	r1, r3, #2
 800a5d2:	17d3      	asrs	r3, r2, #31
 800a5d4:	1ac9      	subs	r1, r1, r3
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	440b      	add	r3, r1
 800a5dc:	005b      	lsls	r3, r3, #1
 800a5de:	1ad1      	subs	r1, r2, r3
 800a5e0:	b2cb      	uxtb	r3, r1
 800a5e2:	3330      	adds	r3, #48	; 0x30
 800a5e4:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800a5e6:	69bb      	ldr	r3, [r7, #24]
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800a5ec:	69bb      	ldr	r3, [r7, #24]
 800a5ee:	7cfa      	ldrb	r2, [r7, #19]
 800a5f0:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	4a19      	ldr	r2, [pc, #100]	; (800a65c <lwip_itoa+0xe4>)
 800a5f6:	fb82 1203 	smull	r1, r2, r2, r3
 800a5fa:	1092      	asrs	r2, r2, #2
 800a5fc:	17db      	asrs	r3, r3, #31
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <lwip_itoa+0x98>
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	69fb      	ldr	r3, [r7, #28]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d8db      	bhi.n	800a5c8 <lwip_itoa+0x50>
  }
  if (n) {
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d003      	beq.n	800a61e <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	701a      	strb	r2, [r3, #0]
    return;
 800a61c:	e01a      	b.n	800a654 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d10a      	bne.n	800a63c <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	1c5a      	adds	r2, r3, #1
 800a62a:	61fa      	str	r2, [r7, #28]
 800a62c:	2230      	movs	r2, #48	; 0x30
 800a62e:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	61fa      	str	r2, [r7, #28]
 800a636:	2200      	movs	r2, #0
 800a638:	701a      	strb	r2, [r3, #0]
    return;
 800a63a:	e00b      	b.n	800a654 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800a63c:	68fa      	ldr	r2, [r7, #12]
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	441a      	add	r2, r3
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	1ad3      	subs	r3, r2, r3
 800a646:	461a      	mov	r2, r3
 800a648:	69b9      	ldr	r1, [r7, #24]
 800a64a:	69f8      	ldr	r0, [r7, #28]
 800a64c:	f00a fb7a 	bl	8014d44 <memmove>
 800a650:	e000      	b.n	800a654 <lwip_itoa+0xdc>
    return;
 800a652:	bf00      	nop
}
 800a654:	3720      	adds	r7, #32
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	66666667 	.word	0x66666667

0800a660 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a66a:	f000 f8d5 	bl	800a818 <mem_init>
  memp_init();
 800a66e:	f000 fbdb 	bl	800ae28 <memp_init>
  pbuf_init();
  netif_init();
 800a672:	f000 fc93 	bl	800af9c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a676:	f007 fea7 	bl	80123c8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a67a:	f001 fd05 	bl	800c088 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a67e:	f007 fe19 	bl	80122b4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a682:	bf00      	nop
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
	...

0800a68c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a696:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <ptr_to_mem+0x20>)
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	88fb      	ldrh	r3, [r7, #6]
 800a69c:	4413      	add	r3, r2
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	200009e4 	.word	0x200009e4

0800a6b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a6b8:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <mem_to_ptr+0x20>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	b29b      	uxth	r3, r3
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	370c      	adds	r7, #12
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	200009e4 	.word	0x200009e4

0800a6d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a6d4:	b590      	push	{r4, r7, lr}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a6dc:	4b45      	ldr	r3, [pc, #276]	; (800a7f4 <plug_holes+0x120>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d206      	bcs.n	800a6f4 <plug_holes+0x20>
 800a6e6:	4b44      	ldr	r3, [pc, #272]	; (800a7f8 <plug_holes+0x124>)
 800a6e8:	f240 12df 	movw	r2, #479	; 0x1df
 800a6ec:	4943      	ldr	r1, [pc, #268]	; (800a7fc <plug_holes+0x128>)
 800a6ee:	4844      	ldr	r0, [pc, #272]	; (800a800 <plug_holes+0x12c>)
 800a6f0:	f00a fb4a 	bl	8014d88 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a6f4:	4b43      	ldr	r3, [pc, #268]	; (800a804 <plug_holes+0x130>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d306      	bcc.n	800a70c <plug_holes+0x38>
 800a6fe:	4b3e      	ldr	r3, [pc, #248]	; (800a7f8 <plug_holes+0x124>)
 800a700:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a704:	4940      	ldr	r1, [pc, #256]	; (800a808 <plug_holes+0x134>)
 800a706:	483e      	ldr	r0, [pc, #248]	; (800a800 <plug_holes+0x12c>)
 800a708:	f00a fb3e 	bl	8014d88 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	791b      	ldrb	r3, [r3, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d006      	beq.n	800a722 <plug_holes+0x4e>
 800a714:	4b38      	ldr	r3, [pc, #224]	; (800a7f8 <plug_holes+0x124>)
 800a716:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a71a:	493c      	ldr	r1, [pc, #240]	; (800a80c <plug_holes+0x138>)
 800a71c:	4838      	ldr	r0, [pc, #224]	; (800a800 <plug_holes+0x12c>)
 800a71e:	f00a fb33 	bl	8014d88 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a72a:	d906      	bls.n	800a73a <plug_holes+0x66>
 800a72c:	4b32      	ldr	r3, [pc, #200]	; (800a7f8 <plug_holes+0x124>)
 800a72e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a732:	4937      	ldr	r1, [pc, #220]	; (800a810 <plug_holes+0x13c>)
 800a734:	4832      	ldr	r0, [pc, #200]	; (800a800 <plug_holes+0x12c>)
 800a736:	f00a fb27 	bl	8014d88 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	881b      	ldrh	r3, [r3, #0]
 800a73e:	4618      	mov	r0, r3
 800a740:	f7ff ffa4 	bl	800a68c <ptr_to_mem>
 800a744:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d024      	beq.n	800a798 <plug_holes+0xc4>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	791b      	ldrb	r3, [r3, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d120      	bne.n	800a798 <plug_holes+0xc4>
 800a756:	4b2b      	ldr	r3, [pc, #172]	; (800a804 <plug_holes+0x130>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d01b      	beq.n	800a798 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a760:	4b2c      	ldr	r3, [pc, #176]	; (800a814 <plug_holes+0x140>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	429a      	cmp	r2, r3
 800a768:	d102      	bne.n	800a770 <plug_holes+0x9c>
      lfree = mem;
 800a76a:	4a2a      	ldr	r2, [pc, #168]	; (800a814 <plug_holes+0x140>)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	881a      	ldrh	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	881b      	ldrh	r3, [r3, #0]
 800a77c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a780:	d00a      	beq.n	800a798 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff ff80 	bl	800a68c <ptr_to_mem>
 800a78c:	4604      	mov	r4, r0
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7ff ff8e 	bl	800a6b0 <mem_to_ptr>
 800a794:	4603      	mov	r3, r0
 800a796:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	885b      	ldrh	r3, [r3, #2]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff ff75 	bl	800a68c <ptr_to_mem>
 800a7a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d01f      	beq.n	800a7ec <plug_holes+0x118>
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	791b      	ldrb	r3, [r3, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d11b      	bne.n	800a7ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a7b4:	4b17      	ldr	r3, [pc, #92]	; (800a814 <plug_holes+0x140>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d102      	bne.n	800a7c4 <plug_holes+0xf0>
      lfree = pmem;
 800a7be:	4a15      	ldr	r2, [pc, #84]	; (800a814 <plug_holes+0x140>)
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	881a      	ldrh	r2, [r3, #0]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7d4:	d00a      	beq.n	800a7ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff ff56 	bl	800a68c <ptr_to_mem>
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	68b8      	ldr	r0, [r7, #8]
 800a7e4:	f7ff ff64 	bl	800a6b0 <mem_to_ptr>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a7ec:	bf00      	nop
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd90      	pop	{r4, r7, pc}
 800a7f4:	200009e4 	.word	0x200009e4
 800a7f8:	080172c0 	.word	0x080172c0
 800a7fc:	080172f0 	.word	0x080172f0
 800a800:	08017308 	.word	0x08017308
 800a804:	200009e8 	.word	0x200009e8
 800a808:	08017330 	.word	0x08017330
 800a80c:	0801734c 	.word	0x0801734c
 800a810:	08017368 	.word	0x08017368
 800a814:	200009ec 	.word	0x200009ec

0800a818 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a81e:	4b18      	ldr	r3, [pc, #96]	; (800a880 <mem_init+0x68>)
 800a820:	3303      	adds	r3, #3
 800a822:	f023 0303 	bic.w	r3, r3, #3
 800a826:	461a      	mov	r2, r3
 800a828:	4b16      	ldr	r3, [pc, #88]	; (800a884 <mem_init+0x6c>)
 800a82a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a82c:	4b15      	ldr	r3, [pc, #84]	; (800a884 <mem_init+0x6c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a838:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a846:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a84a:	f7ff ff1f 	bl	800a68c <ptr_to_mem>
 800a84e:	4603      	mov	r3, r0
 800a850:	4a0d      	ldr	r2, [pc, #52]	; (800a888 <mem_init+0x70>)
 800a852:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a854:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <mem_init+0x70>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2201      	movs	r2, #1
 800a85a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a85c:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <mem_init+0x70>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a864:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a866:	4b08      	ldr	r3, [pc, #32]	; (800a888 <mem_init+0x70>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a86e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a870:	4b04      	ldr	r3, [pc, #16]	; (800a884 <mem_init+0x6c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a05      	ldr	r2, [pc, #20]	; (800a88c <mem_init+0x74>)
 800a876:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a878:	bf00      	nop
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20009fa4 	.word	0x20009fa4
 800a884:	200009e4 	.word	0x200009e4
 800a888:	200009e8 	.word	0x200009e8
 800a88c:	200009ec 	.word	0x200009ec

0800a890 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7ff ff09 	bl	800a6b0 <mem_to_ptr>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7ff fef0 	bl	800a68c <ptr_to_mem>
 800a8ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	885b      	ldrh	r3, [r3, #2]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff feea 	bl	800a68c <ptr_to_mem>
 800a8b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	881b      	ldrh	r3, [r3, #0]
 800a8be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8c2:	d818      	bhi.n	800a8f6 <mem_link_valid+0x66>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	885b      	ldrh	r3, [r3, #2]
 800a8c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8cc:	d813      	bhi.n	800a8f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a8d2:	8afa      	ldrh	r2, [r7, #22]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d004      	beq.n	800a8e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	881b      	ldrh	r3, [r3, #0]
 800a8dc:	8afa      	ldrh	r2, [r7, #22]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d109      	bne.n	800a8f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a8e2:	4b08      	ldr	r3, [pc, #32]	; (800a904 <mem_link_valid+0x74>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d006      	beq.n	800a8fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	885b      	ldrh	r3, [r3, #2]
 800a8f0:	8afa      	ldrh	r2, [r7, #22]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d001      	beq.n	800a8fa <mem_link_valid+0x6a>
    return 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e000      	b.n	800a8fc <mem_link_valid+0x6c>
  }
  return 1;
 800a8fa:	2301      	movs	r3, #1
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	200009e8 	.word	0x200009e8

0800a908 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d04c      	beq.n	800a9b0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f003 0303 	and.w	r3, r3, #3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d007      	beq.n	800a930 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a920:	4b25      	ldr	r3, [pc, #148]	; (800a9b8 <mem_free+0xb0>)
 800a922:	f240 2273 	movw	r2, #627	; 0x273
 800a926:	4925      	ldr	r1, [pc, #148]	; (800a9bc <mem_free+0xb4>)
 800a928:	4825      	ldr	r0, [pc, #148]	; (800a9c0 <mem_free+0xb8>)
 800a92a:	f00a fa2d 	bl	8014d88 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a92e:	e040      	b.n	800a9b2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	3b08      	subs	r3, #8
 800a934:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a936:	4b23      	ldr	r3, [pc, #140]	; (800a9c4 <mem_free+0xbc>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d306      	bcc.n	800a94e <mem_free+0x46>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f103 020c 	add.w	r2, r3, #12
 800a946:	4b20      	ldr	r3, [pc, #128]	; (800a9c8 <mem_free+0xc0>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d907      	bls.n	800a95e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a94e:	4b1a      	ldr	r3, [pc, #104]	; (800a9b8 <mem_free+0xb0>)
 800a950:	f240 227f 	movw	r2, #639	; 0x27f
 800a954:	491d      	ldr	r1, [pc, #116]	; (800a9cc <mem_free+0xc4>)
 800a956:	481a      	ldr	r0, [pc, #104]	; (800a9c0 <mem_free+0xb8>)
 800a958:	f00a fa16 	bl	8014d88 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a95c:	e029      	b.n	800a9b2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	791b      	ldrb	r3, [r3, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d107      	bne.n	800a976 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a966:	4b14      	ldr	r3, [pc, #80]	; (800a9b8 <mem_free+0xb0>)
 800a968:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a96c:	4918      	ldr	r1, [pc, #96]	; (800a9d0 <mem_free+0xc8>)
 800a96e:	4814      	ldr	r0, [pc, #80]	; (800a9c0 <mem_free+0xb8>)
 800a970:	f00a fa0a 	bl	8014d88 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a974:	e01d      	b.n	800a9b2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f7ff ff8a 	bl	800a890 <mem_link_valid>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d107      	bne.n	800a992 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a982:	4b0d      	ldr	r3, [pc, #52]	; (800a9b8 <mem_free+0xb0>)
 800a984:	f240 2295 	movw	r2, #661	; 0x295
 800a988:	4912      	ldr	r1, [pc, #72]	; (800a9d4 <mem_free+0xcc>)
 800a98a:	480d      	ldr	r0, [pc, #52]	; (800a9c0 <mem_free+0xb8>)
 800a98c:	f00a f9fc 	bl	8014d88 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a990:	e00f      	b.n	800a9b2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2200      	movs	r2, #0
 800a996:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a998:	4b0f      	ldr	r3, [pc, #60]	; (800a9d8 <mem_free+0xd0>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d202      	bcs.n	800a9a8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a9a2:	4a0d      	ldr	r2, [pc, #52]	; (800a9d8 <mem_free+0xd0>)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f7ff fe93 	bl	800a6d4 <plug_holes>
 800a9ae:	e000      	b.n	800a9b2 <mem_free+0xaa>
    return;
 800a9b0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	080172c0 	.word	0x080172c0
 800a9bc:	08017394 	.word	0x08017394
 800a9c0:	08017308 	.word	0x08017308
 800a9c4:	200009e4 	.word	0x200009e4
 800a9c8:	200009e8 	.word	0x200009e8
 800a9cc:	080173b8 	.word	0x080173b8
 800a9d0:	080173d4 	.word	0x080173d4
 800a9d4:	080173fc 	.word	0x080173fc
 800a9d8:	200009ec 	.word	0x200009ec

0800a9dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b088      	sub	sp, #32
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a9e8:	887b      	ldrh	r3, [r7, #2]
 800a9ea:	3303      	adds	r3, #3
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	f023 0303 	bic.w	r3, r3, #3
 800a9f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a9f4:	8bfb      	ldrh	r3, [r7, #30]
 800a9f6:	2b0b      	cmp	r3, #11
 800a9f8:	d801      	bhi.n	800a9fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a9fa:	230c      	movs	r3, #12
 800a9fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a9fe:	8bfb      	ldrh	r3, [r7, #30]
 800aa00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa04:	d803      	bhi.n	800aa0e <mem_trim+0x32>
 800aa06:	8bfa      	ldrh	r2, [r7, #30]
 800aa08:	887b      	ldrh	r3, [r7, #2]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d201      	bcs.n	800aa12 <mem_trim+0x36>
    return NULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	e0cc      	b.n	800abac <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aa12:	4b68      	ldr	r3, [pc, #416]	; (800abb4 <mem_trim+0x1d8>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d304      	bcc.n	800aa26 <mem_trim+0x4a>
 800aa1c:	4b66      	ldr	r3, [pc, #408]	; (800abb8 <mem_trim+0x1dc>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d306      	bcc.n	800aa34 <mem_trim+0x58>
 800aa26:	4b65      	ldr	r3, [pc, #404]	; (800abbc <mem_trim+0x1e0>)
 800aa28:	f240 22d1 	movw	r2, #721	; 0x2d1
 800aa2c:	4964      	ldr	r1, [pc, #400]	; (800abc0 <mem_trim+0x1e4>)
 800aa2e:	4865      	ldr	r0, [pc, #404]	; (800abc4 <mem_trim+0x1e8>)
 800aa30:	f00a f9aa 	bl	8014d88 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aa34:	4b5f      	ldr	r3, [pc, #380]	; (800abb4 <mem_trim+0x1d8>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d304      	bcc.n	800aa48 <mem_trim+0x6c>
 800aa3e:	4b5e      	ldr	r3, [pc, #376]	; (800abb8 <mem_trim+0x1dc>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d301      	bcc.n	800aa4c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	e0af      	b.n	800abac <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	3b08      	subs	r3, #8
 800aa50:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800aa52:	69b8      	ldr	r0, [r7, #24]
 800aa54:	f7ff fe2c 	bl	800a6b0 <mem_to_ptr>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	881a      	ldrh	r2, [r3, #0]
 800aa60:	8afb      	ldrh	r3, [r7, #22]
 800aa62:	1ad3      	subs	r3, r2, r3
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	3b08      	subs	r3, #8
 800aa68:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aa6a:	8bfa      	ldrh	r2, [r7, #30]
 800aa6c:	8abb      	ldrh	r3, [r7, #20]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d906      	bls.n	800aa80 <mem_trim+0xa4>
 800aa72:	4b52      	ldr	r3, [pc, #328]	; (800abbc <mem_trim+0x1e0>)
 800aa74:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800aa78:	4953      	ldr	r1, [pc, #332]	; (800abc8 <mem_trim+0x1ec>)
 800aa7a:	4852      	ldr	r0, [pc, #328]	; (800abc4 <mem_trim+0x1e8>)
 800aa7c:	f00a f984 	bl	8014d88 <iprintf>
  if (newsize > size) {
 800aa80:	8bfa      	ldrh	r2, [r7, #30]
 800aa82:	8abb      	ldrh	r3, [r7, #20]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d901      	bls.n	800aa8c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	e08f      	b.n	800abac <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800aa8c:	8bfa      	ldrh	r2, [r7, #30]
 800aa8e:	8abb      	ldrh	r3, [r7, #20]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d101      	bne.n	800aa98 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	e089      	b.n	800abac <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7ff fdf5 	bl	800a68c <ptr_to_mem>
 800aaa2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	791b      	ldrb	r3, [r3, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d13f      	bne.n	800ab2c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aab4:	d106      	bne.n	800aac4 <mem_trim+0xe8>
 800aab6:	4b41      	ldr	r3, [pc, #260]	; (800abbc <mem_trim+0x1e0>)
 800aab8:	f240 22f5 	movw	r2, #757	; 0x2f5
 800aabc:	4943      	ldr	r1, [pc, #268]	; (800abcc <mem_trim+0x1f0>)
 800aabe:	4841      	ldr	r0, [pc, #260]	; (800abc4 <mem_trim+0x1e8>)
 800aac0:	f00a f962 	bl	8014d88 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aaca:	8afa      	ldrh	r2, [r7, #22]
 800aacc:	8bfb      	ldrh	r3, [r7, #30]
 800aace:	4413      	add	r3, r2
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	3308      	adds	r3, #8
 800aad4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800aad6:	4b3e      	ldr	r3, [pc, #248]	; (800abd0 <mem_trim+0x1f4>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d106      	bne.n	800aaee <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800aae0:	89fb      	ldrh	r3, [r7, #14]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7ff fdd2 	bl	800a68c <ptr_to_mem>
 800aae8:	4603      	mov	r3, r0
 800aaea:	4a39      	ldr	r2, [pc, #228]	; (800abd0 <mem_trim+0x1f4>)
 800aaec:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800aaee:	89fb      	ldrh	r3, [r7, #14]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7ff fdcb 	bl	800a68c <ptr_to_mem>
 800aaf6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	2200      	movs	r2, #0
 800aafc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	89ba      	ldrh	r2, [r7, #12]
 800ab02:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	8afa      	ldrh	r2, [r7, #22]
 800ab08:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	89fa      	ldrh	r2, [r7, #14]
 800ab0e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	881b      	ldrh	r3, [r3, #0]
 800ab14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab18:	d047      	beq.n	800abaa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	881b      	ldrh	r3, [r3, #0]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7ff fdb4 	bl	800a68c <ptr_to_mem>
 800ab24:	4602      	mov	r2, r0
 800ab26:	89fb      	ldrh	r3, [r7, #14]
 800ab28:	8053      	strh	r3, [r2, #2]
 800ab2a:	e03e      	b.n	800abaa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ab2c:	8bfb      	ldrh	r3, [r7, #30]
 800ab2e:	f103 0214 	add.w	r2, r3, #20
 800ab32:	8abb      	ldrh	r3, [r7, #20]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d838      	bhi.n	800abaa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ab38:	8afa      	ldrh	r2, [r7, #22]
 800ab3a:	8bfb      	ldrh	r3, [r7, #30]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	3308      	adds	r3, #8
 800ab42:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	881b      	ldrh	r3, [r3, #0]
 800ab48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab4c:	d106      	bne.n	800ab5c <mem_trim+0x180>
 800ab4e:	4b1b      	ldr	r3, [pc, #108]	; (800abbc <mem_trim+0x1e0>)
 800ab50:	f240 3216 	movw	r2, #790	; 0x316
 800ab54:	491d      	ldr	r1, [pc, #116]	; (800abcc <mem_trim+0x1f0>)
 800ab56:	481b      	ldr	r0, [pc, #108]	; (800abc4 <mem_trim+0x1e8>)
 800ab58:	f00a f916 	bl	8014d88 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ab5c:	89fb      	ldrh	r3, [r7, #14]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fd94 	bl	800a68c <ptr_to_mem>
 800ab64:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ab66:	4b1a      	ldr	r3, [pc, #104]	; (800abd0 <mem_trim+0x1f4>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d202      	bcs.n	800ab76 <mem_trim+0x19a>
      lfree = mem2;
 800ab70:	4a17      	ldr	r2, [pc, #92]	; (800abd0 <mem_trim+0x1f4>)
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ab7c:	69bb      	ldr	r3, [r7, #24]
 800ab7e:	881a      	ldrh	r2, [r3, #0]
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	8afa      	ldrh	r2, [r7, #22]
 800ab88:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ab8a:	69bb      	ldr	r3, [r7, #24]
 800ab8c:	89fa      	ldrh	r2, [r7, #14]
 800ab8e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	881b      	ldrh	r3, [r3, #0]
 800ab94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab98:	d007      	beq.n	800abaa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff fd74 	bl	800a68c <ptr_to_mem>
 800aba4:	4602      	mov	r2, r0
 800aba6:	89fb      	ldrh	r3, [r7, #14]
 800aba8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800abaa:	687b      	ldr	r3, [r7, #4]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3720      	adds	r7, #32
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	200009e4 	.word	0x200009e4
 800abb8:	200009e8 	.word	0x200009e8
 800abbc:	080172c0 	.word	0x080172c0
 800abc0:	08017430 	.word	0x08017430
 800abc4:	08017308 	.word	0x08017308
 800abc8:	08017448 	.word	0x08017448
 800abcc:	08017468 	.word	0x08017468
 800abd0:	200009ec 	.word	0x200009ec

0800abd4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b088      	sub	sp, #32
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800abde:	88fb      	ldrh	r3, [r7, #6]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <mem_malloc+0x14>
    return NULL;
 800abe4:	2300      	movs	r3, #0
 800abe6:	e0d9      	b.n	800ad9c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800abe8:	88fb      	ldrh	r3, [r7, #6]
 800abea:	3303      	adds	r3, #3
 800abec:	b29b      	uxth	r3, r3
 800abee:	f023 0303 	bic.w	r3, r3, #3
 800abf2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800abf4:	8bbb      	ldrh	r3, [r7, #28]
 800abf6:	2b0b      	cmp	r3, #11
 800abf8:	d801      	bhi.n	800abfe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800abfa:	230c      	movs	r3, #12
 800abfc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800abfe:	8bbb      	ldrh	r3, [r7, #28]
 800ac00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac04:	d803      	bhi.n	800ac0e <mem_malloc+0x3a>
 800ac06:	8bba      	ldrh	r2, [r7, #28]
 800ac08:	88fb      	ldrh	r3, [r7, #6]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d201      	bcs.n	800ac12 <mem_malloc+0x3e>
    return NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	e0c4      	b.n	800ad9c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ac12:	4b64      	ldr	r3, [pc, #400]	; (800ada4 <mem_malloc+0x1d0>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff fd4a 	bl	800a6b0 <mem_to_ptr>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	83fb      	strh	r3, [r7, #30]
 800ac20:	e0b4      	b.n	800ad8c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ac22:	8bfb      	ldrh	r3, [r7, #30]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7ff fd31 	bl	800a68c <ptr_to_mem>
 800ac2a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	791b      	ldrb	r3, [r3, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f040 80a4 	bne.w	800ad7e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	881b      	ldrh	r3, [r3, #0]
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	8bfb      	ldrh	r3, [r7, #30]
 800ac3e:	1ad3      	subs	r3, r2, r3
 800ac40:	f1a3 0208 	sub.w	r2, r3, #8
 800ac44:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ac46:	429a      	cmp	r2, r3
 800ac48:	f0c0 8099 	bcc.w	800ad7e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	461a      	mov	r2, r3
 800ac52:	8bfb      	ldrh	r3, [r7, #30]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	f1a3 0208 	sub.w	r2, r3, #8
 800ac5a:	8bbb      	ldrh	r3, [r7, #28]
 800ac5c:	3314      	adds	r3, #20
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d333      	bcc.n	800acca <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ac62:	8bfa      	ldrh	r2, [r7, #30]
 800ac64:	8bbb      	ldrh	r3, [r7, #28]
 800ac66:	4413      	add	r3, r2
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ac6e:	8a7b      	ldrh	r3, [r7, #18]
 800ac70:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac74:	d106      	bne.n	800ac84 <mem_malloc+0xb0>
 800ac76:	4b4c      	ldr	r3, [pc, #304]	; (800ada8 <mem_malloc+0x1d4>)
 800ac78:	f240 3287 	movw	r2, #903	; 0x387
 800ac7c:	494b      	ldr	r1, [pc, #300]	; (800adac <mem_malloc+0x1d8>)
 800ac7e:	484c      	ldr	r0, [pc, #304]	; (800adb0 <mem_malloc+0x1dc>)
 800ac80:	f00a f882 	bl	8014d88 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ac84:	8a7b      	ldrh	r3, [r7, #18]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7ff fd00 	bl	800a68c <ptr_to_mem>
 800ac8c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	881a      	ldrh	r2, [r3, #0]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	8bfa      	ldrh	r2, [r7, #30]
 800aca0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	8a7a      	ldrh	r2, [r7, #18]
 800aca6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	2201      	movs	r2, #1
 800acac:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	881b      	ldrh	r3, [r3, #0]
 800acb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800acb6:	d00b      	beq.n	800acd0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	881b      	ldrh	r3, [r3, #0]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff fce5 	bl	800a68c <ptr_to_mem>
 800acc2:	4602      	mov	r2, r0
 800acc4:	8a7b      	ldrh	r3, [r7, #18]
 800acc6:	8053      	strh	r3, [r2, #2]
 800acc8:	e002      	b.n	800acd0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2201      	movs	r2, #1
 800acce:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800acd0:	4b34      	ldr	r3, [pc, #208]	; (800ada4 <mem_malloc+0x1d0>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	697a      	ldr	r2, [r7, #20]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d127      	bne.n	800ad2a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800acda:	4b32      	ldr	r3, [pc, #200]	; (800ada4 <mem_malloc+0x1d0>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ace0:	e005      	b.n	800acee <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7ff fcd0 	bl	800a68c <ptr_to_mem>
 800acec:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	791b      	ldrb	r3, [r3, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d004      	beq.n	800ad00 <mem_malloc+0x12c>
 800acf6:	4b2f      	ldr	r3, [pc, #188]	; (800adb4 <mem_malloc+0x1e0>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	69ba      	ldr	r2, [r7, #24]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d1f0      	bne.n	800ace2 <mem_malloc+0x10e>
          }
          lfree = cur;
 800ad00:	4a28      	ldr	r2, [pc, #160]	; (800ada4 <mem_malloc+0x1d0>)
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ad06:	4b27      	ldr	r3, [pc, #156]	; (800ada4 <mem_malloc+0x1d0>)
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	4b2a      	ldr	r3, [pc, #168]	; (800adb4 <mem_malloc+0x1e0>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d00b      	beq.n	800ad2a <mem_malloc+0x156>
 800ad12:	4b24      	ldr	r3, [pc, #144]	; (800ada4 <mem_malloc+0x1d0>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	791b      	ldrb	r3, [r3, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d006      	beq.n	800ad2a <mem_malloc+0x156>
 800ad1c:	4b22      	ldr	r3, [pc, #136]	; (800ada8 <mem_malloc+0x1d4>)
 800ad1e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ad22:	4925      	ldr	r1, [pc, #148]	; (800adb8 <mem_malloc+0x1e4>)
 800ad24:	4822      	ldr	r0, [pc, #136]	; (800adb0 <mem_malloc+0x1dc>)
 800ad26:	f00a f82f 	bl	8014d88 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ad2a:	8bba      	ldrh	r2, [r7, #28]
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	4413      	add	r3, r2
 800ad30:	3308      	adds	r3, #8
 800ad32:	4a20      	ldr	r2, [pc, #128]	; (800adb4 <mem_malloc+0x1e0>)
 800ad34:	6812      	ldr	r2, [r2, #0]
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d906      	bls.n	800ad48 <mem_malloc+0x174>
 800ad3a:	4b1b      	ldr	r3, [pc, #108]	; (800ada8 <mem_malloc+0x1d4>)
 800ad3c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ad40:	491e      	ldr	r1, [pc, #120]	; (800adbc <mem_malloc+0x1e8>)
 800ad42:	481b      	ldr	r0, [pc, #108]	; (800adb0 <mem_malloc+0x1dc>)
 800ad44:	f00a f820 	bl	8014d88 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	f003 0303 	and.w	r3, r3, #3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d006      	beq.n	800ad60 <mem_malloc+0x18c>
 800ad52:	4b15      	ldr	r3, [pc, #84]	; (800ada8 <mem_malloc+0x1d4>)
 800ad54:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ad58:	4919      	ldr	r1, [pc, #100]	; (800adc0 <mem_malloc+0x1ec>)
 800ad5a:	4815      	ldr	r0, [pc, #84]	; (800adb0 <mem_malloc+0x1dc>)
 800ad5c:	f00a f814 	bl	8014d88 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f003 0303 	and.w	r3, r3, #3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d006      	beq.n	800ad78 <mem_malloc+0x1a4>
 800ad6a:	4b0f      	ldr	r3, [pc, #60]	; (800ada8 <mem_malloc+0x1d4>)
 800ad6c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ad70:	4914      	ldr	r1, [pc, #80]	; (800adc4 <mem_malloc+0x1f0>)
 800ad72:	480f      	ldr	r0, [pc, #60]	; (800adb0 <mem_malloc+0x1dc>)
 800ad74:	f00a f808 	bl	8014d88 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	e00e      	b.n	800ad9c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800ad7e:	8bfb      	ldrh	r3, [r7, #30]
 800ad80:	4618      	mov	r0, r3
 800ad82:	f7ff fc83 	bl	800a68c <ptr_to_mem>
 800ad86:	4603      	mov	r3, r0
 800ad88:	881b      	ldrh	r3, [r3, #0]
 800ad8a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ad8c:	8bfa      	ldrh	r2, [r7, #30]
 800ad8e:	8bbb      	ldrh	r3, [r7, #28]
 800ad90:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ad94:	429a      	cmp	r2, r3
 800ad96:	f4ff af44 	bcc.w	800ac22 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3720      	adds	r7, #32
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}
 800ada4:	200009ec 	.word	0x200009ec
 800ada8:	080172c0 	.word	0x080172c0
 800adac:	08017468 	.word	0x08017468
 800adb0:	08017308 	.word	0x08017308
 800adb4:	200009e8 	.word	0x200009e8
 800adb8:	0801747c 	.word	0x0801747c
 800adbc:	08017498 	.word	0x08017498
 800adc0:	080174c8 	.word	0x080174c8
 800adc4:	080174f8 	.word	0x080174f8

0800adc8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	3303      	adds	r3, #3
 800adde:	f023 0303 	bic.w	r3, r3, #3
 800ade2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]
 800ade8:	e011      	b.n	800ae0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	68ba      	ldr	r2, [r7, #8]
 800adfa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	881b      	ldrh	r3, [r3, #0]
 800ae00:	461a      	mov	r2, r3
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	4413      	add	r3, r2
 800ae06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	60fb      	str	r3, [r7, #12]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	885b      	ldrh	r3, [r3, #2]
 800ae12:	461a      	mov	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4293      	cmp	r3, r2
 800ae18:	dbe7      	blt.n	800adea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ae1a:	bf00      	nop
 800ae1c:	bf00      	nop
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ae2e:	2300      	movs	r3, #0
 800ae30:	80fb      	strh	r3, [r7, #6]
 800ae32:	e009      	b.n	800ae48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ae34:	88fb      	ldrh	r3, [r7, #6]
 800ae36:	4a08      	ldr	r2, [pc, #32]	; (800ae58 <memp_init+0x30>)
 800ae38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff ffc3 	bl	800adc8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ae42:	88fb      	ldrh	r3, [r7, #6]
 800ae44:	3301      	adds	r3, #1
 800ae46:	80fb      	strh	r3, [r7, #6]
 800ae48:	88fb      	ldrh	r3, [r7, #6]
 800ae4a:	2b08      	cmp	r3, #8
 800ae4c:	d9f2      	bls.n	800ae34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ae4e:	bf00      	nop
 800ae50:	bf00      	nop
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	0801efd4 	.word	0x0801efd4

0800ae5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d012      	beq.n	800ae98 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	6812      	ldr	r2, [r2, #0]
 800ae7a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d006      	beq.n	800ae94 <do_memp_malloc_pool+0x38>
 800ae86:	4b07      	ldr	r3, [pc, #28]	; (800aea4 <do_memp_malloc_pool+0x48>)
 800ae88:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ae8c:	4906      	ldr	r1, [pc, #24]	; (800aea8 <do_memp_malloc_pool+0x4c>)
 800ae8e:	4807      	ldr	r0, [pc, #28]	; (800aeac <do_memp_malloc_pool+0x50>)
 800ae90:	f009 ff7a 	bl	8014d88 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	e000      	b.n	800ae9a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3710      	adds	r7, #16
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	0801751c 	.word	0x0801751c
 800aea8:	0801754c 	.word	0x0801754c
 800aeac:	08017570 	.word	0x08017570

0800aeb0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aeba:	79fb      	ldrb	r3, [r7, #7]
 800aebc:	2b08      	cmp	r3, #8
 800aebe:	d908      	bls.n	800aed2 <memp_malloc+0x22>
 800aec0:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <memp_malloc+0x3c>)
 800aec2:	f240 1257 	movw	r2, #343	; 0x157
 800aec6:	490a      	ldr	r1, [pc, #40]	; (800aef0 <memp_malloc+0x40>)
 800aec8:	480a      	ldr	r0, [pc, #40]	; (800aef4 <memp_malloc+0x44>)
 800aeca:	f009 ff5d 	bl	8014d88 <iprintf>
 800aece:	2300      	movs	r3, #0
 800aed0:	e008      	b.n	800aee4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	4a08      	ldr	r2, [pc, #32]	; (800aef8 <memp_malloc+0x48>)
 800aed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff ffbe 	bl	800ae5c <do_memp_malloc_pool>
 800aee0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800aee2:	68fb      	ldr	r3, [r7, #12]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	0801751c 	.word	0x0801751c
 800aef0:	080175ac 	.word	0x080175ac
 800aef4:	08017570 	.word	0x08017570
 800aef8:	0801efd4 	.word	0x0801efd4

0800aefc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	f003 0303 	and.w	r3, r3, #3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d006      	beq.n	800af1e <do_memp_free_pool+0x22>
 800af10:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <do_memp_free_pool+0x40>)
 800af12:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800af16:	490a      	ldr	r1, [pc, #40]	; (800af40 <do_memp_free_pool+0x44>)
 800af18:	480a      	ldr	r0, [pc, #40]	; (800af44 <do_memp_free_pool+0x48>)
 800af1a:	f009 ff35 	bl	8014d88 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800af34:	bf00      	nop
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}
 800af3c:	0801751c 	.word	0x0801751c
 800af40:	080175cc 	.word	0x080175cc
 800af44:	08017570 	.word	0x08017570

0800af48 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	4603      	mov	r3, r0
 800af50:	6039      	str	r1, [r7, #0]
 800af52:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800af54:	79fb      	ldrb	r3, [r7, #7]
 800af56:	2b08      	cmp	r3, #8
 800af58:	d907      	bls.n	800af6a <memp_free+0x22>
 800af5a:	4b0c      	ldr	r3, [pc, #48]	; (800af8c <memp_free+0x44>)
 800af5c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800af60:	490b      	ldr	r1, [pc, #44]	; (800af90 <memp_free+0x48>)
 800af62:	480c      	ldr	r0, [pc, #48]	; (800af94 <memp_free+0x4c>)
 800af64:	f009 ff10 	bl	8014d88 <iprintf>
 800af68:	e00c      	b.n	800af84 <memp_free+0x3c>

  if (mem == NULL) {
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d008      	beq.n	800af82 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800af70:	79fb      	ldrb	r3, [r7, #7]
 800af72:	4a09      	ldr	r2, [pc, #36]	; (800af98 <memp_free+0x50>)
 800af74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff ffbe 	bl	800aefc <do_memp_free_pool>
 800af80:	e000      	b.n	800af84 <memp_free+0x3c>
    return;
 800af82:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800af84:	3708      	adds	r7, #8
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	0801751c 	.word	0x0801751c
 800af90:	080175ec 	.word	0x080175ec
 800af94:	08017570 	.word	0x08017570
 800af98:	0801efd4 	.word	0x0801efd4

0800af9c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800af9c:	b480      	push	{r7}
 800af9e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800afa0:	bf00      	nop
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
	...

0800afac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	60b9      	str	r1, [r7, #8]
 800afb6:	607a      	str	r2, [r7, #4]
 800afb8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d108      	bne.n	800afd2 <netif_add+0x26>
 800afc0:	4b57      	ldr	r3, [pc, #348]	; (800b120 <netif_add+0x174>)
 800afc2:	f240 1227 	movw	r2, #295	; 0x127
 800afc6:	4957      	ldr	r1, [pc, #348]	; (800b124 <netif_add+0x178>)
 800afc8:	4857      	ldr	r0, [pc, #348]	; (800b128 <netif_add+0x17c>)
 800afca:	f009 fedd 	bl	8014d88 <iprintf>
 800afce:	2300      	movs	r3, #0
 800afd0:	e0a2      	b.n	800b118 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d108      	bne.n	800afea <netif_add+0x3e>
 800afd8:	4b51      	ldr	r3, [pc, #324]	; (800b120 <netif_add+0x174>)
 800afda:	f44f 7294 	mov.w	r2, #296	; 0x128
 800afde:	4953      	ldr	r1, [pc, #332]	; (800b12c <netif_add+0x180>)
 800afe0:	4851      	ldr	r0, [pc, #324]	; (800b128 <netif_add+0x17c>)
 800afe2:	f009 fed1 	bl	8014d88 <iprintf>
 800afe6:	2300      	movs	r3, #0
 800afe8:	e096      	b.n	800b118 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d101      	bne.n	800aff4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aff0:	4b4f      	ldr	r3, [pc, #316]	; (800b130 <netif_add+0x184>)
 800aff2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800affa:	4b4d      	ldr	r3, [pc, #308]	; (800b130 <netif_add+0x184>)
 800affc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b004:	4b4a      	ldr	r3, [pc, #296]	; (800b130 <netif_add+0x184>)
 800b006:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	2200      	movs	r2, #0
 800b00c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2200      	movs	r2, #0
 800b012:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	4a45      	ldr	r2, [pc, #276]	; (800b134 <netif_add+0x188>)
 800b01e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2200      	movs	r2, #0
 800b024:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6a3a      	ldr	r2, [r7, #32]
 800b038:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b03a:	4b3f      	ldr	r3, [pc, #252]	; (800b138 <netif_add+0x18c>)
 800b03c:	781a      	ldrb	r2, [r3, #0]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b048:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	68b9      	ldr	r1, [r7, #8]
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f000 f913 	bl	800b27c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	4798      	blx	r3
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <netif_add+0xba>
    return NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	e058      	b.n	800b118 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b06c:	2bff      	cmp	r3, #255	; 0xff
 800b06e:	d103      	bne.n	800b078 <netif_add+0xcc>
        netif->num = 0;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b078:	2300      	movs	r3, #0
 800b07a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b07c:	4b2f      	ldr	r3, [pc, #188]	; (800b13c <netif_add+0x190>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	617b      	str	r3, [r7, #20]
 800b082:	e02b      	b.n	800b0dc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	429a      	cmp	r2, r3
 800b08a:	d106      	bne.n	800b09a <netif_add+0xee>
 800b08c:	4b24      	ldr	r3, [pc, #144]	; (800b120 <netif_add+0x174>)
 800b08e:	f240 128b 	movw	r2, #395	; 0x18b
 800b092:	492b      	ldr	r1, [pc, #172]	; (800b140 <netif_add+0x194>)
 800b094:	4824      	ldr	r0, [pc, #144]	; (800b128 <netif_add+0x17c>)
 800b096:	f009 fe77 	bl	8014d88 <iprintf>
        num_netifs++;
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	3301      	adds	r3, #1
 800b09e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	2bff      	cmp	r3, #255	; 0xff
 800b0a4:	dd06      	ble.n	800b0b4 <netif_add+0x108>
 800b0a6:	4b1e      	ldr	r3, [pc, #120]	; (800b120 <netif_add+0x174>)
 800b0a8:	f240 128d 	movw	r2, #397	; 0x18d
 800b0ac:	4925      	ldr	r1, [pc, #148]	; (800b144 <netif_add+0x198>)
 800b0ae:	481e      	ldr	r0, [pc, #120]	; (800b128 <netif_add+0x17c>)
 800b0b0:	f009 fe6a 	bl	8014d88 <iprintf>
        if (netif2->num == netif->num) {
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d108      	bne.n	800b0d6 <netif_add+0x12a>
          netif->num++;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b0d4:	e005      	b.n	800b0e2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	617b      	str	r3, [r7, #20]
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1d0      	bne.n	800b084 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1be      	bne.n	800b066 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0ee:	2bfe      	cmp	r3, #254	; 0xfe
 800b0f0:	d103      	bne.n	800b0fa <netif_add+0x14e>
    netif_num = 0;
 800b0f2:	4b11      	ldr	r3, [pc, #68]	; (800b138 <netif_add+0x18c>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	701a      	strb	r2, [r3, #0]
 800b0f8:	e006      	b.n	800b108 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b100:	3301      	adds	r3, #1
 800b102:	b2da      	uxtb	r2, r3
 800b104:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <netif_add+0x18c>)
 800b106:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b108:	4b0c      	ldr	r3, [pc, #48]	; (800b13c <netif_add+0x190>)
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b110:	4a0a      	ldr	r2, [pc, #40]	; (800b13c <netif_add+0x190>)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b116:	68fb      	ldr	r3, [r7, #12]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3718      	adds	r7, #24
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}
 800b120:	08017608 	.word	0x08017608
 800b124:	0801769c 	.word	0x0801769c
 800b128:	08017658 	.word	0x08017658
 800b12c:	080176b8 	.word	0x080176b8
 800b130:	0801f038 	.word	0x0801f038
 800b134:	0800b48f 	.word	0x0800b48f
 800b138:	20000a14 	.word	0x20000a14
 800b13c:	2000d7cc 	.word	0x2000d7cc
 800b140:	080176dc 	.word	0x080176dc
 800b144:	080176f0 	.word	0x080176f0

0800b148 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b152:	6839      	ldr	r1, [r7, #0]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f002 fd85 	bl	800dc64 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b15a:	6839      	ldr	r1, [r7, #0]
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f007 fabd 	bl	80126dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b162:	bf00      	nop
 800b164:	3708      	adds	r7, #8
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
	...

0800b16c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d106      	bne.n	800b18c <netif_do_set_ipaddr+0x20>
 800b17e:	4b1d      	ldr	r3, [pc, #116]	; (800b1f4 <netif_do_set_ipaddr+0x88>)
 800b180:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b184:	491c      	ldr	r1, [pc, #112]	; (800b1f8 <netif_do_set_ipaddr+0x8c>)
 800b186:	481d      	ldr	r0, [pc, #116]	; (800b1fc <netif_do_set_ipaddr+0x90>)
 800b188:	f009 fdfe 	bl	8014d88 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d106      	bne.n	800b1a0 <netif_do_set_ipaddr+0x34>
 800b192:	4b18      	ldr	r3, [pc, #96]	; (800b1f4 <netif_do_set_ipaddr+0x88>)
 800b194:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b198:	4917      	ldr	r1, [pc, #92]	; (800b1f8 <netif_do_set_ipaddr+0x8c>)
 800b19a:	4818      	ldr	r0, [pc, #96]	; (800b1fc <netif_do_set_ipaddr+0x90>)
 800b19c:	f009 fdf4 	bl	8014d88 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3304      	adds	r3, #4
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d01c      	beq.n	800b1e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b1be:	f107 0314 	add.w	r3, r7, #20
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f7ff ffbf 	bl	800b148 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <netif_do_set_ipaddr+0x6a>
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	e000      	b.n	800b1d8 <netif_do_set_ipaddr+0x6c>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b1dc:	2101      	movs	r1, #1
 800b1de:	68f8      	ldr	r0, [r7, #12]
 800b1e0:	f000 f8d2 	bl	800b388 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	e000      	b.n	800b1ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	08017608 	.word	0x08017608
 800b1f8:	08017720 	.word	0x08017720
 800b1fc:	08017658 	.word	0x08017658

0800b200 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b200:	b480      	push	{r7}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	681a      	ldr	r2, [r3, #0]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	3308      	adds	r3, #8
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	429a      	cmp	r2, r3
 800b218:	d00a      	beq.n	800b230 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <netif_do_set_netmask+0x26>
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	e000      	b.n	800b228 <netif_do_set_netmask+0x28>
 800b226:	2300      	movs	r3, #0
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b22c:	2301      	movs	r3, #1
 800b22e:	e000      	b.n	800b232 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3714      	adds	r7, #20
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr

0800b23e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b23e:	b480      	push	{r7}
 800b240:	b085      	sub	sp, #20
 800b242:	af00      	add	r7, sp, #0
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	330c      	adds	r3, #12
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	429a      	cmp	r2, r3
 800b256:	d00a      	beq.n	800b26e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <netif_do_set_gw+0x26>
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	e000      	b.n	800b266 <netif_do_set_gw+0x28>
 800b264:	2300      	movs	r3, #0
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b26a:	2301      	movs	r3, #1
 800b26c:	e000      	b.n	800b270 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b28a:	2300      	movs	r3, #0
 800b28c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b28e:	2300      	movs	r3, #0
 800b290:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b298:	4b1c      	ldr	r3, [pc, #112]	; (800b30c <netif_set_addr+0x90>)
 800b29a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b2a2:	4b1a      	ldr	r3, [pc, #104]	; (800b30c <netif_set_addr+0x90>)
 800b2a4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b2ac:	4b17      	ldr	r3, [pc, #92]	; (800b30c <netif_set_addr+0x90>)
 800b2ae:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d003      	beq.n	800b2be <netif_set_addr+0x42>
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d101      	bne.n	800b2c2 <netif_set_addr+0x46>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e000      	b.n	800b2c4 <netif_set_addr+0x48>
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d006      	beq.n	800b2da <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b2cc:	f107 0310 	add.w	r3, r7, #16
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	68b9      	ldr	r1, [r7, #8]
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	f7ff ff49 	bl	800b16c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b2da:	69fa      	ldr	r2, [r7, #28]
 800b2dc:	6879      	ldr	r1, [r7, #4]
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f7ff ff8e 	bl	800b200 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b2e4:	69ba      	ldr	r2, [r7, #24]
 800b2e6:	6839      	ldr	r1, [r7, #0]
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7ff ffa8 	bl	800b23e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d106      	bne.n	800b302 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b2f4:	f107 0310 	add.w	r3, r7, #16
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	68b9      	ldr	r1, [r7, #8]
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f7ff ff35 	bl	800b16c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b302:	bf00      	nop
 800b304:	3720      	adds	r7, #32
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	0801f038 	.word	0x0801f038

0800b310 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b318:	4a04      	ldr	r2, [pc, #16]	; (800b32c <netif_set_default+0x1c>)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b31e:	bf00      	nop
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr
 800b32a:	bf00      	nop
 800b32c:	2000d7d0 	.word	0x2000d7d0

0800b330 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b082      	sub	sp, #8
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d107      	bne.n	800b34e <netif_set_up+0x1e>
 800b33e:	4b0f      	ldr	r3, [pc, #60]	; (800b37c <netif_set_up+0x4c>)
 800b340:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b344:	490e      	ldr	r1, [pc, #56]	; (800b380 <netif_set_up+0x50>)
 800b346:	480f      	ldr	r0, [pc, #60]	; (800b384 <netif_set_up+0x54>)
 800b348:	f009 fd1e 	bl	8014d88 <iprintf>
 800b34c:	e013      	b.n	800b376 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b354:	f003 0301 	and.w	r3, r3, #1
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10c      	bne.n	800b376 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b362:	f043 0301 	orr.w	r3, r3, #1
 800b366:	b2da      	uxtb	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b36e:	2103      	movs	r1, #3
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 f809 	bl	800b388 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	08017608 	.word	0x08017608
 800b380:	08017790 	.word	0x08017790
 800b384:	08017658 	.word	0x08017658

0800b388 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b082      	sub	sp, #8
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	460b      	mov	r3, r1
 800b392:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d106      	bne.n	800b3a8 <netif_issue_reports+0x20>
 800b39a:	4b18      	ldr	r3, [pc, #96]	; (800b3fc <netif_issue_reports+0x74>)
 800b39c:	f240 326d 	movw	r2, #877	; 0x36d
 800b3a0:	4917      	ldr	r1, [pc, #92]	; (800b400 <netif_issue_reports+0x78>)
 800b3a2:	4818      	ldr	r0, [pc, #96]	; (800b404 <netif_issue_reports+0x7c>)
 800b3a4:	f009 fcf0 	bl	8014d88 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3ae:	f003 0304 	and.w	r3, r3, #4
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d01e      	beq.n	800b3f4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3bc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d017      	beq.n	800b3f4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b3c4:	78fb      	ldrb	r3, [r7, #3]
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d013      	beq.n	800b3f6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00e      	beq.n	800b3f6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3de:	f003 0308 	and.w	r3, r3, #8
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d007      	beq.n	800b3f6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	3304      	adds	r3, #4
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f008 f8df 	bl	80135b0 <etharp_request>
 800b3f2:	e000      	b.n	800b3f6 <netif_issue_reports+0x6e>
    return;
 800b3f4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	08017608 	.word	0x08017608
 800b400:	080177ac 	.word	0x080177ac
 800b404:	08017658 	.word	0x08017658

0800b408 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d107      	bne.n	800b426 <netif_set_down+0x1e>
 800b416:	4b12      	ldr	r3, [pc, #72]	; (800b460 <netif_set_down+0x58>)
 800b418:	f240 329b 	movw	r2, #923	; 0x39b
 800b41c:	4911      	ldr	r1, [pc, #68]	; (800b464 <netif_set_down+0x5c>)
 800b41e:	4812      	ldr	r0, [pc, #72]	; (800b468 <netif_set_down+0x60>)
 800b420:	f009 fcb2 	bl	8014d88 <iprintf>
 800b424:	e019      	b.n	800b45a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b42c:	f003 0301 	and.w	r3, r3, #1
 800b430:	2b00      	cmp	r3, #0
 800b432:	d012      	beq.n	800b45a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b43a:	f023 0301 	bic.w	r3, r3, #1
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b44c:	f003 0308 	and.w	r3, r3, #8
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f007 fc69 	bl	8012d2c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	08017608 	.word	0x08017608
 800b464:	080177d0 	.word	0x080177d0
 800b468:	08017658 	.word	0x08017658

0800b46c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	683a      	ldr	r2, [r7, #0]
 800b480:	61da      	str	r2, [r3, #28]
  }
}
 800b482:	bf00      	nop
 800b484:	370c      	adds	r7, #12
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b48e:	b480      	push	{r7}
 800b490:	b085      	sub	sp, #20
 800b492:	af00      	add	r7, sp, #0
 800b494:	60f8      	str	r0, [r7, #12]
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b49a:	f06f 030b 	mvn.w	r3, #11
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
	...

0800b4ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b4b6:	79fb      	ldrb	r3, [r7, #7]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d013      	beq.n	800b4e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b4bc:	4b0d      	ldr	r3, [pc, #52]	; (800b4f4 <netif_get_by_index+0x48>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	60fb      	str	r3, [r7, #12]
 800b4c2:	e00c      	b.n	800b4de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	79fa      	ldrb	r2, [r7, #7]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d101      	bne.n	800b4d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	e006      	b.n	800b4e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1ef      	bne.n	800b4c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3714      	adds	r7, #20
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	2000d7cc 	.word	0x2000d7cc

0800b4f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b4fe:	4b0c      	ldr	r3, [pc, #48]	; (800b530 <pbuf_free_ooseq+0x38>)
 800b500:	2200      	movs	r2, #0
 800b502:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b504:	4b0b      	ldr	r3, [pc, #44]	; (800b534 <pbuf_free_ooseq+0x3c>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	607b      	str	r3, [r7, #4]
 800b50a:	e00a      	b.n	800b522 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b510:	2b00      	cmp	r3, #0
 800b512:	d003      	beq.n	800b51c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f002 fbe3 	bl	800dce0 <tcp_free_ooseq>
      return;
 800b51a:	e005      	b.n	800b528 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	607b      	str	r3, [r7, #4]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1f1      	bne.n	800b50c <pbuf_free_ooseq+0x14>
    }
  }
}
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	2000d7d4 	.word	0x2000d7d4
 800b534:	2000d7dc 	.word	0x2000d7dc

0800b538 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b538:	b480      	push	{r7}
 800b53a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b53c:	4b03      	ldr	r3, [pc, #12]	; (800b54c <pbuf_pool_is_empty+0x14>)
 800b53e:	2201      	movs	r2, #1
 800b540:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b542:	bf00      	nop
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	2000d7d4 	.word	0x2000d7d4

0800b550 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	4611      	mov	r1, r2
 800b55c:	461a      	mov	r2, r3
 800b55e:	460b      	mov	r3, r1
 800b560:	80fb      	strh	r3, [r7, #6]
 800b562:	4613      	mov	r3, r2
 800b564:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	68ba      	ldr	r2, [r7, #8]
 800b570:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	88fa      	ldrh	r2, [r7, #6]
 800b576:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	88ba      	ldrh	r2, [r7, #4]
 800b57c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b57e:	8b3b      	ldrh	r3, [r7, #24]
 800b580:	b2da      	uxtb	r2, r3
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	7f3a      	ldrb	r2, [r7, #28]
 800b58a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2201      	movs	r2, #1
 800b590:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2200      	movs	r2, #0
 800b596:	73da      	strb	r2, [r3, #15]
}
 800b598:	bf00      	nop
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b08c      	sub	sp, #48	; 0x30
 800b5a8:	af02      	add	r7, sp, #8
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	71fb      	strb	r3, [r7, #7]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	80bb      	strh	r3, [r7, #4]
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b5ba:	887b      	ldrh	r3, [r7, #2]
 800b5bc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b5c0:	d07f      	beq.n	800b6c2 <pbuf_alloc+0x11e>
 800b5c2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b5c6:	f300 80c8 	bgt.w	800b75a <pbuf_alloc+0x1b6>
 800b5ca:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b5ce:	d010      	beq.n	800b5f2 <pbuf_alloc+0x4e>
 800b5d0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b5d4:	f300 80c1 	bgt.w	800b75a <pbuf_alloc+0x1b6>
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d002      	beq.n	800b5e2 <pbuf_alloc+0x3e>
 800b5dc:	2b41      	cmp	r3, #65	; 0x41
 800b5de:	f040 80bc 	bne.w	800b75a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b5e2:	887a      	ldrh	r2, [r7, #2]
 800b5e4:	88bb      	ldrh	r3, [r7, #4]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	2000      	movs	r0, #0
 800b5ea:	f000 f8d1 	bl	800b790 <pbuf_alloc_reference>
 800b5ee:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b5f0:	e0bd      	b.n	800b76e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b5fa:	88bb      	ldrh	r3, [r7, #4]
 800b5fc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b5fe:	2008      	movs	r0, #8
 800b600:	f7ff fc56 	bl	800aeb0 <memp_malloc>
 800b604:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d109      	bne.n	800b620 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b60c:	f7ff ff94 	bl	800b538 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b612:	2b00      	cmp	r3, #0
 800b614:	d002      	beq.n	800b61c <pbuf_alloc+0x78>
            pbuf_free(p);
 800b616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b618:	f000 faa8 	bl	800bb6c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	e0a7      	b.n	800b770 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b620:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b622:	3303      	adds	r3, #3
 800b624:	b29b      	uxth	r3, r3
 800b626:	f023 0303 	bic.w	r3, r3, #3
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b630:	b29b      	uxth	r3, r3
 800b632:	8b7a      	ldrh	r2, [r7, #26]
 800b634:	4293      	cmp	r3, r2
 800b636:	bf28      	it	cs
 800b638:	4613      	movcs	r3, r2
 800b63a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b63c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b63e:	3310      	adds	r3, #16
 800b640:	693a      	ldr	r2, [r7, #16]
 800b642:	4413      	add	r3, r2
 800b644:	3303      	adds	r3, #3
 800b646:	f023 0303 	bic.w	r3, r3, #3
 800b64a:	4618      	mov	r0, r3
 800b64c:	89f9      	ldrh	r1, [r7, #14]
 800b64e:	8b7a      	ldrh	r2, [r7, #26]
 800b650:	2300      	movs	r3, #0
 800b652:	9301      	str	r3, [sp, #4]
 800b654:	887b      	ldrh	r3, [r7, #2]
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	460b      	mov	r3, r1
 800b65a:	4601      	mov	r1, r0
 800b65c:	6938      	ldr	r0, [r7, #16]
 800b65e:	f7ff ff77 	bl	800b550 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	f003 0303 	and.w	r3, r3, #3
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d006      	beq.n	800b67c <pbuf_alloc+0xd8>
 800b66e:	4b42      	ldr	r3, [pc, #264]	; (800b778 <pbuf_alloc+0x1d4>)
 800b670:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b674:	4941      	ldr	r1, [pc, #260]	; (800b77c <pbuf_alloc+0x1d8>)
 800b676:	4842      	ldr	r0, [pc, #264]	; (800b780 <pbuf_alloc+0x1dc>)
 800b678:	f009 fb86 	bl	8014d88 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b67c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b67e:	3303      	adds	r3, #3
 800b680:	f023 0303 	bic.w	r3, r3, #3
 800b684:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b688:	d106      	bne.n	800b698 <pbuf_alloc+0xf4>
 800b68a:	4b3b      	ldr	r3, [pc, #236]	; (800b778 <pbuf_alloc+0x1d4>)
 800b68c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b690:	493c      	ldr	r1, [pc, #240]	; (800b784 <pbuf_alloc+0x1e0>)
 800b692:	483b      	ldr	r0, [pc, #236]	; (800b780 <pbuf_alloc+0x1dc>)
 800b694:	f009 fb78 	bl	8014d88 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d102      	bne.n	800b6a4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b6a2:	e002      	b.n	800b6aa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b6ae:	8b7a      	ldrh	r2, [r7, #26]
 800b6b0:	89fb      	ldrh	r3, [r7, #14]
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b6ba:	8b7b      	ldrh	r3, [r7, #26]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d19e      	bne.n	800b5fe <pbuf_alloc+0x5a>
      break;
 800b6c0:	e055      	b.n	800b76e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b6c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6c4:	3303      	adds	r3, #3
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	f023 0303 	bic.w	r3, r3, #3
 800b6cc:	b29a      	uxth	r2, r3
 800b6ce:	88bb      	ldrh	r3, [r7, #4]
 800b6d0:	3303      	adds	r3, #3
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	f023 0303 	bic.w	r3, r3, #3
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	4413      	add	r3, r2
 800b6dc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b6de:	8b3b      	ldrh	r3, [r7, #24]
 800b6e0:	3310      	adds	r3, #16
 800b6e2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6e4:	8b3a      	ldrh	r2, [r7, #24]
 800b6e6:	88bb      	ldrh	r3, [r7, #4]
 800b6e8:	3303      	adds	r3, #3
 800b6ea:	f023 0303 	bic.w	r3, r3, #3
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d306      	bcc.n	800b700 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b6f2:	8afa      	ldrh	r2, [r7, #22]
 800b6f4:	88bb      	ldrh	r3, [r7, #4]
 800b6f6:	3303      	adds	r3, #3
 800b6f8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d201      	bcs.n	800b704 <pbuf_alloc+0x160>
        return NULL;
 800b700:	2300      	movs	r3, #0
 800b702:	e035      	b.n	800b770 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b704:	8afb      	ldrh	r3, [r7, #22]
 800b706:	4618      	mov	r0, r3
 800b708:	f7ff fa64 	bl	800abd4 <mem_malloc>
 800b70c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	2b00      	cmp	r3, #0
 800b712:	d101      	bne.n	800b718 <pbuf_alloc+0x174>
        return NULL;
 800b714:	2300      	movs	r3, #0
 800b716:	e02b      	b.n	800b770 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b718:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b71a:	3310      	adds	r3, #16
 800b71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b71e:	4413      	add	r3, r2
 800b720:	3303      	adds	r3, #3
 800b722:	f023 0303 	bic.w	r3, r3, #3
 800b726:	4618      	mov	r0, r3
 800b728:	88b9      	ldrh	r1, [r7, #4]
 800b72a:	88ba      	ldrh	r2, [r7, #4]
 800b72c:	2300      	movs	r3, #0
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	887b      	ldrh	r3, [r7, #2]
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	460b      	mov	r3, r1
 800b736:	4601      	mov	r1, r0
 800b738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b73a:	f7ff ff09 	bl	800b550 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	f003 0303 	and.w	r3, r3, #3
 800b746:	2b00      	cmp	r3, #0
 800b748:	d010      	beq.n	800b76c <pbuf_alloc+0x1c8>
 800b74a:	4b0b      	ldr	r3, [pc, #44]	; (800b778 <pbuf_alloc+0x1d4>)
 800b74c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b750:	490d      	ldr	r1, [pc, #52]	; (800b788 <pbuf_alloc+0x1e4>)
 800b752:	480b      	ldr	r0, [pc, #44]	; (800b780 <pbuf_alloc+0x1dc>)
 800b754:	f009 fb18 	bl	8014d88 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b758:	e008      	b.n	800b76c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b75a:	4b07      	ldr	r3, [pc, #28]	; (800b778 <pbuf_alloc+0x1d4>)
 800b75c:	f240 1227 	movw	r2, #295	; 0x127
 800b760:	490a      	ldr	r1, [pc, #40]	; (800b78c <pbuf_alloc+0x1e8>)
 800b762:	4807      	ldr	r0, [pc, #28]	; (800b780 <pbuf_alloc+0x1dc>)
 800b764:	f009 fb10 	bl	8014d88 <iprintf>
      return NULL;
 800b768:	2300      	movs	r3, #0
 800b76a:	e001      	b.n	800b770 <pbuf_alloc+0x1cc>
      break;
 800b76c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b770:	4618      	mov	r0, r3
 800b772:	3728      	adds	r7, #40	; 0x28
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	08017838 	.word	0x08017838
 800b77c:	08017868 	.word	0x08017868
 800b780:	08017898 	.word	0x08017898
 800b784:	080178c0 	.word	0x080178c0
 800b788:	080178f4 	.word	0x080178f4
 800b78c:	08017920 	.word	0x08017920

0800b790 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af02      	add	r7, sp, #8
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	460b      	mov	r3, r1
 800b79a:	807b      	strh	r3, [r7, #2]
 800b79c:	4613      	mov	r3, r2
 800b79e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b7a0:	883b      	ldrh	r3, [r7, #0]
 800b7a2:	2b41      	cmp	r3, #65	; 0x41
 800b7a4:	d009      	beq.n	800b7ba <pbuf_alloc_reference+0x2a>
 800b7a6:	883b      	ldrh	r3, [r7, #0]
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d006      	beq.n	800b7ba <pbuf_alloc_reference+0x2a>
 800b7ac:	4b0f      	ldr	r3, [pc, #60]	; (800b7ec <pbuf_alloc_reference+0x5c>)
 800b7ae:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b7b2:	490f      	ldr	r1, [pc, #60]	; (800b7f0 <pbuf_alloc_reference+0x60>)
 800b7b4:	480f      	ldr	r0, [pc, #60]	; (800b7f4 <pbuf_alloc_reference+0x64>)
 800b7b6:	f009 fae7 	bl	8014d88 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b7ba:	2007      	movs	r0, #7
 800b7bc:	f7ff fb78 	bl	800aeb0 <memp_malloc>
 800b7c0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d101      	bne.n	800b7cc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	e00b      	b.n	800b7e4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b7cc:	8879      	ldrh	r1, [r7, #2]
 800b7ce:	887a      	ldrh	r2, [r7, #2]
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	9301      	str	r3, [sp, #4]
 800b7d4:	883b      	ldrh	r3, [r7, #0]
 800b7d6:	9300      	str	r3, [sp, #0]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	68f8      	ldr	r0, [r7, #12]
 800b7de:	f7ff feb7 	bl	800b550 <pbuf_init_alloced_pbuf>
  return p;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	08017838 	.word	0x08017838
 800b7f0:	0801793c 	.word	0x0801793c
 800b7f4:	08017898 	.word	0x08017898

0800b7f8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af02      	add	r7, sp, #8
 800b7fe:	607b      	str	r3, [r7, #4]
 800b800:	4603      	mov	r3, r0
 800b802:	73fb      	strb	r3, [r7, #15]
 800b804:	460b      	mov	r3, r1
 800b806:	81bb      	strh	r3, [r7, #12]
 800b808:	4613      	mov	r3, r2
 800b80a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b80c:	7bfb      	ldrb	r3, [r7, #15]
 800b80e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b810:	8a7b      	ldrh	r3, [r7, #18]
 800b812:	3303      	adds	r3, #3
 800b814:	f023 0203 	bic.w	r2, r3, #3
 800b818:	89bb      	ldrh	r3, [r7, #12]
 800b81a:	441a      	add	r2, r3
 800b81c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b81e:	429a      	cmp	r2, r3
 800b820:	d901      	bls.n	800b826 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b822:	2300      	movs	r3, #0
 800b824:	e018      	b.n	800b858 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b826:	6a3b      	ldr	r3, [r7, #32]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d007      	beq.n	800b83c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b82c:	8a7b      	ldrh	r3, [r7, #18]
 800b82e:	3303      	adds	r3, #3
 800b830:	f023 0303 	bic.w	r3, r3, #3
 800b834:	6a3a      	ldr	r2, [r7, #32]
 800b836:	4413      	add	r3, r2
 800b838:	617b      	str	r3, [r7, #20]
 800b83a:	e001      	b.n	800b840 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b83c:	2300      	movs	r3, #0
 800b83e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	89b9      	ldrh	r1, [r7, #12]
 800b844:	89ba      	ldrh	r2, [r7, #12]
 800b846:	2302      	movs	r3, #2
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	897b      	ldrh	r3, [r7, #10]
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	460b      	mov	r3, r1
 800b850:	6979      	ldr	r1, [r7, #20]
 800b852:	f7ff fe7d 	bl	800b550 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b856:	687b      	ldr	r3, [r7, #4]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3718      	adds	r7, #24
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d106      	bne.n	800b880 <pbuf_realloc+0x20>
 800b872:	4b3a      	ldr	r3, [pc, #232]	; (800b95c <pbuf_realloc+0xfc>)
 800b874:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b878:	4939      	ldr	r1, [pc, #228]	; (800b960 <pbuf_realloc+0x100>)
 800b87a:	483a      	ldr	r0, [pc, #232]	; (800b964 <pbuf_realloc+0x104>)
 800b87c:	f009 fa84 	bl	8014d88 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	891b      	ldrh	r3, [r3, #8]
 800b884:	887a      	ldrh	r2, [r7, #2]
 800b886:	429a      	cmp	r2, r3
 800b888:	d263      	bcs.n	800b952 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	891a      	ldrh	r2, [r3, #8]
 800b88e:	887b      	ldrh	r3, [r7, #2]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b894:	887b      	ldrh	r3, [r7, #2]
 800b896:	817b      	strh	r3, [r7, #10]
  q = p;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b89c:	e018      	b.n	800b8d0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	895b      	ldrh	r3, [r3, #10]
 800b8a2:	897a      	ldrh	r2, [r7, #10]
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	891a      	ldrh	r2, [r3, #8]
 800b8ac:	893b      	ldrh	r3, [r7, #8]
 800b8ae:	1ad3      	subs	r3, r2, r3
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <pbuf_realloc+0x70>
 800b8c2:	4b26      	ldr	r3, [pc, #152]	; (800b95c <pbuf_realloc+0xfc>)
 800b8c4:	f240 12af 	movw	r2, #431	; 0x1af
 800b8c8:	4927      	ldr	r1, [pc, #156]	; (800b968 <pbuf_realloc+0x108>)
 800b8ca:	4826      	ldr	r0, [pc, #152]	; (800b964 <pbuf_realloc+0x104>)
 800b8cc:	f009 fa5c 	bl	8014d88 <iprintf>
  while (rem_len > q->len) {
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	895b      	ldrh	r3, [r3, #10]
 800b8d4:	897a      	ldrh	r2, [r7, #10]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d8e1      	bhi.n	800b89e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	7b1b      	ldrb	r3, [r3, #12]
 800b8de:	f003 030f 	and.w	r3, r3, #15
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d121      	bne.n	800b92a <pbuf_realloc+0xca>
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	895b      	ldrh	r3, [r3, #10]
 800b8ea:	897a      	ldrh	r2, [r7, #10]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d01c      	beq.n	800b92a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	7b5b      	ldrb	r3, [r3, #13]
 800b8f4:	f003 0302 	and.w	r3, r3, #2
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d116      	bne.n	800b92a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	685a      	ldr	r2, [r3, #4]
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	b29a      	uxth	r2, r3
 800b906:	897b      	ldrh	r3, [r7, #10]
 800b908:	4413      	add	r3, r2
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	4619      	mov	r1, r3
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f7ff f864 	bl	800a9dc <mem_trim>
 800b914:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d106      	bne.n	800b92a <pbuf_realloc+0xca>
 800b91c:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <pbuf_realloc+0xfc>)
 800b91e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b922:	4912      	ldr	r1, [pc, #72]	; (800b96c <pbuf_realloc+0x10c>)
 800b924:	480f      	ldr	r0, [pc, #60]	; (800b964 <pbuf_realloc+0x104>)
 800b926:	f009 fa2f 	bl	8014d88 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	897a      	ldrh	r2, [r7, #10]
 800b92e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	895a      	ldrh	r2, [r3, #10]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d004      	beq.n	800b94a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4618      	mov	r0, r3
 800b946:	f000 f911 	bl	800bb6c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	e000      	b.n	800b954 <pbuf_realloc+0xf4>
    return;
 800b952:	bf00      	nop

}
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	08017838 	.word	0x08017838
 800b960:	08017950 	.word	0x08017950
 800b964:	08017898 	.word	0x08017898
 800b968:	08017968 	.word	0x08017968
 800b96c:	08017980 	.word	0x08017980

0800b970 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b086      	sub	sp, #24
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	4613      	mov	r3, r2
 800b97c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d106      	bne.n	800b992 <pbuf_add_header_impl+0x22>
 800b984:	4b2b      	ldr	r3, [pc, #172]	; (800ba34 <pbuf_add_header_impl+0xc4>)
 800b986:	f240 12df 	movw	r2, #479	; 0x1df
 800b98a:	492b      	ldr	r1, [pc, #172]	; (800ba38 <pbuf_add_header_impl+0xc8>)
 800b98c:	482b      	ldr	r0, [pc, #172]	; (800ba3c <pbuf_add_header_impl+0xcc>)
 800b98e:	f009 f9fb 	bl	8014d88 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <pbuf_add_header_impl+0x30>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b99e:	d301      	bcc.n	800b9a4 <pbuf_add_header_impl+0x34>
    return 1;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	e043      	b.n	800ba2c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d101      	bne.n	800b9ae <pbuf_add_header_impl+0x3e>
    return 0;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	e03e      	b.n	800ba2c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	891a      	ldrh	r2, [r3, #8]
 800b9b6:	8a7b      	ldrh	r3, [r7, #18]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	8a7a      	ldrh	r2, [r7, #18]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d901      	bls.n	800b9c6 <pbuf_add_header_impl+0x56>
    return 1;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e032      	b.n	800ba2c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	7b1b      	ldrb	r3, [r3, #12]
 800b9ca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b9cc:	8a3b      	ldrh	r3, [r7, #16]
 800b9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00c      	beq.n	800b9f0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	685a      	ldr	r2, [r3, #4]
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	425b      	negs	r3, r3
 800b9de:	4413      	add	r3, r2
 800b9e0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	3310      	adds	r3, #16
 800b9e6:	697a      	ldr	r2, [r7, #20]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d20d      	bcs.n	800ba08 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e01d      	b.n	800ba2c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b9f0:	79fb      	ldrb	r3, [r7, #7]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d006      	beq.n	800ba04 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	425b      	negs	r3, r3
 800b9fe:	4413      	add	r3, r2
 800ba00:	617b      	str	r3, [r7, #20]
 800ba02:	e001      	b.n	800ba08 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ba04:	2301      	movs	r3, #1
 800ba06:	e011      	b.n	800ba2c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	697a      	ldr	r2, [r7, #20]
 800ba0c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	895a      	ldrh	r2, [r3, #10]
 800ba12:	8a7b      	ldrh	r3, [r7, #18]
 800ba14:	4413      	add	r3, r2
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	891a      	ldrh	r2, [r3, #8]
 800ba20:	8a7b      	ldrh	r3, [r7, #18]
 800ba22:	4413      	add	r3, r2
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	811a      	strh	r2, [r3, #8]


  return 0;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3718      	adds	r7, #24
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	08017838 	.word	0x08017838
 800ba38:	0801799c 	.word	0x0801799c
 800ba3c:	08017898 	.word	0x08017898

0800ba40 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	6839      	ldr	r1, [r7, #0]
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7ff ff8e 	bl	800b970 <pbuf_add_header_impl>
 800ba54:	4603      	mov	r3, r0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
	...

0800ba60 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d106      	bne.n	800ba7e <pbuf_remove_header+0x1e>
 800ba70:	4b20      	ldr	r3, [pc, #128]	; (800baf4 <pbuf_remove_header+0x94>)
 800ba72:	f240 224b 	movw	r2, #587	; 0x24b
 800ba76:	4920      	ldr	r1, [pc, #128]	; (800baf8 <pbuf_remove_header+0x98>)
 800ba78:	4820      	ldr	r0, [pc, #128]	; (800bafc <pbuf_remove_header+0x9c>)
 800ba7a:	f009 f985 	bl	8014d88 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d003      	beq.n	800ba8c <pbuf_remove_header+0x2c>
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba8a:	d301      	bcc.n	800ba90 <pbuf_remove_header+0x30>
    return 1;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e02c      	b.n	800baea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d101      	bne.n	800ba9a <pbuf_remove_header+0x3a>
    return 0;
 800ba96:	2300      	movs	r3, #0
 800ba98:	e027      	b.n	800baea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	895b      	ldrh	r3, [r3, #10]
 800baa2:	89fa      	ldrh	r2, [r7, #14]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d908      	bls.n	800baba <pbuf_remove_header+0x5a>
 800baa8:	4b12      	ldr	r3, [pc, #72]	; (800baf4 <pbuf_remove_header+0x94>)
 800baaa:	f240 2255 	movw	r2, #597	; 0x255
 800baae:	4914      	ldr	r1, [pc, #80]	; (800bb00 <pbuf_remove_header+0xa0>)
 800bab0:	4812      	ldr	r0, [pc, #72]	; (800bafc <pbuf_remove_header+0x9c>)
 800bab2:	f009 f969 	bl	8014d88 <iprintf>
 800bab6:	2301      	movs	r3, #1
 800bab8:	e017      	b.n	800baea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685a      	ldr	r2, [r3, #4]
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	441a      	add	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	895a      	ldrh	r2, [r3, #10]
 800bad0:	89fb      	ldrh	r3, [r7, #14]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	891a      	ldrh	r2, [r3, #8]
 800bade:	89fb      	ldrh	r3, [r7, #14]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	08017838 	.word	0x08017838
 800baf8:	0801799c 	.word	0x0801799c
 800bafc:	08017898 	.word	0x08017898
 800bb00:	080179a8 	.word	0x080179a8

0800bb04 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	807b      	strh	r3, [r7, #2]
 800bb10:	4613      	mov	r3, r2
 800bb12:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bb14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	da08      	bge.n	800bb2e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bb1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb20:	425b      	negs	r3, r3
 800bb22:	4619      	mov	r1, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7ff ff9b 	bl	800ba60 <pbuf_remove_header>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	e007      	b.n	800bb3e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bb2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb32:	787a      	ldrb	r2, [r7, #1]
 800bb34:	4619      	mov	r1, r3
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f7ff ff1a 	bl	800b970 <pbuf_add_header_impl>
 800bb3c:	4603      	mov	r3, r0
  }
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b082      	sub	sp, #8
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	460b      	mov	r3, r1
 800bb50:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bb52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb56:	2201      	movs	r2, #1
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7ff ffd2 	bl	800bb04 <pbuf_header_impl>
 800bb60:	4603      	mov	r3, r0
}
 800bb62:	4618      	mov	r0, r3
 800bb64:	3708      	adds	r7, #8
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}
	...

0800bb6c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10b      	bne.n	800bb92 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d106      	bne.n	800bb8e <pbuf_free+0x22>
 800bb80:	4b38      	ldr	r3, [pc, #224]	; (800bc64 <pbuf_free+0xf8>)
 800bb82:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bb86:	4938      	ldr	r1, [pc, #224]	; (800bc68 <pbuf_free+0xfc>)
 800bb88:	4838      	ldr	r0, [pc, #224]	; (800bc6c <pbuf_free+0x100>)
 800bb8a:	f009 f8fd 	bl	8014d88 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	e063      	b.n	800bc5a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bb92:	2300      	movs	r3, #0
 800bb94:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bb96:	e05c      	b.n	800bc52 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	7b9b      	ldrb	r3, [r3, #14]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d106      	bne.n	800bbae <pbuf_free+0x42>
 800bba0:	4b30      	ldr	r3, [pc, #192]	; (800bc64 <pbuf_free+0xf8>)
 800bba2:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bba6:	4932      	ldr	r1, [pc, #200]	; (800bc70 <pbuf_free+0x104>)
 800bba8:	4830      	ldr	r0, [pc, #192]	; (800bc6c <pbuf_free+0x100>)
 800bbaa:	f009 f8ed 	bl	8014d88 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	7b9b      	ldrb	r3, [r3, #14]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	b2da      	uxtb	r2, r3
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	739a      	strb	r2, [r3, #14]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	7b9b      	ldrb	r3, [r3, #14]
 800bbbe:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bbc0:	7dbb      	ldrb	r3, [r7, #22]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d143      	bne.n	800bc4e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	7b1b      	ldrb	r3, [r3, #12]
 800bbd0:	f003 030f 	and.w	r3, r3, #15
 800bbd4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	7b5b      	ldrb	r3, [r3, #13]
 800bbda:	f003 0302 	and.w	r3, r3, #2
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d011      	beq.n	800bc06 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d106      	bne.n	800bbfc <pbuf_free+0x90>
 800bbee:	4b1d      	ldr	r3, [pc, #116]	; (800bc64 <pbuf_free+0xf8>)
 800bbf0:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bbf4:	491f      	ldr	r1, [pc, #124]	; (800bc74 <pbuf_free+0x108>)
 800bbf6:	481d      	ldr	r0, [pc, #116]	; (800bc6c <pbuf_free+0x100>)
 800bbf8:	f009 f8c6 	bl	8014d88 <iprintf>
        pc->custom_free_function(p);
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	4798      	blx	r3
 800bc04:	e01d      	b.n	800bc42 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d104      	bne.n	800bc16 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	2008      	movs	r0, #8
 800bc10:	f7ff f99a 	bl	800af48 <memp_free>
 800bc14:	e015      	b.n	800bc42 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d104      	bne.n	800bc26 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800bc1c:	6879      	ldr	r1, [r7, #4]
 800bc1e:	2007      	movs	r0, #7
 800bc20:	f7ff f992 	bl	800af48 <memp_free>
 800bc24:	e00d      	b.n	800bc42 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bc26:	7bfb      	ldrb	r3, [r7, #15]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d103      	bne.n	800bc34 <pbuf_free+0xc8>
          mem_free(p);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f7fe fe6b 	bl	800a908 <mem_free>
 800bc32:	e006      	b.n	800bc42 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bc34:	4b0b      	ldr	r3, [pc, #44]	; (800bc64 <pbuf_free+0xf8>)
 800bc36:	f240 320f 	movw	r2, #783	; 0x30f
 800bc3a:	490f      	ldr	r1, [pc, #60]	; (800bc78 <pbuf_free+0x10c>)
 800bc3c:	480b      	ldr	r0, [pc, #44]	; (800bc6c <pbuf_free+0x100>)
 800bc3e:	f009 f8a3 	bl	8014d88 <iprintf>
        }
      }
      count++;
 800bc42:	7dfb      	ldrb	r3, [r7, #23]
 800bc44:	3301      	adds	r3, #1
 800bc46:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	607b      	str	r3, [r7, #4]
 800bc4c:	e001      	b.n	800bc52 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d19f      	bne.n	800bb98 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bc58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	08017838 	.word	0x08017838
 800bc68:	0801799c 	.word	0x0801799c
 800bc6c:	08017898 	.word	0x08017898
 800bc70:	080179c8 	.word	0x080179c8
 800bc74:	080179e0 	.word	0x080179e0
 800bc78:	08017a04 	.word	0x08017a04

0800bc7c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bc88:	e005      	b.n	800bc96 <pbuf_clen+0x1a>
    ++len;
 800bc8a:	89fb      	ldrh	r3, [r7, #14]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1f6      	bne.n	800bc8a <pbuf_clen+0xe>
  }
  return len;
 800bc9c:	89fb      	ldrh	r3, [r7, #14]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
	...

0800bcac <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d010      	beq.n	800bcdc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	7b9b      	ldrb	r3, [r3, #14]
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	7b9b      	ldrb	r3, [r3, #14]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d106      	bne.n	800bcdc <pbuf_ref+0x30>
 800bcce:	4b05      	ldr	r3, [pc, #20]	; (800bce4 <pbuf_ref+0x38>)
 800bcd0:	f240 3242 	movw	r2, #834	; 0x342
 800bcd4:	4904      	ldr	r1, [pc, #16]	; (800bce8 <pbuf_ref+0x3c>)
 800bcd6:	4805      	ldr	r0, [pc, #20]	; (800bcec <pbuf_ref+0x40>)
 800bcd8:	f009 f856 	bl	8014d88 <iprintf>
  }
}
 800bcdc:	bf00      	nop
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	08017838 	.word	0x08017838
 800bce8:	08017a18 	.word	0x08017a18
 800bcec:	08017898 	.word	0x08017898

0800bcf0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b084      	sub	sp, #16
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d002      	beq.n	800bd06 <pbuf_cat+0x16>
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d107      	bne.n	800bd16 <pbuf_cat+0x26>
 800bd06:	4b20      	ldr	r3, [pc, #128]	; (800bd88 <pbuf_cat+0x98>)
 800bd08:	f240 3259 	movw	r2, #857	; 0x359
 800bd0c:	491f      	ldr	r1, [pc, #124]	; (800bd8c <pbuf_cat+0x9c>)
 800bd0e:	4820      	ldr	r0, [pc, #128]	; (800bd90 <pbuf_cat+0xa0>)
 800bd10:	f009 f83a 	bl	8014d88 <iprintf>
 800bd14:	e034      	b.n	800bd80 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	e00a      	b.n	800bd32 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	891a      	ldrh	r2, [r3, #8]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	891b      	ldrh	r3, [r3, #8]
 800bd24:	4413      	add	r3, r2
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	60fb      	str	r3, [r7, #12]
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1f0      	bne.n	800bd1c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	891a      	ldrh	r2, [r3, #8]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	895b      	ldrh	r3, [r3, #10]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d006      	beq.n	800bd54 <pbuf_cat+0x64>
 800bd46:	4b10      	ldr	r3, [pc, #64]	; (800bd88 <pbuf_cat+0x98>)
 800bd48:	f240 3262 	movw	r2, #866	; 0x362
 800bd4c:	4911      	ldr	r1, [pc, #68]	; (800bd94 <pbuf_cat+0xa4>)
 800bd4e:	4810      	ldr	r0, [pc, #64]	; (800bd90 <pbuf_cat+0xa0>)
 800bd50:	f009 f81a 	bl	8014d88 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d006      	beq.n	800bd6a <pbuf_cat+0x7a>
 800bd5c:	4b0a      	ldr	r3, [pc, #40]	; (800bd88 <pbuf_cat+0x98>)
 800bd5e:	f240 3263 	movw	r2, #867	; 0x363
 800bd62:	490d      	ldr	r1, [pc, #52]	; (800bd98 <pbuf_cat+0xa8>)
 800bd64:	480a      	ldr	r0, [pc, #40]	; (800bd90 <pbuf_cat+0xa0>)
 800bd66:	f009 f80f 	bl	8014d88 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	891a      	ldrh	r2, [r3, #8]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	891b      	ldrh	r3, [r3, #8]
 800bd72:	4413      	add	r3, r2
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	683a      	ldr	r2, [r7, #0]
 800bd7e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	08017838 	.word	0x08017838
 800bd8c:	08017a2c 	.word	0x08017a2c
 800bd90:	08017898 	.word	0x08017898
 800bd94:	08017a64 	.word	0x08017a64
 800bd98:	08017a94 	.word	0x08017a94

0800bd9c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bda6:	2300      	movs	r3, #0
 800bda8:	617b      	str	r3, [r7, #20]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d008      	beq.n	800bdc6 <pbuf_copy+0x2a>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d005      	beq.n	800bdc6 <pbuf_copy+0x2a>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	891a      	ldrh	r2, [r3, #8]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	891b      	ldrh	r3, [r3, #8]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d209      	bcs.n	800bdda <pbuf_copy+0x3e>
 800bdc6:	4b57      	ldr	r3, [pc, #348]	; (800bf24 <pbuf_copy+0x188>)
 800bdc8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bdcc:	4956      	ldr	r1, [pc, #344]	; (800bf28 <pbuf_copy+0x18c>)
 800bdce:	4857      	ldr	r0, [pc, #348]	; (800bf2c <pbuf_copy+0x190>)
 800bdd0:	f008 ffda 	bl	8014d88 <iprintf>
 800bdd4:	f06f 030f 	mvn.w	r3, #15
 800bdd8:	e09f      	b.n	800bf1a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	895b      	ldrh	r3, [r3, #10]
 800bdde:	461a      	mov	r2, r3
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	1ad2      	subs	r2, r2, r3
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	895b      	ldrh	r3, [r3, #10]
 800bde8:	4619      	mov	r1, r3
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	1acb      	subs	r3, r1, r3
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d306      	bcc.n	800be00 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	895b      	ldrh	r3, [r3, #10]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	60fb      	str	r3, [r7, #12]
 800bdfe:	e005      	b.n	800be0c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	895b      	ldrh	r3, [r3, #10]
 800be04:	461a      	mov	r2, r3
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685a      	ldr	r2, [r3, #4]
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	18d0      	adds	r0, r2, r3
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	4413      	add	r3, r2
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4619      	mov	r1, r3
 800be20:	f008 ff82 	bl	8014d28 <memcpy>
    offset_to += len;
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	4413      	add	r3, r2
 800be2a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	4413      	add	r3, r2
 800be32:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	895b      	ldrh	r3, [r3, #10]
 800be38:	461a      	mov	r2, r3
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d906      	bls.n	800be4e <pbuf_copy+0xb2>
 800be40:	4b38      	ldr	r3, [pc, #224]	; (800bf24 <pbuf_copy+0x188>)
 800be42:	f240 32d9 	movw	r2, #985	; 0x3d9
 800be46:	493a      	ldr	r1, [pc, #232]	; (800bf30 <pbuf_copy+0x194>)
 800be48:	4838      	ldr	r0, [pc, #224]	; (800bf2c <pbuf_copy+0x190>)
 800be4a:	f008 ff9d 	bl	8014d88 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	895b      	ldrh	r3, [r3, #10]
 800be52:	461a      	mov	r2, r3
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	4293      	cmp	r3, r2
 800be58:	d906      	bls.n	800be68 <pbuf_copy+0xcc>
 800be5a:	4b32      	ldr	r3, [pc, #200]	; (800bf24 <pbuf_copy+0x188>)
 800be5c:	f240 32da 	movw	r2, #986	; 0x3da
 800be60:	4934      	ldr	r1, [pc, #208]	; (800bf34 <pbuf_copy+0x198>)
 800be62:	4832      	ldr	r0, [pc, #200]	; (800bf2c <pbuf_copy+0x190>)
 800be64:	f008 ff90 	bl	8014d88 <iprintf>
    if (offset_from >= p_from->len) {
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	895b      	ldrh	r3, [r3, #10]
 800be6c:	461a      	mov	r2, r3
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	4293      	cmp	r3, r2
 800be72:	d304      	bcc.n	800be7e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800be74:	2300      	movs	r3, #0
 800be76:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	895b      	ldrh	r3, [r3, #10]
 800be82:	461a      	mov	r2, r3
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	4293      	cmp	r3, r2
 800be88:	d114      	bne.n	800beb4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10c      	bne.n	800beb4 <pbuf_copy+0x118>
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d009      	beq.n	800beb4 <pbuf_copy+0x118>
 800bea0:	4b20      	ldr	r3, [pc, #128]	; (800bf24 <pbuf_copy+0x188>)
 800bea2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800bea6:	4924      	ldr	r1, [pc, #144]	; (800bf38 <pbuf_copy+0x19c>)
 800bea8:	4820      	ldr	r0, [pc, #128]	; (800bf2c <pbuf_copy+0x190>)
 800beaa:	f008 ff6d 	bl	8014d88 <iprintf>
 800beae:	f06f 030f 	mvn.w	r3, #15
 800beb2:	e032      	b.n	800bf1a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d013      	beq.n	800bee2 <pbuf_copy+0x146>
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	895a      	ldrh	r2, [r3, #10]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	891b      	ldrh	r3, [r3, #8]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d10d      	bne.n	800bee2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d009      	beq.n	800bee2 <pbuf_copy+0x146>
 800bece:	4b15      	ldr	r3, [pc, #84]	; (800bf24 <pbuf_copy+0x188>)
 800bed0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bed4:	4919      	ldr	r1, [pc, #100]	; (800bf3c <pbuf_copy+0x1a0>)
 800bed6:	4815      	ldr	r0, [pc, #84]	; (800bf2c <pbuf_copy+0x190>)
 800bed8:	f008 ff56 	bl	8014d88 <iprintf>
 800bedc:	f06f 0305 	mvn.w	r3, #5
 800bee0:	e01b      	b.n	800bf1a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d013      	beq.n	800bf10 <pbuf_copy+0x174>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	895a      	ldrh	r2, [r3, #10]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	891b      	ldrh	r3, [r3, #8]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d10d      	bne.n	800bf10 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d009      	beq.n	800bf10 <pbuf_copy+0x174>
 800befc:	4b09      	ldr	r3, [pc, #36]	; (800bf24 <pbuf_copy+0x188>)
 800befe:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bf02:	490e      	ldr	r1, [pc, #56]	; (800bf3c <pbuf_copy+0x1a0>)
 800bf04:	4809      	ldr	r0, [pc, #36]	; (800bf2c <pbuf_copy+0x190>)
 800bf06:	f008 ff3f 	bl	8014d88 <iprintf>
 800bf0a:	f06f 0305 	mvn.w	r3, #5
 800bf0e:	e004      	b.n	800bf1a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f47f af61 	bne.w	800bdda <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bf18:	2300      	movs	r3, #0
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	08017838 	.word	0x08017838
 800bf28:	08017ae0 	.word	0x08017ae0
 800bf2c:	08017898 	.word	0x08017898
 800bf30:	08017b10 	.word	0x08017b10
 800bf34:	08017b28 	.word	0x08017b28
 800bf38:	08017b44 	.word	0x08017b44
 800bf3c:	08017b54 	.word	0x08017b54

0800bf40 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	4611      	mov	r1, r2
 800bf4c:	461a      	mov	r2, r3
 800bf4e:	460b      	mov	r3, r1
 800bf50:	80fb      	strh	r3, [r7, #6]
 800bf52:	4613      	mov	r3, r2
 800bf54:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d108      	bne.n	800bf76 <pbuf_copy_partial+0x36>
 800bf64:	4b2b      	ldr	r3, [pc, #172]	; (800c014 <pbuf_copy_partial+0xd4>)
 800bf66:	f240 420a 	movw	r2, #1034	; 0x40a
 800bf6a:	492b      	ldr	r1, [pc, #172]	; (800c018 <pbuf_copy_partial+0xd8>)
 800bf6c:	482b      	ldr	r0, [pc, #172]	; (800c01c <pbuf_copy_partial+0xdc>)
 800bf6e:	f008 ff0b 	bl	8014d88 <iprintf>
 800bf72:	2300      	movs	r3, #0
 800bf74:	e04a      	b.n	800c00c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d108      	bne.n	800bf8e <pbuf_copy_partial+0x4e>
 800bf7c:	4b25      	ldr	r3, [pc, #148]	; (800c014 <pbuf_copy_partial+0xd4>)
 800bf7e:	f240 420b 	movw	r2, #1035	; 0x40b
 800bf82:	4927      	ldr	r1, [pc, #156]	; (800c020 <pbuf_copy_partial+0xe0>)
 800bf84:	4825      	ldr	r0, [pc, #148]	; (800c01c <pbuf_copy_partial+0xdc>)
 800bf86:	f008 feff 	bl	8014d88 <iprintf>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e03e      	b.n	800c00c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	61fb      	str	r3, [r7, #28]
 800bf92:	e034      	b.n	800bffe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bf94:	88bb      	ldrh	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <pbuf_copy_partial+0x70>
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	895b      	ldrh	r3, [r3, #10]
 800bf9e:	88ba      	ldrh	r2, [r7, #4]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d305      	bcc.n	800bfb0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	895b      	ldrh	r3, [r3, #10]
 800bfa8:	88ba      	ldrh	r2, [r7, #4]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	80bb      	strh	r3, [r7, #4]
 800bfae:	e023      	b.n	800bff8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	895a      	ldrh	r2, [r3, #10]
 800bfb4:	88bb      	ldrh	r3, [r7, #4]
 800bfb6:	1ad3      	subs	r3, r2, r3
 800bfb8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bfba:	8b3a      	ldrh	r2, [r7, #24]
 800bfbc:	88fb      	ldrh	r3, [r7, #6]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d901      	bls.n	800bfc6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bfc2:	88fb      	ldrh	r3, [r7, #6]
 800bfc4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bfc6:	8b7b      	ldrh	r3, [r7, #26]
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	18d0      	adds	r0, r2, r3
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	88bb      	ldrh	r3, [r7, #4]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	8b3a      	ldrh	r2, [r7, #24]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	f008 fea6 	bl	8014d28 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bfdc:	8afa      	ldrh	r2, [r7, #22]
 800bfde:	8b3b      	ldrh	r3, [r7, #24]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bfe4:	8b7a      	ldrh	r2, [r7, #26]
 800bfe6:	8b3b      	ldrh	r3, [r7, #24]
 800bfe8:	4413      	add	r3, r2
 800bfea:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bfec:	88fa      	ldrh	r2, [r7, #6]
 800bfee:	8b3b      	ldrh	r3, [r7, #24]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	61fb      	str	r3, [r7, #28]
 800bffe:	88fb      	ldrh	r3, [r7, #6]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <pbuf_copy_partial+0xca>
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1c4      	bne.n	800bf94 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c00a:	8afb      	ldrh	r3, [r7, #22]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3720      	adds	r7, #32
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	08017838 	.word	0x08017838
 800c018:	08017b80 	.word	0x08017b80
 800c01c:	08017898 	.word	0x08017898
 800c020:	08017ba0 	.word	0x08017ba0

0800c024 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	4603      	mov	r3, r0
 800c02c:	603a      	str	r2, [r7, #0]
 800c02e:	71fb      	strb	r3, [r7, #7]
 800c030:	460b      	mov	r3, r1
 800c032:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	8919      	ldrh	r1, [r3, #8]
 800c038:	88ba      	ldrh	r2, [r7, #4]
 800c03a:	79fb      	ldrb	r3, [r7, #7]
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7ff fab1 	bl	800b5a4 <pbuf_alloc>
 800c042:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <pbuf_clone+0x2a>
    return NULL;
 800c04a:	2300      	movs	r3, #0
 800c04c:	e011      	b.n	800c072 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	68f8      	ldr	r0, [r7, #12]
 800c052:	f7ff fea3 	bl	800bd9c <pbuf_copy>
 800c056:	4603      	mov	r3, r0
 800c058:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c05a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d006      	beq.n	800c070 <pbuf_clone+0x4c>
 800c062:	4b06      	ldr	r3, [pc, #24]	; (800c07c <pbuf_clone+0x58>)
 800c064:	f240 5224 	movw	r2, #1316	; 0x524
 800c068:	4905      	ldr	r1, [pc, #20]	; (800c080 <pbuf_clone+0x5c>)
 800c06a:	4806      	ldr	r0, [pc, #24]	; (800c084 <pbuf_clone+0x60>)
 800c06c:	f008 fe8c 	bl	8014d88 <iprintf>
  return q;
 800c070:	68fb      	ldr	r3, [r7, #12]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	08017838 	.word	0x08017838
 800c080:	08017cac 	.word	0x08017cac
 800c084:	08017898 	.word	0x08017898

0800c088 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c08c:	f008 ff0a 	bl	8014ea4 <rand>
 800c090:	4603      	mov	r3, r0
 800c092:	b29b      	uxth	r3, r3
 800c094:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c098:	b29b      	uxth	r3, r3
 800c09a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	4b01      	ldr	r3, [pc, #4]	; (800c0a8 <tcp_init+0x20>)
 800c0a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c0a4:	bf00      	nop
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	200004b2 	.word	0x200004b2

0800c0ac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	7d1b      	ldrb	r3, [r3, #20]
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d105      	bne.n	800c0c8 <tcp_free+0x1c>
 800c0bc:	4b06      	ldr	r3, [pc, #24]	; (800c0d8 <tcp_free+0x2c>)
 800c0be:	22d4      	movs	r2, #212	; 0xd4
 800c0c0:	4906      	ldr	r1, [pc, #24]	; (800c0dc <tcp_free+0x30>)
 800c0c2:	4807      	ldr	r0, [pc, #28]	; (800c0e0 <tcp_free+0x34>)
 800c0c4:	f008 fe60 	bl	8014d88 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	2001      	movs	r0, #1
 800c0cc:	f7fe ff3c 	bl	800af48 <memp_free>
}
 800c0d0:	bf00      	nop
 800c0d2:	3708      	adds	r7, #8
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	08017d38 	.word	0x08017d38
 800c0dc:	08017d68 	.word	0x08017d68
 800c0e0:	08017d7c 	.word	0x08017d7c

0800c0e4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	7d1b      	ldrb	r3, [r3, #20]
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d105      	bne.n	800c100 <tcp_free_listen+0x1c>
 800c0f4:	4b06      	ldr	r3, [pc, #24]	; (800c110 <tcp_free_listen+0x2c>)
 800c0f6:	22df      	movs	r2, #223	; 0xdf
 800c0f8:	4906      	ldr	r1, [pc, #24]	; (800c114 <tcp_free_listen+0x30>)
 800c0fa:	4807      	ldr	r0, [pc, #28]	; (800c118 <tcp_free_listen+0x34>)
 800c0fc:	f008 fe44 	bl	8014d88 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c100:	6879      	ldr	r1, [r7, #4]
 800c102:	2002      	movs	r0, #2
 800c104:	f7fe ff20 	bl	800af48 <memp_free>
}
 800c108:	bf00      	nop
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	08017d38 	.word	0x08017d38
 800c114:	08017da4 	.word	0x08017da4
 800c118:	08017d7c 	.word	0x08017d7c

0800c11c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c120:	f001 f85c 	bl	800d1dc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c124:	4b07      	ldr	r3, [pc, #28]	; (800c144 <tcp_tmr+0x28>)
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	3301      	adds	r3, #1
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	4b05      	ldr	r3, [pc, #20]	; (800c144 <tcp_tmr+0x28>)
 800c12e:	701a      	strb	r2, [r3, #0]
 800c130:	4b04      	ldr	r3, [pc, #16]	; (800c144 <tcp_tmr+0x28>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f003 0301 	and.w	r3, r3, #1
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d001      	beq.n	800c140 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c13c:	f000 fd0e 	bl	800cb5c <tcp_slowtmr>
  }
}
 800c140:	bf00      	nop
 800c142:	bd80      	pop	{r7, pc}
 800c144:	20000a15 	.word	0x20000a15

0800c148 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d105      	bne.n	800c164 <tcp_remove_listener+0x1c>
 800c158:	4b0d      	ldr	r3, [pc, #52]	; (800c190 <tcp_remove_listener+0x48>)
 800c15a:	22ff      	movs	r2, #255	; 0xff
 800c15c:	490d      	ldr	r1, [pc, #52]	; (800c194 <tcp_remove_listener+0x4c>)
 800c15e:	480e      	ldr	r0, [pc, #56]	; (800c198 <tcp_remove_listener+0x50>)
 800c160:	f008 fe12 	bl	8014d88 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	e00a      	b.n	800c180 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	429a      	cmp	r2, r3
 800c172:	d102      	bne.n	800c17a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	60fb      	str	r3, [r7, #12]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1f1      	bne.n	800c16a <tcp_remove_listener+0x22>
    }
  }
}
 800c186:	bf00      	nop
 800c188:	bf00      	nop
 800c18a:	3710      	adds	r7, #16
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	08017d38 	.word	0x08017d38
 800c194:	08017dc0 	.word	0x08017dc0
 800c198:	08017d7c 	.word	0x08017d7c

0800c19c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d106      	bne.n	800c1b8 <tcp_listen_closed+0x1c>
 800c1aa:	4b14      	ldr	r3, [pc, #80]	; (800c1fc <tcp_listen_closed+0x60>)
 800c1ac:	f240 1211 	movw	r2, #273	; 0x111
 800c1b0:	4913      	ldr	r1, [pc, #76]	; (800c200 <tcp_listen_closed+0x64>)
 800c1b2:	4814      	ldr	r0, [pc, #80]	; (800c204 <tcp_listen_closed+0x68>)
 800c1b4:	f008 fde8 	bl	8014d88 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	7d1b      	ldrb	r3, [r3, #20]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d006      	beq.n	800c1ce <tcp_listen_closed+0x32>
 800c1c0:	4b0e      	ldr	r3, [pc, #56]	; (800c1fc <tcp_listen_closed+0x60>)
 800c1c2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c1c6:	4910      	ldr	r1, [pc, #64]	; (800c208 <tcp_listen_closed+0x6c>)
 800c1c8:	480e      	ldr	r0, [pc, #56]	; (800c204 <tcp_listen_closed+0x68>)
 800c1ca:	f008 fddd 	bl	8014d88 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	60fb      	str	r3, [r7, #12]
 800c1d2:	e00b      	b.n	800c1ec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c1d4:	4a0d      	ldr	r2, [pc, #52]	; (800c20c <tcp_listen_closed+0x70>)
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7ff ffb1 	bl	800c148 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b03      	cmp	r3, #3
 800c1f0:	d9f0      	bls.n	800c1d4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c1f2:	bf00      	nop
 800c1f4:	bf00      	nop
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	08017d38 	.word	0x08017d38
 800c200:	08017de8 	.word	0x08017de8
 800c204:	08017d7c 	.word	0x08017d7c
 800c208:	08017df4 	.word	0x08017df4
 800c20c:	0801f010 	.word	0x0801f010

0800c210 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c210:	b5b0      	push	{r4, r5, r7, lr}
 800c212:	b088      	sub	sp, #32
 800c214:	af04      	add	r7, sp, #16
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	460b      	mov	r3, r1
 800c21a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <tcp_close_shutdown+0x20>
 800c222:	4b63      	ldr	r3, [pc, #396]	; (800c3b0 <tcp_close_shutdown+0x1a0>)
 800c224:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c228:	4962      	ldr	r1, [pc, #392]	; (800c3b4 <tcp_close_shutdown+0x1a4>)
 800c22a:	4863      	ldr	r0, [pc, #396]	; (800c3b8 <tcp_close_shutdown+0x1a8>)
 800c22c:	f008 fdac 	bl	8014d88 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d066      	beq.n	800c304 <tcp_close_shutdown+0xf4>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	7d1b      	ldrb	r3, [r3, #20]
 800c23a:	2b04      	cmp	r3, #4
 800c23c:	d003      	beq.n	800c246 <tcp_close_shutdown+0x36>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	7d1b      	ldrb	r3, [r3, #20]
 800c242:	2b07      	cmp	r3, #7
 800c244:	d15e      	bne.n	800c304 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d104      	bne.n	800c258 <tcp_close_shutdown+0x48>
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c252:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c256:	d055      	beq.n	800c304 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	8b5b      	ldrh	r3, [r3, #26]
 800c25c:	f003 0310 	and.w	r3, r3, #16
 800c260:	2b00      	cmp	r3, #0
 800c262:	d106      	bne.n	800c272 <tcp_close_shutdown+0x62>
 800c264:	4b52      	ldr	r3, [pc, #328]	; (800c3b0 <tcp_close_shutdown+0x1a0>)
 800c266:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c26a:	4954      	ldr	r1, [pc, #336]	; (800c3bc <tcp_close_shutdown+0x1ac>)
 800c26c:	4852      	ldr	r0, [pc, #328]	; (800c3b8 <tcp_close_shutdown+0x1a8>)
 800c26e:	f008 fd8b 	bl	8014d88 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c27a:	687d      	ldr	r5, [r7, #4]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	3304      	adds	r3, #4
 800c280:	687a      	ldr	r2, [r7, #4]
 800c282:	8ad2      	ldrh	r2, [r2, #22]
 800c284:	6879      	ldr	r1, [r7, #4]
 800c286:	8b09      	ldrh	r1, [r1, #24]
 800c288:	9102      	str	r1, [sp, #8]
 800c28a:	9201      	str	r2, [sp, #4]
 800c28c:	9300      	str	r3, [sp, #0]
 800c28e:	462b      	mov	r3, r5
 800c290:	4622      	mov	r2, r4
 800c292:	4601      	mov	r1, r0
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f005 fd8b 	bl	8011db0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f001 fb6c 	bl	800d978 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c2a0:	4b47      	ldr	r3, [pc, #284]	; (800c3c0 <tcp_close_shutdown+0x1b0>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d105      	bne.n	800c2b6 <tcp_close_shutdown+0xa6>
 800c2aa:	4b45      	ldr	r3, [pc, #276]	; (800c3c0 <tcp_close_shutdown+0x1b0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	4a43      	ldr	r2, [pc, #268]	; (800c3c0 <tcp_close_shutdown+0x1b0>)
 800c2b2:	6013      	str	r3, [r2, #0]
 800c2b4:	e013      	b.n	800c2de <tcp_close_shutdown+0xce>
 800c2b6:	4b42      	ldr	r3, [pc, #264]	; (800c3c0 <tcp_close_shutdown+0x1b0>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	e00c      	b.n	800c2d8 <tcp_close_shutdown+0xc8>
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d104      	bne.n	800c2d2 <tcp_close_shutdown+0xc2>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	68da      	ldr	r2, [r3, #12]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	60da      	str	r2, [r3, #12]
 800c2d0:	e005      	b.n	800c2de <tcp_close_shutdown+0xce>
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1ef      	bne.n	800c2be <tcp_close_shutdown+0xae>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	60da      	str	r2, [r3, #12]
 800c2e4:	4b37      	ldr	r3, [pc, #220]	; (800c3c4 <tcp_close_shutdown+0x1b4>)
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c2ea:	4b37      	ldr	r3, [pc, #220]	; (800c3c8 <tcp_close_shutdown+0x1b8>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d102      	bne.n	800c2fa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c2f4:	f004 f800 	bl	80102f8 <tcp_trigger_input_pcb_close>
 800c2f8:	e002      	b.n	800c300 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f7ff fed6 	bl	800c0ac <tcp_free>
      }
      return ERR_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	e050      	b.n	800c3a6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	7d1b      	ldrb	r3, [r3, #20]
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d03b      	beq.n	800c384 <tcp_close_shutdown+0x174>
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	dc44      	bgt.n	800c39a <tcp_close_shutdown+0x18a>
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <tcp_close_shutdown+0x10a>
 800c314:	2b01      	cmp	r3, #1
 800c316:	d02a      	beq.n	800c36e <tcp_close_shutdown+0x15e>
 800c318:	e03f      	b.n	800c39a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	8adb      	ldrh	r3, [r3, #22]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d021      	beq.n	800c366 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c322:	4b2a      	ldr	r3, [pc, #168]	; (800c3cc <tcp_close_shutdown+0x1bc>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d105      	bne.n	800c338 <tcp_close_shutdown+0x128>
 800c32c:	4b27      	ldr	r3, [pc, #156]	; (800c3cc <tcp_close_shutdown+0x1bc>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	4a26      	ldr	r2, [pc, #152]	; (800c3cc <tcp_close_shutdown+0x1bc>)
 800c334:	6013      	str	r3, [r2, #0]
 800c336:	e013      	b.n	800c360 <tcp_close_shutdown+0x150>
 800c338:	4b24      	ldr	r3, [pc, #144]	; (800c3cc <tcp_close_shutdown+0x1bc>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	60bb      	str	r3, [r7, #8]
 800c33e:	e00c      	b.n	800c35a <tcp_close_shutdown+0x14a>
 800c340:	68bb      	ldr	r3, [r7, #8]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	429a      	cmp	r2, r3
 800c348:	d104      	bne.n	800c354 <tcp_close_shutdown+0x144>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	68da      	ldr	r2, [r3, #12]
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	60da      	str	r2, [r3, #12]
 800c352:	e005      	b.n	800c360 <tcp_close_shutdown+0x150>
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	68db      	ldr	r3, [r3, #12]
 800c358:	60bb      	str	r3, [r7, #8]
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1ef      	bne.n	800c340 <tcp_close_shutdown+0x130>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2200      	movs	r2, #0
 800c364:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff fea0 	bl	800c0ac <tcp_free>
      break;
 800c36c:	e01a      	b.n	800c3a4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7ff ff14 	bl	800c19c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	4816      	ldr	r0, [pc, #88]	; (800c3d0 <tcp_close_shutdown+0x1c0>)
 800c378:	f001 fb4e 	bl	800da18 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f7ff feb1 	bl	800c0e4 <tcp_free_listen>
      break;
 800c382:	e00f      	b.n	800c3a4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c384:	6879      	ldr	r1, [r7, #4]
 800c386:	480e      	ldr	r0, [pc, #56]	; (800c3c0 <tcp_close_shutdown+0x1b0>)
 800c388:	f001 fb46 	bl	800da18 <tcp_pcb_remove>
 800c38c:	4b0d      	ldr	r3, [pc, #52]	; (800c3c4 <tcp_close_shutdown+0x1b4>)
 800c38e:	2201      	movs	r2, #1
 800c390:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f7ff fe8a 	bl	800c0ac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c398:	e004      	b.n	800c3a4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f81a 	bl	800c3d4 <tcp_close_shutdown_fin>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	e000      	b.n	800c3a6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3710      	adds	r7, #16
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bdb0      	pop	{r4, r5, r7, pc}
 800c3ae:	bf00      	nop
 800c3b0:	08017d38 	.word	0x08017d38
 800c3b4:	08017e0c 	.word	0x08017e0c
 800c3b8:	08017d7c 	.word	0x08017d7c
 800c3bc:	08017e2c 	.word	0x08017e2c
 800c3c0:	2000d7dc 	.word	0x2000d7dc
 800c3c4:	2000d7d8 	.word	0x2000d7d8
 800c3c8:	2000d7f0 	.word	0x2000d7f0
 800c3cc:	2000d7e8 	.word	0x2000d7e8
 800c3d0:	2000d7e4 	.word	0x2000d7e4

0800c3d4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <tcp_close_shutdown_fin+0x1c>
 800c3e2:	4b2e      	ldr	r3, [pc, #184]	; (800c49c <tcp_close_shutdown_fin+0xc8>)
 800c3e4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c3e8:	492d      	ldr	r1, [pc, #180]	; (800c4a0 <tcp_close_shutdown_fin+0xcc>)
 800c3ea:	482e      	ldr	r0, [pc, #184]	; (800c4a4 <tcp_close_shutdown_fin+0xd0>)
 800c3ec:	f008 fccc 	bl	8014d88 <iprintf>

  switch (pcb->state) {
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	7d1b      	ldrb	r3, [r3, #20]
 800c3f4:	2b07      	cmp	r3, #7
 800c3f6:	d020      	beq.n	800c43a <tcp_close_shutdown_fin+0x66>
 800c3f8:	2b07      	cmp	r3, #7
 800c3fa:	dc2b      	bgt.n	800c454 <tcp_close_shutdown_fin+0x80>
 800c3fc:	2b03      	cmp	r3, #3
 800c3fe:	d002      	beq.n	800c406 <tcp_close_shutdown_fin+0x32>
 800c400:	2b04      	cmp	r3, #4
 800c402:	d00d      	beq.n	800c420 <tcp_close_shutdown_fin+0x4c>
 800c404:	e026      	b.n	800c454 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f004 fde0 	bl	8010fcc <tcp_send_fin>
 800c40c:	4603      	mov	r3, r0
 800c40e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d11f      	bne.n	800c458 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2205      	movs	r2, #5
 800c41c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c41e:	e01b      	b.n	800c458 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f004 fdd3 	bl	8010fcc <tcp_send_fin>
 800c426:	4603      	mov	r3, r0
 800c428:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d114      	bne.n	800c45c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2205      	movs	r2, #5
 800c436:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c438:	e010      	b.n	800c45c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f004 fdc6 	bl	8010fcc <tcp_send_fin>
 800c440:	4603      	mov	r3, r0
 800c442:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d109      	bne.n	800c460 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2209      	movs	r2, #9
 800c450:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c452:	e005      	b.n	800c460 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c454:	2300      	movs	r3, #0
 800c456:	e01c      	b.n	800c492 <tcp_close_shutdown_fin+0xbe>
      break;
 800c458:	bf00      	nop
 800c45a:	e002      	b.n	800c462 <tcp_close_shutdown_fin+0x8e>
      break;
 800c45c:	bf00      	nop
 800c45e:	e000      	b.n	800c462 <tcp_close_shutdown_fin+0x8e>
      break;
 800c460:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d103      	bne.n	800c472 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f004 feec 	bl	8011248 <tcp_output>
 800c470:	e00d      	b.n	800c48e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c47a:	d108      	bne.n	800c48e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	8b5b      	ldrh	r3, [r3, #26]
 800c480:	f043 0308 	orr.w	r3, r3, #8
 800c484:	b29a      	uxth	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c48a:	2300      	movs	r3, #0
 800c48c:	e001      	b.n	800c492 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	08017d38 	.word	0x08017d38
 800c4a0:	08017de8 	.word	0x08017de8
 800c4a4:	08017d7c 	.word	0x08017d7c

0800c4a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d109      	bne.n	800c4ca <tcp_close+0x22>
 800c4b6:	4b0f      	ldr	r3, [pc, #60]	; (800c4f4 <tcp_close+0x4c>)
 800c4b8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c4bc:	490e      	ldr	r1, [pc, #56]	; (800c4f8 <tcp_close+0x50>)
 800c4be:	480f      	ldr	r0, [pc, #60]	; (800c4fc <tcp_close+0x54>)
 800c4c0:	f008 fc62 	bl	8014d88 <iprintf>
 800c4c4:	f06f 030f 	mvn.w	r3, #15
 800c4c8:	e00f      	b.n	800c4ea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	7d1b      	ldrb	r3, [r3, #20]
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d006      	beq.n	800c4e0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	8b5b      	ldrh	r3, [r3, #26]
 800c4d6:	f043 0310 	orr.w	r3, r3, #16
 800c4da:	b29a      	uxth	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff fe94 	bl	800c210 <tcp_close_shutdown>
 800c4e8:	4603      	mov	r3, r0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	08017d38 	.word	0x08017d38
 800c4f8:	08017e48 	.word	0x08017e48
 800c4fc:	08017d7c 	.word	0x08017d7c

0800c500 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b08e      	sub	sp, #56	; 0x38
 800c504:	af04      	add	r7, sp, #16
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d107      	bne.n	800c520 <tcp_abandon+0x20>
 800c510:	4b52      	ldr	r3, [pc, #328]	; (800c65c <tcp_abandon+0x15c>)
 800c512:	f240 223d 	movw	r2, #573	; 0x23d
 800c516:	4952      	ldr	r1, [pc, #328]	; (800c660 <tcp_abandon+0x160>)
 800c518:	4852      	ldr	r0, [pc, #328]	; (800c664 <tcp_abandon+0x164>)
 800c51a:	f008 fc35 	bl	8014d88 <iprintf>
 800c51e:	e099      	b.n	800c654 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7d1b      	ldrb	r3, [r3, #20]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d106      	bne.n	800c536 <tcp_abandon+0x36>
 800c528:	4b4c      	ldr	r3, [pc, #304]	; (800c65c <tcp_abandon+0x15c>)
 800c52a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c52e:	494e      	ldr	r1, [pc, #312]	; (800c668 <tcp_abandon+0x168>)
 800c530:	484c      	ldr	r0, [pc, #304]	; (800c664 <tcp_abandon+0x164>)
 800c532:	f008 fc29 	bl	8014d88 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	7d1b      	ldrb	r3, [r3, #20]
 800c53a:	2b0a      	cmp	r3, #10
 800c53c:	d107      	bne.n	800c54e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c53e:	6879      	ldr	r1, [r7, #4]
 800c540:	484a      	ldr	r0, [pc, #296]	; (800c66c <tcp_abandon+0x16c>)
 800c542:	f001 fa69 	bl	800da18 <tcp_pcb_remove>
    tcp_free(pcb);
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff fdb0 	bl	800c0ac <tcp_free>
 800c54c:	e082      	b.n	800c654 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c54e:	2300      	movs	r3, #0
 800c550:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c552:	2300      	movs	r3, #0
 800c554:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c55a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c560:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c568:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	691b      	ldr	r3, [r3, #16]
 800c56e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	7d1b      	ldrb	r3, [r3, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d126      	bne.n	800c5c6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	8adb      	ldrh	r3, [r3, #22]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d02e      	beq.n	800c5de <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c580:	4b3b      	ldr	r3, [pc, #236]	; (800c670 <tcp_abandon+0x170>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	429a      	cmp	r2, r3
 800c588:	d105      	bne.n	800c596 <tcp_abandon+0x96>
 800c58a:	4b39      	ldr	r3, [pc, #228]	; (800c670 <tcp_abandon+0x170>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	4a37      	ldr	r2, [pc, #220]	; (800c670 <tcp_abandon+0x170>)
 800c592:	6013      	str	r3, [r2, #0]
 800c594:	e013      	b.n	800c5be <tcp_abandon+0xbe>
 800c596:	4b36      	ldr	r3, [pc, #216]	; (800c670 <tcp_abandon+0x170>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	61fb      	str	r3, [r7, #28]
 800c59c:	e00c      	b.n	800c5b8 <tcp_abandon+0xb8>
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d104      	bne.n	800c5b2 <tcp_abandon+0xb2>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68da      	ldr	r2, [r3, #12]
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	60da      	str	r2, [r3, #12]
 800c5b0:	e005      	b.n	800c5be <tcp_abandon+0xbe>
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	61fb      	str	r3, [r7, #28]
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d1ef      	bne.n	800c59e <tcp_abandon+0x9e>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	60da      	str	r2, [r3, #12]
 800c5c4:	e00b      	b.n	800c5de <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	8adb      	ldrh	r3, [r3, #22]
 800c5ce:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	4828      	ldr	r0, [pc, #160]	; (800c674 <tcp_abandon+0x174>)
 800c5d4:	f001 fa20 	bl	800da18 <tcp_pcb_remove>
 800c5d8:	4b27      	ldr	r3, [pc, #156]	; (800c678 <tcp_abandon+0x178>)
 800c5da:	2201      	movs	r2, #1
 800c5dc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d004      	beq.n	800c5f0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f000 fed6 	bl	800d39c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d004      	beq.n	800c602 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 fecd 	bl	800d39c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c606:	2b00      	cmp	r3, #0
 800c608:	d004      	beq.n	800c614 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 fec4 	bl	800d39c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00e      	beq.n	800c638 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c61a:	6879      	ldr	r1, [r7, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3304      	adds	r3, #4
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	8b12      	ldrh	r2, [r2, #24]
 800c624:	9202      	str	r2, [sp, #8]
 800c626:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c628:	9201      	str	r2, [sp, #4]
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	460b      	mov	r3, r1
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	69b9      	ldr	r1, [r7, #24]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f005 fbbc 	bl	8011db0 <tcp_rst>
    }
    last_state = pcb->state;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	7d1b      	ldrb	r3, [r3, #20]
 800c63c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7ff fd34 	bl	800c0ac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d004      	beq.n	800c654 <tcp_abandon+0x154>
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f06f 010c 	mvn.w	r1, #12
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	4798      	blx	r3
  }
}
 800c654:	3728      	adds	r7, #40	; 0x28
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	08017d38 	.word	0x08017d38
 800c660:	08017e7c 	.word	0x08017e7c
 800c664:	08017d7c 	.word	0x08017d7c
 800c668:	08017e98 	.word	0x08017e98
 800c66c:	2000d7ec 	.word	0x2000d7ec
 800c670:	2000d7e8 	.word	0x2000d7e8
 800c674:	2000d7dc 	.word	0x2000d7dc
 800c678:	2000d7d8 	.word	0x2000d7d8

0800c67c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b082      	sub	sp, #8
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c684:	2101      	movs	r1, #1
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff ff3a 	bl	800c500 <tcp_abandon>
}
 800c68c:	bf00      	nop
 800c68e:	3708      	adds	r7, #8
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}

0800c694 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b088      	sub	sp, #32
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c6a2:	2304      	movs	r3, #4
 800c6a4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d101      	bne.n	800c6b0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c6ac:	4b3e      	ldr	r3, [pc, #248]	; (800c7a8 <tcp_bind+0x114>)
 800c6ae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d109      	bne.n	800c6ca <tcp_bind+0x36>
 800c6b6:	4b3d      	ldr	r3, [pc, #244]	; (800c7ac <tcp_bind+0x118>)
 800c6b8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c6bc:	493c      	ldr	r1, [pc, #240]	; (800c7b0 <tcp_bind+0x11c>)
 800c6be:	483d      	ldr	r0, [pc, #244]	; (800c7b4 <tcp_bind+0x120>)
 800c6c0:	f008 fb62 	bl	8014d88 <iprintf>
 800c6c4:	f06f 030f 	mvn.w	r3, #15
 800c6c8:	e06a      	b.n	800c7a0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	7d1b      	ldrb	r3, [r3, #20]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d009      	beq.n	800c6e6 <tcp_bind+0x52>
 800c6d2:	4b36      	ldr	r3, [pc, #216]	; (800c7ac <tcp_bind+0x118>)
 800c6d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c6d8:	4937      	ldr	r1, [pc, #220]	; (800c7b8 <tcp_bind+0x124>)
 800c6da:	4836      	ldr	r0, [pc, #216]	; (800c7b4 <tcp_bind+0x120>)
 800c6dc:	f008 fb54 	bl	8014d88 <iprintf>
 800c6e0:	f06f 0305 	mvn.w	r3, #5
 800c6e4:	e05c      	b.n	800c7a0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c6e6:	88fb      	ldrh	r3, [r7, #6]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d109      	bne.n	800c700 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c6ec:	f000 f9f0 	bl	800cad0 <tcp_new_port>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c6f4:	88fb      	ldrh	r3, [r7, #6]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d135      	bne.n	800c766 <tcp_bind+0xd2>
      return ERR_BUF;
 800c6fa:	f06f 0301 	mvn.w	r3, #1
 800c6fe:	e04f      	b.n	800c7a0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c700:	2300      	movs	r3, #0
 800c702:	61fb      	str	r3, [r7, #28]
 800c704:	e02b      	b.n	800c75e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c706:	4a2d      	ldr	r2, [pc, #180]	; (800c7bc <tcp_bind+0x128>)
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	61bb      	str	r3, [r7, #24]
 800c712:	e01e      	b.n	800c752 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	8adb      	ldrh	r3, [r3, #22]
 800c718:	88fa      	ldrh	r2, [r7, #6]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d116      	bne.n	800c74c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c71e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c720:	2b00      	cmp	r3, #0
 800c722:	d010      	beq.n	800c746 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00c      	beq.n	800c746 <tcp_bind+0xb2>
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d009      	beq.n	800c746 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d005      	beq.n	800c746 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c742:	429a      	cmp	r2, r3
 800c744:	d102      	bne.n	800c74c <tcp_bind+0xb8>
              return ERR_USE;
 800c746:	f06f 0307 	mvn.w	r3, #7
 800c74a:	e029      	b.n	800c7a0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	61bb      	str	r3, [r7, #24]
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d1dd      	bne.n	800c714 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c758:	69fb      	ldr	r3, [r7, #28]
 800c75a:	3301      	adds	r3, #1
 800c75c:	61fb      	str	r3, [r7, #28]
 800c75e:	69fa      	ldr	r2, [r7, #28]
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	429a      	cmp	r2, r3
 800c764:	dbcf      	blt.n	800c706 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00c      	beq.n	800c786 <tcp_bind+0xf2>
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d008      	beq.n	800c786 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <tcp_bind+0xec>
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	e000      	b.n	800c782 <tcp_bind+0xee>
 800c780:	2300      	movs	r3, #0
 800c782:	68fa      	ldr	r2, [r7, #12]
 800c784:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	88fa      	ldrh	r2, [r7, #6]
 800c78a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c78c:	4b0c      	ldr	r3, [pc, #48]	; (800c7c0 <tcp_bind+0x12c>)
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	60da      	str	r2, [r3, #12]
 800c794:	4a0a      	ldr	r2, [pc, #40]	; (800c7c0 <tcp_bind+0x12c>)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	6013      	str	r3, [r2, #0]
 800c79a:	f005 fccb 	bl	8012134 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c79e:	2300      	movs	r3, #0
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3720      	adds	r7, #32
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	0801f038 	.word	0x0801f038
 800c7ac:	08017d38 	.word	0x08017d38
 800c7b0:	08017ecc 	.word	0x08017ecc
 800c7b4:	08017d7c 	.word	0x08017d7c
 800c7b8:	08017ee4 	.word	0x08017ee4
 800c7bc:	0801f010 	.word	0x0801f010
 800c7c0:	2000d7e8 	.word	0x2000d7e8

0800c7c4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d106      	bne.n	800c7e6 <tcp_accept_null+0x22>
 800c7d8:	4b07      	ldr	r3, [pc, #28]	; (800c7f8 <tcp_accept_null+0x34>)
 800c7da:	f240 320f 	movw	r2, #783	; 0x30f
 800c7de:	4907      	ldr	r1, [pc, #28]	; (800c7fc <tcp_accept_null+0x38>)
 800c7e0:	4807      	ldr	r0, [pc, #28]	; (800c800 <tcp_accept_null+0x3c>)
 800c7e2:	f008 fad1 	bl	8014d88 <iprintf>

  tcp_abort(pcb);
 800c7e6:	68b8      	ldr	r0, [r7, #8]
 800c7e8:	f7ff ff48 	bl	800c67c <tcp_abort>

  return ERR_ABRT;
 800c7ec:	f06f 030c 	mvn.w	r3, #12
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3710      	adds	r7, #16
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	08017d38 	.word	0x08017d38
 800c7fc:	08017f0c 	.word	0x08017f0c
 800c800:	08017d7c 	.word	0x08017d7c

0800c804 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c810:	78fb      	ldrb	r3, [r7, #3]
 800c812:	2200      	movs	r2, #0
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f806 	bl	800c828 <tcp_listen_with_backlog_and_err>
 800c81c:	4603      	mov	r3, r0
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3708      	adds	r7, #8
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
	...

0800c828 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60f8      	str	r0, [r7, #12]
 800c830:	460b      	mov	r3, r1
 800c832:	607a      	str	r2, [r7, #4]
 800c834:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c836:	2300      	movs	r3, #0
 800c838:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d109      	bne.n	800c854 <tcp_listen_with_backlog_and_err+0x2c>
 800c840:	4b47      	ldr	r3, [pc, #284]	; (800c960 <tcp_listen_with_backlog_and_err+0x138>)
 800c842:	f240 3259 	movw	r2, #857	; 0x359
 800c846:	4947      	ldr	r1, [pc, #284]	; (800c964 <tcp_listen_with_backlog_and_err+0x13c>)
 800c848:	4847      	ldr	r0, [pc, #284]	; (800c968 <tcp_listen_with_backlog_and_err+0x140>)
 800c84a:	f008 fa9d 	bl	8014d88 <iprintf>
 800c84e:	23f0      	movs	r3, #240	; 0xf0
 800c850:	76fb      	strb	r3, [r7, #27]
 800c852:	e079      	b.n	800c948 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	7d1b      	ldrb	r3, [r3, #20]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d009      	beq.n	800c870 <tcp_listen_with_backlog_and_err+0x48>
 800c85c:	4b40      	ldr	r3, [pc, #256]	; (800c960 <tcp_listen_with_backlog_and_err+0x138>)
 800c85e:	f240 325a 	movw	r2, #858	; 0x35a
 800c862:	4942      	ldr	r1, [pc, #264]	; (800c96c <tcp_listen_with_backlog_and_err+0x144>)
 800c864:	4840      	ldr	r0, [pc, #256]	; (800c968 <tcp_listen_with_backlog_and_err+0x140>)
 800c866:	f008 fa8f 	bl	8014d88 <iprintf>
 800c86a:	23f1      	movs	r3, #241	; 0xf1
 800c86c:	76fb      	strb	r3, [r7, #27]
 800c86e:	e06b      	b.n	800c948 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	7d1b      	ldrb	r3, [r3, #20]
 800c874:	2b01      	cmp	r3, #1
 800c876:	d104      	bne.n	800c882 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c87c:	23f7      	movs	r3, #247	; 0xf7
 800c87e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c880:	e062      	b.n	800c948 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c882:	2002      	movs	r0, #2
 800c884:	f7fe fb14 	bl	800aeb0 <memp_malloc>
 800c888:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d102      	bne.n	800c896 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c890:	23ff      	movs	r3, #255	; 0xff
 800c892:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c894:	e058      	b.n	800c948 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	691a      	ldr	r2, [r3, #16]
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	8ada      	ldrh	r2, [r3, #22]
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	7d5a      	ldrb	r2, [r3, #21]
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	7a5a      	ldrb	r2, [r3, #9]
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	7ada      	ldrb	r2, [r3, #11]
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	7a9a      	ldrb	r2, [r3, #10]
 800c8ce:	69fb      	ldr	r3, [r7, #28]
 800c8d0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	8adb      	ldrh	r3, [r3, #22]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d021      	beq.n	800c926 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8e2:	4b23      	ldr	r3, [pc, #140]	; (800c970 <tcp_listen_with_backlog_and_err+0x148>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d105      	bne.n	800c8f8 <tcp_listen_with_backlog_and_err+0xd0>
 800c8ec:	4b20      	ldr	r3, [pc, #128]	; (800c970 <tcp_listen_with_backlog_and_err+0x148>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	4a1f      	ldr	r2, [pc, #124]	; (800c970 <tcp_listen_with_backlog_and_err+0x148>)
 800c8f4:	6013      	str	r3, [r2, #0]
 800c8f6:	e013      	b.n	800c920 <tcp_listen_with_backlog_and_err+0xf8>
 800c8f8:	4b1d      	ldr	r3, [pc, #116]	; (800c970 <tcp_listen_with_backlog_and_err+0x148>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	617b      	str	r3, [r7, #20]
 800c8fe:	e00c      	b.n	800c91a <tcp_listen_with_backlog_and_err+0xf2>
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	429a      	cmp	r2, r3
 800c908:	d104      	bne.n	800c914 <tcp_listen_with_backlog_and_err+0xec>
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	68da      	ldr	r2, [r3, #12]
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	60da      	str	r2, [r3, #12]
 800c912:	e005      	b.n	800c920 <tcp_listen_with_backlog_and_err+0xf8>
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	617b      	str	r3, [r7, #20]
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1ef      	bne.n	800c900 <tcp_listen_with_backlog_and_err+0xd8>
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2200      	movs	r2, #0
 800c924:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f7ff fbc0 	bl	800c0ac <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c92c:	69fb      	ldr	r3, [r7, #28]
 800c92e:	4a11      	ldr	r2, [pc, #68]	; (800c974 <tcp_listen_with_backlog_and_err+0x14c>)
 800c930:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c932:	4b11      	ldr	r3, [pc, #68]	; (800c978 <tcp_listen_with_backlog_and_err+0x150>)
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	69fb      	ldr	r3, [r7, #28]
 800c938:	60da      	str	r2, [r3, #12]
 800c93a:	4a0f      	ldr	r2, [pc, #60]	; (800c978 <tcp_listen_with_backlog_and_err+0x150>)
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	f005 fbf8 	bl	8012134 <tcp_timer_needed>
  res = ERR_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d002      	beq.n	800c954 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	7efa      	ldrb	r2, [r7, #27]
 800c952:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c954:	69fb      	ldr	r3, [r7, #28]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3720      	adds	r7, #32
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	08017d38 	.word	0x08017d38
 800c964:	08017f2c 	.word	0x08017f2c
 800c968:	08017d7c 	.word	0x08017d7c
 800c96c:	08017f5c 	.word	0x08017f5c
 800c970:	2000d7e8 	.word	0x2000d7e8
 800c974:	0800c7c5 	.word	0x0800c7c5
 800c978:	2000d7e4 	.word	0x2000d7e4

0800c97c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d106      	bne.n	800c998 <tcp_update_rcv_ann_wnd+0x1c>
 800c98a:	4b25      	ldr	r3, [pc, #148]	; (800ca20 <tcp_update_rcv_ann_wnd+0xa4>)
 800c98c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c990:	4924      	ldr	r1, [pc, #144]	; (800ca24 <tcp_update_rcv_ann_wnd+0xa8>)
 800c992:	4825      	ldr	r0, [pc, #148]	; (800ca28 <tcp_update_rcv_ann_wnd+0xac>)
 800c994:	f008 f9f8 	bl	8014d88 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c9a0:	4413      	add	r3, r2
 800c9a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c9ac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c9b0:	bf28      	it	cs
 800c9b2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c9b6:	b292      	uxth	r2, r2
 800c9b8:	4413      	add	r3, r2
 800c9ba:	68fa      	ldr	r2, [r7, #12]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	db08      	blt.n	800c9d4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ce:	68fa      	ldr	r2, [r7, #12]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	e020      	b.n	800ca16 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	dd03      	ble.n	800c9ea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c9e8:	e014      	b.n	800ca14 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9fc:	d306      	bcc.n	800ca0c <tcp_update_rcv_ann_wnd+0x90>
 800c9fe:	4b08      	ldr	r3, [pc, #32]	; (800ca20 <tcp_update_rcv_ann_wnd+0xa4>)
 800ca00:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ca04:	4909      	ldr	r1, [pc, #36]	; (800ca2c <tcp_update_rcv_ann_wnd+0xb0>)
 800ca06:	4808      	ldr	r0, [pc, #32]	; (800ca28 <tcp_update_rcv_ann_wnd+0xac>)
 800ca08:	f008 f9be 	bl	8014d88 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ca14:	2300      	movs	r3, #0
  }
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	08017d38 	.word	0x08017d38
 800ca24:	08017f94 	.word	0x08017f94
 800ca28:	08017d7c 	.word	0x08017d7c
 800ca2c:	08017fb8 	.word	0x08017fb8

0800ca30 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d107      	bne.n	800ca52 <tcp_recved+0x22>
 800ca42:	4b1f      	ldr	r3, [pc, #124]	; (800cac0 <tcp_recved+0x90>)
 800ca44:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ca48:	491e      	ldr	r1, [pc, #120]	; (800cac4 <tcp_recved+0x94>)
 800ca4a:	481f      	ldr	r0, [pc, #124]	; (800cac8 <tcp_recved+0x98>)
 800ca4c:	f008 f99c 	bl	8014d88 <iprintf>
 800ca50:	e032      	b.n	800cab8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	7d1b      	ldrb	r3, [r3, #20]
 800ca56:	2b01      	cmp	r3, #1
 800ca58:	d106      	bne.n	800ca68 <tcp_recved+0x38>
 800ca5a:	4b19      	ldr	r3, [pc, #100]	; (800cac0 <tcp_recved+0x90>)
 800ca5c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ca60:	491a      	ldr	r1, [pc, #104]	; (800cacc <tcp_recved+0x9c>)
 800ca62:	4819      	ldr	r0, [pc, #100]	; (800cac8 <tcp_recved+0x98>)
 800ca64:	f008 f990 	bl	8014d88 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca6c:	887b      	ldrh	r3, [r7, #2]
 800ca6e:	4413      	add	r3, r2
 800ca70:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ca72:	89fb      	ldrh	r3, [r7, #14]
 800ca74:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca78:	d804      	bhi.n	800ca84 <tcp_recved+0x54>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca7e:	89fa      	ldrh	r2, [r7, #14]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d204      	bcs.n	800ca8e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ca8a:	851a      	strh	r2, [r3, #40]	; 0x28
 800ca8c:	e002      	b.n	800ca94 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	89fa      	ldrh	r2, [r7, #14]
 800ca92:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7ff ff71 	bl	800c97c <tcp_update_rcv_ann_wnd>
 800ca9a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800caa2:	d309      	bcc.n	800cab8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	8b5b      	ldrh	r3, [r3, #26]
 800caa8:	f043 0302 	orr.w	r3, r3, #2
 800caac:	b29a      	uxth	r2, r3
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f004 fbc8 	bl	8011248 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}
 800cabe:	bf00      	nop
 800cac0:	08017d38 	.word	0x08017d38
 800cac4:	08017fd4 	.word	0x08017fd4
 800cac8:	08017d7c 	.word	0x08017d7c
 800cacc:	08017fec 	.word	0x08017fec

0800cad0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cada:	4b1e      	ldr	r3, [pc, #120]	; (800cb54 <tcp_new_port+0x84>)
 800cadc:	881b      	ldrh	r3, [r3, #0]
 800cade:	3301      	adds	r3, #1
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	4b1c      	ldr	r3, [pc, #112]	; (800cb54 <tcp_new_port+0x84>)
 800cae4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cae6:	4b1b      	ldr	r3, [pc, #108]	; (800cb54 <tcp_new_port+0x84>)
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800caee:	4293      	cmp	r3, r2
 800caf0:	d103      	bne.n	800cafa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800caf2:	4b18      	ldr	r3, [pc, #96]	; (800cb54 <tcp_new_port+0x84>)
 800caf4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800caf8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cafa:	2300      	movs	r3, #0
 800cafc:	71fb      	strb	r3, [r7, #7]
 800cafe:	e01e      	b.n	800cb3e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb00:	79fb      	ldrb	r3, [r7, #7]
 800cb02:	4a15      	ldr	r2, [pc, #84]	; (800cb58 <tcp_new_port+0x88>)
 800cb04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	603b      	str	r3, [r7, #0]
 800cb0c:	e011      	b.n	800cb32 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	8ada      	ldrh	r2, [r3, #22]
 800cb12:	4b10      	ldr	r3, [pc, #64]	; (800cb54 <tcp_new_port+0x84>)
 800cb14:	881b      	ldrh	r3, [r3, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d108      	bne.n	800cb2c <tcp_new_port+0x5c>
        n++;
 800cb1a:	88bb      	ldrh	r3, [r7, #4]
 800cb1c:	3301      	adds	r3, #1
 800cb1e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cb20:	88bb      	ldrh	r3, [r7, #4]
 800cb22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cb26:	d3d8      	bcc.n	800cada <tcp_new_port+0xa>
          return 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	e00d      	b.n	800cb48 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	603b      	str	r3, [r7, #0]
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1ea      	bne.n	800cb0e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb38:	79fb      	ldrb	r3, [r7, #7]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	71fb      	strb	r3, [r7, #7]
 800cb3e:	79fb      	ldrb	r3, [r7, #7]
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	d9dd      	bls.n	800cb00 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cb44:	4b03      	ldr	r3, [pc, #12]	; (800cb54 <tcp_new_port+0x84>)
 800cb46:	881b      	ldrh	r3, [r3, #0]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	370c      	adds	r7, #12
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	200004b2 	.word	0x200004b2
 800cb58:	0801f010 	.word	0x0801f010

0800cb5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cb5c:	b5b0      	push	{r4, r5, r7, lr}
 800cb5e:	b090      	sub	sp, #64	; 0x40
 800cb60:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cb62:	2300      	movs	r3, #0
 800cb64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cb68:	4b94      	ldr	r3, [pc, #592]	; (800cdbc <tcp_slowtmr+0x260>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	4a93      	ldr	r2, [pc, #588]	; (800cdbc <tcp_slowtmr+0x260>)
 800cb70:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cb72:	4b93      	ldr	r3, [pc, #588]	; (800cdc0 <tcp_slowtmr+0x264>)
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	3301      	adds	r3, #1
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	4b91      	ldr	r3, [pc, #580]	; (800cdc0 <tcp_slowtmr+0x264>)
 800cb7c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cb82:	4b90      	ldr	r3, [pc, #576]	; (800cdc4 <tcp_slowtmr+0x268>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cb88:	e29f      	b.n	800d0ca <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8c:	7d1b      	ldrb	r3, [r3, #20]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d106      	bne.n	800cba0 <tcp_slowtmr+0x44>
 800cb92:	4b8d      	ldr	r3, [pc, #564]	; (800cdc8 <tcp_slowtmr+0x26c>)
 800cb94:	f240 42be 	movw	r2, #1214	; 0x4be
 800cb98:	498c      	ldr	r1, [pc, #560]	; (800cdcc <tcp_slowtmr+0x270>)
 800cb9a:	488d      	ldr	r0, [pc, #564]	; (800cdd0 <tcp_slowtmr+0x274>)
 800cb9c:	f008 f8f4 	bl	8014d88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	7d1b      	ldrb	r3, [r3, #20]
 800cba4:	2b01      	cmp	r3, #1
 800cba6:	d106      	bne.n	800cbb6 <tcp_slowtmr+0x5a>
 800cba8:	4b87      	ldr	r3, [pc, #540]	; (800cdc8 <tcp_slowtmr+0x26c>)
 800cbaa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cbae:	4989      	ldr	r1, [pc, #548]	; (800cdd4 <tcp_slowtmr+0x278>)
 800cbb0:	4887      	ldr	r0, [pc, #540]	; (800cdd0 <tcp_slowtmr+0x274>)
 800cbb2:	f008 f8e9 	bl	8014d88 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb8:	7d1b      	ldrb	r3, [r3, #20]
 800cbba:	2b0a      	cmp	r3, #10
 800cbbc:	d106      	bne.n	800cbcc <tcp_slowtmr+0x70>
 800cbbe:	4b82      	ldr	r3, [pc, #520]	; (800cdc8 <tcp_slowtmr+0x26c>)
 800cbc0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cbc4:	4984      	ldr	r1, [pc, #528]	; (800cdd8 <tcp_slowtmr+0x27c>)
 800cbc6:	4882      	ldr	r0, [pc, #520]	; (800cdd0 <tcp_slowtmr+0x274>)
 800cbc8:	f008 f8de 	bl	8014d88 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	7f9a      	ldrb	r2, [r3, #30]
 800cbd0:	4b7b      	ldr	r3, [pc, #492]	; (800cdc0 <tcp_slowtmr+0x264>)
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d105      	bne.n	800cbe4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cbd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cbe2:	e272      	b.n	800d0ca <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cbe4:	4b76      	ldr	r3, [pc, #472]	; (800cdc0 <tcp_slowtmr+0x264>)
 800cbe6:	781a      	ldrb	r2, [r3, #0]
 800cbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbea:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfa:	7d1b      	ldrb	r3, [r3, #20]
 800cbfc:	2b02      	cmp	r3, #2
 800cbfe:	d10a      	bne.n	800cc16 <tcp_slowtmr+0xba>
 800cc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc06:	2b05      	cmp	r3, #5
 800cc08:	d905      	bls.n	800cc16 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cc0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc0e:	3301      	adds	r3, #1
 800cc10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc14:	e11e      	b.n	800ce54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cc16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc1c:	2b0b      	cmp	r3, #11
 800cc1e:	d905      	bls.n	800cc2c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cc20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc24:	3301      	adds	r3, #1
 800cc26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc2a:	e113      	b.n	800ce54 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d075      	beq.n	800cd22 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d006      	beq.n	800cc4c <tcp_slowtmr+0xf0>
 800cc3e:	4b62      	ldr	r3, [pc, #392]	; (800cdc8 <tcp_slowtmr+0x26c>)
 800cc40:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cc44:	4965      	ldr	r1, [pc, #404]	; (800cddc <tcp_slowtmr+0x280>)
 800cc46:	4862      	ldr	r0, [pc, #392]	; (800cdd0 <tcp_slowtmr+0x274>)
 800cc48:	f008 f89e 	bl	8014d88 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d106      	bne.n	800cc62 <tcp_slowtmr+0x106>
 800cc54:	4b5c      	ldr	r3, [pc, #368]	; (800cdc8 <tcp_slowtmr+0x26c>)
 800cc56:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cc5a:	4961      	ldr	r1, [pc, #388]	; (800cde0 <tcp_slowtmr+0x284>)
 800cc5c:	485c      	ldr	r0, [pc, #368]	; (800cdd0 <tcp_slowtmr+0x274>)
 800cc5e:	f008 f893 	bl	8014d88 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc68:	2b0b      	cmp	r3, #11
 800cc6a:	d905      	bls.n	800cc78 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc70:	3301      	adds	r3, #1
 800cc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc76:	e0ed      	b.n	800ce54 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	4a58      	ldr	r2, [pc, #352]	; (800cde4 <tcp_slowtmr+0x288>)
 800cc82:	5cd3      	ldrb	r3, [r2, r3]
 800cc84:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc8c:	7c7a      	ldrb	r2, [r7, #17]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d907      	bls.n	800cca2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc98:	3301      	adds	r3, #1
 800cc9a:	b2da      	uxtb	r2, r3
 800cc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cca8:	7c7a      	ldrb	r2, [r7, #17]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	f200 80d2 	bhi.w	800ce54 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ccb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d108      	bne.n	800ccd0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ccbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccc0:	f005 f96a 	bl	8011f98 <tcp_zero_window_probe>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d014      	beq.n	800ccf4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ccca:	2300      	movs	r3, #0
 800cccc:	623b      	str	r3, [r7, #32]
 800ccce:	e011      	b.n	800ccf4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccda:	f004 f82f 	bl	8010d3c <tcp_split_unsent_seg>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d107      	bne.n	800ccf4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cce4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cce6:	f004 faaf 	bl	8011248 <tcp_output>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d101      	bne.n	800ccf4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 80ac 	beq.w	800ce54 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd06:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cd0a:	2b06      	cmp	r3, #6
 800cd0c:	f200 80a2 	bhi.w	800ce54 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cd16:	3301      	adds	r3, #1
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cd20:	e098      	b.n	800ce54 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cd22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	db0f      	blt.n	800cd4c <tcp_slowtmr+0x1f0>
 800cd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d008      	beq.n	800cd4c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	3301      	adds	r3, #1
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	b21a      	sxth	r2, r3
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd54:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	db7b      	blt.n	800ce54 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cd5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd5e:	f004 fd65 	bl	801182c <tcp_rexmit_rto_prepare>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d007      	beq.n	800cd78 <tcp_slowtmr+0x21c>
 800cd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d171      	bne.n	800ce54 <tcp_slowtmr+0x2f8>
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d06d      	beq.n	800ce54 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	7d1b      	ldrb	r3, [r3, #20]
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d03a      	beq.n	800cdf6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd86:	2b0c      	cmp	r3, #12
 800cd88:	bf28      	it	cs
 800cd8a:	230c      	movcs	r3, #12
 800cd8c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd94:	10db      	asrs	r3, r3, #3
 800cd96:	b21b      	sxth	r3, r3
 800cd98:	461a      	mov	r2, r3
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cda0:	4413      	add	r3, r2
 800cda2:	7efa      	ldrb	r2, [r7, #27]
 800cda4:	4910      	ldr	r1, [pc, #64]	; (800cde8 <tcp_slowtmr+0x28c>)
 800cda6:	5c8a      	ldrb	r2, [r1, r2]
 800cda8:	4093      	lsls	r3, r2
 800cdaa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cdb2:	4293      	cmp	r3, r2
 800cdb4:	dc1a      	bgt.n	800cdec <tcp_slowtmr+0x290>
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	b21a      	sxth	r2, r3
 800cdba:	e019      	b.n	800cdf0 <tcp_slowtmr+0x294>
 800cdbc:	2000d7e0 	.word	0x2000d7e0
 800cdc0:	20000a16 	.word	0x20000a16
 800cdc4:	2000d7dc 	.word	0x2000d7dc
 800cdc8:	08017d38 	.word	0x08017d38
 800cdcc:	0801807c 	.word	0x0801807c
 800cdd0:	08017d7c 	.word	0x08017d7c
 800cdd4:	080180a8 	.word	0x080180a8
 800cdd8:	080180d4 	.word	0x080180d4
 800cddc:	08018104 	.word	0x08018104
 800cde0:	08018138 	.word	0x08018138
 800cde4:	0801f008 	.word	0x0801f008
 800cde8:	0801eff8 	.word	0x0801eff8
 800cdec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ce02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	bf28      	it	cs
 800ce0c:	4613      	movcs	r3, r2
 800ce0e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ce10:	8a7b      	ldrh	r3, [r7, #18]
 800ce12:	085b      	lsrs	r3, r3, #1
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ce1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce26:	005b      	lsls	r3, r3, #1
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d206      	bcs.n	800ce3c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ce2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce32:	005b      	lsls	r3, r3, #1
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ce46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ce4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce50:	f004 fd5c 	bl	801190c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ce54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce56:	7d1b      	ldrb	r3, [r3, #20]
 800ce58:	2b06      	cmp	r3, #6
 800ce5a:	d111      	bne.n	800ce80 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ce5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5e:	8b5b      	ldrh	r3, [r3, #26]
 800ce60:	f003 0310 	and.w	r3, r3, #16
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00b      	beq.n	800ce80 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce68:	4b9d      	ldr	r3, [pc, #628]	; (800d0e0 <tcp_slowtmr+0x584>)
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	6a1b      	ldr	r3, [r3, #32]
 800ce70:	1ad3      	subs	r3, r2, r3
 800ce72:	2b28      	cmp	r3, #40	; 0x28
 800ce74:	d904      	bls.n	800ce80 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ce76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce82:	7a5b      	ldrb	r3, [r3, #9]
 800ce84:	f003 0308 	and.w	r3, r3, #8
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d04c      	beq.n	800cf26 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ce8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce8e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce90:	2b04      	cmp	r3, #4
 800ce92:	d003      	beq.n	800ce9c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ce94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce96:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ce98:	2b07      	cmp	r3, #7
 800ce9a:	d144      	bne.n	800cf26 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce9c:	4b90      	ldr	r3, [pc, #576]	; (800d0e0 <tcp_slowtmr+0x584>)
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	6a1b      	ldr	r3, [r3, #32]
 800cea4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ceac:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ceb0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ceb4:	498b      	ldr	r1, [pc, #556]	; (800d0e4 <tcp_slowtmr+0x588>)
 800ceb6:	fba1 1303 	umull	r1, r3, r1, r3
 800ceba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d90a      	bls.n	800ced6 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cec4:	3301      	adds	r3, #1
 800cec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ceca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cece:	3301      	adds	r3, #1
 800ced0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ced4:	e027      	b.n	800cf26 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ced6:	4b82      	ldr	r3, [pc, #520]	; (800d0e0 <tcp_slowtmr+0x584>)
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cedc:	6a1b      	ldr	r3, [r3, #32]
 800cede:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ceec:	4618      	mov	r0, r3
 800ceee:	4b7e      	ldr	r3, [pc, #504]	; (800d0e8 <tcp_slowtmr+0x58c>)
 800cef0:	fb03 f300 	mul.w	r3, r3, r0
 800cef4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cef6:	497b      	ldr	r1, [pc, #492]	; (800d0e4 <tcp_slowtmr+0x588>)
 800cef8:	fba1 1303 	umull	r1, r3, r1, r3
 800cefc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d911      	bls.n	800cf26 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800cf02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf04:	f005 f808 	bl	8011f18 <tcp_keepalive>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cf0e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d107      	bne.n	800cf26 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf18:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cf1c:	3301      	adds	r3, #1
 800cf1e:	b2da      	uxtb	r2, r3
 800cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf22:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d011      	beq.n	800cf52 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cf2e:	4b6c      	ldr	r3, [pc, #432]	; (800d0e0 <tcp_slowtmr+0x584>)
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf34:	6a1b      	ldr	r3, [r3, #32]
 800cf36:	1ad2      	subs	r2, r2, r3
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cf3e:	4619      	mov	r1, r3
 800cf40:	460b      	mov	r3, r1
 800cf42:	005b      	lsls	r3, r3, #1
 800cf44:	440b      	add	r3, r1
 800cf46:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d302      	bcc.n	800cf52 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cf4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf4e:	f000 fec7 	bl	800dce0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf54:	7d1b      	ldrb	r3, [r3, #20]
 800cf56:	2b03      	cmp	r3, #3
 800cf58:	d10b      	bne.n	800cf72 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf5a:	4b61      	ldr	r3, [pc, #388]	; (800d0e0 <tcp_slowtmr+0x584>)
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf60:	6a1b      	ldr	r3, [r3, #32]
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	2b28      	cmp	r3, #40	; 0x28
 800cf66:	d904      	bls.n	800cf72 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cf68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cf72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf74:	7d1b      	ldrb	r3, [r3, #20]
 800cf76:	2b09      	cmp	r3, #9
 800cf78:	d10b      	bne.n	800cf92 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf7a:	4b59      	ldr	r3, [pc, #356]	; (800d0e0 <tcp_slowtmr+0x584>)
 800cf7c:	681a      	ldr	r2, [r3, #0]
 800cf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf80:	6a1b      	ldr	r3, [r3, #32]
 800cf82:	1ad3      	subs	r3, r2, r3
 800cf84:	2bf0      	cmp	r3, #240	; 0xf0
 800cf86:	d904      	bls.n	800cf92 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800cf88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cf92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d060      	beq.n	800d05c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cf9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cfa0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cfa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfa4:	f000 fce8 	bl	800d978 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d010      	beq.n	800cfd0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cfae:	4b4f      	ldr	r3, [pc, #316]	; (800d0ec <tcp_slowtmr+0x590>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d106      	bne.n	800cfc6 <tcp_slowtmr+0x46a>
 800cfb8:	4b4d      	ldr	r3, [pc, #308]	; (800d0f0 <tcp_slowtmr+0x594>)
 800cfba:	f240 526d 	movw	r2, #1389	; 0x56d
 800cfbe:	494d      	ldr	r1, [pc, #308]	; (800d0f4 <tcp_slowtmr+0x598>)
 800cfc0:	484d      	ldr	r0, [pc, #308]	; (800d0f8 <tcp_slowtmr+0x59c>)
 800cfc2:	f007 fee1 	bl	8014d88 <iprintf>
        prev->next = pcb->next;
 800cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc8:	68da      	ldr	r2, [r3, #12]
 800cfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfcc:	60da      	str	r2, [r3, #12]
 800cfce:	e00f      	b.n	800cff0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cfd0:	4b46      	ldr	r3, [pc, #280]	; (800d0ec <tcp_slowtmr+0x590>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d006      	beq.n	800cfe8 <tcp_slowtmr+0x48c>
 800cfda:	4b45      	ldr	r3, [pc, #276]	; (800d0f0 <tcp_slowtmr+0x594>)
 800cfdc:	f240 5271 	movw	r2, #1393	; 0x571
 800cfe0:	4946      	ldr	r1, [pc, #280]	; (800d0fc <tcp_slowtmr+0x5a0>)
 800cfe2:	4845      	ldr	r0, [pc, #276]	; (800d0f8 <tcp_slowtmr+0x59c>)
 800cfe4:	f007 fed0 	bl	8014d88 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	4a3f      	ldr	r2, [pc, #252]	; (800d0ec <tcp_slowtmr+0x590>)
 800cfee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d013      	beq.n	800d020 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d000:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d004:	3304      	adds	r3, #4
 800d006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d008:	8ad2      	ldrh	r2, [r2, #22]
 800d00a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d00c:	8b09      	ldrh	r1, [r1, #24]
 800d00e:	9102      	str	r1, [sp, #8]
 800d010:	9201      	str	r2, [sp, #4]
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	462b      	mov	r3, r5
 800d016:	4622      	mov	r2, r4
 800d018:	4601      	mov	r1, r0
 800d01a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d01c:	f004 fec8 	bl	8011db0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d022:	691b      	ldr	r3, [r3, #16]
 800d024:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d028:	7d1b      	ldrb	r3, [r3, #20]
 800d02a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d036:	6838      	ldr	r0, [r7, #0]
 800d038:	f7ff f838 	bl	800c0ac <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d03c:	4b30      	ldr	r3, [pc, #192]	; (800d100 <tcp_slowtmr+0x5a4>)
 800d03e:	2200      	movs	r2, #0
 800d040:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d004      	beq.n	800d052 <tcp_slowtmr+0x4f6>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f06f 010c 	mvn.w	r1, #12
 800d04e:	68b8      	ldr	r0, [r7, #8]
 800d050:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d052:	4b2b      	ldr	r3, [pc, #172]	; (800d100 <tcp_slowtmr+0x5a4>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d037      	beq.n	800d0ca <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d05a:	e590      	b.n	800cb7e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d062:	68db      	ldr	r3, [r3, #12]
 800d064:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d068:	7f1b      	ldrb	r3, [r3, #28]
 800d06a:	3301      	adds	r3, #1
 800d06c:	b2da      	uxtb	r2, r3
 800d06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d070:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	7f1a      	ldrb	r2, [r3, #28]
 800d076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d078:	7f5b      	ldrb	r3, [r3, #29]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d325      	bcc.n	800d0ca <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d080:	2200      	movs	r2, #0
 800d082:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d084:	4b1e      	ldr	r3, [pc, #120]	; (800d100 <tcp_slowtmr+0x5a4>)
 800d086:	2200      	movs	r2, #0
 800d088:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00b      	beq.n	800d0ac <tcp_slowtmr+0x550>
 800d094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d09a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d09c:	6912      	ldr	r2, [r2, #16]
 800d09e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0a0:	4610      	mov	r0, r2
 800d0a2:	4798      	blx	r3
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d0aa:	e002      	b.n	800d0b2 <tcp_slowtmr+0x556>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d0b2:	4b13      	ldr	r3, [pc, #76]	; (800d100 <tcp_slowtmr+0x5a4>)
 800d0b4:	781b      	ldrb	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d000      	beq.n	800d0bc <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d0ba:	e560      	b.n	800cb7e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d0bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d102      	bne.n	800d0ca <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0c6:	f004 f8bf 	bl	8011248 <tcp_output>
  while (pcb != NULL) {
 800d0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f47f ad5c 	bne.w	800cb8a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d0d6:	4b0b      	ldr	r3, [pc, #44]	; (800d104 <tcp_slowtmr+0x5a8>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d0dc:	e067      	b.n	800d1ae <tcp_slowtmr+0x652>
 800d0de:	bf00      	nop
 800d0e0:	2000d7e0 	.word	0x2000d7e0
 800d0e4:	10624dd3 	.word	0x10624dd3
 800d0e8:	000124f8 	.word	0x000124f8
 800d0ec:	2000d7dc 	.word	0x2000d7dc
 800d0f0:	08017d38 	.word	0x08017d38
 800d0f4:	08018170 	.word	0x08018170
 800d0f8:	08017d7c 	.word	0x08017d7c
 800d0fc:	0801819c 	.word	0x0801819c
 800d100:	2000d7d8 	.word	0x2000d7d8
 800d104:	2000d7ec 	.word	0x2000d7ec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10a:	7d1b      	ldrb	r3, [r3, #20]
 800d10c:	2b0a      	cmp	r3, #10
 800d10e:	d006      	beq.n	800d11e <tcp_slowtmr+0x5c2>
 800d110:	4b2b      	ldr	r3, [pc, #172]	; (800d1c0 <tcp_slowtmr+0x664>)
 800d112:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d116:	492b      	ldr	r1, [pc, #172]	; (800d1c4 <tcp_slowtmr+0x668>)
 800d118:	482b      	ldr	r0, [pc, #172]	; (800d1c8 <tcp_slowtmr+0x66c>)
 800d11a:	f007 fe35 	bl	8014d88 <iprintf>
    pcb_remove = 0;
 800d11e:	2300      	movs	r3, #0
 800d120:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d124:	4b29      	ldr	r3, [pc, #164]	; (800d1cc <tcp_slowtmr+0x670>)
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	6a1b      	ldr	r3, [r3, #32]
 800d12c:	1ad3      	subs	r3, r2, r3
 800d12e:	2bf0      	cmp	r3, #240	; 0xf0
 800d130:	d904      	bls.n	800d13c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d136:	3301      	adds	r3, #1
 800d138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d140:	2b00      	cmp	r3, #0
 800d142:	d02f      	beq.n	800d1a4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d146:	f000 fc17 	bl	800d978 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d010      	beq.n	800d172 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d150:	4b1f      	ldr	r3, [pc, #124]	; (800d1d0 <tcp_slowtmr+0x674>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d156:	429a      	cmp	r2, r3
 800d158:	d106      	bne.n	800d168 <tcp_slowtmr+0x60c>
 800d15a:	4b19      	ldr	r3, [pc, #100]	; (800d1c0 <tcp_slowtmr+0x664>)
 800d15c:	f240 52af 	movw	r2, #1455	; 0x5af
 800d160:	491c      	ldr	r1, [pc, #112]	; (800d1d4 <tcp_slowtmr+0x678>)
 800d162:	4819      	ldr	r0, [pc, #100]	; (800d1c8 <tcp_slowtmr+0x66c>)
 800d164:	f007 fe10 	bl	8014d88 <iprintf>
        prev->next = pcb->next;
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	68da      	ldr	r2, [r3, #12]
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	60da      	str	r2, [r3, #12]
 800d170:	e00f      	b.n	800d192 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d172:	4b17      	ldr	r3, [pc, #92]	; (800d1d0 <tcp_slowtmr+0x674>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d178:	429a      	cmp	r2, r3
 800d17a:	d006      	beq.n	800d18a <tcp_slowtmr+0x62e>
 800d17c:	4b10      	ldr	r3, [pc, #64]	; (800d1c0 <tcp_slowtmr+0x664>)
 800d17e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d182:	4915      	ldr	r1, [pc, #84]	; (800d1d8 <tcp_slowtmr+0x67c>)
 800d184:	4810      	ldr	r0, [pc, #64]	; (800d1c8 <tcp_slowtmr+0x66c>)
 800d186:	f007 fdff 	bl	8014d88 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	4a10      	ldr	r2, [pc, #64]	; (800d1d0 <tcp_slowtmr+0x674>)
 800d190:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d194:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d19c:	69f8      	ldr	r0, [r7, #28]
 800d19e:	f7fe ff85 	bl	800c0ac <tcp_free>
 800d1a2:	e004      	b.n	800d1ae <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d1a9      	bne.n	800d108 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d1b4:	bf00      	nop
 800d1b6:	bf00      	nop
 800d1b8:	3730      	adds	r7, #48	; 0x30
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bdb0      	pop	{r4, r5, r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	08017d38 	.word	0x08017d38
 800d1c4:	080181c8 	.word	0x080181c8
 800d1c8:	08017d7c 	.word	0x08017d7c
 800d1cc:	2000d7e0 	.word	0x2000d7e0
 800d1d0:	2000d7ec 	.word	0x2000d7ec
 800d1d4:	080181f8 	.word	0x080181f8
 800d1d8:	08018220 	.word	0x08018220

0800d1dc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d1e2:	4b2d      	ldr	r3, [pc, #180]	; (800d298 <tcp_fasttmr+0xbc>)
 800d1e4:	781b      	ldrb	r3, [r3, #0]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	4b2b      	ldr	r3, [pc, #172]	; (800d298 <tcp_fasttmr+0xbc>)
 800d1ec:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d1ee:	4b2b      	ldr	r3, [pc, #172]	; (800d29c <tcp_fasttmr+0xc0>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d1f4:	e048      	b.n	800d288 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	7f9a      	ldrb	r2, [r3, #30]
 800d1fa:	4b27      	ldr	r3, [pc, #156]	; (800d298 <tcp_fasttmr+0xbc>)
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d03f      	beq.n	800d282 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d202:	4b25      	ldr	r3, [pc, #148]	; (800d298 <tcp_fasttmr+0xbc>)
 800d204:	781a      	ldrb	r2, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	8b5b      	ldrh	r3, [r3, #26]
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	2b00      	cmp	r3, #0
 800d214:	d010      	beq.n	800d238 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	8b5b      	ldrh	r3, [r3, #26]
 800d21a:	f043 0302 	orr.w	r3, r3, #2
 800d21e:	b29a      	uxth	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f004 f80f 	bl	8011248 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	8b5b      	ldrh	r3, [r3, #26]
 800d22e:	f023 0303 	bic.w	r3, r3, #3
 800d232:	b29a      	uxth	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	8b5b      	ldrh	r3, [r3, #26]
 800d23c:	f003 0308 	and.w	r3, r3, #8
 800d240:	2b00      	cmp	r3, #0
 800d242:	d009      	beq.n	800d258 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	8b5b      	ldrh	r3, [r3, #26]
 800d248:	f023 0308 	bic.w	r3, r3, #8
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f7ff f8be 	bl	800c3d4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d262:	2b00      	cmp	r3, #0
 800d264:	d00a      	beq.n	800d27c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d266:	4b0e      	ldr	r3, [pc, #56]	; (800d2a0 <tcp_fasttmr+0xc4>)
 800d268:	2200      	movs	r2, #0
 800d26a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 f819 	bl	800d2a4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d272:	4b0b      	ldr	r3, [pc, #44]	; (800d2a0 <tcp_fasttmr+0xc4>)
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d000      	beq.n	800d27c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d27a:	e7b8      	b.n	800d1ee <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	607b      	str	r3, [r7, #4]
 800d280:	e002      	b.n	800d288 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1b3      	bne.n	800d1f6 <tcp_fasttmr+0x1a>
    }
  }
}
 800d28e:	bf00      	nop
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	20000a16 	.word	0x20000a16
 800d29c:	2000d7dc 	.word	0x2000d7dc
 800d2a0:	2000d7d8 	.word	0x2000d7d8

0800d2a4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d2a4:	b590      	push	{r4, r7, lr}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d109      	bne.n	800d2c6 <tcp_process_refused_data+0x22>
 800d2b2:	4b37      	ldr	r3, [pc, #220]	; (800d390 <tcp_process_refused_data+0xec>)
 800d2b4:	f240 6209 	movw	r2, #1545	; 0x609
 800d2b8:	4936      	ldr	r1, [pc, #216]	; (800d394 <tcp_process_refused_data+0xf0>)
 800d2ba:	4837      	ldr	r0, [pc, #220]	; (800d398 <tcp_process_refused_data+0xf4>)
 800d2bc:	f007 fd64 	bl	8014d88 <iprintf>
 800d2c0:	f06f 030f 	mvn.w	r3, #15
 800d2c4:	e060      	b.n	800d388 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2ca:	7b5b      	ldrb	r3, [r3, #13]
 800d2cc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2d2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d00b      	beq.n	800d2fc <tcp_process_refused_data+0x58>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6918      	ldr	r0, [r3, #16]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	68ba      	ldr	r2, [r7, #8]
 800d2f2:	6879      	ldr	r1, [r7, #4]
 800d2f4:	47a0      	blx	r4
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	73fb      	strb	r3, [r7, #15]
 800d2fa:	e007      	b.n	800d30c <tcp_process_refused_data+0x68>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	2000      	movs	r0, #0
 800d304:	f000 f8c2 	bl	800d48c <tcp_recv_null>
 800d308:	4603      	mov	r3, r0
 800d30a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d12a      	bne.n	800d36a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d314:	7bbb      	ldrb	r3, [r7, #14]
 800d316:	f003 0320 	and.w	r3, r3, #32
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d033      	beq.n	800d386 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d322:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d326:	d005      	beq.n	800d334 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d32c:	3301      	adds	r3, #1
 800d32e:	b29a      	uxth	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00b      	beq.n	800d356 <tcp_process_refused_data+0xb2>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6918      	ldr	r0, [r3, #16]
 800d348:	2300      	movs	r3, #0
 800d34a:	2200      	movs	r2, #0
 800d34c:	6879      	ldr	r1, [r7, #4]
 800d34e:	47a0      	blx	r4
 800d350:	4603      	mov	r3, r0
 800d352:	73fb      	strb	r3, [r7, #15]
 800d354:	e001      	b.n	800d35a <tcp_process_refused_data+0xb6>
 800d356:	2300      	movs	r3, #0
 800d358:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d35a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d35e:	f113 0f0d 	cmn.w	r3, #13
 800d362:	d110      	bne.n	800d386 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d364:	f06f 030c 	mvn.w	r3, #12
 800d368:	e00e      	b.n	800d388 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d36a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d36e:	f113 0f0d 	cmn.w	r3, #13
 800d372:	d102      	bne.n	800d37a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d374:	f06f 030c 	mvn.w	r3, #12
 800d378:	e006      	b.n	800d388 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d380:	f06f 0304 	mvn.w	r3, #4
 800d384:	e000      	b.n	800d388 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd90      	pop	{r4, r7, pc}
 800d390:	08017d38 	.word	0x08017d38
 800d394:	08018248 	.word	0x08018248
 800d398:	08017d7c 	.word	0x08017d7c

0800d39c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d3a4:	e007      	b.n	800d3b6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f000 f80a 	bl	800d3c6 <tcp_seg_free>
    seg = next;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1f4      	bne.n	800d3a6 <tcp_segs_free+0xa>
  }
}
 800d3bc:	bf00      	nop
 800d3be:	bf00      	nop
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b082      	sub	sp, #8
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00c      	beq.n	800d3ee <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685b      	ldr	r3, [r3, #4]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d004      	beq.n	800d3e6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fe fbc3 	bl	800bb6c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d3e6:	6879      	ldr	r1, [r7, #4]
 800d3e8:	2003      	movs	r0, #3
 800d3ea:	f7fd fdad 	bl	800af48 <memp_free>
  }
}
 800d3ee:	bf00      	nop
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
	...

0800d3f8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	460b      	mov	r3, r1
 800d402:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d107      	bne.n	800d41a <tcp_setprio+0x22>
 800d40a:	4b07      	ldr	r3, [pc, #28]	; (800d428 <tcp_setprio+0x30>)
 800d40c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800d410:	4906      	ldr	r1, [pc, #24]	; (800d42c <tcp_setprio+0x34>)
 800d412:	4807      	ldr	r0, [pc, #28]	; (800d430 <tcp_setprio+0x38>)
 800d414:	f007 fcb8 	bl	8014d88 <iprintf>
 800d418:	e002      	b.n	800d420 <tcp_setprio+0x28>

  pcb->prio = prio;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	78fa      	ldrb	r2, [r7, #3]
 800d41e:	755a      	strb	r2, [r3, #21]
}
 800d420:	3708      	adds	r7, #8
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	08017d38 	.word	0x08017d38
 800d42c:	08018270 	.word	0x08018270
 800d430:	08017d7c 	.word	0x08017d7c

0800d434 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d106      	bne.n	800d450 <tcp_seg_copy+0x1c>
 800d442:	4b0f      	ldr	r3, [pc, #60]	; (800d480 <tcp_seg_copy+0x4c>)
 800d444:	f240 6282 	movw	r2, #1666	; 0x682
 800d448:	490e      	ldr	r1, [pc, #56]	; (800d484 <tcp_seg_copy+0x50>)
 800d44a:	480f      	ldr	r0, [pc, #60]	; (800d488 <tcp_seg_copy+0x54>)
 800d44c:	f007 fc9c 	bl	8014d88 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d450:	2003      	movs	r0, #3
 800d452:	f7fd fd2d 	bl	800aeb0 <memp_malloc>
 800d456:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d101      	bne.n	800d462 <tcp_seg_copy+0x2e>
    return NULL;
 800d45e:	2300      	movs	r3, #0
 800d460:	e00a      	b.n	800d478 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d462:	2210      	movs	r2, #16
 800d464:	6879      	ldr	r1, [r7, #4]
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f007 fc5e 	bl	8014d28 <memcpy>
  pbuf_ref(cseg->p);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	4618      	mov	r0, r3
 800d472:	f7fe fc1b 	bl	800bcac <pbuf_ref>
  return cseg;
 800d476:	68fb      	ldr	r3, [r7, #12]
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3710      	adds	r7, #16
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	08017d38 	.word	0x08017d38
 800d484:	0801828c 	.word	0x0801828c
 800d488:	08017d7c 	.word	0x08017d7c

0800d48c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]
 800d498:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d109      	bne.n	800d4b4 <tcp_recv_null+0x28>
 800d4a0:	4b12      	ldr	r3, [pc, #72]	; (800d4ec <tcp_recv_null+0x60>)
 800d4a2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d4a6:	4912      	ldr	r1, [pc, #72]	; (800d4f0 <tcp_recv_null+0x64>)
 800d4a8:	4812      	ldr	r0, [pc, #72]	; (800d4f4 <tcp_recv_null+0x68>)
 800d4aa:	f007 fc6d 	bl	8014d88 <iprintf>
 800d4ae:	f06f 030f 	mvn.w	r3, #15
 800d4b2:	e016      	b.n	800d4e2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d009      	beq.n	800d4ce <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	891b      	ldrh	r3, [r3, #8]
 800d4be:	4619      	mov	r1, r3
 800d4c0:	68b8      	ldr	r0, [r7, #8]
 800d4c2:	f7ff fab5 	bl	800ca30 <tcp_recved>
    pbuf_free(p);
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7fe fb50 	bl	800bb6c <pbuf_free>
 800d4cc:	e008      	b.n	800d4e0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d4ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d104      	bne.n	800d4e0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d4d6:	68b8      	ldr	r0, [r7, #8]
 800d4d8:	f7fe ffe6 	bl	800c4a8 <tcp_close>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	e000      	b.n	800d4e2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3710      	adds	r7, #16
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
 800d4ea:	bf00      	nop
 800d4ec:	08017d38 	.word	0x08017d38
 800d4f0:	080182a8 	.word	0x080182a8
 800d4f4:	08017d7c 	.word	0x08017d7c

0800d4f8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	4603      	mov	r3, r0
 800d500:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d506:	2b00      	cmp	r3, #0
 800d508:	db01      	blt.n	800d50e <tcp_kill_prio+0x16>
 800d50a:	79fb      	ldrb	r3, [r7, #7]
 800d50c:	e000      	b.n	800d510 <tcp_kill_prio+0x18>
 800d50e:	237f      	movs	r3, #127	; 0x7f
 800d510:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d512:	7afb      	ldrb	r3, [r7, #11]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d034      	beq.n	800d582 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d518:	7afb      	ldrb	r3, [r7, #11]
 800d51a:	3b01      	subs	r3, #1
 800d51c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d51e:	2300      	movs	r3, #0
 800d520:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d522:	2300      	movs	r3, #0
 800d524:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d526:	4b19      	ldr	r3, [pc, #100]	; (800d58c <tcp_kill_prio+0x94>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	617b      	str	r3, [r7, #20]
 800d52c:	e01f      	b.n	800d56e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	7d5b      	ldrb	r3, [r3, #21]
 800d532:	7afa      	ldrb	r2, [r7, #11]
 800d534:	429a      	cmp	r2, r3
 800d536:	d80c      	bhi.n	800d552 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d53c:	7afa      	ldrb	r2, [r7, #11]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d112      	bne.n	800d568 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d542:	4b13      	ldr	r3, [pc, #76]	; (800d590 <tcp_kill_prio+0x98>)
 800d544:	681a      	ldr	r2, [r3, #0]
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	6a1b      	ldr	r3, [r3, #32]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	68fa      	ldr	r2, [r7, #12]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d80a      	bhi.n	800d568 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d552:	4b0f      	ldr	r3, [pc, #60]	; (800d590 <tcp_kill_prio+0x98>)
 800d554:	681a      	ldr	r2, [r3, #0]
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	7d5b      	ldrb	r3, [r3, #21]
 800d566:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	617b      	str	r3, [r7, #20]
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d1dc      	bne.n	800d52e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d004      	beq.n	800d584 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d57a:	6938      	ldr	r0, [r7, #16]
 800d57c:	f7ff f87e 	bl	800c67c <tcp_abort>
 800d580:	e000      	b.n	800d584 <tcp_kill_prio+0x8c>
    return;
 800d582:	bf00      	nop
  }
}
 800d584:	3718      	adds	r7, #24
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop
 800d58c:	2000d7dc 	.word	0x2000d7dc
 800d590:	2000d7e0 	.word	0x2000d7e0

0800d594 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af00      	add	r7, sp, #0
 800d59a:	4603      	mov	r3, r0
 800d59c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d59e:	79fb      	ldrb	r3, [r7, #7]
 800d5a0:	2b08      	cmp	r3, #8
 800d5a2:	d009      	beq.n	800d5b8 <tcp_kill_state+0x24>
 800d5a4:	79fb      	ldrb	r3, [r7, #7]
 800d5a6:	2b09      	cmp	r3, #9
 800d5a8:	d006      	beq.n	800d5b8 <tcp_kill_state+0x24>
 800d5aa:	4b1a      	ldr	r3, [pc, #104]	; (800d614 <tcp_kill_state+0x80>)
 800d5ac:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d5b0:	4919      	ldr	r1, [pc, #100]	; (800d618 <tcp_kill_state+0x84>)
 800d5b2:	481a      	ldr	r0, [pc, #104]	; (800d61c <tcp_kill_state+0x88>)
 800d5b4:	f007 fbe8 	bl	8014d88 <iprintf>

  inactivity = 0;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5c0:	4b17      	ldr	r3, [pc, #92]	; (800d620 <tcp_kill_state+0x8c>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	617b      	str	r3, [r7, #20]
 800d5c6:	e017      	b.n	800d5f8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	7d1b      	ldrb	r3, [r3, #20]
 800d5cc:	79fa      	ldrb	r2, [r7, #7]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d10f      	bne.n	800d5f2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d5d2:	4b14      	ldr	r3, [pc, #80]	; (800d624 <tcp_kill_state+0x90>)
 800d5d4:	681a      	ldr	r2, [r3, #0]
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	1ad3      	subs	r3, r2, r3
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d807      	bhi.n	800d5f2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d5e2:	4b10      	ldr	r3, [pc, #64]	; (800d624 <tcp_kill_state+0x90>)
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	617b      	str	r3, [r7, #20]
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1e4      	bne.n	800d5c8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d003      	beq.n	800d60c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d604:	2100      	movs	r1, #0
 800d606:	6938      	ldr	r0, [r7, #16]
 800d608:	f7fe ff7a 	bl	800c500 <tcp_abandon>
  }
}
 800d60c:	bf00      	nop
 800d60e:	3718      	adds	r7, #24
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	08017d38 	.word	0x08017d38
 800d618:	080182c4 	.word	0x080182c4
 800d61c:	08017d7c 	.word	0x08017d7c
 800d620:	2000d7dc 	.word	0x2000d7dc
 800d624:	2000d7e0 	.word	0x2000d7e0

0800d628 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b084      	sub	sp, #16
 800d62c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d62e:	2300      	movs	r3, #0
 800d630:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d632:	2300      	movs	r3, #0
 800d634:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d636:	4b12      	ldr	r3, [pc, #72]	; (800d680 <tcp_kill_timewait+0x58>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	60fb      	str	r3, [r7, #12]
 800d63c:	e012      	b.n	800d664 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d63e:	4b11      	ldr	r3, [pc, #68]	; (800d684 <tcp_kill_timewait+0x5c>)
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	1ad3      	subs	r3, r2, r3
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d807      	bhi.n	800d65e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d64e:	4b0d      	ldr	r3, [pc, #52]	; (800d684 <tcp_kill_timewait+0x5c>)
 800d650:	681a      	ldr	r2, [r3, #0]
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	6a1b      	ldr	r3, [r3, #32]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	60fb      	str	r3, [r7, #12]
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d1e9      	bne.n	800d63e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d002      	beq.n	800d676 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d670:	68b8      	ldr	r0, [r7, #8]
 800d672:	f7ff f803 	bl	800c67c <tcp_abort>
  }
}
 800d676:	bf00      	nop
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}
 800d67e:	bf00      	nop
 800d680:	2000d7ec 	.word	0x2000d7ec
 800d684:	2000d7e0 	.word	0x2000d7e0

0800d688 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b082      	sub	sp, #8
 800d68c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d68e:	4b10      	ldr	r3, [pc, #64]	; (800d6d0 <tcp_handle_closepend+0x48>)
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d694:	e014      	b.n	800d6c0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	8b5b      	ldrh	r3, [r3, #26]
 800d6a0:	f003 0308 	and.w	r3, r3, #8
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d009      	beq.n	800d6bc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	8b5b      	ldrh	r3, [r3, #26]
 800d6ac:	f023 0308 	bic.w	r3, r3, #8
 800d6b0:	b29a      	uxth	r2, r3
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7fe fe8c 	bl	800c3d4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d1e7      	bne.n	800d696 <tcp_handle_closepend+0xe>
  }
}
 800d6c6:	bf00      	nop
 800d6c8:	bf00      	nop
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	2000d7dc 	.word	0x2000d7dc

0800d6d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6de:	2001      	movs	r0, #1
 800d6e0:	f7fd fbe6 	bl	800aeb0 <memp_malloc>
 800d6e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d126      	bne.n	800d73a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d6ec:	f7ff ffcc 	bl	800d688 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d6f0:	f7ff ff9a 	bl	800d628 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6f4:	2001      	movs	r0, #1
 800d6f6:	f7fd fbdb 	bl	800aeb0 <memp_malloc>
 800d6fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d11b      	bne.n	800d73a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d702:	2009      	movs	r0, #9
 800d704:	f7ff ff46 	bl	800d594 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d708:	2001      	movs	r0, #1
 800d70a:	f7fd fbd1 	bl	800aeb0 <memp_malloc>
 800d70e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d111      	bne.n	800d73a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d716:	2008      	movs	r0, #8
 800d718:	f7ff ff3c 	bl	800d594 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d71c:	2001      	movs	r0, #1
 800d71e:	f7fd fbc7 	bl	800aeb0 <memp_malloc>
 800d722:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d107      	bne.n	800d73a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d72a:	79fb      	ldrb	r3, [r7, #7]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7ff fee3 	bl	800d4f8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d732:	2001      	movs	r0, #1
 800d734:	f7fd fbbc 	bl	800aeb0 <memp_malloc>
 800d738:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d03f      	beq.n	800d7c0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d740:	229c      	movs	r2, #156	; 0x9c
 800d742:	2100      	movs	r1, #0
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f007 fb17 	bl	8014d78 <memset>
    pcb->prio = prio;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	79fa      	ldrb	r2, [r7, #7]
 800d74e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d756:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d760:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	22ff      	movs	r2, #255	; 0xff
 800d76e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d776:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2206      	movs	r2, #6
 800d77c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2206      	movs	r2, #6
 800d784:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d78c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2201      	movs	r2, #1
 800d792:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d796:	4b0d      	ldr	r3, [pc, #52]	; (800d7cc <tcp_alloc+0xf8>)
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d79e:	4b0c      	ldr	r3, [pc, #48]	; (800d7d0 <tcp_alloc+0xfc>)
 800d7a0:	781a      	ldrb	r2, [r3, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d7ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	4a08      	ldr	r2, [pc, #32]	; (800d7d4 <tcp_alloc+0x100>)
 800d7b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	4a07      	ldr	r2, [pc, #28]	; (800d7d8 <tcp_alloc+0x104>)
 800d7bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	2000d7e0 	.word	0x2000d7e0
 800d7d0:	20000a16 	.word	0x20000a16
 800d7d4:	0800d48d 	.word	0x0800d48d
 800d7d8:	006ddd00 	.word	0x006ddd00

0800d7dc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d7e6:	2040      	movs	r0, #64	; 0x40
 800d7e8:	f7ff ff74 	bl	800d6d4 <tcp_alloc>
 800d7ec:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3710      	adds	r7, #16
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d002      	beq.n	800d80e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	683a      	ldr	r2, [r7, #0]
 800d80c:	611a      	str	r2, [r3, #16]
  }
}
 800d80e:	bf00      	nop
 800d810:	370c      	adds	r7, #12
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr
	...

0800d81c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00e      	beq.n	800d84a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	7d1b      	ldrb	r3, [r3, #20]
 800d830:	2b01      	cmp	r3, #1
 800d832:	d106      	bne.n	800d842 <tcp_recv+0x26>
 800d834:	4b07      	ldr	r3, [pc, #28]	; (800d854 <tcp_recv+0x38>)
 800d836:	f240 72df 	movw	r2, #2015	; 0x7df
 800d83a:	4907      	ldr	r1, [pc, #28]	; (800d858 <tcp_recv+0x3c>)
 800d83c:	4807      	ldr	r0, [pc, #28]	; (800d85c <tcp_recv+0x40>)
 800d83e:	f007 faa3 	bl	8014d88 <iprintf>
    pcb->recv = recv;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	683a      	ldr	r2, [r7, #0]
 800d846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d84a:	bf00      	nop
 800d84c:	3708      	adds	r7, #8
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	08017d38 	.word	0x08017d38
 800d858:	080182d4 	.word	0x080182d4
 800d85c:	08017d7c 	.word	0x08017d7c

0800d860 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00e      	beq.n	800d88e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	7d1b      	ldrb	r3, [r3, #20]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d106      	bne.n	800d886 <tcp_sent+0x26>
 800d878:	4b07      	ldr	r3, [pc, #28]	; (800d898 <tcp_sent+0x38>)
 800d87a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d87e:	4907      	ldr	r1, [pc, #28]	; (800d89c <tcp_sent+0x3c>)
 800d880:	4807      	ldr	r0, [pc, #28]	; (800d8a0 <tcp_sent+0x40>)
 800d882:	f007 fa81 	bl	8014d88 <iprintf>
    pcb->sent = sent;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d88e:	bf00      	nop
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	08017d38 	.word	0x08017d38
 800d89c:	080182fc 	.word	0x080182fc
 800d8a0:	08017d7c 	.word	0x08017d7c

0800d8a4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d00e      	beq.n	800d8d2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	7d1b      	ldrb	r3, [r3, #20]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d106      	bne.n	800d8ca <tcp_err+0x26>
 800d8bc:	4b07      	ldr	r3, [pc, #28]	; (800d8dc <tcp_err+0x38>)
 800d8be:	f640 020d 	movw	r2, #2061	; 0x80d
 800d8c2:	4907      	ldr	r1, [pc, #28]	; (800d8e0 <tcp_err+0x3c>)
 800d8c4:	4807      	ldr	r0, [pc, #28]	; (800d8e4 <tcp_err+0x40>)
 800d8c6:	f007 fa5f 	bl	8014d88 <iprintf>
    pcb->errf = err;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	683a      	ldr	r2, [r7, #0]
 800d8ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d8d2:	bf00      	nop
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	08017d38 	.word	0x08017d38
 800d8e0:	08018324 	.word	0x08018324
 800d8e4:	08017d7c 	.word	0x08017d7c

0800d8e8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b085      	sub	sp, #20
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d008      	beq.n	800d90a <tcp_accept+0x22>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	7d1b      	ldrb	r3, [r3, #20]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d104      	bne.n	800d90a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	683a      	ldr	r2, [r7, #0]
 800d908:	619a      	str	r2, [r3, #24]
  }
}
 800d90a:	bf00      	nop
 800d90c:	3714      	adds	r7, #20
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
	...

0800d918 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	60f8      	str	r0, [r7, #12]
 800d920:	60b9      	str	r1, [r7, #8]
 800d922:	4613      	mov	r3, r2
 800d924:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d107      	bne.n	800d93c <tcp_poll+0x24>
 800d92c:	4b0e      	ldr	r3, [pc, #56]	; (800d968 <tcp_poll+0x50>)
 800d92e:	f640 023d 	movw	r2, #2109	; 0x83d
 800d932:	490e      	ldr	r1, [pc, #56]	; (800d96c <tcp_poll+0x54>)
 800d934:	480e      	ldr	r0, [pc, #56]	; (800d970 <tcp_poll+0x58>)
 800d936:	f007 fa27 	bl	8014d88 <iprintf>
 800d93a:	e011      	b.n	800d960 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	7d1b      	ldrb	r3, [r3, #20]
 800d940:	2b01      	cmp	r3, #1
 800d942:	d106      	bne.n	800d952 <tcp_poll+0x3a>
 800d944:	4b08      	ldr	r3, [pc, #32]	; (800d968 <tcp_poll+0x50>)
 800d946:	f640 023e 	movw	r2, #2110	; 0x83e
 800d94a:	490a      	ldr	r1, [pc, #40]	; (800d974 <tcp_poll+0x5c>)
 800d94c:	4808      	ldr	r0, [pc, #32]	; (800d970 <tcp_poll+0x58>)
 800d94e:	f007 fa1b 	bl	8014d88 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	68ba      	ldr	r2, [r7, #8]
 800d956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	79fa      	ldrb	r2, [r7, #7]
 800d95e:	775a      	strb	r2, [r3, #29]
}
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	08017d38 	.word	0x08017d38
 800d96c:	0801834c 	.word	0x0801834c
 800d970:	08017d7c 	.word	0x08017d7c
 800d974:	08018364 	.word	0x08018364

0800d978 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d107      	bne.n	800d996 <tcp_pcb_purge+0x1e>
 800d986:	4b21      	ldr	r3, [pc, #132]	; (800da0c <tcp_pcb_purge+0x94>)
 800d988:	f640 0251 	movw	r2, #2129	; 0x851
 800d98c:	4920      	ldr	r1, [pc, #128]	; (800da10 <tcp_pcb_purge+0x98>)
 800d98e:	4821      	ldr	r0, [pc, #132]	; (800da14 <tcp_pcb_purge+0x9c>)
 800d990:	f007 f9fa 	bl	8014d88 <iprintf>
 800d994:	e037      	b.n	800da06 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	7d1b      	ldrb	r3, [r3, #20]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d033      	beq.n	800da06 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d9a2:	2b0a      	cmp	r3, #10
 800d9a4:	d02f      	beq.n	800da06 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d02b      	beq.n	800da06 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d007      	beq.n	800d9c6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fe f8d6 	bl	800bb6c <pbuf_free>
      pcb->refused_data = NULL;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d002      	beq.n	800d9d4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 f986 	bl	800dce0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9da:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7ff fcdb 	bl	800d39c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff fcd6 	bl	800d39c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	66da      	str	r2, [r3, #108]	; 0x6c
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800da06:	3708      	adds	r7, #8
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	08017d38 	.word	0x08017d38
 800da10:	08018384 	.word	0x08018384
 800da14:	08017d7c 	.word	0x08017d7c

0800da18 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d106      	bne.n	800da36 <tcp_pcb_remove+0x1e>
 800da28:	4b3e      	ldr	r3, [pc, #248]	; (800db24 <tcp_pcb_remove+0x10c>)
 800da2a:	f640 0283 	movw	r2, #2179	; 0x883
 800da2e:	493e      	ldr	r1, [pc, #248]	; (800db28 <tcp_pcb_remove+0x110>)
 800da30:	483e      	ldr	r0, [pc, #248]	; (800db2c <tcp_pcb_remove+0x114>)
 800da32:	f007 f9a9 	bl	8014d88 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d106      	bne.n	800da4a <tcp_pcb_remove+0x32>
 800da3c:	4b39      	ldr	r3, [pc, #228]	; (800db24 <tcp_pcb_remove+0x10c>)
 800da3e:	f640 0284 	movw	r2, #2180	; 0x884
 800da42:	493b      	ldr	r1, [pc, #236]	; (800db30 <tcp_pcb_remove+0x118>)
 800da44:	4839      	ldr	r0, [pc, #228]	; (800db2c <tcp_pcb_remove+0x114>)
 800da46:	f007 f99f 	bl	8014d88 <iprintf>

  TCP_RMV(pcblist, pcb);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	683a      	ldr	r2, [r7, #0]
 800da50:	429a      	cmp	r2, r3
 800da52:	d105      	bne.n	800da60 <tcp_pcb_remove+0x48>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	68da      	ldr	r2, [r3, #12]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	601a      	str	r2, [r3, #0]
 800da5e:	e013      	b.n	800da88 <tcp_pcb_remove+0x70>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	60fb      	str	r3, [r7, #12]
 800da66:	e00c      	b.n	800da82 <tcp_pcb_remove+0x6a>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	68db      	ldr	r3, [r3, #12]
 800da6c:	683a      	ldr	r2, [r7, #0]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d104      	bne.n	800da7c <tcp_pcb_remove+0x64>
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	68da      	ldr	r2, [r3, #12]
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	60da      	str	r2, [r3, #12]
 800da7a:	e005      	b.n	800da88 <tcp_pcb_remove+0x70>
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	60fb      	str	r3, [r7, #12]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d1ef      	bne.n	800da68 <tcp_pcb_remove+0x50>
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	2200      	movs	r2, #0
 800da8c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800da8e:	6838      	ldr	r0, [r7, #0]
 800da90:	f7ff ff72 	bl	800d978 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	7d1b      	ldrb	r3, [r3, #20]
 800da98:	2b0a      	cmp	r3, #10
 800da9a:	d013      	beq.n	800dac4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d00f      	beq.n	800dac4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	8b5b      	ldrh	r3, [r3, #26]
 800daa8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800daac:	2b00      	cmp	r3, #0
 800daae:	d009      	beq.n	800dac4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	8b5b      	ldrh	r3, [r3, #26]
 800dab4:	f043 0302 	orr.w	r3, r3, #2
 800dab8:	b29a      	uxth	r2, r3
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dabe:	6838      	ldr	r0, [r7, #0]
 800dac0:	f003 fbc2 	bl	8011248 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	7d1b      	ldrb	r3, [r3, #20]
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d020      	beq.n	800db0e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d006      	beq.n	800dae2 <tcp_pcb_remove+0xca>
 800dad4:	4b13      	ldr	r3, [pc, #76]	; (800db24 <tcp_pcb_remove+0x10c>)
 800dad6:	f640 0293 	movw	r2, #2195	; 0x893
 800dada:	4916      	ldr	r1, [pc, #88]	; (800db34 <tcp_pcb_remove+0x11c>)
 800dadc:	4813      	ldr	r0, [pc, #76]	; (800db2c <tcp_pcb_remove+0x114>)
 800dade:	f007 f953 	bl	8014d88 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d006      	beq.n	800daf8 <tcp_pcb_remove+0xe0>
 800daea:	4b0e      	ldr	r3, [pc, #56]	; (800db24 <tcp_pcb_remove+0x10c>)
 800daec:	f640 0294 	movw	r2, #2196	; 0x894
 800daf0:	4911      	ldr	r1, [pc, #68]	; (800db38 <tcp_pcb_remove+0x120>)
 800daf2:	480e      	ldr	r0, [pc, #56]	; (800db2c <tcp_pcb_remove+0x114>)
 800daf4:	f007 f948 	bl	8014d88 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d006      	beq.n	800db0e <tcp_pcb_remove+0xf6>
 800db00:	4b08      	ldr	r3, [pc, #32]	; (800db24 <tcp_pcb_remove+0x10c>)
 800db02:	f640 0296 	movw	r2, #2198	; 0x896
 800db06:	490d      	ldr	r1, [pc, #52]	; (800db3c <tcp_pcb_remove+0x124>)
 800db08:	4808      	ldr	r0, [pc, #32]	; (800db2c <tcp_pcb_remove+0x114>)
 800db0a:	f007 f93d 	bl	8014d88 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	2200      	movs	r2, #0
 800db12:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	2200      	movs	r2, #0
 800db18:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800db1a:	bf00      	nop
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	08017d38 	.word	0x08017d38
 800db28:	080183a0 	.word	0x080183a0
 800db2c:	08017d7c 	.word	0x08017d7c
 800db30:	080183bc 	.word	0x080183bc
 800db34:	080183dc 	.word	0x080183dc
 800db38:	080183f4 	.word	0x080183f4
 800db3c:	08018410 	.word	0x08018410

0800db40 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d106      	bne.n	800db5c <tcp_next_iss+0x1c>
 800db4e:	4b0a      	ldr	r3, [pc, #40]	; (800db78 <tcp_next_iss+0x38>)
 800db50:	f640 02af 	movw	r2, #2223	; 0x8af
 800db54:	4909      	ldr	r1, [pc, #36]	; (800db7c <tcp_next_iss+0x3c>)
 800db56:	480a      	ldr	r0, [pc, #40]	; (800db80 <tcp_next_iss+0x40>)
 800db58:	f007 f916 	bl	8014d88 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800db5c:	4b09      	ldr	r3, [pc, #36]	; (800db84 <tcp_next_iss+0x44>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	4b09      	ldr	r3, [pc, #36]	; (800db88 <tcp_next_iss+0x48>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4413      	add	r3, r2
 800db66:	4a07      	ldr	r2, [pc, #28]	; (800db84 <tcp_next_iss+0x44>)
 800db68:	6013      	str	r3, [r2, #0]
  return iss;
 800db6a:	4b06      	ldr	r3, [pc, #24]	; (800db84 <tcp_next_iss+0x44>)
 800db6c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3708      	adds	r7, #8
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	08017d38 	.word	0x08017d38
 800db7c:	08018428 	.word	0x08018428
 800db80:	08017d7c 	.word	0x08017d7c
 800db84:	200004b4 	.word	0x200004b4
 800db88:	2000d7e0 	.word	0x2000d7e0

0800db8c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	4603      	mov	r3, r0
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	607a      	str	r2, [r7, #4]
 800db98:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d106      	bne.n	800dbae <tcp_eff_send_mss_netif+0x22>
 800dba0:	4b14      	ldr	r3, [pc, #80]	; (800dbf4 <tcp_eff_send_mss_netif+0x68>)
 800dba2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dba6:	4914      	ldr	r1, [pc, #80]	; (800dbf8 <tcp_eff_send_mss_netif+0x6c>)
 800dba8:	4814      	ldr	r0, [pc, #80]	; (800dbfc <tcp_eff_send_mss_netif+0x70>)
 800dbaa:	f007 f8ed 	bl	8014d88 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dbb4:	89fb      	ldrh	r3, [r7, #14]
 800dbb6:	e019      	b.n	800dbec <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dbbc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dbbe:	8afb      	ldrh	r3, [r7, #22]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d012      	beq.n	800dbea <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dbc4:	2328      	movs	r3, #40	; 0x28
 800dbc6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dbc8:	8afa      	ldrh	r2, [r7, #22]
 800dbca:	8abb      	ldrh	r3, [r7, #20]
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d904      	bls.n	800dbda <tcp_eff_send_mss_netif+0x4e>
 800dbd0:	8afa      	ldrh	r2, [r7, #22]
 800dbd2:	8abb      	ldrh	r3, [r7, #20]
 800dbd4:	1ad3      	subs	r3, r2, r3
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	e000      	b.n	800dbdc <tcp_eff_send_mss_netif+0x50>
 800dbda:	2300      	movs	r3, #0
 800dbdc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dbde:	8a7a      	ldrh	r2, [r7, #18]
 800dbe0:	89fb      	ldrh	r3, [r7, #14]
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	bf28      	it	cs
 800dbe6:	4613      	movcs	r3, r2
 800dbe8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dbea:	89fb      	ldrh	r3, [r7, #14]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3718      	adds	r7, #24
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	08017d38 	.word	0x08017d38
 800dbf8:	08018444 	.word	0x08018444
 800dbfc:	08017d7c 	.word	0x08017d7c

0800dc00 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d119      	bne.n	800dc48 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dc14:	4b10      	ldr	r3, [pc, #64]	; (800dc58 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dc16:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dc1a:	4910      	ldr	r1, [pc, #64]	; (800dc5c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dc1c:	4810      	ldr	r0, [pc, #64]	; (800dc60 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dc1e:	f007 f8b3 	bl	8014d88 <iprintf>

  while (pcb != NULL) {
 800dc22:	e011      	b.n	800dc48 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d108      	bne.n	800dc42 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dc36:	68f8      	ldr	r0, [r7, #12]
 800dc38:	f7fe fd20 	bl	800c67c <tcp_abort>
      pcb = next;
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	60fb      	str	r3, [r7, #12]
 800dc40:	e002      	b.n	800dc48 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d1ea      	bne.n	800dc24 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dc4e:	bf00      	nop
 800dc50:	bf00      	nop
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}
 800dc58:	08017d38 	.word	0x08017d38
 800dc5c:	0801846c 	.word	0x0801846c
 800dc60:	08017d7c 	.word	0x08017d7c

0800dc64 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d02a      	beq.n	800dcca <tcp_netif_ip_addr_changed+0x66>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d026      	beq.n	800dcca <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dc7c:	4b15      	ldr	r3, [pc, #84]	; (800dcd4 <tcp_netif_ip_addr_changed+0x70>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4619      	mov	r1, r3
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f7ff ffbc 	bl	800dc00 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dc88:	4b13      	ldr	r3, [pc, #76]	; (800dcd8 <tcp_netif_ip_addr_changed+0x74>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7ff ffb6 	bl	800dc00 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d017      	beq.n	800dcca <tcp_netif_ip_addr_changed+0x66>
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d013      	beq.n	800dcca <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dca2:	4b0e      	ldr	r3, [pc, #56]	; (800dcdc <tcp_netif_ip_addr_changed+0x78>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	60fb      	str	r3, [r7, #12]
 800dca8:	e00c      	b.n	800dcc4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d103      	bne.n	800dcbe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	681a      	ldr	r2, [r3, #0]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	60fb      	str	r3, [r7, #12]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1ef      	bne.n	800dcaa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dcca:	bf00      	nop
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	2000d7dc 	.word	0x2000d7dc
 800dcd8:	2000d7e8 	.word	0x2000d7e8
 800dcdc:	2000d7e4 	.word	0x2000d7e4

0800dce0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b082      	sub	sp, #8
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d007      	beq.n	800dd00 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7ff fb51 	bl	800d39c <tcp_segs_free>
    pcb->ooseq = NULL;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dd00:	bf00      	nop
 800dd02:	3708      	adds	r7, #8
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dd08:	b590      	push	{r4, r7, lr}
 800dd0a:	b08d      	sub	sp, #52	; 0x34
 800dd0c:	af04      	add	r7, sp, #16
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d105      	bne.n	800dd24 <tcp_input+0x1c>
 800dd18:	4b9b      	ldr	r3, [pc, #620]	; (800df88 <tcp_input+0x280>)
 800dd1a:	2283      	movs	r2, #131	; 0x83
 800dd1c:	499b      	ldr	r1, [pc, #620]	; (800df8c <tcp_input+0x284>)
 800dd1e:	489c      	ldr	r0, [pc, #624]	; (800df90 <tcp_input+0x288>)
 800dd20:	f007 f832 	bl	8014d88 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	4a9a      	ldr	r2, [pc, #616]	; (800df94 <tcp_input+0x28c>)
 800dd2a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	895b      	ldrh	r3, [r3, #10]
 800dd30:	2b13      	cmp	r3, #19
 800dd32:	f240 83c4 	bls.w	800e4be <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd36:	4b98      	ldr	r3, [pc, #608]	; (800df98 <tcp_input+0x290>)
 800dd38:	695b      	ldr	r3, [r3, #20]
 800dd3a:	4a97      	ldr	r2, [pc, #604]	; (800df98 <tcp_input+0x290>)
 800dd3c:	6812      	ldr	r2, [r2, #0]
 800dd3e:	4611      	mov	r1, r2
 800dd40:	4618      	mov	r0, r3
 800dd42:	f006 f86b 	bl	8013e1c <ip4_addr_isbroadcast_u32>
 800dd46:	4603      	mov	r3, r0
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	f040 83ba 	bne.w	800e4c2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dd4e:	4b92      	ldr	r3, [pc, #584]	; (800df98 <tcp_input+0x290>)
 800dd50:	695b      	ldr	r3, [r3, #20]
 800dd52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd56:	2be0      	cmp	r3, #224	; 0xe0
 800dd58:	f000 83b3 	beq.w	800e4c2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dd5c:	4b8d      	ldr	r3, [pc, #564]	; (800df94 <tcp_input+0x28c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	899b      	ldrh	r3, [r3, #12]
 800dd62:	b29b      	uxth	r3, r3
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7fc fb6f 	bl	800a448 <lwip_htons>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	0b1b      	lsrs	r3, r3, #12
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dd76:	7cbb      	ldrb	r3, [r7, #18]
 800dd78:	2b13      	cmp	r3, #19
 800dd7a:	f240 83a4 	bls.w	800e4c6 <tcp_input+0x7be>
 800dd7e:	7cbb      	ldrb	r3, [r7, #18]
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	891b      	ldrh	r3, [r3, #8]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	f200 839d 	bhi.w	800e4c6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dd8c:	7cbb      	ldrb	r3, [r7, #18]
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	3b14      	subs	r3, #20
 800dd92:	b29a      	uxth	r2, r3
 800dd94:	4b81      	ldr	r3, [pc, #516]	; (800df9c <tcp_input+0x294>)
 800dd96:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dd98:	4b81      	ldr	r3, [pc, #516]	; (800dfa0 <tcp_input+0x298>)
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	895a      	ldrh	r2, [r3, #10]
 800dda2:	7cbb      	ldrb	r3, [r7, #18]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d309      	bcc.n	800ddbe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ddaa:	4b7c      	ldr	r3, [pc, #496]	; (800df9c <tcp_input+0x294>)
 800ddac:	881a      	ldrh	r2, [r3, #0]
 800ddae:	4b7d      	ldr	r3, [pc, #500]	; (800dfa4 <tcp_input+0x29c>)
 800ddb0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ddb2:	7cbb      	ldrb	r3, [r7, #18]
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f7fd fe52 	bl	800ba60 <pbuf_remove_header>
 800ddbc:	e04e      	b.n	800de5c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d105      	bne.n	800ddd2 <tcp_input+0xca>
 800ddc6:	4b70      	ldr	r3, [pc, #448]	; (800df88 <tcp_input+0x280>)
 800ddc8:	22c2      	movs	r2, #194	; 0xc2
 800ddca:	4977      	ldr	r1, [pc, #476]	; (800dfa8 <tcp_input+0x2a0>)
 800ddcc:	4870      	ldr	r0, [pc, #448]	; (800df90 <tcp_input+0x288>)
 800ddce:	f006 ffdb 	bl	8014d88 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ddd2:	2114      	movs	r1, #20
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f7fd fe43 	bl	800ba60 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	895a      	ldrh	r2, [r3, #10]
 800ddde:	4b71      	ldr	r3, [pc, #452]	; (800dfa4 <tcp_input+0x29c>)
 800dde0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dde2:	4b6e      	ldr	r3, [pc, #440]	; (800df9c <tcp_input+0x294>)
 800dde4:	881a      	ldrh	r2, [r3, #0]
 800dde6:	4b6f      	ldr	r3, [pc, #444]	; (800dfa4 <tcp_input+0x29c>)
 800dde8:	881b      	ldrh	r3, [r3, #0]
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ddee:	4b6d      	ldr	r3, [pc, #436]	; (800dfa4 <tcp_input+0x29c>)
 800ddf0:	881b      	ldrh	r3, [r3, #0]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f7fd fe33 	bl	800ba60 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	895b      	ldrh	r3, [r3, #10]
 800de00:	8a3a      	ldrh	r2, [r7, #16]
 800de02:	429a      	cmp	r2, r3
 800de04:	f200 8361 	bhi.w	800e4ca <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	4a64      	ldr	r2, [pc, #400]	; (800dfa0 <tcp_input+0x298>)
 800de10:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	8a3a      	ldrh	r2, [r7, #16]
 800de18:	4611      	mov	r1, r2
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7fd fe20 	bl	800ba60 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	891a      	ldrh	r2, [r3, #8]
 800de24:	8a3b      	ldrh	r3, [r7, #16]
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	b29a      	uxth	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	895b      	ldrh	r3, [r3, #10]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d005      	beq.n	800de42 <tcp_input+0x13a>
 800de36:	4b54      	ldr	r3, [pc, #336]	; (800df88 <tcp_input+0x280>)
 800de38:	22df      	movs	r2, #223	; 0xdf
 800de3a:	495c      	ldr	r1, [pc, #368]	; (800dfac <tcp_input+0x2a4>)
 800de3c:	4854      	ldr	r0, [pc, #336]	; (800df90 <tcp_input+0x288>)
 800de3e:	f006 ffa3 	bl	8014d88 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	891a      	ldrh	r2, [r3, #8]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	891b      	ldrh	r3, [r3, #8]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d005      	beq.n	800de5c <tcp_input+0x154>
 800de50:	4b4d      	ldr	r3, [pc, #308]	; (800df88 <tcp_input+0x280>)
 800de52:	22e0      	movs	r2, #224	; 0xe0
 800de54:	4956      	ldr	r1, [pc, #344]	; (800dfb0 <tcp_input+0x2a8>)
 800de56:	484e      	ldr	r0, [pc, #312]	; (800df90 <tcp_input+0x288>)
 800de58:	f006 ff96 	bl	8014d88 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800de5c:	4b4d      	ldr	r3, [pc, #308]	; (800df94 <tcp_input+0x28c>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	881b      	ldrh	r3, [r3, #0]
 800de62:	b29b      	uxth	r3, r3
 800de64:	4a4b      	ldr	r2, [pc, #300]	; (800df94 <tcp_input+0x28c>)
 800de66:	6814      	ldr	r4, [r2, #0]
 800de68:	4618      	mov	r0, r3
 800de6a:	f7fc faed 	bl	800a448 <lwip_htons>
 800de6e:	4603      	mov	r3, r0
 800de70:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800de72:	4b48      	ldr	r3, [pc, #288]	; (800df94 <tcp_input+0x28c>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	885b      	ldrh	r3, [r3, #2]
 800de78:	b29b      	uxth	r3, r3
 800de7a:	4a46      	ldr	r2, [pc, #280]	; (800df94 <tcp_input+0x28c>)
 800de7c:	6814      	ldr	r4, [r2, #0]
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fc fae2 	bl	800a448 <lwip_htons>
 800de84:	4603      	mov	r3, r0
 800de86:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800de88:	4b42      	ldr	r3, [pc, #264]	; (800df94 <tcp_input+0x28c>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	4a41      	ldr	r2, [pc, #260]	; (800df94 <tcp_input+0x28c>)
 800de90:	6814      	ldr	r4, [r2, #0]
 800de92:	4618      	mov	r0, r3
 800de94:	f7fc faed 	bl	800a472 <lwip_htonl>
 800de98:	4603      	mov	r3, r0
 800de9a:	6063      	str	r3, [r4, #4]
 800de9c:	6863      	ldr	r3, [r4, #4]
 800de9e:	4a45      	ldr	r2, [pc, #276]	; (800dfb4 <tcp_input+0x2ac>)
 800dea0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dea2:	4b3c      	ldr	r3, [pc, #240]	; (800df94 <tcp_input+0x28c>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	4a3a      	ldr	r2, [pc, #232]	; (800df94 <tcp_input+0x28c>)
 800deaa:	6814      	ldr	r4, [r2, #0]
 800deac:	4618      	mov	r0, r3
 800deae:	f7fc fae0 	bl	800a472 <lwip_htonl>
 800deb2:	4603      	mov	r3, r0
 800deb4:	60a3      	str	r3, [r4, #8]
 800deb6:	68a3      	ldr	r3, [r4, #8]
 800deb8:	4a3f      	ldr	r2, [pc, #252]	; (800dfb8 <tcp_input+0x2b0>)
 800deba:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800debc:	4b35      	ldr	r3, [pc, #212]	; (800df94 <tcp_input+0x28c>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	89db      	ldrh	r3, [r3, #14]
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	4a33      	ldr	r2, [pc, #204]	; (800df94 <tcp_input+0x28c>)
 800dec6:	6814      	ldr	r4, [r2, #0]
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fc fabd 	bl	800a448 <lwip_htons>
 800dece:	4603      	mov	r3, r0
 800ded0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ded2:	4b30      	ldr	r3, [pc, #192]	; (800df94 <tcp_input+0x28c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	899b      	ldrh	r3, [r3, #12]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fc fab4 	bl	800a448 <lwip_htons>
 800dee0:	4603      	mov	r3, r0
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	4b34      	ldr	r3, [pc, #208]	; (800dfbc <tcp_input+0x2b4>)
 800deec:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	891a      	ldrh	r2, [r3, #8]
 800def2:	4b33      	ldr	r3, [pc, #204]	; (800dfc0 <tcp_input+0x2b8>)
 800def4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800def6:	4b31      	ldr	r3, [pc, #196]	; (800dfbc <tcp_input+0x2b4>)
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	f003 0303 	and.w	r3, r3, #3
 800defe:	2b00      	cmp	r3, #0
 800df00:	d00c      	beq.n	800df1c <tcp_input+0x214>
    tcplen++;
 800df02:	4b2f      	ldr	r3, [pc, #188]	; (800dfc0 <tcp_input+0x2b8>)
 800df04:	881b      	ldrh	r3, [r3, #0]
 800df06:	3301      	adds	r3, #1
 800df08:	b29a      	uxth	r2, r3
 800df0a:	4b2d      	ldr	r3, [pc, #180]	; (800dfc0 <tcp_input+0x2b8>)
 800df0c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	891a      	ldrh	r2, [r3, #8]
 800df12:	4b2b      	ldr	r3, [pc, #172]	; (800dfc0 <tcp_input+0x2b8>)
 800df14:	881b      	ldrh	r3, [r3, #0]
 800df16:	429a      	cmp	r2, r3
 800df18:	f200 82d9 	bhi.w	800e4ce <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800df1c:	2300      	movs	r3, #0
 800df1e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df20:	4b28      	ldr	r3, [pc, #160]	; (800dfc4 <tcp_input+0x2bc>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	61fb      	str	r3, [r7, #28]
 800df26:	e09d      	b.n	800e064 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	7d1b      	ldrb	r3, [r3, #20]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d105      	bne.n	800df3c <tcp_input+0x234>
 800df30:	4b15      	ldr	r3, [pc, #84]	; (800df88 <tcp_input+0x280>)
 800df32:	22fb      	movs	r2, #251	; 0xfb
 800df34:	4924      	ldr	r1, [pc, #144]	; (800dfc8 <tcp_input+0x2c0>)
 800df36:	4816      	ldr	r0, [pc, #88]	; (800df90 <tcp_input+0x288>)
 800df38:	f006 ff26 	bl	8014d88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	7d1b      	ldrb	r3, [r3, #20]
 800df40:	2b0a      	cmp	r3, #10
 800df42:	d105      	bne.n	800df50 <tcp_input+0x248>
 800df44:	4b10      	ldr	r3, [pc, #64]	; (800df88 <tcp_input+0x280>)
 800df46:	22fc      	movs	r2, #252	; 0xfc
 800df48:	4920      	ldr	r1, [pc, #128]	; (800dfcc <tcp_input+0x2c4>)
 800df4a:	4811      	ldr	r0, [pc, #68]	; (800df90 <tcp_input+0x288>)
 800df4c:	f006 ff1c 	bl	8014d88 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	7d1b      	ldrb	r3, [r3, #20]
 800df54:	2b01      	cmp	r3, #1
 800df56:	d105      	bne.n	800df64 <tcp_input+0x25c>
 800df58:	4b0b      	ldr	r3, [pc, #44]	; (800df88 <tcp_input+0x280>)
 800df5a:	22fd      	movs	r2, #253	; 0xfd
 800df5c:	491c      	ldr	r1, [pc, #112]	; (800dfd0 <tcp_input+0x2c8>)
 800df5e:	480c      	ldr	r0, [pc, #48]	; (800df90 <tcp_input+0x288>)
 800df60:	f006 ff12 	bl	8014d88 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	7a1b      	ldrb	r3, [r3, #8]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d033      	beq.n	800dfd4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	7a1a      	ldrb	r2, [r3, #8]
 800df70:	4b09      	ldr	r3, [pc, #36]	; (800df98 <tcp_input+0x290>)
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df78:	3301      	adds	r3, #1
 800df7a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d029      	beq.n	800dfd4 <tcp_input+0x2cc>
      prev = pcb;
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	61bb      	str	r3, [r7, #24]
      continue;
 800df84:	e06b      	b.n	800e05e <tcp_input+0x356>
 800df86:	bf00      	nop
 800df88:	080184a0 	.word	0x080184a0
 800df8c:	080184d4 	.word	0x080184d4
 800df90:	080184ec 	.word	0x080184ec
 800df94:	20000a28 	.word	0x20000a28
 800df98:	20009f8c 	.word	0x20009f8c
 800df9c:	20000a2c 	.word	0x20000a2c
 800dfa0:	20000a30 	.word	0x20000a30
 800dfa4:	20000a2e 	.word	0x20000a2e
 800dfa8:	08018514 	.word	0x08018514
 800dfac:	08018524 	.word	0x08018524
 800dfb0:	08018530 	.word	0x08018530
 800dfb4:	20000a38 	.word	0x20000a38
 800dfb8:	20000a3c 	.word	0x20000a3c
 800dfbc:	20000a44 	.word	0x20000a44
 800dfc0:	20000a42 	.word	0x20000a42
 800dfc4:	2000d7dc 	.word	0x2000d7dc
 800dfc8:	08018550 	.word	0x08018550
 800dfcc:	08018578 	.word	0x08018578
 800dfd0:	080185a4 	.word	0x080185a4
    }

    if (pcb->remote_port == tcphdr->src &&
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	8b1a      	ldrh	r2, [r3, #24]
 800dfd8:	4b94      	ldr	r3, [pc, #592]	; (800e22c <tcp_input+0x524>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	881b      	ldrh	r3, [r3, #0]
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d13a      	bne.n	800e05a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	8ada      	ldrh	r2, [r3, #22]
 800dfe8:	4b90      	ldr	r3, [pc, #576]	; (800e22c <tcp_input+0x524>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	885b      	ldrh	r3, [r3, #2]
 800dfee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d132      	bne.n	800e05a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	685a      	ldr	r2, [r3, #4]
 800dff8:	4b8d      	ldr	r3, [pc, #564]	; (800e230 <tcp_input+0x528>)
 800dffa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d12c      	bne.n	800e05a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	4b8a      	ldr	r3, [pc, #552]	; (800e230 <tcp_input+0x528>)
 800e006:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e008:	429a      	cmp	r2, r3
 800e00a:	d126      	bne.n	800e05a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	68db      	ldr	r3, [r3, #12]
 800e010:	69fa      	ldr	r2, [r7, #28]
 800e012:	429a      	cmp	r2, r3
 800e014:	d106      	bne.n	800e024 <tcp_input+0x31c>
 800e016:	4b87      	ldr	r3, [pc, #540]	; (800e234 <tcp_input+0x52c>)
 800e018:	f240 120d 	movw	r2, #269	; 0x10d
 800e01c:	4986      	ldr	r1, [pc, #536]	; (800e238 <tcp_input+0x530>)
 800e01e:	4887      	ldr	r0, [pc, #540]	; (800e23c <tcp_input+0x534>)
 800e020:	f006 feb2 	bl	8014d88 <iprintf>
      if (prev != NULL) {
 800e024:	69bb      	ldr	r3, [r7, #24]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00a      	beq.n	800e040 <tcp_input+0x338>
        prev->next = pcb->next;
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	68da      	ldr	r2, [r3, #12]
 800e02e:	69bb      	ldr	r3, [r7, #24]
 800e030:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e032:	4b83      	ldr	r3, [pc, #524]	; (800e240 <tcp_input+0x538>)
 800e034:	681a      	ldr	r2, [r3, #0]
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e03a:	4a81      	ldr	r2, [pc, #516]	; (800e240 <tcp_input+0x538>)
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	429a      	cmp	r2, r3
 800e048:	d111      	bne.n	800e06e <tcp_input+0x366>
 800e04a:	4b7a      	ldr	r3, [pc, #488]	; (800e234 <tcp_input+0x52c>)
 800e04c:	f240 1215 	movw	r2, #277	; 0x115
 800e050:	497c      	ldr	r1, [pc, #496]	; (800e244 <tcp_input+0x53c>)
 800e052:	487a      	ldr	r0, [pc, #488]	; (800e23c <tcp_input+0x534>)
 800e054:	f006 fe98 	bl	8014d88 <iprintf>
      break;
 800e058:	e009      	b.n	800e06e <tcp_input+0x366>
    }
    prev = pcb;
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	61fb      	str	r3, [r7, #28]
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	2b00      	cmp	r3, #0
 800e068:	f47f af5e 	bne.w	800df28 <tcp_input+0x220>
 800e06c:	e000      	b.n	800e070 <tcp_input+0x368>
      break;
 800e06e:	bf00      	nop
  }

  if (pcb == NULL) {
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	2b00      	cmp	r3, #0
 800e074:	f040 8095 	bne.w	800e1a2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e078:	4b73      	ldr	r3, [pc, #460]	; (800e248 <tcp_input+0x540>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	61fb      	str	r3, [r7, #28]
 800e07e:	e03f      	b.n	800e100 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	7d1b      	ldrb	r3, [r3, #20]
 800e084:	2b0a      	cmp	r3, #10
 800e086:	d006      	beq.n	800e096 <tcp_input+0x38e>
 800e088:	4b6a      	ldr	r3, [pc, #424]	; (800e234 <tcp_input+0x52c>)
 800e08a:	f240 121f 	movw	r2, #287	; 0x11f
 800e08e:	496f      	ldr	r1, [pc, #444]	; (800e24c <tcp_input+0x544>)
 800e090:	486a      	ldr	r0, [pc, #424]	; (800e23c <tcp_input+0x534>)
 800e092:	f006 fe79 	bl	8014d88 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	7a1b      	ldrb	r3, [r3, #8]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d009      	beq.n	800e0b2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	7a1a      	ldrb	r2, [r3, #8]
 800e0a2:	4b63      	ldr	r3, [pc, #396]	; (800e230 <tcp_input+0x528>)
 800e0a4:	685b      	ldr	r3, [r3, #4]
 800e0a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d122      	bne.n	800e0f8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	8b1a      	ldrh	r2, [r3, #24]
 800e0b6:	4b5d      	ldr	r3, [pc, #372]	; (800e22c <tcp_input+0x524>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	881b      	ldrh	r3, [r3, #0]
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d11b      	bne.n	800e0fa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	8ada      	ldrh	r2, [r3, #22]
 800e0c6:	4b59      	ldr	r3, [pc, #356]	; (800e22c <tcp_input+0x524>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	885b      	ldrh	r3, [r3, #2]
 800e0cc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d113      	bne.n	800e0fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	4b56      	ldr	r3, [pc, #344]	; (800e230 <tcp_input+0x528>)
 800e0d8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d10d      	bne.n	800e0fa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	4b53      	ldr	r3, [pc, #332]	; (800e230 <tcp_input+0x528>)
 800e0e4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d107      	bne.n	800e0fa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e0ea:	69f8      	ldr	r0, [r7, #28]
 800e0ec:	f000 fb54 	bl	800e798 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f7fd fd3b 	bl	800bb6c <pbuf_free>
        return;
 800e0f6:	e1f0      	b.n	800e4da <tcp_input+0x7d2>
        continue;
 800e0f8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	68db      	ldr	r3, [r3, #12]
 800e0fe:	61fb      	str	r3, [r7, #28]
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1bc      	bne.n	800e080 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e106:	2300      	movs	r3, #0
 800e108:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e10a:	4b51      	ldr	r3, [pc, #324]	; (800e250 <tcp_input+0x548>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	617b      	str	r3, [r7, #20]
 800e110:	e02a      	b.n	800e168 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	7a1b      	ldrb	r3, [r3, #8]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00c      	beq.n	800e134 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	7a1a      	ldrb	r2, [r3, #8]
 800e11e:	4b44      	ldr	r3, [pc, #272]	; (800e230 <tcp_input+0x528>)
 800e120:	685b      	ldr	r3, [r3, #4]
 800e122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e126:	3301      	adds	r3, #1
 800e128:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d002      	beq.n	800e134 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	61bb      	str	r3, [r7, #24]
        continue;
 800e132:	e016      	b.n	800e162 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	8ada      	ldrh	r2, [r3, #22]
 800e138:	4b3c      	ldr	r3, [pc, #240]	; (800e22c <tcp_input+0x524>)
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	885b      	ldrh	r3, [r3, #2]
 800e13e:	b29b      	uxth	r3, r3
 800e140:	429a      	cmp	r2, r3
 800e142:	d10c      	bne.n	800e15e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	4b39      	ldr	r3, [pc, #228]	; (800e230 <tcp_input+0x528>)
 800e14a:	695b      	ldr	r3, [r3, #20]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d00f      	beq.n	800e170 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d00d      	beq.n	800e172 <tcp_input+0x46a>
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d009      	beq.n	800e172 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	617b      	str	r3, [r7, #20]
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1d1      	bne.n	800e112 <tcp_input+0x40a>
 800e16e:	e000      	b.n	800e172 <tcp_input+0x46a>
            break;
 800e170:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d014      	beq.n	800e1a2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e178:	69bb      	ldr	r3, [r7, #24]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00a      	beq.n	800e194 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	68da      	ldr	r2, [r3, #12]
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e186:	4b32      	ldr	r3, [pc, #200]	; (800e250 <tcp_input+0x548>)
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e18e:	4a30      	ldr	r2, [pc, #192]	; (800e250 <tcp_input+0x548>)
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e194:	6978      	ldr	r0, [r7, #20]
 800e196:	f000 fa01 	bl	800e59c <tcp_listen_input>
      }
      pbuf_free(p);
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7fd fce6 	bl	800bb6c <pbuf_free>
      return;
 800e1a0:	e19b      	b.n	800e4da <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f000 8160 	beq.w	800e46a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e1aa:	4b2a      	ldr	r3, [pc, #168]	; (800e254 <tcp_input+0x54c>)
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	891a      	ldrh	r2, [r3, #8]
 800e1b4:	4b27      	ldr	r3, [pc, #156]	; (800e254 <tcp_input+0x54c>)
 800e1b6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e1b8:	4a26      	ldr	r2, [pc, #152]	; (800e254 <tcp_input+0x54c>)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e1be:	4b1b      	ldr	r3, [pc, #108]	; (800e22c <tcp_input+0x524>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4a24      	ldr	r2, [pc, #144]	; (800e254 <tcp_input+0x54c>)
 800e1c4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e1c6:	4b24      	ldr	r3, [pc, #144]	; (800e258 <tcp_input+0x550>)
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e1cc:	4b23      	ldr	r3, [pc, #140]	; (800e25c <tcp_input+0x554>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e1d2:	4b23      	ldr	r3, [pc, #140]	; (800e260 <tcp_input+0x558>)
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e1d8:	4b22      	ldr	r3, [pc, #136]	; (800e264 <tcp_input+0x55c>)
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	f003 0308 	and.w	r3, r3, #8
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d006      	beq.n	800e1f2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	7b5b      	ldrb	r3, [r3, #13]
 800e1e8:	f043 0301 	orr.w	r3, r3, #1
 800e1ec:	b2da      	uxtb	r2, r3
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d038      	beq.n	800e26c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e1fa:	69f8      	ldr	r0, [r7, #28]
 800e1fc:	f7ff f852 	bl	800d2a4 <tcp_process_refused_data>
 800e200:	4603      	mov	r3, r0
 800e202:	f113 0f0d 	cmn.w	r3, #13
 800e206:	d007      	beq.n	800e218 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d02d      	beq.n	800e26c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e210:	4b15      	ldr	r3, [pc, #84]	; (800e268 <tcp_input+0x560>)
 800e212:	881b      	ldrh	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d029      	beq.n	800e26c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f040 8104 	bne.w	800e42a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e222:	69f8      	ldr	r0, [r7, #28]
 800e224:	f003 fe16 	bl	8011e54 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e228:	e0ff      	b.n	800e42a <tcp_input+0x722>
 800e22a:	bf00      	nop
 800e22c:	20000a28 	.word	0x20000a28
 800e230:	20009f8c 	.word	0x20009f8c
 800e234:	080184a0 	.word	0x080184a0
 800e238:	080185cc 	.word	0x080185cc
 800e23c:	080184ec 	.word	0x080184ec
 800e240:	2000d7dc 	.word	0x2000d7dc
 800e244:	080185f8 	.word	0x080185f8
 800e248:	2000d7ec 	.word	0x2000d7ec
 800e24c:	08018624 	.word	0x08018624
 800e250:	2000d7e4 	.word	0x2000d7e4
 800e254:	20000a18 	.word	0x20000a18
 800e258:	20000a48 	.word	0x20000a48
 800e25c:	20000a45 	.word	0x20000a45
 800e260:	20000a40 	.word	0x20000a40
 800e264:	20000a44 	.word	0x20000a44
 800e268:	20000a42 	.word	0x20000a42
      }
    }
    tcp_input_pcb = pcb;
 800e26c:	4a9c      	ldr	r2, [pc, #624]	; (800e4e0 <tcp_input+0x7d8>)
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e272:	69f8      	ldr	r0, [r7, #28]
 800e274:	f000 fb0a 	bl	800e88c <tcp_process>
 800e278:	4603      	mov	r3, r0
 800e27a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e27c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e280:	f113 0f0d 	cmn.w	r3, #13
 800e284:	f000 80d3 	beq.w	800e42e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e288:	4b96      	ldr	r3, [pc, #600]	; (800e4e4 <tcp_input+0x7dc>)
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	f003 0308 	and.w	r3, r3, #8
 800e290:	2b00      	cmp	r3, #0
 800e292:	d015      	beq.n	800e2c0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e294:	69fb      	ldr	r3, [r7, #28]
 800e296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d008      	beq.n	800e2b0 <tcp_input+0x5a8>
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2a4:	69fa      	ldr	r2, [r7, #28]
 800e2a6:	6912      	ldr	r2, [r2, #16]
 800e2a8:	f06f 010d 	mvn.w	r1, #13
 800e2ac:	4610      	mov	r0, r2
 800e2ae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e2b0:	69f9      	ldr	r1, [r7, #28]
 800e2b2:	488d      	ldr	r0, [pc, #564]	; (800e4e8 <tcp_input+0x7e0>)
 800e2b4:	f7ff fbb0 	bl	800da18 <tcp_pcb_remove>
        tcp_free(pcb);
 800e2b8:	69f8      	ldr	r0, [r7, #28]
 800e2ba:	f7fd fef7 	bl	800c0ac <tcp_free>
 800e2be:	e0c1      	b.n	800e444 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e2c4:	4b89      	ldr	r3, [pc, #548]	; (800e4ec <tcp_input+0x7e4>)
 800e2c6:	881b      	ldrh	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d01d      	beq.n	800e308 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e2cc:	4b87      	ldr	r3, [pc, #540]	; (800e4ec <tcp_input+0x7e4>)
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d00a      	beq.n	800e2f2 <tcp_input+0x5ea>
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2e2:	69fa      	ldr	r2, [r7, #28]
 800e2e4:	6910      	ldr	r0, [r2, #16]
 800e2e6:	89fa      	ldrh	r2, [r7, #14]
 800e2e8:	69f9      	ldr	r1, [r7, #28]
 800e2ea:	4798      	blx	r3
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	74fb      	strb	r3, [r7, #19]
 800e2f0:	e001      	b.n	800e2f6 <tcp_input+0x5ee>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e2f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2fa:	f113 0f0d 	cmn.w	r3, #13
 800e2fe:	f000 8098 	beq.w	800e432 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e302:	4b7a      	ldr	r3, [pc, #488]	; (800e4ec <tcp_input+0x7e4>)
 800e304:	2200      	movs	r2, #0
 800e306:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e308:	69f8      	ldr	r0, [r7, #28]
 800e30a:	f000 f907 	bl	800e51c <tcp_input_delayed_close>
 800e30e:	4603      	mov	r3, r0
 800e310:	2b00      	cmp	r3, #0
 800e312:	f040 8090 	bne.w	800e436 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e316:	4b76      	ldr	r3, [pc, #472]	; (800e4f0 <tcp_input+0x7e8>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d041      	beq.n	800e3a2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e31e:	69fb      	ldr	r3, [r7, #28]
 800e320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e322:	2b00      	cmp	r3, #0
 800e324:	d006      	beq.n	800e334 <tcp_input+0x62c>
 800e326:	4b73      	ldr	r3, [pc, #460]	; (800e4f4 <tcp_input+0x7ec>)
 800e328:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e32c:	4972      	ldr	r1, [pc, #456]	; (800e4f8 <tcp_input+0x7f0>)
 800e32e:	4873      	ldr	r0, [pc, #460]	; (800e4fc <tcp_input+0x7f4>)
 800e330:	f006 fd2a 	bl	8014d88 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	8b5b      	ldrh	r3, [r3, #26]
 800e338:	f003 0310 	and.w	r3, r3, #16
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d008      	beq.n	800e352 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e340:	4b6b      	ldr	r3, [pc, #428]	; (800e4f0 <tcp_input+0x7e8>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4618      	mov	r0, r3
 800e346:	f7fd fc11 	bl	800bb6c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e34a:	69f8      	ldr	r0, [r7, #28]
 800e34c:	f7fe f996 	bl	800c67c <tcp_abort>
            goto aborted;
 800e350:	e078      	b.n	800e444 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00c      	beq.n	800e376 <tcp_input+0x66e>
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	6918      	ldr	r0, [r3, #16]
 800e366:	4b62      	ldr	r3, [pc, #392]	; (800e4f0 <tcp_input+0x7e8>)
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	2300      	movs	r3, #0
 800e36c:	69f9      	ldr	r1, [r7, #28]
 800e36e:	47a0      	blx	r4
 800e370:	4603      	mov	r3, r0
 800e372:	74fb      	strb	r3, [r7, #19]
 800e374:	e008      	b.n	800e388 <tcp_input+0x680>
 800e376:	4b5e      	ldr	r3, [pc, #376]	; (800e4f0 <tcp_input+0x7e8>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	2300      	movs	r3, #0
 800e37c:	69f9      	ldr	r1, [r7, #28]
 800e37e:	2000      	movs	r0, #0
 800e380:	f7ff f884 	bl	800d48c <tcp_recv_null>
 800e384:	4603      	mov	r3, r0
 800e386:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e388:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e38c:	f113 0f0d 	cmn.w	r3, #13
 800e390:	d053      	beq.n	800e43a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e392:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d003      	beq.n	800e3a2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e39a:	4b55      	ldr	r3, [pc, #340]	; (800e4f0 <tcp_input+0x7e8>)
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e3a2:	4b50      	ldr	r3, [pc, #320]	; (800e4e4 <tcp_input+0x7dc>)
 800e3a4:	781b      	ldrb	r3, [r3, #0]
 800e3a6:	f003 0320 	and.w	r3, r3, #32
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d030      	beq.n	800e410 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d009      	beq.n	800e3ca <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3ba:	7b5a      	ldrb	r2, [r3, #13]
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3c0:	f042 0220 	orr.w	r2, r2, #32
 800e3c4:	b2d2      	uxtb	r2, r2
 800e3c6:	735a      	strb	r2, [r3, #13]
 800e3c8:	e022      	b.n	800e410 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3ce:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e3d2:	d005      	beq.n	800e3e0 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3d8:	3301      	adds	r3, #1
 800e3da:	b29a      	uxth	r2, r3
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e3e0:	69fb      	ldr	r3, [r7, #28]
 800e3e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00b      	beq.n	800e402 <tcp_input+0x6fa>
 800e3ea:	69fb      	ldr	r3, [r7, #28]
 800e3ec:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	6918      	ldr	r0, [r3, #16]
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	69f9      	ldr	r1, [r7, #28]
 800e3fa:	47a0      	blx	r4
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	74fb      	strb	r3, [r7, #19]
 800e400:	e001      	b.n	800e406 <tcp_input+0x6fe>
 800e402:	2300      	movs	r3, #0
 800e404:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e406:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e40a:	f113 0f0d 	cmn.w	r3, #13
 800e40e:	d016      	beq.n	800e43e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e410:	4b33      	ldr	r3, [pc, #204]	; (800e4e0 <tcp_input+0x7d8>)
 800e412:	2200      	movs	r2, #0
 800e414:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e416:	69f8      	ldr	r0, [r7, #28]
 800e418:	f000 f880 	bl	800e51c <tcp_input_delayed_close>
 800e41c:	4603      	mov	r3, r0
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d10f      	bne.n	800e442 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e422:	69f8      	ldr	r0, [r7, #28]
 800e424:	f002 ff10 	bl	8011248 <tcp_output>
 800e428:	e00c      	b.n	800e444 <tcp_input+0x73c>
        goto aborted;
 800e42a:	bf00      	nop
 800e42c:	e00a      	b.n	800e444 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e42e:	bf00      	nop
 800e430:	e008      	b.n	800e444 <tcp_input+0x73c>
              goto aborted;
 800e432:	bf00      	nop
 800e434:	e006      	b.n	800e444 <tcp_input+0x73c>
          goto aborted;
 800e436:	bf00      	nop
 800e438:	e004      	b.n	800e444 <tcp_input+0x73c>
            goto aborted;
 800e43a:	bf00      	nop
 800e43c:	e002      	b.n	800e444 <tcp_input+0x73c>
              goto aborted;
 800e43e:	bf00      	nop
 800e440:	e000      	b.n	800e444 <tcp_input+0x73c>
          goto aborted;
 800e442:	bf00      	nop
    tcp_input_pcb = NULL;
 800e444:	4b26      	ldr	r3, [pc, #152]	; (800e4e0 <tcp_input+0x7d8>)
 800e446:	2200      	movs	r2, #0
 800e448:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e44a:	4b29      	ldr	r3, [pc, #164]	; (800e4f0 <tcp_input+0x7e8>)
 800e44c:	2200      	movs	r2, #0
 800e44e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e450:	4b2b      	ldr	r3, [pc, #172]	; (800e500 <tcp_input+0x7f8>)
 800e452:	685b      	ldr	r3, [r3, #4]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d03f      	beq.n	800e4d8 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800e458:	4b29      	ldr	r3, [pc, #164]	; (800e500 <tcp_input+0x7f8>)
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fd fb85 	bl	800bb6c <pbuf_free>
      inseg.p = NULL;
 800e462:	4b27      	ldr	r3, [pc, #156]	; (800e500 <tcp_input+0x7f8>)
 800e464:	2200      	movs	r2, #0
 800e466:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e468:	e036      	b.n	800e4d8 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e46a:	4b26      	ldr	r3, [pc, #152]	; (800e504 <tcp_input+0x7fc>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	899b      	ldrh	r3, [r3, #12]
 800e470:	b29b      	uxth	r3, r3
 800e472:	4618      	mov	r0, r3
 800e474:	f7fb ffe8 	bl	800a448 <lwip_htons>
 800e478:	4603      	mov	r3, r0
 800e47a:	b2db      	uxtb	r3, r3
 800e47c:	f003 0304 	and.w	r3, r3, #4
 800e480:	2b00      	cmp	r3, #0
 800e482:	d118      	bne.n	800e4b6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e484:	4b20      	ldr	r3, [pc, #128]	; (800e508 <tcp_input+0x800>)
 800e486:	6819      	ldr	r1, [r3, #0]
 800e488:	4b20      	ldr	r3, [pc, #128]	; (800e50c <tcp_input+0x804>)
 800e48a:	881b      	ldrh	r3, [r3, #0]
 800e48c:	461a      	mov	r2, r3
 800e48e:	4b20      	ldr	r3, [pc, #128]	; (800e510 <tcp_input+0x808>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e494:	4b1b      	ldr	r3, [pc, #108]	; (800e504 <tcp_input+0x7fc>)
 800e496:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e498:	885b      	ldrh	r3, [r3, #2]
 800e49a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e49c:	4a19      	ldr	r2, [pc, #100]	; (800e504 <tcp_input+0x7fc>)
 800e49e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4a0:	8812      	ldrh	r2, [r2, #0]
 800e4a2:	b292      	uxth	r2, r2
 800e4a4:	9202      	str	r2, [sp, #8]
 800e4a6:	9301      	str	r3, [sp, #4]
 800e4a8:	4b1a      	ldr	r3, [pc, #104]	; (800e514 <tcp_input+0x80c>)
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	4b1a      	ldr	r3, [pc, #104]	; (800e518 <tcp_input+0x810>)
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	f003 fc7d 	bl	8011db0 <tcp_rst>
    pbuf_free(p);
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f7fd fb58 	bl	800bb6c <pbuf_free>
  return;
 800e4bc:	e00c      	b.n	800e4d8 <tcp_input+0x7d0>
    goto dropped;
 800e4be:	bf00      	nop
 800e4c0:	e006      	b.n	800e4d0 <tcp_input+0x7c8>
    goto dropped;
 800e4c2:	bf00      	nop
 800e4c4:	e004      	b.n	800e4d0 <tcp_input+0x7c8>
    goto dropped;
 800e4c6:	bf00      	nop
 800e4c8:	e002      	b.n	800e4d0 <tcp_input+0x7c8>
      goto dropped;
 800e4ca:	bf00      	nop
 800e4cc:	e000      	b.n	800e4d0 <tcp_input+0x7c8>
      goto dropped;
 800e4ce:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7fd fb4b 	bl	800bb6c <pbuf_free>
 800e4d6:	e000      	b.n	800e4da <tcp_input+0x7d2>
  return;
 800e4d8:	bf00      	nop
}
 800e4da:	3724      	adds	r7, #36	; 0x24
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd90      	pop	{r4, r7, pc}
 800e4e0:	2000d7f0 	.word	0x2000d7f0
 800e4e4:	20000a45 	.word	0x20000a45
 800e4e8:	2000d7dc 	.word	0x2000d7dc
 800e4ec:	20000a40 	.word	0x20000a40
 800e4f0:	20000a48 	.word	0x20000a48
 800e4f4:	080184a0 	.word	0x080184a0
 800e4f8:	08018654 	.word	0x08018654
 800e4fc:	080184ec 	.word	0x080184ec
 800e500:	20000a18 	.word	0x20000a18
 800e504:	20000a28 	.word	0x20000a28
 800e508:	20000a3c 	.word	0x20000a3c
 800e50c:	20000a42 	.word	0x20000a42
 800e510:	20000a38 	.word	0x20000a38
 800e514:	20009f9c 	.word	0x20009f9c
 800e518:	20009fa0 	.word	0x20009fa0

0800e51c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d106      	bne.n	800e538 <tcp_input_delayed_close+0x1c>
 800e52a:	4b17      	ldr	r3, [pc, #92]	; (800e588 <tcp_input_delayed_close+0x6c>)
 800e52c:	f240 225a 	movw	r2, #602	; 0x25a
 800e530:	4916      	ldr	r1, [pc, #88]	; (800e58c <tcp_input_delayed_close+0x70>)
 800e532:	4817      	ldr	r0, [pc, #92]	; (800e590 <tcp_input_delayed_close+0x74>)
 800e534:	f006 fc28 	bl	8014d88 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e538:	4b16      	ldr	r3, [pc, #88]	; (800e594 <tcp_input_delayed_close+0x78>)
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	f003 0310 	and.w	r3, r3, #16
 800e540:	2b00      	cmp	r3, #0
 800e542:	d01c      	beq.n	800e57e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	8b5b      	ldrh	r3, [r3, #26]
 800e548:	f003 0310 	and.w	r3, r3, #16
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10d      	bne.n	800e56c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e556:	2b00      	cmp	r3, #0
 800e558:	d008      	beq.n	800e56c <tcp_input_delayed_close+0x50>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e560:	687a      	ldr	r2, [r7, #4]
 800e562:	6912      	ldr	r2, [r2, #16]
 800e564:	f06f 010e 	mvn.w	r1, #14
 800e568:	4610      	mov	r0, r2
 800e56a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e56c:	6879      	ldr	r1, [r7, #4]
 800e56e:	480a      	ldr	r0, [pc, #40]	; (800e598 <tcp_input_delayed_close+0x7c>)
 800e570:	f7ff fa52 	bl	800da18 <tcp_pcb_remove>
    tcp_free(pcb);
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7fd fd99 	bl	800c0ac <tcp_free>
    return 1;
 800e57a:	2301      	movs	r3, #1
 800e57c:	e000      	b.n	800e580 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e57e:	2300      	movs	r3, #0
}
 800e580:	4618      	mov	r0, r3
 800e582:	3708      	adds	r7, #8
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	080184a0 	.word	0x080184a0
 800e58c:	08018670 	.word	0x08018670
 800e590:	080184ec 	.word	0x080184ec
 800e594:	20000a45 	.word	0x20000a45
 800e598:	2000d7dc 	.word	0x2000d7dc

0800e59c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e59c:	b590      	push	{r4, r7, lr}
 800e59e:	b08b      	sub	sp, #44	; 0x2c
 800e5a0:	af04      	add	r7, sp, #16
 800e5a2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e5a4:	4b6f      	ldr	r3, [pc, #444]	; (800e764 <tcp_listen_input+0x1c8>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	f003 0304 	and.w	r3, r3, #4
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f040 80d2 	bne.w	800e756 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d106      	bne.n	800e5c6 <tcp_listen_input+0x2a>
 800e5b8:	4b6b      	ldr	r3, [pc, #428]	; (800e768 <tcp_listen_input+0x1cc>)
 800e5ba:	f240 2281 	movw	r2, #641	; 0x281
 800e5be:	496b      	ldr	r1, [pc, #428]	; (800e76c <tcp_listen_input+0x1d0>)
 800e5c0:	486b      	ldr	r0, [pc, #428]	; (800e770 <tcp_listen_input+0x1d4>)
 800e5c2:	f006 fbe1 	bl	8014d88 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e5c6:	4b67      	ldr	r3, [pc, #412]	; (800e764 <tcp_listen_input+0x1c8>)
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	f003 0310 	and.w	r3, r3, #16
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d019      	beq.n	800e606 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5d2:	4b68      	ldr	r3, [pc, #416]	; (800e774 <tcp_listen_input+0x1d8>)
 800e5d4:	6819      	ldr	r1, [r3, #0]
 800e5d6:	4b68      	ldr	r3, [pc, #416]	; (800e778 <tcp_listen_input+0x1dc>)
 800e5d8:	881b      	ldrh	r3, [r3, #0]
 800e5da:	461a      	mov	r2, r3
 800e5dc:	4b67      	ldr	r3, [pc, #412]	; (800e77c <tcp_listen_input+0x1e0>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5e2:	4b67      	ldr	r3, [pc, #412]	; (800e780 <tcp_listen_input+0x1e4>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5e6:	885b      	ldrh	r3, [r3, #2]
 800e5e8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5ea:	4a65      	ldr	r2, [pc, #404]	; (800e780 <tcp_listen_input+0x1e4>)
 800e5ec:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5ee:	8812      	ldrh	r2, [r2, #0]
 800e5f0:	b292      	uxth	r2, r2
 800e5f2:	9202      	str	r2, [sp, #8]
 800e5f4:	9301      	str	r3, [sp, #4]
 800e5f6:	4b63      	ldr	r3, [pc, #396]	; (800e784 <tcp_listen_input+0x1e8>)
 800e5f8:	9300      	str	r3, [sp, #0]
 800e5fa:	4b63      	ldr	r3, [pc, #396]	; (800e788 <tcp_listen_input+0x1ec>)
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f003 fbd6 	bl	8011db0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e604:	e0a9      	b.n	800e75a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e606:	4b57      	ldr	r3, [pc, #348]	; (800e764 <tcp_listen_input+0x1c8>)
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	f003 0302 	and.w	r3, r3, #2
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f000 80a3 	beq.w	800e75a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	7d5b      	ldrb	r3, [r3, #21]
 800e618:	4618      	mov	r0, r3
 800e61a:	f7ff f85b 	bl	800d6d4 <tcp_alloc>
 800e61e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d111      	bne.n	800e64a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	699b      	ldr	r3, [r3, #24]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d00a      	beq.n	800e644 <tcp_listen_input+0xa8>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	699b      	ldr	r3, [r3, #24]
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	6910      	ldr	r0, [r2, #16]
 800e636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e63a:	2100      	movs	r1, #0
 800e63c:	4798      	blx	r3
 800e63e:	4603      	mov	r3, r0
 800e640:	73bb      	strb	r3, [r7, #14]
      return;
 800e642:	e08b      	b.n	800e75c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e644:	23f0      	movs	r3, #240	; 0xf0
 800e646:	73bb      	strb	r3, [r7, #14]
      return;
 800e648:	e088      	b.n	800e75c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e64a:	4b50      	ldr	r3, [pc, #320]	; (800e78c <tcp_listen_input+0x1f0>)
 800e64c:	695a      	ldr	r2, [r3, #20]
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e652:	4b4e      	ldr	r3, [pc, #312]	; (800e78c <tcp_listen_input+0x1f0>)
 800e654:	691a      	ldr	r2, [r3, #16]
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	8ada      	ldrh	r2, [r3, #22]
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e662:	4b47      	ldr	r3, [pc, #284]	; (800e780 <tcp_listen_input+0x1e4>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	881b      	ldrh	r3, [r3, #0]
 800e668:	b29a      	uxth	r2, r3
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	2203      	movs	r2, #3
 800e672:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e674:	4b41      	ldr	r3, [pc, #260]	; (800e77c <tcp_listen_input+0x1e0>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	1c5a      	adds	r2, r3, #1
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e686:	6978      	ldr	r0, [r7, #20]
 800e688:	f7ff fa5a 	bl	800db40 <tcp_next_iss>
 800e68c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	693a      	ldr	r2, [r7, #16]
 800e692:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	693a      	ldr	r2, [r7, #16]
 800e698:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	693a      	ldr	r2, [r7, #16]
 800e69e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	693a      	ldr	r2, [r7, #16]
 800e6a4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e6a6:	4b35      	ldr	r3, [pc, #212]	; (800e77c <tcp_listen_input+0x1e0>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	1e5a      	subs	r2, r3, #1
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	691a      	ldr	r2, [r3, #16]
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	7a5b      	ldrb	r3, [r3, #9]
 800e6c2:	f003 030c 	and.w	r3, r3, #12
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	7a1a      	ldrb	r2, [r3, #8]
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e6d4:	4b2e      	ldr	r3, [pc, #184]	; (800e790 <tcp_listen_input+0x1f4>)
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	60da      	str	r2, [r3, #12]
 800e6dc:	4a2c      	ldr	r2, [pc, #176]	; (800e790 <tcp_listen_input+0x1f4>)
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	f003 fd27 	bl	8012134 <tcp_timer_needed>
 800e6e6:	4b2b      	ldr	r3, [pc, #172]	; (800e794 <tcp_listen_input+0x1f8>)
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e6ec:	6978      	ldr	r0, [r7, #20]
 800e6ee:	f001 fd8d 	bl	801020c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e6f2:	4b23      	ldr	r3, [pc, #140]	; (800e780 <tcp_listen_input+0x1e4>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	89db      	ldrh	r3, [r3, #14]
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	3304      	adds	r3, #4
 800e714:	4618      	mov	r0, r3
 800e716:	f005 f8eb 	bl	80138f0 <ip4_route>
 800e71a:	4601      	mov	r1, r0
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	3304      	adds	r3, #4
 800e720:	461a      	mov	r2, r3
 800e722:	4620      	mov	r0, r4
 800e724:	f7ff fa32 	bl	800db8c <tcp_eff_send_mss_netif>
 800e728:	4603      	mov	r3, r0
 800e72a:	461a      	mov	r2, r3
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e730:	2112      	movs	r1, #18
 800e732:	6978      	ldr	r0, [r7, #20]
 800e734:	f002 fc9a 	bl	801106c <tcp_enqueue_flags>
 800e738:	4603      	mov	r3, r0
 800e73a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e73c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d004      	beq.n	800e74e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e744:	2100      	movs	r1, #0
 800e746:	6978      	ldr	r0, [r7, #20]
 800e748:	f7fd feda 	bl	800c500 <tcp_abandon>
      return;
 800e74c:	e006      	b.n	800e75c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e74e:	6978      	ldr	r0, [r7, #20]
 800e750:	f002 fd7a 	bl	8011248 <tcp_output>
  return;
 800e754:	e001      	b.n	800e75a <tcp_listen_input+0x1be>
    return;
 800e756:	bf00      	nop
 800e758:	e000      	b.n	800e75c <tcp_listen_input+0x1c0>
  return;
 800e75a:	bf00      	nop
}
 800e75c:	371c      	adds	r7, #28
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd90      	pop	{r4, r7, pc}
 800e762:	bf00      	nop
 800e764:	20000a44 	.word	0x20000a44
 800e768:	080184a0 	.word	0x080184a0
 800e76c:	08018698 	.word	0x08018698
 800e770:	080184ec 	.word	0x080184ec
 800e774:	20000a3c 	.word	0x20000a3c
 800e778:	20000a42 	.word	0x20000a42
 800e77c:	20000a38 	.word	0x20000a38
 800e780:	20000a28 	.word	0x20000a28
 800e784:	20009f9c 	.word	0x20009f9c
 800e788:	20009fa0 	.word	0x20009fa0
 800e78c:	20009f8c 	.word	0x20009f8c
 800e790:	2000d7dc 	.word	0x2000d7dc
 800e794:	2000d7d8 	.word	0x2000d7d8

0800e798 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af04      	add	r7, sp, #16
 800e79e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e7a0:	4b2f      	ldr	r3, [pc, #188]	; (800e860 <tcp_timewait_input+0xc8>)
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	f003 0304 	and.w	r3, r3, #4
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d153      	bne.n	800e854 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d106      	bne.n	800e7c0 <tcp_timewait_input+0x28>
 800e7b2:	4b2c      	ldr	r3, [pc, #176]	; (800e864 <tcp_timewait_input+0xcc>)
 800e7b4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e7b8:	492b      	ldr	r1, [pc, #172]	; (800e868 <tcp_timewait_input+0xd0>)
 800e7ba:	482c      	ldr	r0, [pc, #176]	; (800e86c <tcp_timewait_input+0xd4>)
 800e7bc:	f006 fae4 	bl	8014d88 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e7c0:	4b27      	ldr	r3, [pc, #156]	; (800e860 <tcp_timewait_input+0xc8>)
 800e7c2:	781b      	ldrb	r3, [r3, #0]
 800e7c4:	f003 0302 	and.w	r3, r3, #2
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d02a      	beq.n	800e822 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e7cc:	4b28      	ldr	r3, [pc, #160]	; (800e870 <tcp_timewait_input+0xd8>)
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	db2d      	blt.n	800e836 <tcp_timewait_input+0x9e>
 800e7da:	4b25      	ldr	r3, [pc, #148]	; (800e870 <tcp_timewait_input+0xd8>)
 800e7dc:	681a      	ldr	r2, [r3, #0]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e2:	6879      	ldr	r1, [r7, #4]
 800e7e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e7e6:	440b      	add	r3, r1
 800e7e8:	1ad3      	subs	r3, r2, r3
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	dc23      	bgt.n	800e836 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ee:	4b21      	ldr	r3, [pc, #132]	; (800e874 <tcp_timewait_input+0xdc>)
 800e7f0:	6819      	ldr	r1, [r3, #0]
 800e7f2:	4b21      	ldr	r3, [pc, #132]	; (800e878 <tcp_timewait_input+0xe0>)
 800e7f4:	881b      	ldrh	r3, [r3, #0]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	4b1d      	ldr	r3, [pc, #116]	; (800e870 <tcp_timewait_input+0xd8>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7fe:	4b1f      	ldr	r3, [pc, #124]	; (800e87c <tcp_timewait_input+0xe4>)
 800e800:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e802:	885b      	ldrh	r3, [r3, #2]
 800e804:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e806:	4a1d      	ldr	r2, [pc, #116]	; (800e87c <tcp_timewait_input+0xe4>)
 800e808:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e80a:	8812      	ldrh	r2, [r2, #0]
 800e80c:	b292      	uxth	r2, r2
 800e80e:	9202      	str	r2, [sp, #8]
 800e810:	9301      	str	r3, [sp, #4]
 800e812:	4b1b      	ldr	r3, [pc, #108]	; (800e880 <tcp_timewait_input+0xe8>)
 800e814:	9300      	str	r3, [sp, #0]
 800e816:	4b1b      	ldr	r3, [pc, #108]	; (800e884 <tcp_timewait_input+0xec>)
 800e818:	4602      	mov	r2, r0
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f003 fac8 	bl	8011db0 <tcp_rst>
      return;
 800e820:	e01b      	b.n	800e85a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e822:	4b0f      	ldr	r3, [pc, #60]	; (800e860 <tcp_timewait_input+0xc8>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	f003 0301 	and.w	r3, r3, #1
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e82e:	4b16      	ldr	r3, [pc, #88]	; (800e888 <tcp_timewait_input+0xf0>)
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e836:	4b10      	ldr	r3, [pc, #64]	; (800e878 <tcp_timewait_input+0xe0>)
 800e838:	881b      	ldrh	r3, [r3, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00c      	beq.n	800e858 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	8b5b      	ldrh	r3, [r3, #26]
 800e842:	f043 0302 	orr.w	r3, r3, #2
 800e846:	b29a      	uxth	r2, r3
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f002 fcfb 	bl	8011248 <tcp_output>
  }
  return;
 800e852:	e001      	b.n	800e858 <tcp_timewait_input+0xc0>
    return;
 800e854:	bf00      	nop
 800e856:	e000      	b.n	800e85a <tcp_timewait_input+0xc2>
  return;
 800e858:	bf00      	nop
}
 800e85a:	3708      	adds	r7, #8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}
 800e860:	20000a44 	.word	0x20000a44
 800e864:	080184a0 	.word	0x080184a0
 800e868:	080186b8 	.word	0x080186b8
 800e86c:	080184ec 	.word	0x080184ec
 800e870:	20000a38 	.word	0x20000a38
 800e874:	20000a3c 	.word	0x20000a3c
 800e878:	20000a42 	.word	0x20000a42
 800e87c:	20000a28 	.word	0x20000a28
 800e880:	20009f9c 	.word	0x20009f9c
 800e884:	20009fa0 	.word	0x20009fa0
 800e888:	2000d7e0 	.word	0x2000d7e0

0800e88c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e88c:	b590      	push	{r4, r7, lr}
 800e88e:	b08d      	sub	sp, #52	; 0x34
 800e890:	af04      	add	r7, sp, #16
 800e892:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e894:	2300      	movs	r3, #0
 800e896:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e898:	2300      	movs	r3, #0
 800e89a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d106      	bne.n	800e8b0 <tcp_process+0x24>
 800e8a2:	4ba5      	ldr	r3, [pc, #660]	; (800eb38 <tcp_process+0x2ac>)
 800e8a4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e8a8:	49a4      	ldr	r1, [pc, #656]	; (800eb3c <tcp_process+0x2b0>)
 800e8aa:	48a5      	ldr	r0, [pc, #660]	; (800eb40 <tcp_process+0x2b4>)
 800e8ac:	f006 fa6c 	bl	8014d88 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e8b0:	4ba4      	ldr	r3, [pc, #656]	; (800eb44 <tcp_process+0x2b8>)
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	f003 0304 	and.w	r3, r3, #4
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d04e      	beq.n	800e95a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	7d1b      	ldrb	r3, [r3, #20]
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	d108      	bne.n	800e8d6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8c8:	4b9f      	ldr	r3, [pc, #636]	; (800eb48 <tcp_process+0x2bc>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d123      	bne.n	800e918 <tcp_process+0x8c>
        acceptable = 1;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	76fb      	strb	r3, [r7, #27]
 800e8d4:	e020      	b.n	800e918 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8da:	4b9c      	ldr	r3, [pc, #624]	; (800eb4c <tcp_process+0x2c0>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d102      	bne.n	800e8e8 <tcp_process+0x5c>
        acceptable = 1;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	76fb      	strb	r3, [r7, #27]
 800e8e6:	e017      	b.n	800e918 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e8e8:	4b98      	ldr	r3, [pc, #608]	; (800eb4c <tcp_process+0x2c0>)
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8f0:	1ad3      	subs	r3, r2, r3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	db10      	blt.n	800e918 <tcp_process+0x8c>
 800e8f6:	4b95      	ldr	r3, [pc, #596]	; (800eb4c <tcp_process+0x2c0>)
 800e8f8:	681a      	ldr	r2, [r3, #0]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8fe:	6879      	ldr	r1, [r7, #4]
 800e900:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e902:	440b      	add	r3, r1
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	2b00      	cmp	r3, #0
 800e908:	dc06      	bgt.n	800e918 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	8b5b      	ldrh	r3, [r3, #26]
 800e90e:	f043 0302 	orr.w	r3, r3, #2
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e918:	7efb      	ldrb	r3, [r7, #27]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d01b      	beq.n	800e956 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	7d1b      	ldrb	r3, [r3, #20]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d106      	bne.n	800e934 <tcp_process+0xa8>
 800e926:	4b84      	ldr	r3, [pc, #528]	; (800eb38 <tcp_process+0x2ac>)
 800e928:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e92c:	4988      	ldr	r1, [pc, #544]	; (800eb50 <tcp_process+0x2c4>)
 800e92e:	4884      	ldr	r0, [pc, #528]	; (800eb40 <tcp_process+0x2b4>)
 800e930:	f006 fa2a 	bl	8014d88 <iprintf>
      recv_flags |= TF_RESET;
 800e934:	4b87      	ldr	r3, [pc, #540]	; (800eb54 <tcp_process+0x2c8>)
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	f043 0308 	orr.w	r3, r3, #8
 800e93c:	b2da      	uxtb	r2, r3
 800e93e:	4b85      	ldr	r3, [pc, #532]	; (800eb54 <tcp_process+0x2c8>)
 800e940:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	8b5b      	ldrh	r3, [r3, #26]
 800e946:	f023 0301 	bic.w	r3, r3, #1
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e950:	f06f 030d 	mvn.w	r3, #13
 800e954:	e37a      	b.n	800f04c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e956:	2300      	movs	r3, #0
 800e958:	e378      	b.n	800f04c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e95a:	4b7a      	ldr	r3, [pc, #488]	; (800eb44 <tcp_process+0x2b8>)
 800e95c:	781b      	ldrb	r3, [r3, #0]
 800e95e:	f003 0302 	and.w	r3, r3, #2
 800e962:	2b00      	cmp	r3, #0
 800e964:	d010      	beq.n	800e988 <tcp_process+0xfc>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	7d1b      	ldrb	r3, [r3, #20]
 800e96a:	2b02      	cmp	r3, #2
 800e96c:	d00c      	beq.n	800e988 <tcp_process+0xfc>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	7d1b      	ldrb	r3, [r3, #20]
 800e972:	2b03      	cmp	r3, #3
 800e974:	d008      	beq.n	800e988 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	8b5b      	ldrh	r3, [r3, #26]
 800e97a:	f043 0302 	orr.w	r3, r3, #2
 800e97e:	b29a      	uxth	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e984:	2300      	movs	r3, #0
 800e986:	e361      	b.n	800f04c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	8b5b      	ldrh	r3, [r3, #26]
 800e98c:	f003 0310 	and.w	r3, r3, #16
 800e990:	2b00      	cmp	r3, #0
 800e992:	d103      	bne.n	800e99c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e994:	4b70      	ldr	r3, [pc, #448]	; (800eb58 <tcp_process+0x2cc>)
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f001 fc2d 	bl	801020c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	7d1b      	ldrb	r3, [r3, #20]
 800e9b6:	3b02      	subs	r3, #2
 800e9b8:	2b07      	cmp	r3, #7
 800e9ba:	f200 8337 	bhi.w	800f02c <tcp_process+0x7a0>
 800e9be:	a201      	add	r2, pc, #4	; (adr r2, 800e9c4 <tcp_process+0x138>)
 800e9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9c4:	0800e9e5 	.word	0x0800e9e5
 800e9c8:	0800ec15 	.word	0x0800ec15
 800e9cc:	0800ed8d 	.word	0x0800ed8d
 800e9d0:	0800edb7 	.word	0x0800edb7
 800e9d4:	0800eedb 	.word	0x0800eedb
 800e9d8:	0800ed8d 	.word	0x0800ed8d
 800e9dc:	0800ef67 	.word	0x0800ef67
 800e9e0:	0800eff7 	.word	0x0800eff7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e9e4:	4b57      	ldr	r3, [pc, #348]	; (800eb44 <tcp_process+0x2b8>)
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	f003 0310 	and.w	r3, r3, #16
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f000 80e4 	beq.w	800ebba <tcp_process+0x32e>
 800e9f2:	4b54      	ldr	r3, [pc, #336]	; (800eb44 <tcp_process+0x2b8>)
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	f003 0302 	and.w	r3, r3, #2
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 80dd 	beq.w	800ebba <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea04:	1c5a      	adds	r2, r3, #1
 800ea06:	4b50      	ldr	r3, [pc, #320]	; (800eb48 <tcp_process+0x2bc>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	429a      	cmp	r2, r3
 800ea0c:	f040 80d5 	bne.w	800ebba <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ea10:	4b4e      	ldr	r3, [pc, #312]	; (800eb4c <tcp_process+0x2c0>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	1c5a      	adds	r2, r3, #1
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ea22:	4b49      	ldr	r3, [pc, #292]	; (800eb48 <tcp_process+0x2bc>)
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ea2a:	4b4c      	ldr	r3, [pc, #304]	; (800eb5c <tcp_process+0x2d0>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	89db      	ldrh	r3, [r3, #14]
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ea44:	4b41      	ldr	r3, [pc, #260]	; (800eb4c <tcp_process+0x2c0>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	1e5a      	subs	r2, r3, #1
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2204      	movs	r2, #4
 800ea52:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	3304      	adds	r3, #4
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f004 ff47 	bl	80138f0 <ip4_route>
 800ea62:	4601      	mov	r1, r0
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	3304      	adds	r3, #4
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	f7ff f88e 	bl	800db8c <tcp_eff_send_mss_netif>
 800ea70:	4603      	mov	r3, r0
 800ea72:	461a      	mov	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea7c:	009a      	lsls	r2, r3, #2
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea82:	005b      	lsls	r3, r3, #1
 800ea84:	f241 111c 	movw	r1, #4380	; 0x111c
 800ea88:	428b      	cmp	r3, r1
 800ea8a:	bf38      	it	cc
 800ea8c:	460b      	movcc	r3, r1
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d204      	bcs.n	800ea9c <tcp_process+0x210>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	e00d      	b.n	800eab8 <tcp_process+0x22c>
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaa0:	005b      	lsls	r3, r3, #1
 800eaa2:	f241 121c 	movw	r2, #4380	; 0x111c
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d904      	bls.n	800eab4 <tcp_process+0x228>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaae:	005b      	lsls	r3, r3, #1
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	e001      	b.n	800eab8 <tcp_process+0x22c>
 800eab4:	f241 131c 	movw	r3, #4380	; 0x111c
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d106      	bne.n	800ead6 <tcp_process+0x24a>
 800eac8:	4b1b      	ldr	r3, [pc, #108]	; (800eb38 <tcp_process+0x2ac>)
 800eaca:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800eace:	4924      	ldr	r1, [pc, #144]	; (800eb60 <tcp_process+0x2d4>)
 800ead0:	481b      	ldr	r0, [pc, #108]	; (800eb40 <tcp_process+0x2b4>)
 800ead2:	f006 f959 	bl	8014d88 <iprintf>
        --pcb->snd_queuelen;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eadc:	3b01      	subs	r3, #1
 800eade:	b29a      	uxth	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaea:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d111      	bne.n	800eb16 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaf6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800eaf8:	69fb      	ldr	r3, [r7, #28]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d106      	bne.n	800eb0c <tcp_process+0x280>
 800eafe:	4b0e      	ldr	r3, [pc, #56]	; (800eb38 <tcp_process+0x2ac>)
 800eb00:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eb04:	4917      	ldr	r1, [pc, #92]	; (800eb64 <tcp_process+0x2d8>)
 800eb06:	480e      	ldr	r0, [pc, #56]	; (800eb40 <tcp_process+0x2b4>)
 800eb08:	f006 f93e 	bl	8014d88 <iprintf>
          pcb->unsent = rseg->next;
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	66da      	str	r2, [r3, #108]	; 0x6c
 800eb14:	e003      	b.n	800eb1e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800eb1e:	69f8      	ldr	r0, [r7, #28]
 800eb20:	f7fe fc51 	bl	800d3c6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d11d      	bne.n	800eb68 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb32:	861a      	strh	r2, [r3, #48]	; 0x30
 800eb34:	e01f      	b.n	800eb76 <tcp_process+0x2ea>
 800eb36:	bf00      	nop
 800eb38:	080184a0 	.word	0x080184a0
 800eb3c:	080186d8 	.word	0x080186d8
 800eb40:	080184ec 	.word	0x080184ec
 800eb44:	20000a44 	.word	0x20000a44
 800eb48:	20000a3c 	.word	0x20000a3c
 800eb4c:	20000a38 	.word	0x20000a38
 800eb50:	080186f4 	.word	0x080186f4
 800eb54:	20000a45 	.word	0x20000a45
 800eb58:	2000d7e0 	.word	0x2000d7e0
 800eb5c:	20000a28 	.word	0x20000a28
 800eb60:	08018714 	.word	0x08018714
 800eb64:	0801872c 	.word	0x0801872c
        } else {
          pcb->rtime = 0;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d00a      	beq.n	800eb96 <tcp_process+0x30a>
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	6910      	ldr	r0, [r2, #16]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	6879      	ldr	r1, [r7, #4]
 800eb8e:	4798      	blx	r3
 800eb90:	4603      	mov	r3, r0
 800eb92:	76bb      	strb	r3, [r7, #26]
 800eb94:	e001      	b.n	800eb9a <tcp_process+0x30e>
 800eb96:	2300      	movs	r3, #0
 800eb98:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800eb9a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb9e:	f113 0f0d 	cmn.w	r3, #13
 800eba2:	d102      	bne.n	800ebaa <tcp_process+0x31e>
          return ERR_ABRT;
 800eba4:	f06f 030c 	mvn.w	r3, #12
 800eba8:	e250      	b.n	800f04c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	8b5b      	ldrh	r3, [r3, #26]
 800ebae:	f043 0302 	orr.w	r3, r3, #2
 800ebb2:	b29a      	uxth	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ebb8:	e23a      	b.n	800f030 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ebba:	4b9d      	ldr	r3, [pc, #628]	; (800ee30 <tcp_process+0x5a4>)
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	f003 0310 	and.w	r3, r3, #16
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f000 8234 	beq.w	800f030 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebc8:	4b9a      	ldr	r3, [pc, #616]	; (800ee34 <tcp_process+0x5a8>)
 800ebca:	6819      	ldr	r1, [r3, #0]
 800ebcc:	4b9a      	ldr	r3, [pc, #616]	; (800ee38 <tcp_process+0x5ac>)
 800ebce:	881b      	ldrh	r3, [r3, #0]
 800ebd0:	461a      	mov	r2, r3
 800ebd2:	4b9a      	ldr	r3, [pc, #616]	; (800ee3c <tcp_process+0x5b0>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebd8:	4b99      	ldr	r3, [pc, #612]	; (800ee40 <tcp_process+0x5b4>)
 800ebda:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebdc:	885b      	ldrh	r3, [r3, #2]
 800ebde:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebe0:	4a97      	ldr	r2, [pc, #604]	; (800ee40 <tcp_process+0x5b4>)
 800ebe2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebe4:	8812      	ldrh	r2, [r2, #0]
 800ebe6:	b292      	uxth	r2, r2
 800ebe8:	9202      	str	r2, [sp, #8]
 800ebea:	9301      	str	r3, [sp, #4]
 800ebec:	4b95      	ldr	r3, [pc, #596]	; (800ee44 <tcp_process+0x5b8>)
 800ebee:	9300      	str	r3, [sp, #0]
 800ebf0:	4b95      	ldr	r3, [pc, #596]	; (800ee48 <tcp_process+0x5bc>)
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f003 f8db 	bl	8011db0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec00:	2b05      	cmp	r3, #5
 800ec02:	f200 8215 	bhi.w	800f030 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f002 fea5 	bl	801195c <tcp_rexmit_rto>
      break;
 800ec12:	e20d      	b.n	800f030 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ec14:	4b86      	ldr	r3, [pc, #536]	; (800ee30 <tcp_process+0x5a4>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	f003 0310 	and.w	r3, r3, #16
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f000 80a1 	beq.w	800ed64 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec22:	4b84      	ldr	r3, [pc, #528]	; (800ee34 <tcp_process+0x5a8>)
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	3b01      	subs	r3, #1
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	db7e      	blt.n	800ed30 <tcp_process+0x4a4>
 800ec32:	4b80      	ldr	r3, [pc, #512]	; (800ee34 <tcp_process+0x5a8>)
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec3a:	1ad3      	subs	r3, r2, r3
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	dc77      	bgt.n	800ed30 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2204      	movs	r2, #4
 800ec44:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d102      	bne.n	800ec54 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ec4e:	23fa      	movs	r3, #250	; 0xfa
 800ec50:	76bb      	strb	r3, [r7, #26]
 800ec52:	e01d      	b.n	800ec90 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec58:	699b      	ldr	r3, [r3, #24]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d106      	bne.n	800ec6c <tcp_process+0x3e0>
 800ec5e:	4b7b      	ldr	r3, [pc, #492]	; (800ee4c <tcp_process+0x5c0>)
 800ec60:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ec64:	497a      	ldr	r1, [pc, #488]	; (800ee50 <tcp_process+0x5c4>)
 800ec66:	487b      	ldr	r0, [pc, #492]	; (800ee54 <tcp_process+0x5c8>)
 800ec68:	f006 f88e 	bl	8014d88 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec70:	699b      	ldr	r3, [r3, #24]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d00a      	beq.n	800ec8c <tcp_process+0x400>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec7a:	699b      	ldr	r3, [r3, #24]
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	6910      	ldr	r0, [r2, #16]
 800ec80:	2200      	movs	r2, #0
 800ec82:	6879      	ldr	r1, [r7, #4]
 800ec84:	4798      	blx	r3
 800ec86:	4603      	mov	r3, r0
 800ec88:	76bb      	strb	r3, [r7, #26]
 800ec8a:	e001      	b.n	800ec90 <tcp_process+0x404>
 800ec8c:	23f0      	movs	r3, #240	; 0xf0
 800ec8e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ec90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d00a      	beq.n	800ecae <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ec98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec9c:	f113 0f0d 	cmn.w	r3, #13
 800eca0:	d002      	beq.n	800eca8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f7fd fcea 	bl	800c67c <tcp_abort>
            }
            return ERR_ABRT;
 800eca8:	f06f 030c 	mvn.w	r3, #12
 800ecac:	e1ce      	b.n	800f04c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 fae0 	bl	800f274 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ecb4:	4b68      	ldr	r3, [pc, #416]	; (800ee58 <tcp_process+0x5cc>)
 800ecb6:	881b      	ldrh	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d005      	beq.n	800ecc8 <tcp_process+0x43c>
            recv_acked--;
 800ecbc:	4b66      	ldr	r3, [pc, #408]	; (800ee58 <tcp_process+0x5cc>)
 800ecbe:	881b      	ldrh	r3, [r3, #0]
 800ecc0:	3b01      	subs	r3, #1
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	4b64      	ldr	r3, [pc, #400]	; (800ee58 <tcp_process+0x5cc>)
 800ecc6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eccc:	009a      	lsls	r2, r3, #2
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecd2:	005b      	lsls	r3, r3, #1
 800ecd4:	f241 111c 	movw	r1, #4380	; 0x111c
 800ecd8:	428b      	cmp	r3, r1
 800ecda:	bf38      	it	cc
 800ecdc:	460b      	movcc	r3, r1
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d204      	bcs.n	800ecec <tcp_process+0x460>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ece6:	009b      	lsls	r3, r3, #2
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	e00d      	b.n	800ed08 <tcp_process+0x47c>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecf0:	005b      	lsls	r3, r3, #1
 800ecf2:	f241 121c 	movw	r2, #4380	; 0x111c
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d904      	bls.n	800ed04 <tcp_process+0x478>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecfe:	005b      	lsls	r3, r3, #1
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	e001      	b.n	800ed08 <tcp_process+0x47c>
 800ed04:	f241 131c 	movw	r3, #4380	; 0x111c
 800ed08:	687a      	ldr	r2, [r7, #4]
 800ed0a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ed0e:	4b53      	ldr	r3, [pc, #332]	; (800ee5c <tcp_process+0x5d0>)
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	f003 0320 	and.w	r3, r3, #32
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d037      	beq.n	800ed8a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	8b5b      	ldrh	r3, [r3, #26]
 800ed1e:	f043 0302 	orr.w	r3, r3, #2
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2207      	movs	r2, #7
 800ed2c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ed2e:	e02c      	b.n	800ed8a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed30:	4b40      	ldr	r3, [pc, #256]	; (800ee34 <tcp_process+0x5a8>)
 800ed32:	6819      	ldr	r1, [r3, #0]
 800ed34:	4b40      	ldr	r3, [pc, #256]	; (800ee38 <tcp_process+0x5ac>)
 800ed36:	881b      	ldrh	r3, [r3, #0]
 800ed38:	461a      	mov	r2, r3
 800ed3a:	4b40      	ldr	r3, [pc, #256]	; (800ee3c <tcp_process+0x5b0>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed40:	4b3f      	ldr	r3, [pc, #252]	; (800ee40 <tcp_process+0x5b4>)
 800ed42:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed44:	885b      	ldrh	r3, [r3, #2]
 800ed46:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed48:	4a3d      	ldr	r2, [pc, #244]	; (800ee40 <tcp_process+0x5b4>)
 800ed4a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed4c:	8812      	ldrh	r2, [r2, #0]
 800ed4e:	b292      	uxth	r2, r2
 800ed50:	9202      	str	r2, [sp, #8]
 800ed52:	9301      	str	r3, [sp, #4]
 800ed54:	4b3b      	ldr	r3, [pc, #236]	; (800ee44 <tcp_process+0x5b8>)
 800ed56:	9300      	str	r3, [sp, #0]
 800ed58:	4b3b      	ldr	r3, [pc, #236]	; (800ee48 <tcp_process+0x5bc>)
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f003 f827 	bl	8011db0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ed62:	e167      	b.n	800f034 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ed64:	4b32      	ldr	r3, [pc, #200]	; (800ee30 <tcp_process+0x5a4>)
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	f003 0302 	and.w	r3, r3, #2
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 8161 	beq.w	800f034 <tcp_process+0x7a8>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed76:	1e5a      	subs	r2, r3, #1
 800ed78:	4b30      	ldr	r3, [pc, #192]	; (800ee3c <tcp_process+0x5b0>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	f040 8159 	bne.w	800f034 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f002 fe0c 	bl	80119a0 <tcp_rexmit>
      break;
 800ed88:	e154      	b.n	800f034 <tcp_process+0x7a8>
 800ed8a:	e153      	b.n	800f034 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f000 fa71 	bl	800f274 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ed92:	4b32      	ldr	r3, [pc, #200]	; (800ee5c <tcp_process+0x5d0>)
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	f003 0320 	and.w	r3, r3, #32
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f000 814c 	beq.w	800f038 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	8b5b      	ldrh	r3, [r3, #26]
 800eda4:	f043 0302 	orr.w	r3, r3, #2
 800eda8:	b29a      	uxth	r2, r3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2207      	movs	r2, #7
 800edb2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800edb4:	e140      	b.n	800f038 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f000 fa5c 	bl	800f274 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800edbc:	4b27      	ldr	r3, [pc, #156]	; (800ee5c <tcp_process+0x5d0>)
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	f003 0320 	and.w	r3, r3, #32
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d071      	beq.n	800eeac <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800edc8:	4b19      	ldr	r3, [pc, #100]	; (800ee30 <tcp_process+0x5a4>)
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	f003 0310 	and.w	r3, r3, #16
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d060      	beq.n	800ee96 <tcp_process+0x60a>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edd8:	4b16      	ldr	r3, [pc, #88]	; (800ee34 <tcp_process+0x5a8>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d15a      	bne.n	800ee96 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d156      	bne.n	800ee96 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	8b5b      	ldrh	r3, [r3, #26]
 800edec:	f043 0302 	orr.w	r3, r3, #2
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f7fe fdbe 	bl	800d978 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800edfc:	4b18      	ldr	r3, [pc, #96]	; (800ee60 <tcp_process+0x5d4>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	687a      	ldr	r2, [r7, #4]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d105      	bne.n	800ee12 <tcp_process+0x586>
 800ee06:	4b16      	ldr	r3, [pc, #88]	; (800ee60 <tcp_process+0x5d4>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	4a14      	ldr	r2, [pc, #80]	; (800ee60 <tcp_process+0x5d4>)
 800ee0e:	6013      	str	r3, [r2, #0]
 800ee10:	e02e      	b.n	800ee70 <tcp_process+0x5e4>
 800ee12:	4b13      	ldr	r3, [pc, #76]	; (800ee60 <tcp_process+0x5d4>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	617b      	str	r3, [r7, #20]
 800ee18:	e027      	b.n	800ee6a <tcp_process+0x5de>
 800ee1a:	697b      	ldr	r3, [r7, #20]
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d11f      	bne.n	800ee64 <tcp_process+0x5d8>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	68da      	ldr	r2, [r3, #12]
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	60da      	str	r2, [r3, #12]
 800ee2c:	e020      	b.n	800ee70 <tcp_process+0x5e4>
 800ee2e:	bf00      	nop
 800ee30:	20000a44 	.word	0x20000a44
 800ee34:	20000a3c 	.word	0x20000a3c
 800ee38:	20000a42 	.word	0x20000a42
 800ee3c:	20000a38 	.word	0x20000a38
 800ee40:	20000a28 	.word	0x20000a28
 800ee44:	20009f9c 	.word	0x20009f9c
 800ee48:	20009fa0 	.word	0x20009fa0
 800ee4c:	080184a0 	.word	0x080184a0
 800ee50:	08018740 	.word	0x08018740
 800ee54:	080184ec 	.word	0x080184ec
 800ee58:	20000a40 	.word	0x20000a40
 800ee5c:	20000a45 	.word	0x20000a45
 800ee60:	2000d7dc 	.word	0x2000d7dc
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	617b      	str	r3, [r7, #20]
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d1d4      	bne.n	800ee1a <tcp_process+0x58e>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	60da      	str	r2, [r3, #12]
 800ee76:	4b77      	ldr	r3, [pc, #476]	; (800f054 <tcp_process+0x7c8>)
 800ee78:	2201      	movs	r2, #1
 800ee7a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	220a      	movs	r2, #10
 800ee80:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ee82:	4b75      	ldr	r3, [pc, #468]	; (800f058 <tcp_process+0x7cc>)
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	60da      	str	r2, [r3, #12]
 800ee8a:	4a73      	ldr	r2, [pc, #460]	; (800f058 <tcp_process+0x7cc>)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6013      	str	r3, [r2, #0]
 800ee90:	f003 f950 	bl	8012134 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ee94:	e0d2      	b.n	800f03c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	8b5b      	ldrh	r3, [r3, #26]
 800ee9a:	f043 0302 	orr.w	r3, r3, #2
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2208      	movs	r2, #8
 800eea8:	751a      	strb	r2, [r3, #20]
      break;
 800eeaa:	e0c7      	b.n	800f03c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eeac:	4b6b      	ldr	r3, [pc, #428]	; (800f05c <tcp_process+0x7d0>)
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	f003 0310 	and.w	r3, r3, #16
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f000 80c1 	beq.w	800f03c <tcp_process+0x7b0>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eebe:	4b68      	ldr	r3, [pc, #416]	; (800f060 <tcp_process+0x7d4>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	f040 80ba 	bne.w	800f03c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eecc:	2b00      	cmp	r3, #0
 800eece:	f040 80b5 	bne.w	800f03c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2206      	movs	r2, #6
 800eed6:	751a      	strb	r2, [r3, #20]
      break;
 800eed8:	e0b0      	b.n	800f03c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f000 f9ca 	bl	800f274 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eee0:	4b60      	ldr	r3, [pc, #384]	; (800f064 <tcp_process+0x7d8>)
 800eee2:	781b      	ldrb	r3, [r3, #0]
 800eee4:	f003 0320 	and.w	r3, r3, #32
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	f000 80a9 	beq.w	800f040 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	8b5b      	ldrh	r3, [r3, #26]
 800eef2:	f043 0302 	orr.w	r3, r3, #2
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f7fe fd3b 	bl	800d978 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef02:	4b59      	ldr	r3, [pc, #356]	; (800f068 <tcp_process+0x7dc>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d105      	bne.n	800ef18 <tcp_process+0x68c>
 800ef0c:	4b56      	ldr	r3, [pc, #344]	; (800f068 <tcp_process+0x7dc>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	4a55      	ldr	r2, [pc, #340]	; (800f068 <tcp_process+0x7dc>)
 800ef14:	6013      	str	r3, [r2, #0]
 800ef16:	e013      	b.n	800ef40 <tcp_process+0x6b4>
 800ef18:	4b53      	ldr	r3, [pc, #332]	; (800f068 <tcp_process+0x7dc>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	613b      	str	r3, [r7, #16]
 800ef1e:	e00c      	b.n	800ef3a <tcp_process+0x6ae>
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d104      	bne.n	800ef34 <tcp_process+0x6a8>
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	68da      	ldr	r2, [r3, #12]
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	60da      	str	r2, [r3, #12]
 800ef32:	e005      	b.n	800ef40 <tcp_process+0x6b4>
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	613b      	str	r3, [r7, #16]
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d1ef      	bne.n	800ef20 <tcp_process+0x694>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	60da      	str	r2, [r3, #12]
 800ef46:	4b43      	ldr	r3, [pc, #268]	; (800f054 <tcp_process+0x7c8>)
 800ef48:	2201      	movs	r2, #1
 800ef4a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	220a      	movs	r2, #10
 800ef50:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ef52:	4b41      	ldr	r3, [pc, #260]	; (800f058 <tcp_process+0x7cc>)
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	60da      	str	r2, [r3, #12]
 800ef5a:	4a3f      	ldr	r2, [pc, #252]	; (800f058 <tcp_process+0x7cc>)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6013      	str	r3, [r2, #0]
 800ef60:	f003 f8e8 	bl	8012134 <tcp_timer_needed>
      }
      break;
 800ef64:	e06c      	b.n	800f040 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f984 	bl	800f274 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ef6c:	4b3b      	ldr	r3, [pc, #236]	; (800f05c <tcp_process+0x7d0>)
 800ef6e:	781b      	ldrb	r3, [r3, #0]
 800ef70:	f003 0310 	and.w	r3, r3, #16
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d065      	beq.n	800f044 <tcp_process+0x7b8>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef7c:	4b38      	ldr	r3, [pc, #224]	; (800f060 <tcp_process+0x7d4>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d15f      	bne.n	800f044 <tcp_process+0x7b8>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d15b      	bne.n	800f044 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f7fe fcf3 	bl	800d978 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef92:	4b35      	ldr	r3, [pc, #212]	; (800f068 <tcp_process+0x7dc>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d105      	bne.n	800efa8 <tcp_process+0x71c>
 800ef9c:	4b32      	ldr	r3, [pc, #200]	; (800f068 <tcp_process+0x7dc>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	68db      	ldr	r3, [r3, #12]
 800efa2:	4a31      	ldr	r2, [pc, #196]	; (800f068 <tcp_process+0x7dc>)
 800efa4:	6013      	str	r3, [r2, #0]
 800efa6:	e013      	b.n	800efd0 <tcp_process+0x744>
 800efa8:	4b2f      	ldr	r3, [pc, #188]	; (800f068 <tcp_process+0x7dc>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	60fb      	str	r3, [r7, #12]
 800efae:	e00c      	b.n	800efca <tcp_process+0x73e>
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d104      	bne.n	800efc4 <tcp_process+0x738>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	68da      	ldr	r2, [r3, #12]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	60da      	str	r2, [r3, #12]
 800efc2:	e005      	b.n	800efd0 <tcp_process+0x744>
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	60fb      	str	r3, [r7, #12]
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d1ef      	bne.n	800efb0 <tcp_process+0x724>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	60da      	str	r2, [r3, #12]
 800efd6:	4b1f      	ldr	r3, [pc, #124]	; (800f054 <tcp_process+0x7c8>)
 800efd8:	2201      	movs	r2, #1
 800efda:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	220a      	movs	r2, #10
 800efe0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efe2:	4b1d      	ldr	r3, [pc, #116]	; (800f058 <tcp_process+0x7cc>)
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	60da      	str	r2, [r3, #12]
 800efea:	4a1b      	ldr	r2, [pc, #108]	; (800f058 <tcp_process+0x7cc>)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6013      	str	r3, [r2, #0]
 800eff0:	f003 f8a0 	bl	8012134 <tcp_timer_needed>
      }
      break;
 800eff4:	e026      	b.n	800f044 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 f93c 	bl	800f274 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800effc:	4b17      	ldr	r3, [pc, #92]	; (800f05c <tcp_process+0x7d0>)
 800effe:	781b      	ldrb	r3, [r3, #0]
 800f000:	f003 0310 	and.w	r3, r3, #16
 800f004:	2b00      	cmp	r3, #0
 800f006:	d01f      	beq.n	800f048 <tcp_process+0x7bc>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f00c:	4b14      	ldr	r3, [pc, #80]	; (800f060 <tcp_process+0x7d4>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	429a      	cmp	r2, r3
 800f012:	d119      	bne.n	800f048 <tcp_process+0x7bc>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d115      	bne.n	800f048 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f01c:	4b11      	ldr	r3, [pc, #68]	; (800f064 <tcp_process+0x7d8>)
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	f043 0310 	orr.w	r3, r3, #16
 800f024:	b2da      	uxtb	r2, r3
 800f026:	4b0f      	ldr	r3, [pc, #60]	; (800f064 <tcp_process+0x7d8>)
 800f028:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f02a:	e00d      	b.n	800f048 <tcp_process+0x7bc>
    default:
      break;
 800f02c:	bf00      	nop
 800f02e:	e00c      	b.n	800f04a <tcp_process+0x7be>
      break;
 800f030:	bf00      	nop
 800f032:	e00a      	b.n	800f04a <tcp_process+0x7be>
      break;
 800f034:	bf00      	nop
 800f036:	e008      	b.n	800f04a <tcp_process+0x7be>
      break;
 800f038:	bf00      	nop
 800f03a:	e006      	b.n	800f04a <tcp_process+0x7be>
      break;
 800f03c:	bf00      	nop
 800f03e:	e004      	b.n	800f04a <tcp_process+0x7be>
      break;
 800f040:	bf00      	nop
 800f042:	e002      	b.n	800f04a <tcp_process+0x7be>
      break;
 800f044:	bf00      	nop
 800f046:	e000      	b.n	800f04a <tcp_process+0x7be>
      break;
 800f048:	bf00      	nop
  }
  return ERR_OK;
 800f04a:	2300      	movs	r3, #0
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3724      	adds	r7, #36	; 0x24
 800f050:	46bd      	mov	sp, r7
 800f052:	bd90      	pop	{r4, r7, pc}
 800f054:	2000d7d8 	.word	0x2000d7d8
 800f058:	2000d7ec 	.word	0x2000d7ec
 800f05c:	20000a44 	.word	0x20000a44
 800f060:	20000a3c 	.word	0x20000a3c
 800f064:	20000a45 	.word	0x20000a45
 800f068:	2000d7dc 	.word	0x2000d7dc

0800f06c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f06c:	b590      	push	{r4, r7, lr}
 800f06e:	b085      	sub	sp, #20
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d106      	bne.n	800f08a <tcp_oos_insert_segment+0x1e>
 800f07c:	4b3b      	ldr	r3, [pc, #236]	; (800f16c <tcp_oos_insert_segment+0x100>)
 800f07e:	f240 421f 	movw	r2, #1055	; 0x41f
 800f082:	493b      	ldr	r1, [pc, #236]	; (800f170 <tcp_oos_insert_segment+0x104>)
 800f084:	483b      	ldr	r0, [pc, #236]	; (800f174 <tcp_oos_insert_segment+0x108>)
 800f086:	f005 fe7f 	bl	8014d88 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	899b      	ldrh	r3, [r3, #12]
 800f090:	b29b      	uxth	r3, r3
 800f092:	4618      	mov	r0, r3
 800f094:	f7fb f9d8 	bl	800a448 <lwip_htons>
 800f098:	4603      	mov	r3, r0
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	f003 0301 	and.w	r3, r3, #1
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d028      	beq.n	800f0f6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f0a4:	6838      	ldr	r0, [r7, #0]
 800f0a6:	f7fe f979 	bl	800d39c <tcp_segs_free>
    next = NULL;
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	603b      	str	r3, [r7, #0]
 800f0ae:	e056      	b.n	800f15e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	899b      	ldrh	r3, [r3, #12]
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f7fb f9c5 	bl	800a448 <lwip_htons>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	f003 0301 	and.w	r3, r3, #1
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d00d      	beq.n	800f0e6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	68db      	ldr	r3, [r3, #12]
 800f0ce:	899b      	ldrh	r3, [r3, #12]
 800f0d0:	b29c      	uxth	r4, r3
 800f0d2:	2001      	movs	r0, #1
 800f0d4:	f7fb f9b8 	bl	800a448 <lwip_htons>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	461a      	mov	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	68db      	ldr	r3, [r3, #12]
 800f0e0:	4322      	orrs	r2, r4
 800f0e2:	b292      	uxth	r2, r2
 800f0e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f0f0:	68f8      	ldr	r0, [r7, #12]
 800f0f2:	f7fe f968 	bl	800d3c6 <tcp_seg_free>
    while (next &&
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00e      	beq.n	800f11a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	891b      	ldrh	r3, [r3, #8]
 800f100:	461a      	mov	r2, r3
 800f102:	4b1d      	ldr	r3, [pc, #116]	; (800f178 <tcp_oos_insert_segment+0x10c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	441a      	add	r2, r3
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	8909      	ldrh	r1, [r1, #8]
 800f112:	440b      	add	r3, r1
 800f114:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f116:	2b00      	cmp	r3, #0
 800f118:	daca      	bge.n	800f0b0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d01e      	beq.n	800f15e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	891b      	ldrh	r3, [r3, #8]
 800f124:	461a      	mov	r2, r3
 800f126:	4b14      	ldr	r3, [pc, #80]	; (800f178 <tcp_oos_insert_segment+0x10c>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	441a      	add	r2, r3
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f134:	2b00      	cmp	r3, #0
 800f136:	dd12      	ble.n	800f15e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	68db      	ldr	r3, [r3, #12]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	b29a      	uxth	r2, r3
 800f140:	4b0d      	ldr	r3, [pc, #52]	; (800f178 <tcp_oos_insert_segment+0x10c>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	b29b      	uxth	r3, r3
 800f146:	1ad3      	subs	r3, r2, r3
 800f148:	b29a      	uxth	r2, r3
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	685a      	ldr	r2, [r3, #4]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	891b      	ldrh	r3, [r3, #8]
 800f156:	4619      	mov	r1, r3
 800f158:	4610      	mov	r0, r2
 800f15a:	f7fc fb81 	bl	800b860 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	683a      	ldr	r2, [r7, #0]
 800f162:	601a      	str	r2, [r3, #0]
}
 800f164:	bf00      	nop
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd90      	pop	{r4, r7, pc}
 800f16c:	080184a0 	.word	0x080184a0
 800f170:	08018760 	.word	0x08018760
 800f174:	080184ec 	.word	0x080184ec
 800f178:	20000a38 	.word	0x20000a38

0800f17c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f17c:	b5b0      	push	{r4, r5, r7, lr}
 800f17e:	b086      	sub	sp, #24
 800f180:	af00      	add	r7, sp, #0
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	607a      	str	r2, [r7, #4]
 800f188:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f18a:	e03e      	b.n	800f20a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7fc fd6e 	bl	800bc7c <pbuf_clen>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1aa:	8a7a      	ldrh	r2, [r7, #18]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d906      	bls.n	800f1be <tcp_free_acked_segments+0x42>
 800f1b0:	4b2a      	ldr	r3, [pc, #168]	; (800f25c <tcp_free_acked_segments+0xe0>)
 800f1b2:	f240 4257 	movw	r2, #1111	; 0x457
 800f1b6:	492a      	ldr	r1, [pc, #168]	; (800f260 <tcp_free_acked_segments+0xe4>)
 800f1b8:	482a      	ldr	r0, [pc, #168]	; (800f264 <tcp_free_acked_segments+0xe8>)
 800f1ba:	f005 fde5 	bl	8014d88 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f1c4:	8a7b      	ldrh	r3, [r7, #18]
 800f1c6:	1ad3      	subs	r3, r2, r3
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	891a      	ldrh	r2, [r3, #8]
 800f1d4:	4b24      	ldr	r3, [pc, #144]	; (800f268 <tcp_free_acked_segments+0xec>)
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	4413      	add	r3, r2
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	4b22      	ldr	r3, [pc, #136]	; (800f268 <tcp_free_acked_segments+0xec>)
 800f1de:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f1e0:	6978      	ldr	r0, [r7, #20]
 800f1e2:	f7fe f8f0 	bl	800d3c6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00c      	beq.n	800f20a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d109      	bne.n	800f20a <tcp_free_acked_segments+0x8e>
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d106      	bne.n	800f20a <tcp_free_acked_segments+0x8e>
 800f1fc:	4b17      	ldr	r3, [pc, #92]	; (800f25c <tcp_free_acked_segments+0xe0>)
 800f1fe:	f240 4261 	movw	r2, #1121	; 0x461
 800f202:	491a      	ldr	r1, [pc, #104]	; (800f26c <tcp_free_acked_segments+0xf0>)
 800f204:	4817      	ldr	r0, [pc, #92]	; (800f264 <tcp_free_acked_segments+0xe8>)
 800f206:	f005 fdbf 	bl	8014d88 <iprintf>
  while (seg_list != NULL &&
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d020      	beq.n	800f252 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	4618      	mov	r0, r3
 800f218:	f7fb f92b 	bl	800a472 <lwip_htonl>
 800f21c:	4604      	mov	r4, r0
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	891b      	ldrh	r3, [r3, #8]
 800f222:	461d      	mov	r5, r3
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	68db      	ldr	r3, [r3, #12]
 800f228:	899b      	ldrh	r3, [r3, #12]
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fb f90b 	bl	800a448 <lwip_htons>
 800f232:	4603      	mov	r3, r0
 800f234:	b2db      	uxtb	r3, r3
 800f236:	f003 0303 	and.w	r3, r3, #3
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d001      	beq.n	800f242 <tcp_free_acked_segments+0xc6>
 800f23e:	2301      	movs	r3, #1
 800f240:	e000      	b.n	800f244 <tcp_free_acked_segments+0xc8>
 800f242:	2300      	movs	r3, #0
 800f244:	442b      	add	r3, r5
 800f246:	18e2      	adds	r2, r4, r3
 800f248:	4b09      	ldr	r3, [pc, #36]	; (800f270 <tcp_free_acked_segments+0xf4>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f24e:	2b00      	cmp	r3, #0
 800f250:	dd9c      	ble.n	800f18c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f252:	68bb      	ldr	r3, [r7, #8]
}
 800f254:	4618      	mov	r0, r3
 800f256:	3718      	adds	r7, #24
 800f258:	46bd      	mov	sp, r7
 800f25a:	bdb0      	pop	{r4, r5, r7, pc}
 800f25c:	080184a0 	.word	0x080184a0
 800f260:	08018788 	.word	0x08018788
 800f264:	080184ec 	.word	0x080184ec
 800f268:	20000a40 	.word	0x20000a40
 800f26c:	080187b0 	.word	0x080187b0
 800f270:	20000a3c 	.word	0x20000a3c

0800f274 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f274:	b5b0      	push	{r4, r5, r7, lr}
 800f276:	b094      	sub	sp, #80	; 0x50
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f27c:	2300      	movs	r3, #0
 800f27e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d106      	bne.n	800f294 <tcp_receive+0x20>
 800f286:	4ba6      	ldr	r3, [pc, #664]	; (800f520 <tcp_receive+0x2ac>)
 800f288:	f240 427b 	movw	r2, #1147	; 0x47b
 800f28c:	49a5      	ldr	r1, [pc, #660]	; (800f524 <tcp_receive+0x2b0>)
 800f28e:	48a6      	ldr	r0, [pc, #664]	; (800f528 <tcp_receive+0x2b4>)
 800f290:	f005 fd7a 	bl	8014d88 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	7d1b      	ldrb	r3, [r3, #20]
 800f298:	2b03      	cmp	r3, #3
 800f29a:	d806      	bhi.n	800f2aa <tcp_receive+0x36>
 800f29c:	4ba0      	ldr	r3, [pc, #640]	; (800f520 <tcp_receive+0x2ac>)
 800f29e:	f240 427c 	movw	r2, #1148	; 0x47c
 800f2a2:	49a2      	ldr	r1, [pc, #648]	; (800f52c <tcp_receive+0x2b8>)
 800f2a4:	48a0      	ldr	r0, [pc, #640]	; (800f528 <tcp_receive+0x2b4>)
 800f2a6:	f005 fd6f 	bl	8014d88 <iprintf>

  if (flags & TCP_ACK) {
 800f2aa:	4ba1      	ldr	r3, [pc, #644]	; (800f530 <tcp_receive+0x2bc>)
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	f003 0310 	and.w	r3, r3, #16
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f000 8263 	beq.w	800f77e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2be:	461a      	mov	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2c4:	4413      	add	r3, r2
 800f2c6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2cc:	4b99      	ldr	r3, [pc, #612]	; (800f534 <tcp_receive+0x2c0>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	1ad3      	subs	r3, r2, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	db1b      	blt.n	800f30e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2da:	4b96      	ldr	r3, [pc, #600]	; (800f534 <tcp_receive+0x2c0>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d106      	bne.n	800f2f0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2e6:	4b94      	ldr	r3, [pc, #592]	; (800f538 <tcp_receive+0x2c4>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	db0e      	blt.n	800f30e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2f4:	4b90      	ldr	r3, [pc, #576]	; (800f538 <tcp_receive+0x2c4>)
 800f2f6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d125      	bne.n	800f348 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2fc:	4b8f      	ldr	r3, [pc, #572]	; (800f53c <tcp_receive+0x2c8>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	89db      	ldrh	r3, [r3, #14]
 800f302:	b29a      	uxth	r2, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d91c      	bls.n	800f348 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f30e:	4b8b      	ldr	r3, [pc, #556]	; (800f53c <tcp_receive+0x2c8>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	89db      	ldrh	r3, [r3, #14]
 800f314:	b29a      	uxth	r2, r3
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f328:	429a      	cmp	r2, r3
 800f32a:	d205      	bcs.n	800f338 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f338:	4b7e      	ldr	r3, [pc, #504]	; (800f534 <tcp_receive+0x2c0>)
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f340:	4b7d      	ldr	r3, [pc, #500]	; (800f538 <tcp_receive+0x2c4>)
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f348:	4b7b      	ldr	r3, [pc, #492]	; (800f538 <tcp_receive+0x2c4>)
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f350:	1ad3      	subs	r3, r2, r3
 800f352:	2b00      	cmp	r3, #0
 800f354:	dc58      	bgt.n	800f408 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f356:	4b7a      	ldr	r3, [pc, #488]	; (800f540 <tcp_receive+0x2cc>)
 800f358:	881b      	ldrh	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d14b      	bne.n	800f3f6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f368:	4413      	add	r3, r2
 800f36a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d142      	bne.n	800f3f6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f376:	2b00      	cmp	r3, #0
 800f378:	db3d      	blt.n	800f3f6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f37e:	4b6e      	ldr	r3, [pc, #440]	; (800f538 <tcp_receive+0x2c4>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	429a      	cmp	r2, r3
 800f384:	d137      	bne.n	800f3f6 <tcp_receive+0x182>
              found_dupack = 1;
 800f386:	2301      	movs	r3, #1
 800f388:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f390:	2bff      	cmp	r3, #255	; 0xff
 800f392:	d007      	beq.n	800f3a4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f39a:	3301      	adds	r3, #1
 800f39c:	b2da      	uxtb	r2, r3
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3aa:	2b03      	cmp	r3, #3
 800f3ac:	d91b      	bls.n	800f3e6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3b8:	4413      	add	r3, r2
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	d30a      	bcc.n	800f3dc <tcp_receive+0x168>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3d0:	4413      	add	r3, r2
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3da:	e004      	b.n	800f3e6 <tcp_receive+0x172>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d902      	bls.n	800f3f6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f002 fb41 	bl	8011a78 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f3f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f040 8160 	bne.w	800f6be <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f406:	e15a      	b.n	800f6be <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f408:	4b4b      	ldr	r3, [pc, #300]	; (800f538 <tcp_receive+0x2c4>)
 800f40a:	681a      	ldr	r2, [r3, #0]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	3b01      	subs	r3, #1
 800f414:	2b00      	cmp	r3, #0
 800f416:	f2c0 814d 	blt.w	800f6b4 <tcp_receive+0x440>
 800f41a:	4b47      	ldr	r3, [pc, #284]	; (800f538 <tcp_receive+0x2c4>)
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	f300 8145 	bgt.w	800f6b4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	8b5b      	ldrh	r3, [r3, #26]
 800f42e:	f003 0304 	and.w	r3, r3, #4
 800f432:	2b00      	cmp	r3, #0
 800f434:	d010      	beq.n	800f458 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	8b5b      	ldrh	r3, [r3, #26]
 800f43a:	f023 0304 	bic.w	r3, r3, #4
 800f43e:	b29a      	uxth	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2200      	movs	r2, #0
 800f45c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f466:	10db      	asrs	r3, r3, #3
 800f468:	b21b      	sxth	r3, r3
 800f46a:	b29a      	uxth	r2, r3
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f472:	b29b      	uxth	r3, r3
 800f474:	4413      	add	r3, r2
 800f476:	b29b      	uxth	r3, r3
 800f478:	b21a      	sxth	r2, r3
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f480:	4b2d      	ldr	r3, [pc, #180]	; (800f538 <tcp_receive+0x2c4>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	b29a      	uxth	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	1ad3      	subs	r3, r2, r3
 800f48e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2200      	movs	r2, #0
 800f494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f498:	4b27      	ldr	r3, [pc, #156]	; (800f538 <tcp_receive+0x2c4>)
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	7d1b      	ldrb	r3, [r3, #20]
 800f4a4:	2b03      	cmp	r3, #3
 800f4a6:	f240 8096 	bls.w	800f5d6 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d244      	bcs.n	800f544 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	8b5b      	ldrh	r3, [r3, #26]
 800f4be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d001      	beq.n	800f4ca <tcp_receive+0x256>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	e000      	b.n	800f4cc <tcp_receive+0x258>
 800f4ca:	2302      	movs	r3, #2
 800f4cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f4d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4da:	fb12 f303 	smulbb	r3, r2, r3
 800f4de:	b29b      	uxth	r3, r3
 800f4e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	bf28      	it	cs
 800f4e6:	4613      	movcs	r3, r2
 800f4e8:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f4f2:	4413      	add	r3, r2
 800f4f4:	b29a      	uxth	r2, r3
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d309      	bcc.n	800f514 <tcp_receive+0x2a0>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f506:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f508:	4413      	add	r3, r2
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f512:	e060      	b.n	800f5d6 <tcp_receive+0x362>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f51a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f51e:	e05a      	b.n	800f5d6 <tcp_receive+0x362>
 800f520:	080184a0 	.word	0x080184a0
 800f524:	080187d0 	.word	0x080187d0
 800f528:	080184ec 	.word	0x080184ec
 800f52c:	080187ec 	.word	0x080187ec
 800f530:	20000a44 	.word	0x20000a44
 800f534:	20000a38 	.word	0x20000a38
 800f538:	20000a3c 	.word	0x20000a3c
 800f53c:	20000a28 	.word	0x20000a28
 800f540:	20000a42 	.word	0x20000a42
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f54a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f54c:	4413      	add	r3, r2
 800f54e:	b29a      	uxth	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f556:	429a      	cmp	r2, r3
 800f558:	d309      	bcc.n	800f56e <tcp_receive+0x2fa>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f560:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f562:	4413      	add	r3, r2
 800f564:	b29a      	uxth	r2, r3
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f56c:	e004      	b.n	800f578 <tcp_receive+0x304>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f584:	429a      	cmp	r2, r3
 800f586:	d326      	bcc.n	800f5d6 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f594:	1ad3      	subs	r3, r2, r3
 800f596:	b29a      	uxth	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5a8:	4413      	add	r3, r2
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d30a      	bcc.n	800f5cc <tcp_receive+0x358>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5c0:	4413      	add	r3, r2
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f5ca:	e004      	b.n	800f5d6 <tcp_receive+0x362>
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5de:	4a98      	ldr	r2, [pc, #608]	; (800f840 <tcp_receive+0x5cc>)
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7ff fdcb 	bl	800f17c <tcp_free_acked_segments>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5f4:	4a93      	ldr	r2, [pc, #588]	; (800f844 <tcp_receive+0x5d0>)
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7ff fdc0 	bl	800f17c <tcp_free_acked_segments>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f606:	2b00      	cmp	r3, #0
 800f608:	d104      	bne.n	800f614 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f610:	861a      	strh	r2, [r3, #48]	; 0x30
 800f612:	e002      	b.n	800f61a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	2200      	movs	r2, #0
 800f618:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2200      	movs	r2, #0
 800f61e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f624:	2b00      	cmp	r3, #0
 800f626:	d103      	bne.n	800f630 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2200      	movs	r2, #0
 800f62c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f636:	4b84      	ldr	r3, [pc, #528]	; (800f848 <tcp_receive+0x5d4>)
 800f638:	881b      	ldrh	r3, [r3, #0]
 800f63a:	4413      	add	r3, r2
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	8b5b      	ldrh	r3, [r3, #26]
 800f648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d035      	beq.n	800f6bc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f654:	2b00      	cmp	r3, #0
 800f656:	d118      	bne.n	800f68a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d00c      	beq.n	800f67a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fa ff00 	bl	800a472 <lwip_htonl>
 800f672:	4603      	mov	r3, r0
 800f674:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f676:	2b00      	cmp	r3, #0
 800f678:	dc20      	bgt.n	800f6bc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	8b5b      	ldrh	r3, [r3, #26]
 800f67e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f682:	b29a      	uxth	r2, r3
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f688:	e018      	b.n	800f6bc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	4618      	mov	r0, r3
 800f698:	f7fa feeb 	bl	800a472 <lwip_htonl>
 800f69c:	4603      	mov	r3, r0
 800f69e:	1ae3      	subs	r3, r4, r3
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	dc0b      	bgt.n	800f6bc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	8b5b      	ldrh	r3, [r3, #26]
 800f6a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f6b2:	e003      	b.n	800f6bc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f002 fbcd 	bl	8011e54 <tcp_send_empty_ack>
 800f6ba:	e000      	b.n	800f6be <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f6bc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d05b      	beq.n	800f77e <tcp_receive+0x50a>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6ca:	4b60      	ldr	r3, [pc, #384]	; (800f84c <tcp_receive+0x5d8>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	1ad3      	subs	r3, r2, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	da54      	bge.n	800f77e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f6d4:	4b5e      	ldr	r3, [pc, #376]	; (800f850 <tcp_receive+0x5dc>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	b29a      	uxth	r2, r3
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	1ad3      	subs	r3, r2, r3
 800f6e2:	b29b      	uxth	r3, r3
 800f6e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f6e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f6f2:	10db      	asrs	r3, r3, #3
 800f6f4:	b21b      	sxth	r3, r3
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	b29b      	uxth	r3, r3
 800f6fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f706:	b29a      	uxth	r2, r3
 800f708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f70c:	4413      	add	r3, r2
 800f70e:	b29b      	uxth	r3, r3
 800f710:	b21a      	sxth	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f716:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	da05      	bge.n	800f72a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f71e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f722:	425b      	negs	r3, r3
 800f724:	b29b      	uxth	r3, r3
 800f726:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f72a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f734:	109b      	asrs	r3, r3, #2
 800f736:	b21b      	sxth	r3, r3
 800f738:	b29b      	uxth	r3, r3
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f748:	b29a      	uxth	r2, r3
 800f74a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f74e:	4413      	add	r3, r2
 800f750:	b29b      	uxth	r3, r3
 800f752:	b21a      	sxth	r2, r3
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f75e:	10db      	asrs	r3, r3, #3
 800f760:	b21b      	sxth	r3, r3
 800f762:	b29a      	uxth	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	4413      	add	r3, r2
 800f76e:	b29b      	uxth	r3, r3
 800f770:	b21a      	sxth	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2200      	movs	r2, #0
 800f77c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f77e:	4b35      	ldr	r3, [pc, #212]	; (800f854 <tcp_receive+0x5e0>)
 800f780:	881b      	ldrh	r3, [r3, #0]
 800f782:	2b00      	cmp	r3, #0
 800f784:	f000 84e1 	beq.w	801014a <tcp_receive+0xed6>
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	7d1b      	ldrb	r3, [r3, #20]
 800f78c:	2b06      	cmp	r3, #6
 800f78e:	f200 84dc 	bhi.w	801014a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f796:	4b30      	ldr	r3, [pc, #192]	; (800f858 <tcp_receive+0x5e4>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	1ad3      	subs	r3, r2, r3
 800f79c:	3b01      	subs	r3, #1
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f2c0 808e 	blt.w	800f8c0 <tcp_receive+0x64c>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7a8:	4b2a      	ldr	r3, [pc, #168]	; (800f854 <tcp_receive+0x5e0>)
 800f7aa:	881b      	ldrh	r3, [r3, #0]
 800f7ac:	4619      	mov	r1, r3
 800f7ae:	4b2a      	ldr	r3, [pc, #168]	; (800f858 <tcp_receive+0x5e4>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	440b      	add	r3, r1
 800f7b4:	1ad3      	subs	r3, r2, r3
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f300 8081 	bgt.w	800f8c0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f7be:	4b27      	ldr	r3, [pc, #156]	; (800f85c <tcp_receive+0x5e8>)
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7c8:	4b23      	ldr	r3, [pc, #140]	; (800f858 <tcp_receive+0x5e4>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f7d0:	4b22      	ldr	r3, [pc, #136]	; (800f85c <tcp_receive+0x5e8>)
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d106      	bne.n	800f7e6 <tcp_receive+0x572>
 800f7d8:	4b21      	ldr	r3, [pc, #132]	; (800f860 <tcp_receive+0x5ec>)
 800f7da:	f240 5294 	movw	r2, #1428	; 0x594
 800f7de:	4921      	ldr	r1, [pc, #132]	; (800f864 <tcp_receive+0x5f0>)
 800f7e0:	4821      	ldr	r0, [pc, #132]	; (800f868 <tcp_receive+0x5f4>)
 800f7e2:	f005 fad1 	bl	8014d88 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f7ec:	4293      	cmp	r3, r2
 800f7ee:	d906      	bls.n	800f7fe <tcp_receive+0x58a>
 800f7f0:	4b1b      	ldr	r3, [pc, #108]	; (800f860 <tcp_receive+0x5ec>)
 800f7f2:	f240 5295 	movw	r2, #1429	; 0x595
 800f7f6:	491d      	ldr	r1, [pc, #116]	; (800f86c <tcp_receive+0x5f8>)
 800f7f8:	481b      	ldr	r0, [pc, #108]	; (800f868 <tcp_receive+0x5f4>)
 800f7fa:	f005 fac5 	bl	8014d88 <iprintf>
      off = (u16_t)off32;
 800f7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f800:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f804:	4b15      	ldr	r3, [pc, #84]	; (800f85c <tcp_receive+0x5e8>)
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	891b      	ldrh	r3, [r3, #8]
 800f80a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f80e:	429a      	cmp	r2, r3
 800f810:	d906      	bls.n	800f820 <tcp_receive+0x5ac>
 800f812:	4b13      	ldr	r3, [pc, #76]	; (800f860 <tcp_receive+0x5ec>)
 800f814:	f240 5297 	movw	r2, #1431	; 0x597
 800f818:	4915      	ldr	r1, [pc, #84]	; (800f870 <tcp_receive+0x5fc>)
 800f81a:	4813      	ldr	r0, [pc, #76]	; (800f868 <tcp_receive+0x5f4>)
 800f81c:	f005 fab4 	bl	8014d88 <iprintf>
      inseg.len -= off;
 800f820:	4b0e      	ldr	r3, [pc, #56]	; (800f85c <tcp_receive+0x5e8>)
 800f822:	891a      	ldrh	r2, [r3, #8]
 800f824:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f828:	1ad3      	subs	r3, r2, r3
 800f82a:	b29a      	uxth	r2, r3
 800f82c:	4b0b      	ldr	r3, [pc, #44]	; (800f85c <tcp_receive+0x5e8>)
 800f82e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f830:	4b0a      	ldr	r3, [pc, #40]	; (800f85c <tcp_receive+0x5e8>)
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	891a      	ldrh	r2, [r3, #8]
 800f836:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f83e:	e029      	b.n	800f894 <tcp_receive+0x620>
 800f840:	08018808 	.word	0x08018808
 800f844:	08018810 	.word	0x08018810
 800f848:	20000a40 	.word	0x20000a40
 800f84c:	20000a3c 	.word	0x20000a3c
 800f850:	2000d7e0 	.word	0x2000d7e0
 800f854:	20000a42 	.word	0x20000a42
 800f858:	20000a38 	.word	0x20000a38
 800f85c:	20000a18 	.word	0x20000a18
 800f860:	080184a0 	.word	0x080184a0
 800f864:	08018818 	.word	0x08018818
 800f868:	080184ec 	.word	0x080184ec
 800f86c:	08018828 	.word	0x08018828
 800f870:	08018838 	.word	0x08018838
        off -= p->len;
 800f874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f876:	895b      	ldrh	r3, [r3, #10]
 800f878:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f87c:	1ad3      	subs	r3, r2, r3
 800f87e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f884:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f886:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f88a:	2200      	movs	r2, #0
 800f88c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f88e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f896:	895b      	ldrh	r3, [r3, #10]
 800f898:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d8e9      	bhi.n	800f874 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f8a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f8a8:	f7fc f8da 	bl	800ba60 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8b0:	4a91      	ldr	r2, [pc, #580]	; (800faf8 <tcp_receive+0x884>)
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	4b91      	ldr	r3, [pc, #580]	; (800fafc <tcp_receive+0x888>)
 800f8b6:	68db      	ldr	r3, [r3, #12]
 800f8b8:	4a8f      	ldr	r2, [pc, #572]	; (800faf8 <tcp_receive+0x884>)
 800f8ba:	6812      	ldr	r2, [r2, #0]
 800f8bc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f8be:	e00d      	b.n	800f8dc <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f8c0:	4b8d      	ldr	r3, [pc, #564]	; (800faf8 <tcp_receive+0x884>)
 800f8c2:	681a      	ldr	r2, [r3, #0]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	da06      	bge.n	800f8dc <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	8b5b      	ldrh	r3, [r3, #26]
 800f8d2:	f043 0302 	orr.w	r3, r3, #2
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f8dc:	4b86      	ldr	r3, [pc, #536]	; (800faf8 <tcp_receive+0x884>)
 800f8de:	681a      	ldr	r2, [r3, #0]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8e4:	1ad3      	subs	r3, r2, r3
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	f2c0 842a 	blt.w	8010140 <tcp_receive+0xecc>
 800f8ec:	4b82      	ldr	r3, [pc, #520]	; (800faf8 <tcp_receive+0x884>)
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8f4:	6879      	ldr	r1, [r7, #4]
 800f8f6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f8f8:	440b      	add	r3, r1
 800f8fa:	1ad3      	subs	r3, r2, r3
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f300 841e 	bgt.w	8010140 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f908:	4b7b      	ldr	r3, [pc, #492]	; (800faf8 <tcp_receive+0x884>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	f040 829a 	bne.w	800fe46 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f912:	4b7a      	ldr	r3, [pc, #488]	; (800fafc <tcp_receive+0x888>)
 800f914:	891c      	ldrh	r4, [r3, #8]
 800f916:	4b79      	ldr	r3, [pc, #484]	; (800fafc <tcp_receive+0x888>)
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	899b      	ldrh	r3, [r3, #12]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fa fd92 	bl	800a448 <lwip_htons>
 800f924:	4603      	mov	r3, r0
 800f926:	b2db      	uxtb	r3, r3
 800f928:	f003 0303 	and.w	r3, r3, #3
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <tcp_receive+0x6c0>
 800f930:	2301      	movs	r3, #1
 800f932:	e000      	b.n	800f936 <tcp_receive+0x6c2>
 800f934:	2300      	movs	r3, #0
 800f936:	4423      	add	r3, r4
 800f938:	b29a      	uxth	r2, r3
 800f93a:	4b71      	ldr	r3, [pc, #452]	; (800fb00 <tcp_receive+0x88c>)
 800f93c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f942:	4b6f      	ldr	r3, [pc, #444]	; (800fb00 <tcp_receive+0x88c>)
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	429a      	cmp	r2, r3
 800f948:	d275      	bcs.n	800fa36 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f94a:	4b6c      	ldr	r3, [pc, #432]	; (800fafc <tcp_receive+0x888>)
 800f94c:	68db      	ldr	r3, [r3, #12]
 800f94e:	899b      	ldrh	r3, [r3, #12]
 800f950:	b29b      	uxth	r3, r3
 800f952:	4618      	mov	r0, r3
 800f954:	f7fa fd78 	bl	800a448 <lwip_htons>
 800f958:	4603      	mov	r3, r0
 800f95a:	b2db      	uxtb	r3, r3
 800f95c:	f003 0301 	and.w	r3, r3, #1
 800f960:	2b00      	cmp	r3, #0
 800f962:	d01f      	beq.n	800f9a4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f964:	4b65      	ldr	r3, [pc, #404]	; (800fafc <tcp_receive+0x888>)
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	899b      	ldrh	r3, [r3, #12]
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	b21b      	sxth	r3, r3
 800f96e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f972:	b21c      	sxth	r4, r3
 800f974:	4b61      	ldr	r3, [pc, #388]	; (800fafc <tcp_receive+0x888>)
 800f976:	68db      	ldr	r3, [r3, #12]
 800f978:	899b      	ldrh	r3, [r3, #12]
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fa fd63 	bl	800a448 <lwip_htons>
 800f982:	4603      	mov	r3, r0
 800f984:	b2db      	uxtb	r3, r3
 800f986:	b29b      	uxth	r3, r3
 800f988:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fa fd5a 	bl	800a448 <lwip_htons>
 800f994:	4603      	mov	r3, r0
 800f996:	b21b      	sxth	r3, r3
 800f998:	4323      	orrs	r3, r4
 800f99a:	b21a      	sxth	r2, r3
 800f99c:	4b57      	ldr	r3, [pc, #348]	; (800fafc <tcp_receive+0x888>)
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	b292      	uxth	r2, r2
 800f9a2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9a8:	4b54      	ldr	r3, [pc, #336]	; (800fafc <tcp_receive+0x888>)
 800f9aa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f9ac:	4b53      	ldr	r3, [pc, #332]	; (800fafc <tcp_receive+0x888>)
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	899b      	ldrh	r3, [r3, #12]
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7fa fd47 	bl	800a448 <lwip_htons>
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	f003 0302 	and.w	r3, r3, #2
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d005      	beq.n	800f9d2 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f9c6:	4b4d      	ldr	r3, [pc, #308]	; (800fafc <tcp_receive+0x888>)
 800f9c8:	891b      	ldrh	r3, [r3, #8]
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	b29a      	uxth	r2, r3
 800f9ce:	4b4b      	ldr	r3, [pc, #300]	; (800fafc <tcp_receive+0x888>)
 800f9d0:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f9d2:	4b4a      	ldr	r3, [pc, #296]	; (800fafc <tcp_receive+0x888>)
 800f9d4:	685b      	ldr	r3, [r3, #4]
 800f9d6:	4a49      	ldr	r2, [pc, #292]	; (800fafc <tcp_receive+0x888>)
 800f9d8:	8912      	ldrh	r2, [r2, #8]
 800f9da:	4611      	mov	r1, r2
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fb ff3f 	bl	800b860 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f9e2:	4b46      	ldr	r3, [pc, #280]	; (800fafc <tcp_receive+0x888>)
 800f9e4:	891c      	ldrh	r4, [r3, #8]
 800f9e6:	4b45      	ldr	r3, [pc, #276]	; (800fafc <tcp_receive+0x888>)
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	899b      	ldrh	r3, [r3, #12]
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fa fd2a 	bl	800a448 <lwip_htons>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	b2db      	uxtb	r3, r3
 800f9f8:	f003 0303 	and.w	r3, r3, #3
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d001      	beq.n	800fa04 <tcp_receive+0x790>
 800fa00:	2301      	movs	r3, #1
 800fa02:	e000      	b.n	800fa06 <tcp_receive+0x792>
 800fa04:	2300      	movs	r3, #0
 800fa06:	4423      	add	r3, r4
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	4b3d      	ldr	r3, [pc, #244]	; (800fb00 <tcp_receive+0x88c>)
 800fa0c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa0e:	4b3c      	ldr	r3, [pc, #240]	; (800fb00 <tcp_receive+0x88c>)
 800fa10:	881b      	ldrh	r3, [r3, #0]
 800fa12:	461a      	mov	r2, r3
 800fa14:	4b38      	ldr	r3, [pc, #224]	; (800faf8 <tcp_receive+0x884>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	441a      	add	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa1e:	6879      	ldr	r1, [r7, #4]
 800fa20:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa22:	440b      	add	r3, r1
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d006      	beq.n	800fa36 <tcp_receive+0x7c2>
 800fa28:	4b36      	ldr	r3, [pc, #216]	; (800fb04 <tcp_receive+0x890>)
 800fa2a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fa2e:	4936      	ldr	r1, [pc, #216]	; (800fb08 <tcp_receive+0x894>)
 800fa30:	4836      	ldr	r0, [pc, #216]	; (800fb0c <tcp_receive+0x898>)
 800fa32:	f005 f9a9 	bl	8014d88 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f000 80e7 	beq.w	800fc0e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa40:	4b2e      	ldr	r3, [pc, #184]	; (800fafc <tcp_receive+0x888>)
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	899b      	ldrh	r3, [r3, #12]
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fa fcfd 	bl	800a448 <lwip_htons>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	f003 0301 	and.w	r3, r3, #1
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d010      	beq.n	800fa7c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fa5a:	e00a      	b.n	800fa72 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa60:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fa6c:	68f8      	ldr	r0, [r7, #12]
 800fa6e:	f7fd fcaa 	bl	800d3c6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d1f0      	bne.n	800fa5c <tcp_receive+0x7e8>
 800fa7a:	e0c8      	b.n	800fc0e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa80:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fa82:	e052      	b.n	800fb2a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fa84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	899b      	ldrh	r3, [r3, #12]
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fa fcdb 	bl	800a448 <lwip_htons>
 800fa92:	4603      	mov	r3, r0
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	f003 0301 	and.w	r3, r3, #1
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d03d      	beq.n	800fb1a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fa9e:	4b17      	ldr	r3, [pc, #92]	; (800fafc <tcp_receive+0x888>)
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	899b      	ldrh	r3, [r3, #12]
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fa fcce 	bl	800a448 <lwip_htons>
 800faac:	4603      	mov	r3, r0
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d130      	bne.n	800fb1a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fab8:	4b10      	ldr	r3, [pc, #64]	; (800fafc <tcp_receive+0x888>)
 800faba:	68db      	ldr	r3, [r3, #12]
 800fabc:	899b      	ldrh	r3, [r3, #12]
 800fabe:	b29c      	uxth	r4, r3
 800fac0:	2001      	movs	r0, #1
 800fac2:	f7fa fcc1 	bl	800a448 <lwip_htons>
 800fac6:	4603      	mov	r3, r0
 800fac8:	461a      	mov	r2, r3
 800faca:	4b0c      	ldr	r3, [pc, #48]	; (800fafc <tcp_receive+0x888>)
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	4322      	orrs	r2, r4
 800fad0:	b292      	uxth	r2, r2
 800fad2:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fad4:	4b09      	ldr	r3, [pc, #36]	; (800fafc <tcp_receive+0x888>)
 800fad6:	891c      	ldrh	r4, [r3, #8]
 800fad8:	4b08      	ldr	r3, [pc, #32]	; (800fafc <tcp_receive+0x888>)
 800fada:	68db      	ldr	r3, [r3, #12]
 800fadc:	899b      	ldrh	r3, [r3, #12]
 800fade:	b29b      	uxth	r3, r3
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7fa fcb1 	bl	800a448 <lwip_htons>
 800fae6:	4603      	mov	r3, r0
 800fae8:	b2db      	uxtb	r3, r3
 800faea:	f003 0303 	and.w	r3, r3, #3
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d00e      	beq.n	800fb10 <tcp_receive+0x89c>
 800faf2:	2301      	movs	r3, #1
 800faf4:	e00d      	b.n	800fb12 <tcp_receive+0x89e>
 800faf6:	bf00      	nop
 800faf8:	20000a38 	.word	0x20000a38
 800fafc:	20000a18 	.word	0x20000a18
 800fb00:	20000a42 	.word	0x20000a42
 800fb04:	080184a0 	.word	0x080184a0
 800fb08:	08018848 	.word	0x08018848
 800fb0c:	080184ec 	.word	0x080184ec
 800fb10:	2300      	movs	r3, #0
 800fb12:	4423      	add	r3, r4
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	4b98      	ldr	r3, [pc, #608]	; (800fd78 <tcp_receive+0xb04>)
 800fb18:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fb1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb1c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fb24:	6938      	ldr	r0, [r7, #16]
 800fb26:	f7fd fc4e 	bl	800d3c6 <tcp_seg_free>
            while (next &&
 800fb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d00e      	beq.n	800fb4e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fb30:	4b91      	ldr	r3, [pc, #580]	; (800fd78 <tcp_receive+0xb04>)
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	461a      	mov	r2, r3
 800fb36:	4b91      	ldr	r3, [pc, #580]	; (800fd7c <tcp_receive+0xb08>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	441a      	add	r2, r3
 800fb3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb44:	8909      	ldrh	r1, [r1, #8]
 800fb46:	440b      	add	r3, r1
 800fb48:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	da9a      	bge.n	800fa84 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d059      	beq.n	800fc08 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fb54:	4b88      	ldr	r3, [pc, #544]	; (800fd78 <tcp_receive+0xb04>)
 800fb56:	881b      	ldrh	r3, [r3, #0]
 800fb58:	461a      	mov	r2, r3
 800fb5a:	4b88      	ldr	r3, [pc, #544]	; (800fd7c <tcp_receive+0xb08>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	441a      	add	r2, r3
 800fb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	dd4d      	ble.n	800fc08 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb6e:	68db      	ldr	r3, [r3, #12]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	4b81      	ldr	r3, [pc, #516]	; (800fd7c <tcp_receive+0xb08>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	b29a      	uxth	r2, r3
 800fb7e:	4b80      	ldr	r3, [pc, #512]	; (800fd80 <tcp_receive+0xb0c>)
 800fb80:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fb82:	4b7f      	ldr	r3, [pc, #508]	; (800fd80 <tcp_receive+0xb0c>)
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	899b      	ldrh	r3, [r3, #12]
 800fb88:	b29b      	uxth	r3, r3
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fa fc5c 	bl	800a448 <lwip_htons>
 800fb90:	4603      	mov	r3, r0
 800fb92:	b2db      	uxtb	r3, r3
 800fb94:	f003 0302 	and.w	r3, r3, #2
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d005      	beq.n	800fba8 <tcp_receive+0x934>
                inseg.len -= 1;
 800fb9c:	4b78      	ldr	r3, [pc, #480]	; (800fd80 <tcp_receive+0xb0c>)
 800fb9e:	891b      	ldrh	r3, [r3, #8]
 800fba0:	3b01      	subs	r3, #1
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	4b76      	ldr	r3, [pc, #472]	; (800fd80 <tcp_receive+0xb0c>)
 800fba6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fba8:	4b75      	ldr	r3, [pc, #468]	; (800fd80 <tcp_receive+0xb0c>)
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	4a74      	ldr	r2, [pc, #464]	; (800fd80 <tcp_receive+0xb0c>)
 800fbae:	8912      	ldrh	r2, [r2, #8]
 800fbb0:	4611      	mov	r1, r2
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7fb fe54 	bl	800b860 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fbb8:	4b71      	ldr	r3, [pc, #452]	; (800fd80 <tcp_receive+0xb0c>)
 800fbba:	891c      	ldrh	r4, [r3, #8]
 800fbbc:	4b70      	ldr	r3, [pc, #448]	; (800fd80 <tcp_receive+0xb0c>)
 800fbbe:	68db      	ldr	r3, [r3, #12]
 800fbc0:	899b      	ldrh	r3, [r3, #12]
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fa fc3f 	bl	800a448 <lwip_htons>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	f003 0303 	and.w	r3, r3, #3
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d001      	beq.n	800fbda <tcp_receive+0x966>
 800fbd6:	2301      	movs	r3, #1
 800fbd8:	e000      	b.n	800fbdc <tcp_receive+0x968>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	4423      	add	r3, r4
 800fbde:	b29a      	uxth	r2, r3
 800fbe0:	4b65      	ldr	r3, [pc, #404]	; (800fd78 <tcp_receive+0xb04>)
 800fbe2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fbe4:	4b64      	ldr	r3, [pc, #400]	; (800fd78 <tcp_receive+0xb04>)
 800fbe6:	881b      	ldrh	r3, [r3, #0]
 800fbe8:	461a      	mov	r2, r3
 800fbea:	4b64      	ldr	r3, [pc, #400]	; (800fd7c <tcp_receive+0xb08>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	441a      	add	r2, r3
 800fbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf2:	68db      	ldr	r3, [r3, #12]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d006      	beq.n	800fc08 <tcp_receive+0x994>
 800fbfa:	4b62      	ldr	r3, [pc, #392]	; (800fd84 <tcp_receive+0xb10>)
 800fbfc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800fc00:	4961      	ldr	r1, [pc, #388]	; (800fd88 <tcp_receive+0xb14>)
 800fc02:	4862      	ldr	r0, [pc, #392]	; (800fd8c <tcp_receive+0xb18>)
 800fc04:	f005 f8c0 	bl	8014d88 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fc0c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fc0e:	4b5a      	ldr	r3, [pc, #360]	; (800fd78 <tcp_receive+0xb04>)
 800fc10:	881b      	ldrh	r3, [r3, #0]
 800fc12:	461a      	mov	r2, r3
 800fc14:	4b59      	ldr	r3, [pc, #356]	; (800fd7c <tcp_receive+0xb08>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	441a      	add	r2, r3
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc22:	4b55      	ldr	r3, [pc, #340]	; (800fd78 <tcp_receive+0xb04>)
 800fc24:	881b      	ldrh	r3, [r3, #0]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d206      	bcs.n	800fc38 <tcp_receive+0x9c4>
 800fc2a:	4b56      	ldr	r3, [pc, #344]	; (800fd84 <tcp_receive+0xb10>)
 800fc2c:	f240 6207 	movw	r2, #1543	; 0x607
 800fc30:	4957      	ldr	r1, [pc, #348]	; (800fd90 <tcp_receive+0xb1c>)
 800fc32:	4856      	ldr	r0, [pc, #344]	; (800fd8c <tcp_receive+0xb18>)
 800fc34:	f005 f8a8 	bl	8014d88 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc3c:	4b4e      	ldr	r3, [pc, #312]	; (800fd78 <tcp_receive+0xb04>)
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	1ad3      	subs	r3, r2, r3
 800fc42:	b29a      	uxth	r2, r3
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f7fc fe97 	bl	800c97c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fc4e:	4b4c      	ldr	r3, [pc, #304]	; (800fd80 <tcp_receive+0xb0c>)
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	891b      	ldrh	r3, [r3, #8]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d006      	beq.n	800fc66 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fc58:	4b49      	ldr	r3, [pc, #292]	; (800fd80 <tcp_receive+0xb0c>)
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	4a4d      	ldr	r2, [pc, #308]	; (800fd94 <tcp_receive+0xb20>)
 800fc5e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fc60:	4b47      	ldr	r3, [pc, #284]	; (800fd80 <tcp_receive+0xb0c>)
 800fc62:	2200      	movs	r2, #0
 800fc64:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc66:	4b46      	ldr	r3, [pc, #280]	; (800fd80 <tcp_receive+0xb0c>)
 800fc68:	68db      	ldr	r3, [r3, #12]
 800fc6a:	899b      	ldrh	r3, [r3, #12]
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fa fbea 	bl	800a448 <lwip_htons>
 800fc74:	4603      	mov	r3, r0
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	f003 0301 	and.w	r3, r3, #1
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	f000 80b8 	beq.w	800fdf2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fc82:	4b45      	ldr	r3, [pc, #276]	; (800fd98 <tcp_receive+0xb24>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	f043 0320 	orr.w	r3, r3, #32
 800fc8a:	b2da      	uxtb	r2, r3
 800fc8c:	4b42      	ldr	r3, [pc, #264]	; (800fd98 <tcp_receive+0xb24>)
 800fc8e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fc90:	e0af      	b.n	800fdf2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc96:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	4a36      	ldr	r2, [pc, #216]	; (800fd7c <tcp_receive+0xb08>)
 800fca2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	891b      	ldrh	r3, [r3, #8]
 800fca8:	461c      	mov	r4, r3
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	899b      	ldrh	r3, [r3, #12]
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fa fbc8 	bl	800a448 <lwip_htons>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	b2db      	uxtb	r3, r3
 800fcbc:	f003 0303 	and.w	r3, r3, #3
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d001      	beq.n	800fcc8 <tcp_receive+0xa54>
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	e000      	b.n	800fcca <tcp_receive+0xa56>
 800fcc8:	2300      	movs	r3, #0
 800fcca:	191a      	adds	r2, r3, r4
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd0:	441a      	add	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcda:	461c      	mov	r4, r3
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	891b      	ldrh	r3, [r3, #8]
 800fce0:	461d      	mov	r5, r3
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	899b      	ldrh	r3, [r3, #12]
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7fa fbac 	bl	800a448 <lwip_htons>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	b2db      	uxtb	r3, r3
 800fcf4:	f003 0303 	and.w	r3, r3, #3
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d001      	beq.n	800fd00 <tcp_receive+0xa8c>
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	e000      	b.n	800fd02 <tcp_receive+0xa8e>
 800fd00:	2300      	movs	r3, #0
 800fd02:	442b      	add	r3, r5
 800fd04:	429c      	cmp	r4, r3
 800fd06:	d206      	bcs.n	800fd16 <tcp_receive+0xaa2>
 800fd08:	4b1e      	ldr	r3, [pc, #120]	; (800fd84 <tcp_receive+0xb10>)
 800fd0a:	f240 622b 	movw	r2, #1579	; 0x62b
 800fd0e:	4923      	ldr	r1, [pc, #140]	; (800fd9c <tcp_receive+0xb28>)
 800fd10:	481e      	ldr	r0, [pc, #120]	; (800fd8c <tcp_receive+0xb18>)
 800fd12:	f005 f839 	bl	8014d88 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	891b      	ldrh	r3, [r3, #8]
 800fd1a:	461c      	mov	r4, r3
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	899b      	ldrh	r3, [r3, #12]
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7fa fb8f 	bl	800a448 <lwip_htons>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	f003 0303 	and.w	r3, r3, #3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d001      	beq.n	800fd3a <tcp_receive+0xac6>
 800fd36:	2301      	movs	r3, #1
 800fd38:	e000      	b.n	800fd3c <tcp_receive+0xac8>
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	1919      	adds	r1, r3, r4
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd42:	b28b      	uxth	r3, r1
 800fd44:	1ad3      	subs	r3, r2, r3
 800fd46:	b29a      	uxth	r2, r3
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f7fc fe15 	bl	800c97c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	891b      	ldrh	r3, [r3, #8]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d028      	beq.n	800fdae <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fd5c:	4b0d      	ldr	r3, [pc, #52]	; (800fd94 <tcp_receive+0xb20>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d01d      	beq.n	800fda0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fd64:	4b0b      	ldr	r3, [pc, #44]	; (800fd94 <tcp_receive+0xb20>)
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	685b      	ldr	r3, [r3, #4]
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	4610      	mov	r0, r2
 800fd70:	f7fb ffbe 	bl	800bcf0 <pbuf_cat>
 800fd74:	e018      	b.n	800fda8 <tcp_receive+0xb34>
 800fd76:	bf00      	nop
 800fd78:	20000a42 	.word	0x20000a42
 800fd7c:	20000a38 	.word	0x20000a38
 800fd80:	20000a18 	.word	0x20000a18
 800fd84:	080184a0 	.word	0x080184a0
 800fd88:	08018880 	.word	0x08018880
 800fd8c:	080184ec 	.word	0x080184ec
 800fd90:	080188bc 	.word	0x080188bc
 800fd94:	20000a48 	.word	0x20000a48
 800fd98:	20000a45 	.word	0x20000a45
 800fd9c:	080188dc 	.word	0x080188dc
            } else {
              recv_data = cseg->p;
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	4a70      	ldr	r2, [pc, #448]	; (800ff68 <tcp_receive+0xcf4>)
 800fda6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fdae:	68bb      	ldr	r3, [r7, #8]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	899b      	ldrh	r3, [r3, #12]
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7fa fb46 	bl	800a448 <lwip_htons>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	f003 0301 	and.w	r3, r3, #1
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d00d      	beq.n	800fde4 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fdc8:	4b68      	ldr	r3, [pc, #416]	; (800ff6c <tcp_receive+0xcf8>)
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	f043 0320 	orr.w	r3, r3, #32
 800fdd0:	b2da      	uxtb	r2, r3
 800fdd2:	4b66      	ldr	r3, [pc, #408]	; (800ff6c <tcp_receive+0xcf8>)
 800fdd4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	7d1b      	ldrb	r3, [r3, #20]
 800fdda:	2b04      	cmp	r3, #4
 800fddc:	d102      	bne.n	800fde4 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2207      	movs	r2, #7
 800fde2:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	681a      	ldr	r2, [r3, #0]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fdec:	68b8      	ldr	r0, [r7, #8]
 800fdee:	f7fd faea 	bl	800d3c6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d008      	beq.n	800fe0c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdfe:	68db      	ldr	r3, [r3, #12]
 800fe00:	685a      	ldr	r2, [r3, #4]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fe06:	429a      	cmp	r2, r3
 800fe08:	f43f af43 	beq.w	800fc92 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	8b5b      	ldrh	r3, [r3, #26]
 800fe10:	f003 0301 	and.w	r3, r3, #1
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d00e      	beq.n	800fe36 <tcp_receive+0xbc2>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	8b5b      	ldrh	r3, [r3, #26]
 800fe1c:	f023 0301 	bic.w	r3, r3, #1
 800fe20:	b29a      	uxth	r2, r3
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	835a      	strh	r2, [r3, #26]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	8b5b      	ldrh	r3, [r3, #26]
 800fe2a:	f043 0302 	orr.w	r3, r3, #2
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fe34:	e188      	b.n	8010148 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	8b5b      	ldrh	r3, [r3, #26]
 800fe3a:	f043 0301 	orr.w	r3, r3, #1
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fe44:	e180      	b.n	8010148 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d106      	bne.n	800fe5c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fe4e:	4848      	ldr	r0, [pc, #288]	; (800ff70 <tcp_receive+0xcfc>)
 800fe50:	f7fd faf0 	bl	800d434 <tcp_seg_copy>
 800fe54:	4602      	mov	r2, r0
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	675a      	str	r2, [r3, #116]	; 0x74
 800fe5a:	e16d      	b.n	8010138 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe64:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe66:	e157      	b.n	8010118 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	68db      	ldr	r3, [r3, #12]
 800fe6c:	685a      	ldr	r2, [r3, #4]
 800fe6e:	4b41      	ldr	r3, [pc, #260]	; (800ff74 <tcp_receive+0xd00>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d11d      	bne.n	800feb2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fe76:	4b3e      	ldr	r3, [pc, #248]	; (800ff70 <tcp_receive+0xcfc>)
 800fe78:	891a      	ldrh	r2, [r3, #8]
 800fe7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7c:	891b      	ldrh	r3, [r3, #8]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	f240 814f 	bls.w	8010122 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fe84:	483a      	ldr	r0, [pc, #232]	; (800ff70 <tcp_receive+0xcfc>)
 800fe86:	f7fd fad5 	bl	800d434 <tcp_seg_copy>
 800fe8a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	f000 8149 	beq.w	8010126 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fe94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d003      	beq.n	800fea2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fe9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe9c:	697a      	ldr	r2, [r7, #20]
 800fe9e:	601a      	str	r2, [r3, #0]
 800fea0:	e002      	b.n	800fea8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	697a      	ldr	r2, [r7, #20]
 800fea6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fea8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800feaa:	6978      	ldr	r0, [r7, #20]
 800feac:	f7ff f8de 	bl	800f06c <tcp_oos_insert_segment>
                }
                break;
 800feb0:	e139      	b.n	8010126 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800feb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d117      	bne.n	800fee8 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800feb8:	4b2e      	ldr	r3, [pc, #184]	; (800ff74 <tcp_receive+0xd00>)
 800feba:	681a      	ldr	r2, [r3, #0]
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	68db      	ldr	r3, [r3, #12]
 800fec0:	685b      	ldr	r3, [r3, #4]
 800fec2:	1ad3      	subs	r3, r2, r3
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	da57      	bge.n	800ff78 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fec8:	4829      	ldr	r0, [pc, #164]	; (800ff70 <tcp_receive+0xcfc>)
 800feca:	f7fd fab3 	bl	800d434 <tcp_seg_copy>
 800fece:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	f000 8129 	beq.w	801012a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	69ba      	ldr	r2, [r7, #24]
 800fedc:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fede:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fee0:	69b8      	ldr	r0, [r7, #24]
 800fee2:	f7ff f8c3 	bl	800f06c <tcp_oos_insert_segment>
                  }
                  break;
 800fee6:	e120      	b.n	801012a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fee8:	4b22      	ldr	r3, [pc, #136]	; (800ff74 <tcp_receive+0xd00>)
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feee:	68db      	ldr	r3, [r3, #12]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	1ad3      	subs	r3, r2, r3
 800fef4:	3b01      	subs	r3, #1
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	db3e      	blt.n	800ff78 <tcp_receive+0xd04>
 800fefa:	4b1e      	ldr	r3, [pc, #120]	; (800ff74 <tcp_receive+0xd00>)
 800fefc:	681a      	ldr	r2, [r3, #0]
 800fefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff00:	68db      	ldr	r3, [r3, #12]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	3301      	adds	r3, #1
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	dc35      	bgt.n	800ff78 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ff0c:	4818      	ldr	r0, [pc, #96]	; (800ff70 <tcp_receive+0xcfc>)
 800ff0e:	f7fd fa91 	bl	800d434 <tcp_seg_copy>
 800ff12:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ff14:	69fb      	ldr	r3, [r7, #28]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	f000 8109 	beq.w	801012e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ff1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff24:	8912      	ldrh	r2, [r2, #8]
 800ff26:	441a      	add	r2, r3
 800ff28:	4b12      	ldr	r3, [pc, #72]	; (800ff74 <tcp_receive+0xd00>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	1ad3      	subs	r3, r2, r3
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	dd12      	ble.n	800ff58 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ff32:	4b10      	ldr	r3, [pc, #64]	; (800ff74 <tcp_receive+0xd00>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	b29a      	uxth	r2, r3
 800ff38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	b29b      	uxth	r3, r3
 800ff40:	1ad3      	subs	r3, r2, r3
 800ff42:	b29a      	uxth	r2, r3
 800ff44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff46:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ff48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff4a:	685a      	ldr	r2, [r3, #4]
 800ff4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff4e:	891b      	ldrh	r3, [r3, #8]
 800ff50:	4619      	mov	r1, r3
 800ff52:	4610      	mov	r0, r2
 800ff54:	f7fb fc84 	bl	800b860 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ff58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff5a:	69fa      	ldr	r2, [r7, #28]
 800ff5c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ff5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff60:	69f8      	ldr	r0, [r7, #28]
 800ff62:	f7ff f883 	bl	800f06c <tcp_oos_insert_segment>
                  }
                  break;
 800ff66:	e0e2      	b.n	801012e <tcp_receive+0xeba>
 800ff68:	20000a48 	.word	0x20000a48
 800ff6c:	20000a45 	.word	0x20000a45
 800ff70:	20000a18 	.word	0x20000a18
 800ff74:	20000a38 	.word	0x20000a38
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ff78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ff7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	f040 80c6 	bne.w	8010112 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ff86:	4b80      	ldr	r3, [pc, #512]	; (8010188 <tcp_receive+0xf14>)
 800ff88:	681a      	ldr	r2, [r3, #0]
 800ff8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	f340 80bd 	ble.w	8010112 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	899b      	ldrh	r3, [r3, #12]
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7fa fa51 	bl	800a448 <lwip_htons>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	b2db      	uxtb	r3, r3
 800ffaa:	f003 0301 	and.w	r3, r3, #1
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	f040 80bf 	bne.w	8010132 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ffb4:	4875      	ldr	r0, [pc, #468]	; (801018c <tcp_receive+0xf18>)
 800ffb6:	f7fd fa3d 	bl	800d434 <tcp_seg_copy>
 800ffba:	4602      	mov	r2, r0
 800ffbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffbe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ffc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f000 80b6 	beq.w	8010136 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ffca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	685b      	ldr	r3, [r3, #4]
 800ffd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffd2:	8912      	ldrh	r2, [r2, #8]
 800ffd4:	441a      	add	r2, r3
 800ffd6:	4b6c      	ldr	r3, [pc, #432]	; (8010188 <tcp_receive+0xf14>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	1ad3      	subs	r3, r2, r3
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	dd12      	ble.n	8010006 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ffe0:	4b69      	ldr	r3, [pc, #420]	; (8010188 <tcp_receive+0xf14>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	b29a      	uxth	r2, r3
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe8:	68db      	ldr	r3, [r3, #12]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	1ad3      	subs	r3, r2, r3
 800fff0:	b29a      	uxth	r2, r3
 800fff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff8:	685a      	ldr	r2, [r3, #4]
 800fffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffc:	891b      	ldrh	r3, [r3, #8]
 800fffe:	4619      	mov	r1, r3
 8010000:	4610      	mov	r0, r2
 8010002:	f7fb fc2d 	bl	800b860 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010006:	4b62      	ldr	r3, [pc, #392]	; (8010190 <tcp_receive+0xf1c>)
 8010008:	881b      	ldrh	r3, [r3, #0]
 801000a:	461a      	mov	r2, r3
 801000c:	4b5e      	ldr	r3, [pc, #376]	; (8010188 <tcp_receive+0xf14>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	441a      	add	r2, r3
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010016:	6879      	ldr	r1, [r7, #4]
 8010018:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801001a:	440b      	add	r3, r1
 801001c:	1ad3      	subs	r3, r2, r3
 801001e:	2b00      	cmp	r3, #0
 8010020:	f340 8089 	ble.w	8010136 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	899b      	ldrh	r3, [r3, #12]
 801002c:	b29b      	uxth	r3, r3
 801002e:	4618      	mov	r0, r3
 8010030:	f7fa fa0a 	bl	800a448 <lwip_htons>
 8010034:	4603      	mov	r3, r0
 8010036:	b2db      	uxtb	r3, r3
 8010038:	f003 0301 	and.w	r3, r3, #1
 801003c:	2b00      	cmp	r3, #0
 801003e:	d022      	beq.n	8010086 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	899b      	ldrh	r3, [r3, #12]
 8010048:	b29b      	uxth	r3, r3
 801004a:	b21b      	sxth	r3, r3
 801004c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010050:	b21c      	sxth	r4, r3
 8010052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	899b      	ldrh	r3, [r3, #12]
 801005a:	b29b      	uxth	r3, r3
 801005c:	4618      	mov	r0, r3
 801005e:	f7fa f9f3 	bl	800a448 <lwip_htons>
 8010062:	4603      	mov	r3, r0
 8010064:	b2db      	uxtb	r3, r3
 8010066:	b29b      	uxth	r3, r3
 8010068:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801006c:	b29b      	uxth	r3, r3
 801006e:	4618      	mov	r0, r3
 8010070:	f7fa f9ea 	bl	800a448 <lwip_htons>
 8010074:	4603      	mov	r3, r0
 8010076:	b21b      	sxth	r3, r3
 8010078:	4323      	orrs	r3, r4
 801007a:	b21a      	sxth	r2, r3
 801007c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	b292      	uxth	r2, r2
 8010084:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008a:	b29a      	uxth	r2, r3
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010090:	4413      	add	r3, r2
 8010092:	b299      	uxth	r1, r3
 8010094:	4b3c      	ldr	r3, [pc, #240]	; (8010188 <tcp_receive+0xf14>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	b29a      	uxth	r2, r3
 801009a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	1a8a      	subs	r2, r1, r2
 80100a0:	b292      	uxth	r2, r2
 80100a2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80100a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	685a      	ldr	r2, [r3, #4]
 80100aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	891b      	ldrh	r3, [r3, #8]
 80100b0:	4619      	mov	r1, r3
 80100b2:	4610      	mov	r0, r2
 80100b4:	f7fb fbd4 	bl	800b860 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80100b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	891c      	ldrh	r4, [r3, #8]
 80100be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	899b      	ldrh	r3, [r3, #12]
 80100c6:	b29b      	uxth	r3, r3
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fa f9bd 	bl	800a448 <lwip_htons>
 80100ce:	4603      	mov	r3, r0
 80100d0:	b2db      	uxtb	r3, r3
 80100d2:	f003 0303 	and.w	r3, r3, #3
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d001      	beq.n	80100de <tcp_receive+0xe6a>
 80100da:	2301      	movs	r3, #1
 80100dc:	e000      	b.n	80100e0 <tcp_receive+0xe6c>
 80100de:	2300      	movs	r3, #0
 80100e0:	4423      	add	r3, r4
 80100e2:	b29a      	uxth	r2, r3
 80100e4:	4b2a      	ldr	r3, [pc, #168]	; (8010190 <tcp_receive+0xf1c>)
 80100e6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80100e8:	4b29      	ldr	r3, [pc, #164]	; (8010190 <tcp_receive+0xf1c>)
 80100ea:	881b      	ldrh	r3, [r3, #0]
 80100ec:	461a      	mov	r2, r3
 80100ee:	4b26      	ldr	r3, [pc, #152]	; (8010188 <tcp_receive+0xf14>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	441a      	add	r2, r3
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f8:	6879      	ldr	r1, [r7, #4]
 80100fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100fc:	440b      	add	r3, r1
 80100fe:	429a      	cmp	r2, r3
 8010100:	d019      	beq.n	8010136 <tcp_receive+0xec2>
 8010102:	4b24      	ldr	r3, [pc, #144]	; (8010194 <tcp_receive+0xf20>)
 8010104:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010108:	4923      	ldr	r1, [pc, #140]	; (8010198 <tcp_receive+0xf24>)
 801010a:	4824      	ldr	r0, [pc, #144]	; (801019c <tcp_receive+0xf28>)
 801010c:	f004 fe3c 	bl	8014d88 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010110:	e011      	b.n	8010136 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	63bb      	str	r3, [r7, #56]	; 0x38
 8010118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011a:	2b00      	cmp	r3, #0
 801011c:	f47f aea4 	bne.w	800fe68 <tcp_receive+0xbf4>
 8010120:	e00a      	b.n	8010138 <tcp_receive+0xec4>
                break;
 8010122:	bf00      	nop
 8010124:	e008      	b.n	8010138 <tcp_receive+0xec4>
                break;
 8010126:	bf00      	nop
 8010128:	e006      	b.n	8010138 <tcp_receive+0xec4>
                  break;
 801012a:	bf00      	nop
 801012c:	e004      	b.n	8010138 <tcp_receive+0xec4>
                  break;
 801012e:	bf00      	nop
 8010130:	e002      	b.n	8010138 <tcp_receive+0xec4>
                  break;
 8010132:	bf00      	nop
 8010134:	e000      	b.n	8010138 <tcp_receive+0xec4>
                break;
 8010136:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f001 fe8b 	bl	8011e54 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801013e:	e003      	b.n	8010148 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f001 fe87 	bl	8011e54 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010146:	e01a      	b.n	801017e <tcp_receive+0xf0a>
 8010148:	e019      	b.n	801017e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801014a:	4b0f      	ldr	r3, [pc, #60]	; (8010188 <tcp_receive+0xf14>)
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010152:	1ad3      	subs	r3, r2, r3
 8010154:	2b00      	cmp	r3, #0
 8010156:	db0a      	blt.n	801016e <tcp_receive+0xefa>
 8010158:	4b0b      	ldr	r3, [pc, #44]	; (8010188 <tcp_receive+0xf14>)
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010160:	6879      	ldr	r1, [r7, #4]
 8010162:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010164:	440b      	add	r3, r1
 8010166:	1ad3      	subs	r3, r2, r3
 8010168:	3301      	adds	r3, #1
 801016a:	2b00      	cmp	r3, #0
 801016c:	dd07      	ble.n	801017e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	8b5b      	ldrh	r3, [r3, #26]
 8010172:	f043 0302 	orr.w	r3, r3, #2
 8010176:	b29a      	uxth	r2, r3
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801017c:	e7ff      	b.n	801017e <tcp_receive+0xf0a>
 801017e:	bf00      	nop
 8010180:	3750      	adds	r7, #80	; 0x50
 8010182:	46bd      	mov	sp, r7
 8010184:	bdb0      	pop	{r4, r5, r7, pc}
 8010186:	bf00      	nop
 8010188:	20000a38 	.word	0x20000a38
 801018c:	20000a18 	.word	0x20000a18
 8010190:	20000a42 	.word	0x20000a42
 8010194:	080184a0 	.word	0x080184a0
 8010198:	08018848 	.word	0x08018848
 801019c:	080184ec 	.word	0x080184ec

080101a0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80101a6:	4b15      	ldr	r3, [pc, #84]	; (80101fc <tcp_get_next_optbyte+0x5c>)
 80101a8:	881b      	ldrh	r3, [r3, #0]
 80101aa:	1c5a      	adds	r2, r3, #1
 80101ac:	b291      	uxth	r1, r2
 80101ae:	4a13      	ldr	r2, [pc, #76]	; (80101fc <tcp_get_next_optbyte+0x5c>)
 80101b0:	8011      	strh	r1, [r2, #0]
 80101b2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80101b4:	4b12      	ldr	r3, [pc, #72]	; (8010200 <tcp_get_next_optbyte+0x60>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d004      	beq.n	80101c6 <tcp_get_next_optbyte+0x26>
 80101bc:	4b11      	ldr	r3, [pc, #68]	; (8010204 <tcp_get_next_optbyte+0x64>)
 80101be:	881b      	ldrh	r3, [r3, #0]
 80101c0:	88fa      	ldrh	r2, [r7, #6]
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d208      	bcs.n	80101d8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80101c6:	4b10      	ldr	r3, [pc, #64]	; (8010208 <tcp_get_next_optbyte+0x68>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	3314      	adds	r3, #20
 80101cc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80101ce:	88fb      	ldrh	r3, [r7, #6]
 80101d0:	683a      	ldr	r2, [r7, #0]
 80101d2:	4413      	add	r3, r2
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	e00b      	b.n	80101f0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80101d8:	88fb      	ldrh	r3, [r7, #6]
 80101da:	b2da      	uxtb	r2, r3
 80101dc:	4b09      	ldr	r3, [pc, #36]	; (8010204 <tcp_get_next_optbyte+0x64>)
 80101de:	881b      	ldrh	r3, [r3, #0]
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	1ad3      	subs	r3, r2, r3
 80101e4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80101e6:	4b06      	ldr	r3, [pc, #24]	; (8010200 <tcp_get_next_optbyte+0x60>)
 80101e8:	681a      	ldr	r2, [r3, #0]
 80101ea:	797b      	ldrb	r3, [r7, #5]
 80101ec:	4413      	add	r3, r2
 80101ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	370c      	adds	r7, #12
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr
 80101fc:	20000a34 	.word	0x20000a34
 8010200:	20000a30 	.word	0x20000a30
 8010204:	20000a2e 	.word	0x20000a2e
 8010208:	20000a28 	.word	0x20000a28

0801020c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d106      	bne.n	8010228 <tcp_parseopt+0x1c>
 801021a:	4b32      	ldr	r3, [pc, #200]	; (80102e4 <tcp_parseopt+0xd8>)
 801021c:	f240 727d 	movw	r2, #1917	; 0x77d
 8010220:	4931      	ldr	r1, [pc, #196]	; (80102e8 <tcp_parseopt+0xdc>)
 8010222:	4832      	ldr	r0, [pc, #200]	; (80102ec <tcp_parseopt+0xe0>)
 8010224:	f004 fdb0 	bl	8014d88 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010228:	4b31      	ldr	r3, [pc, #196]	; (80102f0 <tcp_parseopt+0xe4>)
 801022a:	881b      	ldrh	r3, [r3, #0]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d055      	beq.n	80102dc <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010230:	4b30      	ldr	r3, [pc, #192]	; (80102f4 <tcp_parseopt+0xe8>)
 8010232:	2200      	movs	r2, #0
 8010234:	801a      	strh	r2, [r3, #0]
 8010236:	e045      	b.n	80102c4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010238:	f7ff ffb2 	bl	80101a0 <tcp_get_next_optbyte>
 801023c:	4603      	mov	r3, r0
 801023e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010240:	7bfb      	ldrb	r3, [r7, #15]
 8010242:	2b02      	cmp	r3, #2
 8010244:	d006      	beq.n	8010254 <tcp_parseopt+0x48>
 8010246:	2b02      	cmp	r3, #2
 8010248:	dc2b      	bgt.n	80102a2 <tcp_parseopt+0x96>
 801024a:	2b00      	cmp	r3, #0
 801024c:	d041      	beq.n	80102d2 <tcp_parseopt+0xc6>
 801024e:	2b01      	cmp	r3, #1
 8010250:	d127      	bne.n	80102a2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010252:	e037      	b.n	80102c4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010254:	f7ff ffa4 	bl	80101a0 <tcp_get_next_optbyte>
 8010258:	4603      	mov	r3, r0
 801025a:	2b04      	cmp	r3, #4
 801025c:	d13b      	bne.n	80102d6 <tcp_parseopt+0xca>
 801025e:	4b25      	ldr	r3, [pc, #148]	; (80102f4 <tcp_parseopt+0xe8>)
 8010260:	881b      	ldrh	r3, [r3, #0]
 8010262:	3301      	adds	r3, #1
 8010264:	4a22      	ldr	r2, [pc, #136]	; (80102f0 <tcp_parseopt+0xe4>)
 8010266:	8812      	ldrh	r2, [r2, #0]
 8010268:	4293      	cmp	r3, r2
 801026a:	da34      	bge.n	80102d6 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801026c:	f7ff ff98 	bl	80101a0 <tcp_get_next_optbyte>
 8010270:	4603      	mov	r3, r0
 8010272:	b29b      	uxth	r3, r3
 8010274:	021b      	lsls	r3, r3, #8
 8010276:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010278:	f7ff ff92 	bl	80101a0 <tcp_get_next_optbyte>
 801027c:	4603      	mov	r3, r0
 801027e:	b29a      	uxth	r2, r3
 8010280:	89bb      	ldrh	r3, [r7, #12]
 8010282:	4313      	orrs	r3, r2
 8010284:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010286:	89bb      	ldrh	r3, [r7, #12]
 8010288:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801028c:	d804      	bhi.n	8010298 <tcp_parseopt+0x8c>
 801028e:	89bb      	ldrh	r3, [r7, #12]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d001      	beq.n	8010298 <tcp_parseopt+0x8c>
 8010294:	89ba      	ldrh	r2, [r7, #12]
 8010296:	e001      	b.n	801029c <tcp_parseopt+0x90>
 8010298:	f44f 7206 	mov.w	r2, #536	; 0x218
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80102a0:	e010      	b.n	80102c4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80102a2:	f7ff ff7d 	bl	80101a0 <tcp_get_next_optbyte>
 80102a6:	4603      	mov	r3, r0
 80102a8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80102aa:	7afb      	ldrb	r3, [r7, #11]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d914      	bls.n	80102da <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80102b0:	7afb      	ldrb	r3, [r7, #11]
 80102b2:	b29a      	uxth	r2, r3
 80102b4:	4b0f      	ldr	r3, [pc, #60]	; (80102f4 <tcp_parseopt+0xe8>)
 80102b6:	881b      	ldrh	r3, [r3, #0]
 80102b8:	4413      	add	r3, r2
 80102ba:	b29b      	uxth	r3, r3
 80102bc:	3b02      	subs	r3, #2
 80102be:	b29a      	uxth	r2, r3
 80102c0:	4b0c      	ldr	r3, [pc, #48]	; (80102f4 <tcp_parseopt+0xe8>)
 80102c2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80102c4:	4b0b      	ldr	r3, [pc, #44]	; (80102f4 <tcp_parseopt+0xe8>)
 80102c6:	881a      	ldrh	r2, [r3, #0]
 80102c8:	4b09      	ldr	r3, [pc, #36]	; (80102f0 <tcp_parseopt+0xe4>)
 80102ca:	881b      	ldrh	r3, [r3, #0]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d3b3      	bcc.n	8010238 <tcp_parseopt+0x2c>
 80102d0:	e004      	b.n	80102dc <tcp_parseopt+0xd0>
          return;
 80102d2:	bf00      	nop
 80102d4:	e002      	b.n	80102dc <tcp_parseopt+0xd0>
            return;
 80102d6:	bf00      	nop
 80102d8:	e000      	b.n	80102dc <tcp_parseopt+0xd0>
            return;
 80102da:	bf00      	nop
      }
    }
  }
}
 80102dc:	3710      	adds	r7, #16
 80102de:	46bd      	mov	sp, r7
 80102e0:	bd80      	pop	{r7, pc}
 80102e2:	bf00      	nop
 80102e4:	080184a0 	.word	0x080184a0
 80102e8:	08018904 	.word	0x08018904
 80102ec:	080184ec 	.word	0x080184ec
 80102f0:	20000a2c 	.word	0x20000a2c
 80102f4:	20000a34 	.word	0x20000a34

080102f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80102f8:	b480      	push	{r7}
 80102fa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80102fc:	4b05      	ldr	r3, [pc, #20]	; (8010314 <tcp_trigger_input_pcb_close+0x1c>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	f043 0310 	orr.w	r3, r3, #16
 8010304:	b2da      	uxtb	r2, r3
 8010306:	4b03      	ldr	r3, [pc, #12]	; (8010314 <tcp_trigger_input_pcb_close+0x1c>)
 8010308:	701a      	strb	r2, [r3, #0]
}
 801030a:	bf00      	nop
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr
 8010314:	20000a45 	.word	0x20000a45

08010318 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d00a      	beq.n	8010340 <tcp_route+0x28>
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	7a1b      	ldrb	r3, [r3, #8]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d006      	beq.n	8010340 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	7a1b      	ldrb	r3, [r3, #8]
 8010336:	4618      	mov	r0, r3
 8010338:	f7fb f8b8 	bl	800b4ac <netif_get_by_index>
 801033c:	4603      	mov	r3, r0
 801033e:	e003      	b.n	8010348 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f003 fad5 	bl	80138f0 <ip4_route>
 8010346:	4603      	mov	r3, r0
  }
}
 8010348:	4618      	mov	r0, r3
 801034a:	3710      	adds	r7, #16
 801034c:	46bd      	mov	sp, r7
 801034e:	bd80      	pop	{r7, pc}

08010350 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010350:	b590      	push	{r4, r7, lr}
 8010352:	b087      	sub	sp, #28
 8010354:	af00      	add	r7, sp, #0
 8010356:	60f8      	str	r0, [r7, #12]
 8010358:	60b9      	str	r1, [r7, #8]
 801035a:	603b      	str	r3, [r7, #0]
 801035c:	4613      	mov	r3, r2
 801035e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d105      	bne.n	8010372 <tcp_create_segment+0x22>
 8010366:	4b44      	ldr	r3, [pc, #272]	; (8010478 <tcp_create_segment+0x128>)
 8010368:	22a3      	movs	r2, #163	; 0xa3
 801036a:	4944      	ldr	r1, [pc, #272]	; (801047c <tcp_create_segment+0x12c>)
 801036c:	4844      	ldr	r0, [pc, #272]	; (8010480 <tcp_create_segment+0x130>)
 801036e:	f004 fd0b 	bl	8014d88 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d105      	bne.n	8010384 <tcp_create_segment+0x34>
 8010378:	4b3f      	ldr	r3, [pc, #252]	; (8010478 <tcp_create_segment+0x128>)
 801037a:	22a4      	movs	r2, #164	; 0xa4
 801037c:	4941      	ldr	r1, [pc, #260]	; (8010484 <tcp_create_segment+0x134>)
 801037e:	4840      	ldr	r0, [pc, #256]	; (8010480 <tcp_create_segment+0x130>)
 8010380:	f004 fd02 	bl	8014d88 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010384:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010388:	009b      	lsls	r3, r3, #2
 801038a:	b2db      	uxtb	r3, r3
 801038c:	f003 0304 	and.w	r3, r3, #4
 8010390:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010392:	2003      	movs	r0, #3
 8010394:	f7fa fd8c 	bl	800aeb0 <memp_malloc>
 8010398:	6138      	str	r0, [r7, #16]
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d104      	bne.n	80103aa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80103a0:	68b8      	ldr	r0, [r7, #8]
 80103a2:	f7fb fbe3 	bl	800bb6c <pbuf_free>
    return NULL;
 80103a6:	2300      	movs	r3, #0
 80103a8:	e061      	b.n	801046e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80103b0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	2200      	movs	r2, #0
 80103b6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	68ba      	ldr	r2, [r7, #8]
 80103bc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	891a      	ldrh	r2, [r3, #8]
 80103c2:	7dfb      	ldrb	r3, [r7, #23]
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d205      	bcs.n	80103d6 <tcp_create_segment+0x86>
 80103ca:	4b2b      	ldr	r3, [pc, #172]	; (8010478 <tcp_create_segment+0x128>)
 80103cc:	22b0      	movs	r2, #176	; 0xb0
 80103ce:	492e      	ldr	r1, [pc, #184]	; (8010488 <tcp_create_segment+0x138>)
 80103d0:	482b      	ldr	r0, [pc, #172]	; (8010480 <tcp_create_segment+0x130>)
 80103d2:	f004 fcd9 	bl	8014d88 <iprintf>
  seg->len = p->tot_len - optlen;
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	891a      	ldrh	r2, [r3, #8]
 80103da:	7dfb      	ldrb	r3, [r7, #23]
 80103dc:	b29b      	uxth	r3, r3
 80103de:	1ad3      	subs	r3, r2, r3
 80103e0:	b29a      	uxth	r2, r3
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80103e6:	2114      	movs	r1, #20
 80103e8:	68b8      	ldr	r0, [r7, #8]
 80103ea:	f7fb fb29 	bl	800ba40 <pbuf_add_header>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d004      	beq.n	80103fe <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80103f4:	6938      	ldr	r0, [r7, #16]
 80103f6:	f7fc ffe6 	bl	800d3c6 <tcp_seg_free>
    return NULL;
 80103fa:	2300      	movs	r3, #0
 80103fc:	e037      	b.n	801046e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	685a      	ldr	r2, [r3, #4]
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	8ada      	ldrh	r2, [r3, #22]
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	68dc      	ldr	r4, [r3, #12]
 8010410:	4610      	mov	r0, r2
 8010412:	f7fa f819 	bl	800a448 <lwip_htons>
 8010416:	4603      	mov	r3, r0
 8010418:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	8b1a      	ldrh	r2, [r3, #24]
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	68dc      	ldr	r4, [r3, #12]
 8010422:	4610      	mov	r0, r2
 8010424:	f7fa f810 	bl	800a448 <lwip_htons>
 8010428:	4603      	mov	r3, r0
 801042a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	68dc      	ldr	r4, [r3, #12]
 8010430:	6838      	ldr	r0, [r7, #0]
 8010432:	f7fa f81e 	bl	800a472 <lwip_htonl>
 8010436:	4603      	mov	r3, r0
 8010438:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801043a:	7dfb      	ldrb	r3, [r7, #23]
 801043c:	089b      	lsrs	r3, r3, #2
 801043e:	b2db      	uxtb	r3, r3
 8010440:	b29b      	uxth	r3, r3
 8010442:	3305      	adds	r3, #5
 8010444:	b29b      	uxth	r3, r3
 8010446:	031b      	lsls	r3, r3, #12
 8010448:	b29a      	uxth	r2, r3
 801044a:	79fb      	ldrb	r3, [r7, #7]
 801044c:	b29b      	uxth	r3, r3
 801044e:	4313      	orrs	r3, r2
 8010450:	b29a      	uxth	r2, r3
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	68dc      	ldr	r4, [r3, #12]
 8010456:	4610      	mov	r0, r2
 8010458:	f7f9 fff6 	bl	800a448 <lwip_htons>
 801045c:	4603      	mov	r3, r0
 801045e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	68db      	ldr	r3, [r3, #12]
 8010464:	2200      	movs	r2, #0
 8010466:	749a      	strb	r2, [r3, #18]
 8010468:	2200      	movs	r2, #0
 801046a:	74da      	strb	r2, [r3, #19]
  return seg;
 801046c:	693b      	ldr	r3, [r7, #16]
}
 801046e:	4618      	mov	r0, r3
 8010470:	371c      	adds	r7, #28
 8010472:	46bd      	mov	sp, r7
 8010474:	bd90      	pop	{r4, r7, pc}
 8010476:	bf00      	nop
 8010478:	08018920 	.word	0x08018920
 801047c:	08018954 	.word	0x08018954
 8010480:	08018974 	.word	0x08018974
 8010484:	0801899c 	.word	0x0801899c
 8010488:	080189c0 	.word	0x080189c0

0801048c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b086      	sub	sp, #24
 8010490:	af00      	add	r7, sp, #0
 8010492:	607b      	str	r3, [r7, #4]
 8010494:	4603      	mov	r3, r0
 8010496:	73fb      	strb	r3, [r7, #15]
 8010498:	460b      	mov	r3, r1
 801049a:	81bb      	strh	r3, [r7, #12]
 801049c:	4613      	mov	r3, r2
 801049e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80104a0:	89bb      	ldrh	r3, [r7, #12]
 80104a2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d105      	bne.n	80104b6 <tcp_pbuf_prealloc+0x2a>
 80104aa:	4b30      	ldr	r3, [pc, #192]	; (801056c <tcp_pbuf_prealloc+0xe0>)
 80104ac:	22e8      	movs	r2, #232	; 0xe8
 80104ae:	4930      	ldr	r1, [pc, #192]	; (8010570 <tcp_pbuf_prealloc+0xe4>)
 80104b0:	4830      	ldr	r0, [pc, #192]	; (8010574 <tcp_pbuf_prealloc+0xe8>)
 80104b2:	f004 fc69 	bl	8014d88 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80104b6:	6a3b      	ldr	r3, [r7, #32]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d105      	bne.n	80104c8 <tcp_pbuf_prealloc+0x3c>
 80104bc:	4b2b      	ldr	r3, [pc, #172]	; (801056c <tcp_pbuf_prealloc+0xe0>)
 80104be:	22e9      	movs	r2, #233	; 0xe9
 80104c0:	492d      	ldr	r1, [pc, #180]	; (8010578 <tcp_pbuf_prealloc+0xec>)
 80104c2:	482c      	ldr	r0, [pc, #176]	; (8010574 <tcp_pbuf_prealloc+0xe8>)
 80104c4:	f004 fc60 	bl	8014d88 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80104c8:	89ba      	ldrh	r2, [r7, #12]
 80104ca:	897b      	ldrh	r3, [r7, #10]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d221      	bcs.n	8010514 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80104d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104d4:	f003 0302 	and.w	r3, r3, #2
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d111      	bne.n	8010500 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80104dc:	6a3b      	ldr	r3, [r7, #32]
 80104de:	8b5b      	ldrh	r3, [r3, #26]
 80104e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d115      	bne.n	8010514 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80104e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d007      	beq.n	8010500 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80104f0:	6a3b      	ldr	r3, [r7, #32]
 80104f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d103      	bne.n	8010500 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80104f8:	6a3b      	ldr	r3, [r7, #32]
 80104fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d009      	beq.n	8010514 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010500:	89bb      	ldrh	r3, [r7, #12]
 8010502:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010506:	f023 0203 	bic.w	r2, r3, #3
 801050a:	897b      	ldrh	r3, [r7, #10]
 801050c:	4293      	cmp	r3, r2
 801050e:	bf28      	it	cs
 8010510:	4613      	movcs	r3, r2
 8010512:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010514:	8af9      	ldrh	r1, [r7, #22]
 8010516:	7bfb      	ldrb	r3, [r7, #15]
 8010518:	f44f 7220 	mov.w	r2, #640	; 0x280
 801051c:	4618      	mov	r0, r3
 801051e:	f7fb f841 	bl	800b5a4 <pbuf_alloc>
 8010522:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010524:	693b      	ldr	r3, [r7, #16]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d101      	bne.n	801052e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801052a:	2300      	movs	r3, #0
 801052c:	e019      	b.n	8010562 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d006      	beq.n	8010544 <tcp_pbuf_prealloc+0xb8>
 8010536:	4b0d      	ldr	r3, [pc, #52]	; (801056c <tcp_pbuf_prealloc+0xe0>)
 8010538:	f240 120b 	movw	r2, #267	; 0x10b
 801053c:	490f      	ldr	r1, [pc, #60]	; (801057c <tcp_pbuf_prealloc+0xf0>)
 801053e:	480d      	ldr	r0, [pc, #52]	; (8010574 <tcp_pbuf_prealloc+0xe8>)
 8010540:	f004 fc22 	bl	8014d88 <iprintf>
  *oversize = p->len - length;
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	895a      	ldrh	r2, [r3, #10]
 8010548:	89bb      	ldrh	r3, [r7, #12]
 801054a:	1ad3      	subs	r3, r2, r3
 801054c:	b29a      	uxth	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	89ba      	ldrh	r2, [r7, #12]
 8010556:	811a      	strh	r2, [r3, #8]
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	891a      	ldrh	r2, [r3, #8]
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	815a      	strh	r2, [r3, #10]
  return p;
 8010560:	693b      	ldr	r3, [r7, #16]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3718      	adds	r7, #24
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	08018920 	.word	0x08018920
 8010570:	080189d8 	.word	0x080189d8
 8010574:	08018974 	.word	0x08018974
 8010578:	080189fc 	.word	0x080189fc
 801057c:	08018a1c 	.word	0x08018a1c

08010580 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	460b      	mov	r3, r1
 801058a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d106      	bne.n	80105a0 <tcp_write_checks+0x20>
 8010592:	4b33      	ldr	r3, [pc, #204]	; (8010660 <tcp_write_checks+0xe0>)
 8010594:	f240 1233 	movw	r2, #307	; 0x133
 8010598:	4932      	ldr	r1, [pc, #200]	; (8010664 <tcp_write_checks+0xe4>)
 801059a:	4833      	ldr	r0, [pc, #204]	; (8010668 <tcp_write_checks+0xe8>)
 801059c:	f004 fbf4 	bl	8014d88 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	7d1b      	ldrb	r3, [r3, #20]
 80105a4:	2b04      	cmp	r3, #4
 80105a6:	d00e      	beq.n	80105c6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80105ac:	2b07      	cmp	r3, #7
 80105ae:	d00a      	beq.n	80105c6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80105b4:	2b02      	cmp	r3, #2
 80105b6:	d006      	beq.n	80105c6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80105bc:	2b03      	cmp	r3, #3
 80105be:	d002      	beq.n	80105c6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80105c0:	f06f 030a 	mvn.w	r3, #10
 80105c4:	e048      	b.n	8010658 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80105c6:	887b      	ldrh	r3, [r7, #2]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d101      	bne.n	80105d0 <tcp_write_checks+0x50>
    return ERR_OK;
 80105cc:	2300      	movs	r3, #0
 80105ce:	e043      	b.n	8010658 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80105d6:	887a      	ldrh	r2, [r7, #2]
 80105d8:	429a      	cmp	r2, r3
 80105da:	d909      	bls.n	80105f0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	8b5b      	ldrh	r3, [r3, #26]
 80105e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105e4:	b29a      	uxth	r2, r3
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80105ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105ee:	e033      	b.n	8010658 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105f6:	2b08      	cmp	r3, #8
 80105f8:	d909      	bls.n	801060e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	8b5b      	ldrh	r3, [r3, #26]
 80105fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010602:	b29a      	uxth	r2, r3
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801060c:	e024      	b.n	8010658 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010614:	2b00      	cmp	r3, #0
 8010616:	d00f      	beq.n	8010638 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801061c:	2b00      	cmp	r3, #0
 801061e:	d11a      	bne.n	8010656 <tcp_write_checks+0xd6>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010624:	2b00      	cmp	r3, #0
 8010626:	d116      	bne.n	8010656 <tcp_write_checks+0xd6>
 8010628:	4b0d      	ldr	r3, [pc, #52]	; (8010660 <tcp_write_checks+0xe0>)
 801062a:	f240 1255 	movw	r2, #341	; 0x155
 801062e:	490f      	ldr	r1, [pc, #60]	; (801066c <tcp_write_checks+0xec>)
 8010630:	480d      	ldr	r0, [pc, #52]	; (8010668 <tcp_write_checks+0xe8>)
 8010632:	f004 fba9 	bl	8014d88 <iprintf>
 8010636:	e00e      	b.n	8010656 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801063c:	2b00      	cmp	r3, #0
 801063e:	d103      	bne.n	8010648 <tcp_write_checks+0xc8>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010644:	2b00      	cmp	r3, #0
 8010646:	d006      	beq.n	8010656 <tcp_write_checks+0xd6>
 8010648:	4b05      	ldr	r3, [pc, #20]	; (8010660 <tcp_write_checks+0xe0>)
 801064a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801064e:	4908      	ldr	r1, [pc, #32]	; (8010670 <tcp_write_checks+0xf0>)
 8010650:	4805      	ldr	r0, [pc, #20]	; (8010668 <tcp_write_checks+0xe8>)
 8010652:	f004 fb99 	bl	8014d88 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010656:	2300      	movs	r3, #0
}
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	08018920 	.word	0x08018920
 8010664:	08018a30 	.word	0x08018a30
 8010668:	08018974 	.word	0x08018974
 801066c:	08018a50 	.word	0x08018a50
 8010670:	08018a8c 	.word	0x08018a8c

08010674 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010674:	b590      	push	{r4, r7, lr}
 8010676:	b09b      	sub	sp, #108	; 0x6c
 8010678:	af04      	add	r7, sp, #16
 801067a:	60f8      	str	r0, [r7, #12]
 801067c:	60b9      	str	r1, [r7, #8]
 801067e:	4611      	mov	r1, r2
 8010680:	461a      	mov	r2, r3
 8010682:	460b      	mov	r3, r1
 8010684:	80fb      	strh	r3, [r7, #6]
 8010686:	4613      	mov	r3, r2
 8010688:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801068a:	2300      	movs	r3, #0
 801068c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801068e:	2300      	movs	r3, #0
 8010690:	653b      	str	r3, [r7, #80]	; 0x50
 8010692:	2300      	movs	r3, #0
 8010694:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010696:	2300      	movs	r3, #0
 8010698:	64bb      	str	r3, [r7, #72]	; 0x48
 801069a:	2300      	movs	r3, #0
 801069c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801069e:	2300      	movs	r3, #0
 80106a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80106a4:	2300      	movs	r3, #0
 80106a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80106aa:	2300      	movs	r3, #0
 80106ac:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80106b2:	2300      	movs	r3, #0
 80106b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d109      	bne.n	80106d0 <tcp_write+0x5c>
 80106bc:	4ba4      	ldr	r3, [pc, #656]	; (8010950 <tcp_write+0x2dc>)
 80106be:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80106c2:	49a4      	ldr	r1, [pc, #656]	; (8010954 <tcp_write+0x2e0>)
 80106c4:	48a4      	ldr	r0, [pc, #656]	; (8010958 <tcp_write+0x2e4>)
 80106c6:	f004 fb5f 	bl	8014d88 <iprintf>
 80106ca:	f06f 030f 	mvn.w	r3, #15
 80106ce:	e32a      	b.n	8010d26 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80106d6:	085b      	lsrs	r3, r3, #1
 80106d8:	b29a      	uxth	r2, r3
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106de:	4293      	cmp	r3, r2
 80106e0:	bf28      	it	cs
 80106e2:	4613      	movcs	r3, r2
 80106e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80106e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d102      	bne.n	80106f2 <tcp_write+0x7e>
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106f0:	e000      	b.n	80106f4 <tcp_write+0x80>
 80106f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d109      	bne.n	8010710 <tcp_write+0x9c>
 80106fc:	4b94      	ldr	r3, [pc, #592]	; (8010950 <tcp_write+0x2dc>)
 80106fe:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010702:	4996      	ldr	r1, [pc, #600]	; (801095c <tcp_write+0x2e8>)
 8010704:	4894      	ldr	r0, [pc, #592]	; (8010958 <tcp_write+0x2e4>)
 8010706:	f004 fb3f 	bl	8014d88 <iprintf>
 801070a:	f06f 030f 	mvn.w	r3, #15
 801070e:	e30a      	b.n	8010d26 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010710:	88fb      	ldrh	r3, [r7, #6]
 8010712:	4619      	mov	r1, r3
 8010714:	68f8      	ldr	r0, [r7, #12]
 8010716:	f7ff ff33 	bl	8010580 <tcp_write_checks>
 801071a:	4603      	mov	r3, r0
 801071c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010720:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010724:	2b00      	cmp	r3, #0
 8010726:	d002      	beq.n	801072e <tcp_write+0xba>
    return err;
 8010728:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801072c:	e2fb      	b.n	8010d26 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010734:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010738:	2300      	movs	r3, #0
 801073a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010742:	2b00      	cmp	r3, #0
 8010744:	f000 80f6 	beq.w	8010934 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801074c:	653b      	str	r3, [r7, #80]	; 0x50
 801074e:	e002      	b.n	8010756 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d1f8      	bne.n	8010750 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801075e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010760:	7a9b      	ldrb	r3, [r3, #10]
 8010762:	009b      	lsls	r3, r3, #2
 8010764:	b29b      	uxth	r3, r3
 8010766:	f003 0304 	and.w	r3, r3, #4
 801076a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801076c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801076e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010770:	891b      	ldrh	r3, [r3, #8]
 8010772:	4619      	mov	r1, r3
 8010774:	8c3b      	ldrh	r3, [r7, #32]
 8010776:	440b      	add	r3, r1
 8010778:	429a      	cmp	r2, r3
 801077a:	da06      	bge.n	801078a <tcp_write+0x116>
 801077c:	4b74      	ldr	r3, [pc, #464]	; (8010950 <tcp_write+0x2dc>)
 801077e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010782:	4977      	ldr	r1, [pc, #476]	; (8010960 <tcp_write+0x2ec>)
 8010784:	4874      	ldr	r0, [pc, #464]	; (8010958 <tcp_write+0x2e4>)
 8010786:	f004 faff 	bl	8014d88 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801078a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801078c:	891a      	ldrh	r2, [r3, #8]
 801078e:	8c3b      	ldrh	r3, [r7, #32]
 8010790:	4413      	add	r3, r2
 8010792:	b29b      	uxth	r3, r3
 8010794:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010796:	1ad3      	subs	r3, r2, r3
 8010798:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80107a0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80107a2:	8a7b      	ldrh	r3, [r7, #18]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d026      	beq.n	80107f6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80107a8:	8a7b      	ldrh	r3, [r7, #18]
 80107aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d206      	bcs.n	80107be <tcp_write+0x14a>
 80107b0:	4b67      	ldr	r3, [pc, #412]	; (8010950 <tcp_write+0x2dc>)
 80107b2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80107b6:	496b      	ldr	r1, [pc, #428]	; (8010964 <tcp_write+0x2f0>)
 80107b8:	4867      	ldr	r0, [pc, #412]	; (8010958 <tcp_write+0x2e4>)
 80107ba:	f004 fae5 	bl	8014d88 <iprintf>
      seg = last_unsent;
 80107be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107c0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80107c2:	8a7b      	ldrh	r3, [r7, #18]
 80107c4:	88fa      	ldrh	r2, [r7, #6]
 80107c6:	4293      	cmp	r3, r2
 80107c8:	bf28      	it	cs
 80107ca:	4613      	movcs	r3, r2
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107d0:	4293      	cmp	r3, r2
 80107d2:	bf28      	it	cs
 80107d4:	4613      	movcs	r3, r2
 80107d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80107d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107de:	4413      	add	r3, r2
 80107e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80107e4:	8a7a      	ldrh	r2, [r7, #18]
 80107e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	b29b      	uxth	r3, r3
 80107ec:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80107ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107f2:	1ad3      	subs	r3, r2, r3
 80107f4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80107f6:	8a7b      	ldrh	r3, [r7, #18]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d00b      	beq.n	8010814 <tcp_write+0x1a0>
 80107fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010800:	88fb      	ldrh	r3, [r7, #6]
 8010802:	429a      	cmp	r2, r3
 8010804:	d006      	beq.n	8010814 <tcp_write+0x1a0>
 8010806:	4b52      	ldr	r3, [pc, #328]	; (8010950 <tcp_write+0x2dc>)
 8010808:	f44f 7200 	mov.w	r2, #512	; 0x200
 801080c:	4956      	ldr	r1, [pc, #344]	; (8010968 <tcp_write+0x2f4>)
 801080e:	4852      	ldr	r0, [pc, #328]	; (8010958 <tcp_write+0x2e4>)
 8010810:	f004 faba 	bl	8014d88 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010814:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010818:	88fb      	ldrh	r3, [r7, #6]
 801081a:	429a      	cmp	r2, r3
 801081c:	f080 8167 	bcs.w	8010aee <tcp_write+0x47a>
 8010820:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010822:	2b00      	cmp	r3, #0
 8010824:	f000 8163 	beq.w	8010aee <tcp_write+0x47a>
 8010828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801082a:	891b      	ldrh	r3, [r3, #8]
 801082c:	2b00      	cmp	r3, #0
 801082e:	f000 815e 	beq.w	8010aee <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010832:	88fa      	ldrh	r2, [r7, #6]
 8010834:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010838:	1ad2      	subs	r2, r2, r3
 801083a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801083c:	4293      	cmp	r3, r2
 801083e:	bfa8      	it	ge
 8010840:	4613      	movge	r3, r2
 8010842:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010846:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010848:	797b      	ldrb	r3, [r7, #5]
 801084a:	f003 0301 	and.w	r3, r3, #1
 801084e:	2b00      	cmp	r3, #0
 8010850:	d027      	beq.n	80108a2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010852:	f107 0012 	add.w	r0, r7, #18
 8010856:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010858:	8bf9      	ldrh	r1, [r7, #30]
 801085a:	2301      	movs	r3, #1
 801085c:	9302      	str	r3, [sp, #8]
 801085e:	797b      	ldrb	r3, [r7, #5]
 8010860:	9301      	str	r3, [sp, #4]
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	4603      	mov	r3, r0
 8010868:	2000      	movs	r0, #0
 801086a:	f7ff fe0f 	bl	801048c <tcp_pbuf_prealloc>
 801086e:	6578      	str	r0, [r7, #84]	; 0x54
 8010870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010872:	2b00      	cmp	r3, #0
 8010874:	f000 8225 	beq.w	8010cc2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801087a:	6858      	ldr	r0, [r3, #4]
 801087c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010880:	68ba      	ldr	r2, [r7, #8]
 8010882:	4413      	add	r3, r2
 8010884:	8bfa      	ldrh	r2, [r7, #30]
 8010886:	4619      	mov	r1, r3
 8010888:	f004 fa4e 	bl	8014d28 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801088c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801088e:	f7fb f9f5 	bl	800bc7c <pbuf_clen>
 8010892:	4603      	mov	r3, r0
 8010894:	461a      	mov	r2, r3
 8010896:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801089a:	4413      	add	r3, r2
 801089c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80108a0:	e041      	b.n	8010926 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80108a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108a4:	685b      	ldr	r3, [r3, #4]
 80108a6:	637b      	str	r3, [r7, #52]	; 0x34
 80108a8:	e002      	b.n	80108b0 <tcp_write+0x23c>
 80108aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	637b      	str	r3, [r7, #52]	; 0x34
 80108b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d1f8      	bne.n	80108aa <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80108b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108ba:	7b1b      	ldrb	r3, [r3, #12]
 80108bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d115      	bne.n	80108f0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80108c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c6:	685b      	ldr	r3, [r3, #4]
 80108c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108ca:	8952      	ldrh	r2, [r2, #10]
 80108cc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d10d      	bne.n	80108f0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80108d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d006      	beq.n	80108ea <tcp_write+0x276>
 80108dc:	4b1c      	ldr	r3, [pc, #112]	; (8010950 <tcp_write+0x2dc>)
 80108de:	f240 2231 	movw	r2, #561	; 0x231
 80108e2:	4922      	ldr	r1, [pc, #136]	; (801096c <tcp_write+0x2f8>)
 80108e4:	481c      	ldr	r0, [pc, #112]	; (8010958 <tcp_write+0x2e4>)
 80108e6:	f004 fa4f 	bl	8014d88 <iprintf>
          extendlen = seglen;
 80108ea:	8bfb      	ldrh	r3, [r7, #30]
 80108ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80108ee:	e01a      	b.n	8010926 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80108f0:	8bfb      	ldrh	r3, [r7, #30]
 80108f2:	2201      	movs	r2, #1
 80108f4:	4619      	mov	r1, r3
 80108f6:	2000      	movs	r0, #0
 80108f8:	f7fa fe54 	bl	800b5a4 <pbuf_alloc>
 80108fc:	6578      	str	r0, [r7, #84]	; 0x54
 80108fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010900:	2b00      	cmp	r3, #0
 8010902:	f000 81e0 	beq.w	8010cc6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010906:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801090a:	68ba      	ldr	r2, [r7, #8]
 801090c:	441a      	add	r2, r3
 801090e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010910:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010912:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010914:	f7fb f9b2 	bl	800bc7c <pbuf_clen>
 8010918:	4603      	mov	r3, r0
 801091a:	461a      	mov	r2, r3
 801091c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010920:	4413      	add	r3, r2
 8010922:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010926:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801092a:	8bfb      	ldrh	r3, [r7, #30]
 801092c:	4413      	add	r3, r2
 801092e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010932:	e0dc      	b.n	8010aee <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801093a:	2b00      	cmp	r3, #0
 801093c:	f000 80d7 	beq.w	8010aee <tcp_write+0x47a>
 8010940:	4b03      	ldr	r3, [pc, #12]	; (8010950 <tcp_write+0x2dc>)
 8010942:	f240 224a 	movw	r2, #586	; 0x24a
 8010946:	490a      	ldr	r1, [pc, #40]	; (8010970 <tcp_write+0x2fc>)
 8010948:	4803      	ldr	r0, [pc, #12]	; (8010958 <tcp_write+0x2e4>)
 801094a:	f004 fa1d 	bl	8014d88 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801094e:	e0ce      	b.n	8010aee <tcp_write+0x47a>
 8010950:	08018920 	.word	0x08018920
 8010954:	08018ac0 	.word	0x08018ac0
 8010958:	08018974 	.word	0x08018974
 801095c:	08018ad8 	.word	0x08018ad8
 8010960:	08018b0c 	.word	0x08018b0c
 8010964:	08018b24 	.word	0x08018b24
 8010968:	08018b44 	.word	0x08018b44
 801096c:	08018b64 	.word	0x08018b64
 8010970:	08018b90 	.word	0x08018b90
    struct pbuf *p;
    u16_t left = len - pos;
 8010974:	88fa      	ldrh	r2, [r7, #6]
 8010976:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801097a:	1ad3      	subs	r3, r2, r3
 801097c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801097e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010982:	b29b      	uxth	r3, r3
 8010984:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010986:	1ad3      	subs	r3, r2, r3
 8010988:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801098a:	8b7a      	ldrh	r2, [r7, #26]
 801098c:	8bbb      	ldrh	r3, [r7, #28]
 801098e:	4293      	cmp	r3, r2
 8010990:	bf28      	it	cs
 8010992:	4613      	movcs	r3, r2
 8010994:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010996:	797b      	ldrb	r3, [r7, #5]
 8010998:	f003 0301 	and.w	r3, r3, #1
 801099c:	2b00      	cmp	r3, #0
 801099e:	d036      	beq.n	8010a0e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80109a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	8b3b      	ldrh	r3, [r7, #24]
 80109a8:	4413      	add	r3, r2
 80109aa:	b299      	uxth	r1, r3
 80109ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	bf0c      	ite	eq
 80109b2:	2301      	moveq	r3, #1
 80109b4:	2300      	movne	r3, #0
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	f107 0012 	add.w	r0, r7, #18
 80109bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80109be:	9302      	str	r3, [sp, #8]
 80109c0:	797b      	ldrb	r3, [r7, #5]
 80109c2:	9301      	str	r3, [sp, #4]
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	9300      	str	r3, [sp, #0]
 80109c8:	4603      	mov	r3, r0
 80109ca:	2036      	movs	r0, #54	; 0x36
 80109cc:	f7ff fd5e 	bl	801048c <tcp_pbuf_prealloc>
 80109d0:	6338      	str	r0, [r7, #48]	; 0x30
 80109d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f000 8178 	beq.w	8010cca <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80109da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109dc:	895b      	ldrh	r3, [r3, #10]
 80109de:	8b3a      	ldrh	r2, [r7, #24]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d906      	bls.n	80109f2 <tcp_write+0x37e>
 80109e4:	4b8c      	ldr	r3, [pc, #560]	; (8010c18 <tcp_write+0x5a4>)
 80109e6:	f240 2266 	movw	r2, #614	; 0x266
 80109ea:	498c      	ldr	r1, [pc, #560]	; (8010c1c <tcp_write+0x5a8>)
 80109ec:	488c      	ldr	r0, [pc, #560]	; (8010c20 <tcp_write+0x5ac>)
 80109ee:	f004 f9cb 	bl	8014d88 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80109f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f4:	685a      	ldr	r2, [r3, #4]
 80109f6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80109fa:	18d0      	adds	r0, r2, r3
 80109fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a00:	68ba      	ldr	r2, [r7, #8]
 8010a02:	4413      	add	r3, r2
 8010a04:	8b3a      	ldrh	r2, [r7, #24]
 8010a06:	4619      	mov	r1, r3
 8010a08:	f004 f98e 	bl	8014d28 <memcpy>
 8010a0c:	e02f      	b.n	8010a6e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010a0e:	8a7b      	ldrh	r3, [r7, #18]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d006      	beq.n	8010a22 <tcp_write+0x3ae>
 8010a14:	4b80      	ldr	r3, [pc, #512]	; (8010c18 <tcp_write+0x5a4>)
 8010a16:	f240 2271 	movw	r2, #625	; 0x271
 8010a1a:	4982      	ldr	r1, [pc, #520]	; (8010c24 <tcp_write+0x5b0>)
 8010a1c:	4880      	ldr	r0, [pc, #512]	; (8010c20 <tcp_write+0x5ac>)
 8010a1e:	f004 f9b3 	bl	8014d88 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010a22:	8b3b      	ldrh	r3, [r7, #24]
 8010a24:	2201      	movs	r2, #1
 8010a26:	4619      	mov	r1, r3
 8010a28:	2036      	movs	r0, #54	; 0x36
 8010a2a:	f7fa fdbb 	bl	800b5a4 <pbuf_alloc>
 8010a2e:	6178      	str	r0, [r7, #20]
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f000 814b 	beq.w	8010cce <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010a38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a3c:	68ba      	ldr	r2, [r7, #8]
 8010a3e:	441a      	add	r2, r3
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a4e:	4619      	mov	r1, r3
 8010a50:	2036      	movs	r0, #54	; 0x36
 8010a52:	f7fa fda7 	bl	800b5a4 <pbuf_alloc>
 8010a56:	6338      	str	r0, [r7, #48]	; 0x30
 8010a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d103      	bne.n	8010a66 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010a5e:	6978      	ldr	r0, [r7, #20]
 8010a60:	f7fb f884 	bl	800bb6c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010a64:	e136      	b.n	8010cd4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010a66:	6979      	ldr	r1, [r7, #20]
 8010a68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a6a:	f7fb f941 	bl	800bcf0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010a6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a70:	f7fb f904 	bl	800bc7c <pbuf_clen>
 8010a74:	4603      	mov	r3, r0
 8010a76:	461a      	mov	r2, r3
 8010a78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a7c:	4413      	add	r3, r2
 8010a7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010a82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a86:	2b09      	cmp	r3, #9
 8010a88:	d903      	bls.n	8010a92 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010a8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a8c:	f7fb f86e 	bl	800bb6c <pbuf_free>
      goto memerr;
 8010a90:	e120      	b.n	8010cd4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a9a:	441a      	add	r2, r3
 8010a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010aa0:	9300      	str	r3, [sp, #0]
 8010aa2:	4613      	mov	r3, r2
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010aa8:	68f8      	ldr	r0, [r7, #12]
 8010aaa:	f7ff fc51 	bl	8010350 <tcp_create_segment>
 8010aae:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	f000 810d 	beq.w	8010cd2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d102      	bne.n	8010ac4 <tcp_write+0x450>
      queue = seg;
 8010abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8010ac2:	e00c      	b.n	8010ade <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d106      	bne.n	8010ad8 <tcp_write+0x464>
 8010aca:	4b53      	ldr	r3, [pc, #332]	; (8010c18 <tcp_write+0x5a4>)
 8010acc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010ad0:	4955      	ldr	r1, [pc, #340]	; (8010c28 <tcp_write+0x5b4>)
 8010ad2:	4853      	ldr	r0, [pc, #332]	; (8010c20 <tcp_write+0x5ac>)
 8010ad4:	f004 f958 	bl	8014d88 <iprintf>
      prev_seg->next = seg;
 8010ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010adc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ae0:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010ae2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ae6:	8b3b      	ldrh	r3, [r7, #24]
 8010ae8:	4413      	add	r3, r2
 8010aea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010aee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010af2:	88fb      	ldrh	r3, [r7, #6]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	f4ff af3d 	bcc.w	8010974 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010afa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d02c      	beq.n	8010b5a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b06:	e01e      	b.n	8010b46 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0a:	891a      	ldrh	r2, [r3, #8]
 8010b0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b0e:	4413      	add	r3, r2
 8010b10:	b29a      	uxth	r2, r3
 8010b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b14:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d110      	bne.n	8010b40 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b24:	8952      	ldrh	r2, [r2, #10]
 8010b26:	4413      	add	r3, r2
 8010b28:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010b2a:	68b9      	ldr	r1, [r7, #8]
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f004 f8fb 	bl	8014d28 <memcpy>
        p->len += oversize_used;
 8010b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b34:	895a      	ldrh	r2, [r3, #10]
 8010b36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b38:	4413      	add	r3, r2
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d1dd      	bne.n	8010b08 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b4e:	891a      	ldrh	r2, [r3, #8]
 8010b50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b52:	4413      	add	r3, r2
 8010b54:	b29a      	uxth	r2, r3
 8010b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b58:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010b5a:	8a7a      	ldrh	r2, [r7, #18]
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d018      	beq.n	8010b9a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d106      	bne.n	8010b7c <tcp_write+0x508>
 8010b6e:	4b2a      	ldr	r3, [pc, #168]	; (8010c18 <tcp_write+0x5a4>)
 8010b70:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010b74:	492d      	ldr	r1, [pc, #180]	; (8010c2c <tcp_write+0x5b8>)
 8010b76:	482a      	ldr	r0, [pc, #168]	; (8010c20 <tcp_write+0x5ac>)
 8010b78:	f004 f906 	bl	8014d88 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b7e:	685b      	ldr	r3, [r3, #4]
 8010b80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fb f8b4 	bl	800bcf0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b8a:	891a      	ldrh	r2, [r3, #8]
 8010b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b8e:	891b      	ldrh	r3, [r3, #8]
 8010b90:	4413      	add	r3, r2
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b96:	811a      	strh	r2, [r3, #8]
 8010b98:	e037      	b.n	8010c0a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8010b9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d034      	beq.n	8010c0a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d003      	beq.n	8010bae <tcp_write+0x53a>
 8010ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d106      	bne.n	8010bbc <tcp_write+0x548>
 8010bae:	4b1a      	ldr	r3, [pc, #104]	; (8010c18 <tcp_write+0x5a4>)
 8010bb0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8010bb4:	491e      	ldr	r1, [pc, #120]	; (8010c30 <tcp_write+0x5bc>)
 8010bb6:	481a      	ldr	r0, [pc, #104]	; (8010c20 <tcp_write+0x5ac>)
 8010bb8:	f004 f8e6 	bl	8014d88 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bbe:	685b      	ldr	r3, [r3, #4]
 8010bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bc2:	e009      	b.n	8010bd8 <tcp_write+0x564>
      p->tot_len += extendlen;
 8010bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc6:	891a      	ldrh	r2, [r3, #8]
 8010bc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bca:	4413      	add	r3, r2
 8010bcc:	b29a      	uxth	r2, r3
 8010bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d1f1      	bne.n	8010bc4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be2:	891a      	ldrh	r2, [r3, #8]
 8010be4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010be6:	4413      	add	r3, r2
 8010be8:	b29a      	uxth	r2, r3
 8010bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bec:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bf0:	895a      	ldrh	r2, [r3, #10]
 8010bf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bf4:	4413      	add	r3, r2
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bfe:	891a      	ldrh	r2, [r3, #8]
 8010c00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010c02:	4413      	add	r3, r2
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c08:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d111      	bne.n	8010c34 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c14:	66da      	str	r2, [r3, #108]	; 0x6c
 8010c16:	e010      	b.n	8010c3a <tcp_write+0x5c6>
 8010c18:	08018920 	.word	0x08018920
 8010c1c:	08018bc0 	.word	0x08018bc0
 8010c20:	08018974 	.word	0x08018974
 8010c24:	08018c00 	.word	0x08018c00
 8010c28:	08018c10 	.word	0x08018c10
 8010c2c:	08018c24 	.word	0x08018c24
 8010c30:	08018c5c 	.word	0x08018c5c
  } else {
    last_unsent->next = queue;
 8010c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c38:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010c3e:	88fb      	ldrh	r3, [r7, #6]
 8010c40:	441a      	add	r2, r3
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010c4c:	88fb      	ldrh	r3, [r7, #6]
 8010c4e:	1ad3      	subs	r3, r2, r3
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010c5e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d00e      	beq.n	8010c8a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d10a      	bne.n	8010c8a <tcp_write+0x616>
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d106      	bne.n	8010c8a <tcp_write+0x616>
 8010c7c:	4b2c      	ldr	r3, [pc, #176]	; (8010d30 <tcp_write+0x6bc>)
 8010c7e:	f240 3212 	movw	r2, #786	; 0x312
 8010c82:	492c      	ldr	r1, [pc, #176]	; (8010d34 <tcp_write+0x6c0>)
 8010c84:	482c      	ldr	r0, [pc, #176]	; (8010d38 <tcp_write+0x6c4>)
 8010c86:	f004 f87f 	bl	8014d88 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d016      	beq.n	8010cbe <tcp_write+0x64a>
 8010c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d012      	beq.n	8010cbe <tcp_write+0x64a>
 8010c98:	797b      	ldrb	r3, [r7, #5]
 8010c9a:	f003 0302 	and.w	r3, r3, #2
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d10d      	bne.n	8010cbe <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	899b      	ldrh	r3, [r3, #12]
 8010ca8:	b29c      	uxth	r4, r3
 8010caa:	2008      	movs	r0, #8
 8010cac:	f7f9 fbcc 	bl	800a448 <lwip_htons>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cb6:	68db      	ldr	r3, [r3, #12]
 8010cb8:	4322      	orrs	r2, r4
 8010cba:	b292      	uxth	r2, r2
 8010cbc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	e031      	b.n	8010d26 <tcp_write+0x6b2>
          goto memerr;
 8010cc2:	bf00      	nop
 8010cc4:	e006      	b.n	8010cd4 <tcp_write+0x660>
            goto memerr;
 8010cc6:	bf00      	nop
 8010cc8:	e004      	b.n	8010cd4 <tcp_write+0x660>
        goto memerr;
 8010cca:	bf00      	nop
 8010ccc:	e002      	b.n	8010cd4 <tcp_write+0x660>
        goto memerr;
 8010cce:	bf00      	nop
 8010cd0:	e000      	b.n	8010cd4 <tcp_write+0x660>
      goto memerr;
 8010cd2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	8b5b      	ldrh	r3, [r3, #26]
 8010cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cdc:	b29a      	uxth	r2, r3
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010ce8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010cea:	f7fa ff3f 	bl	800bb6c <pbuf_free>
  }
  if (queue != NULL) {
 8010cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <tcp_write+0x686>
    tcp_segs_free(queue);
 8010cf4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010cf6:	f7fc fb51 	bl	800d39c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00e      	beq.n	8010d22 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d10a      	bne.n	8010d22 <tcp_write+0x6ae>
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d106      	bne.n	8010d22 <tcp_write+0x6ae>
 8010d14:	4b06      	ldr	r3, [pc, #24]	; (8010d30 <tcp_write+0x6bc>)
 8010d16:	f240 3227 	movw	r2, #807	; 0x327
 8010d1a:	4906      	ldr	r1, [pc, #24]	; (8010d34 <tcp_write+0x6c0>)
 8010d1c:	4806      	ldr	r0, [pc, #24]	; (8010d38 <tcp_write+0x6c4>)
 8010d1e:	f004 f833 	bl	8014d88 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	375c      	adds	r7, #92	; 0x5c
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bd90      	pop	{r4, r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	08018920 	.word	0x08018920
 8010d34:	08018c94 	.word	0x08018c94
 8010d38:	08018974 	.word	0x08018974

08010d3c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010d3c:	b590      	push	{r4, r7, lr}
 8010d3e:	b08b      	sub	sp, #44	; 0x2c
 8010d40:	af02      	add	r7, sp, #8
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	460b      	mov	r3, r1
 8010d46:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010d48:	2300      	movs	r3, #0
 8010d4a:	61fb      	str	r3, [r7, #28]
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010d50:	2300      	movs	r3, #0
 8010d52:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d106      	bne.n	8010d68 <tcp_split_unsent_seg+0x2c>
 8010d5a:	4b95      	ldr	r3, [pc, #596]	; (8010fb0 <tcp_split_unsent_seg+0x274>)
 8010d5c:	f240 324b 	movw	r2, #843	; 0x34b
 8010d60:	4994      	ldr	r1, [pc, #592]	; (8010fb4 <tcp_split_unsent_seg+0x278>)
 8010d62:	4895      	ldr	r0, [pc, #596]	; (8010fb8 <tcp_split_unsent_seg+0x27c>)
 8010d64:	f004 f810 	bl	8014d88 <iprintf>

  useg = pcb->unsent;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d6c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d102      	bne.n	8010d7a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d78:	e116      	b.n	8010fa8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010d7a:	887b      	ldrh	r3, [r7, #2]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d109      	bne.n	8010d94 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010d80:	4b8b      	ldr	r3, [pc, #556]	; (8010fb0 <tcp_split_unsent_seg+0x274>)
 8010d82:	f240 3253 	movw	r2, #851	; 0x353
 8010d86:	498d      	ldr	r1, [pc, #564]	; (8010fbc <tcp_split_unsent_seg+0x280>)
 8010d88:	488b      	ldr	r0, [pc, #556]	; (8010fb8 <tcp_split_unsent_seg+0x27c>)
 8010d8a:	f003 fffd 	bl	8014d88 <iprintf>
    return ERR_VAL;
 8010d8e:	f06f 0305 	mvn.w	r3, #5
 8010d92:	e109      	b.n	8010fa8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	891b      	ldrh	r3, [r3, #8]
 8010d98:	887a      	ldrh	r2, [r7, #2]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d301      	bcc.n	8010da2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010d9e:	2300      	movs	r3, #0
 8010da0:	e102      	b.n	8010fa8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010da6:	887a      	ldrh	r2, [r7, #2]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d906      	bls.n	8010dba <tcp_split_unsent_seg+0x7e>
 8010dac:	4b80      	ldr	r3, [pc, #512]	; (8010fb0 <tcp_split_unsent_seg+0x274>)
 8010dae:	f240 325b 	movw	r2, #859	; 0x35b
 8010db2:	4983      	ldr	r1, [pc, #524]	; (8010fc0 <tcp_split_unsent_seg+0x284>)
 8010db4:	4880      	ldr	r0, [pc, #512]	; (8010fb8 <tcp_split_unsent_seg+0x27c>)
 8010db6:	f003 ffe7 	bl	8014d88 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	891b      	ldrh	r3, [r3, #8]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d106      	bne.n	8010dd0 <tcp_split_unsent_seg+0x94>
 8010dc2:	4b7b      	ldr	r3, [pc, #492]	; (8010fb0 <tcp_split_unsent_seg+0x274>)
 8010dc4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010dc8:	497e      	ldr	r1, [pc, #504]	; (8010fc4 <tcp_split_unsent_seg+0x288>)
 8010dca:	487b      	ldr	r0, [pc, #492]	; (8010fb8 <tcp_split_unsent_seg+0x27c>)
 8010dcc:	f003 ffdc 	bl	8014d88 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	7a9b      	ldrb	r3, [r3, #10]
 8010dd4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010dd6:	7bfb      	ldrb	r3, [r7, #15]
 8010dd8:	009b      	lsls	r3, r3, #2
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	f003 0304 	and.w	r3, r3, #4
 8010de0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	891a      	ldrh	r2, [r3, #8]
 8010de6:	887b      	ldrh	r3, [r7, #2]
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010dec:	7bbb      	ldrb	r3, [r7, #14]
 8010dee:	b29a      	uxth	r2, r3
 8010df0:	89bb      	ldrh	r3, [r7, #12]
 8010df2:	4413      	add	r3, r2
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	2036      	movs	r0, #54	; 0x36
 8010dfe:	f7fa fbd1 	bl	800b5a4 <pbuf_alloc>
 8010e02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	f000 80b7 	beq.w	8010f7a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	891a      	ldrh	r2, [r3, #8]
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	891b      	ldrh	r3, [r3, #8]
 8010e16:	1ad3      	subs	r3, r2, r3
 8010e18:	b29a      	uxth	r2, r3
 8010e1a:	887b      	ldrh	r3, [r7, #2]
 8010e1c:	4413      	add	r3, r2
 8010e1e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	6858      	ldr	r0, [r3, #4]
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	685a      	ldr	r2, [r3, #4]
 8010e28:	7bbb      	ldrb	r3, [r7, #14]
 8010e2a:	18d1      	adds	r1, r2, r3
 8010e2c:	897b      	ldrh	r3, [r7, #10]
 8010e2e:	89ba      	ldrh	r2, [r7, #12]
 8010e30:	f7fb f886 	bl	800bf40 <pbuf_copy_partial>
 8010e34:	4603      	mov	r3, r0
 8010e36:	461a      	mov	r2, r3
 8010e38:	89bb      	ldrh	r3, [r7, #12]
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	f040 809f 	bne.w	8010f7e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010e40:	697b      	ldr	r3, [r7, #20]
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	899b      	ldrh	r3, [r3, #12]
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7f9 fafd 	bl	800a448 <lwip_htons>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	b2db      	uxtb	r3, r3
 8010e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e56:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010e58:	2300      	movs	r3, #0
 8010e5a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010e5c:	7efb      	ldrb	r3, [r7, #27]
 8010e5e:	f003 0308 	and.w	r3, r3, #8
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d007      	beq.n	8010e76 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010e66:	7efb      	ldrb	r3, [r7, #27]
 8010e68:	f023 0308 	bic.w	r3, r3, #8
 8010e6c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010e6e:	7ebb      	ldrb	r3, [r7, #26]
 8010e70:	f043 0308 	orr.w	r3, r3, #8
 8010e74:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010e76:	7efb      	ldrb	r3, [r7, #27]
 8010e78:	f003 0301 	and.w	r3, r3, #1
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d007      	beq.n	8010e90 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010e80:	7efb      	ldrb	r3, [r7, #27]
 8010e82:	f023 0301 	bic.w	r3, r3, #1
 8010e86:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010e88:	7ebb      	ldrb	r3, [r7, #26]
 8010e8a:	f043 0301 	orr.w	r3, r3, #1
 8010e8e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7f9 faeb 	bl	800a472 <lwip_htonl>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	887b      	ldrh	r3, [r7, #2]
 8010ea0:	18d1      	adds	r1, r2, r3
 8010ea2:	7eba      	ldrb	r2, [r7, #26]
 8010ea4:	7bfb      	ldrb	r3, [r7, #15]
 8010ea6:	9300      	str	r3, [sp, #0]
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	6939      	ldr	r1, [r7, #16]
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f7ff fa4f 	bl	8010350 <tcp_create_segment>
 8010eb2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d063      	beq.n	8010f82 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7fa fedc 	bl	800bc7c <pbuf_clen>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	461a      	mov	r2, r3
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ece:	1a9b      	subs	r3, r3, r2
 8010ed0:	b29a      	uxth	r2, r3
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	6858      	ldr	r0, [r3, #4]
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	685b      	ldr	r3, [r3, #4]
 8010ee0:	891a      	ldrh	r2, [r3, #8]
 8010ee2:	89bb      	ldrh	r3, [r7, #12]
 8010ee4:	1ad3      	subs	r3, r2, r3
 8010ee6:	b29b      	uxth	r3, r3
 8010ee8:	4619      	mov	r1, r3
 8010eea:	f7fa fcb9 	bl	800b860 <pbuf_realloc>
  useg->len -= remainder;
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	891a      	ldrh	r2, [r3, #8]
 8010ef2:	89bb      	ldrh	r3, [r7, #12]
 8010ef4:	1ad3      	subs	r3, r2, r3
 8010ef6:	b29a      	uxth	r2, r3
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	899b      	ldrh	r3, [r3, #12]
 8010f02:	b29c      	uxth	r4, r3
 8010f04:	7efb      	ldrb	r3, [r7, #27]
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f7f9 fa9d 	bl	800a448 <lwip_htons>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	461a      	mov	r2, r3
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	68db      	ldr	r3, [r3, #12]
 8010f16:	4322      	orrs	r2, r4
 8010f18:	b292      	uxth	r2, r2
 8010f1a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7fa feab 	bl	800bc7c <pbuf_clen>
 8010f26:	4603      	mov	r3, r0
 8010f28:	461a      	mov	r2, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f30:	4413      	add	r3, r2
 8010f32:	b29a      	uxth	r2, r3
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f3a:	69fb      	ldr	r3, [r7, #28]
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f7fa fe9c 	bl	800bc7c <pbuf_clen>
 8010f44:	4603      	mov	r3, r0
 8010f46:	461a      	mov	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f4e:	4413      	add	r3, r2
 8010f50:	b29a      	uxth	r2, r3
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	69fa      	ldr	r2, [r7, #28]
 8010f64:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010f66:	69fb      	ldr	r3, [r7, #28]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d103      	bne.n	8010f76 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010f76:	2300      	movs	r3, #0
 8010f78:	e016      	b.n	8010fa8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010f7a:	bf00      	nop
 8010f7c:	e002      	b.n	8010f84 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f7e:	bf00      	nop
 8010f80:	e000      	b.n	8010f84 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f82:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d006      	beq.n	8010f98 <tcp_split_unsent_seg+0x25c>
 8010f8a:	4b09      	ldr	r3, [pc, #36]	; (8010fb0 <tcp_split_unsent_seg+0x274>)
 8010f8c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010f90:	490d      	ldr	r1, [pc, #52]	; (8010fc8 <tcp_split_unsent_seg+0x28c>)
 8010f92:	4809      	ldr	r0, [pc, #36]	; (8010fb8 <tcp_split_unsent_seg+0x27c>)
 8010f94:	f003 fef8 	bl	8014d88 <iprintf>
  if (p != NULL) {
 8010f98:	693b      	ldr	r3, [r7, #16]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d002      	beq.n	8010fa4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010f9e:	6938      	ldr	r0, [r7, #16]
 8010fa0:	f7fa fde4 	bl	800bb6c <pbuf_free>
  }

  return ERR_MEM;
 8010fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3724      	adds	r7, #36	; 0x24
 8010fac:	46bd      	mov	sp, r7
 8010fae:	bd90      	pop	{r4, r7, pc}
 8010fb0:	08018920 	.word	0x08018920
 8010fb4:	08018cb4 	.word	0x08018cb4
 8010fb8:	08018974 	.word	0x08018974
 8010fbc:	08018cd8 	.word	0x08018cd8
 8010fc0:	08018cfc 	.word	0x08018cfc
 8010fc4:	08018d0c 	.word	0x08018d0c
 8010fc8:	08018d1c 	.word	0x08018d1c

08010fcc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010fcc:	b590      	push	{r4, r7, lr}
 8010fce:	b085      	sub	sp, #20
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d106      	bne.n	8010fe8 <tcp_send_fin+0x1c>
 8010fda:	4b21      	ldr	r3, [pc, #132]	; (8011060 <tcp_send_fin+0x94>)
 8010fdc:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010fe0:	4920      	ldr	r1, [pc, #128]	; (8011064 <tcp_send_fin+0x98>)
 8010fe2:	4821      	ldr	r0, [pc, #132]	; (8011068 <tcp_send_fin+0x9c>)
 8010fe4:	f003 fed0 	bl	8014d88 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d02e      	beq.n	801104e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ff4:	60fb      	str	r3, [r7, #12]
 8010ff6:	e002      	b.n	8010ffe <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d1f8      	bne.n	8010ff8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	68db      	ldr	r3, [r3, #12]
 801100a:	899b      	ldrh	r3, [r3, #12]
 801100c:	b29b      	uxth	r3, r3
 801100e:	4618      	mov	r0, r3
 8011010:	f7f9 fa1a 	bl	800a448 <lwip_htons>
 8011014:	4603      	mov	r3, r0
 8011016:	b2db      	uxtb	r3, r3
 8011018:	f003 0307 	and.w	r3, r3, #7
 801101c:	2b00      	cmp	r3, #0
 801101e:	d116      	bne.n	801104e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	899b      	ldrh	r3, [r3, #12]
 8011026:	b29c      	uxth	r4, r3
 8011028:	2001      	movs	r0, #1
 801102a:	f7f9 fa0d 	bl	800a448 <lwip_htons>
 801102e:	4603      	mov	r3, r0
 8011030:	461a      	mov	r2, r3
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	68db      	ldr	r3, [r3, #12]
 8011036:	4322      	orrs	r2, r4
 8011038:	b292      	uxth	r2, r2
 801103a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	8b5b      	ldrh	r3, [r3, #26]
 8011040:	f043 0320 	orr.w	r3, r3, #32
 8011044:	b29a      	uxth	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801104a:	2300      	movs	r3, #0
 801104c:	e004      	b.n	8011058 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801104e:	2101      	movs	r1, #1
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f000 f80b 	bl	801106c <tcp_enqueue_flags>
 8011056:	4603      	mov	r3, r0
}
 8011058:	4618      	mov	r0, r3
 801105a:	3714      	adds	r7, #20
 801105c:	46bd      	mov	sp, r7
 801105e:	bd90      	pop	{r4, r7, pc}
 8011060:	08018920 	.word	0x08018920
 8011064:	08018d28 	.word	0x08018d28
 8011068:	08018974 	.word	0x08018974

0801106c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b08a      	sub	sp, #40	; 0x28
 8011070:	af02      	add	r7, sp, #8
 8011072:	6078      	str	r0, [r7, #4]
 8011074:	460b      	mov	r3, r1
 8011076:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011078:	2300      	movs	r3, #0
 801107a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801107c:	2300      	movs	r3, #0
 801107e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011080:	78fb      	ldrb	r3, [r7, #3]
 8011082:	f003 0303 	and.w	r3, r3, #3
 8011086:	2b00      	cmp	r3, #0
 8011088:	d106      	bne.n	8011098 <tcp_enqueue_flags+0x2c>
 801108a:	4b67      	ldr	r3, [pc, #412]	; (8011228 <tcp_enqueue_flags+0x1bc>)
 801108c:	f240 4211 	movw	r2, #1041	; 0x411
 8011090:	4966      	ldr	r1, [pc, #408]	; (801122c <tcp_enqueue_flags+0x1c0>)
 8011092:	4867      	ldr	r0, [pc, #412]	; (8011230 <tcp_enqueue_flags+0x1c4>)
 8011094:	f003 fe78 	bl	8014d88 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d106      	bne.n	80110ac <tcp_enqueue_flags+0x40>
 801109e:	4b62      	ldr	r3, [pc, #392]	; (8011228 <tcp_enqueue_flags+0x1bc>)
 80110a0:	f240 4213 	movw	r2, #1043	; 0x413
 80110a4:	4963      	ldr	r1, [pc, #396]	; (8011234 <tcp_enqueue_flags+0x1c8>)
 80110a6:	4862      	ldr	r0, [pc, #392]	; (8011230 <tcp_enqueue_flags+0x1c4>)
 80110a8:	f003 fe6e 	bl	8014d88 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80110ac:	78fb      	ldrb	r3, [r7, #3]
 80110ae:	f003 0302 	and.w	r3, r3, #2
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d001      	beq.n	80110ba <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80110b6:	2301      	movs	r3, #1
 80110b8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80110ba:	7ffb      	ldrb	r3, [r7, #31]
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	f003 0304 	and.w	r3, r3, #4
 80110c4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80110c6:	7dfb      	ldrb	r3, [r7, #23]
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80110ce:	4619      	mov	r1, r3
 80110d0:	2036      	movs	r0, #54	; 0x36
 80110d2:	f7fa fa67 	bl	800b5a4 <pbuf_alloc>
 80110d6:	6138      	str	r0, [r7, #16]
 80110d8:	693b      	ldr	r3, [r7, #16]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d109      	bne.n	80110f2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	8b5b      	ldrh	r3, [r3, #26]
 80110e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110e6:	b29a      	uxth	r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80110ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110f0:	e095      	b.n	801121e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	895a      	ldrh	r2, [r3, #10]
 80110f6:	7dfb      	ldrb	r3, [r7, #23]
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d206      	bcs.n	801110c <tcp_enqueue_flags+0xa0>
 80110fe:	4b4a      	ldr	r3, [pc, #296]	; (8011228 <tcp_enqueue_flags+0x1bc>)
 8011100:	f240 4239 	movw	r2, #1081	; 0x439
 8011104:	494c      	ldr	r1, [pc, #304]	; (8011238 <tcp_enqueue_flags+0x1cc>)
 8011106:	484a      	ldr	r0, [pc, #296]	; (8011230 <tcp_enqueue_flags+0x1c4>)
 8011108:	f003 fe3e 	bl	8014d88 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011110:	78fa      	ldrb	r2, [r7, #3]
 8011112:	7ffb      	ldrb	r3, [r7, #31]
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	460b      	mov	r3, r1
 8011118:	6939      	ldr	r1, [r7, #16]
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f7ff f918 	bl	8010350 <tcp_create_segment>
 8011120:	60f8      	str	r0, [r7, #12]
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d109      	bne.n	801113c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	8b5b      	ldrh	r3, [r3, #26]
 801112c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011130:	b29a      	uxth	r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801113a:	e070      	b.n	801121e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	f003 0303 	and.w	r3, r3, #3
 8011144:	2b00      	cmp	r3, #0
 8011146:	d006      	beq.n	8011156 <tcp_enqueue_flags+0xea>
 8011148:	4b37      	ldr	r3, [pc, #220]	; (8011228 <tcp_enqueue_flags+0x1bc>)
 801114a:	f240 4242 	movw	r2, #1090	; 0x442
 801114e:	493b      	ldr	r1, [pc, #236]	; (801123c <tcp_enqueue_flags+0x1d0>)
 8011150:	4837      	ldr	r0, [pc, #220]	; (8011230 <tcp_enqueue_flags+0x1c4>)
 8011152:	f003 fe19 	bl	8014d88 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	891b      	ldrh	r3, [r3, #8]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d006      	beq.n	801116c <tcp_enqueue_flags+0x100>
 801115e:	4b32      	ldr	r3, [pc, #200]	; (8011228 <tcp_enqueue_flags+0x1bc>)
 8011160:	f240 4243 	movw	r2, #1091	; 0x443
 8011164:	4936      	ldr	r1, [pc, #216]	; (8011240 <tcp_enqueue_flags+0x1d4>)
 8011166:	4832      	ldr	r0, [pc, #200]	; (8011230 <tcp_enqueue_flags+0x1c4>)
 8011168:	f003 fe0e 	bl	8014d88 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011170:	2b00      	cmp	r3, #0
 8011172:	d103      	bne.n	801117c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	68fa      	ldr	r2, [r7, #12]
 8011178:	66da      	str	r2, [r3, #108]	; 0x6c
 801117a:	e00d      	b.n	8011198 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011180:	61bb      	str	r3, [r7, #24]
 8011182:	e002      	b.n	801118a <tcp_enqueue_flags+0x11e>
 8011184:	69bb      	ldr	r3, [r7, #24]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	61bb      	str	r3, [r7, #24]
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d1f8      	bne.n	8011184 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011192:	69bb      	ldr	r3, [r7, #24]
 8011194:	68fa      	ldr	r2, [r7, #12]
 8011196:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	2200      	movs	r2, #0
 801119c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80111a0:	78fb      	ldrb	r3, [r7, #3]
 80111a2:	f003 0302 	and.w	r3, r3, #2
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d104      	bne.n	80111b4 <tcp_enqueue_flags+0x148>
 80111aa:	78fb      	ldrb	r3, [r7, #3]
 80111ac:	f003 0301 	and.w	r3, r3, #1
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d004      	beq.n	80111be <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111b8:	1c5a      	adds	r2, r3, #1
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80111be:	78fb      	ldrb	r3, [r7, #3]
 80111c0:	f003 0301 	and.w	r3, r3, #1
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d006      	beq.n	80111d6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	8b5b      	ldrh	r3, [r3, #26]
 80111cc:	f043 0320 	orr.w	r3, r3, #32
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	4618      	mov	r0, r3
 80111dc:	f7fa fd4e 	bl	800bc7c <pbuf_clen>
 80111e0:	4603      	mov	r3, r0
 80111e2:	461a      	mov	r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111ea:	4413      	add	r3, r2
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d00e      	beq.n	801121c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011202:	2b00      	cmp	r3, #0
 8011204:	d10a      	bne.n	801121c <tcp_enqueue_flags+0x1b0>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801120a:	2b00      	cmp	r3, #0
 801120c:	d106      	bne.n	801121c <tcp_enqueue_flags+0x1b0>
 801120e:	4b06      	ldr	r3, [pc, #24]	; (8011228 <tcp_enqueue_flags+0x1bc>)
 8011210:	f240 4265 	movw	r2, #1125	; 0x465
 8011214:	490b      	ldr	r1, [pc, #44]	; (8011244 <tcp_enqueue_flags+0x1d8>)
 8011216:	4806      	ldr	r0, [pc, #24]	; (8011230 <tcp_enqueue_flags+0x1c4>)
 8011218:	f003 fdb6 	bl	8014d88 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801121c:	2300      	movs	r3, #0
}
 801121e:	4618      	mov	r0, r3
 8011220:	3720      	adds	r7, #32
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}
 8011226:	bf00      	nop
 8011228:	08018920 	.word	0x08018920
 801122c:	08018d44 	.word	0x08018d44
 8011230:	08018974 	.word	0x08018974
 8011234:	08018d9c 	.word	0x08018d9c
 8011238:	08018dbc 	.word	0x08018dbc
 801123c:	08018df8 	.word	0x08018df8
 8011240:	08018e10 	.word	0x08018e10
 8011244:	08018e3c 	.word	0x08018e3c

08011248 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011248:	b5b0      	push	{r4, r5, r7, lr}
 801124a:	b08a      	sub	sp, #40	; 0x28
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d106      	bne.n	8011264 <tcp_output+0x1c>
 8011256:	4b9e      	ldr	r3, [pc, #632]	; (80114d0 <tcp_output+0x288>)
 8011258:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801125c:	499d      	ldr	r1, [pc, #628]	; (80114d4 <tcp_output+0x28c>)
 801125e:	489e      	ldr	r0, [pc, #632]	; (80114d8 <tcp_output+0x290>)
 8011260:	f003 fd92 	bl	8014d88 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	7d1b      	ldrb	r3, [r3, #20]
 8011268:	2b01      	cmp	r3, #1
 801126a:	d106      	bne.n	801127a <tcp_output+0x32>
 801126c:	4b98      	ldr	r3, [pc, #608]	; (80114d0 <tcp_output+0x288>)
 801126e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011272:	499a      	ldr	r1, [pc, #616]	; (80114dc <tcp_output+0x294>)
 8011274:	4898      	ldr	r0, [pc, #608]	; (80114d8 <tcp_output+0x290>)
 8011276:	f003 fd87 	bl	8014d88 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801127a:	4b99      	ldr	r3, [pc, #612]	; (80114e0 <tcp_output+0x298>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	687a      	ldr	r2, [r7, #4]
 8011280:	429a      	cmp	r2, r3
 8011282:	d101      	bne.n	8011288 <tcp_output+0x40>
    return ERR_OK;
 8011284:	2300      	movs	r3, #0
 8011286:	e1ce      	b.n	8011626 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011294:	4293      	cmp	r3, r2
 8011296:	bf28      	it	cs
 8011298:	4613      	movcs	r3, r2
 801129a:	b29b      	uxth	r3, r3
 801129c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80112a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d10b      	bne.n	80112c2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	8b5b      	ldrh	r3, [r3, #26]
 80112ae:	f003 0302 	and.w	r3, r3, #2
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f000 81aa 	beq.w	801160c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f000 fdcb 	bl	8011e54 <tcp_send_empty_ack>
 80112be:	4603      	mov	r3, r0
 80112c0:	e1b1      	b.n	8011626 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80112c2:	6879      	ldr	r1, [r7, #4]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	3304      	adds	r3, #4
 80112c8:	461a      	mov	r2, r3
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f7ff f824 	bl	8010318 <tcp_route>
 80112d0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d102      	bne.n	80112de <tcp_output+0x96>
    return ERR_RTE;
 80112d8:	f06f 0303 	mvn.w	r3, #3
 80112dc:	e1a3      	b.n	8011626 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d003      	beq.n	80112ec <tcp_output+0xa4>
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d111      	bne.n	8011310 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80112ec:	697b      	ldr	r3, [r7, #20]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d002      	beq.n	80112f8 <tcp_output+0xb0>
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	3304      	adds	r3, #4
 80112f6:	e000      	b.n	80112fa <tcp_output+0xb2>
 80112f8:	2300      	movs	r3, #0
 80112fa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d102      	bne.n	8011308 <tcp_output+0xc0>
      return ERR_RTE;
 8011302:	f06f 0303 	mvn.w	r3, #3
 8011306:	e18e      	b.n	8011626 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	681a      	ldr	r2, [r3, #0]
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011312:	68db      	ldr	r3, [r3, #12]
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	4618      	mov	r0, r3
 8011318:	f7f9 f8ab 	bl	800a472 <lwip_htonl>
 801131c:	4602      	mov	r2, r0
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011322:	1ad3      	subs	r3, r2, r3
 8011324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011326:	8912      	ldrh	r2, [r2, #8]
 8011328:	4413      	add	r3, r2
 801132a:	69ba      	ldr	r2, [r7, #24]
 801132c:	429a      	cmp	r2, r3
 801132e:	d227      	bcs.n	8011380 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011336:	461a      	mov	r2, r3
 8011338:	69bb      	ldr	r3, [r7, #24]
 801133a:	4293      	cmp	r3, r2
 801133c:	d114      	bne.n	8011368 <tcp_output+0x120>
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011342:	2b00      	cmp	r3, #0
 8011344:	d110      	bne.n	8011368 <tcp_output+0x120>
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801134c:	2b00      	cmp	r3, #0
 801134e:	d10b      	bne.n	8011368 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2200      	movs	r2, #0
 8011354:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2201      	movs	r2, #1
 801135c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2200      	movs	r2, #0
 8011364:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	8b5b      	ldrh	r3, [r3, #26]
 801136c:	f003 0302 	and.w	r3, r3, #2
 8011370:	2b00      	cmp	r3, #0
 8011372:	f000 814d 	beq.w	8011610 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 fd6c 	bl	8011e54 <tcp_send_empty_ack>
 801137c:	4603      	mov	r3, r0
 801137e:	e152      	b.n	8011626 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2200      	movs	r2, #0
 8011384:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801138c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801138e:	6a3b      	ldr	r3, [r7, #32]
 8011390:	2b00      	cmp	r3, #0
 8011392:	f000 811c 	beq.w	80115ce <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011396:	e002      	b.n	801139e <tcp_output+0x156>
 8011398:	6a3b      	ldr	r3, [r7, #32]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	623b      	str	r3, [r7, #32]
 801139e:	6a3b      	ldr	r3, [r7, #32]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d1f8      	bne.n	8011398 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80113a6:	e112      	b.n	80115ce <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80113a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	899b      	ldrh	r3, [r3, #12]
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7f9 f849 	bl	800a448 <lwip_htons>
 80113b6:	4603      	mov	r3, r0
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	f003 0304 	and.w	r3, r3, #4
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d006      	beq.n	80113d0 <tcp_output+0x188>
 80113c2:	4b43      	ldr	r3, [pc, #268]	; (80114d0 <tcp_output+0x288>)
 80113c4:	f240 5236 	movw	r2, #1334	; 0x536
 80113c8:	4946      	ldr	r1, [pc, #280]	; (80114e4 <tcp_output+0x29c>)
 80113ca:	4843      	ldr	r0, [pc, #268]	; (80114d8 <tcp_output+0x290>)
 80113cc:	f003 fcdc 	bl	8014d88 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d01f      	beq.n	8011418 <tcp_output+0x1d0>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	8b5b      	ldrh	r3, [r3, #26]
 80113dc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d119      	bne.n	8011418 <tcp_output+0x1d0>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d00b      	beq.n	8011404 <tcp_output+0x1bc>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d110      	bne.n	8011418 <tcp_output+0x1d0>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113fa:	891a      	ldrh	r2, [r3, #8]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011400:	429a      	cmp	r2, r3
 8011402:	d209      	bcs.n	8011418 <tcp_output+0x1d0>
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801140a:	2b00      	cmp	r3, #0
 801140c:	d004      	beq.n	8011418 <tcp_output+0x1d0>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011414:	2b08      	cmp	r3, #8
 8011416:	d901      	bls.n	801141c <tcp_output+0x1d4>
 8011418:	2301      	movs	r3, #1
 801141a:	e000      	b.n	801141e <tcp_output+0x1d6>
 801141c:	2300      	movs	r3, #0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d106      	bne.n	8011430 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	8b5b      	ldrh	r3, [r3, #26]
 8011426:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801142a:	2b00      	cmp	r3, #0
 801142c:	f000 80e4 	beq.w	80115f8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	7d1b      	ldrb	r3, [r3, #20]
 8011434:	2b02      	cmp	r3, #2
 8011436:	d00d      	beq.n	8011454 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143a:	68db      	ldr	r3, [r3, #12]
 801143c:	899b      	ldrh	r3, [r3, #12]
 801143e:	b29c      	uxth	r4, r3
 8011440:	2010      	movs	r0, #16
 8011442:	f7f9 f801 	bl	800a448 <lwip_htons>
 8011446:	4603      	mov	r3, r0
 8011448:	461a      	mov	r2, r3
 801144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144c:	68db      	ldr	r3, [r3, #12]
 801144e:	4322      	orrs	r2, r4
 8011450:	b292      	uxth	r2, r2
 8011452:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011454:	697a      	ldr	r2, [r7, #20]
 8011456:	6879      	ldr	r1, [r7, #4]
 8011458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801145a:	f000 f909 	bl	8011670 <tcp_output_segment>
 801145e:	4603      	mov	r3, r0
 8011460:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d009      	beq.n	801147e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	8b5b      	ldrh	r3, [r3, #26]
 801146e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011472:	b29a      	uxth	r2, r3
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	835a      	strh	r2, [r3, #26]
      return err;
 8011478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801147c:	e0d3      	b.n	8011626 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	7d1b      	ldrb	r3, [r3, #20]
 801148a:	2b02      	cmp	r3, #2
 801148c:	d006      	beq.n	801149c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	8b5b      	ldrh	r3, [r3, #26]
 8011492:	f023 0303 	bic.w	r3, r3, #3
 8011496:	b29a      	uxth	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149e:	68db      	ldr	r3, [r3, #12]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7f8 ffe5 	bl	800a472 <lwip_htonl>
 80114a8:	4604      	mov	r4, r0
 80114aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ac:	891b      	ldrh	r3, [r3, #8]
 80114ae:	461d      	mov	r5, r3
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	68db      	ldr	r3, [r3, #12]
 80114b4:	899b      	ldrh	r3, [r3, #12]
 80114b6:	b29b      	uxth	r3, r3
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7f8 ffc5 	bl	800a448 <lwip_htons>
 80114be:	4603      	mov	r3, r0
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	f003 0303 	and.w	r3, r3, #3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d00e      	beq.n	80114e8 <tcp_output+0x2a0>
 80114ca:	2301      	movs	r3, #1
 80114cc:	e00d      	b.n	80114ea <tcp_output+0x2a2>
 80114ce:	bf00      	nop
 80114d0:	08018920 	.word	0x08018920
 80114d4:	08018e64 	.word	0x08018e64
 80114d8:	08018974 	.word	0x08018974
 80114dc:	08018e7c 	.word	0x08018e7c
 80114e0:	2000d7f0 	.word	0x2000d7f0
 80114e4:	08018ea4 	.word	0x08018ea4
 80114e8:	2300      	movs	r3, #0
 80114ea:	442b      	add	r3, r5
 80114ec:	4423      	add	r3, r4
 80114ee:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	da02      	bge.n	8011502 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	68ba      	ldr	r2, [r7, #8]
 8011500:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011504:	891b      	ldrh	r3, [r3, #8]
 8011506:	461c      	mov	r4, r3
 8011508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150a:	68db      	ldr	r3, [r3, #12]
 801150c:	899b      	ldrh	r3, [r3, #12]
 801150e:	b29b      	uxth	r3, r3
 8011510:	4618      	mov	r0, r3
 8011512:	f7f8 ff99 	bl	800a448 <lwip_htons>
 8011516:	4603      	mov	r3, r0
 8011518:	b2db      	uxtb	r3, r3
 801151a:	f003 0303 	and.w	r3, r3, #3
 801151e:	2b00      	cmp	r3, #0
 8011520:	d001      	beq.n	8011526 <tcp_output+0x2de>
 8011522:	2301      	movs	r3, #1
 8011524:	e000      	b.n	8011528 <tcp_output+0x2e0>
 8011526:	2300      	movs	r3, #0
 8011528:	4423      	add	r3, r4
 801152a:	2b00      	cmp	r3, #0
 801152c:	d049      	beq.n	80115c2 <tcp_output+0x37a>
      seg->next = NULL;
 801152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011530:	2200      	movs	r2, #0
 8011532:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011538:	2b00      	cmp	r3, #0
 801153a:	d105      	bne.n	8011548 <tcp_output+0x300>
        pcb->unacked = seg;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011540:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011544:	623b      	str	r3, [r7, #32]
 8011546:	e03f      	b.n	80115c8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154a:	68db      	ldr	r3, [r3, #12]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	4618      	mov	r0, r3
 8011550:	f7f8 ff8f 	bl	800a472 <lwip_htonl>
 8011554:	4604      	mov	r4, r0
 8011556:	6a3b      	ldr	r3, [r7, #32]
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	4618      	mov	r0, r3
 801155e:	f7f8 ff88 	bl	800a472 <lwip_htonl>
 8011562:	4603      	mov	r3, r0
 8011564:	1ae3      	subs	r3, r4, r3
 8011566:	2b00      	cmp	r3, #0
 8011568:	da24      	bge.n	80115b4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	3370      	adds	r3, #112	; 0x70
 801156e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011570:	e002      	b.n	8011578 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d011      	beq.n	80115a4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	68db      	ldr	r3, [r3, #12]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	4618      	mov	r0, r3
 801158a:	f7f8 ff72 	bl	800a472 <lwip_htonl>
 801158e:	4604      	mov	r4, r0
 8011590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011592:	68db      	ldr	r3, [r3, #12]
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	4618      	mov	r0, r3
 8011598:	f7f8 ff6b 	bl	800a472 <lwip_htonl>
 801159c:	4603      	mov	r3, r0
 801159e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	dbe6      	blt.n	8011572 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	681a      	ldr	r2, [r3, #0]
 80115a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115aa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115b0:	601a      	str	r2, [r3, #0]
 80115b2:	e009      	b.n	80115c8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80115b4:	6a3b      	ldr	r3, [r7, #32]
 80115b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115b8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80115ba:	6a3b      	ldr	r3, [r7, #32]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	623b      	str	r3, [r7, #32]
 80115c0:	e002      	b.n	80115c8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80115c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115c4:	f7fb feff 	bl	800d3c6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115cc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80115ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d012      	beq.n	80115fa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80115d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	4618      	mov	r0, r3
 80115dc:	f7f8 ff49 	bl	800a472 <lwip_htonl>
 80115e0:	4602      	mov	r2, r0
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115ea:	8912      	ldrh	r2, [r2, #8]
 80115ec:	4413      	add	r3, r2
  while (seg != NULL &&
 80115ee:	69ba      	ldr	r2, [r7, #24]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	f4bf aed9 	bcs.w	80113a8 <tcp_output+0x160>
 80115f6:	e000      	b.n	80115fa <tcp_output+0x3b2>
      break;
 80115f8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d108      	bne.n	8011614 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	2200      	movs	r2, #0
 8011606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801160a:	e004      	b.n	8011616 <tcp_output+0x3ce>
    goto output_done;
 801160c:	bf00      	nop
 801160e:	e002      	b.n	8011616 <tcp_output+0x3ce>
    goto output_done;
 8011610:	bf00      	nop
 8011612:	e000      	b.n	8011616 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011614:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	8b5b      	ldrh	r3, [r3, #26]
 801161a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801161e:	b29a      	uxth	r2, r3
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011624:	2300      	movs	r3, #0
}
 8011626:	4618      	mov	r0, r3
 8011628:	3728      	adds	r7, #40	; 0x28
 801162a:	46bd      	mov	sp, r7
 801162c:	bdb0      	pop	{r4, r5, r7, pc}
 801162e:	bf00      	nop

08011630 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b082      	sub	sp, #8
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d106      	bne.n	801164c <tcp_output_segment_busy+0x1c>
 801163e:	4b09      	ldr	r3, [pc, #36]	; (8011664 <tcp_output_segment_busy+0x34>)
 8011640:	f240 529a 	movw	r2, #1434	; 0x59a
 8011644:	4908      	ldr	r1, [pc, #32]	; (8011668 <tcp_output_segment_busy+0x38>)
 8011646:	4809      	ldr	r0, [pc, #36]	; (801166c <tcp_output_segment_busy+0x3c>)
 8011648:	f003 fb9e 	bl	8014d88 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	7b9b      	ldrb	r3, [r3, #14]
 8011652:	2b01      	cmp	r3, #1
 8011654:	d001      	beq.n	801165a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011656:	2301      	movs	r3, #1
 8011658:	e000      	b.n	801165c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801165a:	2300      	movs	r3, #0
}
 801165c:	4618      	mov	r0, r3
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	08018920 	.word	0x08018920
 8011668:	08018ebc 	.word	0x08018ebc
 801166c:	08018974 	.word	0x08018974

08011670 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011670:	b5b0      	push	{r4, r5, r7, lr}
 8011672:	b08c      	sub	sp, #48	; 0x30
 8011674:	af04      	add	r7, sp, #16
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	60b9      	str	r1, [r7, #8]
 801167a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d106      	bne.n	8011690 <tcp_output_segment+0x20>
 8011682:	4b63      	ldr	r3, [pc, #396]	; (8011810 <tcp_output_segment+0x1a0>)
 8011684:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011688:	4962      	ldr	r1, [pc, #392]	; (8011814 <tcp_output_segment+0x1a4>)
 801168a:	4863      	ldr	r0, [pc, #396]	; (8011818 <tcp_output_segment+0x1a8>)
 801168c:	f003 fb7c 	bl	8014d88 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d106      	bne.n	80116a4 <tcp_output_segment+0x34>
 8011696:	4b5e      	ldr	r3, [pc, #376]	; (8011810 <tcp_output_segment+0x1a0>)
 8011698:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801169c:	495f      	ldr	r1, [pc, #380]	; (801181c <tcp_output_segment+0x1ac>)
 801169e:	485e      	ldr	r0, [pc, #376]	; (8011818 <tcp_output_segment+0x1a8>)
 80116a0:	f003 fb72 	bl	8014d88 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d106      	bne.n	80116b8 <tcp_output_segment+0x48>
 80116aa:	4b59      	ldr	r3, [pc, #356]	; (8011810 <tcp_output_segment+0x1a0>)
 80116ac:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80116b0:	495b      	ldr	r1, [pc, #364]	; (8011820 <tcp_output_segment+0x1b0>)
 80116b2:	4859      	ldr	r0, [pc, #356]	; (8011818 <tcp_output_segment+0x1a8>)
 80116b4:	f003 fb68 	bl	8014d88 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80116b8:	68f8      	ldr	r0, [r7, #12]
 80116ba:	f7ff ffb9 	bl	8011630 <tcp_output_segment_busy>
 80116be:	4603      	mov	r3, r0
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d001      	beq.n	80116c8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80116c4:	2300      	movs	r3, #0
 80116c6:	e09f      	b.n	8011808 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	68dc      	ldr	r4, [r3, #12]
 80116d0:	4610      	mov	r0, r2
 80116d2:	f7f8 fece 	bl	800a472 <lwip_htonl>
 80116d6:	4603      	mov	r3, r0
 80116d8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	68dc      	ldr	r4, [r3, #12]
 80116e2:	4610      	mov	r0, r2
 80116e4:	f7f8 feb0 	bl	800a448 <lwip_htons>
 80116e8:	4603      	mov	r3, r0
 80116ea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116f0:	68ba      	ldr	r2, [r7, #8]
 80116f2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80116f4:	441a      	add	r2, r3
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	3314      	adds	r3, #20
 8011700:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	7a9b      	ldrb	r3, [r3, #10]
 8011706:	f003 0301 	and.w	r3, r3, #1
 801170a:	2b00      	cmp	r3, #0
 801170c:	d015      	beq.n	801173a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801170e:	68bb      	ldr	r3, [r7, #8]
 8011710:	3304      	adds	r3, #4
 8011712:	461a      	mov	r2, r3
 8011714:	6879      	ldr	r1, [r7, #4]
 8011716:	f44f 7006 	mov.w	r0, #536	; 0x218
 801171a:	f7fc fa37 	bl	800db8c <tcp_eff_send_mss_netif>
 801171e:	4603      	mov	r3, r0
 8011720:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011722:	8b7b      	ldrh	r3, [r7, #26]
 8011724:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011728:	4618      	mov	r0, r3
 801172a:	f7f8 fea2 	bl	800a472 <lwip_htonl>
 801172e:	4602      	mov	r2, r0
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011734:	69fb      	ldr	r3, [r7, #28]
 8011736:	3304      	adds	r3, #4
 8011738:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011740:	2b00      	cmp	r3, #0
 8011742:	da02      	bge.n	801174a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011744:	68bb      	ldr	r3, [r7, #8]
 8011746:	2200      	movs	r2, #0
 8011748:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10c      	bne.n	801176c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011752:	4b34      	ldr	r3, [pc, #208]	; (8011824 <tcp_output_segment+0x1b4>)
 8011754:	681a      	ldr	r2, [r3, #0]
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	4618      	mov	r0, r3
 8011762:	f7f8 fe86 	bl	800a472 <lwip_htonl>
 8011766:	4602      	mov	r2, r0
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	68da      	ldr	r2, [r3, #12]
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	1ad3      	subs	r3, r2, r3
 8011778:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	8959      	ldrh	r1, [r3, #10]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	8b3a      	ldrh	r2, [r7, #24]
 8011786:	1a8a      	subs	r2, r1, r2
 8011788:	b292      	uxth	r2, r2
 801178a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	685b      	ldr	r3, [r3, #4]
 8011790:	8919      	ldrh	r1, [r3, #8]
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	685b      	ldr	r3, [r3, #4]
 8011796:	8b3a      	ldrh	r2, [r7, #24]
 8011798:	1a8a      	subs	r2, r1, r2
 801179a:	b292      	uxth	r2, r2
 801179c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	68d2      	ldr	r2, [r2, #12]
 80117a6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	68db      	ldr	r3, [r3, #12]
 80117ac:	2200      	movs	r2, #0
 80117ae:	741a      	strb	r2, [r3, #16]
 80117b0:	2200      	movs	r2, #0
 80117b2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	f103 0214 	add.w	r2, r3, #20
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	7a9b      	ldrb	r3, [r3, #10]
 80117c0:	009b      	lsls	r3, r3, #2
 80117c2:	f003 0304 	and.w	r3, r3, #4
 80117c6:	4413      	add	r3, r2
 80117c8:	69fa      	ldr	r2, [r7, #28]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d006      	beq.n	80117dc <tcp_output_segment+0x16c>
 80117ce:	4b10      	ldr	r3, [pc, #64]	; (8011810 <tcp_output_segment+0x1a0>)
 80117d0:	f240 621c 	movw	r2, #1564	; 0x61c
 80117d4:	4914      	ldr	r1, [pc, #80]	; (8011828 <tcp_output_segment+0x1b8>)
 80117d6:	4810      	ldr	r0, [pc, #64]	; (8011818 <tcp_output_segment+0x1a8>)
 80117d8:	f003 fad6 	bl	8014d88 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	6858      	ldr	r0, [r3, #4]
 80117e0:	68b9      	ldr	r1, [r7, #8]
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	1d1c      	adds	r4, r3, #4
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	7add      	ldrb	r5, [r3, #11]
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	7a9b      	ldrb	r3, [r3, #10]
 80117ee:	687a      	ldr	r2, [r7, #4]
 80117f0:	9202      	str	r2, [sp, #8]
 80117f2:	2206      	movs	r2, #6
 80117f4:	9201      	str	r2, [sp, #4]
 80117f6:	9300      	str	r3, [sp, #0]
 80117f8:	462b      	mov	r3, r5
 80117fa:	4622      	mov	r2, r4
 80117fc:	f002 fa36 	bl	8013c6c <ip4_output_if>
 8011800:	4603      	mov	r3, r0
 8011802:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011804:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011808:	4618      	mov	r0, r3
 801180a:	3720      	adds	r7, #32
 801180c:	46bd      	mov	sp, r7
 801180e:	bdb0      	pop	{r4, r5, r7, pc}
 8011810:	08018920 	.word	0x08018920
 8011814:	08018ee4 	.word	0x08018ee4
 8011818:	08018974 	.word	0x08018974
 801181c:	08018f04 	.word	0x08018f04
 8011820:	08018f24 	.word	0x08018f24
 8011824:	2000d7e0 	.word	0x2000d7e0
 8011828:	08018f48 	.word	0x08018f48

0801182c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801182c:	b5b0      	push	{r4, r5, r7, lr}
 801182e:	b084      	sub	sp, #16
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d106      	bne.n	8011848 <tcp_rexmit_rto_prepare+0x1c>
 801183a:	4b31      	ldr	r3, [pc, #196]	; (8011900 <tcp_rexmit_rto_prepare+0xd4>)
 801183c:	f240 6263 	movw	r2, #1635	; 0x663
 8011840:	4930      	ldr	r1, [pc, #192]	; (8011904 <tcp_rexmit_rto_prepare+0xd8>)
 8011842:	4831      	ldr	r0, [pc, #196]	; (8011908 <tcp_rexmit_rto_prepare+0xdc>)
 8011844:	f003 faa0 	bl	8014d88 <iprintf>

  if (pcb->unacked == NULL) {
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801184c:	2b00      	cmp	r3, #0
 801184e:	d102      	bne.n	8011856 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011850:	f06f 0305 	mvn.w	r3, #5
 8011854:	e050      	b.n	80118f8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801185a:	60fb      	str	r3, [r7, #12]
 801185c:	e00b      	b.n	8011876 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801185e:	68f8      	ldr	r0, [r7, #12]
 8011860:	f7ff fee6 	bl	8011630 <tcp_output_segment_busy>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d002      	beq.n	8011870 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801186a:	f06f 0305 	mvn.w	r3, #5
 801186e:	e043      	b.n	80118f8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	60fb      	str	r3, [r7, #12]
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d1ef      	bne.n	801185e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801187e:	68f8      	ldr	r0, [r7, #12]
 8011880:	f7ff fed6 	bl	8011630 <tcp_output_segment_busy>
 8011884:	4603      	mov	r3, r0
 8011886:	2b00      	cmp	r3, #0
 8011888:	d002      	beq.n	8011890 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801188a:	f06f 0305 	mvn.w	r3, #5
 801188e:	e033      	b.n	80118f8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	2200      	movs	r2, #0
 80118a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	8b5b      	ldrh	r3, [r3, #26]
 80118aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80118ae:	b29a      	uxth	r2, r3
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7f8 fdd9 	bl	800a472 <lwip_htonl>
 80118c0:	4604      	mov	r4, r0
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	891b      	ldrh	r3, [r3, #8]
 80118c6:	461d      	mov	r5, r3
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	68db      	ldr	r3, [r3, #12]
 80118cc:	899b      	ldrh	r3, [r3, #12]
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	4618      	mov	r0, r3
 80118d2:	f7f8 fdb9 	bl	800a448 <lwip_htons>
 80118d6:	4603      	mov	r3, r0
 80118d8:	b2db      	uxtb	r3, r3
 80118da:	f003 0303 	and.w	r3, r3, #3
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d001      	beq.n	80118e6 <tcp_rexmit_rto_prepare+0xba>
 80118e2:	2301      	movs	r3, #1
 80118e4:	e000      	b.n	80118e8 <tcp_rexmit_rto_prepare+0xbc>
 80118e6:	2300      	movs	r3, #0
 80118e8:	442b      	add	r3, r5
 80118ea:	18e2      	adds	r2, r4, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2200      	movs	r2, #0
 80118f4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80118f6:	2300      	movs	r3, #0
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3710      	adds	r7, #16
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bdb0      	pop	{r4, r5, r7, pc}
 8011900:	08018920 	.word	0x08018920
 8011904:	08018f5c 	.word	0x08018f5c
 8011908:	08018974 	.word	0x08018974

0801190c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d106      	bne.n	8011928 <tcp_rexmit_rto_commit+0x1c>
 801191a:	4b0d      	ldr	r3, [pc, #52]	; (8011950 <tcp_rexmit_rto_commit+0x44>)
 801191c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011920:	490c      	ldr	r1, [pc, #48]	; (8011954 <tcp_rexmit_rto_commit+0x48>)
 8011922:	480d      	ldr	r0, [pc, #52]	; (8011958 <tcp_rexmit_rto_commit+0x4c>)
 8011924:	f003 fa30 	bl	8014d88 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801192e:	2bff      	cmp	r3, #255	; 0xff
 8011930:	d007      	beq.n	8011942 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011938:	3301      	adds	r3, #1
 801193a:	b2da      	uxtb	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f7ff fc80 	bl	8011248 <tcp_output>
}
 8011948:	bf00      	nop
 801194a:	3708      	adds	r7, #8
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}
 8011950:	08018920 	.word	0x08018920
 8011954:	08018f80 	.word	0x08018f80
 8011958:	08018974 	.word	0x08018974

0801195c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d106      	bne.n	8011978 <tcp_rexmit_rto+0x1c>
 801196a:	4b0a      	ldr	r3, [pc, #40]	; (8011994 <tcp_rexmit_rto+0x38>)
 801196c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011970:	4909      	ldr	r1, [pc, #36]	; (8011998 <tcp_rexmit_rto+0x3c>)
 8011972:	480a      	ldr	r0, [pc, #40]	; (801199c <tcp_rexmit_rto+0x40>)
 8011974:	f003 fa08 	bl	8014d88 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f7ff ff57 	bl	801182c <tcp_rexmit_rto_prepare>
 801197e:	4603      	mov	r3, r0
 8011980:	2b00      	cmp	r3, #0
 8011982:	d102      	bne.n	801198a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f7ff ffc1 	bl	801190c <tcp_rexmit_rto_commit>
  }
}
 801198a:	bf00      	nop
 801198c:	3708      	adds	r7, #8
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}
 8011992:	bf00      	nop
 8011994:	08018920 	.word	0x08018920
 8011998:	08018fa4 	.word	0x08018fa4
 801199c:	08018974 	.word	0x08018974

080119a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80119a0:	b590      	push	{r4, r7, lr}
 80119a2:	b085      	sub	sp, #20
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d106      	bne.n	80119bc <tcp_rexmit+0x1c>
 80119ae:	4b2f      	ldr	r3, [pc, #188]	; (8011a6c <tcp_rexmit+0xcc>)
 80119b0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80119b4:	492e      	ldr	r1, [pc, #184]	; (8011a70 <tcp_rexmit+0xd0>)
 80119b6:	482f      	ldr	r0, [pc, #188]	; (8011a74 <tcp_rexmit+0xd4>)
 80119b8:	f003 f9e6 	bl	8014d88 <iprintf>

  if (pcb->unacked == NULL) {
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d102      	bne.n	80119ca <tcp_rexmit+0x2a>
    return ERR_VAL;
 80119c4:	f06f 0305 	mvn.w	r3, #5
 80119c8:	e04c      	b.n	8011a64 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80119d0:	68b8      	ldr	r0, [r7, #8]
 80119d2:	f7ff fe2d 	bl	8011630 <tcp_output_segment_busy>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d002      	beq.n	80119e2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80119dc:	f06f 0305 	mvn.w	r3, #5
 80119e0:	e040      	b.n	8011a64 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80119e2:	68bb      	ldr	r3, [r7, #8]
 80119e4:	681a      	ldr	r2, [r3, #0]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	336c      	adds	r3, #108	; 0x6c
 80119ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119f0:	e002      	b.n	80119f8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d011      	beq.n	8011a24 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	68db      	ldr	r3, [r3, #12]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7f8 fd32 	bl	800a472 <lwip_htonl>
 8011a0e:	4604      	mov	r4, r0
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	68db      	ldr	r3, [r3, #12]
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7f8 fd2b 	bl	800a472 <lwip_htonl>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	dbe6      	blt.n	80119f2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	681a      	ldr	r2, [r3, #0]
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	68ba      	ldr	r2, [r7, #8]
 8011a30:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d103      	bne.n	8011a42 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a48:	2bff      	cmp	r3, #255	; 0xff
 8011a4a:	d007      	beq.n	8011a5c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a52:	3301      	adds	r3, #1
 8011a54:	b2da      	uxtb	r2, r3
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011a62:	2300      	movs	r3, #0
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3714      	adds	r7, #20
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd90      	pop	{r4, r7, pc}
 8011a6c:	08018920 	.word	0x08018920
 8011a70:	08018fc0 	.word	0x08018fc0
 8011a74:	08018974 	.word	0x08018974

08011a78 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b082      	sub	sp, #8
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d106      	bne.n	8011a94 <tcp_rexmit_fast+0x1c>
 8011a86:	4b2a      	ldr	r3, [pc, #168]	; (8011b30 <tcp_rexmit_fast+0xb8>)
 8011a88:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011a8c:	4929      	ldr	r1, [pc, #164]	; (8011b34 <tcp_rexmit_fast+0xbc>)
 8011a8e:	482a      	ldr	r0, [pc, #168]	; (8011b38 <tcp_rexmit_fast+0xc0>)
 8011a90:	f003 f97a 	bl	8014d88 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d044      	beq.n	8011b26 <tcp_rexmit_fast+0xae>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	8b5b      	ldrh	r3, [r3, #26]
 8011aa0:	f003 0304 	and.w	r3, r3, #4
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d13e      	bne.n	8011b26 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f7ff ff79 	bl	80119a0 <tcp_rexmit>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d138      	bne.n	8011b26 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	bf28      	it	cs
 8011ac4:	4613      	movcs	r3, r2
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	0fda      	lsrs	r2, r3, #31
 8011aca:	4413      	add	r3, r2
 8011acc:	105b      	asrs	r3, r3, #1
 8011ace:	b29a      	uxth	r2, r3
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011adc:	461a      	mov	r2, r3
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ae2:	005b      	lsls	r3, r3, #1
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d206      	bcs.n	8011af6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011aec:	005b      	lsls	r3, r3, #1
 8011aee:	b29a      	uxth	r2, r3
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b00:	4619      	mov	r1, r3
 8011b02:	0049      	lsls	r1, r1, #1
 8011b04:	440b      	add	r3, r1
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	4413      	add	r3, r2
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	8b5b      	ldrh	r3, [r3, #26]
 8011b16:	f043 0304 	orr.w	r3, r3, #4
 8011b1a:	b29a      	uxth	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2200      	movs	r2, #0
 8011b24:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011b26:	bf00      	nop
 8011b28:	3708      	adds	r7, #8
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}
 8011b2e:	bf00      	nop
 8011b30:	08018920 	.word	0x08018920
 8011b34:	08018fd8 	.word	0x08018fd8
 8011b38:	08018974 	.word	0x08018974

08011b3c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b086      	sub	sp, #24
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	60f8      	str	r0, [r7, #12]
 8011b44:	607b      	str	r3, [r7, #4]
 8011b46:	460b      	mov	r3, r1
 8011b48:	817b      	strh	r3, [r7, #10]
 8011b4a:	4613      	mov	r3, r2
 8011b4c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011b4e:	897a      	ldrh	r2, [r7, #10]
 8011b50:	893b      	ldrh	r3, [r7, #8]
 8011b52:	4413      	add	r3, r2
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	3314      	adds	r3, #20
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b5e:	4619      	mov	r1, r3
 8011b60:	2022      	movs	r0, #34	; 0x22
 8011b62:	f7f9 fd1f 	bl	800b5a4 <pbuf_alloc>
 8011b66:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d04d      	beq.n	8011c0a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011b6e:	897b      	ldrh	r3, [r7, #10]
 8011b70:	3313      	adds	r3, #19
 8011b72:	697a      	ldr	r2, [r7, #20]
 8011b74:	8952      	ldrh	r2, [r2, #10]
 8011b76:	4293      	cmp	r3, r2
 8011b78:	db06      	blt.n	8011b88 <tcp_output_alloc_header_common+0x4c>
 8011b7a:	4b26      	ldr	r3, [pc, #152]	; (8011c14 <tcp_output_alloc_header_common+0xd8>)
 8011b7c:	f240 7223 	movw	r2, #1827	; 0x723
 8011b80:	4925      	ldr	r1, [pc, #148]	; (8011c18 <tcp_output_alloc_header_common+0xdc>)
 8011b82:	4826      	ldr	r0, [pc, #152]	; (8011c1c <tcp_output_alloc_header_common+0xe0>)
 8011b84:	f003 f900 	bl	8014d88 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011b88:	697b      	ldr	r3, [r7, #20]
 8011b8a:	685b      	ldr	r3, [r3, #4]
 8011b8c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011b8e:	8c3b      	ldrh	r3, [r7, #32]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7f8 fc59 	bl	800a448 <lwip_htons>
 8011b96:	4603      	mov	r3, r0
 8011b98:	461a      	mov	r2, r3
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011b9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7f8 fc51 	bl	800a448 <lwip_htons>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	461a      	mov	r2, r3
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011bb4:	68f8      	ldr	r0, [r7, #12]
 8011bb6:	f7f8 fc5c 	bl	800a472 <lwip_htonl>
 8011bba:	4602      	mov	r2, r0
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011bc0:	897b      	ldrh	r3, [r7, #10]
 8011bc2:	089b      	lsrs	r3, r3, #2
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	3305      	adds	r3, #5
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	031b      	lsls	r3, r3, #12
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	4313      	orrs	r3, r2
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7f8 fc35 	bl	800a448 <lwip_htons>
 8011bde:	4603      	mov	r3, r0
 8011be0:	461a      	mov	r2, r3
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011be6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7f8 fc2d 	bl	800a448 <lwip_htons>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	741a      	strb	r2, [r3, #16]
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	2200      	movs	r2, #0
 8011c04:	749a      	strb	r2, [r3, #18]
 8011c06:	2200      	movs	r2, #0
 8011c08:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011c0a:	697b      	ldr	r3, [r7, #20]
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3718      	adds	r7, #24
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	08018920 	.word	0x08018920
 8011c18:	08018ff8 	.word	0x08018ff8
 8011c1c:	08018974 	.word	0x08018974

08011c20 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011c20:	b5b0      	push	{r4, r5, r7, lr}
 8011c22:	b08a      	sub	sp, #40	; 0x28
 8011c24:	af04      	add	r7, sp, #16
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	607b      	str	r3, [r7, #4]
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	817b      	strh	r3, [r7, #10]
 8011c2e:	4613      	mov	r3, r2
 8011c30:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d106      	bne.n	8011c46 <tcp_output_alloc_header+0x26>
 8011c38:	4b15      	ldr	r3, [pc, #84]	; (8011c90 <tcp_output_alloc_header+0x70>)
 8011c3a:	f240 7242 	movw	r2, #1858	; 0x742
 8011c3e:	4915      	ldr	r1, [pc, #84]	; (8011c94 <tcp_output_alloc_header+0x74>)
 8011c40:	4815      	ldr	r0, [pc, #84]	; (8011c98 <tcp_output_alloc_header+0x78>)
 8011c42:	f003 f8a1 	bl	8014d88 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	8adb      	ldrh	r3, [r3, #22]
 8011c4e:	68fa      	ldr	r2, [r7, #12]
 8011c50:	8b12      	ldrh	r2, [r2, #24]
 8011c52:	68f9      	ldr	r1, [r7, #12]
 8011c54:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011c56:	893d      	ldrh	r5, [r7, #8]
 8011c58:	897c      	ldrh	r4, [r7, #10]
 8011c5a:	9103      	str	r1, [sp, #12]
 8011c5c:	2110      	movs	r1, #16
 8011c5e:	9102      	str	r1, [sp, #8]
 8011c60:	9201      	str	r2, [sp, #4]
 8011c62:	9300      	str	r3, [sp, #0]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	462a      	mov	r2, r5
 8011c68:	4621      	mov	r1, r4
 8011c6a:	f7ff ff67 	bl	8011b3c <tcp_output_alloc_header_common>
 8011c6e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d006      	beq.n	8011c84 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c7a:	68fa      	ldr	r2, [r7, #12]
 8011c7c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011c7e:	441a      	add	r2, r3
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011c84:	697b      	ldr	r3, [r7, #20]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3718      	adds	r7, #24
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	08018920 	.word	0x08018920
 8011c94:	08019028 	.word	0x08019028
 8011c98:	08018974 	.word	0x08018974

08011c9c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b088      	sub	sp, #32
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	60f8      	str	r0, [r7, #12]
 8011ca4:	60b9      	str	r1, [r7, #8]
 8011ca6:	4611      	mov	r1, r2
 8011ca8:	461a      	mov	r2, r3
 8011caa:	460b      	mov	r3, r1
 8011cac:	71fb      	strb	r3, [r7, #7]
 8011cae:	4613      	mov	r3, r2
 8011cb0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d106      	bne.n	8011cca <tcp_output_fill_options+0x2e>
 8011cbc:	4b13      	ldr	r3, [pc, #76]	; (8011d0c <tcp_output_fill_options+0x70>)
 8011cbe:	f240 7256 	movw	r2, #1878	; 0x756
 8011cc2:	4913      	ldr	r1, [pc, #76]	; (8011d10 <tcp_output_fill_options+0x74>)
 8011cc4:	4813      	ldr	r0, [pc, #76]	; (8011d14 <tcp_output_fill_options+0x78>)
 8011cc6:	f003 f85f 	bl	8014d88 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011cd0:	69bb      	ldr	r3, [r7, #24]
 8011cd2:	3314      	adds	r3, #20
 8011cd4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	f103 0214 	add.w	r2, r3, #20
 8011cdc:	8bfb      	ldrh	r3, [r7, #30]
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	79fb      	ldrb	r3, [r7, #7]
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	f003 0304 	and.w	r3, r3, #4
 8011cea:	440b      	add	r3, r1
 8011cec:	4413      	add	r3, r2
 8011cee:	697a      	ldr	r2, [r7, #20]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d006      	beq.n	8011d02 <tcp_output_fill_options+0x66>
 8011cf4:	4b05      	ldr	r3, [pc, #20]	; (8011d0c <tcp_output_fill_options+0x70>)
 8011cf6:	f240 7275 	movw	r2, #1909	; 0x775
 8011cfa:	4907      	ldr	r1, [pc, #28]	; (8011d18 <tcp_output_fill_options+0x7c>)
 8011cfc:	4805      	ldr	r0, [pc, #20]	; (8011d14 <tcp_output_fill_options+0x78>)
 8011cfe:	f003 f843 	bl	8014d88 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011d02:	bf00      	nop
 8011d04:	3720      	adds	r7, #32
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	08018920 	.word	0x08018920
 8011d10:	08019050 	.word	0x08019050
 8011d14:	08018974 	.word	0x08018974
 8011d18:	08018f48 	.word	0x08018f48

08011d1c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b08a      	sub	sp, #40	; 0x28
 8011d20:	af04      	add	r7, sp, #16
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	60b9      	str	r1, [r7, #8]
 8011d26:	607a      	str	r2, [r7, #4]
 8011d28:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d106      	bne.n	8011d3e <tcp_output_control_segment+0x22>
 8011d30:	4b1c      	ldr	r3, [pc, #112]	; (8011da4 <tcp_output_control_segment+0x88>)
 8011d32:	f240 7287 	movw	r2, #1927	; 0x787
 8011d36:	491c      	ldr	r1, [pc, #112]	; (8011da8 <tcp_output_control_segment+0x8c>)
 8011d38:	481c      	ldr	r0, [pc, #112]	; (8011dac <tcp_output_control_segment+0x90>)
 8011d3a:	f003 f825 	bl	8014d88 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011d3e:	683a      	ldr	r2, [r7, #0]
 8011d40:	6879      	ldr	r1, [r7, #4]
 8011d42:	68f8      	ldr	r0, [r7, #12]
 8011d44:	f7fe fae8 	bl	8010318 <tcp_route>
 8011d48:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d102      	bne.n	8011d56 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011d50:	23fc      	movs	r3, #252	; 0xfc
 8011d52:	75fb      	strb	r3, [r7, #23]
 8011d54:	e01c      	b.n	8011d90 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d006      	beq.n	8011d6a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	7adb      	ldrb	r3, [r3, #11]
 8011d60:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	7a9b      	ldrb	r3, [r3, #10]
 8011d66:	757b      	strb	r3, [r7, #21]
 8011d68:	e003      	b.n	8011d72 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011d6a:	23ff      	movs	r3, #255	; 0xff
 8011d6c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011d72:	7dba      	ldrb	r2, [r7, #22]
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	9302      	str	r3, [sp, #8]
 8011d78:	2306      	movs	r3, #6
 8011d7a:	9301      	str	r3, [sp, #4]
 8011d7c:	7d7b      	ldrb	r3, [r7, #21]
 8011d7e:	9300      	str	r3, [sp, #0]
 8011d80:	4613      	mov	r3, r2
 8011d82:	683a      	ldr	r2, [r7, #0]
 8011d84:	6879      	ldr	r1, [r7, #4]
 8011d86:	68b8      	ldr	r0, [r7, #8]
 8011d88:	f001 ff70 	bl	8013c6c <ip4_output_if>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011d90:	68b8      	ldr	r0, [r7, #8]
 8011d92:	f7f9 feeb 	bl	800bb6c <pbuf_free>
  return err;
 8011d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3718      	adds	r7, #24
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	08018920 	.word	0x08018920
 8011da8:	08019078 	.word	0x08019078
 8011dac:	08018974 	.word	0x08018974

08011db0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011db0:	b590      	push	{r4, r7, lr}
 8011db2:	b08b      	sub	sp, #44	; 0x2c
 8011db4:	af04      	add	r7, sp, #16
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
 8011dbc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d106      	bne.n	8011dd2 <tcp_rst+0x22>
 8011dc4:	4b1f      	ldr	r3, [pc, #124]	; (8011e44 <tcp_rst+0x94>)
 8011dc6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011dca:	491f      	ldr	r1, [pc, #124]	; (8011e48 <tcp_rst+0x98>)
 8011dcc:	481f      	ldr	r0, [pc, #124]	; (8011e4c <tcp_rst+0x9c>)
 8011dce:	f002 ffdb 	bl	8014d88 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d106      	bne.n	8011de6 <tcp_rst+0x36>
 8011dd8:	4b1a      	ldr	r3, [pc, #104]	; (8011e44 <tcp_rst+0x94>)
 8011dda:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011dde:	491c      	ldr	r1, [pc, #112]	; (8011e50 <tcp_rst+0xa0>)
 8011de0:	481a      	ldr	r0, [pc, #104]	; (8011e4c <tcp_rst+0x9c>)
 8011de2:	f002 ffd1 	bl	8014d88 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011de6:	2300      	movs	r3, #0
 8011de8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011dea:	f246 0308 	movw	r3, #24584	; 0x6008
 8011dee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011df0:	7dfb      	ldrb	r3, [r7, #23]
 8011df2:	b29c      	uxth	r4, r3
 8011df4:	68b8      	ldr	r0, [r7, #8]
 8011df6:	f7f8 fb3c 	bl	800a472 <lwip_htonl>
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	8abb      	ldrh	r3, [r7, #20]
 8011dfe:	9303      	str	r3, [sp, #12]
 8011e00:	2314      	movs	r3, #20
 8011e02:	9302      	str	r3, [sp, #8]
 8011e04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011e06:	9301      	str	r3, [sp, #4]
 8011e08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011e0a:	9300      	str	r3, [sp, #0]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	2200      	movs	r2, #0
 8011e10:	4621      	mov	r1, r4
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f7ff fe92 	bl	8011b3c <tcp_output_alloc_header_common>
 8011e18:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00c      	beq.n	8011e3a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e20:	7dfb      	ldrb	r3, [r7, #23]
 8011e22:	2200      	movs	r2, #0
 8011e24:	6939      	ldr	r1, [r7, #16]
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f7ff ff38 	bl	8011c9c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e2e:	683a      	ldr	r2, [r7, #0]
 8011e30:	6939      	ldr	r1, [r7, #16]
 8011e32:	68f8      	ldr	r0, [r7, #12]
 8011e34:	f7ff ff72 	bl	8011d1c <tcp_output_control_segment>
 8011e38:	e000      	b.n	8011e3c <tcp_rst+0x8c>
    return;
 8011e3a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011e3c:	371c      	adds	r7, #28
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd90      	pop	{r4, r7, pc}
 8011e42:	bf00      	nop
 8011e44:	08018920 	.word	0x08018920
 8011e48:	080190a4 	.word	0x080190a4
 8011e4c:	08018974 	.word	0x08018974
 8011e50:	080190c0 	.word	0x080190c0

08011e54 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011e54:	b590      	push	{r4, r7, lr}
 8011e56:	b087      	sub	sp, #28
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011e60:	2300      	movs	r3, #0
 8011e62:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d106      	bne.n	8011e78 <tcp_send_empty_ack+0x24>
 8011e6a:	4b28      	ldr	r3, [pc, #160]	; (8011f0c <tcp_send_empty_ack+0xb8>)
 8011e6c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011e70:	4927      	ldr	r1, [pc, #156]	; (8011f10 <tcp_send_empty_ack+0xbc>)
 8011e72:	4828      	ldr	r0, [pc, #160]	; (8011f14 <tcp_send_empty_ack+0xc0>)
 8011e74:	f002 ff88 	bl	8014d88 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e78:	7dfb      	ldrb	r3, [r7, #23]
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	f003 0304 	and.w	r3, r3, #4
 8011e82:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011e84:	7d7b      	ldrb	r3, [r7, #21]
 8011e86:	b29c      	uxth	r4, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7f8 faf0 	bl	800a472 <lwip_htonl>
 8011e92:	4603      	mov	r3, r0
 8011e94:	2200      	movs	r2, #0
 8011e96:	4621      	mov	r1, r4
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7ff fec1 	bl	8011c20 <tcp_output_alloc_header>
 8011e9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d109      	bne.n	8011eba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	8b5b      	ldrh	r3, [r3, #26]
 8011eaa:	f043 0303 	orr.w	r3, r3, #3
 8011eae:	b29a      	uxth	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011eb4:	f06f 0301 	mvn.w	r3, #1
 8011eb8:	e023      	b.n	8011f02 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011eba:	7dbb      	ldrb	r3, [r7, #22]
 8011ebc:	7dfa      	ldrb	r2, [r7, #23]
 8011ebe:	6939      	ldr	r1, [r7, #16]
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7ff feeb 	bl	8011c9c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	3304      	adds	r3, #4
 8011ecc:	6939      	ldr	r1, [r7, #16]
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7ff ff24 	bl	8011d1c <tcp_output_control_segment>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d007      	beq.n	8011ef0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	8b5b      	ldrh	r3, [r3, #26]
 8011ee4:	f043 0303 	orr.w	r3, r3, #3
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	835a      	strh	r2, [r3, #26]
 8011eee:	e006      	b.n	8011efe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	8b5b      	ldrh	r3, [r3, #26]
 8011ef4:	f023 0303 	bic.w	r3, r3, #3
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	371c      	adds	r7, #28
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd90      	pop	{r4, r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	08018920 	.word	0x08018920
 8011f10:	080190dc 	.word	0x080190dc
 8011f14:	08018974 	.word	0x08018974

08011f18 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011f18:	b590      	push	{r4, r7, lr}
 8011f1a:	b087      	sub	sp, #28
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f20:	2300      	movs	r3, #0
 8011f22:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d106      	bne.n	8011f38 <tcp_keepalive+0x20>
 8011f2a:	4b18      	ldr	r3, [pc, #96]	; (8011f8c <tcp_keepalive+0x74>)
 8011f2c:	f640 0224 	movw	r2, #2084	; 0x824
 8011f30:	4917      	ldr	r1, [pc, #92]	; (8011f90 <tcp_keepalive+0x78>)
 8011f32:	4818      	ldr	r0, [pc, #96]	; (8011f94 <tcp_keepalive+0x7c>)
 8011f34:	f002 ff28 	bl	8014d88 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011f38:	7dfb      	ldrb	r3, [r7, #23]
 8011f3a:	b29c      	uxth	r4, r3
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f40:	3b01      	subs	r3, #1
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7f8 fa95 	bl	800a472 <lwip_htonl>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	4621      	mov	r1, r4
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7ff fe66 	bl	8011c20 <tcp_output_alloc_header>
 8011f54:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d102      	bne.n	8011f62 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f60:	e010      	b.n	8011f84 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011f62:	7dfb      	ldrb	r3, [r7, #23]
 8011f64:	2200      	movs	r2, #0
 8011f66:	6939      	ldr	r1, [r7, #16]
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7ff fe97 	bl	8011c9c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	3304      	adds	r3, #4
 8011f74:	6939      	ldr	r1, [r7, #16]
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7ff fed0 	bl	8011d1c <tcp_output_control_segment>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	371c      	adds	r7, #28
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd90      	pop	{r4, r7, pc}
 8011f8c:	08018920 	.word	0x08018920
 8011f90:	080190fc 	.word	0x080190fc
 8011f94:	08018974 	.word	0x08018974

08011f98 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011f98:	b590      	push	{r4, r7, lr}
 8011f9a:	b08b      	sub	sp, #44	; 0x2c
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d106      	bne.n	8011fba <tcp_zero_window_probe+0x22>
 8011fac:	4b4c      	ldr	r3, [pc, #304]	; (80120e0 <tcp_zero_window_probe+0x148>)
 8011fae:	f640 024f 	movw	r2, #2127	; 0x84f
 8011fb2:	494c      	ldr	r1, [pc, #304]	; (80120e4 <tcp_zero_window_probe+0x14c>)
 8011fb4:	484c      	ldr	r0, [pc, #304]	; (80120e8 <tcp_zero_window_probe+0x150>)
 8011fb6:	f002 fee7 	bl	8014d88 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fbe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011fc0:	6a3b      	ldr	r3, [r7, #32]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d101      	bne.n	8011fca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	e086      	b.n	80120d8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011fd0:	2bff      	cmp	r3, #255	; 0xff
 8011fd2:	d007      	beq.n	8011fe4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011fda:	3301      	adds	r3, #1
 8011fdc:	b2da      	uxtb	r2, r3
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011fe4:	6a3b      	ldr	r3, [r7, #32]
 8011fe6:	68db      	ldr	r3, [r3, #12]
 8011fe8:	899b      	ldrh	r3, [r3, #12]
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7f8 fa2b 	bl	800a448 <lwip_htons>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	f003 0301 	and.w	r3, r3, #1
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d005      	beq.n	801200a <tcp_zero_window_probe+0x72>
 8011ffe:	6a3b      	ldr	r3, [r7, #32]
 8012000:	891b      	ldrh	r3, [r3, #8]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d101      	bne.n	801200a <tcp_zero_window_probe+0x72>
 8012006:	2301      	movs	r3, #1
 8012008:	e000      	b.n	801200c <tcp_zero_window_probe+0x74>
 801200a:	2300      	movs	r3, #0
 801200c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801200e:	7ffb      	ldrb	r3, [r7, #31]
 8012010:	2b00      	cmp	r3, #0
 8012012:	bf0c      	ite	eq
 8012014:	2301      	moveq	r3, #1
 8012016:	2300      	movne	r3, #0
 8012018:	b2db      	uxtb	r3, r3
 801201a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801201c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012020:	b299      	uxth	r1, r3
 8012022:	6a3b      	ldr	r3, [r7, #32]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	8bba      	ldrh	r2, [r7, #28]
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f7ff fdf8 	bl	8011c20 <tcp_output_alloc_header>
 8012030:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d102      	bne.n	801203e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801203c:	e04c      	b.n	80120d8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801203e:	69bb      	ldr	r3, [r7, #24]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012044:	7ffb      	ldrb	r3, [r7, #31]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d011      	beq.n	801206e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	899b      	ldrh	r3, [r3, #12]
 801204e:	b29b      	uxth	r3, r3
 8012050:	b21b      	sxth	r3, r3
 8012052:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012056:	b21c      	sxth	r4, r3
 8012058:	2011      	movs	r0, #17
 801205a:	f7f8 f9f5 	bl	800a448 <lwip_htons>
 801205e:	4603      	mov	r3, r0
 8012060:	b21b      	sxth	r3, r3
 8012062:	4323      	orrs	r3, r4
 8012064:	b21b      	sxth	r3, r3
 8012066:	b29a      	uxth	r2, r3
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	819a      	strh	r2, [r3, #12]
 801206c:	e010      	b.n	8012090 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	3314      	adds	r3, #20
 8012074:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012076:	6a3b      	ldr	r3, [r7, #32]
 8012078:	6858      	ldr	r0, [r3, #4]
 801207a:	6a3b      	ldr	r3, [r7, #32]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	891a      	ldrh	r2, [r3, #8]
 8012080:	6a3b      	ldr	r3, [r7, #32]
 8012082:	891b      	ldrh	r3, [r3, #8]
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	b29b      	uxth	r3, r3
 8012088:	2201      	movs	r2, #1
 801208a:	6939      	ldr	r1, [r7, #16]
 801208c:	f7f9 ff58 	bl	800bf40 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012090:	6a3b      	ldr	r3, [r7, #32]
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	4618      	mov	r0, r3
 8012098:	f7f8 f9eb 	bl	800a472 <lwip_htonl>
 801209c:	4603      	mov	r3, r0
 801209e:	3301      	adds	r3, #1
 80120a0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	1ad3      	subs	r3, r2, r3
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	da02      	bge.n	80120b4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	68fa      	ldr	r2, [r7, #12]
 80120b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80120b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120b8:	2200      	movs	r2, #0
 80120ba:	69b9      	ldr	r1, [r7, #24]
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f7ff fded 	bl	8011c9c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80120c2:	687a      	ldr	r2, [r7, #4]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	3304      	adds	r3, #4
 80120c8:	69b9      	ldr	r1, [r7, #24]
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7ff fe26 	bl	8011d1c <tcp_output_control_segment>
 80120d0:	4603      	mov	r3, r0
 80120d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80120d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80120d8:	4618      	mov	r0, r3
 80120da:	372c      	adds	r7, #44	; 0x2c
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd90      	pop	{r4, r7, pc}
 80120e0:	08018920 	.word	0x08018920
 80120e4:	08019118 	.word	0x08019118
 80120e8:	08018974 	.word	0x08018974

080120ec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80120f4:	f7fa f812 	bl	800c11c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80120f8:	4b0a      	ldr	r3, [pc, #40]	; (8012124 <tcpip_tcp_timer+0x38>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d103      	bne.n	8012108 <tcpip_tcp_timer+0x1c>
 8012100:	4b09      	ldr	r3, [pc, #36]	; (8012128 <tcpip_tcp_timer+0x3c>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d005      	beq.n	8012114 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012108:	2200      	movs	r2, #0
 801210a:	4908      	ldr	r1, [pc, #32]	; (801212c <tcpip_tcp_timer+0x40>)
 801210c:	20fa      	movs	r0, #250	; 0xfa
 801210e:	f000 f8f3 	bl	80122f8 <sys_timeout>
 8012112:	e003      	b.n	801211c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012114:	4b06      	ldr	r3, [pc, #24]	; (8012130 <tcpip_tcp_timer+0x44>)
 8012116:	2200      	movs	r2, #0
 8012118:	601a      	str	r2, [r3, #0]
  }
}
 801211a:	bf00      	nop
 801211c:	bf00      	nop
 801211e:	3708      	adds	r7, #8
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	2000d7dc 	.word	0x2000d7dc
 8012128:	2000d7ec 	.word	0x2000d7ec
 801212c:	080120ed 	.word	0x080120ed
 8012130:	20000a54 	.word	0x20000a54

08012134 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012138:	4b0a      	ldr	r3, [pc, #40]	; (8012164 <tcp_timer_needed+0x30>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10f      	bne.n	8012160 <tcp_timer_needed+0x2c>
 8012140:	4b09      	ldr	r3, [pc, #36]	; (8012168 <tcp_timer_needed+0x34>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d103      	bne.n	8012150 <tcp_timer_needed+0x1c>
 8012148:	4b08      	ldr	r3, [pc, #32]	; (801216c <tcp_timer_needed+0x38>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d007      	beq.n	8012160 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012150:	4b04      	ldr	r3, [pc, #16]	; (8012164 <tcp_timer_needed+0x30>)
 8012152:	2201      	movs	r2, #1
 8012154:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012156:	2200      	movs	r2, #0
 8012158:	4905      	ldr	r1, [pc, #20]	; (8012170 <tcp_timer_needed+0x3c>)
 801215a:	20fa      	movs	r0, #250	; 0xfa
 801215c:	f000 f8cc 	bl	80122f8 <sys_timeout>
  }
}
 8012160:	bf00      	nop
 8012162:	bd80      	pop	{r7, pc}
 8012164:	20000a54 	.word	0x20000a54
 8012168:	2000d7dc 	.word	0x2000d7dc
 801216c:	2000d7ec 	.word	0x2000d7ec
 8012170:	080120ed 	.word	0x080120ed

08012174 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b086      	sub	sp, #24
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012180:	2006      	movs	r0, #6
 8012182:	f7f8 fe95 	bl	800aeb0 <memp_malloc>
 8012186:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d109      	bne.n	80121a2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d151      	bne.n	8012238 <sys_timeout_abs+0xc4>
 8012194:	4b2a      	ldr	r3, [pc, #168]	; (8012240 <sys_timeout_abs+0xcc>)
 8012196:	22be      	movs	r2, #190	; 0xbe
 8012198:	492a      	ldr	r1, [pc, #168]	; (8012244 <sys_timeout_abs+0xd0>)
 801219a:	482b      	ldr	r0, [pc, #172]	; (8012248 <sys_timeout_abs+0xd4>)
 801219c:	f002 fdf4 	bl	8014d88 <iprintf>
    return;
 80121a0:	e04a      	b.n	8012238 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	2200      	movs	r2, #0
 80121a6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	68fa      	ldr	r2, [r7, #12]
 80121b8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80121ba:	4b24      	ldr	r3, [pc, #144]	; (801224c <sys_timeout_abs+0xd8>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d103      	bne.n	80121ca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80121c2:	4a22      	ldr	r2, [pc, #136]	; (801224c <sys_timeout_abs+0xd8>)
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	6013      	str	r3, [r2, #0]
    return;
 80121c8:	e037      	b.n	801223a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	685a      	ldr	r2, [r3, #4]
 80121ce:	4b1f      	ldr	r3, [pc, #124]	; (801224c <sys_timeout_abs+0xd8>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	1ad3      	subs	r3, r2, r3
 80121d6:	0fdb      	lsrs	r3, r3, #31
 80121d8:	f003 0301 	and.w	r3, r3, #1
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d007      	beq.n	80121f2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80121e2:	4b1a      	ldr	r3, [pc, #104]	; (801224c <sys_timeout_abs+0xd8>)
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80121ea:	4a18      	ldr	r2, [pc, #96]	; (801224c <sys_timeout_abs+0xd8>)
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	6013      	str	r3, [r2, #0]
 80121f0:	e023      	b.n	801223a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80121f2:	4b16      	ldr	r3, [pc, #88]	; (801224c <sys_timeout_abs+0xd8>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	617b      	str	r3, [r7, #20]
 80121f8:	e01a      	b.n	8012230 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00b      	beq.n	801221a <sys_timeout_abs+0xa6>
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	685a      	ldr	r2, [r3, #4]
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	1ad3      	subs	r3, r2, r3
 801220e:	0fdb      	lsrs	r3, r3, #31
 8012210:	f003 0301 	and.w	r3, r3, #1
 8012214:	b2db      	uxtb	r3, r3
 8012216:	2b00      	cmp	r3, #0
 8012218:	d007      	beq.n	801222a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	693a      	ldr	r2, [r7, #16]
 8012226:	601a      	str	r2, [r3, #0]
        break;
 8012228:	e007      	b.n	801223a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	617b      	str	r3, [r7, #20]
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d1e1      	bne.n	80121fa <sys_timeout_abs+0x86>
 8012236:	e000      	b.n	801223a <sys_timeout_abs+0xc6>
    return;
 8012238:	bf00      	nop
      }
    }
  }
}
 801223a:	3718      	adds	r7, #24
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	0801913c 	.word	0x0801913c
 8012244:	08019170 	.word	0x08019170
 8012248:	080191b0 	.word	0x080191b0
 801224c:	20000a4c 	.word	0x20000a4c

08012250 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b086      	sub	sp, #24
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	4798      	blx	r3

  now = sys_now();
 8012262:	f7f6 f843 	bl	80082ec <sys_now>
 8012266:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	4b0f      	ldr	r3, [pc, #60]	; (80122ac <lwip_cyclic_timer+0x5c>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	4413      	add	r3, r2
 8012272:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012274:	68fa      	ldr	r2, [r7, #12]
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	1ad3      	subs	r3, r2, r3
 801227a:	0fdb      	lsrs	r3, r3, #31
 801227c:	f003 0301 	and.w	r3, r3, #1
 8012280:	b2db      	uxtb	r3, r3
 8012282:	2b00      	cmp	r3, #0
 8012284:	d009      	beq.n	801229a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	4413      	add	r3, r2
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	4907      	ldr	r1, [pc, #28]	; (80122b0 <lwip_cyclic_timer+0x60>)
 8012292:	4618      	mov	r0, r3
 8012294:	f7ff ff6e 	bl	8012174 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012298:	e004      	b.n	80122a4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	4904      	ldr	r1, [pc, #16]	; (80122b0 <lwip_cyclic_timer+0x60>)
 801229e:	68f8      	ldr	r0, [r7, #12]
 80122a0:	f7ff ff68 	bl	8012174 <sys_timeout_abs>
}
 80122a4:	bf00      	nop
 80122a6:	3718      	adds	r7, #24
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	20000a50 	.word	0x20000a50
 80122b0:	08012251 	.word	0x08012251

080122b4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122ba:	2301      	movs	r3, #1
 80122bc:	607b      	str	r3, [r7, #4]
 80122be:	e00e      	b.n	80122de <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80122c0:	4a0b      	ldr	r2, [pc, #44]	; (80122f0 <sys_timeouts_init+0x3c>)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	00db      	lsls	r3, r3, #3
 80122cc:	4a08      	ldr	r2, [pc, #32]	; (80122f0 <sys_timeouts_init+0x3c>)
 80122ce:	4413      	add	r3, r2
 80122d0:	461a      	mov	r2, r3
 80122d2:	4908      	ldr	r1, [pc, #32]	; (80122f4 <sys_timeouts_init+0x40>)
 80122d4:	f000 f810 	bl	80122f8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	3301      	adds	r3, #1
 80122dc:	607b      	str	r3, [r7, #4]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2b02      	cmp	r3, #2
 80122e2:	d9ed      	bls.n	80122c0 <sys_timeouts_init+0xc>
  }
}
 80122e4:	bf00      	nop
 80122e6:	bf00      	nop
 80122e8:	3708      	adds	r7, #8
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	0801f020 	.word	0x0801f020
 80122f4:	08012251 	.word	0x08012251

080122f8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b086      	sub	sp, #24
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801230a:	d306      	bcc.n	801231a <sys_timeout+0x22>
 801230c:	4b0a      	ldr	r3, [pc, #40]	; (8012338 <sys_timeout+0x40>)
 801230e:	f240 1229 	movw	r2, #297	; 0x129
 8012312:	490a      	ldr	r1, [pc, #40]	; (801233c <sys_timeout+0x44>)
 8012314:	480a      	ldr	r0, [pc, #40]	; (8012340 <sys_timeout+0x48>)
 8012316:	f002 fd37 	bl	8014d88 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801231a:	f7f5 ffe7 	bl	80082ec <sys_now>
 801231e:	4602      	mov	r2, r0
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	4413      	add	r3, r2
 8012324:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	68b9      	ldr	r1, [r7, #8]
 801232a:	6978      	ldr	r0, [r7, #20]
 801232c:	f7ff ff22 	bl	8012174 <sys_timeout_abs>
#endif
}
 8012330:	bf00      	nop
 8012332:	3718      	adds	r7, #24
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}
 8012338:	0801913c 	.word	0x0801913c
 801233c:	080191d8 	.word	0x080191d8
 8012340:	080191b0 	.word	0x080191b0

08012344 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b084      	sub	sp, #16
 8012348:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801234a:	f7f5 ffcf 	bl	80082ec <sys_now>
 801234e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012350:	4b1a      	ldr	r3, [pc, #104]	; (80123bc <sys_check_timeouts+0x78>)
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	b2db      	uxtb	r3, r3
 8012356:	2b00      	cmp	r3, #0
 8012358:	d001      	beq.n	801235e <sys_check_timeouts+0x1a>
 801235a:	f7f9 f8cd 	bl	800b4f8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801235e:	4b18      	ldr	r3, [pc, #96]	; (80123c0 <sys_check_timeouts+0x7c>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d022      	beq.n	80123b0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	685b      	ldr	r3, [r3, #4]
 801236e:	68fa      	ldr	r2, [r7, #12]
 8012370:	1ad3      	subs	r3, r2, r3
 8012372:	0fdb      	lsrs	r3, r3, #31
 8012374:	f003 0301 	and.w	r3, r3, #1
 8012378:	b2db      	uxtb	r3, r3
 801237a:	2b00      	cmp	r3, #0
 801237c:	d11a      	bne.n	80123b4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	4a0f      	ldr	r2, [pc, #60]	; (80123c0 <sys_check_timeouts+0x7c>)
 8012384:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	689b      	ldr	r3, [r3, #8]
 801238a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801238c:	68bb      	ldr	r3, [r7, #8]
 801238e:	68db      	ldr	r3, [r3, #12]
 8012390:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	4a0b      	ldr	r2, [pc, #44]	; (80123c4 <sys_check_timeouts+0x80>)
 8012398:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801239a:	68b9      	ldr	r1, [r7, #8]
 801239c:	2006      	movs	r0, #6
 801239e:	f7f8 fdd3 	bl	800af48 <memp_free>
    if (handler != NULL) {
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d0d3      	beq.n	8012350 <sys_check_timeouts+0xc>
      handler(arg);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	6838      	ldr	r0, [r7, #0]
 80123ac:	4798      	blx	r3
  do {
 80123ae:	e7cf      	b.n	8012350 <sys_check_timeouts+0xc>
      return;
 80123b0:	bf00      	nop
 80123b2:	e000      	b.n	80123b6 <sys_check_timeouts+0x72>
      return;
 80123b4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80123b6:	3710      	adds	r7, #16
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}
 80123bc:	2000d7d4 	.word	0x2000d7d4
 80123c0:	20000a4c 	.word	0x20000a4c
 80123c4:	20000a50 	.word	0x20000a50

080123c8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80123cc:	f002 fd6a 	bl	8014ea4 <rand>
 80123d0:	4603      	mov	r3, r0
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80123d8:	b29b      	uxth	r3, r3
 80123da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80123de:	b29a      	uxth	r2, r3
 80123e0:	4b01      	ldr	r3, [pc, #4]	; (80123e8 <udp_init+0x20>)
 80123e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80123e4:	bf00      	nop
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	200004b8 	.word	0x200004b8

080123ec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b084      	sub	sp, #16
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	4613      	mov	r3, r2
 80123f8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d105      	bne.n	801240c <udp_input_local_match+0x20>
 8012400:	4b27      	ldr	r3, [pc, #156]	; (80124a0 <udp_input_local_match+0xb4>)
 8012402:	2287      	movs	r2, #135	; 0x87
 8012404:	4927      	ldr	r1, [pc, #156]	; (80124a4 <udp_input_local_match+0xb8>)
 8012406:	4828      	ldr	r0, [pc, #160]	; (80124a8 <udp_input_local_match+0xbc>)
 8012408:	f002 fcbe 	bl	8014d88 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d105      	bne.n	801241e <udp_input_local_match+0x32>
 8012412:	4b23      	ldr	r3, [pc, #140]	; (80124a0 <udp_input_local_match+0xb4>)
 8012414:	2288      	movs	r2, #136	; 0x88
 8012416:	4925      	ldr	r1, [pc, #148]	; (80124ac <udp_input_local_match+0xc0>)
 8012418:	4823      	ldr	r0, [pc, #140]	; (80124a8 <udp_input_local_match+0xbc>)
 801241a:	f002 fcb5 	bl	8014d88 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	7a1b      	ldrb	r3, [r3, #8]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d00b      	beq.n	801243e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	7a1a      	ldrb	r2, [r3, #8]
 801242a:	4b21      	ldr	r3, [pc, #132]	; (80124b0 <udp_input_local_match+0xc4>)
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012432:	3301      	adds	r3, #1
 8012434:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012436:	429a      	cmp	r2, r3
 8012438:	d001      	beq.n	801243e <udp_input_local_match+0x52>
    return 0;
 801243a:	2300      	movs	r3, #0
 801243c:	e02b      	b.n	8012496 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801243e:	79fb      	ldrb	r3, [r7, #7]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d018      	beq.n	8012476 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d013      	beq.n	8012472 <udp_input_local_match+0x86>
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00f      	beq.n	8012472 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012452:	4b17      	ldr	r3, [pc, #92]	; (80124b0 <udp_input_local_match+0xc4>)
 8012454:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801245a:	d00a      	beq.n	8012472 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	681a      	ldr	r2, [r3, #0]
 8012460:	4b13      	ldr	r3, [pc, #76]	; (80124b0 <udp_input_local_match+0xc4>)
 8012462:	695b      	ldr	r3, [r3, #20]
 8012464:	405a      	eors	r2, r3
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	3308      	adds	r3, #8
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801246e:	2b00      	cmp	r3, #0
 8012470:	d110      	bne.n	8012494 <udp_input_local_match+0xa8>
          return 1;
 8012472:	2301      	movs	r3, #1
 8012474:	e00f      	b.n	8012496 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d009      	beq.n	8012490 <udp_input_local_match+0xa4>
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d005      	beq.n	8012490 <udp_input_local_match+0xa4>
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	681a      	ldr	r2, [r3, #0]
 8012488:	4b09      	ldr	r3, [pc, #36]	; (80124b0 <udp_input_local_match+0xc4>)
 801248a:	695b      	ldr	r3, [r3, #20]
 801248c:	429a      	cmp	r2, r3
 801248e:	d101      	bne.n	8012494 <udp_input_local_match+0xa8>
        return 1;
 8012490:	2301      	movs	r3, #1
 8012492:	e000      	b.n	8012496 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012494:	2300      	movs	r3, #0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	08019224 	.word	0x08019224
 80124a4:	08019254 	.word	0x08019254
 80124a8:	08019278 	.word	0x08019278
 80124ac:	080192a0 	.word	0x080192a0
 80124b0:	20009f8c 	.word	0x20009f8c

080124b4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80124b4:	b590      	push	{r4, r7, lr}
 80124b6:	b08d      	sub	sp, #52	; 0x34
 80124b8:	af02      	add	r7, sp, #8
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80124be:	2300      	movs	r3, #0
 80124c0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d105      	bne.n	80124d4 <udp_input+0x20>
 80124c8:	4b7c      	ldr	r3, [pc, #496]	; (80126bc <udp_input+0x208>)
 80124ca:	22cf      	movs	r2, #207	; 0xcf
 80124cc:	497c      	ldr	r1, [pc, #496]	; (80126c0 <udp_input+0x20c>)
 80124ce:	487d      	ldr	r0, [pc, #500]	; (80126c4 <udp_input+0x210>)
 80124d0:	f002 fc5a 	bl	8014d88 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80124d4:	683b      	ldr	r3, [r7, #0]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d105      	bne.n	80124e6 <udp_input+0x32>
 80124da:	4b78      	ldr	r3, [pc, #480]	; (80126bc <udp_input+0x208>)
 80124dc:	22d0      	movs	r2, #208	; 0xd0
 80124de:	497a      	ldr	r1, [pc, #488]	; (80126c8 <udp_input+0x214>)
 80124e0:	4878      	ldr	r0, [pc, #480]	; (80126c4 <udp_input+0x210>)
 80124e2:	f002 fc51 	bl	8014d88 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	895b      	ldrh	r3, [r3, #10]
 80124ea:	2b07      	cmp	r3, #7
 80124ec:	d803      	bhi.n	80124f6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7f9 fb3c 	bl	800bb6c <pbuf_free>
    goto end;
 80124f4:	e0de      	b.n	80126b4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80124fc:	4b73      	ldr	r3, [pc, #460]	; (80126cc <udp_input+0x218>)
 80124fe:	695b      	ldr	r3, [r3, #20]
 8012500:	4a72      	ldr	r2, [pc, #456]	; (80126cc <udp_input+0x218>)
 8012502:	6812      	ldr	r2, [r2, #0]
 8012504:	4611      	mov	r1, r2
 8012506:	4618      	mov	r0, r3
 8012508:	f001 fc88 	bl	8013e1c <ip4_addr_isbroadcast_u32>
 801250c:	4603      	mov	r3, r0
 801250e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	b29b      	uxth	r3, r3
 8012516:	4618      	mov	r0, r3
 8012518:	f7f7 ff96 	bl	800a448 <lwip_htons>
 801251c:	4603      	mov	r3, r0
 801251e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	885b      	ldrh	r3, [r3, #2]
 8012524:	b29b      	uxth	r3, r3
 8012526:	4618      	mov	r0, r3
 8012528:	f7f7 ff8e 	bl	800a448 <lwip_htons>
 801252c:	4603      	mov	r3, r0
 801252e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012530:	2300      	movs	r3, #0
 8012532:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012534:	2300      	movs	r3, #0
 8012536:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012538:	2300      	movs	r3, #0
 801253a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801253c:	4b64      	ldr	r3, [pc, #400]	; (80126d0 <udp_input+0x21c>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	627b      	str	r3, [r7, #36]	; 0x24
 8012542:	e054      	b.n	80125ee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012546:	8a5b      	ldrh	r3, [r3, #18]
 8012548:	89fa      	ldrh	r2, [r7, #14]
 801254a:	429a      	cmp	r2, r3
 801254c:	d14a      	bne.n	80125e4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801254e:	7cfb      	ldrb	r3, [r7, #19]
 8012550:	461a      	mov	r2, r3
 8012552:	6839      	ldr	r1, [r7, #0]
 8012554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012556:	f7ff ff49 	bl	80123ec <udp_input_local_match>
 801255a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801255c:	2b00      	cmp	r3, #0
 801255e:	d041      	beq.n	80125e4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012562:	7c1b      	ldrb	r3, [r3, #16]
 8012564:	f003 0304 	and.w	r3, r3, #4
 8012568:	2b00      	cmp	r3, #0
 801256a:	d11d      	bne.n	80125a8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d102      	bne.n	8012578 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012574:	61fb      	str	r3, [r7, #28]
 8012576:	e017      	b.n	80125a8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012578:	7cfb      	ldrb	r3, [r7, #19]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d014      	beq.n	80125a8 <udp_input+0xf4>
 801257e:	4b53      	ldr	r3, [pc, #332]	; (80126cc <udp_input+0x218>)
 8012580:	695b      	ldr	r3, [r3, #20]
 8012582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012586:	d10f      	bne.n	80125a8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	681a      	ldr	r2, [r3, #0]
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	3304      	adds	r3, #4
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	429a      	cmp	r2, r3
 8012594:	d008      	beq.n	80125a8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012598:	681a      	ldr	r2, [r3, #0]
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	3304      	adds	r3, #4
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d101      	bne.n	80125a8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80125a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80125a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125aa:	8a9b      	ldrh	r3, [r3, #20]
 80125ac:	8a3a      	ldrh	r2, [r7, #16]
 80125ae:	429a      	cmp	r2, r3
 80125b0:	d118      	bne.n	80125e4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80125b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d005      	beq.n	80125c6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80125ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125bc:	685a      	ldr	r2, [r3, #4]
 80125be:	4b43      	ldr	r3, [pc, #268]	; (80126cc <udp_input+0x218>)
 80125c0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80125c2:	429a      	cmp	r2, r3
 80125c4:	d10e      	bne.n	80125e4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80125c6:	6a3b      	ldr	r3, [r7, #32]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d014      	beq.n	80125f6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80125cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ce:	68da      	ldr	r2, [r3, #12]
 80125d0:	6a3b      	ldr	r3, [r7, #32]
 80125d2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80125d4:	4b3e      	ldr	r3, [pc, #248]	; (80126d0 <udp_input+0x21c>)
 80125d6:	681a      	ldr	r2, [r3, #0]
 80125d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125da:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80125dc:	4a3c      	ldr	r2, [pc, #240]	; (80126d0 <udp_input+0x21c>)
 80125de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80125e2:	e008      	b.n	80125f6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80125e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125e6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80125e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ea:	68db      	ldr	r3, [r3, #12]
 80125ec:	627b      	str	r3, [r7, #36]	; 0x24
 80125ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d1a7      	bne.n	8012544 <udp_input+0x90>
 80125f4:	e000      	b.n	80125f8 <udp_input+0x144>
        break;
 80125f6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80125f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d101      	bne.n	8012602 <udp_input+0x14e>
    pcb = uncon_pcb;
 80125fe:	69fb      	ldr	r3, [r7, #28]
 8012600:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012604:	2b00      	cmp	r3, #0
 8012606:	d002      	beq.n	801260e <udp_input+0x15a>
    for_us = 1;
 8012608:	2301      	movs	r3, #1
 801260a:	76fb      	strb	r3, [r7, #27]
 801260c:	e00a      	b.n	8012624 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	3304      	adds	r3, #4
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	4b2d      	ldr	r3, [pc, #180]	; (80126cc <udp_input+0x218>)
 8012616:	695b      	ldr	r3, [r3, #20]
 8012618:	429a      	cmp	r2, r3
 801261a:	bf0c      	ite	eq
 801261c:	2301      	moveq	r3, #1
 801261e:	2300      	movne	r3, #0
 8012620:	b2db      	uxtb	r3, r3
 8012622:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012624:	7efb      	ldrb	r3, [r7, #27]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d041      	beq.n	80126ae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801262a:	2108      	movs	r1, #8
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f7f9 fa17 	bl	800ba60 <pbuf_remove_header>
 8012632:	4603      	mov	r3, r0
 8012634:	2b00      	cmp	r3, #0
 8012636:	d00a      	beq.n	801264e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012638:	4b20      	ldr	r3, [pc, #128]	; (80126bc <udp_input+0x208>)
 801263a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801263e:	4925      	ldr	r1, [pc, #148]	; (80126d4 <udp_input+0x220>)
 8012640:	4820      	ldr	r0, [pc, #128]	; (80126c4 <udp_input+0x210>)
 8012642:	f002 fba1 	bl	8014d88 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f7f9 fa90 	bl	800bb6c <pbuf_free>
      goto end;
 801264c:	e032      	b.n	80126b4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012650:	2b00      	cmp	r3, #0
 8012652:	d012      	beq.n	801267a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012656:	699b      	ldr	r3, [r3, #24]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d00a      	beq.n	8012672 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265e:	699c      	ldr	r4, [r3, #24]
 8012660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012662:	69d8      	ldr	r0, [r3, #28]
 8012664:	8a3b      	ldrh	r3, [r7, #16]
 8012666:	9300      	str	r3, [sp, #0]
 8012668:	4b1b      	ldr	r3, [pc, #108]	; (80126d8 <udp_input+0x224>)
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801266e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012670:	e021      	b.n	80126b6 <udp_input+0x202>
        pbuf_free(p);
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7f9 fa7a 	bl	800bb6c <pbuf_free>
        goto end;
 8012678:	e01c      	b.n	80126b4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801267a:	7cfb      	ldrb	r3, [r7, #19]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d112      	bne.n	80126a6 <udp_input+0x1f2>
 8012680:	4b12      	ldr	r3, [pc, #72]	; (80126cc <udp_input+0x218>)
 8012682:	695b      	ldr	r3, [r3, #20]
 8012684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012688:	2be0      	cmp	r3, #224	; 0xe0
 801268a:	d00c      	beq.n	80126a6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801268c:	4b0f      	ldr	r3, [pc, #60]	; (80126cc <udp_input+0x218>)
 801268e:	899b      	ldrh	r3, [r3, #12]
 8012690:	3308      	adds	r3, #8
 8012692:	b29b      	uxth	r3, r3
 8012694:	b21b      	sxth	r3, r3
 8012696:	4619      	mov	r1, r3
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f7f9 fa54 	bl	800bb46 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801269e:	2103      	movs	r1, #3
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f001 f89b 	bl	80137dc <icmp_dest_unreach>
      pbuf_free(p);
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f7f9 fa60 	bl	800bb6c <pbuf_free>
  return;
 80126ac:	e003      	b.n	80126b6 <udp_input+0x202>
    pbuf_free(p);
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7f9 fa5c 	bl	800bb6c <pbuf_free>
  return;
 80126b4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80126b6:	372c      	adds	r7, #44	; 0x2c
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd90      	pop	{r4, r7, pc}
 80126bc:	08019224 	.word	0x08019224
 80126c0:	080192c8 	.word	0x080192c8
 80126c4:	08019278 	.word	0x08019278
 80126c8:	080192e0 	.word	0x080192e0
 80126cc:	20009f8c 	.word	0x20009f8c
 80126d0:	2000d7f4 	.word	0x2000d7f4
 80126d4:	080192fc 	.word	0x080192fc
 80126d8:	20009f9c 	.word	0x20009f9c

080126dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80126dc:	b480      	push	{r7}
 80126de:	b085      	sub	sp, #20
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d01e      	beq.n	801272a <udp_netif_ip_addr_changed+0x4e>
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d01a      	beq.n	801272a <udp_netif_ip_addr_changed+0x4e>
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d017      	beq.n	801272a <udp_netif_ip_addr_changed+0x4e>
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d013      	beq.n	801272a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012702:	4b0d      	ldr	r3, [pc, #52]	; (8012738 <udp_netif_ip_addr_changed+0x5c>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	60fb      	str	r3, [r7, #12]
 8012708:	e00c      	b.n	8012724 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681a      	ldr	r2, [r3, #0]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	429a      	cmp	r2, r3
 8012714:	d103      	bne.n	801271e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	68db      	ldr	r3, [r3, #12]
 8012722:	60fb      	str	r3, [r7, #12]
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d1ef      	bne.n	801270a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801272a:	bf00      	nop
 801272c:	3714      	adds	r7, #20
 801272e:	46bd      	mov	sp, r7
 8012730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop
 8012738:	2000d7f4 	.word	0x2000d7f4

0801273c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b082      	sub	sp, #8
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012744:	4915      	ldr	r1, [pc, #84]	; (801279c <etharp_free_entry+0x60>)
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	4613      	mov	r3, r2
 801274a:	005b      	lsls	r3, r3, #1
 801274c:	4413      	add	r3, r2
 801274e:	00db      	lsls	r3, r3, #3
 8012750:	440b      	add	r3, r1
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d013      	beq.n	8012780 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012758:	4910      	ldr	r1, [pc, #64]	; (801279c <etharp_free_entry+0x60>)
 801275a:	687a      	ldr	r2, [r7, #4]
 801275c:	4613      	mov	r3, r2
 801275e:	005b      	lsls	r3, r3, #1
 8012760:	4413      	add	r3, r2
 8012762:	00db      	lsls	r3, r3, #3
 8012764:	440b      	add	r3, r1
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	4618      	mov	r0, r3
 801276a:	f7f9 f9ff 	bl	800bb6c <pbuf_free>
    arp_table[i].q = NULL;
 801276e:	490b      	ldr	r1, [pc, #44]	; (801279c <etharp_free_entry+0x60>)
 8012770:	687a      	ldr	r2, [r7, #4]
 8012772:	4613      	mov	r3, r2
 8012774:	005b      	lsls	r3, r3, #1
 8012776:	4413      	add	r3, r2
 8012778:	00db      	lsls	r3, r3, #3
 801277a:	440b      	add	r3, r1
 801277c:	2200      	movs	r2, #0
 801277e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012780:	4906      	ldr	r1, [pc, #24]	; (801279c <etharp_free_entry+0x60>)
 8012782:	687a      	ldr	r2, [r7, #4]
 8012784:	4613      	mov	r3, r2
 8012786:	005b      	lsls	r3, r3, #1
 8012788:	4413      	add	r3, r2
 801278a:	00db      	lsls	r3, r3, #3
 801278c:	440b      	add	r3, r1
 801278e:	3314      	adds	r3, #20
 8012790:	2200      	movs	r2, #0
 8012792:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012794:	bf00      	nop
 8012796:	3708      	adds	r7, #8
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	20000a58 	.word	0x20000a58

080127a0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80127a0:	b580      	push	{r7, lr}
 80127a2:	b082      	sub	sp, #8
 80127a4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127a6:	2300      	movs	r3, #0
 80127a8:	607b      	str	r3, [r7, #4]
 80127aa:	e096      	b.n	80128da <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80127ac:	494f      	ldr	r1, [pc, #316]	; (80128ec <etharp_tmr+0x14c>)
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	4613      	mov	r3, r2
 80127b2:	005b      	lsls	r3, r3, #1
 80127b4:	4413      	add	r3, r2
 80127b6:	00db      	lsls	r3, r3, #3
 80127b8:	440b      	add	r3, r1
 80127ba:	3314      	adds	r3, #20
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80127c0:	78fb      	ldrb	r3, [r7, #3]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	f000 8086 	beq.w	80128d4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80127c8:	4948      	ldr	r1, [pc, #288]	; (80128ec <etharp_tmr+0x14c>)
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	4613      	mov	r3, r2
 80127ce:	005b      	lsls	r3, r3, #1
 80127d0:	4413      	add	r3, r2
 80127d2:	00db      	lsls	r3, r3, #3
 80127d4:	440b      	add	r3, r1
 80127d6:	3312      	adds	r3, #18
 80127d8:	881b      	ldrh	r3, [r3, #0]
 80127da:	3301      	adds	r3, #1
 80127dc:	b298      	uxth	r0, r3
 80127de:	4943      	ldr	r1, [pc, #268]	; (80128ec <etharp_tmr+0x14c>)
 80127e0:	687a      	ldr	r2, [r7, #4]
 80127e2:	4613      	mov	r3, r2
 80127e4:	005b      	lsls	r3, r3, #1
 80127e6:	4413      	add	r3, r2
 80127e8:	00db      	lsls	r3, r3, #3
 80127ea:	440b      	add	r3, r1
 80127ec:	3312      	adds	r3, #18
 80127ee:	4602      	mov	r2, r0
 80127f0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80127f2:	493e      	ldr	r1, [pc, #248]	; (80128ec <etharp_tmr+0x14c>)
 80127f4:	687a      	ldr	r2, [r7, #4]
 80127f6:	4613      	mov	r3, r2
 80127f8:	005b      	lsls	r3, r3, #1
 80127fa:	4413      	add	r3, r2
 80127fc:	00db      	lsls	r3, r3, #3
 80127fe:	440b      	add	r3, r1
 8012800:	3312      	adds	r3, #18
 8012802:	881b      	ldrh	r3, [r3, #0]
 8012804:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012808:	d215      	bcs.n	8012836 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801280a:	4938      	ldr	r1, [pc, #224]	; (80128ec <etharp_tmr+0x14c>)
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	4613      	mov	r3, r2
 8012810:	005b      	lsls	r3, r3, #1
 8012812:	4413      	add	r3, r2
 8012814:	00db      	lsls	r3, r3, #3
 8012816:	440b      	add	r3, r1
 8012818:	3314      	adds	r3, #20
 801281a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801281c:	2b01      	cmp	r3, #1
 801281e:	d10e      	bne.n	801283e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012820:	4932      	ldr	r1, [pc, #200]	; (80128ec <etharp_tmr+0x14c>)
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	4613      	mov	r3, r2
 8012826:	005b      	lsls	r3, r3, #1
 8012828:	4413      	add	r3, r2
 801282a:	00db      	lsls	r3, r3, #3
 801282c:	440b      	add	r3, r1
 801282e:	3312      	adds	r3, #18
 8012830:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012832:	2b04      	cmp	r3, #4
 8012834:	d903      	bls.n	801283e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f7ff ff80 	bl	801273c <etharp_free_entry>
 801283c:	e04a      	b.n	80128d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801283e:	492b      	ldr	r1, [pc, #172]	; (80128ec <etharp_tmr+0x14c>)
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	4613      	mov	r3, r2
 8012844:	005b      	lsls	r3, r3, #1
 8012846:	4413      	add	r3, r2
 8012848:	00db      	lsls	r3, r3, #3
 801284a:	440b      	add	r3, r1
 801284c:	3314      	adds	r3, #20
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	2b03      	cmp	r3, #3
 8012852:	d10a      	bne.n	801286a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012854:	4925      	ldr	r1, [pc, #148]	; (80128ec <etharp_tmr+0x14c>)
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	4613      	mov	r3, r2
 801285a:	005b      	lsls	r3, r3, #1
 801285c:	4413      	add	r3, r2
 801285e:	00db      	lsls	r3, r3, #3
 8012860:	440b      	add	r3, r1
 8012862:	3314      	adds	r3, #20
 8012864:	2204      	movs	r2, #4
 8012866:	701a      	strb	r2, [r3, #0]
 8012868:	e034      	b.n	80128d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801286a:	4920      	ldr	r1, [pc, #128]	; (80128ec <etharp_tmr+0x14c>)
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	4613      	mov	r3, r2
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	4413      	add	r3, r2
 8012874:	00db      	lsls	r3, r3, #3
 8012876:	440b      	add	r3, r1
 8012878:	3314      	adds	r3, #20
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	2b04      	cmp	r3, #4
 801287e:	d10a      	bne.n	8012896 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012880:	491a      	ldr	r1, [pc, #104]	; (80128ec <etharp_tmr+0x14c>)
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	4613      	mov	r3, r2
 8012886:	005b      	lsls	r3, r3, #1
 8012888:	4413      	add	r3, r2
 801288a:	00db      	lsls	r3, r3, #3
 801288c:	440b      	add	r3, r1
 801288e:	3314      	adds	r3, #20
 8012890:	2202      	movs	r2, #2
 8012892:	701a      	strb	r2, [r3, #0]
 8012894:	e01e      	b.n	80128d4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012896:	4915      	ldr	r1, [pc, #84]	; (80128ec <etharp_tmr+0x14c>)
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	4613      	mov	r3, r2
 801289c:	005b      	lsls	r3, r3, #1
 801289e:	4413      	add	r3, r2
 80128a0:	00db      	lsls	r3, r3, #3
 80128a2:	440b      	add	r3, r1
 80128a4:	3314      	adds	r3, #20
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	2b01      	cmp	r3, #1
 80128aa:	d113      	bne.n	80128d4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80128ac:	490f      	ldr	r1, [pc, #60]	; (80128ec <etharp_tmr+0x14c>)
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	4613      	mov	r3, r2
 80128b2:	005b      	lsls	r3, r3, #1
 80128b4:	4413      	add	r3, r2
 80128b6:	00db      	lsls	r3, r3, #3
 80128b8:	440b      	add	r3, r1
 80128ba:	3308      	adds	r3, #8
 80128bc:	6818      	ldr	r0, [r3, #0]
 80128be:	687a      	ldr	r2, [r7, #4]
 80128c0:	4613      	mov	r3, r2
 80128c2:	005b      	lsls	r3, r3, #1
 80128c4:	4413      	add	r3, r2
 80128c6:	00db      	lsls	r3, r3, #3
 80128c8:	4a08      	ldr	r2, [pc, #32]	; (80128ec <etharp_tmr+0x14c>)
 80128ca:	4413      	add	r3, r2
 80128cc:	3304      	adds	r3, #4
 80128ce:	4619      	mov	r1, r3
 80128d0:	f000 fe6e 	bl	80135b0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	3301      	adds	r3, #1
 80128d8:	607b      	str	r3, [r7, #4]
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2b09      	cmp	r3, #9
 80128de:	f77f af65 	ble.w	80127ac <etharp_tmr+0xc>
      }
    }
  }
}
 80128e2:	bf00      	nop
 80128e4:	bf00      	nop
 80128e6:	3708      	adds	r7, #8
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}
 80128ec:	20000a58 	.word	0x20000a58

080128f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b08a      	sub	sp, #40	; 0x28
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	60f8      	str	r0, [r7, #12]
 80128f8:	460b      	mov	r3, r1
 80128fa:	607a      	str	r2, [r7, #4]
 80128fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80128fe:	230a      	movs	r3, #10
 8012900:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012902:	230a      	movs	r3, #10
 8012904:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012906:	230a      	movs	r3, #10
 8012908:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801290a:	2300      	movs	r3, #0
 801290c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801290e:	230a      	movs	r3, #10
 8012910:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012912:	2300      	movs	r3, #0
 8012914:	83bb      	strh	r3, [r7, #28]
 8012916:	2300      	movs	r3, #0
 8012918:	837b      	strh	r3, [r7, #26]
 801291a:	2300      	movs	r3, #0
 801291c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801291e:	2300      	movs	r3, #0
 8012920:	843b      	strh	r3, [r7, #32]
 8012922:	e0ae      	b.n	8012a82 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012924:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012928:	49a6      	ldr	r1, [pc, #664]	; (8012bc4 <etharp_find_entry+0x2d4>)
 801292a:	4613      	mov	r3, r2
 801292c:	005b      	lsls	r3, r3, #1
 801292e:	4413      	add	r3, r2
 8012930:	00db      	lsls	r3, r3, #3
 8012932:	440b      	add	r3, r1
 8012934:	3314      	adds	r3, #20
 8012936:	781b      	ldrb	r3, [r3, #0]
 8012938:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801293a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801293e:	2b0a      	cmp	r3, #10
 8012940:	d105      	bne.n	801294e <etharp_find_entry+0x5e>
 8012942:	7dfb      	ldrb	r3, [r7, #23]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d102      	bne.n	801294e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012948:	8c3b      	ldrh	r3, [r7, #32]
 801294a:	847b      	strh	r3, [r7, #34]	; 0x22
 801294c:	e095      	b.n	8012a7a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801294e:	7dfb      	ldrb	r3, [r7, #23]
 8012950:	2b00      	cmp	r3, #0
 8012952:	f000 8092 	beq.w	8012a7a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012956:	7dfb      	ldrb	r3, [r7, #23]
 8012958:	2b01      	cmp	r3, #1
 801295a:	d009      	beq.n	8012970 <etharp_find_entry+0x80>
 801295c:	7dfb      	ldrb	r3, [r7, #23]
 801295e:	2b01      	cmp	r3, #1
 8012960:	d806      	bhi.n	8012970 <etharp_find_entry+0x80>
 8012962:	4b99      	ldr	r3, [pc, #612]	; (8012bc8 <etharp_find_entry+0x2d8>)
 8012964:	f240 1223 	movw	r2, #291	; 0x123
 8012968:	4998      	ldr	r1, [pc, #608]	; (8012bcc <etharp_find_entry+0x2dc>)
 801296a:	4899      	ldr	r0, [pc, #612]	; (8012bd0 <etharp_find_entry+0x2e0>)
 801296c:	f002 fa0c 	bl	8014d88 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d020      	beq.n	80129b8 <etharp_find_entry+0xc8>
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	6819      	ldr	r1, [r3, #0]
 801297a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801297e:	4891      	ldr	r0, [pc, #580]	; (8012bc4 <etharp_find_entry+0x2d4>)
 8012980:	4613      	mov	r3, r2
 8012982:	005b      	lsls	r3, r3, #1
 8012984:	4413      	add	r3, r2
 8012986:	00db      	lsls	r3, r3, #3
 8012988:	4403      	add	r3, r0
 801298a:	3304      	adds	r3, #4
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	4299      	cmp	r1, r3
 8012990:	d112      	bne.n	80129b8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d00c      	beq.n	80129b2 <etharp_find_entry+0xc2>
 8012998:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801299c:	4989      	ldr	r1, [pc, #548]	; (8012bc4 <etharp_find_entry+0x2d4>)
 801299e:	4613      	mov	r3, r2
 80129a0:	005b      	lsls	r3, r3, #1
 80129a2:	4413      	add	r3, r2
 80129a4:	00db      	lsls	r3, r3, #3
 80129a6:	440b      	add	r3, r1
 80129a8:	3308      	adds	r3, #8
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	687a      	ldr	r2, [r7, #4]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d102      	bne.n	80129b8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80129b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80129b6:	e100      	b.n	8012bba <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80129b8:	7dfb      	ldrb	r3, [r7, #23]
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	d140      	bne.n	8012a40 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80129be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129c2:	4980      	ldr	r1, [pc, #512]	; (8012bc4 <etharp_find_entry+0x2d4>)
 80129c4:	4613      	mov	r3, r2
 80129c6:	005b      	lsls	r3, r3, #1
 80129c8:	4413      	add	r3, r2
 80129ca:	00db      	lsls	r3, r3, #3
 80129cc:	440b      	add	r3, r1
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d01a      	beq.n	8012a0a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80129d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129d8:	497a      	ldr	r1, [pc, #488]	; (8012bc4 <etharp_find_entry+0x2d4>)
 80129da:	4613      	mov	r3, r2
 80129dc:	005b      	lsls	r3, r3, #1
 80129de:	4413      	add	r3, r2
 80129e0:	00db      	lsls	r3, r3, #3
 80129e2:	440b      	add	r3, r1
 80129e4:	3312      	adds	r3, #18
 80129e6:	881b      	ldrh	r3, [r3, #0]
 80129e8:	8bba      	ldrh	r2, [r7, #28]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d845      	bhi.n	8012a7a <etharp_find_entry+0x18a>
            old_queue = i;
 80129ee:	8c3b      	ldrh	r3, [r7, #32]
 80129f0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80129f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129f6:	4973      	ldr	r1, [pc, #460]	; (8012bc4 <etharp_find_entry+0x2d4>)
 80129f8:	4613      	mov	r3, r2
 80129fa:	005b      	lsls	r3, r3, #1
 80129fc:	4413      	add	r3, r2
 80129fe:	00db      	lsls	r3, r3, #3
 8012a00:	440b      	add	r3, r1
 8012a02:	3312      	adds	r3, #18
 8012a04:	881b      	ldrh	r3, [r3, #0]
 8012a06:	83bb      	strh	r3, [r7, #28]
 8012a08:	e037      	b.n	8012a7a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012a0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a0e:	496d      	ldr	r1, [pc, #436]	; (8012bc4 <etharp_find_entry+0x2d4>)
 8012a10:	4613      	mov	r3, r2
 8012a12:	005b      	lsls	r3, r3, #1
 8012a14:	4413      	add	r3, r2
 8012a16:	00db      	lsls	r3, r3, #3
 8012a18:	440b      	add	r3, r1
 8012a1a:	3312      	adds	r3, #18
 8012a1c:	881b      	ldrh	r3, [r3, #0]
 8012a1e:	8b7a      	ldrh	r2, [r7, #26]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d82a      	bhi.n	8012a7a <etharp_find_entry+0x18a>
            old_pending = i;
 8012a24:	8c3b      	ldrh	r3, [r7, #32]
 8012a26:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012a28:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a2c:	4965      	ldr	r1, [pc, #404]	; (8012bc4 <etharp_find_entry+0x2d4>)
 8012a2e:	4613      	mov	r3, r2
 8012a30:	005b      	lsls	r3, r3, #1
 8012a32:	4413      	add	r3, r2
 8012a34:	00db      	lsls	r3, r3, #3
 8012a36:	440b      	add	r3, r1
 8012a38:	3312      	adds	r3, #18
 8012a3a:	881b      	ldrh	r3, [r3, #0]
 8012a3c:	837b      	strh	r3, [r7, #26]
 8012a3e:	e01c      	b.n	8012a7a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012a40:	7dfb      	ldrb	r3, [r7, #23]
 8012a42:	2b01      	cmp	r3, #1
 8012a44:	d919      	bls.n	8012a7a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012a46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a4a:	495e      	ldr	r1, [pc, #376]	; (8012bc4 <etharp_find_entry+0x2d4>)
 8012a4c:	4613      	mov	r3, r2
 8012a4e:	005b      	lsls	r3, r3, #1
 8012a50:	4413      	add	r3, r2
 8012a52:	00db      	lsls	r3, r3, #3
 8012a54:	440b      	add	r3, r1
 8012a56:	3312      	adds	r3, #18
 8012a58:	881b      	ldrh	r3, [r3, #0]
 8012a5a:	8b3a      	ldrh	r2, [r7, #24]
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d80c      	bhi.n	8012a7a <etharp_find_entry+0x18a>
            old_stable = i;
 8012a60:	8c3b      	ldrh	r3, [r7, #32]
 8012a62:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012a64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a68:	4956      	ldr	r1, [pc, #344]	; (8012bc4 <etharp_find_entry+0x2d4>)
 8012a6a:	4613      	mov	r3, r2
 8012a6c:	005b      	lsls	r3, r3, #1
 8012a6e:	4413      	add	r3, r2
 8012a70:	00db      	lsls	r3, r3, #3
 8012a72:	440b      	add	r3, r1
 8012a74:	3312      	adds	r3, #18
 8012a76:	881b      	ldrh	r3, [r3, #0]
 8012a78:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a7a:	8c3b      	ldrh	r3, [r7, #32]
 8012a7c:	3301      	adds	r3, #1
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	843b      	strh	r3, [r7, #32]
 8012a82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a86:	2b09      	cmp	r3, #9
 8012a88:	f77f af4c 	ble.w	8012924 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012a8c:	7afb      	ldrb	r3, [r7, #11]
 8012a8e:	f003 0302 	and.w	r3, r3, #2
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d108      	bne.n	8012aa8 <etharp_find_entry+0x1b8>
 8012a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012a9a:	2b0a      	cmp	r3, #10
 8012a9c:	d107      	bne.n	8012aae <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012a9e:	7afb      	ldrb	r3, [r7, #11]
 8012aa0:	f003 0301 	and.w	r3, r3, #1
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d102      	bne.n	8012aae <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012aa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012aac:	e085      	b.n	8012bba <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012aae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012ab2:	2b09      	cmp	r3, #9
 8012ab4:	dc02      	bgt.n	8012abc <etharp_find_entry+0x1cc>
    i = empty;
 8012ab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ab8:	843b      	strh	r3, [r7, #32]
 8012aba:	e039      	b.n	8012b30 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012abc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012ac0:	2b09      	cmp	r3, #9
 8012ac2:	dc14      	bgt.n	8012aee <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012ac6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012ac8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012acc:	493d      	ldr	r1, [pc, #244]	; (8012bc4 <etharp_find_entry+0x2d4>)
 8012ace:	4613      	mov	r3, r2
 8012ad0:	005b      	lsls	r3, r3, #1
 8012ad2:	4413      	add	r3, r2
 8012ad4:	00db      	lsls	r3, r3, #3
 8012ad6:	440b      	add	r3, r1
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d018      	beq.n	8012b10 <etharp_find_entry+0x220>
 8012ade:	4b3a      	ldr	r3, [pc, #232]	; (8012bc8 <etharp_find_entry+0x2d8>)
 8012ae0:	f240 126d 	movw	r2, #365	; 0x16d
 8012ae4:	493b      	ldr	r1, [pc, #236]	; (8012bd4 <etharp_find_entry+0x2e4>)
 8012ae6:	483a      	ldr	r0, [pc, #232]	; (8012bd0 <etharp_find_entry+0x2e0>)
 8012ae8:	f002 f94e 	bl	8014d88 <iprintf>
 8012aec:	e010      	b.n	8012b10 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012aee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012af2:	2b09      	cmp	r3, #9
 8012af4:	dc02      	bgt.n	8012afc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012af6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012af8:	843b      	strh	r3, [r7, #32]
 8012afa:	e009      	b.n	8012b10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012afc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012b00:	2b09      	cmp	r3, #9
 8012b02:	dc02      	bgt.n	8012b0a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012b04:	8bfb      	ldrh	r3, [r7, #30]
 8012b06:	843b      	strh	r3, [r7, #32]
 8012b08:	e002      	b.n	8012b10 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b0e:	e054      	b.n	8012bba <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b14:	2b09      	cmp	r3, #9
 8012b16:	dd06      	ble.n	8012b26 <etharp_find_entry+0x236>
 8012b18:	4b2b      	ldr	r3, [pc, #172]	; (8012bc8 <etharp_find_entry+0x2d8>)
 8012b1a:	f240 127f 	movw	r2, #383	; 0x17f
 8012b1e:	492e      	ldr	r1, [pc, #184]	; (8012bd8 <etharp_find_entry+0x2e8>)
 8012b20:	482b      	ldr	r0, [pc, #172]	; (8012bd0 <etharp_find_entry+0x2e0>)
 8012b22:	f002 f931 	bl	8014d88 <iprintf>
    etharp_free_entry(i);
 8012b26:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7ff fe06 	bl	801273c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b30:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b34:	2b09      	cmp	r3, #9
 8012b36:	dd06      	ble.n	8012b46 <etharp_find_entry+0x256>
 8012b38:	4b23      	ldr	r3, [pc, #140]	; (8012bc8 <etharp_find_entry+0x2d8>)
 8012b3a:	f240 1283 	movw	r2, #387	; 0x183
 8012b3e:	4926      	ldr	r1, [pc, #152]	; (8012bd8 <etharp_find_entry+0x2e8>)
 8012b40:	4823      	ldr	r0, [pc, #140]	; (8012bd0 <etharp_find_entry+0x2e0>)
 8012b42:	f002 f921 	bl	8014d88 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012b46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b4a:	491e      	ldr	r1, [pc, #120]	; (8012bc4 <etharp_find_entry+0x2d4>)
 8012b4c:	4613      	mov	r3, r2
 8012b4e:	005b      	lsls	r3, r3, #1
 8012b50:	4413      	add	r3, r2
 8012b52:	00db      	lsls	r3, r3, #3
 8012b54:	440b      	add	r3, r1
 8012b56:	3314      	adds	r3, #20
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d006      	beq.n	8012b6c <etharp_find_entry+0x27c>
 8012b5e:	4b1a      	ldr	r3, [pc, #104]	; (8012bc8 <etharp_find_entry+0x2d8>)
 8012b60:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8012b64:	491d      	ldr	r1, [pc, #116]	; (8012bdc <etharp_find_entry+0x2ec>)
 8012b66:	481a      	ldr	r0, [pc, #104]	; (8012bd0 <etharp_find_entry+0x2e0>)
 8012b68:	f002 f90e 	bl	8014d88 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d00b      	beq.n	8012b8a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012b72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	6819      	ldr	r1, [r3, #0]
 8012b7a:	4812      	ldr	r0, [pc, #72]	; (8012bc4 <etharp_find_entry+0x2d4>)
 8012b7c:	4613      	mov	r3, r2
 8012b7e:	005b      	lsls	r3, r3, #1
 8012b80:	4413      	add	r3, r2
 8012b82:	00db      	lsls	r3, r3, #3
 8012b84:	4403      	add	r3, r0
 8012b86:	3304      	adds	r3, #4
 8012b88:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012b8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b8e:	490d      	ldr	r1, [pc, #52]	; (8012bc4 <etharp_find_entry+0x2d4>)
 8012b90:	4613      	mov	r3, r2
 8012b92:	005b      	lsls	r3, r3, #1
 8012b94:	4413      	add	r3, r2
 8012b96:	00db      	lsls	r3, r3, #3
 8012b98:	440b      	add	r3, r1
 8012b9a:	3312      	adds	r3, #18
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012ba0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ba4:	4907      	ldr	r1, [pc, #28]	; (8012bc4 <etharp_find_entry+0x2d4>)
 8012ba6:	4613      	mov	r3, r2
 8012ba8:	005b      	lsls	r3, r3, #1
 8012baa:	4413      	add	r3, r2
 8012bac:	00db      	lsls	r3, r3, #3
 8012bae:	440b      	add	r3, r1
 8012bb0:	3308      	adds	r3, #8
 8012bb2:	687a      	ldr	r2, [r7, #4]
 8012bb4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012bb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3728      	adds	r7, #40	; 0x28
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	20000a58 	.word	0x20000a58
 8012bc8:	08019588 	.word	0x08019588
 8012bcc:	080195c0 	.word	0x080195c0
 8012bd0:	08019600 	.word	0x08019600
 8012bd4:	08019628 	.word	0x08019628
 8012bd8:	08019640 	.word	0x08019640
 8012bdc:	08019654 	.word	0x08019654

08012be0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b088      	sub	sp, #32
 8012be4:	af02      	add	r7, sp, #8
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	607a      	str	r2, [r7, #4]
 8012bec:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012bf4:	2b06      	cmp	r3, #6
 8012bf6:	d006      	beq.n	8012c06 <etharp_update_arp_entry+0x26>
 8012bf8:	4b48      	ldr	r3, [pc, #288]	; (8012d1c <etharp_update_arp_entry+0x13c>)
 8012bfa:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012bfe:	4948      	ldr	r1, [pc, #288]	; (8012d20 <etharp_update_arp_entry+0x140>)
 8012c00:	4848      	ldr	r0, [pc, #288]	; (8012d24 <etharp_update_arp_entry+0x144>)
 8012c02:	f002 f8c1 	bl	8014d88 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d012      	beq.n	8012c32 <etharp_update_arp_entry+0x52>
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d00e      	beq.n	8012c32 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	68f9      	ldr	r1, [r7, #12]
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f001 f8fe 	bl	8013e1c <ip4_addr_isbroadcast_u32>
 8012c20:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d105      	bne.n	8012c32 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c2e:	2be0      	cmp	r3, #224	; 0xe0
 8012c30:	d102      	bne.n	8012c38 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012c32:	f06f 030f 	mvn.w	r3, #15
 8012c36:	e06c      	b.n	8012d12 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012c38:	78fb      	ldrb	r3, [r7, #3]
 8012c3a:	68fa      	ldr	r2, [r7, #12]
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	68b8      	ldr	r0, [r7, #8]
 8012c40:	f7ff fe56 	bl	80128f0 <etharp_find_entry>
 8012c44:	4603      	mov	r3, r0
 8012c46:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012c48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	da02      	bge.n	8012c56 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012c50:	8afb      	ldrh	r3, [r7, #22]
 8012c52:	b25b      	sxtb	r3, r3
 8012c54:	e05d      	b.n	8012d12 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012c56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c5a:	4933      	ldr	r1, [pc, #204]	; (8012d28 <etharp_update_arp_entry+0x148>)
 8012c5c:	4613      	mov	r3, r2
 8012c5e:	005b      	lsls	r3, r3, #1
 8012c60:	4413      	add	r3, r2
 8012c62:	00db      	lsls	r3, r3, #3
 8012c64:	440b      	add	r3, r1
 8012c66:	3314      	adds	r3, #20
 8012c68:	2202      	movs	r2, #2
 8012c6a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012c6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c70:	492d      	ldr	r1, [pc, #180]	; (8012d28 <etharp_update_arp_entry+0x148>)
 8012c72:	4613      	mov	r3, r2
 8012c74:	005b      	lsls	r3, r3, #1
 8012c76:	4413      	add	r3, r2
 8012c78:	00db      	lsls	r3, r3, #3
 8012c7a:	440b      	add	r3, r1
 8012c7c:	3308      	adds	r3, #8
 8012c7e:	68fa      	ldr	r2, [r7, #12]
 8012c80:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012c82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c86:	4613      	mov	r3, r2
 8012c88:	005b      	lsls	r3, r3, #1
 8012c8a:	4413      	add	r3, r2
 8012c8c:	00db      	lsls	r3, r3, #3
 8012c8e:	3308      	adds	r3, #8
 8012c90:	4a25      	ldr	r2, [pc, #148]	; (8012d28 <etharp_update_arp_entry+0x148>)
 8012c92:	4413      	add	r3, r2
 8012c94:	3304      	adds	r3, #4
 8012c96:	2206      	movs	r2, #6
 8012c98:	6879      	ldr	r1, [r7, #4]
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f002 f844 	bl	8014d28 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012ca0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ca4:	4920      	ldr	r1, [pc, #128]	; (8012d28 <etharp_update_arp_entry+0x148>)
 8012ca6:	4613      	mov	r3, r2
 8012ca8:	005b      	lsls	r3, r3, #1
 8012caa:	4413      	add	r3, r2
 8012cac:	00db      	lsls	r3, r3, #3
 8012cae:	440b      	add	r3, r1
 8012cb0:	3312      	adds	r3, #18
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012cb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cba:	491b      	ldr	r1, [pc, #108]	; (8012d28 <etharp_update_arp_entry+0x148>)
 8012cbc:	4613      	mov	r3, r2
 8012cbe:	005b      	lsls	r3, r3, #1
 8012cc0:	4413      	add	r3, r2
 8012cc2:	00db      	lsls	r3, r3, #3
 8012cc4:	440b      	add	r3, r1
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d021      	beq.n	8012d10 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012ccc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cd0:	4915      	ldr	r1, [pc, #84]	; (8012d28 <etharp_update_arp_entry+0x148>)
 8012cd2:	4613      	mov	r3, r2
 8012cd4:	005b      	lsls	r3, r3, #1
 8012cd6:	4413      	add	r3, r2
 8012cd8:	00db      	lsls	r3, r3, #3
 8012cda:	440b      	add	r3, r1
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012ce0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ce4:	4910      	ldr	r1, [pc, #64]	; (8012d28 <etharp_update_arp_entry+0x148>)
 8012ce6:	4613      	mov	r3, r2
 8012ce8:	005b      	lsls	r3, r3, #1
 8012cea:	4413      	add	r3, r2
 8012cec:	00db      	lsls	r3, r3, #3
 8012cee:	440b      	add	r3, r1
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012cfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	6939      	ldr	r1, [r7, #16]
 8012d04:	68f8      	ldr	r0, [r7, #12]
 8012d06:	f001 ff91 	bl	8014c2c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012d0a:	6938      	ldr	r0, [r7, #16]
 8012d0c:	f7f8 ff2e 	bl	800bb6c <pbuf_free>
  }
  return ERR_OK;
 8012d10:	2300      	movs	r3, #0
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3718      	adds	r7, #24
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	08019588 	.word	0x08019588
 8012d20:	08019680 	.word	0x08019680
 8012d24:	08019600 	.word	0x08019600
 8012d28:	20000a58 	.word	0x20000a58

08012d2c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b084      	sub	sp, #16
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d34:	2300      	movs	r3, #0
 8012d36:	60fb      	str	r3, [r7, #12]
 8012d38:	e01e      	b.n	8012d78 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012d3a:	4913      	ldr	r1, [pc, #76]	; (8012d88 <etharp_cleanup_netif+0x5c>)
 8012d3c:	68fa      	ldr	r2, [r7, #12]
 8012d3e:	4613      	mov	r3, r2
 8012d40:	005b      	lsls	r3, r3, #1
 8012d42:	4413      	add	r3, r2
 8012d44:	00db      	lsls	r3, r3, #3
 8012d46:	440b      	add	r3, r1
 8012d48:	3314      	adds	r3, #20
 8012d4a:	781b      	ldrb	r3, [r3, #0]
 8012d4c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012d4e:	7afb      	ldrb	r3, [r7, #11]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d00e      	beq.n	8012d72 <etharp_cleanup_netif+0x46>
 8012d54:	490c      	ldr	r1, [pc, #48]	; (8012d88 <etharp_cleanup_netif+0x5c>)
 8012d56:	68fa      	ldr	r2, [r7, #12]
 8012d58:	4613      	mov	r3, r2
 8012d5a:	005b      	lsls	r3, r3, #1
 8012d5c:	4413      	add	r3, r2
 8012d5e:	00db      	lsls	r3, r3, #3
 8012d60:	440b      	add	r3, r1
 8012d62:	3308      	adds	r3, #8
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	687a      	ldr	r2, [r7, #4]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d102      	bne.n	8012d72 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012d6c:	68f8      	ldr	r0, [r7, #12]
 8012d6e:	f7ff fce5 	bl	801273c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	3301      	adds	r3, #1
 8012d76:	60fb      	str	r3, [r7, #12]
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2b09      	cmp	r3, #9
 8012d7c:	dddd      	ble.n	8012d3a <etharp_cleanup_netif+0xe>
    }
  }
}
 8012d7e:	bf00      	nop
 8012d80:	bf00      	nop
 8012d82:	3710      	adds	r7, #16
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}
 8012d88:	20000a58 	.word	0x20000a58

08012d8c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012d8c:	b5b0      	push	{r4, r5, r7, lr}
 8012d8e:	b08a      	sub	sp, #40	; 0x28
 8012d90:	af04      	add	r7, sp, #16
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d107      	bne.n	8012dac <etharp_input+0x20>
 8012d9c:	4b3d      	ldr	r3, [pc, #244]	; (8012e94 <etharp_input+0x108>)
 8012d9e:	f240 228a 	movw	r2, #650	; 0x28a
 8012da2:	493d      	ldr	r1, [pc, #244]	; (8012e98 <etharp_input+0x10c>)
 8012da4:	483d      	ldr	r0, [pc, #244]	; (8012e9c <etharp_input+0x110>)
 8012da6:	f001 ffef 	bl	8014d88 <iprintf>
 8012daa:	e06f      	b.n	8012e8c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	685b      	ldr	r3, [r3, #4]
 8012db0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012db2:	693b      	ldr	r3, [r7, #16]
 8012db4:	881b      	ldrh	r3, [r3, #0]
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012dbc:	d10c      	bne.n	8012dd8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012dc2:	2b06      	cmp	r3, #6
 8012dc4:	d108      	bne.n	8012dd8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012dca:	2b04      	cmp	r3, #4
 8012dcc:	d104      	bne.n	8012dd8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012dce:	693b      	ldr	r3, [r7, #16]
 8012dd0:	885b      	ldrh	r3, [r3, #2]
 8012dd2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012dd4:	2b08      	cmp	r3, #8
 8012dd6:	d003      	beq.n	8012de0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f7f8 fec7 	bl	800bb6c <pbuf_free>
    return;
 8012dde:	e055      	b.n	8012e8c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	330e      	adds	r3, #14
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012de8:	693b      	ldr	r3, [r7, #16]
 8012dea:	3318      	adds	r3, #24
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	3304      	adds	r3, #4
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d102      	bne.n	8012e00 <etharp_input+0x74>
    for_us = 0;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	75fb      	strb	r3, [r7, #23]
 8012dfe:	e009      	b.n	8012e14 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012e00:	68ba      	ldr	r2, [r7, #8]
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	3304      	adds	r3, #4
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	bf0c      	ite	eq
 8012e0c:	2301      	moveq	r3, #1
 8012e0e:	2300      	movne	r3, #0
 8012e10:	b2db      	uxtb	r3, r3
 8012e12:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	f103 0208 	add.w	r2, r3, #8
 8012e1a:	7dfb      	ldrb	r3, [r7, #23]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d001      	beq.n	8012e24 <etharp_input+0x98>
 8012e20:	2301      	movs	r3, #1
 8012e22:	e000      	b.n	8012e26 <etharp_input+0x9a>
 8012e24:	2302      	movs	r3, #2
 8012e26:	f107 010c 	add.w	r1, r7, #12
 8012e2a:	6838      	ldr	r0, [r7, #0]
 8012e2c:	f7ff fed8 	bl	8012be0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	88db      	ldrh	r3, [r3, #6]
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e3a:	d003      	beq.n	8012e44 <etharp_input+0xb8>
 8012e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e40:	d01e      	beq.n	8012e80 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012e42:	e020      	b.n	8012e86 <etharp_input+0xfa>
      if (for_us) {
 8012e44:	7dfb      	ldrb	r3, [r7, #23]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d01c      	beq.n	8012e84 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012e60:	693a      	ldr	r2, [r7, #16]
 8012e62:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012e64:	2102      	movs	r1, #2
 8012e66:	9103      	str	r1, [sp, #12]
 8012e68:	f107 010c 	add.w	r1, r7, #12
 8012e6c:	9102      	str	r1, [sp, #8]
 8012e6e:	9201      	str	r2, [sp, #4]
 8012e70:	9300      	str	r3, [sp, #0]
 8012e72:	462b      	mov	r3, r5
 8012e74:	4622      	mov	r2, r4
 8012e76:	4601      	mov	r1, r0
 8012e78:	6838      	ldr	r0, [r7, #0]
 8012e7a:	f000 faeb 	bl	8013454 <etharp_raw>
      break;
 8012e7e:	e001      	b.n	8012e84 <etharp_input+0xf8>
      break;
 8012e80:	bf00      	nop
 8012e82:	e000      	b.n	8012e86 <etharp_input+0xfa>
      break;
 8012e84:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7f8 fe70 	bl	800bb6c <pbuf_free>
}
 8012e8c:	3718      	adds	r7, #24
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bdb0      	pop	{r4, r5, r7, pc}
 8012e92:	bf00      	nop
 8012e94:	08019588 	.word	0x08019588
 8012e98:	080196d8 	.word	0x080196d8
 8012e9c:	08019600 	.word	0x08019600

08012ea0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b086      	sub	sp, #24
 8012ea4:	af02      	add	r7, sp, #8
 8012ea6:	60f8      	str	r0, [r7, #12]
 8012ea8:	60b9      	str	r1, [r7, #8]
 8012eaa:	4613      	mov	r3, r2
 8012eac:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012eae:	79fa      	ldrb	r2, [r7, #7]
 8012eb0:	4944      	ldr	r1, [pc, #272]	; (8012fc4 <etharp_output_to_arp_index+0x124>)
 8012eb2:	4613      	mov	r3, r2
 8012eb4:	005b      	lsls	r3, r3, #1
 8012eb6:	4413      	add	r3, r2
 8012eb8:	00db      	lsls	r3, r3, #3
 8012eba:	440b      	add	r3, r1
 8012ebc:	3314      	adds	r3, #20
 8012ebe:	781b      	ldrb	r3, [r3, #0]
 8012ec0:	2b01      	cmp	r3, #1
 8012ec2:	d806      	bhi.n	8012ed2 <etharp_output_to_arp_index+0x32>
 8012ec4:	4b40      	ldr	r3, [pc, #256]	; (8012fc8 <etharp_output_to_arp_index+0x128>)
 8012ec6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8012eca:	4940      	ldr	r1, [pc, #256]	; (8012fcc <etharp_output_to_arp_index+0x12c>)
 8012ecc:	4840      	ldr	r0, [pc, #256]	; (8012fd0 <etharp_output_to_arp_index+0x130>)
 8012ece:	f001 ff5b 	bl	8014d88 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012ed2:	79fa      	ldrb	r2, [r7, #7]
 8012ed4:	493b      	ldr	r1, [pc, #236]	; (8012fc4 <etharp_output_to_arp_index+0x124>)
 8012ed6:	4613      	mov	r3, r2
 8012ed8:	005b      	lsls	r3, r3, #1
 8012eda:	4413      	add	r3, r2
 8012edc:	00db      	lsls	r3, r3, #3
 8012ede:	440b      	add	r3, r1
 8012ee0:	3314      	adds	r3, #20
 8012ee2:	781b      	ldrb	r3, [r3, #0]
 8012ee4:	2b02      	cmp	r3, #2
 8012ee6:	d153      	bne.n	8012f90 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012ee8:	79fa      	ldrb	r2, [r7, #7]
 8012eea:	4936      	ldr	r1, [pc, #216]	; (8012fc4 <etharp_output_to_arp_index+0x124>)
 8012eec:	4613      	mov	r3, r2
 8012eee:	005b      	lsls	r3, r3, #1
 8012ef0:	4413      	add	r3, r2
 8012ef2:	00db      	lsls	r3, r3, #3
 8012ef4:	440b      	add	r3, r1
 8012ef6:	3312      	adds	r3, #18
 8012ef8:	881b      	ldrh	r3, [r3, #0]
 8012efa:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012efe:	d919      	bls.n	8012f34 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012f00:	79fa      	ldrb	r2, [r7, #7]
 8012f02:	4613      	mov	r3, r2
 8012f04:	005b      	lsls	r3, r3, #1
 8012f06:	4413      	add	r3, r2
 8012f08:	00db      	lsls	r3, r3, #3
 8012f0a:	4a2e      	ldr	r2, [pc, #184]	; (8012fc4 <etharp_output_to_arp_index+0x124>)
 8012f0c:	4413      	add	r3, r2
 8012f0e:	3304      	adds	r3, #4
 8012f10:	4619      	mov	r1, r3
 8012f12:	68f8      	ldr	r0, [r7, #12]
 8012f14:	f000 fb4c 	bl	80135b0 <etharp_request>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d138      	bne.n	8012f90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012f1e:	79fa      	ldrb	r2, [r7, #7]
 8012f20:	4928      	ldr	r1, [pc, #160]	; (8012fc4 <etharp_output_to_arp_index+0x124>)
 8012f22:	4613      	mov	r3, r2
 8012f24:	005b      	lsls	r3, r3, #1
 8012f26:	4413      	add	r3, r2
 8012f28:	00db      	lsls	r3, r3, #3
 8012f2a:	440b      	add	r3, r1
 8012f2c:	3314      	adds	r3, #20
 8012f2e:	2203      	movs	r2, #3
 8012f30:	701a      	strb	r2, [r3, #0]
 8012f32:	e02d      	b.n	8012f90 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012f34:	79fa      	ldrb	r2, [r7, #7]
 8012f36:	4923      	ldr	r1, [pc, #140]	; (8012fc4 <etharp_output_to_arp_index+0x124>)
 8012f38:	4613      	mov	r3, r2
 8012f3a:	005b      	lsls	r3, r3, #1
 8012f3c:	4413      	add	r3, r2
 8012f3e:	00db      	lsls	r3, r3, #3
 8012f40:	440b      	add	r3, r1
 8012f42:	3312      	adds	r3, #18
 8012f44:	881b      	ldrh	r3, [r3, #0]
 8012f46:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012f4a:	d321      	bcc.n	8012f90 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012f4c:	79fa      	ldrb	r2, [r7, #7]
 8012f4e:	4613      	mov	r3, r2
 8012f50:	005b      	lsls	r3, r3, #1
 8012f52:	4413      	add	r3, r2
 8012f54:	00db      	lsls	r3, r3, #3
 8012f56:	4a1b      	ldr	r2, [pc, #108]	; (8012fc4 <etharp_output_to_arp_index+0x124>)
 8012f58:	4413      	add	r3, r2
 8012f5a:	1d19      	adds	r1, r3, #4
 8012f5c:	79fa      	ldrb	r2, [r7, #7]
 8012f5e:	4613      	mov	r3, r2
 8012f60:	005b      	lsls	r3, r3, #1
 8012f62:	4413      	add	r3, r2
 8012f64:	00db      	lsls	r3, r3, #3
 8012f66:	3308      	adds	r3, #8
 8012f68:	4a16      	ldr	r2, [pc, #88]	; (8012fc4 <etharp_output_to_arp_index+0x124>)
 8012f6a:	4413      	add	r3, r2
 8012f6c:	3304      	adds	r3, #4
 8012f6e:	461a      	mov	r2, r3
 8012f70:	68f8      	ldr	r0, [r7, #12]
 8012f72:	f000 fafb 	bl	801356c <etharp_request_dst>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d109      	bne.n	8012f90 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012f7c:	79fa      	ldrb	r2, [r7, #7]
 8012f7e:	4911      	ldr	r1, [pc, #68]	; (8012fc4 <etharp_output_to_arp_index+0x124>)
 8012f80:	4613      	mov	r3, r2
 8012f82:	005b      	lsls	r3, r3, #1
 8012f84:	4413      	add	r3, r2
 8012f86:	00db      	lsls	r3, r3, #3
 8012f88:	440b      	add	r3, r1
 8012f8a:	3314      	adds	r3, #20
 8012f8c:	2203      	movs	r2, #3
 8012f8e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012f96:	79fa      	ldrb	r2, [r7, #7]
 8012f98:	4613      	mov	r3, r2
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	4413      	add	r3, r2
 8012f9e:	00db      	lsls	r3, r3, #3
 8012fa0:	3308      	adds	r3, #8
 8012fa2:	4a08      	ldr	r2, [pc, #32]	; (8012fc4 <etharp_output_to_arp_index+0x124>)
 8012fa4:	4413      	add	r3, r2
 8012fa6:	3304      	adds	r3, #4
 8012fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012fac:	9200      	str	r2, [sp, #0]
 8012fae:	460a      	mov	r2, r1
 8012fb0:	68b9      	ldr	r1, [r7, #8]
 8012fb2:	68f8      	ldr	r0, [r7, #12]
 8012fb4:	f001 fe3a 	bl	8014c2c <ethernet_output>
 8012fb8:	4603      	mov	r3, r0
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3710      	adds	r7, #16
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	bd80      	pop	{r7, pc}
 8012fc2:	bf00      	nop
 8012fc4:	20000a58 	.word	0x20000a58
 8012fc8:	08019588 	.word	0x08019588
 8012fcc:	080196f8 	.word	0x080196f8
 8012fd0:	08019600 	.word	0x08019600

08012fd4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b08a      	sub	sp, #40	; 0x28
 8012fd8:	af02      	add	r7, sp, #8
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d106      	bne.n	8012ff8 <etharp_output+0x24>
 8012fea:	4b73      	ldr	r3, [pc, #460]	; (80131b8 <etharp_output+0x1e4>)
 8012fec:	f240 321e 	movw	r2, #798	; 0x31e
 8012ff0:	4972      	ldr	r1, [pc, #456]	; (80131bc <etharp_output+0x1e8>)
 8012ff2:	4873      	ldr	r0, [pc, #460]	; (80131c0 <etharp_output+0x1ec>)
 8012ff4:	f001 fec8 	bl	8014d88 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012ff8:	68bb      	ldr	r3, [r7, #8]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d106      	bne.n	801300c <etharp_output+0x38>
 8012ffe:	4b6e      	ldr	r3, [pc, #440]	; (80131b8 <etharp_output+0x1e4>)
 8013000:	f240 321f 	movw	r2, #799	; 0x31f
 8013004:	496f      	ldr	r1, [pc, #444]	; (80131c4 <etharp_output+0x1f0>)
 8013006:	486e      	ldr	r0, [pc, #440]	; (80131c0 <etharp_output+0x1ec>)
 8013008:	f001 febe 	bl	8014d88 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d106      	bne.n	8013020 <etharp_output+0x4c>
 8013012:	4b69      	ldr	r3, [pc, #420]	; (80131b8 <etharp_output+0x1e4>)
 8013014:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013018:	496b      	ldr	r1, [pc, #428]	; (80131c8 <etharp_output+0x1f4>)
 801301a:	4869      	ldr	r0, [pc, #420]	; (80131c0 <etharp_output+0x1ec>)
 801301c:	f001 feb4 	bl	8014d88 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	68f9      	ldr	r1, [r7, #12]
 8013026:	4618      	mov	r0, r3
 8013028:	f000 fef8 	bl	8013e1c <ip4_addr_isbroadcast_u32>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d002      	beq.n	8013038 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013032:	4b66      	ldr	r3, [pc, #408]	; (80131cc <etharp_output+0x1f8>)
 8013034:	61fb      	str	r3, [r7, #28]
 8013036:	e0af      	b.n	8013198 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013040:	2be0      	cmp	r3, #224	; 0xe0
 8013042:	d118      	bne.n	8013076 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013044:	2301      	movs	r3, #1
 8013046:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013048:	2300      	movs	r3, #0
 801304a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801304c:	235e      	movs	r3, #94	; 0x5e
 801304e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	3301      	adds	r3, #1
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801305a:	b2db      	uxtb	r3, r3
 801305c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	3302      	adds	r3, #2
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	3303      	adds	r3, #3
 801306a:	781b      	ldrb	r3, [r3, #0]
 801306c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801306e:	f107 0310 	add.w	r3, r7, #16
 8013072:	61fb      	str	r3, [r7, #28]
 8013074:	e090      	b.n	8013198 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	681a      	ldr	r2, [r3, #0]
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	3304      	adds	r3, #4
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	405a      	eors	r2, r3
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	3308      	adds	r3, #8
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	4013      	ands	r3, r2
 801308a:	2b00      	cmp	r3, #0
 801308c:	d012      	beq.n	80130b4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013094:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013098:	4293      	cmp	r3, r2
 801309a:	d00b      	beq.n	80130b4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	330c      	adds	r3, #12
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d003      	beq.n	80130ae <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	330c      	adds	r3, #12
 80130aa:	61bb      	str	r3, [r7, #24]
 80130ac:	e002      	b.n	80130b4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80130ae:	f06f 0303 	mvn.w	r3, #3
 80130b2:	e07d      	b.n	80131b0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80130b4:	4b46      	ldr	r3, [pc, #280]	; (80131d0 <etharp_output+0x1fc>)
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	4619      	mov	r1, r3
 80130ba:	4a46      	ldr	r2, [pc, #280]	; (80131d4 <etharp_output+0x200>)
 80130bc:	460b      	mov	r3, r1
 80130be:	005b      	lsls	r3, r3, #1
 80130c0:	440b      	add	r3, r1
 80130c2:	00db      	lsls	r3, r3, #3
 80130c4:	4413      	add	r3, r2
 80130c6:	3314      	adds	r3, #20
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	2b01      	cmp	r3, #1
 80130cc:	d925      	bls.n	801311a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80130ce:	4b40      	ldr	r3, [pc, #256]	; (80131d0 <etharp_output+0x1fc>)
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	4619      	mov	r1, r3
 80130d4:	4a3f      	ldr	r2, [pc, #252]	; (80131d4 <etharp_output+0x200>)
 80130d6:	460b      	mov	r3, r1
 80130d8:	005b      	lsls	r3, r3, #1
 80130da:	440b      	add	r3, r1
 80130dc:	00db      	lsls	r3, r3, #3
 80130de:	4413      	add	r3, r2
 80130e0:	3308      	adds	r3, #8
 80130e2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80130e4:	68fa      	ldr	r2, [r7, #12]
 80130e6:	429a      	cmp	r2, r3
 80130e8:	d117      	bne.n	801311a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80130ea:	69bb      	ldr	r3, [r7, #24]
 80130ec:	681a      	ldr	r2, [r3, #0]
 80130ee:	4b38      	ldr	r3, [pc, #224]	; (80131d0 <etharp_output+0x1fc>)
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	4618      	mov	r0, r3
 80130f4:	4937      	ldr	r1, [pc, #220]	; (80131d4 <etharp_output+0x200>)
 80130f6:	4603      	mov	r3, r0
 80130f8:	005b      	lsls	r3, r3, #1
 80130fa:	4403      	add	r3, r0
 80130fc:	00db      	lsls	r3, r3, #3
 80130fe:	440b      	add	r3, r1
 8013100:	3304      	adds	r3, #4
 8013102:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013104:	429a      	cmp	r2, r3
 8013106:	d108      	bne.n	801311a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013108:	4b31      	ldr	r3, [pc, #196]	; (80131d0 <etharp_output+0x1fc>)
 801310a:	781b      	ldrb	r3, [r3, #0]
 801310c:	461a      	mov	r2, r3
 801310e:	68b9      	ldr	r1, [r7, #8]
 8013110:	68f8      	ldr	r0, [r7, #12]
 8013112:	f7ff fec5 	bl	8012ea0 <etharp_output_to_arp_index>
 8013116:	4603      	mov	r3, r0
 8013118:	e04a      	b.n	80131b0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801311a:	2300      	movs	r3, #0
 801311c:	75fb      	strb	r3, [r7, #23]
 801311e:	e031      	b.n	8013184 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013120:	7dfa      	ldrb	r2, [r7, #23]
 8013122:	492c      	ldr	r1, [pc, #176]	; (80131d4 <etharp_output+0x200>)
 8013124:	4613      	mov	r3, r2
 8013126:	005b      	lsls	r3, r3, #1
 8013128:	4413      	add	r3, r2
 801312a:	00db      	lsls	r3, r3, #3
 801312c:	440b      	add	r3, r1
 801312e:	3314      	adds	r3, #20
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	2b01      	cmp	r3, #1
 8013134:	d923      	bls.n	801317e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013136:	7dfa      	ldrb	r2, [r7, #23]
 8013138:	4926      	ldr	r1, [pc, #152]	; (80131d4 <etharp_output+0x200>)
 801313a:	4613      	mov	r3, r2
 801313c:	005b      	lsls	r3, r3, #1
 801313e:	4413      	add	r3, r2
 8013140:	00db      	lsls	r3, r3, #3
 8013142:	440b      	add	r3, r1
 8013144:	3308      	adds	r3, #8
 8013146:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013148:	68fa      	ldr	r2, [r7, #12]
 801314a:	429a      	cmp	r2, r3
 801314c:	d117      	bne.n	801317e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	6819      	ldr	r1, [r3, #0]
 8013152:	7dfa      	ldrb	r2, [r7, #23]
 8013154:	481f      	ldr	r0, [pc, #124]	; (80131d4 <etharp_output+0x200>)
 8013156:	4613      	mov	r3, r2
 8013158:	005b      	lsls	r3, r3, #1
 801315a:	4413      	add	r3, r2
 801315c:	00db      	lsls	r3, r3, #3
 801315e:	4403      	add	r3, r0
 8013160:	3304      	adds	r3, #4
 8013162:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013164:	4299      	cmp	r1, r3
 8013166:	d10a      	bne.n	801317e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013168:	4a19      	ldr	r2, [pc, #100]	; (80131d0 <etharp_output+0x1fc>)
 801316a:	7dfb      	ldrb	r3, [r7, #23]
 801316c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801316e:	7dfb      	ldrb	r3, [r7, #23]
 8013170:	461a      	mov	r2, r3
 8013172:	68b9      	ldr	r1, [r7, #8]
 8013174:	68f8      	ldr	r0, [r7, #12]
 8013176:	f7ff fe93 	bl	8012ea0 <etharp_output_to_arp_index>
 801317a:	4603      	mov	r3, r0
 801317c:	e018      	b.n	80131b0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801317e:	7dfb      	ldrb	r3, [r7, #23]
 8013180:	3301      	adds	r3, #1
 8013182:	75fb      	strb	r3, [r7, #23]
 8013184:	7dfb      	ldrb	r3, [r7, #23]
 8013186:	2b09      	cmp	r3, #9
 8013188:	d9ca      	bls.n	8013120 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801318a:	68ba      	ldr	r2, [r7, #8]
 801318c:	69b9      	ldr	r1, [r7, #24]
 801318e:	68f8      	ldr	r0, [r7, #12]
 8013190:	f000 f822 	bl	80131d8 <etharp_query>
 8013194:	4603      	mov	r3, r0
 8013196:	e00b      	b.n	80131b0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801319e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80131a2:	9300      	str	r3, [sp, #0]
 80131a4:	69fb      	ldr	r3, [r7, #28]
 80131a6:	68b9      	ldr	r1, [r7, #8]
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f001 fd3f 	bl	8014c2c <ethernet_output>
 80131ae:	4603      	mov	r3, r0
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3720      	adds	r7, #32
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}
 80131b8:	08019588 	.word	0x08019588
 80131bc:	080196d8 	.word	0x080196d8
 80131c0:	08019600 	.word	0x08019600
 80131c4:	08019728 	.word	0x08019728
 80131c8:	080196c8 	.word	0x080196c8
 80131cc:	0801f03c 	.word	0x0801f03c
 80131d0:	20000b48 	.word	0x20000b48
 80131d4:	20000a58 	.word	0x20000a58

080131d8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b08c      	sub	sp, #48	; 0x30
 80131dc:	af02      	add	r7, sp, #8
 80131de:	60f8      	str	r0, [r7, #12]
 80131e0:	60b9      	str	r1, [r7, #8]
 80131e2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	3326      	adds	r3, #38	; 0x26
 80131e8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80131ea:	23ff      	movs	r3, #255	; 0xff
 80131ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80131f0:	2300      	movs	r3, #0
 80131f2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	681b      	ldr	r3, [r3, #0]
 80131f8:	68f9      	ldr	r1, [r7, #12]
 80131fa:	4618      	mov	r0, r3
 80131fc:	f000 fe0e 	bl	8013e1c <ip4_addr_isbroadcast_u32>
 8013200:	4603      	mov	r3, r0
 8013202:	2b00      	cmp	r3, #0
 8013204:	d10c      	bne.n	8013220 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801320e:	2be0      	cmp	r3, #224	; 0xe0
 8013210:	d006      	beq.n	8013220 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d003      	beq.n	8013220 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d102      	bne.n	8013226 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013220:	f06f 030f 	mvn.w	r3, #15
 8013224:	e101      	b.n	801342a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013226:	68fa      	ldr	r2, [r7, #12]
 8013228:	2101      	movs	r1, #1
 801322a:	68b8      	ldr	r0, [r7, #8]
 801322c:	f7ff fb60 	bl	80128f0 <etharp_find_entry>
 8013230:	4603      	mov	r3, r0
 8013232:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013234:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013238:	2b00      	cmp	r3, #0
 801323a:	da02      	bge.n	8013242 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801323c:	8a7b      	ldrh	r3, [r7, #18]
 801323e:	b25b      	sxtb	r3, r3
 8013240:	e0f3      	b.n	801342a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013242:	8a7b      	ldrh	r3, [r7, #18]
 8013244:	2b7e      	cmp	r3, #126	; 0x7e
 8013246:	d906      	bls.n	8013256 <etharp_query+0x7e>
 8013248:	4b7a      	ldr	r3, [pc, #488]	; (8013434 <etharp_query+0x25c>)
 801324a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801324e:	497a      	ldr	r1, [pc, #488]	; (8013438 <etharp_query+0x260>)
 8013250:	487a      	ldr	r0, [pc, #488]	; (801343c <etharp_query+0x264>)
 8013252:	f001 fd99 	bl	8014d88 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013256:	8a7b      	ldrh	r3, [r7, #18]
 8013258:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801325a:	7c7a      	ldrb	r2, [r7, #17]
 801325c:	4978      	ldr	r1, [pc, #480]	; (8013440 <etharp_query+0x268>)
 801325e:	4613      	mov	r3, r2
 8013260:	005b      	lsls	r3, r3, #1
 8013262:	4413      	add	r3, r2
 8013264:	00db      	lsls	r3, r3, #3
 8013266:	440b      	add	r3, r1
 8013268:	3314      	adds	r3, #20
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d115      	bne.n	801329c <etharp_query+0xc4>
    is_new_entry = 1;
 8013270:	2301      	movs	r3, #1
 8013272:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013274:	7c7a      	ldrb	r2, [r7, #17]
 8013276:	4972      	ldr	r1, [pc, #456]	; (8013440 <etharp_query+0x268>)
 8013278:	4613      	mov	r3, r2
 801327a:	005b      	lsls	r3, r3, #1
 801327c:	4413      	add	r3, r2
 801327e:	00db      	lsls	r3, r3, #3
 8013280:	440b      	add	r3, r1
 8013282:	3314      	adds	r3, #20
 8013284:	2201      	movs	r2, #1
 8013286:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013288:	7c7a      	ldrb	r2, [r7, #17]
 801328a:	496d      	ldr	r1, [pc, #436]	; (8013440 <etharp_query+0x268>)
 801328c:	4613      	mov	r3, r2
 801328e:	005b      	lsls	r3, r3, #1
 8013290:	4413      	add	r3, r2
 8013292:	00db      	lsls	r3, r3, #3
 8013294:	440b      	add	r3, r1
 8013296:	3308      	adds	r3, #8
 8013298:	68fa      	ldr	r2, [r7, #12]
 801329a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801329c:	7c7a      	ldrb	r2, [r7, #17]
 801329e:	4968      	ldr	r1, [pc, #416]	; (8013440 <etharp_query+0x268>)
 80132a0:	4613      	mov	r3, r2
 80132a2:	005b      	lsls	r3, r3, #1
 80132a4:	4413      	add	r3, r2
 80132a6:	00db      	lsls	r3, r3, #3
 80132a8:	440b      	add	r3, r1
 80132aa:	3314      	adds	r3, #20
 80132ac:	781b      	ldrb	r3, [r3, #0]
 80132ae:	2b01      	cmp	r3, #1
 80132b0:	d011      	beq.n	80132d6 <etharp_query+0xfe>
 80132b2:	7c7a      	ldrb	r2, [r7, #17]
 80132b4:	4962      	ldr	r1, [pc, #392]	; (8013440 <etharp_query+0x268>)
 80132b6:	4613      	mov	r3, r2
 80132b8:	005b      	lsls	r3, r3, #1
 80132ba:	4413      	add	r3, r2
 80132bc:	00db      	lsls	r3, r3, #3
 80132be:	440b      	add	r3, r1
 80132c0:	3314      	adds	r3, #20
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	2b01      	cmp	r3, #1
 80132c6:	d806      	bhi.n	80132d6 <etharp_query+0xfe>
 80132c8:	4b5a      	ldr	r3, [pc, #360]	; (8013434 <etharp_query+0x25c>)
 80132ca:	f240 32cd 	movw	r2, #973	; 0x3cd
 80132ce:	495d      	ldr	r1, [pc, #372]	; (8013444 <etharp_query+0x26c>)
 80132d0:	485a      	ldr	r0, [pc, #360]	; (801343c <etharp_query+0x264>)
 80132d2:	f001 fd59 	bl	8014d88 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80132d6:	6a3b      	ldr	r3, [r7, #32]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d102      	bne.n	80132e2 <etharp_query+0x10a>
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d10c      	bne.n	80132fc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80132e2:	68b9      	ldr	r1, [r7, #8]
 80132e4:	68f8      	ldr	r0, [r7, #12]
 80132e6:	f000 f963 	bl	80135b0 <etharp_request>
 80132ea:	4603      	mov	r3, r0
 80132ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d102      	bne.n	80132fc <etharp_query+0x124>
      return result;
 80132f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80132fa:	e096      	b.n	801342a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d106      	bne.n	8013310 <etharp_query+0x138>
 8013302:	4b4c      	ldr	r3, [pc, #304]	; (8013434 <etharp_query+0x25c>)
 8013304:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013308:	494f      	ldr	r1, [pc, #316]	; (8013448 <etharp_query+0x270>)
 801330a:	484c      	ldr	r0, [pc, #304]	; (801343c <etharp_query+0x264>)
 801330c:	f001 fd3c 	bl	8014d88 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013310:	7c7a      	ldrb	r2, [r7, #17]
 8013312:	494b      	ldr	r1, [pc, #300]	; (8013440 <etharp_query+0x268>)
 8013314:	4613      	mov	r3, r2
 8013316:	005b      	lsls	r3, r3, #1
 8013318:	4413      	add	r3, r2
 801331a:	00db      	lsls	r3, r3, #3
 801331c:	440b      	add	r3, r1
 801331e:	3314      	adds	r3, #20
 8013320:	781b      	ldrb	r3, [r3, #0]
 8013322:	2b01      	cmp	r3, #1
 8013324:	d917      	bls.n	8013356 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013326:	4a49      	ldr	r2, [pc, #292]	; (801344c <etharp_query+0x274>)
 8013328:	7c7b      	ldrb	r3, [r7, #17]
 801332a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801332c:	7c7a      	ldrb	r2, [r7, #17]
 801332e:	4613      	mov	r3, r2
 8013330:	005b      	lsls	r3, r3, #1
 8013332:	4413      	add	r3, r2
 8013334:	00db      	lsls	r3, r3, #3
 8013336:	3308      	adds	r3, #8
 8013338:	4a41      	ldr	r2, [pc, #260]	; (8013440 <etharp_query+0x268>)
 801333a:	4413      	add	r3, r2
 801333c:	3304      	adds	r3, #4
 801333e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013342:	9200      	str	r2, [sp, #0]
 8013344:	697a      	ldr	r2, [r7, #20]
 8013346:	6879      	ldr	r1, [r7, #4]
 8013348:	68f8      	ldr	r0, [r7, #12]
 801334a:	f001 fc6f 	bl	8014c2c <ethernet_output>
 801334e:	4603      	mov	r3, r0
 8013350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013354:	e067      	b.n	8013426 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013356:	7c7a      	ldrb	r2, [r7, #17]
 8013358:	4939      	ldr	r1, [pc, #228]	; (8013440 <etharp_query+0x268>)
 801335a:	4613      	mov	r3, r2
 801335c:	005b      	lsls	r3, r3, #1
 801335e:	4413      	add	r3, r2
 8013360:	00db      	lsls	r3, r3, #3
 8013362:	440b      	add	r3, r1
 8013364:	3314      	adds	r3, #20
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	2b01      	cmp	r3, #1
 801336a:	d15c      	bne.n	8013426 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801336c:	2300      	movs	r3, #0
 801336e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013374:	e01c      	b.n	80133b0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013376:	69fb      	ldr	r3, [r7, #28]
 8013378:	895a      	ldrh	r2, [r3, #10]
 801337a:	69fb      	ldr	r3, [r7, #28]
 801337c:	891b      	ldrh	r3, [r3, #8]
 801337e:	429a      	cmp	r2, r3
 8013380:	d10a      	bne.n	8013398 <etharp_query+0x1c0>
 8013382:	69fb      	ldr	r3, [r7, #28]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d006      	beq.n	8013398 <etharp_query+0x1c0>
 801338a:	4b2a      	ldr	r3, [pc, #168]	; (8013434 <etharp_query+0x25c>)
 801338c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013390:	492f      	ldr	r1, [pc, #188]	; (8013450 <etharp_query+0x278>)
 8013392:	482a      	ldr	r0, [pc, #168]	; (801343c <etharp_query+0x264>)
 8013394:	f001 fcf8 	bl	8014d88 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013398:	69fb      	ldr	r3, [r7, #28]
 801339a:	7b1b      	ldrb	r3, [r3, #12]
 801339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d002      	beq.n	80133aa <etharp_query+0x1d2>
        copy_needed = 1;
 80133a4:	2301      	movs	r3, #1
 80133a6:	61bb      	str	r3, [r7, #24]
        break;
 80133a8:	e005      	b.n	80133b6 <etharp_query+0x1de>
      }
      p = p->next;
 80133aa:	69fb      	ldr	r3, [r7, #28]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 80133b0:	69fb      	ldr	r3, [r7, #28]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d1df      	bne.n	8013376 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80133b6:	69bb      	ldr	r3, [r7, #24]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d007      	beq.n	80133cc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	f44f 7120 	mov.w	r1, #640	; 0x280
 80133c2:	200e      	movs	r0, #14
 80133c4:	f7f8 fe2e 	bl	800c024 <pbuf_clone>
 80133c8:	61f8      	str	r0, [r7, #28]
 80133ca:	e004      	b.n	80133d6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80133d0:	69f8      	ldr	r0, [r7, #28]
 80133d2:	f7f8 fc6b 	bl	800bcac <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d021      	beq.n	8013420 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80133dc:	7c7a      	ldrb	r2, [r7, #17]
 80133de:	4918      	ldr	r1, [pc, #96]	; (8013440 <etharp_query+0x268>)
 80133e0:	4613      	mov	r3, r2
 80133e2:	005b      	lsls	r3, r3, #1
 80133e4:	4413      	add	r3, r2
 80133e6:	00db      	lsls	r3, r3, #3
 80133e8:	440b      	add	r3, r1
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d00a      	beq.n	8013406 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80133f0:	7c7a      	ldrb	r2, [r7, #17]
 80133f2:	4913      	ldr	r1, [pc, #76]	; (8013440 <etharp_query+0x268>)
 80133f4:	4613      	mov	r3, r2
 80133f6:	005b      	lsls	r3, r3, #1
 80133f8:	4413      	add	r3, r2
 80133fa:	00db      	lsls	r3, r3, #3
 80133fc:	440b      	add	r3, r1
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	4618      	mov	r0, r3
 8013402:	f7f8 fbb3 	bl	800bb6c <pbuf_free>
      }
      arp_table[i].q = p;
 8013406:	7c7a      	ldrb	r2, [r7, #17]
 8013408:	490d      	ldr	r1, [pc, #52]	; (8013440 <etharp_query+0x268>)
 801340a:	4613      	mov	r3, r2
 801340c:	005b      	lsls	r3, r3, #1
 801340e:	4413      	add	r3, r2
 8013410:	00db      	lsls	r3, r3, #3
 8013412:	440b      	add	r3, r1
 8013414:	69fa      	ldr	r2, [r7, #28]
 8013416:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013418:	2300      	movs	r3, #0
 801341a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801341e:	e002      	b.n	8013426 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013420:	23ff      	movs	r3, #255	; 0xff
 8013422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013426:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801342a:	4618      	mov	r0, r3
 801342c:	3728      	adds	r7, #40	; 0x28
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
 8013432:	bf00      	nop
 8013434:	08019588 	.word	0x08019588
 8013438:	08019734 	.word	0x08019734
 801343c:	08019600 	.word	0x08019600
 8013440:	20000a58 	.word	0x20000a58
 8013444:	08019744 	.word	0x08019744
 8013448:	08019728 	.word	0x08019728
 801344c:	20000b48 	.word	0x20000b48
 8013450:	0801976c 	.word	0x0801976c

08013454 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b08a      	sub	sp, #40	; 0x28
 8013458:	af02      	add	r7, sp, #8
 801345a:	60f8      	str	r0, [r7, #12]
 801345c:	60b9      	str	r1, [r7, #8]
 801345e:	607a      	str	r2, [r7, #4]
 8013460:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013462:	2300      	movs	r3, #0
 8013464:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d106      	bne.n	801347a <etharp_raw+0x26>
 801346c:	4b3a      	ldr	r3, [pc, #232]	; (8013558 <etharp_raw+0x104>)
 801346e:	f240 4257 	movw	r2, #1111	; 0x457
 8013472:	493a      	ldr	r1, [pc, #232]	; (801355c <etharp_raw+0x108>)
 8013474:	483a      	ldr	r0, [pc, #232]	; (8013560 <etharp_raw+0x10c>)
 8013476:	f001 fc87 	bl	8014d88 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801347a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801347e:	211c      	movs	r1, #28
 8013480:	200e      	movs	r0, #14
 8013482:	f7f8 f88f 	bl	800b5a4 <pbuf_alloc>
 8013486:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013488:	69bb      	ldr	r3, [r7, #24]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d102      	bne.n	8013494 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801348e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013492:	e05d      	b.n	8013550 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	895b      	ldrh	r3, [r3, #10]
 8013498:	2b1b      	cmp	r3, #27
 801349a:	d806      	bhi.n	80134aa <etharp_raw+0x56>
 801349c:	4b2e      	ldr	r3, [pc, #184]	; (8013558 <etharp_raw+0x104>)
 801349e:	f240 4262 	movw	r2, #1122	; 0x462
 80134a2:	4930      	ldr	r1, [pc, #192]	; (8013564 <etharp_raw+0x110>)
 80134a4:	482e      	ldr	r0, [pc, #184]	; (8013560 <etharp_raw+0x10c>)
 80134a6:	f001 fc6f 	bl	8014d88 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80134b0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7f6 ffc8 	bl	800a448 <lwip_htons>
 80134b8:	4603      	mov	r3, r0
 80134ba:	461a      	mov	r2, r3
 80134bc:	697b      	ldr	r3, [r7, #20]
 80134be:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80134c6:	2b06      	cmp	r3, #6
 80134c8:	d006      	beq.n	80134d8 <etharp_raw+0x84>
 80134ca:	4b23      	ldr	r3, [pc, #140]	; (8013558 <etharp_raw+0x104>)
 80134cc:	f240 4269 	movw	r2, #1129	; 0x469
 80134d0:	4925      	ldr	r1, [pc, #148]	; (8013568 <etharp_raw+0x114>)
 80134d2:	4823      	ldr	r0, [pc, #140]	; (8013560 <etharp_raw+0x10c>)
 80134d4:	f001 fc58 	bl	8014d88 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	3308      	adds	r3, #8
 80134dc:	2206      	movs	r2, #6
 80134de:	6839      	ldr	r1, [r7, #0]
 80134e0:	4618      	mov	r0, r3
 80134e2:	f001 fc21 	bl	8014d28 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	3312      	adds	r3, #18
 80134ea:	2206      	movs	r2, #6
 80134ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80134ee:	4618      	mov	r0, r3
 80134f0:	f001 fc1a 	bl	8014d28 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	330e      	adds	r3, #14
 80134f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134fa:	6812      	ldr	r2, [r2, #0]
 80134fc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80134fe:	697b      	ldr	r3, [r7, #20]
 8013500:	3318      	adds	r3, #24
 8013502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013504:	6812      	ldr	r2, [r2, #0]
 8013506:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	2200      	movs	r2, #0
 801350c:	701a      	strb	r2, [r3, #0]
 801350e:	2200      	movs	r2, #0
 8013510:	f042 0201 	orr.w	r2, r2, #1
 8013514:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	2200      	movs	r2, #0
 801351a:	f042 0208 	orr.w	r2, r2, #8
 801351e:	709a      	strb	r2, [r3, #2]
 8013520:	2200      	movs	r2, #0
 8013522:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	2206      	movs	r2, #6
 8013528:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801352a:	697b      	ldr	r3, [r7, #20]
 801352c:	2204      	movs	r2, #4
 801352e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013530:	f640 0306 	movw	r3, #2054	; 0x806
 8013534:	9300      	str	r3, [sp, #0]
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	68ba      	ldr	r2, [r7, #8]
 801353a:	69b9      	ldr	r1, [r7, #24]
 801353c:	68f8      	ldr	r0, [r7, #12]
 801353e:	f001 fb75 	bl	8014c2c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013542:	69b8      	ldr	r0, [r7, #24]
 8013544:	f7f8 fb12 	bl	800bb6c <pbuf_free>
  p = NULL;
 8013548:	2300      	movs	r3, #0
 801354a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801354c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013550:	4618      	mov	r0, r3
 8013552:	3720      	adds	r7, #32
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}
 8013558:	08019588 	.word	0x08019588
 801355c:	080196d8 	.word	0x080196d8
 8013560:	08019600 	.word	0x08019600
 8013564:	08019788 	.word	0x08019788
 8013568:	080197bc 	.word	0x080197bc

0801356c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801356c:	b580      	push	{r7, lr}
 801356e:	b088      	sub	sp, #32
 8013570:	af04      	add	r7, sp, #16
 8013572:	60f8      	str	r0, [r7, #12]
 8013574:	60b9      	str	r1, [r7, #8]
 8013576:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013588:	2201      	movs	r2, #1
 801358a:	9203      	str	r2, [sp, #12]
 801358c:	68ba      	ldr	r2, [r7, #8]
 801358e:	9202      	str	r2, [sp, #8]
 8013590:	4a06      	ldr	r2, [pc, #24]	; (80135ac <etharp_request_dst+0x40>)
 8013592:	9201      	str	r2, [sp, #4]
 8013594:	9300      	str	r3, [sp, #0]
 8013596:	4603      	mov	r3, r0
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	68f8      	ldr	r0, [r7, #12]
 801359c:	f7ff ff5a 	bl	8013454 <etharp_raw>
 80135a0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	3710      	adds	r7, #16
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}
 80135aa:	bf00      	nop
 80135ac:	0801f044 	.word	0x0801f044

080135b0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b082      	sub	sp, #8
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80135ba:	4a05      	ldr	r2, [pc, #20]	; (80135d0 <etharp_request+0x20>)
 80135bc:	6839      	ldr	r1, [r7, #0]
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f7ff ffd4 	bl	801356c <etharp_request_dst>
 80135c4:	4603      	mov	r3, r0
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3708      	adds	r7, #8
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	0801f03c 	.word	0x0801f03c

080135d4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b08e      	sub	sp, #56	; 0x38
 80135d8:	af04      	add	r7, sp, #16
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80135de:	4b79      	ldr	r3, [pc, #484]	; (80137c4 <icmp_input+0x1f0>)
 80135e0:	689b      	ldr	r3, [r3, #8]
 80135e2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80135e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	f003 030f 	and.w	r3, r3, #15
 80135ec:	b2db      	uxtb	r3, r3
 80135ee:	009b      	lsls	r3, r3, #2
 80135f0:	b2db      	uxtb	r3, r3
 80135f2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80135f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80135f6:	2b13      	cmp	r3, #19
 80135f8:	f240 80cd 	bls.w	8013796 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	895b      	ldrh	r3, [r3, #10]
 8013600:	2b03      	cmp	r3, #3
 8013602:	f240 80ca 	bls.w	801379a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	685b      	ldr	r3, [r3, #4]
 801360a:	781b      	ldrb	r3, [r3, #0]
 801360c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013610:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013614:	2b00      	cmp	r3, #0
 8013616:	f000 80b7 	beq.w	8013788 <icmp_input+0x1b4>
 801361a:	2b08      	cmp	r3, #8
 801361c:	f040 80b7 	bne.w	801378e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013620:	4b69      	ldr	r3, [pc, #420]	; (80137c8 <icmp_input+0x1f4>)
 8013622:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013624:	4b67      	ldr	r3, [pc, #412]	; (80137c4 <icmp_input+0x1f0>)
 8013626:	695b      	ldr	r3, [r3, #20]
 8013628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801362c:	2be0      	cmp	r3, #224	; 0xe0
 801362e:	f000 80bb 	beq.w	80137a8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013632:	4b64      	ldr	r3, [pc, #400]	; (80137c4 <icmp_input+0x1f0>)
 8013634:	695b      	ldr	r3, [r3, #20]
 8013636:	4a63      	ldr	r2, [pc, #396]	; (80137c4 <icmp_input+0x1f0>)
 8013638:	6812      	ldr	r2, [r2, #0]
 801363a:	4611      	mov	r1, r2
 801363c:	4618      	mov	r0, r3
 801363e:	f000 fbed 	bl	8013e1c <ip4_addr_isbroadcast_u32>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	f040 80b1 	bne.w	80137ac <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	891b      	ldrh	r3, [r3, #8]
 801364e:	2b07      	cmp	r3, #7
 8013650:	f240 80a5 	bls.w	801379e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013654:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013656:	330e      	adds	r3, #14
 8013658:	4619      	mov	r1, r3
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f7f8 f9f0 	bl	800ba40 <pbuf_add_header>
 8013660:	4603      	mov	r3, r0
 8013662:	2b00      	cmp	r3, #0
 8013664:	d04b      	beq.n	80136fe <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	891a      	ldrh	r2, [r3, #8]
 801366a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801366c:	4413      	add	r3, r2
 801366e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	891b      	ldrh	r3, [r3, #8]
 8013674:	8b7a      	ldrh	r2, [r7, #26]
 8013676:	429a      	cmp	r2, r3
 8013678:	f0c0 809a 	bcc.w	80137b0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801367c:	8b7b      	ldrh	r3, [r7, #26]
 801367e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013682:	4619      	mov	r1, r3
 8013684:	200e      	movs	r0, #14
 8013686:	f7f7 ff8d 	bl	800b5a4 <pbuf_alloc>
 801368a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801368c:	697b      	ldr	r3, [r7, #20]
 801368e:	2b00      	cmp	r3, #0
 8013690:	f000 8090 	beq.w	80137b4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	895b      	ldrh	r3, [r3, #10]
 8013698:	461a      	mov	r2, r3
 801369a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801369c:	3308      	adds	r3, #8
 801369e:	429a      	cmp	r2, r3
 80136a0:	d203      	bcs.n	80136aa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80136a2:	6978      	ldr	r0, [r7, #20]
 80136a4:	f7f8 fa62 	bl	800bb6c <pbuf_free>
          goto icmperr;
 80136a8:	e085      	b.n	80137b6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	685b      	ldr	r3, [r3, #4]
 80136ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80136b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80136b2:	4618      	mov	r0, r3
 80136b4:	f001 fb38 	bl	8014d28 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80136b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136ba:	4619      	mov	r1, r3
 80136bc:	6978      	ldr	r0, [r7, #20]
 80136be:	f7f8 f9cf 	bl	800ba60 <pbuf_remove_header>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d009      	beq.n	80136dc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80136c8:	4b40      	ldr	r3, [pc, #256]	; (80137cc <icmp_input+0x1f8>)
 80136ca:	22b6      	movs	r2, #182	; 0xb6
 80136cc:	4940      	ldr	r1, [pc, #256]	; (80137d0 <icmp_input+0x1fc>)
 80136ce:	4841      	ldr	r0, [pc, #260]	; (80137d4 <icmp_input+0x200>)
 80136d0:	f001 fb5a 	bl	8014d88 <iprintf>
          pbuf_free(r);
 80136d4:	6978      	ldr	r0, [r7, #20]
 80136d6:	f7f8 fa49 	bl	800bb6c <pbuf_free>
          goto icmperr;
 80136da:	e06c      	b.n	80137b6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80136dc:	6879      	ldr	r1, [r7, #4]
 80136de:	6978      	ldr	r0, [r7, #20]
 80136e0:	f7f8 fb5c 	bl	800bd9c <pbuf_copy>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d003      	beq.n	80136f2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80136ea:	6978      	ldr	r0, [r7, #20]
 80136ec:	f7f8 fa3e 	bl	800bb6c <pbuf_free>
          goto icmperr;
 80136f0:	e061      	b.n	80137b6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f7f8 fa3a 	bl	800bb6c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80136f8:	697b      	ldr	r3, [r7, #20]
 80136fa:	607b      	str	r3, [r7, #4]
 80136fc:	e00f      	b.n	801371e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80136fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013700:	330e      	adds	r3, #14
 8013702:	4619      	mov	r1, r3
 8013704:	6878      	ldr	r0, [r7, #4]
 8013706:	f7f8 f9ab 	bl	800ba60 <pbuf_remove_header>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d006      	beq.n	801371e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013710:	4b2e      	ldr	r3, [pc, #184]	; (80137cc <icmp_input+0x1f8>)
 8013712:	22c7      	movs	r2, #199	; 0xc7
 8013714:	4930      	ldr	r1, [pc, #192]	; (80137d8 <icmp_input+0x204>)
 8013716:	482f      	ldr	r0, [pc, #188]	; (80137d4 <icmp_input+0x200>)
 8013718:	f001 fb36 	bl	8014d88 <iprintf>
          goto icmperr;
 801371c:	e04b      	b.n	80137b6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	685b      	ldr	r3, [r3, #4]
 8013722:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013724:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013726:	4619      	mov	r1, r3
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f7f8 f989 	bl	800ba40 <pbuf_add_header>
 801372e:	4603      	mov	r3, r0
 8013730:	2b00      	cmp	r3, #0
 8013732:	d12b      	bne.n	801378c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	685b      	ldr	r3, [r3, #4]
 8013738:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801373a:	69fb      	ldr	r3, [r7, #28]
 801373c:	681a      	ldr	r2, [r3, #0]
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013742:	4b20      	ldr	r3, [pc, #128]	; (80137c4 <icmp_input+0x1f0>)
 8013744:	691a      	ldr	r2, [r3, #16]
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	2200      	movs	r2, #0
 801374e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	2200      	movs	r2, #0
 8013754:	709a      	strb	r2, [r3, #2]
 8013756:	2200      	movs	r2, #0
 8013758:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	22ff      	movs	r2, #255	; 0xff
 801375e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	2200      	movs	r2, #0
 8013764:	729a      	strb	r2, [r3, #10]
 8013766:	2200      	movs	r2, #0
 8013768:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	9302      	str	r3, [sp, #8]
 801376e:	2301      	movs	r3, #1
 8013770:	9301      	str	r3, [sp, #4]
 8013772:	2300      	movs	r3, #0
 8013774:	9300      	str	r3, [sp, #0]
 8013776:	23ff      	movs	r3, #255	; 0xff
 8013778:	2200      	movs	r2, #0
 801377a:	69f9      	ldr	r1, [r7, #28]
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f000 fa75 	bl	8013c6c <ip4_output_if>
 8013782:	4603      	mov	r3, r0
 8013784:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013786:	e001      	b.n	801378c <icmp_input+0x1b8>
      break;
 8013788:	bf00      	nop
 801378a:	e000      	b.n	801378e <icmp_input+0x1ba>
      break;
 801378c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7f8 f9ec 	bl	800bb6c <pbuf_free>
  return;
 8013794:	e013      	b.n	80137be <icmp_input+0x1ea>
    goto lenerr;
 8013796:	bf00      	nop
 8013798:	e002      	b.n	80137a0 <icmp_input+0x1cc>
    goto lenerr;
 801379a:	bf00      	nop
 801379c:	e000      	b.n	80137a0 <icmp_input+0x1cc>
        goto lenerr;
 801379e:	bf00      	nop
lenerr:
  pbuf_free(p);
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f7f8 f9e3 	bl	800bb6c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80137a6:	e00a      	b.n	80137be <icmp_input+0x1ea>
        goto icmperr;
 80137a8:	bf00      	nop
 80137aa:	e004      	b.n	80137b6 <icmp_input+0x1e2>
        goto icmperr;
 80137ac:	bf00      	nop
 80137ae:	e002      	b.n	80137b6 <icmp_input+0x1e2>
          goto icmperr;
 80137b0:	bf00      	nop
 80137b2:	e000      	b.n	80137b6 <icmp_input+0x1e2>
          goto icmperr;
 80137b4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f7f8 f9d8 	bl	800bb6c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80137bc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80137be:	3728      	adds	r7, #40	; 0x28
 80137c0:	46bd      	mov	sp, r7
 80137c2:	bd80      	pop	{r7, pc}
 80137c4:	20009f8c 	.word	0x20009f8c
 80137c8:	20009fa0 	.word	0x20009fa0
 80137cc:	08019800 	.word	0x08019800
 80137d0:	08019838 	.word	0x08019838
 80137d4:	08019870 	.word	0x08019870
 80137d8:	08019898 	.word	0x08019898

080137dc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b082      	sub	sp, #8
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]
 80137e4:	460b      	mov	r3, r1
 80137e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80137e8:	78fb      	ldrb	r3, [r7, #3]
 80137ea:	461a      	mov	r2, r3
 80137ec:	2103      	movs	r1, #3
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	f000 f814 	bl	801381c <icmp_send_response>
}
 80137f4:	bf00      	nop
 80137f6:	3708      	adds	r7, #8
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}

080137fc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
 8013804:	460b      	mov	r3, r1
 8013806:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013808:	78fb      	ldrb	r3, [r7, #3]
 801380a:	461a      	mov	r2, r3
 801380c:	210b      	movs	r1, #11
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f000 f804 	bl	801381c <icmp_send_response>
}
 8013814:	bf00      	nop
 8013816:	3708      	adds	r7, #8
 8013818:	46bd      	mov	sp, r7
 801381a:	bd80      	pop	{r7, pc}

0801381c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801381c:	b580      	push	{r7, lr}
 801381e:	b08c      	sub	sp, #48	; 0x30
 8013820:	af04      	add	r7, sp, #16
 8013822:	6078      	str	r0, [r7, #4]
 8013824:	460b      	mov	r3, r1
 8013826:	70fb      	strb	r3, [r7, #3]
 8013828:	4613      	mov	r3, r2
 801382a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801382c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013830:	2124      	movs	r1, #36	; 0x24
 8013832:	2022      	movs	r0, #34	; 0x22
 8013834:	f7f7 feb6 	bl	800b5a4 <pbuf_alloc>
 8013838:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801383a:	69fb      	ldr	r3, [r7, #28]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d04c      	beq.n	80138da <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013840:	69fb      	ldr	r3, [r7, #28]
 8013842:	895b      	ldrh	r3, [r3, #10]
 8013844:	2b23      	cmp	r3, #35	; 0x23
 8013846:	d806      	bhi.n	8013856 <icmp_send_response+0x3a>
 8013848:	4b26      	ldr	r3, [pc, #152]	; (80138e4 <icmp_send_response+0xc8>)
 801384a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801384e:	4926      	ldr	r1, [pc, #152]	; (80138e8 <icmp_send_response+0xcc>)
 8013850:	4826      	ldr	r0, [pc, #152]	; (80138ec <icmp_send_response+0xd0>)
 8013852:	f001 fa99 	bl	8014d88 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	685b      	ldr	r3, [r3, #4]
 801385a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801385c:	69fb      	ldr	r3, [r7, #28]
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	78fa      	ldrb	r2, [r7, #3]
 8013866:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	78ba      	ldrb	r2, [r7, #2]
 801386c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	2200      	movs	r2, #0
 8013872:	711a      	strb	r2, [r3, #4]
 8013874:	2200      	movs	r2, #0
 8013876:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	2200      	movs	r2, #0
 801387c:	719a      	strb	r2, [r3, #6]
 801387e:	2200      	movs	r2, #0
 8013880:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	685b      	ldr	r3, [r3, #4]
 8013886:	f103 0008 	add.w	r0, r3, #8
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	221c      	movs	r2, #28
 8013890:	4619      	mov	r1, r3
 8013892:	f001 fa49 	bl	8014d28 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013896:	69bb      	ldr	r3, [r7, #24]
 8013898:	68db      	ldr	r3, [r3, #12]
 801389a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801389c:	f107 030c 	add.w	r3, r7, #12
 80138a0:	4618      	mov	r0, r3
 80138a2:	f000 f825 	bl	80138f0 <ip4_route>
 80138a6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d011      	beq.n	80138d2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	2200      	movs	r2, #0
 80138b2:	709a      	strb	r2, [r3, #2]
 80138b4:	2200      	movs	r2, #0
 80138b6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80138b8:	f107 020c 	add.w	r2, r7, #12
 80138bc:	693b      	ldr	r3, [r7, #16]
 80138be:	9302      	str	r3, [sp, #8]
 80138c0:	2301      	movs	r3, #1
 80138c2:	9301      	str	r3, [sp, #4]
 80138c4:	2300      	movs	r3, #0
 80138c6:	9300      	str	r3, [sp, #0]
 80138c8:	23ff      	movs	r3, #255	; 0xff
 80138ca:	2100      	movs	r1, #0
 80138cc:	69f8      	ldr	r0, [r7, #28]
 80138ce:	f000 f9cd 	bl	8013c6c <ip4_output_if>
  }
  pbuf_free(q);
 80138d2:	69f8      	ldr	r0, [r7, #28]
 80138d4:	f7f8 f94a 	bl	800bb6c <pbuf_free>
 80138d8:	e000      	b.n	80138dc <icmp_send_response+0xc0>
    return;
 80138da:	bf00      	nop
}
 80138dc:	3720      	adds	r7, #32
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	08019800 	.word	0x08019800
 80138e8:	080198cc 	.word	0x080198cc
 80138ec:	08019870 	.word	0x08019870

080138f0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80138f0:	b480      	push	{r7}
 80138f2:	b085      	sub	sp, #20
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80138f8:	4b33      	ldr	r3, [pc, #204]	; (80139c8 <ip4_route+0xd8>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	60fb      	str	r3, [r7, #12]
 80138fe:	e036      	b.n	801396e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013906:	f003 0301 	and.w	r3, r3, #1
 801390a:	b2db      	uxtb	r3, r3
 801390c:	2b00      	cmp	r3, #0
 801390e:	d02b      	beq.n	8013968 <ip4_route+0x78>
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013916:	089b      	lsrs	r3, r3, #2
 8013918:	f003 0301 	and.w	r3, r3, #1
 801391c:	b2db      	uxtb	r3, r3
 801391e:	2b00      	cmp	r3, #0
 8013920:	d022      	beq.n	8013968 <ip4_route+0x78>
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	3304      	adds	r3, #4
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	2b00      	cmp	r3, #0
 801392a:	d01d      	beq.n	8013968 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	681a      	ldr	r2, [r3, #0]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	3304      	adds	r3, #4
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	405a      	eors	r2, r3
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	3308      	adds	r3, #8
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	4013      	ands	r3, r2
 8013940:	2b00      	cmp	r3, #0
 8013942:	d101      	bne.n	8013948 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	e038      	b.n	80139ba <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801394e:	f003 0302 	and.w	r3, r3, #2
 8013952:	2b00      	cmp	r3, #0
 8013954:	d108      	bne.n	8013968 <ip4_route+0x78>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	330c      	adds	r3, #12
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	429a      	cmp	r2, r3
 8013962:	d101      	bne.n	8013968 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	e028      	b.n	80139ba <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	60fb      	str	r3, [r7, #12]
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d1c5      	bne.n	8013900 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013974:	4b15      	ldr	r3, [pc, #84]	; (80139cc <ip4_route+0xdc>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d01a      	beq.n	80139b2 <ip4_route+0xc2>
 801397c:	4b13      	ldr	r3, [pc, #76]	; (80139cc <ip4_route+0xdc>)
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013984:	f003 0301 	and.w	r3, r3, #1
 8013988:	2b00      	cmp	r3, #0
 801398a:	d012      	beq.n	80139b2 <ip4_route+0xc2>
 801398c:	4b0f      	ldr	r3, [pc, #60]	; (80139cc <ip4_route+0xdc>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013994:	f003 0304 	and.w	r3, r3, #4
 8013998:	2b00      	cmp	r3, #0
 801399a:	d00a      	beq.n	80139b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801399c:	4b0b      	ldr	r3, [pc, #44]	; (80139cc <ip4_route+0xdc>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	3304      	adds	r3, #4
 80139a2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d004      	beq.n	80139b2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	b2db      	uxtb	r3, r3
 80139ae:	2b7f      	cmp	r3, #127	; 0x7f
 80139b0:	d101      	bne.n	80139b6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80139b2:	2300      	movs	r3, #0
 80139b4:	e001      	b.n	80139ba <ip4_route+0xca>
  }

  return netif_default;
 80139b6:	4b05      	ldr	r3, [pc, #20]	; (80139cc <ip4_route+0xdc>)
 80139b8:	681b      	ldr	r3, [r3, #0]
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3714      	adds	r7, #20
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr
 80139c6:	bf00      	nop
 80139c8:	2000d7cc 	.word	0x2000d7cc
 80139cc:	2000d7d0 	.word	0x2000d7d0

080139d0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80139d0:	b580      	push	{r7, lr}
 80139d2:	b082      	sub	sp, #8
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139de:	f003 0301 	and.w	r3, r3, #1
 80139e2:	b2db      	uxtb	r3, r3
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d016      	beq.n	8013a16 <ip4_input_accept+0x46>
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	3304      	adds	r3, #4
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d011      	beq.n	8013a16 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80139f2:	4b0b      	ldr	r3, [pc, #44]	; (8013a20 <ip4_input_accept+0x50>)
 80139f4:	695a      	ldr	r2, [r3, #20]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	3304      	adds	r3, #4
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d008      	beq.n	8013a12 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013a00:	4b07      	ldr	r3, [pc, #28]	; (8013a20 <ip4_input_accept+0x50>)
 8013a02:	695b      	ldr	r3, [r3, #20]
 8013a04:	6879      	ldr	r1, [r7, #4]
 8013a06:	4618      	mov	r0, r3
 8013a08:	f000 fa08 	bl	8013e1c <ip4_addr_isbroadcast_u32>
 8013a0c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d001      	beq.n	8013a16 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013a12:	2301      	movs	r3, #1
 8013a14:	e000      	b.n	8013a18 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013a16:	2300      	movs	r3, #0
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	3708      	adds	r7, #8
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}
 8013a20:	20009f8c 	.word	0x20009f8c

08013a24 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b086      	sub	sp, #24
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
 8013a2c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	781b      	ldrb	r3, [r3, #0]
 8013a38:	091b      	lsrs	r3, r3, #4
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	2b04      	cmp	r3, #4
 8013a3e:	d004      	beq.n	8013a4a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f7f8 f893 	bl	800bb6c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013a46:	2300      	movs	r3, #0
 8013a48:	e107      	b.n	8013c5a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	781b      	ldrb	r3, [r3, #0]
 8013a4e:	f003 030f 	and.w	r3, r3, #15
 8013a52:	b2db      	uxtb	r3, r3
 8013a54:	009b      	lsls	r3, r3, #2
 8013a56:	b2db      	uxtb	r3, r3
 8013a58:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	885b      	ldrh	r3, [r3, #2]
 8013a5e:	b29b      	uxth	r3, r3
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7f6 fcf1 	bl	800a448 <lwip_htons>
 8013a66:	4603      	mov	r3, r0
 8013a68:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	891b      	ldrh	r3, [r3, #8]
 8013a6e:	89ba      	ldrh	r2, [r7, #12]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d204      	bcs.n	8013a7e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013a74:	89bb      	ldrh	r3, [r7, #12]
 8013a76:	4619      	mov	r1, r3
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f7f7 fef1 	bl	800b860 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	895b      	ldrh	r3, [r3, #10]
 8013a82:	89fa      	ldrh	r2, [r7, #14]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d807      	bhi.n	8013a98 <ip4_input+0x74>
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	891b      	ldrh	r3, [r3, #8]
 8013a8c:	89ba      	ldrh	r2, [r7, #12]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d802      	bhi.n	8013a98 <ip4_input+0x74>
 8013a92:	89fb      	ldrh	r3, [r7, #14]
 8013a94:	2b13      	cmp	r3, #19
 8013a96:	d804      	bhi.n	8013aa2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f7f8 f867 	bl	800bb6c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	e0db      	b.n	8013c5a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	691b      	ldr	r3, [r3, #16]
 8013aa6:	4a6f      	ldr	r2, [pc, #444]	; (8013c64 <ip4_input+0x240>)
 8013aa8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	68db      	ldr	r3, [r3, #12]
 8013aae:	4a6d      	ldr	r2, [pc, #436]	; (8013c64 <ip4_input+0x240>)
 8013ab0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013ab2:	4b6c      	ldr	r3, [pc, #432]	; (8013c64 <ip4_input+0x240>)
 8013ab4:	695b      	ldr	r3, [r3, #20]
 8013ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013aba:	2be0      	cmp	r3, #224	; 0xe0
 8013abc:	d112      	bne.n	8013ae4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013abe:	683b      	ldr	r3, [r7, #0]
 8013ac0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ac4:	f003 0301 	and.w	r3, r3, #1
 8013ac8:	b2db      	uxtb	r3, r3
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d007      	beq.n	8013ade <ip4_input+0xba>
 8013ace:	683b      	ldr	r3, [r7, #0]
 8013ad0:	3304      	adds	r3, #4
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d002      	beq.n	8013ade <ip4_input+0xba>
      netif = inp;
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	613b      	str	r3, [r7, #16]
 8013adc:	e02a      	b.n	8013b34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	613b      	str	r3, [r7, #16]
 8013ae2:	e027      	b.n	8013b34 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013ae4:	6838      	ldr	r0, [r7, #0]
 8013ae6:	f7ff ff73 	bl	80139d0 <ip4_input_accept>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d002      	beq.n	8013af6 <ip4_input+0xd2>
      netif = inp;
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	613b      	str	r3, [r7, #16]
 8013af4:	e01e      	b.n	8013b34 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013af6:	2300      	movs	r3, #0
 8013af8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013afa:	4b5a      	ldr	r3, [pc, #360]	; (8013c64 <ip4_input+0x240>)
 8013afc:	695b      	ldr	r3, [r3, #20]
 8013afe:	b2db      	uxtb	r3, r3
 8013b00:	2b7f      	cmp	r3, #127	; 0x7f
 8013b02:	d017      	beq.n	8013b34 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013b04:	4b58      	ldr	r3, [pc, #352]	; (8013c68 <ip4_input+0x244>)
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	613b      	str	r3, [r7, #16]
 8013b0a:	e00e      	b.n	8013b2a <ip4_input+0x106>
          if (netif == inp) {
 8013b0c:	693a      	ldr	r2, [r7, #16]
 8013b0e:	683b      	ldr	r3, [r7, #0]
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d006      	beq.n	8013b22 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013b14:	6938      	ldr	r0, [r7, #16]
 8013b16:	f7ff ff5b 	bl	80139d0 <ip4_input_accept>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d108      	bne.n	8013b32 <ip4_input+0x10e>
 8013b20:	e000      	b.n	8013b24 <ip4_input+0x100>
            continue;
 8013b22:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	613b      	str	r3, [r7, #16]
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d1ed      	bne.n	8013b0c <ip4_input+0xe8>
 8013b30:	e000      	b.n	8013b34 <ip4_input+0x110>
            break;
 8013b32:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013b34:	4b4b      	ldr	r3, [pc, #300]	; (8013c64 <ip4_input+0x240>)
 8013b36:	691b      	ldr	r3, [r3, #16]
 8013b38:	6839      	ldr	r1, [r7, #0]
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f000 f96e 	bl	8013e1c <ip4_addr_isbroadcast_u32>
 8013b40:	4603      	mov	r3, r0
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d105      	bne.n	8013b52 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013b46:	4b47      	ldr	r3, [pc, #284]	; (8013c64 <ip4_input+0x240>)
 8013b48:	691b      	ldr	r3, [r3, #16]
 8013b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013b4e:	2be0      	cmp	r3, #224	; 0xe0
 8013b50:	d104      	bne.n	8013b5c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f7f8 f80a 	bl	800bb6c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	e07e      	b.n	8013c5a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013b5c:	693b      	ldr	r3, [r7, #16]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d104      	bne.n	8013b6c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013b62:	6878      	ldr	r0, [r7, #4]
 8013b64:	f7f8 f802 	bl	800bb6c <pbuf_free>
    return ERR_OK;
 8013b68:	2300      	movs	r3, #0
 8013b6a:	e076      	b.n	8013c5a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	88db      	ldrh	r3, [r3, #6]
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	461a      	mov	r2, r3
 8013b74:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013b78:	4013      	ands	r3, r2
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d00b      	beq.n	8013b96 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f000 fc92 	bl	80144a8 <ip4_reass>
 8013b84:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d101      	bne.n	8013b90 <ip4_input+0x16c>
      return ERR_OK;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	e064      	b.n	8013c5a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	685b      	ldr	r3, [r3, #4]
 8013b94:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013b96:	4a33      	ldr	r2, [pc, #204]	; (8013c64 <ip4_input+0x240>)
 8013b98:	693b      	ldr	r3, [r7, #16]
 8013b9a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013b9c:	4a31      	ldr	r2, [pc, #196]	; (8013c64 <ip4_input+0x240>)
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013ba2:	4a30      	ldr	r2, [pc, #192]	; (8013c64 <ip4_input+0x240>)
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	f003 030f 	and.w	r3, r3, #15
 8013bb0:	b2db      	uxtb	r3, r3
 8013bb2:	009b      	lsls	r3, r3, #2
 8013bb4:	b2db      	uxtb	r3, r3
 8013bb6:	b29a      	uxth	r2, r3
 8013bb8:	4b2a      	ldr	r3, [pc, #168]	; (8013c64 <ip4_input+0x240>)
 8013bba:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013bbc:	89fb      	ldrh	r3, [r7, #14]
 8013bbe:	4619      	mov	r1, r3
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f7f7 ff4d 	bl	800ba60 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	7a5b      	ldrb	r3, [r3, #9]
 8013bca:	2b11      	cmp	r3, #17
 8013bcc:	d006      	beq.n	8013bdc <ip4_input+0x1b8>
 8013bce:	2b11      	cmp	r3, #17
 8013bd0:	dc13      	bgt.n	8013bfa <ip4_input+0x1d6>
 8013bd2:	2b01      	cmp	r3, #1
 8013bd4:	d00c      	beq.n	8013bf0 <ip4_input+0x1cc>
 8013bd6:	2b06      	cmp	r3, #6
 8013bd8:	d005      	beq.n	8013be6 <ip4_input+0x1c2>
 8013bda:	e00e      	b.n	8013bfa <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013bdc:	6839      	ldr	r1, [r7, #0]
 8013bde:	6878      	ldr	r0, [r7, #4]
 8013be0:	f7fe fc68 	bl	80124b4 <udp_input>
        break;
 8013be4:	e026      	b.n	8013c34 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013be6:	6839      	ldr	r1, [r7, #0]
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f7fa f88d 	bl	800dd08 <tcp_input>
        break;
 8013bee:	e021      	b.n	8013c34 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013bf0:	6839      	ldr	r1, [r7, #0]
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7ff fcee 	bl	80135d4 <icmp_input>
        break;
 8013bf8:	e01c      	b.n	8013c34 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013bfa:	4b1a      	ldr	r3, [pc, #104]	; (8013c64 <ip4_input+0x240>)
 8013bfc:	695b      	ldr	r3, [r3, #20]
 8013bfe:	6939      	ldr	r1, [r7, #16]
 8013c00:	4618      	mov	r0, r3
 8013c02:	f000 f90b 	bl	8013e1c <ip4_addr_isbroadcast_u32>
 8013c06:	4603      	mov	r3, r0
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d10f      	bne.n	8013c2c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013c0c:	4b15      	ldr	r3, [pc, #84]	; (8013c64 <ip4_input+0x240>)
 8013c0e:	695b      	ldr	r3, [r3, #20]
 8013c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c14:	2be0      	cmp	r3, #224	; 0xe0
 8013c16:	d009      	beq.n	8013c2c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	6878      	ldr	r0, [r7, #4]
 8013c20:	f7f7 ff91 	bl	800bb46 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013c24:	2102      	movs	r1, #2
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f7ff fdd8 	bl	80137dc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f7f7 ff9d 	bl	800bb6c <pbuf_free>
        break;
 8013c32:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013c34:	4b0b      	ldr	r3, [pc, #44]	; (8013c64 <ip4_input+0x240>)
 8013c36:	2200      	movs	r2, #0
 8013c38:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013c3a:	4b0a      	ldr	r3, [pc, #40]	; (8013c64 <ip4_input+0x240>)
 8013c3c:	2200      	movs	r2, #0
 8013c3e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013c40:	4b08      	ldr	r3, [pc, #32]	; (8013c64 <ip4_input+0x240>)
 8013c42:	2200      	movs	r2, #0
 8013c44:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013c46:	4b07      	ldr	r3, [pc, #28]	; (8013c64 <ip4_input+0x240>)
 8013c48:	2200      	movs	r2, #0
 8013c4a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013c4c:	4b05      	ldr	r3, [pc, #20]	; (8013c64 <ip4_input+0x240>)
 8013c4e:	2200      	movs	r2, #0
 8013c50:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013c52:	4b04      	ldr	r3, [pc, #16]	; (8013c64 <ip4_input+0x240>)
 8013c54:	2200      	movs	r2, #0
 8013c56:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013c58:	2300      	movs	r3, #0
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3718      	adds	r7, #24
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	20009f8c 	.word	0x20009f8c
 8013c68:	2000d7cc 	.word	0x2000d7cc

08013c6c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b08a      	sub	sp, #40	; 0x28
 8013c70:	af04      	add	r7, sp, #16
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	60b9      	str	r1, [r7, #8]
 8013c76:	607a      	str	r2, [r7, #4]
 8013c78:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d009      	beq.n	8013c98 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d003      	beq.n	8013c92 <ip4_output_if+0x26>
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d102      	bne.n	8013c98 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c94:	3304      	adds	r3, #4
 8013c96:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013c98:	78fa      	ldrb	r2, [r7, #3]
 8013c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c9c:	9302      	str	r3, [sp, #8]
 8013c9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013ca2:	9301      	str	r3, [sp, #4]
 8013ca4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013ca8:	9300      	str	r3, [sp, #0]
 8013caa:	4613      	mov	r3, r2
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	6979      	ldr	r1, [r7, #20]
 8013cb0:	68f8      	ldr	r0, [r7, #12]
 8013cb2:	f000 f805 	bl	8013cc0 <ip4_output_if_src>
 8013cb6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	3718      	adds	r7, #24
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}

08013cc0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b088      	sub	sp, #32
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	60f8      	str	r0, [r7, #12]
 8013cc8:	60b9      	str	r1, [r7, #8]
 8013cca:	607a      	str	r2, [r7, #4]
 8013ccc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	7b9b      	ldrb	r3, [r3, #14]
 8013cd2:	2b01      	cmp	r3, #1
 8013cd4:	d006      	beq.n	8013ce4 <ip4_output_if_src+0x24>
 8013cd6:	4b4b      	ldr	r3, [pc, #300]	; (8013e04 <ip4_output_if_src+0x144>)
 8013cd8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013cdc:	494a      	ldr	r1, [pc, #296]	; (8013e08 <ip4_output_if_src+0x148>)
 8013cde:	484b      	ldr	r0, [pc, #300]	; (8013e0c <ip4_output_if_src+0x14c>)
 8013ce0:	f001 f852 	bl	8014d88 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d060      	beq.n	8013dac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013cea:	2314      	movs	r3, #20
 8013cec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013cee:	2114      	movs	r1, #20
 8013cf0:	68f8      	ldr	r0, [r7, #12]
 8013cf2:	f7f7 fea5 	bl	800ba40 <pbuf_add_header>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d002      	beq.n	8013d02 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013cfc:	f06f 0301 	mvn.w	r3, #1
 8013d00:	e07c      	b.n	8013dfc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	895b      	ldrh	r3, [r3, #10]
 8013d0c:	2b13      	cmp	r3, #19
 8013d0e:	d806      	bhi.n	8013d1e <ip4_output_if_src+0x5e>
 8013d10:	4b3c      	ldr	r3, [pc, #240]	; (8013e04 <ip4_output_if_src+0x144>)
 8013d12:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013d16:	493e      	ldr	r1, [pc, #248]	; (8013e10 <ip4_output_if_src+0x150>)
 8013d18:	483c      	ldr	r0, [pc, #240]	; (8013e0c <ip4_output_if_src+0x14c>)
 8013d1a:	f001 f835 	bl	8014d88 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013d1e:	69fb      	ldr	r3, [r7, #28]
 8013d20:	78fa      	ldrb	r2, [r7, #3]
 8013d22:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013d24:	69fb      	ldr	r3, [r7, #28]
 8013d26:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013d2a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681a      	ldr	r2, [r3, #0]
 8013d30:	69fb      	ldr	r3, [r7, #28]
 8013d32:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013d34:	8b7b      	ldrh	r3, [r7, #26]
 8013d36:	089b      	lsrs	r3, r3, #2
 8013d38:	b29b      	uxth	r3, r3
 8013d3a:	b2db      	uxtb	r3, r3
 8013d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d40:	b2da      	uxtb	r2, r3
 8013d42:	69fb      	ldr	r3, [r7, #28]
 8013d44:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013d46:	69fb      	ldr	r3, [r7, #28]
 8013d48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013d4c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	891b      	ldrh	r3, [r3, #8]
 8013d52:	4618      	mov	r0, r3
 8013d54:	f7f6 fb78 	bl	800a448 <lwip_htons>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	461a      	mov	r2, r3
 8013d5c:	69fb      	ldr	r3, [r7, #28]
 8013d5e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013d60:	69fb      	ldr	r3, [r7, #28]
 8013d62:	2200      	movs	r2, #0
 8013d64:	719a      	strb	r2, [r3, #6]
 8013d66:	2200      	movs	r2, #0
 8013d68:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013d6a:	4b2a      	ldr	r3, [pc, #168]	; (8013e14 <ip4_output_if_src+0x154>)
 8013d6c:	881b      	ldrh	r3, [r3, #0]
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7f6 fb6a 	bl	800a448 <lwip_htons>
 8013d74:	4603      	mov	r3, r0
 8013d76:	461a      	mov	r2, r3
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013d7c:	4b25      	ldr	r3, [pc, #148]	; (8013e14 <ip4_output_if_src+0x154>)
 8013d7e:	881b      	ldrh	r3, [r3, #0]
 8013d80:	3301      	adds	r3, #1
 8013d82:	b29a      	uxth	r2, r3
 8013d84:	4b23      	ldr	r3, [pc, #140]	; (8013e14 <ip4_output_if_src+0x154>)
 8013d86:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013d88:	68bb      	ldr	r3, [r7, #8]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d104      	bne.n	8013d98 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013d8e:	4b22      	ldr	r3, [pc, #136]	; (8013e18 <ip4_output_if_src+0x158>)
 8013d90:	681a      	ldr	r2, [r3, #0]
 8013d92:	69fb      	ldr	r3, [r7, #28]
 8013d94:	60da      	str	r2, [r3, #12]
 8013d96:	e003      	b.n	8013da0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013da0:	69fb      	ldr	r3, [r7, #28]
 8013da2:	2200      	movs	r2, #0
 8013da4:	729a      	strb	r2, [r3, #10]
 8013da6:	2200      	movs	r2, #0
 8013da8:	72da      	strb	r2, [r3, #11]
 8013daa:	e00f      	b.n	8013dcc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	895b      	ldrh	r3, [r3, #10]
 8013db0:	2b13      	cmp	r3, #19
 8013db2:	d802      	bhi.n	8013dba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013db4:	f06f 0301 	mvn.w	r3, #1
 8013db8:	e020      	b.n	8013dfc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	685b      	ldr	r3, [r3, #4]
 8013dbe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013dc0:	69fb      	ldr	r3, [r7, #28]
 8013dc2:	691b      	ldr	r3, [r3, #16]
 8013dc4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013dc6:	f107 0314 	add.w	r3, r7, #20
 8013dca:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d00c      	beq.n	8013dee <ip4_output_if_src+0x12e>
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	891a      	ldrh	r2, [r3, #8]
 8013dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dda:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d906      	bls.n	8013dee <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013de0:	687a      	ldr	r2, [r7, #4]
 8013de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013de4:	68f8      	ldr	r0, [r7, #12]
 8013de6:	f000 fd4d 	bl	8014884 <ip4_frag>
 8013dea:	4603      	mov	r3, r0
 8013dec:	e006      	b.n	8013dfc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df0:	695b      	ldr	r3, [r3, #20]
 8013df2:	687a      	ldr	r2, [r7, #4]
 8013df4:	68f9      	ldr	r1, [r7, #12]
 8013df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013df8:	4798      	blx	r3
 8013dfa:	4603      	mov	r3, r0
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	3720      	adds	r7, #32
 8013e00:	46bd      	mov	sp, r7
 8013e02:	bd80      	pop	{r7, pc}
 8013e04:	080198f8 	.word	0x080198f8
 8013e08:	0801992c 	.word	0x0801992c
 8013e0c:	08019938 	.word	0x08019938
 8013e10:	08019960 	.word	0x08019960
 8013e14:	20000b4a 	.word	0x20000b4a
 8013e18:	0801f038 	.word	0x0801f038

08013e1c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b085      	sub	sp, #20
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e30:	d002      	beq.n	8013e38 <ip4_addr_isbroadcast_u32+0x1c>
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d101      	bne.n	8013e3c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013e38:	2301      	movs	r3, #1
 8013e3a:	e02a      	b.n	8013e92 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e42:	f003 0302 	and.w	r3, r3, #2
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d101      	bne.n	8013e4e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	e021      	b.n	8013e92 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	3304      	adds	r3, #4
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	687a      	ldr	r2, [r7, #4]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d101      	bne.n	8013e5e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	e019      	b.n	8013e92 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013e5e:	68fa      	ldr	r2, [r7, #12]
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	3304      	adds	r3, #4
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	405a      	eors	r2, r3
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	3308      	adds	r3, #8
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	4013      	ands	r3, r2
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d10d      	bne.n	8013e90 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	3308      	adds	r3, #8
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	43da      	mvns	r2, r3
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	3308      	adds	r3, #8
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d101      	bne.n	8013e90 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	e000      	b.n	8013e92 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013e90:	2300      	movs	r3, #0
  }
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3714      	adds	r7, #20
 8013e96:	46bd      	mov	sp, r7
 8013e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9c:	4770      	bx	lr
	...

08013ea0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013ea0:	b580      	push	{r7, lr}
 8013ea2:	b084      	sub	sp, #16
 8013ea4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013eaa:	4b12      	ldr	r3, [pc, #72]	; (8013ef4 <ip_reass_tmr+0x54>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013eb0:	e018      	b.n	8013ee4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	7fdb      	ldrb	r3, [r3, #31]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d00b      	beq.n	8013ed2 <ip_reass_tmr+0x32>
      r->timer--;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	7fdb      	ldrb	r3, [r3, #31]
 8013ebe:	3b01      	subs	r3, #1
 8013ec0:	b2da      	uxtb	r2, r3
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	60fb      	str	r3, [r7, #12]
 8013ed0:	e008      	b.n	8013ee4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013edc:	68b9      	ldr	r1, [r7, #8]
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f000 f80a 	bl	8013ef8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d1e3      	bne.n	8013eb2 <ip_reass_tmr+0x12>
    }
  }
}
 8013eea:	bf00      	nop
 8013eec:	bf00      	nop
 8013eee:	3710      	adds	r7, #16
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}
 8013ef4:	20000b4c 	.word	0x20000b4c

08013ef8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b088      	sub	sp, #32
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013f02:	2300      	movs	r3, #0
 8013f04:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013f06:	683a      	ldr	r2, [r7, #0]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d105      	bne.n	8013f1a <ip_reass_free_complete_datagram+0x22>
 8013f0e:	4b45      	ldr	r3, [pc, #276]	; (8014024 <ip_reass_free_complete_datagram+0x12c>)
 8013f10:	22ab      	movs	r2, #171	; 0xab
 8013f12:	4945      	ldr	r1, [pc, #276]	; (8014028 <ip_reass_free_complete_datagram+0x130>)
 8013f14:	4845      	ldr	r0, [pc, #276]	; (801402c <ip_reass_free_complete_datagram+0x134>)
 8013f16:	f000 ff37 	bl	8014d88 <iprintf>
  if (prev != NULL) {
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d00a      	beq.n	8013f36 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	687a      	ldr	r2, [r7, #4]
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d005      	beq.n	8013f36 <ip_reass_free_complete_datagram+0x3e>
 8013f2a:	4b3e      	ldr	r3, [pc, #248]	; (8014024 <ip_reass_free_complete_datagram+0x12c>)
 8013f2c:	22ad      	movs	r2, #173	; 0xad
 8013f2e:	4940      	ldr	r1, [pc, #256]	; (8014030 <ip_reass_free_complete_datagram+0x138>)
 8013f30:	483e      	ldr	r0, [pc, #248]	; (801402c <ip_reass_free_complete_datagram+0x134>)
 8013f32:	f000 ff29 	bl	8014d88 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	685b      	ldr	r3, [r3, #4]
 8013f3a:	685b      	ldr	r3, [r3, #4]
 8013f3c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013f3e:	697b      	ldr	r3, [r7, #20]
 8013f40:	889b      	ldrh	r3, [r3, #4]
 8013f42:	b29b      	uxth	r3, r3
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d12a      	bne.n	8013f9e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	681a      	ldr	r2, [r3, #0]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013f56:	69bb      	ldr	r3, [r7, #24]
 8013f58:	6858      	ldr	r0, [r3, #4]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	3308      	adds	r3, #8
 8013f5e:	2214      	movs	r2, #20
 8013f60:	4619      	mov	r1, r3
 8013f62:	f000 fee1 	bl	8014d28 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013f66:	2101      	movs	r1, #1
 8013f68:	69b8      	ldr	r0, [r7, #24]
 8013f6a:	f7ff fc47 	bl	80137fc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013f6e:	69b8      	ldr	r0, [r7, #24]
 8013f70:	f7f7 fe84 	bl	800bc7c <pbuf_clen>
 8013f74:	4603      	mov	r3, r0
 8013f76:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013f78:	8bfa      	ldrh	r2, [r7, #30]
 8013f7a:	8a7b      	ldrh	r3, [r7, #18]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f82:	db05      	blt.n	8013f90 <ip_reass_free_complete_datagram+0x98>
 8013f84:	4b27      	ldr	r3, [pc, #156]	; (8014024 <ip_reass_free_complete_datagram+0x12c>)
 8013f86:	22bc      	movs	r2, #188	; 0xbc
 8013f88:	492a      	ldr	r1, [pc, #168]	; (8014034 <ip_reass_free_complete_datagram+0x13c>)
 8013f8a:	4828      	ldr	r0, [pc, #160]	; (801402c <ip_reass_free_complete_datagram+0x134>)
 8013f8c:	f000 fefc 	bl	8014d88 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013f90:	8bfa      	ldrh	r2, [r7, #30]
 8013f92:	8a7b      	ldrh	r3, [r7, #18]
 8013f94:	4413      	add	r3, r2
 8013f96:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013f98:	69b8      	ldr	r0, [r7, #24]
 8013f9a:	f7f7 fde7 	bl	800bb6c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013fa4:	e01f      	b.n	8013fe6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013fa6:	69bb      	ldr	r3, [r7, #24]
 8013fa8:	685b      	ldr	r3, [r3, #4]
 8013faa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013fac:	69bb      	ldr	r3, [r7, #24]
 8013fae:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013fb6:	68f8      	ldr	r0, [r7, #12]
 8013fb8:	f7f7 fe60 	bl	800bc7c <pbuf_clen>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013fc0:	8bfa      	ldrh	r2, [r7, #30]
 8013fc2:	8a7b      	ldrh	r3, [r7, #18]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013fca:	db05      	blt.n	8013fd8 <ip_reass_free_complete_datagram+0xe0>
 8013fcc:	4b15      	ldr	r3, [pc, #84]	; (8014024 <ip_reass_free_complete_datagram+0x12c>)
 8013fce:	22cc      	movs	r2, #204	; 0xcc
 8013fd0:	4918      	ldr	r1, [pc, #96]	; (8014034 <ip_reass_free_complete_datagram+0x13c>)
 8013fd2:	4816      	ldr	r0, [pc, #88]	; (801402c <ip_reass_free_complete_datagram+0x134>)
 8013fd4:	f000 fed8 	bl	8014d88 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013fd8:	8bfa      	ldrh	r2, [r7, #30]
 8013fda:	8a7b      	ldrh	r3, [r7, #18]
 8013fdc:	4413      	add	r3, r2
 8013fde:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013fe0:	68f8      	ldr	r0, [r7, #12]
 8013fe2:	f7f7 fdc3 	bl	800bb6c <pbuf_free>
  while (p != NULL) {
 8013fe6:	69bb      	ldr	r3, [r7, #24]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d1dc      	bne.n	8013fa6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013fec:	6839      	ldr	r1, [r7, #0]
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f000 f8c2 	bl	8014178 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013ff4:	4b10      	ldr	r3, [pc, #64]	; (8014038 <ip_reass_free_complete_datagram+0x140>)
 8013ff6:	881b      	ldrh	r3, [r3, #0]
 8013ff8:	8bfa      	ldrh	r2, [r7, #30]
 8013ffa:	429a      	cmp	r2, r3
 8013ffc:	d905      	bls.n	801400a <ip_reass_free_complete_datagram+0x112>
 8013ffe:	4b09      	ldr	r3, [pc, #36]	; (8014024 <ip_reass_free_complete_datagram+0x12c>)
 8014000:	22d2      	movs	r2, #210	; 0xd2
 8014002:	490e      	ldr	r1, [pc, #56]	; (801403c <ip_reass_free_complete_datagram+0x144>)
 8014004:	4809      	ldr	r0, [pc, #36]	; (801402c <ip_reass_free_complete_datagram+0x134>)
 8014006:	f000 febf 	bl	8014d88 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801400a:	4b0b      	ldr	r3, [pc, #44]	; (8014038 <ip_reass_free_complete_datagram+0x140>)
 801400c:	881a      	ldrh	r2, [r3, #0]
 801400e:	8bfb      	ldrh	r3, [r7, #30]
 8014010:	1ad3      	subs	r3, r2, r3
 8014012:	b29a      	uxth	r2, r3
 8014014:	4b08      	ldr	r3, [pc, #32]	; (8014038 <ip_reass_free_complete_datagram+0x140>)
 8014016:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014018:	8bfb      	ldrh	r3, [r7, #30]
}
 801401a:	4618      	mov	r0, r3
 801401c:	3720      	adds	r7, #32
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
 8014022:	bf00      	nop
 8014024:	08019990 	.word	0x08019990
 8014028:	080199cc 	.word	0x080199cc
 801402c:	080199d8 	.word	0x080199d8
 8014030:	08019a00 	.word	0x08019a00
 8014034:	08019a14 	.word	0x08019a14
 8014038:	20000b50 	.word	0x20000b50
 801403c:	08019a34 	.word	0x08019a34

08014040 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b08a      	sub	sp, #40	; 0x28
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801404a:	2300      	movs	r3, #0
 801404c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801404e:	2300      	movs	r3, #0
 8014050:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014052:	2300      	movs	r3, #0
 8014054:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014056:	2300      	movs	r3, #0
 8014058:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801405a:	2300      	movs	r3, #0
 801405c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801405e:	4b28      	ldr	r3, [pc, #160]	; (8014100 <ip_reass_remove_oldest_datagram+0xc0>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014064:	e030      	b.n	80140c8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014068:	695a      	ldr	r2, [r3, #20]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	429a      	cmp	r2, r3
 8014070:	d10c      	bne.n	801408c <ip_reass_remove_oldest_datagram+0x4c>
 8014072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014074:	699a      	ldr	r2, [r3, #24]
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	691b      	ldr	r3, [r3, #16]
 801407a:	429a      	cmp	r2, r3
 801407c:	d106      	bne.n	801408c <ip_reass_remove_oldest_datagram+0x4c>
 801407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014080:	899a      	ldrh	r2, [r3, #12]
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	889b      	ldrh	r3, [r3, #4]
 8014086:	b29b      	uxth	r3, r3
 8014088:	429a      	cmp	r2, r3
 801408a:	d014      	beq.n	80140b6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801408c:	693b      	ldr	r3, [r7, #16]
 801408e:	3301      	adds	r3, #1
 8014090:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014092:	6a3b      	ldr	r3, [r7, #32]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d104      	bne.n	80140a2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801409c:	69fb      	ldr	r3, [r7, #28]
 801409e:	61bb      	str	r3, [r7, #24]
 80140a0:	e009      	b.n	80140b6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80140a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a4:	7fda      	ldrb	r2, [r3, #31]
 80140a6:	6a3b      	ldr	r3, [r7, #32]
 80140a8:	7fdb      	ldrb	r3, [r3, #31]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d803      	bhi.n	80140b6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80140ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80140b2:	69fb      	ldr	r3, [r7, #28]
 80140b4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80140b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d001      	beq.n	80140c2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80140be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80140c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80140c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d1cb      	bne.n	8014066 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80140ce:	6a3b      	ldr	r3, [r7, #32]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d008      	beq.n	80140e6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80140d4:	69b9      	ldr	r1, [r7, #24]
 80140d6:	6a38      	ldr	r0, [r7, #32]
 80140d8:	f7ff ff0e 	bl	8013ef8 <ip_reass_free_complete_datagram>
 80140dc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80140de:	697a      	ldr	r2, [r7, #20]
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	4413      	add	r3, r2
 80140e4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80140e6:	697a      	ldr	r2, [r7, #20]
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	429a      	cmp	r2, r3
 80140ec:	da02      	bge.n	80140f4 <ip_reass_remove_oldest_datagram+0xb4>
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	2b01      	cmp	r3, #1
 80140f2:	dcac      	bgt.n	801404e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80140f4:	697b      	ldr	r3, [r7, #20]
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3728      	adds	r7, #40	; 0x28
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	20000b4c 	.word	0x20000b4c

08014104 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b084      	sub	sp, #16
 8014108:	af00      	add	r7, sp, #0
 801410a:	6078      	str	r0, [r7, #4]
 801410c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801410e:	2004      	movs	r0, #4
 8014110:	f7f6 fece 	bl	800aeb0 <memp_malloc>
 8014114:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d110      	bne.n	801413e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801411c:	6839      	ldr	r1, [r7, #0]
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f7ff ff8e 	bl	8014040 <ip_reass_remove_oldest_datagram>
 8014124:	4602      	mov	r2, r0
 8014126:	683b      	ldr	r3, [r7, #0]
 8014128:	4293      	cmp	r3, r2
 801412a:	dc03      	bgt.n	8014134 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801412c:	2004      	movs	r0, #4
 801412e:	f7f6 febf 	bl	800aeb0 <memp_malloc>
 8014132:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d101      	bne.n	801413e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801413a:	2300      	movs	r3, #0
 801413c:	e016      	b.n	801416c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801413e:	2220      	movs	r2, #32
 8014140:	2100      	movs	r1, #0
 8014142:	68f8      	ldr	r0, [r7, #12]
 8014144:	f000 fe18 	bl	8014d78 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	220f      	movs	r2, #15
 801414c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801414e:	4b09      	ldr	r3, [pc, #36]	; (8014174 <ip_reass_enqueue_new_datagram+0x70>)
 8014150:	681a      	ldr	r2, [r3, #0]
 8014152:	68fb      	ldr	r3, [r7, #12]
 8014154:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014156:	4a07      	ldr	r2, [pc, #28]	; (8014174 <ip_reass_enqueue_new_datagram+0x70>)
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	3308      	adds	r3, #8
 8014160:	2214      	movs	r2, #20
 8014162:	6879      	ldr	r1, [r7, #4]
 8014164:	4618      	mov	r0, r3
 8014166:	f000 fddf 	bl	8014d28 <memcpy>
  return ipr;
 801416a:	68fb      	ldr	r3, [r7, #12]
}
 801416c:	4618      	mov	r0, r3
 801416e:	3710      	adds	r7, #16
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}
 8014174:	20000b4c 	.word	0x20000b4c

08014178 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
 8014180:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014182:	4b10      	ldr	r3, [pc, #64]	; (80141c4 <ip_reass_dequeue_datagram+0x4c>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	687a      	ldr	r2, [r7, #4]
 8014188:	429a      	cmp	r2, r3
 801418a:	d104      	bne.n	8014196 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	4a0c      	ldr	r2, [pc, #48]	; (80141c4 <ip_reass_dequeue_datagram+0x4c>)
 8014192:	6013      	str	r3, [r2, #0]
 8014194:	e00d      	b.n	80141b2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d106      	bne.n	80141aa <ip_reass_dequeue_datagram+0x32>
 801419c:	4b0a      	ldr	r3, [pc, #40]	; (80141c8 <ip_reass_dequeue_datagram+0x50>)
 801419e:	f240 1245 	movw	r2, #325	; 0x145
 80141a2:	490a      	ldr	r1, [pc, #40]	; (80141cc <ip_reass_dequeue_datagram+0x54>)
 80141a4:	480a      	ldr	r0, [pc, #40]	; (80141d0 <ip_reass_dequeue_datagram+0x58>)
 80141a6:	f000 fdef 	bl	8014d88 <iprintf>
    prev->next = ipr->next;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	681a      	ldr	r2, [r3, #0]
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80141b2:	6879      	ldr	r1, [r7, #4]
 80141b4:	2004      	movs	r0, #4
 80141b6:	f7f6 fec7 	bl	800af48 <memp_free>
}
 80141ba:	bf00      	nop
 80141bc:	3708      	adds	r7, #8
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	20000b4c 	.word	0x20000b4c
 80141c8:	08019990 	.word	0x08019990
 80141cc:	08019a58 	.word	0x08019a58
 80141d0:	080199d8 	.word	0x080199d8

080141d4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b08c      	sub	sp, #48	; 0x30
 80141d8:	af00      	add	r7, sp, #0
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80141e0:	2300      	movs	r3, #0
 80141e2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80141e4:	2301      	movs	r3, #1
 80141e6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80141ee:	69fb      	ldr	r3, [r7, #28]
 80141f0:	885b      	ldrh	r3, [r3, #2]
 80141f2:	b29b      	uxth	r3, r3
 80141f4:	4618      	mov	r0, r3
 80141f6:	f7f6 f927 	bl	800a448 <lwip_htons>
 80141fa:	4603      	mov	r3, r0
 80141fc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80141fe:	69fb      	ldr	r3, [r7, #28]
 8014200:	781b      	ldrb	r3, [r3, #0]
 8014202:	f003 030f 	and.w	r3, r3, #15
 8014206:	b2db      	uxtb	r3, r3
 8014208:	009b      	lsls	r3, r3, #2
 801420a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801420c:	7e7b      	ldrb	r3, [r7, #25]
 801420e:	b29b      	uxth	r3, r3
 8014210:	8b7a      	ldrh	r2, [r7, #26]
 8014212:	429a      	cmp	r2, r3
 8014214:	d202      	bcs.n	801421c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801421a:	e135      	b.n	8014488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801421c:	7e7b      	ldrb	r3, [r7, #25]
 801421e:	b29b      	uxth	r3, r3
 8014220:	8b7a      	ldrh	r2, [r7, #26]
 8014222:	1ad3      	subs	r3, r2, r3
 8014224:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014226:	69fb      	ldr	r3, [r7, #28]
 8014228:	88db      	ldrh	r3, [r3, #6]
 801422a:	b29b      	uxth	r3, r3
 801422c:	4618      	mov	r0, r3
 801422e:	f7f6 f90b 	bl	800a448 <lwip_htons>
 8014232:	4603      	mov	r3, r0
 8014234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014238:	b29b      	uxth	r3, r3
 801423a:	00db      	lsls	r3, r3, #3
 801423c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014246:	2200      	movs	r2, #0
 8014248:	701a      	strb	r2, [r3, #0]
 801424a:	2200      	movs	r2, #0
 801424c:	705a      	strb	r2, [r3, #1]
 801424e:	2200      	movs	r2, #0
 8014250:	709a      	strb	r2, [r3, #2]
 8014252:	2200      	movs	r2, #0
 8014254:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014258:	8afa      	ldrh	r2, [r7, #22]
 801425a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801425c:	8afa      	ldrh	r2, [r7, #22]
 801425e:	8b7b      	ldrh	r3, [r7, #26]
 8014260:	4413      	add	r3, r2
 8014262:	b29a      	uxth	r2, r3
 8014264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014266:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426a:	88db      	ldrh	r3, [r3, #6]
 801426c:	b29b      	uxth	r3, r3
 801426e:	8afa      	ldrh	r2, [r7, #22]
 8014270:	429a      	cmp	r2, r3
 8014272:	d902      	bls.n	801427a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014278:	e106      	b.n	8014488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	685b      	ldr	r3, [r3, #4]
 801427e:	627b      	str	r3, [r7, #36]	; 0x24
 8014280:	e068      	b.n	8014354 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014284:	685b      	ldr	r3, [r3, #4]
 8014286:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428a:	889b      	ldrh	r3, [r3, #4]
 801428c:	b29a      	uxth	r2, r3
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	889b      	ldrh	r3, [r3, #4]
 8014292:	b29b      	uxth	r3, r3
 8014294:	429a      	cmp	r2, r3
 8014296:	d235      	bcs.n	8014304 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801429c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d020      	beq.n	80142e6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80142a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a6:	889b      	ldrh	r3, [r3, #4]
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142ac:	88db      	ldrh	r3, [r3, #6]
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d307      	bcc.n	80142c4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80142b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b6:	88db      	ldrh	r3, [r3, #6]
 80142b8:	b29a      	uxth	r2, r3
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	889b      	ldrh	r3, [r3, #4]
 80142be:	b29b      	uxth	r3, r3
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d902      	bls.n	80142ca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80142c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142c8:	e0de      	b.n	8014488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80142ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142cc:	68ba      	ldr	r2, [r7, #8]
 80142ce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80142d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142d2:	88db      	ldrh	r3, [r3, #6]
 80142d4:	b29a      	uxth	r2, r3
 80142d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d8:	889b      	ldrh	r3, [r3, #4]
 80142da:	b29b      	uxth	r3, r3
 80142dc:	429a      	cmp	r2, r3
 80142de:	d03d      	beq.n	801435c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80142e0:	2300      	movs	r3, #0
 80142e2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80142e4:	e03a      	b.n	801435c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80142e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e8:	88db      	ldrh	r3, [r3, #6]
 80142ea:	b29a      	uxth	r2, r3
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	889b      	ldrh	r3, [r3, #4]
 80142f0:	b29b      	uxth	r3, r3
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d902      	bls.n	80142fc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80142f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142fa:	e0c5      	b.n	8014488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	68ba      	ldr	r2, [r7, #8]
 8014300:	605a      	str	r2, [r3, #4]
      break;
 8014302:	e02b      	b.n	801435c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8014304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014306:	889b      	ldrh	r3, [r3, #4]
 8014308:	b29a      	uxth	r2, r3
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	889b      	ldrh	r3, [r3, #4]
 801430e:	b29b      	uxth	r3, r3
 8014310:	429a      	cmp	r2, r3
 8014312:	d102      	bne.n	801431a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014318:	e0b6      	b.n	8014488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431c:	889b      	ldrh	r3, [r3, #4]
 801431e:	b29a      	uxth	r2, r3
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	88db      	ldrh	r3, [r3, #6]
 8014324:	b29b      	uxth	r3, r3
 8014326:	429a      	cmp	r2, r3
 8014328:	d202      	bcs.n	8014330 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801432a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801432e:	e0ab      	b.n	8014488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014332:	2b00      	cmp	r3, #0
 8014334:	d009      	beq.n	801434a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014338:	88db      	ldrh	r3, [r3, #6]
 801433a:	b29a      	uxth	r2, r3
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	889b      	ldrh	r3, [r3, #4]
 8014340:	b29b      	uxth	r3, r3
 8014342:	429a      	cmp	r2, r3
 8014344:	d001      	beq.n	801434a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014346:	2300      	movs	r3, #0
 8014348:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014356:	2b00      	cmp	r3, #0
 8014358:	d193      	bne.n	8014282 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801435a:	e000      	b.n	801435e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801435c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014360:	2b00      	cmp	r3, #0
 8014362:	d12d      	bne.n	80143c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014366:	2b00      	cmp	r3, #0
 8014368:	d01c      	beq.n	80143a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436c:	88db      	ldrh	r3, [r3, #6]
 801436e:	b29a      	uxth	r2, r3
 8014370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014372:	889b      	ldrh	r3, [r3, #4]
 8014374:	b29b      	uxth	r3, r3
 8014376:	429a      	cmp	r2, r3
 8014378:	d906      	bls.n	8014388 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801437a:	4b45      	ldr	r3, [pc, #276]	; (8014490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801437c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014380:	4944      	ldr	r1, [pc, #272]	; (8014494 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014382:	4845      	ldr	r0, [pc, #276]	; (8014498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014384:	f000 fd00 	bl	8014d88 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801438a:	68ba      	ldr	r2, [r7, #8]
 801438c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014390:	88db      	ldrh	r3, [r3, #6]
 8014392:	b29a      	uxth	r2, r3
 8014394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014396:	889b      	ldrh	r3, [r3, #4]
 8014398:	b29b      	uxth	r3, r3
 801439a:	429a      	cmp	r2, r3
 801439c:	d010      	beq.n	80143c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801439e:	2300      	movs	r3, #0
 80143a0:	623b      	str	r3, [r7, #32]
 80143a2:	e00d      	b.n	80143c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d006      	beq.n	80143ba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80143ac:	4b38      	ldr	r3, [pc, #224]	; (8014490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143ae:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80143b2:	493a      	ldr	r1, [pc, #232]	; (801449c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80143b4:	4838      	ldr	r0, [pc, #224]	; (8014498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143b6:	f000 fce7 	bl	8014d88 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	68ba      	ldr	r2, [r7, #8]
 80143be:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d105      	bne.n	80143d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	7f9b      	ldrb	r3, [r3, #30]
 80143ca:	f003 0301 	and.w	r3, r3, #1
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d059      	beq.n	8014486 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80143d2:	6a3b      	ldr	r3, [r7, #32]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d04f      	beq.n	8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	685b      	ldr	r3, [r3, #4]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d006      	beq.n	80143ee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	685b      	ldr	r3, [r3, #4]
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	889b      	ldrh	r3, [r3, #4]
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d002      	beq.n	80143f4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80143ee:	2300      	movs	r3, #0
 80143f0:	623b      	str	r3, [r7, #32]
 80143f2:	e041      	b.n	8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80143f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80143f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80143fe:	e012      	b.n	8014426 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014402:	685b      	ldr	r3, [r3, #4]
 8014404:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014408:	88db      	ldrh	r3, [r3, #6]
 801440a:	b29a      	uxth	r2, r3
 801440c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801440e:	889b      	ldrh	r3, [r3, #4]
 8014410:	b29b      	uxth	r3, r3
 8014412:	429a      	cmp	r2, r3
 8014414:	d002      	beq.n	801441c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014416:	2300      	movs	r3, #0
 8014418:	623b      	str	r3, [r7, #32]
            break;
 801441a:	e007      	b.n	801442c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801441e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014428:	2b00      	cmp	r3, #0
 801442a:	d1e9      	bne.n	8014400 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801442c:	6a3b      	ldr	r3, [r7, #32]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d022      	beq.n	8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	685b      	ldr	r3, [r3, #4]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d106      	bne.n	8014448 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801443a:	4b15      	ldr	r3, [pc, #84]	; (8014490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801443c:	f240 12df 	movw	r2, #479	; 0x1df
 8014440:	4917      	ldr	r1, [pc, #92]	; (80144a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014442:	4815      	ldr	r0, [pc, #84]	; (8014498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014444:	f000 fca0 	bl	8014d88 <iprintf>
          LWIP_ASSERT("sanity check",
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	685b      	ldr	r3, [r3, #4]
 801444e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014450:	429a      	cmp	r2, r3
 8014452:	d106      	bne.n	8014462 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014454:	4b0e      	ldr	r3, [pc, #56]	; (8014490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014456:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801445a:	4911      	ldr	r1, [pc, #68]	; (80144a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801445c:	480e      	ldr	r0, [pc, #56]	; (8014498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801445e:	f000 fc93 	bl	8014d88 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d006      	beq.n	8014478 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801446a:	4b09      	ldr	r3, [pc, #36]	; (8014490 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801446c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014470:	490c      	ldr	r1, [pc, #48]	; (80144a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014472:	4809      	ldr	r0, [pc, #36]	; (8014498 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014474:	f000 fc88 	bl	8014d88 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014478:	6a3b      	ldr	r3, [r7, #32]
 801447a:	2b00      	cmp	r3, #0
 801447c:	bf14      	ite	ne
 801447e:	2301      	movne	r3, #1
 8014480:	2300      	moveq	r3, #0
 8014482:	b2db      	uxtb	r3, r3
 8014484:	e000      	b.n	8014488 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014486:	2300      	movs	r3, #0
}
 8014488:	4618      	mov	r0, r3
 801448a:	3730      	adds	r7, #48	; 0x30
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}
 8014490:	08019990 	.word	0x08019990
 8014494:	08019a74 	.word	0x08019a74
 8014498:	080199d8 	.word	0x080199d8
 801449c:	08019a94 	.word	0x08019a94
 80144a0:	08019acc 	.word	0x08019acc
 80144a4:	08019adc 	.word	0x08019adc

080144a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b08e      	sub	sp, #56	; 0x38
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	685b      	ldr	r3, [r3, #4]
 80144b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80144b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144b8:	781b      	ldrb	r3, [r3, #0]
 80144ba:	f003 030f 	and.w	r3, r3, #15
 80144be:	b2db      	uxtb	r3, r3
 80144c0:	009b      	lsls	r3, r3, #2
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	2b14      	cmp	r3, #20
 80144c6:	f040 8167 	bne.w	8014798 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80144ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144cc:	88db      	ldrh	r3, [r3, #6]
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7f5 ffb9 	bl	800a448 <lwip_htons>
 80144d6:	4603      	mov	r3, r0
 80144d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80144dc:	b29b      	uxth	r3, r3
 80144de:	00db      	lsls	r3, r3, #3
 80144e0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80144e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e4:	885b      	ldrh	r3, [r3, #2]
 80144e6:	b29b      	uxth	r3, r3
 80144e8:	4618      	mov	r0, r3
 80144ea:	f7f5 ffad 	bl	800a448 <lwip_htons>
 80144ee:	4603      	mov	r3, r0
 80144f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80144f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144f4:	781b      	ldrb	r3, [r3, #0]
 80144f6:	f003 030f 	and.w	r3, r3, #15
 80144fa:	b2db      	uxtb	r3, r3
 80144fc:	009b      	lsls	r3, r3, #2
 80144fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014506:	b29b      	uxth	r3, r3
 8014508:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801450a:	429a      	cmp	r2, r3
 801450c:	f0c0 8146 	bcc.w	801479c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014510:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014514:	b29b      	uxth	r3, r3
 8014516:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014518:	1ad3      	subs	r3, r2, r3
 801451a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f7f7 fbad 	bl	800bc7c <pbuf_clen>
 8014522:	4603      	mov	r3, r0
 8014524:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014526:	4b9f      	ldr	r3, [pc, #636]	; (80147a4 <ip4_reass+0x2fc>)
 8014528:	881b      	ldrh	r3, [r3, #0]
 801452a:	461a      	mov	r2, r3
 801452c:	8c3b      	ldrh	r3, [r7, #32]
 801452e:	4413      	add	r3, r2
 8014530:	2b0a      	cmp	r3, #10
 8014532:	dd10      	ble.n	8014556 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014534:	8c3b      	ldrh	r3, [r7, #32]
 8014536:	4619      	mov	r1, r3
 8014538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801453a:	f7ff fd81 	bl	8014040 <ip_reass_remove_oldest_datagram>
 801453e:	4603      	mov	r3, r0
 8014540:	2b00      	cmp	r3, #0
 8014542:	f000 812d 	beq.w	80147a0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014546:	4b97      	ldr	r3, [pc, #604]	; (80147a4 <ip4_reass+0x2fc>)
 8014548:	881b      	ldrh	r3, [r3, #0]
 801454a:	461a      	mov	r2, r3
 801454c:	8c3b      	ldrh	r3, [r7, #32]
 801454e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014550:	2b0a      	cmp	r3, #10
 8014552:	f300 8125 	bgt.w	80147a0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014556:	4b94      	ldr	r3, [pc, #592]	; (80147a8 <ip4_reass+0x300>)
 8014558:	681b      	ldr	r3, [r3, #0]
 801455a:	633b      	str	r3, [r7, #48]	; 0x30
 801455c:	e015      	b.n	801458a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014560:	695a      	ldr	r2, [r3, #20]
 8014562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014564:	68db      	ldr	r3, [r3, #12]
 8014566:	429a      	cmp	r2, r3
 8014568:	d10c      	bne.n	8014584 <ip4_reass+0xdc>
 801456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801456c:	699a      	ldr	r2, [r3, #24]
 801456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014570:	691b      	ldr	r3, [r3, #16]
 8014572:	429a      	cmp	r2, r3
 8014574:	d106      	bne.n	8014584 <ip4_reass+0xdc>
 8014576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014578:	899a      	ldrh	r2, [r3, #12]
 801457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801457c:	889b      	ldrh	r3, [r3, #4]
 801457e:	b29b      	uxth	r3, r3
 8014580:	429a      	cmp	r2, r3
 8014582:	d006      	beq.n	8014592 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	633b      	str	r3, [r7, #48]	; 0x30
 801458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458c:	2b00      	cmp	r3, #0
 801458e:	d1e6      	bne.n	801455e <ip4_reass+0xb6>
 8014590:	e000      	b.n	8014594 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014592:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014596:	2b00      	cmp	r3, #0
 8014598:	d109      	bne.n	80145ae <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801459a:	8c3b      	ldrh	r3, [r7, #32]
 801459c:	4619      	mov	r1, r3
 801459e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145a0:	f7ff fdb0 	bl	8014104 <ip_reass_enqueue_new_datagram>
 80145a4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80145a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d11c      	bne.n	80145e6 <ip4_reass+0x13e>
      goto nullreturn;
 80145ac:	e109      	b.n	80147c2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80145ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145b0:	88db      	ldrh	r3, [r3, #6]
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	4618      	mov	r0, r3
 80145b6:	f7f5 ff47 	bl	800a448 <lwip_htons>
 80145ba:	4603      	mov	r3, r0
 80145bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d110      	bne.n	80145e6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80145c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c6:	89db      	ldrh	r3, [r3, #14]
 80145c8:	4618      	mov	r0, r3
 80145ca:	f7f5 ff3d 	bl	800a448 <lwip_htons>
 80145ce:	4603      	mov	r3, r0
 80145d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d006      	beq.n	80145e6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80145d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145da:	3308      	adds	r3, #8
 80145dc:	2214      	movs	r2, #20
 80145de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80145e0:	4618      	mov	r0, r3
 80145e2:	f000 fba1 	bl	8014d28 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80145e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e8:	88db      	ldrh	r3, [r3, #6]
 80145ea:	b29b      	uxth	r3, r3
 80145ec:	f003 0320 	and.w	r3, r3, #32
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	bf0c      	ite	eq
 80145f4:	2301      	moveq	r3, #1
 80145f6:	2300      	movne	r3, #0
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80145fc:	69fb      	ldr	r3, [r7, #28]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d00e      	beq.n	8014620 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014602:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014604:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014606:	4413      	add	r3, r2
 8014608:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801460a:	8b7a      	ldrh	r2, [r7, #26]
 801460c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801460e:	429a      	cmp	r2, r3
 8014610:	f0c0 80a0 	bcc.w	8014754 <ip4_reass+0x2ac>
 8014614:	8b7b      	ldrh	r3, [r7, #26]
 8014616:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801461a:	4293      	cmp	r3, r2
 801461c:	f200 809a 	bhi.w	8014754 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014620:	69fa      	ldr	r2, [r7, #28]
 8014622:	6879      	ldr	r1, [r7, #4]
 8014624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014626:	f7ff fdd5 	bl	80141d4 <ip_reass_chain_frag_into_datagram_and_validate>
 801462a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014632:	f000 8091 	beq.w	8014758 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014636:	4b5b      	ldr	r3, [pc, #364]	; (80147a4 <ip4_reass+0x2fc>)
 8014638:	881a      	ldrh	r2, [r3, #0]
 801463a:	8c3b      	ldrh	r3, [r7, #32]
 801463c:	4413      	add	r3, r2
 801463e:	b29a      	uxth	r2, r3
 8014640:	4b58      	ldr	r3, [pc, #352]	; (80147a4 <ip4_reass+0x2fc>)
 8014642:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d00d      	beq.n	8014666 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801464a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801464c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801464e:	4413      	add	r3, r2
 8014650:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014654:	8a7a      	ldrh	r2, [r7, #18]
 8014656:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801465a:	7f9b      	ldrb	r3, [r3, #30]
 801465c:	f043 0301 	orr.w	r3, r3, #1
 8014660:	b2da      	uxtb	r2, r3
 8014662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014664:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014666:	697b      	ldr	r3, [r7, #20]
 8014668:	2b01      	cmp	r3, #1
 801466a:	d171      	bne.n	8014750 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801466e:	8b9b      	ldrh	r3, [r3, #28]
 8014670:	3314      	adds	r3, #20
 8014672:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801467e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014680:	685b      	ldr	r3, [r3, #4]
 8014682:	685b      	ldr	r3, [r3, #4]
 8014684:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014688:	3308      	adds	r3, #8
 801468a:	2214      	movs	r2, #20
 801468c:	4619      	mov	r1, r3
 801468e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014690:	f000 fb4a 	bl	8014d28 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014694:	8a3b      	ldrh	r3, [r7, #16]
 8014696:	4618      	mov	r0, r3
 8014698:	f7f5 fed6 	bl	800a448 <lwip_htons>
 801469c:	4603      	mov	r3, r0
 801469e:	461a      	mov	r2, r3
 80146a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146a2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80146a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146a6:	2200      	movs	r2, #0
 80146a8:	719a      	strb	r2, [r3, #6]
 80146aa:	2200      	movs	r2, #0
 80146ac:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80146ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146b0:	2200      	movs	r2, #0
 80146b2:	729a      	strb	r2, [r3, #10]
 80146b4:	2200      	movs	r2, #0
 80146b6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80146b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ba:	685b      	ldr	r3, [r3, #4]
 80146bc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80146be:	e00d      	b.n	80146dc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80146c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80146c6:	2114      	movs	r1, #20
 80146c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80146ca:	f7f7 f9c9 	bl	800ba60 <pbuf_remove_header>
      pbuf_cat(p, r);
 80146ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80146d0:	6878      	ldr	r0, [r7, #4]
 80146d2:	f7f7 fb0d 	bl	800bcf0 <pbuf_cat>
      r = iprh->next_pbuf;
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80146dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d1ee      	bne.n	80146c0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80146e2:	4b31      	ldr	r3, [pc, #196]	; (80147a8 <ip4_reass+0x300>)
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80146e8:	429a      	cmp	r2, r3
 80146ea:	d102      	bne.n	80146f2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80146ec:	2300      	movs	r3, #0
 80146ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80146f0:	e010      	b.n	8014714 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80146f2:	4b2d      	ldr	r3, [pc, #180]	; (80147a8 <ip4_reass+0x300>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80146f8:	e007      	b.n	801470a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80146fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014700:	429a      	cmp	r2, r3
 8014702:	d006      	beq.n	8014712 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	62fb      	str	r3, [r7, #44]	; 0x2c
 801470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801470c:	2b00      	cmp	r3, #0
 801470e:	d1f4      	bne.n	80146fa <ip4_reass+0x252>
 8014710:	e000      	b.n	8014714 <ip4_reass+0x26c>
          break;
 8014712:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014718:	f7ff fd2e 	bl	8014178 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f7f7 faad 	bl	800bc7c <pbuf_clen>
 8014722:	4603      	mov	r3, r0
 8014724:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014726:	4b1f      	ldr	r3, [pc, #124]	; (80147a4 <ip4_reass+0x2fc>)
 8014728:	881b      	ldrh	r3, [r3, #0]
 801472a:	8c3a      	ldrh	r2, [r7, #32]
 801472c:	429a      	cmp	r2, r3
 801472e:	d906      	bls.n	801473e <ip4_reass+0x296>
 8014730:	4b1e      	ldr	r3, [pc, #120]	; (80147ac <ip4_reass+0x304>)
 8014732:	f240 229b 	movw	r2, #667	; 0x29b
 8014736:	491e      	ldr	r1, [pc, #120]	; (80147b0 <ip4_reass+0x308>)
 8014738:	481e      	ldr	r0, [pc, #120]	; (80147b4 <ip4_reass+0x30c>)
 801473a:	f000 fb25 	bl	8014d88 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801473e:	4b19      	ldr	r3, [pc, #100]	; (80147a4 <ip4_reass+0x2fc>)
 8014740:	881a      	ldrh	r2, [r3, #0]
 8014742:	8c3b      	ldrh	r3, [r7, #32]
 8014744:	1ad3      	subs	r3, r2, r3
 8014746:	b29a      	uxth	r2, r3
 8014748:	4b16      	ldr	r3, [pc, #88]	; (80147a4 <ip4_reass+0x2fc>)
 801474a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	e03c      	b.n	80147ca <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014750:	2300      	movs	r3, #0
 8014752:	e03a      	b.n	80147ca <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014754:	bf00      	nop
 8014756:	e000      	b.n	801475a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014758:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801475c:	2b00      	cmp	r3, #0
 801475e:	d106      	bne.n	801476e <ip4_reass+0x2c6>
 8014760:	4b12      	ldr	r3, [pc, #72]	; (80147ac <ip4_reass+0x304>)
 8014762:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014766:	4914      	ldr	r1, [pc, #80]	; (80147b8 <ip4_reass+0x310>)
 8014768:	4812      	ldr	r0, [pc, #72]	; (80147b4 <ip4_reass+0x30c>)
 801476a:	f000 fb0d 	bl	8014d88 <iprintf>
  if (ipr->p == NULL) {
 801476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014770:	685b      	ldr	r3, [r3, #4]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d124      	bne.n	80147c0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014776:	4b0c      	ldr	r3, [pc, #48]	; (80147a8 <ip4_reass+0x300>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801477c:	429a      	cmp	r2, r3
 801477e:	d006      	beq.n	801478e <ip4_reass+0x2e6>
 8014780:	4b0a      	ldr	r3, [pc, #40]	; (80147ac <ip4_reass+0x304>)
 8014782:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014786:	490d      	ldr	r1, [pc, #52]	; (80147bc <ip4_reass+0x314>)
 8014788:	480a      	ldr	r0, [pc, #40]	; (80147b4 <ip4_reass+0x30c>)
 801478a:	f000 fafd 	bl	8014d88 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801478e:	2100      	movs	r1, #0
 8014790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014792:	f7ff fcf1 	bl	8014178 <ip_reass_dequeue_datagram>
 8014796:	e014      	b.n	80147c2 <ip4_reass+0x31a>
    goto nullreturn;
 8014798:	bf00      	nop
 801479a:	e012      	b.n	80147c2 <ip4_reass+0x31a>
    goto nullreturn;
 801479c:	bf00      	nop
 801479e:	e010      	b.n	80147c2 <ip4_reass+0x31a>
      goto nullreturn;
 80147a0:	bf00      	nop
 80147a2:	e00e      	b.n	80147c2 <ip4_reass+0x31a>
 80147a4:	20000b50 	.word	0x20000b50
 80147a8:	20000b4c 	.word	0x20000b4c
 80147ac:	08019990 	.word	0x08019990
 80147b0:	08019b00 	.word	0x08019b00
 80147b4:	080199d8 	.word	0x080199d8
 80147b8:	08019b1c 	.word	0x08019b1c
 80147bc:	08019b28 	.word	0x08019b28
  }

nullreturn:
 80147c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f7f7 f9d2 	bl	800bb6c <pbuf_free>
  return NULL;
 80147c8:	2300      	movs	r3, #0
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3738      	adds	r7, #56	; 0x38
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}
 80147d2:	bf00      	nop

080147d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80147d8:	2005      	movs	r0, #5
 80147da:	f7f6 fb69 	bl	800aeb0 <memp_malloc>
 80147de:	4603      	mov	r3, r0
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	bd80      	pop	{r7, pc}

080147e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d106      	bne.n	8014800 <ip_frag_free_pbuf_custom_ref+0x1c>
 80147f2:	4b07      	ldr	r3, [pc, #28]	; (8014810 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80147f4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80147f8:	4906      	ldr	r1, [pc, #24]	; (8014814 <ip_frag_free_pbuf_custom_ref+0x30>)
 80147fa:	4807      	ldr	r0, [pc, #28]	; (8014818 <ip_frag_free_pbuf_custom_ref+0x34>)
 80147fc:	f000 fac4 	bl	8014d88 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014800:	6879      	ldr	r1, [r7, #4]
 8014802:	2005      	movs	r0, #5
 8014804:	f7f6 fba0 	bl	800af48 <memp_free>
}
 8014808:	bf00      	nop
 801480a:	3708      	adds	r7, #8
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}
 8014810:	08019990 	.word	0x08019990
 8014814:	08019b48 	.word	0x08019b48
 8014818:	080199d8 	.word	0x080199d8

0801481c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b084      	sub	sp, #16
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d106      	bne.n	801483c <ipfrag_free_pbuf_custom+0x20>
 801482e:	4b11      	ldr	r3, [pc, #68]	; (8014874 <ipfrag_free_pbuf_custom+0x58>)
 8014830:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014834:	4910      	ldr	r1, [pc, #64]	; (8014878 <ipfrag_free_pbuf_custom+0x5c>)
 8014836:	4811      	ldr	r0, [pc, #68]	; (801487c <ipfrag_free_pbuf_custom+0x60>)
 8014838:	f000 faa6 	bl	8014d88 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801483c:	68fa      	ldr	r2, [r7, #12]
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	429a      	cmp	r2, r3
 8014842:	d006      	beq.n	8014852 <ipfrag_free_pbuf_custom+0x36>
 8014844:	4b0b      	ldr	r3, [pc, #44]	; (8014874 <ipfrag_free_pbuf_custom+0x58>)
 8014846:	f240 22cf 	movw	r2, #719	; 0x2cf
 801484a:	490d      	ldr	r1, [pc, #52]	; (8014880 <ipfrag_free_pbuf_custom+0x64>)
 801484c:	480b      	ldr	r0, [pc, #44]	; (801487c <ipfrag_free_pbuf_custom+0x60>)
 801484e:	f000 fa9b 	bl	8014d88 <iprintf>
  if (pcr->original != NULL) {
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	695b      	ldr	r3, [r3, #20]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d004      	beq.n	8014864 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	695b      	ldr	r3, [r3, #20]
 801485e:	4618      	mov	r0, r3
 8014860:	f7f7 f984 	bl	800bb6c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014864:	68f8      	ldr	r0, [r7, #12]
 8014866:	f7ff ffbd 	bl	80147e4 <ip_frag_free_pbuf_custom_ref>
}
 801486a:	bf00      	nop
 801486c:	3710      	adds	r7, #16
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	08019990 	.word	0x08019990
 8014878:	08019b54 	.word	0x08019b54
 801487c:	080199d8 	.word	0x080199d8
 8014880:	08019b60 	.word	0x08019b60

08014884 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b094      	sub	sp, #80	; 0x50
 8014888:	af02      	add	r7, sp, #8
 801488a:	60f8      	str	r0, [r7, #12]
 801488c:	60b9      	str	r1, [r7, #8]
 801488e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014890:	2300      	movs	r3, #0
 8014892:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801489a:	3b14      	subs	r3, #20
 801489c:	2b00      	cmp	r3, #0
 801489e:	da00      	bge.n	80148a2 <ip4_frag+0x1e>
 80148a0:	3307      	adds	r3, #7
 80148a2:	10db      	asrs	r3, r3, #3
 80148a4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80148a6:	2314      	movs	r3, #20
 80148a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	685b      	ldr	r3, [r3, #4]
 80148ae:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80148b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80148b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	f003 030f 	and.w	r3, r3, #15
 80148bc:	b2db      	uxtb	r3, r3
 80148be:	009b      	lsls	r3, r3, #2
 80148c0:	b2db      	uxtb	r3, r3
 80148c2:	2b14      	cmp	r3, #20
 80148c4:	d002      	beq.n	80148cc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80148c6:	f06f 0305 	mvn.w	r3, #5
 80148ca:	e110      	b.n	8014aee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	895b      	ldrh	r3, [r3, #10]
 80148d0:	2b13      	cmp	r3, #19
 80148d2:	d809      	bhi.n	80148e8 <ip4_frag+0x64>
 80148d4:	4b88      	ldr	r3, [pc, #544]	; (8014af8 <ip4_frag+0x274>)
 80148d6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80148da:	4988      	ldr	r1, [pc, #544]	; (8014afc <ip4_frag+0x278>)
 80148dc:	4888      	ldr	r0, [pc, #544]	; (8014b00 <ip4_frag+0x27c>)
 80148de:	f000 fa53 	bl	8014d88 <iprintf>
 80148e2:	f06f 0305 	mvn.w	r3, #5
 80148e6:	e102      	b.n	8014aee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80148e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ea:	88db      	ldrh	r3, [r3, #6]
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7f5 fdaa 	bl	800a448 <lwip_htons>
 80148f4:	4603      	mov	r3, r0
 80148f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80148f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80148fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80148fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014902:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014908:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	891b      	ldrh	r3, [r3, #8]
 801490e:	3b14      	subs	r3, #20
 8014910:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014914:	e0e1      	b.n	8014ada <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014916:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014918:	00db      	lsls	r3, r3, #3
 801491a:	b29b      	uxth	r3, r3
 801491c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014920:	4293      	cmp	r3, r2
 8014922:	bf28      	it	cs
 8014924:	4613      	movcs	r3, r2
 8014926:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014928:	f44f 7220 	mov.w	r2, #640	; 0x280
 801492c:	2114      	movs	r1, #20
 801492e:	200e      	movs	r0, #14
 8014930:	f7f6 fe38 	bl	800b5a4 <pbuf_alloc>
 8014934:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014938:	2b00      	cmp	r3, #0
 801493a:	f000 80d5 	beq.w	8014ae8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014940:	895b      	ldrh	r3, [r3, #10]
 8014942:	2b13      	cmp	r3, #19
 8014944:	d806      	bhi.n	8014954 <ip4_frag+0xd0>
 8014946:	4b6c      	ldr	r3, [pc, #432]	; (8014af8 <ip4_frag+0x274>)
 8014948:	f44f 7249 	mov.w	r2, #804	; 0x324
 801494c:	496d      	ldr	r1, [pc, #436]	; (8014b04 <ip4_frag+0x280>)
 801494e:	486c      	ldr	r0, [pc, #432]	; (8014b00 <ip4_frag+0x27c>)
 8014950:	f000 fa1a 	bl	8014d88 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014956:	685b      	ldr	r3, [r3, #4]
 8014958:	2214      	movs	r2, #20
 801495a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801495c:	4618      	mov	r0, r3
 801495e:	f000 f9e3 	bl	8014d28 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014964:	685b      	ldr	r3, [r3, #4]
 8014966:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014968:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801496a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801496e:	e064      	b.n	8014a3a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	895a      	ldrh	r2, [r3, #10]
 8014974:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014976:	1ad3      	subs	r3, r2, r3
 8014978:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	895b      	ldrh	r3, [r3, #10]
 801497e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014980:	429a      	cmp	r2, r3
 8014982:	d906      	bls.n	8014992 <ip4_frag+0x10e>
 8014984:	4b5c      	ldr	r3, [pc, #368]	; (8014af8 <ip4_frag+0x274>)
 8014986:	f240 322d 	movw	r2, #813	; 0x32d
 801498a:	495f      	ldr	r1, [pc, #380]	; (8014b08 <ip4_frag+0x284>)
 801498c:	485c      	ldr	r0, [pc, #368]	; (8014b00 <ip4_frag+0x27c>)
 801498e:	f000 f9fb 	bl	8014d88 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014992:	8bfa      	ldrh	r2, [r7, #30]
 8014994:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014998:	4293      	cmp	r3, r2
 801499a:	bf28      	it	cs
 801499c:	4613      	movcs	r3, r2
 801499e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80149a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d105      	bne.n	80149b6 <ip4_frag+0x132>
        poff = 0;
 80149aa:	2300      	movs	r3, #0
 80149ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	60fb      	str	r3, [r7, #12]
        continue;
 80149b4:	e041      	b.n	8014a3a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80149b6:	f7ff ff0d 	bl	80147d4 <ip_frag_alloc_pbuf_custom_ref>
 80149ba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d103      	bne.n	80149ca <ip4_frag+0x146>
        pbuf_free(rambuf);
 80149c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149c4:	f7f7 f8d2 	bl	800bb6c <pbuf_free>
        goto memerr;
 80149c8:	e08f      	b.n	8014aea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80149ca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80149d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80149d2:	4413      	add	r3, r2
 80149d4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80149d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80149dc:	9201      	str	r2, [sp, #4]
 80149de:	9300      	str	r3, [sp, #0]
 80149e0:	4603      	mov	r3, r0
 80149e2:	2241      	movs	r2, #65	; 0x41
 80149e4:	2000      	movs	r0, #0
 80149e6:	f7f6 ff07 	bl	800b7f8 <pbuf_alloced_custom>
 80149ea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80149ec:	697b      	ldr	r3, [r7, #20]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d106      	bne.n	8014a00 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80149f2:	69b8      	ldr	r0, [r7, #24]
 80149f4:	f7ff fef6 	bl	80147e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80149f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149fa:	f7f7 f8b7 	bl	800bb6c <pbuf_free>
        goto memerr;
 80149fe:	e074      	b.n	8014aea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014a00:	68f8      	ldr	r0, [r7, #12]
 8014a02:	f7f7 f953 	bl	800bcac <pbuf_ref>
      pcr->original = p;
 8014a06:	69bb      	ldr	r3, [r7, #24]
 8014a08:	68fa      	ldr	r2, [r7, #12]
 8014a0a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014a0c:	69bb      	ldr	r3, [r7, #24]
 8014a0e:	4a3f      	ldr	r2, [pc, #252]	; (8014b0c <ip4_frag+0x288>)
 8014a10:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014a12:	6979      	ldr	r1, [r7, #20]
 8014a14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a16:	f7f7 f96b 	bl	800bcf0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014a1a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014a1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a22:	1ad3      	subs	r3, r2, r3
 8014a24:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014a28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d004      	beq.n	8014a3a <ip4_frag+0x1b6>
        poff = 0;
 8014a30:	2300      	movs	r3, #0
 8014a32:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014a3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d196      	bne.n	8014970 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014a42:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014a44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a48:	4413      	add	r3, r2
 8014a4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014a50:	f1a3 0213 	sub.w	r2, r3, #19
 8014a54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014a58:	429a      	cmp	r2, r3
 8014a5a:	bfcc      	ite	gt
 8014a5c:	2301      	movgt	r3, #1
 8014a5e:	2300      	movle	r3, #0
 8014a60:	b2db      	uxtb	r3, r3
 8014a62:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014a64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014a68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014a6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014a6e:	6a3b      	ldr	r3, [r7, #32]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d002      	beq.n	8014a7a <ip4_frag+0x1f6>
 8014a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d003      	beq.n	8014a82 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014a7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014a7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014a80:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014a82:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014a84:	4618      	mov	r0, r3
 8014a86:	f7f5 fcdf 	bl	800a448 <lwip_htons>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a90:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014a92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014a94:	3314      	adds	r3, #20
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7f5 fcd5 	bl	800a448 <lwip_htons>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	461a      	mov	r2, r3
 8014aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	729a      	strb	r2, [r3, #10]
 8014aac:	2200      	movs	r2, #0
 8014aae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	695b      	ldr	r3, [r3, #20]
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ab8:	68b8      	ldr	r0, [r7, #8]
 8014aba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014abe:	f7f7 f855 	bl	800bb6c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014ac2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ac6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014ac8:	1ad3      	subs	r3, r2, r3
 8014aca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014ace:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014ad2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ad4:	4413      	add	r3, r2
 8014ad6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014ada:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	f47f af19 	bne.w	8014916 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	e002      	b.n	8014aee <ip4_frag+0x26a>
      goto memerr;
 8014ae8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3748      	adds	r7, #72	; 0x48
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	08019990 	.word	0x08019990
 8014afc:	08019b6c 	.word	0x08019b6c
 8014b00:	080199d8 	.word	0x080199d8
 8014b04:	08019b88 	.word	0x08019b88
 8014b08:	08019ba8 	.word	0x08019ba8
 8014b0c:	0801481d 	.word	0x0801481d

08014b10 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b086      	sub	sp, #24
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
 8014b18:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014b1a:	230e      	movs	r3, #14
 8014b1c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	895b      	ldrh	r3, [r3, #10]
 8014b22:	2b0e      	cmp	r3, #14
 8014b24:	d96e      	bls.n	8014c04 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	7bdb      	ldrb	r3, [r3, #15]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d106      	bne.n	8014b3c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014b2e:	683b      	ldr	r3, [r7, #0]
 8014b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b34:	3301      	adds	r3, #1
 8014b36:	b2da      	uxtb	r2, r3
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	685b      	ldr	r3, [r3, #4]
 8014b40:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014b42:	693b      	ldr	r3, [r7, #16]
 8014b44:	7b1a      	ldrb	r2, [r3, #12]
 8014b46:	7b5b      	ldrb	r3, [r3, #13]
 8014b48:	021b      	lsls	r3, r3, #8
 8014b4a:	4313      	orrs	r3, r2
 8014b4c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	f003 0301 	and.w	r3, r3, #1
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d023      	beq.n	8014ba2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014b5a:	693b      	ldr	r3, [r7, #16]
 8014b5c:	781b      	ldrb	r3, [r3, #0]
 8014b5e:	2b01      	cmp	r3, #1
 8014b60:	d10f      	bne.n	8014b82 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014b62:	693b      	ldr	r3, [r7, #16]
 8014b64:	785b      	ldrb	r3, [r3, #1]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d11b      	bne.n	8014ba2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014b6a:	693b      	ldr	r3, [r7, #16]
 8014b6c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014b6e:	2b5e      	cmp	r3, #94	; 0x5e
 8014b70:	d117      	bne.n	8014ba2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	7b5b      	ldrb	r3, [r3, #13]
 8014b76:	f043 0310 	orr.w	r3, r3, #16
 8014b7a:	b2da      	uxtb	r2, r3
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	735a      	strb	r2, [r3, #13]
 8014b80:	e00f      	b.n	8014ba2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014b82:	693b      	ldr	r3, [r7, #16]
 8014b84:	2206      	movs	r2, #6
 8014b86:	4928      	ldr	r1, [pc, #160]	; (8014c28 <ethernet_input+0x118>)
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f000 f8bf 	bl	8014d0c <memcmp>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d106      	bne.n	8014ba2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	7b5b      	ldrb	r3, [r3, #13]
 8014b98:	f043 0308 	orr.w	r3, r3, #8
 8014b9c:	b2da      	uxtb	r2, r3
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014ba2:	89fb      	ldrh	r3, [r7, #14]
 8014ba4:	2b08      	cmp	r3, #8
 8014ba6:	d003      	beq.n	8014bb0 <ethernet_input+0xa0>
 8014ba8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014bac:	d014      	beq.n	8014bd8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014bae:	e032      	b.n	8014c16 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014bb6:	f003 0308 	and.w	r3, r3, #8
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d024      	beq.n	8014c08 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014bbe:	8afb      	ldrh	r3, [r7, #22]
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f7f6 ff4c 	bl	800ba60 <pbuf_remove_header>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d11e      	bne.n	8014c0c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014bce:	6839      	ldr	r1, [r7, #0]
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f7fe ff27 	bl	8013a24 <ip4_input>
      break;
 8014bd6:	e013      	b.n	8014c00 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014bde:	f003 0308 	and.w	r3, r3, #8
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d014      	beq.n	8014c10 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014be6:	8afb      	ldrh	r3, [r7, #22]
 8014be8:	4619      	mov	r1, r3
 8014bea:	6878      	ldr	r0, [r7, #4]
 8014bec:	f7f6 ff38 	bl	800ba60 <pbuf_remove_header>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d10e      	bne.n	8014c14 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014bf6:	6839      	ldr	r1, [r7, #0]
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f7fe f8c7 	bl	8012d8c <etharp_input>
      break;
 8014bfe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014c00:	2300      	movs	r3, #0
 8014c02:	e00c      	b.n	8014c1e <ethernet_input+0x10e>
    goto free_and_return;
 8014c04:	bf00      	nop
 8014c06:	e006      	b.n	8014c16 <ethernet_input+0x106>
        goto free_and_return;
 8014c08:	bf00      	nop
 8014c0a:	e004      	b.n	8014c16 <ethernet_input+0x106>
        goto free_and_return;
 8014c0c:	bf00      	nop
 8014c0e:	e002      	b.n	8014c16 <ethernet_input+0x106>
        goto free_and_return;
 8014c10:	bf00      	nop
 8014c12:	e000      	b.n	8014c16 <ethernet_input+0x106>
        goto free_and_return;
 8014c14:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f7f6 ffa8 	bl	800bb6c <pbuf_free>
  return ERR_OK;
 8014c1c:	2300      	movs	r3, #0
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3718      	adds	r7, #24
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	bf00      	nop
 8014c28:	0801f03c 	.word	0x0801f03c

08014c2c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b086      	sub	sp, #24
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	60f8      	str	r0, [r7, #12]
 8014c34:	60b9      	str	r1, [r7, #8]
 8014c36:	607a      	str	r2, [r7, #4]
 8014c38:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014c3a:	8c3b      	ldrh	r3, [r7, #32]
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7f5 fc03 	bl	800a448 <lwip_htons>
 8014c42:	4603      	mov	r3, r0
 8014c44:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014c46:	210e      	movs	r1, #14
 8014c48:	68b8      	ldr	r0, [r7, #8]
 8014c4a:	f7f6 fef9 	bl	800ba40 <pbuf_add_header>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d125      	bne.n	8014ca0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	685b      	ldr	r3, [r3, #4]
 8014c58:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014c5a:	693b      	ldr	r3, [r7, #16]
 8014c5c:	8afa      	ldrh	r2, [r7, #22]
 8014c5e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	2206      	movs	r2, #6
 8014c64:	6839      	ldr	r1, [r7, #0]
 8014c66:	4618      	mov	r0, r3
 8014c68:	f000 f85e 	bl	8014d28 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	3306      	adds	r3, #6
 8014c70:	2206      	movs	r2, #6
 8014c72:	6879      	ldr	r1, [r7, #4]
 8014c74:	4618      	mov	r0, r3
 8014c76:	f000 f857 	bl	8014d28 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014c80:	2b06      	cmp	r3, #6
 8014c82:	d006      	beq.n	8014c92 <ethernet_output+0x66>
 8014c84:	4b0a      	ldr	r3, [pc, #40]	; (8014cb0 <ethernet_output+0x84>)
 8014c86:	f44f 7299 	mov.w	r2, #306	; 0x132
 8014c8a:	490a      	ldr	r1, [pc, #40]	; (8014cb4 <ethernet_output+0x88>)
 8014c8c:	480a      	ldr	r0, [pc, #40]	; (8014cb8 <ethernet_output+0x8c>)
 8014c8e:	f000 f87b 	bl	8014d88 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	699b      	ldr	r3, [r3, #24]
 8014c96:	68b9      	ldr	r1, [r7, #8]
 8014c98:	68f8      	ldr	r0, [r7, #12]
 8014c9a:	4798      	blx	r3
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	e002      	b.n	8014ca6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014ca0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014ca2:	f06f 0301 	mvn.w	r3, #1
}
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	3718      	adds	r7, #24
 8014caa:	46bd      	mov	sp, r7
 8014cac:	bd80      	pop	{r7, pc}
 8014cae:	bf00      	nop
 8014cb0:	08019bb8 	.word	0x08019bb8
 8014cb4:	08019bf0 	.word	0x08019bf0
 8014cb8:	08019c24 	.word	0x08019c24

08014cbc <atoi>:
 8014cbc:	220a      	movs	r2, #10
 8014cbe:	2100      	movs	r1, #0
 8014cc0:	f000 ba94 	b.w	80151ec <strtol>

08014cc4 <__libc_init_array>:
 8014cc4:	b570      	push	{r4, r5, r6, lr}
 8014cc6:	4d0d      	ldr	r5, [pc, #52]	; (8014cfc <__libc_init_array+0x38>)
 8014cc8:	4c0d      	ldr	r4, [pc, #52]	; (8014d00 <__libc_init_array+0x3c>)
 8014cca:	1b64      	subs	r4, r4, r5
 8014ccc:	10a4      	asrs	r4, r4, #2
 8014cce:	2600      	movs	r6, #0
 8014cd0:	42a6      	cmp	r6, r4
 8014cd2:	d109      	bne.n	8014ce8 <__libc_init_array+0x24>
 8014cd4:	4d0b      	ldr	r5, [pc, #44]	; (8014d04 <__libc_init_array+0x40>)
 8014cd6:	4c0c      	ldr	r4, [pc, #48]	; (8014d08 <__libc_init_array+0x44>)
 8014cd8:	f001 fbe4 	bl	80164a4 <_init>
 8014cdc:	1b64      	subs	r4, r4, r5
 8014cde:	10a4      	asrs	r4, r4, #2
 8014ce0:	2600      	movs	r6, #0
 8014ce2:	42a6      	cmp	r6, r4
 8014ce4:	d105      	bne.n	8014cf2 <__libc_init_array+0x2e>
 8014ce6:	bd70      	pop	{r4, r5, r6, pc}
 8014ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cec:	4798      	blx	r3
 8014cee:	3601      	adds	r6, #1
 8014cf0:	e7ee      	b.n	8014cd0 <__libc_init_array+0xc>
 8014cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8014cf6:	4798      	blx	r3
 8014cf8:	3601      	adds	r6, #1
 8014cfa:	e7f2      	b.n	8014ce2 <__libc_init_array+0x1e>
 8014cfc:	0801f2a0 	.word	0x0801f2a0
 8014d00:	0801f2a0 	.word	0x0801f2a0
 8014d04:	0801f2a0 	.word	0x0801f2a0
 8014d08:	0801f2a4 	.word	0x0801f2a4

08014d0c <memcmp>:
 8014d0c:	b530      	push	{r4, r5, lr}
 8014d0e:	3901      	subs	r1, #1
 8014d10:	2400      	movs	r4, #0
 8014d12:	42a2      	cmp	r2, r4
 8014d14:	d101      	bne.n	8014d1a <memcmp+0xe>
 8014d16:	2000      	movs	r0, #0
 8014d18:	e005      	b.n	8014d26 <memcmp+0x1a>
 8014d1a:	5d03      	ldrb	r3, [r0, r4]
 8014d1c:	3401      	adds	r4, #1
 8014d1e:	5d0d      	ldrb	r5, [r1, r4]
 8014d20:	42ab      	cmp	r3, r5
 8014d22:	d0f6      	beq.n	8014d12 <memcmp+0x6>
 8014d24:	1b58      	subs	r0, r3, r5
 8014d26:	bd30      	pop	{r4, r5, pc}

08014d28 <memcpy>:
 8014d28:	440a      	add	r2, r1
 8014d2a:	4291      	cmp	r1, r2
 8014d2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014d30:	d100      	bne.n	8014d34 <memcpy+0xc>
 8014d32:	4770      	bx	lr
 8014d34:	b510      	push	{r4, lr}
 8014d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014d3e:	4291      	cmp	r1, r2
 8014d40:	d1f9      	bne.n	8014d36 <memcpy+0xe>
 8014d42:	bd10      	pop	{r4, pc}

08014d44 <memmove>:
 8014d44:	4288      	cmp	r0, r1
 8014d46:	b510      	push	{r4, lr}
 8014d48:	eb01 0402 	add.w	r4, r1, r2
 8014d4c:	d902      	bls.n	8014d54 <memmove+0x10>
 8014d4e:	4284      	cmp	r4, r0
 8014d50:	4623      	mov	r3, r4
 8014d52:	d807      	bhi.n	8014d64 <memmove+0x20>
 8014d54:	1e43      	subs	r3, r0, #1
 8014d56:	42a1      	cmp	r1, r4
 8014d58:	d008      	beq.n	8014d6c <memmove+0x28>
 8014d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d62:	e7f8      	b.n	8014d56 <memmove+0x12>
 8014d64:	4402      	add	r2, r0
 8014d66:	4601      	mov	r1, r0
 8014d68:	428a      	cmp	r2, r1
 8014d6a:	d100      	bne.n	8014d6e <memmove+0x2a>
 8014d6c:	bd10      	pop	{r4, pc}
 8014d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014d76:	e7f7      	b.n	8014d68 <memmove+0x24>

08014d78 <memset>:
 8014d78:	4402      	add	r2, r0
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	4293      	cmp	r3, r2
 8014d7e:	d100      	bne.n	8014d82 <memset+0xa>
 8014d80:	4770      	bx	lr
 8014d82:	f803 1b01 	strb.w	r1, [r3], #1
 8014d86:	e7f9      	b.n	8014d7c <memset+0x4>

08014d88 <iprintf>:
 8014d88:	b40f      	push	{r0, r1, r2, r3}
 8014d8a:	4b0a      	ldr	r3, [pc, #40]	; (8014db4 <iprintf+0x2c>)
 8014d8c:	b513      	push	{r0, r1, r4, lr}
 8014d8e:	681c      	ldr	r4, [r3, #0]
 8014d90:	b124      	cbz	r4, 8014d9c <iprintf+0x14>
 8014d92:	69a3      	ldr	r3, [r4, #24]
 8014d94:	b913      	cbnz	r3, 8014d9c <iprintf+0x14>
 8014d96:	4620      	mov	r0, r4
 8014d98:	f000 fc30 	bl	80155fc <__sinit>
 8014d9c:	ab05      	add	r3, sp, #20
 8014d9e:	9a04      	ldr	r2, [sp, #16]
 8014da0:	68a1      	ldr	r1, [r4, #8]
 8014da2:	9301      	str	r3, [sp, #4]
 8014da4:	4620      	mov	r0, r4
 8014da6:	f000 ff77 	bl	8015c98 <_vfiprintf_r>
 8014daa:	b002      	add	sp, #8
 8014dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014db0:	b004      	add	sp, #16
 8014db2:	4770      	bx	lr
 8014db4:	200004bc 	.word	0x200004bc

08014db8 <_puts_r>:
 8014db8:	b570      	push	{r4, r5, r6, lr}
 8014dba:	460e      	mov	r6, r1
 8014dbc:	4605      	mov	r5, r0
 8014dbe:	b118      	cbz	r0, 8014dc8 <_puts_r+0x10>
 8014dc0:	6983      	ldr	r3, [r0, #24]
 8014dc2:	b90b      	cbnz	r3, 8014dc8 <_puts_r+0x10>
 8014dc4:	f000 fc1a 	bl	80155fc <__sinit>
 8014dc8:	69ab      	ldr	r3, [r5, #24]
 8014dca:	68ac      	ldr	r4, [r5, #8]
 8014dcc:	b913      	cbnz	r3, 8014dd4 <_puts_r+0x1c>
 8014dce:	4628      	mov	r0, r5
 8014dd0:	f000 fc14 	bl	80155fc <__sinit>
 8014dd4:	4b2c      	ldr	r3, [pc, #176]	; (8014e88 <_puts_r+0xd0>)
 8014dd6:	429c      	cmp	r4, r3
 8014dd8:	d120      	bne.n	8014e1c <_puts_r+0x64>
 8014dda:	686c      	ldr	r4, [r5, #4]
 8014ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014dde:	07db      	lsls	r3, r3, #31
 8014de0:	d405      	bmi.n	8014dee <_puts_r+0x36>
 8014de2:	89a3      	ldrh	r3, [r4, #12]
 8014de4:	0598      	lsls	r0, r3, #22
 8014de6:	d402      	bmi.n	8014dee <_puts_r+0x36>
 8014de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dea:	f000 fcb7 	bl	801575c <__retarget_lock_acquire_recursive>
 8014dee:	89a3      	ldrh	r3, [r4, #12]
 8014df0:	0719      	lsls	r1, r3, #28
 8014df2:	d51d      	bpl.n	8014e30 <_puts_r+0x78>
 8014df4:	6923      	ldr	r3, [r4, #16]
 8014df6:	b1db      	cbz	r3, 8014e30 <_puts_r+0x78>
 8014df8:	3e01      	subs	r6, #1
 8014dfa:	68a3      	ldr	r3, [r4, #8]
 8014dfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014e00:	3b01      	subs	r3, #1
 8014e02:	60a3      	str	r3, [r4, #8]
 8014e04:	bb39      	cbnz	r1, 8014e56 <_puts_r+0x9e>
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	da38      	bge.n	8014e7c <_puts_r+0xc4>
 8014e0a:	4622      	mov	r2, r4
 8014e0c:	210a      	movs	r1, #10
 8014e0e:	4628      	mov	r0, r5
 8014e10:	f000 f9f6 	bl	8015200 <__swbuf_r>
 8014e14:	3001      	adds	r0, #1
 8014e16:	d011      	beq.n	8014e3c <_puts_r+0x84>
 8014e18:	250a      	movs	r5, #10
 8014e1a:	e011      	b.n	8014e40 <_puts_r+0x88>
 8014e1c:	4b1b      	ldr	r3, [pc, #108]	; (8014e8c <_puts_r+0xd4>)
 8014e1e:	429c      	cmp	r4, r3
 8014e20:	d101      	bne.n	8014e26 <_puts_r+0x6e>
 8014e22:	68ac      	ldr	r4, [r5, #8]
 8014e24:	e7da      	b.n	8014ddc <_puts_r+0x24>
 8014e26:	4b1a      	ldr	r3, [pc, #104]	; (8014e90 <_puts_r+0xd8>)
 8014e28:	429c      	cmp	r4, r3
 8014e2a:	bf08      	it	eq
 8014e2c:	68ec      	ldreq	r4, [r5, #12]
 8014e2e:	e7d5      	b.n	8014ddc <_puts_r+0x24>
 8014e30:	4621      	mov	r1, r4
 8014e32:	4628      	mov	r0, r5
 8014e34:	f000 fa36 	bl	80152a4 <__swsetup_r>
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	d0dd      	beq.n	8014df8 <_puts_r+0x40>
 8014e3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8014e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e42:	07da      	lsls	r2, r3, #31
 8014e44:	d405      	bmi.n	8014e52 <_puts_r+0x9a>
 8014e46:	89a3      	ldrh	r3, [r4, #12]
 8014e48:	059b      	lsls	r3, r3, #22
 8014e4a:	d402      	bmi.n	8014e52 <_puts_r+0x9a>
 8014e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e4e:	f000 fc86 	bl	801575e <__retarget_lock_release_recursive>
 8014e52:	4628      	mov	r0, r5
 8014e54:	bd70      	pop	{r4, r5, r6, pc}
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	da04      	bge.n	8014e64 <_puts_r+0xac>
 8014e5a:	69a2      	ldr	r2, [r4, #24]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	dc06      	bgt.n	8014e6e <_puts_r+0xb6>
 8014e60:	290a      	cmp	r1, #10
 8014e62:	d004      	beq.n	8014e6e <_puts_r+0xb6>
 8014e64:	6823      	ldr	r3, [r4, #0]
 8014e66:	1c5a      	adds	r2, r3, #1
 8014e68:	6022      	str	r2, [r4, #0]
 8014e6a:	7019      	strb	r1, [r3, #0]
 8014e6c:	e7c5      	b.n	8014dfa <_puts_r+0x42>
 8014e6e:	4622      	mov	r2, r4
 8014e70:	4628      	mov	r0, r5
 8014e72:	f000 f9c5 	bl	8015200 <__swbuf_r>
 8014e76:	3001      	adds	r0, #1
 8014e78:	d1bf      	bne.n	8014dfa <_puts_r+0x42>
 8014e7a:	e7df      	b.n	8014e3c <_puts_r+0x84>
 8014e7c:	6823      	ldr	r3, [r4, #0]
 8014e7e:	250a      	movs	r5, #10
 8014e80:	1c5a      	adds	r2, r3, #1
 8014e82:	6022      	str	r2, [r4, #0]
 8014e84:	701d      	strb	r5, [r3, #0]
 8014e86:	e7db      	b.n	8014e40 <_puts_r+0x88>
 8014e88:	0801f224 	.word	0x0801f224
 8014e8c:	0801f244 	.word	0x0801f244
 8014e90:	0801f204 	.word	0x0801f204

08014e94 <puts>:
 8014e94:	4b02      	ldr	r3, [pc, #8]	; (8014ea0 <puts+0xc>)
 8014e96:	4601      	mov	r1, r0
 8014e98:	6818      	ldr	r0, [r3, #0]
 8014e9a:	f7ff bf8d 	b.w	8014db8 <_puts_r>
 8014e9e:	bf00      	nop
 8014ea0:	200004bc 	.word	0x200004bc

08014ea4 <rand>:
 8014ea4:	4b17      	ldr	r3, [pc, #92]	; (8014f04 <rand+0x60>)
 8014ea6:	b510      	push	{r4, lr}
 8014ea8:	681c      	ldr	r4, [r3, #0]
 8014eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014eac:	b9b3      	cbnz	r3, 8014edc <rand+0x38>
 8014eae:	2018      	movs	r0, #24
 8014eb0:	f000 fcba 	bl	8015828 <malloc>
 8014eb4:	63a0      	str	r0, [r4, #56]	; 0x38
 8014eb6:	b928      	cbnz	r0, 8014ec4 <rand+0x20>
 8014eb8:	4602      	mov	r2, r0
 8014eba:	4b13      	ldr	r3, [pc, #76]	; (8014f08 <rand+0x64>)
 8014ebc:	4813      	ldr	r0, [pc, #76]	; (8014f0c <rand+0x68>)
 8014ebe:	214e      	movs	r1, #78	; 0x4e
 8014ec0:	f000 fa5e 	bl	8015380 <__assert_func>
 8014ec4:	4a12      	ldr	r2, [pc, #72]	; (8014f10 <rand+0x6c>)
 8014ec6:	4b13      	ldr	r3, [pc, #76]	; (8014f14 <rand+0x70>)
 8014ec8:	e9c0 2300 	strd	r2, r3, [r0]
 8014ecc:	4b12      	ldr	r3, [pc, #72]	; (8014f18 <rand+0x74>)
 8014ece:	6083      	str	r3, [r0, #8]
 8014ed0:	230b      	movs	r3, #11
 8014ed2:	8183      	strh	r3, [r0, #12]
 8014ed4:	2201      	movs	r2, #1
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014edc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014ede:	480f      	ldr	r0, [pc, #60]	; (8014f1c <rand+0x78>)
 8014ee0:	690a      	ldr	r2, [r1, #16]
 8014ee2:	694b      	ldr	r3, [r1, #20]
 8014ee4:	4c0e      	ldr	r4, [pc, #56]	; (8014f20 <rand+0x7c>)
 8014ee6:	4350      	muls	r0, r2
 8014ee8:	fb04 0003 	mla	r0, r4, r3, r0
 8014eec:	fba2 3404 	umull	r3, r4, r2, r4
 8014ef0:	1c5a      	adds	r2, r3, #1
 8014ef2:	4404      	add	r4, r0
 8014ef4:	f144 0000 	adc.w	r0, r4, #0
 8014ef8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8014efc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014f00:	bd10      	pop	{r4, pc}
 8014f02:	bf00      	nop
 8014f04:	200004bc 	.word	0x200004bc
 8014f08:	0801f150 	.word	0x0801f150
 8014f0c:	0801f167 	.word	0x0801f167
 8014f10:	abcd330e 	.word	0xabcd330e
 8014f14:	e66d1234 	.word	0xe66d1234
 8014f18:	0005deec 	.word	0x0005deec
 8014f1c:	5851f42d 	.word	0x5851f42d
 8014f20:	4c957f2d 	.word	0x4c957f2d

08014f24 <sniprintf>:
 8014f24:	b40c      	push	{r2, r3}
 8014f26:	b530      	push	{r4, r5, lr}
 8014f28:	4b17      	ldr	r3, [pc, #92]	; (8014f88 <sniprintf+0x64>)
 8014f2a:	1e0c      	subs	r4, r1, #0
 8014f2c:	681d      	ldr	r5, [r3, #0]
 8014f2e:	b09d      	sub	sp, #116	; 0x74
 8014f30:	da08      	bge.n	8014f44 <sniprintf+0x20>
 8014f32:	238b      	movs	r3, #139	; 0x8b
 8014f34:	602b      	str	r3, [r5, #0]
 8014f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014f3a:	b01d      	add	sp, #116	; 0x74
 8014f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014f40:	b002      	add	sp, #8
 8014f42:	4770      	bx	lr
 8014f44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014f48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014f4c:	bf14      	ite	ne
 8014f4e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8014f52:	4623      	moveq	r3, r4
 8014f54:	9304      	str	r3, [sp, #16]
 8014f56:	9307      	str	r3, [sp, #28]
 8014f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f5c:	9002      	str	r0, [sp, #8]
 8014f5e:	9006      	str	r0, [sp, #24]
 8014f60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014f64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014f66:	ab21      	add	r3, sp, #132	; 0x84
 8014f68:	a902      	add	r1, sp, #8
 8014f6a:	4628      	mov	r0, r5
 8014f6c:	9301      	str	r3, [sp, #4]
 8014f6e:	f000 fd69 	bl	8015a44 <_svfiprintf_r>
 8014f72:	1c43      	adds	r3, r0, #1
 8014f74:	bfbc      	itt	lt
 8014f76:	238b      	movlt	r3, #139	; 0x8b
 8014f78:	602b      	strlt	r3, [r5, #0]
 8014f7a:	2c00      	cmp	r4, #0
 8014f7c:	d0dd      	beq.n	8014f3a <sniprintf+0x16>
 8014f7e:	9b02      	ldr	r3, [sp, #8]
 8014f80:	2200      	movs	r2, #0
 8014f82:	701a      	strb	r2, [r3, #0]
 8014f84:	e7d9      	b.n	8014f3a <sniprintf+0x16>
 8014f86:	bf00      	nop
 8014f88:	200004bc 	.word	0x200004bc

08014f8c <siprintf>:
 8014f8c:	b40e      	push	{r1, r2, r3}
 8014f8e:	b500      	push	{lr}
 8014f90:	b09c      	sub	sp, #112	; 0x70
 8014f92:	ab1d      	add	r3, sp, #116	; 0x74
 8014f94:	9002      	str	r0, [sp, #8]
 8014f96:	9006      	str	r0, [sp, #24]
 8014f98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014f9c:	4809      	ldr	r0, [pc, #36]	; (8014fc4 <siprintf+0x38>)
 8014f9e:	9107      	str	r1, [sp, #28]
 8014fa0:	9104      	str	r1, [sp, #16]
 8014fa2:	4909      	ldr	r1, [pc, #36]	; (8014fc8 <siprintf+0x3c>)
 8014fa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fa8:	9105      	str	r1, [sp, #20]
 8014faa:	6800      	ldr	r0, [r0, #0]
 8014fac:	9301      	str	r3, [sp, #4]
 8014fae:	a902      	add	r1, sp, #8
 8014fb0:	f000 fd48 	bl	8015a44 <_svfiprintf_r>
 8014fb4:	9b02      	ldr	r3, [sp, #8]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	701a      	strb	r2, [r3, #0]
 8014fba:	b01c      	add	sp, #112	; 0x70
 8014fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fc0:	b003      	add	sp, #12
 8014fc2:	4770      	bx	lr
 8014fc4:	200004bc 	.word	0x200004bc
 8014fc8:	ffff0208 	.word	0xffff0208

08014fcc <strcat>:
 8014fcc:	b510      	push	{r4, lr}
 8014fce:	4602      	mov	r2, r0
 8014fd0:	7814      	ldrb	r4, [r2, #0]
 8014fd2:	4613      	mov	r3, r2
 8014fd4:	3201      	adds	r2, #1
 8014fd6:	2c00      	cmp	r4, #0
 8014fd8:	d1fa      	bne.n	8014fd0 <strcat+0x4>
 8014fda:	3b01      	subs	r3, #1
 8014fdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014fe0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014fe4:	2a00      	cmp	r2, #0
 8014fe6:	d1f9      	bne.n	8014fdc <strcat+0x10>
 8014fe8:	bd10      	pop	{r4, pc}

08014fea <strchr>:
 8014fea:	b2c9      	uxtb	r1, r1
 8014fec:	4603      	mov	r3, r0
 8014fee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014ff2:	b11a      	cbz	r2, 8014ffc <strchr+0x12>
 8014ff4:	428a      	cmp	r2, r1
 8014ff6:	d1f9      	bne.n	8014fec <strchr+0x2>
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	4770      	bx	lr
 8014ffc:	2900      	cmp	r1, #0
 8014ffe:	bf18      	it	ne
 8015000:	2300      	movne	r3, #0
 8015002:	e7f9      	b.n	8014ff8 <strchr+0xe>

08015004 <strcpy>:
 8015004:	4603      	mov	r3, r0
 8015006:	f811 2b01 	ldrb.w	r2, [r1], #1
 801500a:	f803 2b01 	strb.w	r2, [r3], #1
 801500e:	2a00      	cmp	r2, #0
 8015010:	d1f9      	bne.n	8015006 <strcpy+0x2>
 8015012:	4770      	bx	lr

08015014 <strncmp>:
 8015014:	b510      	push	{r4, lr}
 8015016:	b16a      	cbz	r2, 8015034 <strncmp+0x20>
 8015018:	3901      	subs	r1, #1
 801501a:	1884      	adds	r4, r0, r2
 801501c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015020:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015024:	4293      	cmp	r3, r2
 8015026:	d103      	bne.n	8015030 <strncmp+0x1c>
 8015028:	42a0      	cmp	r0, r4
 801502a:	d001      	beq.n	8015030 <strncmp+0x1c>
 801502c:	2b00      	cmp	r3, #0
 801502e:	d1f5      	bne.n	801501c <strncmp+0x8>
 8015030:	1a98      	subs	r0, r3, r2
 8015032:	bd10      	pop	{r4, pc}
 8015034:	4610      	mov	r0, r2
 8015036:	e7fc      	b.n	8015032 <strncmp+0x1e>

08015038 <strncpy>:
 8015038:	b510      	push	{r4, lr}
 801503a:	3901      	subs	r1, #1
 801503c:	4603      	mov	r3, r0
 801503e:	b132      	cbz	r2, 801504e <strncpy+0x16>
 8015040:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015044:	f803 4b01 	strb.w	r4, [r3], #1
 8015048:	3a01      	subs	r2, #1
 801504a:	2c00      	cmp	r4, #0
 801504c:	d1f7      	bne.n	801503e <strncpy+0x6>
 801504e:	441a      	add	r2, r3
 8015050:	2100      	movs	r1, #0
 8015052:	4293      	cmp	r3, r2
 8015054:	d100      	bne.n	8015058 <strncpy+0x20>
 8015056:	bd10      	pop	{r4, pc}
 8015058:	f803 1b01 	strb.w	r1, [r3], #1
 801505c:	e7f9      	b.n	8015052 <strncpy+0x1a>

0801505e <strstr>:
 801505e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015060:	780c      	ldrb	r4, [r1, #0]
 8015062:	b164      	cbz	r4, 801507e <strstr+0x20>
 8015064:	4603      	mov	r3, r0
 8015066:	781a      	ldrb	r2, [r3, #0]
 8015068:	4618      	mov	r0, r3
 801506a:	1c5e      	adds	r6, r3, #1
 801506c:	b90a      	cbnz	r2, 8015072 <strstr+0x14>
 801506e:	4610      	mov	r0, r2
 8015070:	e005      	b.n	801507e <strstr+0x20>
 8015072:	4294      	cmp	r4, r2
 8015074:	d108      	bne.n	8015088 <strstr+0x2a>
 8015076:	460d      	mov	r5, r1
 8015078:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801507c:	b902      	cbnz	r2, 8015080 <strstr+0x22>
 801507e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015080:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8015084:	4297      	cmp	r7, r2
 8015086:	d0f7      	beq.n	8015078 <strstr+0x1a>
 8015088:	4633      	mov	r3, r6
 801508a:	e7ec      	b.n	8015066 <strstr+0x8>

0801508c <__strtok_r>:
 801508c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801508e:	b908      	cbnz	r0, 8015094 <__strtok_r+0x8>
 8015090:	6810      	ldr	r0, [r2, #0]
 8015092:	b188      	cbz	r0, 80150b8 <__strtok_r+0x2c>
 8015094:	4604      	mov	r4, r0
 8015096:	4620      	mov	r0, r4
 8015098:	f814 5b01 	ldrb.w	r5, [r4], #1
 801509c:	460f      	mov	r7, r1
 801509e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80150a2:	b91e      	cbnz	r6, 80150ac <__strtok_r+0x20>
 80150a4:	b965      	cbnz	r5, 80150c0 <__strtok_r+0x34>
 80150a6:	6015      	str	r5, [r2, #0]
 80150a8:	4628      	mov	r0, r5
 80150aa:	e005      	b.n	80150b8 <__strtok_r+0x2c>
 80150ac:	42b5      	cmp	r5, r6
 80150ae:	d1f6      	bne.n	801509e <__strtok_r+0x12>
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d1f0      	bne.n	8015096 <__strtok_r+0xa>
 80150b4:	6014      	str	r4, [r2, #0]
 80150b6:	7003      	strb	r3, [r0, #0]
 80150b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150ba:	461c      	mov	r4, r3
 80150bc:	e00c      	b.n	80150d8 <__strtok_r+0x4c>
 80150be:	b915      	cbnz	r5, 80150c6 <__strtok_r+0x3a>
 80150c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80150c4:	460e      	mov	r6, r1
 80150c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80150ca:	42ab      	cmp	r3, r5
 80150cc:	d1f7      	bne.n	80150be <__strtok_r+0x32>
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d0f3      	beq.n	80150ba <__strtok_r+0x2e>
 80150d2:	2300      	movs	r3, #0
 80150d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80150d8:	6014      	str	r4, [r2, #0]
 80150da:	e7ed      	b.n	80150b8 <__strtok_r+0x2c>

080150dc <strtok_r>:
 80150dc:	2301      	movs	r3, #1
 80150de:	f7ff bfd5 	b.w	801508c <__strtok_r>
	...

080150e4 <_strtol_l.isra.0>:
 80150e4:	2b01      	cmp	r3, #1
 80150e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150ea:	d001      	beq.n	80150f0 <_strtol_l.isra.0+0xc>
 80150ec:	2b24      	cmp	r3, #36	; 0x24
 80150ee:	d906      	bls.n	80150fe <_strtol_l.isra.0+0x1a>
 80150f0:	f000 f964 	bl	80153bc <__errno>
 80150f4:	2316      	movs	r3, #22
 80150f6:	6003      	str	r3, [r0, #0]
 80150f8:	2000      	movs	r0, #0
 80150fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150fe:	4f3a      	ldr	r7, [pc, #232]	; (80151e8 <_strtol_l.isra.0+0x104>)
 8015100:	468e      	mov	lr, r1
 8015102:	4676      	mov	r6, lr
 8015104:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015108:	5de5      	ldrb	r5, [r4, r7]
 801510a:	f015 0508 	ands.w	r5, r5, #8
 801510e:	d1f8      	bne.n	8015102 <_strtol_l.isra.0+0x1e>
 8015110:	2c2d      	cmp	r4, #45	; 0x2d
 8015112:	d134      	bne.n	801517e <_strtol_l.isra.0+0x9a>
 8015114:	f89e 4000 	ldrb.w	r4, [lr]
 8015118:	f04f 0801 	mov.w	r8, #1
 801511c:	f106 0e02 	add.w	lr, r6, #2
 8015120:	2b00      	cmp	r3, #0
 8015122:	d05c      	beq.n	80151de <_strtol_l.isra.0+0xfa>
 8015124:	2b10      	cmp	r3, #16
 8015126:	d10c      	bne.n	8015142 <_strtol_l.isra.0+0x5e>
 8015128:	2c30      	cmp	r4, #48	; 0x30
 801512a:	d10a      	bne.n	8015142 <_strtol_l.isra.0+0x5e>
 801512c:	f89e 4000 	ldrb.w	r4, [lr]
 8015130:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015134:	2c58      	cmp	r4, #88	; 0x58
 8015136:	d14d      	bne.n	80151d4 <_strtol_l.isra.0+0xf0>
 8015138:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801513c:	2310      	movs	r3, #16
 801513e:	f10e 0e02 	add.w	lr, lr, #2
 8015142:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8015146:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801514a:	2600      	movs	r6, #0
 801514c:	fbbc f9f3 	udiv	r9, ip, r3
 8015150:	4635      	mov	r5, r6
 8015152:	fb03 ca19 	mls	sl, r3, r9, ip
 8015156:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801515a:	2f09      	cmp	r7, #9
 801515c:	d818      	bhi.n	8015190 <_strtol_l.isra.0+0xac>
 801515e:	463c      	mov	r4, r7
 8015160:	42a3      	cmp	r3, r4
 8015162:	dd24      	ble.n	80151ae <_strtol_l.isra.0+0xca>
 8015164:	2e00      	cmp	r6, #0
 8015166:	db1f      	blt.n	80151a8 <_strtol_l.isra.0+0xc4>
 8015168:	45a9      	cmp	r9, r5
 801516a:	d31d      	bcc.n	80151a8 <_strtol_l.isra.0+0xc4>
 801516c:	d101      	bne.n	8015172 <_strtol_l.isra.0+0x8e>
 801516e:	45a2      	cmp	sl, r4
 8015170:	db1a      	blt.n	80151a8 <_strtol_l.isra.0+0xc4>
 8015172:	fb05 4503 	mla	r5, r5, r3, r4
 8015176:	2601      	movs	r6, #1
 8015178:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801517c:	e7eb      	b.n	8015156 <_strtol_l.isra.0+0x72>
 801517e:	2c2b      	cmp	r4, #43	; 0x2b
 8015180:	bf08      	it	eq
 8015182:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015186:	46a8      	mov	r8, r5
 8015188:	bf08      	it	eq
 801518a:	f106 0e02 	addeq.w	lr, r6, #2
 801518e:	e7c7      	b.n	8015120 <_strtol_l.isra.0+0x3c>
 8015190:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015194:	2f19      	cmp	r7, #25
 8015196:	d801      	bhi.n	801519c <_strtol_l.isra.0+0xb8>
 8015198:	3c37      	subs	r4, #55	; 0x37
 801519a:	e7e1      	b.n	8015160 <_strtol_l.isra.0+0x7c>
 801519c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80151a0:	2f19      	cmp	r7, #25
 80151a2:	d804      	bhi.n	80151ae <_strtol_l.isra.0+0xca>
 80151a4:	3c57      	subs	r4, #87	; 0x57
 80151a6:	e7db      	b.n	8015160 <_strtol_l.isra.0+0x7c>
 80151a8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80151ac:	e7e4      	b.n	8015178 <_strtol_l.isra.0+0x94>
 80151ae:	2e00      	cmp	r6, #0
 80151b0:	da05      	bge.n	80151be <_strtol_l.isra.0+0xda>
 80151b2:	2322      	movs	r3, #34	; 0x22
 80151b4:	6003      	str	r3, [r0, #0]
 80151b6:	4665      	mov	r5, ip
 80151b8:	b942      	cbnz	r2, 80151cc <_strtol_l.isra.0+0xe8>
 80151ba:	4628      	mov	r0, r5
 80151bc:	e79d      	b.n	80150fa <_strtol_l.isra.0+0x16>
 80151be:	f1b8 0f00 	cmp.w	r8, #0
 80151c2:	d000      	beq.n	80151c6 <_strtol_l.isra.0+0xe2>
 80151c4:	426d      	negs	r5, r5
 80151c6:	2a00      	cmp	r2, #0
 80151c8:	d0f7      	beq.n	80151ba <_strtol_l.isra.0+0xd6>
 80151ca:	b10e      	cbz	r6, 80151d0 <_strtol_l.isra.0+0xec>
 80151cc:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80151d0:	6011      	str	r1, [r2, #0]
 80151d2:	e7f2      	b.n	80151ba <_strtol_l.isra.0+0xd6>
 80151d4:	2430      	movs	r4, #48	; 0x30
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d1b3      	bne.n	8015142 <_strtol_l.isra.0+0x5e>
 80151da:	2308      	movs	r3, #8
 80151dc:	e7b1      	b.n	8015142 <_strtol_l.isra.0+0x5e>
 80151de:	2c30      	cmp	r4, #48	; 0x30
 80151e0:	d0a4      	beq.n	801512c <_strtol_l.isra.0+0x48>
 80151e2:	230a      	movs	r3, #10
 80151e4:	e7ad      	b.n	8015142 <_strtol_l.isra.0+0x5e>
 80151e6:	bf00      	nop
 80151e8:	0801f04b 	.word	0x0801f04b

080151ec <strtol>:
 80151ec:	4613      	mov	r3, r2
 80151ee:	460a      	mov	r2, r1
 80151f0:	4601      	mov	r1, r0
 80151f2:	4802      	ldr	r0, [pc, #8]	; (80151fc <strtol+0x10>)
 80151f4:	6800      	ldr	r0, [r0, #0]
 80151f6:	f7ff bf75 	b.w	80150e4 <_strtol_l.isra.0>
 80151fa:	bf00      	nop
 80151fc:	200004bc 	.word	0x200004bc

08015200 <__swbuf_r>:
 8015200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015202:	460e      	mov	r6, r1
 8015204:	4614      	mov	r4, r2
 8015206:	4605      	mov	r5, r0
 8015208:	b118      	cbz	r0, 8015212 <__swbuf_r+0x12>
 801520a:	6983      	ldr	r3, [r0, #24]
 801520c:	b90b      	cbnz	r3, 8015212 <__swbuf_r+0x12>
 801520e:	f000 f9f5 	bl	80155fc <__sinit>
 8015212:	4b21      	ldr	r3, [pc, #132]	; (8015298 <__swbuf_r+0x98>)
 8015214:	429c      	cmp	r4, r3
 8015216:	d12b      	bne.n	8015270 <__swbuf_r+0x70>
 8015218:	686c      	ldr	r4, [r5, #4]
 801521a:	69a3      	ldr	r3, [r4, #24]
 801521c:	60a3      	str	r3, [r4, #8]
 801521e:	89a3      	ldrh	r3, [r4, #12]
 8015220:	071a      	lsls	r2, r3, #28
 8015222:	d52f      	bpl.n	8015284 <__swbuf_r+0x84>
 8015224:	6923      	ldr	r3, [r4, #16]
 8015226:	b36b      	cbz	r3, 8015284 <__swbuf_r+0x84>
 8015228:	6923      	ldr	r3, [r4, #16]
 801522a:	6820      	ldr	r0, [r4, #0]
 801522c:	1ac0      	subs	r0, r0, r3
 801522e:	6963      	ldr	r3, [r4, #20]
 8015230:	b2f6      	uxtb	r6, r6
 8015232:	4283      	cmp	r3, r0
 8015234:	4637      	mov	r7, r6
 8015236:	dc04      	bgt.n	8015242 <__swbuf_r+0x42>
 8015238:	4621      	mov	r1, r4
 801523a:	4628      	mov	r0, r5
 801523c:	f000 f94a 	bl	80154d4 <_fflush_r>
 8015240:	bb30      	cbnz	r0, 8015290 <__swbuf_r+0x90>
 8015242:	68a3      	ldr	r3, [r4, #8]
 8015244:	3b01      	subs	r3, #1
 8015246:	60a3      	str	r3, [r4, #8]
 8015248:	6823      	ldr	r3, [r4, #0]
 801524a:	1c5a      	adds	r2, r3, #1
 801524c:	6022      	str	r2, [r4, #0]
 801524e:	701e      	strb	r6, [r3, #0]
 8015250:	6963      	ldr	r3, [r4, #20]
 8015252:	3001      	adds	r0, #1
 8015254:	4283      	cmp	r3, r0
 8015256:	d004      	beq.n	8015262 <__swbuf_r+0x62>
 8015258:	89a3      	ldrh	r3, [r4, #12]
 801525a:	07db      	lsls	r3, r3, #31
 801525c:	d506      	bpl.n	801526c <__swbuf_r+0x6c>
 801525e:	2e0a      	cmp	r6, #10
 8015260:	d104      	bne.n	801526c <__swbuf_r+0x6c>
 8015262:	4621      	mov	r1, r4
 8015264:	4628      	mov	r0, r5
 8015266:	f000 f935 	bl	80154d4 <_fflush_r>
 801526a:	b988      	cbnz	r0, 8015290 <__swbuf_r+0x90>
 801526c:	4638      	mov	r0, r7
 801526e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015270:	4b0a      	ldr	r3, [pc, #40]	; (801529c <__swbuf_r+0x9c>)
 8015272:	429c      	cmp	r4, r3
 8015274:	d101      	bne.n	801527a <__swbuf_r+0x7a>
 8015276:	68ac      	ldr	r4, [r5, #8]
 8015278:	e7cf      	b.n	801521a <__swbuf_r+0x1a>
 801527a:	4b09      	ldr	r3, [pc, #36]	; (80152a0 <__swbuf_r+0xa0>)
 801527c:	429c      	cmp	r4, r3
 801527e:	bf08      	it	eq
 8015280:	68ec      	ldreq	r4, [r5, #12]
 8015282:	e7ca      	b.n	801521a <__swbuf_r+0x1a>
 8015284:	4621      	mov	r1, r4
 8015286:	4628      	mov	r0, r5
 8015288:	f000 f80c 	bl	80152a4 <__swsetup_r>
 801528c:	2800      	cmp	r0, #0
 801528e:	d0cb      	beq.n	8015228 <__swbuf_r+0x28>
 8015290:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015294:	e7ea      	b.n	801526c <__swbuf_r+0x6c>
 8015296:	bf00      	nop
 8015298:	0801f224 	.word	0x0801f224
 801529c:	0801f244 	.word	0x0801f244
 80152a0:	0801f204 	.word	0x0801f204

080152a4 <__swsetup_r>:
 80152a4:	4b32      	ldr	r3, [pc, #200]	; (8015370 <__swsetup_r+0xcc>)
 80152a6:	b570      	push	{r4, r5, r6, lr}
 80152a8:	681d      	ldr	r5, [r3, #0]
 80152aa:	4606      	mov	r6, r0
 80152ac:	460c      	mov	r4, r1
 80152ae:	b125      	cbz	r5, 80152ba <__swsetup_r+0x16>
 80152b0:	69ab      	ldr	r3, [r5, #24]
 80152b2:	b913      	cbnz	r3, 80152ba <__swsetup_r+0x16>
 80152b4:	4628      	mov	r0, r5
 80152b6:	f000 f9a1 	bl	80155fc <__sinit>
 80152ba:	4b2e      	ldr	r3, [pc, #184]	; (8015374 <__swsetup_r+0xd0>)
 80152bc:	429c      	cmp	r4, r3
 80152be:	d10f      	bne.n	80152e0 <__swsetup_r+0x3c>
 80152c0:	686c      	ldr	r4, [r5, #4]
 80152c2:	89a3      	ldrh	r3, [r4, #12]
 80152c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80152c8:	0719      	lsls	r1, r3, #28
 80152ca:	d42c      	bmi.n	8015326 <__swsetup_r+0x82>
 80152cc:	06dd      	lsls	r5, r3, #27
 80152ce:	d411      	bmi.n	80152f4 <__swsetup_r+0x50>
 80152d0:	2309      	movs	r3, #9
 80152d2:	6033      	str	r3, [r6, #0]
 80152d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80152d8:	81a3      	strh	r3, [r4, #12]
 80152da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80152de:	e03e      	b.n	801535e <__swsetup_r+0xba>
 80152e0:	4b25      	ldr	r3, [pc, #148]	; (8015378 <__swsetup_r+0xd4>)
 80152e2:	429c      	cmp	r4, r3
 80152e4:	d101      	bne.n	80152ea <__swsetup_r+0x46>
 80152e6:	68ac      	ldr	r4, [r5, #8]
 80152e8:	e7eb      	b.n	80152c2 <__swsetup_r+0x1e>
 80152ea:	4b24      	ldr	r3, [pc, #144]	; (801537c <__swsetup_r+0xd8>)
 80152ec:	429c      	cmp	r4, r3
 80152ee:	bf08      	it	eq
 80152f0:	68ec      	ldreq	r4, [r5, #12]
 80152f2:	e7e6      	b.n	80152c2 <__swsetup_r+0x1e>
 80152f4:	0758      	lsls	r0, r3, #29
 80152f6:	d512      	bpl.n	801531e <__swsetup_r+0x7a>
 80152f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80152fa:	b141      	cbz	r1, 801530e <__swsetup_r+0x6a>
 80152fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015300:	4299      	cmp	r1, r3
 8015302:	d002      	beq.n	801530a <__swsetup_r+0x66>
 8015304:	4630      	mov	r0, r6
 8015306:	f000 fa97 	bl	8015838 <_free_r>
 801530a:	2300      	movs	r3, #0
 801530c:	6363      	str	r3, [r4, #52]	; 0x34
 801530e:	89a3      	ldrh	r3, [r4, #12]
 8015310:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015314:	81a3      	strh	r3, [r4, #12]
 8015316:	2300      	movs	r3, #0
 8015318:	6063      	str	r3, [r4, #4]
 801531a:	6923      	ldr	r3, [r4, #16]
 801531c:	6023      	str	r3, [r4, #0]
 801531e:	89a3      	ldrh	r3, [r4, #12]
 8015320:	f043 0308 	orr.w	r3, r3, #8
 8015324:	81a3      	strh	r3, [r4, #12]
 8015326:	6923      	ldr	r3, [r4, #16]
 8015328:	b94b      	cbnz	r3, 801533e <__swsetup_r+0x9a>
 801532a:	89a3      	ldrh	r3, [r4, #12]
 801532c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015334:	d003      	beq.n	801533e <__swsetup_r+0x9a>
 8015336:	4621      	mov	r1, r4
 8015338:	4630      	mov	r0, r6
 801533a:	f000 fa35 	bl	80157a8 <__smakebuf_r>
 801533e:	89a0      	ldrh	r0, [r4, #12]
 8015340:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015344:	f010 0301 	ands.w	r3, r0, #1
 8015348:	d00a      	beq.n	8015360 <__swsetup_r+0xbc>
 801534a:	2300      	movs	r3, #0
 801534c:	60a3      	str	r3, [r4, #8]
 801534e:	6963      	ldr	r3, [r4, #20]
 8015350:	425b      	negs	r3, r3
 8015352:	61a3      	str	r3, [r4, #24]
 8015354:	6923      	ldr	r3, [r4, #16]
 8015356:	b943      	cbnz	r3, 801536a <__swsetup_r+0xc6>
 8015358:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801535c:	d1ba      	bne.n	80152d4 <__swsetup_r+0x30>
 801535e:	bd70      	pop	{r4, r5, r6, pc}
 8015360:	0781      	lsls	r1, r0, #30
 8015362:	bf58      	it	pl
 8015364:	6963      	ldrpl	r3, [r4, #20]
 8015366:	60a3      	str	r3, [r4, #8]
 8015368:	e7f4      	b.n	8015354 <__swsetup_r+0xb0>
 801536a:	2000      	movs	r0, #0
 801536c:	e7f7      	b.n	801535e <__swsetup_r+0xba>
 801536e:	bf00      	nop
 8015370:	200004bc 	.word	0x200004bc
 8015374:	0801f224 	.word	0x0801f224
 8015378:	0801f244 	.word	0x0801f244
 801537c:	0801f204 	.word	0x0801f204

08015380 <__assert_func>:
 8015380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015382:	4614      	mov	r4, r2
 8015384:	461a      	mov	r2, r3
 8015386:	4b09      	ldr	r3, [pc, #36]	; (80153ac <__assert_func+0x2c>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	4605      	mov	r5, r0
 801538c:	68d8      	ldr	r0, [r3, #12]
 801538e:	b14c      	cbz	r4, 80153a4 <__assert_func+0x24>
 8015390:	4b07      	ldr	r3, [pc, #28]	; (80153b0 <__assert_func+0x30>)
 8015392:	9100      	str	r1, [sp, #0]
 8015394:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015398:	4906      	ldr	r1, [pc, #24]	; (80153b4 <__assert_func+0x34>)
 801539a:	462b      	mov	r3, r5
 801539c:	f000 f9ac 	bl	80156f8 <fiprintf>
 80153a0:	f000 ffa4 	bl	80162ec <abort>
 80153a4:	4b04      	ldr	r3, [pc, #16]	; (80153b8 <__assert_func+0x38>)
 80153a6:	461c      	mov	r4, r3
 80153a8:	e7f3      	b.n	8015392 <__assert_func+0x12>
 80153aa:	bf00      	nop
 80153ac:	200004bc 	.word	0x200004bc
 80153b0:	0801f1c6 	.word	0x0801f1c6
 80153b4:	0801f1d3 	.word	0x0801f1d3
 80153b8:	0801f201 	.word	0x0801f201

080153bc <__errno>:
 80153bc:	4b01      	ldr	r3, [pc, #4]	; (80153c4 <__errno+0x8>)
 80153be:	6818      	ldr	r0, [r3, #0]
 80153c0:	4770      	bx	lr
 80153c2:	bf00      	nop
 80153c4:	200004bc 	.word	0x200004bc

080153c8 <__sflush_r>:
 80153c8:	898a      	ldrh	r2, [r1, #12]
 80153ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153ce:	4605      	mov	r5, r0
 80153d0:	0710      	lsls	r0, r2, #28
 80153d2:	460c      	mov	r4, r1
 80153d4:	d458      	bmi.n	8015488 <__sflush_r+0xc0>
 80153d6:	684b      	ldr	r3, [r1, #4]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	dc05      	bgt.n	80153e8 <__sflush_r+0x20>
 80153dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80153de:	2b00      	cmp	r3, #0
 80153e0:	dc02      	bgt.n	80153e8 <__sflush_r+0x20>
 80153e2:	2000      	movs	r0, #0
 80153e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80153ea:	2e00      	cmp	r6, #0
 80153ec:	d0f9      	beq.n	80153e2 <__sflush_r+0x1a>
 80153ee:	2300      	movs	r3, #0
 80153f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80153f4:	682f      	ldr	r7, [r5, #0]
 80153f6:	602b      	str	r3, [r5, #0]
 80153f8:	d032      	beq.n	8015460 <__sflush_r+0x98>
 80153fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80153fc:	89a3      	ldrh	r3, [r4, #12]
 80153fe:	075a      	lsls	r2, r3, #29
 8015400:	d505      	bpl.n	801540e <__sflush_r+0x46>
 8015402:	6863      	ldr	r3, [r4, #4]
 8015404:	1ac0      	subs	r0, r0, r3
 8015406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015408:	b10b      	cbz	r3, 801540e <__sflush_r+0x46>
 801540a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801540c:	1ac0      	subs	r0, r0, r3
 801540e:	2300      	movs	r3, #0
 8015410:	4602      	mov	r2, r0
 8015412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015414:	6a21      	ldr	r1, [r4, #32]
 8015416:	4628      	mov	r0, r5
 8015418:	47b0      	blx	r6
 801541a:	1c43      	adds	r3, r0, #1
 801541c:	89a3      	ldrh	r3, [r4, #12]
 801541e:	d106      	bne.n	801542e <__sflush_r+0x66>
 8015420:	6829      	ldr	r1, [r5, #0]
 8015422:	291d      	cmp	r1, #29
 8015424:	d82c      	bhi.n	8015480 <__sflush_r+0xb8>
 8015426:	4a2a      	ldr	r2, [pc, #168]	; (80154d0 <__sflush_r+0x108>)
 8015428:	40ca      	lsrs	r2, r1
 801542a:	07d6      	lsls	r6, r2, #31
 801542c:	d528      	bpl.n	8015480 <__sflush_r+0xb8>
 801542e:	2200      	movs	r2, #0
 8015430:	6062      	str	r2, [r4, #4]
 8015432:	04d9      	lsls	r1, r3, #19
 8015434:	6922      	ldr	r2, [r4, #16]
 8015436:	6022      	str	r2, [r4, #0]
 8015438:	d504      	bpl.n	8015444 <__sflush_r+0x7c>
 801543a:	1c42      	adds	r2, r0, #1
 801543c:	d101      	bne.n	8015442 <__sflush_r+0x7a>
 801543e:	682b      	ldr	r3, [r5, #0]
 8015440:	b903      	cbnz	r3, 8015444 <__sflush_r+0x7c>
 8015442:	6560      	str	r0, [r4, #84]	; 0x54
 8015444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015446:	602f      	str	r7, [r5, #0]
 8015448:	2900      	cmp	r1, #0
 801544a:	d0ca      	beq.n	80153e2 <__sflush_r+0x1a>
 801544c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015450:	4299      	cmp	r1, r3
 8015452:	d002      	beq.n	801545a <__sflush_r+0x92>
 8015454:	4628      	mov	r0, r5
 8015456:	f000 f9ef 	bl	8015838 <_free_r>
 801545a:	2000      	movs	r0, #0
 801545c:	6360      	str	r0, [r4, #52]	; 0x34
 801545e:	e7c1      	b.n	80153e4 <__sflush_r+0x1c>
 8015460:	6a21      	ldr	r1, [r4, #32]
 8015462:	2301      	movs	r3, #1
 8015464:	4628      	mov	r0, r5
 8015466:	47b0      	blx	r6
 8015468:	1c41      	adds	r1, r0, #1
 801546a:	d1c7      	bne.n	80153fc <__sflush_r+0x34>
 801546c:	682b      	ldr	r3, [r5, #0]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d0c4      	beq.n	80153fc <__sflush_r+0x34>
 8015472:	2b1d      	cmp	r3, #29
 8015474:	d001      	beq.n	801547a <__sflush_r+0xb2>
 8015476:	2b16      	cmp	r3, #22
 8015478:	d101      	bne.n	801547e <__sflush_r+0xb6>
 801547a:	602f      	str	r7, [r5, #0]
 801547c:	e7b1      	b.n	80153e2 <__sflush_r+0x1a>
 801547e:	89a3      	ldrh	r3, [r4, #12]
 8015480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015484:	81a3      	strh	r3, [r4, #12]
 8015486:	e7ad      	b.n	80153e4 <__sflush_r+0x1c>
 8015488:	690f      	ldr	r7, [r1, #16]
 801548a:	2f00      	cmp	r7, #0
 801548c:	d0a9      	beq.n	80153e2 <__sflush_r+0x1a>
 801548e:	0793      	lsls	r3, r2, #30
 8015490:	680e      	ldr	r6, [r1, #0]
 8015492:	bf08      	it	eq
 8015494:	694b      	ldreq	r3, [r1, #20]
 8015496:	600f      	str	r7, [r1, #0]
 8015498:	bf18      	it	ne
 801549a:	2300      	movne	r3, #0
 801549c:	eba6 0807 	sub.w	r8, r6, r7
 80154a0:	608b      	str	r3, [r1, #8]
 80154a2:	f1b8 0f00 	cmp.w	r8, #0
 80154a6:	dd9c      	ble.n	80153e2 <__sflush_r+0x1a>
 80154a8:	6a21      	ldr	r1, [r4, #32]
 80154aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80154ac:	4643      	mov	r3, r8
 80154ae:	463a      	mov	r2, r7
 80154b0:	4628      	mov	r0, r5
 80154b2:	47b0      	blx	r6
 80154b4:	2800      	cmp	r0, #0
 80154b6:	dc06      	bgt.n	80154c6 <__sflush_r+0xfe>
 80154b8:	89a3      	ldrh	r3, [r4, #12]
 80154ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154be:	81a3      	strh	r3, [r4, #12]
 80154c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154c4:	e78e      	b.n	80153e4 <__sflush_r+0x1c>
 80154c6:	4407      	add	r7, r0
 80154c8:	eba8 0800 	sub.w	r8, r8, r0
 80154cc:	e7e9      	b.n	80154a2 <__sflush_r+0xda>
 80154ce:	bf00      	nop
 80154d0:	20400001 	.word	0x20400001

080154d4 <_fflush_r>:
 80154d4:	b538      	push	{r3, r4, r5, lr}
 80154d6:	690b      	ldr	r3, [r1, #16]
 80154d8:	4605      	mov	r5, r0
 80154da:	460c      	mov	r4, r1
 80154dc:	b913      	cbnz	r3, 80154e4 <_fflush_r+0x10>
 80154de:	2500      	movs	r5, #0
 80154e0:	4628      	mov	r0, r5
 80154e2:	bd38      	pop	{r3, r4, r5, pc}
 80154e4:	b118      	cbz	r0, 80154ee <_fflush_r+0x1a>
 80154e6:	6983      	ldr	r3, [r0, #24]
 80154e8:	b90b      	cbnz	r3, 80154ee <_fflush_r+0x1a>
 80154ea:	f000 f887 	bl	80155fc <__sinit>
 80154ee:	4b14      	ldr	r3, [pc, #80]	; (8015540 <_fflush_r+0x6c>)
 80154f0:	429c      	cmp	r4, r3
 80154f2:	d11b      	bne.n	801552c <_fflush_r+0x58>
 80154f4:	686c      	ldr	r4, [r5, #4]
 80154f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d0ef      	beq.n	80154de <_fflush_r+0xa>
 80154fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015500:	07d0      	lsls	r0, r2, #31
 8015502:	d404      	bmi.n	801550e <_fflush_r+0x3a>
 8015504:	0599      	lsls	r1, r3, #22
 8015506:	d402      	bmi.n	801550e <_fflush_r+0x3a>
 8015508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801550a:	f000 f927 	bl	801575c <__retarget_lock_acquire_recursive>
 801550e:	4628      	mov	r0, r5
 8015510:	4621      	mov	r1, r4
 8015512:	f7ff ff59 	bl	80153c8 <__sflush_r>
 8015516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015518:	07da      	lsls	r2, r3, #31
 801551a:	4605      	mov	r5, r0
 801551c:	d4e0      	bmi.n	80154e0 <_fflush_r+0xc>
 801551e:	89a3      	ldrh	r3, [r4, #12]
 8015520:	059b      	lsls	r3, r3, #22
 8015522:	d4dd      	bmi.n	80154e0 <_fflush_r+0xc>
 8015524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015526:	f000 f91a 	bl	801575e <__retarget_lock_release_recursive>
 801552a:	e7d9      	b.n	80154e0 <_fflush_r+0xc>
 801552c:	4b05      	ldr	r3, [pc, #20]	; (8015544 <_fflush_r+0x70>)
 801552e:	429c      	cmp	r4, r3
 8015530:	d101      	bne.n	8015536 <_fflush_r+0x62>
 8015532:	68ac      	ldr	r4, [r5, #8]
 8015534:	e7df      	b.n	80154f6 <_fflush_r+0x22>
 8015536:	4b04      	ldr	r3, [pc, #16]	; (8015548 <_fflush_r+0x74>)
 8015538:	429c      	cmp	r4, r3
 801553a:	bf08      	it	eq
 801553c:	68ec      	ldreq	r4, [r5, #12]
 801553e:	e7da      	b.n	80154f6 <_fflush_r+0x22>
 8015540:	0801f224 	.word	0x0801f224
 8015544:	0801f244 	.word	0x0801f244
 8015548:	0801f204 	.word	0x0801f204

0801554c <std>:
 801554c:	2300      	movs	r3, #0
 801554e:	b510      	push	{r4, lr}
 8015550:	4604      	mov	r4, r0
 8015552:	e9c0 3300 	strd	r3, r3, [r0]
 8015556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801555a:	6083      	str	r3, [r0, #8]
 801555c:	8181      	strh	r1, [r0, #12]
 801555e:	6643      	str	r3, [r0, #100]	; 0x64
 8015560:	81c2      	strh	r2, [r0, #14]
 8015562:	6183      	str	r3, [r0, #24]
 8015564:	4619      	mov	r1, r3
 8015566:	2208      	movs	r2, #8
 8015568:	305c      	adds	r0, #92	; 0x5c
 801556a:	f7ff fc05 	bl	8014d78 <memset>
 801556e:	4b05      	ldr	r3, [pc, #20]	; (8015584 <std+0x38>)
 8015570:	6263      	str	r3, [r4, #36]	; 0x24
 8015572:	4b05      	ldr	r3, [pc, #20]	; (8015588 <std+0x3c>)
 8015574:	62a3      	str	r3, [r4, #40]	; 0x28
 8015576:	4b05      	ldr	r3, [pc, #20]	; (801558c <std+0x40>)
 8015578:	62e3      	str	r3, [r4, #44]	; 0x2c
 801557a:	4b05      	ldr	r3, [pc, #20]	; (8015590 <std+0x44>)
 801557c:	6224      	str	r4, [r4, #32]
 801557e:	6323      	str	r3, [r4, #48]	; 0x30
 8015580:	bd10      	pop	{r4, pc}
 8015582:	bf00      	nop
 8015584:	08016241 	.word	0x08016241
 8015588:	08016263 	.word	0x08016263
 801558c:	0801629b 	.word	0x0801629b
 8015590:	080162bf 	.word	0x080162bf

08015594 <_cleanup_r>:
 8015594:	4901      	ldr	r1, [pc, #4]	; (801559c <_cleanup_r+0x8>)
 8015596:	f000 b8c1 	b.w	801571c <_fwalk_reent>
 801559a:	bf00      	nop
 801559c:	080154d5 	.word	0x080154d5

080155a0 <__sfmoreglue>:
 80155a0:	b570      	push	{r4, r5, r6, lr}
 80155a2:	1e4a      	subs	r2, r1, #1
 80155a4:	2568      	movs	r5, #104	; 0x68
 80155a6:	4355      	muls	r5, r2
 80155a8:	460e      	mov	r6, r1
 80155aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80155ae:	f000 f993 	bl	80158d8 <_malloc_r>
 80155b2:	4604      	mov	r4, r0
 80155b4:	b140      	cbz	r0, 80155c8 <__sfmoreglue+0x28>
 80155b6:	2100      	movs	r1, #0
 80155b8:	e9c0 1600 	strd	r1, r6, [r0]
 80155bc:	300c      	adds	r0, #12
 80155be:	60a0      	str	r0, [r4, #8]
 80155c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80155c4:	f7ff fbd8 	bl	8014d78 <memset>
 80155c8:	4620      	mov	r0, r4
 80155ca:	bd70      	pop	{r4, r5, r6, pc}

080155cc <__sfp_lock_acquire>:
 80155cc:	4801      	ldr	r0, [pc, #4]	; (80155d4 <__sfp_lock_acquire+0x8>)
 80155ce:	f000 b8c5 	b.w	801575c <__retarget_lock_acquire_recursive>
 80155d2:	bf00      	nop
 80155d4:	2000d804 	.word	0x2000d804

080155d8 <__sfp_lock_release>:
 80155d8:	4801      	ldr	r0, [pc, #4]	; (80155e0 <__sfp_lock_release+0x8>)
 80155da:	f000 b8c0 	b.w	801575e <__retarget_lock_release_recursive>
 80155de:	bf00      	nop
 80155e0:	2000d804 	.word	0x2000d804

080155e4 <__sinit_lock_acquire>:
 80155e4:	4801      	ldr	r0, [pc, #4]	; (80155ec <__sinit_lock_acquire+0x8>)
 80155e6:	f000 b8b9 	b.w	801575c <__retarget_lock_acquire_recursive>
 80155ea:	bf00      	nop
 80155ec:	2000d7ff 	.word	0x2000d7ff

080155f0 <__sinit_lock_release>:
 80155f0:	4801      	ldr	r0, [pc, #4]	; (80155f8 <__sinit_lock_release+0x8>)
 80155f2:	f000 b8b4 	b.w	801575e <__retarget_lock_release_recursive>
 80155f6:	bf00      	nop
 80155f8:	2000d7ff 	.word	0x2000d7ff

080155fc <__sinit>:
 80155fc:	b510      	push	{r4, lr}
 80155fe:	4604      	mov	r4, r0
 8015600:	f7ff fff0 	bl	80155e4 <__sinit_lock_acquire>
 8015604:	69a3      	ldr	r3, [r4, #24]
 8015606:	b11b      	cbz	r3, 8015610 <__sinit+0x14>
 8015608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801560c:	f7ff bff0 	b.w	80155f0 <__sinit_lock_release>
 8015610:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015614:	6523      	str	r3, [r4, #80]	; 0x50
 8015616:	4b13      	ldr	r3, [pc, #76]	; (8015664 <__sinit+0x68>)
 8015618:	4a13      	ldr	r2, [pc, #76]	; (8015668 <__sinit+0x6c>)
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	62a2      	str	r2, [r4, #40]	; 0x28
 801561e:	42a3      	cmp	r3, r4
 8015620:	bf04      	itt	eq
 8015622:	2301      	moveq	r3, #1
 8015624:	61a3      	streq	r3, [r4, #24]
 8015626:	4620      	mov	r0, r4
 8015628:	f000 f820 	bl	801566c <__sfp>
 801562c:	6060      	str	r0, [r4, #4]
 801562e:	4620      	mov	r0, r4
 8015630:	f000 f81c 	bl	801566c <__sfp>
 8015634:	60a0      	str	r0, [r4, #8]
 8015636:	4620      	mov	r0, r4
 8015638:	f000 f818 	bl	801566c <__sfp>
 801563c:	2200      	movs	r2, #0
 801563e:	60e0      	str	r0, [r4, #12]
 8015640:	2104      	movs	r1, #4
 8015642:	6860      	ldr	r0, [r4, #4]
 8015644:	f7ff ff82 	bl	801554c <std>
 8015648:	68a0      	ldr	r0, [r4, #8]
 801564a:	2201      	movs	r2, #1
 801564c:	2109      	movs	r1, #9
 801564e:	f7ff ff7d 	bl	801554c <std>
 8015652:	68e0      	ldr	r0, [r4, #12]
 8015654:	2202      	movs	r2, #2
 8015656:	2112      	movs	r1, #18
 8015658:	f7ff ff78 	bl	801554c <std>
 801565c:	2301      	movs	r3, #1
 801565e:	61a3      	str	r3, [r4, #24]
 8015660:	e7d2      	b.n	8015608 <__sinit+0xc>
 8015662:	bf00      	nop
 8015664:	0801f14c 	.word	0x0801f14c
 8015668:	08015595 	.word	0x08015595

0801566c <__sfp>:
 801566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801566e:	4607      	mov	r7, r0
 8015670:	f7ff ffac 	bl	80155cc <__sfp_lock_acquire>
 8015674:	4b1e      	ldr	r3, [pc, #120]	; (80156f0 <__sfp+0x84>)
 8015676:	681e      	ldr	r6, [r3, #0]
 8015678:	69b3      	ldr	r3, [r6, #24]
 801567a:	b913      	cbnz	r3, 8015682 <__sfp+0x16>
 801567c:	4630      	mov	r0, r6
 801567e:	f7ff ffbd 	bl	80155fc <__sinit>
 8015682:	3648      	adds	r6, #72	; 0x48
 8015684:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015688:	3b01      	subs	r3, #1
 801568a:	d503      	bpl.n	8015694 <__sfp+0x28>
 801568c:	6833      	ldr	r3, [r6, #0]
 801568e:	b30b      	cbz	r3, 80156d4 <__sfp+0x68>
 8015690:	6836      	ldr	r6, [r6, #0]
 8015692:	e7f7      	b.n	8015684 <__sfp+0x18>
 8015694:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015698:	b9d5      	cbnz	r5, 80156d0 <__sfp+0x64>
 801569a:	4b16      	ldr	r3, [pc, #88]	; (80156f4 <__sfp+0x88>)
 801569c:	60e3      	str	r3, [r4, #12]
 801569e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80156a2:	6665      	str	r5, [r4, #100]	; 0x64
 80156a4:	f000 f859 	bl	801575a <__retarget_lock_init_recursive>
 80156a8:	f7ff ff96 	bl	80155d8 <__sfp_lock_release>
 80156ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80156b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80156b4:	6025      	str	r5, [r4, #0]
 80156b6:	61a5      	str	r5, [r4, #24]
 80156b8:	2208      	movs	r2, #8
 80156ba:	4629      	mov	r1, r5
 80156bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80156c0:	f7ff fb5a 	bl	8014d78 <memset>
 80156c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80156c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80156cc:	4620      	mov	r0, r4
 80156ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156d0:	3468      	adds	r4, #104	; 0x68
 80156d2:	e7d9      	b.n	8015688 <__sfp+0x1c>
 80156d4:	2104      	movs	r1, #4
 80156d6:	4638      	mov	r0, r7
 80156d8:	f7ff ff62 	bl	80155a0 <__sfmoreglue>
 80156dc:	4604      	mov	r4, r0
 80156de:	6030      	str	r0, [r6, #0]
 80156e0:	2800      	cmp	r0, #0
 80156e2:	d1d5      	bne.n	8015690 <__sfp+0x24>
 80156e4:	f7ff ff78 	bl	80155d8 <__sfp_lock_release>
 80156e8:	230c      	movs	r3, #12
 80156ea:	603b      	str	r3, [r7, #0]
 80156ec:	e7ee      	b.n	80156cc <__sfp+0x60>
 80156ee:	bf00      	nop
 80156f0:	0801f14c 	.word	0x0801f14c
 80156f4:	ffff0001 	.word	0xffff0001

080156f8 <fiprintf>:
 80156f8:	b40e      	push	{r1, r2, r3}
 80156fa:	b503      	push	{r0, r1, lr}
 80156fc:	4601      	mov	r1, r0
 80156fe:	ab03      	add	r3, sp, #12
 8015700:	4805      	ldr	r0, [pc, #20]	; (8015718 <fiprintf+0x20>)
 8015702:	f853 2b04 	ldr.w	r2, [r3], #4
 8015706:	6800      	ldr	r0, [r0, #0]
 8015708:	9301      	str	r3, [sp, #4]
 801570a:	f000 fac5 	bl	8015c98 <_vfiprintf_r>
 801570e:	b002      	add	sp, #8
 8015710:	f85d eb04 	ldr.w	lr, [sp], #4
 8015714:	b003      	add	sp, #12
 8015716:	4770      	bx	lr
 8015718:	200004bc 	.word	0x200004bc

0801571c <_fwalk_reent>:
 801571c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015720:	4606      	mov	r6, r0
 8015722:	4688      	mov	r8, r1
 8015724:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015728:	2700      	movs	r7, #0
 801572a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801572e:	f1b9 0901 	subs.w	r9, r9, #1
 8015732:	d505      	bpl.n	8015740 <_fwalk_reent+0x24>
 8015734:	6824      	ldr	r4, [r4, #0]
 8015736:	2c00      	cmp	r4, #0
 8015738:	d1f7      	bne.n	801572a <_fwalk_reent+0xe>
 801573a:	4638      	mov	r0, r7
 801573c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015740:	89ab      	ldrh	r3, [r5, #12]
 8015742:	2b01      	cmp	r3, #1
 8015744:	d907      	bls.n	8015756 <_fwalk_reent+0x3a>
 8015746:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801574a:	3301      	adds	r3, #1
 801574c:	d003      	beq.n	8015756 <_fwalk_reent+0x3a>
 801574e:	4629      	mov	r1, r5
 8015750:	4630      	mov	r0, r6
 8015752:	47c0      	blx	r8
 8015754:	4307      	orrs	r7, r0
 8015756:	3568      	adds	r5, #104	; 0x68
 8015758:	e7e9      	b.n	801572e <_fwalk_reent+0x12>

0801575a <__retarget_lock_init_recursive>:
 801575a:	4770      	bx	lr

0801575c <__retarget_lock_acquire_recursive>:
 801575c:	4770      	bx	lr

0801575e <__retarget_lock_release_recursive>:
 801575e:	4770      	bx	lr

08015760 <__swhatbuf_r>:
 8015760:	b570      	push	{r4, r5, r6, lr}
 8015762:	460e      	mov	r6, r1
 8015764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015768:	2900      	cmp	r1, #0
 801576a:	b096      	sub	sp, #88	; 0x58
 801576c:	4614      	mov	r4, r2
 801576e:	461d      	mov	r5, r3
 8015770:	da07      	bge.n	8015782 <__swhatbuf_r+0x22>
 8015772:	2300      	movs	r3, #0
 8015774:	602b      	str	r3, [r5, #0]
 8015776:	89b3      	ldrh	r3, [r6, #12]
 8015778:	061a      	lsls	r2, r3, #24
 801577a:	d410      	bmi.n	801579e <__swhatbuf_r+0x3e>
 801577c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015780:	e00e      	b.n	80157a0 <__swhatbuf_r+0x40>
 8015782:	466a      	mov	r2, sp
 8015784:	f000 fdca 	bl	801631c <_fstat_r>
 8015788:	2800      	cmp	r0, #0
 801578a:	dbf2      	blt.n	8015772 <__swhatbuf_r+0x12>
 801578c:	9a01      	ldr	r2, [sp, #4]
 801578e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015796:	425a      	negs	r2, r3
 8015798:	415a      	adcs	r2, r3
 801579a:	602a      	str	r2, [r5, #0]
 801579c:	e7ee      	b.n	801577c <__swhatbuf_r+0x1c>
 801579e:	2340      	movs	r3, #64	; 0x40
 80157a0:	2000      	movs	r0, #0
 80157a2:	6023      	str	r3, [r4, #0]
 80157a4:	b016      	add	sp, #88	; 0x58
 80157a6:	bd70      	pop	{r4, r5, r6, pc}

080157a8 <__smakebuf_r>:
 80157a8:	898b      	ldrh	r3, [r1, #12]
 80157aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80157ac:	079d      	lsls	r5, r3, #30
 80157ae:	4606      	mov	r6, r0
 80157b0:	460c      	mov	r4, r1
 80157b2:	d507      	bpl.n	80157c4 <__smakebuf_r+0x1c>
 80157b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80157b8:	6023      	str	r3, [r4, #0]
 80157ba:	6123      	str	r3, [r4, #16]
 80157bc:	2301      	movs	r3, #1
 80157be:	6163      	str	r3, [r4, #20]
 80157c0:	b002      	add	sp, #8
 80157c2:	bd70      	pop	{r4, r5, r6, pc}
 80157c4:	ab01      	add	r3, sp, #4
 80157c6:	466a      	mov	r2, sp
 80157c8:	f7ff ffca 	bl	8015760 <__swhatbuf_r>
 80157cc:	9900      	ldr	r1, [sp, #0]
 80157ce:	4605      	mov	r5, r0
 80157d0:	4630      	mov	r0, r6
 80157d2:	f000 f881 	bl	80158d8 <_malloc_r>
 80157d6:	b948      	cbnz	r0, 80157ec <__smakebuf_r+0x44>
 80157d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157dc:	059a      	lsls	r2, r3, #22
 80157de:	d4ef      	bmi.n	80157c0 <__smakebuf_r+0x18>
 80157e0:	f023 0303 	bic.w	r3, r3, #3
 80157e4:	f043 0302 	orr.w	r3, r3, #2
 80157e8:	81a3      	strh	r3, [r4, #12]
 80157ea:	e7e3      	b.n	80157b4 <__smakebuf_r+0xc>
 80157ec:	4b0d      	ldr	r3, [pc, #52]	; (8015824 <__smakebuf_r+0x7c>)
 80157ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80157f0:	89a3      	ldrh	r3, [r4, #12]
 80157f2:	6020      	str	r0, [r4, #0]
 80157f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80157f8:	81a3      	strh	r3, [r4, #12]
 80157fa:	9b00      	ldr	r3, [sp, #0]
 80157fc:	6163      	str	r3, [r4, #20]
 80157fe:	9b01      	ldr	r3, [sp, #4]
 8015800:	6120      	str	r0, [r4, #16]
 8015802:	b15b      	cbz	r3, 801581c <__smakebuf_r+0x74>
 8015804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015808:	4630      	mov	r0, r6
 801580a:	f000 fd99 	bl	8016340 <_isatty_r>
 801580e:	b128      	cbz	r0, 801581c <__smakebuf_r+0x74>
 8015810:	89a3      	ldrh	r3, [r4, #12]
 8015812:	f023 0303 	bic.w	r3, r3, #3
 8015816:	f043 0301 	orr.w	r3, r3, #1
 801581a:	81a3      	strh	r3, [r4, #12]
 801581c:	89a0      	ldrh	r0, [r4, #12]
 801581e:	4305      	orrs	r5, r0
 8015820:	81a5      	strh	r5, [r4, #12]
 8015822:	e7cd      	b.n	80157c0 <__smakebuf_r+0x18>
 8015824:	08015595 	.word	0x08015595

08015828 <malloc>:
 8015828:	4b02      	ldr	r3, [pc, #8]	; (8015834 <malloc+0xc>)
 801582a:	4601      	mov	r1, r0
 801582c:	6818      	ldr	r0, [r3, #0]
 801582e:	f000 b853 	b.w	80158d8 <_malloc_r>
 8015832:	bf00      	nop
 8015834:	200004bc 	.word	0x200004bc

08015838 <_free_r>:
 8015838:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801583a:	2900      	cmp	r1, #0
 801583c:	d048      	beq.n	80158d0 <_free_r+0x98>
 801583e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015842:	9001      	str	r0, [sp, #4]
 8015844:	2b00      	cmp	r3, #0
 8015846:	f1a1 0404 	sub.w	r4, r1, #4
 801584a:	bfb8      	it	lt
 801584c:	18e4      	addlt	r4, r4, r3
 801584e:	f000 fd99 	bl	8016384 <__malloc_lock>
 8015852:	4a20      	ldr	r2, [pc, #128]	; (80158d4 <_free_r+0x9c>)
 8015854:	9801      	ldr	r0, [sp, #4]
 8015856:	6813      	ldr	r3, [r2, #0]
 8015858:	4615      	mov	r5, r2
 801585a:	b933      	cbnz	r3, 801586a <_free_r+0x32>
 801585c:	6063      	str	r3, [r4, #4]
 801585e:	6014      	str	r4, [r2, #0]
 8015860:	b003      	add	sp, #12
 8015862:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015866:	f000 bd93 	b.w	8016390 <__malloc_unlock>
 801586a:	42a3      	cmp	r3, r4
 801586c:	d90b      	bls.n	8015886 <_free_r+0x4e>
 801586e:	6821      	ldr	r1, [r4, #0]
 8015870:	1862      	adds	r2, r4, r1
 8015872:	4293      	cmp	r3, r2
 8015874:	bf04      	itt	eq
 8015876:	681a      	ldreq	r2, [r3, #0]
 8015878:	685b      	ldreq	r3, [r3, #4]
 801587a:	6063      	str	r3, [r4, #4]
 801587c:	bf04      	itt	eq
 801587e:	1852      	addeq	r2, r2, r1
 8015880:	6022      	streq	r2, [r4, #0]
 8015882:	602c      	str	r4, [r5, #0]
 8015884:	e7ec      	b.n	8015860 <_free_r+0x28>
 8015886:	461a      	mov	r2, r3
 8015888:	685b      	ldr	r3, [r3, #4]
 801588a:	b10b      	cbz	r3, 8015890 <_free_r+0x58>
 801588c:	42a3      	cmp	r3, r4
 801588e:	d9fa      	bls.n	8015886 <_free_r+0x4e>
 8015890:	6811      	ldr	r1, [r2, #0]
 8015892:	1855      	adds	r5, r2, r1
 8015894:	42a5      	cmp	r5, r4
 8015896:	d10b      	bne.n	80158b0 <_free_r+0x78>
 8015898:	6824      	ldr	r4, [r4, #0]
 801589a:	4421      	add	r1, r4
 801589c:	1854      	adds	r4, r2, r1
 801589e:	42a3      	cmp	r3, r4
 80158a0:	6011      	str	r1, [r2, #0]
 80158a2:	d1dd      	bne.n	8015860 <_free_r+0x28>
 80158a4:	681c      	ldr	r4, [r3, #0]
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	6053      	str	r3, [r2, #4]
 80158aa:	4421      	add	r1, r4
 80158ac:	6011      	str	r1, [r2, #0]
 80158ae:	e7d7      	b.n	8015860 <_free_r+0x28>
 80158b0:	d902      	bls.n	80158b8 <_free_r+0x80>
 80158b2:	230c      	movs	r3, #12
 80158b4:	6003      	str	r3, [r0, #0]
 80158b6:	e7d3      	b.n	8015860 <_free_r+0x28>
 80158b8:	6825      	ldr	r5, [r4, #0]
 80158ba:	1961      	adds	r1, r4, r5
 80158bc:	428b      	cmp	r3, r1
 80158be:	bf04      	itt	eq
 80158c0:	6819      	ldreq	r1, [r3, #0]
 80158c2:	685b      	ldreq	r3, [r3, #4]
 80158c4:	6063      	str	r3, [r4, #4]
 80158c6:	bf04      	itt	eq
 80158c8:	1949      	addeq	r1, r1, r5
 80158ca:	6021      	streq	r1, [r4, #0]
 80158cc:	6054      	str	r4, [r2, #4]
 80158ce:	e7c7      	b.n	8015860 <_free_r+0x28>
 80158d0:	b003      	add	sp, #12
 80158d2:	bd30      	pop	{r4, r5, pc}
 80158d4:	20000b54 	.word	0x20000b54

080158d8 <_malloc_r>:
 80158d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158da:	1ccd      	adds	r5, r1, #3
 80158dc:	f025 0503 	bic.w	r5, r5, #3
 80158e0:	3508      	adds	r5, #8
 80158e2:	2d0c      	cmp	r5, #12
 80158e4:	bf38      	it	cc
 80158e6:	250c      	movcc	r5, #12
 80158e8:	2d00      	cmp	r5, #0
 80158ea:	4606      	mov	r6, r0
 80158ec:	db01      	blt.n	80158f2 <_malloc_r+0x1a>
 80158ee:	42a9      	cmp	r1, r5
 80158f0:	d903      	bls.n	80158fa <_malloc_r+0x22>
 80158f2:	230c      	movs	r3, #12
 80158f4:	6033      	str	r3, [r6, #0]
 80158f6:	2000      	movs	r0, #0
 80158f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158fa:	f000 fd43 	bl	8016384 <__malloc_lock>
 80158fe:	4921      	ldr	r1, [pc, #132]	; (8015984 <_malloc_r+0xac>)
 8015900:	680a      	ldr	r2, [r1, #0]
 8015902:	4614      	mov	r4, r2
 8015904:	b99c      	cbnz	r4, 801592e <_malloc_r+0x56>
 8015906:	4f20      	ldr	r7, [pc, #128]	; (8015988 <_malloc_r+0xb0>)
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	b923      	cbnz	r3, 8015916 <_malloc_r+0x3e>
 801590c:	4621      	mov	r1, r4
 801590e:	4630      	mov	r0, r6
 8015910:	f000 fc86 	bl	8016220 <_sbrk_r>
 8015914:	6038      	str	r0, [r7, #0]
 8015916:	4629      	mov	r1, r5
 8015918:	4630      	mov	r0, r6
 801591a:	f000 fc81 	bl	8016220 <_sbrk_r>
 801591e:	1c43      	adds	r3, r0, #1
 8015920:	d123      	bne.n	801596a <_malloc_r+0x92>
 8015922:	230c      	movs	r3, #12
 8015924:	6033      	str	r3, [r6, #0]
 8015926:	4630      	mov	r0, r6
 8015928:	f000 fd32 	bl	8016390 <__malloc_unlock>
 801592c:	e7e3      	b.n	80158f6 <_malloc_r+0x1e>
 801592e:	6823      	ldr	r3, [r4, #0]
 8015930:	1b5b      	subs	r3, r3, r5
 8015932:	d417      	bmi.n	8015964 <_malloc_r+0x8c>
 8015934:	2b0b      	cmp	r3, #11
 8015936:	d903      	bls.n	8015940 <_malloc_r+0x68>
 8015938:	6023      	str	r3, [r4, #0]
 801593a:	441c      	add	r4, r3
 801593c:	6025      	str	r5, [r4, #0]
 801593e:	e004      	b.n	801594a <_malloc_r+0x72>
 8015940:	6863      	ldr	r3, [r4, #4]
 8015942:	42a2      	cmp	r2, r4
 8015944:	bf0c      	ite	eq
 8015946:	600b      	streq	r3, [r1, #0]
 8015948:	6053      	strne	r3, [r2, #4]
 801594a:	4630      	mov	r0, r6
 801594c:	f000 fd20 	bl	8016390 <__malloc_unlock>
 8015950:	f104 000b 	add.w	r0, r4, #11
 8015954:	1d23      	adds	r3, r4, #4
 8015956:	f020 0007 	bic.w	r0, r0, #7
 801595a:	1ac2      	subs	r2, r0, r3
 801595c:	d0cc      	beq.n	80158f8 <_malloc_r+0x20>
 801595e:	1a1b      	subs	r3, r3, r0
 8015960:	50a3      	str	r3, [r4, r2]
 8015962:	e7c9      	b.n	80158f8 <_malloc_r+0x20>
 8015964:	4622      	mov	r2, r4
 8015966:	6864      	ldr	r4, [r4, #4]
 8015968:	e7cc      	b.n	8015904 <_malloc_r+0x2c>
 801596a:	1cc4      	adds	r4, r0, #3
 801596c:	f024 0403 	bic.w	r4, r4, #3
 8015970:	42a0      	cmp	r0, r4
 8015972:	d0e3      	beq.n	801593c <_malloc_r+0x64>
 8015974:	1a21      	subs	r1, r4, r0
 8015976:	4630      	mov	r0, r6
 8015978:	f000 fc52 	bl	8016220 <_sbrk_r>
 801597c:	3001      	adds	r0, #1
 801597e:	d1dd      	bne.n	801593c <_malloc_r+0x64>
 8015980:	e7cf      	b.n	8015922 <_malloc_r+0x4a>
 8015982:	bf00      	nop
 8015984:	20000b54 	.word	0x20000b54
 8015988:	20000b58 	.word	0x20000b58

0801598c <__ssputs_r>:
 801598c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015990:	688e      	ldr	r6, [r1, #8]
 8015992:	429e      	cmp	r6, r3
 8015994:	4682      	mov	sl, r0
 8015996:	460c      	mov	r4, r1
 8015998:	4690      	mov	r8, r2
 801599a:	461f      	mov	r7, r3
 801599c:	d838      	bhi.n	8015a10 <__ssputs_r+0x84>
 801599e:	898a      	ldrh	r2, [r1, #12]
 80159a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80159a4:	d032      	beq.n	8015a0c <__ssputs_r+0x80>
 80159a6:	6825      	ldr	r5, [r4, #0]
 80159a8:	6909      	ldr	r1, [r1, #16]
 80159aa:	eba5 0901 	sub.w	r9, r5, r1
 80159ae:	6965      	ldr	r5, [r4, #20]
 80159b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80159b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80159b8:	3301      	adds	r3, #1
 80159ba:	444b      	add	r3, r9
 80159bc:	106d      	asrs	r5, r5, #1
 80159be:	429d      	cmp	r5, r3
 80159c0:	bf38      	it	cc
 80159c2:	461d      	movcc	r5, r3
 80159c4:	0553      	lsls	r3, r2, #21
 80159c6:	d531      	bpl.n	8015a2c <__ssputs_r+0xa0>
 80159c8:	4629      	mov	r1, r5
 80159ca:	f7ff ff85 	bl	80158d8 <_malloc_r>
 80159ce:	4606      	mov	r6, r0
 80159d0:	b950      	cbnz	r0, 80159e8 <__ssputs_r+0x5c>
 80159d2:	230c      	movs	r3, #12
 80159d4:	f8ca 3000 	str.w	r3, [sl]
 80159d8:	89a3      	ldrh	r3, [r4, #12]
 80159da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159de:	81a3      	strh	r3, [r4, #12]
 80159e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159e8:	6921      	ldr	r1, [r4, #16]
 80159ea:	464a      	mov	r2, r9
 80159ec:	f7ff f99c 	bl	8014d28 <memcpy>
 80159f0:	89a3      	ldrh	r3, [r4, #12]
 80159f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80159f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80159fa:	81a3      	strh	r3, [r4, #12]
 80159fc:	6126      	str	r6, [r4, #16]
 80159fe:	6165      	str	r5, [r4, #20]
 8015a00:	444e      	add	r6, r9
 8015a02:	eba5 0509 	sub.w	r5, r5, r9
 8015a06:	6026      	str	r6, [r4, #0]
 8015a08:	60a5      	str	r5, [r4, #8]
 8015a0a:	463e      	mov	r6, r7
 8015a0c:	42be      	cmp	r6, r7
 8015a0e:	d900      	bls.n	8015a12 <__ssputs_r+0x86>
 8015a10:	463e      	mov	r6, r7
 8015a12:	4632      	mov	r2, r6
 8015a14:	6820      	ldr	r0, [r4, #0]
 8015a16:	4641      	mov	r1, r8
 8015a18:	f7ff f994 	bl	8014d44 <memmove>
 8015a1c:	68a3      	ldr	r3, [r4, #8]
 8015a1e:	6822      	ldr	r2, [r4, #0]
 8015a20:	1b9b      	subs	r3, r3, r6
 8015a22:	4432      	add	r2, r6
 8015a24:	60a3      	str	r3, [r4, #8]
 8015a26:	6022      	str	r2, [r4, #0]
 8015a28:	2000      	movs	r0, #0
 8015a2a:	e7db      	b.n	80159e4 <__ssputs_r+0x58>
 8015a2c:	462a      	mov	r2, r5
 8015a2e:	f000 fcb5 	bl	801639c <_realloc_r>
 8015a32:	4606      	mov	r6, r0
 8015a34:	2800      	cmp	r0, #0
 8015a36:	d1e1      	bne.n	80159fc <__ssputs_r+0x70>
 8015a38:	6921      	ldr	r1, [r4, #16]
 8015a3a:	4650      	mov	r0, sl
 8015a3c:	f7ff fefc 	bl	8015838 <_free_r>
 8015a40:	e7c7      	b.n	80159d2 <__ssputs_r+0x46>
	...

08015a44 <_svfiprintf_r>:
 8015a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a48:	4698      	mov	r8, r3
 8015a4a:	898b      	ldrh	r3, [r1, #12]
 8015a4c:	061b      	lsls	r3, r3, #24
 8015a4e:	b09d      	sub	sp, #116	; 0x74
 8015a50:	4607      	mov	r7, r0
 8015a52:	460d      	mov	r5, r1
 8015a54:	4614      	mov	r4, r2
 8015a56:	d50e      	bpl.n	8015a76 <_svfiprintf_r+0x32>
 8015a58:	690b      	ldr	r3, [r1, #16]
 8015a5a:	b963      	cbnz	r3, 8015a76 <_svfiprintf_r+0x32>
 8015a5c:	2140      	movs	r1, #64	; 0x40
 8015a5e:	f7ff ff3b 	bl	80158d8 <_malloc_r>
 8015a62:	6028      	str	r0, [r5, #0]
 8015a64:	6128      	str	r0, [r5, #16]
 8015a66:	b920      	cbnz	r0, 8015a72 <_svfiprintf_r+0x2e>
 8015a68:	230c      	movs	r3, #12
 8015a6a:	603b      	str	r3, [r7, #0]
 8015a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a70:	e0d1      	b.n	8015c16 <_svfiprintf_r+0x1d2>
 8015a72:	2340      	movs	r3, #64	; 0x40
 8015a74:	616b      	str	r3, [r5, #20]
 8015a76:	2300      	movs	r3, #0
 8015a78:	9309      	str	r3, [sp, #36]	; 0x24
 8015a7a:	2320      	movs	r3, #32
 8015a7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a80:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a84:	2330      	movs	r3, #48	; 0x30
 8015a86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015c30 <_svfiprintf_r+0x1ec>
 8015a8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015a8e:	f04f 0901 	mov.w	r9, #1
 8015a92:	4623      	mov	r3, r4
 8015a94:	469a      	mov	sl, r3
 8015a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a9a:	b10a      	cbz	r2, 8015aa0 <_svfiprintf_r+0x5c>
 8015a9c:	2a25      	cmp	r2, #37	; 0x25
 8015a9e:	d1f9      	bne.n	8015a94 <_svfiprintf_r+0x50>
 8015aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8015aa4:	d00b      	beq.n	8015abe <_svfiprintf_r+0x7a>
 8015aa6:	465b      	mov	r3, fp
 8015aa8:	4622      	mov	r2, r4
 8015aaa:	4629      	mov	r1, r5
 8015aac:	4638      	mov	r0, r7
 8015aae:	f7ff ff6d 	bl	801598c <__ssputs_r>
 8015ab2:	3001      	adds	r0, #1
 8015ab4:	f000 80aa 	beq.w	8015c0c <_svfiprintf_r+0x1c8>
 8015ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015aba:	445a      	add	r2, fp
 8015abc:	9209      	str	r2, [sp, #36]	; 0x24
 8015abe:	f89a 3000 	ldrb.w	r3, [sl]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	f000 80a2 	beq.w	8015c0c <_svfiprintf_r+0x1c8>
 8015ac8:	2300      	movs	r3, #0
 8015aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ad2:	f10a 0a01 	add.w	sl, sl, #1
 8015ad6:	9304      	str	r3, [sp, #16]
 8015ad8:	9307      	str	r3, [sp, #28]
 8015ada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015ade:	931a      	str	r3, [sp, #104]	; 0x68
 8015ae0:	4654      	mov	r4, sl
 8015ae2:	2205      	movs	r2, #5
 8015ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ae8:	4851      	ldr	r0, [pc, #324]	; (8015c30 <_svfiprintf_r+0x1ec>)
 8015aea:	f7ea fb89 	bl	8000200 <memchr>
 8015aee:	9a04      	ldr	r2, [sp, #16]
 8015af0:	b9d8      	cbnz	r0, 8015b2a <_svfiprintf_r+0xe6>
 8015af2:	06d0      	lsls	r0, r2, #27
 8015af4:	bf44      	itt	mi
 8015af6:	2320      	movmi	r3, #32
 8015af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015afc:	0711      	lsls	r1, r2, #28
 8015afe:	bf44      	itt	mi
 8015b00:	232b      	movmi	r3, #43	; 0x2b
 8015b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b06:	f89a 3000 	ldrb.w	r3, [sl]
 8015b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8015b0c:	d015      	beq.n	8015b3a <_svfiprintf_r+0xf6>
 8015b0e:	9a07      	ldr	r2, [sp, #28]
 8015b10:	4654      	mov	r4, sl
 8015b12:	2000      	movs	r0, #0
 8015b14:	f04f 0c0a 	mov.w	ip, #10
 8015b18:	4621      	mov	r1, r4
 8015b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b1e:	3b30      	subs	r3, #48	; 0x30
 8015b20:	2b09      	cmp	r3, #9
 8015b22:	d94e      	bls.n	8015bc2 <_svfiprintf_r+0x17e>
 8015b24:	b1b0      	cbz	r0, 8015b54 <_svfiprintf_r+0x110>
 8015b26:	9207      	str	r2, [sp, #28]
 8015b28:	e014      	b.n	8015b54 <_svfiprintf_r+0x110>
 8015b2a:	eba0 0308 	sub.w	r3, r0, r8
 8015b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8015b32:	4313      	orrs	r3, r2
 8015b34:	9304      	str	r3, [sp, #16]
 8015b36:	46a2      	mov	sl, r4
 8015b38:	e7d2      	b.n	8015ae0 <_svfiprintf_r+0x9c>
 8015b3a:	9b03      	ldr	r3, [sp, #12]
 8015b3c:	1d19      	adds	r1, r3, #4
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	9103      	str	r1, [sp, #12]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	bfbb      	ittet	lt
 8015b46:	425b      	neglt	r3, r3
 8015b48:	f042 0202 	orrlt.w	r2, r2, #2
 8015b4c:	9307      	strge	r3, [sp, #28]
 8015b4e:	9307      	strlt	r3, [sp, #28]
 8015b50:	bfb8      	it	lt
 8015b52:	9204      	strlt	r2, [sp, #16]
 8015b54:	7823      	ldrb	r3, [r4, #0]
 8015b56:	2b2e      	cmp	r3, #46	; 0x2e
 8015b58:	d10c      	bne.n	8015b74 <_svfiprintf_r+0x130>
 8015b5a:	7863      	ldrb	r3, [r4, #1]
 8015b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8015b5e:	d135      	bne.n	8015bcc <_svfiprintf_r+0x188>
 8015b60:	9b03      	ldr	r3, [sp, #12]
 8015b62:	1d1a      	adds	r2, r3, #4
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	9203      	str	r2, [sp, #12]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	bfb8      	it	lt
 8015b6c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015b70:	3402      	adds	r4, #2
 8015b72:	9305      	str	r3, [sp, #20]
 8015b74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015c40 <_svfiprintf_r+0x1fc>
 8015b78:	7821      	ldrb	r1, [r4, #0]
 8015b7a:	2203      	movs	r2, #3
 8015b7c:	4650      	mov	r0, sl
 8015b7e:	f7ea fb3f 	bl	8000200 <memchr>
 8015b82:	b140      	cbz	r0, 8015b96 <_svfiprintf_r+0x152>
 8015b84:	2340      	movs	r3, #64	; 0x40
 8015b86:	eba0 000a 	sub.w	r0, r0, sl
 8015b8a:	fa03 f000 	lsl.w	r0, r3, r0
 8015b8e:	9b04      	ldr	r3, [sp, #16]
 8015b90:	4303      	orrs	r3, r0
 8015b92:	3401      	adds	r4, #1
 8015b94:	9304      	str	r3, [sp, #16]
 8015b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b9a:	4826      	ldr	r0, [pc, #152]	; (8015c34 <_svfiprintf_r+0x1f0>)
 8015b9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ba0:	2206      	movs	r2, #6
 8015ba2:	f7ea fb2d 	bl	8000200 <memchr>
 8015ba6:	2800      	cmp	r0, #0
 8015ba8:	d038      	beq.n	8015c1c <_svfiprintf_r+0x1d8>
 8015baa:	4b23      	ldr	r3, [pc, #140]	; (8015c38 <_svfiprintf_r+0x1f4>)
 8015bac:	bb1b      	cbnz	r3, 8015bf6 <_svfiprintf_r+0x1b2>
 8015bae:	9b03      	ldr	r3, [sp, #12]
 8015bb0:	3307      	adds	r3, #7
 8015bb2:	f023 0307 	bic.w	r3, r3, #7
 8015bb6:	3308      	adds	r3, #8
 8015bb8:	9303      	str	r3, [sp, #12]
 8015bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bbc:	4433      	add	r3, r6
 8015bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8015bc0:	e767      	b.n	8015a92 <_svfiprintf_r+0x4e>
 8015bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015bc6:	460c      	mov	r4, r1
 8015bc8:	2001      	movs	r0, #1
 8015bca:	e7a5      	b.n	8015b18 <_svfiprintf_r+0xd4>
 8015bcc:	2300      	movs	r3, #0
 8015bce:	3401      	adds	r4, #1
 8015bd0:	9305      	str	r3, [sp, #20]
 8015bd2:	4619      	mov	r1, r3
 8015bd4:	f04f 0c0a 	mov.w	ip, #10
 8015bd8:	4620      	mov	r0, r4
 8015bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bde:	3a30      	subs	r2, #48	; 0x30
 8015be0:	2a09      	cmp	r2, #9
 8015be2:	d903      	bls.n	8015bec <_svfiprintf_r+0x1a8>
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d0c5      	beq.n	8015b74 <_svfiprintf_r+0x130>
 8015be8:	9105      	str	r1, [sp, #20]
 8015bea:	e7c3      	b.n	8015b74 <_svfiprintf_r+0x130>
 8015bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8015bf0:	4604      	mov	r4, r0
 8015bf2:	2301      	movs	r3, #1
 8015bf4:	e7f0      	b.n	8015bd8 <_svfiprintf_r+0x194>
 8015bf6:	ab03      	add	r3, sp, #12
 8015bf8:	9300      	str	r3, [sp, #0]
 8015bfa:	462a      	mov	r2, r5
 8015bfc:	4b0f      	ldr	r3, [pc, #60]	; (8015c3c <_svfiprintf_r+0x1f8>)
 8015bfe:	a904      	add	r1, sp, #16
 8015c00:	4638      	mov	r0, r7
 8015c02:	f3af 8000 	nop.w
 8015c06:	1c42      	adds	r2, r0, #1
 8015c08:	4606      	mov	r6, r0
 8015c0a:	d1d6      	bne.n	8015bba <_svfiprintf_r+0x176>
 8015c0c:	89ab      	ldrh	r3, [r5, #12]
 8015c0e:	065b      	lsls	r3, r3, #25
 8015c10:	f53f af2c 	bmi.w	8015a6c <_svfiprintf_r+0x28>
 8015c14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c16:	b01d      	add	sp, #116	; 0x74
 8015c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c1c:	ab03      	add	r3, sp, #12
 8015c1e:	9300      	str	r3, [sp, #0]
 8015c20:	462a      	mov	r2, r5
 8015c22:	4b06      	ldr	r3, [pc, #24]	; (8015c3c <_svfiprintf_r+0x1f8>)
 8015c24:	a904      	add	r1, sp, #16
 8015c26:	4638      	mov	r0, r7
 8015c28:	f000 f9d4 	bl	8015fd4 <_printf_i>
 8015c2c:	e7eb      	b.n	8015c06 <_svfiprintf_r+0x1c2>
 8015c2e:	bf00      	nop
 8015c30:	0801f264 	.word	0x0801f264
 8015c34:	0801f26e 	.word	0x0801f26e
 8015c38:	00000000 	.word	0x00000000
 8015c3c:	0801598d 	.word	0x0801598d
 8015c40:	0801f26a 	.word	0x0801f26a

08015c44 <__sfputc_r>:
 8015c44:	6893      	ldr	r3, [r2, #8]
 8015c46:	3b01      	subs	r3, #1
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	b410      	push	{r4}
 8015c4c:	6093      	str	r3, [r2, #8]
 8015c4e:	da08      	bge.n	8015c62 <__sfputc_r+0x1e>
 8015c50:	6994      	ldr	r4, [r2, #24]
 8015c52:	42a3      	cmp	r3, r4
 8015c54:	db01      	blt.n	8015c5a <__sfputc_r+0x16>
 8015c56:	290a      	cmp	r1, #10
 8015c58:	d103      	bne.n	8015c62 <__sfputc_r+0x1e>
 8015c5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c5e:	f7ff bacf 	b.w	8015200 <__swbuf_r>
 8015c62:	6813      	ldr	r3, [r2, #0]
 8015c64:	1c58      	adds	r0, r3, #1
 8015c66:	6010      	str	r0, [r2, #0]
 8015c68:	7019      	strb	r1, [r3, #0]
 8015c6a:	4608      	mov	r0, r1
 8015c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015c70:	4770      	bx	lr

08015c72 <__sfputs_r>:
 8015c72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c74:	4606      	mov	r6, r0
 8015c76:	460f      	mov	r7, r1
 8015c78:	4614      	mov	r4, r2
 8015c7a:	18d5      	adds	r5, r2, r3
 8015c7c:	42ac      	cmp	r4, r5
 8015c7e:	d101      	bne.n	8015c84 <__sfputs_r+0x12>
 8015c80:	2000      	movs	r0, #0
 8015c82:	e007      	b.n	8015c94 <__sfputs_r+0x22>
 8015c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c88:	463a      	mov	r2, r7
 8015c8a:	4630      	mov	r0, r6
 8015c8c:	f7ff ffda 	bl	8015c44 <__sfputc_r>
 8015c90:	1c43      	adds	r3, r0, #1
 8015c92:	d1f3      	bne.n	8015c7c <__sfputs_r+0xa>
 8015c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015c98 <_vfiprintf_r>:
 8015c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c9c:	460d      	mov	r5, r1
 8015c9e:	b09d      	sub	sp, #116	; 0x74
 8015ca0:	4614      	mov	r4, r2
 8015ca2:	4698      	mov	r8, r3
 8015ca4:	4606      	mov	r6, r0
 8015ca6:	b118      	cbz	r0, 8015cb0 <_vfiprintf_r+0x18>
 8015ca8:	6983      	ldr	r3, [r0, #24]
 8015caa:	b90b      	cbnz	r3, 8015cb0 <_vfiprintf_r+0x18>
 8015cac:	f7ff fca6 	bl	80155fc <__sinit>
 8015cb0:	4b89      	ldr	r3, [pc, #548]	; (8015ed8 <_vfiprintf_r+0x240>)
 8015cb2:	429d      	cmp	r5, r3
 8015cb4:	d11b      	bne.n	8015cee <_vfiprintf_r+0x56>
 8015cb6:	6875      	ldr	r5, [r6, #4]
 8015cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015cba:	07d9      	lsls	r1, r3, #31
 8015cbc:	d405      	bmi.n	8015cca <_vfiprintf_r+0x32>
 8015cbe:	89ab      	ldrh	r3, [r5, #12]
 8015cc0:	059a      	lsls	r2, r3, #22
 8015cc2:	d402      	bmi.n	8015cca <_vfiprintf_r+0x32>
 8015cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015cc6:	f7ff fd49 	bl	801575c <__retarget_lock_acquire_recursive>
 8015cca:	89ab      	ldrh	r3, [r5, #12]
 8015ccc:	071b      	lsls	r3, r3, #28
 8015cce:	d501      	bpl.n	8015cd4 <_vfiprintf_r+0x3c>
 8015cd0:	692b      	ldr	r3, [r5, #16]
 8015cd2:	b9eb      	cbnz	r3, 8015d10 <_vfiprintf_r+0x78>
 8015cd4:	4629      	mov	r1, r5
 8015cd6:	4630      	mov	r0, r6
 8015cd8:	f7ff fae4 	bl	80152a4 <__swsetup_r>
 8015cdc:	b1c0      	cbz	r0, 8015d10 <_vfiprintf_r+0x78>
 8015cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ce0:	07dc      	lsls	r4, r3, #31
 8015ce2:	d50e      	bpl.n	8015d02 <_vfiprintf_r+0x6a>
 8015ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ce8:	b01d      	add	sp, #116	; 0x74
 8015cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cee:	4b7b      	ldr	r3, [pc, #492]	; (8015edc <_vfiprintf_r+0x244>)
 8015cf0:	429d      	cmp	r5, r3
 8015cf2:	d101      	bne.n	8015cf8 <_vfiprintf_r+0x60>
 8015cf4:	68b5      	ldr	r5, [r6, #8]
 8015cf6:	e7df      	b.n	8015cb8 <_vfiprintf_r+0x20>
 8015cf8:	4b79      	ldr	r3, [pc, #484]	; (8015ee0 <_vfiprintf_r+0x248>)
 8015cfa:	429d      	cmp	r5, r3
 8015cfc:	bf08      	it	eq
 8015cfe:	68f5      	ldreq	r5, [r6, #12]
 8015d00:	e7da      	b.n	8015cb8 <_vfiprintf_r+0x20>
 8015d02:	89ab      	ldrh	r3, [r5, #12]
 8015d04:	0598      	lsls	r0, r3, #22
 8015d06:	d4ed      	bmi.n	8015ce4 <_vfiprintf_r+0x4c>
 8015d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d0a:	f7ff fd28 	bl	801575e <__retarget_lock_release_recursive>
 8015d0e:	e7e9      	b.n	8015ce4 <_vfiprintf_r+0x4c>
 8015d10:	2300      	movs	r3, #0
 8015d12:	9309      	str	r3, [sp, #36]	; 0x24
 8015d14:	2320      	movs	r3, #32
 8015d16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d1e:	2330      	movs	r3, #48	; 0x30
 8015d20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015ee4 <_vfiprintf_r+0x24c>
 8015d24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015d28:	f04f 0901 	mov.w	r9, #1
 8015d2c:	4623      	mov	r3, r4
 8015d2e:	469a      	mov	sl, r3
 8015d30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d34:	b10a      	cbz	r2, 8015d3a <_vfiprintf_r+0xa2>
 8015d36:	2a25      	cmp	r2, #37	; 0x25
 8015d38:	d1f9      	bne.n	8015d2e <_vfiprintf_r+0x96>
 8015d3a:	ebba 0b04 	subs.w	fp, sl, r4
 8015d3e:	d00b      	beq.n	8015d58 <_vfiprintf_r+0xc0>
 8015d40:	465b      	mov	r3, fp
 8015d42:	4622      	mov	r2, r4
 8015d44:	4629      	mov	r1, r5
 8015d46:	4630      	mov	r0, r6
 8015d48:	f7ff ff93 	bl	8015c72 <__sfputs_r>
 8015d4c:	3001      	adds	r0, #1
 8015d4e:	f000 80aa 	beq.w	8015ea6 <_vfiprintf_r+0x20e>
 8015d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d54:	445a      	add	r2, fp
 8015d56:	9209      	str	r2, [sp, #36]	; 0x24
 8015d58:	f89a 3000 	ldrb.w	r3, [sl]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	f000 80a2 	beq.w	8015ea6 <_vfiprintf_r+0x20e>
 8015d62:	2300      	movs	r3, #0
 8015d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015d6c:	f10a 0a01 	add.w	sl, sl, #1
 8015d70:	9304      	str	r3, [sp, #16]
 8015d72:	9307      	str	r3, [sp, #28]
 8015d74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015d78:	931a      	str	r3, [sp, #104]	; 0x68
 8015d7a:	4654      	mov	r4, sl
 8015d7c:	2205      	movs	r2, #5
 8015d7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d82:	4858      	ldr	r0, [pc, #352]	; (8015ee4 <_vfiprintf_r+0x24c>)
 8015d84:	f7ea fa3c 	bl	8000200 <memchr>
 8015d88:	9a04      	ldr	r2, [sp, #16]
 8015d8a:	b9d8      	cbnz	r0, 8015dc4 <_vfiprintf_r+0x12c>
 8015d8c:	06d1      	lsls	r1, r2, #27
 8015d8e:	bf44      	itt	mi
 8015d90:	2320      	movmi	r3, #32
 8015d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015d96:	0713      	lsls	r3, r2, #28
 8015d98:	bf44      	itt	mi
 8015d9a:	232b      	movmi	r3, #43	; 0x2b
 8015d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015da0:	f89a 3000 	ldrb.w	r3, [sl]
 8015da4:	2b2a      	cmp	r3, #42	; 0x2a
 8015da6:	d015      	beq.n	8015dd4 <_vfiprintf_r+0x13c>
 8015da8:	9a07      	ldr	r2, [sp, #28]
 8015daa:	4654      	mov	r4, sl
 8015dac:	2000      	movs	r0, #0
 8015dae:	f04f 0c0a 	mov.w	ip, #10
 8015db2:	4621      	mov	r1, r4
 8015db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015db8:	3b30      	subs	r3, #48	; 0x30
 8015dba:	2b09      	cmp	r3, #9
 8015dbc:	d94e      	bls.n	8015e5c <_vfiprintf_r+0x1c4>
 8015dbe:	b1b0      	cbz	r0, 8015dee <_vfiprintf_r+0x156>
 8015dc0:	9207      	str	r2, [sp, #28]
 8015dc2:	e014      	b.n	8015dee <_vfiprintf_r+0x156>
 8015dc4:	eba0 0308 	sub.w	r3, r0, r8
 8015dc8:	fa09 f303 	lsl.w	r3, r9, r3
 8015dcc:	4313      	orrs	r3, r2
 8015dce:	9304      	str	r3, [sp, #16]
 8015dd0:	46a2      	mov	sl, r4
 8015dd2:	e7d2      	b.n	8015d7a <_vfiprintf_r+0xe2>
 8015dd4:	9b03      	ldr	r3, [sp, #12]
 8015dd6:	1d19      	adds	r1, r3, #4
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	9103      	str	r1, [sp, #12]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	bfbb      	ittet	lt
 8015de0:	425b      	neglt	r3, r3
 8015de2:	f042 0202 	orrlt.w	r2, r2, #2
 8015de6:	9307      	strge	r3, [sp, #28]
 8015de8:	9307      	strlt	r3, [sp, #28]
 8015dea:	bfb8      	it	lt
 8015dec:	9204      	strlt	r2, [sp, #16]
 8015dee:	7823      	ldrb	r3, [r4, #0]
 8015df0:	2b2e      	cmp	r3, #46	; 0x2e
 8015df2:	d10c      	bne.n	8015e0e <_vfiprintf_r+0x176>
 8015df4:	7863      	ldrb	r3, [r4, #1]
 8015df6:	2b2a      	cmp	r3, #42	; 0x2a
 8015df8:	d135      	bne.n	8015e66 <_vfiprintf_r+0x1ce>
 8015dfa:	9b03      	ldr	r3, [sp, #12]
 8015dfc:	1d1a      	adds	r2, r3, #4
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	9203      	str	r2, [sp, #12]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	bfb8      	it	lt
 8015e06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015e0a:	3402      	adds	r4, #2
 8015e0c:	9305      	str	r3, [sp, #20]
 8015e0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015ef4 <_vfiprintf_r+0x25c>
 8015e12:	7821      	ldrb	r1, [r4, #0]
 8015e14:	2203      	movs	r2, #3
 8015e16:	4650      	mov	r0, sl
 8015e18:	f7ea f9f2 	bl	8000200 <memchr>
 8015e1c:	b140      	cbz	r0, 8015e30 <_vfiprintf_r+0x198>
 8015e1e:	2340      	movs	r3, #64	; 0x40
 8015e20:	eba0 000a 	sub.w	r0, r0, sl
 8015e24:	fa03 f000 	lsl.w	r0, r3, r0
 8015e28:	9b04      	ldr	r3, [sp, #16]
 8015e2a:	4303      	orrs	r3, r0
 8015e2c:	3401      	adds	r4, #1
 8015e2e:	9304      	str	r3, [sp, #16]
 8015e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e34:	482c      	ldr	r0, [pc, #176]	; (8015ee8 <_vfiprintf_r+0x250>)
 8015e36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e3a:	2206      	movs	r2, #6
 8015e3c:	f7ea f9e0 	bl	8000200 <memchr>
 8015e40:	2800      	cmp	r0, #0
 8015e42:	d03f      	beq.n	8015ec4 <_vfiprintf_r+0x22c>
 8015e44:	4b29      	ldr	r3, [pc, #164]	; (8015eec <_vfiprintf_r+0x254>)
 8015e46:	bb1b      	cbnz	r3, 8015e90 <_vfiprintf_r+0x1f8>
 8015e48:	9b03      	ldr	r3, [sp, #12]
 8015e4a:	3307      	adds	r3, #7
 8015e4c:	f023 0307 	bic.w	r3, r3, #7
 8015e50:	3308      	adds	r3, #8
 8015e52:	9303      	str	r3, [sp, #12]
 8015e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e56:	443b      	add	r3, r7
 8015e58:	9309      	str	r3, [sp, #36]	; 0x24
 8015e5a:	e767      	b.n	8015d2c <_vfiprintf_r+0x94>
 8015e5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015e60:	460c      	mov	r4, r1
 8015e62:	2001      	movs	r0, #1
 8015e64:	e7a5      	b.n	8015db2 <_vfiprintf_r+0x11a>
 8015e66:	2300      	movs	r3, #0
 8015e68:	3401      	adds	r4, #1
 8015e6a:	9305      	str	r3, [sp, #20]
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	f04f 0c0a 	mov.w	ip, #10
 8015e72:	4620      	mov	r0, r4
 8015e74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015e78:	3a30      	subs	r2, #48	; 0x30
 8015e7a:	2a09      	cmp	r2, #9
 8015e7c:	d903      	bls.n	8015e86 <_vfiprintf_r+0x1ee>
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d0c5      	beq.n	8015e0e <_vfiprintf_r+0x176>
 8015e82:	9105      	str	r1, [sp, #20]
 8015e84:	e7c3      	b.n	8015e0e <_vfiprintf_r+0x176>
 8015e86:	fb0c 2101 	mla	r1, ip, r1, r2
 8015e8a:	4604      	mov	r4, r0
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	e7f0      	b.n	8015e72 <_vfiprintf_r+0x1da>
 8015e90:	ab03      	add	r3, sp, #12
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	462a      	mov	r2, r5
 8015e96:	4b16      	ldr	r3, [pc, #88]	; (8015ef0 <_vfiprintf_r+0x258>)
 8015e98:	a904      	add	r1, sp, #16
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	f3af 8000 	nop.w
 8015ea0:	4607      	mov	r7, r0
 8015ea2:	1c78      	adds	r0, r7, #1
 8015ea4:	d1d6      	bne.n	8015e54 <_vfiprintf_r+0x1bc>
 8015ea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ea8:	07d9      	lsls	r1, r3, #31
 8015eaa:	d405      	bmi.n	8015eb8 <_vfiprintf_r+0x220>
 8015eac:	89ab      	ldrh	r3, [r5, #12]
 8015eae:	059a      	lsls	r2, r3, #22
 8015eb0:	d402      	bmi.n	8015eb8 <_vfiprintf_r+0x220>
 8015eb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015eb4:	f7ff fc53 	bl	801575e <__retarget_lock_release_recursive>
 8015eb8:	89ab      	ldrh	r3, [r5, #12]
 8015eba:	065b      	lsls	r3, r3, #25
 8015ebc:	f53f af12 	bmi.w	8015ce4 <_vfiprintf_r+0x4c>
 8015ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015ec2:	e711      	b.n	8015ce8 <_vfiprintf_r+0x50>
 8015ec4:	ab03      	add	r3, sp, #12
 8015ec6:	9300      	str	r3, [sp, #0]
 8015ec8:	462a      	mov	r2, r5
 8015eca:	4b09      	ldr	r3, [pc, #36]	; (8015ef0 <_vfiprintf_r+0x258>)
 8015ecc:	a904      	add	r1, sp, #16
 8015ece:	4630      	mov	r0, r6
 8015ed0:	f000 f880 	bl	8015fd4 <_printf_i>
 8015ed4:	e7e4      	b.n	8015ea0 <_vfiprintf_r+0x208>
 8015ed6:	bf00      	nop
 8015ed8:	0801f224 	.word	0x0801f224
 8015edc:	0801f244 	.word	0x0801f244
 8015ee0:	0801f204 	.word	0x0801f204
 8015ee4:	0801f264 	.word	0x0801f264
 8015ee8:	0801f26e 	.word	0x0801f26e
 8015eec:	00000000 	.word	0x00000000
 8015ef0:	08015c73 	.word	0x08015c73
 8015ef4:	0801f26a 	.word	0x0801f26a

08015ef8 <_printf_common>:
 8015ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015efc:	4616      	mov	r6, r2
 8015efe:	4699      	mov	r9, r3
 8015f00:	688a      	ldr	r2, [r1, #8]
 8015f02:	690b      	ldr	r3, [r1, #16]
 8015f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015f08:	4293      	cmp	r3, r2
 8015f0a:	bfb8      	it	lt
 8015f0c:	4613      	movlt	r3, r2
 8015f0e:	6033      	str	r3, [r6, #0]
 8015f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015f14:	4607      	mov	r7, r0
 8015f16:	460c      	mov	r4, r1
 8015f18:	b10a      	cbz	r2, 8015f1e <_printf_common+0x26>
 8015f1a:	3301      	adds	r3, #1
 8015f1c:	6033      	str	r3, [r6, #0]
 8015f1e:	6823      	ldr	r3, [r4, #0]
 8015f20:	0699      	lsls	r1, r3, #26
 8015f22:	bf42      	ittt	mi
 8015f24:	6833      	ldrmi	r3, [r6, #0]
 8015f26:	3302      	addmi	r3, #2
 8015f28:	6033      	strmi	r3, [r6, #0]
 8015f2a:	6825      	ldr	r5, [r4, #0]
 8015f2c:	f015 0506 	ands.w	r5, r5, #6
 8015f30:	d106      	bne.n	8015f40 <_printf_common+0x48>
 8015f32:	f104 0a19 	add.w	sl, r4, #25
 8015f36:	68e3      	ldr	r3, [r4, #12]
 8015f38:	6832      	ldr	r2, [r6, #0]
 8015f3a:	1a9b      	subs	r3, r3, r2
 8015f3c:	42ab      	cmp	r3, r5
 8015f3e:	dc26      	bgt.n	8015f8e <_printf_common+0x96>
 8015f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015f44:	1e13      	subs	r3, r2, #0
 8015f46:	6822      	ldr	r2, [r4, #0]
 8015f48:	bf18      	it	ne
 8015f4a:	2301      	movne	r3, #1
 8015f4c:	0692      	lsls	r2, r2, #26
 8015f4e:	d42b      	bmi.n	8015fa8 <_printf_common+0xb0>
 8015f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015f54:	4649      	mov	r1, r9
 8015f56:	4638      	mov	r0, r7
 8015f58:	47c0      	blx	r8
 8015f5a:	3001      	adds	r0, #1
 8015f5c:	d01e      	beq.n	8015f9c <_printf_common+0xa4>
 8015f5e:	6823      	ldr	r3, [r4, #0]
 8015f60:	68e5      	ldr	r5, [r4, #12]
 8015f62:	6832      	ldr	r2, [r6, #0]
 8015f64:	f003 0306 	and.w	r3, r3, #6
 8015f68:	2b04      	cmp	r3, #4
 8015f6a:	bf08      	it	eq
 8015f6c:	1aad      	subeq	r5, r5, r2
 8015f6e:	68a3      	ldr	r3, [r4, #8]
 8015f70:	6922      	ldr	r2, [r4, #16]
 8015f72:	bf0c      	ite	eq
 8015f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015f78:	2500      	movne	r5, #0
 8015f7a:	4293      	cmp	r3, r2
 8015f7c:	bfc4      	itt	gt
 8015f7e:	1a9b      	subgt	r3, r3, r2
 8015f80:	18ed      	addgt	r5, r5, r3
 8015f82:	2600      	movs	r6, #0
 8015f84:	341a      	adds	r4, #26
 8015f86:	42b5      	cmp	r5, r6
 8015f88:	d11a      	bne.n	8015fc0 <_printf_common+0xc8>
 8015f8a:	2000      	movs	r0, #0
 8015f8c:	e008      	b.n	8015fa0 <_printf_common+0xa8>
 8015f8e:	2301      	movs	r3, #1
 8015f90:	4652      	mov	r2, sl
 8015f92:	4649      	mov	r1, r9
 8015f94:	4638      	mov	r0, r7
 8015f96:	47c0      	blx	r8
 8015f98:	3001      	adds	r0, #1
 8015f9a:	d103      	bne.n	8015fa4 <_printf_common+0xac>
 8015f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fa4:	3501      	adds	r5, #1
 8015fa6:	e7c6      	b.n	8015f36 <_printf_common+0x3e>
 8015fa8:	18e1      	adds	r1, r4, r3
 8015faa:	1c5a      	adds	r2, r3, #1
 8015fac:	2030      	movs	r0, #48	; 0x30
 8015fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015fb2:	4422      	add	r2, r4
 8015fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015fbc:	3302      	adds	r3, #2
 8015fbe:	e7c7      	b.n	8015f50 <_printf_common+0x58>
 8015fc0:	2301      	movs	r3, #1
 8015fc2:	4622      	mov	r2, r4
 8015fc4:	4649      	mov	r1, r9
 8015fc6:	4638      	mov	r0, r7
 8015fc8:	47c0      	blx	r8
 8015fca:	3001      	adds	r0, #1
 8015fcc:	d0e6      	beq.n	8015f9c <_printf_common+0xa4>
 8015fce:	3601      	adds	r6, #1
 8015fd0:	e7d9      	b.n	8015f86 <_printf_common+0x8e>
	...

08015fd4 <_printf_i>:
 8015fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015fd8:	460c      	mov	r4, r1
 8015fda:	4691      	mov	r9, r2
 8015fdc:	7e27      	ldrb	r7, [r4, #24]
 8015fde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015fe0:	2f78      	cmp	r7, #120	; 0x78
 8015fe2:	4680      	mov	r8, r0
 8015fe4:	469a      	mov	sl, r3
 8015fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015fea:	d807      	bhi.n	8015ffc <_printf_i+0x28>
 8015fec:	2f62      	cmp	r7, #98	; 0x62
 8015fee:	d80a      	bhi.n	8016006 <_printf_i+0x32>
 8015ff0:	2f00      	cmp	r7, #0
 8015ff2:	f000 80d8 	beq.w	80161a6 <_printf_i+0x1d2>
 8015ff6:	2f58      	cmp	r7, #88	; 0x58
 8015ff8:	f000 80a3 	beq.w	8016142 <_printf_i+0x16e>
 8015ffc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016004:	e03a      	b.n	801607c <_printf_i+0xa8>
 8016006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801600a:	2b15      	cmp	r3, #21
 801600c:	d8f6      	bhi.n	8015ffc <_printf_i+0x28>
 801600e:	a001      	add	r0, pc, #4	; (adr r0, 8016014 <_printf_i+0x40>)
 8016010:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016014:	0801606d 	.word	0x0801606d
 8016018:	08016081 	.word	0x08016081
 801601c:	08015ffd 	.word	0x08015ffd
 8016020:	08015ffd 	.word	0x08015ffd
 8016024:	08015ffd 	.word	0x08015ffd
 8016028:	08015ffd 	.word	0x08015ffd
 801602c:	08016081 	.word	0x08016081
 8016030:	08015ffd 	.word	0x08015ffd
 8016034:	08015ffd 	.word	0x08015ffd
 8016038:	08015ffd 	.word	0x08015ffd
 801603c:	08015ffd 	.word	0x08015ffd
 8016040:	0801618d 	.word	0x0801618d
 8016044:	080160b1 	.word	0x080160b1
 8016048:	0801616f 	.word	0x0801616f
 801604c:	08015ffd 	.word	0x08015ffd
 8016050:	08015ffd 	.word	0x08015ffd
 8016054:	080161af 	.word	0x080161af
 8016058:	08015ffd 	.word	0x08015ffd
 801605c:	080160b1 	.word	0x080160b1
 8016060:	08015ffd 	.word	0x08015ffd
 8016064:	08015ffd 	.word	0x08015ffd
 8016068:	08016177 	.word	0x08016177
 801606c:	680b      	ldr	r3, [r1, #0]
 801606e:	1d1a      	adds	r2, r3, #4
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	600a      	str	r2, [r1, #0]
 8016074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801607c:	2301      	movs	r3, #1
 801607e:	e0a3      	b.n	80161c8 <_printf_i+0x1f4>
 8016080:	6825      	ldr	r5, [r4, #0]
 8016082:	6808      	ldr	r0, [r1, #0]
 8016084:	062e      	lsls	r6, r5, #24
 8016086:	f100 0304 	add.w	r3, r0, #4
 801608a:	d50a      	bpl.n	80160a2 <_printf_i+0xce>
 801608c:	6805      	ldr	r5, [r0, #0]
 801608e:	600b      	str	r3, [r1, #0]
 8016090:	2d00      	cmp	r5, #0
 8016092:	da03      	bge.n	801609c <_printf_i+0xc8>
 8016094:	232d      	movs	r3, #45	; 0x2d
 8016096:	426d      	negs	r5, r5
 8016098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801609c:	485e      	ldr	r0, [pc, #376]	; (8016218 <_printf_i+0x244>)
 801609e:	230a      	movs	r3, #10
 80160a0:	e019      	b.n	80160d6 <_printf_i+0x102>
 80160a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80160a6:	6805      	ldr	r5, [r0, #0]
 80160a8:	600b      	str	r3, [r1, #0]
 80160aa:	bf18      	it	ne
 80160ac:	b22d      	sxthne	r5, r5
 80160ae:	e7ef      	b.n	8016090 <_printf_i+0xbc>
 80160b0:	680b      	ldr	r3, [r1, #0]
 80160b2:	6825      	ldr	r5, [r4, #0]
 80160b4:	1d18      	adds	r0, r3, #4
 80160b6:	6008      	str	r0, [r1, #0]
 80160b8:	0628      	lsls	r0, r5, #24
 80160ba:	d501      	bpl.n	80160c0 <_printf_i+0xec>
 80160bc:	681d      	ldr	r5, [r3, #0]
 80160be:	e002      	b.n	80160c6 <_printf_i+0xf2>
 80160c0:	0669      	lsls	r1, r5, #25
 80160c2:	d5fb      	bpl.n	80160bc <_printf_i+0xe8>
 80160c4:	881d      	ldrh	r5, [r3, #0]
 80160c6:	4854      	ldr	r0, [pc, #336]	; (8016218 <_printf_i+0x244>)
 80160c8:	2f6f      	cmp	r7, #111	; 0x6f
 80160ca:	bf0c      	ite	eq
 80160cc:	2308      	moveq	r3, #8
 80160ce:	230a      	movne	r3, #10
 80160d0:	2100      	movs	r1, #0
 80160d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80160d6:	6866      	ldr	r6, [r4, #4]
 80160d8:	60a6      	str	r6, [r4, #8]
 80160da:	2e00      	cmp	r6, #0
 80160dc:	bfa2      	ittt	ge
 80160de:	6821      	ldrge	r1, [r4, #0]
 80160e0:	f021 0104 	bicge.w	r1, r1, #4
 80160e4:	6021      	strge	r1, [r4, #0]
 80160e6:	b90d      	cbnz	r5, 80160ec <_printf_i+0x118>
 80160e8:	2e00      	cmp	r6, #0
 80160ea:	d04d      	beq.n	8016188 <_printf_i+0x1b4>
 80160ec:	4616      	mov	r6, r2
 80160ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80160f2:	fb03 5711 	mls	r7, r3, r1, r5
 80160f6:	5dc7      	ldrb	r7, [r0, r7]
 80160f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80160fc:	462f      	mov	r7, r5
 80160fe:	42bb      	cmp	r3, r7
 8016100:	460d      	mov	r5, r1
 8016102:	d9f4      	bls.n	80160ee <_printf_i+0x11a>
 8016104:	2b08      	cmp	r3, #8
 8016106:	d10b      	bne.n	8016120 <_printf_i+0x14c>
 8016108:	6823      	ldr	r3, [r4, #0]
 801610a:	07df      	lsls	r7, r3, #31
 801610c:	d508      	bpl.n	8016120 <_printf_i+0x14c>
 801610e:	6923      	ldr	r3, [r4, #16]
 8016110:	6861      	ldr	r1, [r4, #4]
 8016112:	4299      	cmp	r1, r3
 8016114:	bfde      	ittt	le
 8016116:	2330      	movle	r3, #48	; 0x30
 8016118:	f806 3c01 	strble.w	r3, [r6, #-1]
 801611c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8016120:	1b92      	subs	r2, r2, r6
 8016122:	6122      	str	r2, [r4, #16]
 8016124:	f8cd a000 	str.w	sl, [sp]
 8016128:	464b      	mov	r3, r9
 801612a:	aa03      	add	r2, sp, #12
 801612c:	4621      	mov	r1, r4
 801612e:	4640      	mov	r0, r8
 8016130:	f7ff fee2 	bl	8015ef8 <_printf_common>
 8016134:	3001      	adds	r0, #1
 8016136:	d14c      	bne.n	80161d2 <_printf_i+0x1fe>
 8016138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801613c:	b004      	add	sp, #16
 801613e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016142:	4835      	ldr	r0, [pc, #212]	; (8016218 <_printf_i+0x244>)
 8016144:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016148:	6823      	ldr	r3, [r4, #0]
 801614a:	680e      	ldr	r6, [r1, #0]
 801614c:	061f      	lsls	r7, r3, #24
 801614e:	f856 5b04 	ldr.w	r5, [r6], #4
 8016152:	600e      	str	r6, [r1, #0]
 8016154:	d514      	bpl.n	8016180 <_printf_i+0x1ac>
 8016156:	07d9      	lsls	r1, r3, #31
 8016158:	bf44      	itt	mi
 801615a:	f043 0320 	orrmi.w	r3, r3, #32
 801615e:	6023      	strmi	r3, [r4, #0]
 8016160:	b91d      	cbnz	r5, 801616a <_printf_i+0x196>
 8016162:	6823      	ldr	r3, [r4, #0]
 8016164:	f023 0320 	bic.w	r3, r3, #32
 8016168:	6023      	str	r3, [r4, #0]
 801616a:	2310      	movs	r3, #16
 801616c:	e7b0      	b.n	80160d0 <_printf_i+0xfc>
 801616e:	6823      	ldr	r3, [r4, #0]
 8016170:	f043 0320 	orr.w	r3, r3, #32
 8016174:	6023      	str	r3, [r4, #0]
 8016176:	2378      	movs	r3, #120	; 0x78
 8016178:	4828      	ldr	r0, [pc, #160]	; (801621c <_printf_i+0x248>)
 801617a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801617e:	e7e3      	b.n	8016148 <_printf_i+0x174>
 8016180:	065e      	lsls	r6, r3, #25
 8016182:	bf48      	it	mi
 8016184:	b2ad      	uxthmi	r5, r5
 8016186:	e7e6      	b.n	8016156 <_printf_i+0x182>
 8016188:	4616      	mov	r6, r2
 801618a:	e7bb      	b.n	8016104 <_printf_i+0x130>
 801618c:	680b      	ldr	r3, [r1, #0]
 801618e:	6826      	ldr	r6, [r4, #0]
 8016190:	6960      	ldr	r0, [r4, #20]
 8016192:	1d1d      	adds	r5, r3, #4
 8016194:	600d      	str	r5, [r1, #0]
 8016196:	0635      	lsls	r5, r6, #24
 8016198:	681b      	ldr	r3, [r3, #0]
 801619a:	d501      	bpl.n	80161a0 <_printf_i+0x1cc>
 801619c:	6018      	str	r0, [r3, #0]
 801619e:	e002      	b.n	80161a6 <_printf_i+0x1d2>
 80161a0:	0671      	lsls	r1, r6, #25
 80161a2:	d5fb      	bpl.n	801619c <_printf_i+0x1c8>
 80161a4:	8018      	strh	r0, [r3, #0]
 80161a6:	2300      	movs	r3, #0
 80161a8:	6123      	str	r3, [r4, #16]
 80161aa:	4616      	mov	r6, r2
 80161ac:	e7ba      	b.n	8016124 <_printf_i+0x150>
 80161ae:	680b      	ldr	r3, [r1, #0]
 80161b0:	1d1a      	adds	r2, r3, #4
 80161b2:	600a      	str	r2, [r1, #0]
 80161b4:	681e      	ldr	r6, [r3, #0]
 80161b6:	6862      	ldr	r2, [r4, #4]
 80161b8:	2100      	movs	r1, #0
 80161ba:	4630      	mov	r0, r6
 80161bc:	f7ea f820 	bl	8000200 <memchr>
 80161c0:	b108      	cbz	r0, 80161c6 <_printf_i+0x1f2>
 80161c2:	1b80      	subs	r0, r0, r6
 80161c4:	6060      	str	r0, [r4, #4]
 80161c6:	6863      	ldr	r3, [r4, #4]
 80161c8:	6123      	str	r3, [r4, #16]
 80161ca:	2300      	movs	r3, #0
 80161cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80161d0:	e7a8      	b.n	8016124 <_printf_i+0x150>
 80161d2:	6923      	ldr	r3, [r4, #16]
 80161d4:	4632      	mov	r2, r6
 80161d6:	4649      	mov	r1, r9
 80161d8:	4640      	mov	r0, r8
 80161da:	47d0      	blx	sl
 80161dc:	3001      	adds	r0, #1
 80161de:	d0ab      	beq.n	8016138 <_printf_i+0x164>
 80161e0:	6823      	ldr	r3, [r4, #0]
 80161e2:	079b      	lsls	r3, r3, #30
 80161e4:	d413      	bmi.n	801620e <_printf_i+0x23a>
 80161e6:	68e0      	ldr	r0, [r4, #12]
 80161e8:	9b03      	ldr	r3, [sp, #12]
 80161ea:	4298      	cmp	r0, r3
 80161ec:	bfb8      	it	lt
 80161ee:	4618      	movlt	r0, r3
 80161f0:	e7a4      	b.n	801613c <_printf_i+0x168>
 80161f2:	2301      	movs	r3, #1
 80161f4:	4632      	mov	r2, r6
 80161f6:	4649      	mov	r1, r9
 80161f8:	4640      	mov	r0, r8
 80161fa:	47d0      	blx	sl
 80161fc:	3001      	adds	r0, #1
 80161fe:	d09b      	beq.n	8016138 <_printf_i+0x164>
 8016200:	3501      	adds	r5, #1
 8016202:	68e3      	ldr	r3, [r4, #12]
 8016204:	9903      	ldr	r1, [sp, #12]
 8016206:	1a5b      	subs	r3, r3, r1
 8016208:	42ab      	cmp	r3, r5
 801620a:	dcf2      	bgt.n	80161f2 <_printf_i+0x21e>
 801620c:	e7eb      	b.n	80161e6 <_printf_i+0x212>
 801620e:	2500      	movs	r5, #0
 8016210:	f104 0619 	add.w	r6, r4, #25
 8016214:	e7f5      	b.n	8016202 <_printf_i+0x22e>
 8016216:	bf00      	nop
 8016218:	0801f275 	.word	0x0801f275
 801621c:	0801f286 	.word	0x0801f286

08016220 <_sbrk_r>:
 8016220:	b538      	push	{r3, r4, r5, lr}
 8016222:	4d06      	ldr	r5, [pc, #24]	; (801623c <_sbrk_r+0x1c>)
 8016224:	2300      	movs	r3, #0
 8016226:	4604      	mov	r4, r0
 8016228:	4608      	mov	r0, r1
 801622a:	602b      	str	r3, [r5, #0]
 801622c:	f7eb feb8 	bl	8001fa0 <_sbrk>
 8016230:	1c43      	adds	r3, r0, #1
 8016232:	d102      	bne.n	801623a <_sbrk_r+0x1a>
 8016234:	682b      	ldr	r3, [r5, #0]
 8016236:	b103      	cbz	r3, 801623a <_sbrk_r+0x1a>
 8016238:	6023      	str	r3, [r4, #0]
 801623a:	bd38      	pop	{r3, r4, r5, pc}
 801623c:	2000d7f8 	.word	0x2000d7f8

08016240 <__sread>:
 8016240:	b510      	push	{r4, lr}
 8016242:	460c      	mov	r4, r1
 8016244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016248:	f000 f8ce 	bl	80163e8 <_read_r>
 801624c:	2800      	cmp	r0, #0
 801624e:	bfab      	itete	ge
 8016250:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016252:	89a3      	ldrhlt	r3, [r4, #12]
 8016254:	181b      	addge	r3, r3, r0
 8016256:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801625a:	bfac      	ite	ge
 801625c:	6563      	strge	r3, [r4, #84]	; 0x54
 801625e:	81a3      	strhlt	r3, [r4, #12]
 8016260:	bd10      	pop	{r4, pc}

08016262 <__swrite>:
 8016262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016266:	461f      	mov	r7, r3
 8016268:	898b      	ldrh	r3, [r1, #12]
 801626a:	05db      	lsls	r3, r3, #23
 801626c:	4605      	mov	r5, r0
 801626e:	460c      	mov	r4, r1
 8016270:	4616      	mov	r6, r2
 8016272:	d505      	bpl.n	8016280 <__swrite+0x1e>
 8016274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016278:	2302      	movs	r3, #2
 801627a:	2200      	movs	r2, #0
 801627c:	f000 f870 	bl	8016360 <_lseek_r>
 8016280:	89a3      	ldrh	r3, [r4, #12]
 8016282:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016286:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801628a:	81a3      	strh	r3, [r4, #12]
 801628c:	4632      	mov	r2, r6
 801628e:	463b      	mov	r3, r7
 8016290:	4628      	mov	r0, r5
 8016292:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016296:	f000 b817 	b.w	80162c8 <_write_r>

0801629a <__sseek>:
 801629a:	b510      	push	{r4, lr}
 801629c:	460c      	mov	r4, r1
 801629e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162a2:	f000 f85d 	bl	8016360 <_lseek_r>
 80162a6:	1c43      	adds	r3, r0, #1
 80162a8:	89a3      	ldrh	r3, [r4, #12]
 80162aa:	bf15      	itete	ne
 80162ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80162ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80162b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80162b6:	81a3      	strheq	r3, [r4, #12]
 80162b8:	bf18      	it	ne
 80162ba:	81a3      	strhne	r3, [r4, #12]
 80162bc:	bd10      	pop	{r4, pc}

080162be <__sclose>:
 80162be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162c2:	f000 b81b 	b.w	80162fc <_close_r>
	...

080162c8 <_write_r>:
 80162c8:	b538      	push	{r3, r4, r5, lr}
 80162ca:	4d07      	ldr	r5, [pc, #28]	; (80162e8 <_write_r+0x20>)
 80162cc:	4604      	mov	r4, r0
 80162ce:	4608      	mov	r0, r1
 80162d0:	4611      	mov	r1, r2
 80162d2:	2200      	movs	r2, #0
 80162d4:	602a      	str	r2, [r5, #0]
 80162d6:	461a      	mov	r2, r3
 80162d8:	f7eb fa2c 	bl	8001734 <_write>
 80162dc:	1c43      	adds	r3, r0, #1
 80162de:	d102      	bne.n	80162e6 <_write_r+0x1e>
 80162e0:	682b      	ldr	r3, [r5, #0]
 80162e2:	b103      	cbz	r3, 80162e6 <_write_r+0x1e>
 80162e4:	6023      	str	r3, [r4, #0]
 80162e6:	bd38      	pop	{r3, r4, r5, pc}
 80162e8:	2000d7f8 	.word	0x2000d7f8

080162ec <abort>:
 80162ec:	b508      	push	{r3, lr}
 80162ee:	2006      	movs	r0, #6
 80162f0:	f000 f8b4 	bl	801645c <raise>
 80162f4:	2001      	movs	r0, #1
 80162f6:	f7eb fdf7 	bl	8001ee8 <_exit>
	...

080162fc <_close_r>:
 80162fc:	b538      	push	{r3, r4, r5, lr}
 80162fe:	4d06      	ldr	r5, [pc, #24]	; (8016318 <_close_r+0x1c>)
 8016300:	2300      	movs	r3, #0
 8016302:	4604      	mov	r4, r0
 8016304:	4608      	mov	r0, r1
 8016306:	602b      	str	r3, [r5, #0]
 8016308:	f7eb fe15 	bl	8001f36 <_close>
 801630c:	1c43      	adds	r3, r0, #1
 801630e:	d102      	bne.n	8016316 <_close_r+0x1a>
 8016310:	682b      	ldr	r3, [r5, #0]
 8016312:	b103      	cbz	r3, 8016316 <_close_r+0x1a>
 8016314:	6023      	str	r3, [r4, #0]
 8016316:	bd38      	pop	{r3, r4, r5, pc}
 8016318:	2000d7f8 	.word	0x2000d7f8

0801631c <_fstat_r>:
 801631c:	b538      	push	{r3, r4, r5, lr}
 801631e:	4d07      	ldr	r5, [pc, #28]	; (801633c <_fstat_r+0x20>)
 8016320:	2300      	movs	r3, #0
 8016322:	4604      	mov	r4, r0
 8016324:	4608      	mov	r0, r1
 8016326:	4611      	mov	r1, r2
 8016328:	602b      	str	r3, [r5, #0]
 801632a:	f7eb fe10 	bl	8001f4e <_fstat>
 801632e:	1c43      	adds	r3, r0, #1
 8016330:	d102      	bne.n	8016338 <_fstat_r+0x1c>
 8016332:	682b      	ldr	r3, [r5, #0]
 8016334:	b103      	cbz	r3, 8016338 <_fstat_r+0x1c>
 8016336:	6023      	str	r3, [r4, #0]
 8016338:	bd38      	pop	{r3, r4, r5, pc}
 801633a:	bf00      	nop
 801633c:	2000d7f8 	.word	0x2000d7f8

08016340 <_isatty_r>:
 8016340:	b538      	push	{r3, r4, r5, lr}
 8016342:	4d06      	ldr	r5, [pc, #24]	; (801635c <_isatty_r+0x1c>)
 8016344:	2300      	movs	r3, #0
 8016346:	4604      	mov	r4, r0
 8016348:	4608      	mov	r0, r1
 801634a:	602b      	str	r3, [r5, #0]
 801634c:	f7eb fe0f 	bl	8001f6e <_isatty>
 8016350:	1c43      	adds	r3, r0, #1
 8016352:	d102      	bne.n	801635a <_isatty_r+0x1a>
 8016354:	682b      	ldr	r3, [r5, #0]
 8016356:	b103      	cbz	r3, 801635a <_isatty_r+0x1a>
 8016358:	6023      	str	r3, [r4, #0]
 801635a:	bd38      	pop	{r3, r4, r5, pc}
 801635c:	2000d7f8 	.word	0x2000d7f8

08016360 <_lseek_r>:
 8016360:	b538      	push	{r3, r4, r5, lr}
 8016362:	4d07      	ldr	r5, [pc, #28]	; (8016380 <_lseek_r+0x20>)
 8016364:	4604      	mov	r4, r0
 8016366:	4608      	mov	r0, r1
 8016368:	4611      	mov	r1, r2
 801636a:	2200      	movs	r2, #0
 801636c:	602a      	str	r2, [r5, #0]
 801636e:	461a      	mov	r2, r3
 8016370:	f7eb fe08 	bl	8001f84 <_lseek>
 8016374:	1c43      	adds	r3, r0, #1
 8016376:	d102      	bne.n	801637e <_lseek_r+0x1e>
 8016378:	682b      	ldr	r3, [r5, #0]
 801637a:	b103      	cbz	r3, 801637e <_lseek_r+0x1e>
 801637c:	6023      	str	r3, [r4, #0]
 801637e:	bd38      	pop	{r3, r4, r5, pc}
 8016380:	2000d7f8 	.word	0x2000d7f8

08016384 <__malloc_lock>:
 8016384:	4801      	ldr	r0, [pc, #4]	; (801638c <__malloc_lock+0x8>)
 8016386:	f7ff b9e9 	b.w	801575c <__retarget_lock_acquire_recursive>
 801638a:	bf00      	nop
 801638c:	2000d800 	.word	0x2000d800

08016390 <__malloc_unlock>:
 8016390:	4801      	ldr	r0, [pc, #4]	; (8016398 <__malloc_unlock+0x8>)
 8016392:	f7ff b9e4 	b.w	801575e <__retarget_lock_release_recursive>
 8016396:	bf00      	nop
 8016398:	2000d800 	.word	0x2000d800

0801639c <_realloc_r>:
 801639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801639e:	4607      	mov	r7, r0
 80163a0:	4614      	mov	r4, r2
 80163a2:	460e      	mov	r6, r1
 80163a4:	b921      	cbnz	r1, 80163b0 <_realloc_r+0x14>
 80163a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80163aa:	4611      	mov	r1, r2
 80163ac:	f7ff ba94 	b.w	80158d8 <_malloc_r>
 80163b0:	b922      	cbnz	r2, 80163bc <_realloc_r+0x20>
 80163b2:	f7ff fa41 	bl	8015838 <_free_r>
 80163b6:	4625      	mov	r5, r4
 80163b8:	4628      	mov	r0, r5
 80163ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163bc:	f000 f86a 	bl	8016494 <_malloc_usable_size_r>
 80163c0:	42a0      	cmp	r0, r4
 80163c2:	d20f      	bcs.n	80163e4 <_realloc_r+0x48>
 80163c4:	4621      	mov	r1, r4
 80163c6:	4638      	mov	r0, r7
 80163c8:	f7ff fa86 	bl	80158d8 <_malloc_r>
 80163cc:	4605      	mov	r5, r0
 80163ce:	2800      	cmp	r0, #0
 80163d0:	d0f2      	beq.n	80163b8 <_realloc_r+0x1c>
 80163d2:	4631      	mov	r1, r6
 80163d4:	4622      	mov	r2, r4
 80163d6:	f7fe fca7 	bl	8014d28 <memcpy>
 80163da:	4631      	mov	r1, r6
 80163dc:	4638      	mov	r0, r7
 80163de:	f7ff fa2b 	bl	8015838 <_free_r>
 80163e2:	e7e9      	b.n	80163b8 <_realloc_r+0x1c>
 80163e4:	4635      	mov	r5, r6
 80163e6:	e7e7      	b.n	80163b8 <_realloc_r+0x1c>

080163e8 <_read_r>:
 80163e8:	b538      	push	{r3, r4, r5, lr}
 80163ea:	4d07      	ldr	r5, [pc, #28]	; (8016408 <_read_r+0x20>)
 80163ec:	4604      	mov	r4, r0
 80163ee:	4608      	mov	r0, r1
 80163f0:	4611      	mov	r1, r2
 80163f2:	2200      	movs	r2, #0
 80163f4:	602a      	str	r2, [r5, #0]
 80163f6:	461a      	mov	r2, r3
 80163f8:	f7eb fd80 	bl	8001efc <_read>
 80163fc:	1c43      	adds	r3, r0, #1
 80163fe:	d102      	bne.n	8016406 <_read_r+0x1e>
 8016400:	682b      	ldr	r3, [r5, #0]
 8016402:	b103      	cbz	r3, 8016406 <_read_r+0x1e>
 8016404:	6023      	str	r3, [r4, #0]
 8016406:	bd38      	pop	{r3, r4, r5, pc}
 8016408:	2000d7f8 	.word	0x2000d7f8

0801640c <_raise_r>:
 801640c:	291f      	cmp	r1, #31
 801640e:	b538      	push	{r3, r4, r5, lr}
 8016410:	4604      	mov	r4, r0
 8016412:	460d      	mov	r5, r1
 8016414:	d904      	bls.n	8016420 <_raise_r+0x14>
 8016416:	2316      	movs	r3, #22
 8016418:	6003      	str	r3, [r0, #0]
 801641a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801641e:	bd38      	pop	{r3, r4, r5, pc}
 8016420:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016422:	b112      	cbz	r2, 801642a <_raise_r+0x1e>
 8016424:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016428:	b94b      	cbnz	r3, 801643e <_raise_r+0x32>
 801642a:	4620      	mov	r0, r4
 801642c:	f000 f830 	bl	8016490 <_getpid_r>
 8016430:	462a      	mov	r2, r5
 8016432:	4601      	mov	r1, r0
 8016434:	4620      	mov	r0, r4
 8016436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801643a:	f000 b817 	b.w	801646c <_kill_r>
 801643e:	2b01      	cmp	r3, #1
 8016440:	d00a      	beq.n	8016458 <_raise_r+0x4c>
 8016442:	1c59      	adds	r1, r3, #1
 8016444:	d103      	bne.n	801644e <_raise_r+0x42>
 8016446:	2316      	movs	r3, #22
 8016448:	6003      	str	r3, [r0, #0]
 801644a:	2001      	movs	r0, #1
 801644c:	e7e7      	b.n	801641e <_raise_r+0x12>
 801644e:	2400      	movs	r4, #0
 8016450:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016454:	4628      	mov	r0, r5
 8016456:	4798      	blx	r3
 8016458:	2000      	movs	r0, #0
 801645a:	e7e0      	b.n	801641e <_raise_r+0x12>

0801645c <raise>:
 801645c:	4b02      	ldr	r3, [pc, #8]	; (8016468 <raise+0xc>)
 801645e:	4601      	mov	r1, r0
 8016460:	6818      	ldr	r0, [r3, #0]
 8016462:	f7ff bfd3 	b.w	801640c <_raise_r>
 8016466:	bf00      	nop
 8016468:	200004bc 	.word	0x200004bc

0801646c <_kill_r>:
 801646c:	b538      	push	{r3, r4, r5, lr}
 801646e:	4d07      	ldr	r5, [pc, #28]	; (801648c <_kill_r+0x20>)
 8016470:	2300      	movs	r3, #0
 8016472:	4604      	mov	r4, r0
 8016474:	4608      	mov	r0, r1
 8016476:	4611      	mov	r1, r2
 8016478:	602b      	str	r3, [r5, #0]
 801647a:	f7eb fd23 	bl	8001ec4 <_kill>
 801647e:	1c43      	adds	r3, r0, #1
 8016480:	d102      	bne.n	8016488 <_kill_r+0x1c>
 8016482:	682b      	ldr	r3, [r5, #0]
 8016484:	b103      	cbz	r3, 8016488 <_kill_r+0x1c>
 8016486:	6023      	str	r3, [r4, #0]
 8016488:	bd38      	pop	{r3, r4, r5, pc}
 801648a:	bf00      	nop
 801648c:	2000d7f8 	.word	0x2000d7f8

08016490 <_getpid_r>:
 8016490:	f7eb bd10 	b.w	8001eb4 <_getpid>

08016494 <_malloc_usable_size_r>:
 8016494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016498:	1f18      	subs	r0, r3, #4
 801649a:	2b00      	cmp	r3, #0
 801649c:	bfbc      	itt	lt
 801649e:	580b      	ldrlt	r3, [r1, r0]
 80164a0:	18c0      	addlt	r0, r0, r3
 80164a2:	4770      	bx	lr

080164a4 <_init>:
 80164a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164a6:	bf00      	nop
 80164a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80164aa:	bc08      	pop	{r3}
 80164ac:	469e      	mov	lr, r3
 80164ae:	4770      	bx	lr

080164b0 <_fini>:
 80164b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164b2:	bf00      	nop
 80164b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80164b6:	bc08      	pop	{r3}
 80164b8:	469e      	mov	lr, r3
 80164ba:	4770      	bx	lr
