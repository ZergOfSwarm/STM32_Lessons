
LAN_zagotovka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b2ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017c28  0801b440  0801b440  0002b440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08033068  08033068  0005079c  2**0
                  CONTENTS
  4 .ARM          00000008  08033068  08033068  00043068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08033070  08033070  0005079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08033070  08033070  00043070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08033074  08033074  00043074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000079c  20000000  08033078  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0005079c  2**0
                  CONTENTS
 10 .bss          0000d110  2000079c  2000079c  0005079c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d8ac  2000d8ac  0005079c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0005079c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a0da  00000000  00000000  000507cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067f4  00000000  00000000  0008a8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa0  00000000  00000000  000910a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a18  00000000  00000000  00092b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f38e  00000000  00000000  00094558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cee6  00000000  00000000  000c38e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6fc9  00000000  00000000  000f07cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d7795  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084d4  00000000  00000000  001d77e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000079c 	.word	0x2000079c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b424 	.word	0x0801b424

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200007a0 	.word	0x200007a0
 80001cc:	0801b424 	.word	0x0801b424

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 b9a4 	b.w	8000f68 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	4604      	mov	r4, r0
 8000cac:	468c      	mov	ip, r1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 8083 	bne.w	8000dba <__udivmoddi4+0x116>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	d947      	bls.n	8000d4a <__udivmoddi4+0xa6>
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	b142      	cbz	r2, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	f1c2 0020 	rsb	r0, r2, #32
 8000cc4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	4097      	lsls	r7, r2
 8000ccc:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd6:	0c23      	lsrs	r3, r4, #16
 8000cd8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cdc:	fa1f fe87 	uxth.w	lr, r7
 8000ce0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f10e 	mul.w	r1, r6, lr
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x60>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cf6:	f080 8119 	bcs.w	8000f2c <__udivmoddi4+0x288>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 8116 	bls.w	8000f2c <__udivmoddi4+0x288>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	443b      	add	r3, r7
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x8c>
 8000d1c:	193c      	adds	r4, r7, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	f080 8105 	bcs.w	8000f30 <__udivmoddi4+0x28c>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f240 8102 	bls.w	8000f30 <__udivmoddi4+0x28c>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	443c      	add	r4, r7
 8000d30:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa0>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xaa>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d150      	bne.n	8000df8 <__udivmoddi4+0x154>
 8000d56:	1bcb      	subs	r3, r1, r7
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	2601      	movs	r6, #1
 8000d62:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d66:	0c21      	lsrs	r1, r4, #16
 8000d68:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb08 f30c 	mul.w	r3, r8, ip
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xe4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0xe2>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	f200 80e9 	bhi.w	8000f58 <__udivmoddi4+0x2b4>
 8000d86:	4684      	mov	ip, r0
 8000d88:	1ac9      	subs	r1, r1, r3
 8000d8a:	b2a3      	uxth	r3, r4
 8000d8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d90:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d94:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d98:	fb08 f800 	mul.w	r8, r8, r0
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x10c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x10a>
 8000da8:	45a0      	cmp	r8, r4
 8000daa:	f200 80d9 	bhi.w	8000f60 <__udivmoddi4+0x2bc>
 8000dae:	4618      	mov	r0, r3
 8000db0:	eba4 0408 	sub.w	r4, r4, r8
 8000db4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db8:	e7bf      	b.n	8000d3a <__udivmoddi4+0x96>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x12e>
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	f000 80b1 	beq.w	8000f26 <__udivmoddi4+0x282>
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dca:	4630      	mov	r0, r6
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	fab3 f683 	clz	r6, r3
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d14a      	bne.n	8000e70 <__udivmoddi4+0x1cc>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0x140>
 8000dde:	4282      	cmp	r2, r0
 8000de0:	f200 80b8 	bhi.w	8000f54 <__udivmoddi4+0x2b0>
 8000de4:	1a84      	subs	r4, r0, r2
 8000de6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	468c      	mov	ip, r1
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d0a8      	beq.n	8000d44 <__udivmoddi4+0xa0>
 8000df2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f603 	lsr.w	r6, r0, r3
 8000e00:	4097      	lsls	r7, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	4330      	orrs	r0, r6
 8000e0e:	0c03      	lsrs	r3, r0, #16
 8000e10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e14:	fa1f f887 	uxth.w	r8, r7
 8000e18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f108 	mul.w	r1, r6, r8
 8000e24:	4299      	cmp	r1, r3
 8000e26:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2a:	d909      	bls.n	8000e40 <__udivmoddi4+0x19c>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e32:	f080 808d 	bcs.w	8000f50 <__udivmoddi4+0x2ac>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 808a 	bls.w	8000f50 <__udivmoddi4+0x2ac>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	443b      	add	r3, r7
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b281      	uxth	r1, r0
 8000e44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb00 f308 	mul.w	r3, r0, r8
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x1c4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5e:	d273      	bcs.n	8000f48 <__udivmoddi4+0x2a4>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d971      	bls.n	8000f48 <__udivmoddi4+0x2a4>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4439      	add	r1, r7
 8000e68:	1acb      	subs	r3, r1, r3
 8000e6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e6e:	e778      	b.n	8000d62 <__udivmoddi4+0xbe>
 8000e70:	f1c6 0c20 	rsb	ip, r6, #32
 8000e74:	fa03 f406 	lsl.w	r4, r3, r6
 8000e78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e7c:	431c      	orrs	r4, r3
 8000e7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e82:	fa01 f306 	lsl.w	r3, r1, r6
 8000e86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	0c3b      	lsrs	r3, r7, #16
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fa1f f884 	uxth.w	r8, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ea6:	458a      	cmp	sl, r1
 8000ea8:	fa02 f206 	lsl.w	r2, r2, r6
 8000eac:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x220>
 8000eb2:	1861      	adds	r1, r4, r1
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000eb8:	d248      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	d946      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	4421      	add	r1, r4
 8000ec4:	eba1 010a 	sub.w	r1, r1, sl
 8000ec8:	b2bf      	uxth	r7, r7
 8000eca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ece:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ed6:	fb00 f808 	mul.w	r8, r0, r8
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x24a>
 8000ede:	19e7      	adds	r7, r4, r7
 8000ee0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ee4:	d22e      	bcs.n	8000f44 <__udivmoddi4+0x2a0>
 8000ee6:	45b8      	cmp	r8, r7
 8000ee8:	d92c      	bls.n	8000f44 <__udivmoddi4+0x2a0>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4427      	add	r7, r4
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	eba7 0708 	sub.w	r7, r7, r8
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	454f      	cmp	r7, r9
 8000efc:	46c6      	mov	lr, r8
 8000efe:	4649      	mov	r1, r9
 8000f00:	d31a      	bcc.n	8000f38 <__udivmoddi4+0x294>
 8000f02:	d017      	beq.n	8000f34 <__udivmoddi4+0x290>
 8000f04:	b15d      	cbz	r5, 8000f1e <__udivmoddi4+0x27a>
 8000f06:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f12:	40f2      	lsrs	r2, r6
 8000f14:	ea4c 0202 	orr.w	r2, ip, r2
 8000f18:	40f7      	lsrs	r7, r6
 8000f1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f1e:	2600      	movs	r6, #0
 8000f20:	4631      	mov	r1, r6
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	462e      	mov	r6, r5
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e70b      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	e6e9      	b.n	8000d04 <__udivmoddi4+0x60>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e6fd      	b.n	8000d30 <__udivmoddi4+0x8c>
 8000f34:	4543      	cmp	r3, r8
 8000f36:	d2e5      	bcs.n	8000f04 <__udivmoddi4+0x260>
 8000f38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7df      	b.n	8000f04 <__udivmoddi4+0x260>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e7d2      	b.n	8000eee <__udivmoddi4+0x24a>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	e78d      	b.n	8000e68 <__udivmoddi4+0x1c4>
 8000f4c:	4681      	mov	r9, r0
 8000f4e:	e7b9      	b.n	8000ec4 <__udivmoddi4+0x220>
 8000f50:	4666      	mov	r6, ip
 8000f52:	e775      	b.n	8000e40 <__udivmoddi4+0x19c>
 8000f54:	4630      	mov	r0, r6
 8000f56:	e74a      	b.n	8000dee <__udivmoddi4+0x14a>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	4439      	add	r1, r7
 8000f5e:	e713      	b.n	8000d88 <__udivmoddi4+0xe4>
 8000f60:	3802      	subs	r0, #2
 8000f62:	443c      	add	r4, r7
 8000f64:	e724      	b.n	8000db0 <__udivmoddi4+0x10c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <ssi_handler>:

//printf("Longitude: %.20f\n\r", Settings.lon_de);
//printf("Latitude: %.20f\n\r",Settings.lat_de);

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	b099      	sub	sp, #100	; 0x64
 8000f70:	af0c      	add	r7, sp, #48	; 0x30
 8000f72:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000f74:	62b9      	str	r1, [r7, #40]	; 0x28
 8000f76:	627a      	str	r2, [r7, #36]	; 0x24
 8000f78:	847b      	strh	r3, [r7, #34]	; 0x22
 8000f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7c:	2b28      	cmp	r3, #40	; 0x28
 8000f7e:	f201 8633 	bhi.w	8002be8 <ssi_handler+0x1c7c>
 8000f82:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <ssi_handler+0x1c>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	0800102d 	.word	0x0800102d
 8000f8c:	08001cb1 	.word	0x08001cb1
 8000f90:	08001fa1 	.word	0x08001fa1
 8000f94:	08002be9 	.word	0x08002be9
 8000f98:	08001fb7 	.word	0x08001fb7
 8000f9c:	08001fd3 	.word	0x08001fd3
 8000fa0:	08001fef 	.word	0x08001fef
 8000fa4:	0800200b 	.word	0x0800200b
 8000fa8:	08002023 	.word	0x08002023
 8000fac:	0800203b 	.word	0x0800203b
 8000fb0:	08002053 	.word	0x08002053
 8000fb4:	0800206b 	.word	0x0800206b
 8000fb8:	08002083 	.word	0x08002083
 8000fbc:	080020a1 	.word	0x080020a1
 8000fc0:	080020bf 	.word	0x080020bf
 8000fc4:	080020dd 	.word	0x080020dd
 8000fc8:	080020fb 	.word	0x080020fb
 8000fcc:	08002119 	.word	0x08002119
 8000fd0:	08002137 	.word	0x08002137
 8000fd4:	08002155 	.word	0x08002155
 8000fd8:	08002173 	.word	0x08002173
 8000fdc:	08002191 	.word	0x08002191
 8000fe0:	080021fd 	.word	0x080021fd
 8000fe4:	0800221b 	.word	0x0800221b
 8000fe8:	08002239 	.word	0x08002239
 8000fec:	08002257 	.word	0x08002257
 8000ff0:	08002275 	.word	0x08002275
 8000ff4:	08002293 	.word	0x08002293
 8000ff8:	080022b1 	.word	0x080022b1
 8000ffc:	080022e1 	.word	0x080022e1
 8001000:	08002311 	.word	0x08002311
 8001004:	0800232f 	.word	0x0800232f
 8001008:	08002347 	.word	0x08002347
 800100c:	08002377 	.word	0x08002377
 8001010:	080023a9 	.word	0x080023a9
 8001014:	080028c5 	.word	0x080028c5
 8001018:	08002a95 	.word	0x08002a95
 800101c:	08002ad5 	.word	0x08002ad5
 8001020:	08002b4f 	.word	0x08002b4f
 8001024:	08002b8d 	.word	0x08002b8d
 8001028:	08002bbb 	.word	0x08002bbb
	//printf("%d \n", jsongo);
	switch (iIndex) {
	case 0:
#if LWIP_HTTPD_SSI_MULTIPART

		if (variable == numpin) {
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <ssi_handler+0xe0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b3a      	cmp	r3, #58	; 0x3a
 8001032:	d104      	bne.n	800103e <ssi_handler+0xd2>
			//default:
			variable = 0;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <ssi_handler+0xe0>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
			//return strlen(pcInsert);
			break;
 800103a:	f001 bdd6 	b.w	8002bea <ssi_handler+0x1c7e>
		} else {
			// json pin to pin (to buttoms json)
			if (jsongo == 1) {
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <ssi_handler+0xe4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	f040 8084 	bne.w	8001150 <ssi_handler+0x1e4>
				while (variable3 <= numpintopin - 1) {
 8001048:	e076      	b.n	8001138 <ssi_handler+0x1cc>
 800104a:	bf00      	nop
 800104c:	200007c0 	.word	0x200007c0
 8001050:	200007c4 	.word	0x200007c4
					if (variable3 == 0) {
 8001054:	4bab      	ldr	r3, [pc, #684]	; (8001304 <ssi_handler+0x398>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10b      	bne.n	8001074 <ssi_handler+0x108>
						strcat(listaction, "{");
 800105c:	48aa      	ldr	r0, [pc, #680]	; (8001308 <ssi_handler+0x39c>)
 800105e:	f7ff f8c1 	bl	80001e4 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4ba8      	ldr	r3, [pc, #672]	; (8001308 <ssi_handler+0x39c>)
 8001068:	4413      	add	r3, r2
 800106a:	49a8      	ldr	r1, [pc, #672]	; (800130c <ssi_handler+0x3a0>)
 800106c:	461a      	mov	r2, r3
 800106e:	460b      	mov	r3, r1
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	8013      	strh	r3, [r2, #0]
					}
					if (variable == TO[variable3].idin
 8001074:	4ba3      	ldr	r3, [pc, #652]	; (8001304 <ssi_handler+0x398>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	49a5      	ldr	r1, [pc, #660]	; (8001310 <ssi_handler+0x3a4>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4ba3      	ldr	r3, [pc, #652]	; (8001314 <ssi_handler+0x3a8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d125      	bne.n	80010da <ssi_handler+0x16e>
							&& TO[variable3].flag == 1) {
 800108e:	4b9d      	ldr	r3, [pc, #628]	; (8001304 <ssi_handler+0x398>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	499f      	ldr	r1, [pc, #636]	; (8001310 <ssi_handler+0x3a4>)
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	3308      	adds	r3, #8
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d119      	bne.n	80010da <ssi_handler+0x16e>
						//sprintf(name3, "\"%s\":[%d,%d],",tp[TO[variable3].idout].pins, TO[variable3].idout, variable3);
						sprintf(name3, "\"%s\":%d,",
								tp[TO[variable3].idout].pins, variable3);
 80010a6:	4b97      	ldr	r3, [pc, #604]	; (8001304 <ssi_handler+0x398>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4999      	ldr	r1, [pc, #612]	; (8001310 <ssi_handler+0x3a4>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	3304      	adds	r3, #4
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4a95      	ldr	r2, [pc, #596]	; (8001318 <ssi_handler+0x3ac>)
 80010c4:	441a      	add	r2, r3
						sprintf(name3, "\"%s\":%d,",
 80010c6:	4b8f      	ldr	r3, [pc, #572]	; (8001304 <ssi_handler+0x398>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4994      	ldr	r1, [pc, #592]	; (800131c <ssi_handler+0x3b0>)
 80010cc:	4894      	ldr	r0, [pc, #592]	; (8001320 <ssi_handler+0x3b4>)
 80010ce:	f016 fb69 	bl	80177a4 <siprintf>
						strcat(listaction, name3);// {"PA5":0,"PA6":1, в поле "Relay connection"
 80010d2:	4993      	ldr	r1, [pc, #588]	; (8001320 <ssi_handler+0x3b4>)
 80010d4:	488c      	ldr	r0, [pc, #560]	; (8001308 <ssi_handler+0x39c>)
 80010d6:	f016 fb85 	bl	80177e4 <strcat>
//					int code = (listaction[strlen(listaction) - 1]);
//					//printf("tmp_x %d\r\n",tmp_x ); // 123 -	{ левая фигурная скобка
//					if (variable3 == numpintopin - 1 && strcmp((char*)code, "123") > 0) {
//						listaction[strlen(listaction) - 1] = '\0';
//					}
					if (variable3 == numpintopin - 1 && strcmp(listaction[strlen(listaction) - 1], (char*)'{') > 0) {
 80010da:	4b8a      	ldr	r3, [pc, #552]	; (8001304 <ssi_handler+0x398>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b45      	cmp	r3, #69	; 0x45
 80010e0:	d115      	bne.n	800110e <ssi_handler+0x1a2>
 80010e2:	4889      	ldr	r0, [pc, #548]	; (8001308 <ssi_handler+0x39c>)
 80010e4:	f7ff f87e 	bl	80001e4 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	3b01      	subs	r3, #1
 80010ec:	4a86      	ldr	r2, [pc, #536]	; (8001308 <ssi_handler+0x39c>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	217b      	movs	r1, #123	; 0x7b
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f86c 	bl	80001d0 <strcmp>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dd07      	ble.n	800110e <ssi_handler+0x1a2>
						listaction[strlen(listaction) - 1] = '\0';
 80010fe:	4882      	ldr	r0, [pc, #520]	; (8001308 <ssi_handler+0x39c>)
 8001100:	f7ff f870 	bl	80001e4 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	3b01      	subs	r3, #1
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <ssi_handler+0x39c>)
 800110a:	2100      	movs	r1, #0
 800110c:	54d1      	strb	r1, [r2, r3]
					}
					if (variable3 == numpintopin - 1) {
 800110e:	4b7d      	ldr	r3, [pc, #500]	; (8001304 <ssi_handler+0x398>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b45      	cmp	r3, #69	; 0x45
 8001114:	d10b      	bne.n	800112e <ssi_handler+0x1c2>
						strcat(listaction, "}");
 8001116:	487c      	ldr	r0, [pc, #496]	; (8001308 <ssi_handler+0x39c>)
 8001118:	f7ff f864 	bl	80001e4 <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b79      	ldr	r3, [pc, #484]	; (8001308 <ssi_handler+0x39c>)
 8001122:	4413      	add	r3, r2
 8001124:	497f      	ldr	r1, [pc, #508]	; (8001324 <ssi_handler+0x3b8>)
 8001126:	461a      	mov	r2, r3
 8001128:	460b      	mov	r3, r1
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	8013      	strh	r3, [r2, #0]
					}
					variable3++;
 800112e:	4b75      	ldr	r3, [pc, #468]	; (8001304 <ssi_handler+0x398>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	4a73      	ldr	r2, [pc, #460]	; (8001304 <ssi_handler+0x398>)
 8001136:	6013      	str	r3, [r2, #0]
				while (variable3 <= numpintopin - 1) {
 8001138:	4b72      	ldr	r3, [pc, #456]	; (8001304 <ssi_handler+0x398>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b45      	cmp	r3, #69	; 0x45
 800113e:	dd89      	ble.n	8001054 <ssi_handler+0xe8>
				}
				memset(name3, '\0', sizeof(name3));
 8001140:	220a      	movs	r2, #10
 8001142:	2100      	movs	r1, #0
 8001144:	4876      	ldr	r0, [pc, #472]	; (8001320 <ssi_handler+0x3b4>)
 8001146:	f015 fdb9 	bl	8016cbc <memset>
				variable3 = 0;
 800114a:	4b6e      	ldr	r3, [pc, #440]	; (8001304 <ssi_handler+0x398>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
			}

			if (variable == 0) {
 8001150:	4b70      	ldr	r3, [pc, #448]	; (8001314 <ssi_handler+0x3a8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	f040 81e5 	bne.w	8001524 <ssi_handler+0x5b8>
				if (jsongo == 1) {
 800115a:	4b73      	ldr	r3, [pc, #460]	; (8001328 <ssi_handler+0x3bc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d17e      	bne.n	8001260 <ssi_handler+0x2f4>
					// buttoms json
					sprintf(pcInsert,
 8001162:	4b6c      	ldr	r3, [pc, #432]	; (8001314 <ssi_handler+0x3a8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a71      	ldr	r2, [pc, #452]	; (800132c <ssi_handler+0x3c0>)
 8001168:	2168      	movs	r1, #104	; 0x68
 800116a:	fb01 f303 	mul.w	r3, r1, r3
 800116e:	4413      	add	r3, r2
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	4b67      	ldr	r3, [pc, #412]	; (8001314 <ssi_handler+0x3a8>)
 8001176:	6819      	ldr	r1, [r3, #0]
 8001178:	61b9      	str	r1, [r7, #24]
							"[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 800117a:	4b66      	ldr	r3, [pc, #408]	; (8001314 <ssi_handler+0x3a8>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4a64      	ldr	r2, [pc, #400]	; (8001318 <ssi_handler+0x3ac>)
 8001188:	1899      	adds	r1, r3, r2
 800118a:	6179      	str	r1, [r7, #20]
							T[variable].ptype, T[variable].binter,
 800118c:	4b61      	ldr	r3, [pc, #388]	; (8001314 <ssi_handler+0x3a8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2268      	movs	r2, #104	; 0x68
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	3318      	adds	r3, #24
 8001198:	4a64      	ldr	r2, [pc, #400]	; (800132c <ssi_handler+0x3c0>)
 800119a:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 800119c:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <ssi_handler+0x3a8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a62      	ldr	r2, [pc, #392]	; (800132c <ssi_handler+0x3c0>)
 80011a2:	2168      	movs	r1, #104	; 0x68
 80011a4:	fb01 f303 	mul.w	r3, r1, r3
 80011a8:	4413      	add	r3, r2
 80011aa:	332c      	adds	r3, #44	; 0x2c
 80011ac:	681d      	ldr	r5, [r3, #0]
 80011ae:	4b59      	ldr	r3, [pc, #356]	; (8001314 <ssi_handler+0x3a8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a5e      	ldr	r2, [pc, #376]	; (800132c <ssi_handler+0x3c0>)
 80011b4:	2168      	movs	r1, #104	; 0x68
 80011b6:	fb01 f303 	mul.w	r3, r1, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	3330      	adds	r3, #48	; 0x30
 80011be:	681e      	ldr	r6, [r3, #0]
 80011c0:	4b54      	ldr	r3, [pc, #336]	; (8001314 <ssi_handler+0x3a8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a59      	ldr	r2, [pc, #356]	; (800132c <ssi_handler+0x3c0>)
 80011c6:	2168      	movs	r1, #104	; 0x68
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	3334      	adds	r3, #52	; 0x34
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	613a      	str	r2, [r7, #16]
 80011d4:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <ssi_handler+0x3a8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a54      	ldr	r2, [pc, #336]	; (800132c <ssi_handler+0x3c0>)
 80011da:	2168      	movs	r1, #104	; 0x68
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	3338      	adds	r3, #56	; 0x38
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	60f9      	str	r1, [r7, #12]
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <ssi_handler+0x3a8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <ssi_handler+0x3c0>)
 80011ee:	2168      	movs	r1, #104	; 0x68
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	333c      	adds	r3, #60	; 0x3c
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	4b45      	ldr	r3, [pc, #276]	; (8001314 <ssi_handler+0x3a8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a4a      	ldr	r2, [pc, #296]	; (800132c <ssi_handler+0x3c0>)
 8001202:	2168      	movs	r1, #104	; 0x68
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	3340      	adds	r3, #64	; 0x40
 800120c:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat,
							T[variable].rinter, T[variable].dcinter,
							T[variable].pclick, listaction, T[variable].info,
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <ssi_handler+0x3a8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2268      	movs	r2, #104	; 0x68
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	3340      	adds	r3, #64	; 0x40
 800121a:	4a44      	ldr	r2, [pc, #272]	; (800132c <ssi_handler+0x3c0>)
 800121c:	4413      	add	r3, r2
 800121e:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <ssi_handler+0x3a8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4841      	ldr	r0, [pc, #260]	; (800132c <ssi_handler+0x3c0>)
 8001226:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800122a:	fb0c f303 	mul.w	r3, ip, r3
 800122e:	4403      	add	r3, r0
 8001230:	3364      	adds	r3, #100	; 0x64
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	930a      	str	r3, [sp, #40]	; 0x28
 8001236:	9209      	str	r2, [sp, #36]	; 0x24
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <ssi_handler+0x39c>)
 800123a:	9308      	str	r3, [sp, #32]
 800123c:	9107      	str	r1, [sp, #28]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	9306      	str	r3, [sp, #24]
 8001242:	68f9      	ldr	r1, [r7, #12]
 8001244:	9105      	str	r1, [sp, #20]
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	9204      	str	r2, [sp, #16]
 800124a:	9603      	str	r6, [sp, #12]
 800124c:	9502      	str	r5, [sp, #8]
 800124e:	9401      	str	r4, [sp, #4]
 8001250:	6979      	ldr	r1, [r7, #20]
 8001252:	9100      	str	r1, [sp, #0]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	4935      	ldr	r1, [pc, #212]	; (8001330 <ssi_handler+0x3c4>)
 800125a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800125c:	f016 faa2 	bl	80177a4 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 2) {
 8001260:	4b31      	ldr	r3, [pc, #196]	; (8001328 <ssi_handler+0x3bc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b02      	cmp	r3, #2
 8001266:	f040 8091 	bne.w	800138c <ssi_handler+0x420>
					// relay json
					sprintf(pcInsert,
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <ssi_handler+0x3a8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2f      	ldr	r2, [pc, #188]	; (800132c <ssi_handler+0x3c0>)
 8001270:	2168      	movs	r1, #104	; 0x68
 8001272:	fb01 f303 	mul.w	r3, r1, r3
 8001276:	4413      	add	r3, r2
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <ssi_handler+0x3a8>)
 800127e:	6819      	ldr	r1, [r3, #0]
 8001280:	61b9      	str	r1, [r7, #24]
							"[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <ssi_handler+0x3a8>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4a22      	ldr	r2, [pc, #136]	; (8001318 <ssi_handler+0x3ac>)
 8001290:	4413      	add	r3, r2
							T[variable].ptype, T[variable].pwm, T[variable].on,
 8001292:	4a20      	ldr	r2, [pc, #128]	; (8001314 <ssi_handler+0x3a8>)
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	2168      	movs	r1, #104	; 0x68
 8001298:	fb01 f202 	mul.w	r2, r1, r2
 800129c:	3218      	adds	r2, #24
 800129e:	4923      	ldr	r1, [pc, #140]	; (800132c <ssi_handler+0x3c0>)
 80012a0:	440a      	add	r2, r1
					sprintf(pcInsert,
 80012a2:	491c      	ldr	r1, [pc, #112]	; (8001314 <ssi_handler+0x3a8>)
 80012a4:	6809      	ldr	r1, [r1, #0]
 80012a6:	4821      	ldr	r0, [pc, #132]	; (800132c <ssi_handler+0x3c0>)
 80012a8:	2468      	movs	r4, #104	; 0x68
 80012aa:	fb04 f101 	mul.w	r1, r4, r1
 80012ae:	4401      	add	r1, r0
 80012b0:	3104      	adds	r1, #4
 80012b2:	6809      	ldr	r1, [r1, #0]
 80012b4:	4817      	ldr	r0, [pc, #92]	; (8001314 <ssi_handler+0x3a8>)
 80012b6:	6800      	ldr	r0, [r0, #0]
 80012b8:	4c1c      	ldr	r4, [pc, #112]	; (800132c <ssi_handler+0x3c0>)
 80012ba:	2568      	movs	r5, #104	; 0x68
 80012bc:	fb05 f000 	mul.w	r0, r5, r0
 80012c0:	4420      	add	r0, r4
 80012c2:	3008      	adds	r0, #8
 80012c4:	6800      	ldr	r0, [r0, #0]
 80012c6:	6178      	str	r0, [r7, #20]
 80012c8:	4c12      	ldr	r4, [pc, #72]	; (8001314 <ssi_handler+0x3a8>)
 80012ca:	6824      	ldr	r4, [r4, #0]
 80012cc:	4d17      	ldr	r5, [pc, #92]	; (800132c <ssi_handler+0x3c0>)
 80012ce:	2668      	movs	r6, #104	; 0x68
 80012d0:	fb06 f404 	mul.w	r4, r6, r4
 80012d4:	442c      	add	r4, r5
 80012d6:	340c      	adds	r4, #12
 80012d8:	6820      	ldr	r0, [r4, #0]
 80012da:	6138      	str	r0, [r7, #16]
 80012dc:	4d0d      	ldr	r5, [pc, #52]	; (8001314 <ssi_handler+0x3a8>)
 80012de:	682d      	ldr	r5, [r5, #0]
 80012e0:	4e12      	ldr	r6, [pc, #72]	; (800132c <ssi_handler+0x3c0>)
 80012e2:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80012e6:	fb0c f505 	mul.w	r5, ip, r5
 80012ea:	4435      	add	r5, r6
 80012ec:	3510      	adds	r5, #16
 80012ee:	682d      	ldr	r5, [r5, #0]
 80012f0:	4e08      	ldr	r6, [pc, #32]	; (8001314 <ssi_handler+0x3a8>)
 80012f2:	6836      	ldr	r6, [r6, #0]
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <ssi_handler+0x3c0>)
 80012f6:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80012fa:	fb0c f606 	mul.w	r6, ip, r6
 80012fe:	4406      	add	r6, r0
 8001300:	3614      	adds	r6, #20
 8001302:	e017      	b.n	8001334 <ssi_handler+0x3c8>
 8001304:	200007bc 	.word	0x200007bc
 8001308:	20006aa0 	.word	0x20006aa0
 800130c:	0801b5e8 	.word	0x0801b5e8
 8001310:	200026b8 	.word	0x200026b8
 8001314:	200007c0 	.word	0x200007c0
 8001318:	20000008 	.word	0x20000008
 800131c:	0801b5ec 	.word	0x0801b5ec
 8001320:	20002a00 	.word	0x20002a00
 8001324:	0801b5f8 	.word	0x0801b5f8
 8001328:	200007c4 	.word	0x200007c4
 800132c:	20002a0c 	.word	0x20002a0c
 8001330:	0801b5fc 	.word	0x0801b5fc
 8001334:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue,
							T[variable].ponr, T[variable].info,
 8001336:	4873      	ldr	r0, [pc, #460]	; (8001504 <ssi_handler+0x598>)
 8001338:	6800      	ldr	r0, [r0, #0]
 800133a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800133e:	fb0c fc00 	mul.w	ip, ip, r0
 8001342:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001346:	4870      	ldr	r0, [pc, #448]	; (8001508 <ssi_handler+0x59c>)
 8001348:	4484      	add	ip, r0
 800134a:	f10c 0004 	add.w	r0, ip, #4
 800134e:	60f8      	str	r0, [r7, #12]
					sprintf(pcInsert,
 8001350:	486c      	ldr	r0, [pc, #432]	; (8001504 <ssi_handler+0x598>)
 8001352:	6800      	ldr	r0, [r0, #0]
 8001354:	4c6c      	ldr	r4, [pc, #432]	; (8001508 <ssi_handler+0x59c>)
 8001356:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800135a:	fb0c fc00 	mul.w	ip, ip, r0
 800135e:	44a4      	add	ip, r4
 8001360:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001364:	f8dc 0000 	ldr.w	r0, [ip]
 8001368:	9008      	str	r0, [sp, #32]
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	9007      	str	r0, [sp, #28]
 800136e:	9606      	str	r6, [sp, #24]
 8001370:	9505      	str	r5, [sp, #20]
 8001372:	6938      	ldr	r0, [r7, #16]
 8001374:	9004      	str	r0, [sp, #16]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	9003      	str	r0, [sp, #12]
 800137a:	9102      	str	r1, [sp, #8]
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	4961      	ldr	r1, [pc, #388]	; (800150c <ssi_handler+0x5a0>)
 8001386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001388:	f016 fa0c 	bl	80177a4 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 3) {
 800138c:	4b60      	ldr	r3, [pc, #384]	; (8001510 <ssi_handler+0x5a4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b03      	cmp	r3, #3
 8001392:	d118      	bne.n	80013c6 <ssi_handler+0x45a>
					// select json
					sprintf(pcInsert,
 8001394:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <ssi_handler+0x598>)
 8001396:	6819      	ldr	r1, [r3, #0]
							"[{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
							variable, tp[variable].pins, T[variable].topin);
 8001398:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <ssi_handler+0x598>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4a5b      	ldr	r2, [pc, #364]	; (8001514 <ssi_handler+0x5a8>)
 80013a6:	441a      	add	r2, r3
					sprintf(pcInsert,
 80013a8:	4b56      	ldr	r3, [pc, #344]	; (8001504 <ssi_handler+0x598>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4856      	ldr	r0, [pc, #344]	; (8001508 <ssi_handler+0x59c>)
 80013ae:	2468      	movs	r4, #104	; 0x68
 80013b0:	fb04 f303 	mul.w	r3, r4, r3
 80013b4:	4403      	add	r3, r0
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	9300      	str	r3, [sp, #0]
 80013ba:	4613      	mov	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	4956      	ldr	r1, [pc, #344]	; (8001518 <ssi_handler+0x5ac>)
 80013c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013c2:	f016 f9ef 	bl	80177a4 <siprintf>
				}

				if (jsongo == 4) {
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <ssi_handler+0x5a4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	f040 8451 	bne.w	8001c72 <ssi_handler+0xd06>
					// select json
					sprintf(pcInsert,
 80013d0:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <ssi_handler+0x598>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a4c      	ldr	r2, [pc, #304]	; (8001508 <ssi_handler+0x59c>)
 80013d6:	2168      	movs	r1, #104	; 0x68
 80013d8:	fb01 f303 	mul.w	r3, r1, r3
 80013dc:	4413      	add	r3, r2
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	4b48      	ldr	r3, [pc, #288]	; (8001504 <ssi_handler+0x598>)
 80013e4:	6819      	ldr	r1, [r3, #0]
 80013e6:	61b9      	str	r1, [r7, #24]
							"[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"imm_ly\":%d,\"s_dt\":%d,\"e_dt\":%d,\"t_repeat\":%d,\"t_action\":%d,\"t_group\":\"%s\",\"sunrise\":%d,\"sunset\":%d,\"t_info\":\"%s\",\"t_onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 80013e8:	4b46      	ldr	r3, [pc, #280]	; (8001504 <ssi_handler+0x598>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4a47      	ldr	r2, [pc, #284]	; (8001514 <ssi_handler+0x5a8>)
 80013f6:	1898      	adds	r0, r3, r2
 80013f8:	4b42      	ldr	r3, [pc, #264]	; (8001504 <ssi_handler+0x598>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4947      	ldr	r1, [pc, #284]	; (800151c <ssi_handler+0x5b0>)
 80013fe:	4613      	mov	r3, r2
 8001400:	011b      	lsls	r3, r3, #4
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	3308      	adds	r3, #8
 800140a:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <ssi_handler+0x598>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4941      	ldr	r1, [pc, #260]	; (800151c <ssi_handler+0x5b0>)
 8001416:	4613      	mov	r3, r2
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	330c      	adds	r3, #12
 8001422:	681c      	ldr	r4, [r3, #0]
 8001424:	4b37      	ldr	r3, [pc, #220]	; (8001504 <ssi_handler+0x598>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	493c      	ldr	r1, [pc, #240]	; (800151c <ssi_handler+0x5b0>)
 800142a:	4613      	mov	r3, r2
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	440b      	add	r3, r1
 8001434:	3310      	adds	r3, #16
 8001436:	681d      	ldr	r5, [r3, #0]
 8001438:	4b32      	ldr	r3, [pc, #200]	; (8001504 <ssi_handler+0x598>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4937      	ldr	r1, [pc, #220]	; (800151c <ssi_handler+0x5b0>)
 800143e:	4613      	mov	r3, r2
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	3314      	adds	r3, #20
 800144a:	681e      	ldr	r6, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <ssi_handler+0x598>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4932      	ldr	r1, [pc, #200]	; (800151c <ssi_handler+0x5b0>)
 8001452:	4613      	mov	r3, r2
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	3318      	adds	r3, #24
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 8001462:	613b      	str	r3, [r7, #16]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <ssi_handler+0x598>)
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	4613      	mov	r3, r2
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	4413      	add	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	3318      	adds	r3, #24
 8001472:	4a2a      	ldr	r2, [pc, #168]	; (800151c <ssi_handler+0x5b0>)
 8001474:	4413      	add	r3, r2
 8001476:	1c9a      	adds	r2, r3, #2
 8001478:	60fa      	str	r2, [r7, #12]
					sprintf(pcInsert,
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <ssi_handler+0x598>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4927      	ldr	r1, [pc, #156]	; (800151c <ssi_handler+0x5b0>)
 8001480:	4613      	mov	r3, r2
 8001482:	011b      	lsls	r3, r3, #4
 8001484:	4413      	add	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	3324      	adds	r3, #36	; 0x24
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <ssi_handler+0x598>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4921      	ldr	r1, [pc, #132]	; (800151c <ssi_handler+0x5b0>)
 8001496:	4613      	mov	r3, r2
 8001498:	011b      	lsls	r3, r3, #4
 800149a:	4413      	add	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	3328      	adds	r3, #40	; 0x28
 80014a2:	6819      	ldr	r1, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <ssi_handler+0x598>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4613      	mov	r3, r2
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	3328      	adds	r3, #40	; 0x28
 80014b2:	4a1a      	ldr	r2, [pc, #104]	; (800151c <ssi_handler+0x5b0>)
 80014b4:	4413      	add	r3, r2
 80014b6:	1d1a      	adds	r2, r3, #4
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <ssi_handler+0x598>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <ssi_handler+0x5b0>)
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4613      	mov	r3, r2
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	4694      	mov	ip, r2
 80014ce:	4463      	add	r3, ip
 80014d0:	333c      	adds	r3, #60	; 0x3c
 80014d2:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 80014d6:	930a      	str	r3, [sp, #40]	; 0x28
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	9209      	str	r2, [sp, #36]	; 0x24
 80014dc:	9108      	str	r1, [sp, #32]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	9107      	str	r1, [sp, #28]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	9206      	str	r2, [sp, #24]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	9205      	str	r2, [sp, #20]
 80014ea:	9604      	str	r6, [sp, #16]
 80014ec:	9503      	str	r5, [sp, #12]
 80014ee:	9402      	str	r4, [sp, #8]
 80014f0:	697c      	ldr	r4, [r7, #20]
 80014f2:	9401      	str	r4, [sp, #4]
 80014f4:	9000      	str	r0, [sp, #0]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	4909      	ldr	r1, [pc, #36]	; (8001520 <ssi_handler+0x5b4>)
 80014fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014fe:	f016 f951 	bl	80177a4 <siprintf>
 8001502:	e3b6      	b.n	8001c72 <ssi_handler+0xd06>
 8001504:	200007c0 	.word	0x200007c0
 8001508:	20002a0c 	.word	0x20002a0c
 800150c:	0801b698 	.word	0x0801b698
 8001510:	200007c4 	.word	0x200007c4
 8001514:	20000008 	.word	0x20000008
 8001518:	0801b714 	.word	0x0801b714
 800151c:	2000174c 	.word	0x2000174c
 8001520:	0801b738 	.word	0x0801b738
				}


			} else if (variable == numpin - 1) {
 8001524:	4ba8      	ldr	r3, [pc, #672]	; (80017c8 <ssi_handler+0x85c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b39      	cmp	r3, #57	; 0x39
 800152a:	f040 81d5 	bne.w	80018d8 <ssi_handler+0x96c>
				if (jsongo == 1) {
 800152e:	4ba7      	ldr	r3, [pc, #668]	; (80017cc <ssi_handler+0x860>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d17e      	bne.n	8001634 <ssi_handler+0x6c8>
					// buttoms json
					sprintf(pcInsert,
 8001536:	4ba4      	ldr	r3, [pc, #656]	; (80017c8 <ssi_handler+0x85c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4aa5      	ldr	r2, [pc, #660]	; (80017d0 <ssi_handler+0x864>)
 800153c:	2168      	movs	r1, #104	; 0x68
 800153e:	fb01 f303 	mul.w	r3, r1, r3
 8001542:	4413      	add	r3, r2
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	4b9f      	ldr	r3, [pc, #636]	; (80017c8 <ssi_handler+0x85c>)
 800154a:	6819      	ldr	r1, [r3, #0]
 800154c:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d}]",
							T[variable].topin, variable, tp[variable].pins,
 800154e:	4b9e      	ldr	r3, [pc, #632]	; (80017c8 <ssi_handler+0x85c>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4a9e      	ldr	r2, [pc, #632]	; (80017d4 <ssi_handler+0x868>)
 800155c:	1899      	adds	r1, r3, r2
 800155e:	6179      	str	r1, [r7, #20]
							T[variable].ptype, T[variable].binter,
 8001560:	4b99      	ldr	r3, [pc, #612]	; (80017c8 <ssi_handler+0x85c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2268      	movs	r2, #104	; 0x68
 8001566:	fb02 f303 	mul.w	r3, r2, r3
 800156a:	3318      	adds	r3, #24
 800156c:	4a98      	ldr	r2, [pc, #608]	; (80017d0 <ssi_handler+0x864>)
 800156e:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 8001570:	4b95      	ldr	r3, [pc, #596]	; (80017c8 <ssi_handler+0x85c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a96      	ldr	r2, [pc, #600]	; (80017d0 <ssi_handler+0x864>)
 8001576:	2168      	movs	r1, #104	; 0x68
 8001578:	fb01 f303 	mul.w	r3, r1, r3
 800157c:	4413      	add	r3, r2
 800157e:	332c      	adds	r3, #44	; 0x2c
 8001580:	681d      	ldr	r5, [r3, #0]
 8001582:	4b91      	ldr	r3, [pc, #580]	; (80017c8 <ssi_handler+0x85c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a92      	ldr	r2, [pc, #584]	; (80017d0 <ssi_handler+0x864>)
 8001588:	2168      	movs	r1, #104	; 0x68
 800158a:	fb01 f303 	mul.w	r3, r1, r3
 800158e:	4413      	add	r3, r2
 8001590:	3330      	adds	r3, #48	; 0x30
 8001592:	681e      	ldr	r6, [r3, #0]
 8001594:	4b8c      	ldr	r3, [pc, #560]	; (80017c8 <ssi_handler+0x85c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a8d      	ldr	r2, [pc, #564]	; (80017d0 <ssi_handler+0x864>)
 800159a:	2168      	movs	r1, #104	; 0x68
 800159c:	fb01 f303 	mul.w	r3, r1, r3
 80015a0:	4413      	add	r3, r2
 80015a2:	3334      	adds	r3, #52	; 0x34
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	613a      	str	r2, [r7, #16]
 80015a8:	4b87      	ldr	r3, [pc, #540]	; (80017c8 <ssi_handler+0x85c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a88      	ldr	r2, [pc, #544]	; (80017d0 <ssi_handler+0x864>)
 80015ae:	2168      	movs	r1, #104	; 0x68
 80015b0:	fb01 f303 	mul.w	r3, r1, r3
 80015b4:	4413      	add	r3, r2
 80015b6:	3338      	adds	r3, #56	; 0x38
 80015b8:	6819      	ldr	r1, [r3, #0]
 80015ba:	60f9      	str	r1, [r7, #12]
 80015bc:	4b82      	ldr	r3, [pc, #520]	; (80017c8 <ssi_handler+0x85c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a83      	ldr	r2, [pc, #524]	; (80017d0 <ssi_handler+0x864>)
 80015c2:	2168      	movs	r1, #104	; 0x68
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	333c      	adds	r3, #60	; 0x3c
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	4b7d      	ldr	r3, [pc, #500]	; (80017c8 <ssi_handler+0x85c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a7e      	ldr	r2, [pc, #504]	; (80017d0 <ssi_handler+0x864>)
 80015d6:	2168      	movs	r1, #104	; 0x68
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	3340      	adds	r3, #64	; 0x40
 80015e0:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat,
							T[variable].rinter, T[variable].dcinter,
							T[variable].pclick, listaction, T[variable].info,
 80015e2:	4b79      	ldr	r3, [pc, #484]	; (80017c8 <ssi_handler+0x85c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2268      	movs	r2, #104	; 0x68
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	3340      	adds	r3, #64	; 0x40
 80015ee:	4a78      	ldr	r2, [pc, #480]	; (80017d0 <ssi_handler+0x864>)
 80015f0:	4413      	add	r3, r2
 80015f2:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 80015f4:	4b74      	ldr	r3, [pc, #464]	; (80017c8 <ssi_handler+0x85c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4875      	ldr	r0, [pc, #468]	; (80017d0 <ssi_handler+0x864>)
 80015fa:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80015fe:	fb0c f303 	mul.w	r3, ip, r3
 8001602:	4403      	add	r3, r0
 8001604:	3364      	adds	r3, #100	; 0x64
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	930a      	str	r3, [sp, #40]	; 0x28
 800160a:	9209      	str	r2, [sp, #36]	; 0x24
 800160c:	4b72      	ldr	r3, [pc, #456]	; (80017d8 <ssi_handler+0x86c>)
 800160e:	9308      	str	r3, [sp, #32]
 8001610:	9107      	str	r1, [sp, #28]
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	9306      	str	r3, [sp, #24]
 8001616:	68f9      	ldr	r1, [r7, #12]
 8001618:	9105      	str	r1, [sp, #20]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	9204      	str	r2, [sp, #16]
 800161e:	9603      	str	r6, [sp, #12]
 8001620:	9502      	str	r5, [sp, #8]
 8001622:	9401      	str	r4, [sp, #4]
 8001624:	6979      	ldr	r1, [r7, #20]
 8001626:	9100      	str	r1, [sp, #0]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	496b      	ldr	r1, [pc, #428]	; (80017dc <ssi_handler+0x870>)
 800162e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001630:	f016 f8b8 	bl	80177a4 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 2) {
 8001634:	4b65      	ldr	r3, [pc, #404]	; (80017cc <ssi_handler+0x860>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b02      	cmp	r3, #2
 800163a:	d177      	bne.n	800172c <ssi_handler+0x7c0>
					// relay json
					sprintf(pcInsert,
 800163c:	4b62      	ldr	r3, [pc, #392]	; (80017c8 <ssi_handler+0x85c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a63      	ldr	r2, [pc, #396]	; (80017d0 <ssi_handler+0x864>)
 8001642:	2168      	movs	r1, #104	; 0x68
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	4413      	add	r3, r2
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	61fb      	str	r3, [r7, #28]
 800164e:	4b5e      	ldr	r3, [pc, #376]	; (80017c8 <ssi_handler+0x85c>)
 8001650:	6819      	ldr	r1, [r3, #0]
 8001652:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}]",
							T[variable].topin, variable, tp[variable].pins,
 8001654:	4b5c      	ldr	r3, [pc, #368]	; (80017c8 <ssi_handler+0x85c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4a5c      	ldr	r2, [pc, #368]	; (80017d4 <ssi_handler+0x868>)
 8001662:	4413      	add	r3, r2
							T[variable].ptype, T[variable].pwm, T[variable].on,
 8001664:	4a58      	ldr	r2, [pc, #352]	; (80017c8 <ssi_handler+0x85c>)
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	2168      	movs	r1, #104	; 0x68
 800166a:	fb01 f202 	mul.w	r2, r1, r2
 800166e:	3218      	adds	r2, #24
 8001670:	4957      	ldr	r1, [pc, #348]	; (80017d0 <ssi_handler+0x864>)
 8001672:	440a      	add	r2, r1
					sprintf(pcInsert,
 8001674:	4954      	ldr	r1, [pc, #336]	; (80017c8 <ssi_handler+0x85c>)
 8001676:	6809      	ldr	r1, [r1, #0]
 8001678:	4855      	ldr	r0, [pc, #340]	; (80017d0 <ssi_handler+0x864>)
 800167a:	2468      	movs	r4, #104	; 0x68
 800167c:	fb04 f101 	mul.w	r1, r4, r1
 8001680:	4401      	add	r1, r0
 8001682:	3104      	adds	r1, #4
 8001684:	6809      	ldr	r1, [r1, #0]
 8001686:	4850      	ldr	r0, [pc, #320]	; (80017c8 <ssi_handler+0x85c>)
 8001688:	6800      	ldr	r0, [r0, #0]
 800168a:	4c51      	ldr	r4, [pc, #324]	; (80017d0 <ssi_handler+0x864>)
 800168c:	2568      	movs	r5, #104	; 0x68
 800168e:	fb05 f000 	mul.w	r0, r5, r0
 8001692:	4420      	add	r0, r4
 8001694:	3008      	adds	r0, #8
 8001696:	6800      	ldr	r0, [r0, #0]
 8001698:	6178      	str	r0, [r7, #20]
 800169a:	4c4b      	ldr	r4, [pc, #300]	; (80017c8 <ssi_handler+0x85c>)
 800169c:	6824      	ldr	r4, [r4, #0]
 800169e:	4d4c      	ldr	r5, [pc, #304]	; (80017d0 <ssi_handler+0x864>)
 80016a0:	2668      	movs	r6, #104	; 0x68
 80016a2:	fb06 f404 	mul.w	r4, r6, r4
 80016a6:	442c      	add	r4, r5
 80016a8:	340c      	adds	r4, #12
 80016aa:	6820      	ldr	r0, [r4, #0]
 80016ac:	6138      	str	r0, [r7, #16]
 80016ae:	4d46      	ldr	r5, [pc, #280]	; (80017c8 <ssi_handler+0x85c>)
 80016b0:	682d      	ldr	r5, [r5, #0]
 80016b2:	4e47      	ldr	r6, [pc, #284]	; (80017d0 <ssi_handler+0x864>)
 80016b4:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80016b8:	fb0c f505 	mul.w	r5, ip, r5
 80016bc:	4435      	add	r5, r6
 80016be:	3510      	adds	r5, #16
 80016c0:	682d      	ldr	r5, [r5, #0]
 80016c2:	4e41      	ldr	r6, [pc, #260]	; (80017c8 <ssi_handler+0x85c>)
 80016c4:	6836      	ldr	r6, [r6, #0]
 80016c6:	4842      	ldr	r0, [pc, #264]	; (80017d0 <ssi_handler+0x864>)
 80016c8:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80016cc:	fb0c f606 	mul.w	r6, ip, r6
 80016d0:	4406      	add	r6, r0
 80016d2:	3614      	adds	r6, #20
 80016d4:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue,
							T[variable].ponr, T[variable].info,
 80016d6:	483c      	ldr	r0, [pc, #240]	; (80017c8 <ssi_handler+0x85c>)
 80016d8:	6800      	ldr	r0, [r0, #0]
 80016da:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80016de:	fb0c fc00 	mul.w	ip, ip, r0
 80016e2:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80016e6:	483a      	ldr	r0, [pc, #232]	; (80017d0 <ssi_handler+0x864>)
 80016e8:	4484      	add	ip, r0
 80016ea:	f10c 0004 	add.w	r0, ip, #4
 80016ee:	60f8      	str	r0, [r7, #12]
					sprintf(pcInsert,
 80016f0:	4835      	ldr	r0, [pc, #212]	; (80017c8 <ssi_handler+0x85c>)
 80016f2:	6800      	ldr	r0, [r0, #0]
 80016f4:	4c36      	ldr	r4, [pc, #216]	; (80017d0 <ssi_handler+0x864>)
 80016f6:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80016fa:	fb0c fc00 	mul.w	ip, ip, r0
 80016fe:	44a4      	add	ip, r4
 8001700:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001704:	f8dc 0000 	ldr.w	r0, [ip]
 8001708:	9008      	str	r0, [sp, #32]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	9007      	str	r0, [sp, #28]
 800170e:	9606      	str	r6, [sp, #24]
 8001710:	9505      	str	r5, [sp, #20]
 8001712:	6938      	ldr	r0, [r7, #16]
 8001714:	9004      	str	r0, [sp, #16]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	9003      	str	r0, [sp, #12]
 800171a:	9102      	str	r1, [sp, #8]
 800171c:	9201      	str	r2, [sp, #4]
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	492e      	ldr	r1, [pc, #184]	; (80017e0 <ssi_handler+0x874>)
 8001726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001728:	f016 f83c 	bl	80177a4 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 3) {
 800172c:	4b27      	ldr	r3, [pc, #156]	; (80017cc <ssi_handler+0x860>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d118      	bne.n	8001766 <ssi_handler+0x7fa>
					// select json
					sprintf(pcInsert,
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <ssi_handler+0x85c>)
 8001736:	6819      	ldr	r1, [r3, #0]
							"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d}]",
							variable, tp[variable].pins, T[variable].topin);
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <ssi_handler+0x85c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <ssi_handler+0x868>)
 8001746:	441a      	add	r2, r3
					sprintf(pcInsert,
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <ssi_handler+0x85c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4820      	ldr	r0, [pc, #128]	; (80017d0 <ssi_handler+0x864>)
 800174e:	2468      	movs	r4, #104	; 0x68
 8001750:	fb04 f303 	mul.w	r3, r4, r3
 8001754:	4403      	add	r3, r0
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4613      	mov	r3, r2
 800175c:	460a      	mov	r2, r1
 800175e:	4921      	ldr	r1, [pc, #132]	; (80017e4 <ssi_handler+0x878>)
 8001760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001762:	f016 f81f 	bl	80177a4 <siprintf>
				}

				if (jsongo == 4) {
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <ssi_handler+0x860>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b04      	cmp	r3, #4
 800176c:	f040 8281 	bne.w	8001c72 <ssi_handler+0xd06>
					// select json
					sprintf(pcInsert,
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <ssi_handler+0x85c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a16      	ldr	r2, [pc, #88]	; (80017d0 <ssi_handler+0x864>)
 8001776:	2168      	movs	r1, #104	; 0x68
 8001778:	fb01 f303 	mul.w	r3, r1, r3
 800177c:	4413      	add	r3, r2
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <ssi_handler+0x85c>)
 8001784:	6819      	ldr	r1, [r3, #0]
 8001786:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"imm_ly\":%d,\"s_dt\":%d,\"e_dt\":%d,\"t_repeat\":%d,\"t_action\":%d,\"t_group\":\"%s\",\"sunrise\":%d,\"sunset\":%d,\"t_info\":\"%s\",\"t_onoff\":%d}]",
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <ssi_handler+0x85c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <ssi_handler+0x868>)
 8001796:	1898      	adds	r0, r3, r2
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <ssi_handler+0x85c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4912      	ldr	r1, [pc, #72]	; (80017e8 <ssi_handler+0x87c>)
 800179e:	4613      	mov	r3, r2
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	3308      	adds	r3, #8
 80017aa:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <ssi_handler+0x85c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <ssi_handler+0x87c>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	330c      	adds	r3, #12
 80017c2:	681c      	ldr	r4, [r3, #0]
 80017c4:	e012      	b.n	80017ec <ssi_handler+0x880>
 80017c6:	bf00      	nop
 80017c8:	200007c0 	.word	0x200007c0
 80017cc:	200007c4 	.word	0x200007c4
 80017d0:	20002a0c 	.word	0x20002a0c
 80017d4:	20000008 	.word	0x20000008
 80017d8:	20006aa0 	.word	0x20006aa0
 80017dc:	0801b7dc 	.word	0x0801b7dc
 80017e0:	0801b878 	.word	0x0801b878
 80017e4:	0801b8f4 	.word	0x0801b8f4
 80017e8:	2000174c 	.word	0x2000174c
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <ssi_handler+0x960>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4937      	ldr	r1, [pc, #220]	; (80018d0 <ssi_handler+0x964>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	4413      	add	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	3310      	adds	r3, #16
 80017fe:	681d      	ldr	r5, [r3, #0]
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <ssi_handler+0x960>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4932      	ldr	r1, [pc, #200]	; (80018d0 <ssi_handler+0x964>)
 8001806:	4613      	mov	r3, r2
 8001808:	011b      	lsls	r3, r3, #4
 800180a:	4413      	add	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	440b      	add	r3, r1
 8001810:	3314      	adds	r3, #20
 8001812:	681e      	ldr	r6, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <ssi_handler+0x960>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	492d      	ldr	r1, [pc, #180]	; (80018d0 <ssi_handler+0x964>)
 800181a:	4613      	mov	r3, r2
 800181c:	011b      	lsls	r3, r3, #4
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	3318      	adds	r3, #24
 8001826:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 800182a:	613b      	str	r3, [r7, #16]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <ssi_handler+0x960>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	3318      	adds	r3, #24
 800183a:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <ssi_handler+0x964>)
 800183c:	4413      	add	r3, r2
 800183e:	1c9a      	adds	r2, r3, #2
 8001840:	60fa      	str	r2, [r7, #12]
					sprintf(pcInsert,
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <ssi_handler+0x960>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4922      	ldr	r1, [pc, #136]	; (80018d0 <ssi_handler+0x964>)
 8001848:	4613      	mov	r3, r2
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	3324      	adds	r3, #36	; 0x24
 8001854:	6819      	ldr	r1, [r3, #0]
 8001856:	60b9      	str	r1, [r7, #8]
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <ssi_handler+0x960>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	491c      	ldr	r1, [pc, #112]	; (80018d0 <ssi_handler+0x964>)
 800185e:	4613      	mov	r3, r2
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	4413      	add	r3, r2
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	440b      	add	r3, r1
 8001868:	3328      	adds	r3, #40	; 0x28
 800186a:	6819      	ldr	r1, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <ssi_handler+0x960>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4613      	mov	r3, r2
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4413      	add	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	3328      	adds	r3, #40	; 0x28
 800187a:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <ssi_handler+0x964>)
 800187c:	4413      	add	r3, r2
 800187e:	1d1a      	adds	r2, r3, #4
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <ssi_handler+0x960>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <ssi_handler+0x964>)
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	4694      	mov	ip, r2
 8001896:	4463      	add	r3, ip
 8001898:	333c      	adds	r3, #60	; 0x3c
 800189a:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 800189e:	930a      	str	r3, [sp, #40]	; 0x28
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	9209      	str	r2, [sp, #36]	; 0x24
 80018a4:	9108      	str	r1, [sp, #32]
 80018a6:	68b9      	ldr	r1, [r7, #8]
 80018a8:	9107      	str	r1, [sp, #28]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	9206      	str	r2, [sp, #24]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	9205      	str	r2, [sp, #20]
 80018b2:	9604      	str	r6, [sp, #16]
 80018b4:	9503      	str	r5, [sp, #12]
 80018b6:	9402      	str	r4, [sp, #8]
 80018b8:	697c      	ldr	r4, [r7, #20]
 80018ba:	9401      	str	r4, [sp, #4]
 80018bc:	9000      	str	r0, [sp, #0]
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	4904      	ldr	r1, [pc, #16]	; (80018d4 <ssi_handler+0x968>)
 80018c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018c6:	f015 ff6d 	bl	80177a4 <siprintf>
 80018ca:	e1d2      	b.n	8001c72 <ssi_handler+0xd06>
 80018cc:	200007c0 	.word	0x200007c0
 80018d0:	2000174c 	.word	0x2000174c
 80018d4:	0801b918 	.word	0x0801b918
				}

			} else {
				if (jsongo == 1) {
 80018d8:	4ba6      	ldr	r3, [pc, #664]	; (8001b74 <ssi_handler+0xc08>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d17e      	bne.n	80019de <ssi_handler+0xa72>
					// buttoms json
					sprintf(pcInsert,
 80018e0:	4ba5      	ldr	r3, [pc, #660]	; (8001b78 <ssi_handler+0xc0c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4aa5      	ldr	r2, [pc, #660]	; (8001b7c <ssi_handler+0xc10>)
 80018e6:	2168      	movs	r1, #104	; 0x68
 80018e8:	fb01 f303 	mul.w	r3, r1, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	4ba1      	ldr	r3, [pc, #644]	; (8001b78 <ssi_handler+0xc0c>)
 80018f4:	6819      	ldr	r1, [r3, #0]
 80018f6:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 80018f8:	4b9f      	ldr	r3, [pc, #636]	; (8001b78 <ssi_handler+0xc0c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4a9e      	ldr	r2, [pc, #632]	; (8001b80 <ssi_handler+0xc14>)
 8001906:	1899      	adds	r1, r3, r2
 8001908:	6179      	str	r1, [r7, #20]
							T[variable].ptype, T[variable].binter,
 800190a:	4b9b      	ldr	r3, [pc, #620]	; (8001b78 <ssi_handler+0xc0c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2268      	movs	r2, #104	; 0x68
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	3318      	adds	r3, #24
 8001916:	4a99      	ldr	r2, [pc, #612]	; (8001b7c <ssi_handler+0xc10>)
 8001918:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 800191a:	4b97      	ldr	r3, [pc, #604]	; (8001b78 <ssi_handler+0xc0c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a97      	ldr	r2, [pc, #604]	; (8001b7c <ssi_handler+0xc10>)
 8001920:	2168      	movs	r1, #104	; 0x68
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	4413      	add	r3, r2
 8001928:	332c      	adds	r3, #44	; 0x2c
 800192a:	681d      	ldr	r5, [r3, #0]
 800192c:	4b92      	ldr	r3, [pc, #584]	; (8001b78 <ssi_handler+0xc0c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a92      	ldr	r2, [pc, #584]	; (8001b7c <ssi_handler+0xc10>)
 8001932:	2168      	movs	r1, #104	; 0x68
 8001934:	fb01 f303 	mul.w	r3, r1, r3
 8001938:	4413      	add	r3, r2
 800193a:	3330      	adds	r3, #48	; 0x30
 800193c:	681e      	ldr	r6, [r3, #0]
 800193e:	4b8e      	ldr	r3, [pc, #568]	; (8001b78 <ssi_handler+0xc0c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a8e      	ldr	r2, [pc, #568]	; (8001b7c <ssi_handler+0xc10>)
 8001944:	2168      	movs	r1, #104	; 0x68
 8001946:	fb01 f303 	mul.w	r3, r1, r3
 800194a:	4413      	add	r3, r2
 800194c:	3334      	adds	r3, #52	; 0x34
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	613a      	str	r2, [r7, #16]
 8001952:	4b89      	ldr	r3, [pc, #548]	; (8001b78 <ssi_handler+0xc0c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a89      	ldr	r2, [pc, #548]	; (8001b7c <ssi_handler+0xc10>)
 8001958:	2168      	movs	r1, #104	; 0x68
 800195a:	fb01 f303 	mul.w	r3, r1, r3
 800195e:	4413      	add	r3, r2
 8001960:	3338      	adds	r3, #56	; 0x38
 8001962:	6819      	ldr	r1, [r3, #0]
 8001964:	60f9      	str	r1, [r7, #12]
 8001966:	4b84      	ldr	r3, [pc, #528]	; (8001b78 <ssi_handler+0xc0c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a84      	ldr	r2, [pc, #528]	; (8001b7c <ssi_handler+0xc10>)
 800196c:	2168      	movs	r1, #104	; 0x68
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4413      	add	r3, r2
 8001974:	333c      	adds	r3, #60	; 0x3c
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	4b7f      	ldr	r3, [pc, #508]	; (8001b78 <ssi_handler+0xc0c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a7f      	ldr	r2, [pc, #508]	; (8001b7c <ssi_handler+0xc10>)
 8001980:	2168      	movs	r1, #104	; 0x68
 8001982:	fb01 f303 	mul.w	r3, r1, r3
 8001986:	4413      	add	r3, r2
 8001988:	3340      	adds	r3, #64	; 0x40
 800198a:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat,
							T[variable].rinter, T[variable].dcinter,
							T[variable].pclick, listaction, T[variable].info,
 800198c:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <ssi_handler+0xc0c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2268      	movs	r2, #104	; 0x68
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	3340      	adds	r3, #64	; 0x40
 8001998:	4a78      	ldr	r2, [pc, #480]	; (8001b7c <ssi_handler+0xc10>)
 800199a:	4413      	add	r3, r2
 800199c:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <ssi_handler+0xc0c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4876      	ldr	r0, [pc, #472]	; (8001b7c <ssi_handler+0xc10>)
 80019a4:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80019a8:	fb0c f303 	mul.w	r3, ip, r3
 80019ac:	4403      	add	r3, r0
 80019ae:	3364      	adds	r3, #100	; 0x64
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	930a      	str	r3, [sp, #40]	; 0x28
 80019b4:	9209      	str	r2, [sp, #36]	; 0x24
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <ssi_handler+0xc18>)
 80019b8:	9308      	str	r3, [sp, #32]
 80019ba:	9107      	str	r1, [sp, #28]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	9306      	str	r3, [sp, #24]
 80019c0:	68f9      	ldr	r1, [r7, #12]
 80019c2:	9105      	str	r1, [sp, #20]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	9204      	str	r2, [sp, #16]
 80019c8:	9603      	str	r6, [sp, #12]
 80019ca:	9502      	str	r5, [sp, #8]
 80019cc:	9401      	str	r4, [sp, #4]
 80019ce:	6979      	ldr	r1, [r7, #20]
 80019d0:	9100      	str	r1, [sp, #0]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	496c      	ldr	r1, [pc, #432]	; (8001b88 <ssi_handler+0xc1c>)
 80019d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80019da:	f015 fee3 	bl	80177a4 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 2) {
 80019de:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <ssi_handler+0xc08>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d177      	bne.n	8001ad6 <ssi_handler+0xb6a>
					// relay json
					sprintf(pcInsert,
 80019e6:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <ssi_handler+0xc0c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a64      	ldr	r2, [pc, #400]	; (8001b7c <ssi_handler+0xc10>)
 80019ec:	2168      	movs	r1, #104	; 0x68
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	61fb      	str	r3, [r7, #28]
 80019f8:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <ssi_handler+0xc0c>)
 80019fa:	6819      	ldr	r1, [r3, #0]
 80019fc:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 80019fe:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <ssi_handler+0xc0c>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4a5d      	ldr	r2, [pc, #372]	; (8001b80 <ssi_handler+0xc14>)
 8001a0c:	4413      	add	r3, r2
							T[variable].ptype, T[variable].pwm, T[variable].on,
 8001a0e:	4a5a      	ldr	r2, [pc, #360]	; (8001b78 <ssi_handler+0xc0c>)
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	2168      	movs	r1, #104	; 0x68
 8001a14:	fb01 f202 	mul.w	r2, r1, r2
 8001a18:	3218      	adds	r2, #24
 8001a1a:	4958      	ldr	r1, [pc, #352]	; (8001b7c <ssi_handler+0xc10>)
 8001a1c:	440a      	add	r2, r1
					sprintf(pcInsert,
 8001a1e:	4956      	ldr	r1, [pc, #344]	; (8001b78 <ssi_handler+0xc0c>)
 8001a20:	6809      	ldr	r1, [r1, #0]
 8001a22:	4856      	ldr	r0, [pc, #344]	; (8001b7c <ssi_handler+0xc10>)
 8001a24:	2468      	movs	r4, #104	; 0x68
 8001a26:	fb04 f101 	mul.w	r1, r4, r1
 8001a2a:	4401      	add	r1, r0
 8001a2c:	3104      	adds	r1, #4
 8001a2e:	6809      	ldr	r1, [r1, #0]
 8001a30:	4851      	ldr	r0, [pc, #324]	; (8001b78 <ssi_handler+0xc0c>)
 8001a32:	6800      	ldr	r0, [r0, #0]
 8001a34:	4c51      	ldr	r4, [pc, #324]	; (8001b7c <ssi_handler+0xc10>)
 8001a36:	2568      	movs	r5, #104	; 0x68
 8001a38:	fb05 f000 	mul.w	r0, r5, r0
 8001a3c:	4420      	add	r0, r4
 8001a3e:	3008      	adds	r0, #8
 8001a40:	6800      	ldr	r0, [r0, #0]
 8001a42:	6178      	str	r0, [r7, #20]
 8001a44:	4c4c      	ldr	r4, [pc, #304]	; (8001b78 <ssi_handler+0xc0c>)
 8001a46:	6824      	ldr	r4, [r4, #0]
 8001a48:	4d4c      	ldr	r5, [pc, #304]	; (8001b7c <ssi_handler+0xc10>)
 8001a4a:	2668      	movs	r6, #104	; 0x68
 8001a4c:	fb06 f404 	mul.w	r4, r6, r4
 8001a50:	442c      	add	r4, r5
 8001a52:	340c      	adds	r4, #12
 8001a54:	6820      	ldr	r0, [r4, #0]
 8001a56:	6138      	str	r0, [r7, #16]
 8001a58:	4d47      	ldr	r5, [pc, #284]	; (8001b78 <ssi_handler+0xc0c>)
 8001a5a:	682d      	ldr	r5, [r5, #0]
 8001a5c:	4e47      	ldr	r6, [pc, #284]	; (8001b7c <ssi_handler+0xc10>)
 8001a5e:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001a62:	fb0c f505 	mul.w	r5, ip, r5
 8001a66:	4435      	add	r5, r6
 8001a68:	3510      	adds	r5, #16
 8001a6a:	682d      	ldr	r5, [r5, #0]
 8001a6c:	4e42      	ldr	r6, [pc, #264]	; (8001b78 <ssi_handler+0xc0c>)
 8001a6e:	6836      	ldr	r6, [r6, #0]
 8001a70:	4842      	ldr	r0, [pc, #264]	; (8001b7c <ssi_handler+0xc10>)
 8001a72:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001a76:	fb0c f606 	mul.w	r6, ip, r6
 8001a7a:	4406      	add	r6, r0
 8001a7c:	3614      	adds	r6, #20
 8001a7e:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue,
							T[variable].ponr, T[variable].info,
 8001a80:	483d      	ldr	r0, [pc, #244]	; (8001b78 <ssi_handler+0xc0c>)
 8001a82:	6800      	ldr	r0, [r0, #0]
 8001a84:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001a88:	fb0c fc00 	mul.w	ip, ip, r0
 8001a8c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001a90:	483a      	ldr	r0, [pc, #232]	; (8001b7c <ssi_handler+0xc10>)
 8001a92:	4484      	add	ip, r0
 8001a94:	f10c 0004 	add.w	r0, ip, #4
 8001a98:	60f8      	str	r0, [r7, #12]
					sprintf(pcInsert,
 8001a9a:	4837      	ldr	r0, [pc, #220]	; (8001b78 <ssi_handler+0xc0c>)
 8001a9c:	6800      	ldr	r0, [r0, #0]
 8001a9e:	4c37      	ldr	r4, [pc, #220]	; (8001b7c <ssi_handler+0xc10>)
 8001aa0:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001aa4:	fb0c fc00 	mul.w	ip, ip, r0
 8001aa8:	44a4      	add	ip, r4
 8001aaa:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001aae:	f8dc 0000 	ldr.w	r0, [ip]
 8001ab2:	9008      	str	r0, [sp, #32]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	9007      	str	r0, [sp, #28]
 8001ab8:	9606      	str	r6, [sp, #24]
 8001aba:	9505      	str	r5, [sp, #20]
 8001abc:	6938      	ldr	r0, [r7, #16]
 8001abe:	9004      	str	r0, [sp, #16]
 8001ac0:	6978      	ldr	r0, [r7, #20]
 8001ac2:	9003      	str	r0, [sp, #12]
 8001ac4:	9102      	str	r1, [sp, #8]
 8001ac6:	9201      	str	r2, [sp, #4]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	492f      	ldr	r1, [pc, #188]	; (8001b8c <ssi_handler+0xc20>)
 8001ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ad2:	f015 fe67 	bl	80177a4 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 3) {
 8001ad6:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <ssi_handler+0xc08>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d118      	bne.n	8001b10 <ssi_handler+0xba4>
					// select json
					sprintf(pcInsert,
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <ssi_handler+0xc0c>)
 8001ae0:	6819      	ldr	r1, [r3, #0]
							"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
							variable, tp[variable].pins, T[variable].topin);
 8001ae2:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <ssi_handler+0xc0c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <ssi_handler+0xc14>)
 8001af0:	441a      	add	r2, r3
					sprintf(pcInsert,
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <ssi_handler+0xc0c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4821      	ldr	r0, [pc, #132]	; (8001b7c <ssi_handler+0xc10>)
 8001af8:	2468      	movs	r4, #104	; 0x68
 8001afa:	fb04 f303 	mul.w	r3, r4, r3
 8001afe:	4403      	add	r3, r0
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	460a      	mov	r2, r1
 8001b08:	4921      	ldr	r1, [pc, #132]	; (8001b90 <ssi_handler+0xc24>)
 8001b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001b0c:	f015 fe4a 	bl	80177a4 <siprintf>
				}
				if (jsongo == 4) {
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <ssi_handler+0xc08>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	f040 80ac 	bne.w	8001c72 <ssi_handler+0xd06>
					// select json
					sprintf(pcInsert,
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <ssi_handler+0xc0c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <ssi_handler+0xc10>)
 8001b20:	2168      	movs	r1, #104	; 0x68
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	61fb      	str	r3, [r7, #28]
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <ssi_handler+0xc0c>)
 8001b2e:	6819      	ldr	r1, [r3, #0]
 8001b30:	61b9      	str	r1, [r7, #24]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"imm_ly\":%d,\"s_dt\":%d,\"e_dt\":%d,\"t_repeat\":%d,\"t_action\":%d,\"t_group\":\"%s\",\"sunrise\":%d,\"sunset\":%d,\"t_info\":\"%s\",\"t_onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <ssi_handler+0xc0c>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	4613      	mov	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <ssi_handler+0xc14>)
 8001b40:	1898      	adds	r0, r3, r2
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <ssi_handler+0xc0c>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4913      	ldr	r1, [pc, #76]	; (8001b94 <ssi_handler+0xc28>)
 8001b48:	4613      	mov	r3, r2
 8001b4a:	011b      	lsls	r3, r3, #4
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	3308      	adds	r3, #8
 8001b54:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <ssi_handler+0xc0c>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	490d      	ldr	r1, [pc, #52]	; (8001b94 <ssi_handler+0xc28>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	330c      	adds	r3, #12
 8001b6c:	681c      	ldr	r4, [r3, #0]
 8001b6e:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <ssi_handler+0xc0c>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	e011      	b.n	8001b98 <ssi_handler+0xc2c>
 8001b74:	200007c4 	.word	0x200007c4
 8001b78:	200007c0 	.word	0x200007c0
 8001b7c:	20002a0c 	.word	0x20002a0c
 8001b80:	20000008 	.word	0x20000008
 8001b84:	20006aa0 	.word	0x20006aa0
 8001b88:	0801b9bc 	.word	0x0801b9bc
 8001b8c:	0801ba58 	.word	0x0801ba58
 8001b90:	0801bad4 	.word	0x0801bad4
 8001b94:	2000174c 	.word	0x2000174c
 8001b98:	4941      	ldr	r1, [pc, #260]	; (8001ca0 <ssi_handler+0xd34>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3310      	adds	r3, #16
 8001ba6:	681d      	ldr	r5, [r3, #0]
 8001ba8:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <ssi_handler+0xd38>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	493c      	ldr	r1, [pc, #240]	; (8001ca0 <ssi_handler+0xd34>)
 8001bae:	4613      	mov	r3, r2
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3314      	adds	r3, #20
 8001bba:	681e      	ldr	r6, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <ssi_handler+0xd38>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4937      	ldr	r1, [pc, #220]	; (8001ca0 <ssi_handler+0xd34>)
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	440b      	add	r3, r1
 8001bcc:	3318      	adds	r3, #24
 8001bce:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 8001bd2:	613b      	str	r3, [r7, #16]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001bd4:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <ssi_handler+0xd38>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	3318      	adds	r3, #24
 8001be2:	4a2f      	ldr	r2, [pc, #188]	; (8001ca0 <ssi_handler+0xd34>)
 8001be4:	4413      	add	r3, r2
 8001be6:	1c9a      	adds	r2, r3, #2
 8001be8:	60fa      	str	r2, [r7, #12]
					sprintf(pcInsert,
 8001bea:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <ssi_handler+0xd38>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	492c      	ldr	r1, [pc, #176]	; (8001ca0 <ssi_handler+0xd34>)
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3324      	adds	r3, #36	; 0x24
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	60b9      	str	r1, [r7, #8]
 8001c00:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <ssi_handler+0xd38>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4926      	ldr	r1, [pc, #152]	; (8001ca0 <ssi_handler+0xd34>)
 8001c06:	4613      	mov	r3, r2
 8001c08:	011b      	lsls	r3, r3, #4
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	3328      	adds	r3, #40	; 0x28
 8001c12:	6819      	ldr	r1, [r3, #0]
							T[variable].topin, variable, tp[variable].pins, Tt[variable].imm_ly,Tt[variable].s_dt,Tt[variable].e_dt,Tt[variable].t_repeat,Tt[variable].t_action,Tt[variable].t_group,Tt[variable].sunrise,Tt[variable].sunset,Tt[variable].t_info, Tt[variable].t_onoff);
 8001c14:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <ssi_handler+0xd38>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	011b      	lsls	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	3328      	adds	r3, #40	; 0x28
 8001c22:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <ssi_handler+0xd34>)
 8001c24:	4413      	add	r3, r2
 8001c26:	1d1a      	adds	r2, r3, #4
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <ssi_handler+0xd38>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <ssi_handler+0xd34>)
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4613      	mov	r3, r2
 8001c34:	011b      	lsls	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	4694      	mov	ip, r2
 8001c3e:	4463      	add	r3, ip
 8001c40:	333c      	adds	r3, #60	; 0x3c
 8001c42:	f9b3 3000 	ldrsh.w	r3, [r3]
					sprintf(pcInsert,
 8001c46:	930a      	str	r3, [sp, #40]	; 0x28
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8001c4c:	9108      	str	r1, [sp, #32]
 8001c4e:	68b9      	ldr	r1, [r7, #8]
 8001c50:	9107      	str	r1, [sp, #28]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	9206      	str	r2, [sp, #24]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	9205      	str	r2, [sp, #20]
 8001c5a:	9604      	str	r6, [sp, #16]
 8001c5c:	9503      	str	r5, [sp, #12]
 8001c5e:	9402      	str	r4, [sp, #8]
 8001c60:	697c      	ldr	r4, [r7, #20]
 8001c62:	9401      	str	r4, [sp, #4]
 8001c64:	9000      	str	r0, [sp, #0]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	490f      	ldr	r1, [pc, #60]	; (8001ca8 <ssi_handler+0xd3c>)
 8001c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c6e:	f015 fd99 	bl	80177a4 <siprintf>
				}
			}
			/***********************************************************************/
			memset(listaction, '\0', sizeof(listaction));
 8001c72:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001c76:	2100      	movs	r1, #0
 8001c78:	480c      	ldr	r0, [pc, #48]	; (8001cac <ssi_handler+0xd40>)
 8001c7a:	f015 f81f 	bl	8016cbc <memset>
			*next_tag_part = variable;
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <ssi_handler+0xd38>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c86:	801a      	strh	r2, [r3, #0]
			//printf("*next_tag_part = %d\n",*next_tag_part);
			variable++;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <ssi_handler+0xd38>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <ssi_handler+0xd38>)
 8001c90:	6013      	str	r3, [r2, #0]

			//strcat(pcInsert, "]");
			return strlen(pcInsert);
 8001c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c94:	f7fe faa6 	bl	80001e4 <strlen>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	f000 bfa6 	b.w	8002bec <ssi_handler+0x1c80>
 8001ca0:	2000174c 	.word	0x2000174c
 8001ca4:	200007c0 	.word	0x200007c0
 8001ca8:	0801baf8 	.word	0x0801baf8
 8001cac:	20006aa0 	.word	0x20006aa0
#else
		printf("LWIP_HTTPD_SSI_MULTIPART disabled /n");
#endif
		break;
	case 1:
		if (idtab == 1) {
 8001cb0:	4b84      	ldr	r3, [pc, #528]	; (8001ec4 <ssi_handler+0xf58>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d17c      	bne.n	8001db2 <ssi_handler+0xe46>
			// buttoms
			sprintf(pcInsert,
 8001cb8:	4b83      	ldr	r3, [pc, #524]	; (8001ec8 <ssi_handler+0xf5c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a83      	ldr	r2, [pc, #524]	; (8001ecc <ssi_handler+0xf60>)
 8001cbe:	2168      	movs	r1, #104	; 0x68
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	4b7f      	ldr	r3, [pc, #508]	; (8001ec8 <ssi_handler+0xf5c>)
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	61b9      	str	r1, [r7, #24]
					"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}",
					T[id].topin, id, tp[id].pins, T[id].ptype, T[id].binter,
 8001cd0:	4b7d      	ldr	r3, [pc, #500]	; (8001ec8 <ssi_handler+0xf5c>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4a7c      	ldr	r2, [pc, #496]	; (8001ed0 <ssi_handler+0xf64>)
 8001cde:	1899      	adds	r1, r3, r2
 8001ce0:	6179      	str	r1, [r7, #20]
 8001ce2:	4b79      	ldr	r3, [pc, #484]	; (8001ec8 <ssi_handler+0xf5c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2268      	movs	r2, #104	; 0x68
 8001ce8:	fb02 f303 	mul.w	r3, r2, r3
 8001cec:	3318      	adds	r3, #24
 8001cee:	4a77      	ldr	r2, [pc, #476]	; (8001ecc <ssi_handler+0xf60>)
 8001cf0:	189c      	adds	r4, r3, r2
			sprintf(pcInsert,
 8001cf2:	4b75      	ldr	r3, [pc, #468]	; (8001ec8 <ssi_handler+0xf5c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a75      	ldr	r2, [pc, #468]	; (8001ecc <ssi_handler+0xf60>)
 8001cf8:	2168      	movs	r1, #104	; 0x68
 8001cfa:	fb01 f303 	mul.w	r3, r1, r3
 8001cfe:	4413      	add	r3, r2
 8001d00:	332c      	adds	r3, #44	; 0x2c
 8001d02:	681d      	ldr	r5, [r3, #0]
 8001d04:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <ssi_handler+0xf5c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a70      	ldr	r2, [pc, #448]	; (8001ecc <ssi_handler+0xf60>)
 8001d0a:	2168      	movs	r1, #104	; 0x68
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	4413      	add	r3, r2
 8001d12:	3330      	adds	r3, #48	; 0x30
 8001d14:	681e      	ldr	r6, [r3, #0]
 8001d16:	4b6c      	ldr	r3, [pc, #432]	; (8001ec8 <ssi_handler+0xf5c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6c      	ldr	r2, [pc, #432]	; (8001ecc <ssi_handler+0xf60>)
 8001d1c:	2168      	movs	r1, #104	; 0x68
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3334      	adds	r3, #52	; 0x34
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	613a      	str	r2, [r7, #16]
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <ssi_handler+0xf5c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a67      	ldr	r2, [pc, #412]	; (8001ecc <ssi_handler+0xf60>)
 8001d30:	2168      	movs	r1, #104	; 0x68
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3338      	adds	r3, #56	; 0x38
 8001d3a:	6819      	ldr	r1, [r3, #0]
 8001d3c:	60f9      	str	r1, [r7, #12]
 8001d3e:	4b62      	ldr	r3, [pc, #392]	; (8001ec8 <ssi_handler+0xf5c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a62      	ldr	r2, [pc, #392]	; (8001ecc <ssi_handler+0xf60>)
 8001d44:	2168      	movs	r1, #104	; 0x68
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	333c      	adds	r3, #60	; 0x3c
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b5d      	ldr	r3, [pc, #372]	; (8001ec8 <ssi_handler+0xf5c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a5d      	ldr	r2, [pc, #372]	; (8001ecc <ssi_handler+0xf60>)
 8001d58:	2168      	movs	r1, #104	; 0x68
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3340      	adds	r3, #64	; 0x40
 8001d62:	6819      	ldr	r1, [r3, #0]
					T[id].hinter, T[id].repeat, T[id].rinter, T[id].dcinter,
					T[id].pclick, T[id].info, T[id].onoff);
 8001d64:	4b58      	ldr	r3, [pc, #352]	; (8001ec8 <ssi_handler+0xf5c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2268      	movs	r2, #104	; 0x68
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	3340      	adds	r3, #64	; 0x40
 8001d70:	4a56      	ldr	r2, [pc, #344]	; (8001ecc <ssi_handler+0xf60>)
 8001d72:	4413      	add	r3, r2
 8001d74:	1d1a      	adds	r2, r3, #4
			sprintf(pcInsert,
 8001d76:	4b54      	ldr	r3, [pc, #336]	; (8001ec8 <ssi_handler+0xf5c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4854      	ldr	r0, [pc, #336]	; (8001ecc <ssi_handler+0xf60>)
 8001d7c:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001d80:	fb0c f303 	mul.w	r3, ip, r3
 8001d84:	4403      	add	r3, r0
 8001d86:	3364      	adds	r3, #100	; 0x64
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8001d8c:	9208      	str	r2, [sp, #32]
 8001d8e:	9107      	str	r1, [sp, #28]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	9306      	str	r3, [sp, #24]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	9105      	str	r1, [sp, #20]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	9204      	str	r2, [sp, #16]
 8001d9c:	9603      	str	r6, [sp, #12]
 8001d9e:	9502      	str	r5, [sp, #8]
 8001da0:	9401      	str	r4, [sp, #4]
 8001da2:	6979      	ldr	r1, [r7, #20]
 8001da4:	9100      	str	r1, [sp, #0]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	494a      	ldr	r1, [pc, #296]	; (8001ed4 <ssi_handler+0xf68>)
 8001dac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dae:	f015 fcf9 	bl	80177a4 <siprintf>
		}
		if (idtab == 2) {
 8001db2:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <ssi_handler+0xf58>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d177      	bne.n	8001eaa <ssi_handler+0xf3e>
			// relay
			sprintf(pcInsert,
 8001dba:	4b43      	ldr	r3, [pc, #268]	; (8001ec8 <ssi_handler+0xf5c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a43      	ldr	r2, [pc, #268]	; (8001ecc <ssi_handler+0xf60>)
 8001dc0:	2168      	movs	r1, #104	; 0x68
 8001dc2:	fb01 f303 	mul.w	r3, r1, r3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <ssi_handler+0xf5c>)
 8001dce:	6819      	ldr	r1, [r3, #0]
 8001dd0:	61b9      	str	r1, [r7, #24]
					"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}",
					T[id].topin, id, tp[id].pins, T[id].ptype, T[id].pwm,
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <ssi_handler+0xf5c>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4a3c      	ldr	r2, [pc, #240]	; (8001ed0 <ssi_handler+0xf64>)
 8001de0:	4413      	add	r3, r2
 8001de2:	4a39      	ldr	r2, [pc, #228]	; (8001ec8 <ssi_handler+0xf5c>)
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	2168      	movs	r1, #104	; 0x68
 8001de8:	fb01 f202 	mul.w	r2, r1, r2
 8001dec:	3218      	adds	r2, #24
 8001dee:	4937      	ldr	r1, [pc, #220]	; (8001ecc <ssi_handler+0xf60>)
 8001df0:	440a      	add	r2, r1
			sprintf(pcInsert,
 8001df2:	4935      	ldr	r1, [pc, #212]	; (8001ec8 <ssi_handler+0xf5c>)
 8001df4:	6809      	ldr	r1, [r1, #0]
 8001df6:	4835      	ldr	r0, [pc, #212]	; (8001ecc <ssi_handler+0xf60>)
 8001df8:	2468      	movs	r4, #104	; 0x68
 8001dfa:	fb04 f101 	mul.w	r1, r4, r1
 8001dfe:	4401      	add	r1, r0
 8001e00:	3104      	adds	r1, #4
 8001e02:	6809      	ldr	r1, [r1, #0]
 8001e04:	4830      	ldr	r0, [pc, #192]	; (8001ec8 <ssi_handler+0xf5c>)
 8001e06:	6800      	ldr	r0, [r0, #0]
 8001e08:	4c30      	ldr	r4, [pc, #192]	; (8001ecc <ssi_handler+0xf60>)
 8001e0a:	2568      	movs	r5, #104	; 0x68
 8001e0c:	fb05 f000 	mul.w	r0, r5, r0
 8001e10:	4420      	add	r0, r4
 8001e12:	3008      	adds	r0, #8
 8001e14:	6800      	ldr	r0, [r0, #0]
 8001e16:	6178      	str	r0, [r7, #20]
 8001e18:	4c2b      	ldr	r4, [pc, #172]	; (8001ec8 <ssi_handler+0xf5c>)
 8001e1a:	6824      	ldr	r4, [r4, #0]
 8001e1c:	4d2b      	ldr	r5, [pc, #172]	; (8001ecc <ssi_handler+0xf60>)
 8001e1e:	2668      	movs	r6, #104	; 0x68
 8001e20:	fb06 f404 	mul.w	r4, r6, r4
 8001e24:	442c      	add	r4, r5
 8001e26:	340c      	adds	r4, #12
 8001e28:	6820      	ldr	r0, [r4, #0]
 8001e2a:	6138      	str	r0, [r7, #16]
 8001e2c:	4d26      	ldr	r5, [pc, #152]	; (8001ec8 <ssi_handler+0xf5c>)
 8001e2e:	682d      	ldr	r5, [r5, #0]
 8001e30:	4e26      	ldr	r6, [pc, #152]	; (8001ecc <ssi_handler+0xf60>)
 8001e32:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001e36:	fb0c f505 	mul.w	r5, ip, r5
 8001e3a:	4435      	add	r5, r6
 8001e3c:	3510      	adds	r5, #16
 8001e3e:	682d      	ldr	r5, [r5, #0]
 8001e40:	4e21      	ldr	r6, [pc, #132]	; (8001ec8 <ssi_handler+0xf5c>)
 8001e42:	6836      	ldr	r6, [r6, #0]
 8001e44:	4821      	ldr	r0, [pc, #132]	; (8001ecc <ssi_handler+0xf60>)
 8001e46:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001e4a:	fb0c f606 	mul.w	r6, ip, r6
 8001e4e:	4406      	add	r6, r0
 8001e50:	3614      	adds	r6, #20
 8001e52:	6836      	ldr	r6, [r6, #0]
					T[id].on, T[id].istate, T[id].dvalue, T[id].ponr,
					T[id].info, T[id].onoff);
 8001e54:	481c      	ldr	r0, [pc, #112]	; (8001ec8 <ssi_handler+0xf5c>)
 8001e56:	6800      	ldr	r0, [r0, #0]
 8001e58:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001e5c:	fb0c fc00 	mul.w	ip, ip, r0
 8001e60:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001e64:	4819      	ldr	r0, [pc, #100]	; (8001ecc <ssi_handler+0xf60>)
 8001e66:	4484      	add	ip, r0
 8001e68:	f10c 0004 	add.w	r0, ip, #4
 8001e6c:	60f8      	str	r0, [r7, #12]
			sprintf(pcInsert,
 8001e6e:	4816      	ldr	r0, [pc, #88]	; (8001ec8 <ssi_handler+0xf5c>)
 8001e70:	6800      	ldr	r0, [r0, #0]
 8001e72:	4c16      	ldr	r4, [pc, #88]	; (8001ecc <ssi_handler+0xf60>)
 8001e74:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001e78:	fb0c fc00 	mul.w	ip, ip, r0
 8001e7c:	44a4      	add	ip, r4
 8001e7e:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001e82:	f8dc 0000 	ldr.w	r0, [ip]
 8001e86:	9008      	str	r0, [sp, #32]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	9007      	str	r0, [sp, #28]
 8001e8c:	9606      	str	r6, [sp, #24]
 8001e8e:	9505      	str	r5, [sp, #20]
 8001e90:	6938      	ldr	r0, [r7, #16]
 8001e92:	9004      	str	r0, [sp, #16]
 8001e94:	6978      	ldr	r0, [r7, #20]
 8001e96:	9003      	str	r0, [sp, #12]
 8001e98:	9102      	str	r1, [sp, #8]
 8001e9a:	9201      	str	r2, [sp, #4]
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	490d      	ldr	r1, [pc, #52]	; (8001ed8 <ssi_handler+0xf6c>)
 8001ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ea6:	f015 fc7d 	bl	80177a4 <siprintf>
		}
		if (idtab == 3) {// Для странички connections.shtml
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <ssi_handler+0xf58>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d163      	bne.n	8001f7a <ssi_handler+0x100e>
			// connection
			sprintf(jsonrp, "{");
 8001eb2:	490a      	ldr	r1, [pc, #40]	; (8001edc <ssi_handler+0xf70>)
 8001eb4:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <ssi_handler+0xf74>)
 8001eb6:	f015 fc75 	bl	80177a4 <siprintf>
			strcat(bufervar, jsonrp);
 8001eba:	4909      	ldr	r1, [pc, #36]	; (8001ee0 <ssi_handler+0xf74>)
 8001ebc:	4809      	ldr	r0, [pc, #36]	; (8001ee4 <ssi_handler+0xf78>)
 8001ebe:	f015 fc91 	bl	80177e4 <strcat>
			while (variable <= numpin - 1) {
 8001ec2:	e032      	b.n	8001f2a <ssi_handler+0xfbe>
 8001ec4:	200007cc 	.word	0x200007cc
 8001ec8:	200007c8 	.word	0x200007c8
 8001ecc:	20002a0c 	.word	0x20002a0c
 8001ed0:	20000008 	.word	0x20000008
 8001ed4:	0801bb9c 	.word	0x0801bb9c
 8001ed8:	0801bc2c 	.word	0x0801bc2c
 8001edc:	0801b5e8 	.word	0x0801b5e8
 8001ee0:	20006c34 	.word	0x20006c34
 8001ee4:	2000419c 	.word	0x2000419c
				if (T[variable].topin == 2) {
 8001ee8:	4bb1      	ldr	r3, [pc, #708]	; (80021b0 <ssi_handler+0x1244>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4ab1      	ldr	r2, [pc, #708]	; (80021b4 <ssi_handler+0x1248>)
 8001eee:	2168      	movs	r1, #104	; 0x68
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d111      	bne.n	8001f20 <ssi_handler+0xfb4>
					sprintf(jsonrp, "\"%s\":%d,", tp[variable].pins, variable);
 8001efc:	4bac      	ldr	r3, [pc, #688]	; (80021b0 <ssi_handler+0x1244>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4aab      	ldr	r2, [pc, #684]	; (80021b8 <ssi_handler+0x124c>)
 8001f0a:	441a      	add	r2, r3
 8001f0c:	4ba8      	ldr	r3, [pc, #672]	; (80021b0 <ssi_handler+0x1244>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	49aa      	ldr	r1, [pc, #680]	; (80021bc <ssi_handler+0x1250>)
 8001f12:	48ab      	ldr	r0, [pc, #684]	; (80021c0 <ssi_handler+0x1254>)
 8001f14:	f015 fc46 	bl	80177a4 <siprintf>
					strcat(bufervar, jsonrp);
 8001f18:	49a9      	ldr	r1, [pc, #676]	; (80021c0 <ssi_handler+0x1254>)
 8001f1a:	48aa      	ldr	r0, [pc, #680]	; (80021c4 <ssi_handler+0x1258>)
 8001f1c:	f015 fc62 	bl	80177e4 <strcat>
					//printf("%s \r\n",  jsonrp);
				}
				variable++;
 8001f20:	4ba3      	ldr	r3, [pc, #652]	; (80021b0 <ssi_handler+0x1244>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	4aa2      	ldr	r2, [pc, #648]	; (80021b0 <ssi_handler+0x1244>)
 8001f28:	6013      	str	r3, [r2, #0]
			while (variable <= numpin - 1) {
 8001f2a:	4ba1      	ldr	r3, [pc, #644]	; (80021b0 <ssi_handler+0x1244>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b39      	cmp	r3, #57	; 0x39
 8001f30:	ddda      	ble.n	8001ee8 <ssi_handler+0xf7c>
			}
			bufervar[strlen(bufervar) - 1] = '\0';
 8001f32:	48a4      	ldr	r0, [pc, #656]	; (80021c4 <ssi_handler+0x1258>)
 8001f34:	f7fe f956 	bl	80001e4 <strlen>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	4aa1      	ldr	r2, [pc, #644]	; (80021c4 <ssi_handler+0x1258>)
 8001f3e:	2100      	movs	r1, #0
 8001f40:	54d1      	strb	r1, [r2, r3]
			sprintf(jsonrp, "}");
 8001f42:	49a1      	ldr	r1, [pc, #644]	; (80021c8 <ssi_handler+0x125c>)
 8001f44:	489e      	ldr	r0, [pc, #632]	; (80021c0 <ssi_handler+0x1254>)
 8001f46:	f015 fc2d 	bl	80177a4 <siprintf>
			strcat(bufervar, jsonrp);
 8001f4a:	499d      	ldr	r1, [pc, #628]	; (80021c0 <ssi_handler+0x1254>)
 8001f4c:	489d      	ldr	r0, [pc, #628]	; (80021c4 <ssi_handler+0x1258>)
 8001f4e:	f015 fc49 	bl	80177e4 <strcat>
			variable = 0;
 8001f52:	4b97      	ldr	r3, [pc, #604]	; (80021b0 <ssi_handler+0x1244>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
			sprintf(pcInsert, "{\"id\":%d,\"pins\":\"%s\",\"rpins\":%s}", id,
 8001f58:	4b9c      	ldr	r3, [pc, #624]	; (80021cc <ssi_handler+0x1260>)
 8001f5a:	6819      	ldr	r1, [r3, #0]
					tp[id].pins, bufervar);
 8001f5c:	4b9b      	ldr	r3, [pc, #620]	; (80021cc <ssi_handler+0x1260>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4a93      	ldr	r2, [pc, #588]	; (80021b8 <ssi_handler+0x124c>)
 8001f6a:	4413      	add	r3, r2
			sprintf(pcInsert, "{\"id\":%d,\"pins\":\"%s\",\"rpins\":%s}", id,
 8001f6c:	4a95      	ldr	r2, [pc, #596]	; (80021c4 <ssi_handler+0x1258>)
 8001f6e:	9200      	str	r2, [sp, #0]
 8001f70:	460a      	mov	r2, r1
 8001f72:	4997      	ldr	r1, [pc, #604]	; (80021d0 <ssi_handler+0x1264>)
 8001f74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f76:	f015 fc15 	bl	80177a4 <siprintf>
		}

		memset(jsonrp, '\0', sizeof(jsonrp));
 8001f7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f7e:	2100      	movs	r1, #0
 8001f80:	488f      	ldr	r0, [pc, #572]	; (80021c0 <ssi_handler+0x1254>)
 8001f82:	f014 fe9b 	bl	8016cbc <memset>
		memset(bufervar, '\0', sizeof(bufervar));
 8001f86:	f642 1204 	movw	r2, #10500	; 0x2904
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	488d      	ldr	r0, [pc, #564]	; (80021c4 <ssi_handler+0x1258>)
 8001f8e:	f014 fe95 	bl	8016cbc <memset>
		return strlen(pcInsert);
 8001f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f94:	f7fe f926 	bl	80001e4 <strlen>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	f000 be26 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 2:
		sprintf(pcInsert,
 8001fa0:	498c      	ldr	r1, [pc, #560]	; (80021d4 <ssi_handler+0x1268>)
 8001fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fa4:	f015 fbfe 	bl	80177a4 <siprintf>
				"<a href=\"index.shtml\">Home</a> | <a href=\"select.shtml\">Select pin</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"timers.shtml\">Timers</a> | <a href=\"settings.shtml\">Settings</a>");
		return strlen(pcInsert);
 8001fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001faa:	f7fe f91b 	bl	80001e4 <strlen>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	f000 be1b 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 4: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%.6f", Settings.lon_de);
 8001fb6:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <ssi_handler+0x126c>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	4987      	ldr	r1, [pc, #540]	; (80021dc <ssi_handler+0x1270>)
 8001fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fc0:	f015 fbf0 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8001fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fc6:	f7fe f90d 	bl	80001e4 <strlen>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f000 be0d 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 5: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%.6f", Settings.lat_de);
 8001fd2:	4b81      	ldr	r3, [pc, #516]	; (80021d8 <ssi_handler+0x126c>)
 8001fd4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fd8:	4980      	ldr	r1, [pc, #512]	; (80021dc <ssi_handler+0x1270>)
 8001fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fdc:	f015 fbe2 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8001fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fe2:	f7fe f8ff 	bl	80001e4 <strlen>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	f000 bdff 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 6: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqtt_prt);
 8001fee:	4b7a      	ldr	r3, [pc, #488]	; (80021d8 <ssi_handler+0x126c>)
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	497a      	ldr	r1, [pc, #488]	; (80021e0 <ssi_handler+0x1274>)
 8001ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ff8:	f015 fbd4 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8001ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ffe:	f7fe f8f1 	bl	80001e4 <strlen>
 8002002:	4603      	mov	r3, r0
 8002004:	b29b      	uxth	r3, r3
 8002006:	f000 bdf1 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 7: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqtt_clt);
 800200a:	4a76      	ldr	r2, [pc, #472]	; (80021e4 <ssi_handler+0x1278>)
 800200c:	4976      	ldr	r1, [pc, #472]	; (80021e8 <ssi_handler+0x127c>)
 800200e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002010:	f015 fbc8 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002016:	f7fe f8e5 	bl	80001e4 <strlen>
 800201a:	4603      	mov	r3, r0
 800201c:	b29b      	uxth	r3, r3
 800201e:	f000 bde5 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 8: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqtt_usr);
 8002022:	4a72      	ldr	r2, [pc, #456]	; (80021ec <ssi_handler+0x1280>)
 8002024:	4970      	ldr	r1, [pc, #448]	; (80021e8 <ssi_handler+0x127c>)
 8002026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002028:	f015 fbbc 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 800202c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800202e:	f7fe f8d9 	bl	80001e4 <strlen>
 8002032:	4603      	mov	r3, r0
 8002034:	b29b      	uxth	r3, r3
 8002036:	f000 bdd9 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 9: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqt_pswd);
 800203a:	4a6d      	ldr	r2, [pc, #436]	; (80021f0 <ssi_handler+0x1284>)
 800203c:	496a      	ldr	r1, [pc, #424]	; (80021e8 <ssi_handler+0x127c>)
 800203e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002040:	f015 fbb0 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002046:	f7fe f8cd 	bl	80001e4 <strlen>
 800204a:	4603      	mov	r3, r0
 800204c:	b29b      	uxth	r3, r3
 800204e:	f000 bdcd 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 10: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqtt_tpc);
 8002052:	4a68      	ldr	r2, [pc, #416]	; (80021f4 <ssi_handler+0x1288>)
 8002054:	4964      	ldr	r1, [pc, #400]	; (80021e8 <ssi_handler+0x127c>)
 8002056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002058:	f015 fba4 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 800205c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800205e:	f7fe f8c1 	bl	80001e4 <strlen>
 8002062:	4603      	mov	r3, r0
 8002064:	b29b      	uxth	r3, r3
 8002066:	f000 bdc1 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 11: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqt_ftpc);
 800206a:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <ssi_handler+0x128c>)
 800206c:	495e      	ldr	r1, [pc, #376]	; (80021e8 <ssi_handler+0x127c>)
 800206e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002070:	f015 fb98 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002076:	f7fe f8b5 	bl	80001e4 <strlen>
 800207a:	4603      	mov	r3, r0
 800207c:	b29b      	uxth	r3, r3
 800207e:	f000 bdb5 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 12: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr0);
 8002082:	4b55      	ldr	r3, [pc, #340]	; (80021d8 <ssi_handler+0x126c>)
 8002084:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8002088:	461a      	mov	r2, r3
 800208a:	4955      	ldr	r1, [pc, #340]	; (80021e0 <ssi_handler+0x1274>)
 800208c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800208e:	f015 fb89 	bl	80177a4 <siprintf>
		//printf("ip_addr0 = \%d\n",Settings.ip_addr0);
		return strlen(pcInsert);
 8002092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002094:	f7fe f8a6 	bl	80001e4 <strlen>
 8002098:	4603      	mov	r3, r0
 800209a:	b29b      	uxth	r3, r3
 800209c:	f000 bda6 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 13: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr1);
 80020a0:	4b4d      	ldr	r3, [pc, #308]	; (80021d8 <ssi_handler+0x126c>)
 80020a2:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80020a6:	461a      	mov	r2, r3
 80020a8:	494d      	ldr	r1, [pc, #308]	; (80021e0 <ssi_handler+0x1274>)
 80020aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ac:	f015 fb7a 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 80020b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020b2:	f7fe f897 	bl	80001e4 <strlen>
 80020b6:	4603      	mov	r3, r0
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f000 bd97 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 14: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr2);
 80020be:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <ssi_handler+0x126c>)
 80020c0:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 80020c4:	461a      	mov	r2, r3
 80020c6:	4946      	ldr	r1, [pc, #280]	; (80021e0 <ssi_handler+0x1274>)
 80020c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ca:	f015 fb6b 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 80020ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020d0:	f7fe f888 	bl	80001e4 <strlen>
 80020d4:	4603      	mov	r3, r0
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f000 bd88 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 15: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr3);
 80020dc:	4b3e      	ldr	r3, [pc, #248]	; (80021d8 <ssi_handler+0x126c>)
 80020de:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80020e2:	461a      	mov	r2, r3
 80020e4:	493e      	ldr	r1, [pc, #248]	; (80021e0 <ssi_handler+0x1274>)
 80020e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020e8:	f015 fb5c 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 80020ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80020ee:	f7fe f879 	bl	80001e4 <strlen>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	f000 bd79 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 16: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask0);
 80020fa:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <ssi_handler+0x126c>)
 80020fc:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8002100:	461a      	mov	r2, r3
 8002102:	4937      	ldr	r1, [pc, #220]	; (80021e0 <ssi_handler+0x1274>)
 8002104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002106:	f015 fb4d 	bl	80177a4 <siprintf>
		//printf("sb_mask0 = \%d\n",Settings.sb_mask0);
		return strlen(pcInsert);
 800210a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800210c:	f7fe f86a 	bl	80001e4 <strlen>
 8002110:	4603      	mov	r3, r0
 8002112:	b29b      	uxth	r3, r3
 8002114:	f000 bd6a 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 17: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask1);
 8002118:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <ssi_handler+0x126c>)
 800211a:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 800211e:	461a      	mov	r2, r3
 8002120:	492f      	ldr	r1, [pc, #188]	; (80021e0 <ssi_handler+0x1274>)
 8002122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002124:	f015 fb3e 	bl	80177a4 <siprintf>
		//printf("sb_mask1 = \%d\n",Settings.sb_mask1);
		return strlen(pcInsert);
 8002128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800212a:	f7fe f85b 	bl	80001e4 <strlen>
 800212e:	4603      	mov	r3, r0
 8002130:	b29b      	uxth	r3, r3
 8002132:	f000 bd5b 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 18: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask2);
 8002136:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <ssi_handler+0x126c>)
 8002138:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 800213c:	461a      	mov	r2, r3
 800213e:	4928      	ldr	r1, [pc, #160]	; (80021e0 <ssi_handler+0x1274>)
 8002140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002142:	f015 fb2f 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002146:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002148:	f7fe f84c 	bl	80001e4 <strlen>
 800214c:	4603      	mov	r3, r0
 800214e:	b29b      	uxth	r3, r3
 8002150:	f000 bd4c 	b.w	8002bec <ssi_handler+0x1c80>
		//printf("sb_mask2 = \%d\n",Settings.sb_mask2);
		break;
	case 19: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask3);
 8002154:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <ssi_handler+0x126c>)
 8002156:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 800215a:	461a      	mov	r2, r3
 800215c:	4920      	ldr	r1, [pc, #128]	; (80021e0 <ssi_handler+0x1274>)
 800215e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002160:	f015 fb20 	bl	80177a4 <siprintf>
		//printf("sb_mask3 = \%d\n",Settings.sb_mask3);
		return strlen(pcInsert);
 8002164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002166:	f7fe f83d 	bl	80001e4 <strlen>
 800216a:	4603      	mov	r3, r0
 800216c:	b29b      	uxth	r3, r3
 800216e:	f000 bd3d 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 20: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway0);
 8002172:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <ssi_handler+0x126c>)
 8002174:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8002178:	461a      	mov	r2, r3
 800217a:	4919      	ldr	r1, [pc, #100]	; (80021e0 <ssi_handler+0x1274>)
 800217c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800217e:	f015 fb11 	bl	80177a4 <siprintf>
		//printf("gateway0 = \%d\n",Settings.gateway0);
		return strlen(pcInsert);
 8002182:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002184:	f7fe f82e 	bl	80001e4 <strlen>
 8002188:	4603      	mov	r3, r0
 800218a:	b29b      	uxth	r3, r3
 800218c:	f000 bd2e 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 21: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway1);
 8002190:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <ssi_handler+0x126c>)
 8002192:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8002196:	461a      	mov	r2, r3
 8002198:	4911      	ldr	r1, [pc, #68]	; (80021e0 <ssi_handler+0x1274>)
 800219a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800219c:	f015 fb02 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 80021a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021a2:	f7fe f81f 	bl	80001e4 <strlen>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	f000 bd1f 	b.w	8002bec <ssi_handler+0x1c80>
 80021ae:	bf00      	nop
 80021b0:	200007c0 	.word	0x200007c0
 80021b4:	20002a0c 	.word	0x20002a0c
 80021b8:	20000008 	.word	0x20000008
 80021bc:	0801b5ec 	.word	0x0801b5ec
 80021c0:	20006c34 	.word	0x20006c34
 80021c4:	2000419c 	.word	0x2000419c
 80021c8:	0801b5f8 	.word	0x0801b5f8
 80021cc:	200007c8 	.word	0x200007c8
 80021d0:	0801bca4 	.word	0x0801bca4
 80021d4:	0801bcc8 	.word	0x0801bcc8
 80021d8:	20000490 	.word	0x20000490
 80021dc:	0801bda8 	.word	0x0801bda8
 80021e0:	0801bdb0 	.word	0x0801bdb0
 80021e4:	200004a4 	.word	0x200004a4
 80021e8:	0801bdb4 	.word	0x0801bdb4
 80021ec:	200004ae 	.word	0x200004ae
 80021f0:	200004b8 	.word	0x200004b8
 80021f4:	200004c7 	.word	0x200004c7
 80021f8:	200004d6 	.word	0x200004d6
		break;
	case 22: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway2);
 80021fc:	4ba3      	ldr	r3, [pc, #652]	; (800248c <ssi_handler+0x1520>)
 80021fe:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8002202:	461a      	mov	r2, r3
 8002204:	49a2      	ldr	r1, [pc, #648]	; (8002490 <ssi_handler+0x1524>)
 8002206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002208:	f015 facc 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 800220c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800220e:	f7fd ffe9 	bl	80001e4 <strlen>
 8002212:	4603      	mov	r3, r0
 8002214:	b29b      	uxth	r3, r3
 8002216:	f000 bce9 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 23: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway3);
 800221a:	4b9c      	ldr	r3, [pc, #624]	; (800248c <ssi_handler+0x1520>)
 800221c:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8002220:	461a      	mov	r2, r3
 8002222:	499b      	ldr	r1, [pc, #620]	; (8002490 <ssi_handler+0x1524>)
 8002224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002226:	f015 fabd 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 800222a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800222c:	f7fd ffda 	bl	80001e4 <strlen>
 8002230:	4603      	mov	r3, r0
 8002232:	b29b      	uxth	r3, r3
 8002234:	f000 bcda 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 24: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst0);
 8002238:	4b94      	ldr	r3, [pc, #592]	; (800248c <ssi_handler+0x1520>)
 800223a:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 800223e:	461a      	mov	r2, r3
 8002240:	4993      	ldr	r1, [pc, #588]	; (8002490 <ssi_handler+0x1524>)
 8002242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002244:	f015 faae 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800224a:	f7fd ffcb 	bl	80001e4 <strlen>
 800224e:	4603      	mov	r3, r0
 8002250:	b29b      	uxth	r3, r3
 8002252:	f000 bccb 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 25: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst1);
 8002256:	4b8d      	ldr	r3, [pc, #564]	; (800248c <ssi_handler+0x1520>)
 8002258:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 800225c:	461a      	mov	r2, r3
 800225e:	498c      	ldr	r1, [pc, #560]	; (8002490 <ssi_handler+0x1524>)
 8002260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002262:	f015 fa9f 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002268:	f7fd ffbc 	bl	80001e4 <strlen>
 800226c:	4603      	mov	r3, r0
 800226e:	b29b      	uxth	r3, r3
 8002270:	f000 bcbc 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 26: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst2);
 8002274:	4b85      	ldr	r3, [pc, #532]	; (800248c <ssi_handler+0x1520>)
 8002276:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 800227a:	461a      	mov	r2, r3
 800227c:	4984      	ldr	r1, [pc, #528]	; (8002490 <ssi_handler+0x1524>)
 800227e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002280:	f015 fa90 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002286:	f7fd ffad 	bl	80001e4 <strlen>
 800228a:	4603      	mov	r3, r0
 800228c:	b29b      	uxth	r3, r3
 800228e:	f000 bcad 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 27: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst3);
 8002292:	4b7e      	ldr	r3, [pc, #504]	; (800248c <ssi_handler+0x1520>)
 8002294:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8002298:	461a      	mov	r2, r3
 800229a:	497d      	ldr	r1, [pc, #500]	; (8002490 <ssi_handler+0x1524>)
 800229c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800229e:	f015 fa81 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 80022a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022a4:	f7fd ff9e 	bl	80001e4 <strlen>
 80022a8:	4603      	mov	r3, r0
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	f000 bc9e 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 28: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%d", Tt[tmp_id].s_dt);
 80022b0:	4b78      	ldr	r3, [pc, #480]	; (8002494 <ssi_handler+0x1528>)
 80022b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b6:	4619      	mov	r1, r3
 80022b8:	4a77      	ldr	r2, [pc, #476]	; (8002498 <ssi_handler+0x152c>)
 80022ba:	460b      	mov	r3, r1
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	440b      	add	r3, r1
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	330c      	adds	r3, #12
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4971      	ldr	r1, [pc, #452]	; (8002490 <ssi_handler+0x1524>)
 80022cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022ce:	f015 fa69 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 80022d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d4:	f7fd ff86 	bl	80001e4 <strlen>
 80022d8:	4603      	mov	r3, r0
 80022da:	b29b      	uxth	r3, r3
 80022dc:	f000 bc86 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 29: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%d", Tt[tmp_id].e_dt);
 80022e0:	4b6c      	ldr	r3, [pc, #432]	; (8002494 <ssi_handler+0x1528>)
 80022e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e6:	4619      	mov	r1, r3
 80022e8:	4a6b      	ldr	r2, [pc, #428]	; (8002498 <ssi_handler+0x152c>)
 80022ea:	460b      	mov	r3, r1
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	440b      	add	r3, r1
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	3310      	adds	r3, #16
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4965      	ldr	r1, [pc, #404]	; (8002490 <ssi_handler+0x1524>)
 80022fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022fe:	f015 fa51 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002304:	f7fd ff6e 	bl	80001e4 <strlen>
 8002308:	4603      	mov	r3, r0
 800230a:	b29b      	uxth	r3, r3
 800230c:	f000 bc6e 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 30: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%d", t_id);
 8002310:	4b62      	ldr	r3, [pc, #392]	; (800249c <ssi_handler+0x1530>)
 8002312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002316:	461a      	mov	r2, r3
 8002318:	495d      	ldr	r1, [pc, #372]	; (8002490 <ssi_handler+0x1524>)
 800231a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800231c:	f015 fa42 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002322:	f7fd ff5f 	bl	80001e4 <strlen>
 8002326:	4603      	mov	r3, r0
 8002328:	b29b      	uxth	r3, r3
 800232a:	f000 bc5f 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 31: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%s", pins);
 800232e:	4a5c      	ldr	r2, [pc, #368]	; (80024a0 <ssi_handler+0x1534>)
 8002330:	495c      	ldr	r1, [pc, #368]	; (80024a4 <ssi_handler+0x1538>)
 8002332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002334:	f015 fa36 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800233a:	f7fd ff53 	bl	80001e4 <strlen>
 800233e:	4603      	mov	r3, r0
 8002340:	b29b      	uxth	r3, r3
 8002342:	f000 bc53 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 32: // "SSI" для странички "edit_timers.shtml"
		//printf("Tt[tmp_id].t_repeat = \%d\n",Tt[tmp_id].t_repeat);
		sprintf(pcInsert, "%d", Tt[tmp_id].t_repeat);
 8002346:	4b53      	ldr	r3, [pc, #332]	; (8002494 <ssi_handler+0x1528>)
 8002348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234c:	4619      	mov	r1, r3
 800234e:	4a52      	ldr	r2, [pc, #328]	; (8002498 <ssi_handler+0x152c>)
 8002350:	460b      	mov	r3, r1
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	440b      	add	r3, r1
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	3314      	adds	r3, #20
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	494b      	ldr	r1, [pc, #300]	; (8002490 <ssi_handler+0x1524>)
 8002362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002364:	f015 fa1e 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800236a:	f7fd ff3b 	bl	80001e4 <strlen>
 800236e:	4603      	mov	r3, r0
 8002370:	b29b      	uxth	r3, r3
 8002372:	f000 bc3b 	b.w	8002bec <ssi_handler+0x1c80>
		break;

	case 33: // Для странички "edit_timers.shtml"
		sprintf(pcInsert,"%d",Tt[tmp_id].t_rept1);
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <ssi_handler+0x1528>)
 8002378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237c:	4619      	mov	r1, r3
 800237e:	4a46      	ldr	r2, [pc, #280]	; (8002498 <ssi_handler+0x152c>)
 8002380:	460b      	mov	r3, r1
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	440b      	add	r3, r1
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	333e      	adds	r3, #62	; 0x3e
 800238c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002390:	461a      	mov	r2, r3
 8002392:	493f      	ldr	r1, [pc, #252]	; (8002490 <ssi_handler+0x1524>)
 8002394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002396:	f015 fa05 	bl	80177a4 <siprintf>
    	return strlen(pcInsert);
 800239a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800239c:	f7fd ff22 	bl	80001e4 <strlen>
 80023a0:	4603      	mov	r3, r0
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	f000 bc22 	b.w	8002bec <ssi_handler+0x1c80>
		break;
	case 34: // Для странички "edit_timers.shtml"
		if(Tt[tmp_id].t_rept2 == 0){
 80023a8:	4b3a      	ldr	r3, [pc, #232]	; (8002494 <ssi_handler+0x1528>)
 80023aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ae:	4619      	mov	r1, r3
 80023b0:	4a39      	ldr	r2, [pc, #228]	; (8002498 <ssi_handler+0x152c>)
 80023b2:	460b      	mov	r3, r1
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	440b      	add	r3, r1
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	3340      	adds	r3, #64	; 0x40
 80023be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d11f      	bne.n	8002406 <ssi_handler+0x149a>
			strcat(listaction, "<option value=\"0\" selected>NONE</option>"); // Блок "option" генерируем для HTML
 80023c6:	4838      	ldr	r0, [pc, #224]	; (80024a8 <ssi_handler+0x153c>)
 80023c8:	f7fd ff0c 	bl	80001e4 <strlen>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <ssi_handler+0x153c>)
 80023d2:	4413      	add	r3, r2
 80023d4:	4a35      	ldr	r2, [pc, #212]	; (80024ac <ssi_handler+0x1540>)
 80023d6:	4614      	mov	r4, r2
 80023d8:	469c      	mov	ip, r3
 80023da:	f104 0e20 	add.w	lr, r4, #32
 80023de:	4665      	mov	r5, ip
 80023e0:	4626      	mov	r6, r4
 80023e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80023e4:	6028      	str	r0, [r5, #0]
 80023e6:	6069      	str	r1, [r5, #4]
 80023e8:	60aa      	str	r2, [r5, #8]
 80023ea:	60eb      	str	r3, [r5, #12]
 80023ec:	3410      	adds	r4, #16
 80023ee:	f10c 0c10 	add.w	ip, ip, #16
 80023f2:	4574      	cmp	r4, lr
 80023f4:	d1f3      	bne.n	80023de <ssi_handler+0x1472>
 80023f6:	4662      	mov	r2, ip
 80023f8:	4623      	mov	r3, r4
 80023fa:	cb03      	ldmia	r3!, {r0, r1}
 80023fc:	6010      	str	r0, [r2, #0]
 80023fe:	6051      	str	r1, [r2, #4]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	7213      	strb	r3, [r2, #8]
 8002404:	e013      	b.n	800242e <ssi_handler+0x14c2>
		}
		else{
			strcat(listaction, "<option value=\"0\">NONE</option>");
 8002406:	4828      	ldr	r0, [pc, #160]	; (80024a8 <ssi_handler+0x153c>)
 8002408:	f7fd feec 	bl	80001e4 <strlen>
 800240c:	4603      	mov	r3, r0
 800240e:	461a      	mov	r2, r3
 8002410:	4b25      	ldr	r3, [pc, #148]	; (80024a8 <ssi_handler+0x153c>)
 8002412:	4413      	add	r3, r2
 8002414:	4a26      	ldr	r2, [pc, #152]	; (80024b0 <ssi_handler+0x1544>)
 8002416:	461c      	mov	r4, r3
 8002418:	4615      	mov	r5, r2
 800241a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800241c:	6020      	str	r0, [r4, #0]
 800241e:	6061      	str	r1, [r4, #4]
 8002420:	60a2      	str	r2, [r4, #8]
 8002422:	60e3      	str	r3, [r4, #12]
 8002424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002426:	6120      	str	r0, [r4, #16]
 8002428:	6161      	str	r1, [r4, #20]
 800242a:	61a2      	str	r2, [r4, #24]
 800242c:	61e3      	str	r3, [r4, #28]
		}
		if (Tt[tmp_id].t_rept2 == 1) {
 800242e:	4b19      	ldr	r3, [pc, #100]	; (8002494 <ssi_handler+0x1528>)
 8002430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002434:	4619      	mov	r1, r3
 8002436:	4a18      	ldr	r2, [pc, #96]	; (8002498 <ssi_handler+0x152c>)
 8002438:	460b      	mov	r3, r1
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	440b      	add	r3, r1
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	3340      	adds	r3, #64	; 0x40
 8002444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d135      	bne.n	80024b8 <ssi_handler+0x154c>
			strcat(listaction, "<option value=\"1\" selected>Seconds</option>");
 800244c:	4816      	ldr	r0, [pc, #88]	; (80024a8 <ssi_handler+0x153c>)
 800244e:	f7fd fec9 	bl	80001e4 <strlen>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <ssi_handler+0x153c>)
 8002458:	4413      	add	r3, r2
 800245a:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <ssi_handler+0x1548>)
 800245c:	4614      	mov	r4, r2
 800245e:	469c      	mov	ip, r3
 8002460:	f104 0e20 	add.w	lr, r4, #32
 8002464:	4665      	mov	r5, ip
 8002466:	4626      	mov	r6, r4
 8002468:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800246a:	6028      	str	r0, [r5, #0]
 800246c:	6069      	str	r1, [r5, #4]
 800246e:	60aa      	str	r2, [r5, #8]
 8002470:	60eb      	str	r3, [r5, #12]
 8002472:	3410      	adds	r4, #16
 8002474:	f10c 0c10 	add.w	ip, ip, #16
 8002478:	4574      	cmp	r4, lr
 800247a:	d1f3      	bne.n	8002464 <ssi_handler+0x14f8>
 800247c:	4665      	mov	r5, ip
 800247e:	4623      	mov	r3, r4
 8002480:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002482:	6028      	str	r0, [r5, #0]
 8002484:	6069      	str	r1, [r5, #4]
 8002486:	60aa      	str	r2, [r5, #8]
 8002488:	e034      	b.n	80024f4 <ssi_handler+0x1588>
 800248a:	bf00      	nop
 800248c:	20000490 	.word	0x20000490
 8002490:	0801bdb0 	.word	0x0801bdb0
 8002494:	200007ba 	.word	0x200007ba
 8002498:	2000174c 	.word	0x2000174c
 800249c:	200007b8 	.word	0x200007b8
 80024a0:	20000000 	.word	0x20000000
 80024a4:	0801bdb4 	.word	0x0801bdb4
 80024a8:	20006aa0 	.word	0x20006aa0
 80024ac:	0801bdb8 	.word	0x0801bdb8
 80024b0:	0801bde4 	.word	0x0801bde4
 80024b4:	0801be04 	.word	0x0801be04
		}
		else {
			strcat(listaction, "<option value=\"1\">Seconds</option>");
 80024b8:	48b9      	ldr	r0, [pc, #740]	; (80027a0 <ssi_handler+0x1834>)
 80024ba:	f7fd fe93 	bl	80001e4 <strlen>
 80024be:	4603      	mov	r3, r0
 80024c0:	461a      	mov	r2, r3
 80024c2:	4bb7      	ldr	r3, [pc, #732]	; (80027a0 <ssi_handler+0x1834>)
 80024c4:	4413      	add	r3, r2
 80024c6:	4ab7      	ldr	r2, [pc, #732]	; (80027a4 <ssi_handler+0x1838>)
 80024c8:	4614      	mov	r4, r2
 80024ca:	469c      	mov	ip, r3
 80024cc:	f104 0e20 	add.w	lr, r4, #32
 80024d0:	4665      	mov	r5, ip
 80024d2:	4626      	mov	r6, r4
 80024d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80024d6:	6028      	str	r0, [r5, #0]
 80024d8:	6069      	str	r1, [r5, #4]
 80024da:	60aa      	str	r2, [r5, #8]
 80024dc:	60eb      	str	r3, [r5, #12]
 80024de:	3410      	adds	r4, #16
 80024e0:	f10c 0c10 	add.w	ip, ip, #16
 80024e4:	4574      	cmp	r4, lr
 80024e6:	d1f3      	bne.n	80024d0 <ssi_handler+0x1564>
 80024e8:	4663      	mov	r3, ip
 80024ea:	4622      	mov	r2, r4
 80024ec:	8811      	ldrh	r1, [r2, #0]
 80024ee:	7892      	ldrb	r2, [r2, #2]
 80024f0:	8019      	strh	r1, [r3, #0]
 80024f2:	709a      	strb	r2, [r3, #2]
		}

		if (Tt[tmp_id].t_rept2 == 2) {
 80024f4:	4bac      	ldr	r3, [pc, #688]	; (80027a8 <ssi_handler+0x183c>)
 80024f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fa:	4619      	mov	r1, r3
 80024fc:	4aab      	ldr	r2, [pc, #684]	; (80027ac <ssi_handler+0x1840>)
 80024fe:	460b      	mov	r3, r1
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	440b      	add	r3, r1
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	3340      	adds	r3, #64	; 0x40
 800250a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250e:	2b02      	cmp	r3, #2
 8002510:	d11e      	bne.n	8002550 <ssi_handler+0x15e4>
			strcat(listaction, "<option value=\"2\" selected>Minutes</option>");
 8002512:	48a3      	ldr	r0, [pc, #652]	; (80027a0 <ssi_handler+0x1834>)
 8002514:	f7fd fe66 	bl	80001e4 <strlen>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	4ba0      	ldr	r3, [pc, #640]	; (80027a0 <ssi_handler+0x1834>)
 800251e:	4413      	add	r3, r2
 8002520:	4aa3      	ldr	r2, [pc, #652]	; (80027b0 <ssi_handler+0x1844>)
 8002522:	4614      	mov	r4, r2
 8002524:	469c      	mov	ip, r3
 8002526:	f104 0e20 	add.w	lr, r4, #32
 800252a:	4665      	mov	r5, ip
 800252c:	4626      	mov	r6, r4
 800252e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002530:	6028      	str	r0, [r5, #0]
 8002532:	6069      	str	r1, [r5, #4]
 8002534:	60aa      	str	r2, [r5, #8]
 8002536:	60eb      	str	r3, [r5, #12]
 8002538:	3410      	adds	r4, #16
 800253a:	f10c 0c10 	add.w	ip, ip, #16
 800253e:	4574      	cmp	r4, lr
 8002540:	d1f3      	bne.n	800252a <ssi_handler+0x15be>
 8002542:	4665      	mov	r5, ip
 8002544:	4623      	mov	r3, r4
 8002546:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002548:	6028      	str	r0, [r5, #0]
 800254a:	6069      	str	r1, [r5, #4]
 800254c:	60aa      	str	r2, [r5, #8]
 800254e:	e01d      	b.n	800258c <ssi_handler+0x1620>
		}
		else {
			strcat(listaction, "<option value=\"2\">Minutes</option>");
 8002550:	4893      	ldr	r0, [pc, #588]	; (80027a0 <ssi_handler+0x1834>)
 8002552:	f7fd fe47 	bl	80001e4 <strlen>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	4b91      	ldr	r3, [pc, #580]	; (80027a0 <ssi_handler+0x1834>)
 800255c:	4413      	add	r3, r2
 800255e:	4a95      	ldr	r2, [pc, #596]	; (80027b4 <ssi_handler+0x1848>)
 8002560:	4614      	mov	r4, r2
 8002562:	469c      	mov	ip, r3
 8002564:	f104 0e20 	add.w	lr, r4, #32
 8002568:	4665      	mov	r5, ip
 800256a:	4626      	mov	r6, r4
 800256c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800256e:	6028      	str	r0, [r5, #0]
 8002570:	6069      	str	r1, [r5, #4]
 8002572:	60aa      	str	r2, [r5, #8]
 8002574:	60eb      	str	r3, [r5, #12]
 8002576:	3410      	adds	r4, #16
 8002578:	f10c 0c10 	add.w	ip, ip, #16
 800257c:	4574      	cmp	r4, lr
 800257e:	d1f3      	bne.n	8002568 <ssi_handler+0x15fc>
 8002580:	4663      	mov	r3, ip
 8002582:	4622      	mov	r2, r4
 8002584:	8811      	ldrh	r1, [r2, #0]
 8002586:	7892      	ldrb	r2, [r2, #2]
 8002588:	8019      	strh	r1, [r3, #0]
 800258a:	709a      	strb	r2, [r3, #2]
		}
		if (Tt[tmp_id].t_rept2 == 3) {
 800258c:	4b86      	ldr	r3, [pc, #536]	; (80027a8 <ssi_handler+0x183c>)
 800258e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002592:	4619      	mov	r1, r3
 8002594:	4a85      	ldr	r2, [pc, #532]	; (80027ac <ssi_handler+0x1840>)
 8002596:	460b      	mov	r3, r1
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	440b      	add	r3, r1
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	3340      	adds	r3, #64	; 0x40
 80025a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d11f      	bne.n	80025ea <ssi_handler+0x167e>
			strcat(listaction, "<option value=\"3\" selected>Hours</option>");
 80025aa:	487d      	ldr	r0, [pc, #500]	; (80027a0 <ssi_handler+0x1834>)
 80025ac:	f7fd fe1a 	bl	80001e4 <strlen>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b7a      	ldr	r3, [pc, #488]	; (80027a0 <ssi_handler+0x1834>)
 80025b6:	4413      	add	r3, r2
 80025b8:	4a7f      	ldr	r2, [pc, #508]	; (80027b8 <ssi_handler+0x184c>)
 80025ba:	4614      	mov	r4, r2
 80025bc:	469c      	mov	ip, r3
 80025be:	f104 0e20 	add.w	lr, r4, #32
 80025c2:	4665      	mov	r5, ip
 80025c4:	4626      	mov	r6, r4
 80025c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80025c8:	6028      	str	r0, [r5, #0]
 80025ca:	6069      	str	r1, [r5, #4]
 80025cc:	60aa      	str	r2, [r5, #8]
 80025ce:	60eb      	str	r3, [r5, #12]
 80025d0:	3410      	adds	r4, #16
 80025d2:	f10c 0c10 	add.w	ip, ip, #16
 80025d6:	4574      	cmp	r4, lr
 80025d8:	d1f3      	bne.n	80025c2 <ssi_handler+0x1656>
 80025da:	4662      	mov	r2, ip
 80025dc:	4623      	mov	r3, r4
 80025de:	cb03      	ldmia	r3!, {r0, r1}
 80025e0:	6010      	str	r0, [r2, #0]
 80025e2:	6051      	str	r1, [r2, #4]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	8113      	strh	r3, [r2, #8]
 80025e8:	e01b      	b.n	8002622 <ssi_handler+0x16b6>
		}
		else {
			strcat(listaction, "<option value=\"3\">Hours</option>");
 80025ea:	486d      	ldr	r0, [pc, #436]	; (80027a0 <ssi_handler+0x1834>)
 80025ec:	f7fd fdfa 	bl	80001e4 <strlen>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <ssi_handler+0x1834>)
 80025f6:	4413      	add	r3, r2
 80025f8:	4a70      	ldr	r2, [pc, #448]	; (80027bc <ssi_handler+0x1850>)
 80025fa:	4614      	mov	r4, r2
 80025fc:	469c      	mov	ip, r3
 80025fe:	f104 0e20 	add.w	lr, r4, #32
 8002602:	4665      	mov	r5, ip
 8002604:	4626      	mov	r6, r4
 8002606:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002608:	6028      	str	r0, [r5, #0]
 800260a:	6069      	str	r1, [r5, #4]
 800260c:	60aa      	str	r2, [r5, #8]
 800260e:	60eb      	str	r3, [r5, #12]
 8002610:	3410      	adds	r4, #16
 8002612:	f10c 0c10 	add.w	ip, ip, #16
 8002616:	4574      	cmp	r4, lr
 8002618:	d1f3      	bne.n	8002602 <ssi_handler+0x1696>
 800261a:	4663      	mov	r3, ip
 800261c:	4622      	mov	r2, r4
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	701a      	strb	r2, [r3, #0]
		}
		if (Tt[tmp_id].t_rept2 == 4) {
 8002622:	4b61      	ldr	r3, [pc, #388]	; (80027a8 <ssi_handler+0x183c>)
 8002624:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002628:	4619      	mov	r1, r3
 800262a:	4a60      	ldr	r2, [pc, #384]	; (80027ac <ssi_handler+0x1840>)
 800262c:	460b      	mov	r3, r1
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	440b      	add	r3, r1
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3340      	adds	r3, #64	; 0x40
 8002638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263c:	2b04      	cmp	r3, #4
 800263e:	d11f      	bne.n	8002680 <ssi_handler+0x1714>
			strcat(listaction, "<option value=\"4\" selected>Days</option>");
 8002640:	4857      	ldr	r0, [pc, #348]	; (80027a0 <ssi_handler+0x1834>)
 8002642:	f7fd fdcf 	bl	80001e4 <strlen>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	4b55      	ldr	r3, [pc, #340]	; (80027a0 <ssi_handler+0x1834>)
 800264c:	4413      	add	r3, r2
 800264e:	4a5c      	ldr	r2, [pc, #368]	; (80027c0 <ssi_handler+0x1854>)
 8002650:	4614      	mov	r4, r2
 8002652:	469c      	mov	ip, r3
 8002654:	f104 0e20 	add.w	lr, r4, #32
 8002658:	4665      	mov	r5, ip
 800265a:	4626      	mov	r6, r4
 800265c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800265e:	6028      	str	r0, [r5, #0]
 8002660:	6069      	str	r1, [r5, #4]
 8002662:	60aa      	str	r2, [r5, #8]
 8002664:	60eb      	str	r3, [r5, #12]
 8002666:	3410      	adds	r4, #16
 8002668:	f10c 0c10 	add.w	ip, ip, #16
 800266c:	4574      	cmp	r4, lr
 800266e:	d1f3      	bne.n	8002658 <ssi_handler+0x16ec>
 8002670:	4662      	mov	r2, ip
 8002672:	4623      	mov	r3, r4
 8002674:	cb03      	ldmia	r3!, {r0, r1}
 8002676:	6010      	str	r0, [r2, #0]
 8002678:	6051      	str	r1, [r2, #4]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	7213      	strb	r3, [r2, #8]
 800267e:	e013      	b.n	80026a8 <ssi_handler+0x173c>
		}
		else {
			strcat(listaction, "<option value=\"4\">Days</option>");
 8002680:	4847      	ldr	r0, [pc, #284]	; (80027a0 <ssi_handler+0x1834>)
 8002682:	f7fd fdaf 	bl	80001e4 <strlen>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	4b45      	ldr	r3, [pc, #276]	; (80027a0 <ssi_handler+0x1834>)
 800268c:	4413      	add	r3, r2
 800268e:	4a4d      	ldr	r2, [pc, #308]	; (80027c4 <ssi_handler+0x1858>)
 8002690:	461c      	mov	r4, r3
 8002692:	4615      	mov	r5, r2
 8002694:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002696:	6020      	str	r0, [r4, #0]
 8002698:	6061      	str	r1, [r4, #4]
 800269a:	60a2      	str	r2, [r4, #8]
 800269c:	60e3      	str	r3, [r4, #12]
 800269e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a0:	6120      	str	r0, [r4, #16]
 80026a2:	6161      	str	r1, [r4, #20]
 80026a4:	61a2      	str	r2, [r4, #24]
 80026a6:	61e3      	str	r3, [r4, #28]
		}
		if (Tt[tmp_id].t_rept2 == 5) {
 80026a8:	4b3f      	ldr	r3, [pc, #252]	; (80027a8 <ssi_handler+0x183c>)
 80026aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ae:	4619      	mov	r1, r3
 80026b0:	4a3e      	ldr	r2, [pc, #248]	; (80027ac <ssi_handler+0x1840>)
 80026b2:	460b      	mov	r3, r1
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	440b      	add	r3, r1
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	3340      	adds	r3, #64	; 0x40
 80026be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d11f      	bne.n	8002706 <ssi_handler+0x179a>
			strcat(listaction, "<option value=\"5\" selected>Weeks</option>");
 80026c6:	4836      	ldr	r0, [pc, #216]	; (80027a0 <ssi_handler+0x1834>)
 80026c8:	f7fd fd8c 	bl	80001e4 <strlen>
 80026cc:	4603      	mov	r3, r0
 80026ce:	461a      	mov	r2, r3
 80026d0:	4b33      	ldr	r3, [pc, #204]	; (80027a0 <ssi_handler+0x1834>)
 80026d2:	4413      	add	r3, r2
 80026d4:	4a3c      	ldr	r2, [pc, #240]	; (80027c8 <ssi_handler+0x185c>)
 80026d6:	4614      	mov	r4, r2
 80026d8:	469c      	mov	ip, r3
 80026da:	f104 0e20 	add.w	lr, r4, #32
 80026de:	4665      	mov	r5, ip
 80026e0:	4626      	mov	r6, r4
 80026e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026e4:	6028      	str	r0, [r5, #0]
 80026e6:	6069      	str	r1, [r5, #4]
 80026e8:	60aa      	str	r2, [r5, #8]
 80026ea:	60eb      	str	r3, [r5, #12]
 80026ec:	3410      	adds	r4, #16
 80026ee:	f10c 0c10 	add.w	ip, ip, #16
 80026f2:	4574      	cmp	r4, lr
 80026f4:	d1f3      	bne.n	80026de <ssi_handler+0x1772>
 80026f6:	4662      	mov	r2, ip
 80026f8:	4623      	mov	r3, r4
 80026fa:	cb03      	ldmia	r3!, {r0, r1}
 80026fc:	6010      	str	r0, [r2, #0]
 80026fe:	6051      	str	r1, [r2, #4]
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	8113      	strh	r3, [r2, #8]
 8002704:	e01b      	b.n	800273e <ssi_handler+0x17d2>
		}
		else {
			strcat(listaction, "<option value=\"5\">Weeks</option>");
 8002706:	4826      	ldr	r0, [pc, #152]	; (80027a0 <ssi_handler+0x1834>)
 8002708:	f7fd fd6c 	bl	80001e4 <strlen>
 800270c:	4603      	mov	r3, r0
 800270e:	461a      	mov	r2, r3
 8002710:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <ssi_handler+0x1834>)
 8002712:	4413      	add	r3, r2
 8002714:	4a2d      	ldr	r2, [pc, #180]	; (80027cc <ssi_handler+0x1860>)
 8002716:	4614      	mov	r4, r2
 8002718:	469c      	mov	ip, r3
 800271a:	f104 0e20 	add.w	lr, r4, #32
 800271e:	4665      	mov	r5, ip
 8002720:	4626      	mov	r6, r4
 8002722:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002724:	6028      	str	r0, [r5, #0]
 8002726:	6069      	str	r1, [r5, #4]
 8002728:	60aa      	str	r2, [r5, #8]
 800272a:	60eb      	str	r3, [r5, #12]
 800272c:	3410      	adds	r4, #16
 800272e:	f10c 0c10 	add.w	ip, ip, #16
 8002732:	4574      	cmp	r4, lr
 8002734:	d1f3      	bne.n	800271e <ssi_handler+0x17b2>
 8002736:	4663      	mov	r3, ip
 8002738:	4622      	mov	r2, r4
 800273a:	7812      	ldrb	r2, [r2, #0]
 800273c:	701a      	strb	r2, [r3, #0]
		}
		if (Tt[tmp_id].t_rept2 == 6) {
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <ssi_handler+0x183c>)
 8002740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002744:	4619      	mov	r1, r3
 8002746:	4a19      	ldr	r2, [pc, #100]	; (80027ac <ssi_handler+0x1840>)
 8002748:	460b      	mov	r3, r1
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	440b      	add	r3, r1
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	3340      	adds	r3, #64	; 0x40
 8002754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002758:	2b06      	cmp	r3, #6
 800275a:	d13b      	bne.n	80027d4 <ssi_handler+0x1868>
			strcat(listaction, "<option value=\"6\" selected>Months</option>");
 800275c:	4810      	ldr	r0, [pc, #64]	; (80027a0 <ssi_handler+0x1834>)
 800275e:	f7fd fd41 	bl	80001e4 <strlen>
 8002762:	4603      	mov	r3, r0
 8002764:	461a      	mov	r2, r3
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <ssi_handler+0x1834>)
 8002768:	4413      	add	r3, r2
 800276a:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <ssi_handler+0x1864>)
 800276c:	4614      	mov	r4, r2
 800276e:	469c      	mov	ip, r3
 8002770:	f104 0e20 	add.w	lr, r4, #32
 8002774:	4665      	mov	r5, ip
 8002776:	4626      	mov	r6, r4
 8002778:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800277a:	6028      	str	r0, [r5, #0]
 800277c:	6069      	str	r1, [r5, #4]
 800277e:	60aa      	str	r2, [r5, #8]
 8002780:	60eb      	str	r3, [r5, #12]
 8002782:	3410      	adds	r4, #16
 8002784:	f10c 0c10 	add.w	ip, ip, #16
 8002788:	4574      	cmp	r4, lr
 800278a:	d1f3      	bne.n	8002774 <ssi_handler+0x1808>
 800278c:	4662      	mov	r2, ip
 800278e:	4623      	mov	r3, r4
 8002790:	cb03      	ldmia	r3!, {r0, r1}
 8002792:	6010      	str	r0, [r2, #0]
 8002794:	6051      	str	r1, [r2, #4]
 8002796:	8819      	ldrh	r1, [r3, #0]
 8002798:	789b      	ldrb	r3, [r3, #2]
 800279a:	8111      	strh	r1, [r2, #8]
 800279c:	7293      	strb	r3, [r2, #10]
 800279e:	e035      	b.n	800280c <ssi_handler+0x18a0>
 80027a0:	20006aa0 	.word	0x20006aa0
 80027a4:	0801be30 	.word	0x0801be30
 80027a8:	200007ba 	.word	0x200007ba
 80027ac:	2000174c 	.word	0x2000174c
 80027b0:	0801be54 	.word	0x0801be54
 80027b4:	0801be80 	.word	0x0801be80
 80027b8:	0801bea4 	.word	0x0801bea4
 80027bc:	0801bed0 	.word	0x0801bed0
 80027c0:	0801bef4 	.word	0x0801bef4
 80027c4:	0801bf20 	.word	0x0801bf20
 80027c8:	0801bf40 	.word	0x0801bf40
 80027cc:	0801bf6c 	.word	0x0801bf6c
 80027d0:	0801bf90 	.word	0x0801bf90
		}
		else {
			strcat(listaction, "<option value=\"6\">Months</option>");
 80027d4:	48c9      	ldr	r0, [pc, #804]	; (8002afc <ssi_handler+0x1b90>)
 80027d6:	f7fd fd05 	bl	80001e4 <strlen>
 80027da:	4603      	mov	r3, r0
 80027dc:	461a      	mov	r2, r3
 80027de:	4bc7      	ldr	r3, [pc, #796]	; (8002afc <ssi_handler+0x1b90>)
 80027e0:	4413      	add	r3, r2
 80027e2:	4ac7      	ldr	r2, [pc, #796]	; (8002b00 <ssi_handler+0x1b94>)
 80027e4:	4614      	mov	r4, r2
 80027e6:	469c      	mov	ip, r3
 80027e8:	f104 0e20 	add.w	lr, r4, #32
 80027ec:	4665      	mov	r5, ip
 80027ee:	4626      	mov	r6, r4
 80027f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80027f2:	6028      	str	r0, [r5, #0]
 80027f4:	6069      	str	r1, [r5, #4]
 80027f6:	60aa      	str	r2, [r5, #8]
 80027f8:	60eb      	str	r3, [r5, #12]
 80027fa:	3410      	adds	r4, #16
 80027fc:	f10c 0c10 	add.w	ip, ip, #16
 8002800:	4574      	cmp	r4, lr
 8002802:	d1f3      	bne.n	80027ec <ssi_handler+0x1880>
 8002804:	4662      	mov	r2, ip
 8002806:	4623      	mov	r3, r4
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	8013      	strh	r3, [r2, #0]
		}
		if(Tt[tmp_id].t_rept2 == 7) {
 800280c:	4bbd      	ldr	r3, [pc, #756]	; (8002b04 <ssi_handler+0x1b98>)
 800280e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002812:	4619      	mov	r1, r3
 8002814:	4abc      	ldr	r2, [pc, #752]	; (8002b08 <ssi_handler+0x1b9c>)
 8002816:	460b      	mov	r3, r1
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	440b      	add	r3, r1
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	3340      	adds	r3, #64	; 0x40
 8002822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002826:	2b07      	cmp	r3, #7
 8002828:	d11f      	bne.n	800286a <ssi_handler+0x18fe>
			strcat(listaction, "<option value=\"7\" selected>Years</option>");
 800282a:	48b4      	ldr	r0, [pc, #720]	; (8002afc <ssi_handler+0x1b90>)
 800282c:	f7fd fcda 	bl	80001e4 <strlen>
 8002830:	4603      	mov	r3, r0
 8002832:	461a      	mov	r2, r3
 8002834:	4bb1      	ldr	r3, [pc, #708]	; (8002afc <ssi_handler+0x1b90>)
 8002836:	4413      	add	r3, r2
 8002838:	4ab4      	ldr	r2, [pc, #720]	; (8002b0c <ssi_handler+0x1ba0>)
 800283a:	4614      	mov	r4, r2
 800283c:	469c      	mov	ip, r3
 800283e:	f104 0e20 	add.w	lr, r4, #32
 8002842:	4665      	mov	r5, ip
 8002844:	4626      	mov	r6, r4
 8002846:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002848:	6028      	str	r0, [r5, #0]
 800284a:	6069      	str	r1, [r5, #4]
 800284c:	60aa      	str	r2, [r5, #8]
 800284e:	60eb      	str	r3, [r5, #12]
 8002850:	3410      	adds	r4, #16
 8002852:	f10c 0c10 	add.w	ip, ip, #16
 8002856:	4574      	cmp	r4, lr
 8002858:	d1f3      	bne.n	8002842 <ssi_handler+0x18d6>
 800285a:	4662      	mov	r2, ip
 800285c:	4623      	mov	r3, r4
 800285e:	cb03      	ldmia	r3!, {r0, r1}
 8002860:	6010      	str	r0, [r2, #0]
 8002862:	6051      	str	r1, [r2, #4]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	8113      	strh	r3, [r2, #8]
 8002868:	e01b      	b.n	80028a2 <ssi_handler+0x1936>
		}
		else {
			strcat(listaction, "<option value=\"7\">Years</option>");
 800286a:	48a4      	ldr	r0, [pc, #656]	; (8002afc <ssi_handler+0x1b90>)
 800286c:	f7fd fcba 	bl	80001e4 <strlen>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4ba1      	ldr	r3, [pc, #644]	; (8002afc <ssi_handler+0x1b90>)
 8002876:	4413      	add	r3, r2
 8002878:	4aa5      	ldr	r2, [pc, #660]	; (8002b10 <ssi_handler+0x1ba4>)
 800287a:	4614      	mov	r4, r2
 800287c:	469c      	mov	ip, r3
 800287e:	f104 0e20 	add.w	lr, r4, #32
 8002882:	4665      	mov	r5, ip
 8002884:	4626      	mov	r6, r4
 8002886:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002888:	6028      	str	r0, [r5, #0]
 800288a:	6069      	str	r1, [r5, #4]
 800288c:	60aa      	str	r2, [r5, #8]
 800288e:	60eb      	str	r3, [r5, #12]
 8002890:	3410      	adds	r4, #16
 8002892:	f10c 0c10 	add.w	ip, ip, #16
 8002896:	4574      	cmp	r4, lr
 8002898:	d1f3      	bne.n	8002882 <ssi_handler+0x1916>
 800289a:	4663      	mov	r3, ip
 800289c:	4622      	mov	r2, r4
 800289e:	7812      	ldrb	r2, [r2, #0]
 80028a0:	701a      	strb	r2, [r3, #0]
		}
		sprintf(pcInsert,"%s",listaction);
 80028a2:	4a96      	ldr	r2, [pc, #600]	; (8002afc <ssi_handler+0x1b90>)
 80028a4:	499b      	ldr	r1, [pc, #620]	; (8002b14 <ssi_handler+0x1ba8>)
 80028a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028a8:	f014 ff7c 	bl	80177a4 <siprintf>
		memset(listaction, '\0', sizeof(listaction)); // Обнулим istaction
 80028ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80028b0:	2100      	movs	r1, #0
 80028b2:	4892      	ldr	r0, [pc, #584]	; (8002afc <ssi_handler+0x1b90>)
 80028b4:	f014 fa02 	bl	8016cbc <memset>
    	return strlen(pcInsert);
 80028b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ba:	f7fd fc93 	bl	80001e4 <strlen>
 80028be:	4603      	mov	r3, r0
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	e193      	b.n	8002bec <ssi_handler+0x1c80>
		break;
	case 35: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].t_action == 0){
 80028c4:	4b8f      	ldr	r3, [pc, #572]	; (8002b04 <ssi_handler+0x1b98>)
 80028c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ca:	4619      	mov	r1, r3
 80028cc:	4a8e      	ldr	r2, [pc, #568]	; (8002b08 <ssi_handler+0x1b9c>)
 80028ce:	460b      	mov	r3, r1
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	440b      	add	r3, r1
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	3318      	adds	r3, #24
 80028da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d11d      	bne.n	800291e <ssi_handler+0x19b2>
			strcat(listaction, "<option value=\"0\" selected>OFF</option>"); // Блок "option" генерируем для HTML
 80028e2:	4886      	ldr	r0, [pc, #536]	; (8002afc <ssi_handler+0x1b90>)
 80028e4:	f7fd fc7e 	bl	80001e4 <strlen>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	4b83      	ldr	r3, [pc, #524]	; (8002afc <ssi_handler+0x1b90>)
 80028ee:	4413      	add	r3, r2
 80028f0:	4a89      	ldr	r2, [pc, #548]	; (8002b18 <ssi_handler+0x1bac>)
 80028f2:	4614      	mov	r4, r2
 80028f4:	469c      	mov	ip, r3
 80028f6:	f104 0e20 	add.w	lr, r4, #32
 80028fa:	4665      	mov	r5, ip
 80028fc:	4626      	mov	r6, r4
 80028fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002900:	6028      	str	r0, [r5, #0]
 8002902:	6069      	str	r1, [r5, #4]
 8002904:	60aa      	str	r2, [r5, #8]
 8002906:	60eb      	str	r3, [r5, #12]
 8002908:	3410      	adds	r4, #16
 800290a:	f10c 0c10 	add.w	ip, ip, #16
 800290e:	4574      	cmp	r4, lr
 8002910:	d1f3      	bne.n	80028fa <ssi_handler+0x198e>
 8002912:	4662      	mov	r2, ip
 8002914:	4623      	mov	r3, r4
 8002916:	cb03      	ldmia	r3!, {r0, r1}
 8002918:	6010      	str	r0, [r2, #0]
 800291a:	6051      	str	r1, [r2, #4]
 800291c:	e017      	b.n	800294e <ssi_handler+0x19e2>
		}
		else{
			strcat(listaction, "<option value=\"0\">OFF</option>");
 800291e:	4877      	ldr	r0, [pc, #476]	; (8002afc <ssi_handler+0x1b90>)
 8002920:	f7fd fc60 	bl	80001e4 <strlen>
 8002924:	4603      	mov	r3, r0
 8002926:	461a      	mov	r2, r3
 8002928:	4b74      	ldr	r3, [pc, #464]	; (8002afc <ssi_handler+0x1b90>)
 800292a:	4413      	add	r3, r2
 800292c:	4a7b      	ldr	r2, [pc, #492]	; (8002b1c <ssi_handler+0x1bb0>)
 800292e:	461d      	mov	r5, r3
 8002930:	4614      	mov	r4, r2
 8002932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002934:	6028      	str	r0, [r5, #0]
 8002936:	6069      	str	r1, [r5, #4]
 8002938:	60aa      	str	r2, [r5, #8]
 800293a:	60eb      	str	r3, [r5, #12]
 800293c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800293e:	6128      	str	r0, [r5, #16]
 8002940:	6169      	str	r1, [r5, #20]
 8002942:	61aa      	str	r2, [r5, #24]
 8002944:	8823      	ldrh	r3, [r4, #0]
 8002946:	78a2      	ldrb	r2, [r4, #2]
 8002948:	83ab      	strh	r3, [r5, #28]
 800294a:	4613      	mov	r3, r2
 800294c:	77ab      	strb	r3, [r5, #30]
		}
		if (Tt[tmp_id].t_action == 1) {
 800294e:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <ssi_handler+0x1b98>)
 8002950:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002954:	4619      	mov	r1, r3
 8002956:	4a6c      	ldr	r2, [pc, #432]	; (8002b08 <ssi_handler+0x1b9c>)
 8002958:	460b      	mov	r3, r1
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	440b      	add	r3, r1
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	3318      	adds	r3, #24
 8002964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d120      	bne.n	80029ae <ssi_handler+0x1a42>
			strcat(listaction, "<option value=\"1\" selected>ON</option>");
 800296c:	4863      	ldr	r0, [pc, #396]	; (8002afc <ssi_handler+0x1b90>)
 800296e:	f7fd fc39 	bl	80001e4 <strlen>
 8002972:	4603      	mov	r3, r0
 8002974:	461a      	mov	r2, r3
 8002976:	4b61      	ldr	r3, [pc, #388]	; (8002afc <ssi_handler+0x1b90>)
 8002978:	4413      	add	r3, r2
 800297a:	4a69      	ldr	r2, [pc, #420]	; (8002b20 <ssi_handler+0x1bb4>)
 800297c:	4614      	mov	r4, r2
 800297e:	469c      	mov	ip, r3
 8002980:	f104 0e20 	add.w	lr, r4, #32
 8002984:	4665      	mov	r5, ip
 8002986:	4626      	mov	r6, r4
 8002988:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800298a:	6028      	str	r0, [r5, #0]
 800298c:	6069      	str	r1, [r5, #4]
 800298e:	60aa      	str	r2, [r5, #8]
 8002990:	60eb      	str	r3, [r5, #12]
 8002992:	3410      	adds	r4, #16
 8002994:	f10c 0c10 	add.w	ip, ip, #16
 8002998:	4574      	cmp	r4, lr
 800299a:	d1f3      	bne.n	8002984 <ssi_handler+0x1a18>
 800299c:	4663      	mov	r3, ip
 800299e:	4622      	mov	r2, r4
 80029a0:	6810      	ldr	r0, [r2, #0]
 80029a2:	6018      	str	r0, [r3, #0]
 80029a4:	8891      	ldrh	r1, [r2, #4]
 80029a6:	7992      	ldrb	r2, [r2, #6]
 80029a8:	8099      	strh	r1, [r3, #4]
 80029aa:	719a      	strb	r2, [r3, #6]
 80029ac:	e014      	b.n	80029d8 <ssi_handler+0x1a6c>
		}
		else {
			strcat(listaction, "<option value=\"1\">ON</option>");
 80029ae:	4853      	ldr	r0, [pc, #332]	; (8002afc <ssi_handler+0x1b90>)
 80029b0:	f7fd fc18 	bl	80001e4 <strlen>
 80029b4:	4603      	mov	r3, r0
 80029b6:	461a      	mov	r2, r3
 80029b8:	4b50      	ldr	r3, [pc, #320]	; (8002afc <ssi_handler+0x1b90>)
 80029ba:	4413      	add	r3, r2
 80029bc:	4a59      	ldr	r2, [pc, #356]	; (8002b24 <ssi_handler+0x1bb8>)
 80029be:	461d      	mov	r5, r3
 80029c0:	4614      	mov	r4, r2
 80029c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c4:	6028      	str	r0, [r5, #0]
 80029c6:	6069      	str	r1, [r5, #4]
 80029c8:	60aa      	str	r2, [r5, #8]
 80029ca:	60eb      	str	r3, [r5, #12]
 80029cc:	cc07      	ldmia	r4!, {r0, r1, r2}
 80029ce:	6128      	str	r0, [r5, #16]
 80029d0:	6169      	str	r1, [r5, #20]
 80029d2:	61aa      	str	r2, [r5, #24]
 80029d4:	8823      	ldrh	r3, [r4, #0]
 80029d6:	83ab      	strh	r3, [r5, #28]
		}

		if (Tt[tmp_id].t_action == 2) {
 80029d8:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <ssi_handler+0x1b98>)
 80029da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029de:	4619      	mov	r1, r3
 80029e0:	4a49      	ldr	r2, [pc, #292]	; (8002b08 <ssi_handler+0x1b9c>)
 80029e2:	460b      	mov	r3, r1
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	440b      	add	r3, r1
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3318      	adds	r3, #24
 80029ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d121      	bne.n	8002a3a <ssi_handler+0x1ace>
			strcat(listaction, "<option value=\"2\" selected>TOGGLE</option>");
 80029f6:	4841      	ldr	r0, [pc, #260]	; (8002afc <ssi_handler+0x1b90>)
 80029f8:	f7fd fbf4 	bl	80001e4 <strlen>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461a      	mov	r2, r3
 8002a00:	4b3e      	ldr	r3, [pc, #248]	; (8002afc <ssi_handler+0x1b90>)
 8002a02:	4413      	add	r3, r2
 8002a04:	4a48      	ldr	r2, [pc, #288]	; (8002b28 <ssi_handler+0x1bbc>)
 8002a06:	4614      	mov	r4, r2
 8002a08:	469c      	mov	ip, r3
 8002a0a:	f104 0e20 	add.w	lr, r4, #32
 8002a0e:	4665      	mov	r5, ip
 8002a10:	4626      	mov	r6, r4
 8002a12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a14:	6028      	str	r0, [r5, #0]
 8002a16:	6069      	str	r1, [r5, #4]
 8002a18:	60aa      	str	r2, [r5, #8]
 8002a1a:	60eb      	str	r3, [r5, #12]
 8002a1c:	3410      	adds	r4, #16
 8002a1e:	f10c 0c10 	add.w	ip, ip, #16
 8002a22:	4574      	cmp	r4, lr
 8002a24:	d1f3      	bne.n	8002a0e <ssi_handler+0x1aa2>
 8002a26:	4662      	mov	r2, ip
 8002a28:	4623      	mov	r3, r4
 8002a2a:	cb03      	ldmia	r3!, {r0, r1}
 8002a2c:	6010      	str	r0, [r2, #0]
 8002a2e:	6051      	str	r1, [r2, #4]
 8002a30:	8819      	ldrh	r1, [r3, #0]
 8002a32:	789b      	ldrb	r3, [r3, #2]
 8002a34:	8111      	strh	r1, [r2, #8]
 8002a36:	7293      	strb	r3, [r2, #10]
 8002a38:	e01b      	b.n	8002a72 <ssi_handler+0x1b06>
		}
		else {
			strcat(listaction, "<option value=\"2\">TOGGLE</option>");
 8002a3a:	4830      	ldr	r0, [pc, #192]	; (8002afc <ssi_handler+0x1b90>)
 8002a3c:	f7fd fbd2 	bl	80001e4 <strlen>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <ssi_handler+0x1b90>)
 8002a46:	4413      	add	r3, r2
 8002a48:	4a38      	ldr	r2, [pc, #224]	; (8002b2c <ssi_handler+0x1bc0>)
 8002a4a:	4614      	mov	r4, r2
 8002a4c:	469c      	mov	ip, r3
 8002a4e:	f104 0e20 	add.w	lr, r4, #32
 8002a52:	4665      	mov	r5, ip
 8002a54:	4626      	mov	r6, r4
 8002a56:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002a58:	6028      	str	r0, [r5, #0]
 8002a5a:	6069      	str	r1, [r5, #4]
 8002a5c:	60aa      	str	r2, [r5, #8]
 8002a5e:	60eb      	str	r3, [r5, #12]
 8002a60:	3410      	adds	r4, #16
 8002a62:	f10c 0c10 	add.w	ip, ip, #16
 8002a66:	4574      	cmp	r4, lr
 8002a68:	d1f3      	bne.n	8002a52 <ssi_handler+0x1ae6>
 8002a6a:	4662      	mov	r2, ip
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	8013      	strh	r3, [r2, #0]
		}
		sprintf(pcInsert,"%s",listaction);
 8002a72:	4a22      	ldr	r2, [pc, #136]	; (8002afc <ssi_handler+0x1b90>)
 8002a74:	4927      	ldr	r1, [pc, #156]	; (8002b14 <ssi_handler+0x1ba8>)
 8002a76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a78:	f014 fe94 	bl	80177a4 <siprintf>
		memset(listaction, '\0', sizeof(listaction)); // Обнулим istaction
 8002a7c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002a80:	2100      	movs	r1, #0
 8002a82:	481e      	ldr	r0, [pc, #120]	; (8002afc <ssi_handler+0x1b90>)
 8002a84:	f014 f91a 	bl	8016cbc <memset>
    	return strlen(pcInsert);
 8002a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a8a:	f7fd fbab 	bl	80001e4 <strlen>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	e0ab      	b.n	8002bec <ssi_handler+0x1c80>
		break;

	case 36: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].imm_ly == 1){
 8002a94:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <ssi_handler+0x1b98>)
 8002a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <ssi_handler+0x1b9c>)
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	440b      	add	r3, r1
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d105      	bne.n	8002abe <ssi_handler+0x1b52>
		sprintf(pcInsert, "%s", "checked");
 8002ab2:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <ssi_handler+0x1bc4>)
 8002ab4:	4917      	ldr	r1, [pc, #92]	; (8002b14 <ssi_handler+0x1ba8>)
 8002ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ab8:	f014 fe74 	bl	80177a4 <siprintf>
 8002abc:	e004      	b.n	8002ac8 <ssi_handler+0x1b5c>
		}
		else{
			sprintf(pcInsert, "%s", " ");
 8002abe:	4a1d      	ldr	r2, [pc, #116]	; (8002b34 <ssi_handler+0x1bc8>)
 8002ac0:	4914      	ldr	r1, [pc, #80]	; (8002b14 <ssi_handler+0x1ba8>)
 8002ac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ac4:	f014 fe6e 	bl	80177a4 <siprintf>
		}
		return strlen(pcInsert);
 8002ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aca:	f7fd fb8b 	bl	80001e4 <strlen>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	e08b      	b.n	8002bec <ssi_handler+0x1c80>
		break;

	case 37: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].sunrise == 1){
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <ssi_handler+0x1b98>)
 8002ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ada:	4619      	mov	r1, r3
 8002adc:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <ssi_handler+0x1b9c>)
 8002ade:	460b      	mov	r3, r1
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	440b      	add	r3, r1
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3324      	adds	r3, #36	; 0x24
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d123      	bne.n	8002b38 <ssi_handler+0x1bcc>
		sprintf(pcInsert, "%s", "checked");
 8002af0:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <ssi_handler+0x1bc4>)
 8002af2:	4908      	ldr	r1, [pc, #32]	; (8002b14 <ssi_handler+0x1ba8>)
 8002af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af6:	f014 fe55 	bl	80177a4 <siprintf>
 8002afa:	e022      	b.n	8002b42 <ssi_handler+0x1bd6>
 8002afc:	20006aa0 	.word	0x20006aa0
 8002b00:	0801bfbc 	.word	0x0801bfbc
 8002b04:	200007ba 	.word	0x200007ba
 8002b08:	2000174c 	.word	0x2000174c
 8002b0c:	0801bfe0 	.word	0x0801bfe0
 8002b10:	0801c00c 	.word	0x0801c00c
 8002b14:	0801bdb4 	.word	0x0801bdb4
 8002b18:	0801c030 	.word	0x0801c030
 8002b1c:	0801c058 	.word	0x0801c058
 8002b20:	0801c078 	.word	0x0801c078
 8002b24:	0801c0a0 	.word	0x0801c0a0
 8002b28:	0801c0c0 	.word	0x0801c0c0
 8002b2c:	0801c0ec 	.word	0x0801c0ec
 8002b30:	0801c110 	.word	0x0801c110
 8002b34:	0801c118 	.word	0x0801c118
		}
		else{
			sprintf(pcInsert, "%s", " ");
 8002b38:	4a2e      	ldr	r2, [pc, #184]	; (8002bf4 <ssi_handler+0x1c88>)
 8002b3a:	492f      	ldr	r1, [pc, #188]	; (8002bf8 <ssi_handler+0x1c8c>)
 8002b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b3e:	f014 fe31 	bl	80177a4 <siprintf>
		}
		return strlen(pcInsert);
 8002b42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b44:	f7fd fb4e 	bl	80001e4 <strlen>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	e04e      	b.n	8002bec <ssi_handler+0x1c80>
		break;
	case 38: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].sunset == 1){
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <ssi_handler+0x1c90>)
 8002b50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b54:	4619      	mov	r1, r3
 8002b56:	4a2a      	ldr	r2, [pc, #168]	; (8002c00 <ssi_handler+0x1c94>)
 8002b58:	460b      	mov	r3, r1
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	440b      	add	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	3328      	adds	r3, #40	; 0x28
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <ssi_handler+0x1c0a>
		sprintf(pcInsert, "%s", "checked");
 8002b6a:	4a26      	ldr	r2, [pc, #152]	; (8002c04 <ssi_handler+0x1c98>)
 8002b6c:	4922      	ldr	r1, [pc, #136]	; (8002bf8 <ssi_handler+0x1c8c>)
 8002b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b70:	f014 fe18 	bl	80177a4 <siprintf>
 8002b74:	e004      	b.n	8002b80 <ssi_handler+0x1c14>
		}
		else{
			sprintf(pcInsert, "%s", " ");
 8002b76:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <ssi_handler+0x1c88>)
 8002b78:	491f      	ldr	r1, [pc, #124]	; (8002bf8 <ssi_handler+0x1c8c>)
 8002b7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b7c:	f014 fe12 	bl	80177a4 <siprintf>
		}
		return strlen(pcInsert);
 8002b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b82:	f7fd fb2f 	bl	80001e4 <strlen>
 8002b86:	4603      	mov	r3, r0
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	e02f      	b.n	8002bec <ssi_handler+0x1c80>
		break;
	case 39: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Tt[tmp_id].t_group);
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <ssi_handler+0x1c90>)
 8002b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b92:	461a      	mov	r2, r3
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	3318      	adds	r3, #24
 8002b9e:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <ssi_handler+0x1c94>)
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4914      	ldr	r1, [pc, #80]	; (8002bf8 <ssi_handler+0x1c8c>)
 8002ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002baa:	f014 fdfb 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002bae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bb0:	f7fd fb18 	bl	80001e4 <strlen>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	e018      	b.n	8002bec <ssi_handler+0x1c80>
		break;
	case 40: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Tt[tmp_id].t_info);
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <ssi_handler+0x1c90>)
 8002bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	3328      	adds	r3, #40	; 0x28
 8002bcc:	4a0c      	ldr	r2, [pc, #48]	; (8002c00 <ssi_handler+0x1c94>)
 8002bce:	4413      	add	r3, r2
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4908      	ldr	r1, [pc, #32]	; (8002bf8 <ssi_handler+0x1c8c>)
 8002bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd8:	f014 fde4 	bl	80177a4 <siprintf>
		return strlen(pcInsert);
 8002bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bde:	f7fd fb01 	bl	80001e4 <strlen>
 8002be2:	4603      	mov	r3, r0
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	e001      	b.n	8002bec <ssi_handler+0x1c80>
		break;

	default:
		break;
 8002be8:	bf00      	nop
	}
	return 0;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3734      	adds	r7, #52	; 0x34
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf4:	0801c118 	.word	0x0801c118
 8002bf8:	0801bdb4 	.word	0x0801bdb4
 8002bfc:	200007ba 	.word	0x200007ba
 8002c00:	2000174c 	.word	0x2000174c
 8002c04:	0801c110 	.word	0x0801c110

08002c08 <CGIForm_Handler>:
const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));

//tCGI CGI_TAB[3]; // 3. For LED создадим массив для LED CGI

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
	//printf("GET OK 1 \n");
	if (iIndex == 0) {
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d120      	bne.n	8002c5e <CGIForm_Handler+0x56>
		for (int i = 0; i < iNumParams; i++) {
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	e019      	b.n	8002c56 <CGIForm_Handler+0x4e>
			if (strcmp(pcParam[i], "jsongo") == 0) // if the fname string is found
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	490e      	ldr	r1, [pc, #56]	; (8002c68 <CGIForm_Handler+0x60>)
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd face 	bl	80001d0 <strcmp>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d10a      	bne.n	8002c50 <CGIForm_Handler+0x48>
					{
				//memset(name, '\0', 30);  // Очищаем массив перед записью новых данных.
				//strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
				jsongo = atoi(pcValue[i]);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4413      	add	r3, r2
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f013 ffda 	bl	8016bfe <atoi>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4a07      	ldr	r2, [pc, #28]	; (8002c6c <CGIForm_Handler+0x64>)
 8002c4e:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	3301      	adds	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	dbe1      	blt.n	8002c22 <CGIForm_Handler+0x1a>
			}
		}
	}
	return "/json.shtml"; //
 8002c5e:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <CGIForm_Handler+0x68>)
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	0801c188 	.word	0x0801c188
 8002c6c:	200007c4 	.word	0x200007c4
 8002c70:	0801c11c 	.word	0x0801c11c

08002c74 <CGIForm_Handler1>:

const char* CGIForm_Handler1(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
	//printf("GET 1 OK  \n");
	if (iIndex == 1 || iIndex == 2 || iIndex == 3) {
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d005      	beq.n	8002c94 <CGIForm_Handler1+0x20>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d002      	beq.n	8002c94 <CGIForm_Handler1+0x20>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d137      	bne.n	8002d04 <CGIForm_Handler1+0x90>
		for (int i = 0; i < iNumParams; i++) {
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e030      	b.n	8002cfc <CGIForm_Handler1+0x88>
			if (strcmp(pcParam[i], "id") == 0)  // if the fname string is found
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4921      	ldr	r1, [pc, #132]	; (8002d2c <CGIForm_Handler1+0xb8>)
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fa92 	bl	80001d0 <strcmp>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <CGIForm_Handler1+0x54>
					{
				id = atoi(pcValue[i]);
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	4413      	add	r3, r2
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f013 ff9e 	bl	8016bfe <atoi>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <CGIForm_Handler1+0xbc>)
 8002cc6:	6013      	str	r3, [r2, #0]
				//printf("+++++++++ %d \n", id);
			}
			if (strcmp(pcParam[i], "tab") == 0)  // if the fname string is found
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4413      	add	r3, r2
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4918      	ldr	r1, [pc, #96]	; (8002d34 <CGIForm_Handler1+0xc0>)
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd fa7b 	bl	80001d0 <strcmp>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <CGIForm_Handler1+0x82>
					{
				idtab = atoi(pcValue[i]);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f013 ff87 	bl	8016bfe <atoi>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <CGIForm_Handler1+0xc4>)
 8002cf4:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	dbca      	blt.n	8002c9a <CGIForm_Handler1+0x26>
				//printf("+++++++++ %d \n", idtab);
			}
		}
	}
	if (iIndex == 1) {
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <CGIForm_Handler1+0x9a>
		return "/form1.shtml"; //
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <CGIForm_Handler1+0xc8>)
 8002d0c:	e00a      	b.n	8002d24 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 2) {
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d101      	bne.n	8002d18 <CGIForm_Handler1+0xa4>
		return "/form2.shtml";
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <CGIForm_Handler1+0xcc>)
 8002d16:	e005      	b.n	8002d24 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 3) {
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d101      	bne.n	8002d22 <CGIForm_Handler1+0xae>
		return "/form3.shtml";
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <CGIForm_Handler1+0xd0>)
 8002d20:	e000      	b.n	8002d24 <CGIForm_Handler1+0xb0>
	} else {
		return "/404.html";
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <CGIForm_Handler1+0xd4>)
	}
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3718      	adds	r7, #24
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	0801b58c 	.word	0x0801b58c
 8002d30:	200007c8 	.word	0x200007c8
 8002d34:	0801c190 	.word	0x0801c190
 8002d38:	200007cc 	.word	0x200007cc
 8002d3c:	0801c128 	.word	0x0801c128
 8002d40:	0801c138 	.word	0x0801c138
 8002d44:	0801c148 	.word	0x0801c148
 8002d48:	0801c194 	.word	0x0801c194

08002d4c <CGIForm_Handler2>:

const char* CGIForm_Handler2(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
	//printf("GET OK 1 \n");
	if (iIndex == 4) {
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d140      	bne.n	8002de2 <CGIForm_Handler2+0x96>
		for (int i = 0; i < iNumParams; i++) {
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	e039      	b.n	8002dda <CGIForm_Handler2+0x8e>
			if (strcmp(pcParam[i], "del") == 0)  // if the fname string is found
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	491e      	ldr	r1, [pc, #120]	; (8002dec <CGIForm_Handler2+0xa0>)
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fd fa2c 	bl	80001d0 <strcmp>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d12a      	bne.n	8002dd4 <CGIForm_Handler2+0x88>
					{
				id = atoi(pcValue[i]);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	4413      	add	r3, r2
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f013 ff38 	bl	8016bfe <atoi>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <CGIForm_Handler2+0xa4>)
 8002d92:	6013      	str	r3, [r2, #0]
				TO[id].idout = 0;
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <CGIForm_Handler2+0xa4>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4916      	ldr	r1, [pc, #88]	; (8002df4 <CGIForm_Handler2+0xa8>)
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3304      	adds	r3, #4
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
				TO[id].idin = 0;
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <CGIForm_Handler2+0xa4>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4911      	ldr	r1, [pc, #68]	; (8002df4 <CGIForm_Handler2+0xa8>)
 8002db0:	4613      	mov	r3, r2
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
				TO[id].flag = 0;
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <CGIForm_Handler2+0xa4>)
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	490c      	ldr	r1, [pc, #48]	; (8002df4 <CGIForm_Handler2+0xa8>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	3308      	adds	r3, #8
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	dbc1      	blt.n	8002d66 <CGIForm_Handler2+0x1a>
			}
		}
	}
	return "/tab1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8002de2:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <CGIForm_Handler2+0xac>)
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	0801c1a0 	.word	0x0801c1a0
 8002df0:	200007c8 	.word	0x200007c8
 8002df4:	200026b8 	.word	0x200026b8
 8002df8:	0801c158 	.word	0x0801c158

08002dfc <CGIForm_Handler3>:

const char* CGIForm_Handler3(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b092      	sub	sp, #72	; 0x48
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
	if (iIndex == 5) // для странички settings
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	f040 832c 	bne.w	800346a <CGIForm_Handler3+0x66e>
			//printf("GET CGI_Handler 5 \n");
			{
		for (int i = 0; i < iNumParams; i++) {
 8002e12:	2300      	movs	r3, #0
 8002e14:	647b      	str	r3, [r7, #68]	; 0x44
 8002e16:	e323      	b.n	8003460 <CGIForm_Handler3+0x664>
			if (strcmp(pcParam[i], "tlon_de") == 0) // if the "tlat_de" string is found
 8002e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4974      	ldr	r1, [pc, #464]	; (8002ff4 <CGIForm_Handler3+0x1f8>)
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd f9d3 	bl	80001d0 <strcmp>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d115      	bne.n	8002e5c <CGIForm_Handler3+0x60>
					{
				//memset(&(Settings.lon_de), 0, sizeof(Settings.lon_de));  // Очищаем элимент структуры перед перед записью новых данных.
				//pcValue[i][8] = 0; // Ограничем переменую количеством символов!

				//printf("pcValue[i] is - %s\n\r", pcValue[i]);
				Settings.lon_de = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002e30:	4971      	ldr	r1, [pc, #452]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	e9c1 2300 	strd	r2, r3, [r1]
				Settings.lon_de = atof(pcValue[i]); // Сохраняем значение в переменную.
 8002e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	4413      	add	r3, r2
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f013 fed5 	bl	8016bf8 <atof>
 8002e4e:	eeb0 7a40 	vmov.f32	s14, s0
 8002e52:	eef0 7a60 	vmov.f32	s15, s1
 8002e56:	4b68      	ldr	r3, [pc, #416]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002e58:	ed83 7b00 	vstr	d7, [r3]
				//printf("Length of line is - %d\n\r", strlen(pcValue[i]));
				//printf("Longitude - %.6F\n\r",Settings.lon_de);
			}
			if (strcmp(pcParam[i], "tlat_de") == 0) // if the "tlat_de" string is found
 8002e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4965      	ldr	r1, [pc, #404]	; (8002ffc <CGIForm_Handler3+0x200>)
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd f9b1 	bl	80001d0 <strcmp>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d115      	bne.n	8002ea0 <CGIForm_Handler3+0xa4>
					{
				//memset(&(Settings.lat_de), 0, sizeof(Settings.lat_de));  // Очищаем элимент структуры перед перед записью новых данных.
				//pcValue[i][8] = 0; // Ограничем переменую количеством символов!

				//printf("pcValue[i] is - %s\n\r", pcValue[i]);
				Settings.lat_de = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002e74:	4960      	ldr	r1, [pc, #384]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
				Settings.lat_de = atof(pcValue[i]); // Сохраняем значение в переменную.
 8002e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	4413      	add	r3, r2
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f013 feb3 	bl	8016bf8 <atof>
 8002e92:	eeb0 7a40 	vmov.f32	s14, s0
 8002e96:	eef0 7a60 	vmov.f32	s15, s1
 8002e9a:	4b57      	ldr	r3, [pc, #348]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002e9c:	ed83 7b02 	vstr	d7, [r3, #8]
				//printf("Length of line is - %d\n\r", strlen(pcValue[i]));
				//printf("Latitude - %.6F\n\r",Settings.lat_de);
			}
			if (strcmp(pcParam[i], "mqtt_prt") == 0)  // if the string is found
 8002ea0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4955      	ldr	r1, [pc, #340]	; (8003000 <CGIForm_Handler3+0x204>)
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd f98f 	bl	80001d0 <strcmp>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10d      	bne.n	8002ed4 <CGIForm_Handler3+0xd8>
					{
				Settings.mqtt_prt = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]
				Settings.mqtt_prt = atoi(pcValue[i]); // Сохраняем значение в переменную.
 8002ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f013 fe98 	bl	8016bfe <atoi>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4a49      	ldr	r2, [pc, #292]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002ed2:	6113      	str	r3, [r2, #16]
			}
			if (strcmp(pcParam[i], "mqtt_clt") == 0)  // if the string is found
 8002ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4413      	add	r3, r2
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4949      	ldr	r1, [pc, #292]	; (8003004 <CGIForm_Handler3+0x208>)
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7fd f975 	bl	80001d0 <strcmp>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d102      	bne.n	8002ef2 <CGIForm_Handler3+0xf6>
					{
				//printf("pcParam[i] = '%s'\n", pcParam[i]);
				//printf("pcValue[i] = '%s'\n", pcValue[i]);
				Settings.mqtt_clt[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002eec:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	751a      	strb	r2, [r3, #20]
				//printf("Settings.mqtt_clt = %s\n", Settings.mqtt_clt);
				//Settings.mqtt_clt = pcValue[i]; // Сохраняем значение в переменную.
				//strcpy(Settings.mqtt_clt, pcValue[i]);
				//printf("Settings.mqtt_clt = %s\n", Settings.mqtt_clt);
			}
			if (strcmp(pcParam[i], "mqtt_usr") == 0)  // if the string is found
 8002ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	4413      	add	r3, r2
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4942      	ldr	r1, [pc, #264]	; (8003008 <CGIForm_Handler3+0x20c>)
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd f966 	bl	80001d0 <strcmp>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10b      	bne.n	8002f22 <CGIForm_Handler3+0x126>
					{
				Settings.mqtt_usr[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	779a      	strb	r2, [r3, #30]
				//Settings.mqtt_usr[10] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqtt_usr, pcValue[i]);
 8002f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	483b      	ldr	r0, [pc, #236]	; (800300c <CGIForm_Handler3+0x210>)
 8002f1e:	f014 fc7d 	bl	801781c <strcpy>
			}
			if (strcmp(pcParam[i], "mqt_pswd") == 0)  // if the string is found
 8002f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4938      	ldr	r1, [pc, #224]	; (8003010 <CGIForm_Handler3+0x214>)
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd f94e 	bl	80001d0 <strcmp>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <CGIForm_Handler3+0x158>
					{
				Settings.mqt_pswd[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002f3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				//Settings.mqt_pswd[15] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqt_pswd, pcValue[i]);
 8002f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4413      	add	r3, r2
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4831      	ldr	r0, [pc, #196]	; (8003014 <CGIForm_Handler3+0x218>)
 8002f50:	f014 fc64 	bl	801781c <strcpy>
			}
			if (strcmp(pcParam[i], "mqtt_tpc") == 0)  // if the string is found
 8002f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	492e      	ldr	r1, [pc, #184]	; (8003018 <CGIForm_Handler3+0x21c>)
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd f935 	bl	80001d0 <strcmp>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10c      	bne.n	8002f86 <CGIForm_Handler3+0x18a>
					{
				Settings.mqtt_tpc[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002f6c:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				//Settings.mqtt_tpc[15] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqtt_tpc, pcValue[i]);
 8002f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4826      	ldr	r0, [pc, #152]	; (800301c <CGIForm_Handler3+0x220>)
 8002f82:	f014 fc4b 	bl	801781c <strcpy>
			}
			if (strcmp(pcParam[i], "mqt_ftpc") == 0)  // if the string is found
 8002f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4923      	ldr	r1, [pc, #140]	; (8003020 <CGIForm_Handler3+0x224>)
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd f91c 	bl	80001d0 <strcmp>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <CGIForm_Handler3+0x1bc>
					{
				Settings.mqt_ftpc[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <CGIForm_Handler3+0x1fc>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				//Settings.mqt_ftpc[15] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqt_ftpc, pcValue[i]);
 8002fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	481c      	ldr	r0, [pc, #112]	; (8003024 <CGIForm_Handler3+0x228>)
 8002fb4:	f014 fc32 	bl	801781c <strcpy>
			}
			if (strcmp(pcParam[i], "ip_addr") == 0)  // if the string is found
 8002fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4919      	ldr	r1, [pc, #100]	; (8003028 <CGIForm_Handler3+0x22c>)
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd f903 	bl	80001d0 <strcmp>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 809b 	bne.w	8003108 <CGIForm_Handler3+0x30c>
					{
				//printf("pcParam[i] = '%s'\n", pcParam[i]);
				//printf("pcValue[i] = '%s'\n", pcValue[i]);
				char delim[] = ".";
 8002fd2:	232e      	movs	r3, #46	; 0x2e
 8002fd4:	843b      	strh	r3, [r7, #32]
				int k = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	643b      	str	r3, [r7, #64]	; 0x40
				char *ptr = strtok(pcValue[i], delim);
 8002fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	683a      	ldr	r2, [r7, #0]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f107 0220 	add.w	r2, r7, #32
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f015 fa8e 	bl	801850c <strtok>
 8002ff0:	63f8      	str	r0, [r7, #60]	; 0x3c
				while (ptr != NULL) {
 8002ff2:	e086      	b.n	8003102 <CGIForm_Handler3+0x306>
 8002ff4:	0801b464 	.word	0x0801b464
 8002ff8:	20000490 	.word	0x20000490
 8002ffc:	0801b46c 	.word	0x0801b46c
 8003000:	0801b474 	.word	0x0801b474
 8003004:	0801b480 	.word	0x0801b480
 8003008:	0801b48c 	.word	0x0801b48c
 800300c:	200004ae 	.word	0x200004ae
 8003010:	0801b498 	.word	0x0801b498
 8003014:	200004b8 	.word	0x200004b8
 8003018:	0801b4a4 	.word	0x0801b4a4
 800301c:	200004c7 	.word	0x200004c7
 8003020:	0801b4b0 	.word	0x0801b4b0
 8003024:	200004d6 	.word	0x200004d6
 8003028:	0801c1a4 	.word	0x0801c1a4
					if (k == 0) {
 800302c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d115      	bne.n	800305e <CGIForm_Handler3+0x262>
						//printf("k0 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr0 = 0;// Очищаем элимент структуры перед перед записью новых данных.
 8003032:	4b8a      	ldr	r3, [pc, #552]	; (800325c <CGIForm_Handler3+0x460>)
 8003034:	2200      	movs	r2, #0
 8003036:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
						Settings.ip_addr0 = atoi(ptr);	// Сохраняю в переменную
 800303a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800303c:	f013 fddf 	bl	8016bfe <atoi>
 8003040:	4603      	mov	r3, r0
 8003042:	b21a      	sxth	r2, r3
 8003044:	4b85      	ldr	r3, [pc, #532]	; (800325c <CGIForm_Handler3+0x460>)
 8003046:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
						//printf("Settings.ip_addr0 = %d\n", Settings.ip_addr0);
						ptr = strtok(NULL, delim);
 800304a:	f107 0320 	add.w	r3, r7, #32
 800304e:	4619      	mov	r1, r3
 8003050:	2000      	movs	r0, #0
 8003052:	f015 fa5b 	bl	801850c <strtok>
 8003056:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 8003058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800305a:	3301      	adds	r3, #1
 800305c:	643b      	str	r3, [r7, #64]	; 0x40
					}
					if (k == 1) {
 800305e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003060:	2b01      	cmp	r3, #1
 8003062:	d115      	bne.n	8003090 <CGIForm_Handler3+0x294>
						//printf("k1 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003064:	4b7d      	ldr	r3, [pc, #500]	; (800325c <CGIForm_Handler3+0x460>)
 8003066:	2200      	movs	r2, #0
 8003068:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						Settings.ip_addr1 = atoi(ptr); // Сохраняю в переменную
 800306c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800306e:	f013 fdc6 	bl	8016bfe <atoi>
 8003072:	4603      	mov	r3, r0
 8003074:	b21a      	sxth	r2, r3
 8003076:	4b79      	ldr	r3, [pc, #484]	; (800325c <CGIForm_Handler3+0x460>)
 8003078:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						//printf("Settings.ip_addr1 = %d\n", Settings.ip_addr1);
						ptr = strtok(NULL, delim);
 800307c:	f107 0320 	add.w	r3, r7, #32
 8003080:	4619      	mov	r1, r3
 8003082:	2000      	movs	r0, #0
 8003084:	f015 fa42 	bl	801850c <strtok>
 8003088:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 800308a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308c:	3301      	adds	r3, #1
 800308e:	643b      	str	r3, [r7, #64]	; 0x40
					}
					if (k == 2) {
 8003090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003092:	2b02      	cmp	r3, #2
 8003094:	d115      	bne.n	80030c2 <CGIForm_Handler3+0x2c6>
						//printf("k2 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003096:	4b71      	ldr	r3, [pc, #452]	; (800325c <CGIForm_Handler3+0x460>)
 8003098:	2200      	movs	r2, #0
 800309a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
						Settings.ip_addr2 = atoi(ptr); // Сохраняю в переменную
 800309e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030a0:	f013 fdad 	bl	8016bfe <atoi>
 80030a4:	4603      	mov	r3, r0
 80030a6:	b21a      	sxth	r2, r3
 80030a8:	4b6c      	ldr	r3, [pc, #432]	; (800325c <CGIForm_Handler3+0x460>)
 80030aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
						//printf("Settings.ip_addr2 = %d\n", Settings.ip_addr2);
						ptr = strtok(NULL, delim);
 80030ae:	f107 0320 	add.w	r3, r7, #32
 80030b2:	4619      	mov	r1, r3
 80030b4:	2000      	movs	r0, #0
 80030b6:	f015 fa29 	bl	801850c <strtok>
 80030ba:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 80030bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030be:	3301      	adds	r3, #1
 80030c0:	643b      	str	r3, [r7, #64]	; 0x40
					}
					if (k == 3) {
 80030c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d115      	bne.n	80030f4 <CGIForm_Handler3+0x2f8>
						//printf("k3 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80030c8:	4b64      	ldr	r3, [pc, #400]	; (800325c <CGIForm_Handler3+0x460>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
						Settings.ip_addr3 = atoi(ptr); // Сохраняю в переменную
 80030d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030d2:	f013 fd94 	bl	8016bfe <atoi>
 80030d6:	4603      	mov	r3, r0
 80030d8:	b21a      	sxth	r2, r3
 80030da:	4b60      	ldr	r3, [pc, #384]	; (800325c <CGIForm_Handler3+0x460>)
 80030dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
						//printf("Settings.ip_addr3 = %d\n", Settings.ip_addr3);
						ptr = strtok(NULL, delim);
 80030e0:	f107 0320 	add.w	r3, r7, #32
 80030e4:	4619      	mov	r1, r3
 80030e6:	2000      	movs	r0, #0
 80030e8:	f015 fa10 	bl	801850c <strtok>
 80030ec:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 80030ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f0:	3301      	adds	r3, #1
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
					}
					ptr = strtok(NULL, delim);
 80030f4:	f107 0320 	add.w	r3, r7, #32
 80030f8:	4619      	mov	r1, r3
 80030fa:	2000      	movs	r0, #0
 80030fc:	f015 fa06 	bl	801850c <strtok>
 8003100:	63f8      	str	r0, [r7, #60]	; 0x3c
				while (ptr != NULL) {
 8003102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d191      	bne.n	800302c <CGIForm_Handler3+0x230>
				}
			}
			if (strcmp(pcParam[i], "sb_mask") == 0)  // if the string is found
 8003108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4953      	ldr	r1, [pc, #332]	; (8003260 <CGIForm_Handler3+0x464>)
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd f85b 	bl	80001d0 <strcmp>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d17e      	bne.n	800321e <CGIForm_Handler3+0x422>
					{
				char delim[] = ".";
 8003120:	232e      	movs	r3, #46	; 0x2e
 8003122:	83bb      	strh	r3, [r7, #28]
				int k = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	63bb      	str	r3, [r7, #56]	; 0x38
				char *ptr = strtok(pcValue[i], delim);
 8003128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	4413      	add	r3, r2
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f107 021c 	add.w	r2, r7, #28
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f015 f9e7 	bl	801850c <strtok>
 800313e:	6378      	str	r0, [r7, #52]	; 0x34

				while (ptr != NULL) {
 8003140:	e06a      	b.n	8003218 <CGIForm_Handler3+0x41c>
					if (k == 0) {
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	2b00      	cmp	r3, #0
 8003146:	d115      	bne.n	8003174 <CGIForm_Handler3+0x378>
						Settings.sb_mask0 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003148:	4b44      	ldr	r3, [pc, #272]	; (800325c <CGIForm_Handler3+0x460>)
 800314a:	2200      	movs	r2, #0
 800314c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
						Settings.sb_mask0 = atoi(ptr);  // Сохраняю в переменную
 8003150:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003152:	f013 fd54 	bl	8016bfe <atoi>
 8003156:	4603      	mov	r3, r0
 8003158:	b21a      	sxth	r2, r3
 800315a:	4b40      	ldr	r3, [pc, #256]	; (800325c <CGIForm_Handler3+0x460>)
 800315c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
						ptr = strtok(NULL, delim);
 8003160:	f107 031c 	add.w	r3, r7, #28
 8003164:	4619      	mov	r1, r3
 8003166:	2000      	movs	r0, #0
 8003168:	f015 f9d0 	bl	801850c <strtok>
 800316c:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	3301      	adds	r3, #1
 8003172:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					if (k == 1) {
 8003174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003176:	2b01      	cmp	r3, #1
 8003178:	d115      	bne.n	80031a6 <CGIForm_Handler3+0x3aa>
						Settings.sb_mask1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800317a:	4b38      	ldr	r3, [pc, #224]	; (800325c <CGIForm_Handler3+0x460>)
 800317c:	2200      	movs	r2, #0
 800317e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
						Settings.sb_mask1 = atoi(ptr); // Сохраняю в переменную
 8003182:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003184:	f013 fd3b 	bl	8016bfe <atoi>
 8003188:	4603      	mov	r3, r0
 800318a:	b21a      	sxth	r2, r3
 800318c:	4b33      	ldr	r3, [pc, #204]	; (800325c <CGIForm_Handler3+0x460>)
 800318e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
						ptr = strtok(NULL, delim);
 8003192:	f107 031c 	add.w	r3, r7, #28
 8003196:	4619      	mov	r1, r3
 8003198:	2000      	movs	r0, #0
 800319a:	f015 f9b7 	bl	801850c <strtok>
 800319e:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 80031a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a2:	3301      	adds	r3, #1
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					if (k == 2) {
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d115      	bne.n	80031d8 <CGIForm_Handler3+0x3dc>
						Settings.sb_mask2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80031ac:	4b2b      	ldr	r3, [pc, #172]	; (800325c <CGIForm_Handler3+0x460>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
						Settings.sb_mask2 = atoi(ptr); // Сохраняю в переменную
 80031b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031b6:	f013 fd22 	bl	8016bfe <atoi>
 80031ba:	4603      	mov	r3, r0
 80031bc:	b21a      	sxth	r2, r3
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <CGIForm_Handler3+0x460>)
 80031c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
						ptr = strtok(NULL, delim);
 80031c4:	f107 031c 	add.w	r3, r7, #28
 80031c8:	4619      	mov	r1, r3
 80031ca:	2000      	movs	r0, #0
 80031cc:	f015 f99e 	bl	801850c <strtok>
 80031d0:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	3301      	adds	r3, #1
 80031d6:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					if (k == 3) {
 80031d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031da:	2b03      	cmp	r3, #3
 80031dc:	d115      	bne.n	800320a <CGIForm_Handler3+0x40e>
						Settings.sb_mask3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80031de:	4b1f      	ldr	r3, [pc, #124]	; (800325c <CGIForm_Handler3+0x460>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
						Settings.sb_mask3 = atoi(ptr); // Сохраняю в переменную
 80031e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031e8:	f013 fd09 	bl	8016bfe <atoi>
 80031ec:	4603      	mov	r3, r0
 80031ee:	b21a      	sxth	r2, r3
 80031f0:	4b1a      	ldr	r3, [pc, #104]	; (800325c <CGIForm_Handler3+0x460>)
 80031f2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
						ptr = strtok(NULL, delim);
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	4619      	mov	r1, r3
 80031fc:	2000      	movs	r0, #0
 80031fe:	f015 f985 	bl	801850c <strtok>
 8003202:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	3301      	adds	r3, #1
 8003208:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					ptr = strtok(NULL, delim);
 800320a:	f107 031c 	add.w	r3, r7, #28
 800320e:	4619      	mov	r1, r3
 8003210:	2000      	movs	r0, #0
 8003212:	f015 f97b 	bl	801850c <strtok>
 8003216:	6378      	str	r0, [r7, #52]	; 0x34
				while (ptr != NULL) {
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	2b00      	cmp	r3, #0
 800321c:	d191      	bne.n	8003142 <CGIForm_Handler3+0x346>
				}
			}
			if (strcmp(pcParam[i], "gateway") == 0)  // if the string is found
 800321e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	490e      	ldr	r1, [pc, #56]	; (8003264 <CGIForm_Handler3+0x468>)
 800322a:	4618      	mov	r0, r3
 800322c:	f7fc ffd0 	bl	80001d0 <strcmp>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 8086 	bne.w	8003344 <CGIForm_Handler3+0x548>
					{
				char delim[] = ".";
 8003238:	232e      	movs	r3, #46	; 0x2e
 800323a:	833b      	strh	r3, [r7, #24]
				int k = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
				char *ptr = strtok(pcValue[i], delim);
 8003240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	4413      	add	r3, r2
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f107 0218 	add.w	r2, r7, #24
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f015 f95b 	bl	801850c <strtok>
 8003256:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (ptr != NULL) {
 8003258:	e071      	b.n	800333e <CGIForm_Handler3+0x542>
 800325a:	bf00      	nop
 800325c:	20000490 	.word	0x20000490
 8003260:	0801c1ac 	.word	0x0801c1ac
 8003264:	0801c1b4 	.word	0x0801c1b4
					if (k == 0) {
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	2b00      	cmp	r3, #0
 800326c:	d115      	bne.n	800329a <CGIForm_Handler3+0x49e>
						Settings.gateway0 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800326e:	4b81      	ldr	r3, [pc, #516]	; (8003474 <CGIForm_Handler3+0x678>)
 8003270:	2200      	movs	r2, #0
 8003272:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
						Settings.gateway0 = atoi(ptr);  // Сохраняю в переменную
 8003276:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003278:	f013 fcc1 	bl	8016bfe <atoi>
 800327c:	4603      	mov	r3, r0
 800327e:	b21a      	sxth	r2, r3
 8003280:	4b7c      	ldr	r3, [pc, #496]	; (8003474 <CGIForm_Handler3+0x678>)
 8003282:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
						ptr = strtok(NULL, delim);
 8003286:	f107 0318 	add.w	r3, r7, #24
 800328a:	4619      	mov	r1, r3
 800328c:	2000      	movs	r0, #0
 800328e:	f015 f93d 	bl	801850c <strtok>
 8003292:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	3301      	adds	r3, #1
 8003298:	633b      	str	r3, [r7, #48]	; 0x30
					}
					if (k == 1) {
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	2b01      	cmp	r3, #1
 800329e:	d115      	bne.n	80032cc <CGIForm_Handler3+0x4d0>
						Settings.gateway1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80032a0:	4b74      	ldr	r3, [pc, #464]	; (8003474 <CGIForm_Handler3+0x678>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						Settings.gateway1 = atoi(ptr); // Сохраняю в переменную
 80032a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032aa:	f013 fca8 	bl	8016bfe <atoi>
 80032ae:	4603      	mov	r3, r0
 80032b0:	b21a      	sxth	r2, r3
 80032b2:	4b70      	ldr	r3, [pc, #448]	; (8003474 <CGIForm_Handler3+0x678>)
 80032b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						ptr = strtok(NULL, delim);
 80032b8:	f107 0318 	add.w	r3, r7, #24
 80032bc:	4619      	mov	r1, r3
 80032be:	2000      	movs	r0, #0
 80032c0:	f015 f924 	bl	801850c <strtok>
 80032c4:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	3301      	adds	r3, #1
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
					}
					if (k == 2) {
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d115      	bne.n	80032fe <CGIForm_Handler3+0x502>
						Settings.gateway2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80032d2:	4b68      	ldr	r3, [pc, #416]	; (8003474 <CGIForm_Handler3+0x678>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						Settings.gateway2 = atoi(ptr); // Сохраняю в переменную
 80032da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032dc:	f013 fc8f 	bl	8016bfe <atoi>
 80032e0:	4603      	mov	r3, r0
 80032e2:	b21a      	sxth	r2, r3
 80032e4:	4b63      	ldr	r3, [pc, #396]	; (8003474 <CGIForm_Handler3+0x678>)
 80032e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						ptr = strtok(NULL, delim);
 80032ea:	f107 0318 	add.w	r3, r7, #24
 80032ee:	4619      	mov	r1, r3
 80032f0:	2000      	movs	r0, #0
 80032f2:	f015 f90b 	bl	801850c <strtok>
 80032f6:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	3301      	adds	r3, #1
 80032fc:	633b      	str	r3, [r7, #48]	; 0x30
					}
					if (k == 3) {
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	2b03      	cmp	r3, #3
 8003302:	d115      	bne.n	8003330 <CGIForm_Handler3+0x534>
						Settings.gateway3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003304:	4b5b      	ldr	r3, [pc, #364]	; (8003474 <CGIForm_Handler3+0x678>)
 8003306:	2200      	movs	r2, #0
 8003308:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
						Settings.gateway3 = atoi(ptr); // Сохраняю в переменную
 800330c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800330e:	f013 fc76 	bl	8016bfe <atoi>
 8003312:	4603      	mov	r3, r0
 8003314:	b21a      	sxth	r2, r3
 8003316:	4b57      	ldr	r3, [pc, #348]	; (8003474 <CGIForm_Handler3+0x678>)
 8003318:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
						ptr = strtok(NULL, delim);
 800331c:	f107 0318 	add.w	r3, r7, #24
 8003320:	4619      	mov	r1, r3
 8003322:	2000      	movs	r0, #0
 8003324:	f015 f8f2 	bl	801850c <strtok>
 8003328:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	3301      	adds	r3, #1
 800332e:	633b      	str	r3, [r7, #48]	; 0x30
					}
					ptr = strtok(NULL, delim);
 8003330:	f107 0318 	add.w	r3, r7, #24
 8003334:	4619      	mov	r1, r3
 8003336:	2000      	movs	r0, #0
 8003338:	f015 f8e8 	bl	801850c <strtok>
 800333c:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (ptr != NULL) {
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d191      	bne.n	8003268 <CGIForm_Handler3+0x46c>
				}
			}
			if (strcmp(pcParam[i], "mqt_hst") == 0)  // if the string is found
 8003344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	494a      	ldr	r1, [pc, #296]	; (8003478 <CGIForm_Handler3+0x67c>)
 8003350:	4618      	mov	r0, r3
 8003352:	f7fc ff3d 	bl	80001d0 <strcmp>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d17e      	bne.n	800345a <CGIForm_Handler3+0x65e>
					{
				char delim[] = ".";
 800335c:	232e      	movs	r3, #46	; 0x2e
 800335e:	82bb      	strh	r3, [r7, #20]
				int k = 0;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
				char *ptr = strtok(pcValue[i], delim);
 8003364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	4413      	add	r3, r2
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f107 0214 	add.w	r2, r7, #20
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f015 f8c9 	bl	801850c <strtok>
 800337a:	6278      	str	r0, [r7, #36]	; 0x24
				while (ptr != NULL) {
 800337c:	e06a      	b.n	8003454 <CGIForm_Handler3+0x658>
					if (k == 0) {
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	2b00      	cmp	r3, #0
 8003382:	d115      	bne.n	80033b0 <CGIForm_Handler3+0x5b4>
						Settings.mqt_hst0 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003384:	4b3b      	ldr	r3, [pc, #236]	; (8003474 <CGIForm_Handler3+0x678>)
 8003386:	2200      	movs	r2, #0
 8003388:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
						Settings.mqt_hst0 = atoi(ptr);  // Сохраняю в переменную
 800338c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800338e:	f013 fc36 	bl	8016bfe <atoi>
 8003392:	4603      	mov	r3, r0
 8003394:	b21a      	sxth	r2, r3
 8003396:	4b37      	ldr	r3, [pc, #220]	; (8003474 <CGIForm_Handler3+0x678>)
 8003398:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
						ptr = strtok(NULL, delim);
 800339c:	f107 0314 	add.w	r3, r7, #20
 80033a0:	4619      	mov	r1, r3
 80033a2:	2000      	movs	r0, #0
 80033a4:	f015 f8b2 	bl	801850c <strtok>
 80033a8:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	3301      	adds	r3, #1
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					if (k == 1) {
 80033b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d115      	bne.n	80033e2 <CGIForm_Handler3+0x5e6>
						Settings.mqt_hst1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80033b6:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <CGIForm_Handler3+0x678>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
						Settings.mqt_hst1 = atoi(ptr); // Сохраняю в переменную
 80033be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033c0:	f013 fc1d 	bl	8016bfe <atoi>
 80033c4:	4603      	mov	r3, r0
 80033c6:	b21a      	sxth	r2, r3
 80033c8:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <CGIForm_Handler3+0x678>)
 80033ca:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
						ptr = strtok(NULL, delim);
 80033ce:	f107 0314 	add.w	r3, r7, #20
 80033d2:	4619      	mov	r1, r3
 80033d4:	2000      	movs	r0, #0
 80033d6:	f015 f899 	bl	801850c <strtok>
 80033da:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	3301      	adds	r3, #1
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					if (k == 2) {
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d115      	bne.n	8003414 <CGIForm_Handler3+0x618>
						Settings.mqt_hst2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80033e8:	4b22      	ldr	r3, [pc, #136]	; (8003474 <CGIForm_Handler3+0x678>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
						Settings.mqt_hst2 = atoi(ptr); // Сохраняю в переменную
 80033f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033f2:	f013 fc04 	bl	8016bfe <atoi>
 80033f6:	4603      	mov	r3, r0
 80033f8:	b21a      	sxth	r2, r3
 80033fa:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <CGIForm_Handler3+0x678>)
 80033fc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
						ptr = strtok(NULL, delim);
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	4619      	mov	r1, r3
 8003406:	2000      	movs	r0, #0
 8003408:	f015 f880 	bl	801850c <strtok>
 800340c:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	3301      	adds	r3, #1
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					if (k == 3) {
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	2b03      	cmp	r3, #3
 8003418:	d115      	bne.n	8003446 <CGIForm_Handler3+0x64a>
						Settings.mqt_hst3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800341a:	4b16      	ldr	r3, [pc, #88]	; (8003474 <CGIForm_Handler3+0x678>)
 800341c:	2200      	movs	r2, #0
 800341e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
						Settings.mqt_hst3 = atoi(ptr); // Сохраняю в переменную
 8003422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003424:	f013 fbeb 	bl	8016bfe <atoi>
 8003428:	4603      	mov	r3, r0
 800342a:	b21a      	sxth	r2, r3
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <CGIForm_Handler3+0x678>)
 800342e:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
						ptr = strtok(NULL, delim);
 8003432:	f107 0314 	add.w	r3, r7, #20
 8003436:	4619      	mov	r1, r3
 8003438:	2000      	movs	r0, #0
 800343a:	f015 f867 	bl	801850c <strtok>
 800343e:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	3301      	adds	r3, #1
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					ptr = strtok(NULL, delim);
 8003446:	f107 0314 	add.w	r3, r7, #20
 800344a:	4619      	mov	r1, r3
 800344c:	2000      	movs	r0, #0
 800344e:	f015 f85d 	bl	801850c <strtok>
 8003452:	6278      	str	r0, [r7, #36]	; 0x24
				while (ptr != NULL) {
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	2b00      	cmp	r3, #0
 8003458:	d191      	bne.n	800337e <CGIForm_Handler3+0x582>
		for (int i = 0; i < iNumParams; i++) {
 800345a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345c:	3301      	adds	r3, #1
 800345e:	647b      	str	r3, [r7, #68]	; 0x44
 8003460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	429a      	cmp	r2, r3
 8003466:	f6ff acd7 	blt.w	8002e18 <CGIForm_Handler3+0x1c>
				}
			}
		}
	}
	return "/settings.shtml"; //
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <CGIForm_Handler3+0x680>)
}
 800346c:	4618      	mov	r0, r3
 800346e:	3748      	adds	r7, #72	; 0x48
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000490 	.word	0x20000490
 8003478:	0801c1bc 	.word	0x0801c1bc
 800347c:	0801c164 	.word	0x0801c164

08003480 <CGIForm_Handler4>:

const char* CGIForm_Handler4(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) // Для странички Edit Timers
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
	//printf("iIndex %d\n", iIndex);
	if (iIndex == 6) // Для странички Edit Timers
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b06      	cmp	r3, #6
 8003492:	f040 8310 	bne.w	8003ab6 <CGIForm_Handler4+0x636>
			//printf("GET CGI_Handler 6 \n");
			{
		//printf("iNumParams %d\n",iNumParams);
		for (int i = 0; i < iNumParams; i++) {
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e307      	b.n	8003aac <CGIForm_Handler4+0x62c>

			//printf("tmp_id %d\n",tmp_id);
			//printf("pcParam[i] = %s pcValue[i] %s\n", pcParam[i], pcValue[i]); // смотрим, что прилитело.
			// От формы GET запрос1
			if (strcmp(pcParam[i], "id_id") == 0) // if the "pins" string is found
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	49bb      	ldr	r1, [pc, #748]	; (8003794 <CGIForm_Handler4+0x314>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fc fe91 	bl	80001d0 <strcmp>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d12d      	bne.n	8003510 <CGIForm_Handler4+0x90>
					{
				tmp_id = atoi(pcValue[i]);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	4413      	add	r3, r2
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f013 fb9d 	bl	8016bfe <atoi>
 80034c4:	4603      	mov	r3, r0
 80034c6:	b21a      	sxth	r2, r3
 80034c8:	4bb3      	ldr	r3, [pc, #716]	; (8003798 <CGIForm_Handler4+0x318>)
 80034ca:	801a      	strh	r2, [r3, #0]
				//printf("tmp_id = %d\n", tmp_id);
				Tt[tmp_id].id = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80034cc:	4bb2      	ldr	r3, [pc, #712]	; (8003798 <CGIForm_Handler4+0x318>)
 80034ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d2:	4619      	mov	r1, r3
 80034d4:	4ab1      	ldr	r2, [pc, #708]	; (800379c <CGIForm_Handler4+0x31c>)
 80034d6:	460b      	mov	r3, r1
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	440b      	add	r3, r1
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	2200      	movs	r2, #0
 80034e2:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].id = atoi(pcValue[i]); // Сохраняю в переменную
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f013 fb85 	bl	8016bfe <atoi>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4ba8      	ldr	r3, [pc, #672]	; (8003798 <CGIForm_Handler4+0x318>)
 80034f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034fc:	4619      	mov	r1, r3
 80034fe:	b210      	sxth	r0, r2
 8003500:	4aa6      	ldr	r2, [pc, #664]	; (800379c <CGIForm_Handler4+0x31c>)
 8003502:	460b      	mov	r3, r1
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	440b      	add	r3, r1
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	4602      	mov	r2, r0
 800350e:	801a      	strh	r2, [r3, #0]
				//printf("ID = %d\n", Tt[tmp_id].id);
			}
			// От формы GET запрос2
			if (strcmp(pcParam[i], "id") == 0)  // if the "id" string is found
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	49a1      	ldr	r1, [pc, #644]	; (80037a0 <CGIForm_Handler4+0x320>)
 800351c:	4618      	mov	r0, r3
 800351e:	f7fc fe57 	bl	80001d0 <strcmp>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d11a      	bne.n	800355e <CGIForm_Handler4+0xde>
					{
				tmp_id = atoi(pcValue[i]);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	4413      	add	r3, r2
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f013 fb63 	bl	8016bfe <atoi>
 8003538:	4603      	mov	r3, r0
 800353a:	b21a      	sxth	r2, r3
 800353c:	4b96      	ldr	r3, [pc, #600]	; (8003798 <CGIForm_Handler4+0x318>)
 800353e:	801a      	strh	r2, [r3, #0]
				t_id = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003540:	4b98      	ldr	r3, [pc, #608]	; (80037a4 <CGIForm_Handler4+0x324>)
 8003542:	2200      	movs	r2, #0
 8003544:	801a      	strh	r2, [r3, #0]
				t_id = atoi(pcValue[i]); // Сохраняю в переменную
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	4413      	add	r3, r2
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4618      	mov	r0, r3
 8003552:	f013 fb54 	bl	8016bfe <atoi>
 8003556:	4603      	mov	r3, r0
 8003558:	b21a      	sxth	r2, r3
 800355a:	4b92      	ldr	r3, [pc, #584]	; (80037a4 <CGIForm_Handler4+0x324>)
 800355c:	801a      	strh	r2, [r3, #0]
				//printf("id ID = %d\n", Tt[tmp_id].id);
				//printf("id = %d\n", t_id);
			}
			if (strcmp(pcParam[i], "s_dt") == 0 && tmp_id != 0) // if the "s_dt" string is found
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	498f      	ldr	r1, [pc, #572]	; (80037a8 <CGIForm_Handler4+0x328>)
 800356a:	4618      	mov	r0, r3
 800356c:	f7fc fe30 	bl	80001d0 <strcmp>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d126      	bne.n	80035c4 <CGIForm_Handler4+0x144>
 8003576:	4b88      	ldr	r3, [pc, #544]	; (8003798 <CGIForm_Handler4+0x318>)
 8003578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d021      	beq.n	80035c4 <CGIForm_Handler4+0x144>
					{
				Tt[tmp_id].s_dt = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003580:	4b85      	ldr	r3, [pc, #532]	; (8003798 <CGIForm_Handler4+0x318>)
 8003582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003586:	4619      	mov	r1, r3
 8003588:	4a84      	ldr	r2, [pc, #528]	; (800379c <CGIForm_Handler4+0x31c>)
 800358a:	460b      	mov	r3, r1
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	440b      	add	r3, r1
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	330c      	adds	r3, #12
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].s_dt = atoi(pcValue[i]); // Сохраняю в переменную
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	4413      	add	r3, r2
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a7c      	ldr	r2, [pc, #496]	; (8003798 <CGIForm_Handler4+0x318>)
 80035a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80035aa:	4614      	mov	r4, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f013 fb26 	bl	8016bfe <atoi>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4979      	ldr	r1, [pc, #484]	; (800379c <CGIForm_Handler4+0x31c>)
 80035b6:	4623      	mov	r3, r4
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	4423      	add	r3, r4
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	330c      	adds	r3, #12
 80035c2:	601a      	str	r2, [r3, #0]
				//printf("s_dt ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].s_dt = %d\n", Tt[tmp_id].s_dt);
			}
			if (strcmp(pcParam[i], "e_dt") == 0 && tmp_id != 0) // if the "e_dt" string is found
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	4413      	add	r3, r2
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4977      	ldr	r1, [pc, #476]	; (80037ac <CGIForm_Handler4+0x32c>)
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc fdfd 	bl	80001d0 <strcmp>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d126      	bne.n	800362a <CGIForm_Handler4+0x1aa>
 80035dc:	4b6e      	ldr	r3, [pc, #440]	; (8003798 <CGIForm_Handler4+0x318>)
 80035de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d021      	beq.n	800362a <CGIForm_Handler4+0x1aa>
					{
				Tt[tmp_id].e_dt = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80035e6:	4b6c      	ldr	r3, [pc, #432]	; (8003798 <CGIForm_Handler4+0x318>)
 80035e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ec:	4619      	mov	r1, r3
 80035ee:	4a6b      	ldr	r2, [pc, #428]	; (800379c <CGIForm_Handler4+0x31c>)
 80035f0:	460b      	mov	r3, r1
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	440b      	add	r3, r1
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	3310      	adds	r3, #16
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].e_dt = atoi(pcValue[i]); // Сохраняю в переменную
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	4413      	add	r3, r2
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a63      	ldr	r2, [pc, #396]	; (8003798 <CGIForm_Handler4+0x318>)
 800360c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003610:	4614      	mov	r4, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f013 faf3 	bl	8016bfe <atoi>
 8003618:	4602      	mov	r2, r0
 800361a:	4960      	ldr	r1, [pc, #384]	; (800379c <CGIForm_Handler4+0x31c>)
 800361c:	4623      	mov	r3, r4
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	4423      	add	r3, r4
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3310      	adds	r3, #16
 8003628:	601a      	str	r2, [r3, #0]
				//printf("e_dt ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].e_dt = %d\n", Tt[tmp_id].e_dt);
			}
			if (strcmp(pcParam[i], "pin_pin") == 0 && tmp_id != 0) // Переход от таблиц к форме
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	495e      	ldr	r1, [pc, #376]	; (80037b0 <CGIForm_Handler4+0x330>)
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc fdca 	bl	80001d0 <strcmp>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d124      	bne.n	800368c <CGIForm_Handler4+0x20c>
 8003642:	4b55      	ldr	r3, [pc, #340]	; (8003798 <CGIForm_Handler4+0x318>)
 8003644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01f      	beq.n	800368c <CGIForm_Handler4+0x20c>
					{
				Tt[tmp_id].pins[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 800364c:	4b52      	ldr	r3, [pc, #328]	; (8003798 <CGIForm_Handler4+0x318>)
 800364e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003652:	4619      	mov	r1, r3
 8003654:	4a51      	ldr	r2, [pc, #324]	; (800379c <CGIForm_Handler4+0x31c>)
 8003656:	460b      	mov	r3, r1
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	440b      	add	r3, r1
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	3302      	adds	r3, #2
 8003662:	2200      	movs	r2, #0
 8003664:	701a      	strb	r2, [r3, #0]
				strcpy(Tt[tmp_id].pins, pcValue[i]); // Сохраняю в переменную
 8003666:	4b4c      	ldr	r3, [pc, #304]	; (8003798 <CGIForm_Handler4+0x318>)
 8003668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366c:	461a      	mov	r2, r3
 800366e:	4613      	mov	r3, r2
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	4413      	add	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	4a49      	ldr	r2, [pc, #292]	; (800379c <CGIForm_Handler4+0x31c>)
 8003678:	4413      	add	r3, r2
 800367a:	1c98      	adds	r0, r3, #2
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	4413      	add	r3, r2
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4619      	mov	r1, r3
 8003688:	f014 f8c8 	bl	801781c <strcpy>
				//printf("pin_pin ID = %d\n", Tt[tmp_id].id);
				//printf("PINS = %s\n", Tt[tmp_id].pins);
			}
			// От таблицы к форме GET запрос

			if (strcmp(pcParam[i], "pin") == 0) {
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	4413      	add	r3, r2
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4947      	ldr	r1, [pc, #284]	; (80037b4 <CGIForm_Handler4+0x334>)
 8003698:	4618      	mov	r0, r3
 800369a:	f7fc fd99 	bl	80001d0 <strcmp>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10d      	bne.n	80036c0 <CGIForm_Handler4+0x240>
				//pins[0] = 0; // Очищаем элимент структуры перед перед записью новых данных.
				memset(&pins, '\0', sizeof(pins));
 80036a4:	2205      	movs	r2, #5
 80036a6:	2100      	movs	r1, #0
 80036a8:	4843      	ldr	r0, [pc, #268]	; (80037b8 <CGIForm_Handler4+0x338>)
 80036aa:	f013 fb07 	bl	8016cbc <memset>
				strcpy(pins, pcValue[i]); // Сохраняю в переменную
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	683a      	ldr	r2, [r7, #0]
 80036b4:	4413      	add	r3, r2
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	483f      	ldr	r0, [pc, #252]	; (80037b8 <CGIForm_Handler4+0x338>)
 80036bc:	f014 f8ae 	bl	801781c <strcpy>
				//printf("pin ID = %d\n", Tt[tmp_id].id);
				//printf("pin = %s\n", pins);
			}
			if (strcmp(pcParam[i], "h_repeat") == 0 && tmp_id != 0) // if the "t_repeat" string is found
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	493c      	ldr	r1, [pc, #240]	; (80037bc <CGIForm_Handler4+0x33c>)
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc fd7f 	bl	80001d0 <strcmp>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d126      	bne.n	8003726 <CGIForm_Handler4+0x2a6>
 80036d8:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <CGIForm_Handler4+0x318>)
 80036da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d021      	beq.n	8003726 <CGIForm_Handler4+0x2a6>
					{
				Tt[tmp_id].t_repeat = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80036e2:	4b2d      	ldr	r3, [pc, #180]	; (8003798 <CGIForm_Handler4+0x318>)
 80036e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e8:	4619      	mov	r1, r3
 80036ea:	4a2c      	ldr	r2, [pc, #176]	; (800379c <CGIForm_Handler4+0x31c>)
 80036ec:	460b      	mov	r3, r1
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	440b      	add	r3, r1
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	3314      	adds	r3, #20
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].t_repeat = atoi(pcValue[i]); // Сохраняю в переменную
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	4413      	add	r3, r2
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a24      	ldr	r2, [pc, #144]	; (8003798 <CGIForm_Handler4+0x318>)
 8003708:	f9b2 2000 	ldrsh.w	r2, [r2]
 800370c:	4614      	mov	r4, r2
 800370e:	4618      	mov	r0, r3
 8003710:	f013 fa75 	bl	8016bfe <atoi>
 8003714:	4602      	mov	r2, r0
 8003716:	4921      	ldr	r1, [pc, #132]	; (800379c <CGIForm_Handler4+0x31c>)
 8003718:	4623      	mov	r3, r4
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	4423      	add	r3, r4
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3314      	adds	r3, #20
 8003724:	601a      	str	r2, [r3, #0]
//				printf("t_repeat ID = %d\n", Tt[tmp_id].id);
//				printf("Tt[tmp_id].t_repeat = %d\n", Tt[tmp_id].t_repeat);
			}
			if (strcmp(pcParam[i], "set_num") == 0 && tmp_id != 0) // if the "e_dt" string is found
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4923      	ldr	r1, [pc, #140]	; (80037c0 <CGIForm_Handler4+0x340>)
 8003732:	4618      	mov	r0, r3
 8003734:	f7fc fd4c 	bl	80001d0 <strcmp>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d142      	bne.n	80037c4 <CGIForm_Handler4+0x344>
 800373e:	4b16      	ldr	r3, [pc, #88]	; (8003798 <CGIForm_Handler4+0x318>)
 8003740:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d03d      	beq.n	80037c4 <CGIForm_Handler4+0x344>
					{
				Tt[tmp_id].t_rept1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <CGIForm_Handler4+0x318>)
 800374a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800374e:	4619      	mov	r1, r3
 8003750:	4a12      	ldr	r2, [pc, #72]	; (800379c <CGIForm_Handler4+0x31c>)
 8003752:	460b      	mov	r3, r1
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	440b      	add	r3, r1
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	333e      	adds	r3, #62	; 0x3e
 800375e:	2200      	movs	r2, #0
 8003760:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].t_rept1 = atoi(pcValue[i]); // Сохраняю в переменную
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	4413      	add	r3, r2
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f013 fa46 	bl	8016bfe <atoi>
 8003772:	4602      	mov	r2, r0
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <CGIForm_Handler4+0x318>)
 8003776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800377a:	4619      	mov	r1, r3
 800377c:	b210      	sxth	r0, r2
 800377e:	4a07      	ldr	r2, [pc, #28]	; (800379c <CGIForm_Handler4+0x31c>)
 8003780:	460b      	mov	r3, r1
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	440b      	add	r3, r1
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	333e      	adds	r3, #62	; 0x3e
 800378c:	4602      	mov	r2, r0
 800378e:	801a      	strh	r2, [r3, #0]
 8003790:	e018      	b.n	80037c4 <CGIForm_Handler4+0x344>
 8003792:	bf00      	nop
 8003794:	0801c1c4 	.word	0x0801c1c4
 8003798:	200007ba 	.word	0x200007ba
 800379c:	2000174c 	.word	0x2000174c
 80037a0:	0801b58c 	.word	0x0801b58c
 80037a4:	200007b8 	.word	0x200007b8
 80037a8:	0801b57c 	.word	0x0801b57c
 80037ac:	0801b584 	.word	0x0801b584
 80037b0:	0801c1cc 	.word	0x0801c1cc
 80037b4:	0801c1d4 	.word	0x0801c1d4
 80037b8:	20000000 	.word	0x20000000
 80037bc:	0801c1d8 	.word	0x0801c1d8
 80037c0:	0801c1e4 	.word	0x0801c1e4
				//printf("t_rept1 ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].t_rept1 = %d\n", Tt[tmp_id].t_rept1);
			}
			if (strcmp(pcParam[i], "repeat") == 0 && tmp_id != 0) // if the "e_dt" string is found
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	49bc      	ldr	r1, [pc, #752]	; (8003ac0 <CGIForm_Handler4+0x640>)
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fc fcfd 	bl	80001d0 <strcmp>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d128      	bne.n	800382e <CGIForm_Handler4+0x3ae>
 80037dc:	4bb9      	ldr	r3, [pc, #740]	; (8003ac4 <CGIForm_Handler4+0x644>)
 80037de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d023      	beq.n	800382e <CGIForm_Handler4+0x3ae>
					{
				Tt[tmp_id].t_rept2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80037e6:	4bb7      	ldr	r3, [pc, #732]	; (8003ac4 <CGIForm_Handler4+0x644>)
 80037e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037ec:	4619      	mov	r1, r3
 80037ee:	4ab6      	ldr	r2, [pc, #728]	; (8003ac8 <CGIForm_Handler4+0x648>)
 80037f0:	460b      	mov	r3, r1
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	440b      	add	r3, r1
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	3340      	adds	r3, #64	; 0x40
 80037fc:	2200      	movs	r2, #0
 80037fe:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].t_rept2 = atoi(pcValue[i]); // Сохраняю в переменную
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	4413      	add	r3, r2
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f013 f9f7 	bl	8016bfe <atoi>
 8003810:	4602      	mov	r2, r0
 8003812:	4bac      	ldr	r3, [pc, #688]	; (8003ac4 <CGIForm_Handler4+0x644>)
 8003814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003818:	4619      	mov	r1, r3
 800381a:	b210      	sxth	r0, r2
 800381c:	4aaa      	ldr	r2, [pc, #680]	; (8003ac8 <CGIForm_Handler4+0x648>)
 800381e:	460b      	mov	r3, r1
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	440b      	add	r3, r1
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	3340      	adds	r3, #64	; 0x40
 800382a:	4602      	mov	r2, r0
 800382c:	801a      	strh	r2, [r3, #0]
				//printf("t_rept2 ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].t_rept2 = %d\n", Tt[tmp_id].t_rept2);
			}
			if (strcmp(pcParam[i], "action") == 0 && tmp_id != 0) // if the "e_dt" string is found
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	49a4      	ldr	r1, [pc, #656]	; (8003acc <CGIForm_Handler4+0x64c>)
 800383a:	4618      	mov	r0, r3
 800383c:	f7fc fcc8 	bl	80001d0 <strcmp>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d128      	bne.n	8003898 <CGIForm_Handler4+0x418>
 8003846:	4b9f      	ldr	r3, [pc, #636]	; (8003ac4 <CGIForm_Handler4+0x644>)
 8003848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d023      	beq.n	8003898 <CGIForm_Handler4+0x418>
					{
				Tt[tmp_id].t_action = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003850:	4b9c      	ldr	r3, [pc, #624]	; (8003ac4 <CGIForm_Handler4+0x644>)
 8003852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003856:	4619      	mov	r1, r3
 8003858:	4a9b      	ldr	r2, [pc, #620]	; (8003ac8 <CGIForm_Handler4+0x648>)
 800385a:	460b      	mov	r3, r1
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	440b      	add	r3, r1
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	3318      	adds	r3, #24
 8003866:	2200      	movs	r2, #0
 8003868:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].t_action = atoi(pcValue[i]); // Сохраняю в переменную
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4413      	add	r3, r2
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f013 f9c2 	bl	8016bfe <atoi>
 800387a:	4602      	mov	r2, r0
 800387c:	4b91      	ldr	r3, [pc, #580]	; (8003ac4 <CGIForm_Handler4+0x644>)
 800387e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003882:	4619      	mov	r1, r3
 8003884:	b210      	sxth	r0, r2
 8003886:	4a90      	ldr	r2, [pc, #576]	; (8003ac8 <CGIForm_Handler4+0x648>)
 8003888:	460b      	mov	r3, r1
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	440b      	add	r3, r1
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	3318      	adds	r3, #24
 8003894:	4602      	mov	r2, r0
 8003896:	801a      	strh	r2, [r3, #0]
				//printf("t_action ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].t_action = %d\n", Tt[tmp_id].t_action);
			}
			if (strcmp(pcParam[i], "immediately") == 0 && tmp_id != 0)  // if the "id" string is found
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	498b      	ldr	r1, [pc, #556]	; (8003ad0 <CGIForm_Handler4+0x650>)
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fc fc93 	bl	80001d0 <strcmp>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d128      	bne.n	8003902 <CGIForm_Handler4+0x482>
 80038b0:	4b84      	ldr	r3, [pc, #528]	; (8003ac4 <CGIForm_Handler4+0x644>)
 80038b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d023      	beq.n	8003902 <CGIForm_Handler4+0x482>
					{
				Tt[tmp_id].imm_ly = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80038ba:	4b82      	ldr	r3, [pc, #520]	; (8003ac4 <CGIForm_Handler4+0x644>)
 80038bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038c0:	4619      	mov	r1, r3
 80038c2:	4a81      	ldr	r2, [pc, #516]	; (8003ac8 <CGIForm_Handler4+0x648>)
 80038c4:	460b      	mov	r3, r1
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	440b      	add	r3, r1
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	3308      	adds	r3, #8
 80038d0:	2200      	movs	r2, #0
 80038d2:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].imm_ly = atoi(pcValue[i]); // Сохраняю в переменную
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	4413      	add	r3, r2
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f013 f98d 	bl	8016bfe <atoi>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b77      	ldr	r3, [pc, #476]	; (8003ac4 <CGIForm_Handler4+0x644>)
 80038e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ec:	4619      	mov	r1, r3
 80038ee:	b210      	sxth	r0, r2
 80038f0:	4a75      	ldr	r2, [pc, #468]	; (8003ac8 <CGIForm_Handler4+0x648>)
 80038f2:	460b      	mov	r3, r1
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	440b      	add	r3, r1
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	3308      	adds	r3, #8
 80038fe:	4602      	mov	r2, r0
 8003900:	801a      	strh	r2, [r3, #0]
				//printf("imm_ly ID = %d\n", Tt[tmp_id].id);
				//printf("imm_ly = %d\n", Tt[tmp_id].imm_ly);
			}
			if (strcmp(pcParam[i], "sunrise") == 0 && tmp_id != 0)  // if the "sunrise" string is found
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4971      	ldr	r1, [pc, #452]	; (8003ad4 <CGIForm_Handler4+0x654>)
 800390e:	4618      	mov	r0, r3
 8003910:	f7fc fc5e 	bl	80001d0 <strcmp>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d126      	bne.n	8003968 <CGIForm_Handler4+0x4e8>
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <CGIForm_Handler4+0x644>)
 800391c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d021      	beq.n	8003968 <CGIForm_Handler4+0x4e8>
					{
				Tt[tmp_id].sunrise = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003924:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <CGIForm_Handler4+0x644>)
 8003926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800392a:	4619      	mov	r1, r3
 800392c:	4a66      	ldr	r2, [pc, #408]	; (8003ac8 <CGIForm_Handler4+0x648>)
 800392e:	460b      	mov	r3, r1
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	440b      	add	r3, r1
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	3324      	adds	r3, #36	; 0x24
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].sunrise = atoi(pcValue[i]); // Сохраняю в переменную
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	4413      	add	r3, r2
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a5e      	ldr	r2, [pc, #376]	; (8003ac4 <CGIForm_Handler4+0x644>)
 800394a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800394e:	4614      	mov	r4, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f013 f954 	bl	8016bfe <atoi>
 8003956:	4602      	mov	r2, r0
 8003958:	495b      	ldr	r1, [pc, #364]	; (8003ac8 <CGIForm_Handler4+0x648>)
 800395a:	4623      	mov	r3, r4
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	4423      	add	r3, r4
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	3324      	adds	r3, #36	; 0x24
 8003966:	601a      	str	r2, [r3, #0]
				//printf("imm_ly ID = %d\n", Tt[tmp_id].id);
				//printf("sunrise = %d\n", Tt[tmp_id].sunrise);
			}
			if (strcmp(pcParam[i], "sunset") == 0 && tmp_id != 0)  // if the "sunset" string is found
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4959      	ldr	r1, [pc, #356]	; (8003ad8 <CGIForm_Handler4+0x658>)
 8003974:	4618      	mov	r0, r3
 8003976:	f7fc fc2b 	bl	80001d0 <strcmp>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d126      	bne.n	80039ce <CGIForm_Handler4+0x54e>
 8003980:	4b50      	ldr	r3, [pc, #320]	; (8003ac4 <CGIForm_Handler4+0x644>)
 8003982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d021      	beq.n	80039ce <CGIForm_Handler4+0x54e>
					{
				Tt[tmp_id].sunset = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800398a:	4b4e      	ldr	r3, [pc, #312]	; (8003ac4 <CGIForm_Handler4+0x644>)
 800398c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003990:	4619      	mov	r1, r3
 8003992:	4a4d      	ldr	r2, [pc, #308]	; (8003ac8 <CGIForm_Handler4+0x648>)
 8003994:	460b      	mov	r3, r1
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	440b      	add	r3, r1
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	4413      	add	r3, r2
 800399e:	3328      	adds	r3, #40	; 0x28
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].sunset = atoi(pcValue[i]); // Сохраняю в переменную
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	4413      	add	r3, r2
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a45      	ldr	r2, [pc, #276]	; (8003ac4 <CGIForm_Handler4+0x644>)
 80039b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80039b4:	4614      	mov	r4, r2
 80039b6:	4618      	mov	r0, r3
 80039b8:	f013 f921 	bl	8016bfe <atoi>
 80039bc:	4602      	mov	r2, r0
 80039be:	4942      	ldr	r1, [pc, #264]	; (8003ac8 <CGIForm_Handler4+0x648>)
 80039c0:	4623      	mov	r3, r4
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	4423      	add	r3, r4
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3328      	adds	r3, #40	; 0x28
 80039cc:	601a      	str	r2, [r3, #0]
				//printf("sunset ID = %d\n", Tt[tmp_id].id);
				//printf("sunset = %d\n", Tt[tmp_id].sunset);
			}


			if (strcmp(pcParam[i], "t_group") == 0 && tmp_id != 0)  // if the string is found
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4940      	ldr	r1, [pc, #256]	; (8003adc <CGIForm_Handler4+0x65c>)
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fc fbf8 	bl	80001d0 <strcmp>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d129      	bne.n	8003a3a <CGIForm_Handler4+0x5ba>
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <CGIForm_Handler4+0x644>)
 80039e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d024      	beq.n	8003a3a <CGIForm_Handler4+0x5ba>
					{
				//Tt[tmp_id].t_group[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
				memset(&Tt[tmp_id].t_group , '\0', sizeof(Tt[tmp_id].t_group ));
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <CGIForm_Handler4+0x644>)
 80039f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039f6:	461a      	mov	r2, r3
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	3318      	adds	r3, #24
 8003a02:	4a31      	ldr	r2, [pc, #196]	; (8003ac8 <CGIForm_Handler4+0x648>)
 8003a04:	4413      	add	r3, r2
 8003a06:	3302      	adds	r3, #2
 8003a08:	220a      	movs	r2, #10
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f013 f955 	bl	8016cbc <memset>
				strcpy(Tt[tmp_id].t_group, pcValue[i]);// Сохраняем значение в переменную.
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <CGIForm_Handler4+0x644>)
 8003a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	3318      	adds	r3, #24
 8003a24:	4a28      	ldr	r2, [pc, #160]	; (8003ac8 <CGIForm_Handler4+0x648>)
 8003a26:	4413      	add	r3, r2
 8003a28:	1c98      	adds	r0, r3, #2
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	4413      	add	r3, r2
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4619      	mov	r1, r3
 8003a36:	f013 fef1 	bl	801781c <strcpy>
			}
			if (strcmp(pcParam[i], "t_info") == 0 && tmp_id != 0)  // if the string is found
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4926      	ldr	r1, [pc, #152]	; (8003ae0 <CGIForm_Handler4+0x660>)
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fc fbc2 	bl	80001d0 <strcmp>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d129      	bne.n	8003aa6 <CGIForm_Handler4+0x626>
 8003a52:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <CGIForm_Handler4+0x644>)
 8003a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d024      	beq.n	8003aa6 <CGIForm_Handler4+0x626>
					{
				//Tt[tmp_id].t_info[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
				memset(&Tt[tmp_id].t_info , '\0', sizeof(Tt[tmp_id].t_info ));
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <CGIForm_Handler4+0x644>)
 8003a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a62:	461a      	mov	r2, r3
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	3328      	adds	r3, #40	; 0x28
 8003a6e:	4a16      	ldr	r2, [pc, #88]	; (8003ac8 <CGIForm_Handler4+0x648>)
 8003a70:	4413      	add	r3, r2
 8003a72:	3304      	adds	r3, #4
 8003a74:	220f      	movs	r2, #15
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f013 f91f 	bl	8016cbc <memset>
				strcpy(Tt[tmp_id].t_info, pcValue[i]);// Сохраняем значение в переменную.
 8003a7e:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <CGIForm_Handler4+0x644>)
 8003a80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	3328      	adds	r3, #40	; 0x28
 8003a90:	4a0d      	ldr	r2, [pc, #52]	; (8003ac8 <CGIForm_Handler4+0x648>)
 8003a92:	4413      	add	r3, r2
 8003a94:	1d18      	adds	r0, r3, #4
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f013 febb 	bl	801781c <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	f6ff acf3 	blt.w	800349c <CGIForm_Handler4+0x1c>
				//printf("Tt[tmp_id].t_info[15] = %s\n", Tt[tmp_id].t_info);
			}
		}
	}
	return "/edit_timers.shtml"; //
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <CGIForm_Handler4+0x664>)
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd90      	pop	{r4, r7, pc}
 8003ac0:	0801c1ec 	.word	0x0801c1ec
 8003ac4:	200007ba 	.word	0x200007ba
 8003ac8:	2000174c 	.word	0x2000174c
 8003acc:	0801c1f4 	.word	0x0801c1f4
 8003ad0:	0801c1fc 	.word	0x0801c1fc
 8003ad4:	0801b5c8 	.word	0x0801b5c8
 8003ad8:	0801b5d0 	.word	0x0801b5d0
 8003adc:	0801b5d8 	.word	0x0801b5d8
 8003ae0:	0801b5e0 	.word	0x0801b5e0
 8003ae4:	0801c174 	.word	0x0801c174

08003ae8 <httpd_post_begin>:
int http_post_content_len;
char urls[30] = { 0 };

err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	807b      	strh	r3, [r7, #2]

	http_post_content_len = content_len;
 8003af6:	4a0d      	ldr	r2, [pc, #52]	; (8003b2c <httpd_post_begin+0x44>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	6013      	str	r3, [r2, #0]
	strncpy(urls, uri, 15);
 8003afc:	220f      	movs	r2, #15
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	480b      	ldr	r0, [pc, #44]	; (8003b30 <httpd_post_begin+0x48>)
 8003b02:	f013 fea5 	bl	8017850 <strncpy>

	//printf("uri %s\r\n", uri);//////////////////////////////////

	if (current_connection != connection) {
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <httpd_post_begin+0x4c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d007      	beq.n	8003b20 <httpd_post_begin+0x38>
		current_connection = connection;
 8003b10:	4a08      	ldr	r2, [pc, #32]	; (8003b34 <httpd_post_begin+0x4c>)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <httpd_post_begin+0x50>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
		//snprintf(response_uri, response_uri_len, "/cgi_leds.html");
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e001      	b.n	8003b24 <httpd_post_begin+0x3c>
	}
	return ERR_VAL;
 8003b20:	f06f 0305 	mvn.w	r3, #5
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	200026b4 	.word	0x200026b4
 8003b30:	200007d8 	.word	0x200007d8
 8003b34:	200007d0 	.word	0x200007d0
 8003b38:	200007d4 	.word	0x200007d4

08003b3c <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
	//printf("OK POST 2 \r\n");
	//char data;
	if (current_connection == connection && p != NULL) {
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <httpd_post_receive_data+0x54>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d113      	bne.n	8003b78 <httpd_post_receive_data+0x3c>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d010      	beq.n	8003b78 <httpd_post_receive_data+0x3c>
		//data = p->payload;
		//printf("DATA %s \r\n", data);
		//strcat(bufervar, p->payload);
		//strncpy(readvar, p->payload, p->tot_len);
		strncpy(readvar, p->payload, p->len);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	895b      	ldrh	r3, [r3, #10]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	480c      	ldr	r0, [pc, #48]	; (8003b94 <httpd_post_receive_data+0x58>)
 8003b62:	f013 fe75 	bl	8017850 <strncpy>
		//strcpy(readvar, p->payload);
		//printf("DATA %s \r\n", readvar);
		//printf("num %d \r\n", p->len);
		strcat(bufervar, readvar);
 8003b66:	490b      	ldr	r1, [pc, #44]	; (8003b94 <httpd_post_receive_data+0x58>)
 8003b68:	480b      	ldr	r0, [pc, #44]	; (8003b98 <httpd_post_receive_data+0x5c>)
 8003b6a:	f013 fe3b 	bl	80177e4 <strcat>
		pbuf_free(p);
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f007 fd1e 	bl	800b5b0 <pbuf_free>
		//memset(data, '\0', sizeof(data));
		return ERR_OK;
 8003b74:	2300      	movs	r3, #0
 8003b76:	e007      	b.n	8003b88 <httpd_post_receive_data+0x4c>
	}

	if (p != NULL) {
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <httpd_post_receive_data+0x48>
		//printf("Очищаем полученные данные! \r\n");
		pbuf_free(p);
 8003b7e:	6838      	ldr	r0, [r7, #0]
 8003b80:	f007 fd16 	bl	800b5b0 <pbuf_free>
	}
	return ERR_VAL;
 8003b84:	f06f 0305 	mvn.w	r3, #5
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	200007d0 	.word	0x200007d0
 8003b94:	20001364 	.word	0x20001364
 8003b98:	2000419c 	.word	0x2000419c

08003b9c <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	f107 030c 	add.w	r3, r7, #12
 8003ba8:	6018      	str	r0, [r3, #0]
 8003baa:	f107 0308 	add.w	r3, r7, #8
 8003bae:	6019      	str	r1, [r3, #0]
 8003bb0:	1dbb      	adds	r3, r7, #6
 8003bb2:	801a      	strh	r2, [r3, #0]

	char *token; // "&"
	char *token1;// "="
	char *token2;// "_"
	char *name1; // Для сравнения полученных тегов из uri
	int z = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	int id;
	int variable1 = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	int variable2;
	//char urlline[http_post_content_len];
	char urlline[1000] = { 0 };
 8003bc0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f013 f873 	bl	8016cbc <memset>
	char name0[50] = { 0 };
 8003bd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	3304      	adds	r3, #4
 8003be0:	222e      	movs	r2, #46	; 0x2e
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f013 f869 	bl	8016cbc <memset>
	char nametoken[50] = { 0 };
 8003bea:	f107 0320 	add.w	r3, r7, #32
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	3304      	adds	r3, #4
 8003bf4:	222e      	movs	r2, #46	; 0x2e
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f013 f85f 	bl	8016cbc <memset>

	memset(name0, '\0', sizeof(name0));
 8003bfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c02:	2232      	movs	r2, #50	; 0x32
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f013 f858 	bl	8016cbc <memset>
	//memset(urlline, '\0', sizeof(urlline));
	strncpy(urlline, bufervar, http_post_content_len);
 8003c0c:	4bcb      	ldr	r3, [pc, #812]	; (8003f3c <httpd_post_finished+0x3a0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003c16:	49ca      	ldr	r1, [pc, #808]	; (8003f40 <httpd_post_finished+0x3a4>)
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f013 fe19 	bl	8017850 <strncpy>
	//printf("%s \r\n", urlline);
//	printf("COUNT %d \r\n", http_post_content_len);

	char *rest = urlline;
 8003c1e:	f107 031c 	add.w	r3, r7, #28
 8003c22:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003c26:	601a      	str	r2, [r3, #0]
	while ((token = strtok_r(rest, "&", &rest))) {
 8003c28:	e26a      	b.n	8004100 <httpd_post_finished+0x564>
		//printf("%s\n", token);
		char *rest1 = token;
 8003c2a:	f107 0318 	add.w	r3, r7, #24
 8003c2e:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8003c32:	601a      	str	r2, [r3, #0]
		strcat(name0, token); // решение с пустой строкой
 8003c34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c38:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f013 fdd1 	bl	80177e4 <strcat>
		y = 0;
 8003c42:	4bc0      	ldr	r3, [pc, #768]	; (8003f44 <httpd_post_finished+0x3a8>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8003c48:	e216      	b.n	8004078 <httpd_post_finished+0x4dc>
			z = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
			if (y == 0) {
 8003c50:	4bbc      	ldr	r3, [pc, #752]	; (8003f44 <httpd_post_finished+0x3a8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d12b      	bne.n	8003cb0 <httpd_post_finished+0x114>
				//printf("NAME %s\n", token1);
				// получение id
				char *rest2 = token1;
 8003c58:	f107 0314 	add.w	r3, r7, #20
 8003c5c:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8003c60:	601a      	str	r2, [r3, #0]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8003c62:	e016      	b.n	8003c92 <httpd_post_finished+0xf6>
					if (z == 0) {
 8003c64:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <httpd_post_finished+0xd8>
						name1 = token2;
 8003c6c:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003c70:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
					}
					if (z == 1) {
 8003c74:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <httpd_post_finished+0xec>
						id = atoi(token2);
 8003c7c:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8003c80:	f012 ffbd 	bl	8016bfe <atoi>
 8003c84:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
						//printf("ID %d\n", id);
					}
					z++;
 8003c88:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8003c92:	f107 0314 	add.w	r3, r7, #20
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f107 0214 	add.w	r2, r7, #20
 8003c9c:	49aa      	ldr	r1, [pc, #680]	; (8003f48 <httpd_post_finished+0x3ac>)
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f014 fc90 	bl	80185c4 <strtok_r>
 8003ca4:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
 8003ca8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1d9      	bne.n	8003c64 <httpd_post_finished+0xc8>
				}
			}
			if (y == 1) {
 8003cb0:	4ba4      	ldr	r3, [pc, #656]	; (8003f44 <httpd_post_finished+0x3a8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f040 81da 	bne.w	800406e <httpd_post_finished+0x4d2>
				// значение переменной
				//printf("VAL %s\n", token1);
				// пишем в структуру
				if (strcmp(name1, "ptype") == 0) {
 8003cba:	49a4      	ldr	r1, [pc, #656]	; (8003f4c <httpd_post_finished+0x3b0>)
 8003cbc:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003cc0:	f7fc fa86 	bl	80001d0 <strcmp>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10d      	bne.n	8003ce6 <httpd_post_finished+0x14a>
					strcpy(T[id].ptype, token1);
 8003cca:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003cce:	2268      	movs	r2, #104	; 0x68
 8003cd0:	fb02 f303 	mul.w	r3, r2, r3
 8003cd4:	3318      	adds	r3, #24
 8003cd6:	4a9e      	ldr	r2, [pc, #632]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003cd8:	4413      	add	r3, r2
 8003cda:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f013 fd9c 	bl	801781c <strcpy>
 8003ce4:	e1c3      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "topin") == 0) {
 8003ce6:	499b      	ldr	r1, [pc, #620]	; (8003f54 <httpd_post_finished+0x3b8>)
 8003ce8:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003cec:	f7fc fa70 	bl	80001d0 <strcmp>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10d      	bne.n	8003d12 <httpd_post_finished+0x176>
					T[id].topin = atoi(token1);
 8003cf6:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003cfa:	f012 ff80 	bl	8016bfe <atoi>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	4993      	ldr	r1, [pc, #588]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003d02:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003d06:	2068      	movs	r0, #104	; 0x68
 8003d08:	fb00 f303 	mul.w	r3, r0, r3
 8003d0c:	440b      	add	r3, r1
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	e1ad      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "binter") == 0) {
 8003d12:	4991      	ldr	r1, [pc, #580]	; (8003f58 <httpd_post_finished+0x3bc>)
 8003d14:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003d18:	f7fc fa5a 	bl	80001d0 <strcmp>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10e      	bne.n	8003d40 <httpd_post_finished+0x1a4>
					T[id].binter = atoi(token1);
 8003d22:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003d26:	f012 ff6a 	bl	8016bfe <atoi>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4988      	ldr	r1, [pc, #544]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003d2e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003d32:	2068      	movs	r0, #104	; 0x68
 8003d34:	fb00 f303 	mul.w	r3, r0, r3
 8003d38:	440b      	add	r3, r1
 8003d3a:	332c      	adds	r3, #44	; 0x2c
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e196      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "hinter") == 0) {
 8003d40:	4986      	ldr	r1, [pc, #536]	; (8003f5c <httpd_post_finished+0x3c0>)
 8003d42:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003d46:	f7fc fa43 	bl	80001d0 <strcmp>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10e      	bne.n	8003d6e <httpd_post_finished+0x1d2>
					T[id].hinter = atoi(token1);
 8003d50:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003d54:	f012 ff53 	bl	8016bfe <atoi>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	497d      	ldr	r1, [pc, #500]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003d5c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003d60:	2068      	movs	r0, #104	; 0x68
 8003d62:	fb00 f303 	mul.w	r3, r0, r3
 8003d66:	440b      	add	r3, r1
 8003d68:	3330      	adds	r3, #48	; 0x30
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e17f      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "repeat") == 0) {
 8003d6e:	497c      	ldr	r1, [pc, #496]	; (8003f60 <httpd_post_finished+0x3c4>)
 8003d70:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003d74:	f7fc fa2c 	bl	80001d0 <strcmp>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10e      	bne.n	8003d9c <httpd_post_finished+0x200>
					T[id].repeat = atoi(token1);
 8003d7e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003d82:	f012 ff3c 	bl	8016bfe <atoi>
 8003d86:	4602      	mov	r2, r0
 8003d88:	4971      	ldr	r1, [pc, #452]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003d8a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003d8e:	2068      	movs	r0, #104	; 0x68
 8003d90:	fb00 f303 	mul.w	r3, r0, r3
 8003d94:	440b      	add	r3, r1
 8003d96:	3334      	adds	r3, #52	; 0x34
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	e168      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "rinter") == 0) {
 8003d9c:	4971      	ldr	r1, [pc, #452]	; (8003f64 <httpd_post_finished+0x3c8>)
 8003d9e:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003da2:	f7fc fa15 	bl	80001d0 <strcmp>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10e      	bne.n	8003dca <httpd_post_finished+0x22e>
					T[id].rinter = atoi(token1);
 8003dac:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003db0:	f012 ff25 	bl	8016bfe <atoi>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4966      	ldr	r1, [pc, #408]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003db8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003dbc:	2068      	movs	r0, #104	; 0x68
 8003dbe:	fb00 f303 	mul.w	r3, r0, r3
 8003dc2:	440b      	add	r3, r1
 8003dc4:	3338      	adds	r3, #56	; 0x38
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e151      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "dcinter") == 0) {
 8003dca:	4967      	ldr	r1, [pc, #412]	; (8003f68 <httpd_post_finished+0x3cc>)
 8003dcc:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003dd0:	f7fc f9fe 	bl	80001d0 <strcmp>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10e      	bne.n	8003df8 <httpd_post_finished+0x25c>
					T[id].dcinter = atoi(token1);
 8003dda:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003dde:	f012 ff0e 	bl	8016bfe <atoi>
 8003de2:	4602      	mov	r2, r0
 8003de4:	495a      	ldr	r1, [pc, #360]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003de6:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003dea:	2068      	movs	r0, #104	; 0x68
 8003dec:	fb00 f303 	mul.w	r3, r0, r3
 8003df0:	440b      	add	r3, r1
 8003df2:	333c      	adds	r3, #60	; 0x3c
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e13a      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "pclick") == 0) {
 8003df8:	495c      	ldr	r1, [pc, #368]	; (8003f6c <httpd_post_finished+0x3d0>)
 8003dfa:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003dfe:	f7fc f9e7 	bl	80001d0 <strcmp>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10e      	bne.n	8003e26 <httpd_post_finished+0x28a>
					T[id].pclick = atoi(token1);
 8003e08:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003e0c:	f012 fef7 	bl	8016bfe <atoi>
 8003e10:	4602      	mov	r2, r0
 8003e12:	494f      	ldr	r1, [pc, #316]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003e14:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003e18:	2068      	movs	r0, #104	; 0x68
 8003e1a:	fb00 f303 	mul.w	r3, r0, r3
 8003e1e:	440b      	add	r3, r1
 8003e20:	3340      	adds	r3, #64	; 0x40
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e123      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "info") == 0) {
 8003e26:	4952      	ldr	r1, [pc, #328]	; (8003f70 <httpd_post_finished+0x3d4>)
 8003e28:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003e2c:	f7fc f9d0 	bl	80001d0 <strcmp>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10e      	bne.n	8003e54 <httpd_post_finished+0x2b8>
					//memset(T[id].info, '\0', sizeof(T[id].info));
					strcpy(T[id].info, token1);
 8003e36:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003e3a:	2268      	movs	r2, #104	; 0x68
 8003e3c:	fb02 f303 	mul.w	r3, r2, r3
 8003e40:	3340      	adds	r3, #64	; 0x40
 8003e42:	4a43      	ldr	r2, [pc, #268]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003e44:	4413      	add	r3, r2
 8003e46:	3304      	adds	r3, #4
 8003e48:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f013 fce5 	bl	801781c <strcpy>
 8003e52:	e10c      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "onoff") == 0) {
 8003e54:	4947      	ldr	r1, [pc, #284]	; (8003f74 <httpd_post_finished+0x3d8>)
 8003e56:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003e5a:	f7fc f9b9 	bl	80001d0 <strcmp>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10e      	bne.n	8003e82 <httpd_post_finished+0x2e6>
					T[id].onoff = atoi(token1);
 8003e64:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003e68:	f012 fec9 	bl	8016bfe <atoi>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4938      	ldr	r1, [pc, #224]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003e70:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003e74:	2068      	movs	r0, #104	; 0x68
 8003e76:	fb00 f303 	mul.w	r3, r0, r3
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3364      	adds	r3, #100	; 0x64
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e0f5      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "pwm") == 0) {
 8003e82:	493d      	ldr	r1, [pc, #244]	; (8003f78 <httpd_post_finished+0x3dc>)
 8003e84:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003e88:	f7fc f9a2 	bl	80001d0 <strcmp>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10e      	bne.n	8003eb0 <httpd_post_finished+0x314>
					T[id].pwm = atoi(token1);
 8003e92:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003e96:	f012 feb2 	bl	8016bfe <atoi>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	492c      	ldr	r1, [pc, #176]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003e9e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003ea2:	2068      	movs	r0, #104	; 0x68
 8003ea4:	fb00 f303 	mul.w	r3, r0, r3
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3304      	adds	r3, #4
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e0de      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "on") == 0) {
 8003eb0:	4932      	ldr	r1, [pc, #200]	; (8003f7c <httpd_post_finished+0x3e0>)
 8003eb2:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003eb6:	f7fc f98b 	bl	80001d0 <strcmp>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10e      	bne.n	8003ede <httpd_post_finished+0x342>
					T[id].on = atoi(token1);
 8003ec0:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003ec4:	f012 fe9b 	bl	8016bfe <atoi>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4921      	ldr	r1, [pc, #132]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003ecc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003ed0:	2068      	movs	r0, #104	; 0x68
 8003ed2:	fb00 f303 	mul.w	r3, r0, r3
 8003ed6:	440b      	add	r3, r1
 8003ed8:	3308      	adds	r3, #8
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e0c7      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "istate") == 0) {
 8003ede:	4928      	ldr	r1, [pc, #160]	; (8003f80 <httpd_post_finished+0x3e4>)
 8003ee0:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003ee4:	f7fc f974 	bl	80001d0 <strcmp>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10e      	bne.n	8003f0c <httpd_post_finished+0x370>
					T[id].istate = atoi(token1);
 8003eee:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003ef2:	f012 fe84 	bl	8016bfe <atoi>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	4915      	ldr	r1, [pc, #84]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003efa:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003efe:	2068      	movs	r0, #104	; 0x68
 8003f00:	fb00 f303 	mul.w	r3, r0, r3
 8003f04:	440b      	add	r3, r1
 8003f06:	330c      	adds	r3, #12
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	e0b0      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "dvalue") == 0) {
 8003f0c:	491d      	ldr	r1, [pc, #116]	; (8003f84 <httpd_post_finished+0x3e8>)
 8003f0e:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003f12:	f7fc f95d 	bl	80001d0 <strcmp>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d135      	bne.n	8003f88 <httpd_post_finished+0x3ec>
					T[id].dvalue = atoi(token1);
 8003f1c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003f20:	f012 fe6d 	bl	8016bfe <atoi>
 8003f24:	4602      	mov	r2, r0
 8003f26:	490a      	ldr	r1, [pc, #40]	; (8003f50 <httpd_post_finished+0x3b4>)
 8003f28:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003f2c:	2068      	movs	r0, #104	; 0x68
 8003f2e:	fb00 f303 	mul.w	r3, r0, r3
 8003f32:	440b      	add	r3, r1
 8003f34:	3310      	adds	r3, #16
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e099      	b.n	800406e <httpd_post_finished+0x4d2>
 8003f3a:	bf00      	nop
 8003f3c:	200026b4 	.word	0x200026b4
 8003f40:	2000419c 	.word	0x2000419c
 8003f44:	20006c30 	.word	0x20006c30
 8003f48:	0801c208 	.word	0x0801c208
 8003f4c:	0801c20c 	.word	0x0801c20c
 8003f50:	20002a0c 	.word	0x20002a0c
 8003f54:	0801c214 	.word	0x0801c214
 8003f58:	0801c21c 	.word	0x0801c21c
 8003f5c:	0801c224 	.word	0x0801c224
 8003f60:	0801c1ec 	.word	0x0801c1ec
 8003f64:	0801c22c 	.word	0x0801c22c
 8003f68:	0801c234 	.word	0x0801c234
 8003f6c:	0801c23c 	.word	0x0801c23c
 8003f70:	0801c244 	.word	0x0801c244
 8003f74:	0801c24c 	.word	0x0801c24c
 8003f78:	0801c254 	.word	0x0801c254
 8003f7c:	0801c258 	.word	0x0801c258
 8003f80:	0801c25c 	.word	0x0801c25c
 8003f84:	0801c264 	.word	0x0801c264
				} else if (strcmp(name1, "ponr") == 0) {
 8003f88:	4983      	ldr	r1, [pc, #524]	; (8004198 <httpd_post_finished+0x5fc>)
 8003f8a:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003f8e:	f7fc f91f 	bl	80001d0 <strcmp>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10e      	bne.n	8003fb6 <httpd_post_finished+0x41a>
					T[id].ponr = atoi(token1);
 8003f98:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003f9c:	f012 fe2f 	bl	8016bfe <atoi>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	497e      	ldr	r1, [pc, #504]	; (800419c <httpd_post_finished+0x600>)
 8003fa4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003fa8:	2068      	movs	r0, #104	; 0x68
 8003faa:	fb00 f303 	mul.w	r3, r0, r3
 8003fae:	440b      	add	r3, r1
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e05b      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "idin") == 0) {
 8003fb6:	497a      	ldr	r1, [pc, #488]	; (80041a0 <httpd_post_finished+0x604>)
 8003fb8:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003fbc:	f7fc f908 	bl	80001d0 <strcmp>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d139      	bne.n	800403a <httpd_post_finished+0x49e>
					//printf("idin------- %d \r\n", atoi(token1));
					while (variable1 <= numpintopin - 1) {
 8003fc6:	e030      	b.n	800402a <httpd_post_finished+0x48e>
						if (TO[variable1].flag == 0) {
 8003fc8:	4976      	ldr	r1, [pc, #472]	; (80041a4 <httpd_post_finished+0x608>)
 8003fca:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8003fce:	4613      	mov	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	3308      	adds	r3, #8
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d11f      	bne.n	8004020 <httpd_post_finished+0x484>
							TO[variable1].idin = atoi(token1);
 8003fe0:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003fe4:	f012 fe0b 	bl	8016bfe <atoi>
 8003fe8:	4601      	mov	r1, r0
 8003fea:	486e      	ldr	r0, [pc, #440]	; (80041a4 <httpd_post_finished+0x608>)
 8003fec:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4403      	add	r3, r0
 8003ffa:	6019      	str	r1, [r3, #0]
							variable2 = variable1;
 8003ffc:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8004000:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
							TO[variable1].flag = 1;
 8004004:	4967      	ldr	r1, [pc, #412]	; (80041a4 <httpd_post_finished+0x608>)
 8004006:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800400a:	4613      	mov	r3, r2
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3308      	adds	r3, #8
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]
							variable1 = numpintopin;
 800401a:	2346      	movs	r3, #70	; 0x46
 800401c:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
						}
						variable1++;
 8004020:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8004024:	3301      	adds	r3, #1
 8004026:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
					while (variable1 <= numpintopin - 1) {
 800402a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 800402e:	2b45      	cmp	r3, #69	; 0x45
 8004030:	ddca      	ble.n	8003fc8 <httpd_post_finished+0x42c>
					}
					variable1 = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8004038:	e019      	b.n	800406e <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "idout") == 0) {
 800403a:	495b      	ldr	r1, [pc, #364]	; (80041a8 <httpd_post_finished+0x60c>)
 800403c:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8004040:	f7fc f8c6 	bl	80001d0 <strcmp>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d111      	bne.n	800406e <httpd_post_finished+0x4d2>
					TO[variable2].idout = atoi(token1);
 800404a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800404e:	f012 fdd6 	bl	8016bfe <atoi>
 8004052:	4601      	mov	r1, r0
 8004054:	4853      	ldr	r0, [pc, #332]	; (80041a4 <httpd_post_finished+0x608>)
 8004056:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4403      	add	r3, r0
 8004064:	3304      	adds	r3, #4
 8004066:	6019      	str	r1, [r3, #0]
					variable2 = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
//							}
//							variable1 = 0;
					//////////////
				}
			}
			y++;
 800406e:	4b4f      	ldr	r3, [pc, #316]	; (80041ac <httpd_post_finished+0x610>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3301      	adds	r3, #1
 8004074:	4a4d      	ldr	r2, [pc, #308]	; (80041ac <httpd_post_finished+0x610>)
 8004076:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8004078:	f107 0318 	add.w	r3, r7, #24
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f107 0218 	add.w	r2, r7, #24
 8004082:	494b      	ldr	r1, [pc, #300]	; (80041b0 <httpd_post_finished+0x614>)
 8004084:	4618      	mov	r0, r3
 8004086:	f014 fa9d 	bl	80185c4 <strtok_r>
 800408a:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
 800408e:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8004092:	2b00      	cmp	r3, #0
 8004094:	f47f add9 	bne.w	8003c4a <httpd_post_finished+0xae>
		}
		// решение с пустой строкой
		sprintf(nametoken, "infofield_%d=", id); // Если поле пустое то его заполняем "null".
 8004098:	f107 0320 	add.w	r3, r7, #32
 800409c:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 80040a0:	4944      	ldr	r1, [pc, #272]	; (80041b4 <httpd_post_finished+0x618>)
 80040a2:	4618      	mov	r0, r3
 80040a4:	f013 fb7e 	bl	80177a4 <siprintf>
		if (strcmp(name0, nametoken) == 0) {
 80040a8:	f107 0220 	add.w	r2, r7, #32
 80040ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fc f88c 	bl	80001d0 <strcmp>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10d      	bne.n	80040da <httpd_post_finished+0x53e>
			strcpy(T[id].info, "null");
 80040be:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80040c2:	2268      	movs	r2, #104	; 0x68
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	3340      	adds	r3, #64	; 0x40
 80040ca:	4a34      	ldr	r2, [pc, #208]	; (800419c <httpd_post_finished+0x600>)
 80040cc:	4413      	add	r3, r2
 80040ce:	3304      	adds	r3, #4
 80040d0:	4a39      	ldr	r2, [pc, #228]	; (80041b8 <httpd_post_finished+0x61c>)
 80040d2:	6810      	ldr	r0, [r2, #0]
 80040d4:	6018      	str	r0, [r3, #0]
 80040d6:	7912      	ldrb	r2, [r2, #4]
 80040d8:	711a      	strb	r2, [r3, #4]
			//printf("Yes \n");
		}
		memset(name0, '\0', sizeof(name0));
 80040da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040de:	2232      	movs	r2, #50	; 0x32
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f012 fdea 	bl	8016cbc <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 80040e8:	f107 0320 	add.w	r3, r7, #32
 80040ec:	2232      	movs	r2, #50	; 0x32
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f012 fde3 	bl	8016cbc <memset>
		z++;
 80040f6:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80040fa:	3301      	adds	r3, #1
 80040fc:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	while ((token = strtok_r(rest, "&", &rest))) {
 8004100:	f107 031c 	add.w	r3, r7, #28
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f107 021c 	add.w	r2, r7, #28
 800410a:	492c      	ldr	r1, [pc, #176]	; (80041bc <httpd_post_finished+0x620>)
 800410c:	4618      	mov	r0, r3
 800410e:	f014 fa59 	bl	80185c4 <strtok_r>
 8004112:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
 8004116:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800411a:	2b00      	cmp	r3, #0
 800411c:	f47f ad85 	bne.w	8003c2a <httpd_post_finished+0x8e>
	}

	memset(urlline, '\0', sizeof(urlline));   // Очищаем urlline
 8004120:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f012 fdc6 	bl	8016cbc <memset>
	memset(bufervar, '\0', sizeof(bufervar)); // Очищаем bufervar
 8004130:	f642 1204 	movw	r2, #10500	; 0x2904
 8004134:	2100      	movs	r1, #0
 8004136:	4822      	ldr	r0, [pc, #136]	; (80041c0 <httpd_post_finished+0x624>)
 8004138:	f012 fdc0 	bl	8016cbc <memset>
	//memset(json, '\0', sizeof(json));
	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	//snprintf(response_uri, response_uri_len, "/tab.shtml");
	snprintf(response_uri, response_uri_len, urls);
 800413c:	1dbb      	adds	r3, r7, #6
 800413e:	8819      	ldrh	r1, [r3, #0]
 8004140:	f107 0308 	add.w	r3, r7, #8
 8004144:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <httpd_post_finished+0x628>)
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	f013 faf8 	bl	801773c <sniprintf>
	if (current_connection == connection) {
 800414c:	4b1e      	ldr	r3, [pc, #120]	; (80041c8 <httpd_post_finished+0x62c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f107 020c 	add.w	r2, r7, #12
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d114      	bne.n	8004184 <httpd_post_finished+0x5e8>
		if (valid_connection == connection) {
 800415a:	4b1c      	ldr	r3, [pc, #112]	; (80041cc <httpd_post_finished+0x630>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f107 020c 	add.w	r2, r7, #12
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d107      	bne.n	8004178 <httpd_post_finished+0x5dc>
			/* login succeeded */
			//snprintf(response_uri, response_uri_len, "/tab.shtml");
			snprintf(response_uri, response_uri_len, urls);
 8004168:	1dbb      	adds	r3, r7, #6
 800416a:	8819      	ldrh	r1, [r3, #0]
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <httpd_post_finished+0x628>)
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	f013 fae2 	bl	801773c <sniprintf>
		}
		current_connection = NULL;
 8004178:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <httpd_post_finished+0x62c>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <httpd_post_finished+0x630>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
}
 800418c:	bf00      	nop
 800418e:	f507 6792 	add.w	r7, r7, #1168	; 0x490
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	0801c26c 	.word	0x0801c26c
 800419c:	20002a0c 	.word	0x20002a0c
 80041a0:	0801c274 	.word	0x0801c274
 80041a4:	200026b8 	.word	0x200026b8
 80041a8:	0801c27c 	.word	0x0801c27c
 80041ac:	20006c30 	.word	0x20006c30
 80041b0:	0801c284 	.word	0x0801c284
 80041b4:	0801c288 	.word	0x0801c288
 80041b8:	0801c298 	.word	0x0801c298
 80041bc:	0801c2a0 	.word	0x0801c2a0
 80041c0:	2000419c 	.word	0x2000419c
 80041c4:	200007d8 	.word	0x200007d8
 80041c8:	200007d0 	.word	0x200007d0
 80041cc:	200007d4 	.word	0x200007d4

080041d0 <http_server_init>:

//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
	httpd_init();
 80041d4:	f005 fdc0 	bl	8009d58 <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 41); // 2. Указал точное количество тегов.
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <http_server_init+0x24>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2229      	movs	r2, #41	; 0x29
 80041de:	4619      	mov	r1, r3
 80041e0:	4805      	ldr	r0, [pc, #20]	; (80041f8 <http_server_init+0x28>)
 80041e2:	f005 fdd9 	bl	8009d98 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	//CGI_TAB[0] = FORM_CGI; // CGI структуру
	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); // 5. И теперь мы передадим структуру массива в CGI_handle!
 80041e6:	2307      	movs	r3, #7
 80041e8:	4619      	mov	r1, r3
 80041ea:	4804      	ldr	r0, [pc, #16]	; (80041fc <http_server_init+0x2c>)
 80041ec:	f005 fe16 	bl	8009e1c <http_set_cgi_handlers>
}
 80041f0:	bf00      	nop
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	200005ac 	.word	0x200005ac
 80041f8:	08000f6d 	.word	0x08000f6d
 80041fc:	0801f8c4 	.word	0x0801f8c4

08004200 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004208:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800420c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	d013      	beq.n	8004240 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004218:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800421c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004220:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004228:	e000      	b.n	800422c <ITM_SendChar+0x2c>
    {
      __NOP();
 800422a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800422c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f9      	beq.n	800422a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004236:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004240:	687b      	ldr	r3, [r7, #4]
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	b29a      	uxth	r2, r3
 8004260:	2332      	movs	r3, #50	; 0x32
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	480c      	ldr	r0, [pc, #48]	; (8004298 <_write+0x48>)
 8004266:	f002 feba 	bl	8006fde <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	e009      	b.n	8004284 <_write+0x34>
		ITM_SendChar(*ptr++);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	60ba      	str	r2, [r7, #8]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ffc1 	bl	8004200 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	3301      	adds	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	429a      	cmp	r2, r3
 800428a:	dbf1      	blt.n	8004270 <_write+0x20>
	}
	return len;
 800428c:	687b      	ldr	r3, [r7, #4]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20006d60 	.word	0x20006d60

0800429c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042a0:	f000 faf2 	bl	8004888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042a4:	f000 f816 	bl	80042d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042a8:	f000 f8a8 	bl	80043fc <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80042ac:	f000 f87c 	bl	80043a8 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 80042b0:	f003 f95e 	bl	8007570 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 80042b4:	f7ff ff8c 	bl	80041d0 <http_server_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello world! \r\n");
 80042b8:	4804      	ldr	r0, [pc, #16]	; (80042cc <main+0x30>)
 80042ba:	f013 f9f7 	bl	80176ac <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80042be:	4804      	ldr	r0, [pc, #16]	; (80042d0 <main+0x34>)
 80042c0:	f003 fd2e 	bl	8007d20 <ethernetif_input>
	  sys_check_timeouts();
 80042c4:	f00d fe3e 	bl	8011f44 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80042c8:	e7f9      	b.n	80042be <main+0x22>
 80042ca:	bf00      	nop
 80042cc:	0801c2a4 	.word	0x0801c2a4
 80042d0:	20006df4 	.word	0x20006df4

080042d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b094      	sub	sp, #80	; 0x50
 80042d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042da:	f107 0320 	add.w	r3, r7, #32
 80042de:	2230      	movs	r2, #48	; 0x30
 80042e0:	2100      	movs	r1, #0
 80042e2:	4618      	mov	r0, r3
 80042e4:	f012 fcea 	bl	8016cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042e8:	f107 030c 	add.w	r3, r7, #12
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	60da      	str	r2, [r3, #12]
 80042f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80042f8:	2300      	movs	r3, #0
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	4b28      	ldr	r3, [pc, #160]	; (80043a0 <SystemClock_Config+0xcc>)
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <SystemClock_Config+0xcc>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	6413      	str	r3, [r2, #64]	; 0x40
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <SystemClock_Config+0xcc>)
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004314:	2300      	movs	r3, #0
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <SystemClock_Config+0xd0>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a21      	ldr	r2, [pc, #132]	; (80043a4 <SystemClock_Config+0xd0>)
 800431e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <SystemClock_Config+0xd0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004330:	2301      	movs	r3, #1
 8004332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800433a:	2302      	movs	r3, #2
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800433e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004344:	2304      	movs	r3, #4
 8004346:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004348:	23a8      	movs	r3, #168	; 0xa8
 800434a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800434c:	2302      	movs	r3, #2
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004350:	2304      	movs	r3, #4
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004354:	f107 0320 	add.w	r3, r7, #32
 8004358:	4618      	mov	r0, r3
 800435a:	f001 fe9f 	bl	800609c <HAL_RCC_OscConfig>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004364:	f000 f8a0 	bl	80044a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004368:	230f      	movs	r3, #15
 800436a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800436c:	2302      	movs	r3, #2
 800436e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004374:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004378:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800437a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800437e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	2105      	movs	r1, #5
 8004386:	4618      	mov	r0, r3
 8004388:	f002 f900 	bl	800658c <HAL_RCC_ClockConfig>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004392:	f000 f889 	bl	80044a8 <Error_Handler>
  }
}
 8004396:	bf00      	nop
 8004398:	3750      	adds	r7, #80	; 0x50
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40023800 	.word	0x40023800
 80043a4:	40007000 	.word	0x40007000

080043a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80043ac:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <MX_USART6_UART_Init+0x4c>)
 80043ae:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <MX_USART6_UART_Init+0x50>)
 80043b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80043b2:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <MX_USART6_UART_Init+0x4c>)
 80043b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80043ba:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <MX_USART6_UART_Init+0x4c>)
 80043bc:	2200      	movs	r2, #0
 80043be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <MX_USART6_UART_Init+0x4c>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <MX_USART6_UART_Init+0x4c>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80043cc:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <MX_USART6_UART_Init+0x4c>)
 80043ce:	220c      	movs	r2, #12
 80043d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043d2:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <MX_USART6_UART_Init+0x4c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <MX_USART6_UART_Init+0x4c>)
 80043da:	2200      	movs	r2, #0
 80043dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80043de:	4805      	ldr	r0, [pc, #20]	; (80043f4 <MX_USART6_UART_Init+0x4c>)
 80043e0:	f002 fdb0 	bl	8006f44 <HAL_UART_Init>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80043ea:	f000 f85d 	bl	80044a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80043ee:	bf00      	nop
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20006d60 	.word	0x20006d60
 80043f8:	40011400 	.word	0x40011400

080043fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <MX_GPIO_Init+0x84>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <MX_GPIO_Init+0x84>)
 800440c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
 8004412:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <MX_GPIO_Init+0x84>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	4b17      	ldr	r3, [pc, #92]	; (8004480 <MX_GPIO_Init+0x84>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	4a16      	ldr	r2, [pc, #88]	; (8004480 <MX_GPIO_Init+0x84>)
 8004428:	f043 0304 	orr.w	r3, r3, #4
 800442c:	6313      	str	r3, [r2, #48]	; 0x30
 800442e:	4b14      	ldr	r3, [pc, #80]	; (8004480 <MX_GPIO_Init+0x84>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	607b      	str	r3, [r7, #4]
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <MX_GPIO_Init+0x84>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	4a0f      	ldr	r2, [pc, #60]	; (8004480 <MX_GPIO_Init+0x84>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6313      	str	r3, [r2, #48]	; 0x30
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <MX_GPIO_Init+0x84>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004456:	2300      	movs	r3, #0
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <MX_GPIO_Init+0x84>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	4a08      	ldr	r2, [pc, #32]	; (8004480 <MX_GPIO_Init+0x84>)
 8004460:	f043 0302 	orr.w	r3, r3, #2
 8004464:	6313      	str	r3, [r2, #48]	; 0x30
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <MX_GPIO_Init+0x84>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	683b      	ldr	r3, [r7, #0]

}
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40023800 	.word	0x40023800

08004484 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a04      	ldr	r2, [pc, #16]	; (80044a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d101      	bne.n	800449a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004496:	f000 fa19 	bl	80048cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40002000 	.word	0x40002000

080044a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044ac:	b672      	cpsid	i
}
 80044ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044b0:	e7fe      	b.n	80044b0 <Error_Handler+0x8>
	...

080044b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	607b      	str	r3, [r7, #4]
 80044be:	4b10      	ldr	r3, [pc, #64]	; (8004500 <HAL_MspInit+0x4c>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	4a0f      	ldr	r2, [pc, #60]	; (8004500 <HAL_MspInit+0x4c>)
 80044c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044c8:	6453      	str	r3, [r2, #68]	; 0x44
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <HAL_MspInit+0x4c>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	603b      	str	r3, [r7, #0]
 80044da:	4b09      	ldr	r3, [pc, #36]	; (8004500 <HAL_MspInit+0x4c>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	4a08      	ldr	r2, [pc, #32]	; (8004500 <HAL_MspInit+0x4c>)
 80044e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e4:	6413      	str	r3, [r2, #64]	; 0x40
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_MspInit+0x4c>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800

08004504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b08a      	sub	sp, #40	; 0x28
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800450c:	f107 0314 	add.w	r3, r7, #20
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a19      	ldr	r2, [pc, #100]	; (8004588 <HAL_UART_MspInit+0x84>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d12b      	bne.n	800457e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	613b      	str	r3, [r7, #16]
 800452a:	4b18      	ldr	r3, [pc, #96]	; (800458c <HAL_UART_MspInit+0x88>)
 800452c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452e:	4a17      	ldr	r2, [pc, #92]	; (800458c <HAL_UART_MspInit+0x88>)
 8004530:	f043 0320 	orr.w	r3, r3, #32
 8004534:	6453      	str	r3, [r2, #68]	; 0x44
 8004536:	4b15      	ldr	r3, [pc, #84]	; (800458c <HAL_UART_MspInit+0x88>)
 8004538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_UART_MspInit+0x88>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454a:	4a10      	ldr	r2, [pc, #64]	; (800458c <HAL_UART_MspInit+0x88>)
 800454c:	f043 0304 	orr.w	r3, r3, #4
 8004550:	6313      	str	r3, [r2, #48]	; 0x30
 8004552:	4b0e      	ldr	r3, [pc, #56]	; (800458c <HAL_UART_MspInit+0x88>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800455e:	23c0      	movs	r3, #192	; 0xc0
 8004560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004562:	2302      	movs	r3, #2
 8004564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800456a:	2303      	movs	r3, #3
 800456c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800456e:	2308      	movs	r3, #8
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004572:	f107 0314 	add.w	r3, r7, #20
 8004576:	4619      	mov	r1, r3
 8004578:	4805      	ldr	r0, [pc, #20]	; (8004590 <HAL_UART_MspInit+0x8c>)
 800457a:	f001 fbf3 	bl	8005d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800457e:	bf00      	nop
 8004580:	3728      	adds	r7, #40	; 0x28
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40011400 	.word	0x40011400
 800458c:	40023800 	.word	0x40023800
 8004590:	40020800 	.word	0x40020800

08004594 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	; 0x30
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80045a4:	2200      	movs	r2, #0
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	202d      	movs	r0, #45	; 0x2d
 80045aa:	f000 fa8b 	bl	8004ac4 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80045ae:	202d      	movs	r0, #45	; 0x2d
 80045b0:	f000 faa4 	bl	8004afc <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80045b4:	2300      	movs	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	4b1f      	ldr	r3, [pc, #124]	; (8004638 <HAL_InitTick+0xa4>)
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <HAL_InitTick+0xa4>)
 80045be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c2:	6413      	str	r3, [r2, #64]	; 0x40
 80045c4:	4b1c      	ldr	r3, [pc, #112]	; (8004638 <HAL_InitTick+0xa4>)
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80045d0:	f107 0210 	add.w	r2, r7, #16
 80045d4:	f107 0314 	add.w	r3, r7, #20
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f002 f9d2 	bl	8006984 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80045e0:	f002 f9a8 	bl	8006934 <HAL_RCC_GetPCLK1Freq>
 80045e4:	4603      	mov	r3, r0
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	4a13      	ldr	r2, [pc, #76]	; (800463c <HAL_InitTick+0xa8>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	0c9b      	lsrs	r3, r3, #18
 80045f4:	3b01      	subs	r3, #1
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80045f8:	4b11      	ldr	r3, [pc, #68]	; (8004640 <HAL_InitTick+0xac>)
 80045fa:	4a12      	ldr	r2, [pc, #72]	; (8004644 <HAL_InitTick+0xb0>)
 80045fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80045fe:	4b10      	ldr	r3, [pc, #64]	; (8004640 <HAL_InitTick+0xac>)
 8004600:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004604:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004606:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <HAL_InitTick+0xac>)
 8004608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800460a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 800460c:	4b0c      	ldr	r3, [pc, #48]	; (8004640 <HAL_InitTick+0xac>)
 800460e:	2200      	movs	r2, #0
 8004610:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_InitTick+0xac>)
 8004614:	2200      	movs	r2, #0
 8004616:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004618:	4809      	ldr	r0, [pc, #36]	; (8004640 <HAL_InitTick+0xac>)
 800461a:	f002 f9e5 	bl	80069e8 <HAL_TIM_Base_Init>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004624:	4806      	ldr	r0, [pc, #24]	; (8004640 <HAL_InitTick+0xac>)
 8004626:	f002 fa39 	bl	8006a9c <HAL_TIM_Base_Start_IT>
 800462a:	4603      	mov	r3, r0
 800462c:	e000      	b.n	8004630 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	; 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	431bde83 	.word	0x431bde83
 8004640:	20006da4 	.word	0x20006da4
 8004644:	40002000 	.word	0x40002000

08004648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800464c:	e7fe      	b.n	800464c <NMI_Handler+0x4>

0800464e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800464e:	b480      	push	{r7}
 8004650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004652:	e7fe      	b.n	8004652 <HardFault_Handler+0x4>

08004654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004658:	e7fe      	b.n	8004658 <MemManage_Handler+0x4>

0800465a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800465a:	b480      	push	{r7}
 800465c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800465e:	e7fe      	b.n	800465e <BusFault_Handler+0x4>

08004660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004664:	e7fe      	b.n	8004664 <UsageFault_Handler+0x4>

08004666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004666:	b480      	push	{r7}
 8004668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004682:	b480      	push	{r7}
 8004684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80046a4:	4802      	ldr	r0, [pc, #8]	; (80046b0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80046a6:	f002 fa69 	bl	8006b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20006da4 	.word	0x20006da4

080046b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
	return 1;
 80046b8:	2301      	movs	r3, #1
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <_kill>:

int _kill(int pid, int sig)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80046ce:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <_kill+0x20>)
 80046d0:	2216      	movs	r2, #22
 80046d2:	601a      	str	r2, [r3, #0]
	return -1;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	2000d89c 	.word	0x2000d89c

080046e8 <_exit>:

void _exit (int status)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80046f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff ffe5 	bl	80046c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80046fa:	e7fe      	b.n	80046fa <_exit+0x12>

080046fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e00a      	b.n	8004724 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800470e:	f3af 8000 	nop.w
 8004712:	4601      	mov	r1, r0
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	60ba      	str	r2, [r7, #8]
 800471a:	b2ca      	uxtb	r2, r1
 800471c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	3301      	adds	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	429a      	cmp	r2, r3
 800472a:	dbf0      	blt.n	800470e <_read+0x12>
	}

return len;
 800472c:	687b      	ldr	r3, [r7, #4]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
	return -1;
 800473e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800475e:	605a      	str	r2, [r3, #4]
	return 0;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <_isatty>:

int _isatty(int file)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
	return 1;
 8004776:	2301      	movs	r3, #1
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
	return 0;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <_sbrk+0x5c>)
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <_sbrk+0x60>)
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <_sbrk+0x64>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <_sbrk+0x64>)
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <_sbrk+0x68>)
 80047c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047c2:	4b10      	ldr	r3, [pc, #64]	; (8004804 <_sbrk+0x64>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4413      	add	r3, r2
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d205      	bcs.n	80047dc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80047d0:	4b0e      	ldr	r3, [pc, #56]	; (800480c <_sbrk+0x6c>)
 80047d2:	220c      	movs	r2, #12
 80047d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047da:	e009      	b.n	80047f0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <_sbrk+0x64>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047e2:	4b08      	ldr	r3, [pc, #32]	; (8004804 <_sbrk+0x64>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4413      	add	r3, r2
 80047ea:	4a06      	ldr	r2, [pc, #24]	; (8004804 <_sbrk+0x64>)
 80047ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047ee:	68fb      	ldr	r3, [r7, #12]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	20020000 	.word	0x20020000
 8004800:	00000400 	.word	0x00000400
 8004804:	200007f8 	.word	0x200007f8
 8004808:	2000d8b0 	.word	0x2000d8b0
 800480c:	2000d89c 	.word	0x2000d89c

08004810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <SystemInit+0x20>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481a:	4a05      	ldr	r2, [pc, #20]	; (8004830 <SystemInit+0x20>)
 800481c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	e000ed00 	.word	0xe000ed00

08004834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004834:	f8df d034 	ldr.w	sp, [pc, #52]	; 800486c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004838:	480d      	ldr	r0, [pc, #52]	; (8004870 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800483a:	490e      	ldr	r1, [pc, #56]	; (8004874 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800483c:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800483e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004840:	e002      	b.n	8004848 <LoopCopyDataInit>

08004842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004846:	3304      	adds	r3, #4

08004848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800484a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800484c:	d3f9      	bcc.n	8004842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800484e:	4a0b      	ldr	r2, [pc, #44]	; (800487c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004850:	4c0b      	ldr	r4, [pc, #44]	; (8004880 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004854:	e001      	b.n	800485a <LoopFillZerobss>

08004856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004858:	3204      	adds	r2, #4

0800485a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800485a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800485c:	d3fb      	bcc.n	8004856 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800485e:	f7ff ffd7 	bl	8004810 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004862:	f012 f9d1 	bl	8016c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004866:	f7ff fd19 	bl	800429c <main>
  bx  lr    
 800486a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800486c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004874:	2000079c 	.word	0x2000079c
  ldr r2, =_sidata
 8004878:	08033078 	.word	0x08033078
  ldr r2, =_sbss
 800487c:	2000079c 	.word	0x2000079c
  ldr r4, =_ebss
 8004880:	2000d8ac 	.word	0x2000d8ac

08004884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004884:	e7fe      	b.n	8004884 <ADC_IRQHandler>
	...

08004888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800488c:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <HAL_Init+0x40>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0d      	ldr	r2, [pc, #52]	; (80048c8 <HAL_Init+0x40>)
 8004892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_Init+0x40>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <HAL_Init+0x40>)
 800489e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048a4:	4b08      	ldr	r3, [pc, #32]	; (80048c8 <HAL_Init+0x40>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a07      	ldr	r2, [pc, #28]	; (80048c8 <HAL_Init+0x40>)
 80048aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048b0:	2003      	movs	r0, #3
 80048b2:	f000 f8fc 	bl	8004aae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048b6:	200f      	movs	r0, #15
 80048b8:	f7ff fe6c 	bl	8004594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80048bc:	f7ff fdfa 	bl	80044b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40023c00 	.word	0x40023c00

080048cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_IncTick+0x20>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	461a      	mov	r2, r3
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_IncTick+0x24>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4413      	add	r3, r2
 80048dc:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <HAL_IncTick+0x24>)
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	200005b8 	.word	0x200005b8
 80048f0:	20006dec 	.word	0x20006dec

080048f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return uwTick;
 80048f8:	4b03      	ldr	r3, [pc, #12]	; (8004908 <HAL_GetTick+0x14>)
 80048fa:	681b      	ldr	r3, [r3, #0]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	20006dec 	.word	0x20006dec

0800490c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004914:	f7ff ffee 	bl	80048f4 <HAL_GetTick>
 8004918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004924:	d005      	beq.n	8004932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004926:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <HAL_Delay+0x44>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004932:	bf00      	nop
 8004934:	f7ff ffde 	bl	80048f4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	429a      	cmp	r2, r3
 8004942:	d8f7      	bhi.n	8004934 <HAL_Delay+0x28>
  {
  }
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	200005b8 	.word	0x200005b8

08004954 <__NVIC_SetPriorityGrouping>:
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <__NVIC_SetPriorityGrouping+0x44>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004970:	4013      	ands	r3, r2
 8004972:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800497c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004986:	4a04      	ldr	r2, [pc, #16]	; (8004998 <__NVIC_SetPriorityGrouping+0x44>)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	60d3      	str	r3, [r2, #12]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	e000ed00 	.word	0xe000ed00

0800499c <__NVIC_GetPriorityGrouping>:
{
 800499c:	b480      	push	{r7}
 800499e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a0:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <__NVIC_GetPriorityGrouping+0x18>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	0a1b      	lsrs	r3, r3, #8
 80049a6:	f003 0307 	and.w	r3, r3, #7
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <__NVIC_EnableIRQ>:
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	4603      	mov	r3, r0
 80049c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	db0b      	blt.n	80049e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	f003 021f 	and.w	r2, r3, #31
 80049d0:	4907      	ldr	r1, [pc, #28]	; (80049f0 <__NVIC_EnableIRQ+0x38>)
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	095b      	lsrs	r3, r3, #5
 80049d8:	2001      	movs	r0, #1
 80049da:	fa00 f202 	lsl.w	r2, r0, r2
 80049de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	e000e100 	.word	0xe000e100

080049f4 <__NVIC_SetPriority>:
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	6039      	str	r1, [r7, #0]
 80049fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	db0a      	blt.n	8004a1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	490c      	ldr	r1, [pc, #48]	; (8004a40 <__NVIC_SetPriority+0x4c>)
 8004a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a12:	0112      	lsls	r2, r2, #4
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	440b      	add	r3, r1
 8004a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a1c:	e00a      	b.n	8004a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	4908      	ldr	r1, [pc, #32]	; (8004a44 <__NVIC_SetPriority+0x50>)
 8004a24:	79fb      	ldrb	r3, [r7, #7]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	3b04      	subs	r3, #4
 8004a2c:	0112      	lsls	r2, r2, #4
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	440b      	add	r3, r1
 8004a32:	761a      	strb	r2, [r3, #24]
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr
 8004a40:	e000e100 	.word	0xe000e100
 8004a44:	e000ed00 	.word	0xe000ed00

08004a48 <NVIC_EncodePriority>:
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b089      	sub	sp, #36	; 0x24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f1c3 0307 	rsb	r3, r3, #7
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	bf28      	it	cs
 8004a66:	2304      	movcs	r3, #4
 8004a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	2b06      	cmp	r3, #6
 8004a70:	d902      	bls.n	8004a78 <NVIC_EncodePriority+0x30>
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3b03      	subs	r3, #3
 8004a76:	e000      	b.n	8004a7a <NVIC_EncodePriority+0x32>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43da      	mvns	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9a:	43d9      	mvns	r1, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa0:	4313      	orrs	r3, r2
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3724      	adds	r7, #36	; 0x24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff ff4c 	bl	8004954 <__NVIC_SetPriorityGrouping>
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ad6:	f7ff ff61 	bl	800499c <__NVIC_GetPriorityGrouping>
 8004ada:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	6978      	ldr	r0, [r7, #20]
 8004ae2:	f7ff ffb1 	bl	8004a48 <NVIC_EncodePriority>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aec:	4611      	mov	r1, r2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff ff80 	bl	80049f4 <__NVIC_SetPriority>
}
 8004af4:	bf00      	nop
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff ff54 	bl	80049b8 <__NVIC_EnableIRQ>
}
 8004b10:	bf00      	nop
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8004b28:	4baa      	ldr	r3, [pc, #680]	; (8004dd4 <HAL_ETH_Init+0x2bc>)
 8004b2a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004b30:	2300      	movs	r3, #0
 8004b32:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e183      	b.n	8004e46 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f002 fe3e 	bl	80077d4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	4b9e      	ldr	r3, [pc, #632]	; (8004dd8 <HAL_ETH_Init+0x2c0>)
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	4a9d      	ldr	r2, [pc, #628]	; (8004dd8 <HAL_ETH_Init+0x2c0>)
 8004b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b66:	6453      	str	r3, [r2, #68]	; 0x44
 8004b68:	4b9b      	ldr	r3, [pc, #620]	; (8004dd8 <HAL_ETH_Init+0x2c0>)
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004b74:	4b99      	ldr	r3, [pc, #612]	; (8004ddc <HAL_ETH_Init+0x2c4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4a98      	ldr	r2, [pc, #608]	; (8004ddc <HAL_ETH_Init+0x2c4>)
 8004b7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b7e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004b80:	4b96      	ldr	r3, [pc, #600]	; (8004ddc <HAL_ETH_Init+0x2c4>)
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	4994      	ldr	r1, [pc, #592]	; (8004ddc <HAL_ETH_Init+0x2c4>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0201 	orr.w	r2, r2, #1
 8004ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004ba6:	f7ff fea5 	bl	80048f4 <HAL_GetTick>
 8004baa:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004bac:	e011      	b.n	8004bd2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004bae:	f7ff fea1 	bl	80048f4 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004bbc:	d909      	bls.n	8004bd2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2203      	movs	r2, #3
 8004bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e139      	b.n	8004e46 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e4      	bne.n	8004bae <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f023 031c 	bic.w	r3, r3, #28
 8004bf2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004bf4:	f001 fe92 	bl	800691c <HAL_RCC_GetHCLKFreq>
 8004bf8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	4a78      	ldr	r2, [pc, #480]	; (8004de0 <HAL_ETH_Init+0x2c8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d908      	bls.n	8004c14 <HAL_ETH_Init+0xfc>
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	4a77      	ldr	r2, [pc, #476]	; (8004de4 <HAL_ETH_Init+0x2cc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d804      	bhi.n	8004c14 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f043 0308 	orr.w	r3, r3, #8
 8004c10:	61fb      	str	r3, [r7, #28]
 8004c12:	e027      	b.n	8004c64 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	4a73      	ldr	r2, [pc, #460]	; (8004de4 <HAL_ETH_Init+0x2cc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d908      	bls.n	8004c2e <HAL_ETH_Init+0x116>
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	4a6d      	ldr	r2, [pc, #436]	; (8004dd4 <HAL_ETH_Init+0x2bc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d204      	bcs.n	8004c2e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f043 030c 	orr.w	r3, r3, #12
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	e01a      	b.n	8004c64 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	4a68      	ldr	r2, [pc, #416]	; (8004dd4 <HAL_ETH_Init+0x2bc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d303      	bcc.n	8004c3e <HAL_ETH_Init+0x126>
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	4a6b      	ldr	r2, [pc, #428]	; (8004de8 <HAL_ETH_Init+0x2d0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d911      	bls.n	8004c62 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	4a69      	ldr	r2, [pc, #420]	; (8004de8 <HAL_ETH_Init+0x2d0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d908      	bls.n	8004c58 <HAL_ETH_Init+0x140>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	4a68      	ldr	r2, [pc, #416]	; (8004dec <HAL_ETH_Init+0x2d4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d804      	bhi.n	8004c58 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	f043 0304 	orr.w	r3, r3, #4
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	e005      	b.n	8004c64 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	f043 0310 	orr.w	r3, r3, #16
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	e000      	b.n	8004c64 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004c62:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	69fa      	ldr	r2, [r7, #28]
 8004c6a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004c6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c70:	2100      	movs	r1, #0
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fb98 	bl	80053a8 <HAL_ETH_WritePHYRegister>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00b      	beq.n	8004c96 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004c82:	6939      	ldr	r1, [r7, #16]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fd4d 	bl	8005724 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e0d7      	b.n	8004e46 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004c96:	20ff      	movs	r0, #255	; 0xff
 8004c98:	f7ff fe38 	bl	800490c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80a5 	beq.w	8004df0 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca6:	f7ff fe25 	bl	80048f4 <HAL_GetTick>
 8004caa:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004cac:	f107 030c 	add.w	r3, r7, #12
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fb0f 	bl	80052d8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004cba:	f7ff fe1b 	bl	80048f4 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d90f      	bls.n	8004cec <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004cd0:	6939      	ldr	r1, [r7, #16]
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fd26 	bl	8005724 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e0ac      	b.n	8004e46 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0da      	beq.n	8004cac <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004cf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fb53 	bl	80053a8 <HAL_ETH_WritePHYRegister>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004d0c:	6939      	ldr	r1, [r7, #16]
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fd08 	bl	8005724 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e092      	b.n	8004e46 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d20:	f7ff fde8 	bl	80048f4 <HAL_GetTick>
 8004d24:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004d26:	f107 030c 	add.w	r3, r7, #12
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fad2 	bl	80052d8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004d34:	f7ff fdde 	bl	80048f4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d90f      	bls.n	8004d66 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004d4a:	6939      	ldr	r1, [r7, #16]
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fce9 	bl	8005724 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e06f      	b.n	8004e46 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0da      	beq.n	8004d26 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004d70:	f107 030c 	add.w	r3, r7, #12
 8004d74:	461a      	mov	r2, r3
 8004d76:	2110      	movs	r1, #16
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 faad 	bl	80052d8 <HAL_ETH_ReadPHYRegister>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004d88:	6939      	ldr	r1, [r7, #16]
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fcca 	bl	8005724 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e054      	b.n	8004e46 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d004      	beq.n	8004db0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dac:	60da      	str	r2, [r3, #12]
 8004dae:	e002      	b.n	8004db6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d003      	beq.n	8004dc8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	609a      	str	r2, [r3, #8]
 8004dc6:	e035      	b.n	8004e34 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	e030      	b.n	8004e34 <HAL_ETH_Init+0x31c>
 8004dd2:	bf00      	nop
 8004dd4:	03938700 	.word	0x03938700
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40013800 	.word	0x40013800
 8004de0:	01312cff 	.word	0x01312cff
 8004de4:	02160ebf 	.word	0x02160ebf
 8004de8:	05f5e0ff 	.word	0x05f5e0ff
 8004dec:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	08db      	lsrs	r3, r3, #3
 8004df6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004e00:	4313      	orrs	r3, r2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	461a      	mov	r2, r3
 8004e06:	2100      	movs	r1, #0
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 facd 	bl	80053a8 <HAL_ETH_WritePHYRegister>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004e18:	6939      	ldr	r1, [r7, #16]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fc82 	bl	8005724 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e00c      	b.n	8004e46 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004e2c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004e30:	f7ff fd6c 	bl	800490c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004e34:	6939      	ldr	r1, [r7, #16]
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 fc74 	bl	8005724 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop

08004e50 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_ETH_DMATxDescListInit+0x20>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e052      	b.n	8004f16 <HAL_ETH_DMATxDescListInit+0xc6>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e030      	b.n	8004eee <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	015b      	lsls	r3, r3, #5
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	4413      	add	r3, r2
 8004e94:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e9c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004ea4:	fb02 f303 	mul.w	r3, r2, r3
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	4413      	add	r3, r2
 8004eac:	461a      	mov	r2, r3
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d105      	bne.n	8004ec6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d208      	bcs.n	8004ee2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	015b      	lsls	r3, r3, #5
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	4413      	add	r3, r2
 8004eda:	461a      	mov	r2, r3
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	60da      	str	r2, [r3, #12]
 8004ee0:	e002      	b.n	8004ee8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	3301      	adds	r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d3ca      	bcc.n	8004e8c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f00:	3310      	adds	r3, #16
 8004f02:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr

08004f22 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b087      	sub	sp, #28
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_ETH_DMARxDescListInit+0x20>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e056      	b.n	8004ff0 <HAL_ETH_DMARxDescListInit+0xce>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	68ba      	ldr	r2, [r7, #8]
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	e034      	b.n	8004fc8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	015b      	lsls	r3, r3, #5
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4413      	add	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f6e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004f76:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	4413      	add	r3, r2
 8004f86:	461a      	mov	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d105      	bne.n	8004fa0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d208      	bcs.n	8004fbc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	3301      	adds	r3, #1
 8004fae:	015b      	lsls	r3, r3, #5
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	e002      	b.n	8004fc2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d3c6      	bcc.n	8004f5e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fda:	330c      	adds	r3, #12
 8004fdc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_ETH_TransmitFrame+0x24>
 800501c:	2302      	movs	r3, #2
 800501e:	e0cd      	b.n	80051bc <HAL_ETH_TransmitFrame+0x1c0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8005046:	2301      	movs	r3, #1
 8005048:	e0b8      	b.n	80051bc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	da09      	bge.n	8005068 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2212      	movs	r2, #18
 8005058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0a9      	b.n	80051bc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800506e:	4293      	cmp	r3, r2
 8005070:	d915      	bls.n	800509e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	4a54      	ldr	r2, [pc, #336]	; (80051c8 <HAL_ETH_TransmitFrame+0x1cc>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	0a9b      	lsrs	r3, r3, #10
 800507c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	4b51      	ldr	r3, [pc, #324]	; (80051c8 <HAL_ETH_TransmitFrame+0x1cc>)
 8005082:	fba3 1302 	umull	r1, r3, r3, r2
 8005086:	0a9b      	lsrs	r3, r3, #10
 8005088:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	3301      	adds	r3, #1
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	e001      	b.n	80050a2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800509e:	2301      	movs	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d11c      	bne.n	80050e2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80050b6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80050c2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80050d2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	62da      	str	r2, [r3, #44]	; 0x2c
 80050e0:	e04b      	b.n	800517a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e044      	b.n	8005172 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80050f6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800510c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005116:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	3b01      	subs	r3, #1
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	429a      	cmp	r2, r3
 8005120:	d116      	bne.n	8005150 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005130:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	4a25      	ldr	r2, [pc, #148]	; (80051cc <HAL_ETH_TransmitFrame+0x1d0>)
 8005136:	fb02 f203 	mul.w	r2, r2, r3
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	4413      	add	r3, r2
 800513e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005142:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800514e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800515e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	461a      	mov	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	3301      	adds	r3, #1
 8005170:	613b      	str	r3, [r7, #16]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	429a      	cmp	r2, r3
 8005178:	d3b6      	bcc.n	80050e8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005182:	3314      	adds	r3, #20
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00d      	beq.n	80051aa <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005196:	3314      	adds	r3, #20
 8005198:	2204      	movs	r2, #4
 800519a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051a4:	3304      	adds	r3, #4
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	ac02b00b 	.word	0xac02b00b
 80051cc:	fffffa0c 	.word	0xfffffa0c

080051d0 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_ETH_GetReceivedFrame+0x1a>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e070      	b.n	80052cc <HAL_ETH_GetReceivedFrame+0xfc>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	db5a      	blt.n	80052ba <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	2b00      	cmp	r3, #0
 8005210:	d030      	beq.n	8005274 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	2b01      	cmp	r3, #1
 8005222:	d103      	bne.n	800522c <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005240:	3b04      	subs	r3, #4
 8005242:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	461a      	mov	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e02b      	b.n	80052cc <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800527e:	2b00      	cmp	r3, #0
 8005280:	d010      	beq.n	80052a4 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	461a      	mov	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	629a      	str	r2, [r3, #40]	; 0x28
 80052a2:	e00a      	b.n	80052ba <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	461a      	mov	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3714      	adds	r7, #20
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	460b      	mov	r3, r1
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80052e6:	2300      	movs	r3, #0
 80052e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b82      	cmp	r3, #130	; 0x82
 80052f8:	d101      	bne.n	80052fe <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80052fa:	2302      	movs	r3, #2
 80052fc:	e050      	b.n	80053a0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2282      	movs	r2, #130	; 0x82
 8005302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f003 031c 	and.w	r3, r3, #28
 8005314:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8a1b      	ldrh	r3, [r3, #16]
 800531a:	02db      	lsls	r3, r3, #11
 800531c:	b29b      	uxth	r3, r3
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	4313      	orrs	r3, r2
 8005322:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005324:	897b      	ldrh	r3, [r7, #10]
 8005326:	019b      	lsls	r3, r3, #6
 8005328:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f023 0302 	bic.w	r3, r3, #2
 8005338:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800534a:	f7ff fad3 	bl	80048f4 <HAL_GetTick>
 800534e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005350:	e015      	b.n	800537e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8005352:	f7ff facf 	bl	80048f4 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005360:	d309      	bcc.n	8005376 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e014      	b.n	80053a0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e4      	bne.n	8005352 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	b29b      	uxth	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3718      	adds	r7, #24
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	460b      	mov	r3, r1
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b42      	cmp	r3, #66	; 0x42
 80053c8:	d101      	bne.n	80053ce <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
 80053cc:	e04e      	b.n	800546c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2242      	movs	r2, #66	; 0x42
 80053d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f003 031c 	and.w	r3, r3, #28
 80053e4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8a1b      	ldrh	r3, [r3, #16]
 80053ea:	02db      	lsls	r3, r3, #11
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80053f4:	897b      	ldrh	r3, [r7, #10]
 80053f6:	019b      	lsls	r3, r3, #6
 80053f8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f043 0302 	orr.w	r3, r3, #2
 8005408:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005424:	f7ff fa66 	bl	80048f4 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800542a:	e015      	b.n	8005458 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800542c:	f7ff fa62 	bl	80048f4 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543a:	d309      	bcc.n	8005450 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e00d      	b.n	800546c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1e4      	bne.n	800542c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_ETH_Start+0x16>
 8005486:	2302      	movs	r3, #2
 8005488:	e01f      	b.n	80054ca <HAL_ETH_Start+0x56>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fb44 	bl	8005b28 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fb7b 	bl	8005b9c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fc12 	bl	8005cd0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fbaf 	bl	8005c10 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fbdc 	bl	8005c70 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3708      	adds	r7, #8
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_ETH_Stop+0x16>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e01f      	b.n	8005528 <HAL_ETH_Stop+0x56>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fba1 	bl	8005c40 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fbce 	bl	8005ca0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fb66 	bl	8005bd6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fbe0 	bl	8005cd0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fb26 	bl	8005b62 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_ETH_ConfigMAC+0x1c>
 8005548:	2302      	movs	r3, #2
 800554a:	e0e4      	b.n	8005716 <HAL_ETH_ConfigMAC+0x1e6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80b1 	beq.w	80056c6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4b6c      	ldr	r3, [pc, #432]	; (8005720 <HAL_ETH_ConfigMAC+0x1f0>)
 8005570:	4013      	ands	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800557c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8005582:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8005588:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800558e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005594:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800559a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80055a0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80055a6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80055ac:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80055b2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80055b8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80055be:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80055d6:	2001      	movs	r0, #1
 80055d8:	f7ff f998 	bl	800490c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80055ec:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80055f2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80055f8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80055fe:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005604:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800560a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8005616:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005618:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005622:	2001      	movs	r0, #1
 8005624:	f7ff f972 	bl	800490c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005638:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005642:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005652:	4013      	ands	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005660:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8005666:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800566c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8005672:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8005678:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005690:	2001      	movs	r0, #1
 8005692:	f7ff f93b 	bl	800490c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80056b6:	2001      	movs	r0, #1
 80056b8:	f7ff f928 	bl	800490c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	61da      	str	r2, [r3, #28]
 80056c4:	e01e      	b.n	8005704 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80056d4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80056f6:	2001      	movs	r0, #1
 80056f8:	f7ff f908 	bl	800490c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	ff20810f 	.word	0xff20810f

08005724 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b0b0      	sub	sp, #192	; 0xc0
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005740:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005748:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800574a:	2300      	movs	r3, #0
 800574c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800574e:	2300      	movs	r3, #0
 8005750:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005752:	2300      	movs	r3, #0
 8005754:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005756:	2300      	movs	r3, #0
 8005758:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800575a:	2300      	movs	r3, #0
 800575c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800575e:	2300      	movs	r3, #0
 8005760:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d103      	bne.n	8005772 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800576a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800576e:	663b      	str	r3, [r7, #96]	; 0x60
 8005770:	e001      	b.n	8005776 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005772:	2300      	movs	r3, #0
 8005774:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800577a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800577c:	2300      	movs	r3, #0
 800577e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005780:	2300      	movs	r3, #0
 8005782:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005784:	2300      	movs	r3, #0
 8005786:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005788:	2300      	movs	r3, #0
 800578a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800578c:	2300      	movs	r3, #0
 800578e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005790:	2340      	movs	r3, #64	; 0x40
 8005792:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005794:	2300      	movs	r3, #0
 8005796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800579a:	2300      	movs	r3, #0
 800579c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80057ac:	2300      	movs	r3, #0
 80057ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80057ca:	2300      	movs	r3, #0
 80057cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80057dc:	2300      	movs	r3, #0
 80057de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80057f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057fc:	4bac      	ldr	r3, [pc, #688]	; (8005ab0 <ETH_MACDMAConfig+0x38c>)
 80057fe:	4013      	ands	r3, r2
 8005800:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005804:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8005806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005808:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800580a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800580c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800580e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005810:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8005816:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8005818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800581a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800581c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800581e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005824:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8005826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8005828:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800582a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800582c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800582e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005830:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005834:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005836:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005838:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800583a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800584c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005858:	2001      	movs	r0, #1
 800585a:	f7ff f857 	bl	800490c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005866:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005868:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800586a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800586c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800586e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005870:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005872:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005876:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005878:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800587c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800587e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005882:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005884:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005888:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800588c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005894:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005896:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80058a2:	2001      	movs	r0, #1
 80058a4:	f7ff f832 	bl	800490c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80058b0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058ba:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80058c4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80058d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80058d4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80058d8:	4013      	ands	r3, r2
 80058da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80058de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058e2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80058e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80058e8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80058ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80058ee:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80058f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80058f4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80058f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80058fa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80058fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005900:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005902:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005914:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005920:	2001      	movs	r0, #1
 8005922:	f7fe fff3 	bl	800490c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800592e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005930:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005934:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800594a:	2001      	movs	r0, #1
 800594c:	f7fe ffde 	bl	800490c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005958:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800595e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005962:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005968:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800596c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800596e:	2300      	movs	r3, #0
 8005970:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005972:	2300      	movs	r3, #0
 8005974:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005976:	2300      	movs	r3, #0
 8005978:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800597e:	2304      	movs	r3, #4
 8005980:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800598e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005998:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80059a2:	2300      	movs	r3, #0
 80059a4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059ae:	3318      	adds	r3, #24
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80059b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059ba:	4b3e      	ldr	r3, [pc, #248]	; (8005ab4 <ETH_MACDMAConfig+0x390>)
 80059bc:	4013      	ands	r3, r2
 80059be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80059c2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80059c4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80059c6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80059c8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80059ca:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80059cc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80059ce:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80059d0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80059d2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80059d4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80059d6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80059d8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80059da:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80059de:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80059e2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80059e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059e8:	4313      	orrs	r3, r2
 80059ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f6:	3318      	adds	r3, #24
 80059f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059fc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a06:	3318      	adds	r3, #24
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a0e:	2001      	movs	r0, #1
 8005a10:	f7fe ff7c 	bl	800490c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a1c:	3318      	adds	r3, #24
 8005a1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a22:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005a24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005a28:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005a2c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005a30:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005a34:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a38:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005a3a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005a3e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a4c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	f7fe ff55 	bl	800490c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a6e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d10f      	bne.n	8005a98 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a80:	331c      	adds	r3, #28
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a94:	331c      	adds	r3, #28
 8005a96:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f809 	bl	8005ab8 <ETH_MACAddressConfig>
}
 8005aa6:	bf00      	nop
 8005aa8:	37c0      	adds	r7, #192	; 0xc0
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	ff20810f 	.word	0xff20810f
 8005ab4:	f8de3f23 	.word	0xf8de3f23

08005ab8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3305      	adds	r3, #5
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	3204      	adds	r2, #4
 8005ad0:	7812      	ldrb	r2, [r2, #0]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	4b11      	ldr	r3, [pc, #68]	; (8005b20 <ETH_MACAddressConfig+0x68>)
 8005ada:	4413      	add	r3, r2
 8005adc:	461a      	mov	r2, r3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3303      	adds	r3, #3
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	061a      	lsls	r2, r3, #24
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3302      	adds	r3, #2
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3301      	adds	r3, #1
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	021b      	lsls	r3, r3, #8
 8005afc:	4313      	orrs	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <ETH_MACAddressConfig+0x6c>)
 8005b0a:	4413      	add	r3, r2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6013      	str	r3, [r2, #0]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40028040 	.word	0x40028040
 8005b24:	40028044 	.word	0x40028044

08005b28 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0208 	orr.w	r2, r2, #8
 8005b42:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f000 f8e9 	bl	8005d24 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	601a      	str	r2, [r3, #0]
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0208 	bic.w	r2, r2, #8
 8005b7c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005b86:	2001      	movs	r0, #1
 8005b88:	f000 f8cc 	bl	8005d24 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0204 	orr.w	r2, r2, #4
 8005bb6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	f000 f8af 	bl	8005d24 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0204 	bic.w	r2, r2, #4
 8005bf0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	f000 f892 	bl	8005d24 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	601a      	str	r2, [r3, #0]
}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c20:	3318      	adds	r3, #24
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c30:	3318      	adds	r3, #24
 8005c32:	601a      	str	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c50:	3318      	adds	r3, #24
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c60:	3318      	adds	r3, #24
 8005c62:	601a      	str	r2, [r3, #0]
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c80:	3318      	adds	r3, #24
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0202 	orr.w	r2, r2, #2
 8005c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c90:	3318      	adds	r3, #24
 8005c92:	601a      	str	r2, [r3, #0]
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb0:	3318      	adds	r3, #24
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0202 	bic.w	r2, r2, #2
 8005cbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc0:	3318      	adds	r3, #24
 8005cc2:	601a      	str	r2, [r3, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce4:	3318      	adds	r3, #24
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cf4:	3318      	adds	r3, #24
 8005cf6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d00:	3318      	adds	r3, #24
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005d06:	2001      	movs	r0, #1
 8005d08:	f000 f80c 	bl	8005d24 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d16:	3318      	adds	r3, #24
 8005d18:	601a      	str	r2, [r3, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <ETH_Delay+0x38>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a0b      	ldr	r2, [pc, #44]	; (8005d60 <ETH_Delay+0x3c>)
 8005d32:	fba2 2303 	umull	r2, r3, r2, r3
 8005d36:	0a5b      	lsrs	r3, r3, #9
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005d40:	bf00      	nop
  } 
  while (Delay --);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	1e5a      	subs	r2, r3, #1
 8005d46:	60fa      	str	r2, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1f9      	bne.n	8005d40 <ETH_Delay+0x1c>
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	200005b0 	.word	0x200005b0
 8005d60:	10624dd3 	.word	0x10624dd3

08005d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b089      	sub	sp, #36	; 0x24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	e16b      	b.n	8006058 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d80:	2201      	movs	r2, #1
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4013      	ands	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	f040 815a 	bne.w	8006052 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f003 0303 	and.w	r3, r3, #3
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d005      	beq.n	8005db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d130      	bne.n	8005e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005dec:	2201      	movs	r2, #1
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	43db      	mvns	r3, r3
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 0201 	and.w	r2, r3, #1
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	2b03      	cmp	r3, #3
 8005e22:	d017      	beq.n	8005e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	2203      	movs	r2, #3
 8005e30:	fa02 f303 	lsl.w	r3, r2, r3
 8005e34:	43db      	mvns	r3, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d123      	bne.n	8005ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	08da      	lsrs	r2, r3, #3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3208      	adds	r2, #8
 8005e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	220f      	movs	r2, #15
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	08da      	lsrs	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3208      	adds	r2, #8
 8005ea2:	69b9      	ldr	r1, [r7, #24]
 8005ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0203 	and.w	r2, r3, #3
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80b4 	beq.w	8006052 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	4b60      	ldr	r3, [pc, #384]	; (8006070 <HAL_GPIO_Init+0x30c>)
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef2:	4a5f      	ldr	r2, [pc, #380]	; (8006070 <HAL_GPIO_Init+0x30c>)
 8005ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8005efa:	4b5d      	ldr	r3, [pc, #372]	; (8006070 <HAL_GPIO_Init+0x30c>)
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f06:	4a5b      	ldr	r2, [pc, #364]	; (8006074 <HAL_GPIO_Init+0x310>)
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	089b      	lsrs	r3, r3, #2
 8005f0c:	3302      	adds	r3, #2
 8005f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	220f      	movs	r2, #15
 8005f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f22:	43db      	mvns	r3, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4013      	ands	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a52      	ldr	r2, [pc, #328]	; (8006078 <HAL_GPIO_Init+0x314>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d02b      	beq.n	8005f8a <HAL_GPIO_Init+0x226>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a51      	ldr	r2, [pc, #324]	; (800607c <HAL_GPIO_Init+0x318>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d025      	beq.n	8005f86 <HAL_GPIO_Init+0x222>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a50      	ldr	r2, [pc, #320]	; (8006080 <HAL_GPIO_Init+0x31c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01f      	beq.n	8005f82 <HAL_GPIO_Init+0x21e>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a4f      	ldr	r2, [pc, #316]	; (8006084 <HAL_GPIO_Init+0x320>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d019      	beq.n	8005f7e <HAL_GPIO_Init+0x21a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a4e      	ldr	r2, [pc, #312]	; (8006088 <HAL_GPIO_Init+0x324>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <HAL_GPIO_Init+0x216>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a4d      	ldr	r2, [pc, #308]	; (800608c <HAL_GPIO_Init+0x328>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00d      	beq.n	8005f76 <HAL_GPIO_Init+0x212>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a4c      	ldr	r2, [pc, #304]	; (8006090 <HAL_GPIO_Init+0x32c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d007      	beq.n	8005f72 <HAL_GPIO_Init+0x20e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a4b      	ldr	r2, [pc, #300]	; (8006094 <HAL_GPIO_Init+0x330>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d101      	bne.n	8005f6e <HAL_GPIO_Init+0x20a>
 8005f6a:	2307      	movs	r3, #7
 8005f6c:	e00e      	b.n	8005f8c <HAL_GPIO_Init+0x228>
 8005f6e:	2308      	movs	r3, #8
 8005f70:	e00c      	b.n	8005f8c <HAL_GPIO_Init+0x228>
 8005f72:	2306      	movs	r3, #6
 8005f74:	e00a      	b.n	8005f8c <HAL_GPIO_Init+0x228>
 8005f76:	2305      	movs	r3, #5
 8005f78:	e008      	b.n	8005f8c <HAL_GPIO_Init+0x228>
 8005f7a:	2304      	movs	r3, #4
 8005f7c:	e006      	b.n	8005f8c <HAL_GPIO_Init+0x228>
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e004      	b.n	8005f8c <HAL_GPIO_Init+0x228>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e002      	b.n	8005f8c <HAL_GPIO_Init+0x228>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <HAL_GPIO_Init+0x228>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	f002 0203 	and.w	r2, r2, #3
 8005f92:	0092      	lsls	r2, r2, #2
 8005f94:	4093      	lsls	r3, r2
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f9c:	4935      	ldr	r1, [pc, #212]	; (8006074 <HAL_GPIO_Init+0x310>)
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	089b      	lsrs	r3, r3, #2
 8005fa2:	3302      	adds	r3, #2
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005faa:	4b3b      	ldr	r3, [pc, #236]	; (8006098 <HAL_GPIO_Init+0x334>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	43db      	mvns	r3, r3
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fce:	4a32      	ldr	r2, [pc, #200]	; (8006098 <HAL_GPIO_Init+0x334>)
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005fd4:	4b30      	ldr	r3, [pc, #192]	; (8006098 <HAL_GPIO_Init+0x334>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ff8:	4a27      	ldr	r2, [pc, #156]	; (8006098 <HAL_GPIO_Init+0x334>)
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ffe:	4b26      	ldr	r3, [pc, #152]	; (8006098 <HAL_GPIO_Init+0x334>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	43db      	mvns	r3, r3
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	4013      	ands	r3, r2
 800600c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006022:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <HAL_GPIO_Init+0x334>)
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006028:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <HAL_GPIO_Init+0x334>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	43db      	mvns	r3, r3
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	4013      	ands	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800604c:	4a12      	ldr	r2, [pc, #72]	; (8006098 <HAL_GPIO_Init+0x334>)
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	3301      	adds	r3, #1
 8006056:	61fb      	str	r3, [r7, #28]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	2b0f      	cmp	r3, #15
 800605c:	f67f ae90 	bls.w	8005d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	3724      	adds	r7, #36	; 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40023800 	.word	0x40023800
 8006074:	40013800 	.word	0x40013800
 8006078:	40020000 	.word	0x40020000
 800607c:	40020400 	.word	0x40020400
 8006080:	40020800 	.word	0x40020800
 8006084:	40020c00 	.word	0x40020c00
 8006088:	40021000 	.word	0x40021000
 800608c:	40021400 	.word	0x40021400
 8006090:	40021800 	.word	0x40021800
 8006094:	40021c00 	.word	0x40021c00
 8006098:	40013c00 	.word	0x40013c00

0800609c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d101      	bne.n	80060ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e264      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d075      	beq.n	80061a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060ba:	4ba3      	ldr	r3, [pc, #652]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 030c 	and.w	r3, r3, #12
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d00c      	beq.n	80060e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060c6:	4ba0      	ldr	r3, [pc, #640]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d112      	bne.n	80060f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060d2:	4b9d      	ldr	r3, [pc, #628]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060de:	d10b      	bne.n	80060f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e0:	4b99      	ldr	r3, [pc, #612]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d05b      	beq.n	80061a4 <HAL_RCC_OscConfig+0x108>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d157      	bne.n	80061a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e23f      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006100:	d106      	bne.n	8006110 <HAL_RCC_OscConfig+0x74>
 8006102:	4b91      	ldr	r3, [pc, #580]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a90      	ldr	r2, [pc, #576]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	e01d      	b.n	800614c <HAL_RCC_OscConfig+0xb0>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006118:	d10c      	bne.n	8006134 <HAL_RCC_OscConfig+0x98>
 800611a:	4b8b      	ldr	r3, [pc, #556]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a8a      	ldr	r2, [pc, #552]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	4b88      	ldr	r3, [pc, #544]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a87      	ldr	r2, [pc, #540]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 800612c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006130:	6013      	str	r3, [r2, #0]
 8006132:	e00b      	b.n	800614c <HAL_RCC_OscConfig+0xb0>
 8006134:	4b84      	ldr	r3, [pc, #528]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a83      	ldr	r2, [pc, #524]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 800613a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	4b81      	ldr	r3, [pc, #516]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a80      	ldr	r2, [pc, #512]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800614a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d013      	beq.n	800617c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006154:	f7fe fbce 	bl	80048f4 <HAL_GetTick>
 8006158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800615a:	e008      	b.n	800616e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800615c:	f7fe fbca 	bl	80048f4 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b64      	cmp	r3, #100	; 0x64
 8006168:	d901      	bls.n	800616e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e204      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616e:	4b76      	ldr	r3, [pc, #472]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d0f0      	beq.n	800615c <HAL_RCC_OscConfig+0xc0>
 800617a:	e014      	b.n	80061a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617c:	f7fe fbba 	bl	80048f4 <HAL_GetTick>
 8006180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006182:	e008      	b.n	8006196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006184:	f7fe fbb6 	bl	80048f4 <HAL_GetTick>
 8006188:	4602      	mov	r2, r0
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	1ad3      	subs	r3, r2, r3
 800618e:	2b64      	cmp	r3, #100	; 0x64
 8006190:	d901      	bls.n	8006196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e1f0      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006196:	4b6c      	ldr	r3, [pc, #432]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1f0      	bne.n	8006184 <HAL_RCC_OscConfig+0xe8>
 80061a2:	e000      	b.n	80061a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d063      	beq.n	800627a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061b2:	4b65      	ldr	r3, [pc, #404]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f003 030c 	and.w	r3, r3, #12
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00b      	beq.n	80061d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061be:	4b62      	ldr	r3, [pc, #392]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061c6:	2b08      	cmp	r3, #8
 80061c8:	d11c      	bne.n	8006204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ca:	4b5f      	ldr	r3, [pc, #380]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d116      	bne.n	8006204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061d6:	4b5c      	ldr	r3, [pc, #368]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d005      	beq.n	80061ee <HAL_RCC_OscConfig+0x152>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d001      	beq.n	80061ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e1c4      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ee:	4b56      	ldr	r3, [pc, #344]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	4952      	ldr	r1, [pc, #328]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006202:	e03a      	b.n	800627a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d020      	beq.n	800624e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800620c:	4b4f      	ldr	r3, [pc, #316]	; (800634c <HAL_RCC_OscConfig+0x2b0>)
 800620e:	2201      	movs	r2, #1
 8006210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006212:	f7fe fb6f 	bl	80048f4 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006218:	e008      	b.n	800622c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800621a:	f7fe fb6b 	bl	80048f4 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e1a5      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800622c:	4b46      	ldr	r3, [pc, #280]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0f0      	beq.n	800621a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006238:	4b43      	ldr	r3, [pc, #268]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4940      	ldr	r1, [pc, #256]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006248:	4313      	orrs	r3, r2
 800624a:	600b      	str	r3, [r1, #0]
 800624c:	e015      	b.n	800627a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800624e:	4b3f      	ldr	r3, [pc, #252]	; (800634c <HAL_RCC_OscConfig+0x2b0>)
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006254:	f7fe fb4e 	bl	80048f4 <HAL_GetTick>
 8006258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800625a:	e008      	b.n	800626e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800625c:	f7fe fb4a 	bl	80048f4 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e184      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800626e:	4b36      	ldr	r3, [pc, #216]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0308 	and.w	r3, r3, #8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d030      	beq.n	80062e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d016      	beq.n	80062bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800628e:	4b30      	ldr	r3, [pc, #192]	; (8006350 <HAL_RCC_OscConfig+0x2b4>)
 8006290:	2201      	movs	r2, #1
 8006292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006294:	f7fe fb2e 	bl	80048f4 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800629c:	f7fe fb2a 	bl	80048f4 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e164      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ae:	4b26      	ldr	r3, [pc, #152]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80062b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d0f0      	beq.n	800629c <HAL_RCC_OscConfig+0x200>
 80062ba:	e015      	b.n	80062e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062bc:	4b24      	ldr	r3, [pc, #144]	; (8006350 <HAL_RCC_OscConfig+0x2b4>)
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c2:	f7fe fb17 	bl	80048f4 <HAL_GetTick>
 80062c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c8:	e008      	b.n	80062dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062ca:	f7fe fb13 	bl	80048f4 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	2b02      	cmp	r3, #2
 80062d6:	d901      	bls.n	80062dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e14d      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062dc:	4b1a      	ldr	r3, [pc, #104]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80062de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f0      	bne.n	80062ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 80a0 	beq.w	8006436 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062fa:	4b13      	ldr	r3, [pc, #76]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10f      	bne.n	8006326 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006306:	2300      	movs	r3, #0
 8006308:	60bb      	str	r3, [r7, #8]
 800630a:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	4a0e      	ldr	r2, [pc, #56]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006314:	6413      	str	r3, [r2, #64]	; 0x40
 8006316:	4b0c      	ldr	r3, [pc, #48]	; (8006348 <HAL_RCC_OscConfig+0x2ac>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631e:	60bb      	str	r3, [r7, #8]
 8006320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006322:	2301      	movs	r3, #1
 8006324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006326:	4b0b      	ldr	r3, [pc, #44]	; (8006354 <HAL_RCC_OscConfig+0x2b8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632e:	2b00      	cmp	r3, #0
 8006330:	d121      	bne.n	8006376 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006332:	4b08      	ldr	r3, [pc, #32]	; (8006354 <HAL_RCC_OscConfig+0x2b8>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a07      	ldr	r2, [pc, #28]	; (8006354 <HAL_RCC_OscConfig+0x2b8>)
 8006338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800633c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800633e:	f7fe fad9 	bl	80048f4 <HAL_GetTick>
 8006342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006344:	e011      	b.n	800636a <HAL_RCC_OscConfig+0x2ce>
 8006346:	bf00      	nop
 8006348:	40023800 	.word	0x40023800
 800634c:	42470000 	.word	0x42470000
 8006350:	42470e80 	.word	0x42470e80
 8006354:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006358:	f7fe facc 	bl	80048f4 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e106      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800636a:	4b85      	ldr	r3, [pc, #532]	; (8006580 <HAL_RCC_OscConfig+0x4e4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d106      	bne.n	800638c <HAL_RCC_OscConfig+0x2f0>
 800637e:	4b81      	ldr	r3, [pc, #516]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	4a80      	ldr	r2, [pc, #512]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	6713      	str	r3, [r2, #112]	; 0x70
 800638a:	e01c      	b.n	80063c6 <HAL_RCC_OscConfig+0x32a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b05      	cmp	r3, #5
 8006392:	d10c      	bne.n	80063ae <HAL_RCC_OscConfig+0x312>
 8006394:	4b7b      	ldr	r3, [pc, #492]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 8006396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006398:	4a7a      	ldr	r2, [pc, #488]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 800639a:	f043 0304 	orr.w	r3, r3, #4
 800639e:	6713      	str	r3, [r2, #112]	; 0x70
 80063a0:	4b78      	ldr	r3, [pc, #480]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 80063a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063a4:	4a77      	ldr	r2, [pc, #476]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 80063a6:	f043 0301 	orr.w	r3, r3, #1
 80063aa:	6713      	str	r3, [r2, #112]	; 0x70
 80063ac:	e00b      	b.n	80063c6 <HAL_RCC_OscConfig+0x32a>
 80063ae:	4b75      	ldr	r3, [pc, #468]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 80063b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b2:	4a74      	ldr	r2, [pc, #464]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 80063b4:	f023 0301 	bic.w	r3, r3, #1
 80063b8:	6713      	str	r3, [r2, #112]	; 0x70
 80063ba:	4b72      	ldr	r3, [pc, #456]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 80063bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063be:	4a71      	ldr	r2, [pc, #452]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 80063c0:	f023 0304 	bic.w	r3, r3, #4
 80063c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d015      	beq.n	80063fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ce:	f7fe fa91 	bl	80048f4 <HAL_GetTick>
 80063d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d4:	e00a      	b.n	80063ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063d6:	f7fe fa8d 	bl	80048f4 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e0c5      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063ec:	4b65      	ldr	r3, [pc, #404]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 80063ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0ee      	beq.n	80063d6 <HAL_RCC_OscConfig+0x33a>
 80063f8:	e014      	b.n	8006424 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063fa:	f7fe fa7b 	bl	80048f4 <HAL_GetTick>
 80063fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006400:	e00a      	b.n	8006418 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006402:	f7fe fa77 	bl	80048f4 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006410:	4293      	cmp	r3, r2
 8006412:	d901      	bls.n	8006418 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e0af      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006418:	4b5a      	ldr	r3, [pc, #360]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 800641a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1ee      	bne.n	8006402 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d105      	bne.n	8006436 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800642a:	4b56      	ldr	r3, [pc, #344]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	4a55      	ldr	r2, [pc, #340]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 8006430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006434:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 809b 	beq.w	8006576 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006440:	4b50      	ldr	r3, [pc, #320]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	2b08      	cmp	r3, #8
 800644a:	d05c      	beq.n	8006506 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d141      	bne.n	80064d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006454:	4b4c      	ldr	r3, [pc, #304]	; (8006588 <HAL_RCC_OscConfig+0x4ec>)
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645a:	f7fe fa4b 	bl	80048f4 <HAL_GetTick>
 800645e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006462:	f7fe fa47 	bl	80048f4 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b02      	cmp	r3, #2
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e081      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006474:	4b43      	ldr	r3, [pc, #268]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1f0      	bne.n	8006462 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	69da      	ldr	r2, [r3, #28]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	019b      	lsls	r3, r3, #6
 8006490:	431a      	orrs	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	3b01      	subs	r3, #1
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	431a      	orrs	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	061b      	lsls	r3, r3, #24
 80064a4:	4937      	ldr	r1, [pc, #220]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064aa:	4b37      	ldr	r3, [pc, #220]	; (8006588 <HAL_RCC_OscConfig+0x4ec>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064b0:	f7fe fa20 	bl	80048f4 <HAL_GetTick>
 80064b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b6:	e008      	b.n	80064ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064b8:	f7fe fa1c 	bl	80048f4 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e056      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ca:	4b2e      	ldr	r3, [pc, #184]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0f0      	beq.n	80064b8 <HAL_RCC_OscConfig+0x41c>
 80064d6:	e04e      	b.n	8006576 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d8:	4b2b      	ldr	r3, [pc, #172]	; (8006588 <HAL_RCC_OscConfig+0x4ec>)
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064de:	f7fe fa09 	bl	80048f4 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064e6:	f7fe fa05 	bl	80048f4 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e03f      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064f8:	4b22      	ldr	r3, [pc, #136]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f0      	bne.n	80064e6 <HAL_RCC_OscConfig+0x44a>
 8006504:	e037      	b.n	8006576 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e032      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006512:	4b1c      	ldr	r3, [pc, #112]	; (8006584 <HAL_RCC_OscConfig+0x4e8>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d028      	beq.n	8006572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800652a:	429a      	cmp	r2, r3
 800652c:	d121      	bne.n	8006572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006538:	429a      	cmp	r2, r3
 800653a:	d11a      	bne.n	8006572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006542:	4013      	ands	r3, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006548:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800654a:	4293      	cmp	r3, r2
 800654c:	d111      	bne.n	8006572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	085b      	lsrs	r3, r3, #1
 800655a:	3b01      	subs	r3, #1
 800655c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800655e:	429a      	cmp	r2, r3
 8006560:	d107      	bne.n	8006572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800656e:	429a      	cmp	r2, r3
 8006570:	d001      	beq.n	8006576 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40007000 	.word	0x40007000
 8006584:	40023800 	.word	0x40023800
 8006588:	42470060 	.word	0x42470060

0800658c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e0cc      	b.n	800673a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065a0:	4b68      	ldr	r3, [pc, #416]	; (8006744 <HAL_RCC_ClockConfig+0x1b8>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d90c      	bls.n	80065c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ae:	4b65      	ldr	r3, [pc, #404]	; (8006744 <HAL_RCC_ClockConfig+0x1b8>)
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b6:	4b63      	ldr	r3, [pc, #396]	; (8006744 <HAL_RCC_ClockConfig+0x1b8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d001      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e0b8      	b.n	800673a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d020      	beq.n	8006616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0304 	and.w	r3, r3, #4
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d005      	beq.n	80065ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065e0:	4b59      	ldr	r3, [pc, #356]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	4a58      	ldr	r2, [pc, #352]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 80065e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0308 	and.w	r3, r3, #8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065f8:	4b53      	ldr	r3, [pc, #332]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	4a52      	ldr	r2, [pc, #328]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 80065fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006604:	4b50      	ldr	r3, [pc, #320]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	494d      	ldr	r1, [pc, #308]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 8006612:	4313      	orrs	r3, r2
 8006614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d044      	beq.n	80066ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d107      	bne.n	800663a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662a:	4b47      	ldr	r3, [pc, #284]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d119      	bne.n	800666a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e07f      	b.n	800673a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d003      	beq.n	800664a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006646:	2b03      	cmp	r3, #3
 8006648:	d107      	bne.n	800665a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800664a:	4b3f      	ldr	r3, [pc, #252]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d109      	bne.n	800666a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e06f      	b.n	800673a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800665a:	4b3b      	ldr	r3, [pc, #236]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e067      	b.n	800673a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800666a:	4b37      	ldr	r3, [pc, #220]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f023 0203 	bic.w	r2, r3, #3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	4934      	ldr	r1, [pc, #208]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 8006678:	4313      	orrs	r3, r2
 800667a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800667c:	f7fe f93a 	bl	80048f4 <HAL_GetTick>
 8006680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006682:	e00a      	b.n	800669a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006684:	f7fe f936 	bl	80048f4 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006692:	4293      	cmp	r3, r2
 8006694:	d901      	bls.n	800669a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e04f      	b.n	800673a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669a:	4b2b      	ldr	r3, [pc, #172]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 020c 	and.w	r2, r3, #12
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d1eb      	bne.n	8006684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80066ac:	4b25      	ldr	r3, [pc, #148]	; (8006744 <HAL_RCC_ClockConfig+0x1b8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0307 	and.w	r3, r3, #7
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d20c      	bcs.n	80066d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066ba:	4b22      	ldr	r3, [pc, #136]	; (8006744 <HAL_RCC_ClockConfig+0x1b8>)
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b20      	ldr	r3, [pc, #128]	; (8006744 <HAL_RCC_ClockConfig+0x1b8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e032      	b.n	800673a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d008      	beq.n	80066f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066e0:	4b19      	ldr	r3, [pc, #100]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	4916      	ldr	r1, [pc, #88]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066fe:	4b12      	ldr	r3, [pc, #72]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	490e      	ldr	r1, [pc, #56]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 800670e:	4313      	orrs	r3, r2
 8006710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006712:	f000 f821 	bl	8006758 <HAL_RCC_GetSysClockFreq>
 8006716:	4602      	mov	r2, r0
 8006718:	4b0b      	ldr	r3, [pc, #44]	; (8006748 <HAL_RCC_ClockConfig+0x1bc>)
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	091b      	lsrs	r3, r3, #4
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	490a      	ldr	r1, [pc, #40]	; (800674c <HAL_RCC_ClockConfig+0x1c0>)
 8006724:	5ccb      	ldrb	r3, [r1, r3]
 8006726:	fa22 f303 	lsr.w	r3, r2, r3
 800672a:	4a09      	ldr	r2, [pc, #36]	; (8006750 <HAL_RCC_ClockConfig+0x1c4>)
 800672c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <HAL_RCC_ClockConfig+0x1c8>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f7fd ff2e 	bl	8004594 <HAL_InitTick>

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	40023c00 	.word	0x40023c00
 8006748:	40023800 	.word	0x40023800
 800674c:	0801f8fc 	.word	0x0801f8fc
 8006750:	200005b0 	.word	0x200005b0
 8006754:	200005b4 	.word	0x200005b4

08006758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006760:	2300      	movs	r3, #0
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	2300      	movs	r3, #0
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	2300      	movs	r3, #0
 800676a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006770:	4b67      	ldr	r3, [pc, #412]	; (8006910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 030c 	and.w	r3, r3, #12
 8006778:	2b08      	cmp	r3, #8
 800677a:	d00d      	beq.n	8006798 <HAL_RCC_GetSysClockFreq+0x40>
 800677c:	2b08      	cmp	r3, #8
 800677e:	f200 80bd 	bhi.w	80068fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <HAL_RCC_GetSysClockFreq+0x34>
 8006786:	2b04      	cmp	r3, #4
 8006788:	d003      	beq.n	8006792 <HAL_RCC_GetSysClockFreq+0x3a>
 800678a:	e0b7      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800678c:	4b61      	ldr	r3, [pc, #388]	; (8006914 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800678e:	60bb      	str	r3, [r7, #8]
       break;
 8006790:	e0b7      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006792:	4b61      	ldr	r3, [pc, #388]	; (8006918 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006794:	60bb      	str	r3, [r7, #8]
      break;
 8006796:	e0b4      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006798:	4b5d      	ldr	r3, [pc, #372]	; (8006910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067a2:	4b5b      	ldr	r3, [pc, #364]	; (8006910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d04d      	beq.n	800684a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ae:	4b58      	ldr	r3, [pc, #352]	; (8006910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	099b      	lsrs	r3, r3, #6
 80067b4:	461a      	mov	r2, r3
 80067b6:	f04f 0300 	mov.w	r3, #0
 80067ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80067be:	f04f 0100 	mov.w	r1, #0
 80067c2:	ea02 0800 	and.w	r8, r2, r0
 80067c6:	ea03 0901 	and.w	r9, r3, r1
 80067ca:	4640      	mov	r0, r8
 80067cc:	4649      	mov	r1, r9
 80067ce:	f04f 0200 	mov.w	r2, #0
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	014b      	lsls	r3, r1, #5
 80067d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80067dc:	0142      	lsls	r2, r0, #5
 80067de:	4610      	mov	r0, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	ebb0 0008 	subs.w	r0, r0, r8
 80067e6:	eb61 0109 	sbc.w	r1, r1, r9
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	018b      	lsls	r3, r1, #6
 80067f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80067f8:	0182      	lsls	r2, r0, #6
 80067fa:	1a12      	subs	r2, r2, r0
 80067fc:	eb63 0301 	sbc.w	r3, r3, r1
 8006800:	f04f 0000 	mov.w	r0, #0
 8006804:	f04f 0100 	mov.w	r1, #0
 8006808:	00d9      	lsls	r1, r3, #3
 800680a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800680e:	00d0      	lsls	r0, r2, #3
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	eb12 0208 	adds.w	r2, r2, r8
 8006818:	eb43 0309 	adc.w	r3, r3, r9
 800681c:	f04f 0000 	mov.w	r0, #0
 8006820:	f04f 0100 	mov.w	r1, #0
 8006824:	0259      	lsls	r1, r3, #9
 8006826:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800682a:	0250      	lsls	r0, r2, #9
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	4610      	mov	r0, r2
 8006832:	4619      	mov	r1, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	461a      	mov	r2, r3
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	f7fa f9e4 	bl	8000c08 <__aeabi_uldivmod>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4613      	mov	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	e04a      	b.n	80068e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800684a:	4b31      	ldr	r3, [pc, #196]	; (8006910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	099b      	lsrs	r3, r3, #6
 8006850:	461a      	mov	r2, r3
 8006852:	f04f 0300 	mov.w	r3, #0
 8006856:	f240 10ff 	movw	r0, #511	; 0x1ff
 800685a:	f04f 0100 	mov.w	r1, #0
 800685e:	ea02 0400 	and.w	r4, r2, r0
 8006862:	ea03 0501 	and.w	r5, r3, r1
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f04f 0200 	mov.w	r2, #0
 800686e:	f04f 0300 	mov.w	r3, #0
 8006872:	014b      	lsls	r3, r1, #5
 8006874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006878:	0142      	lsls	r2, r0, #5
 800687a:	4610      	mov	r0, r2
 800687c:	4619      	mov	r1, r3
 800687e:	1b00      	subs	r0, r0, r4
 8006880:	eb61 0105 	sbc.w	r1, r1, r5
 8006884:	f04f 0200 	mov.w	r2, #0
 8006888:	f04f 0300 	mov.w	r3, #0
 800688c:	018b      	lsls	r3, r1, #6
 800688e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006892:	0182      	lsls	r2, r0, #6
 8006894:	1a12      	subs	r2, r2, r0
 8006896:	eb63 0301 	sbc.w	r3, r3, r1
 800689a:	f04f 0000 	mov.w	r0, #0
 800689e:	f04f 0100 	mov.w	r1, #0
 80068a2:	00d9      	lsls	r1, r3, #3
 80068a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068a8:	00d0      	lsls	r0, r2, #3
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	1912      	adds	r2, r2, r4
 80068b0:	eb45 0303 	adc.w	r3, r5, r3
 80068b4:	f04f 0000 	mov.w	r0, #0
 80068b8:	f04f 0100 	mov.w	r1, #0
 80068bc:	0299      	lsls	r1, r3, #10
 80068be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80068c2:	0290      	lsls	r0, r2, #10
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4610      	mov	r0, r2
 80068ca:	4619      	mov	r1, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	461a      	mov	r2, r3
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	f7fa f998 	bl	8000c08 <__aeabi_uldivmod>
 80068d8:	4602      	mov	r2, r0
 80068da:	460b      	mov	r3, r1
 80068dc:	4613      	mov	r3, r2
 80068de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	0c1b      	lsrs	r3, r3, #16
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	3301      	adds	r3, #1
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f8:	60bb      	str	r3, [r7, #8]
      break;
 80068fa:	e002      	b.n	8006902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80068fe:	60bb      	str	r3, [r7, #8]
      break;
 8006900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006902:	68bb      	ldr	r3, [r7, #8]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800690e:	bf00      	nop
 8006910:	40023800 	.word	0x40023800
 8006914:	00f42400 	.word	0x00f42400
 8006918:	007a1200 	.word	0x007a1200

0800691c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006920:	4b03      	ldr	r3, [pc, #12]	; (8006930 <HAL_RCC_GetHCLKFreq+0x14>)
 8006922:	681b      	ldr	r3, [r3, #0]
}
 8006924:	4618      	mov	r0, r3
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	200005b0 	.word	0x200005b0

08006934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006938:	f7ff fff0 	bl	800691c <HAL_RCC_GetHCLKFreq>
 800693c:	4602      	mov	r2, r0
 800693e:	4b05      	ldr	r3, [pc, #20]	; (8006954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	0a9b      	lsrs	r3, r3, #10
 8006944:	f003 0307 	and.w	r3, r3, #7
 8006948:	4903      	ldr	r1, [pc, #12]	; (8006958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800694a:	5ccb      	ldrb	r3, [r1, r3]
 800694c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006950:	4618      	mov	r0, r3
 8006952:	bd80      	pop	{r7, pc}
 8006954:	40023800 	.word	0x40023800
 8006958:	0801f90c 	.word	0x0801f90c

0800695c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006960:	f7ff ffdc 	bl	800691c <HAL_RCC_GetHCLKFreq>
 8006964:	4602      	mov	r2, r0
 8006966:	4b05      	ldr	r3, [pc, #20]	; (800697c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	0b5b      	lsrs	r3, r3, #13
 800696c:	f003 0307 	and.w	r3, r3, #7
 8006970:	4903      	ldr	r1, [pc, #12]	; (8006980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006972:	5ccb      	ldrb	r3, [r1, r3]
 8006974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006978:	4618      	mov	r0, r3
 800697a:	bd80      	pop	{r7, pc}
 800697c:	40023800 	.word	0x40023800
 8006980:	0801f90c 	.word	0x0801f90c

08006984 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	220f      	movs	r2, #15
 8006992:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006994:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <HAL_RCC_GetClockConfig+0x5c>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 0203 	and.w	r2, r3, #3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80069a0:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <HAL_RCC_GetClockConfig+0x5c>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80069ac:	4b0c      	ldr	r3, [pc, #48]	; (80069e0 <HAL_RCC_GetClockConfig+0x5c>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <HAL_RCC_GetClockConfig+0x5c>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	08db      	lsrs	r3, r3, #3
 80069be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069c6:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <HAL_RCC_GetClockConfig+0x60>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0207 	and.w	r2, r3, #7
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	601a      	str	r2, [r3, #0]
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40023800 	.word	0x40023800
 80069e4:	40023c00 	.word	0x40023c00

080069e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e041      	b.n	8006a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d106      	bne.n	8006a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f839 	bl	8006a86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f000 f9d8 	bl	8006ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b083      	sub	sp, #12
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
	...

08006a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d001      	beq.n	8006ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e04e      	b.n	8006b52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d022      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ade:	d01d      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d018      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <HAL_TIM_Base_Start_IT+0xcc>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d013      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <HAL_TIM_Base_Start_IT+0xd0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d00e      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a1b      	ldr	r2, [pc, #108]	; (8006b70 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d009      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a19      	ldr	r2, [pc, #100]	; (8006b74 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d004      	beq.n	8006b1c <HAL_TIM_Base_Start_IT+0x80>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a18      	ldr	r2, [pc, #96]	; (8006b78 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d111      	bne.n	8006b40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b06      	cmp	r3, #6
 8006b2c:	d010      	beq.n	8006b50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3e:	e007      	b.n	8006b50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40000c00 	.word	0x40000c00
 8006b70:	40010400 	.word	0x40010400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40001800 	.word	0x40001800

08006b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d122      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	f003 0302 	and.w	r3, r3, #2
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d11b      	bne.n	8006bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0202 	mvn.w	r2, #2
 8006ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f8ee 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 8006bc4:	e005      	b.n	8006bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8e0 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f8f1 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d122      	bne.n	8006c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b04      	cmp	r3, #4
 8006bf2:	d11b      	bne.n	8006c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f06f 0204 	mvn.w	r2, #4
 8006bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2202      	movs	r2, #2
 8006c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f8c4 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 8006c18:	e005      	b.n	8006c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f8b6 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f8c7 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d122      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d11b      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0208 	mvn.w	r2, #8
 8006c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2204      	movs	r2, #4
 8006c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f89a 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 8006c6c:	e005      	b.n	8006c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f88c 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f89d 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d122      	bne.n	8006cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	d11b      	bne.n	8006cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0210 	mvn.w	r2, #16
 8006ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2208      	movs	r2, #8
 8006caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f870 	bl	8006da0 <HAL_TIM_IC_CaptureCallback>
 8006cc0:	e005      	b.n	8006cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f862 	bl	8006d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f873 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d10e      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d107      	bne.n	8006d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f06f 0201 	mvn.w	r2, #1
 8006cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7fd fbc2 	bl	8004484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d10e      	bne.n	8006d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d18:	2b80      	cmp	r3, #128	; 0x80
 8006d1a:	d107      	bne.n	8006d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f902 	bl	8006f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d36:	2b40      	cmp	r3, #64	; 0x40
 8006d38:	d10e      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b40      	cmp	r3, #64	; 0x40
 8006d46:	d107      	bne.n	8006d58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f838 	bl	8006dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d10e      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d107      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0220 	mvn.w	r2, #32
 8006d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f8cc 	bl	8006f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a40      	ldr	r2, [pc, #256]	; (8006ef0 <TIM_Base_SetConfig+0x114>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d013      	beq.n	8006e1c <TIM_Base_SetConfig+0x40>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfa:	d00f      	beq.n	8006e1c <TIM_Base_SetConfig+0x40>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a3d      	ldr	r2, [pc, #244]	; (8006ef4 <TIM_Base_SetConfig+0x118>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00b      	beq.n	8006e1c <TIM_Base_SetConfig+0x40>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a3c      	ldr	r2, [pc, #240]	; (8006ef8 <TIM_Base_SetConfig+0x11c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d007      	beq.n	8006e1c <TIM_Base_SetConfig+0x40>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a3b      	ldr	r2, [pc, #236]	; (8006efc <TIM_Base_SetConfig+0x120>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d003      	beq.n	8006e1c <TIM_Base_SetConfig+0x40>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a3a      	ldr	r2, [pc, #232]	; (8006f00 <TIM_Base_SetConfig+0x124>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d108      	bne.n	8006e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a2f      	ldr	r2, [pc, #188]	; (8006ef0 <TIM_Base_SetConfig+0x114>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d02b      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e3c:	d027      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a2c      	ldr	r2, [pc, #176]	; (8006ef4 <TIM_Base_SetConfig+0x118>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d023      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a2b      	ldr	r2, [pc, #172]	; (8006ef8 <TIM_Base_SetConfig+0x11c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d01f      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a2a      	ldr	r2, [pc, #168]	; (8006efc <TIM_Base_SetConfig+0x120>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01b      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a29      	ldr	r2, [pc, #164]	; (8006f00 <TIM_Base_SetConfig+0x124>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d017      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a28      	ldr	r2, [pc, #160]	; (8006f04 <TIM_Base_SetConfig+0x128>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d013      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a27      	ldr	r2, [pc, #156]	; (8006f08 <TIM_Base_SetConfig+0x12c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00f      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a26      	ldr	r2, [pc, #152]	; (8006f0c <TIM_Base_SetConfig+0x130>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d00b      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a25      	ldr	r2, [pc, #148]	; (8006f10 <TIM_Base_SetConfig+0x134>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d007      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a24      	ldr	r2, [pc, #144]	; (8006f14 <TIM_Base_SetConfig+0x138>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d003      	beq.n	8006e8e <TIM_Base_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a23      	ldr	r2, [pc, #140]	; (8006f18 <TIM_Base_SetConfig+0x13c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d108      	bne.n	8006ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68fa      	ldr	r2, [r7, #12]
 8006eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	689a      	ldr	r2, [r3, #8]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a0a      	ldr	r2, [pc, #40]	; (8006ef0 <TIM_Base_SetConfig+0x114>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d003      	beq.n	8006ed4 <TIM_Base_SetConfig+0xf8>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a0c      	ldr	r2, [pc, #48]	; (8006f00 <TIM_Base_SetConfig+0x124>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d103      	bne.n	8006edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	615a      	str	r2, [r3, #20]
}
 8006ee2:	bf00      	nop
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40010000 	.word	0x40010000
 8006ef4:	40000400 	.word	0x40000400
 8006ef8:	40000800 	.word	0x40000800
 8006efc:	40000c00 	.word	0x40000c00
 8006f00:	40010400 	.word	0x40010400
 8006f04:	40014000 	.word	0x40014000
 8006f08:	40014400 	.word	0x40014400
 8006f0c:	40014800 	.word	0x40014800
 8006f10:	40001800 	.word	0x40001800
 8006f14:	40001c00 	.word	0x40001c00
 8006f18:	40002000 	.word	0x40002000

08006f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d101      	bne.n	8006f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e03f      	b.n	8006fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d106      	bne.n	8006f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f7fd faca 	bl	8004504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2224      	movs	r2, #36	; 0x24
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f929 	bl	80071e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695a      	ldr	r2, [r3, #20]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b08a      	sub	sp, #40	; 0x28
 8006fe2:	af02      	add	r7, sp, #8
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	603b      	str	r3, [r7, #0]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b20      	cmp	r3, #32
 8006ffc:	d17c      	bne.n	80070f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HAL_UART_Transmit+0x2c>
 8007004:	88fb      	ldrh	r3, [r7, #6]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e075      	b.n	80070fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <HAL_UART_Transmit+0x3e>
 8007018:	2302      	movs	r3, #2
 800701a:	e06e      	b.n	80070fa <HAL_UART_Transmit+0x11c>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2221      	movs	r2, #33	; 0x21
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007032:	f7fd fc5f 	bl	80048f4 <HAL_GetTick>
 8007036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	88fa      	ldrh	r2, [r7, #6]
 800703c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	88fa      	ldrh	r2, [r7, #6]
 8007042:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704c:	d108      	bne.n	8007060 <HAL_UART_Transmit+0x82>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e003      	b.n	8007068 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007064:	2300      	movs	r3, #0
 8007066:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007070:	e02a      	b.n	80070c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	9300      	str	r3, [sp, #0]
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	2200      	movs	r2, #0
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f840 	bl	8007102 <UART_WaitOnFlagUntilTimeout>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e036      	b.n	80070fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	881b      	ldrh	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	3302      	adds	r3, #2
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	e007      	b.n	80070ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	781a      	ldrb	r2, [r3, #0]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	3301      	adds	r3, #1
 80070b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1cf      	bne.n	8007072 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	2200      	movs	r2, #0
 80070da:	2140      	movs	r1, #64	; 0x40
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 f810 	bl	8007102 <UART_WaitOnFlagUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e006      	b.n	80070fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e000      	b.n	80070fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070f8:	2302      	movs	r3, #2
  }
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b090      	sub	sp, #64	; 0x40
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	603b      	str	r3, [r7, #0]
 800710e:	4613      	mov	r3, r2
 8007110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007112:	e050      	b.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800711a:	d04c      	beq.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800711c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <UART_WaitOnFlagUntilTimeout+0x30>
 8007122:	f7fd fbe7 	bl	80048f4 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800712e:	429a      	cmp	r2, r3
 8007130:	d241      	bcs.n	80071b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	330c      	adds	r3, #12
 8007150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007152:	637a      	str	r2, [r7, #52]	; 0x34
 8007154:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800715a:	e841 2300 	strex	r3, r2, [r1]
 800715e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e5      	bne.n	8007132 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3314      	adds	r3, #20
 800716c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	613b      	str	r3, [r7, #16]
   return(result);
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f023 0301 	bic.w	r3, r3, #1
 800717c:	63bb      	str	r3, [r7, #56]	; 0x38
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3314      	adds	r3, #20
 8007184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007186:	623a      	str	r2, [r7, #32]
 8007188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	69f9      	ldr	r1, [r7, #28]
 800718c:	6a3a      	ldr	r2, [r7, #32]
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	61bb      	str	r3, [r7, #24]
   return(result);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e5      	bne.n	8007166 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	e00f      	b.n	80071d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	4013      	ands	r3, r2
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	bf0c      	ite	eq
 80071c6:	2301      	moveq	r3, #1
 80071c8:	2300      	movne	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	79fb      	ldrb	r3, [r7, #7]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d09f      	beq.n	8007114 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3740      	adds	r7, #64	; 0x40
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	b09f      	sub	sp, #124	; 0x7c
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071f6:	68d9      	ldr	r1, [r3, #12]
 80071f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	ea40 0301 	orr.w	r3, r0, r1
 8007200:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	431a      	orrs	r2, r3
 800720c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800720e:	695b      	ldr	r3, [r3, #20]
 8007210:	431a      	orrs	r2, r3
 8007212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	4313      	orrs	r3, r2
 8007218:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800721a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007224:	f021 010c 	bic.w	r1, r1, #12
 8007228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800722e:	430b      	orrs	r3, r1
 8007230:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	695b      	ldr	r3, [r3, #20]
 8007238:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800723c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800723e:	6999      	ldr	r1, [r3, #24]
 8007240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	ea40 0301 	orr.w	r3, r0, r1
 8007248:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800724a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	4bc5      	ldr	r3, [pc, #788]	; (8007564 <UART_SetConfig+0x384>)
 8007250:	429a      	cmp	r2, r3
 8007252:	d004      	beq.n	800725e <UART_SetConfig+0x7e>
 8007254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	4bc3      	ldr	r3, [pc, #780]	; (8007568 <UART_SetConfig+0x388>)
 800725a:	429a      	cmp	r2, r3
 800725c:	d103      	bne.n	8007266 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800725e:	f7ff fb7d 	bl	800695c <HAL_RCC_GetPCLK2Freq>
 8007262:	6778      	str	r0, [r7, #116]	; 0x74
 8007264:	e002      	b.n	800726c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007266:	f7ff fb65 	bl	8006934 <HAL_RCC_GetPCLK1Freq>
 800726a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800726c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007274:	f040 80b6 	bne.w	80073e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007278:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800727a:	461c      	mov	r4, r3
 800727c:	f04f 0500 	mov.w	r5, #0
 8007280:	4622      	mov	r2, r4
 8007282:	462b      	mov	r3, r5
 8007284:	1891      	adds	r1, r2, r2
 8007286:	6439      	str	r1, [r7, #64]	; 0x40
 8007288:	415b      	adcs	r3, r3
 800728a:	647b      	str	r3, [r7, #68]	; 0x44
 800728c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007290:	1912      	adds	r2, r2, r4
 8007292:	eb45 0303 	adc.w	r3, r5, r3
 8007296:	f04f 0000 	mov.w	r0, #0
 800729a:	f04f 0100 	mov.w	r1, #0
 800729e:	00d9      	lsls	r1, r3, #3
 80072a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072a4:	00d0      	lsls	r0, r2, #3
 80072a6:	4602      	mov	r2, r0
 80072a8:	460b      	mov	r3, r1
 80072aa:	1911      	adds	r1, r2, r4
 80072ac:	6639      	str	r1, [r7, #96]	; 0x60
 80072ae:	416b      	adcs	r3, r5
 80072b0:	667b      	str	r3, [r7, #100]	; 0x64
 80072b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	461a      	mov	r2, r3
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	1891      	adds	r1, r2, r2
 80072be:	63b9      	str	r1, [r7, #56]	; 0x38
 80072c0:	415b      	adcs	r3, r3
 80072c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80072c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80072cc:	f7f9 fc9c 	bl	8000c08 <__aeabi_uldivmod>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4ba5      	ldr	r3, [pc, #660]	; (800756c <UART_SetConfig+0x38c>)
 80072d6:	fba3 2302 	umull	r2, r3, r3, r2
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	011e      	lsls	r6, r3, #4
 80072de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e0:	461c      	mov	r4, r3
 80072e2:	f04f 0500 	mov.w	r5, #0
 80072e6:	4622      	mov	r2, r4
 80072e8:	462b      	mov	r3, r5
 80072ea:	1891      	adds	r1, r2, r2
 80072ec:	6339      	str	r1, [r7, #48]	; 0x30
 80072ee:	415b      	adcs	r3, r3
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
 80072f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80072f6:	1912      	adds	r2, r2, r4
 80072f8:	eb45 0303 	adc.w	r3, r5, r3
 80072fc:	f04f 0000 	mov.w	r0, #0
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	00d9      	lsls	r1, r3, #3
 8007306:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800730a:	00d0      	lsls	r0, r2, #3
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	1911      	adds	r1, r2, r4
 8007312:	65b9      	str	r1, [r7, #88]	; 0x58
 8007314:	416b      	adcs	r3, r5
 8007316:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	461a      	mov	r2, r3
 800731e:	f04f 0300 	mov.w	r3, #0
 8007322:	1891      	adds	r1, r2, r2
 8007324:	62b9      	str	r1, [r7, #40]	; 0x28
 8007326:	415b      	adcs	r3, r3
 8007328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800732a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800732e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007332:	f7f9 fc69 	bl	8000c08 <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4b8c      	ldr	r3, [pc, #560]	; (800756c <UART_SetConfig+0x38c>)
 800733c:	fba3 1302 	umull	r1, r3, r3, r2
 8007340:	095b      	lsrs	r3, r3, #5
 8007342:	2164      	movs	r1, #100	; 0x64
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	3332      	adds	r3, #50	; 0x32
 800734e:	4a87      	ldr	r2, [pc, #540]	; (800756c <UART_SetConfig+0x38c>)
 8007350:	fba2 2303 	umull	r2, r3, r2, r3
 8007354:	095b      	lsrs	r3, r3, #5
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800735c:	441e      	add	r6, r3
 800735e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007360:	4618      	mov	r0, r3
 8007362:	f04f 0100 	mov.w	r1, #0
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	1894      	adds	r4, r2, r2
 800736c:	623c      	str	r4, [r7, #32]
 800736e:	415b      	adcs	r3, r3
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
 8007372:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007376:	1812      	adds	r2, r2, r0
 8007378:	eb41 0303 	adc.w	r3, r1, r3
 800737c:	f04f 0400 	mov.w	r4, #0
 8007380:	f04f 0500 	mov.w	r5, #0
 8007384:	00dd      	lsls	r5, r3, #3
 8007386:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800738a:	00d4      	lsls	r4, r2, #3
 800738c:	4622      	mov	r2, r4
 800738e:	462b      	mov	r3, r5
 8007390:	1814      	adds	r4, r2, r0
 8007392:	653c      	str	r4, [r7, #80]	; 0x50
 8007394:	414b      	adcs	r3, r1
 8007396:	657b      	str	r3, [r7, #84]	; 0x54
 8007398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	461a      	mov	r2, r3
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	1891      	adds	r1, r2, r2
 80073a4:	61b9      	str	r1, [r7, #24]
 80073a6:	415b      	adcs	r3, r3
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80073b2:	f7f9 fc29 	bl	8000c08 <__aeabi_uldivmod>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	4b6c      	ldr	r3, [pc, #432]	; (800756c <UART_SetConfig+0x38c>)
 80073bc:	fba3 1302 	umull	r1, r3, r3, r2
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	2164      	movs	r1, #100	; 0x64
 80073c4:	fb01 f303 	mul.w	r3, r1, r3
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	3332      	adds	r3, #50	; 0x32
 80073ce:	4a67      	ldr	r2, [pc, #412]	; (800756c <UART_SetConfig+0x38c>)
 80073d0:	fba2 2303 	umull	r2, r3, r2, r3
 80073d4:	095b      	lsrs	r3, r3, #5
 80073d6:	f003 0207 	and.w	r2, r3, #7
 80073da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4432      	add	r2, r6
 80073e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073e2:	e0b9      	b.n	8007558 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073e6:	461c      	mov	r4, r3
 80073e8:	f04f 0500 	mov.w	r5, #0
 80073ec:	4622      	mov	r2, r4
 80073ee:	462b      	mov	r3, r5
 80073f0:	1891      	adds	r1, r2, r2
 80073f2:	6139      	str	r1, [r7, #16]
 80073f4:	415b      	adcs	r3, r3
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80073fc:	1912      	adds	r2, r2, r4
 80073fe:	eb45 0303 	adc.w	r3, r5, r3
 8007402:	f04f 0000 	mov.w	r0, #0
 8007406:	f04f 0100 	mov.w	r1, #0
 800740a:	00d9      	lsls	r1, r3, #3
 800740c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007410:	00d0      	lsls	r0, r2, #3
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	eb12 0804 	adds.w	r8, r2, r4
 800741a:	eb43 0905 	adc.w	r9, r3, r5
 800741e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	4618      	mov	r0, r3
 8007424:	f04f 0100 	mov.w	r1, #0
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	008b      	lsls	r3, r1, #2
 8007432:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007436:	0082      	lsls	r2, r0, #2
 8007438:	4640      	mov	r0, r8
 800743a:	4649      	mov	r1, r9
 800743c:	f7f9 fbe4 	bl	8000c08 <__aeabi_uldivmod>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4b49      	ldr	r3, [pc, #292]	; (800756c <UART_SetConfig+0x38c>)
 8007446:	fba3 2302 	umull	r2, r3, r3, r2
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	011e      	lsls	r6, r3, #4
 800744e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007450:	4618      	mov	r0, r3
 8007452:	f04f 0100 	mov.w	r1, #0
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	1894      	adds	r4, r2, r2
 800745c:	60bc      	str	r4, [r7, #8]
 800745e:	415b      	adcs	r3, r3
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007466:	1812      	adds	r2, r2, r0
 8007468:	eb41 0303 	adc.w	r3, r1, r3
 800746c:	f04f 0400 	mov.w	r4, #0
 8007470:	f04f 0500 	mov.w	r5, #0
 8007474:	00dd      	lsls	r5, r3, #3
 8007476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800747a:	00d4      	lsls	r4, r2, #3
 800747c:	4622      	mov	r2, r4
 800747e:	462b      	mov	r3, r5
 8007480:	1814      	adds	r4, r2, r0
 8007482:	64bc      	str	r4, [r7, #72]	; 0x48
 8007484:	414b      	adcs	r3, r1
 8007486:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	4618      	mov	r0, r3
 800748e:	f04f 0100 	mov.w	r1, #0
 8007492:	f04f 0200 	mov.w	r2, #0
 8007496:	f04f 0300 	mov.w	r3, #0
 800749a:	008b      	lsls	r3, r1, #2
 800749c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074a0:	0082      	lsls	r2, r0, #2
 80074a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80074a6:	f7f9 fbaf 	bl	8000c08 <__aeabi_uldivmod>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4b2f      	ldr	r3, [pc, #188]	; (800756c <UART_SetConfig+0x38c>)
 80074b0:	fba3 1302 	umull	r1, r3, r3, r2
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	2164      	movs	r1, #100	; 0x64
 80074b8:	fb01 f303 	mul.w	r3, r1, r3
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	3332      	adds	r3, #50	; 0x32
 80074c2:	4a2a      	ldr	r2, [pc, #168]	; (800756c <UART_SetConfig+0x38c>)
 80074c4:	fba2 2303 	umull	r2, r3, r2, r3
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074ce:	441e      	add	r6, r3
 80074d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074d2:	4618      	mov	r0, r3
 80074d4:	f04f 0100 	mov.w	r1, #0
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	1894      	adds	r4, r2, r2
 80074de:	603c      	str	r4, [r7, #0]
 80074e0:	415b      	adcs	r3, r3
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074e8:	1812      	adds	r2, r2, r0
 80074ea:	eb41 0303 	adc.w	r3, r1, r3
 80074ee:	f04f 0400 	mov.w	r4, #0
 80074f2:	f04f 0500 	mov.w	r5, #0
 80074f6:	00dd      	lsls	r5, r3, #3
 80074f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80074fc:	00d4      	lsls	r4, r2, #3
 80074fe:	4622      	mov	r2, r4
 8007500:	462b      	mov	r3, r5
 8007502:	eb12 0a00 	adds.w	sl, r2, r0
 8007506:	eb43 0b01 	adc.w	fp, r3, r1
 800750a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	4618      	mov	r0, r3
 8007510:	f04f 0100 	mov.w	r1, #0
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	008b      	lsls	r3, r1, #2
 800751e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007522:	0082      	lsls	r2, r0, #2
 8007524:	4650      	mov	r0, sl
 8007526:	4659      	mov	r1, fp
 8007528:	f7f9 fb6e 	bl	8000c08 <__aeabi_uldivmod>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	4b0e      	ldr	r3, [pc, #56]	; (800756c <UART_SetConfig+0x38c>)
 8007532:	fba3 1302 	umull	r1, r3, r3, r2
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	2164      	movs	r1, #100	; 0x64
 800753a:	fb01 f303 	mul.w	r3, r1, r3
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	3332      	adds	r3, #50	; 0x32
 8007544:	4a09      	ldr	r2, [pc, #36]	; (800756c <UART_SetConfig+0x38c>)
 8007546:	fba2 2303 	umull	r2, r3, r2, r3
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	f003 020f 	and.w	r2, r3, #15
 8007550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4432      	add	r2, r6
 8007556:	609a      	str	r2, [r3, #8]
}
 8007558:	bf00      	nop
 800755a:	377c      	adds	r7, #124	; 0x7c
 800755c:	46bd      	mov	sp, r7
 800755e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007562:	bf00      	nop
 8007564:	40011000 	.word	0x40011000
 8007568:	40011400 	.word	0x40011400
 800756c:	51eb851f 	.word	0x51eb851f

08007570 <MX_LWIP_Init>:
  dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */
#else
  void MX_LWIP_Init(void)
  {
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af04      	add	r7, sp, #16
    /* IP addresses initialization */
    IP_ADDRESS[0] = 192;
 8007576:	4b8d      	ldr	r3, [pc, #564]	; (80077ac <MX_LWIP_Init+0x23c>)
 8007578:	22c0      	movs	r2, #192	; 0xc0
 800757a:	701a      	strb	r2, [r3, #0]
    IP_ADDRESS[1] = 168;
 800757c:	4b8b      	ldr	r3, [pc, #556]	; (80077ac <MX_LWIP_Init+0x23c>)
 800757e:	22a8      	movs	r2, #168	; 0xa8
 8007580:	705a      	strb	r2, [r3, #1]
    IP_ADDRESS[2] = 18;
 8007582:	4b8a      	ldr	r3, [pc, #552]	; (80077ac <MX_LWIP_Init+0x23c>)
 8007584:	2212      	movs	r2, #18
 8007586:	709a      	strb	r2, [r3, #2]
    IP_ADDRESS[3] = 111;
 8007588:	4b88      	ldr	r3, [pc, #544]	; (80077ac <MX_LWIP_Init+0x23c>)
 800758a:	226f      	movs	r2, #111	; 0x6f
 800758c:	70da      	strb	r2, [r3, #3]
    NETMASK_ADDRESS[0] = 255;
 800758e:	4b88      	ldr	r3, [pc, #544]	; (80077b0 <MX_LWIP_Init+0x240>)
 8007590:	22ff      	movs	r2, #255	; 0xff
 8007592:	701a      	strb	r2, [r3, #0]
    NETMASK_ADDRESS[1] = 255;
 8007594:	4b86      	ldr	r3, [pc, #536]	; (80077b0 <MX_LWIP_Init+0x240>)
 8007596:	22ff      	movs	r2, #255	; 0xff
 8007598:	705a      	strb	r2, [r3, #1]
    NETMASK_ADDRESS[2] = 255;
 800759a:	4b85      	ldr	r3, [pc, #532]	; (80077b0 <MX_LWIP_Init+0x240>)
 800759c:	22ff      	movs	r2, #255	; 0xff
 800759e:	709a      	strb	r2, [r3, #2]
    NETMASK_ADDRESS[3] = 0;
 80075a0:	4b83      	ldr	r3, [pc, #524]	; (80077b0 <MX_LWIP_Init+0x240>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	70da      	strb	r2, [r3, #3]
    GATEWAY_ADDRESS[0] = 192;
 80075a6:	4b83      	ldr	r3, [pc, #524]	; (80077b4 <MX_LWIP_Init+0x244>)
 80075a8:	22c0      	movs	r2, #192	; 0xc0
 80075aa:	701a      	strb	r2, [r3, #0]
    GATEWAY_ADDRESS[1] = 168;
 80075ac:	4b81      	ldr	r3, [pc, #516]	; (80077b4 <MX_LWIP_Init+0x244>)
 80075ae:	22a8      	movs	r2, #168	; 0xa8
 80075b0:	705a      	strb	r2, [r3, #1]
    GATEWAY_ADDRESS[2] = 18;
 80075b2:	4b80      	ldr	r3, [pc, #512]	; (80077b4 <MX_LWIP_Init+0x244>)
 80075b4:	2212      	movs	r2, #18
 80075b6:	709a      	strb	r2, [r3, #2]
    GATEWAY_ADDRESS[3] = 1;
 80075b8:	4b7e      	ldr	r3, [pc, #504]	; (80077b4 <MX_LWIP_Init+0x244>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	70da      	strb	r2, [r3, #3]

  /* USER CODE BEGIN IP_ADDRESSES */
  /* USER CODE END IP_ADDRESSES */

    /* Initilialize the LwIP stack without RTOS */
    lwip_init();
 80075be:	f002 fd69 	bl	800a094 <lwip_init>

    /* IP addresses initialization without DHCP (IPv4) */
    IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);IP4_ADDR(
 80075c2:	4b7a      	ldr	r3, [pc, #488]	; (80077ac <MX_LWIP_Init+0x23c>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	061a      	lsls	r2, r3, #24
 80075c8:	4b78      	ldr	r3, [pc, #480]	; (80077ac <MX_LWIP_Init+0x23c>)
 80075ca:	785b      	ldrb	r3, [r3, #1]
 80075cc:	041b      	lsls	r3, r3, #16
 80075ce:	431a      	orrs	r2, r3
 80075d0:	4b76      	ldr	r3, [pc, #472]	; (80077ac <MX_LWIP_Init+0x23c>)
 80075d2:	789b      	ldrb	r3, [r3, #2]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	4313      	orrs	r3, r2
 80075d8:	4a74      	ldr	r2, [pc, #464]	; (80077ac <MX_LWIP_Init+0x23c>)
 80075da:	78d2      	ldrb	r2, [r2, #3]
 80075dc:	4313      	orrs	r3, r2
 80075de:	061a      	lsls	r2, r3, #24
 80075e0:	4b72      	ldr	r3, [pc, #456]	; (80077ac <MX_LWIP_Init+0x23c>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	0619      	lsls	r1, r3, #24
 80075e6:	4b71      	ldr	r3, [pc, #452]	; (80077ac <MX_LWIP_Init+0x23c>)
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	041b      	lsls	r3, r3, #16
 80075ec:	4319      	orrs	r1, r3
 80075ee:	4b6f      	ldr	r3, [pc, #444]	; (80077ac <MX_LWIP_Init+0x23c>)
 80075f0:	789b      	ldrb	r3, [r3, #2]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	430b      	orrs	r3, r1
 80075f6:	496d      	ldr	r1, [pc, #436]	; (80077ac <MX_LWIP_Init+0x23c>)
 80075f8:	78c9      	ldrb	r1, [r1, #3]
 80075fa:	430b      	orrs	r3, r1
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007602:	431a      	orrs	r2, r3
 8007604:	4b69      	ldr	r3, [pc, #420]	; (80077ac <MX_LWIP_Init+0x23c>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	0619      	lsls	r1, r3, #24
 800760a:	4b68      	ldr	r3, [pc, #416]	; (80077ac <MX_LWIP_Init+0x23c>)
 800760c:	785b      	ldrb	r3, [r3, #1]
 800760e:	041b      	lsls	r3, r3, #16
 8007610:	4319      	orrs	r1, r3
 8007612:	4b66      	ldr	r3, [pc, #408]	; (80077ac <MX_LWIP_Init+0x23c>)
 8007614:	789b      	ldrb	r3, [r3, #2]
 8007616:	021b      	lsls	r3, r3, #8
 8007618:	430b      	orrs	r3, r1
 800761a:	4964      	ldr	r1, [pc, #400]	; (80077ac <MX_LWIP_Init+0x23c>)
 800761c:	78c9      	ldrb	r1, [r1, #3]
 800761e:	430b      	orrs	r3, r1
 8007620:	0a1b      	lsrs	r3, r3, #8
 8007622:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007626:	431a      	orrs	r2, r3
 8007628:	4b60      	ldr	r3, [pc, #384]	; (80077ac <MX_LWIP_Init+0x23c>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	0619      	lsls	r1, r3, #24
 800762e:	4b5f      	ldr	r3, [pc, #380]	; (80077ac <MX_LWIP_Init+0x23c>)
 8007630:	785b      	ldrb	r3, [r3, #1]
 8007632:	041b      	lsls	r3, r3, #16
 8007634:	4319      	orrs	r1, r3
 8007636:	4b5d      	ldr	r3, [pc, #372]	; (80077ac <MX_LWIP_Init+0x23c>)
 8007638:	789b      	ldrb	r3, [r3, #2]
 800763a:	021b      	lsls	r3, r3, #8
 800763c:	430b      	orrs	r3, r1
 800763e:	495b      	ldr	r1, [pc, #364]	; (80077ac <MX_LWIP_Init+0x23c>)
 8007640:	78c9      	ldrb	r1, [r1, #3]
 8007642:	430b      	orrs	r3, r1
 8007644:	0e1b      	lsrs	r3, r3, #24
 8007646:	4313      	orrs	r3, r2
 8007648:	4a5b      	ldr	r2, [pc, #364]	; (80077b8 <MX_LWIP_Init+0x248>)
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	4b58      	ldr	r3, [pc, #352]	; (80077b0 <MX_LWIP_Init+0x240>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	061a      	lsls	r2, r3, #24
 8007652:	4b57      	ldr	r3, [pc, #348]	; (80077b0 <MX_LWIP_Init+0x240>)
 8007654:	785b      	ldrb	r3, [r3, #1]
 8007656:	041b      	lsls	r3, r3, #16
 8007658:	431a      	orrs	r2, r3
 800765a:	4b55      	ldr	r3, [pc, #340]	; (80077b0 <MX_LWIP_Init+0x240>)
 800765c:	789b      	ldrb	r3, [r3, #2]
 800765e:	021b      	lsls	r3, r3, #8
 8007660:	4313      	orrs	r3, r2
 8007662:	4a53      	ldr	r2, [pc, #332]	; (80077b0 <MX_LWIP_Init+0x240>)
 8007664:	78d2      	ldrb	r2, [r2, #3]
 8007666:	4313      	orrs	r3, r2
 8007668:	061a      	lsls	r2, r3, #24
 800766a:	4b51      	ldr	r3, [pc, #324]	; (80077b0 <MX_LWIP_Init+0x240>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	0619      	lsls	r1, r3, #24
 8007670:	4b4f      	ldr	r3, [pc, #316]	; (80077b0 <MX_LWIP_Init+0x240>)
 8007672:	785b      	ldrb	r3, [r3, #1]
 8007674:	041b      	lsls	r3, r3, #16
 8007676:	4319      	orrs	r1, r3
 8007678:	4b4d      	ldr	r3, [pc, #308]	; (80077b0 <MX_LWIP_Init+0x240>)
 800767a:	789b      	ldrb	r3, [r3, #2]
 800767c:	021b      	lsls	r3, r3, #8
 800767e:	430b      	orrs	r3, r1
 8007680:	494b      	ldr	r1, [pc, #300]	; (80077b0 <MX_LWIP_Init+0x240>)
 8007682:	78c9      	ldrb	r1, [r1, #3]
 8007684:	430b      	orrs	r3, r1
 8007686:	021b      	lsls	r3, r3, #8
 8007688:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800768c:	431a      	orrs	r2, r3
 800768e:	4b48      	ldr	r3, [pc, #288]	; (80077b0 <MX_LWIP_Init+0x240>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	0619      	lsls	r1, r3, #24
 8007694:	4b46      	ldr	r3, [pc, #280]	; (80077b0 <MX_LWIP_Init+0x240>)
 8007696:	785b      	ldrb	r3, [r3, #1]
 8007698:	041b      	lsls	r3, r3, #16
 800769a:	4319      	orrs	r1, r3
 800769c:	4b44      	ldr	r3, [pc, #272]	; (80077b0 <MX_LWIP_Init+0x240>)
 800769e:	789b      	ldrb	r3, [r3, #2]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	430b      	orrs	r3, r1
 80076a4:	4942      	ldr	r1, [pc, #264]	; (80077b0 <MX_LWIP_Init+0x240>)
 80076a6:	78c9      	ldrb	r1, [r1, #3]
 80076a8:	430b      	orrs	r3, r1
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80076b0:	431a      	orrs	r2, r3
 80076b2:	4b3f      	ldr	r3, [pc, #252]	; (80077b0 <MX_LWIP_Init+0x240>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	0619      	lsls	r1, r3, #24
 80076b8:	4b3d      	ldr	r3, [pc, #244]	; (80077b0 <MX_LWIP_Init+0x240>)
 80076ba:	785b      	ldrb	r3, [r3, #1]
 80076bc:	041b      	lsls	r3, r3, #16
 80076be:	4319      	orrs	r1, r3
 80076c0:	4b3b      	ldr	r3, [pc, #236]	; (80077b0 <MX_LWIP_Init+0x240>)
 80076c2:	789b      	ldrb	r3, [r3, #2]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	430b      	orrs	r3, r1
 80076c8:	4939      	ldr	r1, [pc, #228]	; (80077b0 <MX_LWIP_Init+0x240>)
 80076ca:	78c9      	ldrb	r1, [r1, #3]
 80076cc:	430b      	orrs	r3, r1
 80076ce:	0e1b      	lsrs	r3, r3, #24
 80076d0:	4313      	orrs	r3, r2
 80076d2:	4a3a      	ldr	r2, [pc, #232]	; (80077bc <MX_LWIP_Init+0x24c>)
 80076d4:	6013      	str	r3, [r2, #0]
  		&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2],
  		NETMASK_ADDRESS[3]);IP4_ADDR(&gw, GATEWAY_ADDRESS[0],
 80076d6:	4b37      	ldr	r3, [pc, #220]	; (80077b4 <MX_LWIP_Init+0x244>)
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	061a      	lsls	r2, r3, #24
 80076dc:	4b35      	ldr	r3, [pc, #212]	; (80077b4 <MX_LWIP_Init+0x244>)
 80076de:	785b      	ldrb	r3, [r3, #1]
 80076e0:	041b      	lsls	r3, r3, #16
 80076e2:	431a      	orrs	r2, r3
 80076e4:	4b33      	ldr	r3, [pc, #204]	; (80077b4 <MX_LWIP_Init+0x244>)
 80076e6:	789b      	ldrb	r3, [r3, #2]
 80076e8:	021b      	lsls	r3, r3, #8
 80076ea:	4313      	orrs	r3, r2
 80076ec:	4a31      	ldr	r2, [pc, #196]	; (80077b4 <MX_LWIP_Init+0x244>)
 80076ee:	78d2      	ldrb	r2, [r2, #3]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	061a      	lsls	r2, r3, #24
 80076f4:	4b2f      	ldr	r3, [pc, #188]	; (80077b4 <MX_LWIP_Init+0x244>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	0619      	lsls	r1, r3, #24
 80076fa:	4b2e      	ldr	r3, [pc, #184]	; (80077b4 <MX_LWIP_Init+0x244>)
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	041b      	lsls	r3, r3, #16
 8007700:	4319      	orrs	r1, r3
 8007702:	4b2c      	ldr	r3, [pc, #176]	; (80077b4 <MX_LWIP_Init+0x244>)
 8007704:	789b      	ldrb	r3, [r3, #2]
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	430b      	orrs	r3, r1
 800770a:	492a      	ldr	r1, [pc, #168]	; (80077b4 <MX_LWIP_Init+0x244>)
 800770c:	78c9      	ldrb	r1, [r1, #3]
 800770e:	430b      	orrs	r3, r1
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007716:	431a      	orrs	r2, r3
 8007718:	4b26      	ldr	r3, [pc, #152]	; (80077b4 <MX_LWIP_Init+0x244>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	0619      	lsls	r1, r3, #24
 800771e:	4b25      	ldr	r3, [pc, #148]	; (80077b4 <MX_LWIP_Init+0x244>)
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	041b      	lsls	r3, r3, #16
 8007724:	4319      	orrs	r1, r3
 8007726:	4b23      	ldr	r3, [pc, #140]	; (80077b4 <MX_LWIP_Init+0x244>)
 8007728:	789b      	ldrb	r3, [r3, #2]
 800772a:	021b      	lsls	r3, r3, #8
 800772c:	430b      	orrs	r3, r1
 800772e:	4921      	ldr	r1, [pc, #132]	; (80077b4 <MX_LWIP_Init+0x244>)
 8007730:	78c9      	ldrb	r1, [r1, #3]
 8007732:	430b      	orrs	r3, r1
 8007734:	0a1b      	lsrs	r3, r3, #8
 8007736:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800773a:	431a      	orrs	r2, r3
 800773c:	4b1d      	ldr	r3, [pc, #116]	; (80077b4 <MX_LWIP_Init+0x244>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	0619      	lsls	r1, r3, #24
 8007742:	4b1c      	ldr	r3, [pc, #112]	; (80077b4 <MX_LWIP_Init+0x244>)
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	041b      	lsls	r3, r3, #16
 8007748:	4319      	orrs	r1, r3
 800774a:	4b1a      	ldr	r3, [pc, #104]	; (80077b4 <MX_LWIP_Init+0x244>)
 800774c:	789b      	ldrb	r3, [r3, #2]
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	430b      	orrs	r3, r1
 8007752:	4918      	ldr	r1, [pc, #96]	; (80077b4 <MX_LWIP_Init+0x244>)
 8007754:	78c9      	ldrb	r1, [r1, #3]
 8007756:	430b      	orrs	r3, r1
 8007758:	0e1b      	lsrs	r3, r3, #24
 800775a:	4313      	orrs	r3, r2
 800775c:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <MX_LWIP_Init+0x250>)
 800775e:	6013      	str	r3, [r2, #0]
  		GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007760:	4b18      	ldr	r3, [pc, #96]	; (80077c4 <MX_LWIP_Init+0x254>)
 8007762:	9302      	str	r3, [sp, #8]
 8007764:	4b18      	ldr	r3, [pc, #96]	; (80077c8 <MX_LWIP_Init+0x258>)
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	2300      	movs	r3, #0
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4b14      	ldr	r3, [pc, #80]	; (80077c0 <MX_LWIP_Init+0x250>)
 800776e:	4a13      	ldr	r2, [pc, #76]	; (80077bc <MX_LWIP_Init+0x24c>)
 8007770:	4911      	ldr	r1, [pc, #68]	; (80077b8 <MX_LWIP_Init+0x248>)
 8007772:	4816      	ldr	r0, [pc, #88]	; (80077cc <MX_LWIP_Init+0x25c>)
 8007774:	f003 f934 	bl	800a9e0 <netif_add>

    /* Registers the default network interface */
    netif_set_default(&gnetif);
 8007778:	4814      	ldr	r0, [pc, #80]	; (80077cc <MX_LWIP_Init+0x25c>)
 800777a:	f003 faeb 	bl	800ad54 <netif_set_default>

    if (netif_is_link_up(&gnetif)
 800777e:	4b13      	ldr	r3, [pc, #76]	; (80077cc <MX_LWIP_Init+0x25c>)
 8007780:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007784:	089b      	lsrs	r3, r3, #2
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <MX_LWIP_Init+0x228>
  )
    {
      /* When the netif is fully configured this function must be called */
      netif_set_up(&gnetif);
 8007790:	480e      	ldr	r0, [pc, #56]	; (80077cc <MX_LWIP_Init+0x25c>)
 8007792:	f003 faef 	bl	800ad74 <netif_set_up>
 8007796:	e002      	b.n	800779e <MX_LWIP_Init+0x22e>
    }
    else
    {
      /* When the netif link is down this function must be called */
      netif_set_down(&gnetif);
 8007798:	480c      	ldr	r0, [pc, #48]	; (80077cc <MX_LWIP_Init+0x25c>)
 800779a:	f003 fb57 	bl	800ae4c <netif_set_down>
    }

    /* Set the link callback function, this function is called on change of link status*/
    netif_set_link_callback(&gnetif, ethernetif_update_config);
 800779e:	490c      	ldr	r1, [pc, #48]	; (80077d0 <MX_LWIP_Init+0x260>)
 80077a0:	480a      	ldr	r0, [pc, #40]	; (80077cc <MX_LWIP_Init+0x25c>)
 80077a2:	f003 fb85 	bl	800aeb0 <netif_set_link_callback>

    /* Create the Ethernet link handler thread */
  }
 80077a6:	bf00      	nop
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20006e34 	.word	0x20006e34
 80077b0:	20006e30 	.word	0x20006e30
 80077b4:	20006df0 	.word	0x20006df0
 80077b8:	20006e2c 	.word	0x20006e2c
 80077bc:	20006e38 	.word	0x20006e38
 80077c0:	20006e3c 	.word	0x20006e3c
 80077c4:	08016a4d 	.word	0x08016a4d
 80077c8:	08007d61 	.word	0x08007d61
 80077cc:	20006df4 	.word	0x20006df4
 80077d0:	08007dcd 	.word	0x08007dcd

080077d4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08e      	sub	sp, #56	; 0x38
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077e0:	2200      	movs	r2, #0
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	605a      	str	r2, [r3, #4]
 80077e6:	609a      	str	r2, [r3, #8]
 80077e8:	60da      	str	r2, [r3, #12]
 80077ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a46      	ldr	r2, [pc, #280]	; (800790c <HAL_ETH_MspInit+0x138>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	f040 8085 	bne.w	8007902 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80077f8:	2300      	movs	r3, #0
 80077fa:	623b      	str	r3, [r7, #32]
 80077fc:	4b44      	ldr	r3, [pc, #272]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 80077fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007800:	4a43      	ldr	r2, [pc, #268]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 8007802:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007806:	6313      	str	r3, [r2, #48]	; 0x30
 8007808:	4b41      	ldr	r3, [pc, #260]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 800780a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007810:	623b      	str	r3, [r7, #32]
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	2300      	movs	r3, #0
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	4b3d      	ldr	r3, [pc, #244]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 800781a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781c:	4a3c      	ldr	r2, [pc, #240]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 800781e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007822:	6313      	str	r3, [r2, #48]	; 0x30
 8007824:	4b3a      	ldr	r3, [pc, #232]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800782c:	61fb      	str	r3, [r7, #28]
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	2300      	movs	r3, #0
 8007832:	61bb      	str	r3, [r7, #24]
 8007834:	4b36      	ldr	r3, [pc, #216]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 8007836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007838:	4a35      	ldr	r2, [pc, #212]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 800783a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800783e:	6313      	str	r3, [r2, #48]	; 0x30
 8007840:	4b33      	ldr	r3, [pc, #204]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007848:	61bb      	str	r3, [r7, #24]
 800784a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
 8007850:	4b2f      	ldr	r3, [pc, #188]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 8007852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007854:	4a2e      	ldr	r2, [pc, #184]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 8007856:	f043 0304 	orr.w	r3, r3, #4
 800785a:	6313      	str	r3, [r2, #48]	; 0x30
 800785c:	4b2c      	ldr	r3, [pc, #176]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 800785e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	617b      	str	r3, [r7, #20]
 8007866:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007868:	2300      	movs	r3, #0
 800786a:	613b      	str	r3, [r7, #16]
 800786c:	4b28      	ldr	r3, [pc, #160]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 800786e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007870:	4a27      	ldr	r2, [pc, #156]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	6313      	str	r3, [r2, #48]	; 0x30
 8007878:	4b25      	ldr	r3, [pc, #148]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 800787a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	4b21      	ldr	r3, [pc, #132]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 800788a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800788c:	4a20      	ldr	r2, [pc, #128]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 800788e:	f043 0302 	orr.w	r3, r3, #2
 8007892:	6313      	str	r3, [r2, #48]	; 0x30
 8007894:	4b1e      	ldr	r3, [pc, #120]	; (8007910 <HAL_ETH_MspInit+0x13c>)
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80078a0:	2332      	movs	r3, #50	; 0x32
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078a4:	2302      	movs	r3, #2
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078a8:	2300      	movs	r3, #0
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ac:	2303      	movs	r3, #3
 80078ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80078b0:	230b      	movs	r3, #11
 80078b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b8:	4619      	mov	r1, r3
 80078ba:	4816      	ldr	r0, [pc, #88]	; (8007914 <HAL_ETH_MspInit+0x140>)
 80078bc:	f7fe fa52 	bl	8005d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80078c0:	2386      	movs	r3, #134	; 0x86
 80078c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078c4:	2302      	movs	r3, #2
 80078c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078cc:	2303      	movs	r3, #3
 80078ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80078d0:	230b      	movs	r3, #11
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078d8:	4619      	mov	r1, r3
 80078da:	480f      	ldr	r0, [pc, #60]	; (8007918 <HAL_ETH_MspInit+0x144>)
 80078dc:	f7fe fa42 	bl	8005d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80078e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078e6:	2302      	movs	r3, #2
 80078e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078ee:	2303      	movs	r3, #3
 80078f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80078f2:	230b      	movs	r3, #11
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80078f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078fa:	4619      	mov	r1, r3
 80078fc:	4807      	ldr	r0, [pc, #28]	; (800791c <HAL_ETH_MspInit+0x148>)
 80078fe:	f7fe fa31 	bl	8005d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007902:	bf00      	nop
 8007904:	3738      	adds	r7, #56	; 0x38
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40028000 	.word	0x40028000
 8007910:	40023800 	.word	0x40023800
 8007914:	40020800 	.word	0x40020800
 8007918:	40020000 	.word	0x40020000
 800791c:	40020400 	.word	0x40020400

08007920 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800792c:	4b4d      	ldr	r3, [pc, #308]	; (8007a64 <low_level_init+0x144>)
 800792e:	4a4e      	ldr	r2, [pc, #312]	; (8007a68 <low_level_init+0x148>)
 8007930:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007932:	4b4c      	ldr	r3, [pc, #304]	; (8007a64 <low_level_init+0x144>)
 8007934:	2201      	movs	r2, #1
 8007936:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007938:	4b4a      	ldr	r3, [pc, #296]	; (8007a64 <low_level_init+0x144>)
 800793a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800793e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007940:	4b48      	ldr	r3, [pc, #288]	; (8007a64 <low_level_init+0x144>)
 8007942:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007946:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007948:	4b46      	ldr	r3, [pc, #280]	; (8007a64 <low_level_init+0x144>)
 800794a:	2201      	movs	r2, #1
 800794c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800794e:	2300      	movs	r3, #0
 8007950:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007952:	2380      	movs	r3, #128	; 0x80
 8007954:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007956:	23e1      	movs	r3, #225	; 0xe1
 8007958:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800795a:	2300      	movs	r3, #0
 800795c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800795e:	2300      	movs	r3, #0
 8007960:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007962:	2300      	movs	r3, #0
 8007964:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007966:	4a3f      	ldr	r2, [pc, #252]	; (8007a64 <low_level_init+0x144>)
 8007968:	f107 0308 	add.w	r3, r7, #8
 800796c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800796e:	4b3d      	ldr	r3, [pc, #244]	; (8007a64 <low_level_init+0x144>)
 8007970:	2200      	movs	r2, #0
 8007972:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007974:	4b3b      	ldr	r3, [pc, #236]	; (8007a64 <low_level_init+0x144>)
 8007976:	2200      	movs	r2, #0
 8007978:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800797a:	4b3a      	ldr	r3, [pc, #232]	; (8007a64 <low_level_init+0x144>)
 800797c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007980:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007982:	4838      	ldr	r0, [pc, #224]	; (8007a64 <low_level_init+0x144>)
 8007984:	f7fd f8c8 	bl	8004b18 <HAL_ETH_Init>
 8007988:	4603      	mov	r3, r0
 800798a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800798c:	7dfb      	ldrb	r3, [r7, #23]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d108      	bne.n	80079a4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007998:	f043 0304 	orr.w	r3, r3, #4
 800799c:	b2da      	uxtb	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80079a4:	2304      	movs	r3, #4
 80079a6:	4a31      	ldr	r2, [pc, #196]	; (8007a6c <low_level_init+0x14c>)
 80079a8:	4931      	ldr	r1, [pc, #196]	; (8007a70 <low_level_init+0x150>)
 80079aa:	482e      	ldr	r0, [pc, #184]	; (8007a64 <low_level_init+0x144>)
 80079ac:	f7fd fa50 	bl	8004e50 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80079b0:	2304      	movs	r3, #4
 80079b2:	4a30      	ldr	r2, [pc, #192]	; (8007a74 <low_level_init+0x154>)
 80079b4:	4930      	ldr	r1, [pc, #192]	; (8007a78 <low_level_init+0x158>)
 80079b6:	482b      	ldr	r0, [pc, #172]	; (8007a64 <low_level_init+0x144>)
 80079b8:	f7fd fab3 	bl	8004f22 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2206      	movs	r2, #6
 80079c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80079c4:	4b27      	ldr	r3, [pc, #156]	; (8007a64 <low_level_init+0x144>)
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	781a      	ldrb	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80079d0:	4b24      	ldr	r3, [pc, #144]	; (8007a64 <low_level_init+0x144>)
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	785a      	ldrb	r2, [r3, #1]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80079dc:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <low_level_init+0x144>)
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	789a      	ldrb	r2, [r3, #2]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80079e8:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <low_level_init+0x144>)
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	78da      	ldrb	r2, [r3, #3]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80079f4:	4b1b      	ldr	r3, [pc, #108]	; (8007a64 <low_level_init+0x144>)
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	791a      	ldrb	r2, [r3, #4]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007a00:	4b18      	ldr	r3, [pc, #96]	; (8007a64 <low_level_init+0x144>)
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	795a      	ldrb	r2, [r3, #5]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007a12:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a1a:	f043 030a 	orr.w	r3, r3, #10
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007a26:	480f      	ldr	r0, [pc, #60]	; (8007a64 <low_level_init+0x144>)
 8007a28:	f7fd fd24 	bl	8005474 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007a2c:	f107 0310 	add.w	r3, r7, #16
 8007a30:	461a      	mov	r2, r3
 8007a32:	211d      	movs	r1, #29
 8007a34:	480b      	ldr	r0, [pc, #44]	; (8007a64 <low_level_init+0x144>)
 8007a36:	f7fd fc4f 	bl	80052d8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f043 030b 	orr.w	r3, r3, #11
 8007a40:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	461a      	mov	r2, r3
 8007a46:	211d      	movs	r1, #29
 8007a48:	4806      	ldr	r0, [pc, #24]	; (8007a64 <low_level_init+0x144>)
 8007a4a:	f7fd fcad 	bl	80053a8 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007a4e:	f107 0310 	add.w	r3, r7, #16
 8007a52:	461a      	mov	r2, r3
 8007a54:	211d      	movs	r1, #29
 8007a56:	4803      	ldr	r0, [pc, #12]	; (8007a64 <low_level_init+0x144>)
 8007a58:	f7fd fc3e 	bl	80052d8 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007a5c:	bf00      	nop
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	20008710 	.word	0x20008710
 8007a68:	40028000 	.word	0x40028000
 8007a6c:	20008758 	.word	0x20008758
 8007a70:	20006e40 	.word	0x20006e40
 8007a74:	20006ec0 	.word	0x20006ec0
 8007a78:	20008690 	.word	0x20008690

08007a7c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b08a      	sub	sp, #40	; 0x28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8007a86:	4b4b      	ldr	r3, [pc, #300]	; (8007bb4 <low_level_output+0x138>)
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007a9e:	4b45      	ldr	r3, [pc, #276]	; (8007bb4 <low_level_output+0x138>)
 8007aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	623b      	str	r3, [r7, #32]
 8007aac:	e05a      	b.n	8007b64 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	da03      	bge.n	8007abe <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007ab6:	23f8      	movs	r3, #248	; 0xf8
 8007ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007abc:	e05c      	b.n	8007b78 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	895b      	ldrh	r3, [r3, #10]
 8007ac2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007ac8:	e02f      	b.n	8007b2a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	18d0      	adds	r0, r2, r3
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	18d1      	adds	r1, r2, r3
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007ade:	3304      	adds	r3, #4
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f00f f8c3 	bl	8016c6c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da03      	bge.n	8007afc <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007af4:	23f8      	movs	r3, #248	; 0xf8
 8007af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007afa:	e03d      	b.n	8007b78 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007b0c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007b18:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007b24:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d8c8      	bhi.n	8007aca <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007b38:	69fa      	ldr	r2, [r7, #28]
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	18d0      	adds	r0, r2, r3
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	4413      	add	r3, r2
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	f00f f88f 	bl	8016c6c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4413      	add	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	623b      	str	r3, [r7, #32]
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1a1      	bne.n	8007aae <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007b6a:	6979      	ldr	r1, [r7, #20]
 8007b6c:	4811      	ldr	r0, [pc, #68]	; (8007bb4 <low_level_output+0x138>)
 8007b6e:	f7fd fa45 	bl	8004ffc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007b78:	4b0e      	ldr	r3, [pc, #56]	; (8007bb4 <low_level_output+0x138>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b80:	3314      	adds	r3, #20
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00d      	beq.n	8007ba8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007b8c:	4b09      	ldr	r3, [pc, #36]	; (8007bb4 <low_level_output+0x138>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b94:	3314      	adds	r3, #20
 8007b96:	2220      	movs	r2, #32
 8007b98:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007b9a:	4b06      	ldr	r3, [pc, #24]	; (8007bb4 <low_level_output+0x138>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007ba8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3728      	adds	r7, #40	; 0x28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	20008710 	.word	0x20008710

08007bb8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08c      	sub	sp, #48	; 0x30
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007bdc:	484f      	ldr	r0, [pc, #316]	; (8007d1c <low_level_input+0x164>)
 8007bde:	f7fd faf7 	bl	80051d0 <HAL_ETH_GetReceivedFrame>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d001      	beq.n	8007bec <low_level_input+0x34>

    return NULL;
 8007be8:	2300      	movs	r3, #0
 8007bea:	e092      	b.n	8007d12 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007bec:	4b4b      	ldr	r3, [pc, #300]	; (8007d1c <low_level_input+0x164>)
 8007bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007bf2:	4b4a      	ldr	r3, [pc, #296]	; (8007d1c <low_level_input+0x164>)
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007bf8:	89fb      	ldrh	r3, [r7, #14]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d007      	beq.n	8007c0e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007bfe:	89fb      	ldrh	r3, [r7, #14]
 8007c00:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007c04:	4619      	mov	r1, r3
 8007c06:	2000      	movs	r0, #0
 8007c08:	f003 f9ee 	bl	800afe8 <pbuf_alloc>
 8007c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d04b      	beq.n	8007cac <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007c14:	4b41      	ldr	r3, [pc, #260]	; (8007d1c <low_level_input+0x164>)
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c22:	e040      	b.n	8007ca6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	895b      	ldrh	r3, [r3, #10]
 8007c28:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007c2e:	e021      	b.n	8007c74 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	18d0      	adds	r0, r2, r3
 8007c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	18d1      	adds	r1, r2, r3
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007c44:	3304      	adds	r3, #4
 8007c46:	461a      	mov	r2, r3
 8007c48:	f00f f810 	bl	8016c6c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007c62:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007c64:	69ba      	ldr	r2, [r7, #24]
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007c6e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007c74:	697a      	ldr	r2, [r7, #20]
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d8d6      	bhi.n	8007c30 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	18d0      	adds	r0, r2, r3
 8007c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	697a      	ldr	r2, [r7, #20]
 8007c92:	4619      	mov	r1, r3
 8007c94:	f00e ffea 	bl	8016c6c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1bb      	bne.n	8007c24 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007cac:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <low_level_input+0x164>)
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	613b      	str	r3, [r7, #16]
 8007cb6:	e00b      	b.n	8007cd0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	613b      	str	r3, [r7, #16]
 8007cd0:	4b12      	ldr	r3, [pc, #72]	; (8007d1c <low_level_input+0x164>)
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d3ee      	bcc.n	8007cb8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007cda:	4b10      	ldr	r3, [pc, #64]	; (8007d1c <low_level_input+0x164>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007ce0:	4b0e      	ldr	r3, [pc, #56]	; (8007d1c <low_level_input+0x164>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce8:	3314      	adds	r3, #20
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00d      	beq.n	8007d10 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007cf4:	4b09      	ldr	r3, [pc, #36]	; (8007d1c <low_level_input+0x164>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfc:	3314      	adds	r3, #20
 8007cfe:	2280      	movs	r2, #128	; 0x80
 8007d00:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007d02:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <low_level_input+0x164>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3730      	adds	r7, #48	; 0x30
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20008710 	.word	0x20008710

08007d20 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff ff45 	bl	8007bb8 <low_level_input>
 8007d2e:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d010      	beq.n	8007d58 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	4798      	blx	r3
 8007d40:	4603      	mov	r3, r0
 8007d42:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8007d44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d006      	beq.n	8007d5a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f003 fc2f 	bl	800b5b0 <pbuf_free>
    p = NULL;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	e000      	b.n	8007d5a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8007d58:	bf00      	nop
  }
}
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <ethernetif_init+0x1c>
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <ethernetif_init+0x48>)
 8007d70:	f44f 7202 	mov.w	r2, #520	; 0x208
 8007d74:	490d      	ldr	r1, [pc, #52]	; (8007dac <ethernetif_init+0x4c>)
 8007d76:	480e      	ldr	r0, [pc, #56]	; (8007db0 <ethernetif_init+0x50>)
 8007d78:	f00f fc12 	bl	80175a0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2273      	movs	r2, #115	; 0x73
 8007d80:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2274      	movs	r2, #116	; 0x74
 8007d88:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <ethernetif_init+0x54>)
 8007d90:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a08      	ldr	r2, [pc, #32]	; (8007db8 <ethernetif_init+0x58>)
 8007d96:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fdc1 	bl	8007920 <low_level_init>

  return ERR_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	0801c2b4 	.word	0x0801c2b4
 8007dac:	0801c2d0 	.word	0x0801c2d0
 8007db0:	0801c2e0 	.word	0x0801c2e0
 8007db4:	08014ea9 	.word	0x08014ea9
 8007db8:	08007a7d 	.word	0x08007a7d

08007dbc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007dc0:	f7fc fd98 	bl	80048f4 <HAL_GetTick>
 8007dc4:	4603      	mov	r3, r0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	bd80      	pop	{r7, pc}
	...

08007dcc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007de2:	089b      	lsrs	r3, r3, #2
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d05d      	beq.n	8007eaa <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007dee:	4b34      	ldr	r3, [pc, #208]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d03f      	beq.n	8007e76 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007df6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	4830      	ldr	r0, [pc, #192]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007dfe:	f7fd fad3 	bl	80053a8 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007e02:	f7fc fd77 	bl	80048f4 <HAL_GetTick>
 8007e06:	4603      	mov	r3, r0
 8007e08:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007e0a:	f107 0308 	add.w	r3, r7, #8
 8007e0e:	461a      	mov	r2, r3
 8007e10:	2101      	movs	r1, #1
 8007e12:	482b      	ldr	r0, [pc, #172]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007e14:	f7fd fa60 	bl	80052d8 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007e18:	f7fc fd6c 	bl	80048f4 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e26:	d828      	bhi.n	8007e7a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f003 0320 	and.w	r3, r3, #32
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d0eb      	beq.n	8007e0a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007e32:	f107 0308 	add.w	r3, r7, #8
 8007e36:	461a      	mov	r2, r3
 8007e38:	2110      	movs	r1, #16
 8007e3a:	4821      	ldr	r0, [pc, #132]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007e3c:	f7fd fa4c 	bl	80052d8 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f003 0304 	and.w	r3, r3, #4
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d004      	beq.n	8007e54 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007e4a:	4b1d      	ldr	r3, [pc, #116]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007e4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e50:	60da      	str	r2, [r3, #12]
 8007e52:	e002      	b.n	8007e5a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007e54:	4b1a      	ldr	r3, [pc, #104]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007e64:	4b16      	ldr	r3, [pc, #88]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	609a      	str	r2, [r3, #8]
 8007e6a:	e016      	b.n	8007e9a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007e6c:	4b14      	ldr	r3, [pc, #80]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007e6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e72:	609a      	str	r2, [r3, #8]
 8007e74:	e011      	b.n	8007e9a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007e76:	bf00      	nop
 8007e78:	e000      	b.n	8007e7c <ethernetif_update_config+0xb0>
          goto error;
 8007e7a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007e7c:	4b10      	ldr	r3, [pc, #64]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	08db      	lsrs	r3, r3, #3
 8007e82:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007e84:	4b0e      	ldr	r3, [pc, #56]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	085b      	lsrs	r3, r3, #1
 8007e8a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	2100      	movs	r1, #0
 8007e94:	480a      	ldr	r0, [pc, #40]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007e96:	f7fd fa87 	bl	80053a8 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4808      	ldr	r0, [pc, #32]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007e9e:	f7fd fb47 	bl	8005530 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007ea2:	4807      	ldr	r0, [pc, #28]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007ea4:	f7fd fae6 	bl	8005474 <HAL_ETH_Start>
 8007ea8:	e002      	b.n	8007eb0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007eaa:	4805      	ldr	r0, [pc, #20]	; (8007ec0 <ethernetif_update_config+0xf4>)
 8007eac:	f7fd fb11 	bl	80054d2 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f807 	bl	8007ec4 <ethernetif_notify_conn_changed>
}
 8007eb6:	bf00      	nop
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20008710 	.word	0x20008710

08007ec4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <fs_open+0x16>
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d102      	bne.n	8007ef4 <fs_open+0x1c>
    return ERR_ARG;
 8007eee:	f06f 030f 	mvn.w	r3, #15
 8007ef2:	e028      	b.n	8007f46 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8007ef4:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <fs_open+0x78>)
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	e020      	b.n	8007f3c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6838      	ldr	r0, [r7, #0]
 8007f02:	f7f8 f965 	bl	80001d0 <strcmp>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d114      	bne.n	8007f36 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	7c1a      	ldrb	r2, [r3, #16]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	e007      	b.n	8007f46 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1db      	bne.n	8007efa <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8007f42:	f06f 0305 	mvn.w	r3, #5
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	080328fc 	.word	0x080328fc

08007f54 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	1ad3      	subs	r3, r2, r3
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b082      	sub	sp, #8
 8007f8a:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8007f8c:	f44f 7051 	mov.w	r0, #836	; 0x344
 8007f90:	f002 fb3a 	bl	800a608 <mem_malloc>
 8007f94:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8007f9c:	f44f 7251 	mov.w	r2, #836	; 0x344
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f00e fe8a 	bl	8016cbc <memset>
  }
  return ret;
 8007fa8:	687b      	ldr	r3, [r7, #4]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b082      	sub	sp, #8
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f002 f9bb 	bl	800a33c <mem_free>
  }
}
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8007fd6:	22d8      	movs	r2, #216	; 0xd8
 8007fd8:	2100      	movs	r1, #0
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f00e fe6e 	bl	8016cbc <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2205      	movs	r2, #5
 8007fe4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8007ff6:	20d8      	movs	r0, #216	; 0xd8
 8007ff8:	f002 fb06 	bl	800a608 <mem_malloc>
 8007ffc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d002      	beq.n	800800a <http_state_alloc+0x1a>
    http_state_init(ret);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7ff ffe2 	bl	8007fce <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800800a:	687b      	ldr	r3, [r7, #4]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff ff93 	bl	8007f54 <fs_close>
    hs->handle = NULL;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d007      	beq.n	800804c <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff ffb6 	bl	8007fb2 <http_ssi_state_free>
    hs->ssi = NULL;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d007      	beq.n	8008064 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a1b      	ldr	r3, [r3, #32]
 8008058:	4618      	mov	r0, r3
 800805a:	f003 faa9 	bl	800b5b0 <pbuf_free>
    hs->req = NULL;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8008064:	bf00      	nop
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d005      	beq.n	8008086 <http_state_free+0x1a>
    http_state_eof(hs);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff ffca 	bl	8008014 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f002 f95b 	bl	800a33c <mem_free>
  }
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d106      	bne.n	80080b2 <http_write+0x22>
 80080a4:	4b2c      	ldr	r3, [pc, #176]	; (8008158 <http_write+0xc8>)
 80080a6:	f240 2219 	movw	r2, #537	; 0x219
 80080aa:	492c      	ldr	r1, [pc, #176]	; (800815c <http_write+0xcc>)
 80080ac:	482c      	ldr	r0, [pc, #176]	; (8008160 <http_write+0xd0>)
 80080ae:	f00f fa77 	bl	80175a0 <iprintf>
  len = *length;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80080b8:	8afb      	ldrh	r3, [r7, #22]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d101      	bne.n	80080c2 <http_write+0x32>
    return ERR_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	e045      	b.n	800814e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80080c8:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80080ca:	8aba      	ldrh	r2, [r7, #20]
 80080cc:	8afb      	ldrh	r3, [r7, #22]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d201      	bcs.n	80080d6 <http_write+0x46>
    len = max_len;
 80080d2:	8abb      	ldrh	r3, [r7, #20]
 80080d4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80080da:	005b      	lsls	r3, r3, #1
 80080dc:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80080de:	8afa      	ldrh	r2, [r7, #22]
 80080e0:	8abb      	ldrh	r3, [r7, #20]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d901      	bls.n	80080ea <http_write+0x5a>
    len = max_len;
 80080e6:	8abb      	ldrh	r3, [r7, #20]
 80080e8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	8afa      	ldrh	r2, [r7, #22]
 80080ee:	68b9      	ldr	r1, [r7, #8]
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f008 f8b9 	bl	8010268 <tcp_write>
 80080f6:	4603      	mov	r3, r0
 80080f8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80080fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008102:	d10f      	bne.n	8008124 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800810a:	2b00      	cmp	r3, #0
 800810c:	d004      	beq.n	8008118 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8008114:	2b08      	cmp	r3, #8
 8008116:	d902      	bls.n	800811e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8008118:	2301      	movs	r3, #1
 800811a:	82fb      	strh	r3, [r7, #22]
 800811c:	e002      	b.n	8008124 <http_write+0x94>
      } else {
        len /= 2;
 800811e:	8afb      	ldrh	r3, [r7, #22]
 8008120:	085b      	lsrs	r3, r3, #1
 8008122:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8008124:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800812c:	d102      	bne.n	8008134 <http_write+0xa4>
 800812e:	8afb      	ldrh	r3, [r7, #22]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d8da      	bhi.n	80080ea <http_write+0x5a>

  if (err == ERR_OK) {
 8008134:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d103      	bne.n	8008144 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8afa      	ldrh	r2, [r7, #22]
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e002      	b.n	800814a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800814a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	0801c7d8 	.word	0x0801c7d8
 800815c:	0801c810 	.word	0x0801c810
 8008160:	0801c820 	.word	0x0801c820

08008164 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	4613      	mov	r3, r2
 8008170:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00d      	beq.n	8008194 <http_close_or_abort_conn+0x30>
    if ((hs->post_content_len_left != 0)
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d008      	beq.n	8008194 <http_close_or_abort_conn+0x30>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8008182:	4b20      	ldr	r3, [pc, #128]	; (8008204 <http_close_or_abort_conn+0xa0>)
 8008184:	2200      	movs	r2, #0
 8008186:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8008188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800818c:	491d      	ldr	r1, [pc, #116]	; (8008204 <http_close_or_abort_conn+0xa0>)
 800818e:	68b8      	ldr	r0, [r7, #8]
 8008190:	f7fb fd04 	bl	8003b9c <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8008194:	2100      	movs	r1, #0
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f005 f866 	bl	800d268 <tcp_arg>
  altcp_recv(pcb, NULL);
 800819c:	2100      	movs	r1, #0
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f005 f874 	bl	800d28c <tcp_recv>
  altcp_err(pcb, NULL);
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f005 f8b4 	bl	800d314 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80081ac:	2200      	movs	r2, #0
 80081ae:	2100      	movs	r1, #0
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f005 f8e9 	bl	800d388 <tcp_poll>
  altcp_sent(pcb, NULL);
 80081b6:	2100      	movs	r1, #0
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f005 f889 	bl	800d2d0 <tcp_sent>
  if (hs != NULL) {
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <http_close_or_abort_conn+0x66>
    http_state_free(hs);
 80081c4:	68b8      	ldr	r0, [r7, #8]
 80081c6:	f7ff ff51 	bl	800806c <http_state_free>
  }

  if (abort_conn) {
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <http_close_or_abort_conn+0x76>
    altcp_abort(pcb);
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f003 ff89 	bl	800c0e8 <tcp_abort>
    return ERR_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e00f      	b.n	80081fa <http_close_or_abort_conn+0x96>
  }
  err = altcp_close(pcb);
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f003 fe96 	bl	800bf0c <tcp_close>
 80081e0:	4603      	mov	r3, r0
 80081e2:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80081e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d004      	beq.n	80081f6 <http_close_or_abort_conn+0x92>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80081ec:	2204      	movs	r2, #4
 80081ee:	4906      	ldr	r1, [pc, #24]	; (8008208 <http_close_or_abort_conn+0xa4>)
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f005 f8c9 	bl	800d388 <tcp_poll>
  }
  return err;
 80081f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20000ddc 	.word	0x20000ddc
 8008208:	08009a93 	.word	0x08009a93

0800820c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8008216:	2200      	movs	r2, #0
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff ffa2 	bl	8008164 <http_close_or_abort_conn>
 8008220:	4603      	mov	r3, r0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b082      	sub	sp, #8
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8008234:	6839      	ldr	r1, [r7, #0]
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff ffe8 	bl	800820c <http_close_conn>
  }
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d003      	beq.n	800825c <extract_uri_parameters+0x18>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <extract_uri_parameters+0x1c>
    return (0);
 800825c:	2300      	movs	r3, #0
 800825e:	e04b      	b.n	80082f8 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008264:	2300      	movs	r3, #0
 8008266:	613b      	str	r3, [r7, #16]
 8008268:	e03f      	b.n	80082ea <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	320c      	adds	r2, #12
 8008270:	6979      	ldr	r1, [r7, #20]
 8008272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800827a:	2126      	movs	r1, #38	; 0x26
 800827c:	6978      	ldr	r0, [r7, #20]
 800827e:	f00f fac0 	bl	8017802 <strchr>
 8008282:	6178      	str	r0, [r7, #20]
    if (pair) {
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d006      	beq.n	8008298 <extract_uri_parameters+0x54>
      *pair = '\0';
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
      pair++;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	3301      	adds	r3, #1
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	e00c      	b.n	80082b2 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8008298:	2120      	movs	r1, #32
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f00f fab1 	bl	8017802 <strchr>
 80082a0:	6178      	str	r0, [r7, #20]
      if (pair) {
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <extract_uri_parameters+0x6a>
        *pair = '\0';
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 80082b2:	213d      	movs	r1, #61	; 0x3d
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f00f faa4 	bl	8017802 <strchr>
 80082ba:	60f8      	str	r0, [r7, #12]
    if (equals) {
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00a      	beq.n	80082d8 <extract_uri_parameters+0x94>
      *equals = '\0';
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	1c59      	adds	r1, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	321c      	adds	r2, #28
 80082d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80082d6:	e005      	b.n	80082e4 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	321c      	adds	r2, #28
 80082de:	2100      	movs	r1, #0
 80082e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	3301      	adds	r3, #1
 80082e8:	613b      	str	r3, [r7, #16]
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	2b0f      	cmp	r3, #15
 80082ee:	dc02      	bgt.n	80082f6 <extract_uri_parameters+0xb2>
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1b9      	bne.n	800826a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80082f6:	693b      	ldr	r3, [r7, #16]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8008300:	b590      	push	{r4, r7, lr}
 8008302:	b089      	sub	sp, #36	; 0x24
 8008304:	af02      	add	r7, sp, #8
 8008306:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d106      	bne.n	800831c <get_tag_insert+0x1c>
 800830e:	4b5b      	ldr	r3, [pc, #364]	; (800847c <get_tag_insert+0x17c>)
 8008310:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008314:	495a      	ldr	r1, [pc, #360]	; (8008480 <get_tag_insert+0x180>)
 8008316:	485b      	ldr	r0, [pc, #364]	; (8008484 <get_tag_insert+0x184>)
 8008318:	f00f f942 	bl	80175a0 <iprintf>
  ssi = hs->ssi;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d106      	bne.n	8008336 <get_tag_insert+0x36>
 8008328:	4b54      	ldr	r3, [pc, #336]	; (800847c <get_tag_insert+0x17c>)
 800832a:	f240 3206 	movw	r2, #774	; 0x306
 800832e:	4956      	ldr	r1, [pc, #344]	; (8008488 <get_tag_insert+0x188>)
 8008330:	4854      	ldr	r0, [pc, #336]	; (8008484 <get_tag_insert+0x184>)
 8008332:	f00f f935 	bl	80175a0 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	8a9b      	ldrh	r3, [r3, #20]
 800833a:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008342:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8008344:	4b51      	ldr	r3, [pc, #324]	; (800848c <get_tag_insert+0x18c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d034      	beq.n	80083b6 <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800834c:	4b50      	ldr	r3, [pc, #320]	; (8008490 <get_tag_insert+0x190>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d030      	beq.n	80083b6 <get_tag_insert+0xb6>
 8008354:	4b4f      	ldr	r3, [pc, #316]	; (8008494 <get_tag_insert+0x194>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d02c      	beq.n	80083b6 <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	e024      	b.n	80083ac <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f103 0018 	add.w	r0, r3, #24
 8008368:	4b49      	ldr	r3, [pc, #292]	; (8008490 <get_tag_insert+0x190>)
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4619      	mov	r1, r3
 8008376:	f7f7 ff2b 	bl	80001d0 <strcmp>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d112      	bne.n	80083a6 <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8008380:	4b42      	ldr	r3, [pc, #264]	; (800848c <get_tag_insert+0x18c>)
 8008382:	681c      	ldr	r4, [r3, #0]
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	3314      	adds	r3, #20
 800838e:	89fa      	ldrh	r2, [r7, #14]
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	4613      	mov	r3, r2
 8008394:	f44f 7248 	mov.w	r2, #800	; 0x320
 8008398:	6978      	ldr	r0, [r7, #20]
 800839a:	47a0      	blx	r4
 800839c:	4603      	mov	r3, r0
 800839e:	461a      	mov	r2, r3
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 80083a4:	e066      	b.n	8008474 <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	3301      	adds	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
 80083ac:	4b39      	ldr	r3, [pc, #228]	; (8008494 <get_tag_insert+0x194>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	dbd5      	blt.n	8008362 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	3318      	adds	r3, #24
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7f7 ff12 	bl	80001e4 <strlen>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f240 3206 	movw	r2, #774	; 0x306
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d81b      	bhi.n	8008402 <get_tag_insert+0x102>
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	3318      	adds	r3, #24
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7f7 ff08 	bl	80001e4 <strlen>
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b09      	cmp	r3, #9
 80083d8:	d813      	bhi.n	8008402 <get_tag_insert+0x102>
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	3318      	adds	r3, #24
 80083de:	4618      	mov	r0, r3
 80083e0:	f7f7 ff00 	bl	80001e4 <strlen>
 80083e4:	4603      	mov	r3, r0
 80083e6:	f240 3206 	movw	r2, #774	; 0x306
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d806      	bhi.n	80083fc <get_tag_insert+0xfc>
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	3318      	adds	r3, #24
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7f7 fef6 	bl	80001e4 <strlen>
 80083f8:	4603      	mov	r3, r0
 80083fa:	e003      	b.n	8008404 <get_tag_insert+0x104>
 80083fc:	f240 3307 	movw	r3, #775	; 0x307
 8008400:	e000      	b.n	8008404 <get_tag_insert+0x104>
 8008402:	2309      	movs	r3, #9
 8008404:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	3321      	adds	r3, #33	; 0x21
 800840a:	2212      	movs	r2, #18
 800840c:	4922      	ldr	r1, [pc, #136]	; (8008498 <get_tag_insert+0x198>)
 800840e:	4618      	mov	r0, r3
 8008410:	f00e fc2c 	bl	8016c6c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f103 0033 	add.w	r0, r3, #51	; 0x33
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	3318      	adds	r3, #24
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	4619      	mov	r1, r3
 8008422:	f00e fc23 	bl	8016c6c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	3312      	adds	r3, #18
 800842a:	3320      	adds	r3, #32
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	4413      	add	r3, r2
 8008430:	3301      	adds	r3, #1
 8008432:	2207      	movs	r2, #7
 8008434:	4919      	ldr	r1, [pc, #100]	; (800849c <get_tag_insert+0x19c>)
 8008436:	4618      	mov	r0, r3
 8008438:	f00e fc18 	bl	8016c6c <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	3319      	adds	r3, #25
 8008440:	693a      	ldr	r2, [r7, #16]
 8008442:	4413      	add	r3, r2
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	3321      	adds	r3, #33	; 0x21
 800844e:	4618      	mov	r0, r3
 8008450:	f7f7 fec8 	bl	80001e4 <strlen>
 8008454:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800845c:	d306      	bcc.n	800846c <get_tag_insert+0x16c>
 800845e:	4b07      	ldr	r3, [pc, #28]	; (800847c <get_tag_insert+0x17c>)
 8008460:	f240 323f 	movw	r2, #831	; 0x33f
 8008464:	490e      	ldr	r1, [pc, #56]	; (80084a0 <get_tag_insert+0x1a0>)
 8008466:	4807      	ldr	r0, [pc, #28]	; (8008484 <get_tag_insert+0x184>)
 8008468:	f00f f89a 	bl	80175a0 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	b29a      	uxth	r2, r3
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	825a      	strh	r2, [r3, #18]
}
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	bd90      	pop	{r4, r7, pc}
 800847a:	bf00      	nop
 800847c:	0801c7d8 	.word	0x0801c7d8
 8008480:	0801c848 	.word	0x0801c848
 8008484:	0801c820 	.word	0x0801c820
 8008488:	0801c854 	.word	0x0801c854
 800848c:	200011c8 	.word	0x200011c8
 8008490:	200011d0 	.word	0x200011d0
 8008494:	200011cc 	.word	0x200011cc
 8008498:	0801c860 	.word	0x0801c860
 800849c:	0801c874 	.word	0x0801c874
 80084a0:	0801c87c 	.word	0x0801c87c

080084a4 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 80084ae:	4a55      	ldr	r2, [pc, #340]	; (8008604 <get_http_headers+0x160>)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d110      	bne.n	80084ee <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80084cc:	4a4e      	ldr	r2, [pc, #312]	; (8008608 <get_http_headers+0x164>)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 80084d4:	4a4d      	ldr	r2, [pc, #308]	; (800860c <get_http_headers+0x168>)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 80084ec:	e087      	b.n	80085fe <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 80084ee:	4948      	ldr	r1, [pc, #288]	; (8008610 <get_http_headers+0x16c>)
 80084f0:	6838      	ldr	r0, [r7, #0]
 80084f2:	f00f f9c0 	bl	8017876 <strstr>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d004      	beq.n	8008506 <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80084fc:	4a42      	ldr	r2, [pc, #264]	; (8008608 <get_http_headers+0x164>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008504:	e01b      	b.n	800853e <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 8008506:	4943      	ldr	r1, [pc, #268]	; (8008614 <get_http_headers+0x170>)
 8008508:	6838      	ldr	r0, [r7, #0]
 800850a:	f00f f9b4 	bl	8017876 <strstr>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 8008514:	4a40      	ldr	r2, [pc, #256]	; (8008618 <get_http_headers+0x174>)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800851c:	e00f      	b.n	800853e <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800851e:	493f      	ldr	r1, [pc, #252]	; (800861c <get_http_headers+0x178>)
 8008520:	6838      	ldr	r0, [r7, #0]
 8008522:	f00f f9a8 	bl	8017876 <strstr>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d004      	beq.n	8008536 <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800852c:	4a3c      	ldr	r2, [pc, #240]	; (8008620 <get_http_headers+0x17c>)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008534:	e003      	b.n	800853e <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 8008536:	4a3b      	ldr	r2, [pc, #236]	; (8008624 <get_http_headers+0x180>)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800853e:	213f      	movs	r1, #63	; 0x3f
 8008540:	6838      	ldr	r0, [r7, #0]
 8008542:	f00f f95e 	bl	8017802 <strchr>
 8008546:	60b8      	str	r0, [r7, #8]
  if (vars) {
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <get_http_headers+0xb0>
    *vars = '\0';
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2200      	movs	r2, #0
 8008552:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 8008558:	212e      	movs	r1, #46	; 0x2e
 800855a:	6838      	ldr	r0, [r7, #0]
 800855c:	f00f f951 	bl	8017802 <strchr>
 8008560:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8008562:	e007      	b.n	8008574 <get_http_headers+0xd0>
    ext = tmp + 1;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800856a:	212e      	movs	r1, #46	; 0x2e
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	f00f f948 	bl	8017802 <strchr>
 8008572:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d1f4      	bne.n	8008564 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d014      	beq.n	80085aa <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]
 8008584:	e00d      	b.n	80085a2 <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 8008586:	4a28      	ldr	r2, [pc, #160]	; (8008628 <get_http_headers+0x184>)
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800858e:	68f9      	ldr	r1, [r7, #12]
 8008590:	4618      	mov	r0, r3
 8008592:	f001 fcd7 	bl	8009f44 <lwip_stricmp>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d009      	beq.n	80085b0 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	3301      	adds	r3, #1
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b13      	cmp	r3, #19
 80085a6:	d9ee      	bls.n	8008586 <get_http_headers+0xe2>
 80085a8:	e003      	b.n	80085b2 <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 80085aa:	2314      	movs	r3, #20
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	e000      	b.n	80085b2 <get_http_headers+0x10e>
        break;
 80085b0:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <get_http_headers+0x11a>
    *vars = '?';
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	223f      	movs	r2, #63	; 0x3f
 80085bc:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b13      	cmp	r3, #19
 80085c2:	d808      	bhi.n	80085d6 <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 80085c4:	4a18      	ldr	r2, [pc, #96]	; (8008628 <get_http_headers+0x184>)
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	00db      	lsls	r3, r3, #3
 80085ca:	4413      	add	r3, r2
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80085d4:	e00b      	b.n	80085ee <get_http_headers+0x14a>
  } else if (!ext) {
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d104      	bne.n	80085e6 <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a13      	ldr	r2, [pc, #76]	; (800862c <get_http_headers+0x188>)
 80085e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80085e4:	e003      	b.n	80085ee <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a11      	ldr	r2, [pc, #68]	; (8008630 <get_http_headers+0x18c>)
 80085ea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	0801c458 	.word	0x0801c458
 8008608:	0801c31c 	.word	0x0801c31c
 800860c:	0801c498 	.word	0x0801c498
 8008610:	0801c88c 	.word	0x0801c88c
 8008614:	0801c890 	.word	0x0801c890
 8008618:	0801c33c 	.word	0x0801c33c
 800861c:	0801c894 	.word	0x0801c894
 8008620:	0801c358 	.word	0x0801c358
 8008624:	0801c308 	.word	0x0801c308
 8008628:	08032910 	.word	0x08032910
 800862c:	0801c62c 	.word	0x0801c62c
 8008630:	0801c898 	.word	0x0801c898

08008634 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008646:	2b00      	cmp	r3, #0
 8008648:	d006      	beq.n	8008658 <get_http_content_length+0x24>
 800864a:	4b27      	ldr	r3, [pc, #156]	; (80086e8 <get_http_content_length+0xb4>)
 800864c:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8008650:	4926      	ldr	r1, [pc, #152]	; (80086ec <get_http_content_length+0xb8>)
 8008652:	4827      	ldr	r0, [pc, #156]	; (80086f0 <get_http_content_length+0xbc>)
 8008654:	f00e ffa4 	bl	80175a0 <iprintf>

  add_content_len = 0;
 8008658:	2300      	movs	r3, #0
 800865a:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10c      	bne.n	800867e <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d008      	beq.n	800867e <get_http_content_length+0x4a>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	7c1b      	ldrb	r3, [r3, #16]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <get_http_content_length+0x4a>
      add_content_len = 1;
 800867a:	2301      	movs	r3, #1
 800867c:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d025      	beq.n	80086d0 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	461a      	mov	r2, r3
 8008692:	210c      	movs	r1, #12
 8008694:	f001 fc8a 	bl	8009fac <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	33c4      	adds	r3, #196	; 0xc4
 800869c:	4618      	mov	r0, r3
 800869e:	f7f7 fda1 	bl	80001e4 <strlen>
 80086a2:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b09      	cmp	r3, #9
 80086a8:	d810      	bhi.n	80086cc <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	33c0      	adds	r3, #192	; 0xc0
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	4413      	add	r3, r2
 80086b2:	3304      	adds	r3, #4
 80086b4:	2203      	movs	r2, #3
 80086b6:	490f      	ldr	r1, [pc, #60]	; (80086f4 <get_http_content_length+0xc0>)
 80086b8:	4618      	mov	r0, r3
 80086ba:	f00e fad7 	bl	8016c6c <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80086ca:	e001      	b.n	80086d0 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 80086d6:	4a08      	ldr	r2, [pc, #32]	; (80086f8 <get_http_content_length+0xc4>)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	0801c7d8 	.word	0x0801c7d8
 80086ec:	0801c8b8 	.word	0x0801c8b8
 80086f0:	0801c820 	.word	0x0801c820
 80086f4:	0801c8cc 	.word	0x0801c8cc
 80086f8:	0801c3e8 	.word	0x0801c3e8

080086fc <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8008706:	2300      	movs	r3, #0
 8008708:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 8008714:	6838      	ldr	r0, [r7, #0]
 8008716:	f7ff ff8d 	bl	8008634 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008720:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 8008722:	8bfb      	ldrh	r3, [r7, #30]
 8008724:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8008726:	e08b      	b.n	8008840 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800872e:	461a      	mov	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	322c      	adds	r2, #44	; 0x2c
 8008734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008738:	4618      	mov	r0, r3
 800873a:	f7f7 fd53 	bl	80001e4 <strlen>
 800873e:	4603      	mov	r3, r0
 8008740:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8008742:	8b7b      	ldrh	r3, [r7, #26]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800874a:	1a9a      	subs	r2, r3, r2
 800874c:	8bfb      	ldrh	r3, [r7, #30]
 800874e:	4293      	cmp	r3, r2
 8008750:	bfa8      	it	ge
 8008752:	4613      	movge	r3, r2
 8008754:	b29b      	uxth	r3, r3
 8008756:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800875e:	461a      	mov	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	322c      	adds	r2, #44	; 0x2c
 8008764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800876e:	4413      	add	r3, r2
 8008770:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 8008772:	89fb      	ldrh	r3, [r7, #14]
 8008774:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 8008776:	2300      	movs	r3, #0
 8008778:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008780:	2b03      	cmp	r3, #3
 8008782:	d103      	bne.n	800878c <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 8008784:	7f3b      	ldrb	r3, [r7, #28]
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008792:	2b03      	cmp	r3, #3
 8008794:	d803      	bhi.n	800879e <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 8008796:	7f3b      	ldrb	r3, [r7, #28]
 8008798:	f043 0302 	orr.w	r3, r3, #2
 800879c:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800879e:	7f3b      	ldrb	r3, [r7, #28]
 80087a0:	f107 020e 	add.w	r2, r7, #14
 80087a4:	6979      	ldr	r1, [r7, #20]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fc72 	bl	8008090 <http_write>
 80087ac:	4603      	mov	r3, r0
 80087ae:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 80087b0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d106      	bne.n	80087c6 <http_send_headers+0xca>
 80087b8:	89fb      	ldrh	r3, [r7, #14]
 80087ba:	8a7a      	ldrh	r2, [r7, #18]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d002      	beq.n	80087c6 <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 80087c0:	2301      	movs	r3, #1
 80087c2:	777b      	strb	r3, [r7, #29]
 80087c4:	e005      	b.n	80087d2 <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 80087c6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80087d8:	89fb      	ldrh	r3, [r7, #14]
 80087da:	4413      	add	r3, r2
 80087dc:	b29a      	uxth	r2, r3
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 80087e4:	89fb      	ldrh	r3, [r7, #14]
 80087e6:	8bfa      	ldrh	r2, [r7, #30]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80087f2:	8b7a      	ldrh	r2, [r7, #26]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d123      	bne.n	8008840 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80087fe:	3301      	adds	r3, #1
 8008800:	b29a      	uxth	r2, r3
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8008808:	e007      	b.n	800881a <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008810:	3301      	adds	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008820:	2b04      	cmp	r3, #4
 8008822:	d809      	bhi.n	8008838 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800882a:	461a      	mov	r2, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	322c      	adds	r2, #44	; 0x2c
 8008830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8008834:	2b00      	cmp	r3, #0
 8008836:	d0e8      	beq.n	800880a <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2200      	movs	r2, #0
 800883c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8008840:	8bfb      	ldrh	r3, [r7, #30]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d008      	beq.n	8008858 <http_send_headers+0x15c>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800884c:	2b04      	cmp	r3, #4
 800884e:	d803      	bhi.n	8008858 <http_send_headers+0x15c>
 8008850:	89fb      	ldrh	r3, [r7, #14]
 8008852:	2b00      	cmp	r3, #0
 8008854:	f47f af68 	bne.w	8008728 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800885e:	2b04      	cmp	r3, #4
 8008860:	d90f      	bls.n	8008882 <http_send_headers+0x186>
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10b      	bne.n	8008882 <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800886a:	6839      	ldr	r1, [r7, #0]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f819 	bl	80088a4 <http_check_eof>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d002      	beq.n	800887e <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 8008878:	2302      	movs	r3, #2
 800887a:	777b      	strb	r3, [r7, #29]
 800887c:	e001      	b.n	8008882 <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800887e:	2303      	movs	r3, #3
 8008880:	e00b      	b.n	800889a <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008888:	2b04      	cmp	r3, #4
 800888a:	d903      	bls.n	8008894 <http_send_headers+0x198>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d101      	bne.n	8008898 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 8008894:	2302      	movs	r3, #2
 8008896:	e000      	b.n	800889a <http_send_headers+0x19e>
  }
  return data_to_send;
 8008898:	7f7b      	ldrb	r3, [r7, #29]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3720      	adds	r7, #32
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	695b      	ldr	r3, [r3, #20]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d105      	bne.n	80088c2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f7ff fcb6 	bl	800822a <http_eof>
    return 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	e016      	b.n	80088f0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff fb4e 	bl	8007f68 <fs_bytes_left>
 80088cc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dc05      	bgt.n	80088e0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80088d4:	6839      	ldr	r1, [r7, #0]
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff fca7 	bl	800822a <http_eof>
    return 0;
 80088dc:	2300      	movs	r3, #0
 80088de:	e007      	b.n	80088f0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80088e0:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <http_check_eof+0x54>)
 80088e2:	f240 429d 	movw	r2, #1181	; 0x49d
 80088e6:	4905      	ldr	r1, [pc, #20]	; (80088fc <http_check_eof+0x58>)
 80088e8:	4805      	ldr	r0, [pc, #20]	; (8008900 <http_check_eof+0x5c>)
 80088ea:	f00e fe59 	bl	80175a0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80088ee:	2301      	movs	r3, #1
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	0801c7d8 	.word	0x0801c7d8
 80088fc:	0801c8d0 	.word	0x0801c8d0
 8008900:	0801c820 	.word	0x0801c820

08008904 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008916:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800891a:	4293      	cmp	r3, r2
 800891c:	d803      	bhi.n	8008926 <http_send_data_nonssi+0x22>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	b29b      	uxth	r3, r3
 8008924:	e001      	b.n	800892a <http_send_data_nonssi+0x26>
 8008926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800892a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	6999      	ldr	r1, [r3, #24]
 8008930:	f107 020c 	add.w	r2, r7, #12
 8008934:	2300      	movs	r3, #0
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7ff fbaa 	bl	8008090 <http_write>
 800893c:	4603      	mov	r3, r0
 800893e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8008940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10d      	bne.n	8008964 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8008948:	2301      	movs	r3, #1
 800894a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	89ba      	ldrh	r2, [r7, #12]
 8008952:	441a      	add	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	89ba      	ldrh	r2, [r7, #12]
 800895e:	1a9a      	subs	r2, r3, r2
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008986:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d106      	bne.n	800899c <http_send_data_ssi+0x2c>
 800898e:	4b89      	ldr	r3, [pc, #548]	; (8008bb4 <http_send_data_ssi+0x244>)
 8008990:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8008994:	4988      	ldr	r1, [pc, #544]	; (8008bb8 <http_send_data_ssi+0x248>)
 8008996:	4889      	ldr	r0, [pc, #548]	; (8008bbc <http_send_data_ssi+0x24c>)
 8008998:	f00e fe02 	bl	80175a0 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80089a2:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	f240 82c5 	bls.w	8008f3c <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089c0:	4293      	cmp	r3, r2
 80089c2:	dc06      	bgt.n	80089d2 <http_send_data_ssi+0x62>
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	e001      	b.n	80089d6 <http_send_data_ssi+0x66>
 80089d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80089d6:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	6999      	ldr	r1, [r3, #24]
 80089dc:	f107 020e 	add.w	r2, r7, #14
 80089e0:	2300      	movs	r3, #0
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7ff fb54 	bl	8008090 <http_write>
 80089e8:	4603      	mov	r3, r0
 80089ea:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80089ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10d      	bne.n	8008a10 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 80089f4:	2301      	movs	r3, #1
 80089f6:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	89fa      	ldrh	r2, [r7, #14]
 80089fe:	441a      	add	r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a08:	89fa      	ldrh	r2, [r7, #14]
 8008a0a:	1a9a      	subs	r2, r3, r2
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f040 8290 	bne.w	8008f3c <http_send_data_ssi+0x5cc>
      return data_to_send;
 8008a1c:	7dbb      	ldrb	r3, [r7, #22]
 8008a1e:	e2d6      	b.n	8008fce <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8008a20:	89fb      	ldrh	r3, [r7, #14]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d101      	bne.n	8008a2a <http_send_data_ssi+0xba>
      return data_to_send;
 8008a26:	7dbb      	ldrb	r3, [r7, #22]
 8008a28:	e2d1      	b.n	8008fce <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 8008a30:	2b04      	cmp	r3, #4
 8008a32:	f200 8282 	bhi.w	8008f3a <http_send_data_ssi+0x5ca>
 8008a36:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <http_send_data_ssi+0xcc>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a51 	.word	0x08008a51
 8008a40:	08008aab 	.word	0x08008aab
 8008a44:	08008b1d 	.word	0x08008b1d
 8008a48:	08008c65 	.word	0x08008c65
 8008a4c:	08008ddb 	.word	0x08008ddb
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8008a50:	2300      	movs	r3, #0
 8008a52:	757b      	strb	r3, [r7, #21]
 8008a54:	e01b      	b.n	8008a8e <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	781a      	ldrb	r2, [r3, #0]
 8008a5c:	7d7b      	ldrb	r3, [r7, #21]
 8008a5e:	4958      	ldr	r1, [pc, #352]	; (8008bc0 <http_send_data_ssi+0x250>)
 8008a60:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d10e      	bne.n	8008a88 <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	7d7a      	ldrb	r2, [r7, #21]
 8008a6e:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            ssi->tag_index = 1;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8008a86:	e005      	b.n	8008a94 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8008a88:	7d7b      	ldrb	r3, [r7, #21]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	757b      	strb	r3, [r7, #21]
 8008a8e:	7d7b      	ldrb	r3, [r7, #21]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d9e0      	bls.n	8008a56 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	1e5a      	subs	r2, r3, #1
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	601a      	str	r2, [r3, #0]
        break;
 8008aa8:	e248      	b.n	8008f3c <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	7d9b      	ldrb	r3, [r3, #22]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	4b43      	ldr	r3, [pc, #268]	; (8008bc0 <http_send_data_ssi+0x250>)
 8008ab2:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	8a12      	ldrh	r2, [r2, #16]
 8008aba:	4413      	add	r3, r2
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d107      	bne.n	8008ad2 <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 8008ad0:	e234      	b.n	8008f3c <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	7d9b      	ldrb	r3, [r3, #22]
 8008adc:	4619      	mov	r1, r3
 8008ade:	4b38      	ldr	r3, [pc, #224]	; (8008bc0 <http_send_data_ssi+0x250>)
 8008ae0:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8008ae4:	6939      	ldr	r1, [r7, #16]
 8008ae6:	8a09      	ldrh	r1, [r1, #16]
 8008ae8:	440b      	add	r3, r1
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d106      	bne.n	8008afe <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	8a1b      	ldrh	r3, [r3, #16]
 8008af4:	3301      	adds	r3, #1
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	821a      	strh	r2, [r3, #16]
 8008afc:	e003      	b.n	8008b06 <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	1e5a      	subs	r2, r3, #1
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	1c5a      	adds	r2, r3, #1
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	601a      	str	r2, [r3, #0]
        }
        break;
 8008b1a:	e20f      	b.n	8008f3c <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	8a1b      	ldrh	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d11e      	bne.n	8008b62 <http_send_data_ssi+0x1f2>
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b20      	cmp	r3, #32
 8008b2c:	d00e      	beq.n	8008b4c <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008b34:	2b09      	cmp	r3, #9
 8008b36:	d009      	beq.n	8008b4c <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	2b0a      	cmp	r3, #10
 8008b40:	d004      	beq.n	8008b4c <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008b48:	2b0d      	cmp	r3, #13
 8008b4a:	d10a      	bne.n	8008b62 <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	1e5a      	subs	r2, r3, #1
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	601a      	str	r2, [r3, #0]
          break;
 8008b60:	e1ec      	b.n	8008f3c <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	781a      	ldrb	r2, [r3, #0]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	7d9b      	ldrb	r3, [r3, #22]
 8008b6c:	4914      	ldr	r1, [pc, #80]	; (8008bc0 <http_send_data_ssi+0x250>)
 8008b6e:	00db      	lsls	r3, r3, #3
 8008b70:	440b      	add	r3, r1
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d013      	beq.n	8008ba2 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8008b80:	2b20      	cmp	r3, #32
 8008b82:	d00e      	beq.n	8008ba2 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	2b09      	cmp	r3, #9
 8008b8c:	d009      	beq.n	8008ba2 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8008b94:	2b0a      	cmp	r3, #10
 8008b96:	d004      	beq.n	8008ba2 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b0d      	cmp	r3, #13
 8008ba0:	d13f      	bne.n	8008c22 <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	8a1b      	ldrh	r3, [r3, #16]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10c      	bne.n	8008bc4 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          if (ssi->tag_index == 0) {
 8008bb2:	e04c      	b.n	8008c4e <http_send_data_ssi+0x2de>
 8008bb4:	0801c7d8 	.word	0x0801c7d8
 8008bb8:	0801c854 	.word	0x0801c854
 8008bbc:	0801c820 	.word	0x0801c820
 8008bc0:	080329ec 	.word	0x080329ec
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	8a1b      	ldrh	r3, [r3, #16]
 8008bd0:	2bff      	cmp	r3, #255	; 0xff
 8008bd2:	d906      	bls.n	8008be2 <http_send_data_ssi+0x272>
 8008bd4:	4b92      	ldr	r3, [pc, #584]	; (8008e20 <http_send_data_ssi+0x4b0>)
 8008bd6:	f240 523a 	movw	r2, #1338	; 0x53a
 8008bda:	4992      	ldr	r1, [pc, #584]	; (8008e24 <http_send_data_ssi+0x4b4>)
 8008bdc:	4892      	ldr	r0, [pc, #584]	; (8008e28 <http_send_data_ssi+0x4b8>)
 8008bde:	f00e fcdf 	bl	80175a0 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	8a1b      	ldrh	r3, [r3, #16]
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	8a1b      	ldrh	r3, [r3, #16]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	7d9b      	ldrb	r3, [r3, #22]
 8008c04:	4989      	ldr	r1, [pc, #548]	; (8008e2c <http_send_data_ssi+0x4bc>)
 8008c06:	00db      	lsls	r3, r3, #3
 8008c08:	440b      	add	r3, r1
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d103      	bne.n	8008c1a <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2201      	movs	r2, #1
 8008c16:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8008c18:	e019      	b.n	8008c4e <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8008c20:	e015      	b.n	8008c4e <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	8a1b      	ldrh	r3, [r3, #16]
 8008c26:	2b07      	cmp	r3, #7
 8008c28:	d80d      	bhi.n	8008c46 <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	8a1b      	ldrh	r3, [r3, #16]
 8008c32:	1c59      	adds	r1, r3, #1
 8008c34:	b288      	uxth	r0, r1
 8008c36:	6939      	ldr	r1, [r7, #16]
 8008c38:	8208      	strh	r0, [r1, #16]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	7812      	ldrb	r2, [r2, #0]
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	440b      	add	r3, r1
 8008c42:	761a      	strb	r2, [r3, #24]
 8008c44:	e003      	b.n	8008c4e <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	1e5a      	subs	r2, r3, #1
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	1c5a      	adds	r2, r3, #1
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	601a      	str	r2, [r3, #0]

        break;
 8008c62:	e16b      	b.n	8008f3c <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	8a1b      	ldrh	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d11e      	bne.n	8008caa <http_send_data_ssi+0x33a>
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	d00e      	beq.n	8008c94 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008c7c:	2b09      	cmp	r3, #9
 8008c7e:	d009      	beq.n	8008c94 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	2b0a      	cmp	r3, #10
 8008c88:	d004      	beq.n	8008c94 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008c90:	2b0d      	cmp	r3, #13
 8008c92:	d10a      	bne.n	8008caa <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	1e5a      	subs	r2, r3, #1
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	601a      	str	r2, [r3, #0]
          break;
 8008ca8:	e148      	b.n	8008f3c <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	781a      	ldrb	r2, [r3, #0]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	7d9b      	ldrb	r3, [r3, #22]
 8008cb4:	495d      	ldr	r1, [pc, #372]	; (8008e2c <http_send_data_ssi+0x4bc>)
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	440b      	add	r3, r1
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	6939      	ldr	r1, [r7, #16]
 8008cbe:	8a09      	ldrh	r1, [r1, #16]
 8008cc0:	440b      	add	r3, r1
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d179      	bne.n	8008dbc <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	1e5a      	subs	r2, r3, #1
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	8a1b      	ldrh	r3, [r3, #16]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	7d9b      	ldrb	r3, [r3, #22]
 8008cec:	4a4f      	ldr	r2, [pc, #316]	; (8008e2c <http_send_data_ssi+0x4bc>)
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	4413      	add	r3, r2
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	8a12      	ldrh	r2, [r2, #16]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f040 811d 	bne.w	8008f3c <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	2200      	movs	r2, #0
 8008d06:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8008d08:	6838      	ldr	r0, [r7, #0]
 8008d0a:	f7ff faf9 	bl	8008300 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2200      	movs	r2, #0
 8008d12:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2204      	movs	r2, #4
 8008d18:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            ssi->tag_end = ssi->parsed;
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	689a      	ldr	r2, [r3, #8]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	f240 8101 	bls.w	8008f3c <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	dc06      	bgt.n	8008d5a <http_send_data_ssi+0x3ea>
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	e001      	b.n	8008d5e <http_send_data_ssi+0x3ee>
 8008d5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d5e:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	6999      	ldr	r1, [r3, #24]
 8008d64:	f107 020e 	add.w	r2, r7, #14
 8008d68:	2300      	movs	r3, #0
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f7ff f990 	bl	8008090 <http_write>
 8008d70:	4603      	mov	r3, r0
 8008d72:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8008d74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f040 80df 	bne.w	8008f3c <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d809      	bhi.n	8008da2 <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	689a      	ldr	r2, [r3, #8]
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	89fb      	ldrh	r3, [r7, #14]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	89fa      	ldrh	r2, [r7, #14]
 8008da8:	441a      	add	r2, r3
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	89fa      	ldrh	r2, [r7, #14]
 8008db4:	1a9a      	subs	r2, r3, r2
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	625a      	str	r2, [r3, #36]	; 0x24
 8008dba:	e0bf      	b.n	8008f3c <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	1e5a      	subs	r2, r3, #1
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
        }
        break;
 8008dd8:	e0b0      	b.n	8008f3c <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d95c      	bls.n	8008ea0 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d206      	bcs.n	8008e00 <http_send_data_ssi+0x490>
 8008df2:	4b0b      	ldr	r3, [pc, #44]	; (8008e20 <http_send_data_ssi+0x4b0>)
 8008df4:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8008df8:	490d      	ldr	r1, [pc, #52]	; (8008e30 <http_send_data_ssi+0x4c0>)
 8008dfa:	480b      	ldr	r0, [pc, #44]	; (8008e28 <http_send_data_ssi+0x4b8>)
 8008dfc:	f00e fbd0 	bl	80175a0 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	dc10      	bgt.n	8008e34 <http_send_data_ssi+0x4c4>
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	e00b      	b.n	8008e38 <http_send_data_ssi+0x4c8>
 8008e20:	0801c7d8 	.word	0x0801c7d8
 8008e24:	0801c908 	.word	0x0801c908
 8008e28:	0801c820 	.word	0x0801c820
 8008e2c:	080329ec 	.word	0x080329ec
 8008e30:	0801c920 	.word	0x0801c920
 8008e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e38:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8008e3a:	89fb      	ldrh	r3, [r7, #14]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00a      	beq.n	8008e56 <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	6999      	ldr	r1, [r3, #24]
 8008e44:	f107 020e 	add.w	r2, r7, #14
 8008e48:	2300      	movs	r3, #0
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f7ff f920 	bl	8008090 <http_write>
 8008e50:	4603      	mov	r3, r0
 8008e52:	75fb      	strb	r3, [r7, #23]
 8008e54:	e001      	b.n	8008e5a <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8008e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d16c      	bne.n	8008f3c <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 8008e62:	2301      	movs	r3, #1
 8008e64:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d809      	bhi.n	8008e86 <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	89fb      	ldrh	r3, [r7, #14]
 8008e80:	4413      	add	r3, r2
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	89fa      	ldrh	r2, [r7, #14]
 8008e8c:	441a      	add	r2, r3
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e96:	89fa      	ldrh	r2, [r7, #14]
 8008e98:	1a9a      	subs	r2, r3, r2
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	625a      	str	r2, [r3, #36]	; 0x24
 8008e9e:	e04d      	b.n	8008f3c <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	8a1a      	ldrh	r2, [r3, #16]
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	8a5b      	ldrh	r3, [r3, #18]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d30b      	bcc.n	8008ec4 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	8a9b      	ldrh	r3, [r3, #20]
 8008eb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d005      	beq.n	8008ec4 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 8008ebe:	6838      	ldr	r0, [r7, #0]
 8008ec0:	f7ff fa1e 	bl	8008300 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	8a1a      	ldrh	r2, [r3, #16]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	8a5b      	ldrh	r3, [r3, #18]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d222      	bcs.n	8008f16 <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	8a5a      	ldrh	r2, [r3, #18]
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	8a1b      	ldrh	r3, [r3, #16]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	8a1b      	ldrh	r3, [r3, #16]
 8008ee2:	3320      	adds	r3, #32
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	1c59      	adds	r1, r3, #1
 8008eea:	f107 020e 	add.w	r2, r7, #14
 8008eee:	2301      	movs	r3, #1
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff f8cd 	bl	8008090 <http_write>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8008efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d11c      	bne.n	8008f3c <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 8008f02:	2301      	movs	r3, #1
 8008f04:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	8a1a      	ldrh	r2, [r3, #16]
 8008f0a:	89fb      	ldrh	r3, [r7, #14]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	821a      	strh	r2, [r3, #16]
 8008f14:	e012      	b.n	8008f3c <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	8a9b      	ldrh	r3, [r3, #20]
 8008f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d10c      	bne.n	8008f3c <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2200      	movs	r2, #0
 8008f26:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8008f38:	e000      	b.n	8008f3c <http_send_data_ssi+0x5cc>
        default:
          break;
 8008f3a:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 8008f42:	2b04      	cmp	r3, #4
 8008f44:	d003      	beq.n	8008f4e <http_send_data_ssi+0x5de>
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d004      	beq.n	8008f58 <http_send_data_ssi+0x5e8>
 8008f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f43f ad64 	beq.w	8008a20 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d034      	beq.n	8008fcc <http_send_data_ssi+0x65c>
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d92e      	bls.n	8008fcc <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	dc06      	bgt.n	8008f8e <http_send_data_ssi+0x61e>
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	e001      	b.n	8008f92 <http_send_data_ssi+0x622>
 8008f8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008f92:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	6999      	ldr	r1, [r3, #24]
 8008f98:	f107 020e 	add.w	r2, r7, #14
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff f876 	bl	8008090 <http_write>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8008fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10d      	bne.n	8008fcc <http_send_data_ssi+0x65c>
      data_to_send = 1;
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	89fa      	ldrh	r2, [r7, #14]
 8008fba:	441a      	add	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc4:	89fa      	ldrh	r2, [r7, #14]
 8008fc6:	1a9a      	subs	r2, r3, r2
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8008fcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop

08008fd8 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <http_send+0x18>
    return 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	e048      	b.n	8009082 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	d812      	bhi.n	8009020 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fb7d 	bl	80086fc <http_send_headers>
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	2b03      	cmp	r3, #3
 800900a:	d007      	beq.n	800901c <http_send+0x44>
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d006      	beq.n	8009020 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 8009018:	2b04      	cmp	r3, #4
 800901a:	d801      	bhi.n	8009020 <http_send+0x48>
      return data_to_send;
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	e030      	b.n	8009082 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	2b00      	cmp	r3, #0
 8009026:	d108      	bne.n	800903a <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7ff fc3a 	bl	80088a4 <http_check_eof>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <http_send+0x62>
      return 0;
 8009036:	2300      	movs	r3, #0
 8009038:	e023      	b.n	8009082 <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d006      	beq.n	8009050 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 8009042:	6839      	ldr	r1, [r7, #0]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff fc93 	bl	8008970 <http_send_data_ssi>
 800904a:	4603      	mov	r3, r0
 800904c:	73fb      	strb	r3, [r7, #15]
 800904e:	e005      	b.n	800905c <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7ff fc56 	bl	8008904 <http_send_data_nonssi>
 8009058:	4603      	mov	r3, r0
 800905a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10d      	bne.n	8009080 <http_send+0xa8>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	4618      	mov	r0, r3
 800906a:	f7fe ff7d 	bl	8007f68 <fs_bytes_left>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	dc05      	bgt.n	8009080 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7ff f8d7 	bl	800822a <http_eof>
    return 0;
 800907c:	2300      	movs	r3, #0
 800907e:	e000      	b.n	8009082 <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8009080:	7bfb      	ldrb	r3, [r7, #15]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
	...

0800908c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	4a1c      	ldr	r2, [pc, #112]	; (800910c <http_get_404_file+0x80>)
 800909a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4619      	mov	r1, r3
 80090a4:	4610      	mov	r0, r2
 80090a6:	f7fe ff17 	bl	8007ed8 <fs_open>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80090ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d024      	beq.n	8009100 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	4a15      	ldr	r2, [pc, #84]	; (8009110 <http_get_404_file+0x84>)
 80090ba:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4619      	mov	r1, r3
 80090c4:	4610      	mov	r0, r2
 80090c6:	f7fe ff07 	bl	8007ed8 <fs_open>
 80090ca:	4603      	mov	r3, r0
 80090cc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80090ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d014      	beq.n	8009100 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	4a0e      	ldr	r2, [pc, #56]	; (8009114 <http_get_404_file+0x88>)
 80090da:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7fe fef7 	bl	8007ed8 <fs_open>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 80090ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d004      	beq.n	8009100 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2200      	movs	r2, #0
 80090fa:	601a      	str	r2, [r3, #0]
        return NULL;
 80090fc:	2300      	movs	r3, #0
 80090fe:	e000      	b.n	8009102 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8009100:	687b      	ldr	r3, [r7, #4]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	0801c938 	.word	0x0801c938
 8009110:	0801c944 	.word	0x0801c944
 8009114:	0801c950 	.word	0x0801c950

08009118 <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 8009120:	4b09      	ldr	r3, [pc, #36]	; (8009148 <http_handle_post_finished+0x30>)
 8009122:	2200      	movs	r2, #0
 8009124:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8009126:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800912a:	4907      	ldr	r1, [pc, #28]	; (8009148 <http_handle_post_finished+0x30>)
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7fa fd35 	bl	8003b9c <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8009132:	2200      	movs	r2, #0
 8009134:	4904      	ldr	r1, [pc, #16]	; (8009148 <http_handle_post_finished+0x30>)
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 faae 	bl	8009698 <http_find_file>
 800913c:	4603      	mov	r3, r0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20000ddc 	.word	0x20000ddc

0800914c <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d014      	beq.n	8009186 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	8912      	ldrh	r2, [r2, #8]
 8009166:	4293      	cmp	r3, r2
 8009168:	d204      	bcs.n	8009174 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009172:	e008      	b.n	8009186 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	8912      	ldrh	r2, [r2, #8]
 800917e:	1a9a      	subs	r2, r3, r2
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d006      	beq.n	800919a <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7fa fcd4 	bl	8003b3c <httpd_post_receive_data>
 8009194:	4603      	mov	r3, r0
 8009196:	73fb      	strb	r3, [r7, #15]
 8009198:	e001      	b.n	800919e <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800919a:	2300      	movs	r3, #0
 800919c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800919e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d104      	bne.n	80091c2 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f7ff ffad 	bl	8009118 <http_handle_post_finished>
 80091be:	4603      	mov	r3, r0
 80091c0:	e000      	b.n	80091c4 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 80091c2:	2300      	movs	r3, #0
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}

080091cc <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b092      	sub	sp, #72	; 0x48
 80091d0:	af04      	add	r7, sp, #16
 80091d2:	60f8      	str	r0, [r7, #12]
 80091d4:	60b9      	str	r1, [r7, #8]
 80091d6:	607a      	str	r2, [r7, #4]
 80091d8:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 80091da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091dc:	1c58      	adds	r0, r3, #1
 80091de:	887a      	ldrh	r2, [r7, #2]
 80091e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091e2:	1c59      	adds	r1, r3, #1
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	1acb      	subs	r3, r1, r3
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	461a      	mov	r2, r3
 80091ec:	4966      	ldr	r1, [pc, #408]	; (8009388 <http_post_request+0x1bc>)
 80091ee:	f000 fe73 	bl	8009ed8 <lwip_strnstr>
 80091f2:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 80091f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 80bf 	beq.w	800937a <http_post_request+0x1ae>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 80091fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091fe:	1c58      	adds	r0, r3, #1
 8009200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009202:	3301      	adds	r3, #1
 8009204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	461a      	mov	r2, r3
 800920a:	4960      	ldr	r1, [pc, #384]	; (800938c <http_post_request+0x1c0>)
 800920c:	f000 fe64 	bl	8009ed8 <lwip_strnstr>
 8009210:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 80ad 	beq.w	8009374 <http_post_request+0x1a8>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	3310      	adds	r3, #16
 800921e:	220a      	movs	r2, #10
 8009220:	495b      	ldr	r1, [pc, #364]	; (8009390 <http_post_request+0x1c4>)
 8009222:	4618      	mov	r0, r3
 8009224:	f000 fe58 	bl	8009ed8 <lwip_strnstr>
 8009228:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	2b00      	cmp	r3, #0
 800922e:	f000 80a1 	beq.w	8009374 <http_post_request+0x1a8>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	3310      	adds	r3, #16
 8009236:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 8009238:	69f8      	ldr	r0, [r7, #28]
 800923a:	f00d fce0 	bl	8016bfe <atoi>
 800923e:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8009240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009242:	2b00      	cmp	r3, #0
 8009244:	d10b      	bne.n	800925e <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b30      	cmp	r3, #48	; 0x30
 800924c:	d104      	bne.n	8009258 <http_post_request+0x8c>
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	3301      	adds	r3, #1
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b0d      	cmp	r3, #13
 8009256:	d002      	beq.n	800925e <http_post_request+0x92>
            content_len = -1;
 8009258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800925c:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800925e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009260:	2b00      	cmp	r3, #0
 8009262:	f2c0 8084 	blt.w	800936e <http_post_request+0x1a2>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 8009266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009268:	3301      	adds	r3, #1
 800926a:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800926c:	887a      	ldrh	r2, [r7, #2]
 800926e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009270:	1d19      	adds	r1, r3, #4
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	1acb      	subs	r3, r1, r3
 8009276:	429a      	cmp	r2, r3
 8009278:	db05      	blt.n	8009286 <http_post_request+0xba>
 800927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927c:	1d1a      	adds	r2, r3, #4
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	b29b      	uxth	r3, r3
 8009284:	e000      	b.n	8009288 <http_post_request+0xbc>
 8009286:	887b      	ldrh	r3, [r7, #2]
 8009288:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800928a:	887a      	ldrh	r2, [r7, #2]
 800928c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928e:	1d19      	adds	r1, r3, #4
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	1acb      	subs	r3, r1, r3
 8009294:	429a      	cmp	r2, r3
 8009296:	db05      	blt.n	80092a4 <http_post_request+0xd8>
 8009298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929a:	1d1a      	adds	r2, r3, #4
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	e000      	b.n	80092a6 <http_post_request+0xda>
 80092a4:	887b      	ldrh	r3, [r7, #2]
 80092a6:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 80092a8:	2301      	movs	r3, #1
 80092aa:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 80092ac:	4b39      	ldr	r3, [pc, #228]	; (8009394 <http_post_request+0x1c8>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	2200      	movs	r2, #0
 80092b6:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80092b8:	8aba      	ldrh	r2, [r7, #20]
 80092ba:	f107 0312 	add.w	r3, r7, #18
 80092be:	9303      	str	r3, [sp, #12]
 80092c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092c4:	9302      	str	r3, [sp, #8]
 80092c6:	4b33      	ldr	r3, [pc, #204]	; (8009394 <http_post_request+0x1c8>)
 80092c8:	9301      	str	r3, [sp, #4]
 80092ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	4613      	mov	r3, r2
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092d4:	68b8      	ldr	r0, [r7, #8]
 80092d6:	f7fa fc07 	bl	8003ae8 <httpd_post_begin>
 80092da:	4603      	mov	r3, r0
 80092dc:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 80092de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d13c      	bne.n	8009360 <http_post_request+0x194>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 80092ea:	8afb      	ldrh	r3, [r7, #22]
 80092ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 80092ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 80092f6:	e007      	b.n	8009308 <http_post_request+0x13c>
              start_offset -= q->len;
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	895b      	ldrh	r3, [r3, #10]
 80092fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 8009302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8009308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930a:	2b00      	cmp	r3, #0
 800930c:	d004      	beq.n	8009318 <http_post_request+0x14c>
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	895b      	ldrh	r3, [r3, #10]
 8009312:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009314:	429a      	cmp	r2, r3
 8009316:	d2ef      	bcs.n	80092f8 <http_post_request+0x12c>
            }
            if (q != NULL) {
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00d      	beq.n	800933a <http_post_request+0x16e>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800931e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009320:	4619      	mov	r1, r3
 8009322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009324:	f002 f8be 	bl	800b4a4 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 8009328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800932a:	f002 f9e1 	bl	800b6f0 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800932e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009330:	68b8      	ldr	r0, [r7, #8]
 8009332:	f7ff ff0b 	bl	800914c <http_post_rxpbuf>
 8009336:	4603      	mov	r3, r0
 8009338:	e021      	b.n	800937e <http_post_request+0x1b2>
            } else if (hs->post_content_len_left == 0) {
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10b      	bne.n	800935c <http_post_request+0x190>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8009344:	2241      	movs	r2, #65	; 0x41
 8009346:	2100      	movs	r1, #0
 8009348:	2000      	movs	r0, #0
 800934a:	f001 fe4d 	bl	800afe8 <pbuf_alloc>
 800934e:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 8009350:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009352:	68b8      	ldr	r0, [r7, #8]
 8009354:	f7ff fefa 	bl	800914c <http_post_rxpbuf>
 8009358:	4603      	mov	r3, r0
 800935a:	e010      	b.n	800937e <http_post_request+0x1b2>
            } else {
              return ERR_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	e00e      	b.n	800937e <http_post_request+0x1b2>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8009360:	2200      	movs	r2, #0
 8009362:	490c      	ldr	r1, [pc, #48]	; (8009394 <http_post_request+0x1c8>)
 8009364:	68b8      	ldr	r0, [r7, #8]
 8009366:	f000 f997 	bl	8009698 <http_find_file>
 800936a:	4603      	mov	r3, r0
 800936c:	e007      	b.n	800937e <http_post_request+0x1b2>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800936e:	f06f 030f 	mvn.w	r3, #15
 8009372:	e004      	b.n	800937e <http_post_request+0x1b2>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 8009374:	f06f 030f 	mvn.w	r3, #15
 8009378:	e001      	b.n	800937e <http_post_request+0x1b2>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800937a:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800937e:	4618      	mov	r0, r3
 8009380:	3738      	adds	r7, #56	; 0x38
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	0801c95c 	.word	0x0801c95c
 800938c:	0801c3e8 	.word	0x0801c3e8
 8009390:	0801c8cc 	.word	0x0801c8cc
 8009394:	20000ddc 	.word	0x20000ddc

08009398 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b092      	sub	sp, #72	; 0x48
 800939c:	af02      	add	r7, sp, #8
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	60b9      	str	r1, [r7, #8]
 80093a2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d106      	bne.n	80093bc <http_parse_request+0x24>
 80093ae:	4b87      	ldr	r3, [pc, #540]	; (80095cc <http_parse_request+0x234>)
 80093b0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 80093b4:	4986      	ldr	r1, [pc, #536]	; (80095d0 <http_parse_request+0x238>)
 80093b6:	4887      	ldr	r0, [pc, #540]	; (80095d4 <http_parse_request+0x23c>)
 80093b8:	f00e f8f2 	bl	80175a0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <http_parse_request+0x38>
 80093c2:	4b82      	ldr	r3, [pc, #520]	; (80095cc <http_parse_request+0x234>)
 80093c4:	f240 72af 	movw	r2, #1967	; 0x7af
 80093c8:	4983      	ldr	r1, [pc, #524]	; (80095d8 <http_parse_request+0x240>)
 80093ca:	4882      	ldr	r0, [pc, #520]	; (80095d4 <http_parse_request+0x23c>)
 80093cc:	f00e f8e8 	bl	80175a0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d103      	bne.n	80093e0 <http_parse_request+0x48>
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80093e0:	f06f 0307 	mvn.w	r3, #7
 80093e4:	e0ee      	b.n	80095c4 <http_parse_request+0x22c>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d103      	bne.n	80093f6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f2:	621a      	str	r2, [r3, #32]
 80093f4:	e005      	b.n	8009402 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093fc:	4618      	mov	r0, r3
 80093fe:	f002 f999 	bl	800b734 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8009402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009404:	f002 f974 	bl	800b6f0 <pbuf_ref>

  if (hs->req->next != NULL) {
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	6a1b      	ldr	r3, [r3, #32]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d012      	beq.n	8009438 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	6a1b      	ldr	r3, [r3, #32]
 8009416:	891b      	ldrh	r3, [r3, #8]
 8009418:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800941c:	4293      	cmp	r3, r2
 800941e:	bf28      	it	cs
 8009420:	4613      	movcs	r3, r2
 8009422:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	6a18      	ldr	r0, [r3, #32]
 8009428:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800942a:	2300      	movs	r3, #0
 800942c:	496b      	ldr	r1, [pc, #428]	; (80095dc <http_parse_request+0x244>)
 800942e:	f002 fab9 	bl	800b9a4 <pbuf_copy_partial>
    data = httpd_req_buf;
 8009432:	4b6a      	ldr	r3, [pc, #424]	; (80095dc <http_parse_request+0x244>)
 8009434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009436:	e005      	b.n	8009444 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8009438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009440:	895b      	ldrh	r3, [r3, #10]
 8009442:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8009444:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009446:	2b06      	cmp	r3, #6
 8009448:	f240 80a1 	bls.w	800958e <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800944c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800944e:	461a      	mov	r2, r3
 8009450:	4963      	ldr	r1, [pc, #396]	; (80095e0 <http_parse_request+0x248>)
 8009452:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009454:	f000 fd40 	bl	8009ed8 <lwip_strnstr>
 8009458:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 8096 	beq.w	800958e <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 8009462:	2300      	movs	r3, #0
 8009464:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800946a:	2204      	movs	r2, #4
 800946c:	495d      	ldr	r1, [pc, #372]	; (80095e4 <http_parse_request+0x24c>)
 800946e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009470:	f00e f9dc 	bl	801782c <strncmp>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d103      	bne.n	8009482 <http_parse_request+0xea>
        sp1 = data + 3;
 800947a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947c:	3303      	adds	r3, #3
 800947e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009480:	e014      	b.n	80094ac <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 8009482:	2205      	movs	r2, #5
 8009484:	4958      	ldr	r1, [pc, #352]	; (80095e8 <http_parse_request+0x250>)
 8009486:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009488:	f00e f9d0 	bl	801782c <strncmp>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d105      	bne.n	800949e <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 8009492:	2301      	movs	r3, #1
 8009494:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 8009496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009498:	3304      	adds	r3, #4
 800949a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800949c:	e006      	b.n	80094ac <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800949e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a0:	3304      	adds	r3, #4
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 80094a6:	f06f 030f 	mvn.w	r3, #15
 80094aa:	e08b      	b.n	80095c4 <http_parse_request+0x22c>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80094ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ae:	1c5a      	adds	r2, r3, #1
 80094b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80094bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094be:	3301      	adds	r3, #1
 80094c0:	8bfa      	ldrh	r2, [r7, #30]
 80094c2:	494a      	ldr	r1, [pc, #296]	; (80095ec <http_parse_request+0x254>)
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 fd07 	bl	8009ed8 <lwip_strnstr>
 80094ca:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10c      	bne.n	80094ec <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80094d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d4:	3301      	adds	r3, #1
 80094d6:	8bfa      	ldrh	r2, [r7, #30]
 80094d8:	4941      	ldr	r1, [pc, #260]	; (80095e0 <http_parse_request+0x248>)
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 fcfc 	bl	8009ed8 <lwip_strnstr>
 80094e0:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80094e2:	2301      	movs	r3, #1
 80094e4:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 80094e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d164      	bne.n	80095b6 <http_parse_request+0x21e>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	3301      	adds	r3, #1
 80094f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80094f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d048      	beq.n	800958e <http_parse_request+0x1f6>
 80094fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009500:	429a      	cmp	r2, r3
 8009502:	d944      	bls.n	800958e <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8009504:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009506:	461a      	mov	r2, r3
 8009508:	4939      	ldr	r1, [pc, #228]	; (80095f0 <http_parse_request+0x258>)
 800950a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800950c:	f000 fce4 	bl	8009ed8 <lwip_strnstr>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d03b      	beq.n	800958e <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	3301      	adds	r3, #1
 800951a:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	2200      	movs	r2, #0
 8009520:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8009522:	8bbb      	ldrh	r3, [r7, #28]
 8009524:	69ba      	ldr	r2, [r7, #24]
 8009526:	4413      	add	r3, r2
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800952c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800952e:	2b00      	cmp	r3, #0
 8009530:	d026      	beq.n	8009580 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 8009538:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	4613      	mov	r3, r2
 8009544:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	6978      	ldr	r0, [r7, #20]
 800954a:	f7ff fe3f 	bl	80091cc <http_post_request>
 800954e:	4603      	mov	r3, r0
 8009550:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8009552:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00a      	beq.n	8009570 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800955a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800955c:	2220      	movs	r2, #32
 800955e:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8009560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009562:	2220      	movs	r2, #32
 8009564:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 8009566:	8bbb      	ldrh	r3, [r7, #28]
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	4413      	add	r3, r2
 800956c:	2220      	movs	r2, #32
 800956e:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8009570:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009574:	f113 0f10 	cmn.w	r3, #16
 8009578:	d01f      	beq.n	80095ba <http_parse_request+0x222>
              goto badrequest;
            }
            return err;
 800957a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800957e:	e021      	b.n	80095c4 <http_parse_request+0x22c>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8009580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009582:	69b9      	ldr	r1, [r7, #24]
 8009584:	68b8      	ldr	r0, [r7, #8]
 8009586:	f000 f887 	bl	8009698 <http_find_file>
 800958a:	4603      	mov	r3, r0
 800958c:	e01a      	b.n	80095c4 <http_parse_request+0x22c>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	6a1b      	ldr	r3, [r3, #32]
 8009592:	4618      	mov	r0, r3
 8009594:	f002 f894 	bl	800b6c0 <pbuf_clen>
 8009598:	4603      	mov	r3, r0
 800959a:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	6a1b      	ldr	r3, [r3, #32]
 80095a0:	891b      	ldrh	r3, [r3, #8]
 80095a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d809      	bhi.n	80095be <http_parse_request+0x226>
 80095aa:	8a3b      	ldrh	r3, [r7, #16]
 80095ac:	2b05      	cmp	r3, #5
 80095ae:	d806      	bhi.n	80095be <http_parse_request+0x226>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80095b0:	f06f 0304 	mvn.w	r3, #4
 80095b4:	e006      	b.n	80095c4 <http_parse_request+0x22c>
          goto badrequest;
 80095b6:	bf00      	nop
 80095b8:	e002      	b.n	80095c0 <http_parse_request+0x228>
              goto badrequest;
 80095ba:	bf00      	nop
 80095bc:	e000      	b.n	80095c0 <http_parse_request+0x228>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 80095be:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80095c0:	f06f 030f 	mvn.w	r3, #15
  }
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3740      	adds	r7, #64	; 0x40
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	0801c7d8 	.word	0x0801c7d8
 80095d0:	0801c964 	.word	0x0801c964
 80095d4:	0801c820 	.word	0x0801c820
 80095d8:	0801c848 	.word	0x0801c848
 80095dc:	200007fc 	.word	0x200007fc
 80095e0:	0801c8cc 	.word	0x0801c8cc
 80095e4:	0801c970 	.word	0x0801c970
 80095e8:	0801c978 	.word	0x0801c978
 80095ec:	0801c980 	.word	0x0801c980
 80095f0:	0801c95c 	.word	0x0801c95c

080095f4 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b088      	sub	sp, #32
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d040      	beq.n	800968a <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800960c:	213f      	movs	r1, #63	; 0x3f
 800960e:	6838      	ldr	r0, [r7, #0]
 8009610:	f00e f8f7 	bl	8017802 <strchr>
 8009614:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	613b      	str	r3, [r7, #16]
    ext = uri;
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800962a:	212e      	movs	r1, #46	; 0x2e
 800962c:	6938      	ldr	r0, [r7, #16]
 800962e:	f00e f8e8 	bl	8017802 <strchr>
 8009632:	6138      	str	r0, [r7, #16]
 8009634:	e009      	b.n	800964a <http_uri_is_ssi+0x56>
      ext = sub;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	617b      	str	r3, [r7, #20]
      sub++;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	3301      	adds	r3, #1
 800963e:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8009640:	212e      	movs	r1, #46	; 0x2e
 8009642:	6938      	ldr	r0, [r7, #16]
 8009644:	f00e f8dd 	bl	8017802 <strchr>
 8009648:	6138      	str	r0, [r7, #16]
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1f2      	bne.n	8009636 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8009650:	2300      	movs	r3, #0
 8009652:	61fb      	str	r3, [r7, #28]
 8009654:	e010      	b.n	8009678 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8009656:	4a0f      	ldr	r2, [pc, #60]	; (8009694 <http_uri_is_ssi+0xa0>)
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800965e:	4619      	mov	r1, r3
 8009660:	6978      	ldr	r0, [r7, #20]
 8009662:	f000 fc6f 	bl	8009f44 <lwip_stricmp>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800966c:	2301      	movs	r3, #1
 800966e:	76fb      	strb	r3, [r7, #27]
        break;
 8009670:	e005      	b.n	800967e <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	3301      	adds	r3, #1
 8009676:	61fb      	str	r3, [r7, #28]
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	2b04      	cmp	r3, #4
 800967c:	d9eb      	bls.n	8009656 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <http_uri_is_ssi+0x96>
      *param = '?';
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	223f      	movs	r2, #63	; 0x3f
 8009688:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800968a:	7efb      	ldrb	r3, [r7, #27]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3720      	adds	r7, #32
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	080329b0 	.word	0x080329b0

08009698 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8009698:	b590      	push	{r4, r7, lr}
 800969a:	b093      	sub	sp, #76	; 0x4c
 800969c:	af02      	add	r7, sp, #8
 800969e:	60f8      	str	r0, [r7, #12]
 80096a0:	60b9      	str	r1, [r7, #8]
 80096a2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 80096a8:	2300      	movs	r3, #0
 80096aa:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7f6 fd95 	bl	80001e4 <strlen>
 80096ba:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d074      	beq.n	80097ac <http_find_file+0x114>
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	3b01      	subs	r3, #1
 80096c8:	4413      	add	r3, r2
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b2f      	cmp	r3, #47	; 0x2f
 80096ce:	d16d      	bne.n	80097ac <http_find_file+0x114>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80096d0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80096d2:	4a81      	ldr	r2, [pc, #516]	; (80098d8 <http_find_file+0x240>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d102      	bne.n	80096de <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80096d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d166      	bne.n	80097ac <http_find_file+0x114>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80096de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e0:	3b01      	subs	r3, #1
 80096e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096e6:	bf28      	it	cs
 80096e8:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 80096ec:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 80096ee:	6a3b      	ldr	r3, [r7, #32]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <http_find_file+0x72>
      MEMCPY(http_uri_buf, uri, copy_len);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	6a3a      	ldr	r2, [r7, #32]
 80096f8:	4619      	mov	r1, r3
 80096fa:	4877      	ldr	r0, [pc, #476]	; (80098d8 <http_find_file+0x240>)
 80096fc:	f00d fab6 	bl	8016c6c <memcpy>
      http_uri_buf[copy_len] = 0;
 8009700:	4a75      	ldr	r2, [pc, #468]	; (80098d8 <http_find_file+0x240>)
 8009702:	6a3b      	ldr	r3, [r7, #32]
 8009704:	4413      	add	r3, r2
 8009706:	2200      	movs	r2, #0
 8009708:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800970a:	2300      	movs	r3, #0
 800970c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800970e:	e04a      	b.n	80097a6 <http_find_file+0x10e>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d028      	beq.n	8009768 <http_find_file+0xd0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 800971c:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800971e:	69fb      	ldr	r3, [r7, #28]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d01e      	beq.n	8009762 <http_find_file+0xca>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8009724:	4a6d      	ldr	r2, [pc, #436]	; (80098dc <http_find_file+0x244>)
 8009726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800972c:	4618      	mov	r0, r3
 800972e:	f7f6 fd59 	bl	80001e4 <strlen>
 8009732:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8009734:	69ba      	ldr	r2, [r7, #24]
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	4293      	cmp	r3, r2
 800973a:	bf28      	it	cs
 800973c:	4613      	movcs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	4a65      	ldr	r2, [pc, #404]	; (80098d8 <http_find_file+0x240>)
 8009744:	1898      	adds	r0, r3, r2
 8009746:	4a65      	ldr	r2, [pc, #404]	; (80098dc <http_find_file+0x244>)
 8009748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800974a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	4619      	mov	r1, r3
 8009752:	f00d fa8b 	bl	8016c6c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8009756:	6a3a      	ldr	r2, [r7, #32]
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	4413      	add	r3, r2
 800975c:	4a5e      	ldr	r2, [pc, #376]	; (80098d8 <http_find_file+0x240>)
 800975e:	2100      	movs	r1, #0
 8009760:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8009762:	4b5d      	ldr	r3, [pc, #372]	; (80098d8 <http_find_file+0x240>)
 8009764:	62bb      	str	r3, [r7, #40]	; 0x28
 8009766:	e004      	b.n	8009772 <http_find_file+0xda>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8009768:	4a5c      	ldr	r2, [pc, #368]	; (80098dc <http_find_file+0x244>)
 800976a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800976c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009770:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fbae 	bl	8007ed8 <fs_open>
 800977c:	4603      	mov	r3, r0
 800977e:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8009780:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d10b      	bne.n	80097a0 <http_find_file+0x108>
        uri = file_name;
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8009790:	4a52      	ldr	r2, [pc, #328]	; (80098dc <http_find_file+0x244>)
 8009792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009794:	00db      	lsls	r3, r3, #3
 8009796:	4413      	add	r3, r2
 8009798:	791b      	ldrb	r3, [r3, #4]
 800979a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800979e:	e005      	b.n	80097ac <http_find_file+0x114>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80097a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a2:	3301      	adds	r3, #1
 80097a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d9b1      	bls.n	8009710 <http_find_file+0x78>
      }
    }
  }
  if (file == NULL) {
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d176      	bne.n	80098a0 <http_find_file+0x208>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	213f      	movs	r1, #63	; 0x3f
 80097b6:	4618      	mov	r0, r3
 80097b8:	f00e f823 	bl	8017802 <strchr>
 80097bc:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 80097be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <http_find_file+0x138>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80097c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c6:	2200      	movs	r2, #0
 80097c8:	701a      	strb	r2, [r3, #0]
      params++;
 80097ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097cc:	3301      	adds	r3, #1
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 80097d0:	4b43      	ldr	r3, [pc, #268]	; (80098e0 <http_find_file+0x248>)
 80097d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097d6:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 80097d8:	4b42      	ldr	r3, [pc, #264]	; (80098e4 <http_find_file+0x24c>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d034      	beq.n	800984a <http_find_file+0x1b2>
 80097e0:	4b41      	ldr	r3, [pc, #260]	; (80098e8 <http_find_file+0x250>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d030      	beq.n	800984a <http_find_file+0x1b2>
      for (i = 0; i < httpd_num_cgis; i++) {
 80097e8:	2300      	movs	r3, #0
 80097ea:	633b      	str	r3, [r7, #48]	; 0x30
 80097ec:	e028      	b.n	8009840 <http_find_file+0x1a8>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 80097ee:	68b8      	ldr	r0, [r7, #8]
 80097f0:	4b3d      	ldr	r3, [pc, #244]	; (80098e8 <http_find_file+0x250>)
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	4413      	add	r3, r2
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4619      	mov	r1, r3
 80097fe:	f7f6 fce7 	bl	80001d0 <strcmp>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d118      	bne.n	800983a <http_find_file+0x1a2>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 8009808:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f7fe fd1a 	bl	8008244 <extract_uri_parameters>
 8009810:	4603      	mov	r3, r0
 8009812:	4a33      	ldr	r2, [pc, #204]	; (80098e0 <http_find_file+0x248>)
 8009814:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8009816:	4b34      	ldr	r3, [pc, #208]	; (80098e8 <http_find_file+0x250>)
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981c:	00db      	lsls	r3, r3, #3
 800981e:	4413      	add	r3, r2
 8009820:	685c      	ldr	r4, [r3, #4]
 8009822:	4b2f      	ldr	r3, [pc, #188]	; (80098e0 <http_find_file+0x248>)
 8009824:	6819      	ldr	r1, [r3, #0]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8009830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009832:	47a0      	blx	r4
 8009834:	4603      	mov	r3, r0
 8009836:	60bb      	str	r3, [r7, #8]
          break;
 8009838:	e007      	b.n	800984a <http_find_file+0x1b2>
      for (i = 0; i < httpd_num_cgis; i++) {
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	3301      	adds	r3, #1
 800983e:	633b      	str	r3, [r7, #48]	; 0x30
 8009840:	4b28      	ldr	r3, [pc, #160]	; (80098e4 <http_find_file+0x24c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009846:	429a      	cmp	r2, r3
 8009848:	dbd1      	blt.n	80097ee <http_find_file+0x156>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f7fe fb41 	bl	8007ed8 <fs_open>
 8009856:	4603      	mov	r3, r0
 8009858:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800985a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d102      	bne.n	8009868 <http_find_file+0x1d0>
      file = &hs->file_handle;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	63bb      	str	r3, [r7, #56]	; 0x38
 8009866:	e006      	b.n	8009876 <http_find_file+0x1de>
    } else {
      file = http_get_404_file(hs, &uri);
 8009868:	f107 0308 	add.w	r3, r7, #8
 800986c:	4619      	mov	r1, r3
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff fc0c 	bl	800908c <http_get_404_file>
 8009874:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 8009876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009878:	2b00      	cmp	r3, #0
 800987a:	d011      	beq.n	80098a0 <http_find_file+0x208>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	7c1b      	ldrb	r3, [r3, #16]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <http_find_file+0x1f8>
        tag_check = 1;
 8009888:	2301      	movs	r3, #1
 800988a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800988e:	e007      	b.n	80098a0 <http_find_file+0x208>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4619      	mov	r1, r3
 8009894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009896:	f7ff fead 	bl	80095f4 <http_uri_is_ssi>
 800989a:	4603      	mov	r3, r0
 800989c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d106      	bne.n	80098b4 <http_find_file+0x21c>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80098a6:	f107 0308 	add.w	r3, r7, #8
 80098aa:	4619      	mov	r1, r3
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f7ff fbed 	bl	800908c <http_get_404_file>
 80098b2:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80098b4:	68ba      	ldr	r2, [r7, #8]
 80098b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	4613      	mov	r3, r2
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f000 f810 	bl	80098ec <http_init_file>
 80098cc:	4603      	mov	r3, r0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3744      	adds	r7, #68	; 0x44
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd90      	pop	{r4, r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000ddc 	.word	0x20000ddc
 80098dc:	080329c4 	.word	0x080329c4
 80098e0:	200011dc 	.word	0x200011dc
 80098e4:	200011d8 	.word	0x200011d8
 80098e8:	200011d4 	.word	0x200011d4

080098ec <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d06f      	beq.n	80099e0 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <http_init_file+0x2a>
 8009908:	4b46      	ldr	r3, [pc, #280]	; (8009a24 <http_init_file+0x138>)
 800990a:	f640 120b 	movw	r2, #2315	; 0x90b
 800990e:	4946      	ldr	r1, [pc, #280]	; (8009a28 <http_init_file+0x13c>)
 8009910:	4846      	ldr	r0, [pc, #280]	; (8009a2c <http_init_file+0x140>)
 8009912:	f00d fe45 	bl	80175a0 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 8009916:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800991a:	2b00      	cmp	r3, #0
 800991c:	d01c      	beq.n	8009958 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800991e:	f7fe fb32 	bl	8007f86 <http_ssi_state_alloc>
 8009922:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d016      	beq.n	8009958 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	2200      	movs	r2, #0
 800992e:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
        ssi->parsed = file->data;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	461a      	mov	r2, r3
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	da06      	bge.n	800997c <http_init_file+0x90>
 800996e:	4b2d      	ldr	r3, [pc, #180]	; (8009a24 <http_init_file+0x138>)
 8009970:	f640 1234 	movw	r2, #2356	; 0x934
 8009974:	492e      	ldr	r1, [pc, #184]	; (8009a30 <http_init_file+0x144>)
 8009976:	482d      	ldr	r0, [pc, #180]	; (8009a2c <http_init_file+0x140>)
 8009978:	f00d fe12 	bl	80175a0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	461a      	mov	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d032      	beq.n	80099fa <http_init_file+0x10e>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	695b      	ldr	r3, [r3, #20]
 8009998:	7c1b      	ldrb	r3, [r3, #16]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d02b      	beq.n	80099fa <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6998      	ldr	r0, [r3, #24]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	461a      	mov	r2, r3
 80099ac:	4921      	ldr	r1, [pc, #132]	; (8009a34 <http_init_file+0x148>)
 80099ae:	f000 fa93 	bl	8009ed8 <lwip_strnstr>
 80099b2:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d01f      	beq.n	80099fa <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 80099ba:	69bb      	ldr	r3, [r7, #24]
 80099bc:	1d1a      	adds	r2, r3, #4
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	699a      	ldr	r2, [r3, #24]
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	441a      	add	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	1ad2      	subs	r2, r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	625a      	str	r2, [r3, #36]	; 0x24
 80099de:	e00c      	b.n	80099fa <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	695b      	ldr	r3, [r3, #20]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d006      	beq.n	8009a10 <http_init_file+0x124>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	7c1b      	ldrb	r3, [r3, #16]
 8009a08:	f003 0301 	and.w	r3, r3, #1
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f7fe fd46 	bl	80084a4 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3720      	adds	r7, #32
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	0801c7d8 	.word	0x0801c7d8
 8009a28:	0801c984 	.word	0x0801c984
 8009a2c:	0801c820 	.word	0x0801c820
 8009a30:	0801c998 	.word	0x0801c998
 8009a34:	0801c95c 	.word	0x0801c95c

08009a38 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <http_err+0x1c>
    http_state_free(hs);
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f7fe fb0c 	bl	800806c <http_state_free>
  }
}
 8009a54:	bf00      	nop
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	4613      	mov	r3, r2
 8009a68:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <http_sent+0x1c>
    return ERR_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	e008      	b.n	8009a8a <http_sent+0x2e>
  }

  hs->retries = 0;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8009a80:	6979      	ldr	r1, [r7, #20]
 8009a82:	68b8      	ldr	r0, [r7, #8]
 8009a84:	f7ff faa8 	bl	8008fd8 <http_send>

  return ERR_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3718      	adds	r7, #24
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d107      	bne.n	8009ab6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	6838      	ldr	r0, [r7, #0]
 8009aaa:	f7fe fbaf 	bl	800820c <http_close_conn>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	e021      	b.n	8009afa <http_poll+0x68>
  } else {
    hs->retries++;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009abc:	3301      	adds	r3, #1
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d105      	bne.n	8009adc <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8009ad0:	68f9      	ldr	r1, [r7, #12]
 8009ad2:	6838      	ldr	r0, [r7, #0]
 8009ad4:	f7fe fb9a 	bl	800820c <http_close_conn>
      return ERR_OK;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	e00e      	b.n	8009afa <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d009      	beq.n	8009af8 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8009ae4:	68f9      	ldr	r1, [r7, #12]
 8009ae6:	6838      	ldr	r0, [r7, #0]
 8009ae8:	f7ff fa76 	bl	8008fd8 <http_send>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d002      	beq.n	8009af8 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8009af2:	6838      	ldr	r0, [r7, #0]
 8009af4:	f007 f9a2 	bl	8010e3c <tcp_output>
      }
    }
  }

  return ERR_OK;
 8009af8:	2300      	movs	r3, #0
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
	...

08009b04 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
 8009b10:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8009b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d105      	bne.n	8009b2a <http_recv+0x26>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d002      	beq.n	8009b2a <http_recv+0x26>
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d111      	bne.n	8009b4e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d008      	beq.n	8009b42 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	891b      	ldrh	r3, [r3, #8]
 8009b34:	4619      	mov	r1, r3
 8009b36:	68b8      	ldr	r0, [r7, #8]
 8009b38:	f002 fcb0 	bl	800c49c <tcp_recved>
      pbuf_free(p);
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f001 fd37 	bl	800b5b0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8009b42:	6979      	ldr	r1, [r7, #20]
 8009b44:	68b8      	ldr	r0, [r7, #8]
 8009b46:	f7fe fb61 	bl	800820c <http_close_conn>
    return ERR_OK;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	e072      	b.n	8009c34 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	891b      	ldrh	r3, [r3, #8]
 8009b52:	4619      	mov	r1, r3
 8009b54:	68b8      	ldr	r0, [r7, #8]
 8009b56:	f002 fca1 	bl	800c49c <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d012      	beq.n	8009b8a <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 8009b6c:	6879      	ldr	r1, [r7, #4]
 8009b6e:	6978      	ldr	r0, [r7, #20]
 8009b70:	f7ff faec 	bl	800914c <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d103      	bne.n	8009b86 <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 8009b7e:	6979      	ldr	r1, [r7, #20]
 8009b80:	68b8      	ldr	r0, [r7, #8]
 8009b82:	f7ff fa29 	bl	8008fd8 <http_send>
    }
    return ERR_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	e054      	b.n	8009c34 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d14c      	bne.n	8009c2c <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	6979      	ldr	r1, [r7, #20]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f7ff fbfe 	bl	8009398 <http_parse_request>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8009ba0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d015      	beq.n	8009bd4 <http_recv+0xd0>
 8009ba8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bac:	f113 0f05 	cmn.w	r3, #5
 8009bb0:	d010      	beq.n	8009bd4 <http_recv+0xd0>
 8009bb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bb6:	f113 0f10 	cmn.w	r3, #16
 8009bba:	d00b      	beq.n	8009bd4 <http_recv+0xd0>
 8009bbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bc0:	f113 0f08 	cmn.w	r3, #8
 8009bc4:	d006      	beq.n	8009bd4 <http_recv+0xd0>
 8009bc6:	4b1d      	ldr	r3, [pc, #116]	; (8009c3c <http_recv+0x138>)
 8009bc8:	f640 2204 	movw	r2, #2564	; 0xa04
 8009bcc:	491c      	ldr	r1, [pc, #112]	; (8009c40 <http_recv+0x13c>)
 8009bce:	481d      	ldr	r0, [pc, #116]	; (8009c44 <http_recv+0x140>)
 8009bd0:	f00d fce6 	bl	80175a0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8009bd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009bd8:	f113 0f05 	cmn.w	r3, #5
 8009bdc:	d00b      	beq.n	8009bf6 <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	6a1b      	ldr	r3, [r3, #32]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d007      	beq.n	8009bf6 <http_recv+0xf2>
          pbuf_free(hs->req);
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	4618      	mov	r0, r3
 8009bec:	f001 fce0 	bl	800b5b0 <pbuf_free>
          hs->req = NULL;
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f001 fcda 	bl	800b5b0 <pbuf_free>
      if (parsed == ERR_OK) {
 8009bfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d109      	bne.n	8009c18 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d111      	bne.n	8009c32 <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8009c0e:	6979      	ldr	r1, [r7, #20]
 8009c10:	68b8      	ldr	r0, [r7, #8]
 8009c12:	f7ff f9e1 	bl	8008fd8 <http_send>
 8009c16:	e00c      	b.n	8009c32 <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 8009c18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c1c:	f113 0f10 	cmn.w	r3, #16
 8009c20:	d107      	bne.n	8009c32 <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8009c22:	6979      	ldr	r1, [r7, #20]
 8009c24:	68b8      	ldr	r0, [r7, #8]
 8009c26:	f7fe faf1 	bl	800820c <http_close_conn>
 8009c2a:	e002      	b.n	8009c32 <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 fcbf 	bl	800b5b0 <pbuf_free>
    }
  }
  return ERR_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	0801c7d8 	.word	0x0801c7d8
 8009c40:	0801c9b8 	.word	0x0801c9b8
 8009c44:	0801c820 	.word	0x0801c820

08009c48 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b086      	sub	sp, #24
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	4613      	mov	r3, r2
 8009c54:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8009c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d102      	bne.n	8009c64 <http_accept+0x1c>
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <http_accept+0x22>
    return ERR_VAL;
 8009c64:	f06f 0305 	mvn.w	r3, #5
 8009c68:	e025      	b.n	8009cb6 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009c6a:	2101      	movs	r1, #1
 8009c6c:	68b8      	ldr	r0, [r7, #8]
 8009c6e:	f003 f8fb 	bl	800ce68 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8009c72:	f7fe f9bd 	bl	8007ff0 <http_state_alloc>
 8009c76:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d102      	bne.n	8009c84 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8009c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c82:	e018      	b.n	8009cb6 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8009c8a:	6979      	ldr	r1, [r7, #20]
 8009c8c:	68b8      	ldr	r0, [r7, #8]
 8009c8e:	f003 faeb 	bl	800d268 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8009c92:	490b      	ldr	r1, [pc, #44]	; (8009cc0 <http_accept+0x78>)
 8009c94:	68b8      	ldr	r0, [r7, #8]
 8009c96:	f003 faf9 	bl	800d28c <tcp_recv>
  altcp_err(pcb, http_err);
 8009c9a:	490a      	ldr	r1, [pc, #40]	; (8009cc4 <http_accept+0x7c>)
 8009c9c:	68b8      	ldr	r0, [r7, #8]
 8009c9e:	f003 fb39 	bl	800d314 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8009ca2:	2204      	movs	r2, #4
 8009ca4:	4908      	ldr	r1, [pc, #32]	; (8009cc8 <http_accept+0x80>)
 8009ca6:	68b8      	ldr	r0, [r7, #8]
 8009ca8:	f003 fb6e 	bl	800d388 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8009cac:	4907      	ldr	r1, [pc, #28]	; (8009ccc <http_accept+0x84>)
 8009cae:	68b8      	ldr	r0, [r7, #8]
 8009cb0:	f003 fb0e 	bl	800d2d0 <tcp_sent>

  return ERR_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3718      	adds	r7, #24
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	08009b05 	.word	0x08009b05
 8009cc4:	08009a39 	.word	0x08009a39
 8009cc8:	08009a93 	.word	0x08009a93
 8009ccc:	08009a5d 	.word	0x08009a5d

08009cd0 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d029      	beq.n	8009d36 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009ce2:	2101      	movs	r1, #1
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f003 f8bf 	bl	800ce68 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8009cea:	887b      	ldrh	r3, [r7, #2]
 8009cec:	461a      	mov	r2, r3
 8009cee:	4914      	ldr	r1, [pc, #80]	; (8009d40 <httpd_init_pcb+0x70>)
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f002 fa05 	bl	800c100 <tcp_bind>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8009cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d006      	beq.n	8009d10 <httpd_init_pcb+0x40>
 8009d02:	4b10      	ldr	r3, [pc, #64]	; (8009d44 <httpd_init_pcb+0x74>)
 8009d04:	f640 2257 	movw	r2, #2647	; 0xa57
 8009d08:	490f      	ldr	r1, [pc, #60]	; (8009d48 <httpd_init_pcb+0x78>)
 8009d0a:	4810      	ldr	r0, [pc, #64]	; (8009d4c <httpd_init_pcb+0x7c>)
 8009d0c:	f00d fc48 	bl	80175a0 <iprintf>
    pcb = altcp_listen(pcb);
 8009d10:	21ff      	movs	r1, #255	; 0xff
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f002 faac 	bl	800c270 <tcp_listen_with_backlog>
 8009d18:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d106      	bne.n	8009d2e <httpd_init_pcb+0x5e>
 8009d20:	4b08      	ldr	r3, [pc, #32]	; (8009d44 <httpd_init_pcb+0x74>)
 8009d22:	f640 2259 	movw	r2, #2649	; 0xa59
 8009d26:	490a      	ldr	r1, [pc, #40]	; (8009d50 <httpd_init_pcb+0x80>)
 8009d28:	4808      	ldr	r0, [pc, #32]	; (8009d4c <httpd_init_pcb+0x7c>)
 8009d2a:	f00d fc39 	bl	80175a0 <iprintf>
    altcp_accept(pcb, http_accept);
 8009d2e:	4909      	ldr	r1, [pc, #36]	; (8009d54 <httpd_init_pcb+0x84>)
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f003 fb11 	bl	800d358 <tcp_accept>
  }
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	08032adc 	.word	0x08032adc
 8009d44:	0801c7d8 	.word	0x0801c7d8
 8009d48:	0801c9e4 	.word	0x0801c9e4
 8009d4c:	0801c820 	.word	0x0801c820
 8009d50:	0801ca00 	.word	0x0801ca00
 8009d54:	08009c49 	.word	0x08009c49

08009d58 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8009d5e:	202e      	movs	r0, #46	; 0x2e
 8009d60:	f003 fa74 	bl	800d24c <tcp_new_ip_type>
 8009d64:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d106      	bne.n	8009d7a <httpd_init+0x22>
 8009d6c:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <httpd_init+0x34>)
 8009d6e:	f640 2272 	movw	r2, #2674	; 0xa72
 8009d72:	4907      	ldr	r1, [pc, #28]	; (8009d90 <httpd_init+0x38>)
 8009d74:	4807      	ldr	r0, [pc, #28]	; (8009d94 <httpd_init+0x3c>)
 8009d76:	f00d fc13 	bl	80175a0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8009d7a:	2150      	movs	r1, #80	; 0x50
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff ffa7 	bl	8009cd0 <httpd_init_pcb>
}
 8009d82:	bf00      	nop
 8009d84:	3708      	adds	r7, #8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	0801c7d8 	.word	0x0801c7d8
 8009d90:	0801ca20 	.word	0x0801ca20
 8009d94:	0801c820 	.word	0x0801c820

08009d98 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d106      	bne.n	8009db8 <http_set_ssi_handler+0x20>
 8009daa:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <http_set_ssi_handler+0x64>)
 8009dac:	f640 2297 	movw	r2, #2711	; 0xa97
 8009db0:	4913      	ldr	r1, [pc, #76]	; (8009e00 <http_set_ssi_handler+0x68>)
 8009db2:	4814      	ldr	r0, [pc, #80]	; (8009e04 <http_set_ssi_handler+0x6c>)
 8009db4:	f00d fbf4 	bl	80175a0 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8009db8:	4a13      	ldr	r2, [pc, #76]	; (8009e08 <http_set_ssi_handler+0x70>)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d106      	bne.n	8009dd2 <http_set_ssi_handler+0x3a>
 8009dc4:	4b0d      	ldr	r3, [pc, #52]	; (8009dfc <http_set_ssi_handler+0x64>)
 8009dc6:	f640 229e 	movw	r2, #2718	; 0xa9e
 8009dca:	4910      	ldr	r1, [pc, #64]	; (8009e0c <http_set_ssi_handler+0x74>)
 8009dcc:	480d      	ldr	r0, [pc, #52]	; (8009e04 <http_set_ssi_handler+0x6c>)
 8009dce:	f00d fbe7 	bl	80175a0 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dc06      	bgt.n	8009de6 <http_set_ssi_handler+0x4e>
 8009dd8:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <http_set_ssi_handler+0x64>)
 8009dda:	f640 229f 	movw	r2, #2719	; 0xa9f
 8009dde:	490c      	ldr	r1, [pc, #48]	; (8009e10 <http_set_ssi_handler+0x78>)
 8009de0:	4808      	ldr	r0, [pc, #32]	; (8009e04 <http_set_ssi_handler+0x6c>)
 8009de2:	f00d fbdd 	bl	80175a0 <iprintf>

  httpd_tags = tags;
 8009de6:	4a0b      	ldr	r2, [pc, #44]	; (8009e14 <http_set_ssi_handler+0x7c>)
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8009dec:	4a0a      	ldr	r2, [pc, #40]	; (8009e18 <http_set_ssi_handler+0x80>)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8009df2:	bf00      	nop
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	0801c7d8 	.word	0x0801c7d8
 8009e00:	0801ca3c 	.word	0x0801ca3c
 8009e04:	0801c820 	.word	0x0801c820
 8009e08:	200011c8 	.word	0x200011c8
 8009e0c:	0801ca54 	.word	0x0801ca54
 8009e10:	0801ca64 	.word	0x0801ca64
 8009e14:	200011d0 	.word	0x200011d0
 8009e18:	200011cc 	.word	0x200011cc

08009e1c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d106      	bne.n	8009e3a <http_set_cgi_handlers+0x1e>
 8009e2c:	4b0d      	ldr	r3, [pc, #52]	; (8009e64 <http_set_cgi_handlers+0x48>)
 8009e2e:	f640 22b2 	movw	r2, #2738	; 0xab2
 8009e32:	490d      	ldr	r1, [pc, #52]	; (8009e68 <http_set_cgi_handlers+0x4c>)
 8009e34:	480d      	ldr	r0, [pc, #52]	; (8009e6c <http_set_cgi_handlers+0x50>)
 8009e36:	f00d fbb3 	bl	80175a0 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dc06      	bgt.n	8009e4e <http_set_cgi_handlers+0x32>
 8009e40:	4b08      	ldr	r3, [pc, #32]	; (8009e64 <http_set_cgi_handlers+0x48>)
 8009e42:	f640 22b3 	movw	r2, #2739	; 0xab3
 8009e46:	490a      	ldr	r1, [pc, #40]	; (8009e70 <http_set_cgi_handlers+0x54>)
 8009e48:	4808      	ldr	r0, [pc, #32]	; (8009e6c <http_set_cgi_handlers+0x50>)
 8009e4a:	f00d fba9 	bl	80175a0 <iprintf>

  httpd_cgis = cgis;
 8009e4e:	4a09      	ldr	r2, [pc, #36]	; (8009e74 <http_set_cgi_handlers+0x58>)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8009e54:	4a08      	ldr	r2, [pc, #32]	; (8009e78 <http_set_cgi_handlers+0x5c>)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	6013      	str	r3, [r2, #0]
}
 8009e5a:	bf00      	nop
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	0801c7d8 	.word	0x0801c7d8
 8009e68:	0801ca7c 	.word	0x0801ca7c
 8009e6c:	0801c820 	.word	0x0801c820
 8009e70:	0801ca8c 	.word	0x0801ca8c
 8009e74:	200011d4 	.word	0x200011d4
 8009e78:	200011d8 	.word	0x200011d8

08009e7c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	4603      	mov	r3, r0
 8009e84:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009e86:	88fb      	ldrh	r3, [r7, #6]
 8009e88:	021b      	lsls	r3, r3, #8
 8009e8a:	b21a      	sxth	r2, r3
 8009e8c:	88fb      	ldrh	r3, [r7, #6]
 8009e8e:	0a1b      	lsrs	r3, r3, #8
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	b21b      	sxth	r3, r3
 8009e94:	4313      	orrs	r3, r2
 8009e96:	b21b      	sxth	r3, r3
 8009e98:	b29b      	uxth	r3, r3
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	061a      	lsls	r2, r3, #24
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	021b      	lsls	r3, r3, #8
 8009eb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	0a1b      	lsrs	r3, r3, #8
 8009ec0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	0e1b      	lsrs	r3, r3, #24
 8009eca:	4313      	orrs	r3, r2
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8009ee4:	68b8      	ldr	r0, [r7, #8]
 8009ee6:	f7f6 f97d 	bl	80001e4 <strlen>
 8009eea:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	e022      	b.n	8009f3c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	e012      	b.n	8009f22 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	781a      	ldrb	r2, [r3, #0]
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d109      	bne.n	8009f1c <lwip_strnstr+0x44>
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	68b9      	ldr	r1, [r7, #8]
 8009f0c:	6978      	ldr	r0, [r7, #20]
 8009f0e:	f00d fc8d 	bl	801782c <strncmp>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	e00f      	b.n	8009f3c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d007      	beq.n	8009f3a <lwip_strnstr+0x62>
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	441a      	add	r2, r3
 8009f30:	68f9      	ldr	r1, [r7, #12]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	440b      	add	r3, r1
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d9e0      	bls.n	8009efc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3718      	adds	r7, #24
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	607a      	str	r2, [r7, #4]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	1c5a      	adds	r2, r3, #1
 8009f5c:	603a      	str	r2, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8009f62:	7bfa      	ldrb	r2, [r7, #15]
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d016      	beq.n	8009f98 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	f043 0320 	orr.w	r3, r3, #32
 8009f70:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8009f72:	7b7b      	ldrb	r3, [r7, #13]
 8009f74:	2b60      	cmp	r3, #96	; 0x60
 8009f76:	d90c      	bls.n	8009f92 <lwip_stricmp+0x4e>
 8009f78:	7b7b      	ldrb	r3, [r7, #13]
 8009f7a:	2b7a      	cmp	r3, #122	; 0x7a
 8009f7c:	d809      	bhi.n	8009f92 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8009f7e:	7bbb      	ldrb	r3, [r7, #14]
 8009f80:	f043 0320 	orr.w	r3, r3, #32
 8009f84:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8009f86:	7b7a      	ldrb	r2, [r7, #13]
 8009f88:	7b3b      	ldrb	r3, [r7, #12]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d003      	beq.n	8009f96 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e006      	b.n	8009fa0 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8009f92:	2301      	movs	r3, #1
 8009f94:	e004      	b.n	8009fa0 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8009f96:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d1d7      	bne.n	8009f4e <lwip_stricmp+0xa>
  return 0;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b088      	sub	sp, #32
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
  char *res = result;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	bfb8      	it	lt
 8009fcc:	425b      	neglt	r3, r3
 8009fce:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d806      	bhi.n	8009fe4 <lwip_itoa+0x38>
    if (bufsize == 1) {
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d154      	bne.n	800a086 <lwip_itoa+0xda>
      *result = 0;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
    }
    return;
 8009fe2:	e050      	b.n	800a086 <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	da04      	bge.n	8009ff4 <lwip_itoa+0x48>
    *res++ = '-';
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	1c5a      	adds	r2, r3, #1
 8009fee:	61fa      	str	r2, [r7, #28]
 8009ff0:	222d      	movs	r2, #45	; 0x2d
 8009ff2:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 8009ffa:	e01c      	b.n	800a036 <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	4b24      	ldr	r3, [pc, #144]	; (800a090 <lwip_itoa+0xe4>)
 800a000:	fb83 1302 	smull	r1, r3, r3, r2
 800a004:	1099      	asrs	r1, r3, #2
 800a006:	17d3      	asrs	r3, r2, #31
 800a008:	1ac9      	subs	r1, r1, r3
 800a00a:	460b      	mov	r3, r1
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	1ad1      	subs	r1, r2, r3
 800a014:	b2cb      	uxtb	r3, r1
 800a016:	3330      	adds	r3, #48	; 0x30
 800a018:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	7cfa      	ldrb	r2, [r7, #19]
 800a024:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	4a19      	ldr	r2, [pc, #100]	; (800a090 <lwip_itoa+0xe4>)
 800a02a:	fb82 1203 	smull	r1, r2, r2, r3
 800a02e:	1092      	asrs	r2, r2, #2
 800a030:	17db      	asrs	r3, r3, #31
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <lwip_itoa+0x98>
 800a03c:	69ba      	ldr	r2, [r7, #24]
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	429a      	cmp	r2, r3
 800a042:	d8db      	bhi.n	8009ffc <lwip_itoa+0x50>
  }
  if (n) {
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d003      	beq.n	800a052 <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	701a      	strb	r2, [r3, #0]
    return;
 800a050:	e01a      	b.n	800a088 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10a      	bne.n	800a070 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	61fa      	str	r2, [r7, #28]
 800a060:	2230      	movs	r2, #48	; 0x30
 800a062:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	61fa      	str	r2, [r7, #28]
 800a06a:	2200      	movs	r2, #0
 800a06c:	701a      	strb	r2, [r3, #0]
    return;
 800a06e:	e00b      	b.n	800a088 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	441a      	add	r2, r3
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	461a      	mov	r2, r3
 800a07c:	69b9      	ldr	r1, [r7, #24]
 800a07e:	69f8      	ldr	r0, [r7, #28]
 800a080:	f00c fe02 	bl	8016c88 <memmove>
 800a084:	e000      	b.n	800a088 <lwip_itoa+0xdc>
    return;
 800a086:	bf00      	nop
}
 800a088:	3720      	adds	r7, #32
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	66666667 	.word	0x66666667

0800a094 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a09e:	f000 f8d5 	bl	800a24c <mem_init>
  memp_init();
 800a0a2:	f000 fbdb 	bl	800a85c <memp_init>
  pbuf_init();
  netif_init();
 800a0a6:	f000 fc93 	bl	800a9d0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a0aa:	f007 ff8d 	bl	8011fc8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a0ae:	f001 fd1d 	bl	800baec <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a0b2:	f007 feff 	bl	8011eb4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
	...

0800a0c0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a0ca:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <ptr_to_mem+0x20>)
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	88fb      	ldrh	r3, [r7, #6]
 800a0d0:	4413      	add	r3, r2
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	370c      	adds	r7, #12
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	200011e0 	.word	0x200011e0

0800a0e4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <mem_to_ptr+0x20>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	1ad3      	subs	r3, r2, r3
 800a0f4:	b29b      	uxth	r3, r3
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	370c      	adds	r7, #12
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	200011e0 	.word	0x200011e0

0800a108 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a108:	b590      	push	{r4, r7, lr}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a110:	4b45      	ldr	r3, [pc, #276]	; (800a228 <plug_holes+0x120>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	429a      	cmp	r2, r3
 800a118:	d206      	bcs.n	800a128 <plug_holes+0x20>
 800a11a:	4b44      	ldr	r3, [pc, #272]	; (800a22c <plug_holes+0x124>)
 800a11c:	f240 12df 	movw	r2, #479	; 0x1df
 800a120:	4943      	ldr	r1, [pc, #268]	; (800a230 <plug_holes+0x128>)
 800a122:	4844      	ldr	r0, [pc, #272]	; (800a234 <plug_holes+0x12c>)
 800a124:	f00d fa3c 	bl	80175a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a128:	4b43      	ldr	r3, [pc, #268]	; (800a238 <plug_holes+0x130>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d306      	bcc.n	800a140 <plug_holes+0x38>
 800a132:	4b3e      	ldr	r3, [pc, #248]	; (800a22c <plug_holes+0x124>)
 800a134:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a138:	4940      	ldr	r1, [pc, #256]	; (800a23c <plug_holes+0x134>)
 800a13a:	483e      	ldr	r0, [pc, #248]	; (800a234 <plug_holes+0x12c>)
 800a13c:	f00d fa30 	bl	80175a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	791b      	ldrb	r3, [r3, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d006      	beq.n	800a156 <plug_holes+0x4e>
 800a148:	4b38      	ldr	r3, [pc, #224]	; (800a22c <plug_holes+0x124>)
 800a14a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a14e:	493c      	ldr	r1, [pc, #240]	; (800a240 <plug_holes+0x138>)
 800a150:	4838      	ldr	r0, [pc, #224]	; (800a234 <plug_holes+0x12c>)
 800a152:	f00d fa25 	bl	80175a0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a15e:	d906      	bls.n	800a16e <plug_holes+0x66>
 800a160:	4b32      	ldr	r3, [pc, #200]	; (800a22c <plug_holes+0x124>)
 800a162:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a166:	4937      	ldr	r1, [pc, #220]	; (800a244 <plug_holes+0x13c>)
 800a168:	4832      	ldr	r0, [pc, #200]	; (800a234 <plug_holes+0x12c>)
 800a16a:	f00d fa19 	bl	80175a0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff ffa4 	bl	800a0c0 <ptr_to_mem>
 800a178:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d024      	beq.n	800a1cc <plug_holes+0xc4>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	791b      	ldrb	r3, [r3, #4]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d120      	bne.n	800a1cc <plug_holes+0xc4>
 800a18a:	4b2b      	ldr	r3, [pc, #172]	; (800a238 <plug_holes+0x130>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	429a      	cmp	r2, r3
 800a192:	d01b      	beq.n	800a1cc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a194:	4b2c      	ldr	r3, [pc, #176]	; (800a248 <plug_holes+0x140>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d102      	bne.n	800a1a4 <plug_holes+0x9c>
      lfree = mem;
 800a19e:	4a2a      	ldr	r2, [pc, #168]	; (800a248 <plug_holes+0x140>)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	881a      	ldrh	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1b4:	d00a      	beq.n	800a1cc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	881b      	ldrh	r3, [r3, #0]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7ff ff80 	bl	800a0c0 <ptr_to_mem>
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f7ff ff8e 	bl	800a0e4 <mem_to_ptr>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	885b      	ldrh	r3, [r3, #2]
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff ff75 	bl	800a0c0 <ptr_to_mem>
 800a1d6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d01f      	beq.n	800a220 <plug_holes+0x118>
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	791b      	ldrb	r3, [r3, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d11b      	bne.n	800a220 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a1e8:	4b17      	ldr	r3, [pc, #92]	; (800a248 <plug_holes+0x140>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d102      	bne.n	800a1f8 <plug_holes+0xf0>
      lfree = pmem;
 800a1f2:	4a15      	ldr	r2, [pc, #84]	; (800a248 <plug_holes+0x140>)
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	881a      	ldrh	r2, [r3, #0]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a208:	d00a      	beq.n	800a220 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	881b      	ldrh	r3, [r3, #0]
 800a20e:	4618      	mov	r0, r3
 800a210:	f7ff ff56 	bl	800a0c0 <ptr_to_mem>
 800a214:	4604      	mov	r4, r0
 800a216:	68b8      	ldr	r0, [r7, #8]
 800a218:	f7ff ff64 	bl	800a0e4 <mem_to_ptr>
 800a21c:	4603      	mov	r3, r0
 800a21e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a220:	bf00      	nop
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	bd90      	pop	{r4, r7, pc}
 800a228:	200011e0 	.word	0x200011e0
 800a22c:	0801caa8 	.word	0x0801caa8
 800a230:	0801cad8 	.word	0x0801cad8
 800a234:	0801caf0 	.word	0x0801caf0
 800a238:	200011e4 	.word	0x200011e4
 800a23c:	0801cb18 	.word	0x0801cb18
 800a240:	0801cb34 	.word	0x0801cb34
 800a244:	0801cb50 	.word	0x0801cb50
 800a248:	200011e8 	.word	0x200011e8

0800a24c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a252:	4b18      	ldr	r3, [pc, #96]	; (800a2b4 <mem_init+0x68>)
 800a254:	3303      	adds	r3, #3
 800a256:	f023 0303 	bic.w	r3, r3, #3
 800a25a:	461a      	mov	r2, r3
 800a25c:	4b16      	ldr	r3, [pc, #88]	; (800a2b8 <mem_init+0x6c>)
 800a25e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a260:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <mem_init+0x6c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a26c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a27a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a27e:	f7ff ff1f 	bl	800a0c0 <ptr_to_mem>
 800a282:	4603      	mov	r3, r0
 800a284:	4a0d      	ldr	r2, [pc, #52]	; (800a2bc <mem_init+0x70>)
 800a286:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a288:	4b0c      	ldr	r3, [pc, #48]	; (800a2bc <mem_init+0x70>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2201      	movs	r2, #1
 800a28e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a290:	4b0a      	ldr	r3, [pc, #40]	; (800a2bc <mem_init+0x70>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a298:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a29a:	4b08      	ldr	r3, [pc, #32]	; (800a2bc <mem_init+0x70>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a2a2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a2a4:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <mem_init+0x6c>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a05      	ldr	r2, [pc, #20]	; (800a2c0 <mem_init+0x74>)
 800a2aa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	20009f40 	.word	0x20009f40
 800a2b8:	200011e0 	.word	0x200011e0
 800a2bc:	200011e4 	.word	0x200011e4
 800a2c0:	200011e8 	.word	0x200011e8

0800a2c4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff ff09 	bl	800a0e4 <mem_to_ptr>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	881b      	ldrh	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff fef0 	bl	800a0c0 <ptr_to_mem>
 800a2e0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	885b      	ldrh	r3, [r3, #2]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7ff feea 	bl	800a0c0 <ptr_to_mem>
 800a2ec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2f6:	d818      	bhi.n	800a32a <mem_link_valid+0x66>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	885b      	ldrh	r3, [r3, #2]
 800a2fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a300:	d813      	bhi.n	800a32a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a306:	8afa      	ldrh	r2, [r7, #22]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d004      	beq.n	800a316 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	8afa      	ldrh	r2, [r7, #22]
 800a312:	429a      	cmp	r2, r3
 800a314:	d109      	bne.n	800a32a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a316:	4b08      	ldr	r3, [pc, #32]	; (800a338 <mem_link_valid+0x74>)
 800a318:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d006      	beq.n	800a32e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	885b      	ldrh	r3, [r3, #2]
 800a324:	8afa      	ldrh	r2, [r7, #22]
 800a326:	429a      	cmp	r2, r3
 800a328:	d001      	beq.n	800a32e <mem_link_valid+0x6a>
    return 0;
 800a32a:	2300      	movs	r3, #0
 800a32c:	e000      	b.n	800a330 <mem_link_valid+0x6c>
  }
  return 1;
 800a32e:	2301      	movs	r3, #1
}
 800a330:	4618      	mov	r0, r3
 800a332:	3718      	adds	r7, #24
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}
 800a338:	200011e4 	.word	0x200011e4

0800a33c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d04c      	beq.n	800a3e4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f003 0303 	and.w	r3, r3, #3
 800a350:	2b00      	cmp	r3, #0
 800a352:	d007      	beq.n	800a364 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a354:	4b25      	ldr	r3, [pc, #148]	; (800a3ec <mem_free+0xb0>)
 800a356:	f240 2273 	movw	r2, #627	; 0x273
 800a35a:	4925      	ldr	r1, [pc, #148]	; (800a3f0 <mem_free+0xb4>)
 800a35c:	4825      	ldr	r0, [pc, #148]	; (800a3f4 <mem_free+0xb8>)
 800a35e:	f00d f91f 	bl	80175a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a362:	e040      	b.n	800a3e6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	3b08      	subs	r3, #8
 800a368:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a36a:	4b23      	ldr	r3, [pc, #140]	; (800a3f8 <mem_free+0xbc>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	429a      	cmp	r2, r3
 800a372:	d306      	bcc.n	800a382 <mem_free+0x46>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f103 020c 	add.w	r2, r3, #12
 800a37a:	4b20      	ldr	r3, [pc, #128]	; (800a3fc <mem_free+0xc0>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d907      	bls.n	800a392 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a382:	4b1a      	ldr	r3, [pc, #104]	; (800a3ec <mem_free+0xb0>)
 800a384:	f240 227f 	movw	r2, #639	; 0x27f
 800a388:	491d      	ldr	r1, [pc, #116]	; (800a400 <mem_free+0xc4>)
 800a38a:	481a      	ldr	r0, [pc, #104]	; (800a3f4 <mem_free+0xb8>)
 800a38c:	f00d f908 	bl	80175a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a390:	e029      	b.n	800a3e6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	791b      	ldrb	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d107      	bne.n	800a3aa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a39a:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <mem_free+0xb0>)
 800a39c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a3a0:	4918      	ldr	r1, [pc, #96]	; (800a404 <mem_free+0xc8>)
 800a3a2:	4814      	ldr	r0, [pc, #80]	; (800a3f4 <mem_free+0xb8>)
 800a3a4:	f00d f8fc 	bl	80175a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a3a8:	e01d      	b.n	800a3e6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f7ff ff8a 	bl	800a2c4 <mem_link_valid>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d107      	bne.n	800a3c6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a3b6:	4b0d      	ldr	r3, [pc, #52]	; (800a3ec <mem_free+0xb0>)
 800a3b8:	f240 2295 	movw	r2, #661	; 0x295
 800a3bc:	4912      	ldr	r1, [pc, #72]	; (800a408 <mem_free+0xcc>)
 800a3be:	480d      	ldr	r0, [pc, #52]	; (800a3f4 <mem_free+0xb8>)
 800a3c0:	f00d f8ee 	bl	80175a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a3c4:	e00f      	b.n	800a3e6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a3cc:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <mem_free+0xd0>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d202      	bcs.n	800a3dc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a3d6:	4a0d      	ldr	r2, [pc, #52]	; (800a40c <mem_free+0xd0>)
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7ff fe93 	bl	800a108 <plug_holes>
 800a3e2:	e000      	b.n	800a3e6 <mem_free+0xaa>
    return;
 800a3e4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	0801caa8 	.word	0x0801caa8
 800a3f0:	0801cb7c 	.word	0x0801cb7c
 800a3f4:	0801caf0 	.word	0x0801caf0
 800a3f8:	200011e0 	.word	0x200011e0
 800a3fc:	200011e4 	.word	0x200011e4
 800a400:	0801cba0 	.word	0x0801cba0
 800a404:	0801cbbc 	.word	0x0801cbbc
 800a408:	0801cbe4 	.word	0x0801cbe4
 800a40c:	200011e8 	.word	0x200011e8

0800a410 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b088      	sub	sp, #32
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a41c:	887b      	ldrh	r3, [r7, #2]
 800a41e:	3303      	adds	r3, #3
 800a420:	b29b      	uxth	r3, r3
 800a422:	f023 0303 	bic.w	r3, r3, #3
 800a426:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a428:	8bfb      	ldrh	r3, [r7, #30]
 800a42a:	2b0b      	cmp	r3, #11
 800a42c:	d801      	bhi.n	800a432 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a42e:	230c      	movs	r3, #12
 800a430:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a432:	8bfb      	ldrh	r3, [r7, #30]
 800a434:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a438:	d803      	bhi.n	800a442 <mem_trim+0x32>
 800a43a:	8bfa      	ldrh	r2, [r7, #30]
 800a43c:	887b      	ldrh	r3, [r7, #2]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d201      	bcs.n	800a446 <mem_trim+0x36>
    return NULL;
 800a442:	2300      	movs	r3, #0
 800a444:	e0cc      	b.n	800a5e0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a446:	4b68      	ldr	r3, [pc, #416]	; (800a5e8 <mem_trim+0x1d8>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d304      	bcc.n	800a45a <mem_trim+0x4a>
 800a450:	4b66      	ldr	r3, [pc, #408]	; (800a5ec <mem_trim+0x1dc>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	429a      	cmp	r2, r3
 800a458:	d306      	bcc.n	800a468 <mem_trim+0x58>
 800a45a:	4b65      	ldr	r3, [pc, #404]	; (800a5f0 <mem_trim+0x1e0>)
 800a45c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a460:	4964      	ldr	r1, [pc, #400]	; (800a5f4 <mem_trim+0x1e4>)
 800a462:	4865      	ldr	r0, [pc, #404]	; (800a5f8 <mem_trim+0x1e8>)
 800a464:	f00d f89c 	bl	80175a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a468:	4b5f      	ldr	r3, [pc, #380]	; (800a5e8 <mem_trim+0x1d8>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	429a      	cmp	r2, r3
 800a470:	d304      	bcc.n	800a47c <mem_trim+0x6c>
 800a472:	4b5e      	ldr	r3, [pc, #376]	; (800a5ec <mem_trim+0x1dc>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d301      	bcc.n	800a480 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	e0af      	b.n	800a5e0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	3b08      	subs	r3, #8
 800a484:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a486:	69b8      	ldr	r0, [r7, #24]
 800a488:	f7ff fe2c 	bl	800a0e4 <mem_to_ptr>
 800a48c:	4603      	mov	r3, r0
 800a48e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	881a      	ldrh	r2, [r3, #0]
 800a494:	8afb      	ldrh	r3, [r7, #22]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	b29b      	uxth	r3, r3
 800a49a:	3b08      	subs	r3, #8
 800a49c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a49e:	8bfa      	ldrh	r2, [r7, #30]
 800a4a0:	8abb      	ldrh	r3, [r7, #20]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d906      	bls.n	800a4b4 <mem_trim+0xa4>
 800a4a6:	4b52      	ldr	r3, [pc, #328]	; (800a5f0 <mem_trim+0x1e0>)
 800a4a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a4ac:	4953      	ldr	r1, [pc, #332]	; (800a5fc <mem_trim+0x1ec>)
 800a4ae:	4852      	ldr	r0, [pc, #328]	; (800a5f8 <mem_trim+0x1e8>)
 800a4b0:	f00d f876 	bl	80175a0 <iprintf>
  if (newsize > size) {
 800a4b4:	8bfa      	ldrh	r2, [r7, #30]
 800a4b6:	8abb      	ldrh	r3, [r7, #20]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d901      	bls.n	800a4c0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	e08f      	b.n	800a5e0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a4c0:	8bfa      	ldrh	r2, [r7, #30]
 800a4c2:	8abb      	ldrh	r3, [r7, #20]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d101      	bne.n	800a4cc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	e089      	b.n	800a5e0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a4cc:	69bb      	ldr	r3, [r7, #24]
 800a4ce:	881b      	ldrh	r3, [r3, #0]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff fdf5 	bl	800a0c0 <ptr_to_mem>
 800a4d6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	791b      	ldrb	r3, [r3, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d13f      	bne.n	800a560 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4e8:	d106      	bne.n	800a4f8 <mem_trim+0xe8>
 800a4ea:	4b41      	ldr	r3, [pc, #260]	; (800a5f0 <mem_trim+0x1e0>)
 800a4ec:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a4f0:	4943      	ldr	r1, [pc, #268]	; (800a600 <mem_trim+0x1f0>)
 800a4f2:	4841      	ldr	r0, [pc, #260]	; (800a5f8 <mem_trim+0x1e8>)
 800a4f4:	f00d f854 	bl	80175a0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	881b      	ldrh	r3, [r3, #0]
 800a4fc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a4fe:	8afa      	ldrh	r2, [r7, #22]
 800a500:	8bfb      	ldrh	r3, [r7, #30]
 800a502:	4413      	add	r3, r2
 800a504:	b29b      	uxth	r3, r3
 800a506:	3308      	adds	r3, #8
 800a508:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a50a:	4b3e      	ldr	r3, [pc, #248]	; (800a604 <mem_trim+0x1f4>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	429a      	cmp	r2, r3
 800a512:	d106      	bne.n	800a522 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a514:	89fb      	ldrh	r3, [r7, #14]
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fdd2 	bl	800a0c0 <ptr_to_mem>
 800a51c:	4603      	mov	r3, r0
 800a51e:	4a39      	ldr	r2, [pc, #228]	; (800a604 <mem_trim+0x1f4>)
 800a520:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a522:	89fb      	ldrh	r3, [r7, #14]
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fdcb 	bl	800a0c0 <ptr_to_mem>
 800a52a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	2200      	movs	r2, #0
 800a530:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	89ba      	ldrh	r2, [r7, #12]
 800a536:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	8afa      	ldrh	r2, [r7, #22]
 800a53c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	89fa      	ldrh	r2, [r7, #14]
 800a542:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a54c:	d047      	beq.n	800a5de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff fdb4 	bl	800a0c0 <ptr_to_mem>
 800a558:	4602      	mov	r2, r0
 800a55a:	89fb      	ldrh	r3, [r7, #14]
 800a55c:	8053      	strh	r3, [r2, #2]
 800a55e:	e03e      	b.n	800a5de <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a560:	8bfb      	ldrh	r3, [r7, #30]
 800a562:	f103 0214 	add.w	r2, r3, #20
 800a566:	8abb      	ldrh	r3, [r7, #20]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d838      	bhi.n	800a5de <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a56c:	8afa      	ldrh	r2, [r7, #22]
 800a56e:	8bfb      	ldrh	r3, [r7, #30]
 800a570:	4413      	add	r3, r2
 800a572:	b29b      	uxth	r3, r3
 800a574:	3308      	adds	r3, #8
 800a576:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	881b      	ldrh	r3, [r3, #0]
 800a57c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a580:	d106      	bne.n	800a590 <mem_trim+0x180>
 800a582:	4b1b      	ldr	r3, [pc, #108]	; (800a5f0 <mem_trim+0x1e0>)
 800a584:	f240 3216 	movw	r2, #790	; 0x316
 800a588:	491d      	ldr	r1, [pc, #116]	; (800a600 <mem_trim+0x1f0>)
 800a58a:	481b      	ldr	r0, [pc, #108]	; (800a5f8 <mem_trim+0x1e8>)
 800a58c:	f00d f808 	bl	80175a0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a590:	89fb      	ldrh	r3, [r7, #14]
 800a592:	4618      	mov	r0, r3
 800a594:	f7ff fd94 	bl	800a0c0 <ptr_to_mem>
 800a598:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a59a:	4b1a      	ldr	r3, [pc, #104]	; (800a604 <mem_trim+0x1f4>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d202      	bcs.n	800a5aa <mem_trim+0x19a>
      lfree = mem2;
 800a5a4:	4a17      	ldr	r2, [pc, #92]	; (800a604 <mem_trim+0x1f4>)
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	881a      	ldrh	r2, [r3, #0]
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	8afa      	ldrh	r2, [r7, #22]
 800a5bc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	89fa      	ldrh	r2, [r7, #14]
 800a5c2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	881b      	ldrh	r3, [r3, #0]
 800a5c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5cc:	d007      	beq.n	800a5de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	881b      	ldrh	r3, [r3, #0]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7ff fd74 	bl	800a0c0 <ptr_to_mem>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	89fb      	ldrh	r3, [r7, #14]
 800a5dc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a5de:	687b      	ldr	r3, [r7, #4]
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3720      	adds	r7, #32
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200011e0 	.word	0x200011e0
 800a5ec:	200011e4 	.word	0x200011e4
 800a5f0:	0801caa8 	.word	0x0801caa8
 800a5f4:	0801cc18 	.word	0x0801cc18
 800a5f8:	0801caf0 	.word	0x0801caf0
 800a5fc:	0801cc30 	.word	0x0801cc30
 800a600:	0801cc50 	.word	0x0801cc50
 800a604:	200011e8 	.word	0x200011e8

0800a608 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b088      	sub	sp, #32
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <mem_malloc+0x14>
    return NULL;
 800a618:	2300      	movs	r3, #0
 800a61a:	e0d9      	b.n	800a7d0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a61c:	88fb      	ldrh	r3, [r7, #6]
 800a61e:	3303      	adds	r3, #3
 800a620:	b29b      	uxth	r3, r3
 800a622:	f023 0303 	bic.w	r3, r3, #3
 800a626:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a628:	8bbb      	ldrh	r3, [r7, #28]
 800a62a:	2b0b      	cmp	r3, #11
 800a62c:	d801      	bhi.n	800a632 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a62e:	230c      	movs	r3, #12
 800a630:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a632:	8bbb      	ldrh	r3, [r7, #28]
 800a634:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a638:	d803      	bhi.n	800a642 <mem_malloc+0x3a>
 800a63a:	8bba      	ldrh	r2, [r7, #28]
 800a63c:	88fb      	ldrh	r3, [r7, #6]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d201      	bcs.n	800a646 <mem_malloc+0x3e>
    return NULL;
 800a642:	2300      	movs	r3, #0
 800a644:	e0c4      	b.n	800a7d0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a646:	4b64      	ldr	r3, [pc, #400]	; (800a7d8 <mem_malloc+0x1d0>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fd4a 	bl	800a0e4 <mem_to_ptr>
 800a650:	4603      	mov	r3, r0
 800a652:	83fb      	strh	r3, [r7, #30]
 800a654:	e0b4      	b.n	800a7c0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a656:	8bfb      	ldrh	r3, [r7, #30]
 800a658:	4618      	mov	r0, r3
 800a65a:	f7ff fd31 	bl	800a0c0 <ptr_to_mem>
 800a65e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	791b      	ldrb	r3, [r3, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	f040 80a4 	bne.w	800a7b2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	461a      	mov	r2, r3
 800a670:	8bfb      	ldrh	r3, [r7, #30]
 800a672:	1ad3      	subs	r3, r2, r3
 800a674:	f1a3 0208 	sub.w	r2, r3, #8
 800a678:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a67a:	429a      	cmp	r2, r3
 800a67c:	f0c0 8099 	bcc.w	800a7b2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	881b      	ldrh	r3, [r3, #0]
 800a684:	461a      	mov	r2, r3
 800a686:	8bfb      	ldrh	r3, [r7, #30]
 800a688:	1ad3      	subs	r3, r2, r3
 800a68a:	f1a3 0208 	sub.w	r2, r3, #8
 800a68e:	8bbb      	ldrh	r3, [r7, #28]
 800a690:	3314      	adds	r3, #20
 800a692:	429a      	cmp	r2, r3
 800a694:	d333      	bcc.n	800a6fe <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a696:	8bfa      	ldrh	r2, [r7, #30]
 800a698:	8bbb      	ldrh	r3, [r7, #28]
 800a69a:	4413      	add	r3, r2
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	3308      	adds	r3, #8
 800a6a0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a6a2:	8a7b      	ldrh	r3, [r7, #18]
 800a6a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6a8:	d106      	bne.n	800a6b8 <mem_malloc+0xb0>
 800a6aa:	4b4c      	ldr	r3, [pc, #304]	; (800a7dc <mem_malloc+0x1d4>)
 800a6ac:	f240 3287 	movw	r2, #903	; 0x387
 800a6b0:	494b      	ldr	r1, [pc, #300]	; (800a7e0 <mem_malloc+0x1d8>)
 800a6b2:	484c      	ldr	r0, [pc, #304]	; (800a7e4 <mem_malloc+0x1dc>)
 800a6b4:	f00c ff74 	bl	80175a0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a6b8:	8a7b      	ldrh	r3, [r7, #18]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7ff fd00 	bl	800a0c0 <ptr_to_mem>
 800a6c0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	881a      	ldrh	r2, [r3, #0]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	8bfa      	ldrh	r2, [r7, #30]
 800a6d4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	8a7a      	ldrh	r2, [r7, #18]
 800a6da:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	881b      	ldrh	r3, [r3, #0]
 800a6e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6ea:	d00b      	beq.n	800a704 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7ff fce5 	bl	800a0c0 <ptr_to_mem>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	8a7b      	ldrh	r3, [r7, #18]
 800a6fa:	8053      	strh	r3, [r2, #2]
 800a6fc:	e002      	b.n	800a704 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2201      	movs	r2, #1
 800a702:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a704:	4b34      	ldr	r3, [pc, #208]	; (800a7d8 <mem_malloc+0x1d0>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d127      	bne.n	800a75e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a70e:	4b32      	ldr	r3, [pc, #200]	; (800a7d8 <mem_malloc+0x1d0>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a714:	e005      	b.n	800a722 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a716:	69bb      	ldr	r3, [r7, #24]
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff fcd0 	bl	800a0c0 <ptr_to_mem>
 800a720:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	791b      	ldrb	r3, [r3, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d004      	beq.n	800a734 <mem_malloc+0x12c>
 800a72a:	4b2f      	ldr	r3, [pc, #188]	; (800a7e8 <mem_malloc+0x1e0>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	69ba      	ldr	r2, [r7, #24]
 800a730:	429a      	cmp	r2, r3
 800a732:	d1f0      	bne.n	800a716 <mem_malloc+0x10e>
          }
          lfree = cur;
 800a734:	4a28      	ldr	r2, [pc, #160]	; (800a7d8 <mem_malloc+0x1d0>)
 800a736:	69bb      	ldr	r3, [r7, #24]
 800a738:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a73a:	4b27      	ldr	r3, [pc, #156]	; (800a7d8 <mem_malloc+0x1d0>)
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	4b2a      	ldr	r3, [pc, #168]	; (800a7e8 <mem_malloc+0x1e0>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	429a      	cmp	r2, r3
 800a744:	d00b      	beq.n	800a75e <mem_malloc+0x156>
 800a746:	4b24      	ldr	r3, [pc, #144]	; (800a7d8 <mem_malloc+0x1d0>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	791b      	ldrb	r3, [r3, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d006      	beq.n	800a75e <mem_malloc+0x156>
 800a750:	4b22      	ldr	r3, [pc, #136]	; (800a7dc <mem_malloc+0x1d4>)
 800a752:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a756:	4925      	ldr	r1, [pc, #148]	; (800a7ec <mem_malloc+0x1e4>)
 800a758:	4822      	ldr	r0, [pc, #136]	; (800a7e4 <mem_malloc+0x1dc>)
 800a75a:	f00c ff21 	bl	80175a0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a75e:	8bba      	ldrh	r2, [r7, #28]
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	4413      	add	r3, r2
 800a764:	3308      	adds	r3, #8
 800a766:	4a20      	ldr	r2, [pc, #128]	; (800a7e8 <mem_malloc+0x1e0>)
 800a768:	6812      	ldr	r2, [r2, #0]
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d906      	bls.n	800a77c <mem_malloc+0x174>
 800a76e:	4b1b      	ldr	r3, [pc, #108]	; (800a7dc <mem_malloc+0x1d4>)
 800a770:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a774:	491e      	ldr	r1, [pc, #120]	; (800a7f0 <mem_malloc+0x1e8>)
 800a776:	481b      	ldr	r0, [pc, #108]	; (800a7e4 <mem_malloc+0x1dc>)
 800a778:	f00c ff12 	bl	80175a0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f003 0303 	and.w	r3, r3, #3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d006      	beq.n	800a794 <mem_malloc+0x18c>
 800a786:	4b15      	ldr	r3, [pc, #84]	; (800a7dc <mem_malloc+0x1d4>)
 800a788:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a78c:	4919      	ldr	r1, [pc, #100]	; (800a7f4 <mem_malloc+0x1ec>)
 800a78e:	4815      	ldr	r0, [pc, #84]	; (800a7e4 <mem_malloc+0x1dc>)
 800a790:	f00c ff06 	bl	80175a0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d006      	beq.n	800a7ac <mem_malloc+0x1a4>
 800a79e:	4b0f      	ldr	r3, [pc, #60]	; (800a7dc <mem_malloc+0x1d4>)
 800a7a0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a7a4:	4914      	ldr	r1, [pc, #80]	; (800a7f8 <mem_malloc+0x1f0>)
 800a7a6:	480f      	ldr	r0, [pc, #60]	; (800a7e4 <mem_malloc+0x1dc>)
 800a7a8:	f00c fefa 	bl	80175a0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	e00e      	b.n	800a7d0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a7b2:	8bfb      	ldrh	r3, [r7, #30]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fc83 	bl	800a0c0 <ptr_to_mem>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a7c0:	8bfa      	ldrh	r2, [r7, #30]
 800a7c2:	8bbb      	ldrh	r3, [r7, #28]
 800a7c4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	f4ff af44 	bcc.w	800a656 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3720      	adds	r7, #32
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	200011e8 	.word	0x200011e8
 800a7dc:	0801caa8 	.word	0x0801caa8
 800a7e0:	0801cc50 	.word	0x0801cc50
 800a7e4:	0801caf0 	.word	0x0801caf0
 800a7e8:	200011e4 	.word	0x200011e4
 800a7ec:	0801cc64 	.word	0x0801cc64
 800a7f0:	0801cc80 	.word	0x0801cc80
 800a7f4:	0801ccb0 	.word	0x0801ccb0
 800a7f8:	0801cce0 	.word	0x0801cce0

0800a7fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	2200      	movs	r2, #0
 800a80a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	3303      	adds	r3, #3
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a818:	2300      	movs	r3, #0
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	e011      	b.n	800a842 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	881b      	ldrh	r3, [r3, #0]
 800a834:	461a      	mov	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	4413      	add	r3, r2
 800a83a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	3301      	adds	r3, #1
 800a840:	60fb      	str	r3, [r7, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	885b      	ldrh	r3, [r3, #2]
 800a846:	461a      	mov	r2, r3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	4293      	cmp	r3, r2
 800a84c:	dbe7      	blt.n	800a81e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a84e:	bf00      	nop
 800a850:	bf00      	nop
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a862:	2300      	movs	r3, #0
 800a864:	80fb      	strh	r3, [r7, #6]
 800a866:	e009      	b.n	800a87c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a868:	88fb      	ldrh	r3, [r7, #6]
 800a86a:	4a08      	ldr	r2, [pc, #32]	; (800a88c <memp_init+0x30>)
 800a86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a870:	4618      	mov	r0, r3
 800a872:	f7ff ffc3 	bl	800a7fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a876:	88fb      	ldrh	r3, [r7, #6]
 800a878:	3301      	adds	r3, #1
 800a87a:	80fb      	strh	r3, [r7, #6]
 800a87c:	88fb      	ldrh	r3, [r7, #6]
 800a87e:	2b08      	cmp	r3, #8
 800a880:	d9f2      	bls.n	800a868 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a882:	bf00      	nop
 800a884:	bf00      	nop
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	08032a68 	.word	0x08032a68

0800a890 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	689b      	ldr	r3, [r3, #8]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d012      	beq.n	800a8cc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	689b      	ldr	r3, [r3, #8]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	6812      	ldr	r2, [r2, #0]
 800a8ae:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	f003 0303 	and.w	r3, r3, #3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d006      	beq.n	800a8c8 <do_memp_malloc_pool+0x38>
 800a8ba:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <do_memp_malloc_pool+0x48>)
 800a8bc:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a8c0:	4906      	ldr	r1, [pc, #24]	; (800a8dc <do_memp_malloc_pool+0x4c>)
 800a8c2:	4807      	ldr	r0, [pc, #28]	; (800a8e0 <do_memp_malloc_pool+0x50>)
 800a8c4:	f00c fe6c 	bl	80175a0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	e000      	b.n	800a8ce <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a8cc:	2300      	movs	r3, #0
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	0801cd04 	.word	0x0801cd04
 800a8dc:	0801cd34 	.word	0x0801cd34
 800a8e0:	0801cd58 	.word	0x0801cd58

0800a8e4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a8ee:	79fb      	ldrb	r3, [r7, #7]
 800a8f0:	2b08      	cmp	r3, #8
 800a8f2:	d908      	bls.n	800a906 <memp_malloc+0x22>
 800a8f4:	4b0a      	ldr	r3, [pc, #40]	; (800a920 <memp_malloc+0x3c>)
 800a8f6:	f240 1257 	movw	r2, #343	; 0x157
 800a8fa:	490a      	ldr	r1, [pc, #40]	; (800a924 <memp_malloc+0x40>)
 800a8fc:	480a      	ldr	r0, [pc, #40]	; (800a928 <memp_malloc+0x44>)
 800a8fe:	f00c fe4f 	bl	80175a0 <iprintf>
 800a902:	2300      	movs	r3, #0
 800a904:	e008      	b.n	800a918 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a906:	79fb      	ldrb	r3, [r7, #7]
 800a908:	4a08      	ldr	r2, [pc, #32]	; (800a92c <memp_malloc+0x48>)
 800a90a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a90e:	4618      	mov	r0, r3
 800a910:	f7ff ffbe 	bl	800a890 <do_memp_malloc_pool>
 800a914:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a916:	68fb      	ldr	r3, [r7, #12]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	0801cd04 	.word	0x0801cd04
 800a924:	0801cd94 	.word	0x0801cd94
 800a928:	0801cd58 	.word	0x0801cd58
 800a92c:	08032a68 	.word	0x08032a68

0800a930 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	f003 0303 	and.w	r3, r3, #3
 800a940:	2b00      	cmp	r3, #0
 800a942:	d006      	beq.n	800a952 <do_memp_free_pool+0x22>
 800a944:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <do_memp_free_pool+0x40>)
 800a946:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a94a:	490a      	ldr	r1, [pc, #40]	; (800a974 <do_memp_free_pool+0x44>)
 800a94c:	480a      	ldr	r0, [pc, #40]	; (800a978 <do_memp_free_pool+0x48>)
 800a94e:	f00c fe27 	bl	80175a0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a968:	bf00      	nop
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	0801cd04 	.word	0x0801cd04
 800a974:	0801cdb4 	.word	0x0801cdb4
 800a978:	0801cd58 	.word	0x0801cd58

0800a97c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	6039      	str	r1, [r7, #0]
 800a986:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a988:	79fb      	ldrb	r3, [r7, #7]
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	d907      	bls.n	800a99e <memp_free+0x22>
 800a98e:	4b0c      	ldr	r3, [pc, #48]	; (800a9c0 <memp_free+0x44>)
 800a990:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a994:	490b      	ldr	r1, [pc, #44]	; (800a9c4 <memp_free+0x48>)
 800a996:	480c      	ldr	r0, [pc, #48]	; (800a9c8 <memp_free+0x4c>)
 800a998:	f00c fe02 	bl	80175a0 <iprintf>
 800a99c:	e00c      	b.n	800a9b8 <memp_free+0x3c>

  if (mem == NULL) {
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d008      	beq.n	800a9b6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a9a4:	79fb      	ldrb	r3, [r7, #7]
 800a9a6:	4a09      	ldr	r2, [pc, #36]	; (800a9cc <memp_free+0x50>)
 800a9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f7ff ffbe 	bl	800a930 <do_memp_free_pool>
 800a9b4:	e000      	b.n	800a9b8 <memp_free+0x3c>
    return;
 800a9b6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a9b8:	3708      	adds	r7, #8
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	0801cd04 	.word	0x0801cd04
 800a9c4:	0801cdd4 	.word	0x0801cdd4
 800a9c8:	0801cd58 	.word	0x0801cd58
 800a9cc:	08032a68 	.word	0x08032a68

0800a9d0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a9d4:	bf00      	nop
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
	...

0800a9e0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b086      	sub	sp, #24
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d108      	bne.n	800aa06 <netif_add+0x26>
 800a9f4:	4b5b      	ldr	r3, [pc, #364]	; (800ab64 <netif_add+0x184>)
 800a9f6:	f240 1227 	movw	r2, #295	; 0x127
 800a9fa:	495b      	ldr	r1, [pc, #364]	; (800ab68 <netif_add+0x188>)
 800a9fc:	485b      	ldr	r0, [pc, #364]	; (800ab6c <netif_add+0x18c>)
 800a9fe:	f00c fdcf 	bl	80175a0 <iprintf>
 800aa02:	2300      	movs	r3, #0
 800aa04:	e0a9      	b.n	800ab5a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d108      	bne.n	800aa1e <netif_add+0x3e>
 800aa0c:	4b55      	ldr	r3, [pc, #340]	; (800ab64 <netif_add+0x184>)
 800aa0e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800aa12:	4957      	ldr	r1, [pc, #348]	; (800ab70 <netif_add+0x190>)
 800aa14:	4855      	ldr	r0, [pc, #340]	; (800ab6c <netif_add+0x18c>)
 800aa16:	f00c fdc3 	bl	80175a0 <iprintf>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	e09d      	b.n	800ab5a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aa24:	4b53      	ldr	r3, [pc, #332]	; (800ab74 <netif_add+0x194>)
 800aa26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800aa2e:	4b51      	ldr	r3, [pc, #324]	; (800ab74 <netif_add+0x194>)
 800aa30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aa38:	4b4e      	ldr	r3, [pc, #312]	; (800ab74 <netif_add+0x194>)
 800aa3a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	4a49      	ldr	r2, [pc, #292]	; (800ab78 <netif_add+0x198>)
 800aa52:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3324      	adds	r3, #36	; 0x24
 800aa66:	2204      	movs	r2, #4
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f00c f926 	bl	8016cbc <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6a3a      	ldr	r2, [r7, #32]
 800aa7a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aa7c:	4b3f      	ldr	r3, [pc, #252]	; (800ab7c <netif_add+0x19c>)
 800aa7e:	781a      	ldrb	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa8a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	68b9      	ldr	r1, [r7, #8]
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f000 f914 	bl	800acc0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	4798      	blx	r3
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d001      	beq.n	800aaa8 <netif_add+0xc8>
    return NULL;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e058      	b.n	800ab5a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aaae:	2bff      	cmp	r3, #255	; 0xff
 800aab0:	d103      	bne.n	800aaba <netif_add+0xda>
        netif->num = 0;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aabe:	4b30      	ldr	r3, [pc, #192]	; (800ab80 <netif_add+0x1a0>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	617b      	str	r3, [r7, #20]
 800aac4:	e02b      	b.n	800ab1e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d106      	bne.n	800aadc <netif_add+0xfc>
 800aace:	4b25      	ldr	r3, [pc, #148]	; (800ab64 <netif_add+0x184>)
 800aad0:	f240 128b 	movw	r2, #395	; 0x18b
 800aad4:	492b      	ldr	r1, [pc, #172]	; (800ab84 <netif_add+0x1a4>)
 800aad6:	4825      	ldr	r0, [pc, #148]	; (800ab6c <netif_add+0x18c>)
 800aad8:	f00c fd62 	bl	80175a0 <iprintf>
        num_netifs++;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	3301      	adds	r3, #1
 800aae0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	2bff      	cmp	r3, #255	; 0xff
 800aae6:	dd06      	ble.n	800aaf6 <netif_add+0x116>
 800aae8:	4b1e      	ldr	r3, [pc, #120]	; (800ab64 <netif_add+0x184>)
 800aaea:	f240 128d 	movw	r2, #397	; 0x18d
 800aaee:	4926      	ldr	r1, [pc, #152]	; (800ab88 <netif_add+0x1a8>)
 800aaf0:	481e      	ldr	r0, [pc, #120]	; (800ab6c <netif_add+0x18c>)
 800aaf2:	f00c fd55 	bl	80175a0 <iprintf>
        if (netif2->num == netif->num) {
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d108      	bne.n	800ab18 <netif_add+0x138>
          netif->num++;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	b2da      	uxtb	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800ab16:	e005      	b.n	800ab24 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	617b      	str	r3, [r7, #20]
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1d0      	bne.n	800aac6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d1be      	bne.n	800aaa8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab30:	2bfe      	cmp	r3, #254	; 0xfe
 800ab32:	d103      	bne.n	800ab3c <netif_add+0x15c>
    netif_num = 0;
 800ab34:	4b11      	ldr	r3, [pc, #68]	; (800ab7c <netif_add+0x19c>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
 800ab3a:	e006      	b.n	800ab4a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab42:	3301      	adds	r3, #1
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	4b0d      	ldr	r3, [pc, #52]	; (800ab7c <netif_add+0x19c>)
 800ab48:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ab4a:	4b0d      	ldr	r3, [pc, #52]	; (800ab80 <netif_add+0x1a0>)
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ab52:	4a0b      	ldr	r2, [pc, #44]	; (800ab80 <netif_add+0x1a0>)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ab58:	68fb      	ldr	r3, [r7, #12]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	0801cdf0 	.word	0x0801cdf0
 800ab68:	0801ce84 	.word	0x0801ce84
 800ab6c:	0801ce40 	.word	0x0801ce40
 800ab70:	0801cea0 	.word	0x0801cea0
 800ab74:	08032adc 	.word	0x08032adc
 800ab78:	0800aed3 	.word	0x0800aed3
 800ab7c:	20001210 	.word	0x20001210
 800ab80:	2000d848 	.word	0x2000d848
 800ab84:	0801cec4 	.word	0x0801cec4
 800ab88:	0801ced8 	.word	0x0801ced8

0800ab8c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f002 fda9 	bl	800d6f0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ab9e:	6839      	ldr	r1, [r7, #0]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f007 fea1 	bl	80128e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800aba6:	bf00      	nop
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}
	...

0800abb0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d106      	bne.n	800abd0 <netif_do_set_ipaddr+0x20>
 800abc2:	4b1d      	ldr	r3, [pc, #116]	; (800ac38 <netif_do_set_ipaddr+0x88>)
 800abc4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800abc8:	491c      	ldr	r1, [pc, #112]	; (800ac3c <netif_do_set_ipaddr+0x8c>)
 800abca:	481d      	ldr	r0, [pc, #116]	; (800ac40 <netif_do_set_ipaddr+0x90>)
 800abcc:	f00c fce8 	bl	80175a0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d106      	bne.n	800abe4 <netif_do_set_ipaddr+0x34>
 800abd6:	4b18      	ldr	r3, [pc, #96]	; (800ac38 <netif_do_set_ipaddr+0x88>)
 800abd8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800abdc:	4917      	ldr	r1, [pc, #92]	; (800ac3c <netif_do_set_ipaddr+0x8c>)
 800abde:	4818      	ldr	r0, [pc, #96]	; (800ac40 <netif_do_set_ipaddr+0x90>)
 800abe0:	f00c fcde 	bl	80175a0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3304      	adds	r3, #4
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d01c      	beq.n	800ac2c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	3304      	adds	r3, #4
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ac02:	f107 0314 	add.w	r3, r7, #20
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f7ff ffbf 	bl	800ab8c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <netif_do_set_ipaddr+0x6a>
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	e000      	b.n	800ac1c <netif_do_set_ipaddr+0x6c>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ac20:	2101      	movs	r1, #1
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f000 f8d2 	bl	800adcc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e000      	b.n	800ac2e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3718      	adds	r7, #24
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	0801cdf0 	.word	0x0801cdf0
 800ac3c:	0801cf08 	.word	0x0801cf08
 800ac40:	0801ce40 	.word	0x0801ce40

0800ac44 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	3308      	adds	r3, #8
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d00a      	beq.n	800ac74 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <netif_do_set_netmask+0x26>
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	e000      	b.n	800ac6c <netif_do_set_netmask+0x28>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	68fa      	ldr	r2, [r7, #12]
 800ac6e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ac70:	2301      	movs	r3, #1
 800ac72:	e000      	b.n	800ac76 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b085      	sub	sp, #20
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	60f8      	str	r0, [r7, #12]
 800ac8a:	60b9      	str	r1, [r7, #8]
 800ac8c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	330c      	adds	r3, #12
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d00a      	beq.n	800acb2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <netif_do_set_gw+0x26>
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	e000      	b.n	800acaa <netif_do_set_gw+0x28>
 800aca8:	2300      	movs	r3, #0
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800acae:	2301      	movs	r3, #1
 800acb0:	e000      	b.n	800acb4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b088      	sub	sp, #32
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
 800accc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800acdc:	4b1c      	ldr	r3, [pc, #112]	; (800ad50 <netif_set_addr+0x90>)
 800acde:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ace6:	4b1a      	ldr	r3, [pc, #104]	; (800ad50 <netif_set_addr+0x90>)
 800ace8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d101      	bne.n	800acf4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800acf0:	4b17      	ldr	r3, [pc, #92]	; (800ad50 <netif_set_addr+0x90>)
 800acf2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <netif_set_addr+0x42>
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <netif_set_addr+0x46>
 800ad02:	2301      	movs	r3, #1
 800ad04:	e000      	b.n	800ad08 <netif_set_addr+0x48>
 800ad06:	2300      	movs	r3, #0
 800ad08:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d006      	beq.n	800ad1e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad10:	f107 0310 	add.w	r3, r7, #16
 800ad14:	461a      	mov	r2, r3
 800ad16:	68b9      	ldr	r1, [r7, #8]
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff ff49 	bl	800abb0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ad1e:	69fa      	ldr	r2, [r7, #28]
 800ad20:	6879      	ldr	r1, [r7, #4]
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f7ff ff8e 	bl	800ac44 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f7ff ffa8 	bl	800ac82 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d106      	bne.n	800ad46 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ad38:	f107 0310 	add.w	r3, r7, #16
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	68b9      	ldr	r1, [r7, #8]
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f7ff ff35 	bl	800abb0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ad46:	bf00      	nop
 800ad48:	3720      	adds	r7, #32
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	08032adc 	.word	0x08032adc

0800ad54 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ad5c:	4a04      	ldr	r2, [pc, #16]	; (800ad70 <netif_set_default+0x1c>)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ad62:	bf00      	nop
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	2000d84c 	.word	0x2000d84c

0800ad74 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d107      	bne.n	800ad92 <netif_set_up+0x1e>
 800ad82:	4b0f      	ldr	r3, [pc, #60]	; (800adc0 <netif_set_up+0x4c>)
 800ad84:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ad88:	490e      	ldr	r1, [pc, #56]	; (800adc4 <netif_set_up+0x50>)
 800ad8a:	480f      	ldr	r0, [pc, #60]	; (800adc8 <netif_set_up+0x54>)
 800ad8c:	f00c fc08 	bl	80175a0 <iprintf>
 800ad90:	e013      	b.n	800adba <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10c      	bne.n	800adba <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ada6:	f043 0301 	orr.w	r3, r3, #1
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800adb2:	2103      	movs	r1, #3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f809 	bl	800adcc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	0801cdf0 	.word	0x0801cdf0
 800adc4:	0801cf78 	.word	0x0801cf78
 800adc8:	0801ce40 	.word	0x0801ce40

0800adcc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	460b      	mov	r3, r1
 800add6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d106      	bne.n	800adec <netif_issue_reports+0x20>
 800adde:	4b18      	ldr	r3, [pc, #96]	; (800ae40 <netif_issue_reports+0x74>)
 800ade0:	f240 326d 	movw	r2, #877	; 0x36d
 800ade4:	4917      	ldr	r1, [pc, #92]	; (800ae44 <netif_issue_reports+0x78>)
 800ade6:	4818      	ldr	r0, [pc, #96]	; (800ae48 <netif_issue_reports+0x7c>)
 800ade8:	f00c fbda 	bl	80175a0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800adf2:	f003 0304 	and.w	r3, r3, #4
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01e      	beq.n	800ae38 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae00:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d017      	beq.n	800ae38 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d013      	beq.n	800ae3a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	3304      	adds	r3, #4
 800ae16:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00e      	beq.n	800ae3a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae22:	f003 0308 	and.w	r3, r3, #8
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d007      	beq.n	800ae3a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f00a fb27 	bl	8015484 <etharp_request>
 800ae36:	e000      	b.n	800ae3a <netif_issue_reports+0x6e>
    return;
 800ae38:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	0801cdf0 	.word	0x0801cdf0
 800ae44:	0801cf94 	.word	0x0801cf94
 800ae48:	0801ce40 	.word	0x0801ce40

0800ae4c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d107      	bne.n	800ae6a <netif_set_down+0x1e>
 800ae5a:	4b12      	ldr	r3, [pc, #72]	; (800aea4 <netif_set_down+0x58>)
 800ae5c:	f240 329b 	movw	r2, #923	; 0x39b
 800ae60:	4911      	ldr	r1, [pc, #68]	; (800aea8 <netif_set_down+0x5c>)
 800ae62:	4812      	ldr	r0, [pc, #72]	; (800aeac <netif_set_down+0x60>)
 800ae64:	f00c fb9c 	bl	80175a0 <iprintf>
 800ae68:	e019      	b.n	800ae9e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae70:	f003 0301 	and.w	r3, r3, #1
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d012      	beq.n	800ae9e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae7e:	f023 0301 	bic.w	r3, r3, #1
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ae90:	f003 0308 	and.w	r3, r3, #8
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f009 fead 	bl	8014bf8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	0801cdf0 	.word	0x0801cdf0
 800aea8:	0801cfb8 	.word	0x0801cfb8
 800aeac:	0801ce40 	.word	0x0801ce40

0800aeb0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	683a      	ldr	r2, [r7, #0]
 800aec4:	61da      	str	r2, [r3, #28]
  }
}
 800aec6:	bf00      	nop
 800aec8:	370c      	adds	r7, #12
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr

0800aed2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800aed2:	b480      	push	{r7}
 800aed4:	b085      	sub	sp, #20
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	60f8      	str	r0, [r7, #12]
 800aeda:	60b9      	str	r1, [r7, #8]
 800aedc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800aede:	f06f 030b 	mvn.w	r3, #11
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeec:	4770      	bx	lr
	...

0800aef0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	4603      	mov	r3, r0
 800aef8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800aefa:	79fb      	ldrb	r3, [r7, #7]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d013      	beq.n	800af28 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800af00:	4b0d      	ldr	r3, [pc, #52]	; (800af38 <netif_get_by_index+0x48>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	60fb      	str	r3, [r7, #12]
 800af06:	e00c      	b.n	800af22 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af0e:	3301      	adds	r3, #1
 800af10:	b2db      	uxtb	r3, r3
 800af12:	79fa      	ldrb	r2, [r7, #7]
 800af14:	429a      	cmp	r2, r3
 800af16:	d101      	bne.n	800af1c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	e006      	b.n	800af2a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	60fb      	str	r3, [r7, #12]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1ef      	bne.n	800af08 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	2000d848 	.word	0x2000d848

0800af3c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800af42:	4b0c      	ldr	r3, [pc, #48]	; (800af74 <pbuf_free_ooseq+0x38>)
 800af44:	2200      	movs	r2, #0
 800af46:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800af48:	4b0b      	ldr	r3, [pc, #44]	; (800af78 <pbuf_free_ooseq+0x3c>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	607b      	str	r3, [r7, #4]
 800af4e:	e00a      	b.n	800af66 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f002 fc07 	bl	800d76c <tcp_free_ooseq>
      return;
 800af5e:	e005      	b.n	800af6c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68db      	ldr	r3, [r3, #12]
 800af64:	607b      	str	r3, [r7, #4]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1f1      	bne.n	800af50 <pbuf_free_ooseq+0x14>
    }
  }
}
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	2000d850 	.word	0x2000d850
 800af78:	2000d858 	.word	0x2000d858

0800af7c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800af80:	4b03      	ldr	r3, [pc, #12]	; (800af90 <pbuf_pool_is_empty+0x14>)
 800af82:	2201      	movs	r2, #1
 800af84:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800af86:	bf00      	nop
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	2000d850 	.word	0x2000d850

0800af94 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800af94:	b480      	push	{r7}
 800af96:	b085      	sub	sp, #20
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	4611      	mov	r1, r2
 800afa0:	461a      	mov	r2, r3
 800afa2:	460b      	mov	r3, r1
 800afa4:	80fb      	strh	r3, [r7, #6]
 800afa6:	4613      	mov	r3, r2
 800afa8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2200      	movs	r2, #0
 800afae:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	88fa      	ldrh	r2, [r7, #6]
 800afba:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	88ba      	ldrh	r2, [r7, #4]
 800afc0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800afc2:	8b3b      	ldrh	r3, [r7, #24]
 800afc4:	b2da      	uxtb	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	7f3a      	ldrb	r2, [r7, #28]
 800afce:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2201      	movs	r2, #1
 800afd4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2200      	movs	r2, #0
 800afda:	73da      	strb	r2, [r3, #15]
}
 800afdc:	bf00      	nop
 800afde:	3714      	adds	r7, #20
 800afe0:	46bd      	mov	sp, r7
 800afe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe6:	4770      	bx	lr

0800afe8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b08c      	sub	sp, #48	; 0x30
 800afec:	af02      	add	r7, sp, #8
 800afee:	4603      	mov	r3, r0
 800aff0:	71fb      	strb	r3, [r7, #7]
 800aff2:	460b      	mov	r3, r1
 800aff4:	80bb      	strh	r3, [r7, #4]
 800aff6:	4613      	mov	r3, r2
 800aff8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800affe:	887b      	ldrh	r3, [r7, #2]
 800b000:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b004:	d07f      	beq.n	800b106 <pbuf_alloc+0x11e>
 800b006:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b00a:	f300 80c8 	bgt.w	800b19e <pbuf_alloc+0x1b6>
 800b00e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b012:	d010      	beq.n	800b036 <pbuf_alloc+0x4e>
 800b014:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b018:	f300 80c1 	bgt.w	800b19e <pbuf_alloc+0x1b6>
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d002      	beq.n	800b026 <pbuf_alloc+0x3e>
 800b020:	2b41      	cmp	r3, #65	; 0x41
 800b022:	f040 80bc 	bne.w	800b19e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b026:	887a      	ldrh	r2, [r7, #2]
 800b028:	88bb      	ldrh	r3, [r7, #4]
 800b02a:	4619      	mov	r1, r3
 800b02c:	2000      	movs	r0, #0
 800b02e:	f000 f8d1 	bl	800b1d4 <pbuf_alloc_reference>
 800b032:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b034:	e0bd      	b.n	800b1b2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b036:	2300      	movs	r3, #0
 800b038:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b03a:	2300      	movs	r3, #0
 800b03c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b03e:	88bb      	ldrh	r3, [r7, #4]
 800b040:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b042:	2008      	movs	r0, #8
 800b044:	f7ff fc4e 	bl	800a8e4 <memp_malloc>
 800b048:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d109      	bne.n	800b064 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b050:	f7ff ff94 	bl	800af7c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b056:	2b00      	cmp	r3, #0
 800b058:	d002      	beq.n	800b060 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b05a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b05c:	f000 faa8 	bl	800b5b0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b060:	2300      	movs	r3, #0
 800b062:	e0a7      	b.n	800b1b4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b064:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b066:	3303      	adds	r3, #3
 800b068:	b29b      	uxth	r3, r3
 800b06a:	f023 0303 	bic.w	r3, r3, #3
 800b06e:	b29b      	uxth	r3, r3
 800b070:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b074:	b29b      	uxth	r3, r3
 800b076:	8b7a      	ldrh	r2, [r7, #26]
 800b078:	4293      	cmp	r3, r2
 800b07a:	bf28      	it	cs
 800b07c:	4613      	movcs	r3, r2
 800b07e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b080:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b082:	3310      	adds	r3, #16
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	4413      	add	r3, r2
 800b088:	3303      	adds	r3, #3
 800b08a:	f023 0303 	bic.w	r3, r3, #3
 800b08e:	4618      	mov	r0, r3
 800b090:	89f9      	ldrh	r1, [r7, #14]
 800b092:	8b7a      	ldrh	r2, [r7, #26]
 800b094:	2300      	movs	r3, #0
 800b096:	9301      	str	r3, [sp, #4]
 800b098:	887b      	ldrh	r3, [r7, #2]
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	460b      	mov	r3, r1
 800b09e:	4601      	mov	r1, r0
 800b0a0:	6938      	ldr	r0, [r7, #16]
 800b0a2:	f7ff ff77 	bl	800af94 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	f003 0303 	and.w	r3, r3, #3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d006      	beq.n	800b0c0 <pbuf_alloc+0xd8>
 800b0b2:	4b42      	ldr	r3, [pc, #264]	; (800b1bc <pbuf_alloc+0x1d4>)
 800b0b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b0b8:	4941      	ldr	r1, [pc, #260]	; (800b1c0 <pbuf_alloc+0x1d8>)
 800b0ba:	4842      	ldr	r0, [pc, #264]	; (800b1c4 <pbuf_alloc+0x1dc>)
 800b0bc:	f00c fa70 	bl	80175a0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b0c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0c2:	3303      	adds	r3, #3
 800b0c4:	f023 0303 	bic.w	r3, r3, #3
 800b0c8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b0cc:	d106      	bne.n	800b0dc <pbuf_alloc+0xf4>
 800b0ce:	4b3b      	ldr	r3, [pc, #236]	; (800b1bc <pbuf_alloc+0x1d4>)
 800b0d0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b0d4:	493c      	ldr	r1, [pc, #240]	; (800b1c8 <pbuf_alloc+0x1e0>)
 800b0d6:	483b      	ldr	r0, [pc, #236]	; (800b1c4 <pbuf_alloc+0x1dc>)
 800b0d8:	f00c fa62 	bl	80175a0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d102      	bne.n	800b0e8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0e6:	e002      	b.n	800b0ee <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b0f2:	8b7a      	ldrh	r2, [r7, #26]
 800b0f4:	89fb      	ldrh	r3, [r7, #14]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b0fe:	8b7b      	ldrh	r3, [r7, #26]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d19e      	bne.n	800b042 <pbuf_alloc+0x5a>
      break;
 800b104:	e055      	b.n	800b1b2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b106:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b108:	3303      	adds	r3, #3
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	f023 0303 	bic.w	r3, r3, #3
 800b110:	b29a      	uxth	r2, r3
 800b112:	88bb      	ldrh	r3, [r7, #4]
 800b114:	3303      	adds	r3, #3
 800b116:	b29b      	uxth	r3, r3
 800b118:	f023 0303 	bic.w	r3, r3, #3
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	4413      	add	r3, r2
 800b120:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b122:	8b3b      	ldrh	r3, [r7, #24]
 800b124:	3310      	adds	r3, #16
 800b126:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b128:	8b3a      	ldrh	r2, [r7, #24]
 800b12a:	88bb      	ldrh	r3, [r7, #4]
 800b12c:	3303      	adds	r3, #3
 800b12e:	f023 0303 	bic.w	r3, r3, #3
 800b132:	429a      	cmp	r2, r3
 800b134:	d306      	bcc.n	800b144 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b136:	8afa      	ldrh	r2, [r7, #22]
 800b138:	88bb      	ldrh	r3, [r7, #4]
 800b13a:	3303      	adds	r3, #3
 800b13c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b140:	429a      	cmp	r2, r3
 800b142:	d201      	bcs.n	800b148 <pbuf_alloc+0x160>
        return NULL;
 800b144:	2300      	movs	r3, #0
 800b146:	e035      	b.n	800b1b4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b148:	8afb      	ldrh	r3, [r7, #22]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7ff fa5c 	bl	800a608 <mem_malloc>
 800b150:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	d101      	bne.n	800b15c <pbuf_alloc+0x174>
        return NULL;
 800b158:	2300      	movs	r3, #0
 800b15a:	e02b      	b.n	800b1b4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b15c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b15e:	3310      	adds	r3, #16
 800b160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b162:	4413      	add	r3, r2
 800b164:	3303      	adds	r3, #3
 800b166:	f023 0303 	bic.w	r3, r3, #3
 800b16a:	4618      	mov	r0, r3
 800b16c:	88b9      	ldrh	r1, [r7, #4]
 800b16e:	88ba      	ldrh	r2, [r7, #4]
 800b170:	2300      	movs	r3, #0
 800b172:	9301      	str	r3, [sp, #4]
 800b174:	887b      	ldrh	r3, [r7, #2]
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	460b      	mov	r3, r1
 800b17a:	4601      	mov	r1, r0
 800b17c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b17e:	f7ff ff09 	bl	800af94 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	f003 0303 	and.w	r3, r3, #3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d010      	beq.n	800b1b0 <pbuf_alloc+0x1c8>
 800b18e:	4b0b      	ldr	r3, [pc, #44]	; (800b1bc <pbuf_alloc+0x1d4>)
 800b190:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b194:	490d      	ldr	r1, [pc, #52]	; (800b1cc <pbuf_alloc+0x1e4>)
 800b196:	480b      	ldr	r0, [pc, #44]	; (800b1c4 <pbuf_alloc+0x1dc>)
 800b198:	f00c fa02 	bl	80175a0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b19c:	e008      	b.n	800b1b0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b19e:	4b07      	ldr	r3, [pc, #28]	; (800b1bc <pbuf_alloc+0x1d4>)
 800b1a0:	f240 1227 	movw	r2, #295	; 0x127
 800b1a4:	490a      	ldr	r1, [pc, #40]	; (800b1d0 <pbuf_alloc+0x1e8>)
 800b1a6:	4807      	ldr	r0, [pc, #28]	; (800b1c4 <pbuf_alloc+0x1dc>)
 800b1a8:	f00c f9fa 	bl	80175a0 <iprintf>
      return NULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e001      	b.n	800b1b4 <pbuf_alloc+0x1cc>
      break;
 800b1b0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3728      	adds	r7, #40	; 0x28
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}
 800b1bc:	0801d020 	.word	0x0801d020
 800b1c0:	0801d050 	.word	0x0801d050
 800b1c4:	0801d080 	.word	0x0801d080
 800b1c8:	0801d0a8 	.word	0x0801d0a8
 800b1cc:	0801d0dc 	.word	0x0801d0dc
 800b1d0:	0801d108 	.word	0x0801d108

0800b1d4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af02      	add	r7, sp, #8
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	807b      	strh	r3, [r7, #2]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b1e4:	883b      	ldrh	r3, [r7, #0]
 800b1e6:	2b41      	cmp	r3, #65	; 0x41
 800b1e8:	d009      	beq.n	800b1fe <pbuf_alloc_reference+0x2a>
 800b1ea:	883b      	ldrh	r3, [r7, #0]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d006      	beq.n	800b1fe <pbuf_alloc_reference+0x2a>
 800b1f0:	4b0f      	ldr	r3, [pc, #60]	; (800b230 <pbuf_alloc_reference+0x5c>)
 800b1f2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b1f6:	490f      	ldr	r1, [pc, #60]	; (800b234 <pbuf_alloc_reference+0x60>)
 800b1f8:	480f      	ldr	r0, [pc, #60]	; (800b238 <pbuf_alloc_reference+0x64>)
 800b1fa:	f00c f9d1 	bl	80175a0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b1fe:	2007      	movs	r0, #7
 800b200:	f7ff fb70 	bl	800a8e4 <memp_malloc>
 800b204:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b20c:	2300      	movs	r3, #0
 800b20e:	e00b      	b.n	800b228 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b210:	8879      	ldrh	r1, [r7, #2]
 800b212:	887a      	ldrh	r2, [r7, #2]
 800b214:	2300      	movs	r3, #0
 800b216:	9301      	str	r3, [sp, #4]
 800b218:	883b      	ldrh	r3, [r7, #0]
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	460b      	mov	r3, r1
 800b21e:	6879      	ldr	r1, [r7, #4]
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f7ff feb7 	bl	800af94 <pbuf_init_alloced_pbuf>
  return p;
 800b226:	68fb      	ldr	r3, [r7, #12]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3710      	adds	r7, #16
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	0801d020 	.word	0x0801d020
 800b234:	0801d124 	.word	0x0801d124
 800b238:	0801d080 	.word	0x0801d080

0800b23c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b088      	sub	sp, #32
 800b240:	af02      	add	r7, sp, #8
 800b242:	607b      	str	r3, [r7, #4]
 800b244:	4603      	mov	r3, r0
 800b246:	73fb      	strb	r3, [r7, #15]
 800b248:	460b      	mov	r3, r1
 800b24a:	81bb      	strh	r3, [r7, #12]
 800b24c:	4613      	mov	r3, r2
 800b24e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b250:	7bfb      	ldrb	r3, [r7, #15]
 800b252:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b254:	8a7b      	ldrh	r3, [r7, #18]
 800b256:	3303      	adds	r3, #3
 800b258:	f023 0203 	bic.w	r2, r3, #3
 800b25c:	89bb      	ldrh	r3, [r7, #12]
 800b25e:	441a      	add	r2, r3
 800b260:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b262:	429a      	cmp	r2, r3
 800b264:	d901      	bls.n	800b26a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	e018      	b.n	800b29c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d007      	beq.n	800b280 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b270:	8a7b      	ldrh	r3, [r7, #18]
 800b272:	3303      	adds	r3, #3
 800b274:	f023 0303 	bic.w	r3, r3, #3
 800b278:	6a3a      	ldr	r2, [r7, #32]
 800b27a:	4413      	add	r3, r2
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	e001      	b.n	800b284 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b280:	2300      	movs	r3, #0
 800b282:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	89b9      	ldrh	r1, [r7, #12]
 800b288:	89ba      	ldrh	r2, [r7, #12]
 800b28a:	2302      	movs	r3, #2
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	897b      	ldrh	r3, [r7, #10]
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	460b      	mov	r3, r1
 800b294:	6979      	ldr	r1, [r7, #20]
 800b296:	f7ff fe7d 	bl	800af94 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b29a:	687b      	ldr	r3, [r7, #4]
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3718      	adds	r7, #24
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d106      	bne.n	800b2c4 <pbuf_realloc+0x20>
 800b2b6:	4b3a      	ldr	r3, [pc, #232]	; (800b3a0 <pbuf_realloc+0xfc>)
 800b2b8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b2bc:	4939      	ldr	r1, [pc, #228]	; (800b3a4 <pbuf_realloc+0x100>)
 800b2be:	483a      	ldr	r0, [pc, #232]	; (800b3a8 <pbuf_realloc+0x104>)
 800b2c0:	f00c f96e 	bl	80175a0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	891b      	ldrh	r3, [r3, #8]
 800b2c8:	887a      	ldrh	r2, [r7, #2]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d263      	bcs.n	800b396 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	891a      	ldrh	r2, [r3, #8]
 800b2d2:	887b      	ldrh	r3, [r7, #2]
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b2d8:	887b      	ldrh	r3, [r7, #2]
 800b2da:	817b      	strh	r3, [r7, #10]
  q = p;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b2e0:	e018      	b.n	800b314 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	895b      	ldrh	r3, [r3, #10]
 800b2e6:	897a      	ldrh	r2, [r7, #10]
 800b2e8:	1ad3      	subs	r3, r2, r3
 800b2ea:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	891a      	ldrh	r2, [r3, #8]
 800b2f0:	893b      	ldrh	r3, [r7, #8]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d106      	bne.n	800b314 <pbuf_realloc+0x70>
 800b306:	4b26      	ldr	r3, [pc, #152]	; (800b3a0 <pbuf_realloc+0xfc>)
 800b308:	f240 12af 	movw	r2, #431	; 0x1af
 800b30c:	4927      	ldr	r1, [pc, #156]	; (800b3ac <pbuf_realloc+0x108>)
 800b30e:	4826      	ldr	r0, [pc, #152]	; (800b3a8 <pbuf_realloc+0x104>)
 800b310:	f00c f946 	bl	80175a0 <iprintf>
  while (rem_len > q->len) {
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	895b      	ldrh	r3, [r3, #10]
 800b318:	897a      	ldrh	r2, [r7, #10]
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d8e1      	bhi.n	800b2e2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	7b1b      	ldrb	r3, [r3, #12]
 800b322:	f003 030f 	and.w	r3, r3, #15
 800b326:	2b00      	cmp	r3, #0
 800b328:	d121      	bne.n	800b36e <pbuf_realloc+0xca>
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	895b      	ldrh	r3, [r3, #10]
 800b32e:	897a      	ldrh	r2, [r7, #10]
 800b330:	429a      	cmp	r2, r3
 800b332:	d01c      	beq.n	800b36e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	7b5b      	ldrb	r3, [r3, #13]
 800b338:	f003 0302 	and.w	r3, r3, #2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d116      	bne.n	800b36e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	685a      	ldr	r2, [r3, #4]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	b29a      	uxth	r2, r3
 800b34a:	897b      	ldrh	r3, [r7, #10]
 800b34c:	4413      	add	r3, r2
 800b34e:	b29b      	uxth	r3, r3
 800b350:	4619      	mov	r1, r3
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f7ff f85c 	bl	800a410 <mem_trim>
 800b358:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d106      	bne.n	800b36e <pbuf_realloc+0xca>
 800b360:	4b0f      	ldr	r3, [pc, #60]	; (800b3a0 <pbuf_realloc+0xfc>)
 800b362:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b366:	4912      	ldr	r1, [pc, #72]	; (800b3b0 <pbuf_realloc+0x10c>)
 800b368:	480f      	ldr	r0, [pc, #60]	; (800b3a8 <pbuf_realloc+0x104>)
 800b36a:	f00c f919 	bl	80175a0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	897a      	ldrh	r2, [r7, #10]
 800b372:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	895a      	ldrh	r2, [r3, #10]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d004      	beq.n	800b38e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 f911 	bl	800b5b0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	601a      	str	r2, [r3, #0]
 800b394:	e000      	b.n	800b398 <pbuf_realloc+0xf4>
    return;
 800b396:	bf00      	nop

}
 800b398:	3710      	adds	r7, #16
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	0801d020 	.word	0x0801d020
 800b3a4:	0801d138 	.word	0x0801d138
 800b3a8:	0801d080 	.word	0x0801d080
 800b3ac:	0801d150 	.word	0x0801d150
 800b3b0:	0801d168 	.word	0x0801d168

0800b3b4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b086      	sub	sp, #24
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d106      	bne.n	800b3d6 <pbuf_add_header_impl+0x22>
 800b3c8:	4b2b      	ldr	r3, [pc, #172]	; (800b478 <pbuf_add_header_impl+0xc4>)
 800b3ca:	f240 12df 	movw	r2, #479	; 0x1df
 800b3ce:	492b      	ldr	r1, [pc, #172]	; (800b47c <pbuf_add_header_impl+0xc8>)
 800b3d0:	482b      	ldr	r0, [pc, #172]	; (800b480 <pbuf_add_header_impl+0xcc>)
 800b3d2:	f00c f8e5 	bl	80175a0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d003      	beq.n	800b3e4 <pbuf_add_header_impl+0x30>
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e2:	d301      	bcc.n	800b3e8 <pbuf_add_header_impl+0x34>
    return 1;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e043      	b.n	800b470 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d101      	bne.n	800b3f2 <pbuf_add_header_impl+0x3e>
    return 0;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	e03e      	b.n	800b470 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	891a      	ldrh	r2, [r3, #8]
 800b3fa:	8a7b      	ldrh	r3, [r7, #18]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	8a7a      	ldrh	r2, [r7, #18]
 800b402:	429a      	cmp	r2, r3
 800b404:	d901      	bls.n	800b40a <pbuf_add_header_impl+0x56>
    return 1;
 800b406:	2301      	movs	r3, #1
 800b408:	e032      	b.n	800b470 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	7b1b      	ldrb	r3, [r3, #12]
 800b40e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b410:	8a3b      	ldrh	r3, [r7, #16]
 800b412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00c      	beq.n	800b434 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	425b      	negs	r3, r3
 800b422:	4413      	add	r3, r2
 800b424:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	3310      	adds	r3, #16
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d20d      	bcs.n	800b44c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b430:	2301      	movs	r3, #1
 800b432:	e01d      	b.n	800b470 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b434:	79fb      	ldrb	r3, [r7, #7]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d006      	beq.n	800b448 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	685a      	ldr	r2, [r3, #4]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	425b      	negs	r3, r3
 800b442:	4413      	add	r3, r2
 800b444:	617b      	str	r3, [r7, #20]
 800b446:	e001      	b.n	800b44c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b448:	2301      	movs	r3, #1
 800b44a:	e011      	b.n	800b470 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	895a      	ldrh	r2, [r3, #10]
 800b456:	8a7b      	ldrh	r3, [r7, #18]
 800b458:	4413      	add	r3, r2
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	891a      	ldrh	r2, [r3, #8]
 800b464:	8a7b      	ldrh	r3, [r7, #18]
 800b466:	4413      	add	r3, r2
 800b468:	b29a      	uxth	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	811a      	strh	r2, [r3, #8]


  return 0;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3718      	adds	r7, #24
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	0801d020 	.word	0x0801d020
 800b47c:	0801d184 	.word	0x0801d184
 800b480:	0801d080 	.word	0x0801d080

0800b484 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b48e:	2200      	movs	r2, #0
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff ff8e 	bl	800b3b4 <pbuf_add_header_impl>
 800b498:	4603      	mov	r3, r0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
	...

0800b4a4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d106      	bne.n	800b4c2 <pbuf_remove_header+0x1e>
 800b4b4:	4b20      	ldr	r3, [pc, #128]	; (800b538 <pbuf_remove_header+0x94>)
 800b4b6:	f240 224b 	movw	r2, #587	; 0x24b
 800b4ba:	4920      	ldr	r1, [pc, #128]	; (800b53c <pbuf_remove_header+0x98>)
 800b4bc:	4820      	ldr	r0, [pc, #128]	; (800b540 <pbuf_remove_header+0x9c>)
 800b4be:	f00c f86f 	bl	80175a0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d003      	beq.n	800b4d0 <pbuf_remove_header+0x2c>
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ce:	d301      	bcc.n	800b4d4 <pbuf_remove_header+0x30>
    return 1;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e02c      	b.n	800b52e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <pbuf_remove_header+0x3a>
    return 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	e027      	b.n	800b52e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	895b      	ldrh	r3, [r3, #10]
 800b4e6:	89fa      	ldrh	r2, [r7, #14]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d908      	bls.n	800b4fe <pbuf_remove_header+0x5a>
 800b4ec:	4b12      	ldr	r3, [pc, #72]	; (800b538 <pbuf_remove_header+0x94>)
 800b4ee:	f240 2255 	movw	r2, #597	; 0x255
 800b4f2:	4914      	ldr	r1, [pc, #80]	; (800b544 <pbuf_remove_header+0xa0>)
 800b4f4:	4812      	ldr	r0, [pc, #72]	; (800b540 <pbuf_remove_header+0x9c>)
 800b4f6:	f00c f853 	bl	80175a0 <iprintf>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e017      	b.n	800b52e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	685a      	ldr	r2, [r3, #4]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	441a      	add	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	895a      	ldrh	r2, [r3, #10]
 800b514:	89fb      	ldrh	r3, [r7, #14]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	b29a      	uxth	r2, r3
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	891a      	ldrh	r2, [r3, #8]
 800b522:	89fb      	ldrh	r3, [r7, #14]
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	b29a      	uxth	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b52c:	2300      	movs	r3, #0
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	0801d020 	.word	0x0801d020
 800b53c:	0801d184 	.word	0x0801d184
 800b540:	0801d080 	.word	0x0801d080
 800b544:	0801d190 	.word	0x0801d190

0800b548 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	460b      	mov	r3, r1
 800b552:	807b      	strh	r3, [r7, #2]
 800b554:	4613      	mov	r3, r2
 800b556:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b558:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	da08      	bge.n	800b572 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b560:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b564:	425b      	negs	r3, r3
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7ff ff9b 	bl	800b4a4 <pbuf_remove_header>
 800b56e:	4603      	mov	r3, r0
 800b570:	e007      	b.n	800b582 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b572:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b576:	787a      	ldrb	r2, [r7, #1]
 800b578:	4619      	mov	r1, r3
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f7ff ff1a 	bl	800b3b4 <pbuf_add_header_impl>
 800b580:	4603      	mov	r3, r0
  }
}
 800b582:	4618      	mov	r0, r3
 800b584:	3708      	adds	r7, #8
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b082      	sub	sp, #8
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	460b      	mov	r3, r1
 800b594:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b596:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b59a:	2201      	movs	r2, #1
 800b59c:	4619      	mov	r1, r3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f7ff ffd2 	bl	800b548 <pbuf_header_impl>
 800b5a4:	4603      	mov	r3, r0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
	...

0800b5b0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b086      	sub	sp, #24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10b      	bne.n	800b5d6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d106      	bne.n	800b5d2 <pbuf_free+0x22>
 800b5c4:	4b38      	ldr	r3, [pc, #224]	; (800b6a8 <pbuf_free+0xf8>)
 800b5c6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b5ca:	4938      	ldr	r1, [pc, #224]	; (800b6ac <pbuf_free+0xfc>)
 800b5cc:	4838      	ldr	r0, [pc, #224]	; (800b6b0 <pbuf_free+0x100>)
 800b5ce:	f00b ffe7 	bl	80175a0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	e063      	b.n	800b69e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b5da:	e05c      	b.n	800b696 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	7b9b      	ldrb	r3, [r3, #14]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d106      	bne.n	800b5f2 <pbuf_free+0x42>
 800b5e4:	4b30      	ldr	r3, [pc, #192]	; (800b6a8 <pbuf_free+0xf8>)
 800b5e6:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b5ea:	4932      	ldr	r1, [pc, #200]	; (800b6b4 <pbuf_free+0x104>)
 800b5ec:	4830      	ldr	r0, [pc, #192]	; (800b6b0 <pbuf_free+0x100>)
 800b5ee:	f00b ffd7 	bl	80175a0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	7b9b      	ldrb	r3, [r3, #14]
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	b2da      	uxtb	r2, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	739a      	strb	r2, [r3, #14]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	7b9b      	ldrb	r3, [r3, #14]
 800b602:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b604:	7dbb      	ldrb	r3, [r7, #22]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d143      	bne.n	800b692 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	7b1b      	ldrb	r3, [r3, #12]
 800b614:	f003 030f 	and.w	r3, r3, #15
 800b618:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	7b5b      	ldrb	r3, [r3, #13]
 800b61e:	f003 0302 	and.w	r3, r3, #2
 800b622:	2b00      	cmp	r3, #0
 800b624:	d011      	beq.n	800b64a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d106      	bne.n	800b640 <pbuf_free+0x90>
 800b632:	4b1d      	ldr	r3, [pc, #116]	; (800b6a8 <pbuf_free+0xf8>)
 800b634:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b638:	491f      	ldr	r1, [pc, #124]	; (800b6b8 <pbuf_free+0x108>)
 800b63a:	481d      	ldr	r0, [pc, #116]	; (800b6b0 <pbuf_free+0x100>)
 800b63c:	f00b ffb0 	bl	80175a0 <iprintf>
        pc->custom_free_function(p);
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	4798      	blx	r3
 800b648:	e01d      	b.n	800b686 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b64a:	7bfb      	ldrb	r3, [r7, #15]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d104      	bne.n	800b65a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b650:	6879      	ldr	r1, [r7, #4]
 800b652:	2008      	movs	r0, #8
 800b654:	f7ff f992 	bl	800a97c <memp_free>
 800b658:	e015      	b.n	800b686 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b65a:	7bfb      	ldrb	r3, [r7, #15]
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d104      	bne.n	800b66a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	2007      	movs	r0, #7
 800b664:	f7ff f98a 	bl	800a97c <memp_free>
 800b668:	e00d      	b.n	800b686 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b66a:	7bfb      	ldrb	r3, [r7, #15]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d103      	bne.n	800b678 <pbuf_free+0xc8>
          mem_free(p);
 800b670:	6878      	ldr	r0, [r7, #4]
 800b672:	f7fe fe63 	bl	800a33c <mem_free>
 800b676:	e006      	b.n	800b686 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b678:	4b0b      	ldr	r3, [pc, #44]	; (800b6a8 <pbuf_free+0xf8>)
 800b67a:	f240 320f 	movw	r2, #783	; 0x30f
 800b67e:	490f      	ldr	r1, [pc, #60]	; (800b6bc <pbuf_free+0x10c>)
 800b680:	480b      	ldr	r0, [pc, #44]	; (800b6b0 <pbuf_free+0x100>)
 800b682:	f00b ff8d 	bl	80175a0 <iprintf>
        }
      }
      count++;
 800b686:	7dfb      	ldrb	r3, [r7, #23]
 800b688:	3301      	adds	r3, #1
 800b68a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	607b      	str	r3, [r7, #4]
 800b690:	e001      	b.n	800b696 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b692:	2300      	movs	r3, #0
 800b694:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d19f      	bne.n	800b5dc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b69c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	0801d020 	.word	0x0801d020
 800b6ac:	0801d184 	.word	0x0801d184
 800b6b0:	0801d080 	.word	0x0801d080
 800b6b4:	0801d1b0 	.word	0x0801d1b0
 800b6b8:	0801d1c8 	.word	0x0801d1c8
 800b6bc:	0801d1ec 	.word	0x0801d1ec

0800b6c0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b6cc:	e005      	b.n	800b6da <pbuf_clen+0x1a>
    ++len;
 800b6ce:	89fb      	ldrh	r3, [r7, #14]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d1f6      	bne.n	800b6ce <pbuf_clen+0xe>
  }
  return len;
 800b6e0:	89fb      	ldrh	r3, [r7, #14]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3714      	adds	r7, #20
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
	...

0800b6f0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d010      	beq.n	800b720 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	7b9b      	ldrb	r3, [r3, #14]
 800b702:	3301      	adds	r3, #1
 800b704:	b2da      	uxtb	r2, r3
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	7b9b      	ldrb	r3, [r3, #14]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d106      	bne.n	800b720 <pbuf_ref+0x30>
 800b712:	4b05      	ldr	r3, [pc, #20]	; (800b728 <pbuf_ref+0x38>)
 800b714:	f240 3242 	movw	r2, #834	; 0x342
 800b718:	4904      	ldr	r1, [pc, #16]	; (800b72c <pbuf_ref+0x3c>)
 800b71a:	4805      	ldr	r0, [pc, #20]	; (800b730 <pbuf_ref+0x40>)
 800b71c:	f00b ff40 	bl	80175a0 <iprintf>
  }
}
 800b720:	bf00      	nop
 800b722:	3708      	adds	r7, #8
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	0801d020 	.word	0x0801d020
 800b72c:	0801d200 	.word	0x0801d200
 800b730:	0801d080 	.word	0x0801d080

0800b734 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <pbuf_cat+0x16>
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d107      	bne.n	800b75a <pbuf_cat+0x26>
 800b74a:	4b20      	ldr	r3, [pc, #128]	; (800b7cc <pbuf_cat+0x98>)
 800b74c:	f240 3259 	movw	r2, #857	; 0x359
 800b750:	491f      	ldr	r1, [pc, #124]	; (800b7d0 <pbuf_cat+0x9c>)
 800b752:	4820      	ldr	r0, [pc, #128]	; (800b7d4 <pbuf_cat+0xa0>)
 800b754:	f00b ff24 	bl	80175a0 <iprintf>
 800b758:	e034      	b.n	800b7c4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60fb      	str	r3, [r7, #12]
 800b75e:	e00a      	b.n	800b776 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	891a      	ldrh	r2, [r3, #8]
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	891b      	ldrh	r3, [r3, #8]
 800b768:	4413      	add	r3, r2
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	60fb      	str	r3, [r7, #12]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d1f0      	bne.n	800b760 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	891a      	ldrh	r2, [r3, #8]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	895b      	ldrh	r3, [r3, #10]
 800b786:	429a      	cmp	r2, r3
 800b788:	d006      	beq.n	800b798 <pbuf_cat+0x64>
 800b78a:	4b10      	ldr	r3, [pc, #64]	; (800b7cc <pbuf_cat+0x98>)
 800b78c:	f240 3262 	movw	r2, #866	; 0x362
 800b790:	4911      	ldr	r1, [pc, #68]	; (800b7d8 <pbuf_cat+0xa4>)
 800b792:	4810      	ldr	r0, [pc, #64]	; (800b7d4 <pbuf_cat+0xa0>)
 800b794:	f00b ff04 	bl	80175a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d006      	beq.n	800b7ae <pbuf_cat+0x7a>
 800b7a0:	4b0a      	ldr	r3, [pc, #40]	; (800b7cc <pbuf_cat+0x98>)
 800b7a2:	f240 3263 	movw	r2, #867	; 0x363
 800b7a6:	490d      	ldr	r1, [pc, #52]	; (800b7dc <pbuf_cat+0xa8>)
 800b7a8:	480a      	ldr	r0, [pc, #40]	; (800b7d4 <pbuf_cat+0xa0>)
 800b7aa:	f00b fef9 	bl	80175a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	891a      	ldrh	r2, [r3, #8]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	891b      	ldrh	r3, [r3, #8]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	0801d020 	.word	0x0801d020
 800b7d0:	0801d214 	.word	0x0801d214
 800b7d4:	0801d080 	.word	0x0801d080
 800b7d8:	0801d24c 	.word	0x0801d24c
 800b7dc:	0801d27c 	.word	0x0801d27c

0800b7e0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b082      	sub	sp, #8
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
 800b7e8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b7ea:	6839      	ldr	r1, [r7, #0]
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff ffa1 	bl	800b734 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b7f2:	6838      	ldr	r0, [r7, #0]
 800b7f4:	f7ff ff7c 	bl	800b6f0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b7f8:	bf00      	nop
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	2300      	movs	r3, #0
 800b810:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d008      	beq.n	800b82a <pbuf_copy+0x2a>
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d005      	beq.n	800b82a <pbuf_copy+0x2a>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	891a      	ldrh	r2, [r3, #8]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	891b      	ldrh	r3, [r3, #8]
 800b826:	429a      	cmp	r2, r3
 800b828:	d209      	bcs.n	800b83e <pbuf_copy+0x3e>
 800b82a:	4b57      	ldr	r3, [pc, #348]	; (800b988 <pbuf_copy+0x188>)
 800b82c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b830:	4956      	ldr	r1, [pc, #344]	; (800b98c <pbuf_copy+0x18c>)
 800b832:	4857      	ldr	r0, [pc, #348]	; (800b990 <pbuf_copy+0x190>)
 800b834:	f00b feb4 	bl	80175a0 <iprintf>
 800b838:	f06f 030f 	mvn.w	r3, #15
 800b83c:	e09f      	b.n	800b97e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	895b      	ldrh	r3, [r3, #10]
 800b842:	461a      	mov	r2, r3
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	1ad2      	subs	r2, r2, r3
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	895b      	ldrh	r3, [r3, #10]
 800b84c:	4619      	mov	r1, r3
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	1acb      	subs	r3, r1, r3
 800b852:	429a      	cmp	r2, r3
 800b854:	d306      	bcc.n	800b864 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	895b      	ldrh	r3, [r3, #10]
 800b85a:	461a      	mov	r2, r3
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	60fb      	str	r3, [r7, #12]
 800b862:	e005      	b.n	800b870 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	895b      	ldrh	r3, [r3, #10]
 800b868:	461a      	mov	r2, r3
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	1ad3      	subs	r3, r2, r3
 800b86e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	685a      	ldr	r2, [r3, #4]
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	18d0      	adds	r0, r2, r3
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	4413      	add	r3, r2
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4619      	mov	r1, r3
 800b884:	f00b f9f2 	bl	8016c6c <memcpy>
    offset_to += len;
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	4413      	add	r3, r2
 800b88e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	4413      	add	r3, r2
 800b896:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	895b      	ldrh	r3, [r3, #10]
 800b89c:	461a      	mov	r2, r3
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d906      	bls.n	800b8b2 <pbuf_copy+0xb2>
 800b8a4:	4b38      	ldr	r3, [pc, #224]	; (800b988 <pbuf_copy+0x188>)
 800b8a6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b8aa:	493a      	ldr	r1, [pc, #232]	; (800b994 <pbuf_copy+0x194>)
 800b8ac:	4838      	ldr	r0, [pc, #224]	; (800b990 <pbuf_copy+0x190>)
 800b8ae:	f00b fe77 	bl	80175a0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	895b      	ldrh	r3, [r3, #10]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d906      	bls.n	800b8cc <pbuf_copy+0xcc>
 800b8be:	4b32      	ldr	r3, [pc, #200]	; (800b988 <pbuf_copy+0x188>)
 800b8c0:	f240 32da 	movw	r2, #986	; 0x3da
 800b8c4:	4934      	ldr	r1, [pc, #208]	; (800b998 <pbuf_copy+0x198>)
 800b8c6:	4832      	ldr	r0, [pc, #200]	; (800b990 <pbuf_copy+0x190>)
 800b8c8:	f00b fe6a 	bl	80175a0 <iprintf>
    if (offset_from >= p_from->len) {
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	895b      	ldrh	r3, [r3, #10]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d304      	bcc.n	800b8e2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	895b      	ldrh	r3, [r3, #10]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d114      	bne.n	800b918 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10c      	bne.n	800b918 <pbuf_copy+0x118>
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d009      	beq.n	800b918 <pbuf_copy+0x118>
 800b904:	4b20      	ldr	r3, [pc, #128]	; (800b988 <pbuf_copy+0x188>)
 800b906:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b90a:	4924      	ldr	r1, [pc, #144]	; (800b99c <pbuf_copy+0x19c>)
 800b90c:	4820      	ldr	r0, [pc, #128]	; (800b990 <pbuf_copy+0x190>)
 800b90e:	f00b fe47 	bl	80175a0 <iprintf>
 800b912:	f06f 030f 	mvn.w	r3, #15
 800b916:	e032      	b.n	800b97e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d013      	beq.n	800b946 <pbuf_copy+0x146>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	895a      	ldrh	r2, [r3, #10]
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	891b      	ldrh	r3, [r3, #8]
 800b926:	429a      	cmp	r2, r3
 800b928:	d10d      	bne.n	800b946 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d009      	beq.n	800b946 <pbuf_copy+0x146>
 800b932:	4b15      	ldr	r3, [pc, #84]	; (800b988 <pbuf_copy+0x188>)
 800b934:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b938:	4919      	ldr	r1, [pc, #100]	; (800b9a0 <pbuf_copy+0x1a0>)
 800b93a:	4815      	ldr	r0, [pc, #84]	; (800b990 <pbuf_copy+0x190>)
 800b93c:	f00b fe30 	bl	80175a0 <iprintf>
 800b940:	f06f 0305 	mvn.w	r3, #5
 800b944:	e01b      	b.n	800b97e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d013      	beq.n	800b974 <pbuf_copy+0x174>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	895a      	ldrh	r2, [r3, #10]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	891b      	ldrh	r3, [r3, #8]
 800b954:	429a      	cmp	r2, r3
 800b956:	d10d      	bne.n	800b974 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d009      	beq.n	800b974 <pbuf_copy+0x174>
 800b960:	4b09      	ldr	r3, [pc, #36]	; (800b988 <pbuf_copy+0x188>)
 800b962:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b966:	490e      	ldr	r1, [pc, #56]	; (800b9a0 <pbuf_copy+0x1a0>)
 800b968:	4809      	ldr	r0, [pc, #36]	; (800b990 <pbuf_copy+0x190>)
 800b96a:	f00b fe19 	bl	80175a0 <iprintf>
 800b96e:	f06f 0305 	mvn.w	r3, #5
 800b972:	e004      	b.n	800b97e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b00      	cmp	r3, #0
 800b978:	f47f af61 	bne.w	800b83e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	0801d020 	.word	0x0801d020
 800b98c:	0801d2c8 	.word	0x0801d2c8
 800b990:	0801d080 	.word	0x0801d080
 800b994:	0801d2f8 	.word	0x0801d2f8
 800b998:	0801d310 	.word	0x0801d310
 800b99c:	0801d32c 	.word	0x0801d32c
 800b9a0:	0801d33c 	.word	0x0801d33c

0800b9a4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b088      	sub	sp, #32
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	80fb      	strh	r3, [r7, #6]
 800b9b6:	4613      	mov	r3, r2
 800b9b8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d108      	bne.n	800b9da <pbuf_copy_partial+0x36>
 800b9c8:	4b2b      	ldr	r3, [pc, #172]	; (800ba78 <pbuf_copy_partial+0xd4>)
 800b9ca:	f240 420a 	movw	r2, #1034	; 0x40a
 800b9ce:	492b      	ldr	r1, [pc, #172]	; (800ba7c <pbuf_copy_partial+0xd8>)
 800b9d0:	482b      	ldr	r0, [pc, #172]	; (800ba80 <pbuf_copy_partial+0xdc>)
 800b9d2:	f00b fde5 	bl	80175a0 <iprintf>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	e04a      	b.n	800ba70 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d108      	bne.n	800b9f2 <pbuf_copy_partial+0x4e>
 800b9e0:	4b25      	ldr	r3, [pc, #148]	; (800ba78 <pbuf_copy_partial+0xd4>)
 800b9e2:	f240 420b 	movw	r2, #1035	; 0x40b
 800b9e6:	4927      	ldr	r1, [pc, #156]	; (800ba84 <pbuf_copy_partial+0xe0>)
 800b9e8:	4825      	ldr	r0, [pc, #148]	; (800ba80 <pbuf_copy_partial+0xdc>)
 800b9ea:	f00b fdd9 	bl	80175a0 <iprintf>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	e03e      	b.n	800ba70 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	61fb      	str	r3, [r7, #28]
 800b9f6:	e034      	b.n	800ba62 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b9f8:	88bb      	ldrh	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00a      	beq.n	800ba14 <pbuf_copy_partial+0x70>
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	895b      	ldrh	r3, [r3, #10]
 800ba02:	88ba      	ldrh	r2, [r7, #4]
 800ba04:	429a      	cmp	r2, r3
 800ba06:	d305      	bcc.n	800ba14 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	895b      	ldrh	r3, [r3, #10]
 800ba0c:	88ba      	ldrh	r2, [r7, #4]
 800ba0e:	1ad3      	subs	r3, r2, r3
 800ba10:	80bb      	strh	r3, [r7, #4]
 800ba12:	e023      	b.n	800ba5c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	895a      	ldrh	r2, [r3, #10]
 800ba18:	88bb      	ldrh	r3, [r7, #4]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ba1e:	8b3a      	ldrh	r2, [r7, #24]
 800ba20:	88fb      	ldrh	r3, [r7, #6]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d901      	bls.n	800ba2a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ba26:	88fb      	ldrh	r3, [r7, #6]
 800ba28:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ba2a:	8b7b      	ldrh	r3, [r7, #26]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	18d0      	adds	r0, r2, r3
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	685a      	ldr	r2, [r3, #4]
 800ba34:	88bb      	ldrh	r3, [r7, #4]
 800ba36:	4413      	add	r3, r2
 800ba38:	8b3a      	ldrh	r2, [r7, #24]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	f00b f916 	bl	8016c6c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ba40:	8afa      	ldrh	r2, [r7, #22]
 800ba42:	8b3b      	ldrh	r3, [r7, #24]
 800ba44:	4413      	add	r3, r2
 800ba46:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ba48:	8b7a      	ldrh	r2, [r7, #26]
 800ba4a:	8b3b      	ldrh	r3, [r7, #24]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ba50:	88fa      	ldrh	r2, [r7, #6]
 800ba52:	8b3b      	ldrh	r3, [r7, #24]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	61fb      	str	r3, [r7, #28]
 800ba62:	88fb      	ldrh	r3, [r7, #6]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <pbuf_copy_partial+0xca>
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1c4      	bne.n	800b9f8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ba6e:	8afb      	ldrh	r3, [r7, #22]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3720      	adds	r7, #32
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	0801d020 	.word	0x0801d020
 800ba7c:	0801d368 	.word	0x0801d368
 800ba80:	0801d080 	.word	0x0801d080
 800ba84:	0801d388 	.word	0x0801d388

0800ba88 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	4603      	mov	r3, r0
 800ba90:	603a      	str	r2, [r7, #0]
 800ba92:	71fb      	strb	r3, [r7, #7]
 800ba94:	460b      	mov	r3, r1
 800ba96:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	8919      	ldrh	r1, [r3, #8]
 800ba9c:	88ba      	ldrh	r2, [r7, #4]
 800ba9e:	79fb      	ldrb	r3, [r7, #7]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7ff faa1 	bl	800afe8 <pbuf_alloc>
 800baa6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <pbuf_clone+0x2a>
    return NULL;
 800baae:	2300      	movs	r3, #0
 800bab0:	e011      	b.n	800bad6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f7ff fea3 	bl	800b800 <pbuf_copy>
 800baba:	4603      	mov	r3, r0
 800babc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800babe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d006      	beq.n	800bad4 <pbuf_clone+0x4c>
 800bac6:	4b06      	ldr	r3, [pc, #24]	; (800bae0 <pbuf_clone+0x58>)
 800bac8:	f240 5224 	movw	r2, #1316	; 0x524
 800bacc:	4905      	ldr	r1, [pc, #20]	; (800bae4 <pbuf_clone+0x5c>)
 800bace:	4806      	ldr	r0, [pc, #24]	; (800bae8 <pbuf_clone+0x60>)
 800bad0:	f00b fd66 	bl	80175a0 <iprintf>
  return q;
 800bad4:	68fb      	ldr	r3, [r7, #12]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	0801d020 	.word	0x0801d020
 800bae4:	0801d494 	.word	0x0801d494
 800bae8:	0801d080 	.word	0x0801d080

0800baec <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800baf0:	f00b fde4 	bl	80176bc <rand>
 800baf4:	4603      	mov	r3, r0
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	4b01      	ldr	r3, [pc, #4]	; (800bb0c <tcp_init+0x20>)
 800bb06:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bb08:	bf00      	nop
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	200005ba 	.word	0x200005ba

0800bb10 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	7d1b      	ldrb	r3, [r3, #20]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d105      	bne.n	800bb2c <tcp_free+0x1c>
 800bb20:	4b06      	ldr	r3, [pc, #24]	; (800bb3c <tcp_free+0x2c>)
 800bb22:	22d4      	movs	r2, #212	; 0xd4
 800bb24:	4906      	ldr	r1, [pc, #24]	; (800bb40 <tcp_free+0x30>)
 800bb26:	4807      	ldr	r0, [pc, #28]	; (800bb44 <tcp_free+0x34>)
 800bb28:	f00b fd3a 	bl	80175a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bb2c:	6879      	ldr	r1, [r7, #4]
 800bb2e:	2001      	movs	r0, #1
 800bb30:	f7fe ff24 	bl	800a97c <memp_free>
}
 800bb34:	bf00      	nop
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	0801d520 	.word	0x0801d520
 800bb40:	0801d550 	.word	0x0801d550
 800bb44:	0801d564 	.word	0x0801d564

0800bb48 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	7d1b      	ldrb	r3, [r3, #20]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d105      	bne.n	800bb64 <tcp_free_listen+0x1c>
 800bb58:	4b06      	ldr	r3, [pc, #24]	; (800bb74 <tcp_free_listen+0x2c>)
 800bb5a:	22df      	movs	r2, #223	; 0xdf
 800bb5c:	4906      	ldr	r1, [pc, #24]	; (800bb78 <tcp_free_listen+0x30>)
 800bb5e:	4807      	ldr	r0, [pc, #28]	; (800bb7c <tcp_free_listen+0x34>)
 800bb60:	f00b fd1e 	bl	80175a0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bb64:	6879      	ldr	r1, [r7, #4]
 800bb66:	2002      	movs	r0, #2
 800bb68:	f7fe ff08 	bl	800a97c <memp_free>
}
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	0801d520 	.word	0x0801d520
 800bb78:	0801d58c 	.word	0x0801d58c
 800bb7c:	0801d564 	.word	0x0801d564

0800bb80 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bb84:	f001 f860 	bl	800cc48 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bb88:	4b07      	ldr	r3, [pc, #28]	; (800bba8 <tcp_tmr+0x28>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	4b05      	ldr	r3, [pc, #20]	; (800bba8 <tcp_tmr+0x28>)
 800bb92:	701a      	strb	r2, [r3, #0]
 800bb94:	4b04      	ldr	r3, [pc, #16]	; (800bba8 <tcp_tmr+0x28>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	f003 0301 	and.w	r3, r3, #1
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bba0:	f000 fd12 	bl	800c5c8 <tcp_slowtmr>
  }
}
 800bba4:	bf00      	nop
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	20001211 	.word	0x20001211

0800bbac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d105      	bne.n	800bbc8 <tcp_remove_listener+0x1c>
 800bbbc:	4b0d      	ldr	r3, [pc, #52]	; (800bbf4 <tcp_remove_listener+0x48>)
 800bbbe:	22ff      	movs	r2, #255	; 0xff
 800bbc0:	490d      	ldr	r1, [pc, #52]	; (800bbf8 <tcp_remove_listener+0x4c>)
 800bbc2:	480e      	ldr	r0, [pc, #56]	; (800bbfc <tcp_remove_listener+0x50>)
 800bbc4:	f00b fcec 	bl	80175a0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	e00a      	b.n	800bbe4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d102      	bne.n	800bbde <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	68db      	ldr	r3, [r3, #12]
 800bbe2:	60fb      	str	r3, [r7, #12]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1f1      	bne.n	800bbce <tcp_remove_listener+0x22>
    }
  }
}
 800bbea:	bf00      	nop
 800bbec:	bf00      	nop
 800bbee:	3710      	adds	r7, #16
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	0801d520 	.word	0x0801d520
 800bbf8:	0801d5a8 	.word	0x0801d5a8
 800bbfc:	0801d564 	.word	0x0801d564

0800bc00 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d106      	bne.n	800bc1c <tcp_listen_closed+0x1c>
 800bc0e:	4b14      	ldr	r3, [pc, #80]	; (800bc60 <tcp_listen_closed+0x60>)
 800bc10:	f240 1211 	movw	r2, #273	; 0x111
 800bc14:	4913      	ldr	r1, [pc, #76]	; (800bc64 <tcp_listen_closed+0x64>)
 800bc16:	4814      	ldr	r0, [pc, #80]	; (800bc68 <tcp_listen_closed+0x68>)
 800bc18:	f00b fcc2 	bl	80175a0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	7d1b      	ldrb	r3, [r3, #20]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d006      	beq.n	800bc32 <tcp_listen_closed+0x32>
 800bc24:	4b0e      	ldr	r3, [pc, #56]	; (800bc60 <tcp_listen_closed+0x60>)
 800bc26:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bc2a:	4910      	ldr	r1, [pc, #64]	; (800bc6c <tcp_listen_closed+0x6c>)
 800bc2c:	480e      	ldr	r0, [pc, #56]	; (800bc68 <tcp_listen_closed+0x68>)
 800bc2e:	f00b fcb7 	bl	80175a0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc32:	2301      	movs	r3, #1
 800bc34:	60fb      	str	r3, [r7, #12]
 800bc36:	e00b      	b.n	800bc50 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bc38:	4a0d      	ldr	r2, [pc, #52]	; (800bc70 <tcp_listen_closed+0x70>)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff ffb1 	bl	800bbac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	60fb      	str	r3, [r7, #12]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d9f0      	bls.n	800bc38 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bc56:	bf00      	nop
 800bc58:	bf00      	nop
 800bc5a:	3710      	adds	r7, #16
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	0801d520 	.word	0x0801d520
 800bc64:	0801d5d0 	.word	0x0801d5d0
 800bc68:	0801d564 	.word	0x0801d564
 800bc6c:	0801d5dc 	.word	0x0801d5dc
 800bc70:	08032aa4 	.word	0x08032aa4

0800bc74 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bc74:	b5b0      	push	{r4, r5, r7, lr}
 800bc76:	b088      	sub	sp, #32
 800bc78:	af04      	add	r7, sp, #16
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d106      	bne.n	800bc94 <tcp_close_shutdown+0x20>
 800bc86:	4b63      	ldr	r3, [pc, #396]	; (800be14 <tcp_close_shutdown+0x1a0>)
 800bc88:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bc8c:	4962      	ldr	r1, [pc, #392]	; (800be18 <tcp_close_shutdown+0x1a4>)
 800bc8e:	4863      	ldr	r0, [pc, #396]	; (800be1c <tcp_close_shutdown+0x1a8>)
 800bc90:	f00b fc86 	bl	80175a0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bc94:	78fb      	ldrb	r3, [r7, #3]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d066      	beq.n	800bd68 <tcp_close_shutdown+0xf4>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	7d1b      	ldrb	r3, [r3, #20]
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	d003      	beq.n	800bcaa <tcp_close_shutdown+0x36>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	7d1b      	ldrb	r3, [r3, #20]
 800bca6:	2b07      	cmp	r3, #7
 800bca8:	d15e      	bne.n	800bd68 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d104      	bne.n	800bcbc <tcp_close_shutdown+0x48>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcb6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bcba:	d055      	beq.n	800bd68 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	8b5b      	ldrh	r3, [r3, #26]
 800bcc0:	f003 0310 	and.w	r3, r3, #16
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d106      	bne.n	800bcd6 <tcp_close_shutdown+0x62>
 800bcc8:	4b52      	ldr	r3, [pc, #328]	; (800be14 <tcp_close_shutdown+0x1a0>)
 800bcca:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bcce:	4954      	ldr	r1, [pc, #336]	; (800be20 <tcp_close_shutdown+0x1ac>)
 800bcd0:	4852      	ldr	r0, [pc, #328]	; (800be1c <tcp_close_shutdown+0x1a8>)
 800bcd2:	f00b fc65 	bl	80175a0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bcde:	687d      	ldr	r5, [r7, #4]
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3304      	adds	r3, #4
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	8ad2      	ldrh	r2, [r2, #22]
 800bce8:	6879      	ldr	r1, [r7, #4]
 800bcea:	8b09      	ldrh	r1, [r1, #24]
 800bcec:	9102      	str	r1, [sp, #8]
 800bcee:	9201      	str	r2, [sp, #4]
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	462b      	mov	r3, r5
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	4601      	mov	r1, r0
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f005 fe59 	bl	80119b0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f001 fb72 	bl	800d3e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bd04:	4b47      	ldr	r3, [pc, #284]	; (800be24 <tcp_close_shutdown+0x1b0>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d105      	bne.n	800bd1a <tcp_close_shutdown+0xa6>
 800bd0e:	4b45      	ldr	r3, [pc, #276]	; (800be24 <tcp_close_shutdown+0x1b0>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	4a43      	ldr	r2, [pc, #268]	; (800be24 <tcp_close_shutdown+0x1b0>)
 800bd16:	6013      	str	r3, [r2, #0]
 800bd18:	e013      	b.n	800bd42 <tcp_close_shutdown+0xce>
 800bd1a:	4b42      	ldr	r3, [pc, #264]	; (800be24 <tcp_close_shutdown+0x1b0>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	60fb      	str	r3, [r7, #12]
 800bd20:	e00c      	b.n	800bd3c <tcp_close_shutdown+0xc8>
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d104      	bne.n	800bd36 <tcp_close_shutdown+0xc2>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	68da      	ldr	r2, [r3, #12]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	60da      	str	r2, [r3, #12]
 800bd34:	e005      	b.n	800bd42 <tcp_close_shutdown+0xce>
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	60fb      	str	r3, [r7, #12]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1ef      	bne.n	800bd22 <tcp_close_shutdown+0xae>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	60da      	str	r2, [r3, #12]
 800bd48:	4b37      	ldr	r3, [pc, #220]	; (800be28 <tcp_close_shutdown+0x1b4>)
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bd4e:	4b37      	ldr	r3, [pc, #220]	; (800be2c <tcp_close_shutdown+0x1b8>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d102      	bne.n	800bd5e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bd58:	f004 f8c8 	bl	800feec <tcp_trigger_input_pcb_close>
 800bd5c:	e002      	b.n	800bd64 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7ff fed6 	bl	800bb10 <tcp_free>
      }
      return ERR_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	e050      	b.n	800be0a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	7d1b      	ldrb	r3, [r3, #20]
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d03b      	beq.n	800bde8 <tcp_close_shutdown+0x174>
 800bd70:	2b02      	cmp	r3, #2
 800bd72:	dc44      	bgt.n	800bdfe <tcp_close_shutdown+0x18a>
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d002      	beq.n	800bd7e <tcp_close_shutdown+0x10a>
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d02a      	beq.n	800bdd2 <tcp_close_shutdown+0x15e>
 800bd7c:	e03f      	b.n	800bdfe <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	8adb      	ldrh	r3, [r3, #22]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d021      	beq.n	800bdca <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bd86:	4b2a      	ldr	r3, [pc, #168]	; (800be30 <tcp_close_shutdown+0x1bc>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d105      	bne.n	800bd9c <tcp_close_shutdown+0x128>
 800bd90:	4b27      	ldr	r3, [pc, #156]	; (800be30 <tcp_close_shutdown+0x1bc>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	4a26      	ldr	r2, [pc, #152]	; (800be30 <tcp_close_shutdown+0x1bc>)
 800bd98:	6013      	str	r3, [r2, #0]
 800bd9a:	e013      	b.n	800bdc4 <tcp_close_shutdown+0x150>
 800bd9c:	4b24      	ldr	r3, [pc, #144]	; (800be30 <tcp_close_shutdown+0x1bc>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	60bb      	str	r3, [r7, #8]
 800bda2:	e00c      	b.n	800bdbe <tcp_close_shutdown+0x14a>
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d104      	bne.n	800bdb8 <tcp_close_shutdown+0x144>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	68da      	ldr	r2, [r3, #12]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	60da      	str	r2, [r3, #12]
 800bdb6:	e005      	b.n	800bdc4 <tcp_close_shutdown+0x150>
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	60bb      	str	r3, [r7, #8]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1ef      	bne.n	800bda4 <tcp_close_shutdown+0x130>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7ff fea0 	bl	800bb10 <tcp_free>
      break;
 800bdd0:	e01a      	b.n	800be08 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7ff ff14 	bl	800bc00 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	4816      	ldr	r0, [pc, #88]	; (800be34 <tcp_close_shutdown+0x1c0>)
 800bddc:	f001 fb54 	bl	800d488 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff feb1 	bl	800bb48 <tcp_free_listen>
      break;
 800bde6:	e00f      	b.n	800be08 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bde8:	6879      	ldr	r1, [r7, #4]
 800bdea:	480e      	ldr	r0, [pc, #56]	; (800be24 <tcp_close_shutdown+0x1b0>)
 800bdec:	f001 fb4c 	bl	800d488 <tcp_pcb_remove>
 800bdf0:	4b0d      	ldr	r3, [pc, #52]	; (800be28 <tcp_close_shutdown+0x1b4>)
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f7ff fe8a 	bl	800bb10 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bdfc:	e004      	b.n	800be08 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f81a 	bl	800be38 <tcp_close_shutdown_fin>
 800be04:	4603      	mov	r3, r0
 800be06:	e000      	b.n	800be0a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bdb0      	pop	{r4, r5, r7, pc}
 800be12:	bf00      	nop
 800be14:	0801d520 	.word	0x0801d520
 800be18:	0801d5f4 	.word	0x0801d5f4
 800be1c:	0801d564 	.word	0x0801d564
 800be20:	0801d614 	.word	0x0801d614
 800be24:	2000d858 	.word	0x2000d858
 800be28:	2000d854 	.word	0x2000d854
 800be2c:	2000d86c 	.word	0x2000d86c
 800be30:	2000d864 	.word	0x2000d864
 800be34:	2000d860 	.word	0x2000d860

0800be38 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d106      	bne.n	800be54 <tcp_close_shutdown_fin+0x1c>
 800be46:	4b2e      	ldr	r3, [pc, #184]	; (800bf00 <tcp_close_shutdown_fin+0xc8>)
 800be48:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800be4c:	492d      	ldr	r1, [pc, #180]	; (800bf04 <tcp_close_shutdown_fin+0xcc>)
 800be4e:	482e      	ldr	r0, [pc, #184]	; (800bf08 <tcp_close_shutdown_fin+0xd0>)
 800be50:	f00b fba6 	bl	80175a0 <iprintf>

  switch (pcb->state) {
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	7d1b      	ldrb	r3, [r3, #20]
 800be58:	2b07      	cmp	r3, #7
 800be5a:	d020      	beq.n	800be9e <tcp_close_shutdown_fin+0x66>
 800be5c:	2b07      	cmp	r3, #7
 800be5e:	dc2b      	bgt.n	800beb8 <tcp_close_shutdown_fin+0x80>
 800be60:	2b03      	cmp	r3, #3
 800be62:	d002      	beq.n	800be6a <tcp_close_shutdown_fin+0x32>
 800be64:	2b04      	cmp	r3, #4
 800be66:	d00d      	beq.n	800be84 <tcp_close_shutdown_fin+0x4c>
 800be68:	e026      	b.n	800beb8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f004 fea8 	bl	8010bc0 <tcp_send_fin>
 800be70:	4603      	mov	r3, r0
 800be72:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d11f      	bne.n	800bebc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2205      	movs	r2, #5
 800be80:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be82:	e01b      	b.n	800bebc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f004 fe9b 	bl	8010bc0 <tcp_send_fin>
 800be8a:	4603      	mov	r3, r0
 800be8c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d114      	bne.n	800bec0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2205      	movs	r2, #5
 800be9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be9c:	e010      	b.n	800bec0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f004 fe8e 	bl	8010bc0 <tcp_send_fin>
 800bea4:	4603      	mov	r3, r0
 800bea6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d109      	bne.n	800bec4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2209      	movs	r2, #9
 800beb4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800beb6:	e005      	b.n	800bec4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	e01c      	b.n	800bef6 <tcp_close_shutdown_fin+0xbe>
      break;
 800bebc:	bf00      	nop
 800bebe:	e002      	b.n	800bec6 <tcp_close_shutdown_fin+0x8e>
      break;
 800bec0:	bf00      	nop
 800bec2:	e000      	b.n	800bec6 <tcp_close_shutdown_fin+0x8e>
      break;
 800bec4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d103      	bne.n	800bed6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f004 ffb4 	bl	8010e3c <tcp_output>
 800bed4:	e00d      	b.n	800bef2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bede:	d108      	bne.n	800bef2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	8b5b      	ldrh	r3, [r3, #26]
 800bee4:	f043 0308 	orr.w	r3, r3, #8
 800bee8:	b29a      	uxth	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	e001      	b.n	800bef6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	0801d520 	.word	0x0801d520
 800bf04:	0801d5d0 	.word	0x0801d5d0
 800bf08:	0801d564 	.word	0x0801d564

0800bf0c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d109      	bne.n	800bf2e <tcp_close+0x22>
 800bf1a:	4b11      	ldr	r3, [pc, #68]	; (800bf60 <tcp_close+0x54>)
 800bf1c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bf20:	4910      	ldr	r1, [pc, #64]	; (800bf64 <tcp_close+0x58>)
 800bf22:	4811      	ldr	r0, [pc, #68]	; (800bf68 <tcp_close+0x5c>)
 800bf24:	f00b fb3c 	bl	80175a0 <iprintf>
 800bf28:	f06f 030f 	mvn.w	r3, #15
 800bf2c:	e014      	b.n	800bf58 <tcp_close+0x4c>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	7d1b      	ldrb	r3, [r3, #20]
 800bf32:	4618      	mov	r0, r3
 800bf34:	f001 fc44 	bl	800d7c0 <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	7d1b      	ldrb	r3, [r3, #20]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d006      	beq.n	800bf4e <tcp_close+0x42>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	8b5b      	ldrh	r3, [r3, #26]
 800bf44:	f043 0310 	orr.w	r3, r3, #16
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bf4e:	2101      	movs	r1, #1
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f7ff fe8f 	bl	800bc74 <tcp_close_shutdown>
 800bf56:	4603      	mov	r3, r0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	0801d520 	.word	0x0801d520
 800bf64:	0801d630 	.word	0x0801d630
 800bf68:	0801d564 	.word	0x0801d564

0800bf6c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b08e      	sub	sp, #56	; 0x38
 800bf70:	af04      	add	r7, sp, #16
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d107      	bne.n	800bf8c <tcp_abandon+0x20>
 800bf7c:	4b52      	ldr	r3, [pc, #328]	; (800c0c8 <tcp_abandon+0x15c>)
 800bf7e:	f240 223d 	movw	r2, #573	; 0x23d
 800bf82:	4952      	ldr	r1, [pc, #328]	; (800c0cc <tcp_abandon+0x160>)
 800bf84:	4852      	ldr	r0, [pc, #328]	; (800c0d0 <tcp_abandon+0x164>)
 800bf86:	f00b fb0b 	bl	80175a0 <iprintf>
 800bf8a:	e099      	b.n	800c0c0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7d1b      	ldrb	r3, [r3, #20]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d106      	bne.n	800bfa2 <tcp_abandon+0x36>
 800bf94:	4b4c      	ldr	r3, [pc, #304]	; (800c0c8 <tcp_abandon+0x15c>)
 800bf96:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bf9a:	494e      	ldr	r1, [pc, #312]	; (800c0d4 <tcp_abandon+0x168>)
 800bf9c:	484c      	ldr	r0, [pc, #304]	; (800c0d0 <tcp_abandon+0x164>)
 800bf9e:	f00b faff 	bl	80175a0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	7d1b      	ldrb	r3, [r3, #20]
 800bfa6:	2b0a      	cmp	r3, #10
 800bfa8:	d107      	bne.n	800bfba <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bfaa:	6879      	ldr	r1, [r7, #4]
 800bfac:	484a      	ldr	r0, [pc, #296]	; (800c0d8 <tcp_abandon+0x16c>)
 800bfae:	f001 fa6b 	bl	800d488 <tcp_pcb_remove>
    tcp_free(pcb);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7ff fdac 	bl	800bb10 <tcp_free>
 800bfb8:	e082      	b.n	800c0c0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfc6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfcc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfd4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	7d1b      	ldrb	r3, [r3, #20]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d126      	bne.n	800c032 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	8adb      	ldrh	r3, [r3, #22]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d02e      	beq.n	800c04a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bfec:	4b3b      	ldr	r3, [pc, #236]	; (800c0dc <tcp_abandon+0x170>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d105      	bne.n	800c002 <tcp_abandon+0x96>
 800bff6:	4b39      	ldr	r3, [pc, #228]	; (800c0dc <tcp_abandon+0x170>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	4a37      	ldr	r2, [pc, #220]	; (800c0dc <tcp_abandon+0x170>)
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	e013      	b.n	800c02a <tcp_abandon+0xbe>
 800c002:	4b36      	ldr	r3, [pc, #216]	; (800c0dc <tcp_abandon+0x170>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	61fb      	str	r3, [r7, #28]
 800c008:	e00c      	b.n	800c024 <tcp_abandon+0xb8>
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	68db      	ldr	r3, [r3, #12]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	429a      	cmp	r2, r3
 800c012:	d104      	bne.n	800c01e <tcp_abandon+0xb2>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	68da      	ldr	r2, [r3, #12]
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	60da      	str	r2, [r3, #12]
 800c01c:	e005      	b.n	800c02a <tcp_abandon+0xbe>
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	61fb      	str	r3, [r7, #28]
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1ef      	bne.n	800c00a <tcp_abandon+0x9e>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	60da      	str	r2, [r3, #12]
 800c030:	e00b      	b.n	800c04a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	8adb      	ldrh	r3, [r3, #22]
 800c03a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c03c:	6879      	ldr	r1, [r7, #4]
 800c03e:	4828      	ldr	r0, [pc, #160]	; (800c0e0 <tcp_abandon+0x174>)
 800c040:	f001 fa22 	bl	800d488 <tcp_pcb_remove>
 800c044:	4b27      	ldr	r3, [pc, #156]	; (800c0e4 <tcp_abandon+0x178>)
 800c046:	2201      	movs	r2, #1
 800c048:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d004      	beq.n	800c05c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c056:	4618      	mov	r0, r3
 800c058:	f000 fed6 	bl	800ce08 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c060:	2b00      	cmp	r3, #0
 800c062:	d004      	beq.n	800c06e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 fecd 	bl	800ce08 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c072:	2b00      	cmp	r3, #0
 800c074:	d004      	beq.n	800c080 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c07a:	4618      	mov	r0, r3
 800c07c:	f000 fec4 	bl	800ce08 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00e      	beq.n	800c0a4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	3304      	adds	r3, #4
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	8b12      	ldrh	r2, [r2, #24]
 800c090:	9202      	str	r2, [sp, #8]
 800c092:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c094:	9201      	str	r2, [sp, #4]
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	460b      	mov	r3, r1
 800c09a:	697a      	ldr	r2, [r7, #20]
 800c09c:	69b9      	ldr	r1, [r7, #24]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f005 fc86 	bl	80119b0 <tcp_rst>
    }
    last_state = pcb->state;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	7d1b      	ldrb	r3, [r3, #20]
 800c0a8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7ff fd30 	bl	800bb10 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d004      	beq.n	800c0c0 <tcp_abandon+0x154>
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	f06f 010c 	mvn.w	r1, #12
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	4798      	blx	r3
  }
}
 800c0c0:	3728      	adds	r7, #40	; 0x28
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	bd80      	pop	{r7, pc}
 800c0c6:	bf00      	nop
 800c0c8:	0801d520 	.word	0x0801d520
 800c0cc:	0801d664 	.word	0x0801d664
 800c0d0:	0801d564 	.word	0x0801d564
 800c0d4:	0801d680 	.word	0x0801d680
 800c0d8:	2000d868 	.word	0x2000d868
 800c0dc:	2000d864 	.word	0x2000d864
 800c0e0:	2000d858 	.word	0x2000d858
 800c0e4:	2000d854 	.word	0x2000d854

0800c0e8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c0f0:	2101      	movs	r1, #1
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff ff3a 	bl	800bf6c <tcp_abandon>
}
 800c0f8:	bf00      	nop
 800c0fa:	3708      	adds	r7, #8
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b088      	sub	sp, #32
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	4613      	mov	r3, r2
 800c10c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c10e:	2304      	movs	r3, #4
 800c110:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c118:	4b3e      	ldr	r3, [pc, #248]	; (800c214 <tcp_bind+0x114>)
 800c11a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d109      	bne.n	800c136 <tcp_bind+0x36>
 800c122:	4b3d      	ldr	r3, [pc, #244]	; (800c218 <tcp_bind+0x118>)
 800c124:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c128:	493c      	ldr	r1, [pc, #240]	; (800c21c <tcp_bind+0x11c>)
 800c12a:	483d      	ldr	r0, [pc, #244]	; (800c220 <tcp_bind+0x120>)
 800c12c:	f00b fa38 	bl	80175a0 <iprintf>
 800c130:	f06f 030f 	mvn.w	r3, #15
 800c134:	e06a      	b.n	800c20c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	7d1b      	ldrb	r3, [r3, #20]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d009      	beq.n	800c152 <tcp_bind+0x52>
 800c13e:	4b36      	ldr	r3, [pc, #216]	; (800c218 <tcp_bind+0x118>)
 800c140:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c144:	4937      	ldr	r1, [pc, #220]	; (800c224 <tcp_bind+0x124>)
 800c146:	4836      	ldr	r0, [pc, #216]	; (800c220 <tcp_bind+0x120>)
 800c148:	f00b fa2a 	bl	80175a0 <iprintf>
 800c14c:	f06f 0305 	mvn.w	r3, #5
 800c150:	e05c      	b.n	800c20c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c152:	88fb      	ldrh	r3, [r7, #6]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d109      	bne.n	800c16c <tcp_bind+0x6c>
    port = tcp_new_port();
 800c158:	f000 f9f0 	bl	800c53c <tcp_new_port>
 800c15c:	4603      	mov	r3, r0
 800c15e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c160:	88fb      	ldrh	r3, [r7, #6]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d135      	bne.n	800c1d2 <tcp_bind+0xd2>
      return ERR_BUF;
 800c166:	f06f 0301 	mvn.w	r3, #1
 800c16a:	e04f      	b.n	800c20c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c16c:	2300      	movs	r3, #0
 800c16e:	61fb      	str	r3, [r7, #28]
 800c170:	e02b      	b.n	800c1ca <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c172:	4a2d      	ldr	r2, [pc, #180]	; (800c228 <tcp_bind+0x128>)
 800c174:	69fb      	ldr	r3, [r7, #28]
 800c176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	61bb      	str	r3, [r7, #24]
 800c17e:	e01e      	b.n	800c1be <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	8adb      	ldrh	r3, [r3, #22]
 800c184:	88fa      	ldrh	r2, [r7, #6]
 800c186:	429a      	cmp	r2, r3
 800c188:	d116      	bne.n	800c1b8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c18a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d010      	beq.n	800c1b2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00c      	beq.n	800c1b2 <tcp_bind+0xb2>
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d009      	beq.n	800c1b2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d005      	beq.n	800c1b2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d102      	bne.n	800c1b8 <tcp_bind+0xb8>
              return ERR_USE;
 800c1b2:	f06f 0307 	mvn.w	r3, #7
 800c1b6:	e029      	b.n	800c20c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	61bb      	str	r3, [r7, #24]
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1dd      	bne.n	800c180 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	61fb      	str	r3, [r7, #28]
 800c1ca:	69fa      	ldr	r2, [r7, #28]
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	dbcf      	blt.n	800c172 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00c      	beq.n	800c1f2 <tcp_bind+0xf2>
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d008      	beq.n	800c1f2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d002      	beq.n	800c1ec <tcp_bind+0xec>
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	e000      	b.n	800c1ee <tcp_bind+0xee>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	68fa      	ldr	r2, [r7, #12]
 800c1f0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	88fa      	ldrh	r2, [r7, #6]
 800c1f6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c1f8:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <tcp_bind+0x12c>)
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	60da      	str	r2, [r3, #12]
 800c200:	4a0a      	ldr	r2, [pc, #40]	; (800c22c <tcp_bind+0x12c>)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6013      	str	r3, [r2, #0]
 800c206:	f005 fd95 	bl	8011d34 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3720      	adds	r7, #32
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	08032adc 	.word	0x08032adc
 800c218:	0801d520 	.word	0x0801d520
 800c21c:	0801d6b4 	.word	0x0801d6b4
 800c220:	0801d564 	.word	0x0801d564
 800c224:	0801d6cc 	.word	0x0801d6cc
 800c228:	08032aa4 	.word	0x08032aa4
 800c22c:	2000d864 	.word	0x2000d864

0800c230 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	4613      	mov	r3, r2
 800c23c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d106      	bne.n	800c252 <tcp_accept_null+0x22>
 800c244:	4b07      	ldr	r3, [pc, #28]	; (800c264 <tcp_accept_null+0x34>)
 800c246:	f240 320f 	movw	r2, #783	; 0x30f
 800c24a:	4907      	ldr	r1, [pc, #28]	; (800c268 <tcp_accept_null+0x38>)
 800c24c:	4807      	ldr	r0, [pc, #28]	; (800c26c <tcp_accept_null+0x3c>)
 800c24e:	f00b f9a7 	bl	80175a0 <iprintf>

  tcp_abort(pcb);
 800c252:	68b8      	ldr	r0, [r7, #8]
 800c254:	f7ff ff48 	bl	800c0e8 <tcp_abort>

  return ERR_ABRT;
 800c258:	f06f 030c 	mvn.w	r3, #12
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	0801d520 	.word	0x0801d520
 800c268:	0801d6f4 	.word	0x0801d6f4
 800c26c:	0801d564 	.word	0x0801d564

0800c270 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	460b      	mov	r3, r1
 800c27a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c27c:	78fb      	ldrb	r3, [r7, #3]
 800c27e:	2200      	movs	r2, #0
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f806 	bl	800c294 <tcp_listen_with_backlog_and_err>
 800c288:	4603      	mov	r3, r0
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3708      	adds	r7, #8
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
	...

0800c294 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b088      	sub	sp, #32
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	460b      	mov	r3, r1
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d109      	bne.n	800c2c0 <tcp_listen_with_backlog_and_err+0x2c>
 800c2ac:	4b47      	ldr	r3, [pc, #284]	; (800c3cc <tcp_listen_with_backlog_and_err+0x138>)
 800c2ae:	f240 3259 	movw	r2, #857	; 0x359
 800c2b2:	4947      	ldr	r1, [pc, #284]	; (800c3d0 <tcp_listen_with_backlog_and_err+0x13c>)
 800c2b4:	4847      	ldr	r0, [pc, #284]	; (800c3d4 <tcp_listen_with_backlog_and_err+0x140>)
 800c2b6:	f00b f973 	bl	80175a0 <iprintf>
 800c2ba:	23f0      	movs	r3, #240	; 0xf0
 800c2bc:	76fb      	strb	r3, [r7, #27]
 800c2be:	e079      	b.n	800c3b4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	7d1b      	ldrb	r3, [r3, #20]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d009      	beq.n	800c2dc <tcp_listen_with_backlog_and_err+0x48>
 800c2c8:	4b40      	ldr	r3, [pc, #256]	; (800c3cc <tcp_listen_with_backlog_and_err+0x138>)
 800c2ca:	f240 325a 	movw	r2, #858	; 0x35a
 800c2ce:	4942      	ldr	r1, [pc, #264]	; (800c3d8 <tcp_listen_with_backlog_and_err+0x144>)
 800c2d0:	4840      	ldr	r0, [pc, #256]	; (800c3d4 <tcp_listen_with_backlog_and_err+0x140>)
 800c2d2:	f00b f965 	bl	80175a0 <iprintf>
 800c2d6:	23f1      	movs	r3, #241	; 0xf1
 800c2d8:	76fb      	strb	r3, [r7, #27]
 800c2da:	e06b      	b.n	800c3b4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	7d1b      	ldrb	r3, [r3, #20]
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d104      	bne.n	800c2ee <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c2e8:	23f7      	movs	r3, #247	; 0xf7
 800c2ea:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c2ec:	e062      	b.n	800c3b4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c2ee:	2002      	movs	r0, #2
 800c2f0:	f7fe faf8 	bl	800a8e4 <memp_malloc>
 800c2f4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d102      	bne.n	800c302 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c2fc:	23ff      	movs	r3, #255	; 0xff
 800c2fe:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c300:	e058      	b.n	800c3b4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	691a      	ldr	r2, [r3, #16]
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	8ada      	ldrh	r2, [r3, #22]
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	2201      	movs	r2, #1
 800c316:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	7d5a      	ldrb	r2, [r3, #21]
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	7a5a      	ldrb	r2, [r3, #9]
 800c324:	69fb      	ldr	r3, [r7, #28]
 800c326:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	2200      	movs	r2, #0
 800c32c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	7ada      	ldrb	r2, [r3, #11]
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	7a9a      	ldrb	r2, [r3, #10]
 800c33a:	69fb      	ldr	r3, [r7, #28]
 800c33c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	8adb      	ldrh	r3, [r3, #22]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d021      	beq.n	800c392 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c34e:	4b23      	ldr	r3, [pc, #140]	; (800c3dc <tcp_listen_with_backlog_and_err+0x148>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	429a      	cmp	r2, r3
 800c356:	d105      	bne.n	800c364 <tcp_listen_with_backlog_and_err+0xd0>
 800c358:	4b20      	ldr	r3, [pc, #128]	; (800c3dc <tcp_listen_with_backlog_and_err+0x148>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	4a1f      	ldr	r2, [pc, #124]	; (800c3dc <tcp_listen_with_backlog_and_err+0x148>)
 800c360:	6013      	str	r3, [r2, #0]
 800c362:	e013      	b.n	800c38c <tcp_listen_with_backlog_and_err+0xf8>
 800c364:	4b1d      	ldr	r3, [pc, #116]	; (800c3dc <tcp_listen_with_backlog_and_err+0x148>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	617b      	str	r3, [r7, #20]
 800c36a:	e00c      	b.n	800c386 <tcp_listen_with_backlog_and_err+0xf2>
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	429a      	cmp	r2, r3
 800c374:	d104      	bne.n	800c380 <tcp_listen_with_backlog_and_err+0xec>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	68da      	ldr	r2, [r3, #12]
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	60da      	str	r2, [r3, #12]
 800c37e:	e005      	b.n	800c38c <tcp_listen_with_backlog_and_err+0xf8>
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	68db      	ldr	r3, [r3, #12]
 800c384:	617b      	str	r3, [r7, #20]
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1ef      	bne.n	800c36c <tcp_listen_with_backlog_and_err+0xd8>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f7ff fbbc 	bl	800bb10 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	4a11      	ldr	r2, [pc, #68]	; (800c3e0 <tcp_listen_with_backlog_and_err+0x14c>)
 800c39c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c39e:	4b11      	ldr	r3, [pc, #68]	; (800c3e4 <tcp_listen_with_backlog_and_err+0x150>)
 800c3a0:	681a      	ldr	r2, [r3, #0]
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	60da      	str	r2, [r3, #12]
 800c3a6:	4a0f      	ldr	r2, [pc, #60]	; (800c3e4 <tcp_listen_with_backlog_and_err+0x150>)
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	6013      	str	r3, [r2, #0]
 800c3ac:	f005 fcc2 	bl	8011d34 <tcp_timer_needed>
  res = ERR_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d002      	beq.n	800c3c0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	7efa      	ldrb	r2, [r7, #27]
 800c3be:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c3c0:	69fb      	ldr	r3, [r7, #28]
}
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	3720      	adds	r7, #32
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	0801d520 	.word	0x0801d520
 800c3d0:	0801d714 	.word	0x0801d714
 800c3d4:	0801d564 	.word	0x0801d564
 800c3d8:	0801d744 	.word	0x0801d744
 800c3dc:	2000d864 	.word	0x2000d864
 800c3e0:	0800c231 	.word	0x0800c231
 800c3e4:	2000d860 	.word	0x2000d860

0800c3e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d106      	bne.n	800c404 <tcp_update_rcv_ann_wnd+0x1c>
 800c3f6:	4b25      	ldr	r3, [pc, #148]	; (800c48c <tcp_update_rcv_ann_wnd+0xa4>)
 800c3f8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c3fc:	4924      	ldr	r1, [pc, #144]	; (800c490 <tcp_update_rcv_ann_wnd+0xa8>)
 800c3fe:	4825      	ldr	r0, [pc, #148]	; (800c494 <tcp_update_rcv_ann_wnd+0xac>)
 800c400:	f00b f8ce 	bl	80175a0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c40c:	4413      	add	r3, r2
 800c40e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c418:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c41c:	bf28      	it	cs
 800c41e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c422:	b292      	uxth	r2, r2
 800c424:	4413      	add	r3, r2
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	db08      	blt.n	800c440 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	e020      	b.n	800c482 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c448:	1ad3      	subs	r3, r2, r3
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	dd03      	ble.n	800c456 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c454:	e014      	b.n	800c480 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45e:	1ad3      	subs	r3, r2, r3
 800c460:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c468:	d306      	bcc.n	800c478 <tcp_update_rcv_ann_wnd+0x90>
 800c46a:	4b08      	ldr	r3, [pc, #32]	; (800c48c <tcp_update_rcv_ann_wnd+0xa4>)
 800c46c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c470:	4909      	ldr	r1, [pc, #36]	; (800c498 <tcp_update_rcv_ann_wnd+0xb0>)
 800c472:	4808      	ldr	r0, [pc, #32]	; (800c494 <tcp_update_rcv_ann_wnd+0xac>)
 800c474:	f00b f894 	bl	80175a0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c480:	2300      	movs	r3, #0
  }
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	0801d520 	.word	0x0801d520
 800c490:	0801d77c 	.word	0x0801d77c
 800c494:	0801d564 	.word	0x0801d564
 800c498:	0801d7a0 	.word	0x0801d7a0

0800c49c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d107      	bne.n	800c4be <tcp_recved+0x22>
 800c4ae:	4b1f      	ldr	r3, [pc, #124]	; (800c52c <tcp_recved+0x90>)
 800c4b0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c4b4:	491e      	ldr	r1, [pc, #120]	; (800c530 <tcp_recved+0x94>)
 800c4b6:	481f      	ldr	r0, [pc, #124]	; (800c534 <tcp_recved+0x98>)
 800c4b8:	f00b f872 	bl	80175a0 <iprintf>
 800c4bc:	e032      	b.n	800c524 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	7d1b      	ldrb	r3, [r3, #20]
 800c4c2:	2b01      	cmp	r3, #1
 800c4c4:	d106      	bne.n	800c4d4 <tcp_recved+0x38>
 800c4c6:	4b19      	ldr	r3, [pc, #100]	; (800c52c <tcp_recved+0x90>)
 800c4c8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c4cc:	491a      	ldr	r1, [pc, #104]	; (800c538 <tcp_recved+0x9c>)
 800c4ce:	4819      	ldr	r0, [pc, #100]	; (800c534 <tcp_recved+0x98>)
 800c4d0:	f00b f866 	bl	80175a0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c4d8:	887b      	ldrh	r3, [r7, #2]
 800c4da:	4413      	add	r3, r2
 800c4dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c4de:	89fb      	ldrh	r3, [r7, #14]
 800c4e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c4e4:	d804      	bhi.n	800c4f0 <tcp_recved+0x54>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4ea:	89fa      	ldrh	r2, [r7, #14]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d204      	bcs.n	800c4fa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c4f6:	851a      	strh	r2, [r3, #40]	; 0x28
 800c4f8:	e002      	b.n	800c500 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	89fa      	ldrh	r2, [r7, #14]
 800c4fe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c500:	6878      	ldr	r0, [r7, #4]
 800c502:	f7ff ff71 	bl	800c3e8 <tcp_update_rcv_ann_wnd>
 800c506:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c50e:	d309      	bcc.n	800c524 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	8b5b      	ldrh	r3, [r3, #26]
 800c514:	f043 0302 	orr.w	r3, r3, #2
 800c518:	b29a      	uxth	r2, r3
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f004 fc8c 	bl	8010e3c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	0801d520 	.word	0x0801d520
 800c530:	0801d7bc 	.word	0x0801d7bc
 800c534:	0801d564 	.word	0x0801d564
 800c538:	0801d7d4 	.word	0x0801d7d4

0800c53c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c546:	4b1e      	ldr	r3, [pc, #120]	; (800c5c0 <tcp_new_port+0x84>)
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	3301      	adds	r3, #1
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	4b1c      	ldr	r3, [pc, #112]	; (800c5c0 <tcp_new_port+0x84>)
 800c550:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c552:	4b1b      	ldr	r3, [pc, #108]	; (800c5c0 <tcp_new_port+0x84>)
 800c554:	881b      	ldrh	r3, [r3, #0]
 800c556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d103      	bne.n	800c566 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c55e:	4b18      	ldr	r3, [pc, #96]	; (800c5c0 <tcp_new_port+0x84>)
 800c560:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c564:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c566:	2300      	movs	r3, #0
 800c568:	71fb      	strb	r3, [r7, #7]
 800c56a:	e01e      	b.n	800c5aa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c56c:	79fb      	ldrb	r3, [r7, #7]
 800c56e:	4a15      	ldr	r2, [pc, #84]	; (800c5c4 <tcp_new_port+0x88>)
 800c570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	603b      	str	r3, [r7, #0]
 800c578:	e011      	b.n	800c59e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	8ada      	ldrh	r2, [r3, #22]
 800c57e:	4b10      	ldr	r3, [pc, #64]	; (800c5c0 <tcp_new_port+0x84>)
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	429a      	cmp	r2, r3
 800c584:	d108      	bne.n	800c598 <tcp_new_port+0x5c>
        n++;
 800c586:	88bb      	ldrh	r3, [r7, #4]
 800c588:	3301      	adds	r3, #1
 800c58a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c58c:	88bb      	ldrh	r3, [r7, #4]
 800c58e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c592:	d3d8      	bcc.n	800c546 <tcp_new_port+0xa>
          return 0;
 800c594:	2300      	movs	r3, #0
 800c596:	e00d      	b.n	800c5b4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	603b      	str	r3, [r7, #0]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1ea      	bne.n	800c57a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c5a4:	79fb      	ldrb	r3, [r7, #7]
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	71fb      	strb	r3, [r7, #7]
 800c5aa:	79fb      	ldrb	r3, [r7, #7]
 800c5ac:	2b03      	cmp	r3, #3
 800c5ae:	d9dd      	bls.n	800c56c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c5b0:	4b03      	ldr	r3, [pc, #12]	; (800c5c0 <tcp_new_port+0x84>)
 800c5b2:	881b      	ldrh	r3, [r3, #0]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	370c      	adds	r7, #12
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5be:	4770      	bx	lr
 800c5c0:	200005ba 	.word	0x200005ba
 800c5c4:	08032aa4 	.word	0x08032aa4

0800c5c8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c5c8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ca:	b090      	sub	sp, #64	; 0x40
 800c5cc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c5d4:	4b94      	ldr	r3, [pc, #592]	; (800c828 <tcp_slowtmr+0x260>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	4a93      	ldr	r2, [pc, #588]	; (800c828 <tcp_slowtmr+0x260>)
 800c5dc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c5de:	4b93      	ldr	r3, [pc, #588]	; (800c82c <tcp_slowtmr+0x264>)
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	b2da      	uxtb	r2, r3
 800c5e6:	4b91      	ldr	r3, [pc, #580]	; (800c82c <tcp_slowtmr+0x264>)
 800c5e8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c5ee:	4b90      	ldr	r3, [pc, #576]	; (800c830 <tcp_slowtmr+0x268>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c5f4:	e29f      	b.n	800cb36 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	7d1b      	ldrb	r3, [r3, #20]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d106      	bne.n	800c60c <tcp_slowtmr+0x44>
 800c5fe:	4b8d      	ldr	r3, [pc, #564]	; (800c834 <tcp_slowtmr+0x26c>)
 800c600:	f240 42be 	movw	r2, #1214	; 0x4be
 800c604:	498c      	ldr	r1, [pc, #560]	; (800c838 <tcp_slowtmr+0x270>)
 800c606:	488d      	ldr	r0, [pc, #564]	; (800c83c <tcp_slowtmr+0x274>)
 800c608:	f00a ffca 	bl	80175a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60e:	7d1b      	ldrb	r3, [r3, #20]
 800c610:	2b01      	cmp	r3, #1
 800c612:	d106      	bne.n	800c622 <tcp_slowtmr+0x5a>
 800c614:	4b87      	ldr	r3, [pc, #540]	; (800c834 <tcp_slowtmr+0x26c>)
 800c616:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c61a:	4989      	ldr	r1, [pc, #548]	; (800c840 <tcp_slowtmr+0x278>)
 800c61c:	4887      	ldr	r0, [pc, #540]	; (800c83c <tcp_slowtmr+0x274>)
 800c61e:	f00a ffbf 	bl	80175a0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c624:	7d1b      	ldrb	r3, [r3, #20]
 800c626:	2b0a      	cmp	r3, #10
 800c628:	d106      	bne.n	800c638 <tcp_slowtmr+0x70>
 800c62a:	4b82      	ldr	r3, [pc, #520]	; (800c834 <tcp_slowtmr+0x26c>)
 800c62c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c630:	4984      	ldr	r1, [pc, #528]	; (800c844 <tcp_slowtmr+0x27c>)
 800c632:	4882      	ldr	r0, [pc, #520]	; (800c83c <tcp_slowtmr+0x274>)
 800c634:	f00a ffb4 	bl	80175a0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63a:	7f9a      	ldrb	r2, [r3, #30]
 800c63c:	4b7b      	ldr	r3, [pc, #492]	; (800c82c <tcp_slowtmr+0x264>)
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	429a      	cmp	r2, r3
 800c642:	d105      	bne.n	800c650 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c646:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	68db      	ldr	r3, [r3, #12]
 800c64c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c64e:	e272      	b.n	800cb36 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c650:	4b76      	ldr	r3, [pc, #472]	; (800c82c <tcp_slowtmr+0x264>)
 800c652:	781a      	ldrb	r2, [r3, #0]
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c658:	2300      	movs	r3, #0
 800c65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c666:	7d1b      	ldrb	r3, [r3, #20]
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d10a      	bne.n	800c682 <tcp_slowtmr+0xba>
 800c66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c672:	2b05      	cmp	r3, #5
 800c674:	d905      	bls.n	800c682 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c676:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c67a:	3301      	adds	r3, #1
 800c67c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c680:	e11e      	b.n	800c8c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c684:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c688:	2b0b      	cmp	r3, #11
 800c68a:	d905      	bls.n	800c698 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c690:	3301      	adds	r3, #1
 800c692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c696:	e113      	b.n	800c8c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d075      	beq.n	800c78e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d006      	beq.n	800c6b8 <tcp_slowtmr+0xf0>
 800c6aa:	4b62      	ldr	r3, [pc, #392]	; (800c834 <tcp_slowtmr+0x26c>)
 800c6ac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c6b0:	4965      	ldr	r1, [pc, #404]	; (800c848 <tcp_slowtmr+0x280>)
 800c6b2:	4862      	ldr	r0, [pc, #392]	; (800c83c <tcp_slowtmr+0x274>)
 800c6b4:	f00a ff74 	bl	80175a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d106      	bne.n	800c6ce <tcp_slowtmr+0x106>
 800c6c0:	4b5c      	ldr	r3, [pc, #368]	; (800c834 <tcp_slowtmr+0x26c>)
 800c6c2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c6c6:	4961      	ldr	r1, [pc, #388]	; (800c84c <tcp_slowtmr+0x284>)
 800c6c8:	485c      	ldr	r0, [pc, #368]	; (800c83c <tcp_slowtmr+0x274>)
 800c6ca:	f00a ff69 	bl	80175a0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c6d4:	2b0b      	cmp	r3, #11
 800c6d6:	d905      	bls.n	800c6e4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6dc:	3301      	adds	r3, #1
 800c6de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6e2:	e0ed      	b.n	800c8c0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	4a58      	ldr	r2, [pc, #352]	; (800c850 <tcp_slowtmr+0x288>)
 800c6ee:	5cd3      	ldrb	r3, [r2, r3]
 800c6f0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c6f8:	7c7a      	ldrb	r2, [r7, #17]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d907      	bls.n	800c70e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c700:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c704:	3301      	adds	r3, #1
 800c706:	b2da      	uxtb	r2, r3
 800c708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c70a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c710:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c714:	7c7a      	ldrb	r2, [r7, #17]
 800c716:	429a      	cmp	r2, r3
 800c718:	f200 80d2 	bhi.w	800c8c0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c71c:	2301      	movs	r3, #1
 800c71e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c722:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c726:	2b00      	cmp	r3, #0
 800c728:	d108      	bne.n	800c73c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c72a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c72c:	f005 fa34 	bl	8011b98 <tcp_zero_window_probe>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d014      	beq.n	800c760 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c736:	2300      	movs	r3, #0
 800c738:	623b      	str	r3, [r7, #32]
 800c73a:	e011      	b.n	800c760 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c742:	4619      	mov	r1, r3
 800c744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c746:	f004 f8f3 	bl	8010930 <tcp_split_unsent_seg>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d107      	bne.n	800c760 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c752:	f004 fb73 	bl	8010e3c <tcp_output>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d101      	bne.n	800c760 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c75c:	2300      	movs	r3, #0
 800c75e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c760:	6a3b      	ldr	r3, [r7, #32]
 800c762:	2b00      	cmp	r3, #0
 800c764:	f000 80ac 	beq.w	800c8c0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c776:	2b06      	cmp	r3, #6
 800c778:	f200 80a2 	bhi.w	800c8c0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c782:	3301      	adds	r3, #1
 800c784:	b2da      	uxtb	r2, r3
 800c786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c788:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c78c:	e098      	b.n	800c8c0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c790:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c794:	2b00      	cmp	r3, #0
 800c796:	db0f      	blt.n	800c7b8 <tcp_slowtmr+0x1f0>
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c79e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d008      	beq.n	800c7b8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	b21a      	sxth	r2, r3
 800c7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	db7b      	blt.n	800c8c0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c7c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7ca:	f004 fe2f 	bl	801142c <tcp_rexmit_rto_prepare>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d007      	beq.n	800c7e4 <tcp_slowtmr+0x21c>
 800c7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d171      	bne.n	800c8c0 <tcp_slowtmr+0x2f8>
 800c7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d06d      	beq.n	800c8c0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e6:	7d1b      	ldrb	r3, [r3, #20]
 800c7e8:	2b02      	cmp	r3, #2
 800c7ea:	d03a      	beq.n	800c862 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c7f2:	2b0c      	cmp	r3, #12
 800c7f4:	bf28      	it	cs
 800c7f6:	230c      	movcs	r3, #12
 800c7f8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c800:	10db      	asrs	r3, r3, #3
 800c802:	b21b      	sxth	r3, r3
 800c804:	461a      	mov	r2, r3
 800c806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c808:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c80c:	4413      	add	r3, r2
 800c80e:	7efa      	ldrb	r2, [r7, #27]
 800c810:	4910      	ldr	r1, [pc, #64]	; (800c854 <tcp_slowtmr+0x28c>)
 800c812:	5c8a      	ldrb	r2, [r1, r2]
 800c814:	4093      	lsls	r3, r2
 800c816:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c81e:	4293      	cmp	r3, r2
 800c820:	dc1a      	bgt.n	800c858 <tcp_slowtmr+0x290>
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	b21a      	sxth	r2, r3
 800c826:	e019      	b.n	800c85c <tcp_slowtmr+0x294>
 800c828:	2000d85c 	.word	0x2000d85c
 800c82c:	20001212 	.word	0x20001212
 800c830:	2000d858 	.word	0x2000d858
 800c834:	0801d520 	.word	0x0801d520
 800c838:	0801d864 	.word	0x0801d864
 800c83c:	0801d564 	.word	0x0801d564
 800c840:	0801d890 	.word	0x0801d890
 800c844:	0801d8bc 	.word	0x0801d8bc
 800c848:	0801d8ec 	.word	0x0801d8ec
 800c84c:	0801d920 	.word	0x0801d920
 800c850:	08032a9c 	.word	0x08032a9c
 800c854:	08032a8c 	.word	0x08032a8c
 800c858:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c85c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c85e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c864:	2200      	movs	r2, #0
 800c866:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c870:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c874:	4293      	cmp	r3, r2
 800c876:	bf28      	it	cs
 800c878:	4613      	movcs	r3, r2
 800c87a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c87c:	8a7b      	ldrh	r3, [r7, #18]
 800c87e:	085b      	lsrs	r3, r3, #1
 800c880:	b29a      	uxth	r2, r3
 800c882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c884:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	b29b      	uxth	r3, r3
 800c896:	429a      	cmp	r2, r3
 800c898:	d206      	bcs.n	800c8a8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c89e:	005b      	lsls	r3, r3, #1
 800c8a0:	b29a      	uxth	r2, r3
 800c8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8aa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c8ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8bc:	f004 fe26 	bl	801150c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c2:	7d1b      	ldrb	r3, [r3, #20]
 800c8c4:	2b06      	cmp	r3, #6
 800c8c6:	d111      	bne.n	800c8ec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ca:	8b5b      	ldrh	r3, [r3, #26]
 800c8cc:	f003 0310 	and.w	r3, r3, #16
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d00b      	beq.n	800c8ec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8d4:	4b9d      	ldr	r3, [pc, #628]	; (800cb4c <tcp_slowtmr+0x584>)
 800c8d6:	681a      	ldr	r2, [r3, #0]
 800c8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8da:	6a1b      	ldr	r3, [r3, #32]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	2b28      	cmp	r3, #40	; 0x28
 800c8e0:	d904      	bls.n	800c8ec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c8e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ee:	7a5b      	ldrb	r3, [r3, #9]
 800c8f0:	f003 0308 	and.w	r3, r3, #8
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d04c      	beq.n	800c992 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c8fc:	2b04      	cmp	r3, #4
 800c8fe:	d003      	beq.n	800c908 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c902:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c904:	2b07      	cmp	r3, #7
 800c906:	d144      	bne.n	800c992 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c908:	4b90      	ldr	r3, [pc, #576]	; (800cb4c <tcp_slowtmr+0x584>)
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90e:	6a1b      	ldr	r3, [r3, #32]
 800c910:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c918:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c91c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c920:	498b      	ldr	r1, [pc, #556]	; (800cb50 <tcp_slowtmr+0x588>)
 800c922:	fba1 1303 	umull	r1, r3, r1, r3
 800c926:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c928:	429a      	cmp	r2, r3
 800c92a:	d90a      	bls.n	800c942 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c92c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c930:	3301      	adds	r3, #1
 800c932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c936:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c93a:	3301      	adds	r3, #1
 800c93c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c940:	e027      	b.n	800c992 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c942:	4b82      	ldr	r3, [pc, #520]	; (800cb4c <tcp_slowtmr+0x584>)
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c948:	6a1b      	ldr	r3, [r3, #32]
 800c94a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c954:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c958:	4618      	mov	r0, r3
 800c95a:	4b7e      	ldr	r3, [pc, #504]	; (800cb54 <tcp_slowtmr+0x58c>)
 800c95c:	fb03 f300 	mul.w	r3, r3, r0
 800c960:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c962:	497b      	ldr	r1, [pc, #492]	; (800cb50 <tcp_slowtmr+0x588>)
 800c964:	fba1 1303 	umull	r1, r3, r1, r3
 800c968:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d911      	bls.n	800c992 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c96e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c970:	f005 f8d2 	bl	8011b18 <tcp_keepalive>
 800c974:	4603      	mov	r3, r0
 800c976:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c97a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d107      	bne.n	800c992 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c984:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c988:	3301      	adds	r3, #1
 800c98a:	b2da      	uxtb	r2, r3
 800c98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c996:	2b00      	cmp	r3, #0
 800c998:	d011      	beq.n	800c9be <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c99a:	4b6c      	ldr	r3, [pc, #432]	; (800cb4c <tcp_slowtmr+0x584>)
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a0:	6a1b      	ldr	r3, [r3, #32]
 800c9a2:	1ad2      	subs	r2, r2, r3
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	005b      	lsls	r3, r3, #1
 800c9b0:	440b      	add	r3, r1
 800c9b2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d302      	bcc.n	800c9be <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c9b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9ba:	f000 fed7 	bl	800d76c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c9be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c0:	7d1b      	ldrb	r3, [r3, #20]
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d10b      	bne.n	800c9de <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c9c6:	4b61      	ldr	r3, [pc, #388]	; (800cb4c <tcp_slowtmr+0x584>)
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9cc:	6a1b      	ldr	r3, [r3, #32]
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	2b28      	cmp	r3, #40	; 0x28
 800c9d2:	d904      	bls.n	800c9de <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c9d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9d8:	3301      	adds	r3, #1
 800c9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e0:	7d1b      	ldrb	r3, [r3, #20]
 800c9e2:	2b09      	cmp	r3, #9
 800c9e4:	d10b      	bne.n	800c9fe <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c9e6:	4b59      	ldr	r3, [pc, #356]	; (800cb4c <tcp_slowtmr+0x584>)
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ec:	6a1b      	ldr	r3, [r3, #32]
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	2bf0      	cmp	r3, #240	; 0xf0
 800c9f2:	d904      	bls.n	800c9fe <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c9f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c9f8:	3301      	adds	r3, #1
 800c9fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c9fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d060      	beq.n	800cac8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ca06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca0c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ca0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca10:	f000 fcea 	bl	800d3e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d010      	beq.n	800ca3c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ca1a:	4b4f      	ldr	r3, [pc, #316]	; (800cb58 <tcp_slowtmr+0x590>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d106      	bne.n	800ca32 <tcp_slowtmr+0x46a>
 800ca24:	4b4d      	ldr	r3, [pc, #308]	; (800cb5c <tcp_slowtmr+0x594>)
 800ca26:	f240 526d 	movw	r2, #1389	; 0x56d
 800ca2a:	494d      	ldr	r1, [pc, #308]	; (800cb60 <tcp_slowtmr+0x598>)
 800ca2c:	484d      	ldr	r0, [pc, #308]	; (800cb64 <tcp_slowtmr+0x59c>)
 800ca2e:	f00a fdb7 	bl	80175a0 <iprintf>
        prev->next = pcb->next;
 800ca32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca34:	68da      	ldr	r2, [r3, #12]
 800ca36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca38:	60da      	str	r2, [r3, #12]
 800ca3a:	e00f      	b.n	800ca5c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ca3c:	4b46      	ldr	r3, [pc, #280]	; (800cb58 <tcp_slowtmr+0x590>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d006      	beq.n	800ca54 <tcp_slowtmr+0x48c>
 800ca46:	4b45      	ldr	r3, [pc, #276]	; (800cb5c <tcp_slowtmr+0x594>)
 800ca48:	f240 5271 	movw	r2, #1393	; 0x571
 800ca4c:	4946      	ldr	r1, [pc, #280]	; (800cb68 <tcp_slowtmr+0x5a0>)
 800ca4e:	4845      	ldr	r0, [pc, #276]	; (800cb64 <tcp_slowtmr+0x59c>)
 800ca50:	f00a fda6 	bl	80175a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	4a3f      	ldr	r2, [pc, #252]	; (800cb58 <tcp_slowtmr+0x590>)
 800ca5a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ca5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d013      	beq.n	800ca8c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ca64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca66:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ca6c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ca6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca70:	3304      	adds	r3, #4
 800ca72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca74:	8ad2      	ldrh	r2, [r2, #22]
 800ca76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca78:	8b09      	ldrh	r1, [r1, #24]
 800ca7a:	9102      	str	r1, [sp, #8]
 800ca7c:	9201      	str	r2, [sp, #4]
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	462b      	mov	r3, r5
 800ca82:	4622      	mov	r2, r4
 800ca84:	4601      	mov	r1, r0
 800ca86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca88:	f004 ff92 	bl	80119b0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ca8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ca92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca94:	7d1b      	ldrb	r3, [r3, #20]
 800ca96:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ca98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ca9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800caa2:	6838      	ldr	r0, [r7, #0]
 800caa4:	f7ff f834 	bl	800bb10 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800caa8:	4b30      	ldr	r3, [pc, #192]	; (800cb6c <tcp_slowtmr+0x5a4>)
 800caaa:	2200      	movs	r2, #0
 800caac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d004      	beq.n	800cabe <tcp_slowtmr+0x4f6>
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f06f 010c 	mvn.w	r1, #12
 800caba:	68b8      	ldr	r0, [r7, #8]
 800cabc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cabe:	4b2b      	ldr	r3, [pc, #172]	; (800cb6c <tcp_slowtmr+0x5a4>)
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d037      	beq.n	800cb36 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cac6:	e590      	b.n	800c5ea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad4:	7f1b      	ldrb	r3, [r3, #28]
 800cad6:	3301      	adds	r3, #1
 800cad8:	b2da      	uxtb	r2, r3
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae0:	7f1a      	ldrb	r2, [r3, #28]
 800cae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae4:	7f5b      	ldrb	r3, [r3, #29]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	d325      	bcc.n	800cb36 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800caea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caec:	2200      	movs	r2, #0
 800caee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800caf0:	4b1e      	ldr	r3, [pc, #120]	; (800cb6c <tcp_slowtmr+0x5a4>)
 800caf2:	2200      	movs	r2, #0
 800caf4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800caf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00b      	beq.n	800cb18 <tcp_slowtmr+0x550>
 800cb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb08:	6912      	ldr	r2, [r2, #16]
 800cb0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb0c:	4610      	mov	r0, r2
 800cb0e:	4798      	blx	r3
 800cb10:	4603      	mov	r3, r0
 800cb12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cb16:	e002      	b.n	800cb1e <tcp_slowtmr+0x556>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cb1e:	4b13      	ldr	r3, [pc, #76]	; (800cb6c <tcp_slowtmr+0x5a4>)
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d000      	beq.n	800cb28 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800cb26:	e560      	b.n	800c5ea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cb28:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d102      	bne.n	800cb36 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cb30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb32:	f004 f983 	bl	8010e3c <tcp_output>
  while (pcb != NULL) {
 800cb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f47f ad5c 	bne.w	800c5f6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cb42:	4b0b      	ldr	r3, [pc, #44]	; (800cb70 <tcp_slowtmr+0x5a8>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cb48:	e067      	b.n	800cc1a <tcp_slowtmr+0x652>
 800cb4a:	bf00      	nop
 800cb4c:	2000d85c 	.word	0x2000d85c
 800cb50:	10624dd3 	.word	0x10624dd3
 800cb54:	000124f8 	.word	0x000124f8
 800cb58:	2000d858 	.word	0x2000d858
 800cb5c:	0801d520 	.word	0x0801d520
 800cb60:	0801d958 	.word	0x0801d958
 800cb64:	0801d564 	.word	0x0801d564
 800cb68:	0801d984 	.word	0x0801d984
 800cb6c:	2000d854 	.word	0x2000d854
 800cb70:	2000d868 	.word	0x2000d868
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb76:	7d1b      	ldrb	r3, [r3, #20]
 800cb78:	2b0a      	cmp	r3, #10
 800cb7a:	d006      	beq.n	800cb8a <tcp_slowtmr+0x5c2>
 800cb7c:	4b2b      	ldr	r3, [pc, #172]	; (800cc2c <tcp_slowtmr+0x664>)
 800cb7e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cb82:	492b      	ldr	r1, [pc, #172]	; (800cc30 <tcp_slowtmr+0x668>)
 800cb84:	482b      	ldr	r0, [pc, #172]	; (800cc34 <tcp_slowtmr+0x66c>)
 800cb86:	f00a fd0b 	bl	80175a0 <iprintf>
    pcb_remove = 0;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cb90:	4b29      	ldr	r3, [pc, #164]	; (800cc38 <tcp_slowtmr+0x670>)
 800cb92:	681a      	ldr	r2, [r3, #0]
 800cb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb96:	6a1b      	ldr	r3, [r3, #32]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	2bf0      	cmp	r3, #240	; 0xf0
 800cb9c:	d904      	bls.n	800cba8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cb9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba2:	3301      	adds	r3, #1
 800cba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d02f      	beq.n	800cc10 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cbb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbb2:	f000 fc19 	bl	800d3e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d010      	beq.n	800cbde <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cbbc:	4b1f      	ldr	r3, [pc, #124]	; (800cc3c <tcp_slowtmr+0x674>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d106      	bne.n	800cbd4 <tcp_slowtmr+0x60c>
 800cbc6:	4b19      	ldr	r3, [pc, #100]	; (800cc2c <tcp_slowtmr+0x664>)
 800cbc8:	f240 52af 	movw	r2, #1455	; 0x5af
 800cbcc:	491c      	ldr	r1, [pc, #112]	; (800cc40 <tcp_slowtmr+0x678>)
 800cbce:	4819      	ldr	r0, [pc, #100]	; (800cc34 <tcp_slowtmr+0x66c>)
 800cbd0:	f00a fce6 	bl	80175a0 <iprintf>
        prev->next = pcb->next;
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	68da      	ldr	r2, [r3, #12]
 800cbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbda:	60da      	str	r2, [r3, #12]
 800cbdc:	e00f      	b.n	800cbfe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cbde:	4b17      	ldr	r3, [pc, #92]	; (800cc3c <tcp_slowtmr+0x674>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d006      	beq.n	800cbf6 <tcp_slowtmr+0x62e>
 800cbe8:	4b10      	ldr	r3, [pc, #64]	; (800cc2c <tcp_slowtmr+0x664>)
 800cbea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cbee:	4915      	ldr	r1, [pc, #84]	; (800cc44 <tcp_slowtmr+0x67c>)
 800cbf0:	4810      	ldr	r0, [pc, #64]	; (800cc34 <tcp_slowtmr+0x66c>)
 800cbf2:	f00a fcd5 	bl	80175a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	4a10      	ldr	r2, [pc, #64]	; (800cc3c <tcp_slowtmr+0x674>)
 800cbfc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cbfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc00:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	68db      	ldr	r3, [r3, #12]
 800cc06:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cc08:	69f8      	ldr	r0, [r7, #28]
 800cc0a:	f7fe ff81 	bl	800bb10 <tcp_free>
 800cc0e:	e004      	b.n	800cc1a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cc10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc12:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1a9      	bne.n	800cb74 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cc20:	bf00      	nop
 800cc22:	bf00      	nop
 800cc24:	3730      	adds	r7, #48	; 0x30
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bdb0      	pop	{r4, r5, r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	0801d520 	.word	0x0801d520
 800cc30:	0801d9b0 	.word	0x0801d9b0
 800cc34:	0801d564 	.word	0x0801d564
 800cc38:	2000d85c 	.word	0x2000d85c
 800cc3c:	2000d868 	.word	0x2000d868
 800cc40:	0801d9e0 	.word	0x0801d9e0
 800cc44:	0801da08 	.word	0x0801da08

0800cc48 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cc4e:	4b2d      	ldr	r3, [pc, #180]	; (800cd04 <tcp_fasttmr+0xbc>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	3301      	adds	r3, #1
 800cc54:	b2da      	uxtb	r2, r3
 800cc56:	4b2b      	ldr	r3, [pc, #172]	; (800cd04 <tcp_fasttmr+0xbc>)
 800cc58:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cc5a:	4b2b      	ldr	r3, [pc, #172]	; (800cd08 <tcp_fasttmr+0xc0>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cc60:	e048      	b.n	800ccf4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	7f9a      	ldrb	r2, [r3, #30]
 800cc66:	4b27      	ldr	r3, [pc, #156]	; (800cd04 <tcp_fasttmr+0xbc>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d03f      	beq.n	800ccee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cc6e:	4b25      	ldr	r3, [pc, #148]	; (800cd04 <tcp_fasttmr+0xbc>)
 800cc70:	781a      	ldrb	r2, [r3, #0]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	8b5b      	ldrh	r3, [r3, #26]
 800cc7a:	f003 0301 	and.w	r3, r3, #1
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d010      	beq.n	800cca4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	8b5b      	ldrh	r3, [r3, #26]
 800cc86:	f043 0302 	orr.w	r3, r3, #2
 800cc8a:	b29a      	uxth	r2, r3
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f004 f8d3 	bl	8010e3c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	8b5b      	ldrh	r3, [r3, #26]
 800cc9a:	f023 0303 	bic.w	r3, r3, #3
 800cc9e:	b29a      	uxth	r2, r3
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	8b5b      	ldrh	r3, [r3, #26]
 800cca8:	f003 0308 	and.w	r3, r3, #8
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d009      	beq.n	800ccc4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	8b5b      	ldrh	r3, [r3, #26]
 800ccb4:	f023 0308 	bic.w	r3, r3, #8
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff f8ba 	bl	800be38 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	68db      	ldr	r3, [r3, #12]
 800ccc8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00a      	beq.n	800cce8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ccd2:	4b0e      	ldr	r3, [pc, #56]	; (800cd0c <tcp_fasttmr+0xc4>)
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f819 	bl	800cd10 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ccde:	4b0b      	ldr	r3, [pc, #44]	; (800cd0c <tcp_fasttmr+0xc4>)
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d000      	beq.n	800cce8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cce6:	e7b8      	b.n	800cc5a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	607b      	str	r3, [r7, #4]
 800ccec:	e002      	b.n	800ccf4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	68db      	ldr	r3, [r3, #12]
 800ccf2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1b3      	bne.n	800cc62 <tcp_fasttmr+0x1a>
    }
  }
}
 800ccfa:	bf00      	nop
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	20001212 	.word	0x20001212
 800cd08:	2000d858 	.word	0x2000d858
 800cd0c:	2000d854 	.word	0x2000d854

0800cd10 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cd10:	b590      	push	{r4, r7, lr}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d109      	bne.n	800cd32 <tcp_process_refused_data+0x22>
 800cd1e:	4b37      	ldr	r3, [pc, #220]	; (800cdfc <tcp_process_refused_data+0xec>)
 800cd20:	f240 6209 	movw	r2, #1545	; 0x609
 800cd24:	4936      	ldr	r1, [pc, #216]	; (800ce00 <tcp_process_refused_data+0xf0>)
 800cd26:	4837      	ldr	r0, [pc, #220]	; (800ce04 <tcp_process_refused_data+0xf4>)
 800cd28:	f00a fc3a 	bl	80175a0 <iprintf>
 800cd2c:	f06f 030f 	mvn.w	r3, #15
 800cd30:	e060      	b.n	800cdf4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd36:	7b5b      	ldrb	r3, [r3, #13]
 800cd38:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd3e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2200      	movs	r2, #0
 800cd44:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00b      	beq.n	800cd68 <tcp_process_refused_data+0x58>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6918      	ldr	r0, [r3, #16]
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	6879      	ldr	r1, [r7, #4]
 800cd60:	47a0      	blx	r4
 800cd62:	4603      	mov	r3, r0
 800cd64:	73fb      	strb	r3, [r7, #15]
 800cd66:	e007      	b.n	800cd78 <tcp_process_refused_data+0x68>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	68ba      	ldr	r2, [r7, #8]
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	2000      	movs	r0, #0
 800cd70:	f000 f8c4 	bl	800cefc <tcp_recv_null>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cd78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d12a      	bne.n	800cdd6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cd80:	7bbb      	ldrb	r3, [r7, #14]
 800cd82:	f003 0320 	and.w	r3, r3, #32
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d033      	beq.n	800cdf2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd8e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cd92:	d005      	beq.n	800cda0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd98:	3301      	adds	r3, #1
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00b      	beq.n	800cdc2 <tcp_process_refused_data+0xb2>
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6918      	ldr	r0, [r3, #16]
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	47a0      	blx	r4
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	73fb      	strb	r3, [r7, #15]
 800cdc0:	e001      	b.n	800cdc6 <tcp_process_refused_data+0xb6>
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cdc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdca:	f113 0f0d 	cmn.w	r3, #13
 800cdce:	d110      	bne.n	800cdf2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cdd0:	f06f 030c 	mvn.w	r3, #12
 800cdd4:	e00e      	b.n	800cdf4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cdd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdda:	f113 0f0d 	cmn.w	r3, #13
 800cdde:	d102      	bne.n	800cde6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cde0:	f06f 030c 	mvn.w	r3, #12
 800cde4:	e006      	b.n	800cdf4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	68ba      	ldr	r2, [r7, #8]
 800cdea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cdec:	f06f 0304 	mvn.w	r3, #4
 800cdf0:	e000      	b.n	800cdf4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3714      	adds	r7, #20
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd90      	pop	{r4, r7, pc}
 800cdfc:	0801d520 	.word	0x0801d520
 800ce00:	0801da30 	.word	0x0801da30
 800ce04:	0801d564 	.word	0x0801d564

0800ce08 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b084      	sub	sp, #16
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ce10:	e007      	b.n	800ce22 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 f80a 	bl	800ce32 <tcp_seg_free>
    seg = next;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1f4      	bne.n	800ce12 <tcp_segs_free+0xa>
  }
}
 800ce28:	bf00      	nop
 800ce2a:	bf00      	nop
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b082      	sub	sp, #8
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00f      	beq.n	800ce60 <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d007      	beq.n	800ce58 <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7fe fbaf 	bl	800b5b0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2200      	movs	r2, #0
 800ce56:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	2003      	movs	r0, #3
 800ce5c:	f7fd fd8e 	bl	800a97c <memp_free>
  }
}
 800ce60:	bf00      	nop
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	460b      	mov	r3, r1
 800ce72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d107      	bne.n	800ce8a <tcp_setprio+0x22>
 800ce7a:	4b07      	ldr	r3, [pc, #28]	; (800ce98 <tcp_setprio+0x30>)
 800ce7c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800ce80:	4906      	ldr	r1, [pc, #24]	; (800ce9c <tcp_setprio+0x34>)
 800ce82:	4807      	ldr	r0, [pc, #28]	; (800cea0 <tcp_setprio+0x38>)
 800ce84:	f00a fb8c 	bl	80175a0 <iprintf>
 800ce88:	e002      	b.n	800ce90 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	78fa      	ldrb	r2, [r7, #3]
 800ce8e:	755a      	strb	r2, [r3, #21]
}
 800ce90:	3708      	adds	r7, #8
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	0801d520 	.word	0x0801d520
 800ce9c:	0801da58 	.word	0x0801da58
 800cea0:	0801d564 	.word	0x0801d564

0800cea4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d106      	bne.n	800cec0 <tcp_seg_copy+0x1c>
 800ceb2:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <tcp_seg_copy+0x4c>)
 800ceb4:	f240 6282 	movw	r2, #1666	; 0x682
 800ceb8:	490e      	ldr	r1, [pc, #56]	; (800cef4 <tcp_seg_copy+0x50>)
 800ceba:	480f      	ldr	r0, [pc, #60]	; (800cef8 <tcp_seg_copy+0x54>)
 800cebc:	f00a fb70 	bl	80175a0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cec0:	2003      	movs	r0, #3
 800cec2:	f7fd fd0f 	bl	800a8e4 <memp_malloc>
 800cec6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d101      	bne.n	800ced2 <tcp_seg_copy+0x2e>
    return NULL;
 800cece:	2300      	movs	r3, #0
 800ced0:	e00a      	b.n	800cee8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ced2:	2210      	movs	r2, #16
 800ced4:	6879      	ldr	r1, [r7, #4]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f009 fec8 	bl	8016c6c <memcpy>
  pbuf_ref(cseg->p);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	685b      	ldr	r3, [r3, #4]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fe fc05 	bl	800b6f0 <pbuf_ref>
  return cseg;
 800cee6:	68fb      	ldr	r3, [r7, #12]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	0801d520 	.word	0x0801d520
 800cef4:	0801da74 	.word	0x0801da74
 800cef8:	0801d564 	.word	0x0801d564

0800cefc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
 800cf08:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d109      	bne.n	800cf24 <tcp_recv_null+0x28>
 800cf10:	4b12      	ldr	r3, [pc, #72]	; (800cf5c <tcp_recv_null+0x60>)
 800cf12:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cf16:	4912      	ldr	r1, [pc, #72]	; (800cf60 <tcp_recv_null+0x64>)
 800cf18:	4812      	ldr	r0, [pc, #72]	; (800cf64 <tcp_recv_null+0x68>)
 800cf1a:	f00a fb41 	bl	80175a0 <iprintf>
 800cf1e:	f06f 030f 	mvn.w	r3, #15
 800cf22:	e016      	b.n	800cf52 <tcp_recv_null+0x56>

  if (p != NULL) {
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d009      	beq.n	800cf3e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	891b      	ldrh	r3, [r3, #8]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	68b8      	ldr	r0, [r7, #8]
 800cf32:	f7ff fab3 	bl	800c49c <tcp_recved>
    pbuf_free(p);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7fe fb3a 	bl	800b5b0 <pbuf_free>
 800cf3c:	e008      	b.n	800cf50 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cf3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d104      	bne.n	800cf50 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cf46:	68b8      	ldr	r0, [r7, #8]
 800cf48:	f7fe ffe0 	bl	800bf0c <tcp_close>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	e000      	b.n	800cf52 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	0801d520 	.word	0x0801d520
 800cf60:	0801da90 	.word	0x0801da90
 800cf64:	0801d564 	.word	0x0801d564

0800cf68 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b086      	sub	sp, #24
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	4603      	mov	r3, r0
 800cf70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cf72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	db01      	blt.n	800cf7e <tcp_kill_prio+0x16>
 800cf7a:	79fb      	ldrb	r3, [r7, #7]
 800cf7c:	e000      	b.n	800cf80 <tcp_kill_prio+0x18>
 800cf7e:	237f      	movs	r3, #127	; 0x7f
 800cf80:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cf82:	7afb      	ldrb	r3, [r7, #11]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d034      	beq.n	800cff2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cf88:	7afb      	ldrb	r3, [r7, #11]
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cf92:	2300      	movs	r3, #0
 800cf94:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf96:	4b19      	ldr	r3, [pc, #100]	; (800cffc <tcp_kill_prio+0x94>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	617b      	str	r3, [r7, #20]
 800cf9c:	e01f      	b.n	800cfde <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	7d5b      	ldrb	r3, [r3, #21]
 800cfa2:	7afa      	ldrb	r2, [r7, #11]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d80c      	bhi.n	800cfc2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cfac:	7afa      	ldrb	r2, [r7, #11]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	d112      	bne.n	800cfd8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cfb2:	4b13      	ldr	r3, [pc, #76]	; (800d000 <tcp_kill_prio+0x98>)
 800cfb4:	681a      	ldr	r2, [r3, #0]
 800cfb6:	697b      	ldr	r3, [r7, #20]
 800cfb8:	6a1b      	ldr	r3, [r3, #32]
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d80a      	bhi.n	800cfd8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cfc2:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <tcp_kill_prio+0x98>)
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	7d5b      	ldrb	r3, [r3, #21]
 800cfd6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	68db      	ldr	r3, [r3, #12]
 800cfdc:	617b      	str	r3, [r7, #20]
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d1dc      	bne.n	800cf9e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d004      	beq.n	800cff4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cfea:	6938      	ldr	r0, [r7, #16]
 800cfec:	f7ff f87c 	bl	800c0e8 <tcp_abort>
 800cff0:	e000      	b.n	800cff4 <tcp_kill_prio+0x8c>
    return;
 800cff2:	bf00      	nop
  }
}
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	2000d858 	.word	0x2000d858
 800d000:	2000d85c 	.word	0x2000d85c

0800d004 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af00      	add	r7, sp, #0
 800d00a:	4603      	mov	r3, r0
 800d00c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d00e:	79fb      	ldrb	r3, [r7, #7]
 800d010:	2b08      	cmp	r3, #8
 800d012:	d009      	beq.n	800d028 <tcp_kill_state+0x24>
 800d014:	79fb      	ldrb	r3, [r7, #7]
 800d016:	2b09      	cmp	r3, #9
 800d018:	d006      	beq.n	800d028 <tcp_kill_state+0x24>
 800d01a:	4b1a      	ldr	r3, [pc, #104]	; (800d084 <tcp_kill_state+0x80>)
 800d01c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d020:	4919      	ldr	r1, [pc, #100]	; (800d088 <tcp_kill_state+0x84>)
 800d022:	481a      	ldr	r0, [pc, #104]	; (800d08c <tcp_kill_state+0x88>)
 800d024:	f00a fabc 	bl	80175a0 <iprintf>

  inactivity = 0;
 800d028:	2300      	movs	r3, #0
 800d02a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d02c:	2300      	movs	r3, #0
 800d02e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d030:	4b17      	ldr	r3, [pc, #92]	; (800d090 <tcp_kill_state+0x8c>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	617b      	str	r3, [r7, #20]
 800d036:	e017      	b.n	800d068 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	7d1b      	ldrb	r3, [r3, #20]
 800d03c:	79fa      	ldrb	r2, [r7, #7]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d10f      	bne.n	800d062 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d042:	4b14      	ldr	r3, [pc, #80]	; (800d094 <tcp_kill_state+0x90>)
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	6a1b      	ldr	r3, [r3, #32]
 800d04a:	1ad3      	subs	r3, r2, r3
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d807      	bhi.n	800d062 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d052:	4b10      	ldr	r3, [pc, #64]	; (800d094 <tcp_kill_state+0x90>)
 800d054:	681a      	ldr	r2, [r3, #0]
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	6a1b      	ldr	r3, [r3, #32]
 800d05a:	1ad3      	subs	r3, r2, r3
 800d05c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	617b      	str	r3, [r7, #20]
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d1e4      	bne.n	800d038 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d06e:	693b      	ldr	r3, [r7, #16]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d003      	beq.n	800d07c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d074:	2100      	movs	r1, #0
 800d076:	6938      	ldr	r0, [r7, #16]
 800d078:	f7fe ff78 	bl	800bf6c <tcp_abandon>
  }
}
 800d07c:	bf00      	nop
 800d07e:	3718      	adds	r7, #24
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	0801d520 	.word	0x0801d520
 800d088:	0801daac 	.word	0x0801daac
 800d08c:	0801d564 	.word	0x0801d564
 800d090:	2000d858 	.word	0x2000d858
 800d094:	2000d85c 	.word	0x2000d85c

0800d098 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0a6:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <tcp_kill_timewait+0x58>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	60fb      	str	r3, [r7, #12]
 800d0ac:	e012      	b.n	800d0d4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d0ae:	4b11      	ldr	r3, [pc, #68]	; (800d0f4 <tcp_kill_timewait+0x5c>)
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6a1b      	ldr	r3, [r3, #32]
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d807      	bhi.n	800d0ce <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d0be:	4b0d      	ldr	r3, [pc, #52]	; (800d0f4 <tcp_kill_timewait+0x5c>)
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6a1b      	ldr	r3, [r3, #32]
 800d0c6:	1ad3      	subs	r3, r2, r3
 800d0c8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	60fb      	str	r3, [r7, #12]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1e9      	bne.n	800d0ae <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d0e0:	68b8      	ldr	r0, [r7, #8]
 800d0e2:	f7ff f801 	bl	800c0e8 <tcp_abort>
  }
}
 800d0e6:	bf00      	nop
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	2000d868 	.word	0x2000d868
 800d0f4:	2000d85c 	.word	0x2000d85c

0800d0f8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d0fe:	4b10      	ldr	r3, [pc, #64]	; (800d140 <tcp_handle_closepend+0x48>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d104:	e014      	b.n	800d130 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	8b5b      	ldrh	r3, [r3, #26]
 800d110:	f003 0308 	and.w	r3, r3, #8
 800d114:	2b00      	cmp	r3, #0
 800d116:	d009      	beq.n	800d12c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	8b5b      	ldrh	r3, [r3, #26]
 800d11c:	f023 0308 	bic.w	r3, r3, #8
 800d120:	b29a      	uxth	r2, r3
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7fe fe86 	bl	800be38 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1e7      	bne.n	800d106 <tcp_handle_closepend+0xe>
  }
}
 800d136:	bf00      	nop
 800d138:	bf00      	nop
 800d13a:	3708      	adds	r7, #8
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	2000d858 	.word	0x2000d858

0800d144 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4603      	mov	r3, r0
 800d14c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d14e:	2001      	movs	r0, #1
 800d150:	f7fd fbc8 	bl	800a8e4 <memp_malloc>
 800d154:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d126      	bne.n	800d1aa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d15c:	f7ff ffcc 	bl	800d0f8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d160:	f7ff ff9a 	bl	800d098 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d164:	2001      	movs	r0, #1
 800d166:	f7fd fbbd 	bl	800a8e4 <memp_malloc>
 800d16a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d11b      	bne.n	800d1aa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d172:	2009      	movs	r0, #9
 800d174:	f7ff ff46 	bl	800d004 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d178:	2001      	movs	r0, #1
 800d17a:	f7fd fbb3 	bl	800a8e4 <memp_malloc>
 800d17e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d111      	bne.n	800d1aa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d186:	2008      	movs	r0, #8
 800d188:	f7ff ff3c 	bl	800d004 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d18c:	2001      	movs	r0, #1
 800d18e:	f7fd fba9 	bl	800a8e4 <memp_malloc>
 800d192:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d107      	bne.n	800d1aa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d19a:	79fb      	ldrb	r3, [r7, #7]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fee3 	bl	800cf68 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d1a2:	2001      	movs	r0, #1
 800d1a4:	f7fd fb9e 	bl	800a8e4 <memp_malloc>
 800d1a8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d03f      	beq.n	800d230 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d1b0:	229c      	movs	r2, #156	; 0x9c
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f009 fd81 	bl	8016cbc <memset>
    pcb->prio = prio;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	79fa      	ldrb	r2, [r7, #7]
 800d1be:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d1c6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d1d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	22ff      	movs	r2, #255	; 0xff
 800d1de:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d1e6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2206      	movs	r2, #6
 800d1ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2206      	movs	r2, #6
 800d1f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1fc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2201      	movs	r2, #1
 800d202:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d206:	4b0d      	ldr	r3, [pc, #52]	; (800d23c <tcp_alloc+0xf8>)
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d20e:	4b0c      	ldr	r3, [pc, #48]	; (800d240 <tcp_alloc+0xfc>)
 800d210:	781a      	ldrb	r2, [r3, #0]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d21c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	4a08      	ldr	r2, [pc, #32]	; (800d244 <tcp_alloc+0x100>)
 800d224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	4a07      	ldr	r2, [pc, #28]	; (800d248 <tcp_alloc+0x104>)
 800d22c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d230:	68fb      	ldr	r3, [r7, #12]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	2000d85c 	.word	0x2000d85c
 800d240:	20001212 	.word	0x20001212
 800d244:	0800cefd 	.word	0x0800cefd
 800d248:	006ddd00 	.word	0x006ddd00

0800d24c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d256:	2040      	movs	r0, #64	; 0x40
 800d258:	f7ff ff74 	bl	800d144 <tcp_alloc>
 800d25c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d25e:	68fb      	ldr	r3, [r7, #12]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3710      	adds	r7, #16
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d002      	beq.n	800d27e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	683a      	ldr	r2, [r7, #0]
 800d27c:	611a      	str	r2, [r3, #16]
  }
}
 800d27e:	bf00      	nop
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
	...

0800d28c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d00e      	beq.n	800d2ba <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	7d1b      	ldrb	r3, [r3, #20]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d106      	bne.n	800d2b2 <tcp_recv+0x26>
 800d2a4:	4b07      	ldr	r3, [pc, #28]	; (800d2c4 <tcp_recv+0x38>)
 800d2a6:	f240 72df 	movw	r2, #2015	; 0x7df
 800d2aa:	4907      	ldr	r1, [pc, #28]	; (800d2c8 <tcp_recv+0x3c>)
 800d2ac:	4807      	ldr	r0, [pc, #28]	; (800d2cc <tcp_recv+0x40>)
 800d2ae:	f00a f977 	bl	80175a0 <iprintf>
    pcb->recv = recv;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	683a      	ldr	r2, [r7, #0]
 800d2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d2ba:	bf00      	nop
 800d2bc:	3708      	adds	r7, #8
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	0801d520 	.word	0x0801d520
 800d2c8:	0801dabc 	.word	0x0801dabc
 800d2cc:	0801d564 	.word	0x0801d564

0800d2d0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d00e      	beq.n	800d2fe <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	7d1b      	ldrb	r3, [r3, #20]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d106      	bne.n	800d2f6 <tcp_sent+0x26>
 800d2e8:	4b07      	ldr	r3, [pc, #28]	; (800d308 <tcp_sent+0x38>)
 800d2ea:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d2ee:	4907      	ldr	r1, [pc, #28]	; (800d30c <tcp_sent+0x3c>)
 800d2f0:	4807      	ldr	r0, [pc, #28]	; (800d310 <tcp_sent+0x40>)
 800d2f2:	f00a f955 	bl	80175a0 <iprintf>
    pcb->sent = sent;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	683a      	ldr	r2, [r7, #0]
 800d2fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d2fe:	bf00      	nop
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	0801d520 	.word	0x0801d520
 800d30c:	0801dae4 	.word	0x0801dae4
 800d310:	0801d564 	.word	0x0801d564

0800d314 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d00e      	beq.n	800d342 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7d1b      	ldrb	r3, [r3, #20]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d106      	bne.n	800d33a <tcp_err+0x26>
 800d32c:	4b07      	ldr	r3, [pc, #28]	; (800d34c <tcp_err+0x38>)
 800d32e:	f640 020d 	movw	r2, #2061	; 0x80d
 800d332:	4907      	ldr	r1, [pc, #28]	; (800d350 <tcp_err+0x3c>)
 800d334:	4807      	ldr	r0, [pc, #28]	; (800d354 <tcp_err+0x40>)
 800d336:	f00a f933 	bl	80175a0 <iprintf>
    pcb->errf = err;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	683a      	ldr	r2, [r7, #0]
 800d33e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d342:	bf00      	nop
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	0801d520 	.word	0x0801d520
 800d350:	0801db0c 	.word	0x0801db0c
 800d354:	0801d564 	.word	0x0801d564

0800d358 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d358:	b480      	push	{r7}
 800d35a:	b085      	sub	sp, #20
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d008      	beq.n	800d37a <tcp_accept+0x22>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	7d1b      	ldrb	r3, [r3, #20]
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d104      	bne.n	800d37a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	619a      	str	r2, [r3, #24]
  }
}
 800d37a:	bf00      	nop
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
	...

0800d388 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	4613      	mov	r3, r2
 800d394:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d107      	bne.n	800d3ac <tcp_poll+0x24>
 800d39c:	4b0e      	ldr	r3, [pc, #56]	; (800d3d8 <tcp_poll+0x50>)
 800d39e:	f640 023d 	movw	r2, #2109	; 0x83d
 800d3a2:	490e      	ldr	r1, [pc, #56]	; (800d3dc <tcp_poll+0x54>)
 800d3a4:	480e      	ldr	r0, [pc, #56]	; (800d3e0 <tcp_poll+0x58>)
 800d3a6:	f00a f8fb 	bl	80175a0 <iprintf>
 800d3aa:	e011      	b.n	800d3d0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	7d1b      	ldrb	r3, [r3, #20]
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d106      	bne.n	800d3c2 <tcp_poll+0x3a>
 800d3b4:	4b08      	ldr	r3, [pc, #32]	; (800d3d8 <tcp_poll+0x50>)
 800d3b6:	f640 023e 	movw	r2, #2110	; 0x83e
 800d3ba:	490a      	ldr	r1, [pc, #40]	; (800d3e4 <tcp_poll+0x5c>)
 800d3bc:	4808      	ldr	r0, [pc, #32]	; (800d3e0 <tcp_poll+0x58>)
 800d3be:	f00a f8ef 	bl	80175a0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	79fa      	ldrb	r2, [r7, #7]
 800d3ce:	775a      	strb	r2, [r3, #29]
}
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	0801d520 	.word	0x0801d520
 800d3dc:	0801db34 	.word	0x0801db34
 800d3e0:	0801d564 	.word	0x0801d564
 800d3e4:	0801db4c 	.word	0x0801db4c

0800d3e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d107      	bne.n	800d406 <tcp_pcb_purge+0x1e>
 800d3f6:	4b21      	ldr	r3, [pc, #132]	; (800d47c <tcp_pcb_purge+0x94>)
 800d3f8:	f640 0251 	movw	r2, #2129	; 0x851
 800d3fc:	4920      	ldr	r1, [pc, #128]	; (800d480 <tcp_pcb_purge+0x98>)
 800d3fe:	4821      	ldr	r0, [pc, #132]	; (800d484 <tcp_pcb_purge+0x9c>)
 800d400:	f00a f8ce 	bl	80175a0 <iprintf>
 800d404:	e037      	b.n	800d476 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	7d1b      	ldrb	r3, [r3, #20]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d033      	beq.n	800d476 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d412:	2b0a      	cmp	r3, #10
 800d414:	d02f      	beq.n	800d476 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d02b      	beq.n	800d476 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d422:	2b00      	cmp	r3, #0
 800d424:	d007      	beq.n	800d436 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7fe f8c0 	bl	800b5b0 <pbuf_free>
      pcb->refused_data = NULL;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2200      	movs	r2, #0
 800d434:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d002      	beq.n	800d444 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f000 f994 	bl	800d76c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d44a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d450:	4618      	mov	r0, r3
 800d452:	f7ff fcd9 	bl	800ce08 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff fcd4 	bl	800ce08 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2200      	movs	r2, #0
 800d464:	66da      	str	r2, [r3, #108]	; 0x6c
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	0801d520 	.word	0x0801d520
 800d480:	0801db6c 	.word	0x0801db6c
 800d484:	0801d564 	.word	0x0801d564

0800d488 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d106      	bne.n	800d4a6 <tcp_pcb_remove+0x1e>
 800d498:	4b44      	ldr	r3, [pc, #272]	; (800d5ac <tcp_pcb_remove+0x124>)
 800d49a:	f640 0283 	movw	r2, #2179	; 0x883
 800d49e:	4944      	ldr	r1, [pc, #272]	; (800d5b0 <tcp_pcb_remove+0x128>)
 800d4a0:	4844      	ldr	r0, [pc, #272]	; (800d5b4 <tcp_pcb_remove+0x12c>)
 800d4a2:	f00a f87d 	bl	80175a0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d106      	bne.n	800d4ba <tcp_pcb_remove+0x32>
 800d4ac:	4b3f      	ldr	r3, [pc, #252]	; (800d5ac <tcp_pcb_remove+0x124>)
 800d4ae:	f640 0284 	movw	r2, #2180	; 0x884
 800d4b2:	4941      	ldr	r1, [pc, #260]	; (800d5b8 <tcp_pcb_remove+0x130>)
 800d4b4:	483f      	ldr	r0, [pc, #252]	; (800d5b4 <tcp_pcb_remove+0x12c>)
 800d4b6:	f00a f873 	bl	80175a0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	683a      	ldr	r2, [r7, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d105      	bne.n	800d4d0 <tcp_pcb_remove+0x48>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	68da      	ldr	r2, [r3, #12]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	601a      	str	r2, [r3, #0]
 800d4ce:	e013      	b.n	800d4f8 <tcp_pcb_remove+0x70>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	e00c      	b.n	800d4f2 <tcp_pcb_remove+0x6a>
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d104      	bne.n	800d4ec <tcp_pcb_remove+0x64>
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	68da      	ldr	r2, [r3, #12]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	60da      	str	r2, [r3, #12]
 800d4ea:	e005      	b.n	800d4f8 <tcp_pcb_remove+0x70>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	60fb      	str	r3, [r7, #12]
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d1ef      	bne.n	800d4d8 <tcp_pcb_remove+0x50>
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d4fe:	6838      	ldr	r0, [r7, #0]
 800d500:	f7ff ff72 	bl	800d3e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	7d1b      	ldrb	r3, [r3, #20]
 800d508:	2b0a      	cmp	r3, #10
 800d50a:	d013      	beq.n	800d534 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d510:	2b01      	cmp	r3, #1
 800d512:	d00f      	beq.n	800d534 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	8b5b      	ldrh	r3, [r3, #26]
 800d518:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d009      	beq.n	800d534 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	8b5b      	ldrh	r3, [r3, #26]
 800d524:	f043 0302 	orr.w	r3, r3, #2
 800d528:	b29a      	uxth	r2, r3
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d52e:	6838      	ldr	r0, [r7, #0]
 800d530:	f003 fc84 	bl	8010e3c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	7d1b      	ldrb	r3, [r3, #20]
 800d538:	2b01      	cmp	r3, #1
 800d53a:	d020      	beq.n	800d57e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d540:	2b00      	cmp	r3, #0
 800d542:	d006      	beq.n	800d552 <tcp_pcb_remove+0xca>
 800d544:	4b19      	ldr	r3, [pc, #100]	; (800d5ac <tcp_pcb_remove+0x124>)
 800d546:	f640 0293 	movw	r2, #2195	; 0x893
 800d54a:	491c      	ldr	r1, [pc, #112]	; (800d5bc <tcp_pcb_remove+0x134>)
 800d54c:	4819      	ldr	r0, [pc, #100]	; (800d5b4 <tcp_pcb_remove+0x12c>)
 800d54e:	f00a f827 	bl	80175a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d556:	2b00      	cmp	r3, #0
 800d558:	d006      	beq.n	800d568 <tcp_pcb_remove+0xe0>
 800d55a:	4b14      	ldr	r3, [pc, #80]	; (800d5ac <tcp_pcb_remove+0x124>)
 800d55c:	f640 0294 	movw	r2, #2196	; 0x894
 800d560:	4917      	ldr	r1, [pc, #92]	; (800d5c0 <tcp_pcb_remove+0x138>)
 800d562:	4814      	ldr	r0, [pc, #80]	; (800d5b4 <tcp_pcb_remove+0x12c>)
 800d564:	f00a f81c 	bl	80175a0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d006      	beq.n	800d57e <tcp_pcb_remove+0xf6>
 800d570:	4b0e      	ldr	r3, [pc, #56]	; (800d5ac <tcp_pcb_remove+0x124>)
 800d572:	f640 0296 	movw	r2, #2198	; 0x896
 800d576:	4913      	ldr	r1, [pc, #76]	; (800d5c4 <tcp_pcb_remove+0x13c>)
 800d578:	480e      	ldr	r0, [pc, #56]	; (800d5b4 <tcp_pcb_remove+0x12c>)
 800d57a:	f00a f811 	bl	80175a0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2200      	movs	r2, #0
 800d582:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	2200      	movs	r2, #0
 800d588:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 800d58a:	f000 f92f 	bl	800d7ec <tcp_pcbs_sane>
 800d58e:	4603      	mov	r3, r0
 800d590:	2b00      	cmp	r3, #0
 800d592:	d106      	bne.n	800d5a2 <tcp_pcb_remove+0x11a>
 800d594:	4b05      	ldr	r3, [pc, #20]	; (800d5ac <tcp_pcb_remove+0x124>)
 800d596:	f640 029e 	movw	r2, #2206	; 0x89e
 800d59a:	490b      	ldr	r1, [pc, #44]	; (800d5c8 <tcp_pcb_remove+0x140>)
 800d59c:	4805      	ldr	r0, [pc, #20]	; (800d5b4 <tcp_pcb_remove+0x12c>)
 800d59e:	f009 ffff 	bl	80175a0 <iprintf>
}
 800d5a2:	bf00      	nop
 800d5a4:	3710      	adds	r7, #16
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	0801d520 	.word	0x0801d520
 800d5b0:	0801db88 	.word	0x0801db88
 800d5b4:	0801d564 	.word	0x0801d564
 800d5b8:	0801dba4 	.word	0x0801dba4
 800d5bc:	0801dbc4 	.word	0x0801dbc4
 800d5c0:	0801dbdc 	.word	0x0801dbdc
 800d5c4:	0801dbf8 	.word	0x0801dbf8
 800d5c8:	0801dc10 	.word	0x0801dc10

0800d5cc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d106      	bne.n	800d5e8 <tcp_next_iss+0x1c>
 800d5da:	4b0a      	ldr	r3, [pc, #40]	; (800d604 <tcp_next_iss+0x38>)
 800d5dc:	f640 02af 	movw	r2, #2223	; 0x8af
 800d5e0:	4909      	ldr	r1, [pc, #36]	; (800d608 <tcp_next_iss+0x3c>)
 800d5e2:	480a      	ldr	r0, [pc, #40]	; (800d60c <tcp_next_iss+0x40>)
 800d5e4:	f009 ffdc 	bl	80175a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d5e8:	4b09      	ldr	r3, [pc, #36]	; (800d610 <tcp_next_iss+0x44>)
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	4b09      	ldr	r3, [pc, #36]	; (800d614 <tcp_next_iss+0x48>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4413      	add	r3, r2
 800d5f2:	4a07      	ldr	r2, [pc, #28]	; (800d610 <tcp_next_iss+0x44>)
 800d5f4:	6013      	str	r3, [r2, #0]
  return iss;
 800d5f6:	4b06      	ldr	r3, [pc, #24]	; (800d610 <tcp_next_iss+0x44>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	0801d520 	.word	0x0801d520
 800d608:	0801dc30 	.word	0x0801dc30
 800d60c:	0801d564 	.word	0x0801d564
 800d610:	200005bc 	.word	0x200005bc
 800d614:	2000d85c 	.word	0x2000d85c

0800d618 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	4603      	mov	r3, r0
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
 800d624:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d106      	bne.n	800d63a <tcp_eff_send_mss_netif+0x22>
 800d62c:	4b14      	ldr	r3, [pc, #80]	; (800d680 <tcp_eff_send_mss_netif+0x68>)
 800d62e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d632:	4914      	ldr	r1, [pc, #80]	; (800d684 <tcp_eff_send_mss_netif+0x6c>)
 800d634:	4814      	ldr	r0, [pc, #80]	; (800d688 <tcp_eff_send_mss_netif+0x70>)
 800d636:	f009 ffb3 	bl	80175a0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d640:	89fb      	ldrh	r3, [r7, #14]
 800d642:	e019      	b.n	800d678 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d648:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d64a:	8afb      	ldrh	r3, [r7, #22]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d012      	beq.n	800d676 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d650:	2328      	movs	r3, #40	; 0x28
 800d652:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d654:	8afa      	ldrh	r2, [r7, #22]
 800d656:	8abb      	ldrh	r3, [r7, #20]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d904      	bls.n	800d666 <tcp_eff_send_mss_netif+0x4e>
 800d65c:	8afa      	ldrh	r2, [r7, #22]
 800d65e:	8abb      	ldrh	r3, [r7, #20]
 800d660:	1ad3      	subs	r3, r2, r3
 800d662:	b29b      	uxth	r3, r3
 800d664:	e000      	b.n	800d668 <tcp_eff_send_mss_netif+0x50>
 800d666:	2300      	movs	r3, #0
 800d668:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d66a:	8a7a      	ldrh	r2, [r7, #18]
 800d66c:	89fb      	ldrh	r3, [r7, #14]
 800d66e:	4293      	cmp	r3, r2
 800d670:	bf28      	it	cs
 800d672:	4613      	movcs	r3, r2
 800d674:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d676:	89fb      	ldrh	r3, [r7, #14]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	0801d520 	.word	0x0801d520
 800d684:	0801dc4c 	.word	0x0801dc4c
 800d688:	0801d564 	.word	0x0801d564

0800d68c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d119      	bne.n	800d6d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d6a0:	4b10      	ldr	r3, [pc, #64]	; (800d6e4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d6a2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d6a6:	4910      	ldr	r1, [pc, #64]	; (800d6e8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d6a8:	4810      	ldr	r0, [pc, #64]	; (800d6ec <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d6aa:	f009 ff79 	bl	80175a0 <iprintf>

  while (pcb != NULL) {
 800d6ae:	e011      	b.n	800d6d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d108      	bne.n	800d6ce <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f7fe fd10 	bl	800c0e8 <tcp_abort>
      pcb = next;
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	60fb      	str	r3, [r7, #12]
 800d6cc:	e002      	b.n	800d6d4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d1ea      	bne.n	800d6b0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d6da:	bf00      	nop
 800d6dc:	bf00      	nop
 800d6de:	3710      	adds	r7, #16
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	0801d520 	.word	0x0801d520
 800d6e8:	0801dc74 	.word	0x0801dc74
 800d6ec:	0801d564 	.word	0x0801d564

0800d6f0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d02a      	beq.n	800d756 <tcp_netif_ip_addr_changed+0x66>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d026      	beq.n	800d756 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d708:	4b15      	ldr	r3, [pc, #84]	; (800d760 <tcp_netif_ip_addr_changed+0x70>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4619      	mov	r1, r3
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7ff ffbc 	bl	800d68c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d714:	4b13      	ldr	r3, [pc, #76]	; (800d764 <tcp_netif_ip_addr_changed+0x74>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4619      	mov	r1, r3
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff ffb6 	bl	800d68c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d017      	beq.n	800d756 <tcp_netif_ip_addr_changed+0x66>
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d013      	beq.n	800d756 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d72e:	4b0e      	ldr	r3, [pc, #56]	; (800d768 <tcp_netif_ip_addr_changed+0x78>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	60fb      	str	r3, [r7, #12]
 800d734:	e00c      	b.n	800d750 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d103      	bne.n	800d74a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	681a      	ldr	r2, [r3, #0]
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	60fb      	str	r3, [r7, #12]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d1ef      	bne.n	800d736 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d756:	bf00      	nop
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	2000d858 	.word	0x2000d858
 800d764:	2000d864 	.word	0x2000d864
 800d768:	2000d860 	.word	0x2000d860

0800d76c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b082      	sub	sp, #8
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d007      	beq.n	800d78c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d780:	4618      	mov	r0, r3
 800d782:	f7ff fb41 	bl	800ce08 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d78c:	bf00      	nop
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <tcp_debug_print>:
 *
 * @param tcphdr pointer to a struct tcp_hdr
 */
void
tcp_debug_print(struct tcp_hdr *tcphdr)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 3 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 2 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 1 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr)      & 1),
                          lwip_ntohs(tcphdr->wnd)));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	899b      	ldrh	r3, [r3, #12]
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	f7fc fb6a 	bl	8009e7c <lwip_htons>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 f80f 	bl	800d7d6 <tcp_debug_print_flags>
  LWIP_DEBUGF(TCP_DEBUG, ("), win)\n"));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
  LWIP_DEBUGF(TCP_DEBUG, ("|    0x%04"X16_F"     |     %5"U16_F"     | (chksum, urgp)\n",
                          lwip_ntohs(tcphdr->chksum), lwip_ntohs(tcphdr->urgp)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
}
 800d7b8:	bf00      	nop
 800d7ba:	3708      	adds	r7, #8
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
}
 800d7ca:	bf00      	nop
 800d7cc:	370c      	adds	r7, #12
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr

0800d7d6 <tcp_debug_print_flags>:
 *
 * @param flags tcp flags, all active flags are printed
 */
void
tcp_debug_print_flags(u8_t flags)
{
 800d7d6:	b480      	push	{r7}
 800d7d8:	b083      	sub	sp, #12
 800d7da:	af00      	add	r7, sp, #0
 800d7dc:	4603      	mov	r3, r0
 800d7de:	71fb      	strb	r3, [r7, #7]
  }
  if (flags & TCP_CWR) {
    LWIP_DEBUGF(TCP_DEBUG, ("CWR "));
  }
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr

0800d7ec <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b082      	sub	sp, #8
 800d7f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7f2:	4b22      	ldr	r3, [pc, #136]	; (800d87c <tcp_pcbs_sane+0x90>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	607b      	str	r3, [r7, #4]
 800d7f8:	e023      	b.n	800d842 <tcp_pcbs_sane+0x56>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	7d1b      	ldrb	r3, [r3, #20]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d106      	bne.n	800d810 <tcp_pcbs_sane+0x24>
 800d802:	4b1f      	ldr	r3, [pc, #124]	; (800d880 <tcp_pcbs_sane+0x94>)
 800d804:	f640 12d9 	movw	r2, #2521	; 0x9d9
 800d808:	491e      	ldr	r1, [pc, #120]	; (800d884 <tcp_pcbs_sane+0x98>)
 800d80a:	481f      	ldr	r0, [pc, #124]	; (800d888 <tcp_pcbs_sane+0x9c>)
 800d80c:	f009 fec8 	bl	80175a0 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7d1b      	ldrb	r3, [r3, #20]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d106      	bne.n	800d826 <tcp_pcbs_sane+0x3a>
 800d818:	4b19      	ldr	r3, [pc, #100]	; (800d880 <tcp_pcbs_sane+0x94>)
 800d81a:	f640 12da 	movw	r2, #2522	; 0x9da
 800d81e:	491b      	ldr	r1, [pc, #108]	; (800d88c <tcp_pcbs_sane+0xa0>)
 800d820:	4819      	ldr	r0, [pc, #100]	; (800d888 <tcp_pcbs_sane+0x9c>)
 800d822:	f009 febd 	bl	80175a0 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	7d1b      	ldrb	r3, [r3, #20]
 800d82a:	2b0a      	cmp	r3, #10
 800d82c:	d106      	bne.n	800d83c <tcp_pcbs_sane+0x50>
 800d82e:	4b14      	ldr	r3, [pc, #80]	; (800d880 <tcp_pcbs_sane+0x94>)
 800d830:	f640 12db 	movw	r2, #2523	; 0x9db
 800d834:	4916      	ldr	r1, [pc, #88]	; (800d890 <tcp_pcbs_sane+0xa4>)
 800d836:	4814      	ldr	r0, [pc, #80]	; (800d888 <tcp_pcbs_sane+0x9c>)
 800d838:	f009 feb2 	bl	80175a0 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	68db      	ldr	r3, [r3, #12]
 800d840:	607b      	str	r3, [r7, #4]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d1d8      	bne.n	800d7fa <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d848:	4b12      	ldr	r3, [pc, #72]	; (800d894 <tcp_pcbs_sane+0xa8>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	607b      	str	r3, [r7, #4]
 800d84e:	e00d      	b.n	800d86c <tcp_pcbs_sane+0x80>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	7d1b      	ldrb	r3, [r3, #20]
 800d854:	2b0a      	cmp	r3, #10
 800d856:	d006      	beq.n	800d866 <tcp_pcbs_sane+0x7a>
 800d858:	4b09      	ldr	r3, [pc, #36]	; (800d880 <tcp_pcbs_sane+0x94>)
 800d85a:	f640 12de 	movw	r2, #2526	; 0x9de
 800d85e:	490e      	ldr	r1, [pc, #56]	; (800d898 <tcp_pcbs_sane+0xac>)
 800d860:	4809      	ldr	r0, [pc, #36]	; (800d888 <tcp_pcbs_sane+0x9c>)
 800d862:	f009 fe9d 	bl	80175a0 <iprintf>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	607b      	str	r3, [r7, #4]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1ee      	bne.n	800d850 <tcp_pcbs_sane+0x64>
  }
  return 1;
 800d872:	2301      	movs	r3, #1
}
 800d874:	4618      	mov	r0, r3
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	2000d858 	.word	0x2000d858
 800d880:	0801d520 	.word	0x0801d520
 800d884:	0801dca8 	.word	0x0801dca8
 800d888:	0801d564 	.word	0x0801d564
 800d88c:	0801dcd4 	.word	0x0801dcd4
 800d890:	0801dd00 	.word	0x0801dd00
 800d894:	2000d868 	.word	0x2000d868
 800d898:	0801dd30 	.word	0x0801dd30

0800d89c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d89c:	b590      	push	{r4, r7, lr}
 800d89e:	b08d      	sub	sp, #52	; 0x34
 800d8a0:	af04      	add	r7, sp, #16
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d105      	bne.n	800d8b8 <tcp_input+0x1c>
 800d8ac:	4b9d      	ldr	r3, [pc, #628]	; (800db24 <tcp_input+0x288>)
 800d8ae:	2283      	movs	r2, #131	; 0x83
 800d8b0:	499d      	ldr	r1, [pc, #628]	; (800db28 <tcp_input+0x28c>)
 800d8b2:	489e      	ldr	r0, [pc, #632]	; (800db2c <tcp_input+0x290>)
 800d8b4:	f009 fe74 	bl	80175a0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	4a9c      	ldr	r2, [pc, #624]	; (800db30 <tcp_input+0x294>)
 800d8be:	6013      	str	r3, [r2, #0]

#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
 800d8c0:	4b9b      	ldr	r3, [pc, #620]	; (800db30 <tcp_input+0x294>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7ff ff65 	bl	800d794 <tcp_debug_print>
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	895b      	ldrh	r3, [r3, #10]
 800d8ce:	2b13      	cmp	r3, #19
 800d8d0:	f240 83f4 	bls.w	800e0bc <tcp_input+0x820>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d8d4:	4b97      	ldr	r3, [pc, #604]	; (800db34 <tcp_input+0x298>)
 800d8d6:	695b      	ldr	r3, [r3, #20]
 800d8d8:	4a96      	ldr	r2, [pc, #600]	; (800db34 <tcp_input+0x298>)
 800d8da:	6812      	ldr	r2, [r2, #0]
 800d8dc:	4611      	mov	r1, r2
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f008 fa3b 	bl	8015d5a <ip4_addr_isbroadcast_u32>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	f040 83ea 	bne.w	800e0c0 <tcp_input+0x824>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d8ec:	4b91      	ldr	r3, [pc, #580]	; (800db34 <tcp_input+0x298>)
 800d8ee:	695b      	ldr	r3, [r3, #20]
 800d8f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d8f4:	2be0      	cmp	r3, #224	; 0xe0
 800d8f6:	f000 83e3 	beq.w	800e0c0 <tcp_input+0x824>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d8fa:	4b8d      	ldr	r3, [pc, #564]	; (800db30 <tcp_input+0x294>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	899b      	ldrh	r3, [r3, #12]
 800d900:	b29b      	uxth	r3, r3
 800d902:	4618      	mov	r0, r3
 800d904:	f7fc faba 	bl	8009e7c <lwip_htons>
 800d908:	4603      	mov	r3, r0
 800d90a:	0b1b      	lsrs	r3, r3, #12
 800d90c:	b29b      	uxth	r3, r3
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	009b      	lsls	r3, r3, #2
 800d912:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d914:	7cbb      	ldrb	r3, [r7, #18]
 800d916:	2b13      	cmp	r3, #19
 800d918:	f240 83d4 	bls.w	800e0c4 <tcp_input+0x828>
 800d91c:	7cbb      	ldrb	r3, [r7, #18]
 800d91e:	b29a      	uxth	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	891b      	ldrh	r3, [r3, #8]
 800d924:	429a      	cmp	r2, r3
 800d926:	f200 83cd 	bhi.w	800e0c4 <tcp_input+0x828>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d92a:	7cbb      	ldrb	r3, [r7, #18]
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	3b14      	subs	r3, #20
 800d930:	b29a      	uxth	r2, r3
 800d932:	4b81      	ldr	r3, [pc, #516]	; (800db38 <tcp_input+0x29c>)
 800d934:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d936:	4b81      	ldr	r3, [pc, #516]	; (800db3c <tcp_input+0x2a0>)
 800d938:	2200      	movs	r2, #0
 800d93a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	895a      	ldrh	r2, [r3, #10]
 800d940:	7cbb      	ldrb	r3, [r7, #18]
 800d942:	b29b      	uxth	r3, r3
 800d944:	429a      	cmp	r2, r3
 800d946:	d309      	bcc.n	800d95c <tcp_input+0xc0>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d948:	4b7b      	ldr	r3, [pc, #492]	; (800db38 <tcp_input+0x29c>)
 800d94a:	881a      	ldrh	r2, [r3, #0]
 800d94c:	4b7c      	ldr	r3, [pc, #496]	; (800db40 <tcp_input+0x2a4>)
 800d94e:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d950:	7cbb      	ldrb	r3, [r7, #18]
 800d952:	4619      	mov	r1, r3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f7fd fda5 	bl	800b4a4 <pbuf_remove_header>
 800d95a:	e04e      	b.n	800d9fa <tcp_input+0x15e>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d105      	bne.n	800d970 <tcp_input+0xd4>
 800d964:	4b6f      	ldr	r3, [pc, #444]	; (800db24 <tcp_input+0x288>)
 800d966:	22c2      	movs	r2, #194	; 0xc2
 800d968:	4976      	ldr	r1, [pc, #472]	; (800db44 <tcp_input+0x2a8>)
 800d96a:	4870      	ldr	r0, [pc, #448]	; (800db2c <tcp_input+0x290>)
 800d96c:	f009 fe18 	bl	80175a0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d970:	2114      	movs	r1, #20
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f7fd fd96 	bl	800b4a4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	895a      	ldrh	r2, [r3, #10]
 800d97c:	4b70      	ldr	r3, [pc, #448]	; (800db40 <tcp_input+0x2a4>)
 800d97e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d980:	4b6d      	ldr	r3, [pc, #436]	; (800db38 <tcp_input+0x29c>)
 800d982:	881a      	ldrh	r2, [r3, #0]
 800d984:	4b6e      	ldr	r3, [pc, #440]	; (800db40 <tcp_input+0x2a4>)
 800d986:	881b      	ldrh	r3, [r3, #0]
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d98c:	4b6c      	ldr	r3, [pc, #432]	; (800db40 <tcp_input+0x2a4>)
 800d98e:	881b      	ldrh	r3, [r3, #0]
 800d990:	4619      	mov	r1, r3
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7fd fd86 	bl	800b4a4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	895b      	ldrh	r3, [r3, #10]
 800d99e:	8a3a      	ldrh	r2, [r7, #16]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	f200 8391 	bhi.w	800e0c8 <tcp_input+0x82c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	4a63      	ldr	r2, [pc, #396]	; (800db3c <tcp_input+0x2a0>)
 800d9ae:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	8a3a      	ldrh	r2, [r7, #16]
 800d9b6:	4611      	mov	r1, r2
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f7fd fd73 	bl	800b4a4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	891a      	ldrh	r2, [r3, #8]
 800d9c2:	8a3b      	ldrh	r3, [r7, #16]
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	b29a      	uxth	r2, r3
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	895b      	ldrh	r3, [r3, #10]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d005      	beq.n	800d9e0 <tcp_input+0x144>
 800d9d4:	4b53      	ldr	r3, [pc, #332]	; (800db24 <tcp_input+0x288>)
 800d9d6:	22df      	movs	r2, #223	; 0xdf
 800d9d8:	495b      	ldr	r1, [pc, #364]	; (800db48 <tcp_input+0x2ac>)
 800d9da:	4854      	ldr	r0, [pc, #336]	; (800db2c <tcp_input+0x290>)
 800d9dc:	f009 fde0 	bl	80175a0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	891a      	ldrh	r2, [r3, #8]
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	891b      	ldrh	r3, [r3, #8]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d005      	beq.n	800d9fa <tcp_input+0x15e>
 800d9ee:	4b4d      	ldr	r3, [pc, #308]	; (800db24 <tcp_input+0x288>)
 800d9f0:	22e0      	movs	r2, #224	; 0xe0
 800d9f2:	4956      	ldr	r1, [pc, #344]	; (800db4c <tcp_input+0x2b0>)
 800d9f4:	484d      	ldr	r0, [pc, #308]	; (800db2c <tcp_input+0x290>)
 800d9f6:	f009 fdd3 	bl	80175a0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d9fa:	4b4d      	ldr	r3, [pc, #308]	; (800db30 <tcp_input+0x294>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	b29b      	uxth	r3, r3
 800da02:	4a4b      	ldr	r2, [pc, #300]	; (800db30 <tcp_input+0x294>)
 800da04:	6814      	ldr	r4, [r2, #0]
 800da06:	4618      	mov	r0, r3
 800da08:	f7fc fa38 	bl	8009e7c <lwip_htons>
 800da0c:	4603      	mov	r3, r0
 800da0e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800da10:	4b47      	ldr	r3, [pc, #284]	; (800db30 <tcp_input+0x294>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	885b      	ldrh	r3, [r3, #2]
 800da16:	b29b      	uxth	r3, r3
 800da18:	4a45      	ldr	r2, [pc, #276]	; (800db30 <tcp_input+0x294>)
 800da1a:	6814      	ldr	r4, [r2, #0]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fc fa2d 	bl	8009e7c <lwip_htons>
 800da22:	4603      	mov	r3, r0
 800da24:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800da26:	4b42      	ldr	r3, [pc, #264]	; (800db30 <tcp_input+0x294>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	4a40      	ldr	r2, [pc, #256]	; (800db30 <tcp_input+0x294>)
 800da2e:	6814      	ldr	r4, [r2, #0]
 800da30:	4618      	mov	r0, r3
 800da32:	f7fc fa38 	bl	8009ea6 <lwip_htonl>
 800da36:	4603      	mov	r3, r0
 800da38:	6063      	str	r3, [r4, #4]
 800da3a:	6863      	ldr	r3, [r4, #4]
 800da3c:	4a44      	ldr	r2, [pc, #272]	; (800db50 <tcp_input+0x2b4>)
 800da3e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800da40:	4b3b      	ldr	r3, [pc, #236]	; (800db30 <tcp_input+0x294>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	689b      	ldr	r3, [r3, #8]
 800da46:	4a3a      	ldr	r2, [pc, #232]	; (800db30 <tcp_input+0x294>)
 800da48:	6814      	ldr	r4, [r2, #0]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fc fa2b 	bl	8009ea6 <lwip_htonl>
 800da50:	4603      	mov	r3, r0
 800da52:	60a3      	str	r3, [r4, #8]
 800da54:	68a3      	ldr	r3, [r4, #8]
 800da56:	4a3f      	ldr	r2, [pc, #252]	; (800db54 <tcp_input+0x2b8>)
 800da58:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800da5a:	4b35      	ldr	r3, [pc, #212]	; (800db30 <tcp_input+0x294>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	89db      	ldrh	r3, [r3, #14]
 800da60:	b29b      	uxth	r3, r3
 800da62:	4a33      	ldr	r2, [pc, #204]	; (800db30 <tcp_input+0x294>)
 800da64:	6814      	ldr	r4, [r2, #0]
 800da66:	4618      	mov	r0, r3
 800da68:	f7fc fa08 	bl	8009e7c <lwip_htons>
 800da6c:	4603      	mov	r3, r0
 800da6e:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800da70:	4b2f      	ldr	r3, [pc, #188]	; (800db30 <tcp_input+0x294>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	899b      	ldrh	r3, [r3, #12]
 800da76:	b29b      	uxth	r3, r3
 800da78:	4618      	mov	r0, r3
 800da7a:	f7fc f9ff 	bl	8009e7c <lwip_htons>
 800da7e:	4603      	mov	r3, r0
 800da80:	b2db      	uxtb	r3, r3
 800da82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da86:	b2da      	uxtb	r2, r3
 800da88:	4b33      	ldr	r3, [pc, #204]	; (800db58 <tcp_input+0x2bc>)
 800da8a:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	891a      	ldrh	r2, [r3, #8]
 800da90:	4b32      	ldr	r3, [pc, #200]	; (800db5c <tcp_input+0x2c0>)
 800da92:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800da94:	4b30      	ldr	r3, [pc, #192]	; (800db58 <tcp_input+0x2bc>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	f003 0303 	and.w	r3, r3, #3
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00c      	beq.n	800daba <tcp_input+0x21e>
    tcplen++;
 800daa0:	4b2e      	ldr	r3, [pc, #184]	; (800db5c <tcp_input+0x2c0>)
 800daa2:	881b      	ldrh	r3, [r3, #0]
 800daa4:	3301      	adds	r3, #1
 800daa6:	b29a      	uxth	r2, r3
 800daa8:	4b2c      	ldr	r3, [pc, #176]	; (800db5c <tcp_input+0x2c0>)
 800daaa:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	891a      	ldrh	r2, [r3, #8]
 800dab0:	4b2a      	ldr	r3, [pc, #168]	; (800db5c <tcp_input+0x2c0>)
 800dab2:	881b      	ldrh	r3, [r3, #0]
 800dab4:	429a      	cmp	r2, r3
 800dab6:	f200 8309 	bhi.w	800e0cc <tcp_input+0x830>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800daba:	2300      	movs	r3, #0
 800dabc:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dabe:	4b28      	ldr	r3, [pc, #160]	; (800db60 <tcp_input+0x2c4>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	61fb      	str	r3, [r7, #28]
 800dac4:	e09c      	b.n	800dc00 <tcp_input+0x364>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	7d1b      	ldrb	r3, [r3, #20]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d105      	bne.n	800dada <tcp_input+0x23e>
 800dace:	4b15      	ldr	r3, [pc, #84]	; (800db24 <tcp_input+0x288>)
 800dad0:	22fb      	movs	r2, #251	; 0xfb
 800dad2:	4924      	ldr	r1, [pc, #144]	; (800db64 <tcp_input+0x2c8>)
 800dad4:	4815      	ldr	r0, [pc, #84]	; (800db2c <tcp_input+0x290>)
 800dad6:	f009 fd63 	bl	80175a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	7d1b      	ldrb	r3, [r3, #20]
 800dade:	2b0a      	cmp	r3, #10
 800dae0:	d105      	bne.n	800daee <tcp_input+0x252>
 800dae2:	4b10      	ldr	r3, [pc, #64]	; (800db24 <tcp_input+0x288>)
 800dae4:	22fc      	movs	r2, #252	; 0xfc
 800dae6:	4920      	ldr	r1, [pc, #128]	; (800db68 <tcp_input+0x2cc>)
 800dae8:	4810      	ldr	r0, [pc, #64]	; (800db2c <tcp_input+0x290>)
 800daea:	f009 fd59 	bl	80175a0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	7d1b      	ldrb	r3, [r3, #20]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d105      	bne.n	800db02 <tcp_input+0x266>
 800daf6:	4b0b      	ldr	r3, [pc, #44]	; (800db24 <tcp_input+0x288>)
 800daf8:	22fd      	movs	r2, #253	; 0xfd
 800dafa:	491c      	ldr	r1, [pc, #112]	; (800db6c <tcp_input+0x2d0>)
 800dafc:	480b      	ldr	r0, [pc, #44]	; (800db2c <tcp_input+0x290>)
 800dafe:	f009 fd4f 	bl	80175a0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	7a1b      	ldrb	r3, [r3, #8]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d032      	beq.n	800db70 <tcp_input+0x2d4>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db0a:	69fb      	ldr	r3, [r7, #28]
 800db0c:	7a1a      	ldrb	r2, [r3, #8]
 800db0e:	4b09      	ldr	r3, [pc, #36]	; (800db34 <tcp_input+0x298>)
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db16:	3301      	adds	r3, #1
 800db18:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d028      	beq.n	800db70 <tcp_input+0x2d4>
      prev = pcb;
 800db1e:	69fb      	ldr	r3, [r7, #28]
 800db20:	61bb      	str	r3, [r7, #24]
      continue;
 800db22:	e06a      	b.n	800dbfa <tcp_input+0x35e>
 800db24:	0801dd5c 	.word	0x0801dd5c
 800db28:	0801dd90 	.word	0x0801dd90
 800db2c:	0801dda8 	.word	0x0801dda8
 800db30:	20001224 	.word	0x20001224
 800db34:	20009f28 	.word	0x20009f28
 800db38:	20001228 	.word	0x20001228
 800db3c:	2000122c 	.word	0x2000122c
 800db40:	2000122a 	.word	0x2000122a
 800db44:	0801ddd0 	.word	0x0801ddd0
 800db48:	0801dde0 	.word	0x0801dde0
 800db4c:	0801ddec 	.word	0x0801ddec
 800db50:	20001234 	.word	0x20001234
 800db54:	20001238 	.word	0x20001238
 800db58:	20001240 	.word	0x20001240
 800db5c:	2000123e 	.word	0x2000123e
 800db60:	2000d858 	.word	0x2000d858
 800db64:	0801de0c 	.word	0x0801de0c
 800db68:	0801de34 	.word	0x0801de34
 800db6c:	0801de60 	.word	0x0801de60
    }

    if (pcb->remote_port == tcphdr->src &&
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	8b1a      	ldrh	r2, [r3, #24]
 800db74:	4b72      	ldr	r3, [pc, #456]	; (800dd40 <tcp_input+0x4a4>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d13a      	bne.n	800dbf6 <tcp_input+0x35a>
        pcb->local_port == tcphdr->dest &&
 800db80:	69fb      	ldr	r3, [r7, #28]
 800db82:	8ada      	ldrh	r2, [r3, #22]
 800db84:	4b6e      	ldr	r3, [pc, #440]	; (800dd40 <tcp_input+0x4a4>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	885b      	ldrh	r3, [r3, #2]
 800db8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d132      	bne.n	800dbf6 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db90:	69fb      	ldr	r3, [r7, #28]
 800db92:	685a      	ldr	r2, [r3, #4]
 800db94:	4b6b      	ldr	r3, [pc, #428]	; (800dd44 <tcp_input+0x4a8>)
 800db96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800db98:	429a      	cmp	r2, r3
 800db9a:	d12c      	bne.n	800dbf6 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db9c:	69fb      	ldr	r3, [r7, #28]
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	4b68      	ldr	r3, [pc, #416]	; (800dd44 <tcp_input+0x4a8>)
 800dba2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d126      	bne.n	800dbf6 <tcp_input+0x35a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	68db      	ldr	r3, [r3, #12]
 800dbac:	69fa      	ldr	r2, [r7, #28]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d106      	bne.n	800dbc0 <tcp_input+0x324>
 800dbb2:	4b65      	ldr	r3, [pc, #404]	; (800dd48 <tcp_input+0x4ac>)
 800dbb4:	f240 120d 	movw	r2, #269	; 0x10d
 800dbb8:	4964      	ldr	r1, [pc, #400]	; (800dd4c <tcp_input+0x4b0>)
 800dbba:	4865      	ldr	r0, [pc, #404]	; (800dd50 <tcp_input+0x4b4>)
 800dbbc:	f009 fcf0 	bl	80175a0 <iprintf>
      if (prev != NULL) {
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00a      	beq.n	800dbdc <tcp_input+0x340>
        prev->next = pcb->next;
 800dbc6:	69fb      	ldr	r3, [r7, #28]
 800dbc8:	68da      	ldr	r2, [r3, #12]
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dbce:	4b61      	ldr	r3, [pc, #388]	; (800dd54 <tcp_input+0x4b8>)
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	69fb      	ldr	r3, [r7, #28]
 800dbd4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dbd6:	4a5f      	ldr	r2, [pc, #380]	; (800dd54 <tcp_input+0x4b8>)
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	68db      	ldr	r3, [r3, #12]
 800dbe0:	69fa      	ldr	r2, [r7, #28]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d111      	bne.n	800dc0a <tcp_input+0x36e>
 800dbe6:	4b58      	ldr	r3, [pc, #352]	; (800dd48 <tcp_input+0x4ac>)
 800dbe8:	f240 1215 	movw	r2, #277	; 0x115
 800dbec:	495a      	ldr	r1, [pc, #360]	; (800dd58 <tcp_input+0x4bc>)
 800dbee:	4858      	ldr	r0, [pc, #352]	; (800dd50 <tcp_input+0x4b4>)
 800dbf0:	f009 fcd6 	bl	80175a0 <iprintf>
      break;
 800dbf4:	e009      	b.n	800dc0a <tcp_input+0x36e>
    }
    prev = pcb;
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	61fb      	str	r3, [r7, #28]
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	f47f af5f 	bne.w	800dac6 <tcp_input+0x22a>
 800dc08:	e000      	b.n	800dc0c <tcp_input+0x370>
      break;
 800dc0a:	bf00      	nop
  }

  if (pcb == NULL) {
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f040 80aa 	bne.w	800dd68 <tcp_input+0x4cc>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc14:	4b51      	ldr	r3, [pc, #324]	; (800dd5c <tcp_input+0x4c0>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	61fb      	str	r3, [r7, #28]
 800dc1a:	e03f      	b.n	800dc9c <tcp_input+0x400>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	7d1b      	ldrb	r3, [r3, #20]
 800dc20:	2b0a      	cmp	r3, #10
 800dc22:	d006      	beq.n	800dc32 <tcp_input+0x396>
 800dc24:	4b48      	ldr	r3, [pc, #288]	; (800dd48 <tcp_input+0x4ac>)
 800dc26:	f240 121f 	movw	r2, #287	; 0x11f
 800dc2a:	494d      	ldr	r1, [pc, #308]	; (800dd60 <tcp_input+0x4c4>)
 800dc2c:	4848      	ldr	r0, [pc, #288]	; (800dd50 <tcp_input+0x4b4>)
 800dc2e:	f009 fcb7 	bl	80175a0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	7a1b      	ldrb	r3, [r3, #8]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d009      	beq.n	800dc4e <tcp_input+0x3b2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	7a1a      	ldrb	r2, [r3, #8]
 800dc3e:	4b41      	ldr	r3, [pc, #260]	; (800dd44 <tcp_input+0x4a8>)
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc46:	3301      	adds	r3, #1
 800dc48:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d122      	bne.n	800dc94 <tcp_input+0x3f8>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dc4e:	69fb      	ldr	r3, [r7, #28]
 800dc50:	8b1a      	ldrh	r2, [r3, #24]
 800dc52:	4b3b      	ldr	r3, [pc, #236]	; (800dd40 <tcp_input+0x4a4>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	881b      	ldrh	r3, [r3, #0]
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d11b      	bne.n	800dc96 <tcp_input+0x3fa>
          pcb->local_port == tcphdr->dest &&
 800dc5e:	69fb      	ldr	r3, [r7, #28]
 800dc60:	8ada      	ldrh	r2, [r3, #22]
 800dc62:	4b37      	ldr	r3, [pc, #220]	; (800dd40 <tcp_input+0x4a4>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	885b      	ldrh	r3, [r3, #2]
 800dc68:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	d113      	bne.n	800dc96 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc6e:	69fb      	ldr	r3, [r7, #28]
 800dc70:	685a      	ldr	r2, [r3, #4]
 800dc72:	4b34      	ldr	r3, [pc, #208]	; (800dd44 <tcp_input+0x4a8>)
 800dc74:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d10d      	bne.n	800dc96 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	4b31      	ldr	r3, [pc, #196]	; (800dd44 <tcp_input+0x4a8>)
 800dc80:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d107      	bne.n	800dc96 <tcp_input+0x3fa>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dc86:	69f8      	ldr	r0, [r7, #28]
 800dc88:	f000 fb80 	bl	800e38c <tcp_timewait_input>
        }
        pbuf_free(p);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7fd fc8f 	bl	800b5b0 <pbuf_free>
        return;
 800dc92:	e221      	b.n	800e0d8 <tcp_input+0x83c>
        continue;
 800dc94:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc96:	69fb      	ldr	r3, [r7, #28]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	61fb      	str	r3, [r7, #28]
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d1bc      	bne.n	800dc1c <tcp_input+0x380>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dca2:	2300      	movs	r3, #0
 800dca4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dca6:	4b2f      	ldr	r3, [pc, #188]	; (800dd64 <tcp_input+0x4c8>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	617b      	str	r3, [r7, #20]
 800dcac:	e02a      	b.n	800dd04 <tcp_input+0x468>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	7a1b      	ldrb	r3, [r3, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00c      	beq.n	800dcd0 <tcp_input+0x434>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	7a1a      	ldrb	r2, [r3, #8]
 800dcba:	4b22      	ldr	r3, [pc, #136]	; (800dd44 <tcp_input+0x4a8>)
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d002      	beq.n	800dcd0 <tcp_input+0x434>
        prev = (struct tcp_pcb *)lpcb;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	61bb      	str	r3, [r7, #24]
        continue;
 800dcce:	e016      	b.n	800dcfe <tcp_input+0x462>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	8ada      	ldrh	r2, [r3, #22]
 800dcd4:	4b1a      	ldr	r3, [pc, #104]	; (800dd40 <tcp_input+0x4a4>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	885b      	ldrh	r3, [r3, #2]
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d10c      	bne.n	800dcfa <tcp_input+0x45e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	4b17      	ldr	r3, [pc, #92]	; (800dd44 <tcp_input+0x4a8>)
 800dce6:	695b      	ldr	r3, [r3, #20]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d00f      	beq.n	800dd0c <tcp_input+0x470>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00d      	beq.n	800dd0e <tcp_input+0x472>
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d009      	beq.n	800dd0e <tcp_input+0x472>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	617b      	str	r3, [r7, #20]
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d1d1      	bne.n	800dcae <tcp_input+0x412>
 800dd0a:	e000      	b.n	800dd0e <tcp_input+0x472>
            break;
 800dd0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d029      	beq.n	800dd68 <tcp_input+0x4cc>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00a      	beq.n	800dd30 <tcp_input+0x494>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	68da      	ldr	r2, [r3, #12]
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dd22:	4b10      	ldr	r3, [pc, #64]	; (800dd64 <tcp_input+0x4c8>)
 800dd24:	681a      	ldr	r2, [r3, #0]
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dd2a:	4a0e      	ldr	r2, [pc, #56]	; (800dd64 <tcp_input+0x4c8>)
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dd30:	6978      	ldr	r0, [r7, #20]
 800dd32:	f000 fa2d 	bl	800e190 <tcp_listen_input>
      }
      pbuf_free(p);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7fd fc3a 	bl	800b5b0 <pbuf_free>
      return;
 800dd3c:	e1cc      	b.n	800e0d8 <tcp_input+0x83c>
 800dd3e:	bf00      	nop
 800dd40:	20001224 	.word	0x20001224
 800dd44:	20009f28 	.word	0x20009f28
 800dd48:	0801dd5c 	.word	0x0801dd5c
 800dd4c:	0801de88 	.word	0x0801de88
 800dd50:	0801dda8 	.word	0x0801dda8
 800dd54:	2000d858 	.word	0x2000d858
 800dd58:	0801deb4 	.word	0x0801deb4
 800dd5c:	2000d868 	.word	0x2000d868
 800dd60:	0801dee0 	.word	0x0801dee0
 800dd64:	2000d860 	.word	0x2000d860
    }
  }

#if TCP_INPUT_DEBUG
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags "));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 800dd68:	4ba3      	ldr	r3, [pc, #652]	; (800dff8 <tcp_input+0x75c>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	899b      	ldrh	r3, [r3, #12]
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fc f883 	bl	8009e7c <lwip_htons>
 800dd76:	4603      	mov	r3, r0
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7ff fd28 	bl	800d7d6 <tcp_debug_print_flags>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f000 8161 	beq.w	800e050 <tcp_input+0x7b4>
    /* The incoming segment belongs to a connection. */
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	7d1b      	ldrb	r3, [r3, #20]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7ff fd14 	bl	800d7c0 <tcp_debug_print_state>
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dd98:	4b98      	ldr	r3, [pc, #608]	; (800dffc <tcp_input+0x760>)
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	891a      	ldrh	r2, [r3, #8]
 800dda2:	4b96      	ldr	r3, [pc, #600]	; (800dffc <tcp_input+0x760>)
 800dda4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dda6:	4a95      	ldr	r2, [pc, #596]	; (800dffc <tcp_input+0x760>)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ddac:	4b92      	ldr	r3, [pc, #584]	; (800dff8 <tcp_input+0x75c>)
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a92      	ldr	r2, [pc, #584]	; (800dffc <tcp_input+0x760>)
 800ddb2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ddb4:	4b92      	ldr	r3, [pc, #584]	; (800e000 <tcp_input+0x764>)
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ddba:	4b92      	ldr	r3, [pc, #584]	; (800e004 <tcp_input+0x768>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ddc0:	4b91      	ldr	r3, [pc, #580]	; (800e008 <tcp_input+0x76c>)
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ddc6:	4b91      	ldr	r3, [pc, #580]	; (800e00c <tcp_input+0x770>)
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	f003 0308 	and.w	r3, r3, #8
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d006      	beq.n	800dde0 <tcp_input+0x544>
      p->flags |= PBUF_FLAG_PUSH;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	7b5b      	ldrb	r3, [r3, #13]
 800ddd6:	f043 0301 	orr.w	r3, r3, #1
 800ddda:	b2da      	uxtb	r2, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dde0:	69fb      	ldr	r3, [r7, #28]
 800dde2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d017      	beq.n	800de18 <tcp_input+0x57c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dde8:	69f8      	ldr	r0, [r7, #28]
 800ddea:	f7fe ff91 	bl	800cd10 <tcp_process_refused_data>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	f113 0f0d 	cmn.w	r3, #13
 800ddf4:	d007      	beq.n	800de06 <tcp_input+0x56a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00c      	beq.n	800de18 <tcp_input+0x57c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ddfe:	4b84      	ldr	r3, [pc, #528]	; (800e010 <tcp_input+0x774>)
 800de00:	881b      	ldrh	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d008      	beq.n	800de18 <tcp_input+0x57c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f040 80e8 	bne.w	800dfe0 <tcp_input+0x744>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800de10:	69f8      	ldr	r0, [r7, #28]
 800de12:	f003 fe1f 	bl	8011a54 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800de16:	e0e3      	b.n	800dfe0 <tcp_input+0x744>
      }
    }
    tcp_input_pcb = pcb;
 800de18:	4a7e      	ldr	r2, [pc, #504]	; (800e014 <tcp_input+0x778>)
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800de1e:	69f8      	ldr	r0, [r7, #28]
 800de20:	f000 fb2e 	bl	800e480 <tcp_process>
 800de24:	4603      	mov	r3, r0
 800de26:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800de28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de2c:	f113 0f0d 	cmn.w	r3, #13
 800de30:	f000 80d8 	beq.w	800dfe4 <tcp_input+0x748>
      if (recv_flags & TF_RESET) {
 800de34:	4b73      	ldr	r3, [pc, #460]	; (800e004 <tcp_input+0x768>)
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	f003 0308 	and.w	r3, r3, #8
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d015      	beq.n	800de6c <tcp_input+0x5d0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de46:	2b00      	cmp	r3, #0
 800de48:	d008      	beq.n	800de5c <tcp_input+0x5c0>
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de50:	69fa      	ldr	r2, [r7, #28]
 800de52:	6912      	ldr	r2, [r2, #16]
 800de54:	f06f 010d 	mvn.w	r1, #13
 800de58:	4610      	mov	r0, r2
 800de5a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800de5c:	69f9      	ldr	r1, [r7, #28]
 800de5e:	486e      	ldr	r0, [pc, #440]	; (800e018 <tcp_input+0x77c>)
 800de60:	f7ff fb12 	bl	800d488 <tcp_pcb_remove>
        tcp_free(pcb);
 800de64:	69f8      	ldr	r0, [r7, #28]
 800de66:	f7fd fe53 	bl	800bb10 <tcp_free>
 800de6a:	e0de      	b.n	800e02a <tcp_input+0x78e>
      } else {
        err = ERR_OK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800de70:	4b65      	ldr	r3, [pc, #404]	; (800e008 <tcp_input+0x76c>)
 800de72:	881b      	ldrh	r3, [r3, #0]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d01d      	beq.n	800deb4 <tcp_input+0x618>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800de78:	4b63      	ldr	r3, [pc, #396]	; (800e008 <tcp_input+0x76c>)
 800de7a:	881b      	ldrh	r3, [r3, #0]
 800de7c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de84:	2b00      	cmp	r3, #0
 800de86:	d00a      	beq.n	800de9e <tcp_input+0x602>
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800de8e:	69fa      	ldr	r2, [r7, #28]
 800de90:	6910      	ldr	r0, [r2, #16]
 800de92:	89fa      	ldrh	r2, [r7, #14]
 800de94:	69f9      	ldr	r1, [r7, #28]
 800de96:	4798      	blx	r3
 800de98:	4603      	mov	r3, r0
 800de9a:	74fb      	strb	r3, [r7, #19]
 800de9c:	e001      	b.n	800dea2 <tcp_input+0x606>
 800de9e:	2300      	movs	r3, #0
 800dea0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dea2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dea6:	f113 0f0d 	cmn.w	r3, #13
 800deaa:	f000 809d 	beq.w	800dfe8 <tcp_input+0x74c>
              goto aborted;
            }
          }
          recv_acked = 0;
 800deae:	4b56      	ldr	r3, [pc, #344]	; (800e008 <tcp_input+0x76c>)
 800deb0:	2200      	movs	r2, #0
 800deb2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800deb4:	69f8      	ldr	r0, [r7, #28]
 800deb6:	f000 f92b 	bl	800e110 <tcp_input_delayed_close>
 800deba:	4603      	mov	r3, r0
 800debc:	2b00      	cmp	r3, #0
 800debe:	f040 8095 	bne.w	800dfec <tcp_input+0x750>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dec2:	4b4f      	ldr	r3, [pc, #316]	; (800e000 <tcp_input+0x764>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d041      	beq.n	800df4e <tcp_input+0x6b2>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d006      	beq.n	800dee0 <tcp_input+0x644>
 800ded2:	4b52      	ldr	r3, [pc, #328]	; (800e01c <tcp_input+0x780>)
 800ded4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ded8:	4951      	ldr	r1, [pc, #324]	; (800e020 <tcp_input+0x784>)
 800deda:	4852      	ldr	r0, [pc, #328]	; (800e024 <tcp_input+0x788>)
 800dedc:	f009 fb60 	bl	80175a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	8b5b      	ldrh	r3, [r3, #26]
 800dee4:	f003 0310 	and.w	r3, r3, #16
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d008      	beq.n	800defe <tcp_input+0x662>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800deec:	4b44      	ldr	r3, [pc, #272]	; (800e000 <tcp_input+0x764>)
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4618      	mov	r0, r3
 800def2:	f7fd fb5d 	bl	800b5b0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800def6:	69f8      	ldr	r0, [r7, #28]
 800def8:	f7fe f8f6 	bl	800c0e8 <tcp_abort>
            goto aborted;
 800defc:	e095      	b.n	800e02a <tcp_input+0x78e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00c      	beq.n	800df22 <tcp_input+0x686>
 800df08:	69fb      	ldr	r3, [r7, #28]
 800df0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	6918      	ldr	r0, [r3, #16]
 800df12:	4b3b      	ldr	r3, [pc, #236]	; (800e000 <tcp_input+0x764>)
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	2300      	movs	r3, #0
 800df18:	69f9      	ldr	r1, [r7, #28]
 800df1a:	47a0      	blx	r4
 800df1c:	4603      	mov	r3, r0
 800df1e:	74fb      	strb	r3, [r7, #19]
 800df20:	e008      	b.n	800df34 <tcp_input+0x698>
 800df22:	4b37      	ldr	r3, [pc, #220]	; (800e000 <tcp_input+0x764>)
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	2300      	movs	r3, #0
 800df28:	69f9      	ldr	r1, [r7, #28]
 800df2a:	2000      	movs	r0, #0
 800df2c:	f7fe ffe6 	bl	800cefc <tcp_recv_null>
 800df30:	4603      	mov	r3, r0
 800df32:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800df34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df38:	f113 0f0d 	cmn.w	r3, #13
 800df3c:	d058      	beq.n	800dff0 <tcp_input+0x754>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800df3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d003      	beq.n	800df4e <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800df46:	4b2e      	ldr	r3, [pc, #184]	; (800e000 <tcp_input+0x764>)
 800df48:	681a      	ldr	r2, [r3, #0]
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800df4e:	4b2d      	ldr	r3, [pc, #180]	; (800e004 <tcp_input+0x768>)
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	f003 0320 	and.w	r3, r3, #32
 800df56:	2b00      	cmp	r3, #0
 800df58:	d030      	beq.n	800dfbc <tcp_input+0x720>
          if (pcb->refused_data != NULL) {
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d009      	beq.n	800df76 <tcp_input+0x6da>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df66:	7b5a      	ldrb	r2, [r3, #13]
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df6c:	f042 0220 	orr.w	r2, r2, #32
 800df70:	b2d2      	uxtb	r2, r2
 800df72:	735a      	strb	r2, [r3, #13]
 800df74:	e022      	b.n	800dfbc <tcp_input+0x720>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df7a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800df7e:	d005      	beq.n	800df8c <tcp_input+0x6f0>
              pcb->rcv_wnd++;
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df84:	3301      	adds	r3, #1
 800df86:	b29a      	uxth	r2, r3
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00b      	beq.n	800dfae <tcp_input+0x712>
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	6918      	ldr	r0, [r3, #16]
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	69f9      	ldr	r1, [r7, #28]
 800dfa6:	47a0      	blx	r4
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	74fb      	strb	r3, [r7, #19]
 800dfac:	e001      	b.n	800dfb2 <tcp_input+0x716>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dfb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfb6:	f113 0f0d 	cmn.w	r3, #13
 800dfba:	d01b      	beq.n	800dff4 <tcp_input+0x758>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dfbc:	4b15      	ldr	r3, [pc, #84]	; (800e014 <tcp_input+0x778>)
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dfc2:	69f8      	ldr	r0, [r7, #28]
 800dfc4:	f000 f8a4 	bl	800e110 <tcp_input_delayed_close>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d12c      	bne.n	800e028 <tcp_input+0x78c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dfce:	69f8      	ldr	r0, [r7, #28]
 800dfd0:	f002 ff34 	bl	8010e3c <tcp_output>
#if TCP_INPUT_DEBUG
#if TCP_DEBUG
        tcp_debug_print_state(pcb->state);
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	7d1b      	ldrb	r3, [r3, #20]
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7ff fbf1 	bl	800d7c0 <tcp_debug_print_state>
 800dfde:	e024      	b.n	800e02a <tcp_input+0x78e>
        goto aborted;
 800dfe0:	bf00      	nop
 800dfe2:	e022      	b.n	800e02a <tcp_input+0x78e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dfe4:	bf00      	nop
 800dfe6:	e020      	b.n	800e02a <tcp_input+0x78e>
              goto aborted;
 800dfe8:	bf00      	nop
 800dfea:	e01e      	b.n	800e02a <tcp_input+0x78e>
          goto aborted;
 800dfec:	bf00      	nop
 800dfee:	e01c      	b.n	800e02a <tcp_input+0x78e>
            goto aborted;
 800dff0:	bf00      	nop
 800dff2:	e01a      	b.n	800e02a <tcp_input+0x78e>
              goto aborted;
 800dff4:	bf00      	nop
 800dff6:	e018      	b.n	800e02a <tcp_input+0x78e>
 800dff8:	20001224 	.word	0x20001224
 800dffc:	20001214 	.word	0x20001214
 800e000:	20001244 	.word	0x20001244
 800e004:	20001241 	.word	0x20001241
 800e008:	2000123c 	.word	0x2000123c
 800e00c:	20001240 	.word	0x20001240
 800e010:	2000123e 	.word	0x2000123e
 800e014:	2000d86c 	.word	0x2000d86c
 800e018:	2000d858 	.word	0x2000d858
 800e01c:	0801dd5c 	.word	0x0801dd5c
 800e020:	0801df10 	.word	0x0801df10
 800e024:	0801dda8 	.word	0x0801dda8
          goto aborted;
 800e028:	bf00      	nop
    tcp_input_pcb = NULL;
 800e02a:	4b2d      	ldr	r3, [pc, #180]	; (800e0e0 <tcp_input+0x844>)
 800e02c:	2200      	movs	r2, #0
 800e02e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e030:	4b2c      	ldr	r3, [pc, #176]	; (800e0e4 <tcp_input+0x848>)
 800e032:	2200      	movs	r2, #0
 800e034:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e036:	4b2c      	ldr	r3, [pc, #176]	; (800e0e8 <tcp_input+0x84c>)
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d031      	beq.n	800e0a2 <tcp_input+0x806>
      pbuf_free(inseg.p);
 800e03e:	4b2a      	ldr	r3, [pc, #168]	; (800e0e8 <tcp_input+0x84c>)
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	4618      	mov	r0, r3
 800e044:	f7fd fab4 	bl	800b5b0 <pbuf_free>
      inseg.p = NULL;
 800e048:	4b27      	ldr	r3, [pc, #156]	; (800e0e8 <tcp_input+0x84c>)
 800e04a:	2200      	movs	r2, #0
 800e04c:	605a      	str	r2, [r3, #4]
 800e04e:	e028      	b.n	800e0a2 <tcp_input+0x806>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e050:	4b26      	ldr	r3, [pc, #152]	; (800e0ec <tcp_input+0x850>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	899b      	ldrh	r3, [r3, #12]
 800e056:	b29b      	uxth	r3, r3
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fb ff0f 	bl	8009e7c <lwip_htons>
 800e05e:	4603      	mov	r3, r0
 800e060:	b2db      	uxtb	r3, r3
 800e062:	f003 0304 	and.w	r3, r3, #4
 800e066:	2b00      	cmp	r3, #0
 800e068:	d118      	bne.n	800e09c <tcp_input+0x800>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e06a:	4b21      	ldr	r3, [pc, #132]	; (800e0f0 <tcp_input+0x854>)
 800e06c:	6819      	ldr	r1, [r3, #0]
 800e06e:	4b21      	ldr	r3, [pc, #132]	; (800e0f4 <tcp_input+0x858>)
 800e070:	881b      	ldrh	r3, [r3, #0]
 800e072:	461a      	mov	r2, r3
 800e074:	4b20      	ldr	r3, [pc, #128]	; (800e0f8 <tcp_input+0x85c>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e07a:	4b1c      	ldr	r3, [pc, #112]	; (800e0ec <tcp_input+0x850>)
 800e07c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e07e:	885b      	ldrh	r3, [r3, #2]
 800e080:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e082:	4a1a      	ldr	r2, [pc, #104]	; (800e0ec <tcp_input+0x850>)
 800e084:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e086:	8812      	ldrh	r2, [r2, #0]
 800e088:	b292      	uxth	r2, r2
 800e08a:	9202      	str	r2, [sp, #8]
 800e08c:	9301      	str	r3, [sp, #4]
 800e08e:	4b1b      	ldr	r3, [pc, #108]	; (800e0fc <tcp_input+0x860>)
 800e090:	9300      	str	r3, [sp, #0]
 800e092:	4b1b      	ldr	r3, [pc, #108]	; (800e100 <tcp_input+0x864>)
 800e094:	4602      	mov	r2, r0
 800e096:	2000      	movs	r0, #0
 800e098:	f003 fc8a 	bl	80119b0 <tcp_rst>
    }
    pbuf_free(p);
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f7fd fa87 	bl	800b5b0 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 800e0a2:	f7ff fba3 	bl	800d7ec <tcp_pcbs_sane>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d114      	bne.n	800e0d6 <tcp_input+0x83a>
 800e0ac:	4b15      	ldr	r3, [pc, #84]	; (800e104 <tcp_input+0x868>)
 800e0ae:	f240 2249 	movw	r2, #585	; 0x249
 800e0b2:	4915      	ldr	r1, [pc, #84]	; (800e108 <tcp_input+0x86c>)
 800e0b4:	4815      	ldr	r0, [pc, #84]	; (800e10c <tcp_input+0x870>)
 800e0b6:	f009 fa73 	bl	80175a0 <iprintf>
  PERF_STOP("tcp_input");
  return;
 800e0ba:	e00c      	b.n	800e0d6 <tcp_input+0x83a>
    goto dropped;
 800e0bc:	bf00      	nop
 800e0be:	e006      	b.n	800e0ce <tcp_input+0x832>
    goto dropped;
 800e0c0:	bf00      	nop
 800e0c2:	e004      	b.n	800e0ce <tcp_input+0x832>
    goto dropped;
 800e0c4:	bf00      	nop
 800e0c6:	e002      	b.n	800e0ce <tcp_input+0x832>
      goto dropped;
 800e0c8:	bf00      	nop
 800e0ca:	e000      	b.n	800e0ce <tcp_input+0x832>
      goto dropped;
 800e0cc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7fd fa6e 	bl	800b5b0 <pbuf_free>
 800e0d4:	e000      	b.n	800e0d8 <tcp_input+0x83c>
  return;
 800e0d6:	bf00      	nop
}
 800e0d8:	3724      	adds	r7, #36	; 0x24
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd90      	pop	{r4, r7, pc}
 800e0de:	bf00      	nop
 800e0e0:	2000d86c 	.word	0x2000d86c
 800e0e4:	20001244 	.word	0x20001244
 800e0e8:	20001214 	.word	0x20001214
 800e0ec:	20001224 	.word	0x20001224
 800e0f0:	20001238 	.word	0x20001238
 800e0f4:	2000123e 	.word	0x2000123e
 800e0f8:	20001234 	.word	0x20001234
 800e0fc:	20009f38 	.word	0x20009f38
 800e100:	20009f3c 	.word	0x20009f3c
 800e104:	0801dd5c 	.word	0x0801dd5c
 800e108:	0801df2c 	.word	0x0801df2c
 800e10c:	0801dda8 	.word	0x0801dda8

0800e110 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b082      	sub	sp, #8
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d106      	bne.n	800e12c <tcp_input_delayed_close+0x1c>
 800e11e:	4b17      	ldr	r3, [pc, #92]	; (800e17c <tcp_input_delayed_close+0x6c>)
 800e120:	f240 225a 	movw	r2, #602	; 0x25a
 800e124:	4916      	ldr	r1, [pc, #88]	; (800e180 <tcp_input_delayed_close+0x70>)
 800e126:	4817      	ldr	r0, [pc, #92]	; (800e184 <tcp_input_delayed_close+0x74>)
 800e128:	f009 fa3a 	bl	80175a0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e12c:	4b16      	ldr	r3, [pc, #88]	; (800e188 <tcp_input_delayed_close+0x78>)
 800e12e:	781b      	ldrb	r3, [r3, #0]
 800e130:	f003 0310 	and.w	r3, r3, #16
 800e134:	2b00      	cmp	r3, #0
 800e136:	d01c      	beq.n	800e172 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	8b5b      	ldrh	r3, [r3, #26]
 800e13c:	f003 0310 	and.w	r3, r3, #16
 800e140:	2b00      	cmp	r3, #0
 800e142:	d10d      	bne.n	800e160 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d008      	beq.n	800e160 <tcp_input_delayed_close+0x50>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	6912      	ldr	r2, [r2, #16]
 800e158:	f06f 010e 	mvn.w	r1, #14
 800e15c:	4610      	mov	r0, r2
 800e15e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e160:	6879      	ldr	r1, [r7, #4]
 800e162:	480a      	ldr	r0, [pc, #40]	; (800e18c <tcp_input_delayed_close+0x7c>)
 800e164:	f7ff f990 	bl	800d488 <tcp_pcb_remove>
    tcp_free(pcb);
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f7fd fcd1 	bl	800bb10 <tcp_free>
    return 1;
 800e16e:	2301      	movs	r3, #1
 800e170:	e000      	b.n	800e174 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e172:	2300      	movs	r3, #0
}
 800e174:	4618      	mov	r0, r3
 800e176:	3708      	adds	r7, #8
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	0801dd5c 	.word	0x0801dd5c
 800e180:	0801df48 	.word	0x0801df48
 800e184:	0801dda8 	.word	0x0801dda8
 800e188:	20001241 	.word	0x20001241
 800e18c:	2000d858 	.word	0x2000d858

0800e190 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e190:	b590      	push	{r4, r7, lr}
 800e192:	b08b      	sub	sp, #44	; 0x2c
 800e194:	af04      	add	r7, sp, #16
 800e196:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e198:	4b6f      	ldr	r3, [pc, #444]	; (800e358 <tcp_listen_input+0x1c8>)
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	f003 0304 	and.w	r3, r3, #4
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	f040 80d2 	bne.w	800e34a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d106      	bne.n	800e1ba <tcp_listen_input+0x2a>
 800e1ac:	4b6b      	ldr	r3, [pc, #428]	; (800e35c <tcp_listen_input+0x1cc>)
 800e1ae:	f240 2281 	movw	r2, #641	; 0x281
 800e1b2:	496b      	ldr	r1, [pc, #428]	; (800e360 <tcp_listen_input+0x1d0>)
 800e1b4:	486b      	ldr	r0, [pc, #428]	; (800e364 <tcp_listen_input+0x1d4>)
 800e1b6:	f009 f9f3 	bl	80175a0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e1ba:	4b67      	ldr	r3, [pc, #412]	; (800e358 <tcp_listen_input+0x1c8>)
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	f003 0310 	and.w	r3, r3, #16
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d019      	beq.n	800e1fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1c6:	4b68      	ldr	r3, [pc, #416]	; (800e368 <tcp_listen_input+0x1d8>)
 800e1c8:	6819      	ldr	r1, [r3, #0]
 800e1ca:	4b68      	ldr	r3, [pc, #416]	; (800e36c <tcp_listen_input+0x1dc>)
 800e1cc:	881b      	ldrh	r3, [r3, #0]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	4b67      	ldr	r3, [pc, #412]	; (800e370 <tcp_listen_input+0x1e0>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1d6:	4b67      	ldr	r3, [pc, #412]	; (800e374 <tcp_listen_input+0x1e4>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1da:	885b      	ldrh	r3, [r3, #2]
 800e1dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1de:	4a65      	ldr	r2, [pc, #404]	; (800e374 <tcp_listen_input+0x1e4>)
 800e1e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1e2:	8812      	ldrh	r2, [r2, #0]
 800e1e4:	b292      	uxth	r2, r2
 800e1e6:	9202      	str	r2, [sp, #8]
 800e1e8:	9301      	str	r3, [sp, #4]
 800e1ea:	4b63      	ldr	r3, [pc, #396]	; (800e378 <tcp_listen_input+0x1e8>)
 800e1ec:	9300      	str	r3, [sp, #0]
 800e1ee:	4b63      	ldr	r3, [pc, #396]	; (800e37c <tcp_listen_input+0x1ec>)
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f003 fbdc 	bl	80119b0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e1f8:	e0a9      	b.n	800e34e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e1fa:	4b57      	ldr	r3, [pc, #348]	; (800e358 <tcp_listen_input+0x1c8>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	f003 0302 	and.w	r3, r3, #2
 800e202:	2b00      	cmp	r3, #0
 800e204:	f000 80a3 	beq.w	800e34e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	7d5b      	ldrb	r3, [r3, #21]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fe ff99 	bl	800d144 <tcp_alloc>
 800e212:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d111      	bne.n	800e23e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	699b      	ldr	r3, [r3, #24]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00a      	beq.n	800e238 <tcp_listen_input+0xa8>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	699b      	ldr	r3, [r3, #24]
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	6910      	ldr	r0, [r2, #16]
 800e22a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e22e:	2100      	movs	r1, #0
 800e230:	4798      	blx	r3
 800e232:	4603      	mov	r3, r0
 800e234:	73bb      	strb	r3, [r7, #14]
      return;
 800e236:	e08b      	b.n	800e350 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e238:	23f0      	movs	r3, #240	; 0xf0
 800e23a:	73bb      	strb	r3, [r7, #14]
      return;
 800e23c:	e088      	b.n	800e350 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e23e:	4b50      	ldr	r3, [pc, #320]	; (800e380 <tcp_listen_input+0x1f0>)
 800e240:	695a      	ldr	r2, [r3, #20]
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e246:	4b4e      	ldr	r3, [pc, #312]	; (800e380 <tcp_listen_input+0x1f0>)
 800e248:	691a      	ldr	r2, [r3, #16]
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	8ada      	ldrh	r2, [r3, #22]
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e256:	4b47      	ldr	r3, [pc, #284]	; (800e374 <tcp_listen_input+0x1e4>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	881b      	ldrh	r3, [r3, #0]
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	2203      	movs	r2, #3
 800e266:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e268:	4b41      	ldr	r3, [pc, #260]	; (800e370 <tcp_listen_input+0x1e0>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	1c5a      	adds	r2, r3, #1
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e27a:	6978      	ldr	r0, [r7, #20]
 800e27c:	f7ff f9a6 	bl	800d5cc <tcp_next_iss>
 800e280:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	693a      	ldr	r2, [r7, #16]
 800e286:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	693a      	ldr	r2, [r7, #16]
 800e28c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	693a      	ldr	r2, [r7, #16]
 800e292:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	693a      	ldr	r2, [r7, #16]
 800e298:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e29a:	4b35      	ldr	r3, [pc, #212]	; (800e370 <tcp_listen_input+0x1e0>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	1e5a      	subs	r2, r3, #1
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	691a      	ldr	r2, [r3, #16]
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	7a5b      	ldrb	r3, [r3, #9]
 800e2b6:	f003 030c 	and.w	r3, r3, #12
 800e2ba:	b2da      	uxtb	r2, r3
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7a1a      	ldrb	r2, [r3, #8]
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e2c8:	4b2e      	ldr	r3, [pc, #184]	; (800e384 <tcp_listen_input+0x1f4>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	60da      	str	r2, [r3, #12]
 800e2d0:	4a2c      	ldr	r2, [pc, #176]	; (800e384 <tcp_listen_input+0x1f4>)
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	6013      	str	r3, [r2, #0]
 800e2d6:	f003 fd2d 	bl	8011d34 <tcp_timer_needed>
 800e2da:	4b2b      	ldr	r3, [pc, #172]	; (800e388 <tcp_listen_input+0x1f8>)
 800e2dc:	2201      	movs	r2, #1
 800e2de:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e2e0:	6978      	ldr	r0, [r7, #20]
 800e2e2:	f001 fd8d 	bl	800fe00 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e2e6:	4b23      	ldr	r3, [pc, #140]	; (800e374 <tcp_listen_input+0x1e4>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	89db      	ldrh	r3, [r3, #14]
 800e2ec:	b29a      	uxth	r2, r3
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e300:	697b      	ldr	r3, [r7, #20]
 800e302:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	3304      	adds	r3, #4
 800e308:	4618      	mov	r0, r3
 800e30a:	f007 fa5b 	bl	80157c4 <ip4_route>
 800e30e:	4601      	mov	r1, r0
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	3304      	adds	r3, #4
 800e314:	461a      	mov	r2, r3
 800e316:	4620      	mov	r0, r4
 800e318:	f7ff f97e 	bl	800d618 <tcp_eff_send_mss_netif>
 800e31c:	4603      	mov	r3, r0
 800e31e:	461a      	mov	r2, r3
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e324:	2112      	movs	r1, #18
 800e326:	6978      	ldr	r0, [r7, #20]
 800e328:	f002 fc9a 	bl	8010c60 <tcp_enqueue_flags>
 800e32c:	4603      	mov	r3, r0
 800e32e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d004      	beq.n	800e342 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e338:	2100      	movs	r1, #0
 800e33a:	6978      	ldr	r0, [r7, #20]
 800e33c:	f7fd fe16 	bl	800bf6c <tcp_abandon>
      return;
 800e340:	e006      	b.n	800e350 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e342:	6978      	ldr	r0, [r7, #20]
 800e344:	f002 fd7a 	bl	8010e3c <tcp_output>
  return;
 800e348:	e001      	b.n	800e34e <tcp_listen_input+0x1be>
    return;
 800e34a:	bf00      	nop
 800e34c:	e000      	b.n	800e350 <tcp_listen_input+0x1c0>
  return;
 800e34e:	bf00      	nop
}
 800e350:	371c      	adds	r7, #28
 800e352:	46bd      	mov	sp, r7
 800e354:	bd90      	pop	{r4, r7, pc}
 800e356:	bf00      	nop
 800e358:	20001240 	.word	0x20001240
 800e35c:	0801dd5c 	.word	0x0801dd5c
 800e360:	0801df70 	.word	0x0801df70
 800e364:	0801dda8 	.word	0x0801dda8
 800e368:	20001238 	.word	0x20001238
 800e36c:	2000123e 	.word	0x2000123e
 800e370:	20001234 	.word	0x20001234
 800e374:	20001224 	.word	0x20001224
 800e378:	20009f38 	.word	0x20009f38
 800e37c:	20009f3c 	.word	0x20009f3c
 800e380:	20009f28 	.word	0x20009f28
 800e384:	2000d858 	.word	0x2000d858
 800e388:	2000d854 	.word	0x2000d854

0800e38c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b086      	sub	sp, #24
 800e390:	af04      	add	r7, sp, #16
 800e392:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e394:	4b2f      	ldr	r3, [pc, #188]	; (800e454 <tcp_timewait_input+0xc8>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	f003 0304 	and.w	r3, r3, #4
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d153      	bne.n	800e448 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d106      	bne.n	800e3b4 <tcp_timewait_input+0x28>
 800e3a6:	4b2c      	ldr	r3, [pc, #176]	; (800e458 <tcp_timewait_input+0xcc>)
 800e3a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e3ac:	492b      	ldr	r1, [pc, #172]	; (800e45c <tcp_timewait_input+0xd0>)
 800e3ae:	482c      	ldr	r0, [pc, #176]	; (800e460 <tcp_timewait_input+0xd4>)
 800e3b0:	f009 f8f6 	bl	80175a0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e3b4:	4b27      	ldr	r3, [pc, #156]	; (800e454 <tcp_timewait_input+0xc8>)
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	f003 0302 	and.w	r3, r3, #2
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d02a      	beq.n	800e416 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e3c0:	4b28      	ldr	r3, [pc, #160]	; (800e464 <tcp_timewait_input+0xd8>)
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3c8:	1ad3      	subs	r3, r2, r3
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	db2d      	blt.n	800e42a <tcp_timewait_input+0x9e>
 800e3ce:	4b25      	ldr	r3, [pc, #148]	; (800e464 <tcp_timewait_input+0xd8>)
 800e3d0:	681a      	ldr	r2, [r3, #0]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d6:	6879      	ldr	r1, [r7, #4]
 800e3d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e3da:	440b      	add	r3, r1
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	dc23      	bgt.n	800e42a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3e2:	4b21      	ldr	r3, [pc, #132]	; (800e468 <tcp_timewait_input+0xdc>)
 800e3e4:	6819      	ldr	r1, [r3, #0]
 800e3e6:	4b21      	ldr	r3, [pc, #132]	; (800e46c <tcp_timewait_input+0xe0>)
 800e3e8:	881b      	ldrh	r3, [r3, #0]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	4b1d      	ldr	r3, [pc, #116]	; (800e464 <tcp_timewait_input+0xd8>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3f2:	4b1f      	ldr	r3, [pc, #124]	; (800e470 <tcp_timewait_input+0xe4>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3f6:	885b      	ldrh	r3, [r3, #2]
 800e3f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3fa:	4a1d      	ldr	r2, [pc, #116]	; (800e470 <tcp_timewait_input+0xe4>)
 800e3fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3fe:	8812      	ldrh	r2, [r2, #0]
 800e400:	b292      	uxth	r2, r2
 800e402:	9202      	str	r2, [sp, #8]
 800e404:	9301      	str	r3, [sp, #4]
 800e406:	4b1b      	ldr	r3, [pc, #108]	; (800e474 <tcp_timewait_input+0xe8>)
 800e408:	9300      	str	r3, [sp, #0]
 800e40a:	4b1b      	ldr	r3, [pc, #108]	; (800e478 <tcp_timewait_input+0xec>)
 800e40c:	4602      	mov	r2, r0
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f003 face 	bl	80119b0 <tcp_rst>
      return;
 800e414:	e01b      	b.n	800e44e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e416:	4b0f      	ldr	r3, [pc, #60]	; (800e454 <tcp_timewait_input+0xc8>)
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	f003 0301 	and.w	r3, r3, #1
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e422:	4b16      	ldr	r3, [pc, #88]	; (800e47c <tcp_timewait_input+0xf0>)
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e42a:	4b10      	ldr	r3, [pc, #64]	; (800e46c <tcp_timewait_input+0xe0>)
 800e42c:	881b      	ldrh	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00c      	beq.n	800e44c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	8b5b      	ldrh	r3, [r3, #26]
 800e436:	f043 0302 	orr.w	r3, r3, #2
 800e43a:	b29a      	uxth	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f002 fcfb 	bl	8010e3c <tcp_output>
  }
  return;
 800e446:	e001      	b.n	800e44c <tcp_timewait_input+0xc0>
    return;
 800e448:	bf00      	nop
 800e44a:	e000      	b.n	800e44e <tcp_timewait_input+0xc2>
  return;
 800e44c:	bf00      	nop
}
 800e44e:	3708      	adds	r7, #8
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	20001240 	.word	0x20001240
 800e458:	0801dd5c 	.word	0x0801dd5c
 800e45c:	0801df90 	.word	0x0801df90
 800e460:	0801dda8 	.word	0x0801dda8
 800e464:	20001234 	.word	0x20001234
 800e468:	20001238 	.word	0x20001238
 800e46c:	2000123e 	.word	0x2000123e
 800e470:	20001224 	.word	0x20001224
 800e474:	20009f38 	.word	0x20009f38
 800e478:	20009f3c 	.word	0x20009f3c
 800e47c:	2000d85c 	.word	0x2000d85c

0800e480 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e480:	b590      	push	{r4, r7, lr}
 800e482:	b08d      	sub	sp, #52	; 0x34
 800e484:	af04      	add	r7, sp, #16
 800e486:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e488:	2300      	movs	r3, #0
 800e48a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e48c:	2300      	movs	r3, #0
 800e48e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d106      	bne.n	800e4a4 <tcp_process+0x24>
 800e496:	4ba5      	ldr	r3, [pc, #660]	; (800e72c <tcp_process+0x2ac>)
 800e498:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e49c:	49a4      	ldr	r1, [pc, #656]	; (800e730 <tcp_process+0x2b0>)
 800e49e:	48a5      	ldr	r0, [pc, #660]	; (800e734 <tcp_process+0x2b4>)
 800e4a0:	f009 f87e 	bl	80175a0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e4a4:	4ba4      	ldr	r3, [pc, #656]	; (800e738 <tcp_process+0x2b8>)
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	f003 0304 	and.w	r3, r3, #4
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d04e      	beq.n	800e54e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	7d1b      	ldrb	r3, [r3, #20]
 800e4b4:	2b02      	cmp	r3, #2
 800e4b6:	d108      	bne.n	800e4ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4bc:	4b9f      	ldr	r3, [pc, #636]	; (800e73c <tcp_process+0x2bc>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d123      	bne.n	800e50c <tcp_process+0x8c>
        acceptable = 1;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	76fb      	strb	r3, [r7, #27]
 800e4c8:	e020      	b.n	800e50c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4ce:	4b9c      	ldr	r3, [pc, #624]	; (800e740 <tcp_process+0x2c0>)
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	d102      	bne.n	800e4dc <tcp_process+0x5c>
        acceptable = 1;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	76fb      	strb	r3, [r7, #27]
 800e4da:	e017      	b.n	800e50c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e4dc:	4b98      	ldr	r3, [pc, #608]	; (800e740 <tcp_process+0x2c0>)
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e4:	1ad3      	subs	r3, r2, r3
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	db10      	blt.n	800e50c <tcp_process+0x8c>
 800e4ea:	4b95      	ldr	r3, [pc, #596]	; (800e740 <tcp_process+0x2c0>)
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f2:	6879      	ldr	r1, [r7, #4]
 800e4f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e4f6:	440b      	add	r3, r1
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	dc06      	bgt.n	800e50c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	8b5b      	ldrh	r3, [r3, #26]
 800e502:	f043 0302 	orr.w	r3, r3, #2
 800e506:	b29a      	uxth	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e50c:	7efb      	ldrb	r3, [r7, #27]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d01b      	beq.n	800e54a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	7d1b      	ldrb	r3, [r3, #20]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d106      	bne.n	800e528 <tcp_process+0xa8>
 800e51a:	4b84      	ldr	r3, [pc, #528]	; (800e72c <tcp_process+0x2ac>)
 800e51c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e520:	4988      	ldr	r1, [pc, #544]	; (800e744 <tcp_process+0x2c4>)
 800e522:	4884      	ldr	r0, [pc, #528]	; (800e734 <tcp_process+0x2b4>)
 800e524:	f009 f83c 	bl	80175a0 <iprintf>
      recv_flags |= TF_RESET;
 800e528:	4b87      	ldr	r3, [pc, #540]	; (800e748 <tcp_process+0x2c8>)
 800e52a:	781b      	ldrb	r3, [r3, #0]
 800e52c:	f043 0308 	orr.w	r3, r3, #8
 800e530:	b2da      	uxtb	r2, r3
 800e532:	4b85      	ldr	r3, [pc, #532]	; (800e748 <tcp_process+0x2c8>)
 800e534:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	8b5b      	ldrh	r3, [r3, #26]
 800e53a:	f023 0301 	bic.w	r3, r3, #1
 800e53e:	b29a      	uxth	r2, r3
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e544:	f06f 030d 	mvn.w	r3, #13
 800e548:	e37a      	b.n	800ec40 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e54a:	2300      	movs	r3, #0
 800e54c:	e378      	b.n	800ec40 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e54e:	4b7a      	ldr	r3, [pc, #488]	; (800e738 <tcp_process+0x2b8>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	f003 0302 	and.w	r3, r3, #2
 800e556:	2b00      	cmp	r3, #0
 800e558:	d010      	beq.n	800e57c <tcp_process+0xfc>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	7d1b      	ldrb	r3, [r3, #20]
 800e55e:	2b02      	cmp	r3, #2
 800e560:	d00c      	beq.n	800e57c <tcp_process+0xfc>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	7d1b      	ldrb	r3, [r3, #20]
 800e566:	2b03      	cmp	r3, #3
 800e568:	d008      	beq.n	800e57c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	8b5b      	ldrh	r3, [r3, #26]
 800e56e:	f043 0302 	orr.w	r3, r3, #2
 800e572:	b29a      	uxth	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e578:	2300      	movs	r3, #0
 800e57a:	e361      	b.n	800ec40 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	8b5b      	ldrh	r3, [r3, #26]
 800e580:	f003 0310 	and.w	r3, r3, #16
 800e584:	2b00      	cmp	r3, #0
 800e586:	d103      	bne.n	800e590 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e588:	4b70      	ldr	r3, [pc, #448]	; (800e74c <tcp_process+0x2cc>)
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2200      	movs	r2, #0
 800e59c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f001 fc2d 	bl	800fe00 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	7d1b      	ldrb	r3, [r3, #20]
 800e5aa:	3b02      	subs	r3, #2
 800e5ac:	2b07      	cmp	r3, #7
 800e5ae:	f200 8337 	bhi.w	800ec20 <tcp_process+0x7a0>
 800e5b2:	a201      	add	r2, pc, #4	; (adr r2, 800e5b8 <tcp_process+0x138>)
 800e5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b8:	0800e5d9 	.word	0x0800e5d9
 800e5bc:	0800e809 	.word	0x0800e809
 800e5c0:	0800e981 	.word	0x0800e981
 800e5c4:	0800e9ab 	.word	0x0800e9ab
 800e5c8:	0800eacf 	.word	0x0800eacf
 800e5cc:	0800e981 	.word	0x0800e981
 800e5d0:	0800eb5b 	.word	0x0800eb5b
 800e5d4:	0800ebeb 	.word	0x0800ebeb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e5d8:	4b57      	ldr	r3, [pc, #348]	; (800e738 <tcp_process+0x2b8>)
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	f003 0310 	and.w	r3, r3, #16
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f000 80e4 	beq.w	800e7ae <tcp_process+0x32e>
 800e5e6:	4b54      	ldr	r3, [pc, #336]	; (800e738 <tcp_process+0x2b8>)
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	f003 0302 	and.w	r3, r3, #2
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f000 80dd 	beq.w	800e7ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5f8:	1c5a      	adds	r2, r3, #1
 800e5fa:	4b50      	ldr	r3, [pc, #320]	; (800e73c <tcp_process+0x2bc>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	f040 80d5 	bne.w	800e7ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e604:	4b4e      	ldr	r3, [pc, #312]	; (800e740 <tcp_process+0x2c0>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	1c5a      	adds	r2, r3, #1
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e616:	4b49      	ldr	r3, [pc, #292]	; (800e73c <tcp_process+0x2bc>)
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e61e:	4b4c      	ldr	r3, [pc, #304]	; (800e750 <tcp_process+0x2d0>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	89db      	ldrh	r3, [r3, #14]
 800e624:	b29a      	uxth	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e638:	4b41      	ldr	r3, [pc, #260]	; (800e740 <tcp_process+0x2c0>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	1e5a      	subs	r2, r3, #1
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2204      	movs	r2, #4
 800e646:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	3304      	adds	r3, #4
 800e650:	4618      	mov	r0, r3
 800e652:	f007 f8b7 	bl	80157c4 <ip4_route>
 800e656:	4601      	mov	r1, r0
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	3304      	adds	r3, #4
 800e65c:	461a      	mov	r2, r3
 800e65e:	4620      	mov	r0, r4
 800e660:	f7fe ffda 	bl	800d618 <tcp_eff_send_mss_netif>
 800e664:	4603      	mov	r3, r0
 800e666:	461a      	mov	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e670:	009a      	lsls	r2, r3, #2
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e676:	005b      	lsls	r3, r3, #1
 800e678:	f241 111c 	movw	r1, #4380	; 0x111c
 800e67c:	428b      	cmp	r3, r1
 800e67e:	bf38      	it	cc
 800e680:	460b      	movcc	r3, r1
 800e682:	429a      	cmp	r2, r3
 800e684:	d204      	bcs.n	800e690 <tcp_process+0x210>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	e00d      	b.n	800e6ac <tcp_process+0x22c>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e694:	005b      	lsls	r3, r3, #1
 800e696:	f241 121c 	movw	r2, #4380	; 0x111c
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d904      	bls.n	800e6a8 <tcp_process+0x228>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	b29b      	uxth	r3, r3
 800e6a6:	e001      	b.n	800e6ac <tcp_process+0x22c>
 800e6a8:	f241 131c 	movw	r3, #4380	; 0x111c
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d106      	bne.n	800e6ca <tcp_process+0x24a>
 800e6bc:	4b1b      	ldr	r3, [pc, #108]	; (800e72c <tcp_process+0x2ac>)
 800e6be:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e6c2:	4924      	ldr	r1, [pc, #144]	; (800e754 <tcp_process+0x2d4>)
 800e6c4:	481b      	ldr	r0, [pc, #108]	; (800e734 <tcp_process+0x2b4>)
 800e6c6:	f008 ff6b 	bl	80175a0 <iprintf>
        --pcb->snd_queuelen;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	b29a      	uxth	r2, r3
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d111      	bne.n	800e70a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e6ec:	69fb      	ldr	r3, [r7, #28]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d106      	bne.n	800e700 <tcp_process+0x280>
 800e6f2:	4b0e      	ldr	r3, [pc, #56]	; (800e72c <tcp_process+0x2ac>)
 800e6f4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e6f8:	4917      	ldr	r1, [pc, #92]	; (800e758 <tcp_process+0x2d8>)
 800e6fa:	480e      	ldr	r0, [pc, #56]	; (800e734 <tcp_process+0x2b4>)
 800e6fc:	f008 ff50 	bl	80175a0 <iprintf>
          pcb->unsent = rseg->next;
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	681a      	ldr	r2, [r3, #0]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	66da      	str	r2, [r3, #108]	; 0x6c
 800e708:	e003      	b.n	800e712 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e712:	69f8      	ldr	r0, [r7, #28]
 800e714:	f7fe fb8d 	bl	800ce32 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d11d      	bne.n	800e75c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e726:	861a      	strh	r2, [r3, #48]	; 0x30
 800e728:	e01f      	b.n	800e76a <tcp_process+0x2ea>
 800e72a:	bf00      	nop
 800e72c:	0801dd5c 	.word	0x0801dd5c
 800e730:	0801dfb0 	.word	0x0801dfb0
 800e734:	0801dda8 	.word	0x0801dda8
 800e738:	20001240 	.word	0x20001240
 800e73c:	20001238 	.word	0x20001238
 800e740:	20001234 	.word	0x20001234
 800e744:	0801dfcc 	.word	0x0801dfcc
 800e748:	20001241 	.word	0x20001241
 800e74c:	2000d85c 	.word	0x2000d85c
 800e750:	20001224 	.word	0x20001224
 800e754:	0801dfec 	.word	0x0801dfec
 800e758:	0801e004 	.word	0x0801e004
        } else {
          pcb->rtime = 0;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2200      	movs	r2, #0
 800e760:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e770:	2b00      	cmp	r3, #0
 800e772:	d00a      	beq.n	800e78a <tcp_process+0x30a>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	6910      	ldr	r0, [r2, #16]
 800e77e:	2200      	movs	r2, #0
 800e780:	6879      	ldr	r1, [r7, #4]
 800e782:	4798      	blx	r3
 800e784:	4603      	mov	r3, r0
 800e786:	76bb      	strb	r3, [r7, #26]
 800e788:	e001      	b.n	800e78e <tcp_process+0x30e>
 800e78a:	2300      	movs	r3, #0
 800e78c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e78e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e792:	f113 0f0d 	cmn.w	r3, #13
 800e796:	d102      	bne.n	800e79e <tcp_process+0x31e>
          return ERR_ABRT;
 800e798:	f06f 030c 	mvn.w	r3, #12
 800e79c:	e250      	b.n	800ec40 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	8b5b      	ldrh	r3, [r3, #26]
 800e7a2:	f043 0302 	orr.w	r3, r3, #2
 800e7a6:	b29a      	uxth	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e7ac:	e23a      	b.n	800ec24 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e7ae:	4b9d      	ldr	r3, [pc, #628]	; (800ea24 <tcp_process+0x5a4>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	f003 0310 	and.w	r3, r3, #16
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f000 8234 	beq.w	800ec24 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7bc:	4b9a      	ldr	r3, [pc, #616]	; (800ea28 <tcp_process+0x5a8>)
 800e7be:	6819      	ldr	r1, [r3, #0]
 800e7c0:	4b9a      	ldr	r3, [pc, #616]	; (800ea2c <tcp_process+0x5ac>)
 800e7c2:	881b      	ldrh	r3, [r3, #0]
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	4b9a      	ldr	r3, [pc, #616]	; (800ea30 <tcp_process+0x5b0>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7cc:	4b99      	ldr	r3, [pc, #612]	; (800ea34 <tcp_process+0x5b4>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7d0:	885b      	ldrh	r3, [r3, #2]
 800e7d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7d4:	4a97      	ldr	r2, [pc, #604]	; (800ea34 <tcp_process+0x5b4>)
 800e7d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7d8:	8812      	ldrh	r2, [r2, #0]
 800e7da:	b292      	uxth	r2, r2
 800e7dc:	9202      	str	r2, [sp, #8]
 800e7de:	9301      	str	r3, [sp, #4]
 800e7e0:	4b95      	ldr	r3, [pc, #596]	; (800ea38 <tcp_process+0x5b8>)
 800e7e2:	9300      	str	r3, [sp, #0]
 800e7e4:	4b95      	ldr	r3, [pc, #596]	; (800ea3c <tcp_process+0x5bc>)
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f003 f8e1 	bl	80119b0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e7f4:	2b05      	cmp	r3, #5
 800e7f6:	f200 8215 	bhi.w	800ec24 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f002 feab 	bl	801155c <tcp_rexmit_rto>
      break;
 800e806:	e20d      	b.n	800ec24 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e808:	4b86      	ldr	r3, [pc, #536]	; (800ea24 <tcp_process+0x5a4>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	f003 0310 	and.w	r3, r3, #16
 800e810:	2b00      	cmp	r3, #0
 800e812:	f000 80a1 	beq.w	800e958 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e816:	4b84      	ldr	r3, [pc, #528]	; (800ea28 <tcp_process+0x5a8>)
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	3b01      	subs	r3, #1
 800e822:	2b00      	cmp	r3, #0
 800e824:	db7e      	blt.n	800e924 <tcp_process+0x4a4>
 800e826:	4b80      	ldr	r3, [pc, #512]	; (800ea28 <tcp_process+0x5a8>)
 800e828:	681a      	ldr	r2, [r3, #0]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	2b00      	cmp	r3, #0
 800e832:	dc77      	bgt.n	800e924 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2204      	movs	r2, #4
 800e838:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d102      	bne.n	800e848 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e842:	23fa      	movs	r3, #250	; 0xfa
 800e844:	76bb      	strb	r3, [r7, #26]
 800e846:	e01d      	b.n	800e884 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e84c:	699b      	ldr	r3, [r3, #24]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d106      	bne.n	800e860 <tcp_process+0x3e0>
 800e852:	4b7b      	ldr	r3, [pc, #492]	; (800ea40 <tcp_process+0x5c0>)
 800e854:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e858:	497a      	ldr	r1, [pc, #488]	; (800ea44 <tcp_process+0x5c4>)
 800e85a:	487b      	ldr	r0, [pc, #492]	; (800ea48 <tcp_process+0x5c8>)
 800e85c:	f008 fea0 	bl	80175a0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e864:	699b      	ldr	r3, [r3, #24]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00a      	beq.n	800e880 <tcp_process+0x400>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e86e:	699b      	ldr	r3, [r3, #24]
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	6910      	ldr	r0, [r2, #16]
 800e874:	2200      	movs	r2, #0
 800e876:	6879      	ldr	r1, [r7, #4]
 800e878:	4798      	blx	r3
 800e87a:	4603      	mov	r3, r0
 800e87c:	76bb      	strb	r3, [r7, #26]
 800e87e:	e001      	b.n	800e884 <tcp_process+0x404>
 800e880:	23f0      	movs	r3, #240	; 0xf0
 800e882:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e884:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00a      	beq.n	800e8a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e88c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e890:	f113 0f0d 	cmn.w	r3, #13
 800e894:	d002      	beq.n	800e89c <tcp_process+0x41c>
              tcp_abort(pcb);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7fd fc26 	bl	800c0e8 <tcp_abort>
            }
            return ERR_ABRT;
 800e89c:	f06f 030c 	mvn.w	r3, #12
 800e8a0:	e1ce      	b.n	800ec40 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f000 fae0 	bl	800ee68 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e8a8:	4b68      	ldr	r3, [pc, #416]	; (800ea4c <tcp_process+0x5cc>)
 800e8aa:	881b      	ldrh	r3, [r3, #0]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d005      	beq.n	800e8bc <tcp_process+0x43c>
            recv_acked--;
 800e8b0:	4b66      	ldr	r3, [pc, #408]	; (800ea4c <tcp_process+0x5cc>)
 800e8b2:	881b      	ldrh	r3, [r3, #0]
 800e8b4:	3b01      	subs	r3, #1
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	4b64      	ldr	r3, [pc, #400]	; (800ea4c <tcp_process+0x5cc>)
 800e8ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8c0:	009a      	lsls	r2, r3, #2
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8c6:	005b      	lsls	r3, r3, #1
 800e8c8:	f241 111c 	movw	r1, #4380	; 0x111c
 800e8cc:	428b      	cmp	r3, r1
 800e8ce:	bf38      	it	cc
 800e8d0:	460b      	movcc	r3, r1
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d204      	bcs.n	800e8e0 <tcp_process+0x460>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8da:	009b      	lsls	r3, r3, #2
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	e00d      	b.n	800e8fc <tcp_process+0x47c>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8e4:	005b      	lsls	r3, r3, #1
 800e8e6:	f241 121c 	movw	r2, #4380	; 0x111c
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d904      	bls.n	800e8f8 <tcp_process+0x478>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e8f2:	005b      	lsls	r3, r3, #1
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	e001      	b.n	800e8fc <tcp_process+0x47c>
 800e8f8:	f241 131c 	movw	r3, #4380	; 0x111c
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e902:	4b53      	ldr	r3, [pc, #332]	; (800ea50 <tcp_process+0x5d0>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	f003 0320 	and.w	r3, r3, #32
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d037      	beq.n	800e97e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	8b5b      	ldrh	r3, [r3, #26]
 800e912:	f043 0302 	orr.w	r3, r3, #2
 800e916:	b29a      	uxth	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2207      	movs	r2, #7
 800e920:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e922:	e02c      	b.n	800e97e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e924:	4b40      	ldr	r3, [pc, #256]	; (800ea28 <tcp_process+0x5a8>)
 800e926:	6819      	ldr	r1, [r3, #0]
 800e928:	4b40      	ldr	r3, [pc, #256]	; (800ea2c <tcp_process+0x5ac>)
 800e92a:	881b      	ldrh	r3, [r3, #0]
 800e92c:	461a      	mov	r2, r3
 800e92e:	4b40      	ldr	r3, [pc, #256]	; (800ea30 <tcp_process+0x5b0>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e934:	4b3f      	ldr	r3, [pc, #252]	; (800ea34 <tcp_process+0x5b4>)
 800e936:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e938:	885b      	ldrh	r3, [r3, #2]
 800e93a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e93c:	4a3d      	ldr	r2, [pc, #244]	; (800ea34 <tcp_process+0x5b4>)
 800e93e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e940:	8812      	ldrh	r2, [r2, #0]
 800e942:	b292      	uxth	r2, r2
 800e944:	9202      	str	r2, [sp, #8]
 800e946:	9301      	str	r3, [sp, #4]
 800e948:	4b3b      	ldr	r3, [pc, #236]	; (800ea38 <tcp_process+0x5b8>)
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	4b3b      	ldr	r3, [pc, #236]	; (800ea3c <tcp_process+0x5bc>)
 800e94e:	4602      	mov	r2, r0
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f003 f82d 	bl	80119b0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e956:	e167      	b.n	800ec28 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e958:	4b32      	ldr	r3, [pc, #200]	; (800ea24 <tcp_process+0x5a4>)
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	f003 0302 	and.w	r3, r3, #2
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 8161 	beq.w	800ec28 <tcp_process+0x7a8>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e96a:	1e5a      	subs	r2, r3, #1
 800e96c:	4b30      	ldr	r3, [pc, #192]	; (800ea30 <tcp_process+0x5b0>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	429a      	cmp	r2, r3
 800e972:	f040 8159 	bne.w	800ec28 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f002 fe12 	bl	80115a0 <tcp_rexmit>
      break;
 800e97c:	e154      	b.n	800ec28 <tcp_process+0x7a8>
 800e97e:	e153      	b.n	800ec28 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f000 fa71 	bl	800ee68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e986:	4b32      	ldr	r3, [pc, #200]	; (800ea50 <tcp_process+0x5d0>)
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	f003 0320 	and.w	r3, r3, #32
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f000 814c 	beq.w	800ec2c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	8b5b      	ldrh	r3, [r3, #26]
 800e998:	f043 0302 	orr.w	r3, r3, #2
 800e99c:	b29a      	uxth	r2, r3
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2207      	movs	r2, #7
 800e9a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9a8:	e140      	b.n	800ec2c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 fa5c 	bl	800ee68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e9b0:	4b27      	ldr	r3, [pc, #156]	; (800ea50 <tcp_process+0x5d0>)
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	f003 0320 	and.w	r3, r3, #32
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d071      	beq.n	800eaa0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9bc:	4b19      	ldr	r3, [pc, #100]	; (800ea24 <tcp_process+0x5a4>)
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	f003 0310 	and.w	r3, r3, #16
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d060      	beq.n	800ea8a <tcp_process+0x60a>
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9cc:	4b16      	ldr	r3, [pc, #88]	; (800ea28 <tcp_process+0x5a8>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d15a      	bne.n	800ea8a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d156      	bne.n	800ea8a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	8b5b      	ldrh	r3, [r3, #26]
 800e9e0:	f043 0302 	orr.w	r3, r3, #2
 800e9e4:	b29a      	uxth	r2, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7fe fcfc 	bl	800d3e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e9f0:	4b18      	ldr	r3, [pc, #96]	; (800ea54 <tcp_process+0x5d4>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	687a      	ldr	r2, [r7, #4]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d105      	bne.n	800ea06 <tcp_process+0x586>
 800e9fa:	4b16      	ldr	r3, [pc, #88]	; (800ea54 <tcp_process+0x5d4>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	68db      	ldr	r3, [r3, #12]
 800ea00:	4a14      	ldr	r2, [pc, #80]	; (800ea54 <tcp_process+0x5d4>)
 800ea02:	6013      	str	r3, [r2, #0]
 800ea04:	e02e      	b.n	800ea64 <tcp_process+0x5e4>
 800ea06:	4b13      	ldr	r3, [pc, #76]	; (800ea54 <tcp_process+0x5d4>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	617b      	str	r3, [r7, #20]
 800ea0c:	e027      	b.n	800ea5e <tcp_process+0x5de>
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d11f      	bne.n	800ea58 <tcp_process+0x5d8>
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	68da      	ldr	r2, [r3, #12]
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	60da      	str	r2, [r3, #12]
 800ea20:	e020      	b.n	800ea64 <tcp_process+0x5e4>
 800ea22:	bf00      	nop
 800ea24:	20001240 	.word	0x20001240
 800ea28:	20001238 	.word	0x20001238
 800ea2c:	2000123e 	.word	0x2000123e
 800ea30:	20001234 	.word	0x20001234
 800ea34:	20001224 	.word	0x20001224
 800ea38:	20009f38 	.word	0x20009f38
 800ea3c:	20009f3c 	.word	0x20009f3c
 800ea40:	0801dd5c 	.word	0x0801dd5c
 800ea44:	0801e018 	.word	0x0801e018
 800ea48:	0801dda8 	.word	0x0801dda8
 800ea4c:	2000123c 	.word	0x2000123c
 800ea50:	20001241 	.word	0x20001241
 800ea54:	2000d858 	.word	0x2000d858
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	617b      	str	r3, [r7, #20]
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d1d4      	bne.n	800ea0e <tcp_process+0x58e>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	60da      	str	r2, [r3, #12]
 800ea6a:	4b77      	ldr	r3, [pc, #476]	; (800ec48 <tcp_process+0x7c8>)
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	220a      	movs	r2, #10
 800ea74:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ea76:	4b75      	ldr	r3, [pc, #468]	; (800ec4c <tcp_process+0x7cc>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	60da      	str	r2, [r3, #12]
 800ea7e:	4a73      	ldr	r2, [pc, #460]	; (800ec4c <tcp_process+0x7cc>)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6013      	str	r3, [r2, #0]
 800ea84:	f003 f956 	bl	8011d34 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ea88:	e0d2      	b.n	800ec30 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	8b5b      	ldrh	r3, [r3, #26]
 800ea8e:	f043 0302 	orr.w	r3, r3, #2
 800ea92:	b29a      	uxth	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2208      	movs	r2, #8
 800ea9c:	751a      	strb	r2, [r3, #20]
      break;
 800ea9e:	e0c7      	b.n	800ec30 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eaa0:	4b6b      	ldr	r3, [pc, #428]	; (800ec50 <tcp_process+0x7d0>)
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	f003 0310 	and.w	r3, r3, #16
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f000 80c1 	beq.w	800ec30 <tcp_process+0x7b0>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eab2:	4b68      	ldr	r3, [pc, #416]	; (800ec54 <tcp_process+0x7d4>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	f040 80ba 	bne.w	800ec30 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f040 80b5 	bne.w	800ec30 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2206      	movs	r2, #6
 800eaca:	751a      	strb	r2, [r3, #20]
      break;
 800eacc:	e0b0      	b.n	800ec30 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 f9ca 	bl	800ee68 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ead4:	4b60      	ldr	r3, [pc, #384]	; (800ec58 <tcp_process+0x7d8>)
 800ead6:	781b      	ldrb	r3, [r3, #0]
 800ead8:	f003 0320 	and.w	r3, r3, #32
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f000 80a9 	beq.w	800ec34 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	8b5b      	ldrh	r3, [r3, #26]
 800eae6:	f043 0302 	orr.w	r3, r3, #2
 800eaea:	b29a      	uxth	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7fe fc79 	bl	800d3e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eaf6:	4b59      	ldr	r3, [pc, #356]	; (800ec5c <tcp_process+0x7dc>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d105      	bne.n	800eb0c <tcp_process+0x68c>
 800eb00:	4b56      	ldr	r3, [pc, #344]	; (800ec5c <tcp_process+0x7dc>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	4a55      	ldr	r2, [pc, #340]	; (800ec5c <tcp_process+0x7dc>)
 800eb08:	6013      	str	r3, [r2, #0]
 800eb0a:	e013      	b.n	800eb34 <tcp_process+0x6b4>
 800eb0c:	4b53      	ldr	r3, [pc, #332]	; (800ec5c <tcp_process+0x7dc>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	613b      	str	r3, [r7, #16]
 800eb12:	e00c      	b.n	800eb2e <tcp_process+0x6ae>
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	687a      	ldr	r2, [r7, #4]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d104      	bne.n	800eb28 <tcp_process+0x6a8>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	68da      	ldr	r2, [r3, #12]
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	60da      	str	r2, [r3, #12]
 800eb26:	e005      	b.n	800eb34 <tcp_process+0x6b4>
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	613b      	str	r3, [r7, #16]
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1ef      	bne.n	800eb14 <tcp_process+0x694>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	60da      	str	r2, [r3, #12]
 800eb3a:	4b43      	ldr	r3, [pc, #268]	; (800ec48 <tcp_process+0x7c8>)
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	220a      	movs	r2, #10
 800eb44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eb46:	4b41      	ldr	r3, [pc, #260]	; (800ec4c <tcp_process+0x7cc>)
 800eb48:	681a      	ldr	r2, [r3, #0]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	60da      	str	r2, [r3, #12]
 800eb4e:	4a3f      	ldr	r2, [pc, #252]	; (800ec4c <tcp_process+0x7cc>)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6013      	str	r3, [r2, #0]
 800eb54:	f003 f8ee 	bl	8011d34 <tcp_timer_needed>
      }
      break;
 800eb58:	e06c      	b.n	800ec34 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f984 	bl	800ee68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eb60:	4b3b      	ldr	r3, [pc, #236]	; (800ec50 <tcp_process+0x7d0>)
 800eb62:	781b      	ldrb	r3, [r3, #0]
 800eb64:	f003 0310 	and.w	r3, r3, #16
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d065      	beq.n	800ec38 <tcp_process+0x7b8>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb70:	4b38      	ldr	r3, [pc, #224]	; (800ec54 <tcp_process+0x7d4>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d15f      	bne.n	800ec38 <tcp_process+0x7b8>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d15b      	bne.n	800ec38 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7fe fc31 	bl	800d3e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb86:	4b35      	ldr	r3, [pc, #212]	; (800ec5c <tcp_process+0x7dc>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	687a      	ldr	r2, [r7, #4]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d105      	bne.n	800eb9c <tcp_process+0x71c>
 800eb90:	4b32      	ldr	r3, [pc, #200]	; (800ec5c <tcp_process+0x7dc>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	68db      	ldr	r3, [r3, #12]
 800eb96:	4a31      	ldr	r2, [pc, #196]	; (800ec5c <tcp_process+0x7dc>)
 800eb98:	6013      	str	r3, [r2, #0]
 800eb9a:	e013      	b.n	800ebc4 <tcp_process+0x744>
 800eb9c:	4b2f      	ldr	r3, [pc, #188]	; (800ec5c <tcp_process+0x7dc>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	60fb      	str	r3, [r7, #12]
 800eba2:	e00c      	b.n	800ebbe <tcp_process+0x73e>
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d104      	bne.n	800ebb8 <tcp_process+0x738>
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	68da      	ldr	r2, [r3, #12]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	60da      	str	r2, [r3, #12]
 800ebb6:	e005      	b.n	800ebc4 <tcp_process+0x744>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	60fb      	str	r3, [r7, #12]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d1ef      	bne.n	800eba4 <tcp_process+0x724>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	60da      	str	r2, [r3, #12]
 800ebca:	4b1f      	ldr	r3, [pc, #124]	; (800ec48 <tcp_process+0x7c8>)
 800ebcc:	2201      	movs	r2, #1
 800ebce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	220a      	movs	r2, #10
 800ebd4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ebd6:	4b1d      	ldr	r3, [pc, #116]	; (800ec4c <tcp_process+0x7cc>)
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	60da      	str	r2, [r3, #12]
 800ebde:	4a1b      	ldr	r2, [pc, #108]	; (800ec4c <tcp_process+0x7cc>)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6013      	str	r3, [r2, #0]
 800ebe4:	f003 f8a6 	bl	8011d34 <tcp_timer_needed>
      }
      break;
 800ebe8:	e026      	b.n	800ec38 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 f93c 	bl	800ee68 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ebf0:	4b17      	ldr	r3, [pc, #92]	; (800ec50 <tcp_process+0x7d0>)
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	f003 0310 	and.w	r3, r3, #16
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d01f      	beq.n	800ec3c <tcp_process+0x7bc>
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec00:	4b14      	ldr	r3, [pc, #80]	; (800ec54 <tcp_process+0x7d4>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d119      	bne.n	800ec3c <tcp_process+0x7bc>
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d115      	bne.n	800ec3c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ec10:	4b11      	ldr	r3, [pc, #68]	; (800ec58 <tcp_process+0x7d8>)
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	f043 0310 	orr.w	r3, r3, #16
 800ec18:	b2da      	uxtb	r2, r3
 800ec1a:	4b0f      	ldr	r3, [pc, #60]	; (800ec58 <tcp_process+0x7d8>)
 800ec1c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ec1e:	e00d      	b.n	800ec3c <tcp_process+0x7bc>
    default:
      break;
 800ec20:	bf00      	nop
 800ec22:	e00c      	b.n	800ec3e <tcp_process+0x7be>
      break;
 800ec24:	bf00      	nop
 800ec26:	e00a      	b.n	800ec3e <tcp_process+0x7be>
      break;
 800ec28:	bf00      	nop
 800ec2a:	e008      	b.n	800ec3e <tcp_process+0x7be>
      break;
 800ec2c:	bf00      	nop
 800ec2e:	e006      	b.n	800ec3e <tcp_process+0x7be>
      break;
 800ec30:	bf00      	nop
 800ec32:	e004      	b.n	800ec3e <tcp_process+0x7be>
      break;
 800ec34:	bf00      	nop
 800ec36:	e002      	b.n	800ec3e <tcp_process+0x7be>
      break;
 800ec38:	bf00      	nop
 800ec3a:	e000      	b.n	800ec3e <tcp_process+0x7be>
      break;
 800ec3c:	bf00      	nop
  }
  return ERR_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3724      	adds	r7, #36	; 0x24
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd90      	pop	{r4, r7, pc}
 800ec48:	2000d854 	.word	0x2000d854
 800ec4c:	2000d868 	.word	0x2000d868
 800ec50:	20001240 	.word	0x20001240
 800ec54:	20001238 	.word	0x20001238
 800ec58:	20001241 	.word	0x20001241
 800ec5c:	2000d858 	.word	0x2000d858

0800ec60 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ec60:	b590      	push	{r4, r7, lr}
 800ec62:	b085      	sub	sp, #20
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d106      	bne.n	800ec7e <tcp_oos_insert_segment+0x1e>
 800ec70:	4b3b      	ldr	r3, [pc, #236]	; (800ed60 <tcp_oos_insert_segment+0x100>)
 800ec72:	f240 421f 	movw	r2, #1055	; 0x41f
 800ec76:	493b      	ldr	r1, [pc, #236]	; (800ed64 <tcp_oos_insert_segment+0x104>)
 800ec78:	483b      	ldr	r0, [pc, #236]	; (800ed68 <tcp_oos_insert_segment+0x108>)
 800ec7a:	f008 fc91 	bl	80175a0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	899b      	ldrh	r3, [r3, #12]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fb f8f8 	bl	8009e7c <lwip_htons>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d028      	beq.n	800ecea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ec98:	6838      	ldr	r0, [r7, #0]
 800ec9a:	f7fe f8b5 	bl	800ce08 <tcp_segs_free>
    next = NULL;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	603b      	str	r3, [r7, #0]
 800eca2:	e056      	b.n	800ed52 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	68db      	ldr	r3, [r3, #12]
 800eca8:	899b      	ldrh	r3, [r3, #12]
 800ecaa:	b29b      	uxth	r3, r3
 800ecac:	4618      	mov	r0, r3
 800ecae:	f7fb f8e5 	bl	8009e7c <lwip_htons>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	b2db      	uxtb	r3, r3
 800ecb6:	f003 0301 	and.w	r3, r3, #1
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d00d      	beq.n	800ecda <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	899b      	ldrh	r3, [r3, #12]
 800ecc4:	b29c      	uxth	r4, r3
 800ecc6:	2001      	movs	r0, #1
 800ecc8:	f7fb f8d8 	bl	8009e7c <lwip_htons>
 800eccc:	4603      	mov	r3, r0
 800ecce:	461a      	mov	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	4322      	orrs	r2, r4
 800ecd6:	b292      	uxth	r2, r2
 800ecd8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f7fe f8a4 	bl	800ce32 <tcp_seg_free>
    while (next &&
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d00e      	beq.n	800ed0e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	891b      	ldrh	r3, [r3, #8]
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	4b1d      	ldr	r3, [pc, #116]	; (800ed6c <tcp_oos_insert_segment+0x10c>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	441a      	add	r2, r3
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	6839      	ldr	r1, [r7, #0]
 800ed04:	8909      	ldrh	r1, [r1, #8]
 800ed06:	440b      	add	r3, r1
 800ed08:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	daca      	bge.n	800eca4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d01e      	beq.n	800ed52 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	891b      	ldrh	r3, [r3, #8]
 800ed18:	461a      	mov	r2, r3
 800ed1a:	4b14      	ldr	r3, [pc, #80]	; (800ed6c <tcp_oos_insert_segment+0x10c>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	441a      	add	r2, r3
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	685b      	ldr	r3, [r3, #4]
 800ed26:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	dd12      	ble.n	800ed52 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	68db      	ldr	r3, [r3, #12]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	4b0d      	ldr	r3, [pc, #52]	; (800ed6c <tcp_oos_insert_segment+0x10c>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	1ad3      	subs	r3, r2, r3
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	685a      	ldr	r2, [r3, #4]
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	4610      	mov	r0, r2
 800ed4e:	f7fc faa9 	bl	800b2a4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	683a      	ldr	r2, [r7, #0]
 800ed56:	601a      	str	r2, [r3, #0]
}
 800ed58:	bf00      	nop
 800ed5a:	3714      	adds	r7, #20
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	bd90      	pop	{r4, r7, pc}
 800ed60:	0801dd5c 	.word	0x0801dd5c
 800ed64:	0801e038 	.word	0x0801e038
 800ed68:	0801dda8 	.word	0x0801dda8
 800ed6c:	20001234 	.word	0x20001234

0800ed70 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ed70:	b5b0      	push	{r4, r5, r7, lr}
 800ed72:	b086      	sub	sp, #24
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	607a      	str	r2, [r7, #4]
 800ed7c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ed7e:	e03e      	b.n	800edfe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fc fc96 	bl	800b6c0 <pbuf_clen>
 800ed94:	4603      	mov	r3, r0
 800ed96:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed9e:	8a7a      	ldrh	r2, [r7, #18]
 800eda0:	429a      	cmp	r2, r3
 800eda2:	d906      	bls.n	800edb2 <tcp_free_acked_segments+0x42>
 800eda4:	4b2a      	ldr	r3, [pc, #168]	; (800ee50 <tcp_free_acked_segments+0xe0>)
 800eda6:	f240 4257 	movw	r2, #1111	; 0x457
 800edaa:	492a      	ldr	r1, [pc, #168]	; (800ee54 <tcp_free_acked_segments+0xe4>)
 800edac:	482a      	ldr	r0, [pc, #168]	; (800ee58 <tcp_free_acked_segments+0xe8>)
 800edae:	f008 fbf7 	bl	80175a0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800edb8:	8a7b      	ldrh	r3, [r7, #18]
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	b29a      	uxth	r2, r3
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	891a      	ldrh	r2, [r3, #8]
 800edc8:	4b24      	ldr	r3, [pc, #144]	; (800ee5c <tcp_free_acked_segments+0xec>)
 800edca:	881b      	ldrh	r3, [r3, #0]
 800edcc:	4413      	add	r3, r2
 800edce:	b29a      	uxth	r2, r3
 800edd0:	4b22      	ldr	r3, [pc, #136]	; (800ee5c <tcp_free_acked_segments+0xec>)
 800edd2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800edd4:	6978      	ldr	r0, [r7, #20]
 800edd6:	f7fe f82c 	bl	800ce32 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00c      	beq.n	800edfe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d109      	bne.n	800edfe <tcp_free_acked_segments+0x8e>
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d106      	bne.n	800edfe <tcp_free_acked_segments+0x8e>
 800edf0:	4b17      	ldr	r3, [pc, #92]	; (800ee50 <tcp_free_acked_segments+0xe0>)
 800edf2:	f240 4261 	movw	r2, #1121	; 0x461
 800edf6:	491a      	ldr	r1, [pc, #104]	; (800ee60 <tcp_free_acked_segments+0xf0>)
 800edf8:	4817      	ldr	r0, [pc, #92]	; (800ee58 <tcp_free_acked_segments+0xe8>)
 800edfa:	f008 fbd1 	bl	80175a0 <iprintf>
  while (seg_list != NULL &&
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d020      	beq.n	800ee46 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fb f84b 	bl	8009ea6 <lwip_htonl>
 800ee10:	4604      	mov	r4, r0
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	891b      	ldrh	r3, [r3, #8]
 800ee16:	461d      	mov	r5, r3
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	899b      	ldrh	r3, [r3, #12]
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fb f82b 	bl	8009e7c <lwip_htons>
 800ee26:	4603      	mov	r3, r0
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	f003 0303 	and.w	r3, r3, #3
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d001      	beq.n	800ee36 <tcp_free_acked_segments+0xc6>
 800ee32:	2301      	movs	r3, #1
 800ee34:	e000      	b.n	800ee38 <tcp_free_acked_segments+0xc8>
 800ee36:	2300      	movs	r3, #0
 800ee38:	442b      	add	r3, r5
 800ee3a:	18e2      	adds	r2, r4, r3
 800ee3c:	4b09      	ldr	r3, [pc, #36]	; (800ee64 <tcp_free_acked_segments+0xf4>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	dd9c      	ble.n	800ed80 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ee46:	68bb      	ldr	r3, [r7, #8]
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3718      	adds	r7, #24
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ee50:	0801dd5c 	.word	0x0801dd5c
 800ee54:	0801e060 	.word	0x0801e060
 800ee58:	0801dda8 	.word	0x0801dda8
 800ee5c:	2000123c 	.word	0x2000123c
 800ee60:	0801e088 	.word	0x0801e088
 800ee64:	20001238 	.word	0x20001238

0800ee68 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ee68:	b5b0      	push	{r4, r5, r7, lr}
 800ee6a:	b094      	sub	sp, #80	; 0x50
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ee70:	2300      	movs	r3, #0
 800ee72:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d106      	bne.n	800ee88 <tcp_receive+0x20>
 800ee7a:	4ba6      	ldr	r3, [pc, #664]	; (800f114 <tcp_receive+0x2ac>)
 800ee7c:	f240 427b 	movw	r2, #1147	; 0x47b
 800ee80:	49a5      	ldr	r1, [pc, #660]	; (800f118 <tcp_receive+0x2b0>)
 800ee82:	48a6      	ldr	r0, [pc, #664]	; (800f11c <tcp_receive+0x2b4>)
 800ee84:	f008 fb8c 	bl	80175a0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	7d1b      	ldrb	r3, [r3, #20]
 800ee8c:	2b03      	cmp	r3, #3
 800ee8e:	d806      	bhi.n	800ee9e <tcp_receive+0x36>
 800ee90:	4ba0      	ldr	r3, [pc, #640]	; (800f114 <tcp_receive+0x2ac>)
 800ee92:	f240 427c 	movw	r2, #1148	; 0x47c
 800ee96:	49a2      	ldr	r1, [pc, #648]	; (800f120 <tcp_receive+0x2b8>)
 800ee98:	48a0      	ldr	r0, [pc, #640]	; (800f11c <tcp_receive+0x2b4>)
 800ee9a:	f008 fb81 	bl	80175a0 <iprintf>

  if (flags & TCP_ACK) {
 800ee9e:	4ba1      	ldr	r3, [pc, #644]	; (800f124 <tcp_receive+0x2bc>)
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	f003 0310 	and.w	r3, r3, #16
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	f000 8263 	beq.w	800f372 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eeb8:	4413      	add	r3, r2
 800eeba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eec0:	4b99      	ldr	r3, [pc, #612]	; (800f128 <tcp_receive+0x2c0>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	db1b      	blt.n	800ef02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eece:	4b96      	ldr	r3, [pc, #600]	; (800f128 <tcp_receive+0x2c0>)
 800eed0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d106      	bne.n	800eee4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eeda:	4b94      	ldr	r3, [pc, #592]	; (800f12c <tcp_receive+0x2c4>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	1ad3      	subs	r3, r2, r3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	db0e      	blt.n	800ef02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eee8:	4b90      	ldr	r3, [pc, #576]	; (800f12c <tcp_receive+0x2c4>)
 800eeea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d125      	bne.n	800ef3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eef0:	4b8f      	ldr	r3, [pc, #572]	; (800f130 <tcp_receive+0x2c8>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	89db      	ldrh	r3, [r3, #14]
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d91c      	bls.n	800ef3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ef02:	4b8b      	ldr	r3, [pc, #556]	; (800f130 <tcp_receive+0x2c8>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	89db      	ldrh	r3, [r3, #14]
 800ef08:	b29a      	uxth	r2, r3
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d205      	bcs.n	800ef2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ef2c:	4b7e      	ldr	r3, [pc, #504]	; (800f128 <tcp_receive+0x2c0>)
 800ef2e:	681a      	ldr	r2, [r3, #0]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ef34:	4b7d      	ldr	r3, [pc, #500]	; (800f12c <tcp_receive+0x2c4>)
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ef3c:	4b7b      	ldr	r3, [pc, #492]	; (800f12c <tcp_receive+0x2c4>)
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef44:	1ad3      	subs	r3, r2, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	dc58      	bgt.n	800effc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ef4a:	4b7a      	ldr	r3, [pc, #488]	; (800f134 <tcp_receive+0x2cc>)
 800ef4c:	881b      	ldrh	r3, [r3, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d14b      	bne.n	800efea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ef5c:	4413      	add	r3, r2
 800ef5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d142      	bne.n	800efea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	db3d      	blt.n	800efea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef72:	4b6e      	ldr	r3, [pc, #440]	; (800f12c <tcp_receive+0x2c4>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d137      	bne.n	800efea <tcp_receive+0x182>
              found_dupack = 1;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef84:	2bff      	cmp	r3, #255	; 0xff
 800ef86:	d007      	beq.n	800ef98 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef8e:	3301      	adds	r3, #1
 800ef90:	b2da      	uxtb	r2, r3
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ef9e:	2b03      	cmp	r3, #3
 800efa0:	d91b      	bls.n	800efda <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efac:	4413      	add	r3, r2
 800efae:	b29a      	uxth	r2, r3
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d30a      	bcc.n	800efd0 <tcp_receive+0x168>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efc4:	4413      	add	r3, r2
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800efce:	e004      	b.n	800efda <tcp_receive+0x172>
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800efe0:	2b02      	cmp	r3, #2
 800efe2:	d902      	bls.n	800efea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f002 fb47 	bl	8011678 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800efea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800efec:	2b00      	cmp	r3, #0
 800efee:	f040 8160 	bne.w	800f2b2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800effa:	e15a      	b.n	800f2b2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800effc:	4b4b      	ldr	r3, [pc, #300]	; (800f12c <tcp_receive+0x2c4>)
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f004:	1ad3      	subs	r3, r2, r3
 800f006:	3b01      	subs	r3, #1
 800f008:	2b00      	cmp	r3, #0
 800f00a:	f2c0 814d 	blt.w	800f2a8 <tcp_receive+0x440>
 800f00e:	4b47      	ldr	r3, [pc, #284]	; (800f12c <tcp_receive+0x2c4>)
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f016:	1ad3      	subs	r3, r2, r3
 800f018:	2b00      	cmp	r3, #0
 800f01a:	f300 8145 	bgt.w	800f2a8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	8b5b      	ldrh	r3, [r3, #26]
 800f022:	f003 0304 	and.w	r3, r3, #4
 800f026:	2b00      	cmp	r3, #0
 800f028:	d010      	beq.n	800f04c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	8b5b      	ldrh	r3, [r3, #26]
 800f02e:	f023 0304 	bic.w	r3, r3, #4
 800f032:	b29a      	uxth	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f05a:	10db      	asrs	r3, r3, #3
 800f05c:	b21b      	sxth	r3, r3
 800f05e:	b29a      	uxth	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f066:	b29b      	uxth	r3, r3
 800f068:	4413      	add	r3, r2
 800f06a:	b29b      	uxth	r3, r3
 800f06c:	b21a      	sxth	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f074:	4b2d      	ldr	r3, [pc, #180]	; (800f12c <tcp_receive+0x2c4>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	b29a      	uxth	r2, r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f07e:	b29b      	uxth	r3, r3
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f08c:	4b27      	ldr	r3, [pc, #156]	; (800f12c <tcp_receive+0x2c4>)
 800f08e:	681a      	ldr	r2, [r3, #0]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	7d1b      	ldrb	r3, [r3, #20]
 800f098:	2b03      	cmp	r3, #3
 800f09a:	f240 8096 	bls.w	800f1ca <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d244      	bcs.n	800f138 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	8b5b      	ldrh	r3, [r3, #26]
 800f0b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d001      	beq.n	800f0be <tcp_receive+0x256>
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	e000      	b.n	800f0c0 <tcp_receive+0x258>
 800f0be:	2302      	movs	r3, #2
 800f0c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f0c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f0c8:	b29a      	uxth	r2, r3
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f0ce:	fb12 f303 	smulbb	r3, r2, r3
 800f0d2:	b29b      	uxth	r3, r3
 800f0d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	bf28      	it	cs
 800f0da:	4613      	movcs	r3, r2
 800f0dc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f0e6:	4413      	add	r3, r2
 800f0e8:	b29a      	uxth	r2, r3
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d309      	bcc.n	800f108 <tcp_receive+0x2a0>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f0fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f0fc:	4413      	add	r3, r2
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f106:	e060      	b.n	800f1ca <tcp_receive+0x362>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f10e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f112:	e05a      	b.n	800f1ca <tcp_receive+0x362>
 800f114:	0801dd5c 	.word	0x0801dd5c
 800f118:	0801e0a8 	.word	0x0801e0a8
 800f11c:	0801dda8 	.word	0x0801dda8
 800f120:	0801e0c4 	.word	0x0801e0c4
 800f124:	20001240 	.word	0x20001240
 800f128:	20001234 	.word	0x20001234
 800f12c:	20001238 	.word	0x20001238
 800f130:	20001224 	.word	0x20001224
 800f134:	2000123e 	.word	0x2000123e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f13e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f140:	4413      	add	r3, r2
 800f142:	b29a      	uxth	r2, r3
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d309      	bcc.n	800f162 <tcp_receive+0x2fa>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f154:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f156:	4413      	add	r3, r2
 800f158:	b29a      	uxth	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f160:	e004      	b.n	800f16c <tcp_receive+0x304>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f178:	429a      	cmp	r2, r3
 800f17a:	d326      	bcc.n	800f1ca <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f188:	1ad3      	subs	r3, r2, r3
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f19c:	4413      	add	r3, r2
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d30a      	bcc.n	800f1c0 <tcp_receive+0x358>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1b4:	4413      	add	r3, r2
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1be:	e004      	b.n	800f1ca <tcp_receive+0x362>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1d2:	4a98      	ldr	r2, [pc, #608]	; (800f434 <tcp_receive+0x5cc>)
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff fdcb 	bl	800ed70 <tcp_free_acked_segments>
 800f1da:	4602      	mov	r2, r0
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1e8:	4a93      	ldr	r2, [pc, #588]	; (800f438 <tcp_receive+0x5d0>)
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f7ff fdc0 	bl	800ed70 <tcp_free_acked_segments>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d104      	bne.n	800f208 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f204:	861a      	strh	r2, [r3, #48]	; 0x30
 800f206:	e002      	b.n	800f20e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2200      	movs	r2, #0
 800f20c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2200      	movs	r2, #0
 800f212:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d103      	bne.n	800f224 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f22a:	4b84      	ldr	r3, [pc, #528]	; (800f43c <tcp_receive+0x5d4>)
 800f22c:	881b      	ldrh	r3, [r3, #0]
 800f22e:	4413      	add	r3, r2
 800f230:	b29a      	uxth	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	8b5b      	ldrh	r3, [r3, #26]
 800f23c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f240:	2b00      	cmp	r3, #0
 800f242:	d035      	beq.n	800f2b0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d118      	bne.n	800f27e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00c      	beq.n	800f26e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	4618      	mov	r0, r3
 800f262:	f7fa fe20 	bl	8009ea6 <lwip_htonl>
 800f266:	4603      	mov	r3, r0
 800f268:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	dc20      	bgt.n	800f2b0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	8b5b      	ldrh	r3, [r3, #26]
 800f272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f276:	b29a      	uxth	r2, r3
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f27c:	e018      	b.n	800f2b0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7fa fe0b 	bl	8009ea6 <lwip_htonl>
 800f290:	4603      	mov	r3, r0
 800f292:	1ae3      	subs	r3, r4, r3
 800f294:	2b00      	cmp	r3, #0
 800f296:	dc0b      	bgt.n	800f2b0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	8b5b      	ldrh	r3, [r3, #26]
 800f29c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2a6:	e003      	b.n	800f2b0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f002 fbd3 	bl	8011a54 <tcp_send_empty_ack>
 800f2ae:	e000      	b.n	800f2b2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2b0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d05b      	beq.n	800f372 <tcp_receive+0x50a>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2be:	4b60      	ldr	r3, [pc, #384]	; (800f440 <tcp_receive+0x5d8>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	1ad3      	subs	r3, r2, r3
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	da54      	bge.n	800f372 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f2c8:	4b5e      	ldr	r3, [pc, #376]	; (800f444 <tcp_receive+0x5dc>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	b29a      	uxth	r2, r3
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	1ad3      	subs	r3, r2, r3
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f2dc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f2e6:	10db      	asrs	r3, r3, #3
 800f2e8:	b21b      	sxth	r3, r3
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f300:	4413      	add	r3, r2
 800f302:	b29b      	uxth	r3, r3
 800f304:	b21a      	sxth	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f30a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f30e:	2b00      	cmp	r3, #0
 800f310:	da05      	bge.n	800f31e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f312:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f316:	425b      	negs	r3, r3
 800f318:	b29b      	uxth	r3, r3
 800f31a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f31e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f328:	109b      	asrs	r3, r3, #2
 800f32a:	b21b      	sxth	r3, r3
 800f32c:	b29b      	uxth	r3, r3
 800f32e:	1ad3      	subs	r3, r2, r3
 800f330:	b29b      	uxth	r3, r3
 800f332:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f342:	4413      	add	r3, r2
 800f344:	b29b      	uxth	r3, r3
 800f346:	b21a      	sxth	r2, r3
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f352:	10db      	asrs	r3, r3, #3
 800f354:	b21b      	sxth	r3, r3
 800f356:	b29a      	uxth	r2, r3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f35e:	b29b      	uxth	r3, r3
 800f360:	4413      	add	r3, r2
 800f362:	b29b      	uxth	r3, r3
 800f364:	b21a      	sxth	r2, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f372:	4b35      	ldr	r3, [pc, #212]	; (800f448 <tcp_receive+0x5e0>)
 800f374:	881b      	ldrh	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	f000 84e1 	beq.w	800fd3e <tcp_receive+0xed6>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	7d1b      	ldrb	r3, [r3, #20]
 800f380:	2b06      	cmp	r3, #6
 800f382:	f200 84dc 	bhi.w	800fd3e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f38a:	4b30      	ldr	r3, [pc, #192]	; (800f44c <tcp_receive+0x5e4>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	1ad3      	subs	r3, r2, r3
 800f390:	3b01      	subs	r3, #1
 800f392:	2b00      	cmp	r3, #0
 800f394:	f2c0 808e 	blt.w	800f4b4 <tcp_receive+0x64c>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f39c:	4b2a      	ldr	r3, [pc, #168]	; (800f448 <tcp_receive+0x5e0>)
 800f39e:	881b      	ldrh	r3, [r3, #0]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	4b2a      	ldr	r3, [pc, #168]	; (800f44c <tcp_receive+0x5e4>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	440b      	add	r3, r1
 800f3a8:	1ad3      	subs	r3, r2, r3
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f300 8081 	bgt.w	800f4b4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f3b2:	4b27      	ldr	r3, [pc, #156]	; (800f450 <tcp_receive+0x5e8>)
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3bc:	4b23      	ldr	r3, [pc, #140]	; (800f44c <tcp_receive+0x5e4>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	1ad3      	subs	r3, r2, r3
 800f3c2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f3c4:	4b22      	ldr	r3, [pc, #136]	; (800f450 <tcp_receive+0x5e8>)
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d106      	bne.n	800f3da <tcp_receive+0x572>
 800f3cc:	4b21      	ldr	r3, [pc, #132]	; (800f454 <tcp_receive+0x5ec>)
 800f3ce:	f240 5294 	movw	r2, #1428	; 0x594
 800f3d2:	4921      	ldr	r1, [pc, #132]	; (800f458 <tcp_receive+0x5f0>)
 800f3d4:	4821      	ldr	r0, [pc, #132]	; (800f45c <tcp_receive+0x5f4>)
 800f3d6:	f008 f8e3 	bl	80175a0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d906      	bls.n	800f3f2 <tcp_receive+0x58a>
 800f3e4:	4b1b      	ldr	r3, [pc, #108]	; (800f454 <tcp_receive+0x5ec>)
 800f3e6:	f240 5295 	movw	r2, #1429	; 0x595
 800f3ea:	491d      	ldr	r1, [pc, #116]	; (800f460 <tcp_receive+0x5f8>)
 800f3ec:	481b      	ldr	r0, [pc, #108]	; (800f45c <tcp_receive+0x5f4>)
 800f3ee:	f008 f8d7 	bl	80175a0 <iprintf>
      off = (u16_t)off32;
 800f3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f3f8:	4b15      	ldr	r3, [pc, #84]	; (800f450 <tcp_receive+0x5e8>)
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	891b      	ldrh	r3, [r3, #8]
 800f3fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f402:	429a      	cmp	r2, r3
 800f404:	d906      	bls.n	800f414 <tcp_receive+0x5ac>
 800f406:	4b13      	ldr	r3, [pc, #76]	; (800f454 <tcp_receive+0x5ec>)
 800f408:	f240 5297 	movw	r2, #1431	; 0x597
 800f40c:	4915      	ldr	r1, [pc, #84]	; (800f464 <tcp_receive+0x5fc>)
 800f40e:	4813      	ldr	r0, [pc, #76]	; (800f45c <tcp_receive+0x5f4>)
 800f410:	f008 f8c6 	bl	80175a0 <iprintf>
      inseg.len -= off;
 800f414:	4b0e      	ldr	r3, [pc, #56]	; (800f450 <tcp_receive+0x5e8>)
 800f416:	891a      	ldrh	r2, [r3, #8]
 800f418:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f41c:	1ad3      	subs	r3, r2, r3
 800f41e:	b29a      	uxth	r2, r3
 800f420:	4b0b      	ldr	r3, [pc, #44]	; (800f450 <tcp_receive+0x5e8>)
 800f422:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f424:	4b0a      	ldr	r3, [pc, #40]	; (800f450 <tcp_receive+0x5e8>)
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	891a      	ldrh	r2, [r3, #8]
 800f42a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f432:	e029      	b.n	800f488 <tcp_receive+0x620>
 800f434:	0801e0e0 	.word	0x0801e0e0
 800f438:	0801e0e8 	.word	0x0801e0e8
 800f43c:	2000123c 	.word	0x2000123c
 800f440:	20001238 	.word	0x20001238
 800f444:	2000d85c 	.word	0x2000d85c
 800f448:	2000123e 	.word	0x2000123e
 800f44c:	20001234 	.word	0x20001234
 800f450:	20001214 	.word	0x20001214
 800f454:	0801dd5c 	.word	0x0801dd5c
 800f458:	0801e0f0 	.word	0x0801e0f0
 800f45c:	0801dda8 	.word	0x0801dda8
 800f460:	0801e100 	.word	0x0801e100
 800f464:	0801e110 	.word	0x0801e110
        off -= p->len;
 800f468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f46a:	895b      	ldrh	r3, [r3, #10]
 800f46c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f470:	1ad3      	subs	r3, r2, r3
 800f472:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f478:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f47a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f47c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f47e:	2200      	movs	r2, #0
 800f480:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f48a:	895b      	ldrh	r3, [r3, #10]
 800f48c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f490:	429a      	cmp	r2, r3
 800f492:	d8e9      	bhi.n	800f468 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f498:	4619      	mov	r1, r3
 800f49a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f49c:	f7fc f802 	bl	800b4a4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4a4:	4a91      	ldr	r2, [pc, #580]	; (800f6ec <tcp_receive+0x884>)
 800f4a6:	6013      	str	r3, [r2, #0]
 800f4a8:	4b91      	ldr	r3, [pc, #580]	; (800f6f0 <tcp_receive+0x888>)
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	4a8f      	ldr	r2, [pc, #572]	; (800f6ec <tcp_receive+0x884>)
 800f4ae:	6812      	ldr	r2, [r2, #0]
 800f4b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f4b2:	e00d      	b.n	800f4d0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f4b4:	4b8d      	ldr	r3, [pc, #564]	; (800f6ec <tcp_receive+0x884>)
 800f4b6:	681a      	ldr	r2, [r3, #0]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	da06      	bge.n	800f4d0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	8b5b      	ldrh	r3, [r3, #26]
 800f4c6:	f043 0302 	orr.w	r3, r3, #2
 800f4ca:	b29a      	uxth	r2, r3
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f4d0:	4b86      	ldr	r3, [pc, #536]	; (800f6ec <tcp_receive+0x884>)
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4d8:	1ad3      	subs	r3, r2, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	f2c0 842a 	blt.w	800fd34 <tcp_receive+0xecc>
 800f4e0:	4b82      	ldr	r3, [pc, #520]	; (800f6ec <tcp_receive+0x884>)
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f4ec:	440b      	add	r3, r1
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f300 841e 	bgt.w	800fd34 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4fc:	4b7b      	ldr	r3, [pc, #492]	; (800f6ec <tcp_receive+0x884>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	429a      	cmp	r2, r3
 800f502:	f040 829a 	bne.w	800fa3a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f506:	4b7a      	ldr	r3, [pc, #488]	; (800f6f0 <tcp_receive+0x888>)
 800f508:	891c      	ldrh	r4, [r3, #8]
 800f50a:	4b79      	ldr	r3, [pc, #484]	; (800f6f0 <tcp_receive+0x888>)
 800f50c:	68db      	ldr	r3, [r3, #12]
 800f50e:	899b      	ldrh	r3, [r3, #12]
 800f510:	b29b      	uxth	r3, r3
 800f512:	4618      	mov	r0, r3
 800f514:	f7fa fcb2 	bl	8009e7c <lwip_htons>
 800f518:	4603      	mov	r3, r0
 800f51a:	b2db      	uxtb	r3, r3
 800f51c:	f003 0303 	and.w	r3, r3, #3
 800f520:	2b00      	cmp	r3, #0
 800f522:	d001      	beq.n	800f528 <tcp_receive+0x6c0>
 800f524:	2301      	movs	r3, #1
 800f526:	e000      	b.n	800f52a <tcp_receive+0x6c2>
 800f528:	2300      	movs	r3, #0
 800f52a:	4423      	add	r3, r4
 800f52c:	b29a      	uxth	r2, r3
 800f52e:	4b71      	ldr	r3, [pc, #452]	; (800f6f4 <tcp_receive+0x88c>)
 800f530:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f536:	4b6f      	ldr	r3, [pc, #444]	; (800f6f4 <tcp_receive+0x88c>)
 800f538:	881b      	ldrh	r3, [r3, #0]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d275      	bcs.n	800f62a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f53e:	4b6c      	ldr	r3, [pc, #432]	; (800f6f0 <tcp_receive+0x888>)
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	899b      	ldrh	r3, [r3, #12]
 800f544:	b29b      	uxth	r3, r3
 800f546:	4618      	mov	r0, r3
 800f548:	f7fa fc98 	bl	8009e7c <lwip_htons>
 800f54c:	4603      	mov	r3, r0
 800f54e:	b2db      	uxtb	r3, r3
 800f550:	f003 0301 	and.w	r3, r3, #1
 800f554:	2b00      	cmp	r3, #0
 800f556:	d01f      	beq.n	800f598 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f558:	4b65      	ldr	r3, [pc, #404]	; (800f6f0 <tcp_receive+0x888>)
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	899b      	ldrh	r3, [r3, #12]
 800f55e:	b29b      	uxth	r3, r3
 800f560:	b21b      	sxth	r3, r3
 800f562:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f566:	b21c      	sxth	r4, r3
 800f568:	4b61      	ldr	r3, [pc, #388]	; (800f6f0 <tcp_receive+0x888>)
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	899b      	ldrh	r3, [r3, #12]
 800f56e:	b29b      	uxth	r3, r3
 800f570:	4618      	mov	r0, r3
 800f572:	f7fa fc83 	bl	8009e7c <lwip_htons>
 800f576:	4603      	mov	r3, r0
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f580:	b29b      	uxth	r3, r3
 800f582:	4618      	mov	r0, r3
 800f584:	f7fa fc7a 	bl	8009e7c <lwip_htons>
 800f588:	4603      	mov	r3, r0
 800f58a:	b21b      	sxth	r3, r3
 800f58c:	4323      	orrs	r3, r4
 800f58e:	b21a      	sxth	r2, r3
 800f590:	4b57      	ldr	r3, [pc, #348]	; (800f6f0 <tcp_receive+0x888>)
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	b292      	uxth	r2, r2
 800f596:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f59c:	4b54      	ldr	r3, [pc, #336]	; (800f6f0 <tcp_receive+0x888>)
 800f59e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f5a0:	4b53      	ldr	r3, [pc, #332]	; (800f6f0 <tcp_receive+0x888>)
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	899b      	ldrh	r3, [r3, #12]
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f7fa fc67 	bl	8009e7c <lwip_htons>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	f003 0302 	and.w	r3, r3, #2
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d005      	beq.n	800f5c6 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f5ba:	4b4d      	ldr	r3, [pc, #308]	; (800f6f0 <tcp_receive+0x888>)
 800f5bc:	891b      	ldrh	r3, [r3, #8]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	b29a      	uxth	r2, r3
 800f5c2:	4b4b      	ldr	r3, [pc, #300]	; (800f6f0 <tcp_receive+0x888>)
 800f5c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f5c6:	4b4a      	ldr	r3, [pc, #296]	; (800f6f0 <tcp_receive+0x888>)
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	4a49      	ldr	r2, [pc, #292]	; (800f6f0 <tcp_receive+0x888>)
 800f5cc:	8912      	ldrh	r2, [r2, #8]
 800f5ce:	4611      	mov	r1, r2
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7fb fe67 	bl	800b2a4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f5d6:	4b46      	ldr	r3, [pc, #280]	; (800f6f0 <tcp_receive+0x888>)
 800f5d8:	891c      	ldrh	r4, [r3, #8]
 800f5da:	4b45      	ldr	r3, [pc, #276]	; (800f6f0 <tcp_receive+0x888>)
 800f5dc:	68db      	ldr	r3, [r3, #12]
 800f5de:	899b      	ldrh	r3, [r3, #12]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fa fc4a 	bl	8009e7c <lwip_htons>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	b2db      	uxtb	r3, r3
 800f5ec:	f003 0303 	and.w	r3, r3, #3
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d001      	beq.n	800f5f8 <tcp_receive+0x790>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e000      	b.n	800f5fa <tcp_receive+0x792>
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	4423      	add	r3, r4
 800f5fc:	b29a      	uxth	r2, r3
 800f5fe:	4b3d      	ldr	r3, [pc, #244]	; (800f6f4 <tcp_receive+0x88c>)
 800f600:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f602:	4b3c      	ldr	r3, [pc, #240]	; (800f6f4 <tcp_receive+0x88c>)
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	461a      	mov	r2, r3
 800f608:	4b38      	ldr	r3, [pc, #224]	; (800f6ec <tcp_receive+0x884>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	441a      	add	r2, r3
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f612:	6879      	ldr	r1, [r7, #4]
 800f614:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f616:	440b      	add	r3, r1
 800f618:	429a      	cmp	r2, r3
 800f61a:	d006      	beq.n	800f62a <tcp_receive+0x7c2>
 800f61c:	4b36      	ldr	r3, [pc, #216]	; (800f6f8 <tcp_receive+0x890>)
 800f61e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f622:	4936      	ldr	r1, [pc, #216]	; (800f6fc <tcp_receive+0x894>)
 800f624:	4836      	ldr	r0, [pc, #216]	; (800f700 <tcp_receive+0x898>)
 800f626:	f007 ffbb 	bl	80175a0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f000 80e7 	beq.w	800f802 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f634:	4b2e      	ldr	r3, [pc, #184]	; (800f6f0 <tcp_receive+0x888>)
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	899b      	ldrh	r3, [r3, #12]
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fa fc1d 	bl	8009e7c <lwip_htons>
 800f642:	4603      	mov	r3, r0
 800f644:	b2db      	uxtb	r3, r3
 800f646:	f003 0301 	and.w	r3, r3, #1
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d010      	beq.n	800f670 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f64e:	e00a      	b.n	800f666 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f654:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f7fd fbe6 	bl	800ce32 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1f0      	bne.n	800f650 <tcp_receive+0x7e8>
 800f66e:	e0c8      	b.n	800f802 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f674:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f676:	e052      	b.n	800f71e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	899b      	ldrh	r3, [r3, #12]
 800f67e:	b29b      	uxth	r3, r3
 800f680:	4618      	mov	r0, r3
 800f682:	f7fa fbfb 	bl	8009e7c <lwip_htons>
 800f686:	4603      	mov	r3, r0
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	f003 0301 	and.w	r3, r3, #1
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d03d      	beq.n	800f70e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f692:	4b17      	ldr	r3, [pc, #92]	; (800f6f0 <tcp_receive+0x888>)
 800f694:	68db      	ldr	r3, [r3, #12]
 800f696:	899b      	ldrh	r3, [r3, #12]
 800f698:	b29b      	uxth	r3, r3
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fa fbee 	bl	8009e7c <lwip_htons>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	b2db      	uxtb	r3, r3
 800f6a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d130      	bne.n	800f70e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f6ac:	4b10      	ldr	r3, [pc, #64]	; (800f6f0 <tcp_receive+0x888>)
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	899b      	ldrh	r3, [r3, #12]
 800f6b2:	b29c      	uxth	r4, r3
 800f6b4:	2001      	movs	r0, #1
 800f6b6:	f7fa fbe1 	bl	8009e7c <lwip_htons>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	461a      	mov	r2, r3
 800f6be:	4b0c      	ldr	r3, [pc, #48]	; (800f6f0 <tcp_receive+0x888>)
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	4322      	orrs	r2, r4
 800f6c4:	b292      	uxth	r2, r2
 800f6c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f6c8:	4b09      	ldr	r3, [pc, #36]	; (800f6f0 <tcp_receive+0x888>)
 800f6ca:	891c      	ldrh	r4, [r3, #8]
 800f6cc:	4b08      	ldr	r3, [pc, #32]	; (800f6f0 <tcp_receive+0x888>)
 800f6ce:	68db      	ldr	r3, [r3, #12]
 800f6d0:	899b      	ldrh	r3, [r3, #12]
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7fa fbd1 	bl	8009e7c <lwip_htons>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	b2db      	uxtb	r3, r3
 800f6de:	f003 0303 	and.w	r3, r3, #3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d00e      	beq.n	800f704 <tcp_receive+0x89c>
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e00d      	b.n	800f706 <tcp_receive+0x89e>
 800f6ea:	bf00      	nop
 800f6ec:	20001234 	.word	0x20001234
 800f6f0:	20001214 	.word	0x20001214
 800f6f4:	2000123e 	.word	0x2000123e
 800f6f8:	0801dd5c 	.word	0x0801dd5c
 800f6fc:	0801e120 	.word	0x0801e120
 800f700:	0801dda8 	.word	0x0801dda8
 800f704:	2300      	movs	r3, #0
 800f706:	4423      	add	r3, r4
 800f708:	b29a      	uxth	r2, r3
 800f70a:	4b98      	ldr	r3, [pc, #608]	; (800f96c <tcp_receive+0xb04>)
 800f70c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f710:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f718:	6938      	ldr	r0, [r7, #16]
 800f71a:	f7fd fb8a 	bl	800ce32 <tcp_seg_free>
            while (next &&
 800f71e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f720:	2b00      	cmp	r3, #0
 800f722:	d00e      	beq.n	800f742 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f724:	4b91      	ldr	r3, [pc, #580]	; (800f96c <tcp_receive+0xb04>)
 800f726:	881b      	ldrh	r3, [r3, #0]
 800f728:	461a      	mov	r2, r3
 800f72a:	4b91      	ldr	r3, [pc, #580]	; (800f970 <tcp_receive+0xb08>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	441a      	add	r2, r3
 800f730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f732:	68db      	ldr	r3, [r3, #12]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f738:	8909      	ldrh	r1, [r1, #8]
 800f73a:	440b      	add	r3, r1
 800f73c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f73e:	2b00      	cmp	r3, #0
 800f740:	da9a      	bge.n	800f678 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f744:	2b00      	cmp	r3, #0
 800f746:	d059      	beq.n	800f7fc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f748:	4b88      	ldr	r3, [pc, #544]	; (800f96c <tcp_receive+0xb04>)
 800f74a:	881b      	ldrh	r3, [r3, #0]
 800f74c:	461a      	mov	r2, r3
 800f74e:	4b88      	ldr	r3, [pc, #544]	; (800f970 <tcp_receive+0xb08>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	441a      	add	r2, r3
 800f754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	dd4d      	ble.n	800f7fc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	b29a      	uxth	r2, r3
 800f768:	4b81      	ldr	r3, [pc, #516]	; (800f970 <tcp_receive+0xb08>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	1ad3      	subs	r3, r2, r3
 800f770:	b29a      	uxth	r2, r3
 800f772:	4b80      	ldr	r3, [pc, #512]	; (800f974 <tcp_receive+0xb0c>)
 800f774:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f776:	4b7f      	ldr	r3, [pc, #508]	; (800f974 <tcp_receive+0xb0c>)
 800f778:	68db      	ldr	r3, [r3, #12]
 800f77a:	899b      	ldrh	r3, [r3, #12]
 800f77c:	b29b      	uxth	r3, r3
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fa fb7c 	bl	8009e7c <lwip_htons>
 800f784:	4603      	mov	r3, r0
 800f786:	b2db      	uxtb	r3, r3
 800f788:	f003 0302 	and.w	r3, r3, #2
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d005      	beq.n	800f79c <tcp_receive+0x934>
                inseg.len -= 1;
 800f790:	4b78      	ldr	r3, [pc, #480]	; (800f974 <tcp_receive+0xb0c>)
 800f792:	891b      	ldrh	r3, [r3, #8]
 800f794:	3b01      	subs	r3, #1
 800f796:	b29a      	uxth	r2, r3
 800f798:	4b76      	ldr	r3, [pc, #472]	; (800f974 <tcp_receive+0xb0c>)
 800f79a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f79c:	4b75      	ldr	r3, [pc, #468]	; (800f974 <tcp_receive+0xb0c>)
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	4a74      	ldr	r2, [pc, #464]	; (800f974 <tcp_receive+0xb0c>)
 800f7a2:	8912      	ldrh	r2, [r2, #8]
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fb fd7c 	bl	800b2a4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f7ac:	4b71      	ldr	r3, [pc, #452]	; (800f974 <tcp_receive+0xb0c>)
 800f7ae:	891c      	ldrh	r4, [r3, #8]
 800f7b0:	4b70      	ldr	r3, [pc, #448]	; (800f974 <tcp_receive+0xb0c>)
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	899b      	ldrh	r3, [r3, #12]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fa fb5f 	bl	8009e7c <lwip_htons>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	f003 0303 	and.w	r3, r3, #3
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d001      	beq.n	800f7ce <tcp_receive+0x966>
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	e000      	b.n	800f7d0 <tcp_receive+0x968>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	4423      	add	r3, r4
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	4b65      	ldr	r3, [pc, #404]	; (800f96c <tcp_receive+0xb04>)
 800f7d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f7d8:	4b64      	ldr	r3, [pc, #400]	; (800f96c <tcp_receive+0xb04>)
 800f7da:	881b      	ldrh	r3, [r3, #0]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4b64      	ldr	r3, [pc, #400]	; (800f970 <tcp_receive+0xb08>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	441a      	add	r2, r3
 800f7e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d006      	beq.n	800f7fc <tcp_receive+0x994>
 800f7ee:	4b62      	ldr	r3, [pc, #392]	; (800f978 <tcp_receive+0xb10>)
 800f7f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f7f4:	4961      	ldr	r1, [pc, #388]	; (800f97c <tcp_receive+0xb14>)
 800f7f6:	4862      	ldr	r0, [pc, #392]	; (800f980 <tcp_receive+0xb18>)
 800f7f8:	f007 fed2 	bl	80175a0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f800:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f802:	4b5a      	ldr	r3, [pc, #360]	; (800f96c <tcp_receive+0xb04>)
 800f804:	881b      	ldrh	r3, [r3, #0]
 800f806:	461a      	mov	r2, r3
 800f808:	4b59      	ldr	r3, [pc, #356]	; (800f970 <tcp_receive+0xb08>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	441a      	add	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f816:	4b55      	ldr	r3, [pc, #340]	; (800f96c <tcp_receive+0xb04>)
 800f818:	881b      	ldrh	r3, [r3, #0]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d206      	bcs.n	800f82c <tcp_receive+0x9c4>
 800f81e:	4b56      	ldr	r3, [pc, #344]	; (800f978 <tcp_receive+0xb10>)
 800f820:	f240 6207 	movw	r2, #1543	; 0x607
 800f824:	4957      	ldr	r1, [pc, #348]	; (800f984 <tcp_receive+0xb1c>)
 800f826:	4856      	ldr	r0, [pc, #344]	; (800f980 <tcp_receive+0xb18>)
 800f828:	f007 feba 	bl	80175a0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f830:	4b4e      	ldr	r3, [pc, #312]	; (800f96c <tcp_receive+0xb04>)
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	1ad3      	subs	r3, r2, r3
 800f836:	b29a      	uxth	r2, r3
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7fc fdd3 	bl	800c3e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f842:	4b4c      	ldr	r3, [pc, #304]	; (800f974 <tcp_receive+0xb0c>)
 800f844:	685b      	ldr	r3, [r3, #4]
 800f846:	891b      	ldrh	r3, [r3, #8]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d006      	beq.n	800f85a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f84c:	4b49      	ldr	r3, [pc, #292]	; (800f974 <tcp_receive+0xb0c>)
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	4a4d      	ldr	r2, [pc, #308]	; (800f988 <tcp_receive+0xb20>)
 800f852:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f854:	4b47      	ldr	r3, [pc, #284]	; (800f974 <tcp_receive+0xb0c>)
 800f856:	2200      	movs	r2, #0
 800f858:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f85a:	4b46      	ldr	r3, [pc, #280]	; (800f974 <tcp_receive+0xb0c>)
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	899b      	ldrh	r3, [r3, #12]
 800f860:	b29b      	uxth	r3, r3
 800f862:	4618      	mov	r0, r3
 800f864:	f7fa fb0a 	bl	8009e7c <lwip_htons>
 800f868:	4603      	mov	r3, r0
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	f003 0301 	and.w	r3, r3, #1
 800f870:	2b00      	cmp	r3, #0
 800f872:	f000 80b8 	beq.w	800f9e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f876:	4b45      	ldr	r3, [pc, #276]	; (800f98c <tcp_receive+0xb24>)
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	f043 0320 	orr.w	r3, r3, #32
 800f87e:	b2da      	uxtb	r2, r3
 800f880:	4b42      	ldr	r3, [pc, #264]	; (800f98c <tcp_receive+0xb24>)
 800f882:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f884:	e0af      	b.n	800f9e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f88a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	4a36      	ldr	r2, [pc, #216]	; (800f970 <tcp_receive+0xb08>)
 800f896:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	891b      	ldrh	r3, [r3, #8]
 800f89c:	461c      	mov	r4, r3
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	68db      	ldr	r3, [r3, #12]
 800f8a2:	899b      	ldrh	r3, [r3, #12]
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7fa fae8 	bl	8009e7c <lwip_htons>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	f003 0303 	and.w	r3, r3, #3
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d001      	beq.n	800f8bc <tcp_receive+0xa54>
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e000      	b.n	800f8be <tcp_receive+0xa56>
 800f8bc:	2300      	movs	r3, #0
 800f8be:	191a      	adds	r2, r3, r4
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c4:	441a      	add	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8ce:	461c      	mov	r4, r3
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	891b      	ldrh	r3, [r3, #8]
 800f8d4:	461d      	mov	r5, r3
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	899b      	ldrh	r3, [r3, #12]
 800f8dc:	b29b      	uxth	r3, r3
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7fa facc 	bl	8009e7c <lwip_htons>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	b2db      	uxtb	r3, r3
 800f8e8:	f003 0303 	and.w	r3, r3, #3
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d001      	beq.n	800f8f4 <tcp_receive+0xa8c>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	e000      	b.n	800f8f6 <tcp_receive+0xa8e>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	442b      	add	r3, r5
 800f8f8:	429c      	cmp	r4, r3
 800f8fa:	d206      	bcs.n	800f90a <tcp_receive+0xaa2>
 800f8fc:	4b1e      	ldr	r3, [pc, #120]	; (800f978 <tcp_receive+0xb10>)
 800f8fe:	f240 622b 	movw	r2, #1579	; 0x62b
 800f902:	4923      	ldr	r1, [pc, #140]	; (800f990 <tcp_receive+0xb28>)
 800f904:	481e      	ldr	r0, [pc, #120]	; (800f980 <tcp_receive+0xb18>)
 800f906:	f007 fe4b 	bl	80175a0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	891b      	ldrh	r3, [r3, #8]
 800f90e:	461c      	mov	r4, r3
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	899b      	ldrh	r3, [r3, #12]
 800f916:	b29b      	uxth	r3, r3
 800f918:	4618      	mov	r0, r3
 800f91a:	f7fa faaf 	bl	8009e7c <lwip_htons>
 800f91e:	4603      	mov	r3, r0
 800f920:	b2db      	uxtb	r3, r3
 800f922:	f003 0303 	and.w	r3, r3, #3
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <tcp_receive+0xac6>
 800f92a:	2301      	movs	r3, #1
 800f92c:	e000      	b.n	800f930 <tcp_receive+0xac8>
 800f92e:	2300      	movs	r3, #0
 800f930:	1919      	adds	r1, r3, r4
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f936:	b28b      	uxth	r3, r1
 800f938:	1ad3      	subs	r3, r2, r3
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7fc fd51 	bl	800c3e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	891b      	ldrh	r3, [r3, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d028      	beq.n	800f9a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f950:	4b0d      	ldr	r3, [pc, #52]	; (800f988 <tcp_receive+0xb20>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d01d      	beq.n	800f994 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f958:	4b0b      	ldr	r3, [pc, #44]	; (800f988 <tcp_receive+0xb20>)
 800f95a:	681a      	ldr	r2, [r3, #0]
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	4619      	mov	r1, r3
 800f962:	4610      	mov	r0, r2
 800f964:	f7fb fee6 	bl	800b734 <pbuf_cat>
 800f968:	e018      	b.n	800f99c <tcp_receive+0xb34>
 800f96a:	bf00      	nop
 800f96c:	2000123e 	.word	0x2000123e
 800f970:	20001234 	.word	0x20001234
 800f974:	20001214 	.word	0x20001214
 800f978:	0801dd5c 	.word	0x0801dd5c
 800f97c:	0801e158 	.word	0x0801e158
 800f980:	0801dda8 	.word	0x0801dda8
 800f984:	0801e194 	.word	0x0801e194
 800f988:	20001244 	.word	0x20001244
 800f98c:	20001241 	.word	0x20001241
 800f990:	0801e1b4 	.word	0x0801e1b4
            } else {
              recv_data = cseg->p;
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	4a70      	ldr	r2, [pc, #448]	; (800fb5c <tcp_receive+0xcf4>)
 800f99a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	899b      	ldrh	r3, [r3, #12]
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7fa fa66 	bl	8009e7c <lwip_htons>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	b2db      	uxtb	r3, r3
 800f9b4:	f003 0301 	and.w	r3, r3, #1
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d00d      	beq.n	800f9d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f9bc:	4b68      	ldr	r3, [pc, #416]	; (800fb60 <tcp_receive+0xcf8>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	f043 0320 	orr.w	r3, r3, #32
 800f9c4:	b2da      	uxtb	r2, r3
 800f9c6:	4b66      	ldr	r3, [pc, #408]	; (800fb60 <tcp_receive+0xcf8>)
 800f9c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	7d1b      	ldrb	r3, [r3, #20]
 800f9ce:	2b04      	cmp	r3, #4
 800f9d0:	d102      	bne.n	800f9d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2207      	movs	r2, #7
 800f9d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	681a      	ldr	r2, [r3, #0]
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f9e0:	68b8      	ldr	r0, [r7, #8]
 800f9e2:	f7fd fa26 	bl	800ce32 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d008      	beq.n	800fa00 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	685a      	ldr	r2, [r3, #4]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	f43f af43 	beq.w	800f886 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	8b5b      	ldrh	r3, [r3, #26]
 800fa04:	f003 0301 	and.w	r3, r3, #1
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d00e      	beq.n	800fa2a <tcp_receive+0xbc2>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	8b5b      	ldrh	r3, [r3, #26]
 800fa10:	f023 0301 	bic.w	r3, r3, #1
 800fa14:	b29a      	uxth	r2, r3
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	835a      	strh	r2, [r3, #26]
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	8b5b      	ldrh	r3, [r3, #26]
 800fa1e:	f043 0302 	orr.w	r3, r3, #2
 800fa22:	b29a      	uxth	r2, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fa28:	e188      	b.n	800fd3c <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	8b5b      	ldrh	r3, [r3, #26]
 800fa2e:	f043 0301 	orr.w	r3, r3, #1
 800fa32:	b29a      	uxth	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fa38:	e180      	b.n	800fd3c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d106      	bne.n	800fa50 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fa42:	4848      	ldr	r0, [pc, #288]	; (800fb64 <tcp_receive+0xcfc>)
 800fa44:	f7fd fa2e 	bl	800cea4 <tcp_seg_copy>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	675a      	str	r2, [r3, #116]	; 0x74
 800fa4e:	e16d      	b.n	800fd2c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fa50:	2300      	movs	r3, #0
 800fa52:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa58:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa5a:	e157      	b.n	800fd0c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	685a      	ldr	r2, [r3, #4]
 800fa62:	4b41      	ldr	r3, [pc, #260]	; (800fb68 <tcp_receive+0xd00>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d11d      	bne.n	800faa6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fa6a:	4b3e      	ldr	r3, [pc, #248]	; (800fb64 <tcp_receive+0xcfc>)
 800fa6c:	891a      	ldrh	r2, [r3, #8]
 800fa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa70:	891b      	ldrh	r3, [r3, #8]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	f240 814f 	bls.w	800fd16 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fa78:	483a      	ldr	r0, [pc, #232]	; (800fb64 <tcp_receive+0xcfc>)
 800fa7a:	f7fd fa13 	bl	800cea4 <tcp_seg_copy>
 800fa7e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f000 8149 	beq.w	800fd1a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fa88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fa8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa90:	697a      	ldr	r2, [r7, #20]
 800fa92:	601a      	str	r2, [r3, #0]
 800fa94:	e002      	b.n	800fa9c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	697a      	ldr	r2, [r7, #20]
 800fa9a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fa9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa9e:	6978      	ldr	r0, [r7, #20]
 800faa0:	f7ff f8de 	bl	800ec60 <tcp_oos_insert_segment>
                }
                break;
 800faa4:	e139      	b.n	800fd1a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800faa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d117      	bne.n	800fadc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800faac:	4b2e      	ldr	r3, [pc, #184]	; (800fb68 <tcp_receive+0xd00>)
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	1ad3      	subs	r3, r2, r3
 800fab8:	2b00      	cmp	r3, #0
 800faba:	da57      	bge.n	800fb6c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fabc:	4829      	ldr	r0, [pc, #164]	; (800fb64 <tcp_receive+0xcfc>)
 800fabe:	f7fd f9f1 	bl	800cea4 <tcp_seg_copy>
 800fac2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f000 8129 	beq.w	800fd1e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	69ba      	ldr	r2, [r7, #24]
 800fad0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fad4:	69b8      	ldr	r0, [r7, #24]
 800fad6:	f7ff f8c3 	bl	800ec60 <tcp_oos_insert_segment>
                  }
                  break;
 800fada:	e120      	b.n	800fd1e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fadc:	4b22      	ldr	r3, [pc, #136]	; (800fb68 <tcp_receive+0xd00>)
 800fade:	681a      	ldr	r2, [r3, #0]
 800fae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	1ad3      	subs	r3, r2, r3
 800fae8:	3b01      	subs	r3, #1
 800faea:	2b00      	cmp	r3, #0
 800faec:	db3e      	blt.n	800fb6c <tcp_receive+0xd04>
 800faee:	4b1e      	ldr	r3, [pc, #120]	; (800fb68 <tcp_receive+0xd00>)
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf4:	68db      	ldr	r3, [r3, #12]
 800faf6:	685b      	ldr	r3, [r3, #4]
 800faf8:	1ad3      	subs	r3, r2, r3
 800fafa:	3301      	adds	r3, #1
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	dc35      	bgt.n	800fb6c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb00:	4818      	ldr	r0, [pc, #96]	; (800fb64 <tcp_receive+0xcfc>)
 800fb02:	f7fd f9cf 	bl	800cea4 <tcp_seg_copy>
 800fb06:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	f000 8109 	beq.w	800fd22 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb12:	68db      	ldr	r3, [r3, #12]
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb18:	8912      	ldrh	r2, [r2, #8]
 800fb1a:	441a      	add	r2, r3
 800fb1c:	4b12      	ldr	r3, [pc, #72]	; (800fb68 <tcp_receive+0xd00>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	dd12      	ble.n	800fb4c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fb26:	4b10      	ldr	r3, [pc, #64]	; (800fb68 <tcp_receive+0xd00>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	b29a      	uxth	r2, r3
 800fb2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb2e:	68db      	ldr	r3, [r3, #12]
 800fb30:	685b      	ldr	r3, [r3, #4]
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	b29a      	uxth	r2, r3
 800fb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3e:	685a      	ldr	r2, [r3, #4]
 800fb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb42:	891b      	ldrh	r3, [r3, #8]
 800fb44:	4619      	mov	r1, r3
 800fb46:	4610      	mov	r0, r2
 800fb48:	f7fb fbac 	bl	800b2a4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4e:	69fa      	ldr	r2, [r7, #28]
 800fb50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fb52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb54:	69f8      	ldr	r0, [r7, #28]
 800fb56:	f7ff f883 	bl	800ec60 <tcp_oos_insert_segment>
                  }
                  break;
 800fb5a:	e0e2      	b.n	800fd22 <tcp_receive+0xeba>
 800fb5c:	20001244 	.word	0x20001244
 800fb60:	20001241 	.word	0x20001241
 800fb64:	20001214 	.word	0x20001214
 800fb68:	20001234 	.word	0x20001234
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f040 80c6 	bne.w	800fd06 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fb7a:	4b80      	ldr	r3, [pc, #512]	; (800fd7c <tcp_receive+0xf14>)
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	f340 80bd 	ble.w	800fd06 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	899b      	ldrh	r3, [r3, #12]
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fa f971 	bl	8009e7c <lwip_htons>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	b2db      	uxtb	r3, r3
 800fb9e:	f003 0301 	and.w	r3, r3, #1
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f040 80bf 	bne.w	800fd26 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fba8:	4875      	ldr	r0, [pc, #468]	; (800fd80 <tcp_receive+0xf18>)
 800fbaa:	f7fd f97b 	bl	800cea4 <tcp_seg_copy>
 800fbae:	4602      	mov	r2, r0
 800fbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	f000 80b6 	beq.w	800fd2a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbc6:	8912      	ldrh	r2, [r2, #8]
 800fbc8:	441a      	add	r2, r3
 800fbca:	4b6c      	ldr	r3, [pc, #432]	; (800fd7c <tcp_receive+0xf14>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	1ad3      	subs	r3, r2, r3
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	dd12      	ble.n	800fbfa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fbd4:	4b69      	ldr	r3, [pc, #420]	; (800fd7c <tcp_receive+0xf14>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fbea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbec:	685a      	ldr	r2, [r3, #4]
 800fbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf0:	891b      	ldrh	r3, [r3, #8]
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	f7fb fb55 	bl	800b2a4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fbfa:	4b62      	ldr	r3, [pc, #392]	; (800fd84 <tcp_receive+0xf1c>)
 800fbfc:	881b      	ldrh	r3, [r3, #0]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	4b5e      	ldr	r3, [pc, #376]	; (800fd7c <tcp_receive+0xf14>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	441a      	add	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc0a:	6879      	ldr	r1, [r7, #4]
 800fc0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc0e:	440b      	add	r3, r1
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	f340 8089 	ble.w	800fd2a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	899b      	ldrh	r3, [r3, #12]
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fa f92a 	bl	8009e7c <lwip_htons>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	f003 0301 	and.w	r3, r3, #1
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d022      	beq.n	800fc7a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	899b      	ldrh	r3, [r3, #12]
 800fc3c:	b29b      	uxth	r3, r3
 800fc3e:	b21b      	sxth	r3, r3
 800fc40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fc44:	b21c      	sxth	r4, r3
 800fc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	899b      	ldrh	r3, [r3, #12]
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	4618      	mov	r0, r3
 800fc52:	f7fa f913 	bl	8009e7c <lwip_htons>
 800fc56:	4603      	mov	r3, r0
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fa f90a 	bl	8009e7c <lwip_htons>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	b21b      	sxth	r3, r3
 800fc6c:	4323      	orrs	r3, r4
 800fc6e:	b21a      	sxth	r2, r3
 800fc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	b292      	uxth	r2, r2
 800fc78:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc84:	4413      	add	r3, r2
 800fc86:	b299      	uxth	r1, r3
 800fc88:	4b3c      	ldr	r3, [pc, #240]	; (800fd7c <tcp_receive+0xf14>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	b29a      	uxth	r2, r3
 800fc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	1a8a      	subs	r2, r1, r2
 800fc94:	b292      	uxth	r2, r2
 800fc96:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	685a      	ldr	r2, [r3, #4]
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	891b      	ldrh	r3, [r3, #8]
 800fca4:	4619      	mov	r1, r3
 800fca6:	4610      	mov	r0, r2
 800fca8:	f7fb fafc 	bl	800b2a4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	891c      	ldrh	r4, [r3, #8]
 800fcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	68db      	ldr	r3, [r3, #12]
 800fcb8:	899b      	ldrh	r3, [r3, #12]
 800fcba:	b29b      	uxth	r3, r3
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fa f8dd 	bl	8009e7c <lwip_htons>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	f003 0303 	and.w	r3, r3, #3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d001      	beq.n	800fcd2 <tcp_receive+0xe6a>
 800fcce:	2301      	movs	r3, #1
 800fcd0:	e000      	b.n	800fcd4 <tcp_receive+0xe6c>
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	4423      	add	r3, r4
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	4b2a      	ldr	r3, [pc, #168]	; (800fd84 <tcp_receive+0xf1c>)
 800fcda:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fcdc:	4b29      	ldr	r3, [pc, #164]	; (800fd84 <tcp_receive+0xf1c>)
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	461a      	mov	r2, r3
 800fce2:	4b26      	ldr	r3, [pc, #152]	; (800fd7c <tcp_receive+0xf14>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	441a      	add	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcec:	6879      	ldr	r1, [r7, #4]
 800fcee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcf0:	440b      	add	r3, r1
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d019      	beq.n	800fd2a <tcp_receive+0xec2>
 800fcf6:	4b24      	ldr	r3, [pc, #144]	; (800fd88 <tcp_receive+0xf20>)
 800fcf8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fcfc:	4923      	ldr	r1, [pc, #140]	; (800fd8c <tcp_receive+0xf24>)
 800fcfe:	4824      	ldr	r0, [pc, #144]	; (800fd90 <tcp_receive+0xf28>)
 800fd00:	f007 fc4e 	bl	80175a0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fd04:	e011      	b.n	800fd2a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	f47f aea4 	bne.w	800fa5c <tcp_receive+0xbf4>
 800fd14:	e00a      	b.n	800fd2c <tcp_receive+0xec4>
                break;
 800fd16:	bf00      	nop
 800fd18:	e008      	b.n	800fd2c <tcp_receive+0xec4>
                break;
 800fd1a:	bf00      	nop
 800fd1c:	e006      	b.n	800fd2c <tcp_receive+0xec4>
                  break;
 800fd1e:	bf00      	nop
 800fd20:	e004      	b.n	800fd2c <tcp_receive+0xec4>
                  break;
 800fd22:	bf00      	nop
 800fd24:	e002      	b.n	800fd2c <tcp_receive+0xec4>
                  break;
 800fd26:	bf00      	nop
 800fd28:	e000      	b.n	800fd2c <tcp_receive+0xec4>
                break;
 800fd2a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f001 fe91 	bl	8011a54 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fd32:	e003      	b.n	800fd3c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f001 fe8d 	bl	8011a54 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fd3a:	e01a      	b.n	800fd72 <tcp_receive+0xf0a>
 800fd3c:	e019      	b.n	800fd72 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fd3e:	4b0f      	ldr	r3, [pc, #60]	; (800fd7c <tcp_receive+0xf14>)
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	db0a      	blt.n	800fd62 <tcp_receive+0xefa>
 800fd4c:	4b0b      	ldr	r3, [pc, #44]	; (800fd7c <tcp_receive+0xf14>)
 800fd4e:	681a      	ldr	r2, [r3, #0]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd54:	6879      	ldr	r1, [r7, #4]
 800fd56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd58:	440b      	add	r3, r1
 800fd5a:	1ad3      	subs	r3, r2, r3
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	dd07      	ble.n	800fd72 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	8b5b      	ldrh	r3, [r3, #26]
 800fd66:	f043 0302 	orr.w	r3, r3, #2
 800fd6a:	b29a      	uxth	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fd70:	e7ff      	b.n	800fd72 <tcp_receive+0xf0a>
 800fd72:	bf00      	nop
 800fd74:	3750      	adds	r7, #80	; 0x50
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bdb0      	pop	{r4, r5, r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	20001234 	.word	0x20001234
 800fd80:	20001214 	.word	0x20001214
 800fd84:	2000123e 	.word	0x2000123e
 800fd88:	0801dd5c 	.word	0x0801dd5c
 800fd8c:	0801e120 	.word	0x0801e120
 800fd90:	0801dda8 	.word	0x0801dda8

0800fd94 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fd9a:	4b15      	ldr	r3, [pc, #84]	; (800fdf0 <tcp_get_next_optbyte+0x5c>)
 800fd9c:	881b      	ldrh	r3, [r3, #0]
 800fd9e:	1c5a      	adds	r2, r3, #1
 800fda0:	b291      	uxth	r1, r2
 800fda2:	4a13      	ldr	r2, [pc, #76]	; (800fdf0 <tcp_get_next_optbyte+0x5c>)
 800fda4:	8011      	strh	r1, [r2, #0]
 800fda6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fda8:	4b12      	ldr	r3, [pc, #72]	; (800fdf4 <tcp_get_next_optbyte+0x60>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d004      	beq.n	800fdba <tcp_get_next_optbyte+0x26>
 800fdb0:	4b11      	ldr	r3, [pc, #68]	; (800fdf8 <tcp_get_next_optbyte+0x64>)
 800fdb2:	881b      	ldrh	r3, [r3, #0]
 800fdb4:	88fa      	ldrh	r2, [r7, #6]
 800fdb6:	429a      	cmp	r2, r3
 800fdb8:	d208      	bcs.n	800fdcc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fdba:	4b10      	ldr	r3, [pc, #64]	; (800fdfc <tcp_get_next_optbyte+0x68>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	3314      	adds	r3, #20
 800fdc0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fdc2:	88fb      	ldrh	r3, [r7, #6]
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	4413      	add	r3, r2
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	e00b      	b.n	800fde4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fdcc:	88fb      	ldrh	r3, [r7, #6]
 800fdce:	b2da      	uxtb	r2, r3
 800fdd0:	4b09      	ldr	r3, [pc, #36]	; (800fdf8 <tcp_get_next_optbyte+0x64>)
 800fdd2:	881b      	ldrh	r3, [r3, #0]
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	1ad3      	subs	r3, r2, r3
 800fdd8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fdda:	4b06      	ldr	r3, [pc, #24]	; (800fdf4 <tcp_get_next_optbyte+0x60>)
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	797b      	ldrb	r3, [r7, #5]
 800fde0:	4413      	add	r3, r2
 800fde2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	370c      	adds	r7, #12
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr
 800fdf0:	20001230 	.word	0x20001230
 800fdf4:	2000122c 	.word	0x2000122c
 800fdf8:	2000122a 	.word	0x2000122a
 800fdfc:	20001224 	.word	0x20001224

0800fe00 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d106      	bne.n	800fe1c <tcp_parseopt+0x1c>
 800fe0e:	4b32      	ldr	r3, [pc, #200]	; (800fed8 <tcp_parseopt+0xd8>)
 800fe10:	f240 727d 	movw	r2, #1917	; 0x77d
 800fe14:	4931      	ldr	r1, [pc, #196]	; (800fedc <tcp_parseopt+0xdc>)
 800fe16:	4832      	ldr	r0, [pc, #200]	; (800fee0 <tcp_parseopt+0xe0>)
 800fe18:	f007 fbc2 	bl	80175a0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fe1c:	4b31      	ldr	r3, [pc, #196]	; (800fee4 <tcp_parseopt+0xe4>)
 800fe1e:	881b      	ldrh	r3, [r3, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d055      	beq.n	800fed0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fe24:	4b30      	ldr	r3, [pc, #192]	; (800fee8 <tcp_parseopt+0xe8>)
 800fe26:	2200      	movs	r2, #0
 800fe28:	801a      	strh	r2, [r3, #0]
 800fe2a:	e045      	b.n	800feb8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fe2c:	f7ff ffb2 	bl	800fd94 <tcp_get_next_optbyte>
 800fe30:	4603      	mov	r3, r0
 800fe32:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fe34:	7bfb      	ldrb	r3, [r7, #15]
 800fe36:	2b02      	cmp	r3, #2
 800fe38:	d006      	beq.n	800fe48 <tcp_parseopt+0x48>
 800fe3a:	2b02      	cmp	r3, #2
 800fe3c:	dc2b      	bgt.n	800fe96 <tcp_parseopt+0x96>
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d041      	beq.n	800fec6 <tcp_parseopt+0xc6>
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d127      	bne.n	800fe96 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fe46:	e037      	b.n	800feb8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fe48:	f7ff ffa4 	bl	800fd94 <tcp_get_next_optbyte>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b04      	cmp	r3, #4
 800fe50:	d13b      	bne.n	800feca <tcp_parseopt+0xca>
 800fe52:	4b25      	ldr	r3, [pc, #148]	; (800fee8 <tcp_parseopt+0xe8>)
 800fe54:	881b      	ldrh	r3, [r3, #0]
 800fe56:	3301      	adds	r3, #1
 800fe58:	4a22      	ldr	r2, [pc, #136]	; (800fee4 <tcp_parseopt+0xe4>)
 800fe5a:	8812      	ldrh	r2, [r2, #0]
 800fe5c:	4293      	cmp	r3, r2
 800fe5e:	da34      	bge.n	800feca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fe60:	f7ff ff98 	bl	800fd94 <tcp_get_next_optbyte>
 800fe64:	4603      	mov	r3, r0
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	021b      	lsls	r3, r3, #8
 800fe6a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fe6c:	f7ff ff92 	bl	800fd94 <tcp_get_next_optbyte>
 800fe70:	4603      	mov	r3, r0
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	89bb      	ldrh	r3, [r7, #12]
 800fe76:	4313      	orrs	r3, r2
 800fe78:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fe7a:	89bb      	ldrh	r3, [r7, #12]
 800fe7c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fe80:	d804      	bhi.n	800fe8c <tcp_parseopt+0x8c>
 800fe82:	89bb      	ldrh	r3, [r7, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d001      	beq.n	800fe8c <tcp_parseopt+0x8c>
 800fe88:	89ba      	ldrh	r2, [r7, #12]
 800fe8a:	e001      	b.n	800fe90 <tcp_parseopt+0x90>
 800fe8c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fe94:	e010      	b.n	800feb8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fe96:	f7ff ff7d 	bl	800fd94 <tcp_get_next_optbyte>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fe9e:	7afb      	ldrb	r3, [r7, #11]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d914      	bls.n	800fece <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fea4:	7afb      	ldrb	r3, [r7, #11]
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	4b0f      	ldr	r3, [pc, #60]	; (800fee8 <tcp_parseopt+0xe8>)
 800feaa:	881b      	ldrh	r3, [r3, #0]
 800feac:	4413      	add	r3, r2
 800feae:	b29b      	uxth	r3, r3
 800feb0:	3b02      	subs	r3, #2
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	4b0c      	ldr	r3, [pc, #48]	; (800fee8 <tcp_parseopt+0xe8>)
 800feb6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800feb8:	4b0b      	ldr	r3, [pc, #44]	; (800fee8 <tcp_parseopt+0xe8>)
 800feba:	881a      	ldrh	r2, [r3, #0]
 800febc:	4b09      	ldr	r3, [pc, #36]	; (800fee4 <tcp_parseopt+0xe4>)
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d3b3      	bcc.n	800fe2c <tcp_parseopt+0x2c>
 800fec4:	e004      	b.n	800fed0 <tcp_parseopt+0xd0>
          return;
 800fec6:	bf00      	nop
 800fec8:	e002      	b.n	800fed0 <tcp_parseopt+0xd0>
            return;
 800feca:	bf00      	nop
 800fecc:	e000      	b.n	800fed0 <tcp_parseopt+0xd0>
            return;
 800fece:	bf00      	nop
      }
    }
  }
}
 800fed0:	3710      	adds	r7, #16
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	0801dd5c 	.word	0x0801dd5c
 800fedc:	0801e1dc 	.word	0x0801e1dc
 800fee0:	0801dda8 	.word	0x0801dda8
 800fee4:	20001228 	.word	0x20001228
 800fee8:	20001230 	.word	0x20001230

0800feec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800feec:	b480      	push	{r7}
 800feee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fef0:	4b05      	ldr	r3, [pc, #20]	; (800ff08 <tcp_trigger_input_pcb_close+0x1c>)
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	f043 0310 	orr.w	r3, r3, #16
 800fef8:	b2da      	uxtb	r2, r3
 800fefa:	4b03      	ldr	r3, [pc, #12]	; (800ff08 <tcp_trigger_input_pcb_close+0x1c>)
 800fefc:	701a      	strb	r2, [r3, #0]
}
 800fefe:	bf00      	nop
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr
 800ff08:	20001241 	.word	0x20001241

0800ff0c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b084      	sub	sp, #16
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d00a      	beq.n	800ff34 <tcp_route+0x28>
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	7a1b      	ldrb	r3, [r3, #8]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d006      	beq.n	800ff34 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	7a1b      	ldrb	r3, [r3, #8]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fa ffe0 	bl	800aef0 <netif_get_by_index>
 800ff30:	4603      	mov	r3, r0
 800ff32:	e003      	b.n	800ff3c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f005 fc45 	bl	80157c4 <ip4_route>
 800ff3a:	4603      	mov	r3, r0
  }
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}

0800ff44 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ff44:	b590      	push	{r4, r7, lr}
 800ff46:	b087      	sub	sp, #28
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	603b      	str	r3, [r7, #0]
 800ff50:	4613      	mov	r3, r2
 800ff52:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d105      	bne.n	800ff66 <tcp_create_segment+0x22>
 800ff5a:	4b44      	ldr	r3, [pc, #272]	; (801006c <tcp_create_segment+0x128>)
 800ff5c:	22a3      	movs	r2, #163	; 0xa3
 800ff5e:	4944      	ldr	r1, [pc, #272]	; (8010070 <tcp_create_segment+0x12c>)
 800ff60:	4844      	ldr	r0, [pc, #272]	; (8010074 <tcp_create_segment+0x130>)
 800ff62:	f007 fb1d 	bl	80175a0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d105      	bne.n	800ff78 <tcp_create_segment+0x34>
 800ff6c:	4b3f      	ldr	r3, [pc, #252]	; (801006c <tcp_create_segment+0x128>)
 800ff6e:	22a4      	movs	r2, #164	; 0xa4
 800ff70:	4941      	ldr	r1, [pc, #260]	; (8010078 <tcp_create_segment+0x134>)
 800ff72:	4840      	ldr	r0, [pc, #256]	; (8010074 <tcp_create_segment+0x130>)
 800ff74:	f007 fb14 	bl	80175a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ff78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ff7c:	009b      	lsls	r3, r3, #2
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	f003 0304 	and.w	r3, r3, #4
 800ff84:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ff86:	2003      	movs	r0, #3
 800ff88:	f7fa fcac 	bl	800a8e4 <memp_malloc>
 800ff8c:	6138      	str	r0, [r7, #16]
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d104      	bne.n	800ff9e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800ff94:	68b8      	ldr	r0, [r7, #8]
 800ff96:	f7fb fb0b 	bl	800b5b0 <pbuf_free>
    return NULL;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	e061      	b.n	8010062 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ffa4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	68ba      	ldr	r2, [r7, #8]
 800ffb0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	891a      	ldrh	r2, [r3, #8]
 800ffb6:	7dfb      	ldrb	r3, [r7, #23]
 800ffb8:	b29b      	uxth	r3, r3
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d205      	bcs.n	800ffca <tcp_create_segment+0x86>
 800ffbe:	4b2b      	ldr	r3, [pc, #172]	; (801006c <tcp_create_segment+0x128>)
 800ffc0:	22b0      	movs	r2, #176	; 0xb0
 800ffc2:	492e      	ldr	r1, [pc, #184]	; (801007c <tcp_create_segment+0x138>)
 800ffc4:	482b      	ldr	r0, [pc, #172]	; (8010074 <tcp_create_segment+0x130>)
 800ffc6:	f007 faeb 	bl	80175a0 <iprintf>
  seg->len = p->tot_len - optlen;
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	891a      	ldrh	r2, [r3, #8]
 800ffce:	7dfb      	ldrb	r3, [r7, #23]
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	1ad3      	subs	r3, r2, r3
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800ffda:	2114      	movs	r1, #20
 800ffdc:	68b8      	ldr	r0, [r7, #8]
 800ffde:	f7fb fa51 	bl	800b484 <pbuf_add_header>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d004      	beq.n	800fff2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800ffe8:	6938      	ldr	r0, [r7, #16]
 800ffea:	f7fc ff22 	bl	800ce32 <tcp_seg_free>
    return NULL;
 800ffee:	2300      	movs	r3, #0
 800fff0:	e037      	b.n	8010062 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	685a      	ldr	r2, [r3, #4]
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	8ada      	ldrh	r2, [r3, #22]
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	68dc      	ldr	r4, [r3, #12]
 8010004:	4610      	mov	r0, r2
 8010006:	f7f9 ff39 	bl	8009e7c <lwip_htons>
 801000a:	4603      	mov	r3, r0
 801000c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	8b1a      	ldrh	r2, [r3, #24]
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	68dc      	ldr	r4, [r3, #12]
 8010016:	4610      	mov	r0, r2
 8010018:	f7f9 ff30 	bl	8009e7c <lwip_htons>
 801001c:	4603      	mov	r3, r0
 801001e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	68dc      	ldr	r4, [r3, #12]
 8010024:	6838      	ldr	r0, [r7, #0]
 8010026:	f7f9 ff3e 	bl	8009ea6 <lwip_htonl>
 801002a:	4603      	mov	r3, r0
 801002c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801002e:	7dfb      	ldrb	r3, [r7, #23]
 8010030:	089b      	lsrs	r3, r3, #2
 8010032:	b2db      	uxtb	r3, r3
 8010034:	b29b      	uxth	r3, r3
 8010036:	3305      	adds	r3, #5
 8010038:	b29b      	uxth	r3, r3
 801003a:	031b      	lsls	r3, r3, #12
 801003c:	b29a      	uxth	r2, r3
 801003e:	79fb      	ldrb	r3, [r7, #7]
 8010040:	b29b      	uxth	r3, r3
 8010042:	4313      	orrs	r3, r2
 8010044:	b29a      	uxth	r2, r3
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	68dc      	ldr	r4, [r3, #12]
 801004a:	4610      	mov	r0, r2
 801004c:	f7f9 ff16 	bl	8009e7c <lwip_htons>
 8010050:	4603      	mov	r3, r0
 8010052:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010054:	693b      	ldr	r3, [r7, #16]
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	2200      	movs	r2, #0
 801005a:	749a      	strb	r2, [r3, #18]
 801005c:	2200      	movs	r2, #0
 801005e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010060:	693b      	ldr	r3, [r7, #16]
}
 8010062:	4618      	mov	r0, r3
 8010064:	371c      	adds	r7, #28
 8010066:	46bd      	mov	sp, r7
 8010068:	bd90      	pop	{r4, r7, pc}
 801006a:	bf00      	nop
 801006c:	0801e1f8 	.word	0x0801e1f8
 8010070:	0801e22c 	.word	0x0801e22c
 8010074:	0801e24c 	.word	0x0801e24c
 8010078:	0801e274 	.word	0x0801e274
 801007c:	0801e298 	.word	0x0801e298

08010080 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b086      	sub	sp, #24
 8010084:	af00      	add	r7, sp, #0
 8010086:	607b      	str	r3, [r7, #4]
 8010088:	4603      	mov	r3, r0
 801008a:	73fb      	strb	r3, [r7, #15]
 801008c:	460b      	mov	r3, r1
 801008e:	81bb      	strh	r3, [r7, #12]
 8010090:	4613      	mov	r3, r2
 8010092:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010094:	89bb      	ldrh	r3, [r7, #12]
 8010096:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d105      	bne.n	80100aa <tcp_pbuf_prealloc+0x2a>
 801009e:	4b30      	ldr	r3, [pc, #192]	; (8010160 <tcp_pbuf_prealloc+0xe0>)
 80100a0:	22e8      	movs	r2, #232	; 0xe8
 80100a2:	4930      	ldr	r1, [pc, #192]	; (8010164 <tcp_pbuf_prealloc+0xe4>)
 80100a4:	4830      	ldr	r0, [pc, #192]	; (8010168 <tcp_pbuf_prealloc+0xe8>)
 80100a6:	f007 fa7b 	bl	80175a0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80100aa:	6a3b      	ldr	r3, [r7, #32]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d105      	bne.n	80100bc <tcp_pbuf_prealloc+0x3c>
 80100b0:	4b2b      	ldr	r3, [pc, #172]	; (8010160 <tcp_pbuf_prealloc+0xe0>)
 80100b2:	22e9      	movs	r2, #233	; 0xe9
 80100b4:	492d      	ldr	r1, [pc, #180]	; (801016c <tcp_pbuf_prealloc+0xec>)
 80100b6:	482c      	ldr	r0, [pc, #176]	; (8010168 <tcp_pbuf_prealloc+0xe8>)
 80100b8:	f007 fa72 	bl	80175a0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80100bc:	89ba      	ldrh	r2, [r7, #12]
 80100be:	897b      	ldrh	r3, [r7, #10]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d221      	bcs.n	8010108 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80100c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80100c8:	f003 0302 	and.w	r3, r3, #2
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d111      	bne.n	80100f4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80100d0:	6a3b      	ldr	r3, [r7, #32]
 80100d2:	8b5b      	ldrh	r3, [r3, #26]
 80100d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d115      	bne.n	8010108 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80100dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d007      	beq.n	80100f4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80100e4:	6a3b      	ldr	r3, [r7, #32]
 80100e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d103      	bne.n	80100f4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80100ec:	6a3b      	ldr	r3, [r7, #32]
 80100ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d009      	beq.n	8010108 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80100f4:	89bb      	ldrh	r3, [r7, #12]
 80100f6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80100fa:	f023 0203 	bic.w	r2, r3, #3
 80100fe:	897b      	ldrh	r3, [r7, #10]
 8010100:	4293      	cmp	r3, r2
 8010102:	bf28      	it	cs
 8010104:	4613      	movcs	r3, r2
 8010106:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010108:	8af9      	ldrh	r1, [r7, #22]
 801010a:	7bfb      	ldrb	r3, [r7, #15]
 801010c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010110:	4618      	mov	r0, r3
 8010112:	f7fa ff69 	bl	800afe8 <pbuf_alloc>
 8010116:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d101      	bne.n	8010122 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801011e:	2300      	movs	r3, #0
 8010120:	e019      	b.n	8010156 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d006      	beq.n	8010138 <tcp_pbuf_prealloc+0xb8>
 801012a:	4b0d      	ldr	r3, [pc, #52]	; (8010160 <tcp_pbuf_prealloc+0xe0>)
 801012c:	f240 120b 	movw	r2, #267	; 0x10b
 8010130:	490f      	ldr	r1, [pc, #60]	; (8010170 <tcp_pbuf_prealloc+0xf0>)
 8010132:	480d      	ldr	r0, [pc, #52]	; (8010168 <tcp_pbuf_prealloc+0xe8>)
 8010134:	f007 fa34 	bl	80175a0 <iprintf>
  *oversize = p->len - length;
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	895a      	ldrh	r2, [r3, #10]
 801013c:	89bb      	ldrh	r3, [r7, #12]
 801013e:	1ad3      	subs	r3, r2, r3
 8010140:	b29a      	uxth	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	89ba      	ldrh	r2, [r7, #12]
 801014a:	811a      	strh	r2, [r3, #8]
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	891a      	ldrh	r2, [r3, #8]
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	815a      	strh	r2, [r3, #10]
  return p;
 8010154:	693b      	ldr	r3, [r7, #16]
}
 8010156:	4618      	mov	r0, r3
 8010158:	3718      	adds	r7, #24
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
 801015e:	bf00      	nop
 8010160:	0801e1f8 	.word	0x0801e1f8
 8010164:	0801e2b0 	.word	0x0801e2b0
 8010168:	0801e24c 	.word	0x0801e24c
 801016c:	0801e2d4 	.word	0x0801e2d4
 8010170:	0801e2f4 	.word	0x0801e2f4

08010174 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
 801017c:	460b      	mov	r3, r1
 801017e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d106      	bne.n	8010194 <tcp_write_checks+0x20>
 8010186:	4b33      	ldr	r3, [pc, #204]	; (8010254 <tcp_write_checks+0xe0>)
 8010188:	f240 1233 	movw	r2, #307	; 0x133
 801018c:	4932      	ldr	r1, [pc, #200]	; (8010258 <tcp_write_checks+0xe4>)
 801018e:	4833      	ldr	r0, [pc, #204]	; (801025c <tcp_write_checks+0xe8>)
 8010190:	f007 fa06 	bl	80175a0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	7d1b      	ldrb	r3, [r3, #20]
 8010198:	2b04      	cmp	r3, #4
 801019a:	d00e      	beq.n	80101ba <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80101a0:	2b07      	cmp	r3, #7
 80101a2:	d00a      	beq.n	80101ba <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80101a8:	2b02      	cmp	r3, #2
 80101aa:	d006      	beq.n	80101ba <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80101b0:	2b03      	cmp	r3, #3
 80101b2:	d002      	beq.n	80101ba <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80101b4:	f06f 030a 	mvn.w	r3, #10
 80101b8:	e048      	b.n	801024c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80101ba:	887b      	ldrh	r3, [r7, #2]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d101      	bne.n	80101c4 <tcp_write_checks+0x50>
    return ERR_OK;
 80101c0:	2300      	movs	r3, #0
 80101c2:	e043      	b.n	801024c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80101ca:	887a      	ldrh	r2, [r7, #2]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d909      	bls.n	80101e4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	8b5b      	ldrh	r3, [r3, #26]
 80101d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101d8:	b29a      	uxth	r2, r3
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80101de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101e2:	e033      	b.n	801024c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101ea:	2b08      	cmp	r3, #8
 80101ec:	d909      	bls.n	8010202 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	8b5b      	ldrh	r3, [r3, #26]
 80101f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101f6:	b29a      	uxth	r2, r3
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80101fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010200:	e024      	b.n	801024c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00f      	beq.n	801022c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010210:	2b00      	cmp	r3, #0
 8010212:	d11a      	bne.n	801024a <tcp_write_checks+0xd6>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010218:	2b00      	cmp	r3, #0
 801021a:	d116      	bne.n	801024a <tcp_write_checks+0xd6>
 801021c:	4b0d      	ldr	r3, [pc, #52]	; (8010254 <tcp_write_checks+0xe0>)
 801021e:	f240 1255 	movw	r2, #341	; 0x155
 8010222:	490f      	ldr	r1, [pc, #60]	; (8010260 <tcp_write_checks+0xec>)
 8010224:	480d      	ldr	r0, [pc, #52]	; (801025c <tcp_write_checks+0xe8>)
 8010226:	f007 f9bb 	bl	80175a0 <iprintf>
 801022a:	e00e      	b.n	801024a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010230:	2b00      	cmp	r3, #0
 8010232:	d103      	bne.n	801023c <tcp_write_checks+0xc8>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010238:	2b00      	cmp	r3, #0
 801023a:	d006      	beq.n	801024a <tcp_write_checks+0xd6>
 801023c:	4b05      	ldr	r3, [pc, #20]	; (8010254 <tcp_write_checks+0xe0>)
 801023e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010242:	4908      	ldr	r1, [pc, #32]	; (8010264 <tcp_write_checks+0xf0>)
 8010244:	4805      	ldr	r0, [pc, #20]	; (801025c <tcp_write_checks+0xe8>)
 8010246:	f007 f9ab 	bl	80175a0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801024a:	2300      	movs	r3, #0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}
 8010254:	0801e1f8 	.word	0x0801e1f8
 8010258:	0801e308 	.word	0x0801e308
 801025c:	0801e24c 	.word	0x0801e24c
 8010260:	0801e328 	.word	0x0801e328
 8010264:	0801e364 	.word	0x0801e364

08010268 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010268:	b590      	push	{r4, r7, lr}
 801026a:	b09b      	sub	sp, #108	; 0x6c
 801026c:	af04      	add	r7, sp, #16
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	60b9      	str	r1, [r7, #8]
 8010272:	4611      	mov	r1, r2
 8010274:	461a      	mov	r2, r3
 8010276:	460b      	mov	r3, r1
 8010278:	80fb      	strh	r3, [r7, #6]
 801027a:	4613      	mov	r3, r2
 801027c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801027e:	2300      	movs	r3, #0
 8010280:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010282:	2300      	movs	r3, #0
 8010284:	653b      	str	r3, [r7, #80]	; 0x50
 8010286:	2300      	movs	r3, #0
 8010288:	64fb      	str	r3, [r7, #76]	; 0x4c
 801028a:	2300      	movs	r3, #0
 801028c:	64bb      	str	r3, [r7, #72]	; 0x48
 801028e:	2300      	movs	r3, #0
 8010290:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010292:	2300      	movs	r3, #0
 8010294:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010298:	2300      	movs	r3, #0
 801029a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801029e:	2300      	movs	r3, #0
 80102a0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80102a2:	2300      	movs	r3, #0
 80102a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80102a6:	2300      	movs	r3, #0
 80102a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d109      	bne.n	80102c4 <tcp_write+0x5c>
 80102b0:	4ba4      	ldr	r3, [pc, #656]	; (8010544 <tcp_write+0x2dc>)
 80102b2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80102b6:	49a4      	ldr	r1, [pc, #656]	; (8010548 <tcp_write+0x2e0>)
 80102b8:	48a4      	ldr	r0, [pc, #656]	; (801054c <tcp_write+0x2e4>)
 80102ba:	f007 f971 	bl	80175a0 <iprintf>
 80102be:	f06f 030f 	mvn.w	r3, #15
 80102c2:	e32a      	b.n	801091a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80102ca:	085b      	lsrs	r3, r3, #1
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102d2:	4293      	cmp	r3, r2
 80102d4:	bf28      	it	cs
 80102d6:	4613      	movcs	r3, r2
 80102d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80102da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d102      	bne.n	80102e6 <tcp_write+0x7e>
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102e4:	e000      	b.n	80102e8 <tcp_write+0x80>
 80102e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d109      	bne.n	8010304 <tcp_write+0x9c>
 80102f0:	4b94      	ldr	r3, [pc, #592]	; (8010544 <tcp_write+0x2dc>)
 80102f2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80102f6:	4996      	ldr	r1, [pc, #600]	; (8010550 <tcp_write+0x2e8>)
 80102f8:	4894      	ldr	r0, [pc, #592]	; (801054c <tcp_write+0x2e4>)
 80102fa:	f007 f951 	bl	80175a0 <iprintf>
 80102fe:	f06f 030f 	mvn.w	r3, #15
 8010302:	e30a      	b.n	801091a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010304:	88fb      	ldrh	r3, [r7, #6]
 8010306:	4619      	mov	r1, r3
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f7ff ff33 	bl	8010174 <tcp_write_checks>
 801030e:	4603      	mov	r3, r0
 8010310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010314:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010318:	2b00      	cmp	r3, #0
 801031a:	d002      	beq.n	8010322 <tcp_write+0xba>
    return err;
 801031c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010320:	e2fb      	b.n	801091a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010328:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801032c:	2300      	movs	r3, #0
 801032e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010336:	2b00      	cmp	r3, #0
 8010338:	f000 80f6 	beq.w	8010528 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010340:	653b      	str	r3, [r7, #80]	; 0x50
 8010342:	e002      	b.n	801034a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801034a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d1f8      	bne.n	8010344 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010354:	7a9b      	ldrb	r3, [r3, #10]
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	b29b      	uxth	r3, r3
 801035a:	f003 0304 	and.w	r3, r3, #4
 801035e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010364:	891b      	ldrh	r3, [r3, #8]
 8010366:	4619      	mov	r1, r3
 8010368:	8c3b      	ldrh	r3, [r7, #32]
 801036a:	440b      	add	r3, r1
 801036c:	429a      	cmp	r2, r3
 801036e:	da06      	bge.n	801037e <tcp_write+0x116>
 8010370:	4b74      	ldr	r3, [pc, #464]	; (8010544 <tcp_write+0x2dc>)
 8010372:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010376:	4977      	ldr	r1, [pc, #476]	; (8010554 <tcp_write+0x2ec>)
 8010378:	4874      	ldr	r0, [pc, #464]	; (801054c <tcp_write+0x2e4>)
 801037a:	f007 f911 	bl	80175a0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801037e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010380:	891a      	ldrh	r2, [r3, #8]
 8010382:	8c3b      	ldrh	r3, [r7, #32]
 8010384:	4413      	add	r3, r2
 8010386:	b29b      	uxth	r3, r3
 8010388:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010394:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010396:	8a7b      	ldrh	r3, [r7, #18]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d026      	beq.n	80103ea <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801039c:	8a7b      	ldrh	r3, [r7, #18]
 801039e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d206      	bcs.n	80103b2 <tcp_write+0x14a>
 80103a4:	4b67      	ldr	r3, [pc, #412]	; (8010544 <tcp_write+0x2dc>)
 80103a6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80103aa:	496b      	ldr	r1, [pc, #428]	; (8010558 <tcp_write+0x2f0>)
 80103ac:	4867      	ldr	r0, [pc, #412]	; (801054c <tcp_write+0x2e4>)
 80103ae:	f007 f8f7 	bl	80175a0 <iprintf>
      seg = last_unsent;
 80103b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80103b6:	8a7b      	ldrh	r3, [r7, #18]
 80103b8:	88fa      	ldrh	r2, [r7, #6]
 80103ba:	4293      	cmp	r3, r2
 80103bc:	bf28      	it	cs
 80103be:	4613      	movcs	r3, r2
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80103c4:	4293      	cmp	r3, r2
 80103c6:	bf28      	it	cs
 80103c8:	4613      	movcs	r3, r2
 80103ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80103cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80103d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103d2:	4413      	add	r3, r2
 80103d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80103d8:	8a7a      	ldrh	r2, [r7, #18]
 80103da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	b29b      	uxth	r3, r3
 80103e0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80103e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80103e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80103e6:	1ad3      	subs	r3, r2, r3
 80103e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80103ea:	8a7b      	ldrh	r3, [r7, #18]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d00b      	beq.n	8010408 <tcp_write+0x1a0>
 80103f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80103f4:	88fb      	ldrh	r3, [r7, #6]
 80103f6:	429a      	cmp	r2, r3
 80103f8:	d006      	beq.n	8010408 <tcp_write+0x1a0>
 80103fa:	4b52      	ldr	r3, [pc, #328]	; (8010544 <tcp_write+0x2dc>)
 80103fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010400:	4956      	ldr	r1, [pc, #344]	; (801055c <tcp_write+0x2f4>)
 8010402:	4852      	ldr	r0, [pc, #328]	; (801054c <tcp_write+0x2e4>)
 8010404:	f007 f8cc 	bl	80175a0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010408:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801040c:	88fb      	ldrh	r3, [r7, #6]
 801040e:	429a      	cmp	r2, r3
 8010410:	f080 8167 	bcs.w	80106e2 <tcp_write+0x47a>
 8010414:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010416:	2b00      	cmp	r3, #0
 8010418:	f000 8163 	beq.w	80106e2 <tcp_write+0x47a>
 801041c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801041e:	891b      	ldrh	r3, [r3, #8]
 8010420:	2b00      	cmp	r3, #0
 8010422:	f000 815e 	beq.w	80106e2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010426:	88fa      	ldrh	r2, [r7, #6]
 8010428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801042c:	1ad2      	subs	r2, r2, r3
 801042e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010430:	4293      	cmp	r3, r2
 8010432:	bfa8      	it	ge
 8010434:	4613      	movge	r3, r2
 8010436:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801043a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801043c:	797b      	ldrb	r3, [r7, #5]
 801043e:	f003 0301 	and.w	r3, r3, #1
 8010442:	2b00      	cmp	r3, #0
 8010444:	d027      	beq.n	8010496 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010446:	f107 0012 	add.w	r0, r7, #18
 801044a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801044c:	8bf9      	ldrh	r1, [r7, #30]
 801044e:	2301      	movs	r3, #1
 8010450:	9302      	str	r3, [sp, #8]
 8010452:	797b      	ldrb	r3, [r7, #5]
 8010454:	9301      	str	r3, [sp, #4]
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	9300      	str	r3, [sp, #0]
 801045a:	4603      	mov	r3, r0
 801045c:	2000      	movs	r0, #0
 801045e:	f7ff fe0f 	bl	8010080 <tcp_pbuf_prealloc>
 8010462:	6578      	str	r0, [r7, #84]	; 0x54
 8010464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010466:	2b00      	cmp	r3, #0
 8010468:	f000 8225 	beq.w	80108b6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801046c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801046e:	6858      	ldr	r0, [r3, #4]
 8010470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010474:	68ba      	ldr	r2, [r7, #8]
 8010476:	4413      	add	r3, r2
 8010478:	8bfa      	ldrh	r2, [r7, #30]
 801047a:	4619      	mov	r1, r3
 801047c:	f006 fbf6 	bl	8016c6c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010480:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010482:	f7fb f91d 	bl	800b6c0 <pbuf_clen>
 8010486:	4603      	mov	r3, r0
 8010488:	461a      	mov	r2, r3
 801048a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801048e:	4413      	add	r3, r2
 8010490:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010494:	e041      	b.n	801051a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	637b      	str	r3, [r7, #52]	; 0x34
 801049c:	e002      	b.n	80104a4 <tcp_write+0x23c>
 801049e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	637b      	str	r3, [r7, #52]	; 0x34
 80104a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d1f8      	bne.n	801049e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80104ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ae:	7b1b      	ldrb	r3, [r3, #12]
 80104b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d115      	bne.n	80104e4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80104b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104be:	8952      	ldrh	r2, [r2, #10]
 80104c0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80104c2:	68ba      	ldr	r2, [r7, #8]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d10d      	bne.n	80104e4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80104c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d006      	beq.n	80104de <tcp_write+0x276>
 80104d0:	4b1c      	ldr	r3, [pc, #112]	; (8010544 <tcp_write+0x2dc>)
 80104d2:	f240 2231 	movw	r2, #561	; 0x231
 80104d6:	4922      	ldr	r1, [pc, #136]	; (8010560 <tcp_write+0x2f8>)
 80104d8:	481c      	ldr	r0, [pc, #112]	; (801054c <tcp_write+0x2e4>)
 80104da:	f007 f861 	bl	80175a0 <iprintf>
          extendlen = seglen;
 80104de:	8bfb      	ldrh	r3, [r7, #30]
 80104e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80104e2:	e01a      	b.n	801051a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80104e4:	8bfb      	ldrh	r3, [r7, #30]
 80104e6:	2201      	movs	r2, #1
 80104e8:	4619      	mov	r1, r3
 80104ea:	2000      	movs	r0, #0
 80104ec:	f7fa fd7c 	bl	800afe8 <pbuf_alloc>
 80104f0:	6578      	str	r0, [r7, #84]	; 0x54
 80104f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f000 81e0 	beq.w	80108ba <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80104fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80104fe:	68ba      	ldr	r2, [r7, #8]
 8010500:	441a      	add	r2, r3
 8010502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010504:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010506:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010508:	f7fb f8da 	bl	800b6c0 <pbuf_clen>
 801050c:	4603      	mov	r3, r0
 801050e:	461a      	mov	r2, r3
 8010510:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010514:	4413      	add	r3, r2
 8010516:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801051a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801051e:	8bfb      	ldrh	r3, [r7, #30]
 8010520:	4413      	add	r3, r2
 8010522:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010526:	e0dc      	b.n	80106e2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801052e:	2b00      	cmp	r3, #0
 8010530:	f000 80d7 	beq.w	80106e2 <tcp_write+0x47a>
 8010534:	4b03      	ldr	r3, [pc, #12]	; (8010544 <tcp_write+0x2dc>)
 8010536:	f240 224a 	movw	r2, #586	; 0x24a
 801053a:	490a      	ldr	r1, [pc, #40]	; (8010564 <tcp_write+0x2fc>)
 801053c:	4803      	ldr	r0, [pc, #12]	; (801054c <tcp_write+0x2e4>)
 801053e:	f007 f82f 	bl	80175a0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010542:	e0ce      	b.n	80106e2 <tcp_write+0x47a>
 8010544:	0801e1f8 	.word	0x0801e1f8
 8010548:	0801e398 	.word	0x0801e398
 801054c:	0801e24c 	.word	0x0801e24c
 8010550:	0801e3b0 	.word	0x0801e3b0
 8010554:	0801e3e4 	.word	0x0801e3e4
 8010558:	0801e3fc 	.word	0x0801e3fc
 801055c:	0801e41c 	.word	0x0801e41c
 8010560:	0801e43c 	.word	0x0801e43c
 8010564:	0801e468 	.word	0x0801e468
    struct pbuf *p;
    u16_t left = len - pos;
 8010568:	88fa      	ldrh	r2, [r7, #6]
 801056a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801056e:	1ad3      	subs	r3, r2, r3
 8010570:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010572:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010576:	b29b      	uxth	r3, r3
 8010578:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801057e:	8b7a      	ldrh	r2, [r7, #26]
 8010580:	8bbb      	ldrh	r3, [r7, #28]
 8010582:	4293      	cmp	r3, r2
 8010584:	bf28      	it	cs
 8010586:	4613      	movcs	r3, r2
 8010588:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801058a:	797b      	ldrb	r3, [r7, #5]
 801058c:	f003 0301 	and.w	r3, r3, #1
 8010590:	2b00      	cmp	r3, #0
 8010592:	d036      	beq.n	8010602 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010594:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010598:	b29a      	uxth	r2, r3
 801059a:	8b3b      	ldrh	r3, [r7, #24]
 801059c:	4413      	add	r3, r2
 801059e:	b299      	uxth	r1, r3
 80105a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	bf0c      	ite	eq
 80105a6:	2301      	moveq	r3, #1
 80105a8:	2300      	movne	r3, #0
 80105aa:	b2db      	uxtb	r3, r3
 80105ac:	f107 0012 	add.w	r0, r7, #18
 80105b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80105b2:	9302      	str	r3, [sp, #8]
 80105b4:	797b      	ldrb	r3, [r7, #5]
 80105b6:	9301      	str	r3, [sp, #4]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	9300      	str	r3, [sp, #0]
 80105bc:	4603      	mov	r3, r0
 80105be:	2036      	movs	r0, #54	; 0x36
 80105c0:	f7ff fd5e 	bl	8010080 <tcp_pbuf_prealloc>
 80105c4:	6338      	str	r0, [r7, #48]	; 0x30
 80105c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	f000 8178 	beq.w	80108be <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80105ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d0:	895b      	ldrh	r3, [r3, #10]
 80105d2:	8b3a      	ldrh	r2, [r7, #24]
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d906      	bls.n	80105e6 <tcp_write+0x37e>
 80105d8:	4b8c      	ldr	r3, [pc, #560]	; (801080c <tcp_write+0x5a4>)
 80105da:	f240 2266 	movw	r2, #614	; 0x266
 80105de:	498c      	ldr	r1, [pc, #560]	; (8010810 <tcp_write+0x5a8>)
 80105e0:	488c      	ldr	r0, [pc, #560]	; (8010814 <tcp_write+0x5ac>)
 80105e2:	f006 ffdd 	bl	80175a0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	685a      	ldr	r2, [r3, #4]
 80105ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80105ee:	18d0      	adds	r0, r2, r3
 80105f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80105f4:	68ba      	ldr	r2, [r7, #8]
 80105f6:	4413      	add	r3, r2
 80105f8:	8b3a      	ldrh	r2, [r7, #24]
 80105fa:	4619      	mov	r1, r3
 80105fc:	f006 fb36 	bl	8016c6c <memcpy>
 8010600:	e02f      	b.n	8010662 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010602:	8a7b      	ldrh	r3, [r7, #18]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d006      	beq.n	8010616 <tcp_write+0x3ae>
 8010608:	4b80      	ldr	r3, [pc, #512]	; (801080c <tcp_write+0x5a4>)
 801060a:	f240 2271 	movw	r2, #625	; 0x271
 801060e:	4982      	ldr	r1, [pc, #520]	; (8010818 <tcp_write+0x5b0>)
 8010610:	4880      	ldr	r0, [pc, #512]	; (8010814 <tcp_write+0x5ac>)
 8010612:	f006 ffc5 	bl	80175a0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010616:	8b3b      	ldrh	r3, [r7, #24]
 8010618:	2201      	movs	r2, #1
 801061a:	4619      	mov	r1, r3
 801061c:	2036      	movs	r0, #54	; 0x36
 801061e:	f7fa fce3 	bl	800afe8 <pbuf_alloc>
 8010622:	6178      	str	r0, [r7, #20]
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	2b00      	cmp	r3, #0
 8010628:	f000 814b 	beq.w	80108c2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801062c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010630:	68ba      	ldr	r2, [r7, #8]
 8010632:	441a      	add	r2, r3
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010638:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801063c:	b29b      	uxth	r3, r3
 801063e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010642:	4619      	mov	r1, r3
 8010644:	2036      	movs	r0, #54	; 0x36
 8010646:	f7fa fccf 	bl	800afe8 <pbuf_alloc>
 801064a:	6338      	str	r0, [r7, #48]	; 0x30
 801064c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064e:	2b00      	cmp	r3, #0
 8010650:	d103      	bne.n	801065a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010652:	6978      	ldr	r0, [r7, #20]
 8010654:	f7fa ffac 	bl	800b5b0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010658:	e136      	b.n	80108c8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801065a:	6979      	ldr	r1, [r7, #20]
 801065c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801065e:	f7fb f869 	bl	800b734 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010664:	f7fb f82c 	bl	800b6c0 <pbuf_clen>
 8010668:	4603      	mov	r3, r0
 801066a:	461a      	mov	r2, r3
 801066c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010670:	4413      	add	r3, r2
 8010672:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010676:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801067a:	2b09      	cmp	r3, #9
 801067c:	d903      	bls.n	8010686 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801067e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010680:	f7fa ff96 	bl	800b5b0 <pbuf_free>
      goto memerr;
 8010684:	e120      	b.n	80108c8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801068a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801068e:	441a      	add	r2, r3
 8010690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	4613      	mov	r3, r2
 8010698:	2200      	movs	r2, #0
 801069a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801069c:	68f8      	ldr	r0, [r7, #12]
 801069e:	f7ff fc51 	bl	800ff44 <tcp_create_segment>
 80106a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80106a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	f000 810d 	beq.w	80108c6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80106ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d102      	bne.n	80106b8 <tcp_write+0x450>
      queue = seg;
 80106b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b4:	647b      	str	r3, [r7, #68]	; 0x44
 80106b6:	e00c      	b.n	80106d2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80106b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d106      	bne.n	80106cc <tcp_write+0x464>
 80106be:	4b53      	ldr	r3, [pc, #332]	; (801080c <tcp_write+0x5a4>)
 80106c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80106c4:	4955      	ldr	r1, [pc, #340]	; (801081c <tcp_write+0x5b4>)
 80106c6:	4853      	ldr	r0, [pc, #332]	; (8010814 <tcp_write+0x5ac>)
 80106c8:	f006 ff6a 	bl	80175a0 <iprintf>
      prev_seg->next = seg;
 80106cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106d0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80106d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106d4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80106d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106da:	8b3b      	ldrh	r3, [r7, #24]
 80106dc:	4413      	add	r3, r2
 80106de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80106e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106e6:	88fb      	ldrh	r3, [r7, #6]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	f4ff af3d 	bcc.w	8010568 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80106ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d02c      	beq.n	801074e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80106f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80106fa:	e01e      	b.n	801073a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80106fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fe:	891a      	ldrh	r2, [r3, #8]
 8010700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010702:	4413      	add	r3, r2
 8010704:	b29a      	uxth	r2, r3
 8010706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010708:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801070a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d110      	bne.n	8010734 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010718:	8952      	ldrh	r2, [r2, #10]
 801071a:	4413      	add	r3, r2
 801071c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801071e:	68b9      	ldr	r1, [r7, #8]
 8010720:	4618      	mov	r0, r3
 8010722:	f006 faa3 	bl	8016c6c <memcpy>
        p->len += oversize_used;
 8010726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010728:	895a      	ldrh	r2, [r3, #10]
 801072a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801072c:	4413      	add	r3, r2
 801072e:	b29a      	uxth	r2, r3
 8010730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010732:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	62fb      	str	r3, [r7, #44]	; 0x2c
 801073a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073c:	2b00      	cmp	r3, #0
 801073e:	d1dd      	bne.n	80106fc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010742:	891a      	ldrh	r2, [r3, #8]
 8010744:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010746:	4413      	add	r3, r2
 8010748:	b29a      	uxth	r2, r3
 801074a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801074c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801074e:	8a7a      	ldrh	r2, [r7, #18]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010758:	2b00      	cmp	r3, #0
 801075a:	d018      	beq.n	801078e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801075c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801075e:	2b00      	cmp	r3, #0
 8010760:	d106      	bne.n	8010770 <tcp_write+0x508>
 8010762:	4b2a      	ldr	r3, [pc, #168]	; (801080c <tcp_write+0x5a4>)
 8010764:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8010768:	492d      	ldr	r1, [pc, #180]	; (8010820 <tcp_write+0x5b8>)
 801076a:	482a      	ldr	r0, [pc, #168]	; (8010814 <tcp_write+0x5ac>)
 801076c:	f006 ff18 	bl	80175a0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010776:	4618      	mov	r0, r3
 8010778:	f7fa ffdc 	bl	800b734 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801077c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801077e:	891a      	ldrh	r2, [r3, #8]
 8010780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010782:	891b      	ldrh	r3, [r3, #8]
 8010784:	4413      	add	r3, r2
 8010786:	b29a      	uxth	r2, r3
 8010788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801078a:	811a      	strh	r2, [r3, #8]
 801078c:	e037      	b.n	80107fe <tcp_write+0x596>
  } else if (extendlen > 0) {
 801078e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010790:	2b00      	cmp	r3, #0
 8010792:	d034      	beq.n	80107fe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010796:	2b00      	cmp	r3, #0
 8010798:	d003      	beq.n	80107a2 <tcp_write+0x53a>
 801079a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d106      	bne.n	80107b0 <tcp_write+0x548>
 80107a2:	4b1a      	ldr	r3, [pc, #104]	; (801080c <tcp_write+0x5a4>)
 80107a4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80107a8:	491e      	ldr	r1, [pc, #120]	; (8010824 <tcp_write+0x5bc>)
 80107aa:	481a      	ldr	r0, [pc, #104]	; (8010814 <tcp_write+0x5ac>)
 80107ac:	f006 fef8 	bl	80175a0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80107b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80107b6:	e009      	b.n	80107cc <tcp_write+0x564>
      p->tot_len += extendlen;
 80107b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ba:	891a      	ldrh	r2, [r3, #8]
 80107bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107be:	4413      	add	r3, r2
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80107c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80107cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1f1      	bne.n	80107b8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80107d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d6:	891a      	ldrh	r2, [r3, #8]
 80107d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107da:	4413      	add	r3, r2
 80107dc:	b29a      	uxth	r2, r3
 80107de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80107e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e4:	895a      	ldrh	r2, [r3, #10]
 80107e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107e8:	4413      	add	r3, r2
 80107ea:	b29a      	uxth	r2, r3
 80107ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80107f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107f2:	891a      	ldrh	r2, [r3, #8]
 80107f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80107f6:	4413      	add	r3, r2
 80107f8:	b29a      	uxth	r2, r3
 80107fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107fc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80107fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010800:	2b00      	cmp	r3, #0
 8010802:	d111      	bne.n	8010828 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010808:	66da      	str	r2, [r3, #108]	; 0x6c
 801080a:	e010      	b.n	801082e <tcp_write+0x5c6>
 801080c:	0801e1f8 	.word	0x0801e1f8
 8010810:	0801e498 	.word	0x0801e498
 8010814:	0801e24c 	.word	0x0801e24c
 8010818:	0801e4d8 	.word	0x0801e4d8
 801081c:	0801e4e8 	.word	0x0801e4e8
 8010820:	0801e4fc 	.word	0x0801e4fc
 8010824:	0801e534 	.word	0x0801e534
  } else {
    last_unsent->next = queue;
 8010828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801082a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801082c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010832:	88fb      	ldrh	r3, [r7, #6]
 8010834:	441a      	add	r2, r3
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010840:	88fb      	ldrh	r3, [r7, #6]
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	b29a      	uxth	r2, r3
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010852:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801085c:	2b00      	cmp	r3, #0
 801085e:	d00e      	beq.n	801087e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010864:	2b00      	cmp	r3, #0
 8010866:	d10a      	bne.n	801087e <tcp_write+0x616>
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801086c:	2b00      	cmp	r3, #0
 801086e:	d106      	bne.n	801087e <tcp_write+0x616>
 8010870:	4b2c      	ldr	r3, [pc, #176]	; (8010924 <tcp_write+0x6bc>)
 8010872:	f240 3212 	movw	r2, #786	; 0x312
 8010876:	492c      	ldr	r1, [pc, #176]	; (8010928 <tcp_write+0x6c0>)
 8010878:	482c      	ldr	r0, [pc, #176]	; (801092c <tcp_write+0x6c4>)
 801087a:	f006 fe91 	bl	80175a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801087e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010880:	2b00      	cmp	r3, #0
 8010882:	d016      	beq.n	80108b2 <tcp_write+0x64a>
 8010884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d012      	beq.n	80108b2 <tcp_write+0x64a>
 801088c:	797b      	ldrb	r3, [r7, #5]
 801088e:	f003 0302 	and.w	r3, r3, #2
 8010892:	2b00      	cmp	r3, #0
 8010894:	d10d      	bne.n	80108b2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	899b      	ldrh	r3, [r3, #12]
 801089c:	b29c      	uxth	r4, r3
 801089e:	2008      	movs	r0, #8
 80108a0:	f7f9 faec 	bl	8009e7c <lwip_htons>
 80108a4:	4603      	mov	r3, r0
 80108a6:	461a      	mov	r2, r3
 80108a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108aa:	68db      	ldr	r3, [r3, #12]
 80108ac:	4322      	orrs	r2, r4
 80108ae:	b292      	uxth	r2, r2
 80108b0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80108b2:	2300      	movs	r3, #0
 80108b4:	e031      	b.n	801091a <tcp_write+0x6b2>
          goto memerr;
 80108b6:	bf00      	nop
 80108b8:	e006      	b.n	80108c8 <tcp_write+0x660>
            goto memerr;
 80108ba:	bf00      	nop
 80108bc:	e004      	b.n	80108c8 <tcp_write+0x660>
        goto memerr;
 80108be:	bf00      	nop
 80108c0:	e002      	b.n	80108c8 <tcp_write+0x660>
        goto memerr;
 80108c2:	bf00      	nop
 80108c4:	e000      	b.n	80108c8 <tcp_write+0x660>
      goto memerr;
 80108c6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	8b5b      	ldrh	r3, [r3, #26]
 80108cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108d0:	b29a      	uxth	r2, r3
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80108d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d002      	beq.n	80108e2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80108dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80108de:	f7fa fe67 	bl	800b5b0 <pbuf_free>
  }
  if (queue != NULL) {
 80108e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d002      	beq.n	80108ee <tcp_write+0x686>
    tcp_segs_free(queue);
 80108e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80108ea:	f7fc fa8d 	bl	800ce08 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d00e      	beq.n	8010916 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d10a      	bne.n	8010916 <tcp_write+0x6ae>
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010904:	2b00      	cmp	r3, #0
 8010906:	d106      	bne.n	8010916 <tcp_write+0x6ae>
 8010908:	4b06      	ldr	r3, [pc, #24]	; (8010924 <tcp_write+0x6bc>)
 801090a:	f240 3227 	movw	r2, #807	; 0x327
 801090e:	4906      	ldr	r1, [pc, #24]	; (8010928 <tcp_write+0x6c0>)
 8010910:	4806      	ldr	r0, [pc, #24]	; (801092c <tcp_write+0x6c4>)
 8010912:	f006 fe45 	bl	80175a0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801091a:	4618      	mov	r0, r3
 801091c:	375c      	adds	r7, #92	; 0x5c
 801091e:	46bd      	mov	sp, r7
 8010920:	bd90      	pop	{r4, r7, pc}
 8010922:	bf00      	nop
 8010924:	0801e1f8 	.word	0x0801e1f8
 8010928:	0801e56c 	.word	0x0801e56c
 801092c:	0801e24c 	.word	0x0801e24c

08010930 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010930:	b590      	push	{r4, r7, lr}
 8010932:	b08b      	sub	sp, #44	; 0x2c
 8010934:	af02      	add	r7, sp, #8
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	460b      	mov	r3, r1
 801093a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801093c:	2300      	movs	r3, #0
 801093e:	61fb      	str	r3, [r7, #28]
 8010940:	2300      	movs	r3, #0
 8010942:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010944:	2300      	movs	r3, #0
 8010946:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d106      	bne.n	801095c <tcp_split_unsent_seg+0x2c>
 801094e:	4b95      	ldr	r3, [pc, #596]	; (8010ba4 <tcp_split_unsent_seg+0x274>)
 8010950:	f240 324b 	movw	r2, #843	; 0x34b
 8010954:	4994      	ldr	r1, [pc, #592]	; (8010ba8 <tcp_split_unsent_seg+0x278>)
 8010956:	4895      	ldr	r0, [pc, #596]	; (8010bac <tcp_split_unsent_seg+0x27c>)
 8010958:	f006 fe22 	bl	80175a0 <iprintf>

  useg = pcb->unsent;
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010960:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010962:	697b      	ldr	r3, [r7, #20]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d102      	bne.n	801096e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010968:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801096c:	e116      	b.n	8010b9c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801096e:	887b      	ldrh	r3, [r7, #2]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d109      	bne.n	8010988 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010974:	4b8b      	ldr	r3, [pc, #556]	; (8010ba4 <tcp_split_unsent_seg+0x274>)
 8010976:	f240 3253 	movw	r2, #851	; 0x353
 801097a:	498d      	ldr	r1, [pc, #564]	; (8010bb0 <tcp_split_unsent_seg+0x280>)
 801097c:	488b      	ldr	r0, [pc, #556]	; (8010bac <tcp_split_unsent_seg+0x27c>)
 801097e:	f006 fe0f 	bl	80175a0 <iprintf>
    return ERR_VAL;
 8010982:	f06f 0305 	mvn.w	r3, #5
 8010986:	e109      	b.n	8010b9c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	891b      	ldrh	r3, [r3, #8]
 801098c:	887a      	ldrh	r2, [r7, #2]
 801098e:	429a      	cmp	r2, r3
 8010990:	d301      	bcc.n	8010996 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010992:	2300      	movs	r3, #0
 8010994:	e102      	b.n	8010b9c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801099a:	887a      	ldrh	r2, [r7, #2]
 801099c:	429a      	cmp	r2, r3
 801099e:	d906      	bls.n	80109ae <tcp_split_unsent_seg+0x7e>
 80109a0:	4b80      	ldr	r3, [pc, #512]	; (8010ba4 <tcp_split_unsent_seg+0x274>)
 80109a2:	f240 325b 	movw	r2, #859	; 0x35b
 80109a6:	4983      	ldr	r1, [pc, #524]	; (8010bb4 <tcp_split_unsent_seg+0x284>)
 80109a8:	4880      	ldr	r0, [pc, #512]	; (8010bac <tcp_split_unsent_seg+0x27c>)
 80109aa:	f006 fdf9 	bl	80175a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	891b      	ldrh	r3, [r3, #8]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d106      	bne.n	80109c4 <tcp_split_unsent_seg+0x94>
 80109b6:	4b7b      	ldr	r3, [pc, #492]	; (8010ba4 <tcp_split_unsent_seg+0x274>)
 80109b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80109bc:	497e      	ldr	r1, [pc, #504]	; (8010bb8 <tcp_split_unsent_seg+0x288>)
 80109be:	487b      	ldr	r0, [pc, #492]	; (8010bac <tcp_split_unsent_seg+0x27c>)
 80109c0:	f006 fdee 	bl	80175a0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	7a9b      	ldrb	r3, [r3, #10]
 80109c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80109ca:	7bfb      	ldrb	r3, [r7, #15]
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	b2db      	uxtb	r3, r3
 80109d0:	f003 0304 	and.w	r3, r3, #4
 80109d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	891a      	ldrh	r2, [r3, #8]
 80109da:	887b      	ldrh	r3, [r7, #2]
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80109e0:	7bbb      	ldrb	r3, [r7, #14]
 80109e2:	b29a      	uxth	r2, r3
 80109e4:	89bb      	ldrh	r3, [r7, #12]
 80109e6:	4413      	add	r3, r2
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80109ee:	4619      	mov	r1, r3
 80109f0:	2036      	movs	r0, #54	; 0x36
 80109f2:	f7fa faf9 	bl	800afe8 <pbuf_alloc>
 80109f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	f000 80b7 	beq.w	8010b6e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	685b      	ldr	r3, [r3, #4]
 8010a04:	891a      	ldrh	r2, [r3, #8]
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	891b      	ldrh	r3, [r3, #8]
 8010a0a:	1ad3      	subs	r3, r2, r3
 8010a0c:	b29a      	uxth	r2, r3
 8010a0e:	887b      	ldrh	r3, [r7, #2]
 8010a10:	4413      	add	r3, r2
 8010a12:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	6858      	ldr	r0, [r3, #4]
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	685a      	ldr	r2, [r3, #4]
 8010a1c:	7bbb      	ldrb	r3, [r7, #14]
 8010a1e:	18d1      	adds	r1, r2, r3
 8010a20:	897b      	ldrh	r3, [r7, #10]
 8010a22:	89ba      	ldrh	r2, [r7, #12]
 8010a24:	f7fa ffbe 	bl	800b9a4 <pbuf_copy_partial>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	461a      	mov	r2, r3
 8010a2c:	89bb      	ldrh	r3, [r7, #12]
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	f040 809f 	bne.w	8010b72 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	899b      	ldrh	r3, [r3, #12]
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	4618      	mov	r0, r3
 8010a3e:	f7f9 fa1d 	bl	8009e7c <lwip_htons>
 8010a42:	4603      	mov	r3, r0
 8010a44:	b2db      	uxtb	r3, r3
 8010a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a4a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010a50:	7efb      	ldrb	r3, [r7, #27]
 8010a52:	f003 0308 	and.w	r3, r3, #8
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d007      	beq.n	8010a6a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010a5a:	7efb      	ldrb	r3, [r7, #27]
 8010a5c:	f023 0308 	bic.w	r3, r3, #8
 8010a60:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010a62:	7ebb      	ldrb	r3, [r7, #26]
 8010a64:	f043 0308 	orr.w	r3, r3, #8
 8010a68:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010a6a:	7efb      	ldrb	r3, [r7, #27]
 8010a6c:	f003 0301 	and.w	r3, r3, #1
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d007      	beq.n	8010a84 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010a74:	7efb      	ldrb	r3, [r7, #27]
 8010a76:	f023 0301 	bic.w	r3, r3, #1
 8010a7a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010a7c:	7ebb      	ldrb	r3, [r7, #26]
 8010a7e:	f043 0301 	orr.w	r3, r3, #1
 8010a82:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	685b      	ldr	r3, [r3, #4]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7f9 fa0b 	bl	8009ea6 <lwip_htonl>
 8010a90:	4602      	mov	r2, r0
 8010a92:	887b      	ldrh	r3, [r7, #2]
 8010a94:	18d1      	adds	r1, r2, r3
 8010a96:	7eba      	ldrb	r2, [r7, #26]
 8010a98:	7bfb      	ldrb	r3, [r7, #15]
 8010a9a:	9300      	str	r3, [sp, #0]
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	6939      	ldr	r1, [r7, #16]
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7ff fa4f 	bl	800ff44 <tcp_create_segment>
 8010aa6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d063      	beq.n	8010b76 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fa fe04 	bl	800b6c0 <pbuf_clen>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	461a      	mov	r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ac2:	1a9b      	subs	r3, r3, r2
 8010ac4:	b29a      	uxth	r2, r3
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	6858      	ldr	r0, [r3, #4]
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	891a      	ldrh	r2, [r3, #8]
 8010ad6:	89bb      	ldrh	r3, [r7, #12]
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	4619      	mov	r1, r3
 8010ade:	f7fa fbe1 	bl	800b2a4 <pbuf_realloc>
  useg->len -= remainder;
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	891a      	ldrh	r2, [r3, #8]
 8010ae6:	89bb      	ldrh	r3, [r7, #12]
 8010ae8:	1ad3      	subs	r3, r2, r3
 8010aea:	b29a      	uxth	r2, r3
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	899b      	ldrh	r3, [r3, #12]
 8010af6:	b29c      	uxth	r4, r3
 8010af8:	7efb      	ldrb	r3, [r7, #27]
 8010afa:	b29b      	uxth	r3, r3
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7f9 f9bd 	bl	8009e7c <lwip_htons>
 8010b02:	4603      	mov	r3, r0
 8010b04:	461a      	mov	r2, r3
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	68db      	ldr	r3, [r3, #12]
 8010b0a:	4322      	orrs	r2, r4
 8010b0c:	b292      	uxth	r2, r2
 8010b0e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	685b      	ldr	r3, [r3, #4]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7fa fdd3 	bl	800b6c0 <pbuf_clen>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b24:	4413      	add	r3, r2
 8010b26:	b29a      	uxth	r2, r3
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fa fdc4 	bl	800b6c0 <pbuf_clen>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	461a      	mov	r2, r3
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b42:	4413      	add	r3, r2
 8010b44:	b29a      	uxth	r2, r3
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	69fa      	ldr	r2, [r7, #28]
 8010b58:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d103      	bne.n	8010b6a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2200      	movs	r2, #0
 8010b66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	e016      	b.n	8010b9c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010b6e:	bf00      	nop
 8010b70:	e002      	b.n	8010b78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010b72:	bf00      	nop
 8010b74:	e000      	b.n	8010b78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010b76:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d006      	beq.n	8010b8c <tcp_split_unsent_seg+0x25c>
 8010b7e:	4b09      	ldr	r3, [pc, #36]	; (8010ba4 <tcp_split_unsent_seg+0x274>)
 8010b80:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010b84:	490d      	ldr	r1, [pc, #52]	; (8010bbc <tcp_split_unsent_seg+0x28c>)
 8010b86:	4809      	ldr	r0, [pc, #36]	; (8010bac <tcp_split_unsent_seg+0x27c>)
 8010b88:	f006 fd0a 	bl	80175a0 <iprintf>
  if (p != NULL) {
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d002      	beq.n	8010b98 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010b92:	6938      	ldr	r0, [r7, #16]
 8010b94:	f7fa fd0c 	bl	800b5b0 <pbuf_free>
  }

  return ERR_MEM;
 8010b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3724      	adds	r7, #36	; 0x24
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd90      	pop	{r4, r7, pc}
 8010ba4:	0801e1f8 	.word	0x0801e1f8
 8010ba8:	0801e58c 	.word	0x0801e58c
 8010bac:	0801e24c 	.word	0x0801e24c
 8010bb0:	0801e5b0 	.word	0x0801e5b0
 8010bb4:	0801e5d4 	.word	0x0801e5d4
 8010bb8:	0801e5e4 	.word	0x0801e5e4
 8010bbc:	0801e5f4 	.word	0x0801e5f4

08010bc0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010bc0:	b590      	push	{r4, r7, lr}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d106      	bne.n	8010bdc <tcp_send_fin+0x1c>
 8010bce:	4b21      	ldr	r3, [pc, #132]	; (8010c54 <tcp_send_fin+0x94>)
 8010bd0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010bd4:	4920      	ldr	r1, [pc, #128]	; (8010c58 <tcp_send_fin+0x98>)
 8010bd6:	4821      	ldr	r0, [pc, #132]	; (8010c5c <tcp_send_fin+0x9c>)
 8010bd8:	f006 fce2 	bl	80175a0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d02e      	beq.n	8010c42 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010be8:	60fb      	str	r3, [r7, #12]
 8010bea:	e002      	b.n	8010bf2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d1f8      	bne.n	8010bec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	899b      	ldrh	r3, [r3, #12]
 8010c00:	b29b      	uxth	r3, r3
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7f9 f93a 	bl	8009e7c <lwip_htons>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	b2db      	uxtb	r3, r3
 8010c0c:	f003 0307 	and.w	r3, r3, #7
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d116      	bne.n	8010c42 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	899b      	ldrh	r3, [r3, #12]
 8010c1a:	b29c      	uxth	r4, r3
 8010c1c:	2001      	movs	r0, #1
 8010c1e:	f7f9 f92d 	bl	8009e7c <lwip_htons>
 8010c22:	4603      	mov	r3, r0
 8010c24:	461a      	mov	r2, r3
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	68db      	ldr	r3, [r3, #12]
 8010c2a:	4322      	orrs	r2, r4
 8010c2c:	b292      	uxth	r2, r2
 8010c2e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	8b5b      	ldrh	r3, [r3, #26]
 8010c34:	f043 0320 	orr.w	r3, r3, #32
 8010c38:	b29a      	uxth	r2, r3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010c3e:	2300      	movs	r3, #0
 8010c40:	e004      	b.n	8010c4c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010c42:	2101      	movs	r1, #1
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f000 f80b 	bl	8010c60 <tcp_enqueue_flags>
 8010c4a:	4603      	mov	r3, r0
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3714      	adds	r7, #20
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd90      	pop	{r4, r7, pc}
 8010c54:	0801e1f8 	.word	0x0801e1f8
 8010c58:	0801e600 	.word	0x0801e600
 8010c5c:	0801e24c 	.word	0x0801e24c

08010c60 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b08a      	sub	sp, #40	; 0x28
 8010c64:	af02      	add	r7, sp, #8
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010c70:	2300      	movs	r3, #0
 8010c72:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010c74:	78fb      	ldrb	r3, [r7, #3]
 8010c76:	f003 0303 	and.w	r3, r3, #3
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d106      	bne.n	8010c8c <tcp_enqueue_flags+0x2c>
 8010c7e:	4b67      	ldr	r3, [pc, #412]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010c80:	f240 4211 	movw	r2, #1041	; 0x411
 8010c84:	4966      	ldr	r1, [pc, #408]	; (8010e20 <tcp_enqueue_flags+0x1c0>)
 8010c86:	4867      	ldr	r0, [pc, #412]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010c88:	f006 fc8a 	bl	80175a0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d106      	bne.n	8010ca0 <tcp_enqueue_flags+0x40>
 8010c92:	4b62      	ldr	r3, [pc, #392]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010c94:	f240 4213 	movw	r2, #1043	; 0x413
 8010c98:	4963      	ldr	r1, [pc, #396]	; (8010e28 <tcp_enqueue_flags+0x1c8>)
 8010c9a:	4862      	ldr	r0, [pc, #392]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010c9c:	f006 fc80 	bl	80175a0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010ca0:	78fb      	ldrb	r3, [r7, #3]
 8010ca2:	f003 0302 	and.w	r3, r3, #2
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d001      	beq.n	8010cae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010caa:	2301      	movs	r3, #1
 8010cac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010cae:	7ffb      	ldrb	r3, [r7, #31]
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	b2db      	uxtb	r3, r3
 8010cb4:	f003 0304 	and.w	r3, r3, #4
 8010cb8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010cba:	7dfb      	ldrb	r3, [r7, #23]
 8010cbc:	b29b      	uxth	r3, r3
 8010cbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	2036      	movs	r0, #54	; 0x36
 8010cc6:	f7fa f98f 	bl	800afe8 <pbuf_alloc>
 8010cca:	6138      	str	r0, [r7, #16]
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d109      	bne.n	8010ce6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	8b5b      	ldrh	r3, [r3, #26]
 8010cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cda:	b29a      	uxth	r2, r3
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ce4:	e095      	b.n	8010e12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	895a      	ldrh	r2, [r3, #10]
 8010cea:	7dfb      	ldrb	r3, [r7, #23]
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d206      	bcs.n	8010d00 <tcp_enqueue_flags+0xa0>
 8010cf2:	4b4a      	ldr	r3, [pc, #296]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010cf4:	f240 4239 	movw	r2, #1081	; 0x439
 8010cf8:	494c      	ldr	r1, [pc, #304]	; (8010e2c <tcp_enqueue_flags+0x1cc>)
 8010cfa:	484a      	ldr	r0, [pc, #296]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010cfc:	f006 fc50 	bl	80175a0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010d04:	78fa      	ldrb	r2, [r7, #3]
 8010d06:	7ffb      	ldrb	r3, [r7, #31]
 8010d08:	9300      	str	r3, [sp, #0]
 8010d0a:	460b      	mov	r3, r1
 8010d0c:	6939      	ldr	r1, [r7, #16]
 8010d0e:	6878      	ldr	r0, [r7, #4]
 8010d10:	f7ff f918 	bl	800ff44 <tcp_create_segment>
 8010d14:	60f8      	str	r0, [r7, #12]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d109      	bne.n	8010d30 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	8b5b      	ldrh	r3, [r3, #26]
 8010d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d2e:	e070      	b.n	8010e12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	f003 0303 	and.w	r3, r3, #3
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d006      	beq.n	8010d4a <tcp_enqueue_flags+0xea>
 8010d3c:	4b37      	ldr	r3, [pc, #220]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010d3e:	f240 4242 	movw	r2, #1090	; 0x442
 8010d42:	493b      	ldr	r1, [pc, #236]	; (8010e30 <tcp_enqueue_flags+0x1d0>)
 8010d44:	4837      	ldr	r0, [pc, #220]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010d46:	f006 fc2b 	bl	80175a0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	891b      	ldrh	r3, [r3, #8]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d006      	beq.n	8010d60 <tcp_enqueue_flags+0x100>
 8010d52:	4b32      	ldr	r3, [pc, #200]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010d54:	f240 4243 	movw	r2, #1091	; 0x443
 8010d58:	4936      	ldr	r1, [pc, #216]	; (8010e34 <tcp_enqueue_flags+0x1d4>)
 8010d5a:	4832      	ldr	r0, [pc, #200]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010d5c:	f006 fc20 	bl	80175a0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d103      	bne.n	8010d70 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	68fa      	ldr	r2, [r7, #12]
 8010d6c:	66da      	str	r2, [r3, #108]	; 0x6c
 8010d6e:	e00d      	b.n	8010d8c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d74:	61bb      	str	r3, [r7, #24]
 8010d76:	e002      	b.n	8010d7e <tcp_enqueue_flags+0x11e>
 8010d78:	69bb      	ldr	r3, [r7, #24]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	61bb      	str	r3, [r7, #24]
 8010d7e:	69bb      	ldr	r3, [r7, #24]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d1f8      	bne.n	8010d78 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010d86:	69bb      	ldr	r3, [r7, #24]
 8010d88:	68fa      	ldr	r2, [r7, #12]
 8010d8a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010d94:	78fb      	ldrb	r3, [r7, #3]
 8010d96:	f003 0302 	and.w	r3, r3, #2
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d104      	bne.n	8010da8 <tcp_enqueue_flags+0x148>
 8010d9e:	78fb      	ldrb	r3, [r7, #3]
 8010da0:	f003 0301 	and.w	r3, r3, #1
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d004      	beq.n	8010db2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010dac:	1c5a      	adds	r2, r3, #1
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010db2:	78fb      	ldrb	r3, [r7, #3]
 8010db4:	f003 0301 	and.w	r3, r3, #1
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d006      	beq.n	8010dca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	8b5b      	ldrh	r3, [r3, #26]
 8010dc0:	f043 0320 	orr.w	r3, r3, #32
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fa fc76 	bl	800b6c0 <pbuf_clen>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dde:	4413      	add	r3, r2
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d00e      	beq.n	8010e10 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d10a      	bne.n	8010e10 <tcp_enqueue_flags+0x1b0>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d106      	bne.n	8010e10 <tcp_enqueue_flags+0x1b0>
 8010e02:	4b06      	ldr	r3, [pc, #24]	; (8010e1c <tcp_enqueue_flags+0x1bc>)
 8010e04:	f240 4265 	movw	r2, #1125	; 0x465
 8010e08:	490b      	ldr	r1, [pc, #44]	; (8010e38 <tcp_enqueue_flags+0x1d8>)
 8010e0a:	4806      	ldr	r0, [pc, #24]	; (8010e24 <tcp_enqueue_flags+0x1c4>)
 8010e0c:	f006 fbc8 	bl	80175a0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010e10:	2300      	movs	r3, #0
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3720      	adds	r7, #32
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	0801e1f8 	.word	0x0801e1f8
 8010e20:	0801e61c 	.word	0x0801e61c
 8010e24:	0801e24c 	.word	0x0801e24c
 8010e28:	0801e674 	.word	0x0801e674
 8010e2c:	0801e694 	.word	0x0801e694
 8010e30:	0801e6d0 	.word	0x0801e6d0
 8010e34:	0801e6e8 	.word	0x0801e6e8
 8010e38:	0801e714 	.word	0x0801e714

08010e3c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010e3c:	b5b0      	push	{r4, r5, r7, lr}
 8010e3e:	b08c      	sub	sp, #48	; 0x30
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg, *useg;
  u32_t wnd, snd_nxt;
  err_t err;
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
 8010e44:	2300      	movs	r3, #0
 8010e46:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d106      	bne.n	8010e5c <tcp_output+0x20>
 8010e4e:	4ba0      	ldr	r3, [pc, #640]	; (80110d0 <tcp_output+0x294>)
 8010e50:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010e54:	499f      	ldr	r1, [pc, #636]	; (80110d4 <tcp_output+0x298>)
 8010e56:	48a0      	ldr	r0, [pc, #640]	; (80110d8 <tcp_output+0x29c>)
 8010e58:	f006 fba2 	bl	80175a0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	7d1b      	ldrb	r3, [r3, #20]
 8010e60:	2b01      	cmp	r3, #1
 8010e62:	d106      	bne.n	8010e72 <tcp_output+0x36>
 8010e64:	4b9a      	ldr	r3, [pc, #616]	; (80110d0 <tcp_output+0x294>)
 8010e66:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010e6a:	499c      	ldr	r1, [pc, #624]	; (80110dc <tcp_output+0x2a0>)
 8010e6c:	489a      	ldr	r0, [pc, #616]	; (80110d8 <tcp_output+0x29c>)
 8010e6e:	f006 fb97 	bl	80175a0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010e72:	4b9b      	ldr	r3, [pc, #620]	; (80110e0 <tcp_output+0x2a4>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d101      	bne.n	8010e80 <tcp_output+0x44>
    return ERR_OK;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	e1d2      	b.n	8011226 <tcp_output+0x3ea>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	bf28      	it	cs
 8010e90:	4613      	movcs	r3, r2
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	61fb      	str	r3, [r7, #28]

  seg = pcb->unsent;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (seg == NULL) {
 8010e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d10b      	bne.n	8010eba <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	8b5b      	ldrh	r3, [r3, #26]
 8010ea6:	f003 0302 	and.w	r3, r3, #2
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	f000 81ae 	beq.w	801120c <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f000 fdcf 	bl	8011a54 <tcp_send_empty_ack>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	e1b5      	b.n	8011226 <tcp_output+0x3ea>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010eba:	6879      	ldr	r1, [r7, #4]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	3304      	adds	r3, #4
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f7ff f822 	bl	800ff0c <tcp_route>
 8010ec8:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d102      	bne.n	8010ed6 <tcp_output+0x9a>
    return ERR_RTE;
 8010ed0:	f06f 0303 	mvn.w	r3, #3
 8010ed4:	e1a7      	b.n	8011226 <tcp_output+0x3ea>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d003      	beq.n	8010ee4 <tcp_output+0xa8>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d111      	bne.n	8010f08 <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010ee4:	69bb      	ldr	r3, [r7, #24]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d002      	beq.n	8010ef0 <tcp_output+0xb4>
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	3304      	adds	r3, #4
 8010eee:	e000      	b.n	8010ef2 <tcp_output+0xb6>
 8010ef0:	2300      	movs	r3, #0
 8010ef2:	617b      	str	r3, [r7, #20]
    if (local_ip == NULL) {
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d102      	bne.n	8010f00 <tcp_output+0xc4>
      return ERR_RTE;
 8010efa:	f06f 0303 	mvn.w	r3, #3
 8010efe:	e192      	b.n	8011226 <tcp_output+0x3ea>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	681a      	ldr	r2, [r3, #0]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0a:	68db      	ldr	r3, [r3, #12]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7f8 ffc9 	bl	8009ea6 <lwip_htonl>
 8010f14:	4602      	mov	r2, r0
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f1a:	1ad3      	subs	r3, r2, r3
 8010f1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f1e:	8912      	ldrh	r2, [r2, #8]
 8010f20:	4413      	add	r3, r2
 8010f22:	69fa      	ldr	r2, [r7, #28]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d227      	bcs.n	8010f78 <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f2e:	461a      	mov	r2, r3
 8010f30:	69fb      	ldr	r3, [r7, #28]
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d114      	bne.n	8010f60 <tcp_output+0x124>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d110      	bne.n	8010f60 <tcp_output+0x124>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d10b      	bne.n	8010f60 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2201      	movs	r2, #1
 8010f54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	8b5b      	ldrh	r3, [r3, #26]
 8010f64:	f003 0302 	and.w	r3, r3, #2
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	f000 8151 	beq.w	8011210 <tcp_output+0x3d4>
      return tcp_send_empty_ack(pcb);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f000 fd70 	bl	8011a54 <tcp_send_empty_ack>
 8010f74:	4603      	mov	r3, r0
 8010f76:	e156      	b.n	8011226 <tcp_output+0x3ea>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (useg != NULL) {
 8010f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f000 8120 	beq.w	80111ce <tcp_output+0x392>
    for (; useg->next != NULL; useg = useg->next);
 8010f8e:	e002      	b.n	8010f96 <tcp_output+0x15a>
 8010f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8010f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d1f8      	bne.n	8010f90 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010f9e:	e116      	b.n	80111ce <tcp_output+0x392>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	899b      	ldrh	r3, [r3, #12]
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7f8 ff67 	bl	8009e7c <lwip_htons>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	f003 0304 	and.w	r3, r3, #4
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d006      	beq.n	8010fc8 <tcp_output+0x18c>
 8010fba:	4b45      	ldr	r3, [pc, #276]	; (80110d0 <tcp_output+0x294>)
 8010fbc:	f240 5236 	movw	r2, #1334	; 0x536
 8010fc0:	4948      	ldr	r1, [pc, #288]	; (80110e4 <tcp_output+0x2a8>)
 8010fc2:	4845      	ldr	r0, [pc, #276]	; (80110d8 <tcp_output+0x29c>)
 8010fc4:	f006 faec 	bl	80175a0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d01f      	beq.n	8011010 <tcp_output+0x1d4>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	8b5b      	ldrh	r3, [r3, #26]
 8010fd4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d119      	bne.n	8011010 <tcp_output+0x1d4>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d00b      	beq.n	8010ffc <tcp_output+0x1c0>
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d110      	bne.n	8011010 <tcp_output+0x1d4>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ff2:	891a      	ldrh	r2, [r3, #8]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d209      	bcs.n	8011010 <tcp_output+0x1d4>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011002:	2b00      	cmp	r3, #0
 8011004:	d004      	beq.n	8011010 <tcp_output+0x1d4>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801100c:	2b08      	cmp	r3, #8
 801100e:	d901      	bls.n	8011014 <tcp_output+0x1d8>
 8011010:	2301      	movs	r3, #1
 8011012:	e000      	b.n	8011016 <tcp_output+0x1da>
 8011014:	2300      	movs	r3, #0
 8011016:	2b00      	cmp	r3, #0
 8011018:	d106      	bne.n	8011028 <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	8b5b      	ldrh	r3, [r3, #26]
 801101e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011022:	2b00      	cmp	r3, #0
 8011024:	f000 80e8 	beq.w	80111f8 <tcp_output+0x3bc>
    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"TCPWNDSIZE_F", cwnd %"TCPWNDSIZE_F", wnd %"U32_F", effwnd %"U32_F", seq %"U32_F", ack %"U32_F", i %"S16_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd,
                                 lwip_ntohl(seg->tcphdr->seqno) + seg->len -
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
 8011028:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801102a:	3301      	adds	r3, #1
 801102c:	b29b      	uxth	r3, r3
 801102e:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	7d1b      	ldrb	r3, [r3, #20]
 8011034:	2b02      	cmp	r3, #2
 8011036:	d00d      	beq.n	8011054 <tcp_output+0x218>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	899b      	ldrh	r3, [r3, #12]
 801103e:	b29c      	uxth	r4, r3
 8011040:	2010      	movs	r0, #16
 8011042:	f7f8 ff1b 	bl	8009e7c <lwip_htons>
 8011046:	4603      	mov	r3, r0
 8011048:	461a      	mov	r2, r3
 801104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801104c:	68db      	ldr	r3, [r3, #12]
 801104e:	4322      	orrs	r2, r4
 8011050:	b292      	uxth	r2, r2
 8011052:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011054:	69ba      	ldr	r2, [r7, #24]
 8011056:	6879      	ldr	r1, [r7, #4]
 8011058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801105a:	f000 f909 	bl	8011270 <tcp_output_segment>
 801105e:	4603      	mov	r3, r0
 8011060:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011062:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d009      	beq.n	801107e <tcp_output+0x242>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	8b5b      	ldrh	r3, [r3, #26]
 801106e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011072:	b29a      	uxth	r2, r3
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	835a      	strh	r2, [r3, #26]
      return err;
 8011078:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801107c:	e0d3      	b.n	8011226 <tcp_output+0x3ea>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801107e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011080:	681a      	ldr	r2, [r3, #0]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	7d1b      	ldrb	r3, [r3, #20]
 801108a:	2b02      	cmp	r3, #2
 801108c:	d006      	beq.n	801109c <tcp_output+0x260>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	8b5b      	ldrh	r3, [r3, #26]
 8011092:	f023 0303 	bic.w	r3, r3, #3
 8011096:	b29a      	uxth	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109e:	68db      	ldr	r3, [r3, #12]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7f8 feff 	bl	8009ea6 <lwip_htonl>
 80110a8:	4604      	mov	r4, r0
 80110aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ac:	891b      	ldrh	r3, [r3, #8]
 80110ae:	461d      	mov	r5, r3
 80110b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	899b      	ldrh	r3, [r3, #12]
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7f8 fedf 	bl	8009e7c <lwip_htons>
 80110be:	4603      	mov	r3, r0
 80110c0:	b2db      	uxtb	r3, r3
 80110c2:	f003 0303 	and.w	r3, r3, #3
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00e      	beq.n	80110e8 <tcp_output+0x2ac>
 80110ca:	2301      	movs	r3, #1
 80110cc:	e00d      	b.n	80110ea <tcp_output+0x2ae>
 80110ce:	bf00      	nop
 80110d0:	0801e1f8 	.word	0x0801e1f8
 80110d4:	0801e73c 	.word	0x0801e73c
 80110d8:	0801e24c 	.word	0x0801e24c
 80110dc:	0801e754 	.word	0x0801e754
 80110e0:	2000d86c 	.word	0x2000d86c
 80110e4:	0801e77c 	.word	0x0801e77c
 80110e8:	2300      	movs	r3, #0
 80110ea:	442b      	add	r3, r5
 80110ec:	4423      	add	r3, r4
 80110ee:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	1ad3      	subs	r3, r2, r3
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	da02      	bge.n	8011102 <tcp_output+0x2c6>
      pcb->snd_nxt = snd_nxt;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	68fa      	ldr	r2, [r7, #12]
 8011100:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011104:	891b      	ldrh	r3, [r3, #8]
 8011106:	461c      	mov	r4, r3
 8011108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	899b      	ldrh	r3, [r3, #12]
 801110e:	b29b      	uxth	r3, r3
 8011110:	4618      	mov	r0, r3
 8011112:	f7f8 feb3 	bl	8009e7c <lwip_htons>
 8011116:	4603      	mov	r3, r0
 8011118:	b2db      	uxtb	r3, r3
 801111a:	f003 0303 	and.w	r3, r3, #3
 801111e:	2b00      	cmp	r3, #0
 8011120:	d001      	beq.n	8011126 <tcp_output+0x2ea>
 8011122:	2301      	movs	r3, #1
 8011124:	e000      	b.n	8011128 <tcp_output+0x2ec>
 8011126:	2300      	movs	r3, #0
 8011128:	4423      	add	r3, r4
 801112a:	2b00      	cmp	r3, #0
 801112c:	d049      	beq.n	80111c2 <tcp_output+0x386>
      seg->next = NULL;
 801112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011130:	2200      	movs	r2, #0
 8011132:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011138:	2b00      	cmp	r3, #0
 801113a:	d105      	bne.n	8011148 <tcp_output+0x30c>
        pcb->unacked = seg;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011140:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011144:	62bb      	str	r3, [r7, #40]	; 0x28
 8011146:	e03f      	b.n	80111c8 <tcp_output+0x38c>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801114a:	68db      	ldr	r3, [r3, #12]
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	4618      	mov	r0, r3
 8011150:	f7f8 fea9 	bl	8009ea6 <lwip_htonl>
 8011154:	4604      	mov	r4, r0
 8011156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011158:	68db      	ldr	r3, [r3, #12]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	4618      	mov	r0, r3
 801115e:	f7f8 fea2 	bl	8009ea6 <lwip_htonl>
 8011162:	4603      	mov	r3, r0
 8011164:	1ae3      	subs	r3, r4, r3
 8011166:	2b00      	cmp	r3, #0
 8011168:	da24      	bge.n	80111b4 <tcp_output+0x378>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	3370      	adds	r3, #112	; 0x70
 801116e:	623b      	str	r3, [r7, #32]
          while (*cur_seg &&
 8011170:	e002      	b.n	8011178 <tcp_output+0x33c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011172:	6a3b      	ldr	r3, [r7, #32]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	623b      	str	r3, [r7, #32]
          while (*cur_seg &&
 8011178:	6a3b      	ldr	r3, [r7, #32]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d011      	beq.n	80111a4 <tcp_output+0x368>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011180:	6a3b      	ldr	r3, [r7, #32]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	685b      	ldr	r3, [r3, #4]
 8011188:	4618      	mov	r0, r3
 801118a:	f7f8 fe8c 	bl	8009ea6 <lwip_htonl>
 801118e:	4604      	mov	r4, r0
 8011190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	4618      	mov	r0, r3
 8011198:	f7f8 fe85 	bl	8009ea6 <lwip_htonl>
 801119c:	4603      	mov	r3, r0
 801119e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	dbe6      	blt.n	8011172 <tcp_output+0x336>
          }
          seg->next = (*cur_seg);
 80111a4:	6a3b      	ldr	r3, [r7, #32]
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111aa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80111ac:	6a3b      	ldr	r3, [r7, #32]
 80111ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111b0:	601a      	str	r2, [r3, #0]
 80111b2:	e009      	b.n	80111c8 <tcp_output+0x38c>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80111b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111b8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80111ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	62bb      	str	r3, [r7, #40]	; 0x28
 80111c0:	e002      	b.n	80111c8 <tcp_output+0x38c>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80111c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111c4:	f7fb fe35 	bl	800ce32 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (seg != NULL &&
 80111ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d012      	beq.n	80111fa <tcp_output+0x3be>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80111d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	4618      	mov	r0, r3
 80111dc:	f7f8 fe63 	bl	8009ea6 <lwip_htonl>
 80111e0:	4602      	mov	r2, r0
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111e6:	1ad3      	subs	r3, r2, r3
 80111e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111ea:	8912      	ldrh	r2, [r2, #8]
 80111ec:	4413      	add	r3, r2
  while (seg != NULL &&
 80111ee:	69fa      	ldr	r2, [r7, #28]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	f4bf aed5 	bcs.w	8010fa0 <tcp_output+0x164>
 80111f6:	e000      	b.n	80111fa <tcp_output+0x3be>
      break;
 80111f8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d108      	bne.n	8011214 <tcp_output+0x3d8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2200      	movs	r2, #0
 8011206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801120a:	e004      	b.n	8011216 <tcp_output+0x3da>
    goto output_done;
 801120c:	bf00      	nop
 801120e:	e002      	b.n	8011216 <tcp_output+0x3da>
    goto output_done;
 8011210:	bf00      	nop
 8011212:	e000      	b.n	8011216 <tcp_output+0x3da>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011214:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	8b5b      	ldrh	r3, [r3, #26]
 801121a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801121e:	b29a      	uxth	r2, r3
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011224:	2300      	movs	r3, #0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3730      	adds	r7, #48	; 0x30
 801122a:	46bd      	mov	sp, r7
 801122c:	bdb0      	pop	{r4, r5, r7, pc}
 801122e:	bf00      	nop

08011230 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d106      	bne.n	801124c <tcp_output_segment_busy+0x1c>
 801123e:	4b09      	ldr	r3, [pc, #36]	; (8011264 <tcp_output_segment_busy+0x34>)
 8011240:	f240 529a 	movw	r2, #1434	; 0x59a
 8011244:	4908      	ldr	r1, [pc, #32]	; (8011268 <tcp_output_segment_busy+0x38>)
 8011246:	4809      	ldr	r0, [pc, #36]	; (801126c <tcp_output_segment_busy+0x3c>)
 8011248:	f006 f9aa 	bl	80175a0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	7b9b      	ldrb	r3, [r3, #14]
 8011252:	2b01      	cmp	r3, #1
 8011254:	d001      	beq.n	801125a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011256:	2301      	movs	r3, #1
 8011258:	e000      	b.n	801125c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801125a:	2300      	movs	r3, #0
}
 801125c:	4618      	mov	r0, r3
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	0801e1f8 	.word	0x0801e1f8
 8011268:	0801e794 	.word	0x0801e794
 801126c:	0801e24c 	.word	0x0801e24c

08011270 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011270:	b5b0      	push	{r4, r5, r7, lr}
 8011272:	b08c      	sub	sp, #48	; 0x30
 8011274:	af04      	add	r7, sp, #16
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	60b9      	str	r1, [r7, #8]
 801127a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d106      	bne.n	8011290 <tcp_output_segment+0x20>
 8011282:	4b63      	ldr	r3, [pc, #396]	; (8011410 <tcp_output_segment+0x1a0>)
 8011284:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011288:	4962      	ldr	r1, [pc, #392]	; (8011414 <tcp_output_segment+0x1a4>)
 801128a:	4863      	ldr	r0, [pc, #396]	; (8011418 <tcp_output_segment+0x1a8>)
 801128c:	f006 f988 	bl	80175a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d106      	bne.n	80112a4 <tcp_output_segment+0x34>
 8011296:	4b5e      	ldr	r3, [pc, #376]	; (8011410 <tcp_output_segment+0x1a0>)
 8011298:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801129c:	495f      	ldr	r1, [pc, #380]	; (801141c <tcp_output_segment+0x1ac>)
 801129e:	485e      	ldr	r0, [pc, #376]	; (8011418 <tcp_output_segment+0x1a8>)
 80112a0:	f006 f97e 	bl	80175a0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d106      	bne.n	80112b8 <tcp_output_segment+0x48>
 80112aa:	4b59      	ldr	r3, [pc, #356]	; (8011410 <tcp_output_segment+0x1a0>)
 80112ac:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80112b0:	495b      	ldr	r1, [pc, #364]	; (8011420 <tcp_output_segment+0x1b0>)
 80112b2:	4859      	ldr	r0, [pc, #356]	; (8011418 <tcp_output_segment+0x1a8>)
 80112b4:	f006 f974 	bl	80175a0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80112b8:	68f8      	ldr	r0, [r7, #12]
 80112ba:	f7ff ffb9 	bl	8011230 <tcp_output_segment_busy>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d001      	beq.n	80112c8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	e09f      	b.n	8011408 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80112c8:	68bb      	ldr	r3, [r7, #8]
 80112ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	68dc      	ldr	r4, [r3, #12]
 80112d0:	4610      	mov	r0, r2
 80112d2:	f7f8 fde8 	bl	8009ea6 <lwip_htonl>
 80112d6:	4603      	mov	r3, r0
 80112d8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	68dc      	ldr	r4, [r3, #12]
 80112e2:	4610      	mov	r0, r2
 80112e4:	f7f8 fdca 	bl	8009e7c <lwip_htons>
 80112e8:	4603      	mov	r3, r0
 80112ea:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112f0:	68ba      	ldr	r2, [r7, #8]
 80112f2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80112f4:	441a      	add	r2, r3
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	3314      	adds	r3, #20
 8011300:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	7a9b      	ldrb	r3, [r3, #10]
 8011306:	f003 0301 	and.w	r3, r3, #1
 801130a:	2b00      	cmp	r3, #0
 801130c:	d015      	beq.n	801133a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	3304      	adds	r3, #4
 8011312:	461a      	mov	r2, r3
 8011314:	6879      	ldr	r1, [r7, #4]
 8011316:	f44f 7006 	mov.w	r0, #536	; 0x218
 801131a:	f7fc f97d 	bl	800d618 <tcp_eff_send_mss_netif>
 801131e:	4603      	mov	r3, r0
 8011320:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011322:	8b7b      	ldrh	r3, [r7, #26]
 8011324:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011328:	4618      	mov	r0, r3
 801132a:	f7f8 fdbc 	bl	8009ea6 <lwip_htonl>
 801132e:	4602      	mov	r2, r0
 8011330:	69fb      	ldr	r3, [r7, #28]
 8011332:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011334:	69fb      	ldr	r3, [r7, #28]
 8011336:	3304      	adds	r3, #4
 8011338:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011340:	2b00      	cmp	r3, #0
 8011342:	da02      	bge.n	801134a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	2200      	movs	r2, #0
 8011348:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801134e:	2b00      	cmp	r3, #0
 8011350:	d10c      	bne.n	801136c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011352:	4b34      	ldr	r3, [pc, #208]	; (8011424 <tcp_output_segment+0x1b4>)
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	68db      	ldr	r3, [r3, #12]
 801135e:	685b      	ldr	r3, [r3, #4]
 8011360:	4618      	mov	r0, r3
 8011362:	f7f8 fda0 	bl	8009ea6 <lwip_htonl>
 8011366:	4602      	mov	r2, r0
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	68da      	ldr	r2, [r3, #12]
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	685b      	ldr	r3, [r3, #4]
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	1ad3      	subs	r3, r2, r3
 8011378:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	8959      	ldrh	r1, [r3, #10]
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	8b3a      	ldrh	r2, [r7, #24]
 8011386:	1a8a      	subs	r2, r1, r2
 8011388:	b292      	uxth	r2, r2
 801138a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	685b      	ldr	r3, [r3, #4]
 8011390:	8919      	ldrh	r1, [r3, #8]
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	8b3a      	ldrh	r2, [r7, #24]
 8011398:	1a8a      	subs	r2, r1, r2
 801139a:	b292      	uxth	r2, r2
 801139c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	68fa      	ldr	r2, [r7, #12]
 80113a4:	68d2      	ldr	r2, [r2, #12]
 80113a6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	2200      	movs	r2, #0
 80113ae:	741a      	strb	r2, [r3, #16]
 80113b0:	2200      	movs	r2, #0
 80113b2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	68db      	ldr	r3, [r3, #12]
 80113b8:	f103 0214 	add.w	r2, r3, #20
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	7a9b      	ldrb	r3, [r3, #10]
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	f003 0304 	and.w	r3, r3, #4
 80113c6:	4413      	add	r3, r2
 80113c8:	69fa      	ldr	r2, [r7, #28]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d006      	beq.n	80113dc <tcp_output_segment+0x16c>
 80113ce:	4b10      	ldr	r3, [pc, #64]	; (8011410 <tcp_output_segment+0x1a0>)
 80113d0:	f240 621c 	movw	r2, #1564	; 0x61c
 80113d4:	4914      	ldr	r1, [pc, #80]	; (8011428 <tcp_output_segment+0x1b8>)
 80113d6:	4810      	ldr	r0, [pc, #64]	; (8011418 <tcp_output_segment+0x1a8>)
 80113d8:	f006 f8e2 	bl	80175a0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	6858      	ldr	r0, [r3, #4]
 80113e0:	68b9      	ldr	r1, [r7, #8]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	1d1c      	adds	r4, r3, #4
 80113e6:	68bb      	ldr	r3, [r7, #8]
 80113e8:	7add      	ldrb	r5, [r3, #11]
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	7a9b      	ldrb	r3, [r3, #10]
 80113ee:	687a      	ldr	r2, [r7, #4]
 80113f0:	9202      	str	r2, [sp, #8]
 80113f2:	2206      	movs	r2, #6
 80113f4:	9201      	str	r2, [sp, #4]
 80113f6:	9300      	str	r3, [sp, #0]
 80113f8:	462b      	mov	r3, r5
 80113fa:	4622      	mov	r2, r4
 80113fc:	f004 fbc4 	bl	8015b88 <ip4_output_if>
 8011400:	4603      	mov	r3, r0
 8011402:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011408:	4618      	mov	r0, r3
 801140a:	3720      	adds	r7, #32
 801140c:	46bd      	mov	sp, r7
 801140e:	bdb0      	pop	{r4, r5, r7, pc}
 8011410:	0801e1f8 	.word	0x0801e1f8
 8011414:	0801e7bc 	.word	0x0801e7bc
 8011418:	0801e24c 	.word	0x0801e24c
 801141c:	0801e7dc 	.word	0x0801e7dc
 8011420:	0801e7fc 	.word	0x0801e7fc
 8011424:	2000d85c 	.word	0x2000d85c
 8011428:	0801e820 	.word	0x0801e820

0801142c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801142c:	b5b0      	push	{r4, r5, r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d106      	bne.n	8011448 <tcp_rexmit_rto_prepare+0x1c>
 801143a:	4b31      	ldr	r3, [pc, #196]	; (8011500 <tcp_rexmit_rto_prepare+0xd4>)
 801143c:	f240 6263 	movw	r2, #1635	; 0x663
 8011440:	4930      	ldr	r1, [pc, #192]	; (8011504 <tcp_rexmit_rto_prepare+0xd8>)
 8011442:	4831      	ldr	r0, [pc, #196]	; (8011508 <tcp_rexmit_rto_prepare+0xdc>)
 8011444:	f006 f8ac 	bl	80175a0 <iprintf>

  if (pcb->unacked == NULL) {
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801144c:	2b00      	cmp	r3, #0
 801144e:	d102      	bne.n	8011456 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011450:	f06f 0305 	mvn.w	r3, #5
 8011454:	e050      	b.n	80114f8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801145a:	60fb      	str	r3, [r7, #12]
 801145c:	e00b      	b.n	8011476 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801145e:	68f8      	ldr	r0, [r7, #12]
 8011460:	f7ff fee6 	bl	8011230 <tcp_output_segment_busy>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d002      	beq.n	8011470 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801146a:	f06f 0305 	mvn.w	r3, #5
 801146e:	e043      	b.n	80114f8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	60fb      	str	r3, [r7, #12]
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d1ef      	bne.n	801145e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801147e:	68f8      	ldr	r0, [r7, #12]
 8011480:	f7ff fed6 	bl	8011230 <tcp_output_segment_busy>
 8011484:	4603      	mov	r3, r0
 8011486:	2b00      	cmp	r3, #0
 8011488:	d002      	beq.n	8011490 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801148a:	f06f 0305 	mvn.w	r3, #5
 801148e:	e033      	b.n	80114f8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2200      	movs	r2, #0
 80114a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	8b5b      	ldrh	r3, [r3, #26]
 80114aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80114ae:	b29a      	uxth	r2, r3
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7f8 fcf3 	bl	8009ea6 <lwip_htonl>
 80114c0:	4604      	mov	r4, r0
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	891b      	ldrh	r3, [r3, #8]
 80114c6:	461d      	mov	r5, r3
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	899b      	ldrh	r3, [r3, #12]
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	4618      	mov	r0, r3
 80114d2:	f7f8 fcd3 	bl	8009e7c <lwip_htons>
 80114d6:	4603      	mov	r3, r0
 80114d8:	b2db      	uxtb	r3, r3
 80114da:	f003 0303 	and.w	r3, r3, #3
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d001      	beq.n	80114e6 <tcp_rexmit_rto_prepare+0xba>
 80114e2:	2301      	movs	r3, #1
 80114e4:	e000      	b.n	80114e8 <tcp_rexmit_rto_prepare+0xbc>
 80114e6:	2300      	movs	r3, #0
 80114e8:	442b      	add	r3, r5
 80114ea:	18e2      	adds	r2, r4, r3
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2200      	movs	r2, #0
 80114f4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80114f6:	2300      	movs	r3, #0
}
 80114f8:	4618      	mov	r0, r3
 80114fa:	3710      	adds	r7, #16
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bdb0      	pop	{r4, r5, r7, pc}
 8011500:	0801e1f8 	.word	0x0801e1f8
 8011504:	0801e834 	.word	0x0801e834
 8011508:	0801e24c 	.word	0x0801e24c

0801150c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d106      	bne.n	8011528 <tcp_rexmit_rto_commit+0x1c>
 801151a:	4b0d      	ldr	r3, [pc, #52]	; (8011550 <tcp_rexmit_rto_commit+0x44>)
 801151c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011520:	490c      	ldr	r1, [pc, #48]	; (8011554 <tcp_rexmit_rto_commit+0x48>)
 8011522:	480d      	ldr	r0, [pc, #52]	; (8011558 <tcp_rexmit_rto_commit+0x4c>)
 8011524:	f006 f83c 	bl	80175a0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801152e:	2bff      	cmp	r3, #255	; 0xff
 8011530:	d007      	beq.n	8011542 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011538:	3301      	adds	r3, #1
 801153a:	b2da      	uxtb	r2, r3
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f7ff fc7a 	bl	8010e3c <tcp_output>
}
 8011548:	bf00      	nop
 801154a:	3708      	adds	r7, #8
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	0801e1f8 	.word	0x0801e1f8
 8011554:	0801e858 	.word	0x0801e858
 8011558:	0801e24c 	.word	0x0801e24c

0801155c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b082      	sub	sp, #8
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d106      	bne.n	8011578 <tcp_rexmit_rto+0x1c>
 801156a:	4b0a      	ldr	r3, [pc, #40]	; (8011594 <tcp_rexmit_rto+0x38>)
 801156c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011570:	4909      	ldr	r1, [pc, #36]	; (8011598 <tcp_rexmit_rto+0x3c>)
 8011572:	480a      	ldr	r0, [pc, #40]	; (801159c <tcp_rexmit_rto+0x40>)
 8011574:	f006 f814 	bl	80175a0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f7ff ff57 	bl	801142c <tcp_rexmit_rto_prepare>
 801157e:	4603      	mov	r3, r0
 8011580:	2b00      	cmp	r3, #0
 8011582:	d102      	bne.n	801158a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7ff ffc1 	bl	801150c <tcp_rexmit_rto_commit>
  }
}
 801158a:	bf00      	nop
 801158c:	3708      	adds	r7, #8
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	0801e1f8 	.word	0x0801e1f8
 8011598:	0801e87c 	.word	0x0801e87c
 801159c:	0801e24c 	.word	0x0801e24c

080115a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80115a0:	b590      	push	{r4, r7, lr}
 80115a2:	b085      	sub	sp, #20
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d106      	bne.n	80115bc <tcp_rexmit+0x1c>
 80115ae:	4b2f      	ldr	r3, [pc, #188]	; (801166c <tcp_rexmit+0xcc>)
 80115b0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80115b4:	492e      	ldr	r1, [pc, #184]	; (8011670 <tcp_rexmit+0xd0>)
 80115b6:	482f      	ldr	r0, [pc, #188]	; (8011674 <tcp_rexmit+0xd4>)
 80115b8:	f005 fff2 	bl	80175a0 <iprintf>

  if (pcb->unacked == NULL) {
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d102      	bne.n	80115ca <tcp_rexmit+0x2a>
    return ERR_VAL;
 80115c4:	f06f 0305 	mvn.w	r3, #5
 80115c8:	e04c      	b.n	8011664 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80115d0:	68b8      	ldr	r0, [r7, #8]
 80115d2:	f7ff fe2d 	bl	8011230 <tcp_output_segment_busy>
 80115d6:	4603      	mov	r3, r0
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d002      	beq.n	80115e2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80115dc:	f06f 0305 	mvn.w	r3, #5
 80115e0:	e040      	b.n	8011664 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	336c      	adds	r3, #108	; 0x6c
 80115ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80115f0:	e002      	b.n	80115f8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d011      	beq.n	8011624 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	685b      	ldr	r3, [r3, #4]
 8011608:	4618      	mov	r0, r3
 801160a:	f7f8 fc4c 	bl	8009ea6 <lwip_htonl>
 801160e:	4604      	mov	r4, r0
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	4618      	mov	r0, r3
 8011618:	f7f8 fc45 	bl	8009ea6 <lwip_htonl>
 801161c:	4603      	mov	r3, r0
 801161e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011620:	2b00      	cmp	r3, #0
 8011622:	dbe6      	blt.n	80115f2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	681a      	ldr	r2, [r3, #0]
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	68ba      	ldr	r2, [r7, #8]
 8011630:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d103      	bne.n	8011642 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011648:	2bff      	cmp	r3, #255	; 0xff
 801164a:	d007      	beq.n	801165c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011652:	3301      	adds	r3, #1
 8011654:	b2da      	uxtb	r2, r3
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2200      	movs	r2, #0
 8011660:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011662:	2300      	movs	r3, #0
}
 8011664:	4618      	mov	r0, r3
 8011666:	3714      	adds	r7, #20
 8011668:	46bd      	mov	sp, r7
 801166a:	bd90      	pop	{r4, r7, pc}
 801166c:	0801e1f8 	.word	0x0801e1f8
 8011670:	0801e898 	.word	0x0801e898
 8011674:	0801e24c 	.word	0x0801e24c

08011678 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b082      	sub	sp, #8
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d106      	bne.n	8011694 <tcp_rexmit_fast+0x1c>
 8011686:	4b2a      	ldr	r3, [pc, #168]	; (8011730 <tcp_rexmit_fast+0xb8>)
 8011688:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801168c:	4929      	ldr	r1, [pc, #164]	; (8011734 <tcp_rexmit_fast+0xbc>)
 801168e:	482a      	ldr	r0, [pc, #168]	; (8011738 <tcp_rexmit_fast+0xc0>)
 8011690:	f005 ff86 	bl	80175a0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011698:	2b00      	cmp	r3, #0
 801169a:	d044      	beq.n	8011726 <tcp_rexmit_fast+0xae>
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	8b5b      	ldrh	r3, [r3, #26]
 80116a0:	f003 0304 	and.w	r3, r3, #4
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d13e      	bne.n	8011726 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80116a8:	6878      	ldr	r0, [r7, #4]
 80116aa:	f7ff ff79 	bl	80115a0 <tcp_rexmit>
 80116ae:	4603      	mov	r3, r0
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d138      	bne.n	8011726 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116c0:	4293      	cmp	r3, r2
 80116c2:	bf28      	it	cs
 80116c4:	4613      	movcs	r3, r2
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	0fda      	lsrs	r2, r3, #31
 80116ca:	4413      	add	r3, r2
 80116cc:	105b      	asrs	r3, r3, #1
 80116ce:	b29a      	uxth	r2, r3
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80116dc:	461a      	mov	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116e2:	005b      	lsls	r3, r3, #1
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d206      	bcs.n	80116f6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116ec:	005b      	lsls	r3, r3, #1
 80116ee:	b29a      	uxth	r2, r3
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011700:	4619      	mov	r1, r3
 8011702:	0049      	lsls	r1, r1, #1
 8011704:	440b      	add	r3, r1
 8011706:	b29b      	uxth	r3, r3
 8011708:	4413      	add	r3, r2
 801170a:	b29a      	uxth	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	8b5b      	ldrh	r3, [r3, #26]
 8011716:	f043 0304 	orr.w	r3, r3, #4
 801171a:	b29a      	uxth	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2200      	movs	r2, #0
 8011724:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011726:	bf00      	nop
 8011728:	3708      	adds	r7, #8
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	0801e1f8 	.word	0x0801e1f8
 8011734:	0801e8b0 	.word	0x0801e8b0
 8011738:	0801e24c 	.word	0x0801e24c

0801173c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b086      	sub	sp, #24
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	607b      	str	r3, [r7, #4]
 8011746:	460b      	mov	r3, r1
 8011748:	817b      	strh	r3, [r7, #10]
 801174a:	4613      	mov	r3, r2
 801174c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801174e:	897a      	ldrh	r2, [r7, #10]
 8011750:	893b      	ldrh	r3, [r7, #8]
 8011752:	4413      	add	r3, r2
 8011754:	b29b      	uxth	r3, r3
 8011756:	3314      	adds	r3, #20
 8011758:	b29b      	uxth	r3, r3
 801175a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801175e:	4619      	mov	r1, r3
 8011760:	2022      	movs	r0, #34	; 0x22
 8011762:	f7f9 fc41 	bl	800afe8 <pbuf_alloc>
 8011766:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d04d      	beq.n	801180a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801176e:	897b      	ldrh	r3, [r7, #10]
 8011770:	3313      	adds	r3, #19
 8011772:	697a      	ldr	r2, [r7, #20]
 8011774:	8952      	ldrh	r2, [r2, #10]
 8011776:	4293      	cmp	r3, r2
 8011778:	db06      	blt.n	8011788 <tcp_output_alloc_header_common+0x4c>
 801177a:	4b26      	ldr	r3, [pc, #152]	; (8011814 <tcp_output_alloc_header_common+0xd8>)
 801177c:	f240 7223 	movw	r2, #1827	; 0x723
 8011780:	4925      	ldr	r1, [pc, #148]	; (8011818 <tcp_output_alloc_header_common+0xdc>)
 8011782:	4826      	ldr	r0, [pc, #152]	; (801181c <tcp_output_alloc_header_common+0xe0>)
 8011784:	f005 ff0c 	bl	80175a0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	685b      	ldr	r3, [r3, #4]
 801178c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801178e:	8c3b      	ldrh	r3, [r7, #32]
 8011790:	4618      	mov	r0, r3
 8011792:	f7f8 fb73 	bl	8009e7c <lwip_htons>
 8011796:	4603      	mov	r3, r0
 8011798:	461a      	mov	r2, r3
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801179e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7f8 fb6b 	bl	8009e7c <lwip_htons>
 80117a6:	4603      	mov	r3, r0
 80117a8:	461a      	mov	r2, r3
 80117aa:	693b      	ldr	r3, [r7, #16]
 80117ac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	687a      	ldr	r2, [r7, #4]
 80117b2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80117b4:	68f8      	ldr	r0, [r7, #12]
 80117b6:	f7f8 fb76 	bl	8009ea6 <lwip_htonl>
 80117ba:	4602      	mov	r2, r0
 80117bc:	693b      	ldr	r3, [r7, #16]
 80117be:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80117c0:	897b      	ldrh	r3, [r7, #10]
 80117c2:	089b      	lsrs	r3, r3, #2
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	3305      	adds	r3, #5
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	031b      	lsls	r3, r3, #12
 80117cc:	b29a      	uxth	r2, r3
 80117ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	4313      	orrs	r3, r2
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4618      	mov	r0, r3
 80117da:	f7f8 fb4f 	bl	8009e7c <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	461a      	mov	r2, r3
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80117e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80117e8:	4618      	mov	r0, r3
 80117ea:	f7f8 fb47 	bl	8009e7c <lwip_htons>
 80117ee:	4603      	mov	r3, r0
 80117f0:	461a      	mov	r2, r3
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80117f6:	693b      	ldr	r3, [r7, #16]
 80117f8:	2200      	movs	r2, #0
 80117fa:	741a      	strb	r2, [r3, #16]
 80117fc:	2200      	movs	r2, #0
 80117fe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	2200      	movs	r2, #0
 8011804:	749a      	strb	r2, [r3, #18]
 8011806:	2200      	movs	r2, #0
 8011808:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801180a:	697b      	ldr	r3, [r7, #20]
}
 801180c:	4618      	mov	r0, r3
 801180e:	3718      	adds	r7, #24
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}
 8011814:	0801e1f8 	.word	0x0801e1f8
 8011818:	0801e8d0 	.word	0x0801e8d0
 801181c:	0801e24c 	.word	0x0801e24c

08011820 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011820:	b5b0      	push	{r4, r5, r7, lr}
 8011822:	b08a      	sub	sp, #40	; 0x28
 8011824:	af04      	add	r7, sp, #16
 8011826:	60f8      	str	r0, [r7, #12]
 8011828:	607b      	str	r3, [r7, #4]
 801182a:	460b      	mov	r3, r1
 801182c:	817b      	strh	r3, [r7, #10]
 801182e:	4613      	mov	r3, r2
 8011830:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d106      	bne.n	8011846 <tcp_output_alloc_header+0x26>
 8011838:	4b15      	ldr	r3, [pc, #84]	; (8011890 <tcp_output_alloc_header+0x70>)
 801183a:	f240 7242 	movw	r2, #1858	; 0x742
 801183e:	4915      	ldr	r1, [pc, #84]	; (8011894 <tcp_output_alloc_header+0x74>)
 8011840:	4815      	ldr	r0, [pc, #84]	; (8011898 <tcp_output_alloc_header+0x78>)
 8011842:	f005 fead 	bl	80175a0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	8adb      	ldrh	r3, [r3, #22]
 801184e:	68fa      	ldr	r2, [r7, #12]
 8011850:	8b12      	ldrh	r2, [r2, #24]
 8011852:	68f9      	ldr	r1, [r7, #12]
 8011854:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011856:	893d      	ldrh	r5, [r7, #8]
 8011858:	897c      	ldrh	r4, [r7, #10]
 801185a:	9103      	str	r1, [sp, #12]
 801185c:	2110      	movs	r1, #16
 801185e:	9102      	str	r1, [sp, #8]
 8011860:	9201      	str	r2, [sp, #4]
 8011862:	9300      	str	r3, [sp, #0]
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	462a      	mov	r2, r5
 8011868:	4621      	mov	r1, r4
 801186a:	f7ff ff67 	bl	801173c <tcp_output_alloc_header_common>
 801186e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	2b00      	cmp	r3, #0
 8011874:	d006      	beq.n	8011884 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801187e:	441a      	add	r2, r3
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011884:	697b      	ldr	r3, [r7, #20]
}
 8011886:	4618      	mov	r0, r3
 8011888:	3718      	adds	r7, #24
 801188a:	46bd      	mov	sp, r7
 801188c:	bdb0      	pop	{r4, r5, r7, pc}
 801188e:	bf00      	nop
 8011890:	0801e1f8 	.word	0x0801e1f8
 8011894:	0801e900 	.word	0x0801e900
 8011898:	0801e24c 	.word	0x0801e24c

0801189c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b088      	sub	sp, #32
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	4611      	mov	r1, r2
 80118a8:	461a      	mov	r2, r3
 80118aa:	460b      	mov	r3, r1
 80118ac:	71fb      	strb	r3, [r7, #7]
 80118ae:	4613      	mov	r3, r2
 80118b0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80118b2:	2300      	movs	r3, #0
 80118b4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d106      	bne.n	80118ca <tcp_output_fill_options+0x2e>
 80118bc:	4b13      	ldr	r3, [pc, #76]	; (801190c <tcp_output_fill_options+0x70>)
 80118be:	f240 7256 	movw	r2, #1878	; 0x756
 80118c2:	4913      	ldr	r1, [pc, #76]	; (8011910 <tcp_output_fill_options+0x74>)
 80118c4:	4813      	ldr	r0, [pc, #76]	; (8011914 <tcp_output_fill_options+0x78>)
 80118c6:	f005 fe6b 	bl	80175a0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80118ca:	68bb      	ldr	r3, [r7, #8]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80118d0:	69bb      	ldr	r3, [r7, #24]
 80118d2:	3314      	adds	r3, #20
 80118d4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80118d6:	69bb      	ldr	r3, [r7, #24]
 80118d8:	f103 0214 	add.w	r2, r3, #20
 80118dc:	8bfb      	ldrh	r3, [r7, #30]
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	4619      	mov	r1, r3
 80118e2:	79fb      	ldrb	r3, [r7, #7]
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	f003 0304 	and.w	r3, r3, #4
 80118ea:	440b      	add	r3, r1
 80118ec:	4413      	add	r3, r2
 80118ee:	697a      	ldr	r2, [r7, #20]
 80118f0:	429a      	cmp	r2, r3
 80118f2:	d006      	beq.n	8011902 <tcp_output_fill_options+0x66>
 80118f4:	4b05      	ldr	r3, [pc, #20]	; (801190c <tcp_output_fill_options+0x70>)
 80118f6:	f240 7275 	movw	r2, #1909	; 0x775
 80118fa:	4907      	ldr	r1, [pc, #28]	; (8011918 <tcp_output_fill_options+0x7c>)
 80118fc:	4805      	ldr	r0, [pc, #20]	; (8011914 <tcp_output_fill_options+0x78>)
 80118fe:	f005 fe4f 	bl	80175a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011902:	bf00      	nop
 8011904:	3720      	adds	r7, #32
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}
 801190a:	bf00      	nop
 801190c:	0801e1f8 	.word	0x0801e1f8
 8011910:	0801e928 	.word	0x0801e928
 8011914:	0801e24c 	.word	0x0801e24c
 8011918:	0801e820 	.word	0x0801e820

0801191c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b08a      	sub	sp, #40	; 0x28
 8011920:	af04      	add	r7, sp, #16
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	607a      	str	r2, [r7, #4]
 8011928:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d106      	bne.n	801193e <tcp_output_control_segment+0x22>
 8011930:	4b1c      	ldr	r3, [pc, #112]	; (80119a4 <tcp_output_control_segment+0x88>)
 8011932:	f240 7287 	movw	r2, #1927	; 0x787
 8011936:	491c      	ldr	r1, [pc, #112]	; (80119a8 <tcp_output_control_segment+0x8c>)
 8011938:	481c      	ldr	r0, [pc, #112]	; (80119ac <tcp_output_control_segment+0x90>)
 801193a:	f005 fe31 	bl	80175a0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801193e:	683a      	ldr	r2, [r7, #0]
 8011940:	6879      	ldr	r1, [r7, #4]
 8011942:	68f8      	ldr	r0, [r7, #12]
 8011944:	f7fe fae2 	bl	800ff0c <tcp_route>
 8011948:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	2b00      	cmp	r3, #0
 801194e:	d102      	bne.n	8011956 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011950:	23fc      	movs	r3, #252	; 0xfc
 8011952:	75fb      	strb	r3, [r7, #23]
 8011954:	e01c      	b.n	8011990 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d006      	beq.n	801196a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	7adb      	ldrb	r3, [r3, #11]
 8011960:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	7a9b      	ldrb	r3, [r3, #10]
 8011966:	757b      	strb	r3, [r7, #21]
 8011968:	e003      	b.n	8011972 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801196a:	23ff      	movs	r3, #255	; 0xff
 801196c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801196e:	2300      	movs	r3, #0
 8011970:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011972:	7dba      	ldrb	r2, [r7, #22]
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	9302      	str	r3, [sp, #8]
 8011978:	2306      	movs	r3, #6
 801197a:	9301      	str	r3, [sp, #4]
 801197c:	7d7b      	ldrb	r3, [r7, #21]
 801197e:	9300      	str	r3, [sp, #0]
 8011980:	4613      	mov	r3, r2
 8011982:	683a      	ldr	r2, [r7, #0]
 8011984:	6879      	ldr	r1, [r7, #4]
 8011986:	68b8      	ldr	r0, [r7, #8]
 8011988:	f004 f8fe 	bl	8015b88 <ip4_output_if>
 801198c:	4603      	mov	r3, r0
 801198e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011990:	68b8      	ldr	r0, [r7, #8]
 8011992:	f7f9 fe0d 	bl	800b5b0 <pbuf_free>
  return err;
 8011996:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801199a:	4618      	mov	r0, r3
 801199c:	3718      	adds	r7, #24
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd80      	pop	{r7, pc}
 80119a2:	bf00      	nop
 80119a4:	0801e1f8 	.word	0x0801e1f8
 80119a8:	0801e950 	.word	0x0801e950
 80119ac:	0801e24c 	.word	0x0801e24c

080119b0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80119b0:	b590      	push	{r4, r7, lr}
 80119b2:	b08b      	sub	sp, #44	; 0x2c
 80119b4:	af04      	add	r7, sp, #16
 80119b6:	60f8      	str	r0, [r7, #12]
 80119b8:	60b9      	str	r1, [r7, #8]
 80119ba:	607a      	str	r2, [r7, #4]
 80119bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d106      	bne.n	80119d2 <tcp_rst+0x22>
 80119c4:	4b1f      	ldr	r3, [pc, #124]	; (8011a44 <tcp_rst+0x94>)
 80119c6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80119ca:	491f      	ldr	r1, [pc, #124]	; (8011a48 <tcp_rst+0x98>)
 80119cc:	481f      	ldr	r0, [pc, #124]	; (8011a4c <tcp_rst+0x9c>)
 80119ce:	f005 fde7 	bl	80175a0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80119d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d106      	bne.n	80119e6 <tcp_rst+0x36>
 80119d8:	4b1a      	ldr	r3, [pc, #104]	; (8011a44 <tcp_rst+0x94>)
 80119da:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80119de:	491c      	ldr	r1, [pc, #112]	; (8011a50 <tcp_rst+0xa0>)
 80119e0:	481a      	ldr	r0, [pc, #104]	; (8011a4c <tcp_rst+0x9c>)
 80119e2:	f005 fddd 	bl	80175a0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80119e6:	2300      	movs	r3, #0
 80119e8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80119ea:	f246 0308 	movw	r3, #24584	; 0x6008
 80119ee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80119f0:	7dfb      	ldrb	r3, [r7, #23]
 80119f2:	b29c      	uxth	r4, r3
 80119f4:	68b8      	ldr	r0, [r7, #8]
 80119f6:	f7f8 fa56 	bl	8009ea6 <lwip_htonl>
 80119fa:	4602      	mov	r2, r0
 80119fc:	8abb      	ldrh	r3, [r7, #20]
 80119fe:	9303      	str	r3, [sp, #12]
 8011a00:	2314      	movs	r3, #20
 8011a02:	9302      	str	r3, [sp, #8]
 8011a04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011a06:	9301      	str	r3, [sp, #4]
 8011a08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011a0a:	9300      	str	r3, [sp, #0]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	2200      	movs	r2, #0
 8011a10:	4621      	mov	r1, r4
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7ff fe92 	bl	801173c <tcp_output_alloc_header_common>
 8011a18:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d00c      	beq.n	8011a3a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011a20:	7dfb      	ldrb	r3, [r7, #23]
 8011a22:	2200      	movs	r2, #0
 8011a24:	6939      	ldr	r1, [r7, #16]
 8011a26:	68f8      	ldr	r0, [r7, #12]
 8011a28:	f7ff ff38 	bl	801189c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2e:	683a      	ldr	r2, [r7, #0]
 8011a30:	6939      	ldr	r1, [r7, #16]
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	f7ff ff72 	bl	801191c <tcp_output_control_segment>
 8011a38:	e000      	b.n	8011a3c <tcp_rst+0x8c>
    return;
 8011a3a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011a3c:	371c      	adds	r7, #28
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd90      	pop	{r4, r7, pc}
 8011a42:	bf00      	nop
 8011a44:	0801e1f8 	.word	0x0801e1f8
 8011a48:	0801e97c 	.word	0x0801e97c
 8011a4c:	0801e24c 	.word	0x0801e24c
 8011a50:	0801e998 	.word	0x0801e998

08011a54 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011a54:	b590      	push	{r4, r7, lr}
 8011a56:	b087      	sub	sp, #28
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011a60:	2300      	movs	r3, #0
 8011a62:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d106      	bne.n	8011a78 <tcp_send_empty_ack+0x24>
 8011a6a:	4b28      	ldr	r3, [pc, #160]	; (8011b0c <tcp_send_empty_ack+0xb8>)
 8011a6c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011a70:	4927      	ldr	r1, [pc, #156]	; (8011b10 <tcp_send_empty_ack+0xbc>)
 8011a72:	4828      	ldr	r0, [pc, #160]	; (8011b14 <tcp_send_empty_ack+0xc0>)
 8011a74:	f005 fd94 	bl	80175a0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a78:	7dfb      	ldrb	r3, [r7, #23]
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	b2db      	uxtb	r3, r3
 8011a7e:	f003 0304 	and.w	r3, r3, #4
 8011a82:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011a84:	7d7b      	ldrb	r3, [r7, #21]
 8011a86:	b29c      	uxth	r4, r3
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7f8 fa0a 	bl	8009ea6 <lwip_htonl>
 8011a92:	4603      	mov	r3, r0
 8011a94:	2200      	movs	r2, #0
 8011a96:	4621      	mov	r1, r4
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f7ff fec1 	bl	8011820 <tcp_output_alloc_header>
 8011a9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d109      	bne.n	8011aba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	8b5b      	ldrh	r3, [r3, #26]
 8011aaa:	f043 0303 	orr.w	r3, r3, #3
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011ab4:	f06f 0301 	mvn.w	r3, #1
 8011ab8:	e023      	b.n	8011b02 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011aba:	7dbb      	ldrb	r3, [r7, #22]
 8011abc:	7dfa      	ldrb	r2, [r7, #23]
 8011abe:	6939      	ldr	r1, [r7, #16]
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7ff feeb 	bl	801189c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011ac6:	687a      	ldr	r2, [r7, #4]
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	3304      	adds	r3, #4
 8011acc:	6939      	ldr	r1, [r7, #16]
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f7ff ff24 	bl	801191c <tcp_output_control_segment>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d007      	beq.n	8011af0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	8b5b      	ldrh	r3, [r3, #26]
 8011ae4:	f043 0303 	orr.w	r3, r3, #3
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	835a      	strh	r2, [r3, #26]
 8011aee:	e006      	b.n	8011afe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	8b5b      	ldrh	r3, [r3, #26]
 8011af4:	f023 0303 	bic.w	r3, r3, #3
 8011af8:	b29a      	uxth	r2, r3
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	371c      	adds	r7, #28
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd90      	pop	{r4, r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	0801e1f8 	.word	0x0801e1f8
 8011b10:	0801e9b4 	.word	0x0801e9b4
 8011b14:	0801e24c 	.word	0x0801e24c

08011b18 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011b18:	b590      	push	{r4, r7, lr}
 8011b1a:	b087      	sub	sp, #28
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011b20:	2300      	movs	r3, #0
 8011b22:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d106      	bne.n	8011b38 <tcp_keepalive+0x20>
 8011b2a:	4b18      	ldr	r3, [pc, #96]	; (8011b8c <tcp_keepalive+0x74>)
 8011b2c:	f640 0224 	movw	r2, #2084	; 0x824
 8011b30:	4917      	ldr	r1, [pc, #92]	; (8011b90 <tcp_keepalive+0x78>)
 8011b32:	4818      	ldr	r0, [pc, #96]	; (8011b94 <tcp_keepalive+0x7c>)
 8011b34:	f005 fd34 	bl	80175a0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011b38:	7dfb      	ldrb	r3, [r7, #23]
 8011b3a:	b29c      	uxth	r4, r3
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b40:	3b01      	subs	r3, #1
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7f8 f9af 	bl	8009ea6 <lwip_htonl>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	4621      	mov	r1, r4
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7ff fe66 	bl	8011820 <tcp_output_alloc_header>
 8011b54:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011b56:	693b      	ldr	r3, [r7, #16]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d102      	bne.n	8011b62 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b60:	e010      	b.n	8011b84 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b62:	7dfb      	ldrb	r3, [r7, #23]
 8011b64:	2200      	movs	r2, #0
 8011b66:	6939      	ldr	r1, [r7, #16]
 8011b68:	6878      	ldr	r0, [r7, #4]
 8011b6a:	f7ff fe97 	bl	801189c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	3304      	adds	r3, #4
 8011b74:	6939      	ldr	r1, [r7, #16]
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f7ff fed0 	bl	801191c <tcp_output_control_segment>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	371c      	adds	r7, #28
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd90      	pop	{r4, r7, pc}
 8011b8c:	0801e1f8 	.word	0x0801e1f8
 8011b90:	0801e9d4 	.word	0x0801e9d4
 8011b94:	0801e24c 	.word	0x0801e24c

08011b98 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011b98:	b590      	push	{r4, r7, lr}
 8011b9a:	b08b      	sub	sp, #44	; 0x2c
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d106      	bne.n	8011bba <tcp_zero_window_probe+0x22>
 8011bac:	4b4c      	ldr	r3, [pc, #304]	; (8011ce0 <tcp_zero_window_probe+0x148>)
 8011bae:	f640 024f 	movw	r2, #2127	; 0x84f
 8011bb2:	494c      	ldr	r1, [pc, #304]	; (8011ce4 <tcp_zero_window_probe+0x14c>)
 8011bb4:	484c      	ldr	r0, [pc, #304]	; (8011ce8 <tcp_zero_window_probe+0x150>)
 8011bb6:	f005 fcf3 	bl	80175a0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bbe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011bc0:	6a3b      	ldr	r3, [r7, #32]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d101      	bne.n	8011bca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	e086      	b.n	8011cd8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011bd0:	2bff      	cmp	r3, #255	; 0xff
 8011bd2:	d007      	beq.n	8011be4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011bda:	3301      	adds	r3, #1
 8011bdc:	b2da      	uxtb	r2, r3
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011be4:	6a3b      	ldr	r3, [r7, #32]
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	899b      	ldrh	r3, [r3, #12]
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7f8 f945 	bl	8009e7c <lwip_htons>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	b2db      	uxtb	r3, r3
 8011bf6:	f003 0301 	and.w	r3, r3, #1
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d005      	beq.n	8011c0a <tcp_zero_window_probe+0x72>
 8011bfe:	6a3b      	ldr	r3, [r7, #32]
 8011c00:	891b      	ldrh	r3, [r3, #8]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d101      	bne.n	8011c0a <tcp_zero_window_probe+0x72>
 8011c06:	2301      	movs	r3, #1
 8011c08:	e000      	b.n	8011c0c <tcp_zero_window_probe+0x74>
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011c0e:	7ffb      	ldrb	r3, [r7, #31]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	bf0c      	ite	eq
 8011c14:	2301      	moveq	r3, #1
 8011c16:	2300      	movne	r3, #0
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c20:	b299      	uxth	r1, r3
 8011c22:	6a3b      	ldr	r3, [r7, #32]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	8bba      	ldrh	r2, [r7, #28]
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f7ff fdf8 	bl	8011820 <tcp_output_alloc_header>
 8011c30:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011c32:	69bb      	ldr	r3, [r7, #24]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d102      	bne.n	8011c3e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c3c:	e04c      	b.n	8011cd8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011c3e:	69bb      	ldr	r3, [r7, #24]
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011c44:	7ffb      	ldrb	r3, [r7, #31]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d011      	beq.n	8011c6e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	899b      	ldrh	r3, [r3, #12]
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	b21b      	sxth	r3, r3
 8011c52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c56:	b21c      	sxth	r4, r3
 8011c58:	2011      	movs	r0, #17
 8011c5a:	f7f8 f90f 	bl	8009e7c <lwip_htons>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	b21b      	sxth	r3, r3
 8011c62:	4323      	orrs	r3, r4
 8011c64:	b21b      	sxth	r3, r3
 8011c66:	b29a      	uxth	r2, r3
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	819a      	strh	r2, [r3, #12]
 8011c6c:	e010      	b.n	8011c90 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	3314      	adds	r3, #20
 8011c74:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	6858      	ldr	r0, [r3, #4]
 8011c7a:	6a3b      	ldr	r3, [r7, #32]
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	891a      	ldrh	r2, [r3, #8]
 8011c80:	6a3b      	ldr	r3, [r7, #32]
 8011c82:	891b      	ldrh	r3, [r3, #8]
 8011c84:	1ad3      	subs	r3, r2, r3
 8011c86:	b29b      	uxth	r3, r3
 8011c88:	2201      	movs	r2, #1
 8011c8a:	6939      	ldr	r1, [r7, #16]
 8011c8c:	f7f9 fe8a 	bl	800b9a4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011c90:	6a3b      	ldr	r3, [r7, #32]
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7f8 f905 	bl	8009ea6 <lwip_htonl>
 8011c9c:	4603      	mov	r3, r0
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	1ad3      	subs	r3, r2, r3
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	da02      	bge.n	8011cb4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	68fa      	ldr	r2, [r7, #12]
 8011cb2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cb8:	2200      	movs	r2, #0
 8011cba:	69b9      	ldr	r1, [r7, #24]
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f7ff fded 	bl	801189c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	3304      	adds	r3, #4
 8011cc8:	69b9      	ldr	r1, [r7, #24]
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7ff fe26 	bl	801191c <tcp_output_control_segment>
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011cd4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	372c      	adds	r7, #44	; 0x2c
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd90      	pop	{r4, r7, pc}
 8011ce0:	0801e1f8 	.word	0x0801e1f8
 8011ce4:	0801e9f0 	.word	0x0801e9f0
 8011ce8:	0801e24c 	.word	0x0801e24c

08011cec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011cf4:	f7f9 ff44 	bl	800bb80 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011cf8:	4b0a      	ldr	r3, [pc, #40]	; (8011d24 <tcpip_tcp_timer+0x38>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d103      	bne.n	8011d08 <tcpip_tcp_timer+0x1c>
 8011d00:	4b09      	ldr	r3, [pc, #36]	; (8011d28 <tcpip_tcp_timer+0x3c>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d005      	beq.n	8011d14 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011d08:	2200      	movs	r2, #0
 8011d0a:	4908      	ldr	r1, [pc, #32]	; (8011d2c <tcpip_tcp_timer+0x40>)
 8011d0c:	20fa      	movs	r0, #250	; 0xfa
 8011d0e:	f000 f8f3 	bl	8011ef8 <sys_timeout>
 8011d12:	e003      	b.n	8011d1c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011d14:	4b06      	ldr	r3, [pc, #24]	; (8011d30 <tcpip_tcp_timer+0x44>)
 8011d16:	2200      	movs	r2, #0
 8011d18:	601a      	str	r2, [r3, #0]
  }
}
 8011d1a:	bf00      	nop
 8011d1c:	bf00      	nop
 8011d1e:	3708      	adds	r7, #8
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	2000d858 	.word	0x2000d858
 8011d28:	2000d868 	.word	0x2000d868
 8011d2c:	08011ced 	.word	0x08011ced
 8011d30:	20001250 	.word	0x20001250

08011d34 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011d38:	4b0a      	ldr	r3, [pc, #40]	; (8011d64 <tcp_timer_needed+0x30>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d10f      	bne.n	8011d60 <tcp_timer_needed+0x2c>
 8011d40:	4b09      	ldr	r3, [pc, #36]	; (8011d68 <tcp_timer_needed+0x34>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d103      	bne.n	8011d50 <tcp_timer_needed+0x1c>
 8011d48:	4b08      	ldr	r3, [pc, #32]	; (8011d6c <tcp_timer_needed+0x38>)
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d007      	beq.n	8011d60 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011d50:	4b04      	ldr	r3, [pc, #16]	; (8011d64 <tcp_timer_needed+0x30>)
 8011d52:	2201      	movs	r2, #1
 8011d54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011d56:	2200      	movs	r2, #0
 8011d58:	4905      	ldr	r1, [pc, #20]	; (8011d70 <tcp_timer_needed+0x3c>)
 8011d5a:	20fa      	movs	r0, #250	; 0xfa
 8011d5c:	f000 f8cc 	bl	8011ef8 <sys_timeout>
  }
}
 8011d60:	bf00      	nop
 8011d62:	bd80      	pop	{r7, pc}
 8011d64:	20001250 	.word	0x20001250
 8011d68:	2000d858 	.word	0x2000d858
 8011d6c:	2000d868 	.word	0x2000d868
 8011d70:	08011ced 	.word	0x08011ced

08011d74 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b086      	sub	sp, #24
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011d80:	2006      	movs	r0, #6
 8011d82:	f7f8 fdaf 	bl	800a8e4 <memp_malloc>
 8011d86:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d109      	bne.n	8011da2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d151      	bne.n	8011e38 <sys_timeout_abs+0xc4>
 8011d94:	4b2a      	ldr	r3, [pc, #168]	; (8011e40 <sys_timeout_abs+0xcc>)
 8011d96:	22be      	movs	r2, #190	; 0xbe
 8011d98:	492a      	ldr	r1, [pc, #168]	; (8011e44 <sys_timeout_abs+0xd0>)
 8011d9a:	482b      	ldr	r0, [pc, #172]	; (8011e48 <sys_timeout_abs+0xd4>)
 8011d9c:	f005 fc00 	bl	80175a0 <iprintf>
    return;
 8011da0:	e04a      	b.n	8011e38 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011da2:	693b      	ldr	r3, [r7, #16]
 8011da4:	2200      	movs	r2, #0
 8011da6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	68ba      	ldr	r2, [r7, #8]
 8011dac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	68fa      	ldr	r2, [r7, #12]
 8011db8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011dba:	4b24      	ldr	r3, [pc, #144]	; (8011e4c <sys_timeout_abs+0xd8>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d103      	bne.n	8011dca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011dc2:	4a22      	ldr	r2, [pc, #136]	; (8011e4c <sys_timeout_abs+0xd8>)
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	6013      	str	r3, [r2, #0]
    return;
 8011dc8:	e037      	b.n	8011e3a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	685a      	ldr	r2, [r3, #4]
 8011dce:	4b1f      	ldr	r3, [pc, #124]	; (8011e4c <sys_timeout_abs+0xd8>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	1ad3      	subs	r3, r2, r3
 8011dd6:	0fdb      	lsrs	r3, r3, #31
 8011dd8:	f003 0301 	and.w	r3, r3, #1
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d007      	beq.n	8011df2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011de2:	4b1a      	ldr	r3, [pc, #104]	; (8011e4c <sys_timeout_abs+0xd8>)
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011dea:	4a18      	ldr	r2, [pc, #96]	; (8011e4c <sys_timeout_abs+0xd8>)
 8011dec:	693b      	ldr	r3, [r7, #16]
 8011dee:	6013      	str	r3, [r2, #0]
 8011df0:	e023      	b.n	8011e3a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011df2:	4b16      	ldr	r3, [pc, #88]	; (8011e4c <sys_timeout_abs+0xd8>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	617b      	str	r3, [r7, #20]
 8011df8:	e01a      	b.n	8011e30 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d00b      	beq.n	8011e1a <sys_timeout_abs+0xa6>
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	685a      	ldr	r2, [r3, #4]
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	685b      	ldr	r3, [r3, #4]
 8011e0c:	1ad3      	subs	r3, r2, r3
 8011e0e:	0fdb      	lsrs	r3, r3, #31
 8011e10:	f003 0301 	and.w	r3, r3, #1
 8011e14:	b2db      	uxtb	r3, r3
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d007      	beq.n	8011e2a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	681a      	ldr	r2, [r3, #0]
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	693a      	ldr	r2, [r7, #16]
 8011e26:	601a      	str	r2, [r3, #0]
        break;
 8011e28:	e007      	b.n	8011e3a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	617b      	str	r3, [r7, #20]
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d1e1      	bne.n	8011dfa <sys_timeout_abs+0x86>
 8011e36:	e000      	b.n	8011e3a <sys_timeout_abs+0xc6>
    return;
 8011e38:	bf00      	nop
      }
    }
  }
}
 8011e3a:	3718      	adds	r7, #24
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	0801ea14 	.word	0x0801ea14
 8011e44:	0801ea48 	.word	0x0801ea48
 8011e48:	0801ea88 	.word	0x0801ea88
 8011e4c:	20001248 	.word	0x20001248

08011e50 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b086      	sub	sp, #24
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	4798      	blx	r3

  now = sys_now();
 8011e62:	f7f5 ffab 	bl	8007dbc <sys_now>
 8011e66:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	681a      	ldr	r2, [r3, #0]
 8011e6c:	4b0f      	ldr	r3, [pc, #60]	; (8011eac <lwip_cyclic_timer+0x5c>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	4413      	add	r3, r2
 8011e72:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011e74:	68fa      	ldr	r2, [r7, #12]
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	1ad3      	subs	r3, r2, r3
 8011e7a:	0fdb      	lsrs	r3, r3, #31
 8011e7c:	f003 0301 	and.w	r3, r3, #1
 8011e80:	b2db      	uxtb	r3, r3
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d009      	beq.n	8011e9a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	681a      	ldr	r2, [r3, #0]
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	4413      	add	r3, r2
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	4907      	ldr	r1, [pc, #28]	; (8011eb0 <lwip_cyclic_timer+0x60>)
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7ff ff6e 	bl	8011d74 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011e98:	e004      	b.n	8011ea4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	4904      	ldr	r1, [pc, #16]	; (8011eb0 <lwip_cyclic_timer+0x60>)
 8011e9e:	68f8      	ldr	r0, [r7, #12]
 8011ea0:	f7ff ff68 	bl	8011d74 <sys_timeout_abs>
}
 8011ea4:	bf00      	nop
 8011ea6:	3718      	adds	r7, #24
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	2000124c 	.word	0x2000124c
 8011eb0:	08011e51 	.word	0x08011e51

08011eb4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b082      	sub	sp, #8
 8011eb8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011eba:	2301      	movs	r3, #1
 8011ebc:	607b      	str	r3, [r7, #4]
 8011ebe:	e00e      	b.n	8011ede <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011ec0:	4a0b      	ldr	r2, [pc, #44]	; (8011ef0 <sys_timeouts_init+0x3c>)
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	00db      	lsls	r3, r3, #3
 8011ecc:	4a08      	ldr	r2, [pc, #32]	; (8011ef0 <sys_timeouts_init+0x3c>)
 8011ece:	4413      	add	r3, r2
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	4908      	ldr	r1, [pc, #32]	; (8011ef4 <sys_timeouts_init+0x40>)
 8011ed4:	f000 f810 	bl	8011ef8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	3301      	adds	r3, #1
 8011edc:	607b      	str	r3, [r7, #4]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2b04      	cmp	r3, #4
 8011ee2:	d9ed      	bls.n	8011ec0 <sys_timeouts_init+0xc>
  }
}
 8011ee4:	bf00      	nop
 8011ee6:	bf00      	nop
 8011ee8:	3708      	adds	r7, #8
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	08032ab4 	.word	0x08032ab4
 8011ef4:	08011e51 	.word	0x08011e51

08011ef8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b086      	sub	sp, #24
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	60f8      	str	r0, [r7, #12]
 8011f00:	60b9      	str	r1, [r7, #8]
 8011f02:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011f0a:	d306      	bcc.n	8011f1a <sys_timeout+0x22>
 8011f0c:	4b0a      	ldr	r3, [pc, #40]	; (8011f38 <sys_timeout+0x40>)
 8011f0e:	f240 1229 	movw	r2, #297	; 0x129
 8011f12:	490a      	ldr	r1, [pc, #40]	; (8011f3c <sys_timeout+0x44>)
 8011f14:	480a      	ldr	r0, [pc, #40]	; (8011f40 <sys_timeout+0x48>)
 8011f16:	f005 fb43 	bl	80175a0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011f1a:	f7f5 ff4f 	bl	8007dbc <sys_now>
 8011f1e:	4602      	mov	r2, r0
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	4413      	add	r3, r2
 8011f24:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011f26:	687a      	ldr	r2, [r7, #4]
 8011f28:	68b9      	ldr	r1, [r7, #8]
 8011f2a:	6978      	ldr	r0, [r7, #20]
 8011f2c:	f7ff ff22 	bl	8011d74 <sys_timeout_abs>
#endif
}
 8011f30:	bf00      	nop
 8011f32:	3718      	adds	r7, #24
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bd80      	pop	{r7, pc}
 8011f38:	0801ea14 	.word	0x0801ea14
 8011f3c:	0801eab0 	.word	0x0801eab0
 8011f40:	0801ea88 	.word	0x0801ea88

08011f44 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b084      	sub	sp, #16
 8011f48:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011f4a:	f7f5 ff37 	bl	8007dbc <sys_now>
 8011f4e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011f50:	4b1a      	ldr	r3, [pc, #104]	; (8011fbc <sys_check_timeouts+0x78>)
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	b2db      	uxtb	r3, r3
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d001      	beq.n	8011f5e <sys_check_timeouts+0x1a>
 8011f5a:	f7f8 ffef 	bl	800af3c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011f5e:	4b18      	ldr	r3, [pc, #96]	; (8011fc0 <sys_check_timeouts+0x7c>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d022      	beq.n	8011fb0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	68fa      	ldr	r2, [r7, #12]
 8011f70:	1ad3      	subs	r3, r2, r3
 8011f72:	0fdb      	lsrs	r3, r3, #31
 8011f74:	f003 0301 	and.w	r3, r3, #1
 8011f78:	b2db      	uxtb	r3, r3
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d11a      	bne.n	8011fb4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	4a0f      	ldr	r2, [pc, #60]	; (8011fc0 <sys_check_timeouts+0x7c>)
 8011f84:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	689b      	ldr	r3, [r3, #8]
 8011f8a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	4a0b      	ldr	r2, [pc, #44]	; (8011fc4 <sys_check_timeouts+0x80>)
 8011f98:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011f9a:	68b9      	ldr	r1, [r7, #8]
 8011f9c:	2006      	movs	r0, #6
 8011f9e:	f7f8 fced 	bl	800a97c <memp_free>
    if (handler != NULL) {
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d0d3      	beq.n	8011f50 <sys_check_timeouts+0xc>
      handler(arg);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6838      	ldr	r0, [r7, #0]
 8011fac:	4798      	blx	r3
  do {
 8011fae:	e7cf      	b.n	8011f50 <sys_check_timeouts+0xc>
      return;
 8011fb0:	bf00      	nop
 8011fb2:	e000      	b.n	8011fb6 <sys_check_timeouts+0x72>
      return;
 8011fb4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011fb6:	3710      	adds	r7, #16
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}
 8011fbc:	2000d850 	.word	0x2000d850
 8011fc0:	20001248 	.word	0x20001248
 8011fc4:	2000124c 	.word	0x2000124c

08011fc8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011fcc:	f005 fb76 	bl	80176bc <rand>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	b29b      	uxth	r3, r3
 8011fd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011fde:	b29a      	uxth	r2, r3
 8011fe0:	4b01      	ldr	r3, [pc, #4]	; (8011fe8 <udp_init+0x20>)
 8011fe2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011fe4:	bf00      	nop
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	200005c0 	.word	0x200005c0

08011fec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011fec:	b480      	push	{r7}
 8011fee:	b083      	sub	sp, #12
 8011ff0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011ff6:	4b17      	ldr	r3, [pc, #92]	; (8012054 <udp_new_port+0x68>)
 8011ff8:	881b      	ldrh	r3, [r3, #0]
 8011ffa:	1c5a      	adds	r2, r3, #1
 8011ffc:	b291      	uxth	r1, r2
 8011ffe:	4a15      	ldr	r2, [pc, #84]	; (8012054 <udp_new_port+0x68>)
 8012000:	8011      	strh	r1, [r2, #0]
 8012002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012006:	4293      	cmp	r3, r2
 8012008:	d103      	bne.n	8012012 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801200a:	4b12      	ldr	r3, [pc, #72]	; (8012054 <udp_new_port+0x68>)
 801200c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012010:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012012:	4b11      	ldr	r3, [pc, #68]	; (8012058 <udp_new_port+0x6c>)
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	603b      	str	r3, [r7, #0]
 8012018:	e011      	b.n	801203e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	8a5a      	ldrh	r2, [r3, #18]
 801201e:	4b0d      	ldr	r3, [pc, #52]	; (8012054 <udp_new_port+0x68>)
 8012020:	881b      	ldrh	r3, [r3, #0]
 8012022:	429a      	cmp	r2, r3
 8012024:	d108      	bne.n	8012038 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012026:	88fb      	ldrh	r3, [r7, #6]
 8012028:	3301      	adds	r3, #1
 801202a:	80fb      	strh	r3, [r7, #6]
 801202c:	88fb      	ldrh	r3, [r7, #6]
 801202e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012032:	d3e0      	bcc.n	8011ff6 <udp_new_port+0xa>
        return 0;
 8012034:	2300      	movs	r3, #0
 8012036:	e007      	b.n	8012048 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	68db      	ldr	r3, [r3, #12]
 801203c:	603b      	str	r3, [r7, #0]
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d1ea      	bne.n	801201a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012044:	4b03      	ldr	r3, [pc, #12]	; (8012054 <udp_new_port+0x68>)
 8012046:	881b      	ldrh	r3, [r3, #0]
}
 8012048:	4618      	mov	r0, r3
 801204a:	370c      	adds	r7, #12
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr
 8012054:	200005c0 	.word	0x200005c0
 8012058:	2000d870 	.word	0x2000d870

0801205c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b084      	sub	sp, #16
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	4613      	mov	r3, r2
 8012068:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d105      	bne.n	801207c <udp_input_local_match+0x20>
 8012070:	4b27      	ldr	r3, [pc, #156]	; (8012110 <udp_input_local_match+0xb4>)
 8012072:	2287      	movs	r2, #135	; 0x87
 8012074:	4927      	ldr	r1, [pc, #156]	; (8012114 <udp_input_local_match+0xb8>)
 8012076:	4828      	ldr	r0, [pc, #160]	; (8012118 <udp_input_local_match+0xbc>)
 8012078:	f005 fa92 	bl	80175a0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801207c:	68bb      	ldr	r3, [r7, #8]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d105      	bne.n	801208e <udp_input_local_match+0x32>
 8012082:	4b23      	ldr	r3, [pc, #140]	; (8012110 <udp_input_local_match+0xb4>)
 8012084:	2288      	movs	r2, #136	; 0x88
 8012086:	4925      	ldr	r1, [pc, #148]	; (801211c <udp_input_local_match+0xc0>)
 8012088:	4823      	ldr	r0, [pc, #140]	; (8012118 <udp_input_local_match+0xbc>)
 801208a:	f005 fa89 	bl	80175a0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	7a1b      	ldrb	r3, [r3, #8]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d00b      	beq.n	80120ae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	7a1a      	ldrb	r2, [r3, #8]
 801209a:	4b21      	ldr	r3, [pc, #132]	; (8012120 <udp_input_local_match+0xc4>)
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80120a2:	3301      	adds	r3, #1
 80120a4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d001      	beq.n	80120ae <udp_input_local_match+0x52>
    return 0;
 80120aa:	2300      	movs	r3, #0
 80120ac:	e02b      	b.n	8012106 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80120ae:	79fb      	ldrb	r3, [r7, #7]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d018      	beq.n	80120e6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d013      	beq.n	80120e2 <udp_input_local_match+0x86>
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d00f      	beq.n	80120e2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80120c2:	4b17      	ldr	r3, [pc, #92]	; (8012120 <udp_input_local_match+0xc4>)
 80120c4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80120c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80120ca:	d00a      	beq.n	80120e2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	4b13      	ldr	r3, [pc, #76]	; (8012120 <udp_input_local_match+0xc4>)
 80120d2:	695b      	ldr	r3, [r3, #20]
 80120d4:	405a      	eors	r2, r3
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	3308      	adds	r3, #8
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d110      	bne.n	8012104 <udp_input_local_match+0xa8>
          return 1;
 80120e2:	2301      	movs	r3, #1
 80120e4:	e00f      	b.n	8012106 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d009      	beq.n	8012100 <udp_input_local_match+0xa4>
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d005      	beq.n	8012100 <udp_input_local_match+0xa4>
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	681a      	ldr	r2, [r3, #0]
 80120f8:	4b09      	ldr	r3, [pc, #36]	; (8012120 <udp_input_local_match+0xc4>)
 80120fa:	695b      	ldr	r3, [r3, #20]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d101      	bne.n	8012104 <udp_input_local_match+0xa8>
        return 1;
 8012100:	2301      	movs	r3, #1
 8012102:	e000      	b.n	8012106 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012104:	2300      	movs	r3, #0
}
 8012106:	4618      	mov	r0, r3
 8012108:	3710      	adds	r7, #16
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	0801eafc 	.word	0x0801eafc
 8012114:	0801eb2c 	.word	0x0801eb2c
 8012118:	0801eb50 	.word	0x0801eb50
 801211c:	0801eb78 	.word	0x0801eb78
 8012120:	20009f28 	.word	0x20009f28

08012124 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012124:	b590      	push	{r4, r7, lr}
 8012126:	b08d      	sub	sp, #52	; 0x34
 8012128:	af02      	add	r7, sp, #8
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801212e:	2300      	movs	r3, #0
 8012130:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d105      	bne.n	8012144 <udp_input+0x20>
 8012138:	4b7e      	ldr	r3, [pc, #504]	; (8012334 <udp_input+0x210>)
 801213a:	22cf      	movs	r2, #207	; 0xcf
 801213c:	497e      	ldr	r1, [pc, #504]	; (8012338 <udp_input+0x214>)
 801213e:	487f      	ldr	r0, [pc, #508]	; (801233c <udp_input+0x218>)
 8012140:	f005 fa2e 	bl	80175a0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d105      	bne.n	8012156 <udp_input+0x32>
 801214a:	4b7a      	ldr	r3, [pc, #488]	; (8012334 <udp_input+0x210>)
 801214c:	22d0      	movs	r2, #208	; 0xd0
 801214e:	497c      	ldr	r1, [pc, #496]	; (8012340 <udp_input+0x21c>)
 8012150:	487a      	ldr	r0, [pc, #488]	; (801233c <udp_input+0x218>)
 8012152:	f005 fa25 	bl	80175a0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	895b      	ldrh	r3, [r3, #10]
 801215a:	2b07      	cmp	r3, #7
 801215c:	d803      	bhi.n	8012166 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f7f9 fa26 	bl	800b5b0 <pbuf_free>
    goto end;
 8012164:	e0e1      	b.n	801232a <udp_input+0x206>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801216c:	4b75      	ldr	r3, [pc, #468]	; (8012344 <udp_input+0x220>)
 801216e:	695b      	ldr	r3, [r3, #20]
 8012170:	4a74      	ldr	r2, [pc, #464]	; (8012344 <udp_input+0x220>)
 8012172:	6812      	ldr	r2, [r2, #0]
 8012174:	4611      	mov	r1, r2
 8012176:	4618      	mov	r0, r3
 8012178:	f003 fdef 	bl	8015d5a <ip4_addr_isbroadcast_u32>
 801217c:	4603      	mov	r3, r0
 801217e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012180:	697b      	ldr	r3, [r7, #20]
 8012182:	881b      	ldrh	r3, [r3, #0]
 8012184:	b29b      	uxth	r3, r3
 8012186:	4618      	mov	r0, r3
 8012188:	f7f7 fe78 	bl	8009e7c <lwip_htons>
 801218c:	4603      	mov	r3, r0
 801218e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	885b      	ldrh	r3, [r3, #2]
 8012194:	b29b      	uxth	r3, r3
 8012196:	4618      	mov	r0, r3
 8012198:	f7f7 fe70 	bl	8009e7c <lwip_htons>
 801219c:	4603      	mov	r3, r0
 801219e:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 80121a0:	6978      	ldr	r0, [r7, #20]
 80121a2:	f000 fbd1 	bl	8012948 <udp_debug_print>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80121a6:	2300      	movs	r3, #0
 80121a8:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80121aa:	2300      	movs	r3, #0
 80121ac:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80121ae:	2300      	movs	r3, #0
 80121b0:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80121b2:	4b65      	ldr	r3, [pc, #404]	; (8012348 <udp_input+0x224>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	627b      	str	r3, [r7, #36]	; 0x24
 80121b8:	e054      	b.n	8012264 <udp_input+0x140>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80121ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121bc:	8a5b      	ldrh	r3, [r3, #18]
 80121be:	89fa      	ldrh	r2, [r7, #14]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d14a      	bne.n	801225a <udp_input+0x136>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80121c4:	7cfb      	ldrb	r3, [r7, #19]
 80121c6:	461a      	mov	r2, r3
 80121c8:	6839      	ldr	r1, [r7, #0]
 80121ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121cc:	f7ff ff46 	bl	801205c <udp_input_local_match>
 80121d0:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d041      	beq.n	801225a <udp_input+0x136>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d8:	7c1b      	ldrb	r3, [r3, #16]
 80121da:	f003 0304 	and.w	r3, r3, #4
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d11d      	bne.n	801221e <udp_input+0xfa>
        if (uncon_pcb == NULL) {
 80121e2:	69fb      	ldr	r3, [r7, #28]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d102      	bne.n	80121ee <udp_input+0xca>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80121e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ea:	61fb      	str	r3, [r7, #28]
 80121ec:	e017      	b.n	801221e <udp_input+0xfa>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80121ee:	7cfb      	ldrb	r3, [r7, #19]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d014      	beq.n	801221e <udp_input+0xfa>
 80121f4:	4b53      	ldr	r3, [pc, #332]	; (8012344 <udp_input+0x220>)
 80121f6:	695b      	ldr	r3, [r3, #20]
 80121f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80121fc:	d10f      	bne.n	801221e <udp_input+0xfa>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80121fe:	69fb      	ldr	r3, [r7, #28]
 8012200:	681a      	ldr	r2, [r3, #0]
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	3304      	adds	r3, #4
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	429a      	cmp	r2, r3
 801220a:	d008      	beq.n	801221e <udp_input+0xfa>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	3304      	adds	r3, #4
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	429a      	cmp	r2, r3
 8012218:	d101      	bne.n	801221e <udp_input+0xfa>
              /* better match */
              uncon_pcb = pcb;
 801221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801221c:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012220:	8a9b      	ldrh	r3, [r3, #20]
 8012222:	8a3a      	ldrh	r2, [r7, #16]
 8012224:	429a      	cmp	r2, r3
 8012226:	d118      	bne.n	801225a <udp_input+0x136>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801222c:	2b00      	cmp	r3, #0
 801222e:	d005      	beq.n	801223c <udp_input+0x118>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012232:	685a      	ldr	r2, [r3, #4]
 8012234:	4b43      	ldr	r3, [pc, #268]	; (8012344 <udp_input+0x220>)
 8012236:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012238:	429a      	cmp	r2, r3
 801223a:	d10e      	bne.n	801225a <udp_input+0x136>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801223c:	6a3b      	ldr	r3, [r7, #32]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d014      	beq.n	801226c <udp_input+0x148>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012244:	68da      	ldr	r2, [r3, #12]
 8012246:	6a3b      	ldr	r3, [r7, #32]
 8012248:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801224a:	4b3f      	ldr	r3, [pc, #252]	; (8012348 <udp_input+0x224>)
 801224c:	681a      	ldr	r2, [r3, #0]
 801224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012250:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012252:	4a3d      	ldr	r2, [pc, #244]	; (8012348 <udp_input+0x224>)
 8012254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012256:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012258:	e008      	b.n	801226c <udp_input+0x148>
      }
    }

    prev = pcb;
 801225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801225c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012260:	68db      	ldr	r3, [r3, #12]
 8012262:	627b      	str	r3, [r7, #36]	; 0x24
 8012264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012266:	2b00      	cmp	r3, #0
 8012268:	d1a7      	bne.n	80121ba <udp_input+0x96>
 801226a:	e000      	b.n	801226e <udp_input+0x14a>
        break;
 801226c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012270:	2b00      	cmp	r3, #0
 8012272:	d101      	bne.n	8012278 <udp_input+0x154>
    pcb = uncon_pcb;
 8012274:	69fb      	ldr	r3, [r7, #28]
 8012276:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227a:	2b00      	cmp	r3, #0
 801227c:	d002      	beq.n	8012284 <udp_input+0x160>
    for_us = 1;
 801227e:	2301      	movs	r3, #1
 8012280:	76fb      	strb	r3, [r7, #27]
 8012282:	e00a      	b.n	801229a <udp_input+0x176>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	3304      	adds	r3, #4
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	4b2e      	ldr	r3, [pc, #184]	; (8012344 <udp_input+0x220>)
 801228c:	695b      	ldr	r3, [r3, #20]
 801228e:	429a      	cmp	r2, r3
 8012290:	bf0c      	ite	eq
 8012292:	2301      	moveq	r3, #1
 8012294:	2300      	movne	r3, #0
 8012296:	b2db      	uxtb	r3, r3
 8012298:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801229a:	7efb      	ldrb	r3, [r7, #27]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d041      	beq.n	8012324 <udp_input+0x200>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80122a0:	2108      	movs	r1, #8
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f7f9 f8fe 	bl	800b4a4 <pbuf_remove_header>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d00a      	beq.n	80122c4 <udp_input+0x1a0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80122ae:	4b21      	ldr	r3, [pc, #132]	; (8012334 <udp_input+0x210>)
 80122b0:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80122b4:	4925      	ldr	r1, [pc, #148]	; (801234c <udp_input+0x228>)
 80122b6:	4821      	ldr	r0, [pc, #132]	; (801233c <udp_input+0x218>)
 80122b8:	f005 f972 	bl	80175a0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7f9 f977 	bl	800b5b0 <pbuf_free>
      goto end;
 80122c2:	e032      	b.n	801232a <udp_input+0x206>
    }

    if (pcb != NULL) {
 80122c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d012      	beq.n	80122f0 <udp_input+0x1cc>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80122ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122cc:	699b      	ldr	r3, [r3, #24]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00a      	beq.n	80122e8 <udp_input+0x1c4>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80122d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d4:	699c      	ldr	r4, [r3, #24]
 80122d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d8:	69d8      	ldr	r0, [r3, #28]
 80122da:	8a3b      	ldrh	r3, [r7, #16]
 80122dc:	9300      	str	r3, [sp, #0]
 80122de:	4b1c      	ldr	r3, [pc, #112]	; (8012350 <udp_input+0x22c>)
 80122e0:	687a      	ldr	r2, [r7, #4]
 80122e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80122e4:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80122e6:	e021      	b.n	801232c <udp_input+0x208>
        pbuf_free(p);
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7f9 f961 	bl	800b5b0 <pbuf_free>
        goto end;
 80122ee:	e01c      	b.n	801232a <udp_input+0x206>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80122f0:	7cfb      	ldrb	r3, [r7, #19]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d112      	bne.n	801231c <udp_input+0x1f8>
 80122f6:	4b13      	ldr	r3, [pc, #76]	; (8012344 <udp_input+0x220>)
 80122f8:	695b      	ldr	r3, [r3, #20]
 80122fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80122fe:	2be0      	cmp	r3, #224	; 0xe0
 8012300:	d00c      	beq.n	801231c <udp_input+0x1f8>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012302:	4b10      	ldr	r3, [pc, #64]	; (8012344 <udp_input+0x220>)
 8012304:	899b      	ldrh	r3, [r3, #12]
 8012306:	3308      	adds	r3, #8
 8012308:	b29b      	uxth	r3, r3
 801230a:	b21b      	sxth	r3, r3
 801230c:	4619      	mov	r1, r3
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7f9 f93b 	bl	800b58a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012314:	2103      	movs	r1, #3
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f003 f9ca 	bl	80156b0 <icmp_dest_unreach>
      pbuf_free(p);
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f7f9 f947 	bl	800b5b0 <pbuf_free>
  return;
 8012322:	e003      	b.n	801232c <udp_input+0x208>
    pbuf_free(p);
 8012324:	6878      	ldr	r0, [r7, #4]
 8012326:	f7f9 f943 	bl	800b5b0 <pbuf_free>
  return;
 801232a:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801232c:	372c      	adds	r7, #44	; 0x2c
 801232e:	46bd      	mov	sp, r7
 8012330:	bd90      	pop	{r4, r7, pc}
 8012332:	bf00      	nop
 8012334:	0801eafc 	.word	0x0801eafc
 8012338:	0801eba0 	.word	0x0801eba0
 801233c:	0801eb50 	.word	0x0801eb50
 8012340:	0801ebb8 	.word	0x0801ebb8
 8012344:	20009f28 	.word	0x20009f28
 8012348:	2000d870 	.word	0x2000d870
 801234c:	0801ebd4 	.word	0x0801ebd4
 8012350:	20009f38 	.word	0x20009f38

08012354 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b088      	sub	sp, #32
 8012358:	af02      	add	r7, sp, #8
 801235a:	60f8      	str	r0, [r7, #12]
 801235c:	60b9      	str	r1, [r7, #8]
 801235e:	607a      	str	r2, [r7, #4]
 8012360:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d109      	bne.n	801237c <udp_sendto_if+0x28>
 8012368:	4b2e      	ldr	r3, [pc, #184]	; (8012424 <udp_sendto_if+0xd0>)
 801236a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801236e:	492e      	ldr	r1, [pc, #184]	; (8012428 <udp_sendto_if+0xd4>)
 8012370:	482e      	ldr	r0, [pc, #184]	; (801242c <udp_sendto_if+0xd8>)
 8012372:	f005 f915 	bl	80175a0 <iprintf>
 8012376:	f06f 030f 	mvn.w	r3, #15
 801237a:	e04f      	b.n	801241c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d109      	bne.n	8012396 <udp_sendto_if+0x42>
 8012382:	4b28      	ldr	r3, [pc, #160]	; (8012424 <udp_sendto_if+0xd0>)
 8012384:	f240 2281 	movw	r2, #641	; 0x281
 8012388:	4929      	ldr	r1, [pc, #164]	; (8012430 <udp_sendto_if+0xdc>)
 801238a:	4828      	ldr	r0, [pc, #160]	; (801242c <udp_sendto_if+0xd8>)
 801238c:	f005 f908 	bl	80175a0 <iprintf>
 8012390:	f06f 030f 	mvn.w	r3, #15
 8012394:	e042      	b.n	801241c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d109      	bne.n	80123b0 <udp_sendto_if+0x5c>
 801239c:	4b21      	ldr	r3, [pc, #132]	; (8012424 <udp_sendto_if+0xd0>)
 801239e:	f240 2282 	movw	r2, #642	; 0x282
 80123a2:	4924      	ldr	r1, [pc, #144]	; (8012434 <udp_sendto_if+0xe0>)
 80123a4:	4821      	ldr	r0, [pc, #132]	; (801242c <udp_sendto_if+0xd8>)
 80123a6:	f005 f8fb 	bl	80175a0 <iprintf>
 80123aa:	f06f 030f 	mvn.w	r3, #15
 80123ae:	e035      	b.n	801241c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80123b0:	6a3b      	ldr	r3, [r7, #32]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d109      	bne.n	80123ca <udp_sendto_if+0x76>
 80123b6:	4b1b      	ldr	r3, [pc, #108]	; (8012424 <udp_sendto_if+0xd0>)
 80123b8:	f240 2283 	movw	r2, #643	; 0x283
 80123bc:	491e      	ldr	r1, [pc, #120]	; (8012438 <udp_sendto_if+0xe4>)
 80123be:	481b      	ldr	r0, [pc, #108]	; (801242c <udp_sendto_if+0xd8>)
 80123c0:	f005 f8ee 	bl	80175a0 <iprintf>
 80123c4:	f06f 030f 	mvn.w	r3, #15
 80123c8:	e028      	b.n	801241c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d009      	beq.n	80123e4 <udp_sendto_if+0x90>
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d005      	beq.n	80123e4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80123e0:	2be0      	cmp	r3, #224	; 0xe0
 80123e2:	d103      	bne.n	80123ec <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80123e4:	6a3b      	ldr	r3, [r7, #32]
 80123e6:	3304      	adds	r3, #4
 80123e8:	617b      	str	r3, [r7, #20]
 80123ea:	e00b      	b.n	8012404 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	681a      	ldr	r2, [r3, #0]
 80123f0:	6a3b      	ldr	r3, [r7, #32]
 80123f2:	3304      	adds	r3, #4
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d002      	beq.n	8012400 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80123fa:	f06f 0303 	mvn.w	r3, #3
 80123fe:	e00d      	b.n	801241c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012404:	887a      	ldrh	r2, [r7, #2]
 8012406:	697b      	ldr	r3, [r7, #20]
 8012408:	9301      	str	r3, [sp, #4]
 801240a:	6a3b      	ldr	r3, [r7, #32]
 801240c:	9300      	str	r3, [sp, #0]
 801240e:	4613      	mov	r3, r2
 8012410:	687a      	ldr	r2, [r7, #4]
 8012412:	68b9      	ldr	r1, [r7, #8]
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f000 f811 	bl	801243c <udp_sendto_if_src>
 801241a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801241c:	4618      	mov	r0, r3
 801241e:	3718      	adds	r7, #24
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}
 8012424:	0801eafc 	.word	0x0801eafc
 8012428:	0801ec70 	.word	0x0801ec70
 801242c:	0801eb50 	.word	0x0801eb50
 8012430:	0801ec8c 	.word	0x0801ec8c
 8012434:	0801eca8 	.word	0x0801eca8
 8012438:	0801ecc8 	.word	0x0801ecc8

0801243c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b08c      	sub	sp, #48	; 0x30
 8012440:	af04      	add	r7, sp, #16
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	607a      	str	r2, [r7, #4]
 8012448:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d109      	bne.n	8012464 <udp_sendto_if_src+0x28>
 8012450:	4b65      	ldr	r3, [pc, #404]	; (80125e8 <udp_sendto_if_src+0x1ac>)
 8012452:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012456:	4965      	ldr	r1, [pc, #404]	; (80125ec <udp_sendto_if_src+0x1b0>)
 8012458:	4865      	ldr	r0, [pc, #404]	; (80125f0 <udp_sendto_if_src+0x1b4>)
 801245a:	f005 f8a1 	bl	80175a0 <iprintf>
 801245e:	f06f 030f 	mvn.w	r3, #15
 8012462:	e0bc      	b.n	80125de <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d109      	bne.n	801247e <udp_sendto_if_src+0x42>
 801246a:	4b5f      	ldr	r3, [pc, #380]	; (80125e8 <udp_sendto_if_src+0x1ac>)
 801246c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012470:	4960      	ldr	r1, [pc, #384]	; (80125f4 <udp_sendto_if_src+0x1b8>)
 8012472:	485f      	ldr	r0, [pc, #380]	; (80125f0 <udp_sendto_if_src+0x1b4>)
 8012474:	f005 f894 	bl	80175a0 <iprintf>
 8012478:	f06f 030f 	mvn.w	r3, #15
 801247c:	e0af      	b.n	80125de <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d109      	bne.n	8012498 <udp_sendto_if_src+0x5c>
 8012484:	4b58      	ldr	r3, [pc, #352]	; (80125e8 <udp_sendto_if_src+0x1ac>)
 8012486:	f240 22d3 	movw	r2, #723	; 0x2d3
 801248a:	495b      	ldr	r1, [pc, #364]	; (80125f8 <udp_sendto_if_src+0x1bc>)
 801248c:	4858      	ldr	r0, [pc, #352]	; (80125f0 <udp_sendto_if_src+0x1b4>)
 801248e:	f005 f887 	bl	80175a0 <iprintf>
 8012492:	f06f 030f 	mvn.w	r3, #15
 8012496:	e0a2      	b.n	80125de <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249a:	2b00      	cmp	r3, #0
 801249c:	d109      	bne.n	80124b2 <udp_sendto_if_src+0x76>
 801249e:	4b52      	ldr	r3, [pc, #328]	; (80125e8 <udp_sendto_if_src+0x1ac>)
 80124a0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80124a4:	4955      	ldr	r1, [pc, #340]	; (80125fc <udp_sendto_if_src+0x1c0>)
 80124a6:	4852      	ldr	r0, [pc, #328]	; (80125f0 <udp_sendto_if_src+0x1b4>)
 80124a8:	f005 f87a 	bl	80175a0 <iprintf>
 80124ac:	f06f 030f 	mvn.w	r3, #15
 80124b0:	e095      	b.n	80125de <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80124b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d109      	bne.n	80124cc <udp_sendto_if_src+0x90>
 80124b8:	4b4b      	ldr	r3, [pc, #300]	; (80125e8 <udp_sendto_if_src+0x1ac>)
 80124ba:	f240 22d5 	movw	r2, #725	; 0x2d5
 80124be:	4950      	ldr	r1, [pc, #320]	; (8012600 <udp_sendto_if_src+0x1c4>)
 80124c0:	484b      	ldr	r0, [pc, #300]	; (80125f0 <udp_sendto_if_src+0x1b4>)
 80124c2:	f005 f86d 	bl	80175a0 <iprintf>
 80124c6:	f06f 030f 	mvn.w	r3, #15
 80124ca:	e088      	b.n	80125de <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	8a5b      	ldrh	r3, [r3, #18]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d10f      	bne.n	80124f4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80124d4:	68f9      	ldr	r1, [r7, #12]
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	8a5b      	ldrh	r3, [r3, #18]
 80124da:	461a      	mov	r2, r3
 80124dc:	68f8      	ldr	r0, [r7, #12]
 80124de:	f000 f893 	bl	8012608 <udp_bind>
 80124e2:	4603      	mov	r3, r0
 80124e4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80124e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d002      	beq.n	80124f4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80124ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80124f2:	e074      	b.n	80125de <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	891b      	ldrh	r3, [r3, #8]
 80124f8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d902      	bls.n	8012506 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012504:	e06b      	b.n	80125de <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012506:	2108      	movs	r1, #8
 8012508:	68b8      	ldr	r0, [r7, #8]
 801250a:	f7f8 ffbb 	bl	800b484 <pbuf_add_header>
 801250e:	4603      	mov	r3, r0
 8012510:	2b00      	cmp	r3, #0
 8012512:	d015      	beq.n	8012540 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012514:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012518:	2108      	movs	r1, #8
 801251a:	2022      	movs	r0, #34	; 0x22
 801251c:	f7f8 fd64 	bl	800afe8 <pbuf_alloc>
 8012520:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012522:	69fb      	ldr	r3, [r7, #28]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d102      	bne.n	801252e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801252c:	e057      	b.n	80125de <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	891b      	ldrh	r3, [r3, #8]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d006      	beq.n	8012544 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012536:	68b9      	ldr	r1, [r7, #8]
 8012538:	69f8      	ldr	r0, [r7, #28]
 801253a:	f7f9 f951 	bl	800b7e0 <pbuf_chain>
 801253e:	e001      	b.n	8012544 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012544:	69fb      	ldr	r3, [r7, #28]
 8012546:	895b      	ldrh	r3, [r3, #10]
 8012548:	2b07      	cmp	r3, #7
 801254a:	d806      	bhi.n	801255a <udp_sendto_if_src+0x11e>
 801254c:	4b26      	ldr	r3, [pc, #152]	; (80125e8 <udp_sendto_if_src+0x1ac>)
 801254e:	f240 320d 	movw	r2, #781	; 0x30d
 8012552:	492c      	ldr	r1, [pc, #176]	; (8012604 <udp_sendto_if_src+0x1c8>)
 8012554:	4826      	ldr	r0, [pc, #152]	; (80125f0 <udp_sendto_if_src+0x1b4>)
 8012556:	f005 f823 	bl	80175a0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801255a:	69fb      	ldr	r3, [r7, #28]
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	8a5b      	ldrh	r3, [r3, #18]
 8012564:	4618      	mov	r0, r3
 8012566:	f7f7 fc89 	bl	8009e7c <lwip_htons>
 801256a:	4603      	mov	r3, r0
 801256c:	461a      	mov	r2, r3
 801256e:	697b      	ldr	r3, [r7, #20]
 8012570:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012572:	887b      	ldrh	r3, [r7, #2]
 8012574:	4618      	mov	r0, r3
 8012576:	f7f7 fc81 	bl	8009e7c <lwip_htons>
 801257a:	4603      	mov	r3, r0
 801257c:	461a      	mov	r2, r3
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	2200      	movs	r2, #0
 8012586:	719a      	strb	r2, [r3, #6]
 8012588:	2200      	movs	r2, #0
 801258a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801258c:	69fb      	ldr	r3, [r7, #28]
 801258e:	891b      	ldrh	r3, [r3, #8]
 8012590:	4618      	mov	r0, r3
 8012592:	f7f7 fc73 	bl	8009e7c <lwip_htons>
 8012596:	4603      	mov	r3, r0
 8012598:	461a      	mov	r2, r3
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801259e:	2311      	movs	r3, #17
 80125a0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	7adb      	ldrb	r3, [r3, #11]
 80125a6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	7a9b      	ldrb	r3, [r3, #10]
 80125ac:	7cb9      	ldrb	r1, [r7, #18]
 80125ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125b0:	9202      	str	r2, [sp, #8]
 80125b2:	7cfa      	ldrb	r2, [r7, #19]
 80125b4:	9201      	str	r2, [sp, #4]
 80125b6:	9300      	str	r3, [sp, #0]
 80125b8:	460b      	mov	r3, r1
 80125ba:	687a      	ldr	r2, [r7, #4]
 80125bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80125be:	69f8      	ldr	r0, [r7, #28]
 80125c0:	f003 fb0c 	bl	8015bdc <ip4_output_if_src>
 80125c4:	4603      	mov	r3, r0
 80125c6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80125c8:	69fa      	ldr	r2, [r7, #28]
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d004      	beq.n	80125da <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80125d0:	69f8      	ldr	r0, [r7, #28]
 80125d2:	f7f8 ffed 	bl	800b5b0 <pbuf_free>
    q = NULL;
 80125d6:	2300      	movs	r3, #0
 80125d8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80125da:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80125de:	4618      	mov	r0, r3
 80125e0:	3720      	adds	r7, #32
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd80      	pop	{r7, pc}
 80125e6:	bf00      	nop
 80125e8:	0801eafc 	.word	0x0801eafc
 80125ec:	0801ece8 	.word	0x0801ece8
 80125f0:	0801eb50 	.word	0x0801eb50
 80125f4:	0801ed08 	.word	0x0801ed08
 80125f8:	0801ed28 	.word	0x0801ed28
 80125fc:	0801ed4c 	.word	0x0801ed4c
 8012600:	0801ed70 	.word	0x0801ed70
 8012604:	0801ed94 	.word	0x0801ed94

08012608 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b086      	sub	sp, #24
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	4613      	mov	r3, r2
 8012614:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d101      	bne.n	8012620 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801261c:	4b39      	ldr	r3, [pc, #228]	; (8012704 <udp_bind+0xfc>)
 801261e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d109      	bne.n	801263a <udp_bind+0x32>
 8012626:	4b38      	ldr	r3, [pc, #224]	; (8012708 <udp_bind+0x100>)
 8012628:	f240 32b7 	movw	r2, #951	; 0x3b7
 801262c:	4937      	ldr	r1, [pc, #220]	; (801270c <udp_bind+0x104>)
 801262e:	4838      	ldr	r0, [pc, #224]	; (8012710 <udp_bind+0x108>)
 8012630:	f004 ffb6 	bl	80175a0 <iprintf>
 8012634:	f06f 030f 	mvn.w	r3, #15
 8012638:	e060      	b.n	80126fc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801263a:	2300      	movs	r3, #0
 801263c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801263e:	4b35      	ldr	r3, [pc, #212]	; (8012714 <udp_bind+0x10c>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	617b      	str	r3, [r7, #20]
 8012644:	e009      	b.n	801265a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012646:	68fa      	ldr	r2, [r7, #12]
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	429a      	cmp	r2, r3
 801264c:	d102      	bne.n	8012654 <udp_bind+0x4c>
      rebind = 1;
 801264e:	2301      	movs	r3, #1
 8012650:	74fb      	strb	r3, [r7, #19]
      break;
 8012652:	e005      	b.n	8012660 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	617b      	str	r3, [r7, #20]
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d1f2      	bne.n	8012646 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012660:	88fb      	ldrh	r3, [r7, #6]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d109      	bne.n	801267a <udp_bind+0x72>
    port = udp_new_port();
 8012666:	f7ff fcc1 	bl	8011fec <udp_new_port>
 801266a:	4603      	mov	r3, r0
 801266c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801266e:	88fb      	ldrh	r3, [r7, #6]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d12c      	bne.n	80126ce <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012674:	f06f 0307 	mvn.w	r3, #7
 8012678:	e040      	b.n	80126fc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801267a:	4b26      	ldr	r3, [pc, #152]	; (8012714 <udp_bind+0x10c>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	617b      	str	r3, [r7, #20]
 8012680:	e022      	b.n	80126c8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012682:	68fa      	ldr	r2, [r7, #12]
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	429a      	cmp	r2, r3
 8012688:	d01b      	beq.n	80126c2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	8a5b      	ldrh	r3, [r3, #18]
 801268e:	88fa      	ldrh	r2, [r7, #6]
 8012690:	429a      	cmp	r2, r3
 8012692:	d116      	bne.n	80126c2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	681a      	ldr	r2, [r3, #0]
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801269c:	429a      	cmp	r2, r3
 801269e:	d00d      	beq.n	80126bc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d00a      	beq.n	80126bc <udp_bind+0xb4>
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d006      	beq.n	80126bc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80126ae:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d003      	beq.n	80126bc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d102      	bne.n	80126c2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80126bc:	f06f 0307 	mvn.w	r3, #7
 80126c0:	e01c      	b.n	80126fc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	68db      	ldr	r3, [r3, #12]
 80126c6:	617b      	str	r3, [r7, #20]
 80126c8:	697b      	ldr	r3, [r7, #20]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d1d9      	bne.n	8012682 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d002      	beq.n	80126da <udp_bind+0xd2>
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	e000      	b.n	80126dc <udp_bind+0xd4>
 80126da:	2300      	movs	r3, #0
 80126dc:	68fa      	ldr	r2, [r7, #12]
 80126de:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	88fa      	ldrh	r2, [r7, #6]
 80126e4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80126e6:	7cfb      	ldrb	r3, [r7, #19]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d106      	bne.n	80126fa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80126ec:	4b09      	ldr	r3, [pc, #36]	; (8012714 <udp_bind+0x10c>)
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80126f4:	4a07      	ldr	r2, [pc, #28]	; (8012714 <udp_bind+0x10c>)
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80126fa:	2300      	movs	r3, #0
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3718      	adds	r7, #24
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}
 8012704:	08032adc 	.word	0x08032adc
 8012708:	0801eafc 	.word	0x0801eafc
 801270c:	0801edc4 	.word	0x0801edc4
 8012710:	0801eb50 	.word	0x0801eb50
 8012714:	2000d870 	.word	0x2000d870

08012718 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b086      	sub	sp, #24
 801271c:	af00      	add	r7, sp, #0
 801271e:	60f8      	str	r0, [r7, #12]
 8012720:	60b9      	str	r1, [r7, #8]
 8012722:	4613      	mov	r3, r2
 8012724:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d109      	bne.n	8012740 <udp_connect+0x28>
 801272c:	4b2c      	ldr	r3, [pc, #176]	; (80127e0 <udp_connect+0xc8>)
 801272e:	f240 4235 	movw	r2, #1077	; 0x435
 8012732:	492c      	ldr	r1, [pc, #176]	; (80127e4 <udp_connect+0xcc>)
 8012734:	482c      	ldr	r0, [pc, #176]	; (80127e8 <udp_connect+0xd0>)
 8012736:	f004 ff33 	bl	80175a0 <iprintf>
 801273a:	f06f 030f 	mvn.w	r3, #15
 801273e:	e04b      	b.n	80127d8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d109      	bne.n	801275a <udp_connect+0x42>
 8012746:	4b26      	ldr	r3, [pc, #152]	; (80127e0 <udp_connect+0xc8>)
 8012748:	f240 4236 	movw	r2, #1078	; 0x436
 801274c:	4927      	ldr	r1, [pc, #156]	; (80127ec <udp_connect+0xd4>)
 801274e:	4826      	ldr	r0, [pc, #152]	; (80127e8 <udp_connect+0xd0>)
 8012750:	f004 ff26 	bl	80175a0 <iprintf>
 8012754:	f06f 030f 	mvn.w	r3, #15
 8012758:	e03e      	b.n	80127d8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	8a5b      	ldrh	r3, [r3, #18]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d10f      	bne.n	8012782 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012762:	68f9      	ldr	r1, [r7, #12]
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	8a5b      	ldrh	r3, [r3, #18]
 8012768:	461a      	mov	r2, r3
 801276a:	68f8      	ldr	r0, [r7, #12]
 801276c:	f7ff ff4c 	bl	8012608 <udp_bind>
 8012770:	4603      	mov	r3, r0
 8012772:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012774:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d002      	beq.n	8012782 <udp_connect+0x6a>
      return err;
 801277c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012780:	e02a      	b.n	80127d8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d002      	beq.n	801278e <udp_connect+0x76>
 8012788:	68bb      	ldr	r3, [r7, #8]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	e000      	b.n	8012790 <udp_connect+0x78>
 801278e:	2300      	movs	r3, #0
 8012790:	68fa      	ldr	r2, [r7, #12]
 8012792:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	88fa      	ldrh	r2, [r7, #6]
 8012798:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	7c1b      	ldrb	r3, [r3, #16]
 801279e:	f043 0304 	orr.w	r3, r3, #4
 80127a2:	b2da      	uxtb	r2, r3
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127a8:	4b11      	ldr	r3, [pc, #68]	; (80127f0 <udp_connect+0xd8>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	617b      	str	r3, [r7, #20]
 80127ae:	e008      	b.n	80127c2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80127b0:	68fa      	ldr	r2, [r7, #12]
 80127b2:	697b      	ldr	r3, [r7, #20]
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d101      	bne.n	80127bc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80127b8:	2300      	movs	r3, #0
 80127ba:	e00d      	b.n	80127d8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	617b      	str	r3, [r7, #20]
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d1f3      	bne.n	80127b0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80127c8:	4b09      	ldr	r3, [pc, #36]	; (80127f0 <udp_connect+0xd8>)
 80127ca:	681a      	ldr	r2, [r3, #0]
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80127d0:	4a07      	ldr	r2, [pc, #28]	; (80127f0 <udp_connect+0xd8>)
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80127d6:	2300      	movs	r3, #0
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3718      	adds	r7, #24
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}
 80127e0:	0801eafc 	.word	0x0801eafc
 80127e4:	0801eddc 	.word	0x0801eddc
 80127e8:	0801eb50 	.word	0x0801eb50
 80127ec:	0801edf8 	.word	0x0801edf8
 80127f0:	2000d870 	.word	0x2000d870

080127f4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	60b9      	str	r1, [r7, #8]
 80127fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d107      	bne.n	8012816 <udp_recv+0x22>
 8012806:	4b08      	ldr	r3, [pc, #32]	; (8012828 <udp_recv+0x34>)
 8012808:	f240 428a 	movw	r2, #1162	; 0x48a
 801280c:	4907      	ldr	r1, [pc, #28]	; (801282c <udp_recv+0x38>)
 801280e:	4808      	ldr	r0, [pc, #32]	; (8012830 <udp_recv+0x3c>)
 8012810:	f004 fec6 	bl	80175a0 <iprintf>
 8012814:	e005      	b.n	8012822 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	68ba      	ldr	r2, [r7, #8]
 801281a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	61da      	str	r2, [r3, #28]
}
 8012822:	3710      	adds	r7, #16
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}
 8012828:	0801eafc 	.word	0x0801eafc
 801282c:	0801ee30 	.word	0x0801ee30
 8012830:	0801eb50 	.word	0x0801eb50

08012834 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b084      	sub	sp, #16
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d107      	bne.n	8012852 <udp_remove+0x1e>
 8012842:	4b19      	ldr	r3, [pc, #100]	; (80128a8 <udp_remove+0x74>)
 8012844:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012848:	4918      	ldr	r1, [pc, #96]	; (80128ac <udp_remove+0x78>)
 801284a:	4819      	ldr	r0, [pc, #100]	; (80128b0 <udp_remove+0x7c>)
 801284c:	f004 fea8 	bl	80175a0 <iprintf>
 8012850:	e026      	b.n	80128a0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012852:	4b18      	ldr	r3, [pc, #96]	; (80128b4 <udp_remove+0x80>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	687a      	ldr	r2, [r7, #4]
 8012858:	429a      	cmp	r2, r3
 801285a:	d105      	bne.n	8012868 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801285c:	4b15      	ldr	r3, [pc, #84]	; (80128b4 <udp_remove+0x80>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	68db      	ldr	r3, [r3, #12]
 8012862:	4a14      	ldr	r2, [pc, #80]	; (80128b4 <udp_remove+0x80>)
 8012864:	6013      	str	r3, [r2, #0]
 8012866:	e017      	b.n	8012898 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012868:	4b12      	ldr	r3, [pc, #72]	; (80128b4 <udp_remove+0x80>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	60fb      	str	r3, [r7, #12]
 801286e:	e010      	b.n	8012892 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	68db      	ldr	r3, [r3, #12]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d009      	beq.n	801288c <udp_remove+0x58>
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	68db      	ldr	r3, [r3, #12]
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	429a      	cmp	r2, r3
 8012880:	d104      	bne.n	801288c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	68da      	ldr	r2, [r3, #12]
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	60da      	str	r2, [r3, #12]
        break;
 801288a:	e005      	b.n	8012898 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	60fb      	str	r3, [r7, #12]
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d1eb      	bne.n	8012870 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012898:	6879      	ldr	r1, [r7, #4]
 801289a:	2000      	movs	r0, #0
 801289c:	f7f8 f86e 	bl	800a97c <memp_free>
}
 80128a0:	3710      	adds	r7, #16
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	0801eafc 	.word	0x0801eafc
 80128ac:	0801ee48 	.word	0x0801ee48
 80128b0:	0801eb50 	.word	0x0801eb50
 80128b4:	2000d870 	.word	0x2000d870

080128b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80128be:	2000      	movs	r0, #0
 80128c0:	f7f8 f810 	bl	800a8e4 <memp_malloc>
 80128c4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d007      	beq.n	80128dc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80128cc:	2220      	movs	r2, #32
 80128ce:	2100      	movs	r1, #0
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f004 f9f3 	bl	8016cbc <memset>
    pcb->ttl = UDP_TTL;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	22ff      	movs	r2, #255	; 0xff
 80128da:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80128dc:	687b      	ldr	r3, [r7, #4]
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3708      	adds	r7, #8
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
	...

080128e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80128e8:	b480      	push	{r7}
 80128ea:	b085      	sub	sp, #20
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d01e      	beq.n	8012936 <udp_netif_ip_addr_changed+0x4e>
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d01a      	beq.n	8012936 <udp_netif_ip_addr_changed+0x4e>
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d017      	beq.n	8012936 <udp_netif_ip_addr_changed+0x4e>
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d013      	beq.n	8012936 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801290e:	4b0d      	ldr	r3, [pc, #52]	; (8012944 <udp_netif_ip_addr_changed+0x5c>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	60fb      	str	r3, [r7, #12]
 8012914:	e00c      	b.n	8012930 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	681a      	ldr	r2, [r3, #0]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	429a      	cmp	r2, r3
 8012920:	d103      	bne.n	801292a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	681a      	ldr	r2, [r3, #0]
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	68db      	ldr	r3, [r3, #12]
 801292e:	60fb      	str	r3, [r7, #12]
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d1ef      	bne.n	8012916 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012936:	bf00      	nop
 8012938:	3714      	adds	r7, #20
 801293a:	46bd      	mov	sp, r7
 801293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012940:	4770      	bx	lr
 8012942:	bf00      	nop
 8012944:	2000d870 	.word	0x2000d870

08012948 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 8012948:	b480      	push	{r7}
 801294a:	b083      	sub	sp, #12
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
}
 8012950:	bf00      	nop
 8012952:	370c      	adds	r7, #12
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr

0801295c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012960:	4b20      	ldr	r3, [pc, #128]	; (80129e4 <dhcp_inc_pcb_refcount+0x88>)
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d133      	bne.n	80129d0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012968:	4b1f      	ldr	r3, [pc, #124]	; (80129e8 <dhcp_inc_pcb_refcount+0x8c>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d005      	beq.n	801297c <dhcp_inc_pcb_refcount+0x20>
 8012970:	4b1e      	ldr	r3, [pc, #120]	; (80129ec <dhcp_inc_pcb_refcount+0x90>)
 8012972:	22e5      	movs	r2, #229	; 0xe5
 8012974:	491e      	ldr	r1, [pc, #120]	; (80129f0 <dhcp_inc_pcb_refcount+0x94>)
 8012976:	481f      	ldr	r0, [pc, #124]	; (80129f4 <dhcp_inc_pcb_refcount+0x98>)
 8012978:	f004 fe12 	bl	80175a0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801297c:	f7ff ff9c 	bl	80128b8 <udp_new>
 8012980:	4603      	mov	r3, r0
 8012982:	4a19      	ldr	r2, [pc, #100]	; (80129e8 <dhcp_inc_pcb_refcount+0x8c>)
 8012984:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012986:	4b18      	ldr	r3, [pc, #96]	; (80129e8 <dhcp_inc_pcb_refcount+0x8c>)
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	2b00      	cmp	r3, #0
 801298c:	d102      	bne.n	8012994 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801298e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012992:	e024      	b.n	80129de <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012994:	4b14      	ldr	r3, [pc, #80]	; (80129e8 <dhcp_inc_pcb_refcount+0x8c>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	7a5a      	ldrb	r2, [r3, #9]
 801299a:	4b13      	ldr	r3, [pc, #76]	; (80129e8 <dhcp_inc_pcb_refcount+0x8c>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	f042 0220 	orr.w	r2, r2, #32
 80129a2:	b2d2      	uxtb	r2, r2
 80129a4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80129a6:	4b10      	ldr	r3, [pc, #64]	; (80129e8 <dhcp_inc_pcb_refcount+0x8c>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2244      	movs	r2, #68	; 0x44
 80129ac:	4912      	ldr	r1, [pc, #72]	; (80129f8 <dhcp_inc_pcb_refcount+0x9c>)
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7ff fe2a 	bl	8012608 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80129b4:	4b0c      	ldr	r3, [pc, #48]	; (80129e8 <dhcp_inc_pcb_refcount+0x8c>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	2243      	movs	r2, #67	; 0x43
 80129ba:	490f      	ldr	r1, [pc, #60]	; (80129f8 <dhcp_inc_pcb_refcount+0x9c>)
 80129bc:	4618      	mov	r0, r3
 80129be:	f7ff feab 	bl	8012718 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80129c2:	4b09      	ldr	r3, [pc, #36]	; (80129e8 <dhcp_inc_pcb_refcount+0x8c>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	2200      	movs	r2, #0
 80129c8:	490c      	ldr	r1, [pc, #48]	; (80129fc <dhcp_inc_pcb_refcount+0xa0>)
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7ff ff12 	bl	80127f4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80129d0:	4b04      	ldr	r3, [pc, #16]	; (80129e4 <dhcp_inc_pcb_refcount+0x88>)
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	3301      	adds	r3, #1
 80129d6:	b2da      	uxtb	r2, r3
 80129d8:	4b02      	ldr	r3, [pc, #8]	; (80129e4 <dhcp_inc_pcb_refcount+0x88>)
 80129da:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80129dc:	2300      	movs	r3, #0
}
 80129de:	4618      	mov	r0, r3
 80129e0:	bd80      	pop	{r7, pc}
 80129e2:	bf00      	nop
 80129e4:	20001258 	.word	0x20001258
 80129e8:	20001254 	.word	0x20001254
 80129ec:	0801ee60 	.word	0x0801ee60
 80129f0:	0801ee98 	.word	0x0801ee98
 80129f4:	0801eec0 	.word	0x0801eec0
 80129f8:	08032adc 	.word	0x08032adc
 80129fc:	08014219 	.word	0x08014219

08012a00 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012a04:	4b0e      	ldr	r3, [pc, #56]	; (8012a40 <dhcp_dec_pcb_refcount+0x40>)
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d105      	bne.n	8012a18 <dhcp_dec_pcb_refcount+0x18>
 8012a0c:	4b0d      	ldr	r3, [pc, #52]	; (8012a44 <dhcp_dec_pcb_refcount+0x44>)
 8012a0e:	22ff      	movs	r2, #255	; 0xff
 8012a10:	490d      	ldr	r1, [pc, #52]	; (8012a48 <dhcp_dec_pcb_refcount+0x48>)
 8012a12:	480e      	ldr	r0, [pc, #56]	; (8012a4c <dhcp_dec_pcb_refcount+0x4c>)
 8012a14:	f004 fdc4 	bl	80175a0 <iprintf>
  dhcp_pcb_refcount--;
 8012a18:	4b09      	ldr	r3, [pc, #36]	; (8012a40 <dhcp_dec_pcb_refcount+0x40>)
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	3b01      	subs	r3, #1
 8012a1e:	b2da      	uxtb	r2, r3
 8012a20:	4b07      	ldr	r3, [pc, #28]	; (8012a40 <dhcp_dec_pcb_refcount+0x40>)
 8012a22:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012a24:	4b06      	ldr	r3, [pc, #24]	; (8012a40 <dhcp_dec_pcb_refcount+0x40>)
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d107      	bne.n	8012a3c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012a2c:	4b08      	ldr	r3, [pc, #32]	; (8012a50 <dhcp_dec_pcb_refcount+0x50>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7ff feff 	bl	8012834 <udp_remove>
    dhcp_pcb = NULL;
 8012a36:	4b06      	ldr	r3, [pc, #24]	; (8012a50 <dhcp_dec_pcb_refcount+0x50>)
 8012a38:	2200      	movs	r2, #0
 8012a3a:	601a      	str	r2, [r3, #0]
  }
}
 8012a3c:	bf00      	nop
 8012a3e:	bd80      	pop	{r7, pc}
 8012a40:	20001258 	.word	0x20001258
 8012a44:	0801ee60 	.word	0x0801ee60
 8012a48:	0801eee8 	.word	0x0801eee8
 8012a4c:	0801eec0 	.word	0x0801eec0
 8012a50:	20001254 	.word	0x20001254

08012a54 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	b084      	sub	sp, #16
 8012a58:	af00      	add	r7, sp, #0
 8012a5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a60:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012a62:	210c      	movs	r1, #12
 8012a64:	68f8      	ldr	r0, [r7, #12]
 8012a66:	f001 f819 	bl	8013a9c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012a6a:	4b06      	ldr	r3, [pc, #24]	; (8012a84 <dhcp_handle_nak+0x30>)
 8012a6c:	4a05      	ldr	r2, [pc, #20]	; (8012a84 <dhcp_handle_nak+0x30>)
 8012a6e:	4905      	ldr	r1, [pc, #20]	; (8012a84 <dhcp_handle_nak+0x30>)
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f7f8 f925 	bl	800acc0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f000 fc0c 	bl	8013294 <dhcp_discover>
}
 8012a7c:	bf00      	nop
 8012a7e:	3710      	adds	r7, #16
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	08032adc 	.word	0x08032adc

08012a88 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b084      	sub	sp, #16
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a94:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012a96:	2108      	movs	r1, #8
 8012a98:	68f8      	ldr	r0, [r7, #12]
 8012a9a:	f000 ffff 	bl	8013a9c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	331c      	adds	r3, #28
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	4619      	mov	r1, r3
 8012aa6:	6878      	ldr	r0, [r7, #4]
 8012aa8:	f002 fb00 	bl	80150ac <etharp_query>
 8012aac:	4603      	mov	r3, r0
 8012aae:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	799b      	ldrb	r3, [r3, #6]
 8012ab4:	2bff      	cmp	r3, #255	; 0xff
 8012ab6:	d005      	beq.n	8012ac4 <dhcp_check+0x3c>
    dhcp->tries++;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	799b      	ldrb	r3, [r3, #6]
 8012abc:	3301      	adds	r3, #1
 8012abe:	b2da      	uxtb	r2, r3
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012ac4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012ac8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012aca:	893b      	ldrh	r3, [r7, #8]
 8012acc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012ad0:	4a06      	ldr	r2, [pc, #24]	; (8012aec <dhcp_check+0x64>)
 8012ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8012ad6:	1152      	asrs	r2, r2, #5
 8012ad8:	17db      	asrs	r3, r3, #31
 8012ada:	1ad3      	subs	r3, r2, r3
 8012adc:	b29a      	uxth	r2, r3
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012ae2:	bf00      	nop
 8012ae4:	3710      	adds	r7, #16
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
 8012aea:	bf00      	nop
 8012aec:	10624dd3 	.word	0x10624dd3

08012af0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b084      	sub	sp, #16
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012afe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012b00:	4b0c      	ldr	r3, [pc, #48]	; (8012b34 <dhcp_handle_offer+0x44>)
 8012b02:	789b      	ldrb	r3, [r3, #2]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d011      	beq.n	8012b2c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012b0e:	4b0a      	ldr	r3, [pc, #40]	; (8012b38 <dhcp_handle_offer+0x48>)
 8012b10:	689b      	ldr	r3, [r3, #8]
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7f7 f9c7 	bl	8009ea6 <lwip_htonl>
 8012b18:	4602      	mov	r2, r0
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	691a      	ldr	r2, [r3, #16]
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f000 f808 	bl	8012b3c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012b2c:	bf00      	nop
 8012b2e:	3710      	adds	r7, #16
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}
 8012b34:	2000d874 	.word	0x2000d874
 8012b38:	2000d87c 	.word	0x2000d87c

08012b3c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012b3c:	b5b0      	push	{r4, r5, r7, lr}
 8012b3e:	b08a      	sub	sp, #40	; 0x28
 8012b40:	af02      	add	r7, sp, #8
 8012b42:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d109      	bne.n	8012b5e <dhcp_select+0x22>
 8012b4a:	4b71      	ldr	r3, [pc, #452]	; (8012d10 <dhcp_select+0x1d4>)
 8012b4c:	f240 1277 	movw	r2, #375	; 0x177
 8012b50:	4970      	ldr	r1, [pc, #448]	; (8012d14 <dhcp_select+0x1d8>)
 8012b52:	4871      	ldr	r0, [pc, #452]	; (8012d18 <dhcp_select+0x1dc>)
 8012b54:	f004 fd24 	bl	80175a0 <iprintf>
 8012b58:	f06f 030f 	mvn.w	r3, #15
 8012b5c:	e0d3      	b.n	8012d06 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b62:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d109      	bne.n	8012b7e <dhcp_select+0x42>
 8012b6a:	4b69      	ldr	r3, [pc, #420]	; (8012d10 <dhcp_select+0x1d4>)
 8012b6c:	f240 1279 	movw	r2, #377	; 0x179
 8012b70:	496a      	ldr	r1, [pc, #424]	; (8012d1c <dhcp_select+0x1e0>)
 8012b72:	4869      	ldr	r0, [pc, #420]	; (8012d18 <dhcp_select+0x1dc>)
 8012b74:	f004 fd14 	bl	80175a0 <iprintf>
 8012b78:	f06f 0305 	mvn.w	r3, #5
 8012b7c:	e0c3      	b.n	8012d06 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012b7e:	2101      	movs	r1, #1
 8012b80:	69b8      	ldr	r0, [r7, #24]
 8012b82:	f000 ff8b 	bl	8013a9c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012b86:	f107 030c 	add.w	r3, r7, #12
 8012b8a:	2203      	movs	r2, #3
 8012b8c:	69b9      	ldr	r1, [r7, #24]
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f001 fc10 	bl	80143b4 <dhcp_create_msg>
 8012b94:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	f000 8085 	beq.w	8012ca8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012ba4:	89b8      	ldrh	r0, [r7, #12]
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012bac:	2302      	movs	r3, #2
 8012bae:	2239      	movs	r2, #57	; 0x39
 8012bb0:	f000 ff8e 	bl	8013ad0 <dhcp_option>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012bb8:	89b8      	ldrh	r0, [r7, #12]
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	f000 ffdd 	bl	8013b84 <dhcp_option_short>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012bce:	89b8      	ldrh	r0, [r7, #12]
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012bd6:	2304      	movs	r3, #4
 8012bd8:	2232      	movs	r2, #50	; 0x32
 8012bda:	f000 ff79 	bl	8013ad0 <dhcp_option>
 8012bde:	4603      	mov	r3, r0
 8012be0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012be2:	89bc      	ldrh	r4, [r7, #12]
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012bea:	69bb      	ldr	r3, [r7, #24]
 8012bec:	69db      	ldr	r3, [r3, #28]
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7f7 f959 	bl	8009ea6 <lwip_htonl>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	4629      	mov	r1, r5
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	f000 fff4 	bl	8013be8 <dhcp_option_long>
 8012c00:	4603      	mov	r3, r0
 8012c02:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012c04:	89b8      	ldrh	r0, [r7, #12]
 8012c06:	693b      	ldr	r3, [r7, #16]
 8012c08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c0c:	2304      	movs	r3, #4
 8012c0e:	2236      	movs	r2, #54	; 0x36
 8012c10:	f000 ff5e 	bl	8013ad0 <dhcp_option>
 8012c14:	4603      	mov	r3, r0
 8012c16:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012c18:	89bc      	ldrh	r4, [r7, #12]
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012c20:	69bb      	ldr	r3, [r7, #24]
 8012c22:	699b      	ldr	r3, [r3, #24]
 8012c24:	4618      	mov	r0, r3
 8012c26:	f7f7 f93e 	bl	8009ea6 <lwip_htonl>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	4629      	mov	r1, r5
 8012c30:	4620      	mov	r0, r4
 8012c32:	f000 ffd9 	bl	8013be8 <dhcp_option_long>
 8012c36:	4603      	mov	r3, r0
 8012c38:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012c3a:	89b8      	ldrh	r0, [r7, #12]
 8012c3c:	693b      	ldr	r3, [r7, #16]
 8012c3e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c42:	2303      	movs	r3, #3
 8012c44:	2237      	movs	r2, #55	; 0x37
 8012c46:	f000 ff43 	bl	8013ad0 <dhcp_option>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012c4e:	2300      	movs	r3, #0
 8012c50:	77bb      	strb	r3, [r7, #30]
 8012c52:	e00e      	b.n	8012c72 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012c54:	89b8      	ldrh	r0, [r7, #12]
 8012c56:	693b      	ldr	r3, [r7, #16]
 8012c58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c5c:	7fbb      	ldrb	r3, [r7, #30]
 8012c5e:	4a30      	ldr	r2, [pc, #192]	; (8012d20 <dhcp_select+0x1e4>)
 8012c60:	5cd3      	ldrb	r3, [r2, r3]
 8012c62:	461a      	mov	r2, r3
 8012c64:	f000 ff68 	bl	8013b38 <dhcp_option_byte>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012c6c:	7fbb      	ldrb	r3, [r7, #30]
 8012c6e:	3301      	adds	r3, #1
 8012c70:	77bb      	strb	r3, [r7, #30]
 8012c72:	7fbb      	ldrb	r3, [r7, #30]
 8012c74:	2b02      	cmp	r3, #2
 8012c76:	d9ed      	bls.n	8012c54 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012c78:	89b8      	ldrh	r0, [r7, #12]
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	33f0      	adds	r3, #240	; 0xf0
 8012c7e:	697a      	ldr	r2, [r7, #20]
 8012c80:	4619      	mov	r1, r3
 8012c82:	f001 fc6d 	bl	8014560 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012c86:	4b27      	ldr	r3, [pc, #156]	; (8012d24 <dhcp_select+0x1e8>)
 8012c88:	6818      	ldr	r0, [r3, #0]
 8012c8a:	4b27      	ldr	r3, [pc, #156]	; (8012d28 <dhcp_select+0x1ec>)
 8012c8c:	9301      	str	r3, [sp, #4]
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	9300      	str	r3, [sp, #0]
 8012c92:	2343      	movs	r3, #67	; 0x43
 8012c94:	4a25      	ldr	r2, [pc, #148]	; (8012d2c <dhcp_select+0x1f0>)
 8012c96:	6979      	ldr	r1, [r7, #20]
 8012c98:	f7ff fbd0 	bl	801243c <udp_sendto_if_src>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012ca0:	6978      	ldr	r0, [r7, #20]
 8012ca2:	f7f8 fc85 	bl	800b5b0 <pbuf_free>
 8012ca6:	e001      	b.n	8012cac <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012ca8:	23ff      	movs	r3, #255	; 0xff
 8012caa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012cac:	69bb      	ldr	r3, [r7, #24]
 8012cae:	799b      	ldrb	r3, [r3, #6]
 8012cb0:	2bff      	cmp	r3, #255	; 0xff
 8012cb2:	d005      	beq.n	8012cc0 <dhcp_select+0x184>
    dhcp->tries++;
 8012cb4:	69bb      	ldr	r3, [r7, #24]
 8012cb6:	799b      	ldrb	r3, [r3, #6]
 8012cb8:	3301      	adds	r3, #1
 8012cba:	b2da      	uxtb	r2, r3
 8012cbc:	69bb      	ldr	r3, [r7, #24]
 8012cbe:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012cc0:	69bb      	ldr	r3, [r7, #24]
 8012cc2:	799b      	ldrb	r3, [r3, #6]
 8012cc4:	2b05      	cmp	r3, #5
 8012cc6:	d80d      	bhi.n	8012ce4 <dhcp_select+0x1a8>
 8012cc8:	69bb      	ldr	r3, [r7, #24]
 8012cca:	799b      	ldrb	r3, [r3, #6]
 8012ccc:	461a      	mov	r2, r3
 8012cce:	2301      	movs	r3, #1
 8012cd0:	4093      	lsls	r3, r2
 8012cd2:	b29b      	uxth	r3, r3
 8012cd4:	461a      	mov	r2, r3
 8012cd6:	0152      	lsls	r2, r2, #5
 8012cd8:	1ad2      	subs	r2, r2, r3
 8012cda:	0092      	lsls	r2, r2, #2
 8012cdc:	4413      	add	r3, r2
 8012cde:	00db      	lsls	r3, r3, #3
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	e001      	b.n	8012ce8 <dhcp_select+0x1ac>
 8012ce4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012ce8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012cea:	89fb      	ldrh	r3, [r7, #14]
 8012cec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012cf0:	4a0f      	ldr	r2, [pc, #60]	; (8012d30 <dhcp_select+0x1f4>)
 8012cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8012cf6:	1152      	asrs	r2, r2, #5
 8012cf8:	17db      	asrs	r3, r3, #31
 8012cfa:	1ad3      	subs	r3, r2, r3
 8012cfc:	b29a      	uxth	r2, r3
 8012cfe:	69bb      	ldr	r3, [r7, #24]
 8012d00:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012d02:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	3720      	adds	r7, #32
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8012d0e:	bf00      	nop
 8012d10:	0801ee60 	.word	0x0801ee60
 8012d14:	0801ef0c 	.word	0x0801ef0c
 8012d18:	0801eec0 	.word	0x0801eec0
 8012d1c:	0801ef28 	.word	0x0801ef28
 8012d20:	200005c4 	.word	0x200005c4
 8012d24:	20001254 	.word	0x20001254
 8012d28:	08032adc 	.word	0x08032adc
 8012d2c:	08032ae0 	.word	0x08032ae0
 8012d30:	10624dd3 	.word	0x10624dd3

08012d34 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b082      	sub	sp, #8
 8012d38:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012d3a:	4b27      	ldr	r3, [pc, #156]	; (8012dd8 <dhcp_coarse_tmr+0xa4>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	607b      	str	r3, [r7, #4]
 8012d40:	e042      	b.n	8012dc8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d46:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d039      	beq.n	8012dc2 <dhcp_coarse_tmr+0x8e>
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	795b      	ldrb	r3, [r3, #5]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d035      	beq.n	8012dc2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	8a9b      	ldrh	r3, [r3, #20]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d012      	beq.n	8012d84 <dhcp_coarse_tmr+0x50>
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	8a5b      	ldrh	r3, [r3, #18]
 8012d62:	3301      	adds	r3, #1
 8012d64:	b29a      	uxth	r2, r3
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	825a      	strh	r2, [r3, #18]
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	8a5a      	ldrh	r2, [r3, #18]
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	8a9b      	ldrh	r3, [r3, #20]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d106      	bne.n	8012d84 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f000 fdf6 	bl	8013968 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f000 f969 	bl	8013054 <dhcp_start>
 8012d82:	e01e      	b.n	8012dc2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	8a1b      	ldrh	r3, [r3, #16]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d00b      	beq.n	8012da4 <dhcp_coarse_tmr+0x70>
 8012d8c:	683b      	ldr	r3, [r7, #0]
 8012d8e:	8a1b      	ldrh	r3, [r3, #16]
 8012d90:	1e5a      	subs	r2, r3, #1
 8012d92:	b291      	uxth	r1, r2
 8012d94:	683a      	ldr	r2, [r7, #0]
 8012d96:	8211      	strh	r1, [r2, #16]
 8012d98:	2b01      	cmp	r3, #1
 8012d9a:	d103      	bne.n	8012da4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f000 f8c6 	bl	8012f2e <dhcp_t2_timeout>
 8012da2:	e00e      	b.n	8012dc2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	89db      	ldrh	r3, [r3, #14]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d00a      	beq.n	8012dc2 <dhcp_coarse_tmr+0x8e>
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	89db      	ldrh	r3, [r3, #14]
 8012db0:	1e5a      	subs	r2, r3, #1
 8012db2:	b291      	uxth	r1, r2
 8012db4:	683a      	ldr	r2, [r7, #0]
 8012db6:	81d1      	strh	r1, [r2, #14]
 8012db8:	2b01      	cmp	r3, #1
 8012dba:	d102      	bne.n	8012dc2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f000 f888 	bl	8012ed2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	607b      	str	r3, [r7, #4]
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d1b9      	bne.n	8012d42 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012dce:	bf00      	nop
 8012dd0:	bf00      	nop
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	2000d848 	.word	0x2000d848

08012ddc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b082      	sub	sp, #8
 8012de0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012de2:	4b16      	ldr	r3, [pc, #88]	; (8012e3c <dhcp_fine_tmr+0x60>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	607b      	str	r3, [r7, #4]
 8012de8:	e020      	b.n	8012e2c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dee:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d017      	beq.n	8012e26 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	891b      	ldrh	r3, [r3, #8]
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	d906      	bls.n	8012e0c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	891b      	ldrh	r3, [r3, #8]
 8012e02:	3b01      	subs	r3, #1
 8012e04:	b29a      	uxth	r2, r3
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	811a      	strh	r2, [r3, #8]
 8012e0a:	e00c      	b.n	8012e26 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	891b      	ldrh	r3, [r3, #8]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d108      	bne.n	8012e26 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	891b      	ldrh	r3, [r3, #8]
 8012e18:	3b01      	subs	r3, #1
 8012e1a:	b29a      	uxth	r2, r3
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f000 f80d 	bl	8012e40 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	607b      	str	r3, [r7, #4]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d1db      	bne.n	8012dea <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012e32:	bf00      	nop
 8012e34:	bf00      	nop
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	2000d848 	.word	0x2000d848

08012e40 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e4c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	795b      	ldrb	r3, [r3, #5]
 8012e52:	2b0c      	cmp	r3, #12
 8012e54:	d003      	beq.n	8012e5e <dhcp_timeout+0x1e>
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	795b      	ldrb	r3, [r3, #5]
 8012e5a:	2b06      	cmp	r3, #6
 8012e5c:	d103      	bne.n	8012e66 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f000 fa18 	bl	8013294 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012e64:	e031      	b.n	8012eca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	795b      	ldrb	r3, [r3, #5]
 8012e6a:	2b01      	cmp	r3, #1
 8012e6c:	d10e      	bne.n	8012e8c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	799b      	ldrb	r3, [r3, #6]
 8012e72:	2b05      	cmp	r3, #5
 8012e74:	d803      	bhi.n	8012e7e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f7ff fe60 	bl	8012b3c <dhcp_select>
}
 8012e7c:	e025      	b.n	8012eca <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	f000 fd72 	bl	8013968 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 f8e5 	bl	8013054 <dhcp_start>
}
 8012e8a:	e01e      	b.n	8012eca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	795b      	ldrb	r3, [r3, #5]
 8012e90:	2b08      	cmp	r3, #8
 8012e92:	d10b      	bne.n	8012eac <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	799b      	ldrb	r3, [r3, #6]
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d803      	bhi.n	8012ea4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f7ff fdf3 	bl	8012a88 <dhcp_check>
}
 8012ea2:	e012      	b.n	8012eca <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f000 fa97 	bl	80133d8 <dhcp_bind>
}
 8012eaa:	e00e      	b.n	8012eca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	795b      	ldrb	r3, [r3, #5]
 8012eb0:	2b03      	cmp	r3, #3
 8012eb2:	d10a      	bne.n	8012eca <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	799b      	ldrb	r3, [r3, #6]
 8012eb8:	2b01      	cmp	r3, #1
 8012eba:	d803      	bhi.n	8012ec4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f000 fc9d 	bl	80137fc <dhcp_reboot>
}
 8012ec2:	e002      	b.n	8012eca <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f000 f9e5 	bl	8013294 <dhcp_discover>
}
 8012eca:	bf00      	nop
 8012ecc:	3710      	adds	r7, #16
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}

08012ed2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012ed2:	b580      	push	{r7, lr}
 8012ed4:	b084      	sub	sp, #16
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ede:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	795b      	ldrb	r3, [r3, #5]
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d007      	beq.n	8012ef8 <dhcp_t1_timeout+0x26>
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	795b      	ldrb	r3, [r3, #5]
 8012eec:	2b0a      	cmp	r3, #10
 8012eee:	d003      	beq.n	8012ef8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012ef4:	2b05      	cmp	r3, #5
 8012ef6:	d116      	bne.n	8012f26 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f000 fb47 	bl	801358c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	899b      	ldrh	r3, [r3, #12]
 8012f02:	461a      	mov	r2, r3
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	8a5b      	ldrh	r3, [r3, #18]
 8012f08:	1ad3      	subs	r3, r2, r3
 8012f0a:	2b01      	cmp	r3, #1
 8012f0c:	dd0b      	ble.n	8012f26 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	899b      	ldrh	r3, [r3, #12]
 8012f12:	461a      	mov	r2, r3
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	8a5b      	ldrh	r3, [r3, #18]
 8012f18:	1ad3      	subs	r3, r2, r3
 8012f1a:	0fda      	lsrs	r2, r3, #31
 8012f1c:	4413      	add	r3, r2
 8012f1e:	105b      	asrs	r3, r3, #1
 8012f20:	b29a      	uxth	r2, r3
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012f26:	bf00      	nop
 8012f28:	3710      	adds	r7, #16
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}

08012f2e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012f2e:	b580      	push	{r7, lr}
 8012f30:	b084      	sub	sp, #16
 8012f32:	af00      	add	r7, sp, #0
 8012f34:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f3a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	795b      	ldrb	r3, [r3, #5]
 8012f40:	2b01      	cmp	r3, #1
 8012f42:	d00b      	beq.n	8012f5c <dhcp_t2_timeout+0x2e>
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	795b      	ldrb	r3, [r3, #5]
 8012f48:	2b0a      	cmp	r3, #10
 8012f4a:	d007      	beq.n	8012f5c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012f50:	2b05      	cmp	r3, #5
 8012f52:	d003      	beq.n	8012f5c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	795b      	ldrb	r3, [r3, #5]
 8012f58:	2b04      	cmp	r3, #4
 8012f5a:	d116      	bne.n	8012f8a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f000 fbb1 	bl	80136c4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	8a9b      	ldrh	r3, [r3, #20]
 8012f66:	461a      	mov	r2, r3
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	8a5b      	ldrh	r3, [r3, #18]
 8012f6c:	1ad3      	subs	r3, r2, r3
 8012f6e:	2b01      	cmp	r3, #1
 8012f70:	dd0b      	ble.n	8012f8a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	8a9b      	ldrh	r3, [r3, #20]
 8012f76:	461a      	mov	r2, r3
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	8a5b      	ldrh	r3, [r3, #18]
 8012f7c:	1ad3      	subs	r3, r2, r3
 8012f7e:	0fda      	lsrs	r2, r3, #31
 8012f80:	4413      	add	r3, r2
 8012f82:	105b      	asrs	r3, r3, #1
 8012f84:	b29a      	uxth	r2, r3
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8012f8a:	bf00      	nop
 8012f8c:	3710      	adds	r7, #16
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
	...

08012f94 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fa2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	2200      	movs	r2, #0
 8012fae:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012fb0:	4b26      	ldr	r3, [pc, #152]	; (801304c <dhcp_handle_ack+0xb8>)
 8012fb2:	78db      	ldrb	r3, [r3, #3]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d003      	beq.n	8012fc0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012fb8:	4b25      	ldr	r3, [pc, #148]	; (8013050 <dhcp_handle_ack+0xbc>)
 8012fba:	68da      	ldr	r2, [r3, #12]
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012fc0:	4b22      	ldr	r3, [pc, #136]	; (801304c <dhcp_handle_ack+0xb8>)
 8012fc2:	791b      	ldrb	r3, [r3, #4]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d004      	beq.n	8012fd2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012fc8:	4b21      	ldr	r3, [pc, #132]	; (8013050 <dhcp_handle_ack+0xbc>)
 8012fca:	691a      	ldr	r2, [r3, #16]
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	62da      	str	r2, [r3, #44]	; 0x2c
 8012fd0:	e004      	b.n	8012fdc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fd6:	085a      	lsrs	r2, r3, #1
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012fdc:	4b1b      	ldr	r3, [pc, #108]	; (801304c <dhcp_handle_ack+0xb8>)
 8012fde:	795b      	ldrb	r3, [r3, #5]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d004      	beq.n	8012fee <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012fe4:	4b1a      	ldr	r3, [pc, #104]	; (8013050 <dhcp_handle_ack+0xbc>)
 8012fe6:	695a      	ldr	r2, [r3, #20]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	631a      	str	r2, [r3, #48]	; 0x30
 8012fec:	e007      	b.n	8012ffe <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ff2:	4613      	mov	r3, r2
 8012ff4:	00db      	lsls	r3, r3, #3
 8012ff6:	1a9b      	subs	r3, r3, r2
 8012ff8:	08da      	lsrs	r2, r3, #3
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	691a      	ldr	r2, [r3, #16]
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013006:	4b11      	ldr	r3, [pc, #68]	; (801304c <dhcp_handle_ack+0xb8>)
 8013008:	799b      	ldrb	r3, [r3, #6]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d00b      	beq.n	8013026 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801300e:	4b10      	ldr	r3, [pc, #64]	; (8013050 <dhcp_handle_ack+0xbc>)
 8013010:	699b      	ldr	r3, [r3, #24]
 8013012:	4618      	mov	r0, r3
 8013014:	f7f6 ff47 	bl	8009ea6 <lwip_htonl>
 8013018:	4602      	mov	r2, r0
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2201      	movs	r2, #1
 8013022:	71da      	strb	r2, [r3, #7]
 8013024:	e002      	b.n	801302c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2200      	movs	r2, #0
 801302a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801302c:	4b07      	ldr	r3, [pc, #28]	; (801304c <dhcp_handle_ack+0xb8>)
 801302e:	79db      	ldrb	r3, [r3, #7]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d007      	beq.n	8013044 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013034:	4b06      	ldr	r3, [pc, #24]	; (8013050 <dhcp_handle_ack+0xbc>)
 8013036:	69db      	ldr	r3, [r3, #28]
 8013038:	4618      	mov	r0, r3
 801303a:	f7f6 ff34 	bl	8009ea6 <lwip_htonl>
 801303e:	4602      	mov	r2, r0
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013044:	bf00      	nop
 8013046:	3710      	adds	r7, #16
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}
 801304c:	2000d874 	.word	0x2000d874
 8013050:	2000d87c 	.word	0x2000d87c

08013054 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d109      	bne.n	8013076 <dhcp_start+0x22>
 8013062:	4b37      	ldr	r3, [pc, #220]	; (8013140 <dhcp_start+0xec>)
 8013064:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013068:	4936      	ldr	r1, [pc, #216]	; (8013144 <dhcp_start+0xf0>)
 801306a:	4837      	ldr	r0, [pc, #220]	; (8013148 <dhcp_start+0xf4>)
 801306c:	f004 fa98 	bl	80175a0 <iprintf>
 8013070:	f06f 030f 	mvn.w	r3, #15
 8013074:	e060      	b.n	8013138 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801307c:	f003 0301 	and.w	r3, r3, #1
 8013080:	2b00      	cmp	r3, #0
 8013082:	d109      	bne.n	8013098 <dhcp_start+0x44>
 8013084:	4b2e      	ldr	r3, [pc, #184]	; (8013140 <dhcp_start+0xec>)
 8013086:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801308a:	4930      	ldr	r1, [pc, #192]	; (801314c <dhcp_start+0xf8>)
 801308c:	482e      	ldr	r0, [pc, #184]	; (8013148 <dhcp_start+0xf4>)
 801308e:	f004 fa87 	bl	80175a0 <iprintf>
 8013092:	f06f 030f 	mvn.w	r3, #15
 8013096:	e04f      	b.n	8013138 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801309c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80130a2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80130a6:	d202      	bcs.n	80130ae <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80130a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130ac:	e044      	b.n	8013138 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d10d      	bne.n	80130d0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80130b4:	2034      	movs	r0, #52	; 0x34
 80130b6:	f7f7 faa7 	bl	800a608 <mem_malloc>
 80130ba:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d102      	bne.n	80130c8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80130c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130c6:	e037      	b.n	8013138 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	68fa      	ldr	r2, [r7, #12]
 80130cc:	625a      	str	r2, [r3, #36]	; 0x24
 80130ce:	e005      	b.n	80130dc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	791b      	ldrb	r3, [r3, #4]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d001      	beq.n	80130dc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80130d8:	f7ff fc92 	bl	8012a00 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80130dc:	2234      	movs	r2, #52	; 0x34
 80130de:	2100      	movs	r1, #0
 80130e0:	68f8      	ldr	r0, [r7, #12]
 80130e2:	f003 fdeb 	bl	8016cbc <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80130e6:	f7ff fc39 	bl	801295c <dhcp_inc_pcb_refcount>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d002      	beq.n	80130f6 <dhcp_start+0xa2>
    return ERR_MEM;
 80130f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130f4:	e020      	b.n	8013138 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2201      	movs	r2, #1
 80130fa:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013102:	f003 0304 	and.w	r3, r3, #4
 8013106:	2b00      	cmp	r3, #0
 8013108:	d105      	bne.n	8013116 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801310a:	2102      	movs	r1, #2
 801310c:	68f8      	ldr	r0, [r7, #12]
 801310e:	f000 fcc5 	bl	8013a9c <dhcp_set_state>
    return ERR_OK;
 8013112:	2300      	movs	r3, #0
 8013114:	e010      	b.n	8013138 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f000 f8bc 	bl	8013294 <dhcp_discover>
 801311c:	4603      	mov	r3, r0
 801311e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013120:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d005      	beq.n	8013134 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f000 fc1d 	bl	8013968 <dhcp_release_and_stop>
    return ERR_MEM;
 801312e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013132:	e001      	b.n	8013138 <dhcp_start+0xe4>
  }
  return result;
 8013134:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013138:	4618      	mov	r0, r3
 801313a:	3710      	adds	r7, #16
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}
 8013140:	0801ee60 	.word	0x0801ee60
 8013144:	0801ef44 	.word	0x0801ef44
 8013148:	0801eec0 	.word	0x0801eec0
 801314c:	0801ef88 	.word	0x0801ef88

08013150 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d107      	bne.n	8013170 <dhcp_arp_reply+0x20>
 8013160:	4b0e      	ldr	r3, [pc, #56]	; (801319c <dhcp_arp_reply+0x4c>)
 8013162:	f240 328b 	movw	r2, #907	; 0x38b
 8013166:	490e      	ldr	r1, [pc, #56]	; (80131a0 <dhcp_arp_reply+0x50>)
 8013168:	480e      	ldr	r0, [pc, #56]	; (80131a4 <dhcp_arp_reply+0x54>)
 801316a:	f004 fa19 	bl	80175a0 <iprintf>
 801316e:	e012      	b.n	8013196 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013174:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d00c      	beq.n	8013196 <dhcp_arp_reply+0x46>
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	795b      	ldrb	r3, [r3, #5]
 8013180:	2b08      	cmp	r3, #8
 8013182:	d108      	bne.n	8013196 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	681a      	ldr	r2, [r3, #0]
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	69db      	ldr	r3, [r3, #28]
 801318c:	429a      	cmp	r2, r3
 801318e:	d102      	bne.n	8013196 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f000 f809 	bl	80131a8 <dhcp_decline>
    }
  }
}
 8013196:	3710      	adds	r7, #16
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}
 801319c:	0801ee60 	.word	0x0801ee60
 80131a0:	0801ef44 	.word	0x0801ef44
 80131a4:	0801eec0 	.word	0x0801eec0

080131a8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80131a8:	b5b0      	push	{r4, r5, r7, lr}
 80131aa:	b08a      	sub	sp, #40	; 0x28
 80131ac:	af02      	add	r7, sp, #8
 80131ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131b4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80131b6:	210c      	movs	r1, #12
 80131b8:	69b8      	ldr	r0, [r7, #24]
 80131ba:	f000 fc6f 	bl	8013a9c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80131be:	f107 030c 	add.w	r3, r7, #12
 80131c2:	2204      	movs	r2, #4
 80131c4:	69b9      	ldr	r1, [r7, #24]
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f001 f8f4 	bl	80143b4 <dhcp_create_msg>
 80131cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d035      	beq.n	8013240 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	685b      	ldr	r3, [r3, #4]
 80131d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80131da:	89b8      	ldrh	r0, [r7, #12]
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131e2:	2304      	movs	r3, #4
 80131e4:	2232      	movs	r2, #50	; 0x32
 80131e6:	f000 fc73 	bl	8013ad0 <dhcp_option>
 80131ea:	4603      	mov	r3, r0
 80131ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80131ee:	89bc      	ldrh	r4, [r7, #12]
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80131f6:	69bb      	ldr	r3, [r7, #24]
 80131f8:	69db      	ldr	r3, [r3, #28]
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7f6 fe53 	bl	8009ea6 <lwip_htonl>
 8013200:	4603      	mov	r3, r0
 8013202:	461a      	mov	r2, r3
 8013204:	4629      	mov	r1, r5
 8013206:	4620      	mov	r0, r4
 8013208:	f000 fcee 	bl	8013be8 <dhcp_option_long>
 801320c:	4603      	mov	r3, r0
 801320e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013210:	89b8      	ldrh	r0, [r7, #12]
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	33f0      	adds	r3, #240	; 0xf0
 8013216:	697a      	ldr	r2, [r7, #20]
 8013218:	4619      	mov	r1, r3
 801321a:	f001 f9a1 	bl	8014560 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801321e:	4b19      	ldr	r3, [pc, #100]	; (8013284 <dhcp_decline+0xdc>)
 8013220:	6818      	ldr	r0, [r3, #0]
 8013222:	4b19      	ldr	r3, [pc, #100]	; (8013288 <dhcp_decline+0xe0>)
 8013224:	9301      	str	r3, [sp, #4]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	9300      	str	r3, [sp, #0]
 801322a:	2343      	movs	r3, #67	; 0x43
 801322c:	4a17      	ldr	r2, [pc, #92]	; (801328c <dhcp_decline+0xe4>)
 801322e:	6979      	ldr	r1, [r7, #20]
 8013230:	f7ff f904 	bl	801243c <udp_sendto_if_src>
 8013234:	4603      	mov	r3, r0
 8013236:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013238:	6978      	ldr	r0, [r7, #20]
 801323a:	f7f8 f9b9 	bl	800b5b0 <pbuf_free>
 801323e:	e001      	b.n	8013244 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013240:	23ff      	movs	r3, #255	; 0xff
 8013242:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013244:	69bb      	ldr	r3, [r7, #24]
 8013246:	799b      	ldrb	r3, [r3, #6]
 8013248:	2bff      	cmp	r3, #255	; 0xff
 801324a:	d005      	beq.n	8013258 <dhcp_decline+0xb0>
    dhcp->tries++;
 801324c:	69bb      	ldr	r3, [r7, #24]
 801324e:	799b      	ldrb	r3, [r3, #6]
 8013250:	3301      	adds	r3, #1
 8013252:	b2da      	uxtb	r2, r3
 8013254:	69bb      	ldr	r3, [r7, #24]
 8013256:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013258:	f242 7310 	movw	r3, #10000	; 0x2710
 801325c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801325e:	89fb      	ldrh	r3, [r7, #14]
 8013260:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013264:	4a0a      	ldr	r2, [pc, #40]	; (8013290 <dhcp_decline+0xe8>)
 8013266:	fb82 1203 	smull	r1, r2, r2, r3
 801326a:	1152      	asrs	r2, r2, #5
 801326c:	17db      	asrs	r3, r3, #31
 801326e:	1ad3      	subs	r3, r2, r3
 8013270:	b29a      	uxth	r2, r3
 8013272:	69bb      	ldr	r3, [r7, #24]
 8013274:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013276:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801327a:	4618      	mov	r0, r3
 801327c:	3720      	adds	r7, #32
 801327e:	46bd      	mov	sp, r7
 8013280:	bdb0      	pop	{r4, r5, r7, pc}
 8013282:	bf00      	nop
 8013284:	20001254 	.word	0x20001254
 8013288:	08032adc 	.word	0x08032adc
 801328c:	08032ae0 	.word	0x08032ae0
 8013290:	10624dd3 	.word	0x10624dd3

08013294 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b08a      	sub	sp, #40	; 0x28
 8013298:	af02      	add	r7, sp, #8
 801329a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132a0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80132a2:	2300      	movs	r3, #0
 80132a4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	2200      	movs	r2, #0
 80132aa:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80132ac:	2106      	movs	r1, #6
 80132ae:	69b8      	ldr	r0, [r7, #24]
 80132b0:	f000 fbf4 	bl	8013a9c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80132b4:	f107 0308 	add.w	r3, r7, #8
 80132b8:	2201      	movs	r2, #1
 80132ba:	69b9      	ldr	r1, [r7, #24]
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f001 f879 	bl	80143b4 <dhcp_create_msg>
 80132c2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80132c4:	693b      	ldr	r3, [r7, #16]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d04b      	beq.n	8013362 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80132ca:	693b      	ldr	r3, [r7, #16]
 80132cc:	685b      	ldr	r3, [r3, #4]
 80132ce:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80132d0:	8938      	ldrh	r0, [r7, #8]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80132d8:	2302      	movs	r3, #2
 80132da:	2239      	movs	r2, #57	; 0x39
 80132dc:	f000 fbf8 	bl	8013ad0 <dhcp_option>
 80132e0:	4603      	mov	r3, r0
 80132e2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80132e4:	8938      	ldrh	r0, [r7, #8]
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80132f0:	461a      	mov	r2, r3
 80132f2:	f000 fc47 	bl	8013b84 <dhcp_option_short>
 80132f6:	4603      	mov	r3, r0
 80132f8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80132fa:	8938      	ldrh	r0, [r7, #8]
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013302:	2303      	movs	r3, #3
 8013304:	2237      	movs	r2, #55	; 0x37
 8013306:	f000 fbe3 	bl	8013ad0 <dhcp_option>
 801330a:	4603      	mov	r3, r0
 801330c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801330e:	2300      	movs	r3, #0
 8013310:	77fb      	strb	r3, [r7, #31]
 8013312:	e00e      	b.n	8013332 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013314:	8938      	ldrh	r0, [r7, #8]
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801331c:	7ffb      	ldrb	r3, [r7, #31]
 801331e:	4a29      	ldr	r2, [pc, #164]	; (80133c4 <dhcp_discover+0x130>)
 8013320:	5cd3      	ldrb	r3, [r2, r3]
 8013322:	461a      	mov	r2, r3
 8013324:	f000 fc08 	bl	8013b38 <dhcp_option_byte>
 8013328:	4603      	mov	r3, r0
 801332a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801332c:	7ffb      	ldrb	r3, [r7, #31]
 801332e:	3301      	adds	r3, #1
 8013330:	77fb      	strb	r3, [r7, #31]
 8013332:	7ffb      	ldrb	r3, [r7, #31]
 8013334:	2b02      	cmp	r3, #2
 8013336:	d9ed      	bls.n	8013314 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013338:	8938      	ldrh	r0, [r7, #8]
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	33f0      	adds	r3, #240	; 0xf0
 801333e:	693a      	ldr	r2, [r7, #16]
 8013340:	4619      	mov	r1, r3
 8013342:	f001 f90d 	bl	8014560 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013346:	4b20      	ldr	r3, [pc, #128]	; (80133c8 <dhcp_discover+0x134>)
 8013348:	6818      	ldr	r0, [r3, #0]
 801334a:	4b20      	ldr	r3, [pc, #128]	; (80133cc <dhcp_discover+0x138>)
 801334c:	9301      	str	r3, [sp, #4]
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	9300      	str	r3, [sp, #0]
 8013352:	2343      	movs	r3, #67	; 0x43
 8013354:	4a1e      	ldr	r2, [pc, #120]	; (80133d0 <dhcp_discover+0x13c>)
 8013356:	6939      	ldr	r1, [r7, #16]
 8013358:	f7ff f870 	bl	801243c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801335c:	6938      	ldr	r0, [r7, #16]
 801335e:	f7f8 f927 	bl	800b5b0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013362:	69bb      	ldr	r3, [r7, #24]
 8013364:	799b      	ldrb	r3, [r3, #6]
 8013366:	2bff      	cmp	r3, #255	; 0xff
 8013368:	d005      	beq.n	8013376 <dhcp_discover+0xe2>
    dhcp->tries++;
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	799b      	ldrb	r3, [r3, #6]
 801336e:	3301      	adds	r3, #1
 8013370:	b2da      	uxtb	r2, r3
 8013372:	69bb      	ldr	r3, [r7, #24]
 8013374:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013376:	69bb      	ldr	r3, [r7, #24]
 8013378:	799b      	ldrb	r3, [r3, #6]
 801337a:	2b05      	cmp	r3, #5
 801337c:	d80d      	bhi.n	801339a <dhcp_discover+0x106>
 801337e:	69bb      	ldr	r3, [r7, #24]
 8013380:	799b      	ldrb	r3, [r3, #6]
 8013382:	461a      	mov	r2, r3
 8013384:	2301      	movs	r3, #1
 8013386:	4093      	lsls	r3, r2
 8013388:	b29b      	uxth	r3, r3
 801338a:	461a      	mov	r2, r3
 801338c:	0152      	lsls	r2, r2, #5
 801338e:	1ad2      	subs	r2, r2, r3
 8013390:	0092      	lsls	r2, r2, #2
 8013392:	4413      	add	r3, r2
 8013394:	00db      	lsls	r3, r3, #3
 8013396:	b29b      	uxth	r3, r3
 8013398:	e001      	b.n	801339e <dhcp_discover+0x10a>
 801339a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801339e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80133a0:	897b      	ldrh	r3, [r7, #10]
 80133a2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80133a6:	4a0b      	ldr	r2, [pc, #44]	; (80133d4 <dhcp_discover+0x140>)
 80133a8:	fb82 1203 	smull	r1, r2, r2, r3
 80133ac:	1152      	asrs	r2, r2, #5
 80133ae:	17db      	asrs	r3, r3, #31
 80133b0:	1ad3      	subs	r3, r2, r3
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	69bb      	ldr	r3, [r7, #24]
 80133b6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80133b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3720      	adds	r7, #32
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	200005c4 	.word	0x200005c4
 80133c8:	20001254 	.word	0x20001254
 80133cc:	08032adc 	.word	0x08032adc
 80133d0:	08032ae0 	.word	0x08032ae0
 80133d4:	10624dd3 	.word	0x10624dd3

080133d8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b088      	sub	sp, #32
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d107      	bne.n	80133f6 <dhcp_bind+0x1e>
 80133e6:	4b64      	ldr	r3, [pc, #400]	; (8013578 <dhcp_bind+0x1a0>)
 80133e8:	f240 4215 	movw	r2, #1045	; 0x415
 80133ec:	4963      	ldr	r1, [pc, #396]	; (801357c <dhcp_bind+0x1a4>)
 80133ee:	4864      	ldr	r0, [pc, #400]	; (8013580 <dhcp_bind+0x1a8>)
 80133f0:	f004 f8d6 	bl	80175a0 <iprintf>
 80133f4:	e0bc      	b.n	8013570 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133fa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80133fc:	69bb      	ldr	r3, [r7, #24]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d107      	bne.n	8013412 <dhcp_bind+0x3a>
 8013402:	4b5d      	ldr	r3, [pc, #372]	; (8013578 <dhcp_bind+0x1a0>)
 8013404:	f240 4217 	movw	r2, #1047	; 0x417
 8013408:	495e      	ldr	r1, [pc, #376]	; (8013584 <dhcp_bind+0x1ac>)
 801340a:	485d      	ldr	r0, [pc, #372]	; (8013580 <dhcp_bind+0x1a8>)
 801340c:	f004 f8c8 	bl	80175a0 <iprintf>
 8013410:	e0ae      	b.n	8013570 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8013412:	69bb      	ldr	r3, [r7, #24]
 8013414:	2200      	movs	r2, #0
 8013416:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013418:	69bb      	ldr	r3, [r7, #24]
 801341a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801341c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013420:	d019      	beq.n	8013456 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013426:	331e      	adds	r3, #30
 8013428:	4a57      	ldr	r2, [pc, #348]	; (8013588 <dhcp_bind+0x1b0>)
 801342a:	fba2 2303 	umull	r2, r3, r2, r3
 801342e:	095b      	lsrs	r3, r3, #5
 8013430:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013432:	69fb      	ldr	r3, [r7, #28]
 8013434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013438:	d302      	bcc.n	8013440 <dhcp_bind+0x68>
      timeout = 0xffff;
 801343a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801343e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013440:	69fb      	ldr	r3, [r7, #28]
 8013442:	b29a      	uxth	r2, r3
 8013444:	69bb      	ldr	r3, [r7, #24]
 8013446:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013448:	69bb      	ldr	r3, [r7, #24]
 801344a:	8a9b      	ldrh	r3, [r3, #20]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d102      	bne.n	8013456 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8013450:	69bb      	ldr	r3, [r7, #24]
 8013452:	2201      	movs	r2, #1
 8013454:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013456:	69bb      	ldr	r3, [r7, #24]
 8013458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801345a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801345e:	d01d      	beq.n	801349c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013460:	69bb      	ldr	r3, [r7, #24]
 8013462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013464:	331e      	adds	r3, #30
 8013466:	4a48      	ldr	r2, [pc, #288]	; (8013588 <dhcp_bind+0x1b0>)
 8013468:	fba2 2303 	umull	r2, r3, r2, r3
 801346c:	095b      	lsrs	r3, r3, #5
 801346e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013470:	69fb      	ldr	r3, [r7, #28]
 8013472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013476:	d302      	bcc.n	801347e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013478:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801347c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801347e:	69fb      	ldr	r3, [r7, #28]
 8013480:	b29a      	uxth	r2, r3
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	895b      	ldrh	r3, [r3, #10]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d102      	bne.n	8013494 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	2201      	movs	r2, #1
 8013492:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	895a      	ldrh	r2, [r3, #10]
 8013498:	69bb      	ldr	r3, [r7, #24]
 801349a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801349c:	69bb      	ldr	r3, [r7, #24]
 801349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80134a4:	d01d      	beq.n	80134e2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134aa:	331e      	adds	r3, #30
 80134ac:	4a36      	ldr	r2, [pc, #216]	; (8013588 <dhcp_bind+0x1b0>)
 80134ae:	fba2 2303 	umull	r2, r3, r2, r3
 80134b2:	095b      	lsrs	r3, r3, #5
 80134b4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80134b6:	69fb      	ldr	r3, [r7, #28]
 80134b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80134bc:	d302      	bcc.n	80134c4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80134be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80134c2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80134c4:	69fb      	ldr	r3, [r7, #28]
 80134c6:	b29a      	uxth	r2, r3
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80134cc:	69bb      	ldr	r3, [r7, #24]
 80134ce:	899b      	ldrh	r3, [r3, #12]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d102      	bne.n	80134da <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80134d4:	69bb      	ldr	r3, [r7, #24]
 80134d6:	2201      	movs	r2, #1
 80134d8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80134da:	69bb      	ldr	r3, [r7, #24]
 80134dc:	899a      	ldrh	r2, [r3, #12]
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80134e2:	69bb      	ldr	r3, [r7, #24]
 80134e4:	895a      	ldrh	r2, [r3, #10]
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	899b      	ldrh	r3, [r3, #12]
 80134ea:	429a      	cmp	r2, r3
 80134ec:	d306      	bcc.n	80134fc <dhcp_bind+0x124>
 80134ee:	69bb      	ldr	r3, [r7, #24]
 80134f0:	899b      	ldrh	r3, [r3, #12]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d002      	beq.n	80134fc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80134f6:	69bb      	ldr	r3, [r7, #24]
 80134f8:	2200      	movs	r2, #0
 80134fa:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80134fc:	69bb      	ldr	r3, [r7, #24]
 80134fe:	79db      	ldrb	r3, [r3, #7]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d003      	beq.n	801350c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013504:	69bb      	ldr	r3, [r7, #24]
 8013506:	6a1b      	ldr	r3, [r3, #32]
 8013508:	613b      	str	r3, [r7, #16]
 801350a:	e014      	b.n	8013536 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801350c:	69bb      	ldr	r3, [r7, #24]
 801350e:	331c      	adds	r3, #28
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013514:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013518:	2b00      	cmp	r3, #0
 801351a:	db02      	blt.n	8013522 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801351c:	23ff      	movs	r3, #255	; 0xff
 801351e:	613b      	str	r3, [r7, #16]
 8013520:	e009      	b.n	8013536 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8013522:	7dfb      	ldrb	r3, [r7, #23]
 8013524:	2bbf      	cmp	r3, #191	; 0xbf
 8013526:	d903      	bls.n	8013530 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013528:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801352c:	613b      	str	r3, [r7, #16]
 801352e:	e002      	b.n	8013536 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013530:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013534:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801353a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d108      	bne.n	8013554 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8013542:	69bb      	ldr	r3, [r7, #24]
 8013544:	69da      	ldr	r2, [r3, #28]
 8013546:	693b      	ldr	r3, [r7, #16]
 8013548:	4013      	ands	r3, r2
 801354a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013552:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013554:	210a      	movs	r1, #10
 8013556:	69b8      	ldr	r0, [r7, #24]
 8013558:	f000 faa0 	bl	8013a9c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801355c:	69bb      	ldr	r3, [r7, #24]
 801355e:	f103 011c 	add.w	r1, r3, #28
 8013562:	f107 030c 	add.w	r3, r7, #12
 8013566:	f107 0210 	add.w	r2, r7, #16
 801356a:	6878      	ldr	r0, [r7, #4]
 801356c:	f7f7 fba8 	bl	800acc0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013570:	3720      	adds	r7, #32
 8013572:	46bd      	mov	sp, r7
 8013574:	bd80      	pop	{r7, pc}
 8013576:	bf00      	nop
 8013578:	0801ee60 	.word	0x0801ee60
 801357c:	0801efc0 	.word	0x0801efc0
 8013580:	0801eec0 	.word	0x0801eec0
 8013584:	0801efdc 	.word	0x0801efdc
 8013588:	88888889 	.word	0x88888889

0801358c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b08a      	sub	sp, #40	; 0x28
 8013590:	af02      	add	r7, sp, #8
 8013592:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013598:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801359a:	2105      	movs	r1, #5
 801359c:	69b8      	ldr	r0, [r7, #24]
 801359e:	f000 fa7d 	bl	8013a9c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80135a2:	f107 030c 	add.w	r3, r7, #12
 80135a6:	2203      	movs	r2, #3
 80135a8:	69b9      	ldr	r1, [r7, #24]
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f000 ff02 	bl	80143b4 <dhcp_create_msg>
 80135b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80135b2:	697b      	ldr	r3, [r7, #20]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d04e      	beq.n	8013656 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80135b8:	697b      	ldr	r3, [r7, #20]
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80135be:	89b8      	ldrh	r0, [r7, #12]
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135c6:	2302      	movs	r3, #2
 80135c8:	2239      	movs	r2, #57	; 0x39
 80135ca:	f000 fa81 	bl	8013ad0 <dhcp_option>
 80135ce:	4603      	mov	r3, r0
 80135d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80135d2:	89b8      	ldrh	r0, [r7, #12]
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135de:	461a      	mov	r2, r3
 80135e0:	f000 fad0 	bl	8013b84 <dhcp_option_short>
 80135e4:	4603      	mov	r3, r0
 80135e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80135e8:	89b8      	ldrh	r0, [r7, #12]
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80135f0:	2303      	movs	r3, #3
 80135f2:	2237      	movs	r2, #55	; 0x37
 80135f4:	f000 fa6c 	bl	8013ad0 <dhcp_option>
 80135f8:	4603      	mov	r3, r0
 80135fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80135fc:	2300      	movs	r3, #0
 80135fe:	77bb      	strb	r3, [r7, #30]
 8013600:	e00e      	b.n	8013620 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013602:	89b8      	ldrh	r0, [r7, #12]
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801360a:	7fbb      	ldrb	r3, [r7, #30]
 801360c:	4a2a      	ldr	r2, [pc, #168]	; (80136b8 <dhcp_renew+0x12c>)
 801360e:	5cd3      	ldrb	r3, [r2, r3]
 8013610:	461a      	mov	r2, r3
 8013612:	f000 fa91 	bl	8013b38 <dhcp_option_byte>
 8013616:	4603      	mov	r3, r0
 8013618:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801361a:	7fbb      	ldrb	r3, [r7, #30]
 801361c:	3301      	adds	r3, #1
 801361e:	77bb      	strb	r3, [r7, #30]
 8013620:	7fbb      	ldrb	r3, [r7, #30]
 8013622:	2b02      	cmp	r3, #2
 8013624:	d9ed      	bls.n	8013602 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013626:	89b8      	ldrh	r0, [r7, #12]
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	33f0      	adds	r3, #240	; 0xf0
 801362c:	697a      	ldr	r2, [r7, #20]
 801362e:	4619      	mov	r1, r3
 8013630:	f000 ff96 	bl	8014560 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013634:	4b21      	ldr	r3, [pc, #132]	; (80136bc <dhcp_renew+0x130>)
 8013636:	6818      	ldr	r0, [r3, #0]
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	f103 0218 	add.w	r2, r3, #24
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	9300      	str	r3, [sp, #0]
 8013642:	2343      	movs	r3, #67	; 0x43
 8013644:	6979      	ldr	r1, [r7, #20]
 8013646:	f7fe fe85 	bl	8012354 <udp_sendto_if>
 801364a:	4603      	mov	r3, r0
 801364c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801364e:	6978      	ldr	r0, [r7, #20]
 8013650:	f7f7 ffae 	bl	800b5b0 <pbuf_free>
 8013654:	e001      	b.n	801365a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013656:	23ff      	movs	r3, #255	; 0xff
 8013658:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	799b      	ldrb	r3, [r3, #6]
 801365e:	2bff      	cmp	r3, #255	; 0xff
 8013660:	d005      	beq.n	801366e <dhcp_renew+0xe2>
    dhcp->tries++;
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	799b      	ldrb	r3, [r3, #6]
 8013666:	3301      	adds	r3, #1
 8013668:	b2da      	uxtb	r2, r3
 801366a:	69bb      	ldr	r3, [r7, #24]
 801366c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	799b      	ldrb	r3, [r3, #6]
 8013672:	2b09      	cmp	r3, #9
 8013674:	d80a      	bhi.n	801368c <dhcp_renew+0x100>
 8013676:	69bb      	ldr	r3, [r7, #24]
 8013678:	799b      	ldrb	r3, [r3, #6]
 801367a:	b29b      	uxth	r3, r3
 801367c:	461a      	mov	r2, r3
 801367e:	0152      	lsls	r2, r2, #5
 8013680:	1ad2      	subs	r2, r2, r3
 8013682:	0092      	lsls	r2, r2, #2
 8013684:	4413      	add	r3, r2
 8013686:	011b      	lsls	r3, r3, #4
 8013688:	b29b      	uxth	r3, r3
 801368a:	e001      	b.n	8013690 <dhcp_renew+0x104>
 801368c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013690:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013692:	89fb      	ldrh	r3, [r7, #14]
 8013694:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013698:	4a09      	ldr	r2, [pc, #36]	; (80136c0 <dhcp_renew+0x134>)
 801369a:	fb82 1203 	smull	r1, r2, r2, r3
 801369e:	1152      	asrs	r2, r2, #5
 80136a0:	17db      	asrs	r3, r3, #31
 80136a2:	1ad3      	subs	r3, r2, r3
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	69bb      	ldr	r3, [r7, #24]
 80136a8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80136aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3720      	adds	r7, #32
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	200005c4 	.word	0x200005c4
 80136bc:	20001254 	.word	0x20001254
 80136c0:	10624dd3 	.word	0x10624dd3

080136c4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b08a      	sub	sp, #40	; 0x28
 80136c8:	af02      	add	r7, sp, #8
 80136ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136d0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80136d2:	2104      	movs	r1, #4
 80136d4:	69b8      	ldr	r0, [r7, #24]
 80136d6:	f000 f9e1 	bl	8013a9c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80136da:	f107 030c 	add.w	r3, r7, #12
 80136de:	2203      	movs	r2, #3
 80136e0:	69b9      	ldr	r1, [r7, #24]
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f000 fe66 	bl	80143b4 <dhcp_create_msg>
 80136e8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d04c      	beq.n	801378a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	685b      	ldr	r3, [r3, #4]
 80136f4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80136f6:	89b8      	ldrh	r0, [r7, #12]
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136fe:	2302      	movs	r3, #2
 8013700:	2239      	movs	r2, #57	; 0x39
 8013702:	f000 f9e5 	bl	8013ad0 <dhcp_option>
 8013706:	4603      	mov	r3, r0
 8013708:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801370a:	89b8      	ldrh	r0, [r7, #12]
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013716:	461a      	mov	r2, r3
 8013718:	f000 fa34 	bl	8013b84 <dhcp_option_short>
 801371c:	4603      	mov	r3, r0
 801371e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013720:	89b8      	ldrh	r0, [r7, #12]
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013728:	2303      	movs	r3, #3
 801372a:	2237      	movs	r2, #55	; 0x37
 801372c:	f000 f9d0 	bl	8013ad0 <dhcp_option>
 8013730:	4603      	mov	r3, r0
 8013732:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013734:	2300      	movs	r3, #0
 8013736:	77bb      	strb	r3, [r7, #30]
 8013738:	e00e      	b.n	8013758 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801373a:	89b8      	ldrh	r0, [r7, #12]
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013742:	7fbb      	ldrb	r3, [r7, #30]
 8013744:	4a29      	ldr	r2, [pc, #164]	; (80137ec <dhcp_rebind+0x128>)
 8013746:	5cd3      	ldrb	r3, [r2, r3]
 8013748:	461a      	mov	r2, r3
 801374a:	f000 f9f5 	bl	8013b38 <dhcp_option_byte>
 801374e:	4603      	mov	r3, r0
 8013750:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013752:	7fbb      	ldrb	r3, [r7, #30]
 8013754:	3301      	adds	r3, #1
 8013756:	77bb      	strb	r3, [r7, #30]
 8013758:	7fbb      	ldrb	r3, [r7, #30]
 801375a:	2b02      	cmp	r3, #2
 801375c:	d9ed      	bls.n	801373a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801375e:	89b8      	ldrh	r0, [r7, #12]
 8013760:	693b      	ldr	r3, [r7, #16]
 8013762:	33f0      	adds	r3, #240	; 0xf0
 8013764:	697a      	ldr	r2, [r7, #20]
 8013766:	4619      	mov	r1, r3
 8013768:	f000 fefa 	bl	8014560 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801376c:	4b20      	ldr	r3, [pc, #128]	; (80137f0 <dhcp_rebind+0x12c>)
 801376e:	6818      	ldr	r0, [r3, #0]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	9300      	str	r3, [sp, #0]
 8013774:	2343      	movs	r3, #67	; 0x43
 8013776:	4a1f      	ldr	r2, [pc, #124]	; (80137f4 <dhcp_rebind+0x130>)
 8013778:	6979      	ldr	r1, [r7, #20]
 801377a:	f7fe fdeb 	bl	8012354 <udp_sendto_if>
 801377e:	4603      	mov	r3, r0
 8013780:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013782:	6978      	ldr	r0, [r7, #20]
 8013784:	f7f7 ff14 	bl	800b5b0 <pbuf_free>
 8013788:	e001      	b.n	801378e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801378a:	23ff      	movs	r3, #255	; 0xff
 801378c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801378e:	69bb      	ldr	r3, [r7, #24]
 8013790:	799b      	ldrb	r3, [r3, #6]
 8013792:	2bff      	cmp	r3, #255	; 0xff
 8013794:	d005      	beq.n	80137a2 <dhcp_rebind+0xde>
    dhcp->tries++;
 8013796:	69bb      	ldr	r3, [r7, #24]
 8013798:	799b      	ldrb	r3, [r3, #6]
 801379a:	3301      	adds	r3, #1
 801379c:	b2da      	uxtb	r2, r3
 801379e:	69bb      	ldr	r3, [r7, #24]
 80137a0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	799b      	ldrb	r3, [r3, #6]
 80137a6:	2b09      	cmp	r3, #9
 80137a8:	d80a      	bhi.n	80137c0 <dhcp_rebind+0xfc>
 80137aa:	69bb      	ldr	r3, [r7, #24]
 80137ac:	799b      	ldrb	r3, [r3, #6]
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	461a      	mov	r2, r3
 80137b2:	0152      	lsls	r2, r2, #5
 80137b4:	1ad2      	subs	r2, r2, r3
 80137b6:	0092      	lsls	r2, r2, #2
 80137b8:	4413      	add	r3, r2
 80137ba:	00db      	lsls	r3, r3, #3
 80137bc:	b29b      	uxth	r3, r3
 80137be:	e001      	b.n	80137c4 <dhcp_rebind+0x100>
 80137c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80137c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80137c6:	89fb      	ldrh	r3, [r7, #14]
 80137c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80137cc:	4a0a      	ldr	r2, [pc, #40]	; (80137f8 <dhcp_rebind+0x134>)
 80137ce:	fb82 1203 	smull	r1, r2, r2, r3
 80137d2:	1152      	asrs	r2, r2, #5
 80137d4:	17db      	asrs	r3, r3, #31
 80137d6:	1ad3      	subs	r3, r2, r3
 80137d8:	b29a      	uxth	r2, r3
 80137da:	69bb      	ldr	r3, [r7, #24]
 80137dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80137de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	3720      	adds	r7, #32
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}
 80137ea:	bf00      	nop
 80137ec:	200005c4 	.word	0x200005c4
 80137f0:	20001254 	.word	0x20001254
 80137f4:	08032ae0 	.word	0x08032ae0
 80137f8:	10624dd3 	.word	0x10624dd3

080137fc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80137fc:	b5b0      	push	{r4, r5, r7, lr}
 80137fe:	b08a      	sub	sp, #40	; 0x28
 8013800:	af02      	add	r7, sp, #8
 8013802:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013808:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801380a:	2103      	movs	r1, #3
 801380c:	69b8      	ldr	r0, [r7, #24]
 801380e:	f000 f945 	bl	8013a9c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013812:	f107 030c 	add.w	r3, r7, #12
 8013816:	2203      	movs	r2, #3
 8013818:	69b9      	ldr	r1, [r7, #24]
 801381a:	6878      	ldr	r0, [r7, #4]
 801381c:	f000 fdca 	bl	80143b4 <dhcp_create_msg>
 8013820:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	2b00      	cmp	r3, #0
 8013826:	d066      	beq.n	80138f6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801382e:	89b8      	ldrh	r0, [r7, #12]
 8013830:	693b      	ldr	r3, [r7, #16]
 8013832:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013836:	2302      	movs	r3, #2
 8013838:	2239      	movs	r2, #57	; 0x39
 801383a:	f000 f949 	bl	8013ad0 <dhcp_option>
 801383e:	4603      	mov	r3, r0
 8013840:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013842:	89b8      	ldrh	r0, [r7, #12]
 8013844:	693b      	ldr	r3, [r7, #16]
 8013846:	33f0      	adds	r3, #240	; 0xf0
 8013848:	f44f 7210 	mov.w	r2, #576	; 0x240
 801384c:	4619      	mov	r1, r3
 801384e:	f000 f999 	bl	8013b84 <dhcp_option_short>
 8013852:	4603      	mov	r3, r0
 8013854:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013856:	89b8      	ldrh	r0, [r7, #12]
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801385e:	2304      	movs	r3, #4
 8013860:	2232      	movs	r2, #50	; 0x32
 8013862:	f000 f935 	bl	8013ad0 <dhcp_option>
 8013866:	4603      	mov	r3, r0
 8013868:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801386a:	89bc      	ldrh	r4, [r7, #12]
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	69db      	ldr	r3, [r3, #28]
 8013876:	4618      	mov	r0, r3
 8013878:	f7f6 fb15 	bl	8009ea6 <lwip_htonl>
 801387c:	4603      	mov	r3, r0
 801387e:	461a      	mov	r2, r3
 8013880:	4629      	mov	r1, r5
 8013882:	4620      	mov	r0, r4
 8013884:	f000 f9b0 	bl	8013be8 <dhcp_option_long>
 8013888:	4603      	mov	r3, r0
 801388a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801388c:	89b8      	ldrh	r0, [r7, #12]
 801388e:	693b      	ldr	r3, [r7, #16]
 8013890:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013894:	2303      	movs	r3, #3
 8013896:	2237      	movs	r2, #55	; 0x37
 8013898:	f000 f91a 	bl	8013ad0 <dhcp_option>
 801389c:	4603      	mov	r3, r0
 801389e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138a0:	2300      	movs	r3, #0
 80138a2:	77bb      	strb	r3, [r7, #30]
 80138a4:	e00e      	b.n	80138c4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80138a6:	89b8      	ldrh	r0, [r7, #12]
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80138ae:	7fbb      	ldrb	r3, [r7, #30]
 80138b0:	4a29      	ldr	r2, [pc, #164]	; (8013958 <dhcp_reboot+0x15c>)
 80138b2:	5cd3      	ldrb	r3, [r2, r3]
 80138b4:	461a      	mov	r2, r3
 80138b6:	f000 f93f 	bl	8013b38 <dhcp_option_byte>
 80138ba:	4603      	mov	r3, r0
 80138bc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138be:	7fbb      	ldrb	r3, [r7, #30]
 80138c0:	3301      	adds	r3, #1
 80138c2:	77bb      	strb	r3, [r7, #30]
 80138c4:	7fbb      	ldrb	r3, [r7, #30]
 80138c6:	2b02      	cmp	r3, #2
 80138c8:	d9ed      	bls.n	80138a6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80138ca:	89b8      	ldrh	r0, [r7, #12]
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	33f0      	adds	r3, #240	; 0xf0
 80138d0:	697a      	ldr	r2, [r7, #20]
 80138d2:	4619      	mov	r1, r3
 80138d4:	f000 fe44 	bl	8014560 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80138d8:	4b20      	ldr	r3, [pc, #128]	; (801395c <dhcp_reboot+0x160>)
 80138da:	6818      	ldr	r0, [r3, #0]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	9300      	str	r3, [sp, #0]
 80138e0:	2343      	movs	r3, #67	; 0x43
 80138e2:	4a1f      	ldr	r2, [pc, #124]	; (8013960 <dhcp_reboot+0x164>)
 80138e4:	6979      	ldr	r1, [r7, #20]
 80138e6:	f7fe fd35 	bl	8012354 <udp_sendto_if>
 80138ea:	4603      	mov	r3, r0
 80138ec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80138ee:	6978      	ldr	r0, [r7, #20]
 80138f0:	f7f7 fe5e 	bl	800b5b0 <pbuf_free>
 80138f4:	e001      	b.n	80138fa <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80138f6:	23ff      	movs	r3, #255	; 0xff
 80138f8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80138fa:	69bb      	ldr	r3, [r7, #24]
 80138fc:	799b      	ldrb	r3, [r3, #6]
 80138fe:	2bff      	cmp	r3, #255	; 0xff
 8013900:	d005      	beq.n	801390e <dhcp_reboot+0x112>
    dhcp->tries++;
 8013902:	69bb      	ldr	r3, [r7, #24]
 8013904:	799b      	ldrb	r3, [r3, #6]
 8013906:	3301      	adds	r3, #1
 8013908:	b2da      	uxtb	r2, r3
 801390a:	69bb      	ldr	r3, [r7, #24]
 801390c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801390e:	69bb      	ldr	r3, [r7, #24]
 8013910:	799b      	ldrb	r3, [r3, #6]
 8013912:	2b09      	cmp	r3, #9
 8013914:	d80a      	bhi.n	801392c <dhcp_reboot+0x130>
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	799b      	ldrb	r3, [r3, #6]
 801391a:	b29b      	uxth	r3, r3
 801391c:	461a      	mov	r2, r3
 801391e:	0152      	lsls	r2, r2, #5
 8013920:	1ad2      	subs	r2, r2, r3
 8013922:	0092      	lsls	r2, r2, #2
 8013924:	4413      	add	r3, r2
 8013926:	00db      	lsls	r3, r3, #3
 8013928:	b29b      	uxth	r3, r3
 801392a:	e001      	b.n	8013930 <dhcp_reboot+0x134>
 801392c:	f242 7310 	movw	r3, #10000	; 0x2710
 8013930:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013932:	89fb      	ldrh	r3, [r7, #14]
 8013934:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013938:	4a0a      	ldr	r2, [pc, #40]	; (8013964 <dhcp_reboot+0x168>)
 801393a:	fb82 1203 	smull	r1, r2, r2, r3
 801393e:	1152      	asrs	r2, r2, #5
 8013940:	17db      	asrs	r3, r3, #31
 8013942:	1ad3      	subs	r3, r2, r3
 8013944:	b29a      	uxth	r2, r3
 8013946:	69bb      	ldr	r3, [r7, #24]
 8013948:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801394a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801394e:	4618      	mov	r0, r3
 8013950:	3720      	adds	r7, #32
 8013952:	46bd      	mov	sp, r7
 8013954:	bdb0      	pop	{r4, r5, r7, pc}
 8013956:	bf00      	nop
 8013958:	200005c4 	.word	0x200005c4
 801395c:	20001254 	.word	0x20001254
 8013960:	08032ae0 	.word	0x08032ae0
 8013964:	10624dd3 	.word	0x10624dd3

08013968 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013968:	b5b0      	push	{r4, r5, r7, lr}
 801396a:	b08a      	sub	sp, #40	; 0x28
 801396c:	af02      	add	r7, sp, #8
 801396e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013974:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013976:	69fb      	ldr	r3, [r7, #28]
 8013978:	2b00      	cmp	r3, #0
 801397a:	f000 8084 	beq.w	8013a86 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801397e:	69fb      	ldr	r3, [r7, #28]
 8013980:	795b      	ldrb	r3, [r3, #5]
 8013982:	2b00      	cmp	r3, #0
 8013984:	f000 8081 	beq.w	8013a8a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013988:	69fb      	ldr	r3, [r7, #28]
 801398a:	699b      	ldr	r3, [r3, #24]
 801398c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801398e:	69fb      	ldr	r3, [r7, #28]
 8013990:	2200      	movs	r2, #0
 8013992:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013994:	69fb      	ldr	r3, [r7, #28]
 8013996:	2200      	movs	r2, #0
 8013998:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801399a:	69fb      	ldr	r3, [r7, #28]
 801399c:	2200      	movs	r2, #0
 801399e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	2200      	movs	r2, #0
 80139a4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	2200      	movs	r2, #0
 80139aa:	631a      	str	r2, [r3, #48]	; 0x30
 80139ac:	69fb      	ldr	r3, [r7, #28]
 80139ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80139b4:	69fb      	ldr	r3, [r7, #28]
 80139b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80139bc:	69fb      	ldr	r3, [r7, #28]
 80139be:	2200      	movs	r2, #0
 80139c0:	829a      	strh	r2, [r3, #20]
 80139c2:	69fb      	ldr	r3, [r7, #28]
 80139c4:	8a9a      	ldrh	r2, [r3, #20]
 80139c6:	69fb      	ldr	r3, [r7, #28]
 80139c8:	825a      	strh	r2, [r3, #18]
 80139ca:	69fb      	ldr	r3, [r7, #28]
 80139cc:	8a5a      	ldrh	r2, [r3, #18]
 80139ce:	69fb      	ldr	r3, [r7, #28]
 80139d0:	821a      	strh	r2, [r3, #16]
 80139d2:	69fb      	ldr	r3, [r7, #28]
 80139d4:	8a1a      	ldrh	r2, [r3, #16]
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80139da:	6878      	ldr	r0, [r7, #4]
 80139dc:	f000 fdee 	bl	80145bc <dhcp_supplied_address>
 80139e0:	4603      	mov	r3, r0
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d03b      	beq.n	8013a5e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80139e6:	f107 030e 	add.w	r3, r7, #14
 80139ea:	2207      	movs	r2, #7
 80139ec:	69f9      	ldr	r1, [r7, #28]
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f000 fce0 	bl	80143b4 <dhcp_create_msg>
 80139f4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80139f6:	69bb      	ldr	r3, [r7, #24]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d030      	beq.n	8013a5e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80139fc:	69bb      	ldr	r3, [r7, #24]
 80139fe:	685b      	ldr	r3, [r3, #4]
 8013a00:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013a02:	89f8      	ldrh	r0, [r7, #14]
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013a0a:	2304      	movs	r3, #4
 8013a0c:	2236      	movs	r2, #54	; 0x36
 8013a0e:	f000 f85f 	bl	8013ad0 <dhcp_option>
 8013a12:	4603      	mov	r3, r0
 8013a14:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013a16:	89fc      	ldrh	r4, [r7, #14]
 8013a18:	697b      	ldr	r3, [r7, #20]
 8013a1a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013a1e:	693b      	ldr	r3, [r7, #16]
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7f6 fa40 	bl	8009ea6 <lwip_htonl>
 8013a26:	4603      	mov	r3, r0
 8013a28:	461a      	mov	r2, r3
 8013a2a:	4629      	mov	r1, r5
 8013a2c:	4620      	mov	r0, r4
 8013a2e:	f000 f8db 	bl	8013be8 <dhcp_option_long>
 8013a32:	4603      	mov	r3, r0
 8013a34:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013a36:	89f8      	ldrh	r0, [r7, #14]
 8013a38:	697b      	ldr	r3, [r7, #20]
 8013a3a:	33f0      	adds	r3, #240	; 0xf0
 8013a3c:	69ba      	ldr	r2, [r7, #24]
 8013a3e:	4619      	mov	r1, r3
 8013a40:	f000 fd8e 	bl	8014560 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013a44:	4b13      	ldr	r3, [pc, #76]	; (8013a94 <dhcp_release_and_stop+0x12c>)
 8013a46:	6818      	ldr	r0, [r3, #0]
 8013a48:	f107 0210 	add.w	r2, r7, #16
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	9300      	str	r3, [sp, #0]
 8013a50:	2343      	movs	r3, #67	; 0x43
 8013a52:	69b9      	ldr	r1, [r7, #24]
 8013a54:	f7fe fc7e 	bl	8012354 <udp_sendto_if>
      pbuf_free(p_out);
 8013a58:	69b8      	ldr	r0, [r7, #24]
 8013a5a:	f7f7 fda9 	bl	800b5b0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013a5e:	4b0e      	ldr	r3, [pc, #56]	; (8013a98 <dhcp_release_and_stop+0x130>)
 8013a60:	4a0d      	ldr	r2, [pc, #52]	; (8013a98 <dhcp_release_and_stop+0x130>)
 8013a62:	490d      	ldr	r1, [pc, #52]	; (8013a98 <dhcp_release_and_stop+0x130>)
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f7f7 f92b 	bl	800acc0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013a6a:	2100      	movs	r1, #0
 8013a6c:	69f8      	ldr	r0, [r7, #28]
 8013a6e:	f000 f815 	bl	8013a9c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	791b      	ldrb	r3, [r3, #4]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d008      	beq.n	8013a8c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013a7a:	f7fe ffc1 	bl	8012a00 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013a7e:	69fb      	ldr	r3, [r7, #28]
 8013a80:	2200      	movs	r2, #0
 8013a82:	711a      	strb	r2, [r3, #4]
 8013a84:	e002      	b.n	8013a8c <dhcp_release_and_stop+0x124>
    return;
 8013a86:	bf00      	nop
 8013a88:	e000      	b.n	8013a8c <dhcp_release_and_stop+0x124>
    return;
 8013a8a:	bf00      	nop
  }
}
 8013a8c:	3720      	adds	r7, #32
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	bdb0      	pop	{r4, r5, r7, pc}
 8013a92:	bf00      	nop
 8013a94:	20001254 	.word	0x20001254
 8013a98:	08032adc 	.word	0x08032adc

08013a9c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013a9c:	b480      	push	{r7}
 8013a9e:	b083      	sub	sp, #12
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	6078      	str	r0, [r7, #4]
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	795b      	ldrb	r3, [r3, #5]
 8013aac:	78fa      	ldrb	r2, [r7, #3]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d008      	beq.n	8013ac4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	78fa      	ldrb	r2, [r7, #3]
 8013ab6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2200      	movs	r2, #0
 8013abc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	811a      	strh	r2, [r3, #8]
  }
}
 8013ac4:	bf00      	nop
 8013ac6:	370c      	adds	r7, #12
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ace:	4770      	bx	lr

08013ad0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b082      	sub	sp, #8
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6039      	str	r1, [r7, #0]
 8013ad8:	4611      	mov	r1, r2
 8013ada:	461a      	mov	r2, r3
 8013adc:	4603      	mov	r3, r0
 8013ade:	80fb      	strh	r3, [r7, #6]
 8013ae0:	460b      	mov	r3, r1
 8013ae2:	717b      	strb	r3, [r7, #5]
 8013ae4:	4613      	mov	r3, r2
 8013ae6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013ae8:	88fa      	ldrh	r2, [r7, #6]
 8013aea:	793b      	ldrb	r3, [r7, #4]
 8013aec:	4413      	add	r3, r2
 8013aee:	3302      	adds	r3, #2
 8013af0:	2b44      	cmp	r3, #68	; 0x44
 8013af2:	d906      	bls.n	8013b02 <dhcp_option+0x32>
 8013af4:	4b0d      	ldr	r3, [pc, #52]	; (8013b2c <dhcp_option+0x5c>)
 8013af6:	f240 529a 	movw	r2, #1434	; 0x59a
 8013afa:	490d      	ldr	r1, [pc, #52]	; (8013b30 <dhcp_option+0x60>)
 8013afc:	480d      	ldr	r0, [pc, #52]	; (8013b34 <dhcp_option+0x64>)
 8013afe:	f003 fd4f 	bl	80175a0 <iprintf>
  options[options_out_len++] = option_type;
 8013b02:	88fb      	ldrh	r3, [r7, #6]
 8013b04:	1c5a      	adds	r2, r3, #1
 8013b06:	80fa      	strh	r2, [r7, #6]
 8013b08:	461a      	mov	r2, r3
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	797a      	ldrb	r2, [r7, #5]
 8013b10:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013b12:	88fb      	ldrh	r3, [r7, #6]
 8013b14:	1c5a      	adds	r2, r3, #1
 8013b16:	80fa      	strh	r2, [r7, #6]
 8013b18:	461a      	mov	r2, r3
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	4413      	add	r3, r2
 8013b1e:	793a      	ldrb	r2, [r7, #4]
 8013b20:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013b22:	88fb      	ldrh	r3, [r7, #6]
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3708      	adds	r7, #8
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}
 8013b2c:	0801ee60 	.word	0x0801ee60
 8013b30:	0801eff4 	.word	0x0801eff4
 8013b34:	0801eec0 	.word	0x0801eec0

08013b38 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	4603      	mov	r3, r0
 8013b40:	6039      	str	r1, [r7, #0]
 8013b42:	80fb      	strh	r3, [r7, #6]
 8013b44:	4613      	mov	r3, r2
 8013b46:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013b48:	88fb      	ldrh	r3, [r7, #6]
 8013b4a:	2b43      	cmp	r3, #67	; 0x43
 8013b4c:	d906      	bls.n	8013b5c <dhcp_option_byte+0x24>
 8013b4e:	4b0a      	ldr	r3, [pc, #40]	; (8013b78 <dhcp_option_byte+0x40>)
 8013b50:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013b54:	4909      	ldr	r1, [pc, #36]	; (8013b7c <dhcp_option_byte+0x44>)
 8013b56:	480a      	ldr	r0, [pc, #40]	; (8013b80 <dhcp_option_byte+0x48>)
 8013b58:	f003 fd22 	bl	80175a0 <iprintf>
  options[options_out_len++] = value;
 8013b5c:	88fb      	ldrh	r3, [r7, #6]
 8013b5e:	1c5a      	adds	r2, r3, #1
 8013b60:	80fa      	strh	r2, [r7, #6]
 8013b62:	461a      	mov	r2, r3
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	4413      	add	r3, r2
 8013b68:	797a      	ldrb	r2, [r7, #5]
 8013b6a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013b6c:	88fb      	ldrh	r3, [r7, #6]
}
 8013b6e:	4618      	mov	r0, r3
 8013b70:	3708      	adds	r7, #8
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
 8013b76:	bf00      	nop
 8013b78:	0801ee60 	.word	0x0801ee60
 8013b7c:	0801f038 	.word	0x0801f038
 8013b80:	0801eec0 	.word	0x0801eec0

08013b84 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b082      	sub	sp, #8
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	6039      	str	r1, [r7, #0]
 8013b8e:	80fb      	strh	r3, [r7, #6]
 8013b90:	4613      	mov	r3, r2
 8013b92:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013b94:	88fb      	ldrh	r3, [r7, #6]
 8013b96:	3302      	adds	r3, #2
 8013b98:	2b44      	cmp	r3, #68	; 0x44
 8013b9a:	d906      	bls.n	8013baa <dhcp_option_short+0x26>
 8013b9c:	4b0f      	ldr	r3, [pc, #60]	; (8013bdc <dhcp_option_short+0x58>)
 8013b9e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013ba2:	490f      	ldr	r1, [pc, #60]	; (8013be0 <dhcp_option_short+0x5c>)
 8013ba4:	480f      	ldr	r0, [pc, #60]	; (8013be4 <dhcp_option_short+0x60>)
 8013ba6:	f003 fcfb 	bl	80175a0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013baa:	88bb      	ldrh	r3, [r7, #4]
 8013bac:	0a1b      	lsrs	r3, r3, #8
 8013bae:	b29a      	uxth	r2, r3
 8013bb0:	88fb      	ldrh	r3, [r7, #6]
 8013bb2:	1c59      	adds	r1, r3, #1
 8013bb4:	80f9      	strh	r1, [r7, #6]
 8013bb6:	4619      	mov	r1, r3
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	440b      	add	r3, r1
 8013bbc:	b2d2      	uxtb	r2, r2
 8013bbe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013bc0:	88fb      	ldrh	r3, [r7, #6]
 8013bc2:	1c5a      	adds	r2, r3, #1
 8013bc4:	80fa      	strh	r2, [r7, #6]
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	4413      	add	r3, r2
 8013bcc:	88ba      	ldrh	r2, [r7, #4]
 8013bce:	b2d2      	uxtb	r2, r2
 8013bd0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013bd2:	88fb      	ldrh	r3, [r7, #6]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3708      	adds	r7, #8
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	0801ee60 	.word	0x0801ee60
 8013be0:	0801f070 	.word	0x0801f070
 8013be4:	0801eec0 	.word	0x0801eec0

08013be8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b084      	sub	sp, #16
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	4603      	mov	r3, r0
 8013bf0:	60b9      	str	r1, [r7, #8]
 8013bf2:	607a      	str	r2, [r7, #4]
 8013bf4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013bf6:	89fb      	ldrh	r3, [r7, #14]
 8013bf8:	3304      	adds	r3, #4
 8013bfa:	2b44      	cmp	r3, #68	; 0x44
 8013bfc:	d906      	bls.n	8013c0c <dhcp_option_long+0x24>
 8013bfe:	4b19      	ldr	r3, [pc, #100]	; (8013c64 <dhcp_option_long+0x7c>)
 8013c00:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013c04:	4918      	ldr	r1, [pc, #96]	; (8013c68 <dhcp_option_long+0x80>)
 8013c06:	4819      	ldr	r0, [pc, #100]	; (8013c6c <dhcp_option_long+0x84>)
 8013c08:	f003 fcca 	bl	80175a0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	0e1a      	lsrs	r2, r3, #24
 8013c10:	89fb      	ldrh	r3, [r7, #14]
 8013c12:	1c59      	adds	r1, r3, #1
 8013c14:	81f9      	strh	r1, [r7, #14]
 8013c16:	4619      	mov	r1, r3
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	440b      	add	r3, r1
 8013c1c:	b2d2      	uxtb	r2, r2
 8013c1e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	0c1a      	lsrs	r2, r3, #16
 8013c24:	89fb      	ldrh	r3, [r7, #14]
 8013c26:	1c59      	adds	r1, r3, #1
 8013c28:	81f9      	strh	r1, [r7, #14]
 8013c2a:	4619      	mov	r1, r3
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	440b      	add	r3, r1
 8013c30:	b2d2      	uxtb	r2, r2
 8013c32:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	0a1a      	lsrs	r2, r3, #8
 8013c38:	89fb      	ldrh	r3, [r7, #14]
 8013c3a:	1c59      	adds	r1, r3, #1
 8013c3c:	81f9      	strh	r1, [r7, #14]
 8013c3e:	4619      	mov	r1, r3
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	440b      	add	r3, r1
 8013c44:	b2d2      	uxtb	r2, r2
 8013c46:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013c48:	89fb      	ldrh	r3, [r7, #14]
 8013c4a:	1c5a      	adds	r2, r3, #1
 8013c4c:	81fa      	strh	r2, [r7, #14]
 8013c4e:	461a      	mov	r2, r3
 8013c50:	68bb      	ldr	r3, [r7, #8]
 8013c52:	4413      	add	r3, r2
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	b2d2      	uxtb	r2, r2
 8013c58:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013c5a:	89fb      	ldrh	r3, [r7, #14]
}
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3710      	adds	r7, #16
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}
 8013c64:	0801ee60 	.word	0x0801ee60
 8013c68:	0801f0ac 	.word	0x0801f0ac
 8013c6c:	0801eec0 	.word	0x0801eec0

08013c70 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b090      	sub	sp, #64	; 0x40
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013c7e:	2300      	movs	r3, #0
 8013c80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013c82:	2208      	movs	r2, #8
 8013c84:	2100      	movs	r1, #0
 8013c86:	48be      	ldr	r0, [pc, #760]	; (8013f80 <dhcp_parse_reply+0x310>)
 8013c88:	f003 f818 	bl	8016cbc <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	895b      	ldrh	r3, [r3, #10]
 8013c90:	2b2b      	cmp	r3, #43	; 0x2b
 8013c92:	d802      	bhi.n	8013c9a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013c94:	f06f 0301 	mvn.w	r3, #1
 8013c98:	e2a8      	b.n	80141ec <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	685b      	ldr	r3, [r3, #4]
 8013c9e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013ca0:	23f0      	movs	r3, #240	; 0xf0
 8013ca2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	891b      	ldrh	r3, [r3, #8]
 8013ca8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013cae:	e00c      	b.n	8013cca <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb2:	895b      	ldrh	r3, [r3, #10]
 8013cb4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013cb6:	1ad3      	subs	r3, r2, r3
 8013cb8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cbc:	895b      	ldrh	r3, [r3, #10]
 8013cbe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013cc0:	1ad3      	subs	r3, r2, r3
 8013cc2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d004      	beq.n	8013cda <dhcp_parse_reply+0x6a>
 8013cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cd2:	895b      	ldrh	r3, [r3, #10]
 8013cd4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d2ea      	bcs.n	8013cb0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d102      	bne.n	8013ce6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013ce0:	f06f 0301 	mvn.w	r3, #1
 8013ce4:	e282      	b.n	80141ec <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8013ce6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013ce8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013cea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013cec:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf0:	685b      	ldr	r3, [r3, #4]
 8013cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013cf4:	e23a      	b.n	801416c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8013cf6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013cfa:	4413      	add	r3, r2
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013d00:	2300      	movs	r3, #0
 8013d02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d0a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013d0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d0e:	3302      	adds	r3, #2
 8013d10:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013d12:	8bfa      	ldrh	r2, [r7, #30]
 8013d14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d16:	429a      	cmp	r2, r3
 8013d18:	d202      	bcs.n	8013d20 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013d1a:	f06f 0301 	mvn.w	r3, #1
 8013d1e:	e265      	b.n	80141ec <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013d20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d22:	3301      	adds	r3, #1
 8013d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d26:	8952      	ldrh	r2, [r2, #10]
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	da07      	bge.n	8013d3c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013d2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d2e:	3301      	adds	r3, #1
 8013d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013d32:	4413      	add	r3, r2
 8013d34:	781b      	ldrb	r3, [r3, #0]
 8013d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d3a:	e00b      	b.n	8013d54 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d004      	beq.n	8013d4e <dhcp_parse_reply+0xde>
 8013d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	685b      	ldr	r3, [r3, #4]
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	e000      	b.n	8013d50 <dhcp_parse_reply+0xe0>
 8013d4e:	2300      	movs	r3, #0
 8013d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013d5c:	7dfb      	ldrb	r3, [r7, #23]
 8013d5e:	2b3b      	cmp	r3, #59	; 0x3b
 8013d60:	f200 812d 	bhi.w	8013fbe <dhcp_parse_reply+0x34e>
 8013d64:	a201      	add	r2, pc, #4	; (adr r2, 8013d6c <dhcp_parse_reply+0xfc>)
 8013d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d6a:	bf00      	nop
 8013d6c:	08013e5d 	.word	0x08013e5d
 8013d70:	08013e6d 	.word	0x08013e6d
 8013d74:	08013fbf 	.word	0x08013fbf
 8013d78:	08013e8f 	.word	0x08013e8f
 8013d7c:	08013fbf 	.word	0x08013fbf
 8013d80:	08013fbf 	.word	0x08013fbf
 8013d84:	08013fbf 	.word	0x08013fbf
 8013d88:	08013fbf 	.word	0x08013fbf
 8013d8c:	08013fbf 	.word	0x08013fbf
 8013d90:	08013fbf 	.word	0x08013fbf
 8013d94:	08013fbf 	.word	0x08013fbf
 8013d98:	08013fbf 	.word	0x08013fbf
 8013d9c:	08013fbf 	.word	0x08013fbf
 8013da0:	08013fbf 	.word	0x08013fbf
 8013da4:	08013fbf 	.word	0x08013fbf
 8013da8:	08013fbf 	.word	0x08013fbf
 8013dac:	08013fbf 	.word	0x08013fbf
 8013db0:	08013fbf 	.word	0x08013fbf
 8013db4:	08013fbf 	.word	0x08013fbf
 8013db8:	08013fbf 	.word	0x08013fbf
 8013dbc:	08013fbf 	.word	0x08013fbf
 8013dc0:	08013fbf 	.word	0x08013fbf
 8013dc4:	08013fbf 	.word	0x08013fbf
 8013dc8:	08013fbf 	.word	0x08013fbf
 8013dcc:	08013fbf 	.word	0x08013fbf
 8013dd0:	08013fbf 	.word	0x08013fbf
 8013dd4:	08013fbf 	.word	0x08013fbf
 8013dd8:	08013fbf 	.word	0x08013fbf
 8013ddc:	08013fbf 	.word	0x08013fbf
 8013de0:	08013fbf 	.word	0x08013fbf
 8013de4:	08013fbf 	.word	0x08013fbf
 8013de8:	08013fbf 	.word	0x08013fbf
 8013dec:	08013fbf 	.word	0x08013fbf
 8013df0:	08013fbf 	.word	0x08013fbf
 8013df4:	08013fbf 	.word	0x08013fbf
 8013df8:	08013fbf 	.word	0x08013fbf
 8013dfc:	08013fbf 	.word	0x08013fbf
 8013e00:	08013fbf 	.word	0x08013fbf
 8013e04:	08013fbf 	.word	0x08013fbf
 8013e08:	08013fbf 	.word	0x08013fbf
 8013e0c:	08013fbf 	.word	0x08013fbf
 8013e10:	08013fbf 	.word	0x08013fbf
 8013e14:	08013fbf 	.word	0x08013fbf
 8013e18:	08013fbf 	.word	0x08013fbf
 8013e1c:	08013fbf 	.word	0x08013fbf
 8013e20:	08013fbf 	.word	0x08013fbf
 8013e24:	08013fbf 	.word	0x08013fbf
 8013e28:	08013fbf 	.word	0x08013fbf
 8013e2c:	08013fbf 	.word	0x08013fbf
 8013e30:	08013fbf 	.word	0x08013fbf
 8013e34:	08013fbf 	.word	0x08013fbf
 8013e38:	08013ebb 	.word	0x08013ebb
 8013e3c:	08013edd 	.word	0x08013edd
 8013e40:	08013f19 	.word	0x08013f19
 8013e44:	08013f3b 	.word	0x08013f3b
 8013e48:	08013fbf 	.word	0x08013fbf
 8013e4c:	08013fbf 	.word	0x08013fbf
 8013e50:	08013fbf 	.word	0x08013fbf
 8013e54:	08013f5d 	.word	0x08013f5d
 8013e58:	08013f9d 	.word	0x08013f9d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013e6a:	e0ac      	b.n	8013fc6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e70:	2b04      	cmp	r3, #4
 8013e72:	d009      	beq.n	8013e88 <dhcp_parse_reply+0x218>
 8013e74:	4b43      	ldr	r3, [pc, #268]	; (8013f84 <dhcp_parse_reply+0x314>)
 8013e76:	f240 622e 	movw	r2, #1582	; 0x62e
 8013e7a:	4943      	ldr	r1, [pc, #268]	; (8013f88 <dhcp_parse_reply+0x318>)
 8013e7c:	4843      	ldr	r0, [pc, #268]	; (8013f8c <dhcp_parse_reply+0x31c>)
 8013e7e:	f003 fb8f 	bl	80175a0 <iprintf>
 8013e82:	f06f 0305 	mvn.w	r3, #5
 8013e86:	e1b1      	b.n	80141ec <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013e88:	2306      	movs	r3, #6
 8013e8a:	623b      	str	r3, [r7, #32]
        break;
 8013e8c:	e09b      	b.n	8013fc6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013e8e:	2304      	movs	r3, #4
 8013e90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013e94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013e98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d209      	bcs.n	8013eb4 <dhcp_parse_reply+0x244>
 8013ea0:	4b38      	ldr	r3, [pc, #224]	; (8013f84 <dhcp_parse_reply+0x314>)
 8013ea2:	f240 6233 	movw	r2, #1587	; 0x633
 8013ea6:	493a      	ldr	r1, [pc, #232]	; (8013f90 <dhcp_parse_reply+0x320>)
 8013ea8:	4838      	ldr	r0, [pc, #224]	; (8013f8c <dhcp_parse_reply+0x31c>)
 8013eaa:	f003 fb79 	bl	80175a0 <iprintf>
 8013eae:	f06f 0305 	mvn.w	r3, #5
 8013eb2:	e19b      	b.n	80141ec <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013eb4:	2307      	movs	r3, #7
 8013eb6:	623b      	str	r3, [r7, #32]
        break;
 8013eb8:	e085      	b.n	8013fc6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013eba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ebe:	2b04      	cmp	r3, #4
 8013ec0:	d009      	beq.n	8013ed6 <dhcp_parse_reply+0x266>
 8013ec2:	4b30      	ldr	r3, [pc, #192]	; (8013f84 <dhcp_parse_reply+0x314>)
 8013ec4:	f240 6241 	movw	r2, #1601	; 0x641
 8013ec8:	492f      	ldr	r1, [pc, #188]	; (8013f88 <dhcp_parse_reply+0x318>)
 8013eca:	4830      	ldr	r0, [pc, #192]	; (8013f8c <dhcp_parse_reply+0x31c>)
 8013ecc:	f003 fb68 	bl	80175a0 <iprintf>
 8013ed0:	f06f 0305 	mvn.w	r3, #5
 8013ed4:	e18a      	b.n	80141ec <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013ed6:	2303      	movs	r3, #3
 8013ed8:	623b      	str	r3, [r7, #32]
        break;
 8013eda:	e074      	b.n	8013fc6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ee0:	2b01      	cmp	r3, #1
 8013ee2:	d009      	beq.n	8013ef8 <dhcp_parse_reply+0x288>
 8013ee4:	4b27      	ldr	r3, [pc, #156]	; (8013f84 <dhcp_parse_reply+0x314>)
 8013ee6:	f240 624f 	movw	r2, #1615	; 0x64f
 8013eea:	492a      	ldr	r1, [pc, #168]	; (8013f94 <dhcp_parse_reply+0x324>)
 8013eec:	4827      	ldr	r0, [pc, #156]	; (8013f8c <dhcp_parse_reply+0x31c>)
 8013eee:	f003 fb57 	bl	80175a0 <iprintf>
 8013ef2:	f06f 0305 	mvn.w	r3, #5
 8013ef6:	e179      	b.n	80141ec <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013ef8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013efa:	2bf0      	cmp	r3, #240	; 0xf0
 8013efc:	d009      	beq.n	8013f12 <dhcp_parse_reply+0x2a2>
 8013efe:	4b21      	ldr	r3, [pc, #132]	; (8013f84 <dhcp_parse_reply+0x314>)
 8013f00:	f240 6251 	movw	r2, #1617	; 0x651
 8013f04:	4924      	ldr	r1, [pc, #144]	; (8013f98 <dhcp_parse_reply+0x328>)
 8013f06:	4821      	ldr	r0, [pc, #132]	; (8013f8c <dhcp_parse_reply+0x31c>)
 8013f08:	f003 fb4a 	bl	80175a0 <iprintf>
 8013f0c:	f06f 0305 	mvn.w	r3, #5
 8013f10:	e16c      	b.n	80141ec <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013f12:	2300      	movs	r3, #0
 8013f14:	623b      	str	r3, [r7, #32]
        break;
 8013f16:	e056      	b.n	8013fc6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f1c:	2b01      	cmp	r3, #1
 8013f1e:	d009      	beq.n	8013f34 <dhcp_parse_reply+0x2c4>
 8013f20:	4b18      	ldr	r3, [pc, #96]	; (8013f84 <dhcp_parse_reply+0x314>)
 8013f22:	f240 6255 	movw	r2, #1621	; 0x655
 8013f26:	491b      	ldr	r1, [pc, #108]	; (8013f94 <dhcp_parse_reply+0x324>)
 8013f28:	4818      	ldr	r0, [pc, #96]	; (8013f8c <dhcp_parse_reply+0x31c>)
 8013f2a:	f003 fb39 	bl	80175a0 <iprintf>
 8013f2e:	f06f 0305 	mvn.w	r3, #5
 8013f32:	e15b      	b.n	80141ec <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013f34:	2301      	movs	r3, #1
 8013f36:	623b      	str	r3, [r7, #32]
        break;
 8013f38:	e045      	b.n	8013fc6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f3e:	2b04      	cmp	r3, #4
 8013f40:	d009      	beq.n	8013f56 <dhcp_parse_reply+0x2e6>
 8013f42:	4b10      	ldr	r3, [pc, #64]	; (8013f84 <dhcp_parse_reply+0x314>)
 8013f44:	f240 6259 	movw	r2, #1625	; 0x659
 8013f48:	490f      	ldr	r1, [pc, #60]	; (8013f88 <dhcp_parse_reply+0x318>)
 8013f4a:	4810      	ldr	r0, [pc, #64]	; (8013f8c <dhcp_parse_reply+0x31c>)
 8013f4c:	f003 fb28 	bl	80175a0 <iprintf>
 8013f50:	f06f 0305 	mvn.w	r3, #5
 8013f54:	e14a      	b.n	80141ec <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013f56:	2302      	movs	r3, #2
 8013f58:	623b      	str	r3, [r7, #32]
        break;
 8013f5a:	e034      	b.n	8013fc6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f60:	2b04      	cmp	r3, #4
 8013f62:	d009      	beq.n	8013f78 <dhcp_parse_reply+0x308>
 8013f64:	4b07      	ldr	r3, [pc, #28]	; (8013f84 <dhcp_parse_reply+0x314>)
 8013f66:	f240 625d 	movw	r2, #1629	; 0x65d
 8013f6a:	4907      	ldr	r1, [pc, #28]	; (8013f88 <dhcp_parse_reply+0x318>)
 8013f6c:	4807      	ldr	r0, [pc, #28]	; (8013f8c <dhcp_parse_reply+0x31c>)
 8013f6e:	f003 fb17 	bl	80175a0 <iprintf>
 8013f72:	f06f 0305 	mvn.w	r3, #5
 8013f76:	e139      	b.n	80141ec <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013f78:	2304      	movs	r3, #4
 8013f7a:	623b      	str	r3, [r7, #32]
        break;
 8013f7c:	e023      	b.n	8013fc6 <dhcp_parse_reply+0x356>
 8013f7e:	bf00      	nop
 8013f80:	2000d874 	.word	0x2000d874
 8013f84:	0801ee60 	.word	0x0801ee60
 8013f88:	0801f0e8 	.word	0x0801f0e8
 8013f8c:	0801eec0 	.word	0x0801eec0
 8013f90:	0801f0f4 	.word	0x0801f0f4
 8013f94:	0801f108 	.word	0x0801f108
 8013f98:	0801f114 	.word	0x0801f114
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fa0:	2b04      	cmp	r3, #4
 8013fa2:	d009      	beq.n	8013fb8 <dhcp_parse_reply+0x348>
 8013fa4:	4b93      	ldr	r3, [pc, #588]	; (80141f4 <dhcp_parse_reply+0x584>)
 8013fa6:	f240 6261 	movw	r2, #1633	; 0x661
 8013faa:	4993      	ldr	r1, [pc, #588]	; (80141f8 <dhcp_parse_reply+0x588>)
 8013fac:	4893      	ldr	r0, [pc, #588]	; (80141fc <dhcp_parse_reply+0x58c>)
 8013fae:	f003 faf7 	bl	80175a0 <iprintf>
 8013fb2:	f06f 0305 	mvn.w	r3, #5
 8013fb6:	e119      	b.n	80141ec <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013fb8:	2305      	movs	r3, #5
 8013fba:	623b      	str	r3, [r7, #32]
        break;
 8013fbc:	e003      	b.n	8013fc6 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013fc4:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013fc6:	7dfb      	ldrb	r3, [r7, #23]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d103      	bne.n	8013fd4 <dhcp_parse_reply+0x364>
      offset++;
 8013fcc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013fce:	3301      	adds	r3, #1
 8013fd0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013fd2:	e0a1      	b.n	8014118 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013fd4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fda:	4413      	add	r3, r2
 8013fdc:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013fe0:	4293      	cmp	r3, r2
 8013fe2:	dd02      	ble.n	8013fea <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013fe4:	f06f 0301 	mvn.w	r3, #1
 8013fe8:	e100      	b.n	80141ec <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8013fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fee:	b29a      	uxth	r2, r3
 8013ff0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ff2:	4413      	add	r3, r2
 8013ff4:	b29b      	uxth	r3, r3
 8013ff6:	3302      	adds	r3, #2
 8013ff8:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013ffa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	f000 808a 	beq.w	8014118 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8014004:	2300      	movs	r3, #0
 8014006:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014008:	6a3b      	ldr	r3, [r7, #32]
 801400a:	2b00      	cmp	r3, #0
 801400c:	db02      	blt.n	8014014 <dhcp_parse_reply+0x3a4>
 801400e:	6a3b      	ldr	r3, [r7, #32]
 8014010:	2b07      	cmp	r3, #7
 8014012:	dd06      	ble.n	8014022 <dhcp_parse_reply+0x3b2>
 8014014:	4b77      	ldr	r3, [pc, #476]	; (80141f4 <dhcp_parse_reply+0x584>)
 8014016:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801401a:	4979      	ldr	r1, [pc, #484]	; (8014200 <dhcp_parse_reply+0x590>)
 801401c:	4877      	ldr	r0, [pc, #476]	; (80141fc <dhcp_parse_reply+0x58c>)
 801401e:	f003 fabf 	bl	80175a0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014022:	4a78      	ldr	r2, [pc, #480]	; (8014204 <dhcp_parse_reply+0x594>)
 8014024:	6a3b      	ldr	r3, [r7, #32]
 8014026:	4413      	add	r3, r2
 8014028:	781b      	ldrb	r3, [r3, #0]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d174      	bne.n	8014118 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 801402e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014032:	2b04      	cmp	r3, #4
 8014034:	bf28      	it	cs
 8014036:	2304      	movcs	r3, #4
 8014038:	b2db      	uxtb	r3, r3
 801403a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801403c:	8bfb      	ldrh	r3, [r7, #30]
 801403e:	8aba      	ldrh	r2, [r7, #20]
 8014040:	f107 0108 	add.w	r1, r7, #8
 8014044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014046:	f7f7 fcad 	bl	800b9a4 <pbuf_copy_partial>
 801404a:	4603      	mov	r3, r0
 801404c:	461a      	mov	r2, r3
 801404e:	8abb      	ldrh	r3, [r7, #20]
 8014050:	4293      	cmp	r3, r2
 8014052:	d002      	beq.n	801405a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8014054:	f06f 0301 	mvn.w	r3, #1
 8014058:	e0c8      	b.n	80141ec <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 801405a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801405e:	2b04      	cmp	r3, #4
 8014060:	d933      	bls.n	80140ca <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014062:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014066:	f003 0303 	and.w	r3, r3, #3
 801406a:	b2db      	uxtb	r3, r3
 801406c:	2b00      	cmp	r3, #0
 801406e:	d009      	beq.n	8014084 <dhcp_parse_reply+0x414>
 8014070:	4b60      	ldr	r3, [pc, #384]	; (80141f4 <dhcp_parse_reply+0x584>)
 8014072:	f240 6281 	movw	r2, #1665	; 0x681
 8014076:	4964      	ldr	r1, [pc, #400]	; (8014208 <dhcp_parse_reply+0x598>)
 8014078:	4860      	ldr	r0, [pc, #384]	; (80141fc <dhcp_parse_reply+0x58c>)
 801407a:	f003 fa91 	bl	80175a0 <iprintf>
 801407e:	f06f 0305 	mvn.w	r3, #5
 8014082:	e0b3      	b.n	80141ec <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8014084:	4a5f      	ldr	r2, [pc, #380]	; (8014204 <dhcp_parse_reply+0x594>)
 8014086:	6a3b      	ldr	r3, [r7, #32]
 8014088:	4413      	add	r3, r2
 801408a:	2201      	movs	r2, #1
 801408c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801408e:	68bb      	ldr	r3, [r7, #8]
 8014090:	4618      	mov	r0, r3
 8014092:	f7f5 ff08 	bl	8009ea6 <lwip_htonl>
 8014096:	4602      	mov	r2, r0
 8014098:	495c      	ldr	r1, [pc, #368]	; (801420c <dhcp_parse_reply+0x59c>)
 801409a:	6a3b      	ldr	r3, [r7, #32]
 801409c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80140a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80140a4:	3b04      	subs	r3, #4
 80140a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80140aa:	8bfb      	ldrh	r3, [r7, #30]
 80140ac:	3304      	adds	r3, #4
 80140ae:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80140b0:	8a7a      	ldrh	r2, [r7, #18]
 80140b2:	8bfb      	ldrh	r3, [r7, #30]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d202      	bcs.n	80140be <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 80140b8:	f06f 0301 	mvn.w	r3, #1
 80140bc:	e096      	b.n	80141ec <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 80140be:	8a7b      	ldrh	r3, [r7, #18]
 80140c0:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80140c2:	6a3b      	ldr	r3, [r7, #32]
 80140c4:	3301      	adds	r3, #1
 80140c6:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80140c8:	e79e      	b.n	8014008 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 80140ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80140ce:	2b04      	cmp	r3, #4
 80140d0:	d106      	bne.n	80140e0 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 80140d2:	68bb      	ldr	r3, [r7, #8]
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7f5 fee6 	bl	8009ea6 <lwip_htonl>
 80140da:	4603      	mov	r3, r0
 80140dc:	60bb      	str	r3, [r7, #8]
 80140de:	e011      	b.n	8014104 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80140e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d009      	beq.n	80140fc <dhcp_parse_reply+0x48c>
 80140e8:	4b42      	ldr	r3, [pc, #264]	; (80141f4 <dhcp_parse_reply+0x584>)
 80140ea:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80140ee:	4948      	ldr	r1, [pc, #288]	; (8014210 <dhcp_parse_reply+0x5a0>)
 80140f0:	4842      	ldr	r0, [pc, #264]	; (80141fc <dhcp_parse_reply+0x58c>)
 80140f2:	f003 fa55 	bl	80175a0 <iprintf>
 80140f6:	f06f 0305 	mvn.w	r3, #5
 80140fa:	e077      	b.n	80141ec <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 80140fc:	f107 0308 	add.w	r3, r7, #8
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014104:	4a3f      	ldr	r2, [pc, #252]	; (8014204 <dhcp_parse_reply+0x594>)
 8014106:	6a3b      	ldr	r3, [r7, #32]
 8014108:	4413      	add	r3, r2
 801410a:	2201      	movs	r2, #1
 801410c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801410e:	68ba      	ldr	r2, [r7, #8]
 8014110:	493e      	ldr	r1, [pc, #248]	; (801420c <dhcp_parse_reply+0x59c>)
 8014112:	6a3b      	ldr	r3, [r7, #32]
 8014114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801411a:	895b      	ldrh	r3, [r3, #10]
 801411c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801411e:	429a      	cmp	r2, r3
 8014120:	d324      	bcc.n	801416c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8014122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014124:	895b      	ldrh	r3, [r3, #10]
 8014126:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014128:	1ad3      	subs	r3, r2, r3
 801412a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801412c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412e:	895b      	ldrh	r3, [r3, #10]
 8014130:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014132:	1ad3      	subs	r3, r2, r3
 8014134:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8014136:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014138:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801413a:	429a      	cmp	r2, r3
 801413c:	d213      	bcs.n	8014166 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014146:	2b00      	cmp	r3, #0
 8014148:	d109      	bne.n	801415e <dhcp_parse_reply+0x4ee>
 801414a:	4b2a      	ldr	r3, [pc, #168]	; (80141f4 <dhcp_parse_reply+0x584>)
 801414c:	f240 629d 	movw	r2, #1693	; 0x69d
 8014150:	4930      	ldr	r1, [pc, #192]	; (8014214 <dhcp_parse_reply+0x5a4>)
 8014152:	482a      	ldr	r0, [pc, #168]	; (80141fc <dhcp_parse_reply+0x58c>)
 8014154:	f003 fa24 	bl	80175a0 <iprintf>
 8014158:	f06f 0305 	mvn.w	r3, #5
 801415c:	e046      	b.n	80141ec <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 801415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014160:	685b      	ldr	r3, [r3, #4]
 8014162:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014164:	e002      	b.n	801416c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014166:	f06f 0301 	mvn.w	r3, #1
 801416a:	e03f      	b.n	80141ec <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801416e:	2b00      	cmp	r3, #0
 8014170:	d00a      	beq.n	8014188 <dhcp_parse_reply+0x518>
 8014172:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014174:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014176:	429a      	cmp	r2, r3
 8014178:	d206      	bcs.n	8014188 <dhcp_parse_reply+0x518>
 801417a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801417c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801417e:	4413      	add	r3, r2
 8014180:	781b      	ldrb	r3, [r3, #0]
 8014182:	2bff      	cmp	r3, #255	; 0xff
 8014184:	f47f adb7 	bne.w	8013cf6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014188:	4b1e      	ldr	r3, [pc, #120]	; (8014204 <dhcp_parse_reply+0x594>)
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d018      	beq.n	80141c2 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014190:	4b1e      	ldr	r3, [pc, #120]	; (801420c <dhcp_parse_reply+0x59c>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014196:	4b1b      	ldr	r3, [pc, #108]	; (8014204 <dhcp_parse_reply+0x594>)
 8014198:	2200      	movs	r2, #0
 801419a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	2b01      	cmp	r3, #1
 80141a0:	d102      	bne.n	80141a8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80141a2:	2301      	movs	r3, #1
 80141a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80141a6:	e00c      	b.n	80141c2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	2b02      	cmp	r3, #2
 80141ac:	d102      	bne.n	80141b4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80141ae:	2301      	movs	r3, #1
 80141b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80141b2:	e006      	b.n	80141c2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	2b03      	cmp	r3, #3
 80141b8:	d103      	bne.n	80141c2 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 80141ba:	2301      	movs	r3, #1
 80141bc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80141be:	2301      	movs	r3, #1
 80141c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80141c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d006      	beq.n	80141d6 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80141c8:	2300      	movs	r3, #0
 80141ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 80141cc:	236c      	movs	r3, #108	; 0x6c
 80141ce:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80141d0:	23ec      	movs	r3, #236	; 0xec
 80141d2:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80141d4:	e569      	b.n	8013caa <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80141d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d006      	beq.n	80141ea <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 80141dc:	2300      	movs	r3, #0
 80141de:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80141e0:	232c      	movs	r3, #44	; 0x2c
 80141e2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80141e4:	236c      	movs	r3, #108	; 0x6c
 80141e6:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80141e8:	e55f      	b.n	8013caa <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80141ea:	2300      	movs	r3, #0
}
 80141ec:	4618      	mov	r0, r3
 80141ee:	3740      	adds	r7, #64	; 0x40
 80141f0:	46bd      	mov	sp, r7
 80141f2:	bd80      	pop	{r7, pc}
 80141f4:	0801ee60 	.word	0x0801ee60
 80141f8:	0801f0e8 	.word	0x0801f0e8
 80141fc:	0801eec0 	.word	0x0801eec0
 8014200:	0801f12c 	.word	0x0801f12c
 8014204:	2000d874 	.word	0x2000d874
 8014208:	0801f140 	.word	0x0801f140
 801420c:	2000d87c 	.word	0x2000d87c
 8014210:	0801f158 	.word	0x0801f158
 8014214:	0801f16c 	.word	0x0801f16c

08014218 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b08a      	sub	sp, #40	; 0x28
 801421c:	af00      	add	r7, sp, #0
 801421e:	60f8      	str	r0, [r7, #12]
 8014220:	60b9      	str	r1, [r7, #8]
 8014222:	607a      	str	r2, [r7, #4]
 8014224:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014226:	4b60      	ldr	r3, [pc, #384]	; (80143a8 <dhcp_recv+0x190>)
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801422c:	6a3b      	ldr	r3, [r7, #32]
 801422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014230:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014238:	69fb      	ldr	r3, [r7, #28]
 801423a:	2b00      	cmp	r3, #0
 801423c:	f000 809d 	beq.w	801437a <dhcp_recv+0x162>
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	791b      	ldrb	r3, [r3, #4]
 8014244:	2b00      	cmp	r3, #0
 8014246:	f000 8098 	beq.w	801437a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	895b      	ldrh	r3, [r3, #10]
 801424e:	2b2b      	cmp	r3, #43	; 0x2b
 8014250:	f240 8095 	bls.w	801437e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014254:	69bb      	ldr	r3, [r7, #24]
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	2b02      	cmp	r3, #2
 801425a:	f040 8092 	bne.w	8014382 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801425e:	2300      	movs	r3, #0
 8014260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014264:	e012      	b.n	801428c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801426a:	6a3a      	ldr	r2, [r7, #32]
 801426c:	4413      	add	r3, r2
 801426e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014276:	69b9      	ldr	r1, [r7, #24]
 8014278:	440b      	add	r3, r1
 801427a:	7f1b      	ldrb	r3, [r3, #28]
 801427c:	429a      	cmp	r2, r3
 801427e:	f040 8082 	bne.w	8014386 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014286:	3301      	adds	r3, #1
 8014288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801428c:	6a3b      	ldr	r3, [r7, #32]
 801428e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014292:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014296:	429a      	cmp	r2, r3
 8014298:	d203      	bcs.n	80142a2 <dhcp_recv+0x8a>
 801429a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801429e:	2b05      	cmp	r3, #5
 80142a0:	d9e1      	bls.n	8014266 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80142a2:	69bb      	ldr	r3, [r7, #24]
 80142a4:	685b      	ldr	r3, [r3, #4]
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7f5 fdfd 	bl	8009ea6 <lwip_htonl>
 80142ac:	4602      	mov	r2, r0
 80142ae:	69fb      	ldr	r3, [r7, #28]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d169      	bne.n	801438a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80142b6:	69f9      	ldr	r1, [r7, #28]
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f7ff fcd9 	bl	8013c70 <dhcp_parse_reply>
 80142be:	4603      	mov	r3, r0
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d164      	bne.n	801438e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80142c4:	4b39      	ldr	r3, [pc, #228]	; (80143ac <dhcp_recv+0x194>)
 80142c6:	785b      	ldrb	r3, [r3, #1]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d062      	beq.n	8014392 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	685b      	ldr	r3, [r3, #4]
 80142d0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80142d2:	4b37      	ldr	r3, [pc, #220]	; (80143b0 <dhcp_recv+0x198>)
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80142d8:	7cfb      	ldrb	r3, [r7, #19]
 80142da:	2b05      	cmp	r3, #5
 80142dc:	d12a      	bne.n	8014334 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	795b      	ldrb	r3, [r3, #5]
 80142e2:	2b01      	cmp	r3, #1
 80142e4:	d112      	bne.n	801430c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80142e6:	6979      	ldr	r1, [r7, #20]
 80142e8:	6a38      	ldr	r0, [r7, #32]
 80142ea:	f7fe fe53 	bl	8012f94 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80142ee:	6a3b      	ldr	r3, [r7, #32]
 80142f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80142f4:	f003 0308 	and.w	r3, r3, #8
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d003      	beq.n	8014304 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80142fc:	6a38      	ldr	r0, [r7, #32]
 80142fe:	f7fe fbc3 	bl	8012a88 <dhcp_check>
 8014302:	e049      	b.n	8014398 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014304:	6a38      	ldr	r0, [r7, #32]
 8014306:	f7ff f867 	bl	80133d8 <dhcp_bind>
 801430a:	e045      	b.n	8014398 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801430c:	69fb      	ldr	r3, [r7, #28]
 801430e:	795b      	ldrb	r3, [r3, #5]
 8014310:	2b03      	cmp	r3, #3
 8014312:	d007      	beq.n	8014324 <dhcp_recv+0x10c>
 8014314:	69fb      	ldr	r3, [r7, #28]
 8014316:	795b      	ldrb	r3, [r3, #5]
 8014318:	2b04      	cmp	r3, #4
 801431a:	d003      	beq.n	8014324 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801431c:	69fb      	ldr	r3, [r7, #28]
 801431e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014320:	2b05      	cmp	r3, #5
 8014322:	d139      	bne.n	8014398 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8014324:	6979      	ldr	r1, [r7, #20]
 8014326:	6a38      	ldr	r0, [r7, #32]
 8014328:	f7fe fe34 	bl	8012f94 <dhcp_handle_ack>
      dhcp_bind(netif);
 801432c:	6a38      	ldr	r0, [r7, #32]
 801432e:	f7ff f853 	bl	80133d8 <dhcp_bind>
 8014332:	e031      	b.n	8014398 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014334:	7cfb      	ldrb	r3, [r7, #19]
 8014336:	2b06      	cmp	r3, #6
 8014338:	d113      	bne.n	8014362 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801433e:	2b03      	cmp	r3, #3
 8014340:	d00b      	beq.n	801435a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	795b      	ldrb	r3, [r3, #5]
 8014346:	2b01      	cmp	r3, #1
 8014348:	d007      	beq.n	801435a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801434a:	69fb      	ldr	r3, [r7, #28]
 801434c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801434e:	2b04      	cmp	r3, #4
 8014350:	d003      	beq.n	801435a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	795b      	ldrb	r3, [r3, #5]
 8014356:	2b05      	cmp	r3, #5
 8014358:	d103      	bne.n	8014362 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801435a:	6a38      	ldr	r0, [r7, #32]
 801435c:	f7fe fb7a 	bl	8012a54 <dhcp_handle_nak>
 8014360:	e01a      	b.n	8014398 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014362:	7cfb      	ldrb	r3, [r7, #19]
 8014364:	2b02      	cmp	r3, #2
 8014366:	d116      	bne.n	8014396 <dhcp_recv+0x17e>
 8014368:	69fb      	ldr	r3, [r7, #28]
 801436a:	795b      	ldrb	r3, [r3, #5]
 801436c:	2b06      	cmp	r3, #6
 801436e:	d112      	bne.n	8014396 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014370:	6979      	ldr	r1, [r7, #20]
 8014372:	6a38      	ldr	r0, [r7, #32]
 8014374:	f7fe fbbc 	bl	8012af0 <dhcp_handle_offer>
 8014378:	e00e      	b.n	8014398 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801437a:	bf00      	nop
 801437c:	e00c      	b.n	8014398 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801437e:	bf00      	nop
 8014380:	e00a      	b.n	8014398 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014382:	bf00      	nop
 8014384:	e008      	b.n	8014398 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8014386:	bf00      	nop
 8014388:	e006      	b.n	8014398 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801438a:	bf00      	nop
 801438c:	e004      	b.n	8014398 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801438e:	bf00      	nop
 8014390:	e002      	b.n	8014398 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014392:	bf00      	nop
 8014394:	e000      	b.n	8014398 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8014396:	bf00      	nop
  pbuf_free(p);
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f7f7 f909 	bl	800b5b0 <pbuf_free>
}
 801439e:	bf00      	nop
 80143a0:	3728      	adds	r7, #40	; 0x28
 80143a2:	46bd      	mov	sp, r7
 80143a4:	bd80      	pop	{r7, pc}
 80143a6:	bf00      	nop
 80143a8:	20009f28 	.word	0x20009f28
 80143ac:	2000d874 	.word	0x2000d874
 80143b0:	2000d87c 	.word	0x2000d87c

080143b4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80143b4:	b580      	push	{r7, lr}
 80143b6:	b088      	sub	sp, #32
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	60f8      	str	r0, [r7, #12]
 80143bc:	60b9      	str	r1, [r7, #8]
 80143be:	603b      	str	r3, [r7, #0]
 80143c0:	4613      	mov	r3, r2
 80143c2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d108      	bne.n	80143dc <dhcp_create_msg+0x28>
 80143ca:	4b5f      	ldr	r3, [pc, #380]	; (8014548 <dhcp_create_msg+0x194>)
 80143cc:	f240 7269 	movw	r2, #1897	; 0x769
 80143d0:	495e      	ldr	r1, [pc, #376]	; (801454c <dhcp_create_msg+0x198>)
 80143d2:	485f      	ldr	r0, [pc, #380]	; (8014550 <dhcp_create_msg+0x19c>)
 80143d4:	f003 f8e4 	bl	80175a0 <iprintf>
 80143d8:	2300      	movs	r3, #0
 80143da:	e0b1      	b.n	8014540 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80143dc:	68bb      	ldr	r3, [r7, #8]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d108      	bne.n	80143f4 <dhcp_create_msg+0x40>
 80143e2:	4b59      	ldr	r3, [pc, #356]	; (8014548 <dhcp_create_msg+0x194>)
 80143e4:	f240 726a 	movw	r2, #1898	; 0x76a
 80143e8:	495a      	ldr	r1, [pc, #360]	; (8014554 <dhcp_create_msg+0x1a0>)
 80143ea:	4859      	ldr	r0, [pc, #356]	; (8014550 <dhcp_create_msg+0x19c>)
 80143ec:	f003 f8d8 	bl	80175a0 <iprintf>
 80143f0:	2300      	movs	r3, #0
 80143f2:	e0a5      	b.n	8014540 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80143f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143f8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80143fc:	2036      	movs	r0, #54	; 0x36
 80143fe:	f7f6 fdf3 	bl	800afe8 <pbuf_alloc>
 8014402:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8014404:	69bb      	ldr	r3, [r7, #24]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d101      	bne.n	801440e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801440a:	2300      	movs	r3, #0
 801440c:	e098      	b.n	8014540 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	895b      	ldrh	r3, [r3, #10]
 8014412:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8014416:	d206      	bcs.n	8014426 <dhcp_create_msg+0x72>
 8014418:	4b4b      	ldr	r3, [pc, #300]	; (8014548 <dhcp_create_msg+0x194>)
 801441a:	f240 7271 	movw	r2, #1905	; 0x771
 801441e:	494e      	ldr	r1, [pc, #312]	; (8014558 <dhcp_create_msg+0x1a4>)
 8014420:	484b      	ldr	r0, [pc, #300]	; (8014550 <dhcp_create_msg+0x19c>)
 8014422:	f003 f8bd 	bl	80175a0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8014426:	79fb      	ldrb	r3, [r7, #7]
 8014428:	2b03      	cmp	r3, #3
 801442a:	d103      	bne.n	8014434 <dhcp_create_msg+0x80>
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	795b      	ldrb	r3, [r3, #5]
 8014430:	2b03      	cmp	r3, #3
 8014432:	d10d      	bne.n	8014450 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	799b      	ldrb	r3, [r3, #6]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d105      	bne.n	8014448 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801443c:	f003 f93e 	bl	80176bc <rand>
 8014440:	4603      	mov	r3, r0
 8014442:	461a      	mov	r2, r3
 8014444:	4b45      	ldr	r3, [pc, #276]	; (801455c <dhcp_create_msg+0x1a8>)
 8014446:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014448:	4b44      	ldr	r3, [pc, #272]	; (801455c <dhcp_create_msg+0x1a8>)
 801444a:	681a      	ldr	r2, [r3, #0]
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	685b      	ldr	r3, [r3, #4]
 8014454:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8014456:	f44f 729a 	mov.w	r2, #308	; 0x134
 801445a:	2100      	movs	r1, #0
 801445c:	6978      	ldr	r0, [r7, #20]
 801445e:	f002 fc2d 	bl	8016cbc <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	2201      	movs	r2, #1
 8014466:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	2201      	movs	r2, #1
 801446c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	4618      	mov	r0, r3
 801447e:	f7f5 fd12 	bl	8009ea6 <lwip_htonl>
 8014482:	4602      	mov	r2, r0
 8014484:	697b      	ldr	r3, [r7, #20]
 8014486:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8014488:	79fb      	ldrb	r3, [r7, #7]
 801448a:	2b08      	cmp	r3, #8
 801448c:	d010      	beq.n	80144b0 <dhcp_create_msg+0xfc>
 801448e:	79fb      	ldrb	r3, [r7, #7]
 8014490:	2b04      	cmp	r3, #4
 8014492:	d00d      	beq.n	80144b0 <dhcp_create_msg+0xfc>
 8014494:	79fb      	ldrb	r3, [r7, #7]
 8014496:	2b07      	cmp	r3, #7
 8014498:	d00a      	beq.n	80144b0 <dhcp_create_msg+0xfc>
 801449a:	79fb      	ldrb	r3, [r7, #7]
 801449c:	2b03      	cmp	r3, #3
 801449e:	d10c      	bne.n	80144ba <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80144a4:	2b05      	cmp	r3, #5
 80144a6:	d003      	beq.n	80144b0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80144a8:	68bb      	ldr	r3, [r7, #8]
 80144aa:	795b      	ldrb	r3, [r3, #5]
 80144ac:	2b04      	cmp	r3, #4
 80144ae:	d104      	bne.n	80144ba <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	3304      	adds	r3, #4
 80144b4:	681a      	ldr	r2, [r3, #0]
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80144ba:	2300      	movs	r3, #0
 80144bc:	83fb      	strh	r3, [r7, #30]
 80144be:	e00c      	b.n	80144da <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80144c0:	8bfa      	ldrh	r2, [r7, #30]
 80144c2:	8bfb      	ldrh	r3, [r7, #30]
 80144c4:	68f9      	ldr	r1, [r7, #12]
 80144c6:	440a      	add	r2, r1
 80144c8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80144cc:	697a      	ldr	r2, [r7, #20]
 80144ce:	4413      	add	r3, r2
 80144d0:	460a      	mov	r2, r1
 80144d2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80144d4:	8bfb      	ldrh	r3, [r7, #30]
 80144d6:	3301      	adds	r3, #1
 80144d8:	83fb      	strh	r3, [r7, #30]
 80144da:	8bfb      	ldrh	r3, [r7, #30]
 80144dc:	2b05      	cmp	r3, #5
 80144de:	d9ef      	bls.n	80144c0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	2200      	movs	r2, #0
 80144e4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80144e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80144ec:	2200      	movs	r2, #0
 80144ee:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80144f2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80144f6:	2200      	movs	r2, #0
 80144f8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80144fc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014500:	2200      	movs	r2, #0
 8014502:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014506:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014510:	2301      	movs	r3, #1
 8014512:	2235      	movs	r2, #53	; 0x35
 8014514:	2000      	movs	r0, #0
 8014516:	f7ff fadb 	bl	8013ad0 <dhcp_option>
 801451a:	4603      	mov	r3, r0
 801451c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014524:	79fa      	ldrb	r2, [r7, #7]
 8014526:	8a7b      	ldrh	r3, [r7, #18]
 8014528:	4618      	mov	r0, r3
 801452a:	f7ff fb05 	bl	8013b38 <dhcp_option_byte>
 801452e:	4603      	mov	r3, r0
 8014530:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d002      	beq.n	801453e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	8a7a      	ldrh	r2, [r7, #18]
 801453c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801453e:	69bb      	ldr	r3, [r7, #24]
}
 8014540:	4618      	mov	r0, r3
 8014542:	3720      	adds	r7, #32
 8014544:	46bd      	mov	sp, r7
 8014546:	bd80      	pop	{r7, pc}
 8014548:	0801ee60 	.word	0x0801ee60
 801454c:	0801f180 	.word	0x0801f180
 8014550:	0801eec0 	.word	0x0801eec0
 8014554:	0801f1a0 	.word	0x0801f1a0
 8014558:	0801f1c0 	.word	0x0801f1c0
 801455c:	2000125c 	.word	0x2000125c

08014560 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	4603      	mov	r3, r0
 8014568:	60b9      	str	r1, [r7, #8]
 801456a:	607a      	str	r2, [r7, #4]
 801456c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801456e:	89fb      	ldrh	r3, [r7, #14]
 8014570:	1c5a      	adds	r2, r3, #1
 8014572:	81fa      	strh	r2, [r7, #14]
 8014574:	461a      	mov	r2, r3
 8014576:	68bb      	ldr	r3, [r7, #8]
 8014578:	4413      	add	r3, r2
 801457a:	22ff      	movs	r2, #255	; 0xff
 801457c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801457e:	e007      	b.n	8014590 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8014580:	89fb      	ldrh	r3, [r7, #14]
 8014582:	1c5a      	adds	r2, r3, #1
 8014584:	81fa      	strh	r2, [r7, #14]
 8014586:	461a      	mov	r2, r3
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	4413      	add	r3, r2
 801458c:	2200      	movs	r2, #0
 801458e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014590:	89fb      	ldrh	r3, [r7, #14]
 8014592:	2b43      	cmp	r3, #67	; 0x43
 8014594:	d904      	bls.n	80145a0 <dhcp_option_trailer+0x40>
 8014596:	89fb      	ldrh	r3, [r7, #14]
 8014598:	f003 0303 	and.w	r3, r3, #3
 801459c:	2b00      	cmp	r3, #0
 801459e:	d002      	beq.n	80145a6 <dhcp_option_trailer+0x46>
 80145a0:	89fb      	ldrh	r3, [r7, #14]
 80145a2:	2b43      	cmp	r3, #67	; 0x43
 80145a4:	d9ec      	bls.n	8014580 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80145a6:	89fb      	ldrh	r3, [r7, #14]
 80145a8:	33f0      	adds	r3, #240	; 0xf0
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	4619      	mov	r1, r3
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f7f6 fe78 	bl	800b2a4 <pbuf_realloc>
}
 80145b4:	bf00      	nop
 80145b6:	3710      	adds	r7, #16
 80145b8:	46bd      	mov	sp, r7
 80145ba:	bd80      	pop	{r7, pc}

080145bc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80145bc:	b480      	push	{r7}
 80145be:	b085      	sub	sp, #20
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d017      	beq.n	80145fa <dhcp_supplied_address+0x3e>
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d013      	beq.n	80145fa <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	795b      	ldrb	r3, [r3, #5]
 80145dc:	2b0a      	cmp	r3, #10
 80145de:	d007      	beq.n	80145f0 <dhcp_supplied_address+0x34>
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	795b      	ldrb	r3, [r3, #5]
 80145e4:	2b05      	cmp	r3, #5
 80145e6:	d003      	beq.n	80145f0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80145ec:	2b04      	cmp	r3, #4
 80145ee:	d101      	bne.n	80145f4 <dhcp_supplied_address+0x38>
 80145f0:	2301      	movs	r3, #1
 80145f2:	e000      	b.n	80145f6 <dhcp_supplied_address+0x3a>
 80145f4:	2300      	movs	r3, #0
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	e000      	b.n	80145fc <dhcp_supplied_address+0x40>
  }
  return 0;
 80145fa:	2300      	movs	r3, #0
}
 80145fc:	4618      	mov	r0, r3
 80145fe:	3714      	adds	r7, #20
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr

08014608 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014610:	4915      	ldr	r1, [pc, #84]	; (8014668 <etharp_free_entry+0x60>)
 8014612:	687a      	ldr	r2, [r7, #4]
 8014614:	4613      	mov	r3, r2
 8014616:	005b      	lsls	r3, r3, #1
 8014618:	4413      	add	r3, r2
 801461a:	00db      	lsls	r3, r3, #3
 801461c:	440b      	add	r3, r1
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d013      	beq.n	801464c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014624:	4910      	ldr	r1, [pc, #64]	; (8014668 <etharp_free_entry+0x60>)
 8014626:	687a      	ldr	r2, [r7, #4]
 8014628:	4613      	mov	r3, r2
 801462a:	005b      	lsls	r3, r3, #1
 801462c:	4413      	add	r3, r2
 801462e:	00db      	lsls	r3, r3, #3
 8014630:	440b      	add	r3, r1
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	4618      	mov	r0, r3
 8014636:	f7f6 ffbb 	bl	800b5b0 <pbuf_free>
    arp_table[i].q = NULL;
 801463a:	490b      	ldr	r1, [pc, #44]	; (8014668 <etharp_free_entry+0x60>)
 801463c:	687a      	ldr	r2, [r7, #4]
 801463e:	4613      	mov	r3, r2
 8014640:	005b      	lsls	r3, r3, #1
 8014642:	4413      	add	r3, r2
 8014644:	00db      	lsls	r3, r3, #3
 8014646:	440b      	add	r3, r1
 8014648:	2200      	movs	r2, #0
 801464a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801464c:	4906      	ldr	r1, [pc, #24]	; (8014668 <etharp_free_entry+0x60>)
 801464e:	687a      	ldr	r2, [r7, #4]
 8014650:	4613      	mov	r3, r2
 8014652:	005b      	lsls	r3, r3, #1
 8014654:	4413      	add	r3, r2
 8014656:	00db      	lsls	r3, r3, #3
 8014658:	440b      	add	r3, r1
 801465a:	3314      	adds	r3, #20
 801465c:	2200      	movs	r2, #0
 801465e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014660:	bf00      	nop
 8014662:	3708      	adds	r7, #8
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}
 8014668:	20001260 	.word	0x20001260

0801466c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014672:	2300      	movs	r3, #0
 8014674:	607b      	str	r3, [r7, #4]
 8014676:	e096      	b.n	80147a6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014678:	494f      	ldr	r1, [pc, #316]	; (80147b8 <etharp_tmr+0x14c>)
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	4613      	mov	r3, r2
 801467e:	005b      	lsls	r3, r3, #1
 8014680:	4413      	add	r3, r2
 8014682:	00db      	lsls	r3, r3, #3
 8014684:	440b      	add	r3, r1
 8014686:	3314      	adds	r3, #20
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801468c:	78fb      	ldrb	r3, [r7, #3]
 801468e:	2b00      	cmp	r3, #0
 8014690:	f000 8086 	beq.w	80147a0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014694:	4948      	ldr	r1, [pc, #288]	; (80147b8 <etharp_tmr+0x14c>)
 8014696:	687a      	ldr	r2, [r7, #4]
 8014698:	4613      	mov	r3, r2
 801469a:	005b      	lsls	r3, r3, #1
 801469c:	4413      	add	r3, r2
 801469e:	00db      	lsls	r3, r3, #3
 80146a0:	440b      	add	r3, r1
 80146a2:	3312      	adds	r3, #18
 80146a4:	881b      	ldrh	r3, [r3, #0]
 80146a6:	3301      	adds	r3, #1
 80146a8:	b298      	uxth	r0, r3
 80146aa:	4943      	ldr	r1, [pc, #268]	; (80147b8 <etharp_tmr+0x14c>)
 80146ac:	687a      	ldr	r2, [r7, #4]
 80146ae:	4613      	mov	r3, r2
 80146b0:	005b      	lsls	r3, r3, #1
 80146b2:	4413      	add	r3, r2
 80146b4:	00db      	lsls	r3, r3, #3
 80146b6:	440b      	add	r3, r1
 80146b8:	3312      	adds	r3, #18
 80146ba:	4602      	mov	r2, r0
 80146bc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80146be:	493e      	ldr	r1, [pc, #248]	; (80147b8 <etharp_tmr+0x14c>)
 80146c0:	687a      	ldr	r2, [r7, #4]
 80146c2:	4613      	mov	r3, r2
 80146c4:	005b      	lsls	r3, r3, #1
 80146c6:	4413      	add	r3, r2
 80146c8:	00db      	lsls	r3, r3, #3
 80146ca:	440b      	add	r3, r1
 80146cc:	3312      	adds	r3, #18
 80146ce:	881b      	ldrh	r3, [r3, #0]
 80146d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80146d4:	d215      	bcs.n	8014702 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80146d6:	4938      	ldr	r1, [pc, #224]	; (80147b8 <etharp_tmr+0x14c>)
 80146d8:	687a      	ldr	r2, [r7, #4]
 80146da:	4613      	mov	r3, r2
 80146dc:	005b      	lsls	r3, r3, #1
 80146de:	4413      	add	r3, r2
 80146e0:	00db      	lsls	r3, r3, #3
 80146e2:	440b      	add	r3, r1
 80146e4:	3314      	adds	r3, #20
 80146e6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80146e8:	2b01      	cmp	r3, #1
 80146ea:	d10e      	bne.n	801470a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80146ec:	4932      	ldr	r1, [pc, #200]	; (80147b8 <etharp_tmr+0x14c>)
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	4613      	mov	r3, r2
 80146f2:	005b      	lsls	r3, r3, #1
 80146f4:	4413      	add	r3, r2
 80146f6:	00db      	lsls	r3, r3, #3
 80146f8:	440b      	add	r3, r1
 80146fa:	3312      	adds	r3, #18
 80146fc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80146fe:	2b04      	cmp	r3, #4
 8014700:	d903      	bls.n	801470a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f7ff ff80 	bl	8014608 <etharp_free_entry>
 8014708:	e04a      	b.n	80147a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801470a:	492b      	ldr	r1, [pc, #172]	; (80147b8 <etharp_tmr+0x14c>)
 801470c:	687a      	ldr	r2, [r7, #4]
 801470e:	4613      	mov	r3, r2
 8014710:	005b      	lsls	r3, r3, #1
 8014712:	4413      	add	r3, r2
 8014714:	00db      	lsls	r3, r3, #3
 8014716:	440b      	add	r3, r1
 8014718:	3314      	adds	r3, #20
 801471a:	781b      	ldrb	r3, [r3, #0]
 801471c:	2b03      	cmp	r3, #3
 801471e:	d10a      	bne.n	8014736 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014720:	4925      	ldr	r1, [pc, #148]	; (80147b8 <etharp_tmr+0x14c>)
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	4613      	mov	r3, r2
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	4413      	add	r3, r2
 801472a:	00db      	lsls	r3, r3, #3
 801472c:	440b      	add	r3, r1
 801472e:	3314      	adds	r3, #20
 8014730:	2204      	movs	r2, #4
 8014732:	701a      	strb	r2, [r3, #0]
 8014734:	e034      	b.n	80147a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014736:	4920      	ldr	r1, [pc, #128]	; (80147b8 <etharp_tmr+0x14c>)
 8014738:	687a      	ldr	r2, [r7, #4]
 801473a:	4613      	mov	r3, r2
 801473c:	005b      	lsls	r3, r3, #1
 801473e:	4413      	add	r3, r2
 8014740:	00db      	lsls	r3, r3, #3
 8014742:	440b      	add	r3, r1
 8014744:	3314      	adds	r3, #20
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	2b04      	cmp	r3, #4
 801474a:	d10a      	bne.n	8014762 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801474c:	491a      	ldr	r1, [pc, #104]	; (80147b8 <etharp_tmr+0x14c>)
 801474e:	687a      	ldr	r2, [r7, #4]
 8014750:	4613      	mov	r3, r2
 8014752:	005b      	lsls	r3, r3, #1
 8014754:	4413      	add	r3, r2
 8014756:	00db      	lsls	r3, r3, #3
 8014758:	440b      	add	r3, r1
 801475a:	3314      	adds	r3, #20
 801475c:	2202      	movs	r2, #2
 801475e:	701a      	strb	r2, [r3, #0]
 8014760:	e01e      	b.n	80147a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014762:	4915      	ldr	r1, [pc, #84]	; (80147b8 <etharp_tmr+0x14c>)
 8014764:	687a      	ldr	r2, [r7, #4]
 8014766:	4613      	mov	r3, r2
 8014768:	005b      	lsls	r3, r3, #1
 801476a:	4413      	add	r3, r2
 801476c:	00db      	lsls	r3, r3, #3
 801476e:	440b      	add	r3, r1
 8014770:	3314      	adds	r3, #20
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	2b01      	cmp	r3, #1
 8014776:	d113      	bne.n	80147a0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014778:	490f      	ldr	r1, [pc, #60]	; (80147b8 <etharp_tmr+0x14c>)
 801477a:	687a      	ldr	r2, [r7, #4]
 801477c:	4613      	mov	r3, r2
 801477e:	005b      	lsls	r3, r3, #1
 8014780:	4413      	add	r3, r2
 8014782:	00db      	lsls	r3, r3, #3
 8014784:	440b      	add	r3, r1
 8014786:	3308      	adds	r3, #8
 8014788:	6818      	ldr	r0, [r3, #0]
 801478a:	687a      	ldr	r2, [r7, #4]
 801478c:	4613      	mov	r3, r2
 801478e:	005b      	lsls	r3, r3, #1
 8014790:	4413      	add	r3, r2
 8014792:	00db      	lsls	r3, r3, #3
 8014794:	4a08      	ldr	r2, [pc, #32]	; (80147b8 <etharp_tmr+0x14c>)
 8014796:	4413      	add	r3, r2
 8014798:	3304      	adds	r3, #4
 801479a:	4619      	mov	r1, r3
 801479c:	f000 fe72 	bl	8015484 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	3301      	adds	r3, #1
 80147a4:	607b      	str	r3, [r7, #4]
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	2b09      	cmp	r3, #9
 80147aa:	f77f af65 	ble.w	8014678 <etharp_tmr+0xc>
      }
    }
  }
}
 80147ae:	bf00      	nop
 80147b0:	bf00      	nop
 80147b2:	3708      	adds	r7, #8
 80147b4:	46bd      	mov	sp, r7
 80147b6:	bd80      	pop	{r7, pc}
 80147b8:	20001260 	.word	0x20001260

080147bc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b08a      	sub	sp, #40	; 0x28
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	460b      	mov	r3, r1
 80147c6:	607a      	str	r2, [r7, #4]
 80147c8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80147ca:	230a      	movs	r3, #10
 80147cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80147ce:	230a      	movs	r3, #10
 80147d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80147d2:	230a      	movs	r3, #10
 80147d4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80147d6:	2300      	movs	r3, #0
 80147d8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80147da:	230a      	movs	r3, #10
 80147dc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80147de:	2300      	movs	r3, #0
 80147e0:	83bb      	strh	r3, [r7, #28]
 80147e2:	2300      	movs	r3, #0
 80147e4:	837b      	strh	r3, [r7, #26]
 80147e6:	2300      	movs	r3, #0
 80147e8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147ea:	2300      	movs	r3, #0
 80147ec:	843b      	strh	r3, [r7, #32]
 80147ee:	e0ae      	b.n	801494e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80147f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147f4:	49a6      	ldr	r1, [pc, #664]	; (8014a90 <etharp_find_entry+0x2d4>)
 80147f6:	4613      	mov	r3, r2
 80147f8:	005b      	lsls	r3, r3, #1
 80147fa:	4413      	add	r3, r2
 80147fc:	00db      	lsls	r3, r3, #3
 80147fe:	440b      	add	r3, r1
 8014800:	3314      	adds	r3, #20
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014806:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801480a:	2b0a      	cmp	r3, #10
 801480c:	d105      	bne.n	801481a <etharp_find_entry+0x5e>
 801480e:	7dfb      	ldrb	r3, [r7, #23]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d102      	bne.n	801481a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014814:	8c3b      	ldrh	r3, [r7, #32]
 8014816:	847b      	strh	r3, [r7, #34]	; 0x22
 8014818:	e095      	b.n	8014946 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801481a:	7dfb      	ldrb	r3, [r7, #23]
 801481c:	2b00      	cmp	r3, #0
 801481e:	f000 8092 	beq.w	8014946 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014822:	7dfb      	ldrb	r3, [r7, #23]
 8014824:	2b01      	cmp	r3, #1
 8014826:	d009      	beq.n	801483c <etharp_find_entry+0x80>
 8014828:	7dfb      	ldrb	r3, [r7, #23]
 801482a:	2b01      	cmp	r3, #1
 801482c:	d806      	bhi.n	801483c <etharp_find_entry+0x80>
 801482e:	4b99      	ldr	r3, [pc, #612]	; (8014a94 <etharp_find_entry+0x2d8>)
 8014830:	f240 1223 	movw	r2, #291	; 0x123
 8014834:	4998      	ldr	r1, [pc, #608]	; (8014a98 <etharp_find_entry+0x2dc>)
 8014836:	4899      	ldr	r0, [pc, #612]	; (8014a9c <etharp_find_entry+0x2e0>)
 8014838:	f002 feb2 	bl	80175a0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d020      	beq.n	8014884 <etharp_find_entry+0xc8>
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	6819      	ldr	r1, [r3, #0]
 8014846:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801484a:	4891      	ldr	r0, [pc, #580]	; (8014a90 <etharp_find_entry+0x2d4>)
 801484c:	4613      	mov	r3, r2
 801484e:	005b      	lsls	r3, r3, #1
 8014850:	4413      	add	r3, r2
 8014852:	00db      	lsls	r3, r3, #3
 8014854:	4403      	add	r3, r0
 8014856:	3304      	adds	r3, #4
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	4299      	cmp	r1, r3
 801485c:	d112      	bne.n	8014884 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d00c      	beq.n	801487e <etharp_find_entry+0xc2>
 8014864:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014868:	4989      	ldr	r1, [pc, #548]	; (8014a90 <etharp_find_entry+0x2d4>)
 801486a:	4613      	mov	r3, r2
 801486c:	005b      	lsls	r3, r3, #1
 801486e:	4413      	add	r3, r2
 8014870:	00db      	lsls	r3, r3, #3
 8014872:	440b      	add	r3, r1
 8014874:	3308      	adds	r3, #8
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	687a      	ldr	r2, [r7, #4]
 801487a:	429a      	cmp	r2, r3
 801487c:	d102      	bne.n	8014884 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801487e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014882:	e100      	b.n	8014a86 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014884:	7dfb      	ldrb	r3, [r7, #23]
 8014886:	2b01      	cmp	r3, #1
 8014888:	d140      	bne.n	801490c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801488a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801488e:	4980      	ldr	r1, [pc, #512]	; (8014a90 <etharp_find_entry+0x2d4>)
 8014890:	4613      	mov	r3, r2
 8014892:	005b      	lsls	r3, r3, #1
 8014894:	4413      	add	r3, r2
 8014896:	00db      	lsls	r3, r3, #3
 8014898:	440b      	add	r3, r1
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d01a      	beq.n	80148d6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80148a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148a4:	497a      	ldr	r1, [pc, #488]	; (8014a90 <etharp_find_entry+0x2d4>)
 80148a6:	4613      	mov	r3, r2
 80148a8:	005b      	lsls	r3, r3, #1
 80148aa:	4413      	add	r3, r2
 80148ac:	00db      	lsls	r3, r3, #3
 80148ae:	440b      	add	r3, r1
 80148b0:	3312      	adds	r3, #18
 80148b2:	881b      	ldrh	r3, [r3, #0]
 80148b4:	8bba      	ldrh	r2, [r7, #28]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	d845      	bhi.n	8014946 <etharp_find_entry+0x18a>
            old_queue = i;
 80148ba:	8c3b      	ldrh	r3, [r7, #32]
 80148bc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80148be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148c2:	4973      	ldr	r1, [pc, #460]	; (8014a90 <etharp_find_entry+0x2d4>)
 80148c4:	4613      	mov	r3, r2
 80148c6:	005b      	lsls	r3, r3, #1
 80148c8:	4413      	add	r3, r2
 80148ca:	00db      	lsls	r3, r3, #3
 80148cc:	440b      	add	r3, r1
 80148ce:	3312      	adds	r3, #18
 80148d0:	881b      	ldrh	r3, [r3, #0]
 80148d2:	83bb      	strh	r3, [r7, #28]
 80148d4:	e037      	b.n	8014946 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80148d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148da:	496d      	ldr	r1, [pc, #436]	; (8014a90 <etharp_find_entry+0x2d4>)
 80148dc:	4613      	mov	r3, r2
 80148de:	005b      	lsls	r3, r3, #1
 80148e0:	4413      	add	r3, r2
 80148e2:	00db      	lsls	r3, r3, #3
 80148e4:	440b      	add	r3, r1
 80148e6:	3312      	adds	r3, #18
 80148e8:	881b      	ldrh	r3, [r3, #0]
 80148ea:	8b7a      	ldrh	r2, [r7, #26]
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d82a      	bhi.n	8014946 <etharp_find_entry+0x18a>
            old_pending = i;
 80148f0:	8c3b      	ldrh	r3, [r7, #32]
 80148f2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80148f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148f8:	4965      	ldr	r1, [pc, #404]	; (8014a90 <etharp_find_entry+0x2d4>)
 80148fa:	4613      	mov	r3, r2
 80148fc:	005b      	lsls	r3, r3, #1
 80148fe:	4413      	add	r3, r2
 8014900:	00db      	lsls	r3, r3, #3
 8014902:	440b      	add	r3, r1
 8014904:	3312      	adds	r3, #18
 8014906:	881b      	ldrh	r3, [r3, #0]
 8014908:	837b      	strh	r3, [r7, #26]
 801490a:	e01c      	b.n	8014946 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801490c:	7dfb      	ldrb	r3, [r7, #23]
 801490e:	2b01      	cmp	r3, #1
 8014910:	d919      	bls.n	8014946 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014912:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014916:	495e      	ldr	r1, [pc, #376]	; (8014a90 <etharp_find_entry+0x2d4>)
 8014918:	4613      	mov	r3, r2
 801491a:	005b      	lsls	r3, r3, #1
 801491c:	4413      	add	r3, r2
 801491e:	00db      	lsls	r3, r3, #3
 8014920:	440b      	add	r3, r1
 8014922:	3312      	adds	r3, #18
 8014924:	881b      	ldrh	r3, [r3, #0]
 8014926:	8b3a      	ldrh	r2, [r7, #24]
 8014928:	429a      	cmp	r2, r3
 801492a:	d80c      	bhi.n	8014946 <etharp_find_entry+0x18a>
            old_stable = i;
 801492c:	8c3b      	ldrh	r3, [r7, #32]
 801492e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014934:	4956      	ldr	r1, [pc, #344]	; (8014a90 <etharp_find_entry+0x2d4>)
 8014936:	4613      	mov	r3, r2
 8014938:	005b      	lsls	r3, r3, #1
 801493a:	4413      	add	r3, r2
 801493c:	00db      	lsls	r3, r3, #3
 801493e:	440b      	add	r3, r1
 8014940:	3312      	adds	r3, #18
 8014942:	881b      	ldrh	r3, [r3, #0]
 8014944:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014946:	8c3b      	ldrh	r3, [r7, #32]
 8014948:	3301      	adds	r3, #1
 801494a:	b29b      	uxth	r3, r3
 801494c:	843b      	strh	r3, [r7, #32]
 801494e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014952:	2b09      	cmp	r3, #9
 8014954:	f77f af4c 	ble.w	80147f0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014958:	7afb      	ldrb	r3, [r7, #11]
 801495a:	f003 0302 	and.w	r3, r3, #2
 801495e:	2b00      	cmp	r3, #0
 8014960:	d108      	bne.n	8014974 <etharp_find_entry+0x1b8>
 8014962:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014966:	2b0a      	cmp	r3, #10
 8014968:	d107      	bne.n	801497a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801496a:	7afb      	ldrb	r3, [r7, #11]
 801496c:	f003 0301 	and.w	r3, r3, #1
 8014970:	2b00      	cmp	r3, #0
 8014972:	d102      	bne.n	801497a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014974:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014978:	e085      	b.n	8014a86 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801497a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801497e:	2b09      	cmp	r3, #9
 8014980:	dc02      	bgt.n	8014988 <etharp_find_entry+0x1cc>
    i = empty;
 8014982:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014984:	843b      	strh	r3, [r7, #32]
 8014986:	e039      	b.n	80149fc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014988:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801498c:	2b09      	cmp	r3, #9
 801498e:	dc14      	bgt.n	80149ba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014992:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014994:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014998:	493d      	ldr	r1, [pc, #244]	; (8014a90 <etharp_find_entry+0x2d4>)
 801499a:	4613      	mov	r3, r2
 801499c:	005b      	lsls	r3, r3, #1
 801499e:	4413      	add	r3, r2
 80149a0:	00db      	lsls	r3, r3, #3
 80149a2:	440b      	add	r3, r1
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d018      	beq.n	80149dc <etharp_find_entry+0x220>
 80149aa:	4b3a      	ldr	r3, [pc, #232]	; (8014a94 <etharp_find_entry+0x2d8>)
 80149ac:	f240 126d 	movw	r2, #365	; 0x16d
 80149b0:	493b      	ldr	r1, [pc, #236]	; (8014aa0 <etharp_find_entry+0x2e4>)
 80149b2:	483a      	ldr	r0, [pc, #232]	; (8014a9c <etharp_find_entry+0x2e0>)
 80149b4:	f002 fdf4 	bl	80175a0 <iprintf>
 80149b8:	e010      	b.n	80149dc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80149ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80149be:	2b09      	cmp	r3, #9
 80149c0:	dc02      	bgt.n	80149c8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80149c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80149c4:	843b      	strh	r3, [r7, #32]
 80149c6:	e009      	b.n	80149dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80149c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80149cc:	2b09      	cmp	r3, #9
 80149ce:	dc02      	bgt.n	80149d6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80149d0:	8bfb      	ldrh	r3, [r7, #30]
 80149d2:	843b      	strh	r3, [r7, #32]
 80149d4:	e002      	b.n	80149dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80149d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149da:	e054      	b.n	8014a86 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80149dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80149e0:	2b09      	cmp	r3, #9
 80149e2:	dd06      	ble.n	80149f2 <etharp_find_entry+0x236>
 80149e4:	4b2b      	ldr	r3, [pc, #172]	; (8014a94 <etharp_find_entry+0x2d8>)
 80149e6:	f240 127f 	movw	r2, #383	; 0x17f
 80149ea:	492e      	ldr	r1, [pc, #184]	; (8014aa4 <etharp_find_entry+0x2e8>)
 80149ec:	482b      	ldr	r0, [pc, #172]	; (8014a9c <etharp_find_entry+0x2e0>)
 80149ee:	f002 fdd7 	bl	80175a0 <iprintf>
    etharp_free_entry(i);
 80149f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7ff fe06 	bl	8014608 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80149fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a00:	2b09      	cmp	r3, #9
 8014a02:	dd06      	ble.n	8014a12 <etharp_find_entry+0x256>
 8014a04:	4b23      	ldr	r3, [pc, #140]	; (8014a94 <etharp_find_entry+0x2d8>)
 8014a06:	f240 1283 	movw	r2, #387	; 0x183
 8014a0a:	4926      	ldr	r1, [pc, #152]	; (8014aa4 <etharp_find_entry+0x2e8>)
 8014a0c:	4823      	ldr	r0, [pc, #140]	; (8014a9c <etharp_find_entry+0x2e0>)
 8014a0e:	f002 fdc7 	bl	80175a0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014a12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a16:	491e      	ldr	r1, [pc, #120]	; (8014a90 <etharp_find_entry+0x2d4>)
 8014a18:	4613      	mov	r3, r2
 8014a1a:	005b      	lsls	r3, r3, #1
 8014a1c:	4413      	add	r3, r2
 8014a1e:	00db      	lsls	r3, r3, #3
 8014a20:	440b      	add	r3, r1
 8014a22:	3314      	adds	r3, #20
 8014a24:	781b      	ldrb	r3, [r3, #0]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d006      	beq.n	8014a38 <etharp_find_entry+0x27c>
 8014a2a:	4b1a      	ldr	r3, [pc, #104]	; (8014a94 <etharp_find_entry+0x2d8>)
 8014a2c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014a30:	491d      	ldr	r1, [pc, #116]	; (8014aa8 <etharp_find_entry+0x2ec>)
 8014a32:	481a      	ldr	r0, [pc, #104]	; (8014a9c <etharp_find_entry+0x2e0>)
 8014a34:	f002 fdb4 	bl	80175a0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d00b      	beq.n	8014a56 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014a3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	6819      	ldr	r1, [r3, #0]
 8014a46:	4812      	ldr	r0, [pc, #72]	; (8014a90 <etharp_find_entry+0x2d4>)
 8014a48:	4613      	mov	r3, r2
 8014a4a:	005b      	lsls	r3, r3, #1
 8014a4c:	4413      	add	r3, r2
 8014a4e:	00db      	lsls	r3, r3, #3
 8014a50:	4403      	add	r3, r0
 8014a52:	3304      	adds	r3, #4
 8014a54:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014a56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a5a:	490d      	ldr	r1, [pc, #52]	; (8014a90 <etharp_find_entry+0x2d4>)
 8014a5c:	4613      	mov	r3, r2
 8014a5e:	005b      	lsls	r3, r3, #1
 8014a60:	4413      	add	r3, r2
 8014a62:	00db      	lsls	r3, r3, #3
 8014a64:	440b      	add	r3, r1
 8014a66:	3312      	adds	r3, #18
 8014a68:	2200      	movs	r2, #0
 8014a6a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014a6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a70:	4907      	ldr	r1, [pc, #28]	; (8014a90 <etharp_find_entry+0x2d4>)
 8014a72:	4613      	mov	r3, r2
 8014a74:	005b      	lsls	r3, r3, #1
 8014a76:	4413      	add	r3, r2
 8014a78:	00db      	lsls	r3, r3, #3
 8014a7a:	440b      	add	r3, r1
 8014a7c:	3308      	adds	r3, #8
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014a82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014a86:	4618      	mov	r0, r3
 8014a88:	3728      	adds	r7, #40	; 0x28
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd80      	pop	{r7, pc}
 8014a8e:	bf00      	nop
 8014a90:	20001260 	.word	0x20001260
 8014a94:	0801f200 	.word	0x0801f200
 8014a98:	0801f238 	.word	0x0801f238
 8014a9c:	0801f278 	.word	0x0801f278
 8014aa0:	0801f2a0 	.word	0x0801f2a0
 8014aa4:	0801f2b8 	.word	0x0801f2b8
 8014aa8:	0801f2cc 	.word	0x0801f2cc

08014aac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014aac:	b580      	push	{r7, lr}
 8014aae:	b088      	sub	sp, #32
 8014ab0:	af02      	add	r7, sp, #8
 8014ab2:	60f8      	str	r0, [r7, #12]
 8014ab4:	60b9      	str	r1, [r7, #8]
 8014ab6:	607a      	str	r2, [r7, #4]
 8014ab8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014ac0:	2b06      	cmp	r3, #6
 8014ac2:	d006      	beq.n	8014ad2 <etharp_update_arp_entry+0x26>
 8014ac4:	4b48      	ldr	r3, [pc, #288]	; (8014be8 <etharp_update_arp_entry+0x13c>)
 8014ac6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014aca:	4948      	ldr	r1, [pc, #288]	; (8014bec <etharp_update_arp_entry+0x140>)
 8014acc:	4848      	ldr	r0, [pc, #288]	; (8014bf0 <etharp_update_arp_entry+0x144>)
 8014ace:	f002 fd67 	bl	80175a0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d012      	beq.n	8014afe <etharp_update_arp_entry+0x52>
 8014ad8:	68bb      	ldr	r3, [r7, #8]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00e      	beq.n	8014afe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	68f9      	ldr	r1, [r7, #12]
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	f001 f937 	bl	8015d5a <ip4_addr_isbroadcast_u32>
 8014aec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d105      	bne.n	8014afe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014afa:	2be0      	cmp	r3, #224	; 0xe0
 8014afc:	d102      	bne.n	8014b04 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014afe:	f06f 030f 	mvn.w	r3, #15
 8014b02:	e06c      	b.n	8014bde <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014b04:	78fb      	ldrb	r3, [r7, #3]
 8014b06:	68fa      	ldr	r2, [r7, #12]
 8014b08:	4619      	mov	r1, r3
 8014b0a:	68b8      	ldr	r0, [r7, #8]
 8014b0c:	f7ff fe56 	bl	80147bc <etharp_find_entry>
 8014b10:	4603      	mov	r3, r0
 8014b12:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014b14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	da02      	bge.n	8014b22 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014b1c:	8afb      	ldrh	r3, [r7, #22]
 8014b1e:	b25b      	sxtb	r3, r3
 8014b20:	e05d      	b.n	8014bde <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014b22:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b26:	4933      	ldr	r1, [pc, #204]	; (8014bf4 <etharp_update_arp_entry+0x148>)
 8014b28:	4613      	mov	r3, r2
 8014b2a:	005b      	lsls	r3, r3, #1
 8014b2c:	4413      	add	r3, r2
 8014b2e:	00db      	lsls	r3, r3, #3
 8014b30:	440b      	add	r3, r1
 8014b32:	3314      	adds	r3, #20
 8014b34:	2202      	movs	r2, #2
 8014b36:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014b38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b3c:	492d      	ldr	r1, [pc, #180]	; (8014bf4 <etharp_update_arp_entry+0x148>)
 8014b3e:	4613      	mov	r3, r2
 8014b40:	005b      	lsls	r3, r3, #1
 8014b42:	4413      	add	r3, r2
 8014b44:	00db      	lsls	r3, r3, #3
 8014b46:	440b      	add	r3, r1
 8014b48:	3308      	adds	r3, #8
 8014b4a:	68fa      	ldr	r2, [r7, #12]
 8014b4c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014b4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b52:	4613      	mov	r3, r2
 8014b54:	005b      	lsls	r3, r3, #1
 8014b56:	4413      	add	r3, r2
 8014b58:	00db      	lsls	r3, r3, #3
 8014b5a:	3308      	adds	r3, #8
 8014b5c:	4a25      	ldr	r2, [pc, #148]	; (8014bf4 <etharp_update_arp_entry+0x148>)
 8014b5e:	4413      	add	r3, r2
 8014b60:	3304      	adds	r3, #4
 8014b62:	2206      	movs	r2, #6
 8014b64:	6879      	ldr	r1, [r7, #4]
 8014b66:	4618      	mov	r0, r3
 8014b68:	f002 f880 	bl	8016c6c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014b6c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b70:	4920      	ldr	r1, [pc, #128]	; (8014bf4 <etharp_update_arp_entry+0x148>)
 8014b72:	4613      	mov	r3, r2
 8014b74:	005b      	lsls	r3, r3, #1
 8014b76:	4413      	add	r3, r2
 8014b78:	00db      	lsls	r3, r3, #3
 8014b7a:	440b      	add	r3, r1
 8014b7c:	3312      	adds	r3, #18
 8014b7e:	2200      	movs	r2, #0
 8014b80:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014b82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b86:	491b      	ldr	r1, [pc, #108]	; (8014bf4 <etharp_update_arp_entry+0x148>)
 8014b88:	4613      	mov	r3, r2
 8014b8a:	005b      	lsls	r3, r3, #1
 8014b8c:	4413      	add	r3, r2
 8014b8e:	00db      	lsls	r3, r3, #3
 8014b90:	440b      	add	r3, r1
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d021      	beq.n	8014bdc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014b98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b9c:	4915      	ldr	r1, [pc, #84]	; (8014bf4 <etharp_update_arp_entry+0x148>)
 8014b9e:	4613      	mov	r3, r2
 8014ba0:	005b      	lsls	r3, r3, #1
 8014ba2:	4413      	add	r3, r2
 8014ba4:	00db      	lsls	r3, r3, #3
 8014ba6:	440b      	add	r3, r1
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014bac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bb0:	4910      	ldr	r1, [pc, #64]	; (8014bf4 <etharp_update_arp_entry+0x148>)
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	005b      	lsls	r3, r3, #1
 8014bb6:	4413      	add	r3, r2
 8014bb8:	00db      	lsls	r3, r3, #3
 8014bba:	440b      	add	r3, r1
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014bc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014bca:	9300      	str	r3, [sp, #0]
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6939      	ldr	r1, [r7, #16]
 8014bd0:	68f8      	ldr	r0, [r7, #12]
 8014bd2:	f001 ffc9 	bl	8016b68 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014bd6:	6938      	ldr	r0, [r7, #16]
 8014bd8:	f7f6 fcea 	bl	800b5b0 <pbuf_free>
  }
  return ERR_OK;
 8014bdc:	2300      	movs	r3, #0
}
 8014bde:	4618      	mov	r0, r3
 8014be0:	3718      	adds	r7, #24
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}
 8014be6:	bf00      	nop
 8014be8:	0801f200 	.word	0x0801f200
 8014bec:	0801f2f8 	.word	0x0801f2f8
 8014bf0:	0801f278 	.word	0x0801f278
 8014bf4:	20001260 	.word	0x20001260

08014bf8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c00:	2300      	movs	r3, #0
 8014c02:	60fb      	str	r3, [r7, #12]
 8014c04:	e01e      	b.n	8014c44 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014c06:	4913      	ldr	r1, [pc, #76]	; (8014c54 <etharp_cleanup_netif+0x5c>)
 8014c08:	68fa      	ldr	r2, [r7, #12]
 8014c0a:	4613      	mov	r3, r2
 8014c0c:	005b      	lsls	r3, r3, #1
 8014c0e:	4413      	add	r3, r2
 8014c10:	00db      	lsls	r3, r3, #3
 8014c12:	440b      	add	r3, r1
 8014c14:	3314      	adds	r3, #20
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014c1a:	7afb      	ldrb	r3, [r7, #11]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d00e      	beq.n	8014c3e <etharp_cleanup_netif+0x46>
 8014c20:	490c      	ldr	r1, [pc, #48]	; (8014c54 <etharp_cleanup_netif+0x5c>)
 8014c22:	68fa      	ldr	r2, [r7, #12]
 8014c24:	4613      	mov	r3, r2
 8014c26:	005b      	lsls	r3, r3, #1
 8014c28:	4413      	add	r3, r2
 8014c2a:	00db      	lsls	r3, r3, #3
 8014c2c:	440b      	add	r3, r1
 8014c2e:	3308      	adds	r3, #8
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	687a      	ldr	r2, [r7, #4]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d102      	bne.n	8014c3e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014c38:	68f8      	ldr	r0, [r7, #12]
 8014c3a:	f7ff fce5 	bl	8014608 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	3301      	adds	r3, #1
 8014c42:	60fb      	str	r3, [r7, #12]
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	2b09      	cmp	r3, #9
 8014c48:	dddd      	ble.n	8014c06 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014c4a:	bf00      	nop
 8014c4c:	bf00      	nop
 8014c4e:	3710      	adds	r7, #16
 8014c50:	46bd      	mov	sp, r7
 8014c52:	bd80      	pop	{r7, pc}
 8014c54:	20001260 	.word	0x20001260

08014c58 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014c58:	b5b0      	push	{r4, r5, r7, lr}
 8014c5a:	b08a      	sub	sp, #40	; 0x28
 8014c5c:	af04      	add	r7, sp, #16
 8014c5e:	6078      	str	r0, [r7, #4]
 8014c60:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014c62:	683b      	ldr	r3, [r7, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d107      	bne.n	8014c78 <etharp_input+0x20>
 8014c68:	4b3f      	ldr	r3, [pc, #252]	; (8014d68 <etharp_input+0x110>)
 8014c6a:	f240 228a 	movw	r2, #650	; 0x28a
 8014c6e:	493f      	ldr	r1, [pc, #252]	; (8014d6c <etharp_input+0x114>)
 8014c70:	483f      	ldr	r0, [pc, #252]	; (8014d70 <etharp_input+0x118>)
 8014c72:	f002 fc95 	bl	80175a0 <iprintf>
 8014c76:	e074      	b.n	8014d62 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	685b      	ldr	r3, [r3, #4]
 8014c7c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014c7e:	693b      	ldr	r3, [r7, #16]
 8014c80:	881b      	ldrh	r3, [r3, #0]
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c88:	d10c      	bne.n	8014ca4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014c8a:	693b      	ldr	r3, [r7, #16]
 8014c8c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014c8e:	2b06      	cmp	r3, #6
 8014c90:	d108      	bne.n	8014ca4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014c96:	2b04      	cmp	r3, #4
 8014c98:	d104      	bne.n	8014ca4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	885b      	ldrh	r3, [r3, #2]
 8014c9e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014ca0:	2b08      	cmp	r3, #8
 8014ca2:	d003      	beq.n	8014cac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f7f6 fc83 	bl	800b5b0 <pbuf_free>
    return;
 8014caa:	e05a      	b.n	8014d62 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	330e      	adds	r3, #14
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	3318      	adds	r3, #24
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014cbc:	683b      	ldr	r3, [r7, #0]
 8014cbe:	3304      	adds	r3, #4
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d102      	bne.n	8014ccc <etharp_input+0x74>
    for_us = 0;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	75fb      	strb	r3, [r7, #23]
 8014cca:	e009      	b.n	8014ce0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014ccc:	68ba      	ldr	r2, [r7, #8]
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	3304      	adds	r3, #4
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	429a      	cmp	r2, r3
 8014cd6:	bf0c      	ite	eq
 8014cd8:	2301      	moveq	r3, #1
 8014cda:	2300      	movne	r3, #0
 8014cdc:	b2db      	uxtb	r3, r3
 8014cde:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014ce0:	693b      	ldr	r3, [r7, #16]
 8014ce2:	f103 0208 	add.w	r2, r3, #8
 8014ce6:	7dfb      	ldrb	r3, [r7, #23]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d001      	beq.n	8014cf0 <etharp_input+0x98>
 8014cec:	2301      	movs	r3, #1
 8014cee:	e000      	b.n	8014cf2 <etharp_input+0x9a>
 8014cf0:	2302      	movs	r3, #2
 8014cf2:	f107 010c 	add.w	r1, r7, #12
 8014cf6:	6838      	ldr	r0, [r7, #0]
 8014cf8:	f7ff fed8 	bl	8014aac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014cfc:	693b      	ldr	r3, [r7, #16]
 8014cfe:	88db      	ldrh	r3, [r3, #6]
 8014d00:	b29b      	uxth	r3, r3
 8014d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d06:	d003      	beq.n	8014d10 <etharp_input+0xb8>
 8014d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d0c:	d01e      	beq.n	8014d4c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014d0e:	e025      	b.n	8014d5c <etharp_input+0x104>
      if (for_us) {
 8014d10:	7dfb      	ldrb	r3, [r7, #23]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d021      	beq.n	8014d5a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014d2c:	693a      	ldr	r2, [r7, #16]
 8014d2e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014d30:	2102      	movs	r1, #2
 8014d32:	9103      	str	r1, [sp, #12]
 8014d34:	f107 010c 	add.w	r1, r7, #12
 8014d38:	9102      	str	r1, [sp, #8]
 8014d3a:	9201      	str	r2, [sp, #4]
 8014d3c:	9300      	str	r3, [sp, #0]
 8014d3e:	462b      	mov	r3, r5
 8014d40:	4622      	mov	r2, r4
 8014d42:	4601      	mov	r1, r0
 8014d44:	6838      	ldr	r0, [r7, #0]
 8014d46:	f000 faef 	bl	8015328 <etharp_raw>
      break;
 8014d4a:	e006      	b.n	8014d5a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014d4c:	f107 030c 	add.w	r3, r7, #12
 8014d50:	4619      	mov	r1, r3
 8014d52:	6838      	ldr	r0, [r7, #0]
 8014d54:	f7fe f9fc 	bl	8013150 <dhcp_arp_reply>
      break;
 8014d58:	e000      	b.n	8014d5c <etharp_input+0x104>
      break;
 8014d5a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f7f6 fc27 	bl	800b5b0 <pbuf_free>
}
 8014d62:	3718      	adds	r7, #24
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bdb0      	pop	{r4, r5, r7, pc}
 8014d68:	0801f200 	.word	0x0801f200
 8014d6c:	0801f350 	.word	0x0801f350
 8014d70:	0801f278 	.word	0x0801f278

08014d74 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b086      	sub	sp, #24
 8014d78:	af02      	add	r7, sp, #8
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	4613      	mov	r3, r2
 8014d80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014d82:	79fa      	ldrb	r2, [r7, #7]
 8014d84:	4944      	ldr	r1, [pc, #272]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014d86:	4613      	mov	r3, r2
 8014d88:	005b      	lsls	r3, r3, #1
 8014d8a:	4413      	add	r3, r2
 8014d8c:	00db      	lsls	r3, r3, #3
 8014d8e:	440b      	add	r3, r1
 8014d90:	3314      	adds	r3, #20
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	2b01      	cmp	r3, #1
 8014d96:	d806      	bhi.n	8014da6 <etharp_output_to_arp_index+0x32>
 8014d98:	4b40      	ldr	r3, [pc, #256]	; (8014e9c <etharp_output_to_arp_index+0x128>)
 8014d9a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014d9e:	4940      	ldr	r1, [pc, #256]	; (8014ea0 <etharp_output_to_arp_index+0x12c>)
 8014da0:	4840      	ldr	r0, [pc, #256]	; (8014ea4 <etharp_output_to_arp_index+0x130>)
 8014da2:	f002 fbfd 	bl	80175a0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014da6:	79fa      	ldrb	r2, [r7, #7]
 8014da8:	493b      	ldr	r1, [pc, #236]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014daa:	4613      	mov	r3, r2
 8014dac:	005b      	lsls	r3, r3, #1
 8014dae:	4413      	add	r3, r2
 8014db0:	00db      	lsls	r3, r3, #3
 8014db2:	440b      	add	r3, r1
 8014db4:	3314      	adds	r3, #20
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	2b02      	cmp	r3, #2
 8014dba:	d153      	bne.n	8014e64 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014dbc:	79fa      	ldrb	r2, [r7, #7]
 8014dbe:	4936      	ldr	r1, [pc, #216]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014dc0:	4613      	mov	r3, r2
 8014dc2:	005b      	lsls	r3, r3, #1
 8014dc4:	4413      	add	r3, r2
 8014dc6:	00db      	lsls	r3, r3, #3
 8014dc8:	440b      	add	r3, r1
 8014dca:	3312      	adds	r3, #18
 8014dcc:	881b      	ldrh	r3, [r3, #0]
 8014dce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014dd2:	d919      	bls.n	8014e08 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014dd4:	79fa      	ldrb	r2, [r7, #7]
 8014dd6:	4613      	mov	r3, r2
 8014dd8:	005b      	lsls	r3, r3, #1
 8014dda:	4413      	add	r3, r2
 8014ddc:	00db      	lsls	r3, r3, #3
 8014dde:	4a2e      	ldr	r2, [pc, #184]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014de0:	4413      	add	r3, r2
 8014de2:	3304      	adds	r3, #4
 8014de4:	4619      	mov	r1, r3
 8014de6:	68f8      	ldr	r0, [r7, #12]
 8014de8:	f000 fb4c 	bl	8015484 <etharp_request>
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d138      	bne.n	8014e64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014df2:	79fa      	ldrb	r2, [r7, #7]
 8014df4:	4928      	ldr	r1, [pc, #160]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014df6:	4613      	mov	r3, r2
 8014df8:	005b      	lsls	r3, r3, #1
 8014dfa:	4413      	add	r3, r2
 8014dfc:	00db      	lsls	r3, r3, #3
 8014dfe:	440b      	add	r3, r1
 8014e00:	3314      	adds	r3, #20
 8014e02:	2203      	movs	r2, #3
 8014e04:	701a      	strb	r2, [r3, #0]
 8014e06:	e02d      	b.n	8014e64 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014e08:	79fa      	ldrb	r2, [r7, #7]
 8014e0a:	4923      	ldr	r1, [pc, #140]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	005b      	lsls	r3, r3, #1
 8014e10:	4413      	add	r3, r2
 8014e12:	00db      	lsls	r3, r3, #3
 8014e14:	440b      	add	r3, r1
 8014e16:	3312      	adds	r3, #18
 8014e18:	881b      	ldrh	r3, [r3, #0]
 8014e1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014e1e:	d321      	bcc.n	8014e64 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014e20:	79fa      	ldrb	r2, [r7, #7]
 8014e22:	4613      	mov	r3, r2
 8014e24:	005b      	lsls	r3, r3, #1
 8014e26:	4413      	add	r3, r2
 8014e28:	00db      	lsls	r3, r3, #3
 8014e2a:	4a1b      	ldr	r2, [pc, #108]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014e2c:	4413      	add	r3, r2
 8014e2e:	1d19      	adds	r1, r3, #4
 8014e30:	79fa      	ldrb	r2, [r7, #7]
 8014e32:	4613      	mov	r3, r2
 8014e34:	005b      	lsls	r3, r3, #1
 8014e36:	4413      	add	r3, r2
 8014e38:	00db      	lsls	r3, r3, #3
 8014e3a:	3308      	adds	r3, #8
 8014e3c:	4a16      	ldr	r2, [pc, #88]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014e3e:	4413      	add	r3, r2
 8014e40:	3304      	adds	r3, #4
 8014e42:	461a      	mov	r2, r3
 8014e44:	68f8      	ldr	r0, [r7, #12]
 8014e46:	f000 fafb 	bl	8015440 <etharp_request_dst>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d109      	bne.n	8014e64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014e50:	79fa      	ldrb	r2, [r7, #7]
 8014e52:	4911      	ldr	r1, [pc, #68]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014e54:	4613      	mov	r3, r2
 8014e56:	005b      	lsls	r3, r3, #1
 8014e58:	4413      	add	r3, r2
 8014e5a:	00db      	lsls	r3, r3, #3
 8014e5c:	440b      	add	r3, r1
 8014e5e:	3314      	adds	r3, #20
 8014e60:	2203      	movs	r2, #3
 8014e62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014e6a:	79fa      	ldrb	r2, [r7, #7]
 8014e6c:	4613      	mov	r3, r2
 8014e6e:	005b      	lsls	r3, r3, #1
 8014e70:	4413      	add	r3, r2
 8014e72:	00db      	lsls	r3, r3, #3
 8014e74:	3308      	adds	r3, #8
 8014e76:	4a08      	ldr	r2, [pc, #32]	; (8014e98 <etharp_output_to_arp_index+0x124>)
 8014e78:	4413      	add	r3, r2
 8014e7a:	3304      	adds	r3, #4
 8014e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e80:	9200      	str	r2, [sp, #0]
 8014e82:	460a      	mov	r2, r1
 8014e84:	68b9      	ldr	r1, [r7, #8]
 8014e86:	68f8      	ldr	r0, [r7, #12]
 8014e88:	f001 fe6e 	bl	8016b68 <ethernet_output>
 8014e8c:	4603      	mov	r3, r0
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3710      	adds	r7, #16
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}
 8014e96:	bf00      	nop
 8014e98:	20001260 	.word	0x20001260
 8014e9c:	0801f200 	.word	0x0801f200
 8014ea0:	0801f370 	.word	0x0801f370
 8014ea4:	0801f278 	.word	0x0801f278

08014ea8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b08a      	sub	sp, #40	; 0x28
 8014eac:	af02      	add	r7, sp, #8
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d106      	bne.n	8014ecc <etharp_output+0x24>
 8014ebe:	4b73      	ldr	r3, [pc, #460]	; (801508c <etharp_output+0x1e4>)
 8014ec0:	f240 321e 	movw	r2, #798	; 0x31e
 8014ec4:	4972      	ldr	r1, [pc, #456]	; (8015090 <etharp_output+0x1e8>)
 8014ec6:	4873      	ldr	r0, [pc, #460]	; (8015094 <etharp_output+0x1ec>)
 8014ec8:	f002 fb6a 	bl	80175a0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d106      	bne.n	8014ee0 <etharp_output+0x38>
 8014ed2:	4b6e      	ldr	r3, [pc, #440]	; (801508c <etharp_output+0x1e4>)
 8014ed4:	f240 321f 	movw	r2, #799	; 0x31f
 8014ed8:	496f      	ldr	r1, [pc, #444]	; (8015098 <etharp_output+0x1f0>)
 8014eda:	486e      	ldr	r0, [pc, #440]	; (8015094 <etharp_output+0x1ec>)
 8014edc:	f002 fb60 	bl	80175a0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d106      	bne.n	8014ef4 <etharp_output+0x4c>
 8014ee6:	4b69      	ldr	r3, [pc, #420]	; (801508c <etharp_output+0x1e4>)
 8014ee8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014eec:	496b      	ldr	r1, [pc, #428]	; (801509c <etharp_output+0x1f4>)
 8014eee:	4869      	ldr	r0, [pc, #420]	; (8015094 <etharp_output+0x1ec>)
 8014ef0:	f002 fb56 	bl	80175a0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	68f9      	ldr	r1, [r7, #12]
 8014efa:	4618      	mov	r0, r3
 8014efc:	f000 ff2d 	bl	8015d5a <ip4_addr_isbroadcast_u32>
 8014f00:	4603      	mov	r3, r0
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d002      	beq.n	8014f0c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014f06:	4b66      	ldr	r3, [pc, #408]	; (80150a0 <etharp_output+0x1f8>)
 8014f08:	61fb      	str	r3, [r7, #28]
 8014f0a:	e0af      	b.n	801506c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f14:	2be0      	cmp	r3, #224	; 0xe0
 8014f16:	d118      	bne.n	8014f4a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014f18:	2301      	movs	r3, #1
 8014f1a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014f20:	235e      	movs	r3, #94	; 0x5e
 8014f22:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	3301      	adds	r3, #1
 8014f28:	781b      	ldrb	r3, [r3, #0]
 8014f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f2e:	b2db      	uxtb	r3, r3
 8014f30:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	3302      	adds	r3, #2
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	3303      	adds	r3, #3
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014f42:	f107 0310 	add.w	r3, r7, #16
 8014f46:	61fb      	str	r3, [r7, #28]
 8014f48:	e090      	b.n	801506c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	681a      	ldr	r2, [r3, #0]
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	3304      	adds	r3, #4
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	405a      	eors	r2, r3
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	3308      	adds	r3, #8
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	4013      	ands	r3, r2
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d012      	beq.n	8014f88 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014f68:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	d00b      	beq.n	8014f88 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	330c      	adds	r3, #12
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d003      	beq.n	8014f82 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	330c      	adds	r3, #12
 8014f7e:	61bb      	str	r3, [r7, #24]
 8014f80:	e002      	b.n	8014f88 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014f82:	f06f 0303 	mvn.w	r3, #3
 8014f86:	e07d      	b.n	8015084 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014f88:	4b46      	ldr	r3, [pc, #280]	; (80150a4 <etharp_output+0x1fc>)
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	4619      	mov	r1, r3
 8014f8e:	4a46      	ldr	r2, [pc, #280]	; (80150a8 <etharp_output+0x200>)
 8014f90:	460b      	mov	r3, r1
 8014f92:	005b      	lsls	r3, r3, #1
 8014f94:	440b      	add	r3, r1
 8014f96:	00db      	lsls	r3, r3, #3
 8014f98:	4413      	add	r3, r2
 8014f9a:	3314      	adds	r3, #20
 8014f9c:	781b      	ldrb	r3, [r3, #0]
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d925      	bls.n	8014fee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014fa2:	4b40      	ldr	r3, [pc, #256]	; (80150a4 <etharp_output+0x1fc>)
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	4619      	mov	r1, r3
 8014fa8:	4a3f      	ldr	r2, [pc, #252]	; (80150a8 <etharp_output+0x200>)
 8014faa:	460b      	mov	r3, r1
 8014fac:	005b      	lsls	r3, r3, #1
 8014fae:	440b      	add	r3, r1
 8014fb0:	00db      	lsls	r3, r3, #3
 8014fb2:	4413      	add	r3, r2
 8014fb4:	3308      	adds	r3, #8
 8014fb6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014fb8:	68fa      	ldr	r2, [r7, #12]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d117      	bne.n	8014fee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014fbe:	69bb      	ldr	r3, [r7, #24]
 8014fc0:	681a      	ldr	r2, [r3, #0]
 8014fc2:	4b38      	ldr	r3, [pc, #224]	; (80150a4 <etharp_output+0x1fc>)
 8014fc4:	781b      	ldrb	r3, [r3, #0]
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	4937      	ldr	r1, [pc, #220]	; (80150a8 <etharp_output+0x200>)
 8014fca:	4603      	mov	r3, r0
 8014fcc:	005b      	lsls	r3, r3, #1
 8014fce:	4403      	add	r3, r0
 8014fd0:	00db      	lsls	r3, r3, #3
 8014fd2:	440b      	add	r3, r1
 8014fd4:	3304      	adds	r3, #4
 8014fd6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d108      	bne.n	8014fee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014fdc:	4b31      	ldr	r3, [pc, #196]	; (80150a4 <etharp_output+0x1fc>)
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	461a      	mov	r2, r3
 8014fe2:	68b9      	ldr	r1, [r7, #8]
 8014fe4:	68f8      	ldr	r0, [r7, #12]
 8014fe6:	f7ff fec5 	bl	8014d74 <etharp_output_to_arp_index>
 8014fea:	4603      	mov	r3, r0
 8014fec:	e04a      	b.n	8015084 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014fee:	2300      	movs	r3, #0
 8014ff0:	75fb      	strb	r3, [r7, #23]
 8014ff2:	e031      	b.n	8015058 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ff4:	7dfa      	ldrb	r2, [r7, #23]
 8014ff6:	492c      	ldr	r1, [pc, #176]	; (80150a8 <etharp_output+0x200>)
 8014ff8:	4613      	mov	r3, r2
 8014ffa:	005b      	lsls	r3, r3, #1
 8014ffc:	4413      	add	r3, r2
 8014ffe:	00db      	lsls	r3, r3, #3
 8015000:	440b      	add	r3, r1
 8015002:	3314      	adds	r3, #20
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	2b01      	cmp	r3, #1
 8015008:	d923      	bls.n	8015052 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801500a:	7dfa      	ldrb	r2, [r7, #23]
 801500c:	4926      	ldr	r1, [pc, #152]	; (80150a8 <etharp_output+0x200>)
 801500e:	4613      	mov	r3, r2
 8015010:	005b      	lsls	r3, r3, #1
 8015012:	4413      	add	r3, r2
 8015014:	00db      	lsls	r3, r3, #3
 8015016:	440b      	add	r3, r1
 8015018:	3308      	adds	r3, #8
 801501a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801501c:	68fa      	ldr	r2, [r7, #12]
 801501e:	429a      	cmp	r2, r3
 8015020:	d117      	bne.n	8015052 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015022:	69bb      	ldr	r3, [r7, #24]
 8015024:	6819      	ldr	r1, [r3, #0]
 8015026:	7dfa      	ldrb	r2, [r7, #23]
 8015028:	481f      	ldr	r0, [pc, #124]	; (80150a8 <etharp_output+0x200>)
 801502a:	4613      	mov	r3, r2
 801502c:	005b      	lsls	r3, r3, #1
 801502e:	4413      	add	r3, r2
 8015030:	00db      	lsls	r3, r3, #3
 8015032:	4403      	add	r3, r0
 8015034:	3304      	adds	r3, #4
 8015036:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015038:	4299      	cmp	r1, r3
 801503a:	d10a      	bne.n	8015052 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801503c:	4a19      	ldr	r2, [pc, #100]	; (80150a4 <etharp_output+0x1fc>)
 801503e:	7dfb      	ldrb	r3, [r7, #23]
 8015040:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015042:	7dfb      	ldrb	r3, [r7, #23]
 8015044:	461a      	mov	r2, r3
 8015046:	68b9      	ldr	r1, [r7, #8]
 8015048:	68f8      	ldr	r0, [r7, #12]
 801504a:	f7ff fe93 	bl	8014d74 <etharp_output_to_arp_index>
 801504e:	4603      	mov	r3, r0
 8015050:	e018      	b.n	8015084 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015052:	7dfb      	ldrb	r3, [r7, #23]
 8015054:	3301      	adds	r3, #1
 8015056:	75fb      	strb	r3, [r7, #23]
 8015058:	7dfb      	ldrb	r3, [r7, #23]
 801505a:	2b09      	cmp	r3, #9
 801505c:	d9ca      	bls.n	8014ff4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801505e:	68ba      	ldr	r2, [r7, #8]
 8015060:	69b9      	ldr	r1, [r7, #24]
 8015062:	68f8      	ldr	r0, [r7, #12]
 8015064:	f000 f822 	bl	80150ac <etharp_query>
 8015068:	4603      	mov	r3, r0
 801506a:	e00b      	b.n	8015084 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015076:	9300      	str	r3, [sp, #0]
 8015078:	69fb      	ldr	r3, [r7, #28]
 801507a:	68b9      	ldr	r1, [r7, #8]
 801507c:	68f8      	ldr	r0, [r7, #12]
 801507e:	f001 fd73 	bl	8016b68 <ethernet_output>
 8015082:	4603      	mov	r3, r0
}
 8015084:	4618      	mov	r0, r3
 8015086:	3720      	adds	r7, #32
 8015088:	46bd      	mov	sp, r7
 801508a:	bd80      	pop	{r7, pc}
 801508c:	0801f200 	.word	0x0801f200
 8015090:	0801f350 	.word	0x0801f350
 8015094:	0801f278 	.word	0x0801f278
 8015098:	0801f3a0 	.word	0x0801f3a0
 801509c:	0801f340 	.word	0x0801f340
 80150a0:	08032ae4 	.word	0x08032ae4
 80150a4:	20001350 	.word	0x20001350
 80150a8:	20001260 	.word	0x20001260

080150ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b08c      	sub	sp, #48	; 0x30
 80150b0:	af02      	add	r7, sp, #8
 80150b2:	60f8      	str	r0, [r7, #12]
 80150b4:	60b9      	str	r1, [r7, #8]
 80150b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	332a      	adds	r3, #42	; 0x2a
 80150bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80150be:	23ff      	movs	r3, #255	; 0xff
 80150c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80150c4:	2300      	movs	r3, #0
 80150c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	68f9      	ldr	r1, [r7, #12]
 80150ce:	4618      	mov	r0, r3
 80150d0:	f000 fe43 	bl	8015d5a <ip4_addr_isbroadcast_u32>
 80150d4:	4603      	mov	r3, r0
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d10c      	bne.n	80150f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80150e2:	2be0      	cmp	r3, #224	; 0xe0
 80150e4:	d006      	beq.n	80150f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d003      	beq.n	80150f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d102      	bne.n	80150fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80150f4:	f06f 030f 	mvn.w	r3, #15
 80150f8:	e101      	b.n	80152fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80150fa:	68fa      	ldr	r2, [r7, #12]
 80150fc:	2101      	movs	r1, #1
 80150fe:	68b8      	ldr	r0, [r7, #8]
 8015100:	f7ff fb5c 	bl	80147bc <etharp_find_entry>
 8015104:	4603      	mov	r3, r0
 8015106:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015108:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801510c:	2b00      	cmp	r3, #0
 801510e:	da02      	bge.n	8015116 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015110:	8a7b      	ldrh	r3, [r7, #18]
 8015112:	b25b      	sxtb	r3, r3
 8015114:	e0f3      	b.n	80152fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015116:	8a7b      	ldrh	r3, [r7, #18]
 8015118:	2b7e      	cmp	r3, #126	; 0x7e
 801511a:	d906      	bls.n	801512a <etharp_query+0x7e>
 801511c:	4b7a      	ldr	r3, [pc, #488]	; (8015308 <etharp_query+0x25c>)
 801511e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015122:	497a      	ldr	r1, [pc, #488]	; (801530c <etharp_query+0x260>)
 8015124:	487a      	ldr	r0, [pc, #488]	; (8015310 <etharp_query+0x264>)
 8015126:	f002 fa3b 	bl	80175a0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801512a:	8a7b      	ldrh	r3, [r7, #18]
 801512c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801512e:	7c7a      	ldrb	r2, [r7, #17]
 8015130:	4978      	ldr	r1, [pc, #480]	; (8015314 <etharp_query+0x268>)
 8015132:	4613      	mov	r3, r2
 8015134:	005b      	lsls	r3, r3, #1
 8015136:	4413      	add	r3, r2
 8015138:	00db      	lsls	r3, r3, #3
 801513a:	440b      	add	r3, r1
 801513c:	3314      	adds	r3, #20
 801513e:	781b      	ldrb	r3, [r3, #0]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d115      	bne.n	8015170 <etharp_query+0xc4>
    is_new_entry = 1;
 8015144:	2301      	movs	r3, #1
 8015146:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015148:	7c7a      	ldrb	r2, [r7, #17]
 801514a:	4972      	ldr	r1, [pc, #456]	; (8015314 <etharp_query+0x268>)
 801514c:	4613      	mov	r3, r2
 801514e:	005b      	lsls	r3, r3, #1
 8015150:	4413      	add	r3, r2
 8015152:	00db      	lsls	r3, r3, #3
 8015154:	440b      	add	r3, r1
 8015156:	3314      	adds	r3, #20
 8015158:	2201      	movs	r2, #1
 801515a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801515c:	7c7a      	ldrb	r2, [r7, #17]
 801515e:	496d      	ldr	r1, [pc, #436]	; (8015314 <etharp_query+0x268>)
 8015160:	4613      	mov	r3, r2
 8015162:	005b      	lsls	r3, r3, #1
 8015164:	4413      	add	r3, r2
 8015166:	00db      	lsls	r3, r3, #3
 8015168:	440b      	add	r3, r1
 801516a:	3308      	adds	r3, #8
 801516c:	68fa      	ldr	r2, [r7, #12]
 801516e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015170:	7c7a      	ldrb	r2, [r7, #17]
 8015172:	4968      	ldr	r1, [pc, #416]	; (8015314 <etharp_query+0x268>)
 8015174:	4613      	mov	r3, r2
 8015176:	005b      	lsls	r3, r3, #1
 8015178:	4413      	add	r3, r2
 801517a:	00db      	lsls	r3, r3, #3
 801517c:	440b      	add	r3, r1
 801517e:	3314      	adds	r3, #20
 8015180:	781b      	ldrb	r3, [r3, #0]
 8015182:	2b01      	cmp	r3, #1
 8015184:	d011      	beq.n	80151aa <etharp_query+0xfe>
 8015186:	7c7a      	ldrb	r2, [r7, #17]
 8015188:	4962      	ldr	r1, [pc, #392]	; (8015314 <etharp_query+0x268>)
 801518a:	4613      	mov	r3, r2
 801518c:	005b      	lsls	r3, r3, #1
 801518e:	4413      	add	r3, r2
 8015190:	00db      	lsls	r3, r3, #3
 8015192:	440b      	add	r3, r1
 8015194:	3314      	adds	r3, #20
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	2b01      	cmp	r3, #1
 801519a:	d806      	bhi.n	80151aa <etharp_query+0xfe>
 801519c:	4b5a      	ldr	r3, [pc, #360]	; (8015308 <etharp_query+0x25c>)
 801519e:	f240 32cd 	movw	r2, #973	; 0x3cd
 80151a2:	495d      	ldr	r1, [pc, #372]	; (8015318 <etharp_query+0x26c>)
 80151a4:	485a      	ldr	r0, [pc, #360]	; (8015310 <etharp_query+0x264>)
 80151a6:	f002 f9fb 	bl	80175a0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80151aa:	6a3b      	ldr	r3, [r7, #32]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d102      	bne.n	80151b6 <etharp_query+0x10a>
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d10c      	bne.n	80151d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80151b6:	68b9      	ldr	r1, [r7, #8]
 80151b8:	68f8      	ldr	r0, [r7, #12]
 80151ba:	f000 f963 	bl	8015484 <etharp_request>
 80151be:	4603      	mov	r3, r0
 80151c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d102      	bne.n	80151d0 <etharp_query+0x124>
      return result;
 80151ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80151ce:	e096      	b.n	80152fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d106      	bne.n	80151e4 <etharp_query+0x138>
 80151d6:	4b4c      	ldr	r3, [pc, #304]	; (8015308 <etharp_query+0x25c>)
 80151d8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80151dc:	494f      	ldr	r1, [pc, #316]	; (801531c <etharp_query+0x270>)
 80151de:	484c      	ldr	r0, [pc, #304]	; (8015310 <etharp_query+0x264>)
 80151e0:	f002 f9de 	bl	80175a0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80151e4:	7c7a      	ldrb	r2, [r7, #17]
 80151e6:	494b      	ldr	r1, [pc, #300]	; (8015314 <etharp_query+0x268>)
 80151e8:	4613      	mov	r3, r2
 80151ea:	005b      	lsls	r3, r3, #1
 80151ec:	4413      	add	r3, r2
 80151ee:	00db      	lsls	r3, r3, #3
 80151f0:	440b      	add	r3, r1
 80151f2:	3314      	adds	r3, #20
 80151f4:	781b      	ldrb	r3, [r3, #0]
 80151f6:	2b01      	cmp	r3, #1
 80151f8:	d917      	bls.n	801522a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80151fa:	4a49      	ldr	r2, [pc, #292]	; (8015320 <etharp_query+0x274>)
 80151fc:	7c7b      	ldrb	r3, [r7, #17]
 80151fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015200:	7c7a      	ldrb	r2, [r7, #17]
 8015202:	4613      	mov	r3, r2
 8015204:	005b      	lsls	r3, r3, #1
 8015206:	4413      	add	r3, r2
 8015208:	00db      	lsls	r3, r3, #3
 801520a:	3308      	adds	r3, #8
 801520c:	4a41      	ldr	r2, [pc, #260]	; (8015314 <etharp_query+0x268>)
 801520e:	4413      	add	r3, r2
 8015210:	3304      	adds	r3, #4
 8015212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015216:	9200      	str	r2, [sp, #0]
 8015218:	697a      	ldr	r2, [r7, #20]
 801521a:	6879      	ldr	r1, [r7, #4]
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	f001 fca3 	bl	8016b68 <ethernet_output>
 8015222:	4603      	mov	r3, r0
 8015224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015228:	e067      	b.n	80152fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801522a:	7c7a      	ldrb	r2, [r7, #17]
 801522c:	4939      	ldr	r1, [pc, #228]	; (8015314 <etharp_query+0x268>)
 801522e:	4613      	mov	r3, r2
 8015230:	005b      	lsls	r3, r3, #1
 8015232:	4413      	add	r3, r2
 8015234:	00db      	lsls	r3, r3, #3
 8015236:	440b      	add	r3, r1
 8015238:	3314      	adds	r3, #20
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	2b01      	cmp	r3, #1
 801523e:	d15c      	bne.n	80152fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015240:	2300      	movs	r3, #0
 8015242:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015248:	e01c      	b.n	8015284 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801524a:	69fb      	ldr	r3, [r7, #28]
 801524c:	895a      	ldrh	r2, [r3, #10]
 801524e:	69fb      	ldr	r3, [r7, #28]
 8015250:	891b      	ldrh	r3, [r3, #8]
 8015252:	429a      	cmp	r2, r3
 8015254:	d10a      	bne.n	801526c <etharp_query+0x1c0>
 8015256:	69fb      	ldr	r3, [r7, #28]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d006      	beq.n	801526c <etharp_query+0x1c0>
 801525e:	4b2a      	ldr	r3, [pc, #168]	; (8015308 <etharp_query+0x25c>)
 8015260:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015264:	492f      	ldr	r1, [pc, #188]	; (8015324 <etharp_query+0x278>)
 8015266:	482a      	ldr	r0, [pc, #168]	; (8015310 <etharp_query+0x264>)
 8015268:	f002 f99a 	bl	80175a0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801526c:	69fb      	ldr	r3, [r7, #28]
 801526e:	7b1b      	ldrb	r3, [r3, #12]
 8015270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015274:	2b00      	cmp	r3, #0
 8015276:	d002      	beq.n	801527e <etharp_query+0x1d2>
        copy_needed = 1;
 8015278:	2301      	movs	r3, #1
 801527a:	61bb      	str	r3, [r7, #24]
        break;
 801527c:	e005      	b.n	801528a <etharp_query+0x1de>
      }
      p = p->next;
 801527e:	69fb      	ldr	r3, [r7, #28]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015284:	69fb      	ldr	r3, [r7, #28]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d1df      	bne.n	801524a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801528a:	69bb      	ldr	r3, [r7, #24]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d007      	beq.n	80152a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015296:	200e      	movs	r0, #14
 8015298:	f7f6 fbf6 	bl	800ba88 <pbuf_clone>
 801529c:	61f8      	str	r0, [r7, #28]
 801529e:	e004      	b.n	80152aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80152a4:	69f8      	ldr	r0, [r7, #28]
 80152a6:	f7f6 fa23 	bl	800b6f0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80152aa:	69fb      	ldr	r3, [r7, #28]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d021      	beq.n	80152f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80152b0:	7c7a      	ldrb	r2, [r7, #17]
 80152b2:	4918      	ldr	r1, [pc, #96]	; (8015314 <etharp_query+0x268>)
 80152b4:	4613      	mov	r3, r2
 80152b6:	005b      	lsls	r3, r3, #1
 80152b8:	4413      	add	r3, r2
 80152ba:	00db      	lsls	r3, r3, #3
 80152bc:	440b      	add	r3, r1
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d00a      	beq.n	80152da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80152c4:	7c7a      	ldrb	r2, [r7, #17]
 80152c6:	4913      	ldr	r1, [pc, #76]	; (8015314 <etharp_query+0x268>)
 80152c8:	4613      	mov	r3, r2
 80152ca:	005b      	lsls	r3, r3, #1
 80152cc:	4413      	add	r3, r2
 80152ce:	00db      	lsls	r3, r3, #3
 80152d0:	440b      	add	r3, r1
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7f6 f96b 	bl	800b5b0 <pbuf_free>
      }
      arp_table[i].q = p;
 80152da:	7c7a      	ldrb	r2, [r7, #17]
 80152dc:	490d      	ldr	r1, [pc, #52]	; (8015314 <etharp_query+0x268>)
 80152de:	4613      	mov	r3, r2
 80152e0:	005b      	lsls	r3, r3, #1
 80152e2:	4413      	add	r3, r2
 80152e4:	00db      	lsls	r3, r3, #3
 80152e6:	440b      	add	r3, r1
 80152e8:	69fa      	ldr	r2, [r7, #28]
 80152ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80152ec:	2300      	movs	r3, #0
 80152ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80152f2:	e002      	b.n	80152fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80152f4:	23ff      	movs	r3, #255	; 0xff
 80152f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80152fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3728      	adds	r7, #40	; 0x28
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop
 8015308:	0801f200 	.word	0x0801f200
 801530c:	0801f3ac 	.word	0x0801f3ac
 8015310:	0801f278 	.word	0x0801f278
 8015314:	20001260 	.word	0x20001260
 8015318:	0801f3bc 	.word	0x0801f3bc
 801531c:	0801f3a0 	.word	0x0801f3a0
 8015320:	20001350 	.word	0x20001350
 8015324:	0801f3e4 	.word	0x0801f3e4

08015328 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08a      	sub	sp, #40	; 0x28
 801532c:	af02      	add	r7, sp, #8
 801532e:	60f8      	str	r0, [r7, #12]
 8015330:	60b9      	str	r1, [r7, #8]
 8015332:	607a      	str	r2, [r7, #4]
 8015334:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015336:	2300      	movs	r3, #0
 8015338:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d106      	bne.n	801534e <etharp_raw+0x26>
 8015340:	4b3a      	ldr	r3, [pc, #232]	; (801542c <etharp_raw+0x104>)
 8015342:	f240 4257 	movw	r2, #1111	; 0x457
 8015346:	493a      	ldr	r1, [pc, #232]	; (8015430 <etharp_raw+0x108>)
 8015348:	483a      	ldr	r0, [pc, #232]	; (8015434 <etharp_raw+0x10c>)
 801534a:	f002 f929 	bl	80175a0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801534e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015352:	211c      	movs	r1, #28
 8015354:	200e      	movs	r0, #14
 8015356:	f7f5 fe47 	bl	800afe8 <pbuf_alloc>
 801535a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801535c:	69bb      	ldr	r3, [r7, #24]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d102      	bne.n	8015368 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015366:	e05d      	b.n	8015424 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015368:	69bb      	ldr	r3, [r7, #24]
 801536a:	895b      	ldrh	r3, [r3, #10]
 801536c:	2b1b      	cmp	r3, #27
 801536e:	d806      	bhi.n	801537e <etharp_raw+0x56>
 8015370:	4b2e      	ldr	r3, [pc, #184]	; (801542c <etharp_raw+0x104>)
 8015372:	f240 4262 	movw	r2, #1122	; 0x462
 8015376:	4930      	ldr	r1, [pc, #192]	; (8015438 <etharp_raw+0x110>)
 8015378:	482e      	ldr	r0, [pc, #184]	; (8015434 <etharp_raw+0x10c>)
 801537a:	f002 f911 	bl	80175a0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801537e:	69bb      	ldr	r3, [r7, #24]
 8015380:	685b      	ldr	r3, [r3, #4]
 8015382:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015384:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015386:	4618      	mov	r0, r3
 8015388:	f7f4 fd78 	bl	8009e7c <lwip_htons>
 801538c:	4603      	mov	r3, r0
 801538e:	461a      	mov	r2, r3
 8015390:	697b      	ldr	r3, [r7, #20]
 8015392:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801539a:	2b06      	cmp	r3, #6
 801539c:	d006      	beq.n	80153ac <etharp_raw+0x84>
 801539e:	4b23      	ldr	r3, [pc, #140]	; (801542c <etharp_raw+0x104>)
 80153a0:	f240 4269 	movw	r2, #1129	; 0x469
 80153a4:	4925      	ldr	r1, [pc, #148]	; (801543c <etharp_raw+0x114>)
 80153a6:	4823      	ldr	r0, [pc, #140]	; (8015434 <etharp_raw+0x10c>)
 80153a8:	f002 f8fa 	bl	80175a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	3308      	adds	r3, #8
 80153b0:	2206      	movs	r2, #6
 80153b2:	6839      	ldr	r1, [r7, #0]
 80153b4:	4618      	mov	r0, r3
 80153b6:	f001 fc59 	bl	8016c6c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80153ba:	697b      	ldr	r3, [r7, #20]
 80153bc:	3312      	adds	r3, #18
 80153be:	2206      	movs	r2, #6
 80153c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80153c2:	4618      	mov	r0, r3
 80153c4:	f001 fc52 	bl	8016c6c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	330e      	adds	r3, #14
 80153cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153ce:	6812      	ldr	r2, [r2, #0]
 80153d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	3318      	adds	r3, #24
 80153d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153d8:	6812      	ldr	r2, [r2, #0]
 80153da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80153dc:	697b      	ldr	r3, [r7, #20]
 80153de:	2200      	movs	r2, #0
 80153e0:	701a      	strb	r2, [r3, #0]
 80153e2:	2200      	movs	r2, #0
 80153e4:	f042 0201 	orr.w	r2, r2, #1
 80153e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	2200      	movs	r2, #0
 80153ee:	f042 0208 	orr.w	r2, r2, #8
 80153f2:	709a      	strb	r2, [r3, #2]
 80153f4:	2200      	movs	r2, #0
 80153f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	2206      	movs	r2, #6
 80153fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80153fe:	697b      	ldr	r3, [r7, #20]
 8015400:	2204      	movs	r2, #4
 8015402:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015404:	f640 0306 	movw	r3, #2054	; 0x806
 8015408:	9300      	str	r3, [sp, #0]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	68ba      	ldr	r2, [r7, #8]
 801540e:	69b9      	ldr	r1, [r7, #24]
 8015410:	68f8      	ldr	r0, [r7, #12]
 8015412:	f001 fba9 	bl	8016b68 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015416:	69b8      	ldr	r0, [r7, #24]
 8015418:	f7f6 f8ca 	bl	800b5b0 <pbuf_free>
  p = NULL;
 801541c:	2300      	movs	r3, #0
 801541e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015420:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015424:	4618      	mov	r0, r3
 8015426:	3720      	adds	r7, #32
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}
 801542c:	0801f200 	.word	0x0801f200
 8015430:	0801f350 	.word	0x0801f350
 8015434:	0801f278 	.word	0x0801f278
 8015438:	0801f400 	.word	0x0801f400
 801543c:	0801f434 	.word	0x0801f434

08015440 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015440:	b580      	push	{r7, lr}
 8015442:	b088      	sub	sp, #32
 8015444:	af04      	add	r7, sp, #16
 8015446:	60f8      	str	r0, [r7, #12]
 8015448:	60b9      	str	r1, [r7, #8]
 801544a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801545c:	2201      	movs	r2, #1
 801545e:	9203      	str	r2, [sp, #12]
 8015460:	68ba      	ldr	r2, [r7, #8]
 8015462:	9202      	str	r2, [sp, #8]
 8015464:	4a06      	ldr	r2, [pc, #24]	; (8015480 <etharp_request_dst+0x40>)
 8015466:	9201      	str	r2, [sp, #4]
 8015468:	9300      	str	r3, [sp, #0]
 801546a:	4603      	mov	r3, r0
 801546c:	687a      	ldr	r2, [r7, #4]
 801546e:	68f8      	ldr	r0, [r7, #12]
 8015470:	f7ff ff5a 	bl	8015328 <etharp_raw>
 8015474:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015476:	4618      	mov	r0, r3
 8015478:	3710      	adds	r7, #16
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	08032aec 	.word	0x08032aec

08015484 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801548e:	4a05      	ldr	r2, [pc, #20]	; (80154a4 <etharp_request+0x20>)
 8015490:	6839      	ldr	r1, [r7, #0]
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f7ff ffd4 	bl	8015440 <etharp_request_dst>
 8015498:	4603      	mov	r3, r0
}
 801549a:	4618      	mov	r0, r3
 801549c:	3708      	adds	r7, #8
 801549e:	46bd      	mov	sp, r7
 80154a0:	bd80      	pop	{r7, pc}
 80154a2:	bf00      	nop
 80154a4:	08032ae4 	.word	0x08032ae4

080154a8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b08e      	sub	sp, #56	; 0x38
 80154ac:	af04      	add	r7, sp, #16
 80154ae:	6078      	str	r0, [r7, #4]
 80154b0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80154b2:	4b79      	ldr	r3, [pc, #484]	; (8015698 <icmp_input+0x1f0>)
 80154b4:	689b      	ldr	r3, [r3, #8]
 80154b6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80154b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ba:	781b      	ldrb	r3, [r3, #0]
 80154bc:	f003 030f 	and.w	r3, r3, #15
 80154c0:	b2db      	uxtb	r3, r3
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	b2db      	uxtb	r3, r3
 80154c6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80154c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154ca:	2b13      	cmp	r3, #19
 80154cc:	f240 80cd 	bls.w	801566a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	895b      	ldrh	r3, [r3, #10]
 80154d4:	2b03      	cmp	r3, #3
 80154d6:	f240 80ca 	bls.w	801566e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	781b      	ldrb	r3, [r3, #0]
 80154e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80154e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	f000 80b7 	beq.w	801565c <icmp_input+0x1b4>
 80154ee:	2b08      	cmp	r3, #8
 80154f0:	f040 80b7 	bne.w	8015662 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80154f4:	4b69      	ldr	r3, [pc, #420]	; (801569c <icmp_input+0x1f4>)
 80154f6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80154f8:	4b67      	ldr	r3, [pc, #412]	; (8015698 <icmp_input+0x1f0>)
 80154fa:	695b      	ldr	r3, [r3, #20]
 80154fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015500:	2be0      	cmp	r3, #224	; 0xe0
 8015502:	f000 80bb 	beq.w	801567c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015506:	4b64      	ldr	r3, [pc, #400]	; (8015698 <icmp_input+0x1f0>)
 8015508:	695b      	ldr	r3, [r3, #20]
 801550a:	4a63      	ldr	r2, [pc, #396]	; (8015698 <icmp_input+0x1f0>)
 801550c:	6812      	ldr	r2, [r2, #0]
 801550e:	4611      	mov	r1, r2
 8015510:	4618      	mov	r0, r3
 8015512:	f000 fc22 	bl	8015d5a <ip4_addr_isbroadcast_u32>
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	f040 80b1 	bne.w	8015680 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	891b      	ldrh	r3, [r3, #8]
 8015522:	2b07      	cmp	r3, #7
 8015524:	f240 80a5 	bls.w	8015672 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015528:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801552a:	330e      	adds	r3, #14
 801552c:	4619      	mov	r1, r3
 801552e:	6878      	ldr	r0, [r7, #4]
 8015530:	f7f5 ffa8 	bl	800b484 <pbuf_add_header>
 8015534:	4603      	mov	r3, r0
 8015536:	2b00      	cmp	r3, #0
 8015538:	d04b      	beq.n	80155d2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	891a      	ldrh	r2, [r3, #8]
 801553e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015540:	4413      	add	r3, r2
 8015542:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	891b      	ldrh	r3, [r3, #8]
 8015548:	8b7a      	ldrh	r2, [r7, #26]
 801554a:	429a      	cmp	r2, r3
 801554c:	f0c0 809a 	bcc.w	8015684 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015550:	8b7b      	ldrh	r3, [r7, #26]
 8015552:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015556:	4619      	mov	r1, r3
 8015558:	200e      	movs	r0, #14
 801555a:	f7f5 fd45 	bl	800afe8 <pbuf_alloc>
 801555e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	2b00      	cmp	r3, #0
 8015564:	f000 8090 	beq.w	8015688 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015568:	697b      	ldr	r3, [r7, #20]
 801556a:	895b      	ldrh	r3, [r3, #10]
 801556c:	461a      	mov	r2, r3
 801556e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015570:	3308      	adds	r3, #8
 8015572:	429a      	cmp	r2, r3
 8015574:	d203      	bcs.n	801557e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015576:	6978      	ldr	r0, [r7, #20]
 8015578:	f7f6 f81a 	bl	800b5b0 <pbuf_free>
          goto icmperr;
 801557c:	e085      	b.n	801568a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801557e:	697b      	ldr	r3, [r7, #20]
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015586:	4618      	mov	r0, r3
 8015588:	f001 fb70 	bl	8016c6c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801558c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801558e:	4619      	mov	r1, r3
 8015590:	6978      	ldr	r0, [r7, #20]
 8015592:	f7f5 ff87 	bl	800b4a4 <pbuf_remove_header>
 8015596:	4603      	mov	r3, r0
 8015598:	2b00      	cmp	r3, #0
 801559a:	d009      	beq.n	80155b0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801559c:	4b40      	ldr	r3, [pc, #256]	; (80156a0 <icmp_input+0x1f8>)
 801559e:	22b6      	movs	r2, #182	; 0xb6
 80155a0:	4940      	ldr	r1, [pc, #256]	; (80156a4 <icmp_input+0x1fc>)
 80155a2:	4841      	ldr	r0, [pc, #260]	; (80156a8 <icmp_input+0x200>)
 80155a4:	f001 fffc 	bl	80175a0 <iprintf>
          pbuf_free(r);
 80155a8:	6978      	ldr	r0, [r7, #20]
 80155aa:	f7f6 f801 	bl	800b5b0 <pbuf_free>
          goto icmperr;
 80155ae:	e06c      	b.n	801568a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80155b0:	6879      	ldr	r1, [r7, #4]
 80155b2:	6978      	ldr	r0, [r7, #20]
 80155b4:	f7f6 f924 	bl	800b800 <pbuf_copy>
 80155b8:	4603      	mov	r3, r0
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d003      	beq.n	80155c6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80155be:	6978      	ldr	r0, [r7, #20]
 80155c0:	f7f5 fff6 	bl	800b5b0 <pbuf_free>
          goto icmperr;
 80155c4:	e061      	b.n	801568a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80155c6:	6878      	ldr	r0, [r7, #4]
 80155c8:	f7f5 fff2 	bl	800b5b0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80155cc:	697b      	ldr	r3, [r7, #20]
 80155ce:	607b      	str	r3, [r7, #4]
 80155d0:	e00f      	b.n	80155f2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80155d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155d4:	330e      	adds	r3, #14
 80155d6:	4619      	mov	r1, r3
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f7f5 ff63 	bl	800b4a4 <pbuf_remove_header>
 80155de:	4603      	mov	r3, r0
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d006      	beq.n	80155f2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80155e4:	4b2e      	ldr	r3, [pc, #184]	; (80156a0 <icmp_input+0x1f8>)
 80155e6:	22c7      	movs	r2, #199	; 0xc7
 80155e8:	4930      	ldr	r1, [pc, #192]	; (80156ac <icmp_input+0x204>)
 80155ea:	482f      	ldr	r0, [pc, #188]	; (80156a8 <icmp_input+0x200>)
 80155ec:	f001 ffd8 	bl	80175a0 <iprintf>
          goto icmperr;
 80155f0:	e04b      	b.n	801568a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	685b      	ldr	r3, [r3, #4]
 80155f6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80155f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155fa:	4619      	mov	r1, r3
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f7f5 ff41 	bl	800b484 <pbuf_add_header>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	d12b      	bne.n	8015660 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	685b      	ldr	r3, [r3, #4]
 801560c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	681a      	ldr	r2, [r3, #0]
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015616:	4b20      	ldr	r3, [pc, #128]	; (8015698 <icmp_input+0x1f0>)
 8015618:	691a      	ldr	r2, [r3, #16]
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	2200      	movs	r2, #0
 8015622:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015624:	693b      	ldr	r3, [r7, #16]
 8015626:	2200      	movs	r2, #0
 8015628:	709a      	strb	r2, [r3, #2]
 801562a:	2200      	movs	r2, #0
 801562c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	22ff      	movs	r2, #255	; 0xff
 8015632:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	2200      	movs	r2, #0
 8015638:	729a      	strb	r2, [r3, #10]
 801563a:	2200      	movs	r2, #0
 801563c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	9302      	str	r3, [sp, #8]
 8015642:	2301      	movs	r3, #1
 8015644:	9301      	str	r3, [sp, #4]
 8015646:	2300      	movs	r3, #0
 8015648:	9300      	str	r3, [sp, #0]
 801564a:	23ff      	movs	r3, #255	; 0xff
 801564c:	2200      	movs	r2, #0
 801564e:	69f9      	ldr	r1, [r7, #28]
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f000 fa99 	bl	8015b88 <ip4_output_if>
 8015656:	4603      	mov	r3, r0
 8015658:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801565a:	e001      	b.n	8015660 <icmp_input+0x1b8>
      break;
 801565c:	bf00      	nop
 801565e:	e000      	b.n	8015662 <icmp_input+0x1ba>
      break;
 8015660:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015662:	6878      	ldr	r0, [r7, #4]
 8015664:	f7f5 ffa4 	bl	800b5b0 <pbuf_free>
  return;
 8015668:	e013      	b.n	8015692 <icmp_input+0x1ea>
    goto lenerr;
 801566a:	bf00      	nop
 801566c:	e002      	b.n	8015674 <icmp_input+0x1cc>
    goto lenerr;
 801566e:	bf00      	nop
 8015670:	e000      	b.n	8015674 <icmp_input+0x1cc>
        goto lenerr;
 8015672:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015674:	6878      	ldr	r0, [r7, #4]
 8015676:	f7f5 ff9b 	bl	800b5b0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801567a:	e00a      	b.n	8015692 <icmp_input+0x1ea>
        goto icmperr;
 801567c:	bf00      	nop
 801567e:	e004      	b.n	801568a <icmp_input+0x1e2>
        goto icmperr;
 8015680:	bf00      	nop
 8015682:	e002      	b.n	801568a <icmp_input+0x1e2>
          goto icmperr;
 8015684:	bf00      	nop
 8015686:	e000      	b.n	801568a <icmp_input+0x1e2>
          goto icmperr;
 8015688:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f7f5 ff90 	bl	800b5b0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015690:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015692:	3728      	adds	r7, #40	; 0x28
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}
 8015698:	20009f28 	.word	0x20009f28
 801569c:	20009f3c 	.word	0x20009f3c
 80156a0:	0801f478 	.word	0x0801f478
 80156a4:	0801f4b0 	.word	0x0801f4b0
 80156a8:	0801f4e8 	.word	0x0801f4e8
 80156ac:	0801f510 	.word	0x0801f510

080156b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	b082      	sub	sp, #8
 80156b4:	af00      	add	r7, sp, #0
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	460b      	mov	r3, r1
 80156ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80156bc:	78fb      	ldrb	r3, [r7, #3]
 80156be:	461a      	mov	r2, r3
 80156c0:	2103      	movs	r1, #3
 80156c2:	6878      	ldr	r0, [r7, #4]
 80156c4:	f000 f814 	bl	80156f0 <icmp_send_response>
}
 80156c8:	bf00      	nop
 80156ca:	3708      	adds	r7, #8
 80156cc:	46bd      	mov	sp, r7
 80156ce:	bd80      	pop	{r7, pc}

080156d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
 80156d8:	460b      	mov	r3, r1
 80156da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80156dc:	78fb      	ldrb	r3, [r7, #3]
 80156de:	461a      	mov	r2, r3
 80156e0:	210b      	movs	r1, #11
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f000 f804 	bl	80156f0 <icmp_send_response>
}
 80156e8:	bf00      	nop
 80156ea:	3708      	adds	r7, #8
 80156ec:	46bd      	mov	sp, r7
 80156ee:	bd80      	pop	{r7, pc}

080156f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	b08c      	sub	sp, #48	; 0x30
 80156f4:	af04      	add	r7, sp, #16
 80156f6:	6078      	str	r0, [r7, #4]
 80156f8:	460b      	mov	r3, r1
 80156fa:	70fb      	strb	r3, [r7, #3]
 80156fc:	4613      	mov	r3, r2
 80156fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015700:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015704:	2124      	movs	r1, #36	; 0x24
 8015706:	2022      	movs	r0, #34	; 0x22
 8015708:	f7f5 fc6e 	bl	800afe8 <pbuf_alloc>
 801570c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801570e:	69fb      	ldr	r3, [r7, #28]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d04c      	beq.n	80157ae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015714:	69fb      	ldr	r3, [r7, #28]
 8015716:	895b      	ldrh	r3, [r3, #10]
 8015718:	2b23      	cmp	r3, #35	; 0x23
 801571a:	d806      	bhi.n	801572a <icmp_send_response+0x3a>
 801571c:	4b26      	ldr	r3, [pc, #152]	; (80157b8 <icmp_send_response+0xc8>)
 801571e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015722:	4926      	ldr	r1, [pc, #152]	; (80157bc <icmp_send_response+0xcc>)
 8015724:	4826      	ldr	r0, [pc, #152]	; (80157c0 <icmp_send_response+0xd0>)
 8015726:	f001 ff3b 	bl	80175a0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015730:	69fb      	ldr	r3, [r7, #28]
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	78fa      	ldrb	r2, [r7, #3]
 801573a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801573c:	697b      	ldr	r3, [r7, #20]
 801573e:	78ba      	ldrb	r2, [r7, #2]
 8015740:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015742:	697b      	ldr	r3, [r7, #20]
 8015744:	2200      	movs	r2, #0
 8015746:	711a      	strb	r2, [r3, #4]
 8015748:	2200      	movs	r2, #0
 801574a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	2200      	movs	r2, #0
 8015750:	719a      	strb	r2, [r3, #6]
 8015752:	2200      	movs	r2, #0
 8015754:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015756:	69fb      	ldr	r3, [r7, #28]
 8015758:	685b      	ldr	r3, [r3, #4]
 801575a:	f103 0008 	add.w	r0, r3, #8
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	221c      	movs	r2, #28
 8015764:	4619      	mov	r1, r3
 8015766:	f001 fa81 	bl	8016c6c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801576a:	69bb      	ldr	r3, [r7, #24]
 801576c:	68db      	ldr	r3, [r3, #12]
 801576e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015770:	f107 030c 	add.w	r3, r7, #12
 8015774:	4618      	mov	r0, r3
 8015776:	f000 f825 	bl	80157c4 <ip4_route>
 801577a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d011      	beq.n	80157a6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015782:	697b      	ldr	r3, [r7, #20]
 8015784:	2200      	movs	r2, #0
 8015786:	709a      	strb	r2, [r3, #2]
 8015788:	2200      	movs	r2, #0
 801578a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801578c:	f107 020c 	add.w	r2, r7, #12
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	9302      	str	r3, [sp, #8]
 8015794:	2301      	movs	r3, #1
 8015796:	9301      	str	r3, [sp, #4]
 8015798:	2300      	movs	r3, #0
 801579a:	9300      	str	r3, [sp, #0]
 801579c:	23ff      	movs	r3, #255	; 0xff
 801579e:	2100      	movs	r1, #0
 80157a0:	69f8      	ldr	r0, [r7, #28]
 80157a2:	f000 f9f1 	bl	8015b88 <ip4_output_if>
  }
  pbuf_free(q);
 80157a6:	69f8      	ldr	r0, [r7, #28]
 80157a8:	f7f5 ff02 	bl	800b5b0 <pbuf_free>
 80157ac:	e000      	b.n	80157b0 <icmp_send_response+0xc0>
    return;
 80157ae:	bf00      	nop
}
 80157b0:	3720      	adds	r7, #32
 80157b2:	46bd      	mov	sp, r7
 80157b4:	bd80      	pop	{r7, pc}
 80157b6:	bf00      	nop
 80157b8:	0801f478 	.word	0x0801f478
 80157bc:	0801f544 	.word	0x0801f544
 80157c0:	0801f4e8 	.word	0x0801f4e8

080157c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80157c4:	b480      	push	{r7}
 80157c6:	b085      	sub	sp, #20
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80157cc:	4b33      	ldr	r3, [pc, #204]	; (801589c <ip4_route+0xd8>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	60fb      	str	r3, [r7, #12]
 80157d2:	e036      	b.n	8015842 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80157da:	f003 0301 	and.w	r3, r3, #1
 80157de:	b2db      	uxtb	r3, r3
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d02b      	beq.n	801583c <ip4_route+0x78>
 80157e4:	68fb      	ldr	r3, [r7, #12]
 80157e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80157ea:	089b      	lsrs	r3, r3, #2
 80157ec:	f003 0301 	and.w	r3, r3, #1
 80157f0:	b2db      	uxtb	r3, r3
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d022      	beq.n	801583c <ip4_route+0x78>
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	3304      	adds	r3, #4
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d01d      	beq.n	801583c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	681a      	ldr	r2, [r3, #0]
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	3304      	adds	r3, #4
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	405a      	eors	r2, r3
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	3308      	adds	r3, #8
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	4013      	ands	r3, r2
 8015814:	2b00      	cmp	r3, #0
 8015816:	d101      	bne.n	801581c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	e038      	b.n	801588e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015822:	f003 0302 	and.w	r3, r3, #2
 8015826:	2b00      	cmp	r3, #0
 8015828:	d108      	bne.n	801583c <ip4_route+0x78>
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	681a      	ldr	r2, [r3, #0]
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	330c      	adds	r3, #12
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	429a      	cmp	r2, r3
 8015836:	d101      	bne.n	801583c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	e028      	b.n	801588e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	60fb      	str	r3, [r7, #12]
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d1c5      	bne.n	80157d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015848:	4b15      	ldr	r3, [pc, #84]	; (80158a0 <ip4_route+0xdc>)
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d01a      	beq.n	8015886 <ip4_route+0xc2>
 8015850:	4b13      	ldr	r3, [pc, #76]	; (80158a0 <ip4_route+0xdc>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015858:	f003 0301 	and.w	r3, r3, #1
 801585c:	2b00      	cmp	r3, #0
 801585e:	d012      	beq.n	8015886 <ip4_route+0xc2>
 8015860:	4b0f      	ldr	r3, [pc, #60]	; (80158a0 <ip4_route+0xdc>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015868:	f003 0304 	and.w	r3, r3, #4
 801586c:	2b00      	cmp	r3, #0
 801586e:	d00a      	beq.n	8015886 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015870:	4b0b      	ldr	r3, [pc, #44]	; (80158a0 <ip4_route+0xdc>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	3304      	adds	r3, #4
 8015876:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015878:	2b00      	cmp	r3, #0
 801587a:	d004      	beq.n	8015886 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	b2db      	uxtb	r3, r3
 8015882:	2b7f      	cmp	r3, #127	; 0x7f
 8015884:	d101      	bne.n	801588a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015886:	2300      	movs	r3, #0
 8015888:	e001      	b.n	801588e <ip4_route+0xca>
  }

  return netif_default;
 801588a:	4b05      	ldr	r3, [pc, #20]	; (80158a0 <ip4_route+0xdc>)
 801588c:	681b      	ldr	r3, [r3, #0]
}
 801588e:	4618      	mov	r0, r3
 8015890:	3714      	adds	r7, #20
 8015892:	46bd      	mov	sp, r7
 8015894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015898:	4770      	bx	lr
 801589a:	bf00      	nop
 801589c:	2000d848 	.word	0x2000d848
 80158a0:	2000d84c 	.word	0x2000d84c

080158a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b082      	sub	sp, #8
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80158b2:	f003 0301 	and.w	r3, r3, #1
 80158b6:	b2db      	uxtb	r3, r3
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d016      	beq.n	80158ea <ip4_input_accept+0x46>
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	3304      	adds	r3, #4
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d011      	beq.n	80158ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80158c6:	4b0b      	ldr	r3, [pc, #44]	; (80158f4 <ip4_input_accept+0x50>)
 80158c8:	695a      	ldr	r2, [r3, #20]
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	3304      	adds	r3, #4
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d008      	beq.n	80158e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80158d4:	4b07      	ldr	r3, [pc, #28]	; (80158f4 <ip4_input_accept+0x50>)
 80158d6:	695b      	ldr	r3, [r3, #20]
 80158d8:	6879      	ldr	r1, [r7, #4]
 80158da:	4618      	mov	r0, r3
 80158dc:	f000 fa3d 	bl	8015d5a <ip4_addr_isbroadcast_u32>
 80158e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d001      	beq.n	80158ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80158e6:	2301      	movs	r3, #1
 80158e8:	e000      	b.n	80158ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80158ea:	2300      	movs	r3, #0
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3708      	adds	r7, #8
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	20009f28 	.word	0x20009f28

080158f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b088      	sub	sp, #32
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	6078      	str	r0, [r7, #4]
 8015900:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015902:	2301      	movs	r3, #1
 8015904:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	685b      	ldr	r3, [r3, #4]
 801590a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	091b      	lsrs	r3, r3, #4
 8015912:	b2db      	uxtb	r3, r3
 8015914:	2b04      	cmp	r3, #4
 8015916:	d007      	beq.n	8015928 <ip4_input+0x30>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f000 fa11 	bl	8015d40 <ip4_debug_print>
    pbuf_free(p);
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f7f5 fe46 	bl	800b5b0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015924:	2300      	movs	r3, #0
 8015926:	e126      	b.n	8015b76 <ip4_input+0x27e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015928:	69fb      	ldr	r3, [r7, #28]
 801592a:	781b      	ldrb	r3, [r3, #0]
 801592c:	f003 030f 	and.w	r3, r3, #15
 8015930:	b2db      	uxtb	r3, r3
 8015932:	009b      	lsls	r3, r3, #2
 8015934:	b2db      	uxtb	r3, r3
 8015936:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015938:	69fb      	ldr	r3, [r7, #28]
 801593a:	885b      	ldrh	r3, [r3, #2]
 801593c:	b29b      	uxth	r3, r3
 801593e:	4618      	mov	r0, r3
 8015940:	f7f4 fa9c 	bl	8009e7c <lwip_htons>
 8015944:	4603      	mov	r3, r0
 8015946:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	891b      	ldrh	r3, [r3, #8]
 801594c:	8a3a      	ldrh	r2, [r7, #16]
 801594e:	429a      	cmp	r2, r3
 8015950:	d204      	bcs.n	801595c <ip4_input+0x64>
    pbuf_realloc(p, iphdr_len);
 8015952:	8a3b      	ldrh	r3, [r7, #16]
 8015954:	4619      	mov	r1, r3
 8015956:	6878      	ldr	r0, [r7, #4]
 8015958:	f7f5 fca4 	bl	800b2a4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	895b      	ldrh	r3, [r3, #10]
 8015960:	8a7a      	ldrh	r2, [r7, #18]
 8015962:	429a      	cmp	r2, r3
 8015964:	d807      	bhi.n	8015976 <ip4_input+0x7e>
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	891b      	ldrh	r3, [r3, #8]
 801596a:	8a3a      	ldrh	r2, [r7, #16]
 801596c:	429a      	cmp	r2, r3
 801596e:	d802      	bhi.n	8015976 <ip4_input+0x7e>
 8015970:	8a7b      	ldrh	r3, [r7, #18]
 8015972:	2b13      	cmp	r3, #19
 8015974:	d804      	bhi.n	8015980 <ip4_input+0x88>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f7f5 fe1a 	bl	800b5b0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801597c:	2300      	movs	r3, #0
 801597e:	e0fa      	b.n	8015b76 <ip4_input+0x27e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015980:	69fb      	ldr	r3, [r7, #28]
 8015982:	691b      	ldr	r3, [r3, #16]
 8015984:	4a7e      	ldr	r2, [pc, #504]	; (8015b80 <ip4_input+0x288>)
 8015986:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015988:	69fb      	ldr	r3, [r7, #28]
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	4a7c      	ldr	r2, [pc, #496]	; (8015b80 <ip4_input+0x288>)
 801598e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015990:	4b7b      	ldr	r3, [pc, #492]	; (8015b80 <ip4_input+0x288>)
 8015992:	695b      	ldr	r3, [r3, #20]
 8015994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015998:	2be0      	cmp	r3, #224	; 0xe0
 801599a:	d112      	bne.n	80159c2 <ip4_input+0xca>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159a2:	f003 0301 	and.w	r3, r3, #1
 80159a6:	b2db      	uxtb	r3, r3
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d007      	beq.n	80159bc <ip4_input+0xc4>
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	3304      	adds	r3, #4
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d002      	beq.n	80159bc <ip4_input+0xc4>
      netif = inp;
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	61bb      	str	r3, [r7, #24]
 80159ba:	e02a      	b.n	8015a12 <ip4_input+0x11a>
    } else {
      netif = NULL;
 80159bc:	2300      	movs	r3, #0
 80159be:	61bb      	str	r3, [r7, #24]
 80159c0:	e027      	b.n	8015a12 <ip4_input+0x11a>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80159c2:	6838      	ldr	r0, [r7, #0]
 80159c4:	f7ff ff6e 	bl	80158a4 <ip4_input_accept>
 80159c8:	4603      	mov	r3, r0
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d002      	beq.n	80159d4 <ip4_input+0xdc>
      netif = inp;
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	61bb      	str	r3, [r7, #24]
 80159d2:	e01e      	b.n	8015a12 <ip4_input+0x11a>
    } else {
      netif = NULL;
 80159d4:	2300      	movs	r3, #0
 80159d6:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80159d8:	4b69      	ldr	r3, [pc, #420]	; (8015b80 <ip4_input+0x288>)
 80159da:	695b      	ldr	r3, [r3, #20]
 80159dc:	b2db      	uxtb	r3, r3
 80159de:	2b7f      	cmp	r3, #127	; 0x7f
 80159e0:	d017      	beq.n	8015a12 <ip4_input+0x11a>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80159e2:	4b68      	ldr	r3, [pc, #416]	; (8015b84 <ip4_input+0x28c>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	61bb      	str	r3, [r7, #24]
 80159e8:	e00e      	b.n	8015a08 <ip4_input+0x110>
          if (netif == inp) {
 80159ea:	69ba      	ldr	r2, [r7, #24]
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d006      	beq.n	8015a00 <ip4_input+0x108>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80159f2:	69b8      	ldr	r0, [r7, #24]
 80159f4:	f7ff ff56 	bl	80158a4 <ip4_input_accept>
 80159f8:	4603      	mov	r3, r0
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d108      	bne.n	8015a10 <ip4_input+0x118>
 80159fe:	e000      	b.n	8015a02 <ip4_input+0x10a>
            continue;
 8015a00:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015a02:	69bb      	ldr	r3, [r7, #24]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	61bb      	str	r3, [r7, #24]
 8015a08:	69bb      	ldr	r3, [r7, #24]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d1ed      	bne.n	80159ea <ip4_input+0xf2>
 8015a0e:	e000      	b.n	8015a12 <ip4_input+0x11a>
            break;
 8015a10:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015a12:	69bb      	ldr	r3, [r7, #24]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d111      	bne.n	8015a3c <ip4_input+0x144>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015a18:	69fb      	ldr	r3, [r7, #28]
 8015a1a:	7a5b      	ldrb	r3, [r3, #9]
 8015a1c:	2b11      	cmp	r3, #17
 8015a1e:	d10d      	bne.n	8015a3c <ip4_input+0x144>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015a20:	8a7b      	ldrh	r3, [r7, #18]
 8015a22:	69fa      	ldr	r2, [r7, #28]
 8015a24:	4413      	add	r3, r2
 8015a26:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	885b      	ldrh	r3, [r3, #2]
 8015a2c:	b29b      	uxth	r3, r3
 8015a2e:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015a32:	d103      	bne.n	8015a3c <ip4_input+0x144>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015a34:	683b      	ldr	r3, [r7, #0]
 8015a36:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d017      	beq.n	8015a72 <ip4_input+0x17a>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015a42:	4b4f      	ldr	r3, [pc, #316]	; (8015b80 <ip4_input+0x288>)
 8015a44:	691b      	ldr	r3, [r3, #16]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d013      	beq.n	8015a72 <ip4_input+0x17a>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a4a:	4b4d      	ldr	r3, [pc, #308]	; (8015b80 <ip4_input+0x288>)
 8015a4c:	691b      	ldr	r3, [r3, #16]
 8015a4e:	6839      	ldr	r1, [r7, #0]
 8015a50:	4618      	mov	r0, r3
 8015a52:	f000 f982 	bl	8015d5a <ip4_addr_isbroadcast_u32>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d105      	bne.n	8015a68 <ip4_input+0x170>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015a5c:	4b48      	ldr	r3, [pc, #288]	; (8015b80 <ip4_input+0x288>)
 8015a5e:	691b      	ldr	r3, [r3, #16]
 8015a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a64:	2be0      	cmp	r3, #224	; 0xe0
 8015a66:	d104      	bne.n	8015a72 <ip4_input+0x17a>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015a68:	6878      	ldr	r0, [r7, #4]
 8015a6a:	f7f5 fda1 	bl	800b5b0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	e081      	b.n	8015b76 <ip4_input+0x27e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015a72:	69bb      	ldr	r3, [r7, #24]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d104      	bne.n	8015a82 <ip4_input+0x18a>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f7f5 fd99 	bl	800b5b0 <pbuf_free>
    return ERR_OK;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	e079      	b.n	8015b76 <ip4_input+0x27e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015a82:	69fb      	ldr	r3, [r7, #28]
 8015a84:	88db      	ldrh	r3, [r3, #6]
 8015a86:	b29b      	uxth	r3, r3
 8015a88:	461a      	mov	r2, r3
 8015a8a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015a8e:	4013      	ands	r3, r2
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d00b      	beq.n	8015aac <ip4_input+0x1b4>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f000 fca5 	bl	80163e4 <ip4_reass>
 8015a9a:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d101      	bne.n	8015aa6 <ip4_input+0x1ae>
      return ERR_OK;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	e067      	b.n	8015b76 <ip4_input+0x27e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	685b      	ldr	r3, [r3, #4]
 8015aaa:	61fb      	str	r3, [r7, #28]
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f000 f947 	bl	8015d40 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015ab2:	4a33      	ldr	r2, [pc, #204]	; (8015b80 <ip4_input+0x288>)
 8015ab4:	69bb      	ldr	r3, [r7, #24]
 8015ab6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015ab8:	4a31      	ldr	r2, [pc, #196]	; (8015b80 <ip4_input+0x288>)
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015abe:	4a30      	ldr	r2, [pc, #192]	; (8015b80 <ip4_input+0x288>)
 8015ac0:	69fb      	ldr	r3, [r7, #28]
 8015ac2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015ac4:	69fb      	ldr	r3, [r7, #28]
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	f003 030f 	and.w	r3, r3, #15
 8015acc:	b2db      	uxtb	r3, r3
 8015ace:	009b      	lsls	r3, r3, #2
 8015ad0:	b2db      	uxtb	r3, r3
 8015ad2:	b29a      	uxth	r2, r3
 8015ad4:	4b2a      	ldr	r3, [pc, #168]	; (8015b80 <ip4_input+0x288>)
 8015ad6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015ad8:	8a7b      	ldrh	r3, [r7, #18]
 8015ada:	4619      	mov	r1, r3
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f7f5 fce1 	bl	800b4a4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015ae2:	69fb      	ldr	r3, [r7, #28]
 8015ae4:	7a5b      	ldrb	r3, [r3, #9]
 8015ae6:	2b11      	cmp	r3, #17
 8015ae8:	d006      	beq.n	8015af8 <ip4_input+0x200>
 8015aea:	2b11      	cmp	r3, #17
 8015aec:	dc13      	bgt.n	8015b16 <ip4_input+0x21e>
 8015aee:	2b01      	cmp	r3, #1
 8015af0:	d00c      	beq.n	8015b0c <ip4_input+0x214>
 8015af2:	2b06      	cmp	r3, #6
 8015af4:	d005      	beq.n	8015b02 <ip4_input+0x20a>
 8015af6:	e00e      	b.n	8015b16 <ip4_input+0x21e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015af8:	6839      	ldr	r1, [r7, #0]
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f7fc fb12 	bl	8012124 <udp_input>
        break;
 8015b00:	e026      	b.n	8015b50 <ip4_input+0x258>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015b02:	6839      	ldr	r1, [r7, #0]
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f7f7 fec9 	bl	800d89c <tcp_input>
        break;
 8015b0a:	e021      	b.n	8015b50 <ip4_input+0x258>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015b0c:	6839      	ldr	r1, [r7, #0]
 8015b0e:	6878      	ldr	r0, [r7, #4]
 8015b10:	f7ff fcca 	bl	80154a8 <icmp_input>
        break;
 8015b14:	e01c      	b.n	8015b50 <ip4_input+0x258>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015b16:	4b1a      	ldr	r3, [pc, #104]	; (8015b80 <ip4_input+0x288>)
 8015b18:	695b      	ldr	r3, [r3, #20]
 8015b1a:	69b9      	ldr	r1, [r7, #24]
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f000 f91c 	bl	8015d5a <ip4_addr_isbroadcast_u32>
 8015b22:	4603      	mov	r3, r0
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d10f      	bne.n	8015b48 <ip4_input+0x250>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015b28:	4b15      	ldr	r3, [pc, #84]	; (8015b80 <ip4_input+0x288>)
 8015b2a:	695b      	ldr	r3, [r3, #20]
 8015b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015b30:	2be0      	cmp	r3, #224	; 0xe0
 8015b32:	d009      	beq.n	8015b48 <ip4_input+0x250>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015b34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015b38:	4619      	mov	r1, r3
 8015b3a:	6878      	ldr	r0, [r7, #4]
 8015b3c:	f7f5 fd25 	bl	800b58a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015b40:	2102      	movs	r1, #2
 8015b42:	6878      	ldr	r0, [r7, #4]
 8015b44:	f7ff fdb4 	bl	80156b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	f7f5 fd31 	bl	800b5b0 <pbuf_free>
        break;
 8015b4e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015b50:	4b0b      	ldr	r3, [pc, #44]	; (8015b80 <ip4_input+0x288>)
 8015b52:	2200      	movs	r2, #0
 8015b54:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015b56:	4b0a      	ldr	r3, [pc, #40]	; (8015b80 <ip4_input+0x288>)
 8015b58:	2200      	movs	r2, #0
 8015b5a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015b5c:	4b08      	ldr	r3, [pc, #32]	; (8015b80 <ip4_input+0x288>)
 8015b5e:	2200      	movs	r2, #0
 8015b60:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015b62:	4b07      	ldr	r3, [pc, #28]	; (8015b80 <ip4_input+0x288>)
 8015b64:	2200      	movs	r2, #0
 8015b66:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015b68:	4b05      	ldr	r3, [pc, #20]	; (8015b80 <ip4_input+0x288>)
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015b6e:	4b04      	ldr	r3, [pc, #16]	; (8015b80 <ip4_input+0x288>)
 8015b70:	2200      	movs	r2, #0
 8015b72:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015b74:	2300      	movs	r3, #0
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	3720      	adds	r7, #32
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	bd80      	pop	{r7, pc}
 8015b7e:	bf00      	nop
 8015b80:	20009f28 	.word	0x20009f28
 8015b84:	2000d848 	.word	0x2000d848

08015b88 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b08a      	sub	sp, #40	; 0x28
 8015b8c:	af04      	add	r7, sp, #16
 8015b8e:	60f8      	str	r0, [r7, #12]
 8015b90:	60b9      	str	r1, [r7, #8]
 8015b92:	607a      	str	r2, [r7, #4]
 8015b94:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015b96:	68bb      	ldr	r3, [r7, #8]
 8015b98:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d009      	beq.n	8015bb4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015ba0:	68bb      	ldr	r3, [r7, #8]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d003      	beq.n	8015bae <ip4_output_if+0x26>
 8015ba6:	68bb      	ldr	r3, [r7, #8]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d102      	bne.n	8015bb4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb0:	3304      	adds	r3, #4
 8015bb2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015bb4:	78fa      	ldrb	r2, [r7, #3]
 8015bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bb8:	9302      	str	r3, [sp, #8]
 8015bba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015bbe:	9301      	str	r3, [sp, #4]
 8015bc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015bc4:	9300      	str	r3, [sp, #0]
 8015bc6:	4613      	mov	r3, r2
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	6979      	ldr	r1, [r7, #20]
 8015bcc:	68f8      	ldr	r0, [r7, #12]
 8015bce:	f000 f805 	bl	8015bdc <ip4_output_if_src>
 8015bd2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3718      	adds	r7, #24
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b088      	sub	sp, #32
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	60f8      	str	r0, [r7, #12]
 8015be4:	60b9      	str	r1, [r7, #8]
 8015be6:	607a      	str	r2, [r7, #4]
 8015be8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	7b9b      	ldrb	r3, [r3, #14]
 8015bee:	2b01      	cmp	r3, #1
 8015bf0:	d006      	beq.n	8015c00 <ip4_output_if_src+0x24>
 8015bf2:	4b4d      	ldr	r3, [pc, #308]	; (8015d28 <ip4_output_if_src+0x14c>)
 8015bf4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015bf8:	494c      	ldr	r1, [pc, #304]	; (8015d2c <ip4_output_if_src+0x150>)
 8015bfa:	484d      	ldr	r0, [pc, #308]	; (8015d30 <ip4_output_if_src+0x154>)
 8015bfc:	f001 fcd0 	bl	80175a0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d060      	beq.n	8015cc8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015c06:	2314      	movs	r3, #20
 8015c08:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015c0a:	2114      	movs	r1, #20
 8015c0c:	68f8      	ldr	r0, [r7, #12]
 8015c0e:	f7f5 fc39 	bl	800b484 <pbuf_add_header>
 8015c12:	4603      	mov	r3, r0
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d002      	beq.n	8015c1e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015c18:	f06f 0301 	mvn.w	r3, #1
 8015c1c:	e07f      	b.n	8015d1e <ip4_output_if_src+0x142>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	685b      	ldr	r3, [r3, #4]
 8015c22:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	895b      	ldrh	r3, [r3, #10]
 8015c28:	2b13      	cmp	r3, #19
 8015c2a:	d806      	bhi.n	8015c3a <ip4_output_if_src+0x5e>
 8015c2c:	4b3e      	ldr	r3, [pc, #248]	; (8015d28 <ip4_output_if_src+0x14c>)
 8015c2e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015c32:	4940      	ldr	r1, [pc, #256]	; (8015d34 <ip4_output_if_src+0x158>)
 8015c34:	483e      	ldr	r0, [pc, #248]	; (8015d30 <ip4_output_if_src+0x154>)
 8015c36:	f001 fcb3 	bl	80175a0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015c3a:	69fb      	ldr	r3, [r7, #28]
 8015c3c:	78fa      	ldrb	r2, [r7, #3]
 8015c3e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015c40:	69fb      	ldr	r3, [r7, #28]
 8015c42:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015c46:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681a      	ldr	r2, [r3, #0]
 8015c4c:	69fb      	ldr	r3, [r7, #28]
 8015c4e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015c50:	8b7b      	ldrh	r3, [r7, #26]
 8015c52:	089b      	lsrs	r3, r3, #2
 8015c54:	b29b      	uxth	r3, r3
 8015c56:	b2db      	uxtb	r3, r3
 8015c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c5c:	b2da      	uxtb	r2, r3
 8015c5e:	69fb      	ldr	r3, [r7, #28]
 8015c60:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015c62:	69fb      	ldr	r3, [r7, #28]
 8015c64:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015c68:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	891b      	ldrh	r3, [r3, #8]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7f4 f904 	bl	8009e7c <lwip_htons>
 8015c74:	4603      	mov	r3, r0
 8015c76:	461a      	mov	r2, r3
 8015c78:	69fb      	ldr	r3, [r7, #28]
 8015c7a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015c7c:	69fb      	ldr	r3, [r7, #28]
 8015c7e:	2200      	movs	r2, #0
 8015c80:	719a      	strb	r2, [r3, #6]
 8015c82:	2200      	movs	r2, #0
 8015c84:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015c86:	4b2c      	ldr	r3, [pc, #176]	; (8015d38 <ip4_output_if_src+0x15c>)
 8015c88:	881b      	ldrh	r3, [r3, #0]
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f7f4 f8f6 	bl	8009e7c <lwip_htons>
 8015c90:	4603      	mov	r3, r0
 8015c92:	461a      	mov	r2, r3
 8015c94:	69fb      	ldr	r3, [r7, #28]
 8015c96:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015c98:	4b27      	ldr	r3, [pc, #156]	; (8015d38 <ip4_output_if_src+0x15c>)
 8015c9a:	881b      	ldrh	r3, [r3, #0]
 8015c9c:	3301      	adds	r3, #1
 8015c9e:	b29a      	uxth	r2, r3
 8015ca0:	4b25      	ldr	r3, [pc, #148]	; (8015d38 <ip4_output_if_src+0x15c>)
 8015ca2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015ca4:	68bb      	ldr	r3, [r7, #8]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d104      	bne.n	8015cb4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015caa:	4b24      	ldr	r3, [pc, #144]	; (8015d3c <ip4_output_if_src+0x160>)
 8015cac:	681a      	ldr	r2, [r3, #0]
 8015cae:	69fb      	ldr	r3, [r7, #28]
 8015cb0:	60da      	str	r2, [r3, #12]
 8015cb2:	e003      	b.n	8015cbc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	681a      	ldr	r2, [r3, #0]
 8015cb8:	69fb      	ldr	r3, [r7, #28]
 8015cba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015cbc:	69fb      	ldr	r3, [r7, #28]
 8015cbe:	2200      	movs	r2, #0
 8015cc0:	729a      	strb	r2, [r3, #10]
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	72da      	strb	r2, [r3, #11]
 8015cc6:	e00f      	b.n	8015ce8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	895b      	ldrh	r3, [r3, #10]
 8015ccc:	2b13      	cmp	r3, #19
 8015cce:	d802      	bhi.n	8015cd6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015cd0:	f06f 0301 	mvn.w	r3, #1
 8015cd4:	e023      	b.n	8015d1e <ip4_output_if_src+0x142>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	685b      	ldr	r3, [r3, #4]
 8015cda:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015cdc:	69fb      	ldr	r3, [r7, #28]
 8015cde:	691b      	ldr	r3, [r3, #16]
 8015ce0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015ce2:	f107 0314 	add.w	r3, r7, #20
 8015ce6:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);
 8015ce8:	68f8      	ldr	r0, [r7, #12]
 8015cea:	f000 f829 	bl	8015d40 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d00c      	beq.n	8015d10 <ip4_output_if_src+0x134>
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	891a      	ldrh	r2, [r3, #8]
 8015cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d906      	bls.n	8015d10 <ip4_output_if_src+0x134>
    return ip4_frag(p, netif, dest);
 8015d02:	687a      	ldr	r2, [r7, #4]
 8015d04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015d06:	68f8      	ldr	r0, [r7, #12]
 8015d08:	f000 fd5a 	bl	80167c0 <ip4_frag>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	e006      	b.n	8015d1e <ip4_output_if_src+0x142>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d12:	695b      	ldr	r3, [r3, #20]
 8015d14:	687a      	ldr	r2, [r7, #4]
 8015d16:	68f9      	ldr	r1, [r7, #12]
 8015d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d1a:	4798      	blx	r3
 8015d1c:	4603      	mov	r3, r0
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	3720      	adds	r7, #32
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}
 8015d26:	bf00      	nop
 8015d28:	0801f570 	.word	0x0801f570
 8015d2c:	0801f5a4 	.word	0x0801f5a4
 8015d30:	0801f5b0 	.word	0x0801f5b0
 8015d34:	0801f5d8 	.word	0x0801f5d8
 8015d38:	20001352 	.word	0x20001352
 8015d3c:	08032adc 	.word	0x08032adc

08015d40 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 8015d40:	b480      	push	{r7}
 8015d42:	b085      	sub	sp, #20
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	60fb      	str	r3, [r7, #12]
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
}
 8015d4e:	bf00      	nop
 8015d50:	3714      	adds	r7, #20
 8015d52:	46bd      	mov	sp, r7
 8015d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d58:	4770      	bx	lr

08015d5a <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015d5a:	b480      	push	{r7}
 8015d5c:	b085      	sub	sp, #20
 8015d5e:	af00      	add	r7, sp, #0
 8015d60:	6078      	str	r0, [r7, #4]
 8015d62:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d6e:	d002      	beq.n	8015d76 <ip4_addr_isbroadcast_u32+0x1c>
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d101      	bne.n	8015d7a <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015d76:	2301      	movs	r3, #1
 8015d78:	e02a      	b.n	8015dd0 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015d80:	f003 0302 	and.w	r3, r3, #2
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d101      	bne.n	8015d8c <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015d88:	2300      	movs	r3, #0
 8015d8a:	e021      	b.n	8015dd0 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	3304      	adds	r3, #4
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	687a      	ldr	r2, [r7, #4]
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d101      	bne.n	8015d9c <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	e019      	b.n	8015dd0 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015d9c:	68fa      	ldr	r2, [r7, #12]
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	3304      	adds	r3, #4
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	405a      	eors	r2, r3
 8015da6:	683b      	ldr	r3, [r7, #0]
 8015da8:	3308      	adds	r3, #8
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	4013      	ands	r3, r2
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d10d      	bne.n	8015dce <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015db2:	683b      	ldr	r3, [r7, #0]
 8015db4:	3308      	adds	r3, #8
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	43da      	mvns	r2, r3
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015dbe:	683b      	ldr	r3, [r7, #0]
 8015dc0:	3308      	adds	r3, #8
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d101      	bne.n	8015dce <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015dca:	2301      	movs	r3, #1
 8015dcc:	e000      	b.n	8015dd0 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015dce:	2300      	movs	r3, #0
  }
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	3714      	adds	r7, #20
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dda:	4770      	bx	lr

08015ddc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b084      	sub	sp, #16
 8015de0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015de2:	2300      	movs	r3, #0
 8015de4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015de6:	4b12      	ldr	r3, [pc, #72]	; (8015e30 <ip_reass_tmr+0x54>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015dec:	e018      	b.n	8015e20 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	7fdb      	ldrb	r3, [r3, #31]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d00b      	beq.n	8015e0e <ip_reass_tmr+0x32>
      r->timer--;
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	7fdb      	ldrb	r3, [r3, #31]
 8015dfa:	3b01      	subs	r3, #1
 8015dfc:	b2da      	uxtb	r2, r3
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015e02:	68fb      	ldr	r3, [r7, #12]
 8015e04:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	60fb      	str	r3, [r7, #12]
 8015e0c:	e008      	b.n	8015e20 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015e18:	68b9      	ldr	r1, [r7, #8]
 8015e1a:	6878      	ldr	r0, [r7, #4]
 8015e1c:	f000 f80a 	bl	8015e34 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d1e3      	bne.n	8015dee <ip_reass_tmr+0x12>
    }
  }
}
 8015e26:	bf00      	nop
 8015e28:	bf00      	nop
 8015e2a:	3710      	adds	r7, #16
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}
 8015e30:	20001354 	.word	0x20001354

08015e34 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015e34:	b580      	push	{r7, lr}
 8015e36:	b088      	sub	sp, #32
 8015e38:	af00      	add	r7, sp, #0
 8015e3a:	6078      	str	r0, [r7, #4]
 8015e3c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015e42:	683a      	ldr	r2, [r7, #0]
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	429a      	cmp	r2, r3
 8015e48:	d105      	bne.n	8015e56 <ip_reass_free_complete_datagram+0x22>
 8015e4a:	4b45      	ldr	r3, [pc, #276]	; (8015f60 <ip_reass_free_complete_datagram+0x12c>)
 8015e4c:	22ab      	movs	r2, #171	; 0xab
 8015e4e:	4945      	ldr	r1, [pc, #276]	; (8015f64 <ip_reass_free_complete_datagram+0x130>)
 8015e50:	4845      	ldr	r0, [pc, #276]	; (8015f68 <ip_reass_free_complete_datagram+0x134>)
 8015e52:	f001 fba5 	bl	80175a0 <iprintf>
  if (prev != NULL) {
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d00a      	beq.n	8015e72 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	687a      	ldr	r2, [r7, #4]
 8015e62:	429a      	cmp	r2, r3
 8015e64:	d005      	beq.n	8015e72 <ip_reass_free_complete_datagram+0x3e>
 8015e66:	4b3e      	ldr	r3, [pc, #248]	; (8015f60 <ip_reass_free_complete_datagram+0x12c>)
 8015e68:	22ad      	movs	r2, #173	; 0xad
 8015e6a:	4940      	ldr	r1, [pc, #256]	; (8015f6c <ip_reass_free_complete_datagram+0x138>)
 8015e6c:	483e      	ldr	r0, [pc, #248]	; (8015f68 <ip_reass_free_complete_datagram+0x134>)
 8015e6e:	f001 fb97 	bl	80175a0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	685b      	ldr	r3, [r3, #4]
 8015e76:	685b      	ldr	r3, [r3, #4]
 8015e78:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015e7a:	697b      	ldr	r3, [r7, #20]
 8015e7c:	889b      	ldrh	r3, [r3, #4]
 8015e7e:	b29b      	uxth	r3, r3
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d12a      	bne.n	8015eda <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	685b      	ldr	r3, [r3, #4]
 8015e88:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	681a      	ldr	r2, [r3, #0]
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015e92:	69bb      	ldr	r3, [r7, #24]
 8015e94:	6858      	ldr	r0, [r3, #4]
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	3308      	adds	r3, #8
 8015e9a:	2214      	movs	r2, #20
 8015e9c:	4619      	mov	r1, r3
 8015e9e:	f000 fee5 	bl	8016c6c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015ea2:	2101      	movs	r1, #1
 8015ea4:	69b8      	ldr	r0, [r7, #24]
 8015ea6:	f7ff fc13 	bl	80156d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015eaa:	69b8      	ldr	r0, [r7, #24]
 8015eac:	f7f5 fc08 	bl	800b6c0 <pbuf_clen>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015eb4:	8bfa      	ldrh	r2, [r7, #30]
 8015eb6:	8a7b      	ldrh	r3, [r7, #18]
 8015eb8:	4413      	add	r3, r2
 8015eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ebe:	db05      	blt.n	8015ecc <ip_reass_free_complete_datagram+0x98>
 8015ec0:	4b27      	ldr	r3, [pc, #156]	; (8015f60 <ip_reass_free_complete_datagram+0x12c>)
 8015ec2:	22bc      	movs	r2, #188	; 0xbc
 8015ec4:	492a      	ldr	r1, [pc, #168]	; (8015f70 <ip_reass_free_complete_datagram+0x13c>)
 8015ec6:	4828      	ldr	r0, [pc, #160]	; (8015f68 <ip_reass_free_complete_datagram+0x134>)
 8015ec8:	f001 fb6a 	bl	80175a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015ecc:	8bfa      	ldrh	r2, [r7, #30]
 8015ece:	8a7b      	ldrh	r3, [r7, #18]
 8015ed0:	4413      	add	r3, r2
 8015ed2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015ed4:	69b8      	ldr	r0, [r7, #24]
 8015ed6:	f7f5 fb6b 	bl	800b5b0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	685b      	ldr	r3, [r3, #4]
 8015ede:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015ee0:	e01f      	b.n	8015f22 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015ee2:	69bb      	ldr	r3, [r7, #24]
 8015ee4:	685b      	ldr	r3, [r3, #4]
 8015ee6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015ee8:	69bb      	ldr	r3, [r7, #24]
 8015eea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015eec:	697b      	ldr	r3, [r7, #20]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015ef2:	68f8      	ldr	r0, [r7, #12]
 8015ef4:	f7f5 fbe4 	bl	800b6c0 <pbuf_clen>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015efc:	8bfa      	ldrh	r2, [r7, #30]
 8015efe:	8a7b      	ldrh	r3, [r7, #18]
 8015f00:	4413      	add	r3, r2
 8015f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f06:	db05      	blt.n	8015f14 <ip_reass_free_complete_datagram+0xe0>
 8015f08:	4b15      	ldr	r3, [pc, #84]	; (8015f60 <ip_reass_free_complete_datagram+0x12c>)
 8015f0a:	22cc      	movs	r2, #204	; 0xcc
 8015f0c:	4918      	ldr	r1, [pc, #96]	; (8015f70 <ip_reass_free_complete_datagram+0x13c>)
 8015f0e:	4816      	ldr	r0, [pc, #88]	; (8015f68 <ip_reass_free_complete_datagram+0x134>)
 8015f10:	f001 fb46 	bl	80175a0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015f14:	8bfa      	ldrh	r2, [r7, #30]
 8015f16:	8a7b      	ldrh	r3, [r7, #18]
 8015f18:	4413      	add	r3, r2
 8015f1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015f1c:	68f8      	ldr	r0, [r7, #12]
 8015f1e:	f7f5 fb47 	bl	800b5b0 <pbuf_free>
  while (p != NULL) {
 8015f22:	69bb      	ldr	r3, [r7, #24]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d1dc      	bne.n	8015ee2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015f28:	6839      	ldr	r1, [r7, #0]
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f000 f8c2 	bl	80160b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015f30:	4b10      	ldr	r3, [pc, #64]	; (8015f74 <ip_reass_free_complete_datagram+0x140>)
 8015f32:	881b      	ldrh	r3, [r3, #0]
 8015f34:	8bfa      	ldrh	r2, [r7, #30]
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d905      	bls.n	8015f46 <ip_reass_free_complete_datagram+0x112>
 8015f3a:	4b09      	ldr	r3, [pc, #36]	; (8015f60 <ip_reass_free_complete_datagram+0x12c>)
 8015f3c:	22d2      	movs	r2, #210	; 0xd2
 8015f3e:	490e      	ldr	r1, [pc, #56]	; (8015f78 <ip_reass_free_complete_datagram+0x144>)
 8015f40:	4809      	ldr	r0, [pc, #36]	; (8015f68 <ip_reass_free_complete_datagram+0x134>)
 8015f42:	f001 fb2d 	bl	80175a0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015f46:	4b0b      	ldr	r3, [pc, #44]	; (8015f74 <ip_reass_free_complete_datagram+0x140>)
 8015f48:	881a      	ldrh	r2, [r3, #0]
 8015f4a:	8bfb      	ldrh	r3, [r7, #30]
 8015f4c:	1ad3      	subs	r3, r2, r3
 8015f4e:	b29a      	uxth	r2, r3
 8015f50:	4b08      	ldr	r3, [pc, #32]	; (8015f74 <ip_reass_free_complete_datagram+0x140>)
 8015f52:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015f54:	8bfb      	ldrh	r3, [r7, #30]
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	3720      	adds	r7, #32
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
 8015f5e:	bf00      	nop
 8015f60:	0801f608 	.word	0x0801f608
 8015f64:	0801f644 	.word	0x0801f644
 8015f68:	0801f650 	.word	0x0801f650
 8015f6c:	0801f678 	.word	0x0801f678
 8015f70:	0801f68c 	.word	0x0801f68c
 8015f74:	20001358 	.word	0x20001358
 8015f78:	0801f6ac 	.word	0x0801f6ac

08015f7c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b08a      	sub	sp, #40	; 0x28
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
 8015f84:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015f86:	2300      	movs	r3, #0
 8015f88:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015f8e:	2300      	movs	r3, #0
 8015f90:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015f92:	2300      	movs	r3, #0
 8015f94:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015f96:	2300      	movs	r3, #0
 8015f98:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015f9a:	4b28      	ldr	r3, [pc, #160]	; (801603c <ip_reass_remove_oldest_datagram+0xc0>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015fa0:	e030      	b.n	8016004 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa4:	695a      	ldr	r2, [r3, #20]
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	68db      	ldr	r3, [r3, #12]
 8015faa:	429a      	cmp	r2, r3
 8015fac:	d10c      	bne.n	8015fc8 <ip_reass_remove_oldest_datagram+0x4c>
 8015fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb0:	699a      	ldr	r2, [r3, #24]
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	691b      	ldr	r3, [r3, #16]
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d106      	bne.n	8015fc8 <ip_reass_remove_oldest_datagram+0x4c>
 8015fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fbc:	899a      	ldrh	r2, [r3, #12]
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	889b      	ldrh	r3, [r3, #4]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d014      	beq.n	8015ff2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015fc8:	693b      	ldr	r3, [r7, #16]
 8015fca:	3301      	adds	r3, #1
 8015fcc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015fce:	6a3b      	ldr	r3, [r7, #32]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d104      	bne.n	8015fde <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015fd8:	69fb      	ldr	r3, [r7, #28]
 8015fda:	61bb      	str	r3, [r7, #24]
 8015fdc:	e009      	b.n	8015ff2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe0:	7fda      	ldrb	r2, [r3, #31]
 8015fe2:	6a3b      	ldr	r3, [r7, #32]
 8015fe4:	7fdb      	ldrb	r3, [r3, #31]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d803      	bhi.n	8015ff2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015fee:	69fb      	ldr	r3, [r7, #28]
 8015ff0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d001      	beq.n	8015ffe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016006:	2b00      	cmp	r3, #0
 8016008:	d1cb      	bne.n	8015fa2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801600a:	6a3b      	ldr	r3, [r7, #32]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d008      	beq.n	8016022 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016010:	69b9      	ldr	r1, [r7, #24]
 8016012:	6a38      	ldr	r0, [r7, #32]
 8016014:	f7ff ff0e 	bl	8015e34 <ip_reass_free_complete_datagram>
 8016018:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801601a:	697a      	ldr	r2, [r7, #20]
 801601c:	68fb      	ldr	r3, [r7, #12]
 801601e:	4413      	add	r3, r2
 8016020:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016022:	697a      	ldr	r2, [r7, #20]
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	429a      	cmp	r2, r3
 8016028:	da02      	bge.n	8016030 <ip_reass_remove_oldest_datagram+0xb4>
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	2b01      	cmp	r3, #1
 801602e:	dcac      	bgt.n	8015f8a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016030:	697b      	ldr	r3, [r7, #20]
}
 8016032:	4618      	mov	r0, r3
 8016034:	3728      	adds	r7, #40	; 0x28
 8016036:	46bd      	mov	sp, r7
 8016038:	bd80      	pop	{r7, pc}
 801603a:	bf00      	nop
 801603c:	20001354 	.word	0x20001354

08016040 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b084      	sub	sp, #16
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
 8016048:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801604a:	2004      	movs	r0, #4
 801604c:	f7f4 fc4a 	bl	800a8e4 <memp_malloc>
 8016050:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d110      	bne.n	801607a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016058:	6839      	ldr	r1, [r7, #0]
 801605a:	6878      	ldr	r0, [r7, #4]
 801605c:	f7ff ff8e 	bl	8015f7c <ip_reass_remove_oldest_datagram>
 8016060:	4602      	mov	r2, r0
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	4293      	cmp	r3, r2
 8016066:	dc03      	bgt.n	8016070 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016068:	2004      	movs	r0, #4
 801606a:	f7f4 fc3b 	bl	800a8e4 <memp_malloc>
 801606e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d101      	bne.n	801607a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016076:	2300      	movs	r3, #0
 8016078:	e016      	b.n	80160a8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801607a:	2220      	movs	r2, #32
 801607c:	2100      	movs	r1, #0
 801607e:	68f8      	ldr	r0, [r7, #12]
 8016080:	f000 fe1c 	bl	8016cbc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	220f      	movs	r2, #15
 8016088:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801608a:	4b09      	ldr	r3, [pc, #36]	; (80160b0 <ip_reass_enqueue_new_datagram+0x70>)
 801608c:	681a      	ldr	r2, [r3, #0]
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016092:	4a07      	ldr	r2, [pc, #28]	; (80160b0 <ip_reass_enqueue_new_datagram+0x70>)
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	3308      	adds	r3, #8
 801609c:	2214      	movs	r2, #20
 801609e:	6879      	ldr	r1, [r7, #4]
 80160a0:	4618      	mov	r0, r3
 80160a2:	f000 fde3 	bl	8016c6c <memcpy>
  return ipr;
 80160a6:	68fb      	ldr	r3, [r7, #12]
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3710      	adds	r7, #16
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}
 80160b0:	20001354 	.word	0x20001354

080160b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b082      	sub	sp, #8
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	6078      	str	r0, [r7, #4]
 80160bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80160be:	4b10      	ldr	r3, [pc, #64]	; (8016100 <ip_reass_dequeue_datagram+0x4c>)
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	687a      	ldr	r2, [r7, #4]
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d104      	bne.n	80160d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	4a0c      	ldr	r2, [pc, #48]	; (8016100 <ip_reass_dequeue_datagram+0x4c>)
 80160ce:	6013      	str	r3, [r2, #0]
 80160d0:	e00d      	b.n	80160ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d106      	bne.n	80160e6 <ip_reass_dequeue_datagram+0x32>
 80160d8:	4b0a      	ldr	r3, [pc, #40]	; (8016104 <ip_reass_dequeue_datagram+0x50>)
 80160da:	f240 1245 	movw	r2, #325	; 0x145
 80160de:	490a      	ldr	r1, [pc, #40]	; (8016108 <ip_reass_dequeue_datagram+0x54>)
 80160e0:	480a      	ldr	r0, [pc, #40]	; (801610c <ip_reass_dequeue_datagram+0x58>)
 80160e2:	f001 fa5d 	bl	80175a0 <iprintf>
    prev->next = ipr->next;
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	681a      	ldr	r2, [r3, #0]
 80160ea:	683b      	ldr	r3, [r7, #0]
 80160ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80160ee:	6879      	ldr	r1, [r7, #4]
 80160f0:	2004      	movs	r0, #4
 80160f2:	f7f4 fc43 	bl	800a97c <memp_free>
}
 80160f6:	bf00      	nop
 80160f8:	3708      	adds	r7, #8
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}
 80160fe:	bf00      	nop
 8016100:	20001354 	.word	0x20001354
 8016104:	0801f608 	.word	0x0801f608
 8016108:	0801f6d0 	.word	0x0801f6d0
 801610c:	0801f650 	.word	0x0801f650

08016110 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b08c      	sub	sp, #48	; 0x30
 8016114:	af00      	add	r7, sp, #0
 8016116:	60f8      	str	r0, [r7, #12]
 8016118:	60b9      	str	r1, [r7, #8]
 801611a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801611c:	2300      	movs	r3, #0
 801611e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016120:	2301      	movs	r3, #1
 8016122:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016124:	68bb      	ldr	r3, [r7, #8]
 8016126:	685b      	ldr	r3, [r3, #4]
 8016128:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801612a:	69fb      	ldr	r3, [r7, #28]
 801612c:	885b      	ldrh	r3, [r3, #2]
 801612e:	b29b      	uxth	r3, r3
 8016130:	4618      	mov	r0, r3
 8016132:	f7f3 fea3 	bl	8009e7c <lwip_htons>
 8016136:	4603      	mov	r3, r0
 8016138:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801613a:	69fb      	ldr	r3, [r7, #28]
 801613c:	781b      	ldrb	r3, [r3, #0]
 801613e:	f003 030f 	and.w	r3, r3, #15
 8016142:	b2db      	uxtb	r3, r3
 8016144:	009b      	lsls	r3, r3, #2
 8016146:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016148:	7e7b      	ldrb	r3, [r7, #25]
 801614a:	b29b      	uxth	r3, r3
 801614c:	8b7a      	ldrh	r2, [r7, #26]
 801614e:	429a      	cmp	r2, r3
 8016150:	d202      	bcs.n	8016158 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016156:	e135      	b.n	80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016158:	7e7b      	ldrb	r3, [r7, #25]
 801615a:	b29b      	uxth	r3, r3
 801615c:	8b7a      	ldrh	r2, [r7, #26]
 801615e:	1ad3      	subs	r3, r2, r3
 8016160:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016162:	69fb      	ldr	r3, [r7, #28]
 8016164:	88db      	ldrh	r3, [r3, #6]
 8016166:	b29b      	uxth	r3, r3
 8016168:	4618      	mov	r0, r3
 801616a:	f7f3 fe87 	bl	8009e7c <lwip_htons>
 801616e:	4603      	mov	r3, r0
 8016170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016174:	b29b      	uxth	r3, r3
 8016176:	00db      	lsls	r3, r3, #3
 8016178:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801617a:	68bb      	ldr	r3, [r7, #8]
 801617c:	685b      	ldr	r3, [r3, #4]
 801617e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016182:	2200      	movs	r2, #0
 8016184:	701a      	strb	r2, [r3, #0]
 8016186:	2200      	movs	r2, #0
 8016188:	705a      	strb	r2, [r3, #1]
 801618a:	2200      	movs	r2, #0
 801618c:	709a      	strb	r2, [r3, #2]
 801618e:	2200      	movs	r2, #0
 8016190:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016194:	8afa      	ldrh	r2, [r7, #22]
 8016196:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016198:	8afa      	ldrh	r2, [r7, #22]
 801619a:	8b7b      	ldrh	r3, [r7, #26]
 801619c:	4413      	add	r3, r2
 801619e:	b29a      	uxth	r2, r3
 80161a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80161a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a6:	88db      	ldrh	r3, [r3, #6]
 80161a8:	b29b      	uxth	r3, r3
 80161aa:	8afa      	ldrh	r2, [r7, #22]
 80161ac:	429a      	cmp	r2, r3
 80161ae:	d902      	bls.n	80161b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161b4:	e106      	b.n	80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	685b      	ldr	r3, [r3, #4]
 80161ba:	627b      	str	r3, [r7, #36]	; 0x24
 80161bc:	e068      	b.n	8016290 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80161be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c0:	685b      	ldr	r3, [r3, #4]
 80161c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80161c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c6:	889b      	ldrh	r3, [r3, #4]
 80161c8:	b29a      	uxth	r2, r3
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	889b      	ldrh	r3, [r3, #4]
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d235      	bcs.n	8016240 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80161d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80161da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d020      	beq.n	8016222 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80161e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161e2:	889b      	ldrh	r3, [r3, #4]
 80161e4:	b29a      	uxth	r2, r3
 80161e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e8:	88db      	ldrh	r3, [r3, #6]
 80161ea:	b29b      	uxth	r3, r3
 80161ec:	429a      	cmp	r2, r3
 80161ee:	d307      	bcc.n	8016200 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80161f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f2:	88db      	ldrh	r3, [r3, #6]
 80161f4:	b29a      	uxth	r2, r3
 80161f6:	693b      	ldr	r3, [r7, #16]
 80161f8:	889b      	ldrh	r3, [r3, #4]
 80161fa:	b29b      	uxth	r3, r3
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d902      	bls.n	8016206 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016204:	e0de      	b.n	80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016208:	68ba      	ldr	r2, [r7, #8]
 801620a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620e:	88db      	ldrh	r3, [r3, #6]
 8016210:	b29a      	uxth	r2, r3
 8016212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016214:	889b      	ldrh	r3, [r3, #4]
 8016216:	b29b      	uxth	r3, r3
 8016218:	429a      	cmp	r2, r3
 801621a:	d03d      	beq.n	8016298 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801621c:	2300      	movs	r3, #0
 801621e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016220:	e03a      	b.n	8016298 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016224:	88db      	ldrh	r3, [r3, #6]
 8016226:	b29a      	uxth	r2, r3
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	889b      	ldrh	r3, [r3, #4]
 801622c:	b29b      	uxth	r3, r3
 801622e:	429a      	cmp	r2, r3
 8016230:	d902      	bls.n	8016238 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016232:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016236:	e0c5      	b.n	80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	68ba      	ldr	r2, [r7, #8]
 801623c:	605a      	str	r2, [r3, #4]
      break;
 801623e:	e02b      	b.n	8016298 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016242:	889b      	ldrh	r3, [r3, #4]
 8016244:	b29a      	uxth	r2, r3
 8016246:	693b      	ldr	r3, [r7, #16]
 8016248:	889b      	ldrh	r3, [r3, #4]
 801624a:	b29b      	uxth	r3, r3
 801624c:	429a      	cmp	r2, r3
 801624e:	d102      	bne.n	8016256 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016254:	e0b6      	b.n	80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016258:	889b      	ldrh	r3, [r3, #4]
 801625a:	b29a      	uxth	r2, r3
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	88db      	ldrh	r3, [r3, #6]
 8016260:	b29b      	uxth	r3, r3
 8016262:	429a      	cmp	r2, r3
 8016264:	d202      	bcs.n	801626c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801626a:	e0ab      	b.n	80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801626e:	2b00      	cmp	r3, #0
 8016270:	d009      	beq.n	8016286 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016274:	88db      	ldrh	r3, [r3, #6]
 8016276:	b29a      	uxth	r2, r3
 8016278:	693b      	ldr	r3, [r7, #16]
 801627a:	889b      	ldrh	r3, [r3, #4]
 801627c:	b29b      	uxth	r3, r3
 801627e:	429a      	cmp	r2, r3
 8016280:	d001      	beq.n	8016286 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016282:	2300      	movs	r3, #0
 8016284:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016286:	693b      	ldr	r3, [r7, #16]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801628c:	693b      	ldr	r3, [r7, #16]
 801628e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016292:	2b00      	cmp	r3, #0
 8016294:	d193      	bne.n	80161be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016296:	e000      	b.n	801629a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016298:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629c:	2b00      	cmp	r3, #0
 801629e:	d12d      	bne.n	80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80162a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d01c      	beq.n	80162e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80162a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a8:	88db      	ldrh	r3, [r3, #6]
 80162aa:	b29a      	uxth	r2, r3
 80162ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ae:	889b      	ldrh	r3, [r3, #4]
 80162b0:	b29b      	uxth	r3, r3
 80162b2:	429a      	cmp	r2, r3
 80162b4:	d906      	bls.n	80162c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80162b6:	4b45      	ldr	r3, [pc, #276]	; (80163cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162b8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80162bc:	4944      	ldr	r1, [pc, #272]	; (80163d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80162be:	4845      	ldr	r0, [pc, #276]	; (80163d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162c0:	f001 f96e 	bl	80175a0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80162c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c6:	68ba      	ldr	r2, [r7, #8]
 80162c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80162ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162cc:	88db      	ldrh	r3, [r3, #6]
 80162ce:	b29a      	uxth	r2, r3
 80162d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162d2:	889b      	ldrh	r3, [r3, #4]
 80162d4:	b29b      	uxth	r3, r3
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d010      	beq.n	80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80162da:	2300      	movs	r3, #0
 80162dc:	623b      	str	r3, [r7, #32]
 80162de:	e00d      	b.n	80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d006      	beq.n	80162f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80162e8:	4b38      	ldr	r3, [pc, #224]	; (80163cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162ea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80162ee:	493a      	ldr	r1, [pc, #232]	; (80163d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80162f0:	4838      	ldr	r0, [pc, #224]	; (80163d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162f2:	f001 f955 	bl	80175a0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	68ba      	ldr	r2, [r7, #8]
 80162fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d105      	bne.n	801630e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	7f9b      	ldrb	r3, [r3, #30]
 8016306:	f003 0301 	and.w	r3, r3, #1
 801630a:	2b00      	cmp	r3, #0
 801630c:	d059      	beq.n	80163c2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801630e:	6a3b      	ldr	r3, [r7, #32]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d04f      	beq.n	80163b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	685b      	ldr	r3, [r3, #4]
 8016318:	2b00      	cmp	r3, #0
 801631a:	d006      	beq.n	801632a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	685b      	ldr	r3, [r3, #4]
 8016320:	685b      	ldr	r3, [r3, #4]
 8016322:	889b      	ldrh	r3, [r3, #4]
 8016324:	b29b      	uxth	r3, r3
 8016326:	2b00      	cmp	r3, #0
 8016328:	d002      	beq.n	8016330 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801632a:	2300      	movs	r3, #0
 801632c:	623b      	str	r3, [r7, #32]
 801632e:	e041      	b.n	80163b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016332:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801633a:	e012      	b.n	8016362 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801633e:	685b      	ldr	r3, [r3, #4]
 8016340:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016344:	88db      	ldrh	r3, [r3, #6]
 8016346:	b29a      	uxth	r2, r3
 8016348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801634a:	889b      	ldrh	r3, [r3, #4]
 801634c:	b29b      	uxth	r3, r3
 801634e:	429a      	cmp	r2, r3
 8016350:	d002      	beq.n	8016358 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016352:	2300      	movs	r3, #0
 8016354:	623b      	str	r3, [r7, #32]
            break;
 8016356:	e007      	b.n	8016368 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801635a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016364:	2b00      	cmp	r3, #0
 8016366:	d1e9      	bne.n	801633c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016368:	6a3b      	ldr	r3, [r7, #32]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d022      	beq.n	80163b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	685b      	ldr	r3, [r3, #4]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d106      	bne.n	8016384 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016376:	4b15      	ldr	r3, [pc, #84]	; (80163cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016378:	f240 12df 	movw	r2, #479	; 0x1df
 801637c:	4917      	ldr	r1, [pc, #92]	; (80163dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801637e:	4815      	ldr	r0, [pc, #84]	; (80163d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016380:	f001 f90e 	bl	80175a0 <iprintf>
          LWIP_ASSERT("sanity check",
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	685b      	ldr	r3, [r3, #4]
 8016388:	685b      	ldr	r3, [r3, #4]
 801638a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801638c:	429a      	cmp	r2, r3
 801638e:	d106      	bne.n	801639e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016390:	4b0e      	ldr	r3, [pc, #56]	; (80163cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016392:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016396:	4911      	ldr	r1, [pc, #68]	; (80163dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016398:	480e      	ldr	r0, [pc, #56]	; (80163d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801639a:	f001 f901 	bl	80175a0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d006      	beq.n	80163b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80163a6:	4b09      	ldr	r3, [pc, #36]	; (80163cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80163a8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80163ac:	490c      	ldr	r1, [pc, #48]	; (80163e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80163ae:	4809      	ldr	r0, [pc, #36]	; (80163d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80163b0:	f001 f8f6 	bl	80175a0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80163b4:	6a3b      	ldr	r3, [r7, #32]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	bf14      	ite	ne
 80163ba:	2301      	movne	r3, #1
 80163bc:	2300      	moveq	r3, #0
 80163be:	b2db      	uxtb	r3, r3
 80163c0:	e000      	b.n	80163c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80163c2:	2300      	movs	r3, #0
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	3730      	adds	r7, #48	; 0x30
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}
 80163cc:	0801f608 	.word	0x0801f608
 80163d0:	0801f6ec 	.word	0x0801f6ec
 80163d4:	0801f650 	.word	0x0801f650
 80163d8:	0801f70c 	.word	0x0801f70c
 80163dc:	0801f744 	.word	0x0801f744
 80163e0:	0801f754 	.word	0x0801f754

080163e4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b08e      	sub	sp, #56	; 0x38
 80163e8:	af00      	add	r7, sp, #0
 80163ea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	685b      	ldr	r3, [r3, #4]
 80163f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80163f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	f003 030f 	and.w	r3, r3, #15
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	009b      	lsls	r3, r3, #2
 80163fe:	b2db      	uxtb	r3, r3
 8016400:	2b14      	cmp	r3, #20
 8016402:	f040 8167 	bne.w	80166d4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016408:	88db      	ldrh	r3, [r3, #6]
 801640a:	b29b      	uxth	r3, r3
 801640c:	4618      	mov	r0, r3
 801640e:	f7f3 fd35 	bl	8009e7c <lwip_htons>
 8016412:	4603      	mov	r3, r0
 8016414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016418:	b29b      	uxth	r3, r3
 801641a:	00db      	lsls	r3, r3, #3
 801641c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016420:	885b      	ldrh	r3, [r3, #2]
 8016422:	b29b      	uxth	r3, r3
 8016424:	4618      	mov	r0, r3
 8016426:	f7f3 fd29 	bl	8009e7c <lwip_htons>
 801642a:	4603      	mov	r3, r0
 801642c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016430:	781b      	ldrb	r3, [r3, #0]
 8016432:	f003 030f 	and.w	r3, r3, #15
 8016436:	b2db      	uxtb	r3, r3
 8016438:	009b      	lsls	r3, r3, #2
 801643a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801643e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016442:	b29b      	uxth	r3, r3
 8016444:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016446:	429a      	cmp	r2, r3
 8016448:	f0c0 8146 	bcc.w	80166d8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801644c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016450:	b29b      	uxth	r3, r3
 8016452:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016454:	1ad3      	subs	r3, r2, r3
 8016456:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016458:	6878      	ldr	r0, [r7, #4]
 801645a:	f7f5 f931 	bl	800b6c0 <pbuf_clen>
 801645e:	4603      	mov	r3, r0
 8016460:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016462:	4b9f      	ldr	r3, [pc, #636]	; (80166e0 <ip4_reass+0x2fc>)
 8016464:	881b      	ldrh	r3, [r3, #0]
 8016466:	461a      	mov	r2, r3
 8016468:	8c3b      	ldrh	r3, [r7, #32]
 801646a:	4413      	add	r3, r2
 801646c:	2b0a      	cmp	r3, #10
 801646e:	dd10      	ble.n	8016492 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016470:	8c3b      	ldrh	r3, [r7, #32]
 8016472:	4619      	mov	r1, r3
 8016474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016476:	f7ff fd81 	bl	8015f7c <ip_reass_remove_oldest_datagram>
 801647a:	4603      	mov	r3, r0
 801647c:	2b00      	cmp	r3, #0
 801647e:	f000 812d 	beq.w	80166dc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016482:	4b97      	ldr	r3, [pc, #604]	; (80166e0 <ip4_reass+0x2fc>)
 8016484:	881b      	ldrh	r3, [r3, #0]
 8016486:	461a      	mov	r2, r3
 8016488:	8c3b      	ldrh	r3, [r7, #32]
 801648a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801648c:	2b0a      	cmp	r3, #10
 801648e:	f300 8125 	bgt.w	80166dc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016492:	4b94      	ldr	r3, [pc, #592]	; (80166e4 <ip4_reass+0x300>)
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	633b      	str	r3, [r7, #48]	; 0x30
 8016498:	e015      	b.n	80164c6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801649c:	695a      	ldr	r2, [r3, #20]
 801649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164a0:	68db      	ldr	r3, [r3, #12]
 80164a2:	429a      	cmp	r2, r3
 80164a4:	d10c      	bne.n	80164c0 <ip4_reass+0xdc>
 80164a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a8:	699a      	ldr	r2, [r3, #24]
 80164aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ac:	691b      	ldr	r3, [r3, #16]
 80164ae:	429a      	cmp	r2, r3
 80164b0:	d106      	bne.n	80164c0 <ip4_reass+0xdc>
 80164b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b4:	899a      	ldrh	r2, [r3, #12]
 80164b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164b8:	889b      	ldrh	r3, [r3, #4]
 80164ba:	b29b      	uxth	r3, r3
 80164bc:	429a      	cmp	r2, r3
 80164be:	d006      	beq.n	80164ce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80164c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	633b      	str	r3, [r7, #48]	; 0x30
 80164c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d1e6      	bne.n	801649a <ip4_reass+0xb6>
 80164cc:	e000      	b.n	80164d0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80164ce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80164d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d109      	bne.n	80164ea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80164d6:	8c3b      	ldrh	r3, [r7, #32]
 80164d8:	4619      	mov	r1, r3
 80164da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164dc:	f7ff fdb0 	bl	8016040 <ip_reass_enqueue_new_datagram>
 80164e0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80164e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d11c      	bne.n	8016522 <ip4_reass+0x13e>
      goto nullreturn;
 80164e8:	e109      	b.n	80166fe <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80164ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164ec:	88db      	ldrh	r3, [r3, #6]
 80164ee:	b29b      	uxth	r3, r3
 80164f0:	4618      	mov	r0, r3
 80164f2:	f7f3 fcc3 	bl	8009e7c <lwip_htons>
 80164f6:	4603      	mov	r3, r0
 80164f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d110      	bne.n	8016522 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016502:	89db      	ldrh	r3, [r3, #14]
 8016504:	4618      	mov	r0, r3
 8016506:	f7f3 fcb9 	bl	8009e7c <lwip_htons>
 801650a:	4603      	mov	r3, r0
 801650c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016510:	2b00      	cmp	r3, #0
 8016512:	d006      	beq.n	8016522 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016516:	3308      	adds	r3, #8
 8016518:	2214      	movs	r2, #20
 801651a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801651c:	4618      	mov	r0, r3
 801651e:	f000 fba5 	bl	8016c6c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016524:	88db      	ldrh	r3, [r3, #6]
 8016526:	b29b      	uxth	r3, r3
 8016528:	f003 0320 	and.w	r3, r3, #32
 801652c:	2b00      	cmp	r3, #0
 801652e:	bf0c      	ite	eq
 8016530:	2301      	moveq	r3, #1
 8016532:	2300      	movne	r3, #0
 8016534:	b2db      	uxtb	r3, r3
 8016536:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016538:	69fb      	ldr	r3, [r7, #28]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d00e      	beq.n	801655c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801653e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016542:	4413      	add	r3, r2
 8016544:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016546:	8b7a      	ldrh	r2, [r7, #26]
 8016548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801654a:	429a      	cmp	r2, r3
 801654c:	f0c0 80a0 	bcc.w	8016690 <ip4_reass+0x2ac>
 8016550:	8b7b      	ldrh	r3, [r7, #26]
 8016552:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016556:	4293      	cmp	r3, r2
 8016558:	f200 809a 	bhi.w	8016690 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801655c:	69fa      	ldr	r2, [r7, #28]
 801655e:	6879      	ldr	r1, [r7, #4]
 8016560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016562:	f7ff fdd5 	bl	8016110 <ip_reass_chain_frag_into_datagram_and_validate>
 8016566:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016568:	697b      	ldr	r3, [r7, #20]
 801656a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801656e:	f000 8091 	beq.w	8016694 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016572:	4b5b      	ldr	r3, [pc, #364]	; (80166e0 <ip4_reass+0x2fc>)
 8016574:	881a      	ldrh	r2, [r3, #0]
 8016576:	8c3b      	ldrh	r3, [r7, #32]
 8016578:	4413      	add	r3, r2
 801657a:	b29a      	uxth	r2, r3
 801657c:	4b58      	ldr	r3, [pc, #352]	; (80166e0 <ip4_reass+0x2fc>)
 801657e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016580:	69fb      	ldr	r3, [r7, #28]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d00d      	beq.n	80165a2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016586:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801658a:	4413      	add	r3, r2
 801658c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016590:	8a7a      	ldrh	r2, [r7, #18]
 8016592:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016596:	7f9b      	ldrb	r3, [r3, #30]
 8016598:	f043 0301 	orr.w	r3, r3, #1
 801659c:	b2da      	uxtb	r2, r3
 801659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80165a2:	697b      	ldr	r3, [r7, #20]
 80165a4:	2b01      	cmp	r3, #1
 80165a6:	d171      	bne.n	801668c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80165a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165aa:	8b9b      	ldrh	r3, [r3, #28]
 80165ac:	3314      	adds	r3, #20
 80165ae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80165b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165b2:	685b      	ldr	r3, [r3, #4]
 80165b4:	685b      	ldr	r3, [r3, #4]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80165ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	685b      	ldr	r3, [r3, #4]
 80165c0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80165c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c4:	3308      	adds	r3, #8
 80165c6:	2214      	movs	r2, #20
 80165c8:	4619      	mov	r1, r3
 80165ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165cc:	f000 fb4e 	bl	8016c6c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80165d0:	8a3b      	ldrh	r3, [r7, #16]
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7f3 fc52 	bl	8009e7c <lwip_htons>
 80165d8:	4603      	mov	r3, r0
 80165da:	461a      	mov	r2, r3
 80165dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80165e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e2:	2200      	movs	r2, #0
 80165e4:	719a      	strb	r2, [r3, #6]
 80165e6:	2200      	movs	r2, #0
 80165e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80165ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ec:	2200      	movs	r2, #0
 80165ee:	729a      	strb	r2, [r3, #10]
 80165f0:	2200      	movs	r2, #0
 80165f2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80165f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f6:	685b      	ldr	r3, [r3, #4]
 80165f8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80165fa:	e00d      	b.n	8016618 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80165fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165fe:	685b      	ldr	r3, [r3, #4]
 8016600:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016602:	2114      	movs	r1, #20
 8016604:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016606:	f7f4 ff4d 	bl	800b4a4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801660a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801660c:	6878      	ldr	r0, [r7, #4]
 801660e:	f7f5 f891 	bl	800b734 <pbuf_cat>
      r = iprh->next_pbuf;
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801661a:	2b00      	cmp	r3, #0
 801661c:	d1ee      	bne.n	80165fc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801661e:	4b31      	ldr	r3, [pc, #196]	; (80166e4 <ip4_reass+0x300>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016624:	429a      	cmp	r2, r3
 8016626:	d102      	bne.n	801662e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016628:	2300      	movs	r3, #0
 801662a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801662c:	e010      	b.n	8016650 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801662e:	4b2d      	ldr	r3, [pc, #180]	; (80166e4 <ip4_reass+0x300>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016634:	e007      	b.n	8016646 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801663c:	429a      	cmp	r2, r3
 801663e:	d006      	beq.n	801664e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016648:	2b00      	cmp	r3, #0
 801664a:	d1f4      	bne.n	8016636 <ip4_reass+0x252>
 801664c:	e000      	b.n	8016650 <ip4_reass+0x26c>
          break;
 801664e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016654:	f7ff fd2e 	bl	80160b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016658:	6878      	ldr	r0, [r7, #4]
 801665a:	f7f5 f831 	bl	800b6c0 <pbuf_clen>
 801665e:	4603      	mov	r3, r0
 8016660:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016662:	4b1f      	ldr	r3, [pc, #124]	; (80166e0 <ip4_reass+0x2fc>)
 8016664:	881b      	ldrh	r3, [r3, #0]
 8016666:	8c3a      	ldrh	r2, [r7, #32]
 8016668:	429a      	cmp	r2, r3
 801666a:	d906      	bls.n	801667a <ip4_reass+0x296>
 801666c:	4b1e      	ldr	r3, [pc, #120]	; (80166e8 <ip4_reass+0x304>)
 801666e:	f240 229b 	movw	r2, #667	; 0x29b
 8016672:	491e      	ldr	r1, [pc, #120]	; (80166ec <ip4_reass+0x308>)
 8016674:	481e      	ldr	r0, [pc, #120]	; (80166f0 <ip4_reass+0x30c>)
 8016676:	f000 ff93 	bl	80175a0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801667a:	4b19      	ldr	r3, [pc, #100]	; (80166e0 <ip4_reass+0x2fc>)
 801667c:	881a      	ldrh	r2, [r3, #0]
 801667e:	8c3b      	ldrh	r3, [r7, #32]
 8016680:	1ad3      	subs	r3, r2, r3
 8016682:	b29a      	uxth	r2, r3
 8016684:	4b16      	ldr	r3, [pc, #88]	; (80166e0 <ip4_reass+0x2fc>)
 8016686:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	e03c      	b.n	8016706 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801668c:	2300      	movs	r3, #0
 801668e:	e03a      	b.n	8016706 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016690:	bf00      	nop
 8016692:	e000      	b.n	8016696 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016694:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016698:	2b00      	cmp	r3, #0
 801669a:	d106      	bne.n	80166aa <ip4_reass+0x2c6>
 801669c:	4b12      	ldr	r3, [pc, #72]	; (80166e8 <ip4_reass+0x304>)
 801669e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80166a2:	4914      	ldr	r1, [pc, #80]	; (80166f4 <ip4_reass+0x310>)
 80166a4:	4812      	ldr	r0, [pc, #72]	; (80166f0 <ip4_reass+0x30c>)
 80166a6:	f000 ff7b 	bl	80175a0 <iprintf>
  if (ipr->p == NULL) {
 80166aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ac:	685b      	ldr	r3, [r3, #4]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d124      	bne.n	80166fc <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80166b2:	4b0c      	ldr	r3, [pc, #48]	; (80166e4 <ip4_reass+0x300>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166b8:	429a      	cmp	r2, r3
 80166ba:	d006      	beq.n	80166ca <ip4_reass+0x2e6>
 80166bc:	4b0a      	ldr	r3, [pc, #40]	; (80166e8 <ip4_reass+0x304>)
 80166be:	f240 22ab 	movw	r2, #683	; 0x2ab
 80166c2:	490d      	ldr	r1, [pc, #52]	; (80166f8 <ip4_reass+0x314>)
 80166c4:	480a      	ldr	r0, [pc, #40]	; (80166f0 <ip4_reass+0x30c>)
 80166c6:	f000 ff6b 	bl	80175a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80166ca:	2100      	movs	r1, #0
 80166cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80166ce:	f7ff fcf1 	bl	80160b4 <ip_reass_dequeue_datagram>
 80166d2:	e014      	b.n	80166fe <ip4_reass+0x31a>
    goto nullreturn;
 80166d4:	bf00      	nop
 80166d6:	e012      	b.n	80166fe <ip4_reass+0x31a>
    goto nullreturn;
 80166d8:	bf00      	nop
 80166da:	e010      	b.n	80166fe <ip4_reass+0x31a>
      goto nullreturn;
 80166dc:	bf00      	nop
 80166de:	e00e      	b.n	80166fe <ip4_reass+0x31a>
 80166e0:	20001358 	.word	0x20001358
 80166e4:	20001354 	.word	0x20001354
 80166e8:	0801f608 	.word	0x0801f608
 80166ec:	0801f778 	.word	0x0801f778
 80166f0:	0801f650 	.word	0x0801f650
 80166f4:	0801f794 	.word	0x0801f794
 80166f8:	0801f7a0 	.word	0x0801f7a0
  }

nullreturn:
 80166fc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	f7f4 ff56 	bl	800b5b0 <pbuf_free>
  return NULL;
 8016704:	2300      	movs	r3, #0
}
 8016706:	4618      	mov	r0, r3
 8016708:	3738      	adds	r7, #56	; 0x38
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}
 801670e:	bf00      	nop

08016710 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016714:	2005      	movs	r0, #5
 8016716:	f7f4 f8e5 	bl	800a8e4 <memp_malloc>
 801671a:	4603      	mov	r3, r0
}
 801671c:	4618      	mov	r0, r3
 801671e:	bd80      	pop	{r7, pc}

08016720 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b082      	sub	sp, #8
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d106      	bne.n	801673c <ip_frag_free_pbuf_custom_ref+0x1c>
 801672e:	4b07      	ldr	r3, [pc, #28]	; (801674c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016730:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016734:	4906      	ldr	r1, [pc, #24]	; (8016750 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016736:	4807      	ldr	r0, [pc, #28]	; (8016754 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016738:	f000 ff32 	bl	80175a0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801673c:	6879      	ldr	r1, [r7, #4]
 801673e:	2005      	movs	r0, #5
 8016740:	f7f4 f91c 	bl	800a97c <memp_free>
}
 8016744:	bf00      	nop
 8016746:	3708      	adds	r7, #8
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	0801f608 	.word	0x0801f608
 8016750:	0801f7c0 	.word	0x0801f7c0
 8016754:	0801f650 	.word	0x0801f650

08016758 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b084      	sub	sp, #16
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d106      	bne.n	8016778 <ipfrag_free_pbuf_custom+0x20>
 801676a:	4b11      	ldr	r3, [pc, #68]	; (80167b0 <ipfrag_free_pbuf_custom+0x58>)
 801676c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016770:	4910      	ldr	r1, [pc, #64]	; (80167b4 <ipfrag_free_pbuf_custom+0x5c>)
 8016772:	4811      	ldr	r0, [pc, #68]	; (80167b8 <ipfrag_free_pbuf_custom+0x60>)
 8016774:	f000 ff14 	bl	80175a0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016778:	68fa      	ldr	r2, [r7, #12]
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	429a      	cmp	r2, r3
 801677e:	d006      	beq.n	801678e <ipfrag_free_pbuf_custom+0x36>
 8016780:	4b0b      	ldr	r3, [pc, #44]	; (80167b0 <ipfrag_free_pbuf_custom+0x58>)
 8016782:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016786:	490d      	ldr	r1, [pc, #52]	; (80167bc <ipfrag_free_pbuf_custom+0x64>)
 8016788:	480b      	ldr	r0, [pc, #44]	; (80167b8 <ipfrag_free_pbuf_custom+0x60>)
 801678a:	f000 ff09 	bl	80175a0 <iprintf>
  if (pcr->original != NULL) {
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	695b      	ldr	r3, [r3, #20]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d004      	beq.n	80167a0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	695b      	ldr	r3, [r3, #20]
 801679a:	4618      	mov	r0, r3
 801679c:	f7f4 ff08 	bl	800b5b0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80167a0:	68f8      	ldr	r0, [r7, #12]
 80167a2:	f7ff ffbd 	bl	8016720 <ip_frag_free_pbuf_custom_ref>
}
 80167a6:	bf00      	nop
 80167a8:	3710      	adds	r7, #16
 80167aa:	46bd      	mov	sp, r7
 80167ac:	bd80      	pop	{r7, pc}
 80167ae:	bf00      	nop
 80167b0:	0801f608 	.word	0x0801f608
 80167b4:	0801f7cc 	.word	0x0801f7cc
 80167b8:	0801f650 	.word	0x0801f650
 80167bc:	0801f7d8 	.word	0x0801f7d8

080167c0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b094      	sub	sp, #80	; 0x50
 80167c4:	af02      	add	r7, sp, #8
 80167c6:	60f8      	str	r0, [r7, #12]
 80167c8:	60b9      	str	r1, [r7, #8]
 80167ca:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80167cc:	2300      	movs	r3, #0
 80167ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80167d2:	68bb      	ldr	r3, [r7, #8]
 80167d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80167d6:	3b14      	subs	r3, #20
 80167d8:	2b00      	cmp	r3, #0
 80167da:	da00      	bge.n	80167de <ip4_frag+0x1e>
 80167dc:	3307      	adds	r3, #7
 80167de:	10db      	asrs	r3, r3, #3
 80167e0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80167e2:	2314      	movs	r3, #20
 80167e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	685b      	ldr	r3, [r3, #4]
 80167ea:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80167ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167ee:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80167f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167f2:	781b      	ldrb	r3, [r3, #0]
 80167f4:	f003 030f 	and.w	r3, r3, #15
 80167f8:	b2db      	uxtb	r3, r3
 80167fa:	009b      	lsls	r3, r3, #2
 80167fc:	b2db      	uxtb	r3, r3
 80167fe:	2b14      	cmp	r3, #20
 8016800:	d002      	beq.n	8016808 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016802:	f06f 0305 	mvn.w	r3, #5
 8016806:	e110      	b.n	8016a2a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	895b      	ldrh	r3, [r3, #10]
 801680c:	2b13      	cmp	r3, #19
 801680e:	d809      	bhi.n	8016824 <ip4_frag+0x64>
 8016810:	4b88      	ldr	r3, [pc, #544]	; (8016a34 <ip4_frag+0x274>)
 8016812:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016816:	4988      	ldr	r1, [pc, #544]	; (8016a38 <ip4_frag+0x278>)
 8016818:	4888      	ldr	r0, [pc, #544]	; (8016a3c <ip4_frag+0x27c>)
 801681a:	f000 fec1 	bl	80175a0 <iprintf>
 801681e:	f06f 0305 	mvn.w	r3, #5
 8016822:	e102      	b.n	8016a2a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016826:	88db      	ldrh	r3, [r3, #6]
 8016828:	b29b      	uxth	r3, r3
 801682a:	4618      	mov	r0, r3
 801682c:	f7f3 fb26 	bl	8009e7c <lwip_htons>
 8016830:	4603      	mov	r3, r0
 8016832:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016834:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016836:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801683a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801683e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016844:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	891b      	ldrh	r3, [r3, #8]
 801684a:	3b14      	subs	r3, #20
 801684c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016850:	e0e1      	b.n	8016a16 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016852:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016854:	00db      	lsls	r3, r3, #3
 8016856:	b29b      	uxth	r3, r3
 8016858:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801685c:	4293      	cmp	r3, r2
 801685e:	bf28      	it	cs
 8016860:	4613      	movcs	r3, r2
 8016862:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016864:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016868:	2114      	movs	r1, #20
 801686a:	200e      	movs	r0, #14
 801686c:	f7f4 fbbc 	bl	800afe8 <pbuf_alloc>
 8016870:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016874:	2b00      	cmp	r3, #0
 8016876:	f000 80d5 	beq.w	8016a24 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801687c:	895b      	ldrh	r3, [r3, #10]
 801687e:	2b13      	cmp	r3, #19
 8016880:	d806      	bhi.n	8016890 <ip4_frag+0xd0>
 8016882:	4b6c      	ldr	r3, [pc, #432]	; (8016a34 <ip4_frag+0x274>)
 8016884:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016888:	496d      	ldr	r1, [pc, #436]	; (8016a40 <ip4_frag+0x280>)
 801688a:	486c      	ldr	r0, [pc, #432]	; (8016a3c <ip4_frag+0x27c>)
 801688c:	f000 fe88 	bl	80175a0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016892:	685b      	ldr	r3, [r3, #4]
 8016894:	2214      	movs	r2, #20
 8016896:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016898:	4618      	mov	r0, r3
 801689a:	f000 f9e7 	bl	8016c6c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a0:	685b      	ldr	r3, [r3, #4]
 80168a2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80168a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80168a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80168aa:	e064      	b.n	8016976 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	895a      	ldrh	r2, [r3, #10]
 80168b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80168b2:	1ad3      	subs	r3, r2, r3
 80168b4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	895b      	ldrh	r3, [r3, #10]
 80168ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80168bc:	429a      	cmp	r2, r3
 80168be:	d906      	bls.n	80168ce <ip4_frag+0x10e>
 80168c0:	4b5c      	ldr	r3, [pc, #368]	; (8016a34 <ip4_frag+0x274>)
 80168c2:	f240 322d 	movw	r2, #813	; 0x32d
 80168c6:	495f      	ldr	r1, [pc, #380]	; (8016a44 <ip4_frag+0x284>)
 80168c8:	485c      	ldr	r0, [pc, #368]	; (8016a3c <ip4_frag+0x27c>)
 80168ca:	f000 fe69 	bl	80175a0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80168ce:	8bfa      	ldrh	r2, [r7, #30]
 80168d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168d4:	4293      	cmp	r3, r2
 80168d6:	bf28      	it	cs
 80168d8:	4613      	movcs	r3, r2
 80168da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80168de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d105      	bne.n	80168f2 <ip4_frag+0x132>
        poff = 0;
 80168e6:	2300      	movs	r3, #0
 80168e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	60fb      	str	r3, [r7, #12]
        continue;
 80168f0:	e041      	b.n	8016976 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80168f2:	f7ff ff0d 	bl	8016710 <ip_frag_alloc_pbuf_custom_ref>
 80168f6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80168f8:	69bb      	ldr	r3, [r7, #24]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d103      	bne.n	8016906 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80168fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016900:	f7f4 fe56 	bl	800b5b0 <pbuf_free>
        goto memerr;
 8016904:	e08f      	b.n	8016a26 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016906:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801690c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801690e:	4413      	add	r3, r2
 8016910:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016914:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016918:	9201      	str	r2, [sp, #4]
 801691a:	9300      	str	r3, [sp, #0]
 801691c:	4603      	mov	r3, r0
 801691e:	2241      	movs	r2, #65	; 0x41
 8016920:	2000      	movs	r0, #0
 8016922:	f7f4 fc8b 	bl	800b23c <pbuf_alloced_custom>
 8016926:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016928:	697b      	ldr	r3, [r7, #20]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d106      	bne.n	801693c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801692e:	69b8      	ldr	r0, [r7, #24]
 8016930:	f7ff fef6 	bl	8016720 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016936:	f7f4 fe3b 	bl	800b5b0 <pbuf_free>
        goto memerr;
 801693a:	e074      	b.n	8016a26 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801693c:	68f8      	ldr	r0, [r7, #12]
 801693e:	f7f4 fed7 	bl	800b6f0 <pbuf_ref>
      pcr->original = p;
 8016942:	69bb      	ldr	r3, [r7, #24]
 8016944:	68fa      	ldr	r2, [r7, #12]
 8016946:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016948:	69bb      	ldr	r3, [r7, #24]
 801694a:	4a3f      	ldr	r2, [pc, #252]	; (8016a48 <ip4_frag+0x288>)
 801694c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801694e:	6979      	ldr	r1, [r7, #20]
 8016950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016952:	f7f4 feef 	bl	800b734 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016956:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801695a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801695e:	1ad3      	subs	r3, r2, r3
 8016960:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016964:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016968:	2b00      	cmp	r3, #0
 801696a:	d004      	beq.n	8016976 <ip4_frag+0x1b6>
        poff = 0;
 801696c:	2300      	movs	r3, #0
 801696e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016976:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801697a:	2b00      	cmp	r3, #0
 801697c:	d196      	bne.n	80168ac <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801697e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016980:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016984:	4413      	add	r3, r2
 8016986:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801698c:	f1a3 0213 	sub.w	r2, r3, #19
 8016990:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016994:	429a      	cmp	r2, r3
 8016996:	bfcc      	ite	gt
 8016998:	2301      	movgt	r3, #1
 801699a:	2300      	movle	r3, #0
 801699c:	b2db      	uxtb	r3, r3
 801699e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80169a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80169a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80169a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80169aa:	6a3b      	ldr	r3, [r7, #32]
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d002      	beq.n	80169b6 <ip4_frag+0x1f6>
 80169b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d003      	beq.n	80169be <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80169b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80169bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80169be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169c0:	4618      	mov	r0, r3
 80169c2:	f7f3 fa5b 	bl	8009e7c <lwip_htons>
 80169c6:	4603      	mov	r3, r0
 80169c8:	461a      	mov	r2, r3
 80169ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169cc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80169ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80169d0:	3314      	adds	r3, #20
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	4618      	mov	r0, r3
 80169d6:	f7f3 fa51 	bl	8009e7c <lwip_htons>
 80169da:	4603      	mov	r3, r0
 80169dc:	461a      	mov	r2, r3
 80169de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80169e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e4:	2200      	movs	r2, #0
 80169e6:	729a      	strb	r2, [r3, #10]
 80169e8:	2200      	movs	r2, #0
 80169ea:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	695b      	ldr	r3, [r3, #20]
 80169f0:	687a      	ldr	r2, [r7, #4]
 80169f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169f4:	68b8      	ldr	r0, [r7, #8]
 80169f6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80169f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169fa:	f7f4 fdd9 	bl	800b5b0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80169fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016a02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016a04:	1ad3      	subs	r3, r2, r3
 8016a06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016a0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016a0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016a10:	4413      	add	r3, r2
 8016a12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016a16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	f47f af19 	bne.w	8016852 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016a20:	2300      	movs	r3, #0
 8016a22:	e002      	b.n	8016a2a <ip4_frag+0x26a>
      goto memerr;
 8016a24:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	3748      	adds	r7, #72	; 0x48
 8016a2e:	46bd      	mov	sp, r7
 8016a30:	bd80      	pop	{r7, pc}
 8016a32:	bf00      	nop
 8016a34:	0801f608 	.word	0x0801f608
 8016a38:	0801f7e4 	.word	0x0801f7e4
 8016a3c:	0801f650 	.word	0x0801f650
 8016a40:	0801f800 	.word	0x0801f800
 8016a44:	0801f820 	.word	0x0801f820
 8016a48:	08016759 	.word	0x08016759

08016a4c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b086      	sub	sp, #24
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
 8016a54:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016a56:	230e      	movs	r3, #14
 8016a58:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	895b      	ldrh	r3, [r3, #10]
 8016a5e:	2b0e      	cmp	r3, #14
 8016a60:	d96e      	bls.n	8016b40 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	7bdb      	ldrb	r3, [r3, #15]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d106      	bne.n	8016a78 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016a6a:	683b      	ldr	r3, [r7, #0]
 8016a6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016a70:	3301      	adds	r3, #1
 8016a72:	b2da      	uxtb	r2, r3
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	685b      	ldr	r3, [r3, #4]
 8016a7c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016a7e:	693b      	ldr	r3, [r7, #16]
 8016a80:	7b1a      	ldrb	r2, [r3, #12]
 8016a82:	7b5b      	ldrb	r3, [r3, #13]
 8016a84:	021b      	lsls	r3, r3, #8
 8016a86:	4313      	orrs	r3, r2
 8016a88:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016a8a:	693b      	ldr	r3, [r7, #16]
 8016a8c:	781b      	ldrb	r3, [r3, #0]
 8016a8e:	f003 0301 	and.w	r3, r3, #1
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d023      	beq.n	8016ade <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016a96:	693b      	ldr	r3, [r7, #16]
 8016a98:	781b      	ldrb	r3, [r3, #0]
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	d10f      	bne.n	8016abe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016a9e:	693b      	ldr	r3, [r7, #16]
 8016aa0:	785b      	ldrb	r3, [r3, #1]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d11b      	bne.n	8016ade <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016aa6:	693b      	ldr	r3, [r7, #16]
 8016aa8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016aaa:	2b5e      	cmp	r3, #94	; 0x5e
 8016aac:	d117      	bne.n	8016ade <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	7b5b      	ldrb	r3, [r3, #13]
 8016ab2:	f043 0310 	orr.w	r3, r3, #16
 8016ab6:	b2da      	uxtb	r2, r3
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	735a      	strb	r2, [r3, #13]
 8016abc:	e00f      	b.n	8016ade <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	2206      	movs	r2, #6
 8016ac2:	4928      	ldr	r1, [pc, #160]	; (8016b64 <ethernet_input+0x118>)
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	f000 f8c3 	bl	8016c50 <memcmp>
 8016aca:	4603      	mov	r3, r0
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d106      	bne.n	8016ade <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	7b5b      	ldrb	r3, [r3, #13]
 8016ad4:	f043 0308 	orr.w	r3, r3, #8
 8016ad8:	b2da      	uxtb	r2, r3
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016ade:	89fb      	ldrh	r3, [r7, #14]
 8016ae0:	2b08      	cmp	r3, #8
 8016ae2:	d003      	beq.n	8016aec <ethernet_input+0xa0>
 8016ae4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016ae8:	d014      	beq.n	8016b14 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016aea:	e032      	b.n	8016b52 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016af2:	f003 0308 	and.w	r3, r3, #8
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d024      	beq.n	8016b44 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016afa:	8afb      	ldrh	r3, [r7, #22]
 8016afc:	4619      	mov	r1, r3
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	f7f4 fcd0 	bl	800b4a4 <pbuf_remove_header>
 8016b04:	4603      	mov	r3, r0
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d11e      	bne.n	8016b48 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016b0a:	6839      	ldr	r1, [r7, #0]
 8016b0c:	6878      	ldr	r0, [r7, #4]
 8016b0e:	f7fe fef3 	bl	80158f8 <ip4_input>
      break;
 8016b12:	e013      	b.n	8016b3c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016b14:	683b      	ldr	r3, [r7, #0]
 8016b16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016b1a:	f003 0308 	and.w	r3, r3, #8
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d014      	beq.n	8016b4c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016b22:	8afb      	ldrh	r3, [r7, #22]
 8016b24:	4619      	mov	r1, r3
 8016b26:	6878      	ldr	r0, [r7, #4]
 8016b28:	f7f4 fcbc 	bl	800b4a4 <pbuf_remove_header>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d10e      	bne.n	8016b50 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016b32:	6839      	ldr	r1, [r7, #0]
 8016b34:	6878      	ldr	r0, [r7, #4]
 8016b36:	f7fe f88f 	bl	8014c58 <etharp_input>
      break;
 8016b3a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	e00c      	b.n	8016b5a <ethernet_input+0x10e>
    goto free_and_return;
 8016b40:	bf00      	nop
 8016b42:	e006      	b.n	8016b52 <ethernet_input+0x106>
        goto free_and_return;
 8016b44:	bf00      	nop
 8016b46:	e004      	b.n	8016b52 <ethernet_input+0x106>
        goto free_and_return;
 8016b48:	bf00      	nop
 8016b4a:	e002      	b.n	8016b52 <ethernet_input+0x106>
        goto free_and_return;
 8016b4c:	bf00      	nop
 8016b4e:	e000      	b.n	8016b52 <ethernet_input+0x106>
        goto free_and_return;
 8016b50:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016b52:	6878      	ldr	r0, [r7, #4]
 8016b54:	f7f4 fd2c 	bl	800b5b0 <pbuf_free>
  return ERR_OK;
 8016b58:	2300      	movs	r3, #0
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	3718      	adds	r7, #24
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}
 8016b62:	bf00      	nop
 8016b64:	08032ae4 	.word	0x08032ae4

08016b68 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b086      	sub	sp, #24
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	60f8      	str	r0, [r7, #12]
 8016b70:	60b9      	str	r1, [r7, #8]
 8016b72:	607a      	str	r2, [r7, #4]
 8016b74:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016b76:	8c3b      	ldrh	r3, [r7, #32]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7f3 f97f 	bl	8009e7c <lwip_htons>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016b82:	210e      	movs	r1, #14
 8016b84:	68b8      	ldr	r0, [r7, #8]
 8016b86:	f7f4 fc7d 	bl	800b484 <pbuf_add_header>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d125      	bne.n	8016bdc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	685b      	ldr	r3, [r3, #4]
 8016b94:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	8afa      	ldrh	r2, [r7, #22]
 8016b9a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016b9c:	693b      	ldr	r3, [r7, #16]
 8016b9e:	2206      	movs	r2, #6
 8016ba0:	6839      	ldr	r1, [r7, #0]
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f000 f862 	bl	8016c6c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	3306      	adds	r3, #6
 8016bac:	2206      	movs	r2, #6
 8016bae:	6879      	ldr	r1, [r7, #4]
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f000 f85b 	bl	8016c6c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016bbc:	2b06      	cmp	r3, #6
 8016bbe:	d006      	beq.n	8016bce <ethernet_output+0x66>
 8016bc0:	4b0a      	ldr	r3, [pc, #40]	; (8016bec <ethernet_output+0x84>)
 8016bc2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016bc6:	490a      	ldr	r1, [pc, #40]	; (8016bf0 <ethernet_output+0x88>)
 8016bc8:	480a      	ldr	r0, [pc, #40]	; (8016bf4 <ethernet_output+0x8c>)
 8016bca:	f000 fce9 	bl	80175a0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	699b      	ldr	r3, [r3, #24]
 8016bd2:	68b9      	ldr	r1, [r7, #8]
 8016bd4:	68f8      	ldr	r0, [r7, #12]
 8016bd6:	4798      	blx	r3
 8016bd8:	4603      	mov	r3, r0
 8016bda:	e002      	b.n	8016be2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016bdc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016bde:	f06f 0301 	mvn.w	r3, #1
}
 8016be2:	4618      	mov	r0, r3
 8016be4:	3718      	adds	r7, #24
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}
 8016bea:	bf00      	nop
 8016bec:	0801f830 	.word	0x0801f830
 8016bf0:	0801f868 	.word	0x0801f868
 8016bf4:	0801f89c 	.word	0x0801f89c

08016bf8 <atof>:
 8016bf8:	2100      	movs	r1, #0
 8016bfa:	f001 bc7b 	b.w	80184f4 <strtod>

08016bfe <atoi>:
 8016bfe:	220a      	movs	r2, #10
 8016c00:	2100      	movs	r1, #0
 8016c02:	f001 bd67 	b.w	80186d4 <strtol>
	...

08016c08 <__libc_init_array>:
 8016c08:	b570      	push	{r4, r5, r6, lr}
 8016c0a:	4d0d      	ldr	r5, [pc, #52]	; (8016c40 <__libc_init_array+0x38>)
 8016c0c:	4c0d      	ldr	r4, [pc, #52]	; (8016c44 <__libc_init_array+0x3c>)
 8016c0e:	1b64      	subs	r4, r4, r5
 8016c10:	10a4      	asrs	r4, r4, #2
 8016c12:	2600      	movs	r6, #0
 8016c14:	42a6      	cmp	r6, r4
 8016c16:	d109      	bne.n	8016c2c <__libc_init_array+0x24>
 8016c18:	4d0b      	ldr	r5, [pc, #44]	; (8016c48 <__libc_init_array+0x40>)
 8016c1a:	4c0c      	ldr	r4, [pc, #48]	; (8016c4c <__libc_init_array+0x44>)
 8016c1c:	f004 fc02 	bl	801b424 <_init>
 8016c20:	1b64      	subs	r4, r4, r5
 8016c22:	10a4      	asrs	r4, r4, #2
 8016c24:	2600      	movs	r6, #0
 8016c26:	42a6      	cmp	r6, r4
 8016c28:	d105      	bne.n	8016c36 <__libc_init_array+0x2e>
 8016c2a:	bd70      	pop	{r4, r5, r6, pc}
 8016c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c30:	4798      	blx	r3
 8016c32:	3601      	adds	r6, #1
 8016c34:	e7ee      	b.n	8016c14 <__libc_init_array+0xc>
 8016c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c3a:	4798      	blx	r3
 8016c3c:	3601      	adds	r6, #1
 8016c3e:	e7f2      	b.n	8016c26 <__libc_init_array+0x1e>
 8016c40:	08033070 	.word	0x08033070
 8016c44:	08033070 	.word	0x08033070
 8016c48:	08033070 	.word	0x08033070
 8016c4c:	08033074 	.word	0x08033074

08016c50 <memcmp>:
 8016c50:	b530      	push	{r4, r5, lr}
 8016c52:	3901      	subs	r1, #1
 8016c54:	2400      	movs	r4, #0
 8016c56:	42a2      	cmp	r2, r4
 8016c58:	d101      	bne.n	8016c5e <memcmp+0xe>
 8016c5a:	2000      	movs	r0, #0
 8016c5c:	e005      	b.n	8016c6a <memcmp+0x1a>
 8016c5e:	5d03      	ldrb	r3, [r0, r4]
 8016c60:	3401      	adds	r4, #1
 8016c62:	5d0d      	ldrb	r5, [r1, r4]
 8016c64:	42ab      	cmp	r3, r5
 8016c66:	d0f6      	beq.n	8016c56 <memcmp+0x6>
 8016c68:	1b58      	subs	r0, r3, r5
 8016c6a:	bd30      	pop	{r4, r5, pc}

08016c6c <memcpy>:
 8016c6c:	440a      	add	r2, r1
 8016c6e:	4291      	cmp	r1, r2
 8016c70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016c74:	d100      	bne.n	8016c78 <memcpy+0xc>
 8016c76:	4770      	bx	lr
 8016c78:	b510      	push	{r4, lr}
 8016c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016c82:	4291      	cmp	r1, r2
 8016c84:	d1f9      	bne.n	8016c7a <memcpy+0xe>
 8016c86:	bd10      	pop	{r4, pc}

08016c88 <memmove>:
 8016c88:	4288      	cmp	r0, r1
 8016c8a:	b510      	push	{r4, lr}
 8016c8c:	eb01 0402 	add.w	r4, r1, r2
 8016c90:	d902      	bls.n	8016c98 <memmove+0x10>
 8016c92:	4284      	cmp	r4, r0
 8016c94:	4623      	mov	r3, r4
 8016c96:	d807      	bhi.n	8016ca8 <memmove+0x20>
 8016c98:	1e43      	subs	r3, r0, #1
 8016c9a:	42a1      	cmp	r1, r4
 8016c9c:	d008      	beq.n	8016cb0 <memmove+0x28>
 8016c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016ca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016ca6:	e7f8      	b.n	8016c9a <memmove+0x12>
 8016ca8:	4402      	add	r2, r0
 8016caa:	4601      	mov	r1, r0
 8016cac:	428a      	cmp	r2, r1
 8016cae:	d100      	bne.n	8016cb2 <memmove+0x2a>
 8016cb0:	bd10      	pop	{r4, pc}
 8016cb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016cb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016cba:	e7f7      	b.n	8016cac <memmove+0x24>

08016cbc <memset>:
 8016cbc:	4402      	add	r2, r0
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	4293      	cmp	r3, r2
 8016cc2:	d100      	bne.n	8016cc6 <memset+0xa>
 8016cc4:	4770      	bx	lr
 8016cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8016cca:	e7f9      	b.n	8016cc0 <memset+0x4>

08016ccc <__cvt>:
 8016ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016cd0:	ec55 4b10 	vmov	r4, r5, d0
 8016cd4:	2d00      	cmp	r5, #0
 8016cd6:	460e      	mov	r6, r1
 8016cd8:	4619      	mov	r1, r3
 8016cda:	462b      	mov	r3, r5
 8016cdc:	bfbb      	ittet	lt
 8016cde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016ce2:	461d      	movlt	r5, r3
 8016ce4:	2300      	movge	r3, #0
 8016ce6:	232d      	movlt	r3, #45	; 0x2d
 8016ce8:	700b      	strb	r3, [r1, #0]
 8016cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016cec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016cf0:	4691      	mov	r9, r2
 8016cf2:	f023 0820 	bic.w	r8, r3, #32
 8016cf6:	bfbc      	itt	lt
 8016cf8:	4622      	movlt	r2, r4
 8016cfa:	4614      	movlt	r4, r2
 8016cfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016d00:	d005      	beq.n	8016d0e <__cvt+0x42>
 8016d02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016d06:	d100      	bne.n	8016d0a <__cvt+0x3e>
 8016d08:	3601      	adds	r6, #1
 8016d0a:	2102      	movs	r1, #2
 8016d0c:	e000      	b.n	8016d10 <__cvt+0x44>
 8016d0e:	2103      	movs	r1, #3
 8016d10:	ab03      	add	r3, sp, #12
 8016d12:	9301      	str	r3, [sp, #4]
 8016d14:	ab02      	add	r3, sp, #8
 8016d16:	9300      	str	r3, [sp, #0]
 8016d18:	ec45 4b10 	vmov	d0, r4, r5
 8016d1c:	4653      	mov	r3, sl
 8016d1e:	4632      	mov	r2, r6
 8016d20:	f001 fe4e 	bl	80189c0 <_dtoa_r>
 8016d24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016d28:	4607      	mov	r7, r0
 8016d2a:	d102      	bne.n	8016d32 <__cvt+0x66>
 8016d2c:	f019 0f01 	tst.w	r9, #1
 8016d30:	d022      	beq.n	8016d78 <__cvt+0xac>
 8016d32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016d36:	eb07 0906 	add.w	r9, r7, r6
 8016d3a:	d110      	bne.n	8016d5e <__cvt+0x92>
 8016d3c:	783b      	ldrb	r3, [r7, #0]
 8016d3e:	2b30      	cmp	r3, #48	; 0x30
 8016d40:	d10a      	bne.n	8016d58 <__cvt+0x8c>
 8016d42:	2200      	movs	r2, #0
 8016d44:	2300      	movs	r3, #0
 8016d46:	4620      	mov	r0, r4
 8016d48:	4629      	mov	r1, r5
 8016d4a:	f7e9 fecd 	bl	8000ae8 <__aeabi_dcmpeq>
 8016d4e:	b918      	cbnz	r0, 8016d58 <__cvt+0x8c>
 8016d50:	f1c6 0601 	rsb	r6, r6, #1
 8016d54:	f8ca 6000 	str.w	r6, [sl]
 8016d58:	f8da 3000 	ldr.w	r3, [sl]
 8016d5c:	4499      	add	r9, r3
 8016d5e:	2200      	movs	r2, #0
 8016d60:	2300      	movs	r3, #0
 8016d62:	4620      	mov	r0, r4
 8016d64:	4629      	mov	r1, r5
 8016d66:	f7e9 febf 	bl	8000ae8 <__aeabi_dcmpeq>
 8016d6a:	b108      	cbz	r0, 8016d70 <__cvt+0xa4>
 8016d6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8016d70:	2230      	movs	r2, #48	; 0x30
 8016d72:	9b03      	ldr	r3, [sp, #12]
 8016d74:	454b      	cmp	r3, r9
 8016d76:	d307      	bcc.n	8016d88 <__cvt+0xbc>
 8016d78:	9b03      	ldr	r3, [sp, #12]
 8016d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d7c:	1bdb      	subs	r3, r3, r7
 8016d7e:	4638      	mov	r0, r7
 8016d80:	6013      	str	r3, [r2, #0]
 8016d82:	b004      	add	sp, #16
 8016d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d88:	1c59      	adds	r1, r3, #1
 8016d8a:	9103      	str	r1, [sp, #12]
 8016d8c:	701a      	strb	r2, [r3, #0]
 8016d8e:	e7f0      	b.n	8016d72 <__cvt+0xa6>

08016d90 <__exponent>:
 8016d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d92:	4603      	mov	r3, r0
 8016d94:	2900      	cmp	r1, #0
 8016d96:	bfb8      	it	lt
 8016d98:	4249      	neglt	r1, r1
 8016d9a:	f803 2b02 	strb.w	r2, [r3], #2
 8016d9e:	bfb4      	ite	lt
 8016da0:	222d      	movlt	r2, #45	; 0x2d
 8016da2:	222b      	movge	r2, #43	; 0x2b
 8016da4:	2909      	cmp	r1, #9
 8016da6:	7042      	strb	r2, [r0, #1]
 8016da8:	dd2a      	ble.n	8016e00 <__exponent+0x70>
 8016daa:	f10d 0407 	add.w	r4, sp, #7
 8016dae:	46a4      	mov	ip, r4
 8016db0:	270a      	movs	r7, #10
 8016db2:	46a6      	mov	lr, r4
 8016db4:	460a      	mov	r2, r1
 8016db6:	fb91 f6f7 	sdiv	r6, r1, r7
 8016dba:	fb07 1516 	mls	r5, r7, r6, r1
 8016dbe:	3530      	adds	r5, #48	; 0x30
 8016dc0:	2a63      	cmp	r2, #99	; 0x63
 8016dc2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8016dc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8016dca:	4631      	mov	r1, r6
 8016dcc:	dcf1      	bgt.n	8016db2 <__exponent+0x22>
 8016dce:	3130      	adds	r1, #48	; 0x30
 8016dd0:	f1ae 0502 	sub.w	r5, lr, #2
 8016dd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8016dd8:	1c44      	adds	r4, r0, #1
 8016dda:	4629      	mov	r1, r5
 8016ddc:	4561      	cmp	r1, ip
 8016dde:	d30a      	bcc.n	8016df6 <__exponent+0x66>
 8016de0:	f10d 0209 	add.w	r2, sp, #9
 8016de4:	eba2 020e 	sub.w	r2, r2, lr
 8016de8:	4565      	cmp	r5, ip
 8016dea:	bf88      	it	hi
 8016dec:	2200      	movhi	r2, #0
 8016dee:	4413      	add	r3, r2
 8016df0:	1a18      	subs	r0, r3, r0
 8016df2:	b003      	add	sp, #12
 8016df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016df6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016dfa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016dfe:	e7ed      	b.n	8016ddc <__exponent+0x4c>
 8016e00:	2330      	movs	r3, #48	; 0x30
 8016e02:	3130      	adds	r1, #48	; 0x30
 8016e04:	7083      	strb	r3, [r0, #2]
 8016e06:	70c1      	strb	r1, [r0, #3]
 8016e08:	1d03      	adds	r3, r0, #4
 8016e0a:	e7f1      	b.n	8016df0 <__exponent+0x60>

08016e0c <_printf_float>:
 8016e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e10:	ed2d 8b02 	vpush	{d8}
 8016e14:	b08d      	sub	sp, #52	; 0x34
 8016e16:	460c      	mov	r4, r1
 8016e18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016e1c:	4616      	mov	r6, r2
 8016e1e:	461f      	mov	r7, r3
 8016e20:	4605      	mov	r5, r0
 8016e22:	f003 f8f7 	bl	801a014 <_localeconv_r>
 8016e26:	f8d0 a000 	ldr.w	sl, [r0]
 8016e2a:	4650      	mov	r0, sl
 8016e2c:	f7e9 f9da 	bl	80001e4 <strlen>
 8016e30:	2300      	movs	r3, #0
 8016e32:	930a      	str	r3, [sp, #40]	; 0x28
 8016e34:	6823      	ldr	r3, [r4, #0]
 8016e36:	9305      	str	r3, [sp, #20]
 8016e38:	f8d8 3000 	ldr.w	r3, [r8]
 8016e3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016e40:	3307      	adds	r3, #7
 8016e42:	f023 0307 	bic.w	r3, r3, #7
 8016e46:	f103 0208 	add.w	r2, r3, #8
 8016e4a:	f8c8 2000 	str.w	r2, [r8]
 8016e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016e56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016e5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016e5e:	9307      	str	r3, [sp, #28]
 8016e60:	f8cd 8018 	str.w	r8, [sp, #24]
 8016e64:	ee08 0a10 	vmov	s16, r0
 8016e68:	4b9f      	ldr	r3, [pc, #636]	; (80170e8 <_printf_float+0x2dc>)
 8016e6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016e72:	f7e9 fe6b 	bl	8000b4c <__aeabi_dcmpun>
 8016e76:	bb88      	cbnz	r0, 8016edc <_printf_float+0xd0>
 8016e78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016e7c:	4b9a      	ldr	r3, [pc, #616]	; (80170e8 <_printf_float+0x2dc>)
 8016e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016e82:	f7e9 fe45 	bl	8000b10 <__aeabi_dcmple>
 8016e86:	bb48      	cbnz	r0, 8016edc <_printf_float+0xd0>
 8016e88:	2200      	movs	r2, #0
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	4640      	mov	r0, r8
 8016e8e:	4649      	mov	r1, r9
 8016e90:	f7e9 fe34 	bl	8000afc <__aeabi_dcmplt>
 8016e94:	b110      	cbz	r0, 8016e9c <_printf_float+0x90>
 8016e96:	232d      	movs	r3, #45	; 0x2d
 8016e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e9c:	4b93      	ldr	r3, [pc, #588]	; (80170ec <_printf_float+0x2e0>)
 8016e9e:	4894      	ldr	r0, [pc, #592]	; (80170f0 <_printf_float+0x2e4>)
 8016ea0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016ea4:	bf94      	ite	ls
 8016ea6:	4698      	movls	r8, r3
 8016ea8:	4680      	movhi	r8, r0
 8016eaa:	2303      	movs	r3, #3
 8016eac:	6123      	str	r3, [r4, #16]
 8016eae:	9b05      	ldr	r3, [sp, #20]
 8016eb0:	f023 0204 	bic.w	r2, r3, #4
 8016eb4:	6022      	str	r2, [r4, #0]
 8016eb6:	f04f 0900 	mov.w	r9, #0
 8016eba:	9700      	str	r7, [sp, #0]
 8016ebc:	4633      	mov	r3, r6
 8016ebe:	aa0b      	add	r2, sp, #44	; 0x2c
 8016ec0:	4621      	mov	r1, r4
 8016ec2:	4628      	mov	r0, r5
 8016ec4:	f000 f9d8 	bl	8017278 <_printf_common>
 8016ec8:	3001      	adds	r0, #1
 8016eca:	f040 8090 	bne.w	8016fee <_printf_float+0x1e2>
 8016ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ed2:	b00d      	add	sp, #52	; 0x34
 8016ed4:	ecbd 8b02 	vpop	{d8}
 8016ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016edc:	4642      	mov	r2, r8
 8016ede:	464b      	mov	r3, r9
 8016ee0:	4640      	mov	r0, r8
 8016ee2:	4649      	mov	r1, r9
 8016ee4:	f7e9 fe32 	bl	8000b4c <__aeabi_dcmpun>
 8016ee8:	b140      	cbz	r0, 8016efc <_printf_float+0xf0>
 8016eea:	464b      	mov	r3, r9
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	bfbc      	itt	lt
 8016ef0:	232d      	movlt	r3, #45	; 0x2d
 8016ef2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016ef6:	487f      	ldr	r0, [pc, #508]	; (80170f4 <_printf_float+0x2e8>)
 8016ef8:	4b7f      	ldr	r3, [pc, #508]	; (80170f8 <_printf_float+0x2ec>)
 8016efa:	e7d1      	b.n	8016ea0 <_printf_float+0x94>
 8016efc:	6863      	ldr	r3, [r4, #4]
 8016efe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016f02:	9206      	str	r2, [sp, #24]
 8016f04:	1c5a      	adds	r2, r3, #1
 8016f06:	d13f      	bne.n	8016f88 <_printf_float+0x17c>
 8016f08:	2306      	movs	r3, #6
 8016f0a:	6063      	str	r3, [r4, #4]
 8016f0c:	9b05      	ldr	r3, [sp, #20]
 8016f0e:	6861      	ldr	r1, [r4, #4]
 8016f10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016f14:	2300      	movs	r3, #0
 8016f16:	9303      	str	r3, [sp, #12]
 8016f18:	ab0a      	add	r3, sp, #40	; 0x28
 8016f1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016f1e:	ab09      	add	r3, sp, #36	; 0x24
 8016f20:	ec49 8b10 	vmov	d0, r8, r9
 8016f24:	9300      	str	r3, [sp, #0]
 8016f26:	6022      	str	r2, [r4, #0]
 8016f28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016f2c:	4628      	mov	r0, r5
 8016f2e:	f7ff fecd 	bl	8016ccc <__cvt>
 8016f32:	9b06      	ldr	r3, [sp, #24]
 8016f34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016f36:	2b47      	cmp	r3, #71	; 0x47
 8016f38:	4680      	mov	r8, r0
 8016f3a:	d108      	bne.n	8016f4e <_printf_float+0x142>
 8016f3c:	1cc8      	adds	r0, r1, #3
 8016f3e:	db02      	blt.n	8016f46 <_printf_float+0x13a>
 8016f40:	6863      	ldr	r3, [r4, #4]
 8016f42:	4299      	cmp	r1, r3
 8016f44:	dd41      	ble.n	8016fca <_printf_float+0x1be>
 8016f46:	f1ab 0b02 	sub.w	fp, fp, #2
 8016f4a:	fa5f fb8b 	uxtb.w	fp, fp
 8016f4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016f52:	d820      	bhi.n	8016f96 <_printf_float+0x18a>
 8016f54:	3901      	subs	r1, #1
 8016f56:	465a      	mov	r2, fp
 8016f58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016f5c:	9109      	str	r1, [sp, #36]	; 0x24
 8016f5e:	f7ff ff17 	bl	8016d90 <__exponent>
 8016f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f64:	1813      	adds	r3, r2, r0
 8016f66:	2a01      	cmp	r2, #1
 8016f68:	4681      	mov	r9, r0
 8016f6a:	6123      	str	r3, [r4, #16]
 8016f6c:	dc02      	bgt.n	8016f74 <_printf_float+0x168>
 8016f6e:	6822      	ldr	r2, [r4, #0]
 8016f70:	07d2      	lsls	r2, r2, #31
 8016f72:	d501      	bpl.n	8016f78 <_printf_float+0x16c>
 8016f74:	3301      	adds	r3, #1
 8016f76:	6123      	str	r3, [r4, #16]
 8016f78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d09c      	beq.n	8016eba <_printf_float+0xae>
 8016f80:	232d      	movs	r3, #45	; 0x2d
 8016f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f86:	e798      	b.n	8016eba <_printf_float+0xae>
 8016f88:	9a06      	ldr	r2, [sp, #24]
 8016f8a:	2a47      	cmp	r2, #71	; 0x47
 8016f8c:	d1be      	bne.n	8016f0c <_printf_float+0x100>
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d1bc      	bne.n	8016f0c <_printf_float+0x100>
 8016f92:	2301      	movs	r3, #1
 8016f94:	e7b9      	b.n	8016f0a <_printf_float+0xfe>
 8016f96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016f9a:	d118      	bne.n	8016fce <_printf_float+0x1c2>
 8016f9c:	2900      	cmp	r1, #0
 8016f9e:	6863      	ldr	r3, [r4, #4]
 8016fa0:	dd0b      	ble.n	8016fba <_printf_float+0x1ae>
 8016fa2:	6121      	str	r1, [r4, #16]
 8016fa4:	b913      	cbnz	r3, 8016fac <_printf_float+0x1a0>
 8016fa6:	6822      	ldr	r2, [r4, #0]
 8016fa8:	07d0      	lsls	r0, r2, #31
 8016faa:	d502      	bpl.n	8016fb2 <_printf_float+0x1a6>
 8016fac:	3301      	adds	r3, #1
 8016fae:	440b      	add	r3, r1
 8016fb0:	6123      	str	r3, [r4, #16]
 8016fb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8016fb4:	f04f 0900 	mov.w	r9, #0
 8016fb8:	e7de      	b.n	8016f78 <_printf_float+0x16c>
 8016fba:	b913      	cbnz	r3, 8016fc2 <_printf_float+0x1b6>
 8016fbc:	6822      	ldr	r2, [r4, #0]
 8016fbe:	07d2      	lsls	r2, r2, #31
 8016fc0:	d501      	bpl.n	8016fc6 <_printf_float+0x1ba>
 8016fc2:	3302      	adds	r3, #2
 8016fc4:	e7f4      	b.n	8016fb0 <_printf_float+0x1a4>
 8016fc6:	2301      	movs	r3, #1
 8016fc8:	e7f2      	b.n	8016fb0 <_printf_float+0x1a4>
 8016fca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fd0:	4299      	cmp	r1, r3
 8016fd2:	db05      	blt.n	8016fe0 <_printf_float+0x1d4>
 8016fd4:	6823      	ldr	r3, [r4, #0]
 8016fd6:	6121      	str	r1, [r4, #16]
 8016fd8:	07d8      	lsls	r0, r3, #31
 8016fda:	d5ea      	bpl.n	8016fb2 <_printf_float+0x1a6>
 8016fdc:	1c4b      	adds	r3, r1, #1
 8016fde:	e7e7      	b.n	8016fb0 <_printf_float+0x1a4>
 8016fe0:	2900      	cmp	r1, #0
 8016fe2:	bfd4      	ite	le
 8016fe4:	f1c1 0202 	rsble	r2, r1, #2
 8016fe8:	2201      	movgt	r2, #1
 8016fea:	4413      	add	r3, r2
 8016fec:	e7e0      	b.n	8016fb0 <_printf_float+0x1a4>
 8016fee:	6823      	ldr	r3, [r4, #0]
 8016ff0:	055a      	lsls	r2, r3, #21
 8016ff2:	d407      	bmi.n	8017004 <_printf_float+0x1f8>
 8016ff4:	6923      	ldr	r3, [r4, #16]
 8016ff6:	4642      	mov	r2, r8
 8016ff8:	4631      	mov	r1, r6
 8016ffa:	4628      	mov	r0, r5
 8016ffc:	47b8      	blx	r7
 8016ffe:	3001      	adds	r0, #1
 8017000:	d12c      	bne.n	801705c <_printf_float+0x250>
 8017002:	e764      	b.n	8016ece <_printf_float+0xc2>
 8017004:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017008:	f240 80e0 	bls.w	80171cc <_printf_float+0x3c0>
 801700c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017010:	2200      	movs	r2, #0
 8017012:	2300      	movs	r3, #0
 8017014:	f7e9 fd68 	bl	8000ae8 <__aeabi_dcmpeq>
 8017018:	2800      	cmp	r0, #0
 801701a:	d034      	beq.n	8017086 <_printf_float+0x27a>
 801701c:	4a37      	ldr	r2, [pc, #220]	; (80170fc <_printf_float+0x2f0>)
 801701e:	2301      	movs	r3, #1
 8017020:	4631      	mov	r1, r6
 8017022:	4628      	mov	r0, r5
 8017024:	47b8      	blx	r7
 8017026:	3001      	adds	r0, #1
 8017028:	f43f af51 	beq.w	8016ece <_printf_float+0xc2>
 801702c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017030:	429a      	cmp	r2, r3
 8017032:	db02      	blt.n	801703a <_printf_float+0x22e>
 8017034:	6823      	ldr	r3, [r4, #0]
 8017036:	07d8      	lsls	r0, r3, #31
 8017038:	d510      	bpl.n	801705c <_printf_float+0x250>
 801703a:	ee18 3a10 	vmov	r3, s16
 801703e:	4652      	mov	r2, sl
 8017040:	4631      	mov	r1, r6
 8017042:	4628      	mov	r0, r5
 8017044:	47b8      	blx	r7
 8017046:	3001      	adds	r0, #1
 8017048:	f43f af41 	beq.w	8016ece <_printf_float+0xc2>
 801704c:	f04f 0800 	mov.w	r8, #0
 8017050:	f104 091a 	add.w	r9, r4, #26
 8017054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017056:	3b01      	subs	r3, #1
 8017058:	4543      	cmp	r3, r8
 801705a:	dc09      	bgt.n	8017070 <_printf_float+0x264>
 801705c:	6823      	ldr	r3, [r4, #0]
 801705e:	079b      	lsls	r3, r3, #30
 8017060:	f100 8105 	bmi.w	801726e <_printf_float+0x462>
 8017064:	68e0      	ldr	r0, [r4, #12]
 8017066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017068:	4298      	cmp	r0, r3
 801706a:	bfb8      	it	lt
 801706c:	4618      	movlt	r0, r3
 801706e:	e730      	b.n	8016ed2 <_printf_float+0xc6>
 8017070:	2301      	movs	r3, #1
 8017072:	464a      	mov	r2, r9
 8017074:	4631      	mov	r1, r6
 8017076:	4628      	mov	r0, r5
 8017078:	47b8      	blx	r7
 801707a:	3001      	adds	r0, #1
 801707c:	f43f af27 	beq.w	8016ece <_printf_float+0xc2>
 8017080:	f108 0801 	add.w	r8, r8, #1
 8017084:	e7e6      	b.n	8017054 <_printf_float+0x248>
 8017086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017088:	2b00      	cmp	r3, #0
 801708a:	dc39      	bgt.n	8017100 <_printf_float+0x2f4>
 801708c:	4a1b      	ldr	r2, [pc, #108]	; (80170fc <_printf_float+0x2f0>)
 801708e:	2301      	movs	r3, #1
 8017090:	4631      	mov	r1, r6
 8017092:	4628      	mov	r0, r5
 8017094:	47b8      	blx	r7
 8017096:	3001      	adds	r0, #1
 8017098:	f43f af19 	beq.w	8016ece <_printf_float+0xc2>
 801709c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80170a0:	4313      	orrs	r3, r2
 80170a2:	d102      	bne.n	80170aa <_printf_float+0x29e>
 80170a4:	6823      	ldr	r3, [r4, #0]
 80170a6:	07d9      	lsls	r1, r3, #31
 80170a8:	d5d8      	bpl.n	801705c <_printf_float+0x250>
 80170aa:	ee18 3a10 	vmov	r3, s16
 80170ae:	4652      	mov	r2, sl
 80170b0:	4631      	mov	r1, r6
 80170b2:	4628      	mov	r0, r5
 80170b4:	47b8      	blx	r7
 80170b6:	3001      	adds	r0, #1
 80170b8:	f43f af09 	beq.w	8016ece <_printf_float+0xc2>
 80170bc:	f04f 0900 	mov.w	r9, #0
 80170c0:	f104 0a1a 	add.w	sl, r4, #26
 80170c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170c6:	425b      	negs	r3, r3
 80170c8:	454b      	cmp	r3, r9
 80170ca:	dc01      	bgt.n	80170d0 <_printf_float+0x2c4>
 80170cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170ce:	e792      	b.n	8016ff6 <_printf_float+0x1ea>
 80170d0:	2301      	movs	r3, #1
 80170d2:	4652      	mov	r2, sl
 80170d4:	4631      	mov	r1, r6
 80170d6:	4628      	mov	r0, r5
 80170d8:	47b8      	blx	r7
 80170da:	3001      	adds	r0, #1
 80170dc:	f43f aef7 	beq.w	8016ece <_printf_float+0xc2>
 80170e0:	f109 0901 	add.w	r9, r9, #1
 80170e4:	e7ee      	b.n	80170c4 <_printf_float+0x2b8>
 80170e6:	bf00      	nop
 80170e8:	7fefffff 	.word	0x7fefffff
 80170ec:	08032bf8 	.word	0x08032bf8
 80170f0:	08032bfc 	.word	0x08032bfc
 80170f4:	08032c04 	.word	0x08032c04
 80170f8:	08032c00 	.word	0x08032c00
 80170fc:	08032c08 	.word	0x08032c08
 8017100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017102:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017104:	429a      	cmp	r2, r3
 8017106:	bfa8      	it	ge
 8017108:	461a      	movge	r2, r3
 801710a:	2a00      	cmp	r2, #0
 801710c:	4691      	mov	r9, r2
 801710e:	dc37      	bgt.n	8017180 <_printf_float+0x374>
 8017110:	f04f 0b00 	mov.w	fp, #0
 8017114:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017118:	f104 021a 	add.w	r2, r4, #26
 801711c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801711e:	9305      	str	r3, [sp, #20]
 8017120:	eba3 0309 	sub.w	r3, r3, r9
 8017124:	455b      	cmp	r3, fp
 8017126:	dc33      	bgt.n	8017190 <_printf_float+0x384>
 8017128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801712c:	429a      	cmp	r2, r3
 801712e:	db3b      	blt.n	80171a8 <_printf_float+0x39c>
 8017130:	6823      	ldr	r3, [r4, #0]
 8017132:	07da      	lsls	r2, r3, #31
 8017134:	d438      	bmi.n	80171a8 <_printf_float+0x39c>
 8017136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017138:	9b05      	ldr	r3, [sp, #20]
 801713a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801713c:	1ad3      	subs	r3, r2, r3
 801713e:	eba2 0901 	sub.w	r9, r2, r1
 8017142:	4599      	cmp	r9, r3
 8017144:	bfa8      	it	ge
 8017146:	4699      	movge	r9, r3
 8017148:	f1b9 0f00 	cmp.w	r9, #0
 801714c:	dc35      	bgt.n	80171ba <_printf_float+0x3ae>
 801714e:	f04f 0800 	mov.w	r8, #0
 8017152:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017156:	f104 0a1a 	add.w	sl, r4, #26
 801715a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801715e:	1a9b      	subs	r3, r3, r2
 8017160:	eba3 0309 	sub.w	r3, r3, r9
 8017164:	4543      	cmp	r3, r8
 8017166:	f77f af79 	ble.w	801705c <_printf_float+0x250>
 801716a:	2301      	movs	r3, #1
 801716c:	4652      	mov	r2, sl
 801716e:	4631      	mov	r1, r6
 8017170:	4628      	mov	r0, r5
 8017172:	47b8      	blx	r7
 8017174:	3001      	adds	r0, #1
 8017176:	f43f aeaa 	beq.w	8016ece <_printf_float+0xc2>
 801717a:	f108 0801 	add.w	r8, r8, #1
 801717e:	e7ec      	b.n	801715a <_printf_float+0x34e>
 8017180:	4613      	mov	r3, r2
 8017182:	4631      	mov	r1, r6
 8017184:	4642      	mov	r2, r8
 8017186:	4628      	mov	r0, r5
 8017188:	47b8      	blx	r7
 801718a:	3001      	adds	r0, #1
 801718c:	d1c0      	bne.n	8017110 <_printf_float+0x304>
 801718e:	e69e      	b.n	8016ece <_printf_float+0xc2>
 8017190:	2301      	movs	r3, #1
 8017192:	4631      	mov	r1, r6
 8017194:	4628      	mov	r0, r5
 8017196:	9205      	str	r2, [sp, #20]
 8017198:	47b8      	blx	r7
 801719a:	3001      	adds	r0, #1
 801719c:	f43f ae97 	beq.w	8016ece <_printf_float+0xc2>
 80171a0:	9a05      	ldr	r2, [sp, #20]
 80171a2:	f10b 0b01 	add.w	fp, fp, #1
 80171a6:	e7b9      	b.n	801711c <_printf_float+0x310>
 80171a8:	ee18 3a10 	vmov	r3, s16
 80171ac:	4652      	mov	r2, sl
 80171ae:	4631      	mov	r1, r6
 80171b0:	4628      	mov	r0, r5
 80171b2:	47b8      	blx	r7
 80171b4:	3001      	adds	r0, #1
 80171b6:	d1be      	bne.n	8017136 <_printf_float+0x32a>
 80171b8:	e689      	b.n	8016ece <_printf_float+0xc2>
 80171ba:	9a05      	ldr	r2, [sp, #20]
 80171bc:	464b      	mov	r3, r9
 80171be:	4442      	add	r2, r8
 80171c0:	4631      	mov	r1, r6
 80171c2:	4628      	mov	r0, r5
 80171c4:	47b8      	blx	r7
 80171c6:	3001      	adds	r0, #1
 80171c8:	d1c1      	bne.n	801714e <_printf_float+0x342>
 80171ca:	e680      	b.n	8016ece <_printf_float+0xc2>
 80171cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80171ce:	2a01      	cmp	r2, #1
 80171d0:	dc01      	bgt.n	80171d6 <_printf_float+0x3ca>
 80171d2:	07db      	lsls	r3, r3, #31
 80171d4:	d538      	bpl.n	8017248 <_printf_float+0x43c>
 80171d6:	2301      	movs	r3, #1
 80171d8:	4642      	mov	r2, r8
 80171da:	4631      	mov	r1, r6
 80171dc:	4628      	mov	r0, r5
 80171de:	47b8      	blx	r7
 80171e0:	3001      	adds	r0, #1
 80171e2:	f43f ae74 	beq.w	8016ece <_printf_float+0xc2>
 80171e6:	ee18 3a10 	vmov	r3, s16
 80171ea:	4652      	mov	r2, sl
 80171ec:	4631      	mov	r1, r6
 80171ee:	4628      	mov	r0, r5
 80171f0:	47b8      	blx	r7
 80171f2:	3001      	adds	r0, #1
 80171f4:	f43f ae6b 	beq.w	8016ece <_printf_float+0xc2>
 80171f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80171fc:	2200      	movs	r2, #0
 80171fe:	2300      	movs	r3, #0
 8017200:	f7e9 fc72 	bl	8000ae8 <__aeabi_dcmpeq>
 8017204:	b9d8      	cbnz	r0, 801723e <_printf_float+0x432>
 8017206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017208:	f108 0201 	add.w	r2, r8, #1
 801720c:	3b01      	subs	r3, #1
 801720e:	4631      	mov	r1, r6
 8017210:	4628      	mov	r0, r5
 8017212:	47b8      	blx	r7
 8017214:	3001      	adds	r0, #1
 8017216:	d10e      	bne.n	8017236 <_printf_float+0x42a>
 8017218:	e659      	b.n	8016ece <_printf_float+0xc2>
 801721a:	2301      	movs	r3, #1
 801721c:	4652      	mov	r2, sl
 801721e:	4631      	mov	r1, r6
 8017220:	4628      	mov	r0, r5
 8017222:	47b8      	blx	r7
 8017224:	3001      	adds	r0, #1
 8017226:	f43f ae52 	beq.w	8016ece <_printf_float+0xc2>
 801722a:	f108 0801 	add.w	r8, r8, #1
 801722e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017230:	3b01      	subs	r3, #1
 8017232:	4543      	cmp	r3, r8
 8017234:	dcf1      	bgt.n	801721a <_printf_float+0x40e>
 8017236:	464b      	mov	r3, r9
 8017238:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801723c:	e6dc      	b.n	8016ff8 <_printf_float+0x1ec>
 801723e:	f04f 0800 	mov.w	r8, #0
 8017242:	f104 0a1a 	add.w	sl, r4, #26
 8017246:	e7f2      	b.n	801722e <_printf_float+0x422>
 8017248:	2301      	movs	r3, #1
 801724a:	4642      	mov	r2, r8
 801724c:	e7df      	b.n	801720e <_printf_float+0x402>
 801724e:	2301      	movs	r3, #1
 8017250:	464a      	mov	r2, r9
 8017252:	4631      	mov	r1, r6
 8017254:	4628      	mov	r0, r5
 8017256:	47b8      	blx	r7
 8017258:	3001      	adds	r0, #1
 801725a:	f43f ae38 	beq.w	8016ece <_printf_float+0xc2>
 801725e:	f108 0801 	add.w	r8, r8, #1
 8017262:	68e3      	ldr	r3, [r4, #12]
 8017264:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017266:	1a5b      	subs	r3, r3, r1
 8017268:	4543      	cmp	r3, r8
 801726a:	dcf0      	bgt.n	801724e <_printf_float+0x442>
 801726c:	e6fa      	b.n	8017064 <_printf_float+0x258>
 801726e:	f04f 0800 	mov.w	r8, #0
 8017272:	f104 0919 	add.w	r9, r4, #25
 8017276:	e7f4      	b.n	8017262 <_printf_float+0x456>

08017278 <_printf_common>:
 8017278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801727c:	4616      	mov	r6, r2
 801727e:	4699      	mov	r9, r3
 8017280:	688a      	ldr	r2, [r1, #8]
 8017282:	690b      	ldr	r3, [r1, #16]
 8017284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017288:	4293      	cmp	r3, r2
 801728a:	bfb8      	it	lt
 801728c:	4613      	movlt	r3, r2
 801728e:	6033      	str	r3, [r6, #0]
 8017290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017294:	4607      	mov	r7, r0
 8017296:	460c      	mov	r4, r1
 8017298:	b10a      	cbz	r2, 801729e <_printf_common+0x26>
 801729a:	3301      	adds	r3, #1
 801729c:	6033      	str	r3, [r6, #0]
 801729e:	6823      	ldr	r3, [r4, #0]
 80172a0:	0699      	lsls	r1, r3, #26
 80172a2:	bf42      	ittt	mi
 80172a4:	6833      	ldrmi	r3, [r6, #0]
 80172a6:	3302      	addmi	r3, #2
 80172a8:	6033      	strmi	r3, [r6, #0]
 80172aa:	6825      	ldr	r5, [r4, #0]
 80172ac:	f015 0506 	ands.w	r5, r5, #6
 80172b0:	d106      	bne.n	80172c0 <_printf_common+0x48>
 80172b2:	f104 0a19 	add.w	sl, r4, #25
 80172b6:	68e3      	ldr	r3, [r4, #12]
 80172b8:	6832      	ldr	r2, [r6, #0]
 80172ba:	1a9b      	subs	r3, r3, r2
 80172bc:	42ab      	cmp	r3, r5
 80172be:	dc26      	bgt.n	801730e <_printf_common+0x96>
 80172c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80172c4:	1e13      	subs	r3, r2, #0
 80172c6:	6822      	ldr	r2, [r4, #0]
 80172c8:	bf18      	it	ne
 80172ca:	2301      	movne	r3, #1
 80172cc:	0692      	lsls	r2, r2, #26
 80172ce:	d42b      	bmi.n	8017328 <_printf_common+0xb0>
 80172d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80172d4:	4649      	mov	r1, r9
 80172d6:	4638      	mov	r0, r7
 80172d8:	47c0      	blx	r8
 80172da:	3001      	adds	r0, #1
 80172dc:	d01e      	beq.n	801731c <_printf_common+0xa4>
 80172de:	6823      	ldr	r3, [r4, #0]
 80172e0:	68e5      	ldr	r5, [r4, #12]
 80172e2:	6832      	ldr	r2, [r6, #0]
 80172e4:	f003 0306 	and.w	r3, r3, #6
 80172e8:	2b04      	cmp	r3, #4
 80172ea:	bf08      	it	eq
 80172ec:	1aad      	subeq	r5, r5, r2
 80172ee:	68a3      	ldr	r3, [r4, #8]
 80172f0:	6922      	ldr	r2, [r4, #16]
 80172f2:	bf0c      	ite	eq
 80172f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172f8:	2500      	movne	r5, #0
 80172fa:	4293      	cmp	r3, r2
 80172fc:	bfc4      	itt	gt
 80172fe:	1a9b      	subgt	r3, r3, r2
 8017300:	18ed      	addgt	r5, r5, r3
 8017302:	2600      	movs	r6, #0
 8017304:	341a      	adds	r4, #26
 8017306:	42b5      	cmp	r5, r6
 8017308:	d11a      	bne.n	8017340 <_printf_common+0xc8>
 801730a:	2000      	movs	r0, #0
 801730c:	e008      	b.n	8017320 <_printf_common+0xa8>
 801730e:	2301      	movs	r3, #1
 8017310:	4652      	mov	r2, sl
 8017312:	4649      	mov	r1, r9
 8017314:	4638      	mov	r0, r7
 8017316:	47c0      	blx	r8
 8017318:	3001      	adds	r0, #1
 801731a:	d103      	bne.n	8017324 <_printf_common+0xac>
 801731c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017324:	3501      	adds	r5, #1
 8017326:	e7c6      	b.n	80172b6 <_printf_common+0x3e>
 8017328:	18e1      	adds	r1, r4, r3
 801732a:	1c5a      	adds	r2, r3, #1
 801732c:	2030      	movs	r0, #48	; 0x30
 801732e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017332:	4422      	add	r2, r4
 8017334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801733c:	3302      	adds	r3, #2
 801733e:	e7c7      	b.n	80172d0 <_printf_common+0x58>
 8017340:	2301      	movs	r3, #1
 8017342:	4622      	mov	r2, r4
 8017344:	4649      	mov	r1, r9
 8017346:	4638      	mov	r0, r7
 8017348:	47c0      	blx	r8
 801734a:	3001      	adds	r0, #1
 801734c:	d0e6      	beq.n	801731c <_printf_common+0xa4>
 801734e:	3601      	adds	r6, #1
 8017350:	e7d9      	b.n	8017306 <_printf_common+0x8e>
	...

08017354 <_printf_i>:
 8017354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017358:	460c      	mov	r4, r1
 801735a:	4691      	mov	r9, r2
 801735c:	7e27      	ldrb	r7, [r4, #24]
 801735e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017360:	2f78      	cmp	r7, #120	; 0x78
 8017362:	4680      	mov	r8, r0
 8017364:	469a      	mov	sl, r3
 8017366:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801736a:	d807      	bhi.n	801737c <_printf_i+0x28>
 801736c:	2f62      	cmp	r7, #98	; 0x62
 801736e:	d80a      	bhi.n	8017386 <_printf_i+0x32>
 8017370:	2f00      	cmp	r7, #0
 8017372:	f000 80d8 	beq.w	8017526 <_printf_i+0x1d2>
 8017376:	2f58      	cmp	r7, #88	; 0x58
 8017378:	f000 80a3 	beq.w	80174c2 <_printf_i+0x16e>
 801737c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017384:	e03a      	b.n	80173fc <_printf_i+0xa8>
 8017386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801738a:	2b15      	cmp	r3, #21
 801738c:	d8f6      	bhi.n	801737c <_printf_i+0x28>
 801738e:	a001      	add	r0, pc, #4	; (adr r0, 8017394 <_printf_i+0x40>)
 8017390:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017394:	080173ed 	.word	0x080173ed
 8017398:	08017401 	.word	0x08017401
 801739c:	0801737d 	.word	0x0801737d
 80173a0:	0801737d 	.word	0x0801737d
 80173a4:	0801737d 	.word	0x0801737d
 80173a8:	0801737d 	.word	0x0801737d
 80173ac:	08017401 	.word	0x08017401
 80173b0:	0801737d 	.word	0x0801737d
 80173b4:	0801737d 	.word	0x0801737d
 80173b8:	0801737d 	.word	0x0801737d
 80173bc:	0801737d 	.word	0x0801737d
 80173c0:	0801750d 	.word	0x0801750d
 80173c4:	08017431 	.word	0x08017431
 80173c8:	080174ef 	.word	0x080174ef
 80173cc:	0801737d 	.word	0x0801737d
 80173d0:	0801737d 	.word	0x0801737d
 80173d4:	0801752f 	.word	0x0801752f
 80173d8:	0801737d 	.word	0x0801737d
 80173dc:	08017431 	.word	0x08017431
 80173e0:	0801737d 	.word	0x0801737d
 80173e4:	0801737d 	.word	0x0801737d
 80173e8:	080174f7 	.word	0x080174f7
 80173ec:	680b      	ldr	r3, [r1, #0]
 80173ee:	1d1a      	adds	r2, r3, #4
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	600a      	str	r2, [r1, #0]
 80173f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80173f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80173fc:	2301      	movs	r3, #1
 80173fe:	e0a3      	b.n	8017548 <_printf_i+0x1f4>
 8017400:	6825      	ldr	r5, [r4, #0]
 8017402:	6808      	ldr	r0, [r1, #0]
 8017404:	062e      	lsls	r6, r5, #24
 8017406:	f100 0304 	add.w	r3, r0, #4
 801740a:	d50a      	bpl.n	8017422 <_printf_i+0xce>
 801740c:	6805      	ldr	r5, [r0, #0]
 801740e:	600b      	str	r3, [r1, #0]
 8017410:	2d00      	cmp	r5, #0
 8017412:	da03      	bge.n	801741c <_printf_i+0xc8>
 8017414:	232d      	movs	r3, #45	; 0x2d
 8017416:	426d      	negs	r5, r5
 8017418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801741c:	485e      	ldr	r0, [pc, #376]	; (8017598 <_printf_i+0x244>)
 801741e:	230a      	movs	r3, #10
 8017420:	e019      	b.n	8017456 <_printf_i+0x102>
 8017422:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017426:	6805      	ldr	r5, [r0, #0]
 8017428:	600b      	str	r3, [r1, #0]
 801742a:	bf18      	it	ne
 801742c:	b22d      	sxthne	r5, r5
 801742e:	e7ef      	b.n	8017410 <_printf_i+0xbc>
 8017430:	680b      	ldr	r3, [r1, #0]
 8017432:	6825      	ldr	r5, [r4, #0]
 8017434:	1d18      	adds	r0, r3, #4
 8017436:	6008      	str	r0, [r1, #0]
 8017438:	0628      	lsls	r0, r5, #24
 801743a:	d501      	bpl.n	8017440 <_printf_i+0xec>
 801743c:	681d      	ldr	r5, [r3, #0]
 801743e:	e002      	b.n	8017446 <_printf_i+0xf2>
 8017440:	0669      	lsls	r1, r5, #25
 8017442:	d5fb      	bpl.n	801743c <_printf_i+0xe8>
 8017444:	881d      	ldrh	r5, [r3, #0]
 8017446:	4854      	ldr	r0, [pc, #336]	; (8017598 <_printf_i+0x244>)
 8017448:	2f6f      	cmp	r7, #111	; 0x6f
 801744a:	bf0c      	ite	eq
 801744c:	2308      	moveq	r3, #8
 801744e:	230a      	movne	r3, #10
 8017450:	2100      	movs	r1, #0
 8017452:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017456:	6866      	ldr	r6, [r4, #4]
 8017458:	60a6      	str	r6, [r4, #8]
 801745a:	2e00      	cmp	r6, #0
 801745c:	bfa2      	ittt	ge
 801745e:	6821      	ldrge	r1, [r4, #0]
 8017460:	f021 0104 	bicge.w	r1, r1, #4
 8017464:	6021      	strge	r1, [r4, #0]
 8017466:	b90d      	cbnz	r5, 801746c <_printf_i+0x118>
 8017468:	2e00      	cmp	r6, #0
 801746a:	d04d      	beq.n	8017508 <_printf_i+0x1b4>
 801746c:	4616      	mov	r6, r2
 801746e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017472:	fb03 5711 	mls	r7, r3, r1, r5
 8017476:	5dc7      	ldrb	r7, [r0, r7]
 8017478:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801747c:	462f      	mov	r7, r5
 801747e:	42bb      	cmp	r3, r7
 8017480:	460d      	mov	r5, r1
 8017482:	d9f4      	bls.n	801746e <_printf_i+0x11a>
 8017484:	2b08      	cmp	r3, #8
 8017486:	d10b      	bne.n	80174a0 <_printf_i+0x14c>
 8017488:	6823      	ldr	r3, [r4, #0]
 801748a:	07df      	lsls	r7, r3, #31
 801748c:	d508      	bpl.n	80174a0 <_printf_i+0x14c>
 801748e:	6923      	ldr	r3, [r4, #16]
 8017490:	6861      	ldr	r1, [r4, #4]
 8017492:	4299      	cmp	r1, r3
 8017494:	bfde      	ittt	le
 8017496:	2330      	movle	r3, #48	; 0x30
 8017498:	f806 3c01 	strble.w	r3, [r6, #-1]
 801749c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80174a0:	1b92      	subs	r2, r2, r6
 80174a2:	6122      	str	r2, [r4, #16]
 80174a4:	f8cd a000 	str.w	sl, [sp]
 80174a8:	464b      	mov	r3, r9
 80174aa:	aa03      	add	r2, sp, #12
 80174ac:	4621      	mov	r1, r4
 80174ae:	4640      	mov	r0, r8
 80174b0:	f7ff fee2 	bl	8017278 <_printf_common>
 80174b4:	3001      	adds	r0, #1
 80174b6:	d14c      	bne.n	8017552 <_printf_i+0x1fe>
 80174b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174bc:	b004      	add	sp, #16
 80174be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174c2:	4835      	ldr	r0, [pc, #212]	; (8017598 <_printf_i+0x244>)
 80174c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80174c8:	6823      	ldr	r3, [r4, #0]
 80174ca:	680e      	ldr	r6, [r1, #0]
 80174cc:	061f      	lsls	r7, r3, #24
 80174ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80174d2:	600e      	str	r6, [r1, #0]
 80174d4:	d514      	bpl.n	8017500 <_printf_i+0x1ac>
 80174d6:	07d9      	lsls	r1, r3, #31
 80174d8:	bf44      	itt	mi
 80174da:	f043 0320 	orrmi.w	r3, r3, #32
 80174de:	6023      	strmi	r3, [r4, #0]
 80174e0:	b91d      	cbnz	r5, 80174ea <_printf_i+0x196>
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	f023 0320 	bic.w	r3, r3, #32
 80174e8:	6023      	str	r3, [r4, #0]
 80174ea:	2310      	movs	r3, #16
 80174ec:	e7b0      	b.n	8017450 <_printf_i+0xfc>
 80174ee:	6823      	ldr	r3, [r4, #0]
 80174f0:	f043 0320 	orr.w	r3, r3, #32
 80174f4:	6023      	str	r3, [r4, #0]
 80174f6:	2378      	movs	r3, #120	; 0x78
 80174f8:	4828      	ldr	r0, [pc, #160]	; (801759c <_printf_i+0x248>)
 80174fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80174fe:	e7e3      	b.n	80174c8 <_printf_i+0x174>
 8017500:	065e      	lsls	r6, r3, #25
 8017502:	bf48      	it	mi
 8017504:	b2ad      	uxthmi	r5, r5
 8017506:	e7e6      	b.n	80174d6 <_printf_i+0x182>
 8017508:	4616      	mov	r6, r2
 801750a:	e7bb      	b.n	8017484 <_printf_i+0x130>
 801750c:	680b      	ldr	r3, [r1, #0]
 801750e:	6826      	ldr	r6, [r4, #0]
 8017510:	6960      	ldr	r0, [r4, #20]
 8017512:	1d1d      	adds	r5, r3, #4
 8017514:	600d      	str	r5, [r1, #0]
 8017516:	0635      	lsls	r5, r6, #24
 8017518:	681b      	ldr	r3, [r3, #0]
 801751a:	d501      	bpl.n	8017520 <_printf_i+0x1cc>
 801751c:	6018      	str	r0, [r3, #0]
 801751e:	e002      	b.n	8017526 <_printf_i+0x1d2>
 8017520:	0671      	lsls	r1, r6, #25
 8017522:	d5fb      	bpl.n	801751c <_printf_i+0x1c8>
 8017524:	8018      	strh	r0, [r3, #0]
 8017526:	2300      	movs	r3, #0
 8017528:	6123      	str	r3, [r4, #16]
 801752a:	4616      	mov	r6, r2
 801752c:	e7ba      	b.n	80174a4 <_printf_i+0x150>
 801752e:	680b      	ldr	r3, [r1, #0]
 8017530:	1d1a      	adds	r2, r3, #4
 8017532:	600a      	str	r2, [r1, #0]
 8017534:	681e      	ldr	r6, [r3, #0]
 8017536:	6862      	ldr	r2, [r4, #4]
 8017538:	2100      	movs	r1, #0
 801753a:	4630      	mov	r0, r6
 801753c:	f7e8 fe60 	bl	8000200 <memchr>
 8017540:	b108      	cbz	r0, 8017546 <_printf_i+0x1f2>
 8017542:	1b80      	subs	r0, r0, r6
 8017544:	6060      	str	r0, [r4, #4]
 8017546:	6863      	ldr	r3, [r4, #4]
 8017548:	6123      	str	r3, [r4, #16]
 801754a:	2300      	movs	r3, #0
 801754c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017550:	e7a8      	b.n	80174a4 <_printf_i+0x150>
 8017552:	6923      	ldr	r3, [r4, #16]
 8017554:	4632      	mov	r2, r6
 8017556:	4649      	mov	r1, r9
 8017558:	4640      	mov	r0, r8
 801755a:	47d0      	blx	sl
 801755c:	3001      	adds	r0, #1
 801755e:	d0ab      	beq.n	80174b8 <_printf_i+0x164>
 8017560:	6823      	ldr	r3, [r4, #0]
 8017562:	079b      	lsls	r3, r3, #30
 8017564:	d413      	bmi.n	801758e <_printf_i+0x23a>
 8017566:	68e0      	ldr	r0, [r4, #12]
 8017568:	9b03      	ldr	r3, [sp, #12]
 801756a:	4298      	cmp	r0, r3
 801756c:	bfb8      	it	lt
 801756e:	4618      	movlt	r0, r3
 8017570:	e7a4      	b.n	80174bc <_printf_i+0x168>
 8017572:	2301      	movs	r3, #1
 8017574:	4632      	mov	r2, r6
 8017576:	4649      	mov	r1, r9
 8017578:	4640      	mov	r0, r8
 801757a:	47d0      	blx	sl
 801757c:	3001      	adds	r0, #1
 801757e:	d09b      	beq.n	80174b8 <_printf_i+0x164>
 8017580:	3501      	adds	r5, #1
 8017582:	68e3      	ldr	r3, [r4, #12]
 8017584:	9903      	ldr	r1, [sp, #12]
 8017586:	1a5b      	subs	r3, r3, r1
 8017588:	42ab      	cmp	r3, r5
 801758a:	dcf2      	bgt.n	8017572 <_printf_i+0x21e>
 801758c:	e7eb      	b.n	8017566 <_printf_i+0x212>
 801758e:	2500      	movs	r5, #0
 8017590:	f104 0619 	add.w	r6, r4, #25
 8017594:	e7f5      	b.n	8017582 <_printf_i+0x22e>
 8017596:	bf00      	nop
 8017598:	08032c0a 	.word	0x08032c0a
 801759c:	08032c1b 	.word	0x08032c1b

080175a0 <iprintf>:
 80175a0:	b40f      	push	{r0, r1, r2, r3}
 80175a2:	4b0a      	ldr	r3, [pc, #40]	; (80175cc <iprintf+0x2c>)
 80175a4:	b513      	push	{r0, r1, r4, lr}
 80175a6:	681c      	ldr	r4, [r3, #0]
 80175a8:	b124      	cbz	r4, 80175b4 <iprintf+0x14>
 80175aa:	69a3      	ldr	r3, [r4, #24]
 80175ac:	b913      	cbnz	r3, 80175b4 <iprintf+0x14>
 80175ae:	4620      	mov	r0, r4
 80175b0:	f002 f912 	bl	80197d8 <__sinit>
 80175b4:	ab05      	add	r3, sp, #20
 80175b6:	9a04      	ldr	r2, [sp, #16]
 80175b8:	68a1      	ldr	r1, [r4, #8]
 80175ba:	9301      	str	r3, [sp, #4]
 80175bc:	4620      	mov	r0, r4
 80175be:	f003 fca9 	bl	801af14 <_vfiprintf_r>
 80175c2:	b002      	add	sp, #8
 80175c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175c8:	b004      	add	sp, #16
 80175ca:	4770      	bx	lr
 80175cc:	200005c8 	.word	0x200005c8

080175d0 <_puts_r>:
 80175d0:	b570      	push	{r4, r5, r6, lr}
 80175d2:	460e      	mov	r6, r1
 80175d4:	4605      	mov	r5, r0
 80175d6:	b118      	cbz	r0, 80175e0 <_puts_r+0x10>
 80175d8:	6983      	ldr	r3, [r0, #24]
 80175da:	b90b      	cbnz	r3, 80175e0 <_puts_r+0x10>
 80175dc:	f002 f8fc 	bl	80197d8 <__sinit>
 80175e0:	69ab      	ldr	r3, [r5, #24]
 80175e2:	68ac      	ldr	r4, [r5, #8]
 80175e4:	b913      	cbnz	r3, 80175ec <_puts_r+0x1c>
 80175e6:	4628      	mov	r0, r5
 80175e8:	f002 f8f6 	bl	80197d8 <__sinit>
 80175ec:	4b2c      	ldr	r3, [pc, #176]	; (80176a0 <_puts_r+0xd0>)
 80175ee:	429c      	cmp	r4, r3
 80175f0:	d120      	bne.n	8017634 <_puts_r+0x64>
 80175f2:	686c      	ldr	r4, [r5, #4]
 80175f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80175f6:	07db      	lsls	r3, r3, #31
 80175f8:	d405      	bmi.n	8017606 <_puts_r+0x36>
 80175fa:	89a3      	ldrh	r3, [r4, #12]
 80175fc:	0598      	lsls	r0, r3, #22
 80175fe:	d402      	bmi.n	8017606 <_puts_r+0x36>
 8017600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017602:	f002 fd0c 	bl	801a01e <__retarget_lock_acquire_recursive>
 8017606:	89a3      	ldrh	r3, [r4, #12]
 8017608:	0719      	lsls	r1, r3, #28
 801760a:	d51d      	bpl.n	8017648 <_puts_r+0x78>
 801760c:	6923      	ldr	r3, [r4, #16]
 801760e:	b1db      	cbz	r3, 8017648 <_puts_r+0x78>
 8017610:	3e01      	subs	r6, #1
 8017612:	68a3      	ldr	r3, [r4, #8]
 8017614:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017618:	3b01      	subs	r3, #1
 801761a:	60a3      	str	r3, [r4, #8]
 801761c:	bb39      	cbnz	r1, 801766e <_puts_r+0x9e>
 801761e:	2b00      	cmp	r3, #0
 8017620:	da38      	bge.n	8017694 <_puts_r+0xc4>
 8017622:	4622      	mov	r2, r4
 8017624:	210a      	movs	r1, #10
 8017626:	4628      	mov	r0, r5
 8017628:	f001 f85e 	bl	80186e8 <__swbuf_r>
 801762c:	3001      	adds	r0, #1
 801762e:	d011      	beq.n	8017654 <_puts_r+0x84>
 8017630:	250a      	movs	r5, #10
 8017632:	e011      	b.n	8017658 <_puts_r+0x88>
 8017634:	4b1b      	ldr	r3, [pc, #108]	; (80176a4 <_puts_r+0xd4>)
 8017636:	429c      	cmp	r4, r3
 8017638:	d101      	bne.n	801763e <_puts_r+0x6e>
 801763a:	68ac      	ldr	r4, [r5, #8]
 801763c:	e7da      	b.n	80175f4 <_puts_r+0x24>
 801763e:	4b1a      	ldr	r3, [pc, #104]	; (80176a8 <_puts_r+0xd8>)
 8017640:	429c      	cmp	r4, r3
 8017642:	bf08      	it	eq
 8017644:	68ec      	ldreq	r4, [r5, #12]
 8017646:	e7d5      	b.n	80175f4 <_puts_r+0x24>
 8017648:	4621      	mov	r1, r4
 801764a:	4628      	mov	r0, r5
 801764c:	f001 f89e 	bl	801878c <__swsetup_r>
 8017650:	2800      	cmp	r0, #0
 8017652:	d0dd      	beq.n	8017610 <_puts_r+0x40>
 8017654:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801765a:	07da      	lsls	r2, r3, #31
 801765c:	d405      	bmi.n	801766a <_puts_r+0x9a>
 801765e:	89a3      	ldrh	r3, [r4, #12]
 8017660:	059b      	lsls	r3, r3, #22
 8017662:	d402      	bmi.n	801766a <_puts_r+0x9a>
 8017664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017666:	f002 fcdb 	bl	801a020 <__retarget_lock_release_recursive>
 801766a:	4628      	mov	r0, r5
 801766c:	bd70      	pop	{r4, r5, r6, pc}
 801766e:	2b00      	cmp	r3, #0
 8017670:	da04      	bge.n	801767c <_puts_r+0xac>
 8017672:	69a2      	ldr	r2, [r4, #24]
 8017674:	429a      	cmp	r2, r3
 8017676:	dc06      	bgt.n	8017686 <_puts_r+0xb6>
 8017678:	290a      	cmp	r1, #10
 801767a:	d004      	beq.n	8017686 <_puts_r+0xb6>
 801767c:	6823      	ldr	r3, [r4, #0]
 801767e:	1c5a      	adds	r2, r3, #1
 8017680:	6022      	str	r2, [r4, #0]
 8017682:	7019      	strb	r1, [r3, #0]
 8017684:	e7c5      	b.n	8017612 <_puts_r+0x42>
 8017686:	4622      	mov	r2, r4
 8017688:	4628      	mov	r0, r5
 801768a:	f001 f82d 	bl	80186e8 <__swbuf_r>
 801768e:	3001      	adds	r0, #1
 8017690:	d1bf      	bne.n	8017612 <_puts_r+0x42>
 8017692:	e7df      	b.n	8017654 <_puts_r+0x84>
 8017694:	6823      	ldr	r3, [r4, #0]
 8017696:	250a      	movs	r5, #10
 8017698:	1c5a      	adds	r2, r3, #1
 801769a:	6022      	str	r2, [r4, #0]
 801769c:	701d      	strb	r5, [r3, #0]
 801769e:	e7db      	b.n	8017658 <_puts_r+0x88>
 80176a0:	08032e34 	.word	0x08032e34
 80176a4:	08032e54 	.word	0x08032e54
 80176a8:	08032e14 	.word	0x08032e14

080176ac <puts>:
 80176ac:	4b02      	ldr	r3, [pc, #8]	; (80176b8 <puts+0xc>)
 80176ae:	4601      	mov	r1, r0
 80176b0:	6818      	ldr	r0, [r3, #0]
 80176b2:	f7ff bf8d 	b.w	80175d0 <_puts_r>
 80176b6:	bf00      	nop
 80176b8:	200005c8 	.word	0x200005c8

080176bc <rand>:
 80176bc:	4b17      	ldr	r3, [pc, #92]	; (801771c <rand+0x60>)
 80176be:	b510      	push	{r4, lr}
 80176c0:	681c      	ldr	r4, [r3, #0]
 80176c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80176c4:	b9b3      	cbnz	r3, 80176f4 <rand+0x38>
 80176c6:	2018      	movs	r0, #24
 80176c8:	f002 fd10 	bl	801a0ec <malloc>
 80176cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80176ce:	b928      	cbnz	r0, 80176dc <rand+0x20>
 80176d0:	4602      	mov	r2, r0
 80176d2:	4b13      	ldr	r3, [pc, #76]	; (8017720 <rand+0x64>)
 80176d4:	4813      	ldr	r0, [pc, #76]	; (8017724 <rand+0x68>)
 80176d6:	214e      	movs	r1, #78	; 0x4e
 80176d8:	f001 f8c6 	bl	8018868 <__assert_func>
 80176dc:	4a12      	ldr	r2, [pc, #72]	; (8017728 <rand+0x6c>)
 80176de:	4b13      	ldr	r3, [pc, #76]	; (801772c <rand+0x70>)
 80176e0:	e9c0 2300 	strd	r2, r3, [r0]
 80176e4:	4b12      	ldr	r3, [pc, #72]	; (8017730 <rand+0x74>)
 80176e6:	6083      	str	r3, [r0, #8]
 80176e8:	230b      	movs	r3, #11
 80176ea:	8183      	strh	r3, [r0, #12]
 80176ec:	2201      	movs	r2, #1
 80176ee:	2300      	movs	r3, #0
 80176f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80176f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80176f6:	480f      	ldr	r0, [pc, #60]	; (8017734 <rand+0x78>)
 80176f8:	690a      	ldr	r2, [r1, #16]
 80176fa:	694b      	ldr	r3, [r1, #20]
 80176fc:	4c0e      	ldr	r4, [pc, #56]	; (8017738 <rand+0x7c>)
 80176fe:	4350      	muls	r0, r2
 8017700:	fb04 0003 	mla	r0, r4, r3, r0
 8017704:	fba2 3404 	umull	r3, r4, r2, r4
 8017708:	1c5a      	adds	r2, r3, #1
 801770a:	4404      	add	r4, r0
 801770c:	f144 0000 	adc.w	r0, r4, #0
 8017710:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017714:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017718:	bd10      	pop	{r4, pc}
 801771a:	bf00      	nop
 801771c:	200005c8 	.word	0x200005c8
 8017720:	08032c2c 	.word	0x08032c2c
 8017724:	08032c43 	.word	0x08032c43
 8017728:	abcd330e 	.word	0xabcd330e
 801772c:	e66d1234 	.word	0xe66d1234
 8017730:	0005deec 	.word	0x0005deec
 8017734:	5851f42d 	.word	0x5851f42d
 8017738:	4c957f2d 	.word	0x4c957f2d

0801773c <sniprintf>:
 801773c:	b40c      	push	{r2, r3}
 801773e:	b530      	push	{r4, r5, lr}
 8017740:	4b17      	ldr	r3, [pc, #92]	; (80177a0 <sniprintf+0x64>)
 8017742:	1e0c      	subs	r4, r1, #0
 8017744:	681d      	ldr	r5, [r3, #0]
 8017746:	b09d      	sub	sp, #116	; 0x74
 8017748:	da08      	bge.n	801775c <sniprintf+0x20>
 801774a:	238b      	movs	r3, #139	; 0x8b
 801774c:	602b      	str	r3, [r5, #0]
 801774e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017752:	b01d      	add	sp, #116	; 0x74
 8017754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017758:	b002      	add	sp, #8
 801775a:	4770      	bx	lr
 801775c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017760:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017764:	bf14      	ite	ne
 8017766:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801776a:	4623      	moveq	r3, r4
 801776c:	9304      	str	r3, [sp, #16]
 801776e:	9307      	str	r3, [sp, #28]
 8017770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017774:	9002      	str	r0, [sp, #8]
 8017776:	9006      	str	r0, [sp, #24]
 8017778:	f8ad 3016 	strh.w	r3, [sp, #22]
 801777c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801777e:	ab21      	add	r3, sp, #132	; 0x84
 8017780:	a902      	add	r1, sp, #8
 8017782:	4628      	mov	r0, r5
 8017784:	9301      	str	r3, [sp, #4]
 8017786:	f003 fa9b 	bl	801acc0 <_svfiprintf_r>
 801778a:	1c43      	adds	r3, r0, #1
 801778c:	bfbc      	itt	lt
 801778e:	238b      	movlt	r3, #139	; 0x8b
 8017790:	602b      	strlt	r3, [r5, #0]
 8017792:	2c00      	cmp	r4, #0
 8017794:	d0dd      	beq.n	8017752 <sniprintf+0x16>
 8017796:	9b02      	ldr	r3, [sp, #8]
 8017798:	2200      	movs	r2, #0
 801779a:	701a      	strb	r2, [r3, #0]
 801779c:	e7d9      	b.n	8017752 <sniprintf+0x16>
 801779e:	bf00      	nop
 80177a0:	200005c8 	.word	0x200005c8

080177a4 <siprintf>:
 80177a4:	b40e      	push	{r1, r2, r3}
 80177a6:	b500      	push	{lr}
 80177a8:	b09c      	sub	sp, #112	; 0x70
 80177aa:	ab1d      	add	r3, sp, #116	; 0x74
 80177ac:	9002      	str	r0, [sp, #8]
 80177ae:	9006      	str	r0, [sp, #24]
 80177b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80177b4:	4809      	ldr	r0, [pc, #36]	; (80177dc <siprintf+0x38>)
 80177b6:	9107      	str	r1, [sp, #28]
 80177b8:	9104      	str	r1, [sp, #16]
 80177ba:	4909      	ldr	r1, [pc, #36]	; (80177e0 <siprintf+0x3c>)
 80177bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80177c0:	9105      	str	r1, [sp, #20]
 80177c2:	6800      	ldr	r0, [r0, #0]
 80177c4:	9301      	str	r3, [sp, #4]
 80177c6:	a902      	add	r1, sp, #8
 80177c8:	f003 fa7a 	bl	801acc0 <_svfiprintf_r>
 80177cc:	9b02      	ldr	r3, [sp, #8]
 80177ce:	2200      	movs	r2, #0
 80177d0:	701a      	strb	r2, [r3, #0]
 80177d2:	b01c      	add	sp, #112	; 0x70
 80177d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80177d8:	b003      	add	sp, #12
 80177da:	4770      	bx	lr
 80177dc:	200005c8 	.word	0x200005c8
 80177e0:	ffff0208 	.word	0xffff0208

080177e4 <strcat>:
 80177e4:	b510      	push	{r4, lr}
 80177e6:	4602      	mov	r2, r0
 80177e8:	7814      	ldrb	r4, [r2, #0]
 80177ea:	4613      	mov	r3, r2
 80177ec:	3201      	adds	r2, #1
 80177ee:	2c00      	cmp	r4, #0
 80177f0:	d1fa      	bne.n	80177e8 <strcat+0x4>
 80177f2:	3b01      	subs	r3, #1
 80177f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80177fc:	2a00      	cmp	r2, #0
 80177fe:	d1f9      	bne.n	80177f4 <strcat+0x10>
 8017800:	bd10      	pop	{r4, pc}

08017802 <strchr>:
 8017802:	b2c9      	uxtb	r1, r1
 8017804:	4603      	mov	r3, r0
 8017806:	f810 2b01 	ldrb.w	r2, [r0], #1
 801780a:	b11a      	cbz	r2, 8017814 <strchr+0x12>
 801780c:	428a      	cmp	r2, r1
 801780e:	d1f9      	bne.n	8017804 <strchr+0x2>
 8017810:	4618      	mov	r0, r3
 8017812:	4770      	bx	lr
 8017814:	2900      	cmp	r1, #0
 8017816:	bf18      	it	ne
 8017818:	2300      	movne	r3, #0
 801781a:	e7f9      	b.n	8017810 <strchr+0xe>

0801781c <strcpy>:
 801781c:	4603      	mov	r3, r0
 801781e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017822:	f803 2b01 	strb.w	r2, [r3], #1
 8017826:	2a00      	cmp	r2, #0
 8017828:	d1f9      	bne.n	801781e <strcpy+0x2>
 801782a:	4770      	bx	lr

0801782c <strncmp>:
 801782c:	b510      	push	{r4, lr}
 801782e:	b16a      	cbz	r2, 801784c <strncmp+0x20>
 8017830:	3901      	subs	r1, #1
 8017832:	1884      	adds	r4, r0, r2
 8017834:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017838:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801783c:	4293      	cmp	r3, r2
 801783e:	d103      	bne.n	8017848 <strncmp+0x1c>
 8017840:	42a0      	cmp	r0, r4
 8017842:	d001      	beq.n	8017848 <strncmp+0x1c>
 8017844:	2b00      	cmp	r3, #0
 8017846:	d1f5      	bne.n	8017834 <strncmp+0x8>
 8017848:	1a98      	subs	r0, r3, r2
 801784a:	bd10      	pop	{r4, pc}
 801784c:	4610      	mov	r0, r2
 801784e:	e7fc      	b.n	801784a <strncmp+0x1e>

08017850 <strncpy>:
 8017850:	b510      	push	{r4, lr}
 8017852:	3901      	subs	r1, #1
 8017854:	4603      	mov	r3, r0
 8017856:	b132      	cbz	r2, 8017866 <strncpy+0x16>
 8017858:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801785c:	f803 4b01 	strb.w	r4, [r3], #1
 8017860:	3a01      	subs	r2, #1
 8017862:	2c00      	cmp	r4, #0
 8017864:	d1f7      	bne.n	8017856 <strncpy+0x6>
 8017866:	441a      	add	r2, r3
 8017868:	2100      	movs	r1, #0
 801786a:	4293      	cmp	r3, r2
 801786c:	d100      	bne.n	8017870 <strncpy+0x20>
 801786e:	bd10      	pop	{r4, pc}
 8017870:	f803 1b01 	strb.w	r1, [r3], #1
 8017874:	e7f9      	b.n	801786a <strncpy+0x1a>

08017876 <strstr>:
 8017876:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017878:	780c      	ldrb	r4, [r1, #0]
 801787a:	b164      	cbz	r4, 8017896 <strstr+0x20>
 801787c:	4603      	mov	r3, r0
 801787e:	781a      	ldrb	r2, [r3, #0]
 8017880:	4618      	mov	r0, r3
 8017882:	1c5e      	adds	r6, r3, #1
 8017884:	b90a      	cbnz	r2, 801788a <strstr+0x14>
 8017886:	4610      	mov	r0, r2
 8017888:	e005      	b.n	8017896 <strstr+0x20>
 801788a:	4294      	cmp	r4, r2
 801788c:	d108      	bne.n	80178a0 <strstr+0x2a>
 801788e:	460d      	mov	r5, r1
 8017890:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8017894:	b902      	cbnz	r2, 8017898 <strstr+0x22>
 8017896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017898:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801789c:	4297      	cmp	r7, r2
 801789e:	d0f7      	beq.n	8017890 <strstr+0x1a>
 80178a0:	4633      	mov	r3, r6
 80178a2:	e7ec      	b.n	801787e <strstr+0x8>

080178a4 <sulp>:
 80178a4:	b570      	push	{r4, r5, r6, lr}
 80178a6:	4604      	mov	r4, r0
 80178a8:	460d      	mov	r5, r1
 80178aa:	ec45 4b10 	vmov	d0, r4, r5
 80178ae:	4616      	mov	r6, r2
 80178b0:	f002 ffa2 	bl	801a7f8 <__ulp>
 80178b4:	ec51 0b10 	vmov	r0, r1, d0
 80178b8:	b17e      	cbz	r6, 80178da <sulp+0x36>
 80178ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80178be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	dd09      	ble.n	80178da <sulp+0x36>
 80178c6:	051b      	lsls	r3, r3, #20
 80178c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80178cc:	2400      	movs	r4, #0
 80178ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80178d2:	4622      	mov	r2, r4
 80178d4:	462b      	mov	r3, r5
 80178d6:	f7e8 fe9f 	bl	8000618 <__aeabi_dmul>
 80178da:	bd70      	pop	{r4, r5, r6, pc}
 80178dc:	0000      	movs	r0, r0
	...

080178e0 <_strtod_l>:
 80178e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178e4:	b0a3      	sub	sp, #140	; 0x8c
 80178e6:	461f      	mov	r7, r3
 80178e8:	2300      	movs	r3, #0
 80178ea:	931e      	str	r3, [sp, #120]	; 0x78
 80178ec:	4ba4      	ldr	r3, [pc, #656]	; (8017b80 <_strtod_l+0x2a0>)
 80178ee:	9219      	str	r2, [sp, #100]	; 0x64
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	9307      	str	r3, [sp, #28]
 80178f4:	4604      	mov	r4, r0
 80178f6:	4618      	mov	r0, r3
 80178f8:	4688      	mov	r8, r1
 80178fa:	f7e8 fc73 	bl	80001e4 <strlen>
 80178fe:	f04f 0a00 	mov.w	sl, #0
 8017902:	4605      	mov	r5, r0
 8017904:	f04f 0b00 	mov.w	fp, #0
 8017908:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801790c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801790e:	781a      	ldrb	r2, [r3, #0]
 8017910:	2a2b      	cmp	r2, #43	; 0x2b
 8017912:	d04c      	beq.n	80179ae <_strtod_l+0xce>
 8017914:	d839      	bhi.n	801798a <_strtod_l+0xaa>
 8017916:	2a0d      	cmp	r2, #13
 8017918:	d832      	bhi.n	8017980 <_strtod_l+0xa0>
 801791a:	2a08      	cmp	r2, #8
 801791c:	d832      	bhi.n	8017984 <_strtod_l+0xa4>
 801791e:	2a00      	cmp	r2, #0
 8017920:	d03c      	beq.n	801799c <_strtod_l+0xbc>
 8017922:	2300      	movs	r3, #0
 8017924:	930e      	str	r3, [sp, #56]	; 0x38
 8017926:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017928:	7833      	ldrb	r3, [r6, #0]
 801792a:	2b30      	cmp	r3, #48	; 0x30
 801792c:	f040 80b4 	bne.w	8017a98 <_strtod_l+0x1b8>
 8017930:	7873      	ldrb	r3, [r6, #1]
 8017932:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017936:	2b58      	cmp	r3, #88	; 0x58
 8017938:	d16c      	bne.n	8017a14 <_strtod_l+0x134>
 801793a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801793c:	9301      	str	r3, [sp, #4]
 801793e:	ab1e      	add	r3, sp, #120	; 0x78
 8017940:	9702      	str	r7, [sp, #8]
 8017942:	9300      	str	r3, [sp, #0]
 8017944:	4a8f      	ldr	r2, [pc, #572]	; (8017b84 <_strtod_l+0x2a4>)
 8017946:	ab1f      	add	r3, sp, #124	; 0x7c
 8017948:	a91d      	add	r1, sp, #116	; 0x74
 801794a:	4620      	mov	r0, r4
 801794c:	f002 f85a 	bl	8019a04 <__gethex>
 8017950:	f010 0707 	ands.w	r7, r0, #7
 8017954:	4605      	mov	r5, r0
 8017956:	d005      	beq.n	8017964 <_strtod_l+0x84>
 8017958:	2f06      	cmp	r7, #6
 801795a:	d12a      	bne.n	80179b2 <_strtod_l+0xd2>
 801795c:	3601      	adds	r6, #1
 801795e:	2300      	movs	r3, #0
 8017960:	961d      	str	r6, [sp, #116]	; 0x74
 8017962:	930e      	str	r3, [sp, #56]	; 0x38
 8017964:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017966:	2b00      	cmp	r3, #0
 8017968:	f040 8596 	bne.w	8018498 <_strtod_l+0xbb8>
 801796c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801796e:	b1db      	cbz	r3, 80179a8 <_strtod_l+0xc8>
 8017970:	4652      	mov	r2, sl
 8017972:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017976:	ec43 2b10 	vmov	d0, r2, r3
 801797a:	b023      	add	sp, #140	; 0x8c
 801797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017980:	2a20      	cmp	r2, #32
 8017982:	d1ce      	bne.n	8017922 <_strtod_l+0x42>
 8017984:	3301      	adds	r3, #1
 8017986:	931d      	str	r3, [sp, #116]	; 0x74
 8017988:	e7c0      	b.n	801790c <_strtod_l+0x2c>
 801798a:	2a2d      	cmp	r2, #45	; 0x2d
 801798c:	d1c9      	bne.n	8017922 <_strtod_l+0x42>
 801798e:	2201      	movs	r2, #1
 8017990:	920e      	str	r2, [sp, #56]	; 0x38
 8017992:	1c5a      	adds	r2, r3, #1
 8017994:	921d      	str	r2, [sp, #116]	; 0x74
 8017996:	785b      	ldrb	r3, [r3, #1]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d1c4      	bne.n	8017926 <_strtod_l+0x46>
 801799c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801799e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	f040 8576 	bne.w	8018494 <_strtod_l+0xbb4>
 80179a8:	4652      	mov	r2, sl
 80179aa:	465b      	mov	r3, fp
 80179ac:	e7e3      	b.n	8017976 <_strtod_l+0x96>
 80179ae:	2200      	movs	r2, #0
 80179b0:	e7ee      	b.n	8017990 <_strtod_l+0xb0>
 80179b2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80179b4:	b13a      	cbz	r2, 80179c6 <_strtod_l+0xe6>
 80179b6:	2135      	movs	r1, #53	; 0x35
 80179b8:	a820      	add	r0, sp, #128	; 0x80
 80179ba:	f003 f828 	bl	801aa0e <__copybits>
 80179be:	991e      	ldr	r1, [sp, #120]	; 0x78
 80179c0:	4620      	mov	r0, r4
 80179c2:	f002 fbed 	bl	801a1a0 <_Bfree>
 80179c6:	3f01      	subs	r7, #1
 80179c8:	2f05      	cmp	r7, #5
 80179ca:	d807      	bhi.n	80179dc <_strtod_l+0xfc>
 80179cc:	e8df f007 	tbb	[pc, r7]
 80179d0:	1d180b0e 	.word	0x1d180b0e
 80179d4:	030e      	.short	0x030e
 80179d6:	f04f 0b00 	mov.w	fp, #0
 80179da:	46da      	mov	sl, fp
 80179dc:	0728      	lsls	r0, r5, #28
 80179de:	d5c1      	bpl.n	8017964 <_strtod_l+0x84>
 80179e0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80179e4:	e7be      	b.n	8017964 <_strtod_l+0x84>
 80179e6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80179ea:	e7f7      	b.n	80179dc <_strtod_l+0xfc>
 80179ec:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80179f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80179f2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80179f6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80179fa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80179fe:	e7ed      	b.n	80179dc <_strtod_l+0xfc>
 8017a00:	f8df b184 	ldr.w	fp, [pc, #388]	; 8017b88 <_strtod_l+0x2a8>
 8017a04:	f04f 0a00 	mov.w	sl, #0
 8017a08:	e7e8      	b.n	80179dc <_strtod_l+0xfc>
 8017a0a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8017a0e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8017a12:	e7e3      	b.n	80179dc <_strtod_l+0xfc>
 8017a14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017a16:	1c5a      	adds	r2, r3, #1
 8017a18:	921d      	str	r2, [sp, #116]	; 0x74
 8017a1a:	785b      	ldrb	r3, [r3, #1]
 8017a1c:	2b30      	cmp	r3, #48	; 0x30
 8017a1e:	d0f9      	beq.n	8017a14 <_strtod_l+0x134>
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d09f      	beq.n	8017964 <_strtod_l+0x84>
 8017a24:	2301      	movs	r3, #1
 8017a26:	f04f 0900 	mov.w	r9, #0
 8017a2a:	9304      	str	r3, [sp, #16]
 8017a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8017a30:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017a34:	464f      	mov	r7, r9
 8017a36:	220a      	movs	r2, #10
 8017a38:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017a3a:	7806      	ldrb	r6, [r0, #0]
 8017a3c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017a40:	b2d9      	uxtb	r1, r3
 8017a42:	2909      	cmp	r1, #9
 8017a44:	d92a      	bls.n	8017a9c <_strtod_l+0x1bc>
 8017a46:	9907      	ldr	r1, [sp, #28]
 8017a48:	462a      	mov	r2, r5
 8017a4a:	f7ff feef 	bl	801782c <strncmp>
 8017a4e:	b398      	cbz	r0, 8017ab8 <_strtod_l+0x1d8>
 8017a50:	2000      	movs	r0, #0
 8017a52:	4633      	mov	r3, r6
 8017a54:	463d      	mov	r5, r7
 8017a56:	9007      	str	r0, [sp, #28]
 8017a58:	4602      	mov	r2, r0
 8017a5a:	2b65      	cmp	r3, #101	; 0x65
 8017a5c:	d001      	beq.n	8017a62 <_strtod_l+0x182>
 8017a5e:	2b45      	cmp	r3, #69	; 0x45
 8017a60:	d118      	bne.n	8017a94 <_strtod_l+0x1b4>
 8017a62:	b91d      	cbnz	r5, 8017a6c <_strtod_l+0x18c>
 8017a64:	9b04      	ldr	r3, [sp, #16]
 8017a66:	4303      	orrs	r3, r0
 8017a68:	d098      	beq.n	801799c <_strtod_l+0xbc>
 8017a6a:	2500      	movs	r5, #0
 8017a6c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8017a70:	f108 0301 	add.w	r3, r8, #1
 8017a74:	931d      	str	r3, [sp, #116]	; 0x74
 8017a76:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017a7a:	2b2b      	cmp	r3, #43	; 0x2b
 8017a7c:	d075      	beq.n	8017b6a <_strtod_l+0x28a>
 8017a7e:	2b2d      	cmp	r3, #45	; 0x2d
 8017a80:	d07b      	beq.n	8017b7a <_strtod_l+0x29a>
 8017a82:	f04f 0c00 	mov.w	ip, #0
 8017a86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8017a8a:	2909      	cmp	r1, #9
 8017a8c:	f240 8082 	bls.w	8017b94 <_strtod_l+0x2b4>
 8017a90:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8017a94:	2600      	movs	r6, #0
 8017a96:	e09d      	b.n	8017bd4 <_strtod_l+0x2f4>
 8017a98:	2300      	movs	r3, #0
 8017a9a:	e7c4      	b.n	8017a26 <_strtod_l+0x146>
 8017a9c:	2f08      	cmp	r7, #8
 8017a9e:	bfd8      	it	le
 8017aa0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017aa2:	f100 0001 	add.w	r0, r0, #1
 8017aa6:	bfda      	itte	le
 8017aa8:	fb02 3301 	mlale	r3, r2, r1, r3
 8017aac:	9309      	strle	r3, [sp, #36]	; 0x24
 8017aae:	fb02 3909 	mlagt	r9, r2, r9, r3
 8017ab2:	3701      	adds	r7, #1
 8017ab4:	901d      	str	r0, [sp, #116]	; 0x74
 8017ab6:	e7bf      	b.n	8017a38 <_strtod_l+0x158>
 8017ab8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017aba:	195a      	adds	r2, r3, r5
 8017abc:	921d      	str	r2, [sp, #116]	; 0x74
 8017abe:	5d5b      	ldrb	r3, [r3, r5]
 8017ac0:	2f00      	cmp	r7, #0
 8017ac2:	d037      	beq.n	8017b34 <_strtod_l+0x254>
 8017ac4:	9007      	str	r0, [sp, #28]
 8017ac6:	463d      	mov	r5, r7
 8017ac8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8017acc:	2a09      	cmp	r2, #9
 8017ace:	d912      	bls.n	8017af6 <_strtod_l+0x216>
 8017ad0:	2201      	movs	r2, #1
 8017ad2:	e7c2      	b.n	8017a5a <_strtod_l+0x17a>
 8017ad4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017ad6:	1c5a      	adds	r2, r3, #1
 8017ad8:	921d      	str	r2, [sp, #116]	; 0x74
 8017ada:	785b      	ldrb	r3, [r3, #1]
 8017adc:	3001      	adds	r0, #1
 8017ade:	2b30      	cmp	r3, #48	; 0x30
 8017ae0:	d0f8      	beq.n	8017ad4 <_strtod_l+0x1f4>
 8017ae2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017ae6:	2a08      	cmp	r2, #8
 8017ae8:	f200 84db 	bhi.w	80184a2 <_strtod_l+0xbc2>
 8017aec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017aee:	9007      	str	r0, [sp, #28]
 8017af0:	2000      	movs	r0, #0
 8017af2:	920a      	str	r2, [sp, #40]	; 0x28
 8017af4:	4605      	mov	r5, r0
 8017af6:	3b30      	subs	r3, #48	; 0x30
 8017af8:	f100 0201 	add.w	r2, r0, #1
 8017afc:	d014      	beq.n	8017b28 <_strtod_l+0x248>
 8017afe:	9907      	ldr	r1, [sp, #28]
 8017b00:	4411      	add	r1, r2
 8017b02:	9107      	str	r1, [sp, #28]
 8017b04:	462a      	mov	r2, r5
 8017b06:	eb00 0e05 	add.w	lr, r0, r5
 8017b0a:	210a      	movs	r1, #10
 8017b0c:	4572      	cmp	r2, lr
 8017b0e:	d113      	bne.n	8017b38 <_strtod_l+0x258>
 8017b10:	182a      	adds	r2, r5, r0
 8017b12:	2a08      	cmp	r2, #8
 8017b14:	f105 0501 	add.w	r5, r5, #1
 8017b18:	4405      	add	r5, r0
 8017b1a:	dc1c      	bgt.n	8017b56 <_strtod_l+0x276>
 8017b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017b1e:	220a      	movs	r2, #10
 8017b20:	fb02 3301 	mla	r3, r2, r1, r3
 8017b24:	9309      	str	r3, [sp, #36]	; 0x24
 8017b26:	2200      	movs	r2, #0
 8017b28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b2a:	1c59      	adds	r1, r3, #1
 8017b2c:	911d      	str	r1, [sp, #116]	; 0x74
 8017b2e:	785b      	ldrb	r3, [r3, #1]
 8017b30:	4610      	mov	r0, r2
 8017b32:	e7c9      	b.n	8017ac8 <_strtod_l+0x1e8>
 8017b34:	4638      	mov	r0, r7
 8017b36:	e7d2      	b.n	8017ade <_strtod_l+0x1fe>
 8017b38:	2a08      	cmp	r2, #8
 8017b3a:	dc04      	bgt.n	8017b46 <_strtod_l+0x266>
 8017b3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017b3e:	434e      	muls	r6, r1
 8017b40:	9609      	str	r6, [sp, #36]	; 0x24
 8017b42:	3201      	adds	r2, #1
 8017b44:	e7e2      	b.n	8017b0c <_strtod_l+0x22c>
 8017b46:	f102 0c01 	add.w	ip, r2, #1
 8017b4a:	f1bc 0f10 	cmp.w	ip, #16
 8017b4e:	bfd8      	it	le
 8017b50:	fb01 f909 	mulle.w	r9, r1, r9
 8017b54:	e7f5      	b.n	8017b42 <_strtod_l+0x262>
 8017b56:	2d10      	cmp	r5, #16
 8017b58:	bfdc      	itt	le
 8017b5a:	220a      	movle	r2, #10
 8017b5c:	fb02 3909 	mlale	r9, r2, r9, r3
 8017b60:	e7e1      	b.n	8017b26 <_strtod_l+0x246>
 8017b62:	2300      	movs	r3, #0
 8017b64:	9307      	str	r3, [sp, #28]
 8017b66:	2201      	movs	r2, #1
 8017b68:	e77c      	b.n	8017a64 <_strtod_l+0x184>
 8017b6a:	f04f 0c00 	mov.w	ip, #0
 8017b6e:	f108 0302 	add.w	r3, r8, #2
 8017b72:	931d      	str	r3, [sp, #116]	; 0x74
 8017b74:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017b78:	e785      	b.n	8017a86 <_strtod_l+0x1a6>
 8017b7a:	f04f 0c01 	mov.w	ip, #1
 8017b7e:	e7f6      	b.n	8017b6e <_strtod_l+0x28e>
 8017b80:	08032ee0 	.word	0x08032ee0
 8017b84:	08032ca4 	.word	0x08032ca4
 8017b88:	7ff00000 	.word	0x7ff00000
 8017b8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017b8e:	1c59      	adds	r1, r3, #1
 8017b90:	911d      	str	r1, [sp, #116]	; 0x74
 8017b92:	785b      	ldrb	r3, [r3, #1]
 8017b94:	2b30      	cmp	r3, #48	; 0x30
 8017b96:	d0f9      	beq.n	8017b8c <_strtod_l+0x2ac>
 8017b98:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8017b9c:	2908      	cmp	r1, #8
 8017b9e:	f63f af79 	bhi.w	8017a94 <_strtod_l+0x1b4>
 8017ba2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8017ba6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017ba8:	9308      	str	r3, [sp, #32]
 8017baa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017bac:	1c59      	adds	r1, r3, #1
 8017bae:	911d      	str	r1, [sp, #116]	; 0x74
 8017bb0:	785b      	ldrb	r3, [r3, #1]
 8017bb2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8017bb6:	2e09      	cmp	r6, #9
 8017bb8:	d937      	bls.n	8017c2a <_strtod_l+0x34a>
 8017bba:	9e08      	ldr	r6, [sp, #32]
 8017bbc:	1b89      	subs	r1, r1, r6
 8017bbe:	2908      	cmp	r1, #8
 8017bc0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8017bc4:	dc02      	bgt.n	8017bcc <_strtod_l+0x2ec>
 8017bc6:	4576      	cmp	r6, lr
 8017bc8:	bfa8      	it	ge
 8017bca:	4676      	movge	r6, lr
 8017bcc:	f1bc 0f00 	cmp.w	ip, #0
 8017bd0:	d000      	beq.n	8017bd4 <_strtod_l+0x2f4>
 8017bd2:	4276      	negs	r6, r6
 8017bd4:	2d00      	cmp	r5, #0
 8017bd6:	d14f      	bne.n	8017c78 <_strtod_l+0x398>
 8017bd8:	9904      	ldr	r1, [sp, #16]
 8017bda:	4301      	orrs	r1, r0
 8017bdc:	f47f aec2 	bne.w	8017964 <_strtod_l+0x84>
 8017be0:	2a00      	cmp	r2, #0
 8017be2:	f47f aedb 	bne.w	801799c <_strtod_l+0xbc>
 8017be6:	2b69      	cmp	r3, #105	; 0x69
 8017be8:	d027      	beq.n	8017c3a <_strtod_l+0x35a>
 8017bea:	dc24      	bgt.n	8017c36 <_strtod_l+0x356>
 8017bec:	2b49      	cmp	r3, #73	; 0x49
 8017bee:	d024      	beq.n	8017c3a <_strtod_l+0x35a>
 8017bf0:	2b4e      	cmp	r3, #78	; 0x4e
 8017bf2:	f47f aed3 	bne.w	801799c <_strtod_l+0xbc>
 8017bf6:	499e      	ldr	r1, [pc, #632]	; (8017e70 <_strtod_l+0x590>)
 8017bf8:	a81d      	add	r0, sp, #116	; 0x74
 8017bfa:	f002 f95b 	bl	8019eb4 <__match>
 8017bfe:	2800      	cmp	r0, #0
 8017c00:	f43f aecc 	beq.w	801799c <_strtod_l+0xbc>
 8017c04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c06:	781b      	ldrb	r3, [r3, #0]
 8017c08:	2b28      	cmp	r3, #40	; 0x28
 8017c0a:	d12d      	bne.n	8017c68 <_strtod_l+0x388>
 8017c0c:	4999      	ldr	r1, [pc, #612]	; (8017e74 <_strtod_l+0x594>)
 8017c0e:	aa20      	add	r2, sp, #128	; 0x80
 8017c10:	a81d      	add	r0, sp, #116	; 0x74
 8017c12:	f002 f963 	bl	8019edc <__hexnan>
 8017c16:	2805      	cmp	r0, #5
 8017c18:	d126      	bne.n	8017c68 <_strtod_l+0x388>
 8017c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c1c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017c20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017c24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017c28:	e69c      	b.n	8017964 <_strtod_l+0x84>
 8017c2a:	210a      	movs	r1, #10
 8017c2c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017c30:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017c34:	e7b9      	b.n	8017baa <_strtod_l+0x2ca>
 8017c36:	2b6e      	cmp	r3, #110	; 0x6e
 8017c38:	e7db      	b.n	8017bf2 <_strtod_l+0x312>
 8017c3a:	498f      	ldr	r1, [pc, #572]	; (8017e78 <_strtod_l+0x598>)
 8017c3c:	a81d      	add	r0, sp, #116	; 0x74
 8017c3e:	f002 f939 	bl	8019eb4 <__match>
 8017c42:	2800      	cmp	r0, #0
 8017c44:	f43f aeaa 	beq.w	801799c <_strtod_l+0xbc>
 8017c48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c4a:	498c      	ldr	r1, [pc, #560]	; (8017e7c <_strtod_l+0x59c>)
 8017c4c:	3b01      	subs	r3, #1
 8017c4e:	a81d      	add	r0, sp, #116	; 0x74
 8017c50:	931d      	str	r3, [sp, #116]	; 0x74
 8017c52:	f002 f92f 	bl	8019eb4 <__match>
 8017c56:	b910      	cbnz	r0, 8017c5e <_strtod_l+0x37e>
 8017c58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017c5a:	3301      	adds	r3, #1
 8017c5c:	931d      	str	r3, [sp, #116]	; 0x74
 8017c5e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017e8c <_strtod_l+0x5ac>
 8017c62:	f04f 0a00 	mov.w	sl, #0
 8017c66:	e67d      	b.n	8017964 <_strtod_l+0x84>
 8017c68:	4885      	ldr	r0, [pc, #532]	; (8017e80 <_strtod_l+0x5a0>)
 8017c6a:	f003 fa85 	bl	801b178 <nan>
 8017c6e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8017c72:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017c76:	e675      	b.n	8017964 <_strtod_l+0x84>
 8017c78:	9b07      	ldr	r3, [sp, #28]
 8017c7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c7c:	1af3      	subs	r3, r6, r3
 8017c7e:	2f00      	cmp	r7, #0
 8017c80:	bf08      	it	eq
 8017c82:	462f      	moveq	r7, r5
 8017c84:	2d10      	cmp	r5, #16
 8017c86:	9308      	str	r3, [sp, #32]
 8017c88:	46a8      	mov	r8, r5
 8017c8a:	bfa8      	it	ge
 8017c8c:	f04f 0810 	movge.w	r8, #16
 8017c90:	f7e8 fc48 	bl	8000524 <__aeabi_ui2d>
 8017c94:	2d09      	cmp	r5, #9
 8017c96:	4682      	mov	sl, r0
 8017c98:	468b      	mov	fp, r1
 8017c9a:	dd13      	ble.n	8017cc4 <_strtod_l+0x3e4>
 8017c9c:	4b79      	ldr	r3, [pc, #484]	; (8017e84 <_strtod_l+0x5a4>)
 8017c9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017ca2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8017ca6:	f7e8 fcb7 	bl	8000618 <__aeabi_dmul>
 8017caa:	4682      	mov	sl, r0
 8017cac:	4648      	mov	r0, r9
 8017cae:	468b      	mov	fp, r1
 8017cb0:	f7e8 fc38 	bl	8000524 <__aeabi_ui2d>
 8017cb4:	4602      	mov	r2, r0
 8017cb6:	460b      	mov	r3, r1
 8017cb8:	4650      	mov	r0, sl
 8017cba:	4659      	mov	r1, fp
 8017cbc:	f7e8 faf6 	bl	80002ac <__adddf3>
 8017cc0:	4682      	mov	sl, r0
 8017cc2:	468b      	mov	fp, r1
 8017cc4:	2d0f      	cmp	r5, #15
 8017cc6:	dc38      	bgt.n	8017d3a <_strtod_l+0x45a>
 8017cc8:	9b08      	ldr	r3, [sp, #32]
 8017cca:	2b00      	cmp	r3, #0
 8017ccc:	f43f ae4a 	beq.w	8017964 <_strtod_l+0x84>
 8017cd0:	dd24      	ble.n	8017d1c <_strtod_l+0x43c>
 8017cd2:	2b16      	cmp	r3, #22
 8017cd4:	dc0b      	bgt.n	8017cee <_strtod_l+0x40e>
 8017cd6:	4d6b      	ldr	r5, [pc, #428]	; (8017e84 <_strtod_l+0x5a4>)
 8017cd8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8017cdc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017ce0:	4652      	mov	r2, sl
 8017ce2:	465b      	mov	r3, fp
 8017ce4:	f7e8 fc98 	bl	8000618 <__aeabi_dmul>
 8017ce8:	4682      	mov	sl, r0
 8017cea:	468b      	mov	fp, r1
 8017cec:	e63a      	b.n	8017964 <_strtod_l+0x84>
 8017cee:	9a08      	ldr	r2, [sp, #32]
 8017cf0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8017cf4:	4293      	cmp	r3, r2
 8017cf6:	db20      	blt.n	8017d3a <_strtod_l+0x45a>
 8017cf8:	4c62      	ldr	r4, [pc, #392]	; (8017e84 <_strtod_l+0x5a4>)
 8017cfa:	f1c5 050f 	rsb	r5, r5, #15
 8017cfe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017d02:	4652      	mov	r2, sl
 8017d04:	465b      	mov	r3, fp
 8017d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d0a:	f7e8 fc85 	bl	8000618 <__aeabi_dmul>
 8017d0e:	9b08      	ldr	r3, [sp, #32]
 8017d10:	1b5d      	subs	r5, r3, r5
 8017d12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017d16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017d1a:	e7e3      	b.n	8017ce4 <_strtod_l+0x404>
 8017d1c:	9b08      	ldr	r3, [sp, #32]
 8017d1e:	3316      	adds	r3, #22
 8017d20:	db0b      	blt.n	8017d3a <_strtod_l+0x45a>
 8017d22:	9b07      	ldr	r3, [sp, #28]
 8017d24:	4a57      	ldr	r2, [pc, #348]	; (8017e84 <_strtod_l+0x5a4>)
 8017d26:	1b9e      	subs	r6, r3, r6
 8017d28:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8017d2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017d30:	4650      	mov	r0, sl
 8017d32:	4659      	mov	r1, fp
 8017d34:	f7e8 fd9a 	bl	800086c <__aeabi_ddiv>
 8017d38:	e7d6      	b.n	8017ce8 <_strtod_l+0x408>
 8017d3a:	9b08      	ldr	r3, [sp, #32]
 8017d3c:	eba5 0808 	sub.w	r8, r5, r8
 8017d40:	4498      	add	r8, r3
 8017d42:	f1b8 0f00 	cmp.w	r8, #0
 8017d46:	dd71      	ble.n	8017e2c <_strtod_l+0x54c>
 8017d48:	f018 030f 	ands.w	r3, r8, #15
 8017d4c:	d00a      	beq.n	8017d64 <_strtod_l+0x484>
 8017d4e:	494d      	ldr	r1, [pc, #308]	; (8017e84 <_strtod_l+0x5a4>)
 8017d50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017d54:	4652      	mov	r2, sl
 8017d56:	465b      	mov	r3, fp
 8017d58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017d5c:	f7e8 fc5c 	bl	8000618 <__aeabi_dmul>
 8017d60:	4682      	mov	sl, r0
 8017d62:	468b      	mov	fp, r1
 8017d64:	f038 080f 	bics.w	r8, r8, #15
 8017d68:	d04d      	beq.n	8017e06 <_strtod_l+0x526>
 8017d6a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8017d6e:	dd22      	ble.n	8017db6 <_strtod_l+0x4d6>
 8017d70:	2500      	movs	r5, #0
 8017d72:	462e      	mov	r6, r5
 8017d74:	9509      	str	r5, [sp, #36]	; 0x24
 8017d76:	9507      	str	r5, [sp, #28]
 8017d78:	2322      	movs	r3, #34	; 0x22
 8017d7a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017e8c <_strtod_l+0x5ac>
 8017d7e:	6023      	str	r3, [r4, #0]
 8017d80:	f04f 0a00 	mov.w	sl, #0
 8017d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	f43f adec 	beq.w	8017964 <_strtod_l+0x84>
 8017d8c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017d8e:	4620      	mov	r0, r4
 8017d90:	f002 fa06 	bl	801a1a0 <_Bfree>
 8017d94:	9907      	ldr	r1, [sp, #28]
 8017d96:	4620      	mov	r0, r4
 8017d98:	f002 fa02 	bl	801a1a0 <_Bfree>
 8017d9c:	4631      	mov	r1, r6
 8017d9e:	4620      	mov	r0, r4
 8017da0:	f002 f9fe 	bl	801a1a0 <_Bfree>
 8017da4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017da6:	4620      	mov	r0, r4
 8017da8:	f002 f9fa 	bl	801a1a0 <_Bfree>
 8017dac:	4629      	mov	r1, r5
 8017dae:	4620      	mov	r0, r4
 8017db0:	f002 f9f6 	bl	801a1a0 <_Bfree>
 8017db4:	e5d6      	b.n	8017964 <_strtod_l+0x84>
 8017db6:	2300      	movs	r3, #0
 8017db8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8017dbc:	4650      	mov	r0, sl
 8017dbe:	4659      	mov	r1, fp
 8017dc0:	4699      	mov	r9, r3
 8017dc2:	f1b8 0f01 	cmp.w	r8, #1
 8017dc6:	dc21      	bgt.n	8017e0c <_strtod_l+0x52c>
 8017dc8:	b10b      	cbz	r3, 8017dce <_strtod_l+0x4ee>
 8017dca:	4682      	mov	sl, r0
 8017dcc:	468b      	mov	fp, r1
 8017dce:	4b2e      	ldr	r3, [pc, #184]	; (8017e88 <_strtod_l+0x5a8>)
 8017dd0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8017dd4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8017dd8:	4652      	mov	r2, sl
 8017dda:	465b      	mov	r3, fp
 8017ddc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017de0:	f7e8 fc1a 	bl	8000618 <__aeabi_dmul>
 8017de4:	4b29      	ldr	r3, [pc, #164]	; (8017e8c <_strtod_l+0x5ac>)
 8017de6:	460a      	mov	r2, r1
 8017de8:	400b      	ands	r3, r1
 8017dea:	4929      	ldr	r1, [pc, #164]	; (8017e90 <_strtod_l+0x5b0>)
 8017dec:	428b      	cmp	r3, r1
 8017dee:	4682      	mov	sl, r0
 8017df0:	d8be      	bhi.n	8017d70 <_strtod_l+0x490>
 8017df2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017df6:	428b      	cmp	r3, r1
 8017df8:	bf86      	itte	hi
 8017dfa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017e94 <_strtod_l+0x5b4>
 8017dfe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8017e02:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017e06:	2300      	movs	r3, #0
 8017e08:	9304      	str	r3, [sp, #16]
 8017e0a:	e081      	b.n	8017f10 <_strtod_l+0x630>
 8017e0c:	f018 0f01 	tst.w	r8, #1
 8017e10:	d007      	beq.n	8017e22 <_strtod_l+0x542>
 8017e12:	4b1d      	ldr	r3, [pc, #116]	; (8017e88 <_strtod_l+0x5a8>)
 8017e14:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e1c:	f7e8 fbfc 	bl	8000618 <__aeabi_dmul>
 8017e20:	2301      	movs	r3, #1
 8017e22:	f109 0901 	add.w	r9, r9, #1
 8017e26:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017e2a:	e7ca      	b.n	8017dc2 <_strtod_l+0x4e2>
 8017e2c:	d0eb      	beq.n	8017e06 <_strtod_l+0x526>
 8017e2e:	f1c8 0800 	rsb	r8, r8, #0
 8017e32:	f018 020f 	ands.w	r2, r8, #15
 8017e36:	d00a      	beq.n	8017e4e <_strtod_l+0x56e>
 8017e38:	4b12      	ldr	r3, [pc, #72]	; (8017e84 <_strtod_l+0x5a4>)
 8017e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017e3e:	4650      	mov	r0, sl
 8017e40:	4659      	mov	r1, fp
 8017e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e46:	f7e8 fd11 	bl	800086c <__aeabi_ddiv>
 8017e4a:	4682      	mov	sl, r0
 8017e4c:	468b      	mov	fp, r1
 8017e4e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017e52:	d0d8      	beq.n	8017e06 <_strtod_l+0x526>
 8017e54:	f1b8 0f1f 	cmp.w	r8, #31
 8017e58:	dd1e      	ble.n	8017e98 <_strtod_l+0x5b8>
 8017e5a:	2500      	movs	r5, #0
 8017e5c:	462e      	mov	r6, r5
 8017e5e:	9509      	str	r5, [sp, #36]	; 0x24
 8017e60:	9507      	str	r5, [sp, #28]
 8017e62:	2322      	movs	r3, #34	; 0x22
 8017e64:	f04f 0a00 	mov.w	sl, #0
 8017e68:	f04f 0b00 	mov.w	fp, #0
 8017e6c:	6023      	str	r3, [r4, #0]
 8017e6e:	e789      	b.n	8017d84 <_strtod_l+0x4a4>
 8017e70:	08032c05 	.word	0x08032c05
 8017e74:	08032cb8 	.word	0x08032cb8
 8017e78:	08032bfd 	.word	0x08032bfd
 8017e7c:	08032d98 	.word	0x08032d98
 8017e80:	08032d94 	.word	0x08032d94
 8017e84:	08032f80 	.word	0x08032f80
 8017e88:	08032f58 	.word	0x08032f58
 8017e8c:	7ff00000 	.word	0x7ff00000
 8017e90:	7ca00000 	.word	0x7ca00000
 8017e94:	7fefffff 	.word	0x7fefffff
 8017e98:	f018 0310 	ands.w	r3, r8, #16
 8017e9c:	bf18      	it	ne
 8017e9e:	236a      	movne	r3, #106	; 0x6a
 8017ea0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8018258 <_strtod_l+0x978>
 8017ea4:	9304      	str	r3, [sp, #16]
 8017ea6:	4650      	mov	r0, sl
 8017ea8:	4659      	mov	r1, fp
 8017eaa:	2300      	movs	r3, #0
 8017eac:	f018 0f01 	tst.w	r8, #1
 8017eb0:	d004      	beq.n	8017ebc <_strtod_l+0x5dc>
 8017eb2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017eb6:	f7e8 fbaf 	bl	8000618 <__aeabi_dmul>
 8017eba:	2301      	movs	r3, #1
 8017ebc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017ec0:	f109 0908 	add.w	r9, r9, #8
 8017ec4:	d1f2      	bne.n	8017eac <_strtod_l+0x5cc>
 8017ec6:	b10b      	cbz	r3, 8017ecc <_strtod_l+0x5ec>
 8017ec8:	4682      	mov	sl, r0
 8017eca:	468b      	mov	fp, r1
 8017ecc:	9b04      	ldr	r3, [sp, #16]
 8017ece:	b1bb      	cbz	r3, 8017f00 <_strtod_l+0x620>
 8017ed0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017ed4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	4659      	mov	r1, fp
 8017edc:	dd10      	ble.n	8017f00 <_strtod_l+0x620>
 8017ede:	2b1f      	cmp	r3, #31
 8017ee0:	f340 8128 	ble.w	8018134 <_strtod_l+0x854>
 8017ee4:	2b34      	cmp	r3, #52	; 0x34
 8017ee6:	bfde      	ittt	le
 8017ee8:	3b20      	suble	r3, #32
 8017eea:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8017eee:	fa02 f303 	lslle.w	r3, r2, r3
 8017ef2:	f04f 0a00 	mov.w	sl, #0
 8017ef6:	bfcc      	ite	gt
 8017ef8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017efc:	ea03 0b01 	andle.w	fp, r3, r1
 8017f00:	2200      	movs	r2, #0
 8017f02:	2300      	movs	r3, #0
 8017f04:	4650      	mov	r0, sl
 8017f06:	4659      	mov	r1, fp
 8017f08:	f7e8 fdee 	bl	8000ae8 <__aeabi_dcmpeq>
 8017f0c:	2800      	cmp	r0, #0
 8017f0e:	d1a4      	bne.n	8017e5a <_strtod_l+0x57a>
 8017f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f12:	9300      	str	r3, [sp, #0]
 8017f14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017f16:	462b      	mov	r3, r5
 8017f18:	463a      	mov	r2, r7
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	f002 f9ac 	bl	801a278 <__s2b>
 8017f20:	9009      	str	r0, [sp, #36]	; 0x24
 8017f22:	2800      	cmp	r0, #0
 8017f24:	f43f af24 	beq.w	8017d70 <_strtod_l+0x490>
 8017f28:	9b07      	ldr	r3, [sp, #28]
 8017f2a:	1b9e      	subs	r6, r3, r6
 8017f2c:	9b08      	ldr	r3, [sp, #32]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	bfb4      	ite	lt
 8017f32:	4633      	movlt	r3, r6
 8017f34:	2300      	movge	r3, #0
 8017f36:	9310      	str	r3, [sp, #64]	; 0x40
 8017f38:	9b08      	ldr	r3, [sp, #32]
 8017f3a:	2500      	movs	r5, #0
 8017f3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f40:	9318      	str	r3, [sp, #96]	; 0x60
 8017f42:	462e      	mov	r6, r5
 8017f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f46:	4620      	mov	r0, r4
 8017f48:	6859      	ldr	r1, [r3, #4]
 8017f4a:	f002 f8e9 	bl	801a120 <_Balloc>
 8017f4e:	9007      	str	r0, [sp, #28]
 8017f50:	2800      	cmp	r0, #0
 8017f52:	f43f af11 	beq.w	8017d78 <_strtod_l+0x498>
 8017f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f58:	691a      	ldr	r2, [r3, #16]
 8017f5a:	3202      	adds	r2, #2
 8017f5c:	f103 010c 	add.w	r1, r3, #12
 8017f60:	0092      	lsls	r2, r2, #2
 8017f62:	300c      	adds	r0, #12
 8017f64:	f7fe fe82 	bl	8016c6c <memcpy>
 8017f68:	ec4b ab10 	vmov	d0, sl, fp
 8017f6c:	aa20      	add	r2, sp, #128	; 0x80
 8017f6e:	a91f      	add	r1, sp, #124	; 0x7c
 8017f70:	4620      	mov	r0, r4
 8017f72:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017f76:	f002 fcbb 	bl	801a8f0 <__d2b>
 8017f7a:	901e      	str	r0, [sp, #120]	; 0x78
 8017f7c:	2800      	cmp	r0, #0
 8017f7e:	f43f aefb 	beq.w	8017d78 <_strtod_l+0x498>
 8017f82:	2101      	movs	r1, #1
 8017f84:	4620      	mov	r0, r4
 8017f86:	f002 fa11 	bl	801a3ac <__i2b>
 8017f8a:	4606      	mov	r6, r0
 8017f8c:	2800      	cmp	r0, #0
 8017f8e:	f43f aef3 	beq.w	8017d78 <_strtod_l+0x498>
 8017f92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017f94:	9904      	ldr	r1, [sp, #16]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	bfab      	itete	ge
 8017f9a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017f9c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017f9e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017fa0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8017fa4:	bfac      	ite	ge
 8017fa6:	eb03 0902 	addge.w	r9, r3, r2
 8017faa:	1ad7      	sublt	r7, r2, r3
 8017fac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017fae:	eba3 0801 	sub.w	r8, r3, r1
 8017fb2:	4490      	add	r8, r2
 8017fb4:	4ba3      	ldr	r3, [pc, #652]	; (8018244 <_strtod_l+0x964>)
 8017fb6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8017fba:	4598      	cmp	r8, r3
 8017fbc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017fc0:	f280 80cc 	bge.w	801815c <_strtod_l+0x87c>
 8017fc4:	eba3 0308 	sub.w	r3, r3, r8
 8017fc8:	2b1f      	cmp	r3, #31
 8017fca:	eba2 0203 	sub.w	r2, r2, r3
 8017fce:	f04f 0101 	mov.w	r1, #1
 8017fd2:	f300 80b6 	bgt.w	8018142 <_strtod_l+0x862>
 8017fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8017fda:	9311      	str	r3, [sp, #68]	; 0x44
 8017fdc:	2300      	movs	r3, #0
 8017fde:	930c      	str	r3, [sp, #48]	; 0x30
 8017fe0:	eb09 0802 	add.w	r8, r9, r2
 8017fe4:	9b04      	ldr	r3, [sp, #16]
 8017fe6:	45c1      	cmp	r9, r8
 8017fe8:	4417      	add	r7, r2
 8017fea:	441f      	add	r7, r3
 8017fec:	464b      	mov	r3, r9
 8017fee:	bfa8      	it	ge
 8017ff0:	4643      	movge	r3, r8
 8017ff2:	42bb      	cmp	r3, r7
 8017ff4:	bfa8      	it	ge
 8017ff6:	463b      	movge	r3, r7
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	bfc2      	ittt	gt
 8017ffc:	eba8 0803 	subgt.w	r8, r8, r3
 8018000:	1aff      	subgt	r7, r7, r3
 8018002:	eba9 0903 	subgt.w	r9, r9, r3
 8018006:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018008:	2b00      	cmp	r3, #0
 801800a:	dd17      	ble.n	801803c <_strtod_l+0x75c>
 801800c:	4631      	mov	r1, r6
 801800e:	461a      	mov	r2, r3
 8018010:	4620      	mov	r0, r4
 8018012:	f002 fa87 	bl	801a524 <__pow5mult>
 8018016:	4606      	mov	r6, r0
 8018018:	2800      	cmp	r0, #0
 801801a:	f43f aead 	beq.w	8017d78 <_strtod_l+0x498>
 801801e:	4601      	mov	r1, r0
 8018020:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018022:	4620      	mov	r0, r4
 8018024:	f002 f9d8 	bl	801a3d8 <__multiply>
 8018028:	900f      	str	r0, [sp, #60]	; 0x3c
 801802a:	2800      	cmp	r0, #0
 801802c:	f43f aea4 	beq.w	8017d78 <_strtod_l+0x498>
 8018030:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018032:	4620      	mov	r0, r4
 8018034:	f002 f8b4 	bl	801a1a0 <_Bfree>
 8018038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801803a:	931e      	str	r3, [sp, #120]	; 0x78
 801803c:	f1b8 0f00 	cmp.w	r8, #0
 8018040:	f300 8091 	bgt.w	8018166 <_strtod_l+0x886>
 8018044:	9b08      	ldr	r3, [sp, #32]
 8018046:	2b00      	cmp	r3, #0
 8018048:	dd08      	ble.n	801805c <_strtod_l+0x77c>
 801804a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801804c:	9907      	ldr	r1, [sp, #28]
 801804e:	4620      	mov	r0, r4
 8018050:	f002 fa68 	bl	801a524 <__pow5mult>
 8018054:	9007      	str	r0, [sp, #28]
 8018056:	2800      	cmp	r0, #0
 8018058:	f43f ae8e 	beq.w	8017d78 <_strtod_l+0x498>
 801805c:	2f00      	cmp	r7, #0
 801805e:	dd08      	ble.n	8018072 <_strtod_l+0x792>
 8018060:	9907      	ldr	r1, [sp, #28]
 8018062:	463a      	mov	r2, r7
 8018064:	4620      	mov	r0, r4
 8018066:	f002 fab7 	bl	801a5d8 <__lshift>
 801806a:	9007      	str	r0, [sp, #28]
 801806c:	2800      	cmp	r0, #0
 801806e:	f43f ae83 	beq.w	8017d78 <_strtod_l+0x498>
 8018072:	f1b9 0f00 	cmp.w	r9, #0
 8018076:	dd08      	ble.n	801808a <_strtod_l+0x7aa>
 8018078:	4631      	mov	r1, r6
 801807a:	464a      	mov	r2, r9
 801807c:	4620      	mov	r0, r4
 801807e:	f002 faab 	bl	801a5d8 <__lshift>
 8018082:	4606      	mov	r6, r0
 8018084:	2800      	cmp	r0, #0
 8018086:	f43f ae77 	beq.w	8017d78 <_strtod_l+0x498>
 801808a:	9a07      	ldr	r2, [sp, #28]
 801808c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801808e:	4620      	mov	r0, r4
 8018090:	f002 fb2a 	bl	801a6e8 <__mdiff>
 8018094:	4605      	mov	r5, r0
 8018096:	2800      	cmp	r0, #0
 8018098:	f43f ae6e 	beq.w	8017d78 <_strtod_l+0x498>
 801809c:	68c3      	ldr	r3, [r0, #12]
 801809e:	930f      	str	r3, [sp, #60]	; 0x3c
 80180a0:	2300      	movs	r3, #0
 80180a2:	60c3      	str	r3, [r0, #12]
 80180a4:	4631      	mov	r1, r6
 80180a6:	f002 fb03 	bl	801a6b0 <__mcmp>
 80180aa:	2800      	cmp	r0, #0
 80180ac:	da65      	bge.n	801817a <_strtod_l+0x89a>
 80180ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80180b0:	ea53 030a 	orrs.w	r3, r3, sl
 80180b4:	f040 8087 	bne.w	80181c6 <_strtod_l+0x8e6>
 80180b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80180bc:	2b00      	cmp	r3, #0
 80180be:	f040 8082 	bne.w	80181c6 <_strtod_l+0x8e6>
 80180c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80180c6:	0d1b      	lsrs	r3, r3, #20
 80180c8:	051b      	lsls	r3, r3, #20
 80180ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80180ce:	d97a      	bls.n	80181c6 <_strtod_l+0x8e6>
 80180d0:	696b      	ldr	r3, [r5, #20]
 80180d2:	b913      	cbnz	r3, 80180da <_strtod_l+0x7fa>
 80180d4:	692b      	ldr	r3, [r5, #16]
 80180d6:	2b01      	cmp	r3, #1
 80180d8:	dd75      	ble.n	80181c6 <_strtod_l+0x8e6>
 80180da:	4629      	mov	r1, r5
 80180dc:	2201      	movs	r2, #1
 80180de:	4620      	mov	r0, r4
 80180e0:	f002 fa7a 	bl	801a5d8 <__lshift>
 80180e4:	4631      	mov	r1, r6
 80180e6:	4605      	mov	r5, r0
 80180e8:	f002 fae2 	bl	801a6b0 <__mcmp>
 80180ec:	2800      	cmp	r0, #0
 80180ee:	dd6a      	ble.n	80181c6 <_strtod_l+0x8e6>
 80180f0:	9904      	ldr	r1, [sp, #16]
 80180f2:	4a55      	ldr	r2, [pc, #340]	; (8018248 <_strtod_l+0x968>)
 80180f4:	465b      	mov	r3, fp
 80180f6:	2900      	cmp	r1, #0
 80180f8:	f000 8085 	beq.w	8018206 <_strtod_l+0x926>
 80180fc:	ea02 010b 	and.w	r1, r2, fp
 8018100:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8018104:	dc7f      	bgt.n	8018206 <_strtod_l+0x926>
 8018106:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801810a:	f77f aeaa 	ble.w	8017e62 <_strtod_l+0x582>
 801810e:	4a4f      	ldr	r2, [pc, #316]	; (801824c <_strtod_l+0x96c>)
 8018110:	2300      	movs	r3, #0
 8018112:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8018116:	4650      	mov	r0, sl
 8018118:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801811c:	4659      	mov	r1, fp
 801811e:	f7e8 fa7b 	bl	8000618 <__aeabi_dmul>
 8018122:	460b      	mov	r3, r1
 8018124:	4303      	orrs	r3, r0
 8018126:	bf08      	it	eq
 8018128:	2322      	moveq	r3, #34	; 0x22
 801812a:	4682      	mov	sl, r0
 801812c:	468b      	mov	fp, r1
 801812e:	bf08      	it	eq
 8018130:	6023      	streq	r3, [r4, #0]
 8018132:	e62b      	b.n	8017d8c <_strtod_l+0x4ac>
 8018134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018138:	fa02 f303 	lsl.w	r3, r2, r3
 801813c:	ea03 0a0a 	and.w	sl, r3, sl
 8018140:	e6de      	b.n	8017f00 <_strtod_l+0x620>
 8018142:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8018146:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801814a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801814e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8018152:	fa01 f308 	lsl.w	r3, r1, r8
 8018156:	930c      	str	r3, [sp, #48]	; 0x30
 8018158:	9111      	str	r1, [sp, #68]	; 0x44
 801815a:	e741      	b.n	8017fe0 <_strtod_l+0x700>
 801815c:	2300      	movs	r3, #0
 801815e:	930c      	str	r3, [sp, #48]	; 0x30
 8018160:	2301      	movs	r3, #1
 8018162:	9311      	str	r3, [sp, #68]	; 0x44
 8018164:	e73c      	b.n	8017fe0 <_strtod_l+0x700>
 8018166:	991e      	ldr	r1, [sp, #120]	; 0x78
 8018168:	4642      	mov	r2, r8
 801816a:	4620      	mov	r0, r4
 801816c:	f002 fa34 	bl	801a5d8 <__lshift>
 8018170:	901e      	str	r0, [sp, #120]	; 0x78
 8018172:	2800      	cmp	r0, #0
 8018174:	f47f af66 	bne.w	8018044 <_strtod_l+0x764>
 8018178:	e5fe      	b.n	8017d78 <_strtod_l+0x498>
 801817a:	465f      	mov	r7, fp
 801817c:	d16e      	bne.n	801825c <_strtod_l+0x97c>
 801817e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018180:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018184:	b342      	cbz	r2, 80181d8 <_strtod_l+0x8f8>
 8018186:	4a32      	ldr	r2, [pc, #200]	; (8018250 <_strtod_l+0x970>)
 8018188:	4293      	cmp	r3, r2
 801818a:	d128      	bne.n	80181de <_strtod_l+0x8fe>
 801818c:	9b04      	ldr	r3, [sp, #16]
 801818e:	4650      	mov	r0, sl
 8018190:	b1eb      	cbz	r3, 80181ce <_strtod_l+0x8ee>
 8018192:	4a2d      	ldr	r2, [pc, #180]	; (8018248 <_strtod_l+0x968>)
 8018194:	403a      	ands	r2, r7
 8018196:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801819a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801819e:	d819      	bhi.n	80181d4 <_strtod_l+0x8f4>
 80181a0:	0d12      	lsrs	r2, r2, #20
 80181a2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80181a6:	fa01 f303 	lsl.w	r3, r1, r3
 80181aa:	4298      	cmp	r0, r3
 80181ac:	d117      	bne.n	80181de <_strtod_l+0x8fe>
 80181ae:	4b29      	ldr	r3, [pc, #164]	; (8018254 <_strtod_l+0x974>)
 80181b0:	429f      	cmp	r7, r3
 80181b2:	d102      	bne.n	80181ba <_strtod_l+0x8da>
 80181b4:	3001      	adds	r0, #1
 80181b6:	f43f addf 	beq.w	8017d78 <_strtod_l+0x498>
 80181ba:	4b23      	ldr	r3, [pc, #140]	; (8018248 <_strtod_l+0x968>)
 80181bc:	403b      	ands	r3, r7
 80181be:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80181c2:	f04f 0a00 	mov.w	sl, #0
 80181c6:	9b04      	ldr	r3, [sp, #16]
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d1a0      	bne.n	801810e <_strtod_l+0x82e>
 80181cc:	e5de      	b.n	8017d8c <_strtod_l+0x4ac>
 80181ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80181d2:	e7ea      	b.n	80181aa <_strtod_l+0x8ca>
 80181d4:	460b      	mov	r3, r1
 80181d6:	e7e8      	b.n	80181aa <_strtod_l+0x8ca>
 80181d8:	ea53 030a 	orrs.w	r3, r3, sl
 80181dc:	d088      	beq.n	80180f0 <_strtod_l+0x810>
 80181de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80181e0:	b1db      	cbz	r3, 801821a <_strtod_l+0x93a>
 80181e2:	423b      	tst	r3, r7
 80181e4:	d0ef      	beq.n	80181c6 <_strtod_l+0x8e6>
 80181e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80181e8:	9a04      	ldr	r2, [sp, #16]
 80181ea:	4650      	mov	r0, sl
 80181ec:	4659      	mov	r1, fp
 80181ee:	b1c3      	cbz	r3, 8018222 <_strtod_l+0x942>
 80181f0:	f7ff fb58 	bl	80178a4 <sulp>
 80181f4:	4602      	mov	r2, r0
 80181f6:	460b      	mov	r3, r1
 80181f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80181fc:	f7e8 f856 	bl	80002ac <__adddf3>
 8018200:	4682      	mov	sl, r0
 8018202:	468b      	mov	fp, r1
 8018204:	e7df      	b.n	80181c6 <_strtod_l+0x8e6>
 8018206:	4013      	ands	r3, r2
 8018208:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801820c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8018210:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8018214:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8018218:	e7d5      	b.n	80181c6 <_strtod_l+0x8e6>
 801821a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801821c:	ea13 0f0a 	tst.w	r3, sl
 8018220:	e7e0      	b.n	80181e4 <_strtod_l+0x904>
 8018222:	f7ff fb3f 	bl	80178a4 <sulp>
 8018226:	4602      	mov	r2, r0
 8018228:	460b      	mov	r3, r1
 801822a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801822e:	f7e8 f83b 	bl	80002a8 <__aeabi_dsub>
 8018232:	2200      	movs	r2, #0
 8018234:	2300      	movs	r3, #0
 8018236:	4682      	mov	sl, r0
 8018238:	468b      	mov	fp, r1
 801823a:	f7e8 fc55 	bl	8000ae8 <__aeabi_dcmpeq>
 801823e:	2800      	cmp	r0, #0
 8018240:	d0c1      	beq.n	80181c6 <_strtod_l+0x8e6>
 8018242:	e60e      	b.n	8017e62 <_strtod_l+0x582>
 8018244:	fffffc02 	.word	0xfffffc02
 8018248:	7ff00000 	.word	0x7ff00000
 801824c:	39500000 	.word	0x39500000
 8018250:	000fffff 	.word	0x000fffff
 8018254:	7fefffff 	.word	0x7fefffff
 8018258:	08032cd0 	.word	0x08032cd0
 801825c:	4631      	mov	r1, r6
 801825e:	4628      	mov	r0, r5
 8018260:	f002 fba2 	bl	801a9a8 <__ratio>
 8018264:	ec59 8b10 	vmov	r8, r9, d0
 8018268:	ee10 0a10 	vmov	r0, s0
 801826c:	2200      	movs	r2, #0
 801826e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018272:	4649      	mov	r1, r9
 8018274:	f7e8 fc4c 	bl	8000b10 <__aeabi_dcmple>
 8018278:	2800      	cmp	r0, #0
 801827a:	d07c      	beq.n	8018376 <_strtod_l+0xa96>
 801827c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801827e:	2b00      	cmp	r3, #0
 8018280:	d04c      	beq.n	801831c <_strtod_l+0xa3c>
 8018282:	4b95      	ldr	r3, [pc, #596]	; (80184d8 <_strtod_l+0xbf8>)
 8018284:	2200      	movs	r2, #0
 8018286:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801828a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80184d8 <_strtod_l+0xbf8>
 801828e:	f04f 0800 	mov.w	r8, #0
 8018292:	4b92      	ldr	r3, [pc, #584]	; (80184dc <_strtod_l+0xbfc>)
 8018294:	403b      	ands	r3, r7
 8018296:	9311      	str	r3, [sp, #68]	; 0x44
 8018298:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801829a:	4b91      	ldr	r3, [pc, #580]	; (80184e0 <_strtod_l+0xc00>)
 801829c:	429a      	cmp	r2, r3
 801829e:	f040 80b2 	bne.w	8018406 <_strtod_l+0xb26>
 80182a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80182a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80182aa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80182ae:	ec4b ab10 	vmov	d0, sl, fp
 80182b2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80182b6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80182ba:	f002 fa9d 	bl	801a7f8 <__ulp>
 80182be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80182c2:	ec53 2b10 	vmov	r2, r3, d0
 80182c6:	f7e8 f9a7 	bl	8000618 <__aeabi_dmul>
 80182ca:	4652      	mov	r2, sl
 80182cc:	465b      	mov	r3, fp
 80182ce:	f7e7 ffed 	bl	80002ac <__adddf3>
 80182d2:	460b      	mov	r3, r1
 80182d4:	4981      	ldr	r1, [pc, #516]	; (80184dc <_strtod_l+0xbfc>)
 80182d6:	4a83      	ldr	r2, [pc, #524]	; (80184e4 <_strtod_l+0xc04>)
 80182d8:	4019      	ands	r1, r3
 80182da:	4291      	cmp	r1, r2
 80182dc:	4682      	mov	sl, r0
 80182de:	d95e      	bls.n	801839e <_strtod_l+0xabe>
 80182e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80182e2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80182e6:	4293      	cmp	r3, r2
 80182e8:	d103      	bne.n	80182f2 <_strtod_l+0xa12>
 80182ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80182ec:	3301      	adds	r3, #1
 80182ee:	f43f ad43 	beq.w	8017d78 <_strtod_l+0x498>
 80182f2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80184f0 <_strtod_l+0xc10>
 80182f6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80182fa:	991e      	ldr	r1, [sp, #120]	; 0x78
 80182fc:	4620      	mov	r0, r4
 80182fe:	f001 ff4f 	bl	801a1a0 <_Bfree>
 8018302:	9907      	ldr	r1, [sp, #28]
 8018304:	4620      	mov	r0, r4
 8018306:	f001 ff4b 	bl	801a1a0 <_Bfree>
 801830a:	4631      	mov	r1, r6
 801830c:	4620      	mov	r0, r4
 801830e:	f001 ff47 	bl	801a1a0 <_Bfree>
 8018312:	4629      	mov	r1, r5
 8018314:	4620      	mov	r0, r4
 8018316:	f001 ff43 	bl	801a1a0 <_Bfree>
 801831a:	e613      	b.n	8017f44 <_strtod_l+0x664>
 801831c:	f1ba 0f00 	cmp.w	sl, #0
 8018320:	d11b      	bne.n	801835a <_strtod_l+0xa7a>
 8018322:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8018326:	b9f3      	cbnz	r3, 8018366 <_strtod_l+0xa86>
 8018328:	4b6b      	ldr	r3, [pc, #428]	; (80184d8 <_strtod_l+0xbf8>)
 801832a:	2200      	movs	r2, #0
 801832c:	4640      	mov	r0, r8
 801832e:	4649      	mov	r1, r9
 8018330:	f7e8 fbe4 	bl	8000afc <__aeabi_dcmplt>
 8018334:	b9d0      	cbnz	r0, 801836c <_strtod_l+0xa8c>
 8018336:	4640      	mov	r0, r8
 8018338:	4649      	mov	r1, r9
 801833a:	4b6b      	ldr	r3, [pc, #428]	; (80184e8 <_strtod_l+0xc08>)
 801833c:	2200      	movs	r2, #0
 801833e:	f7e8 f96b 	bl	8000618 <__aeabi_dmul>
 8018342:	4680      	mov	r8, r0
 8018344:	4689      	mov	r9, r1
 8018346:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801834a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801834e:	931b      	str	r3, [sp, #108]	; 0x6c
 8018350:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8018354:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8018358:	e79b      	b.n	8018292 <_strtod_l+0x9b2>
 801835a:	f1ba 0f01 	cmp.w	sl, #1
 801835e:	d102      	bne.n	8018366 <_strtod_l+0xa86>
 8018360:	2f00      	cmp	r7, #0
 8018362:	f43f ad7e 	beq.w	8017e62 <_strtod_l+0x582>
 8018366:	4b61      	ldr	r3, [pc, #388]	; (80184ec <_strtod_l+0xc0c>)
 8018368:	2200      	movs	r2, #0
 801836a:	e78c      	b.n	8018286 <_strtod_l+0x9a6>
 801836c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80184e8 <_strtod_l+0xc08>
 8018370:	f04f 0800 	mov.w	r8, #0
 8018374:	e7e7      	b.n	8018346 <_strtod_l+0xa66>
 8018376:	4b5c      	ldr	r3, [pc, #368]	; (80184e8 <_strtod_l+0xc08>)
 8018378:	4640      	mov	r0, r8
 801837a:	4649      	mov	r1, r9
 801837c:	2200      	movs	r2, #0
 801837e:	f7e8 f94b 	bl	8000618 <__aeabi_dmul>
 8018382:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018384:	4680      	mov	r8, r0
 8018386:	4689      	mov	r9, r1
 8018388:	b933      	cbnz	r3, 8018398 <_strtod_l+0xab8>
 801838a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801838e:	9012      	str	r0, [sp, #72]	; 0x48
 8018390:	9313      	str	r3, [sp, #76]	; 0x4c
 8018392:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8018396:	e7dd      	b.n	8018354 <_strtod_l+0xa74>
 8018398:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801839c:	e7f9      	b.n	8018392 <_strtod_l+0xab2>
 801839e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80183a2:	9b04      	ldr	r3, [sp, #16]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d1a8      	bne.n	80182fa <_strtod_l+0xa1a>
 80183a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80183ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80183ae:	0d1b      	lsrs	r3, r3, #20
 80183b0:	051b      	lsls	r3, r3, #20
 80183b2:	429a      	cmp	r2, r3
 80183b4:	d1a1      	bne.n	80182fa <_strtod_l+0xa1a>
 80183b6:	4640      	mov	r0, r8
 80183b8:	4649      	mov	r1, r9
 80183ba:	f7e8 fc3d 	bl	8000c38 <__aeabi_d2lz>
 80183be:	f7e8 f8fd 	bl	80005bc <__aeabi_l2d>
 80183c2:	4602      	mov	r2, r0
 80183c4:	460b      	mov	r3, r1
 80183c6:	4640      	mov	r0, r8
 80183c8:	4649      	mov	r1, r9
 80183ca:	f7e7 ff6d 	bl	80002a8 <__aeabi_dsub>
 80183ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80183d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80183d4:	ea43 030a 	orr.w	r3, r3, sl
 80183d8:	4313      	orrs	r3, r2
 80183da:	4680      	mov	r8, r0
 80183dc:	4689      	mov	r9, r1
 80183de:	d053      	beq.n	8018488 <_strtod_l+0xba8>
 80183e0:	a335      	add	r3, pc, #212	; (adr r3, 80184b8 <_strtod_l+0xbd8>)
 80183e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183e6:	f7e8 fb89 	bl	8000afc <__aeabi_dcmplt>
 80183ea:	2800      	cmp	r0, #0
 80183ec:	f47f acce 	bne.w	8017d8c <_strtod_l+0x4ac>
 80183f0:	a333      	add	r3, pc, #204	; (adr r3, 80184c0 <_strtod_l+0xbe0>)
 80183f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183f6:	4640      	mov	r0, r8
 80183f8:	4649      	mov	r1, r9
 80183fa:	f7e8 fb9d 	bl	8000b38 <__aeabi_dcmpgt>
 80183fe:	2800      	cmp	r0, #0
 8018400:	f43f af7b 	beq.w	80182fa <_strtod_l+0xa1a>
 8018404:	e4c2      	b.n	8017d8c <_strtod_l+0x4ac>
 8018406:	9b04      	ldr	r3, [sp, #16]
 8018408:	b333      	cbz	r3, 8018458 <_strtod_l+0xb78>
 801840a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801840c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018410:	d822      	bhi.n	8018458 <_strtod_l+0xb78>
 8018412:	a32d      	add	r3, pc, #180	; (adr r3, 80184c8 <_strtod_l+0xbe8>)
 8018414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018418:	4640      	mov	r0, r8
 801841a:	4649      	mov	r1, r9
 801841c:	f7e8 fb78 	bl	8000b10 <__aeabi_dcmple>
 8018420:	b1a0      	cbz	r0, 801844c <_strtod_l+0xb6c>
 8018422:	4649      	mov	r1, r9
 8018424:	4640      	mov	r0, r8
 8018426:	f7e8 fbcf 	bl	8000bc8 <__aeabi_d2uiz>
 801842a:	2801      	cmp	r0, #1
 801842c:	bf38      	it	cc
 801842e:	2001      	movcc	r0, #1
 8018430:	f7e8 f878 	bl	8000524 <__aeabi_ui2d>
 8018434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018436:	4680      	mov	r8, r0
 8018438:	4689      	mov	r9, r1
 801843a:	bb13      	cbnz	r3, 8018482 <_strtod_l+0xba2>
 801843c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018440:	9014      	str	r0, [sp, #80]	; 0x50
 8018442:	9315      	str	r3, [sp, #84]	; 0x54
 8018444:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018448:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801844c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801844e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018450:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018454:	1a9b      	subs	r3, r3, r2
 8018456:	930d      	str	r3, [sp, #52]	; 0x34
 8018458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801845c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018460:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018464:	f002 f9c8 	bl	801a7f8 <__ulp>
 8018468:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801846c:	ec53 2b10 	vmov	r2, r3, d0
 8018470:	f7e8 f8d2 	bl	8000618 <__aeabi_dmul>
 8018474:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018478:	f7e7 ff18 	bl	80002ac <__adddf3>
 801847c:	4682      	mov	sl, r0
 801847e:	468b      	mov	fp, r1
 8018480:	e78f      	b.n	80183a2 <_strtod_l+0xac2>
 8018482:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8018486:	e7dd      	b.n	8018444 <_strtod_l+0xb64>
 8018488:	a311      	add	r3, pc, #68	; (adr r3, 80184d0 <_strtod_l+0xbf0>)
 801848a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801848e:	f7e8 fb35 	bl	8000afc <__aeabi_dcmplt>
 8018492:	e7b4      	b.n	80183fe <_strtod_l+0xb1e>
 8018494:	2300      	movs	r3, #0
 8018496:	930e      	str	r3, [sp, #56]	; 0x38
 8018498:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801849a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801849c:	6013      	str	r3, [r2, #0]
 801849e:	f7ff ba65 	b.w	801796c <_strtod_l+0x8c>
 80184a2:	2b65      	cmp	r3, #101	; 0x65
 80184a4:	f43f ab5d 	beq.w	8017b62 <_strtod_l+0x282>
 80184a8:	2b45      	cmp	r3, #69	; 0x45
 80184aa:	f43f ab5a 	beq.w	8017b62 <_strtod_l+0x282>
 80184ae:	2201      	movs	r2, #1
 80184b0:	f7ff bb92 	b.w	8017bd8 <_strtod_l+0x2f8>
 80184b4:	f3af 8000 	nop.w
 80184b8:	94a03595 	.word	0x94a03595
 80184bc:	3fdfffff 	.word	0x3fdfffff
 80184c0:	35afe535 	.word	0x35afe535
 80184c4:	3fe00000 	.word	0x3fe00000
 80184c8:	ffc00000 	.word	0xffc00000
 80184cc:	41dfffff 	.word	0x41dfffff
 80184d0:	94a03595 	.word	0x94a03595
 80184d4:	3fcfffff 	.word	0x3fcfffff
 80184d8:	3ff00000 	.word	0x3ff00000
 80184dc:	7ff00000 	.word	0x7ff00000
 80184e0:	7fe00000 	.word	0x7fe00000
 80184e4:	7c9fffff 	.word	0x7c9fffff
 80184e8:	3fe00000 	.word	0x3fe00000
 80184ec:	bff00000 	.word	0xbff00000
 80184f0:	7fefffff 	.word	0x7fefffff

080184f4 <strtod>:
 80184f4:	460a      	mov	r2, r1
 80184f6:	4601      	mov	r1, r0
 80184f8:	4802      	ldr	r0, [pc, #8]	; (8018504 <strtod+0x10>)
 80184fa:	4b03      	ldr	r3, [pc, #12]	; (8018508 <strtod+0x14>)
 80184fc:	6800      	ldr	r0, [r0, #0]
 80184fe:	f7ff b9ef 	b.w	80178e0 <_strtod_l>
 8018502:	bf00      	nop
 8018504:	200005c8 	.word	0x200005c8
 8018508:	20000630 	.word	0x20000630

0801850c <strtok>:
 801850c:	4b16      	ldr	r3, [pc, #88]	; (8018568 <strtok+0x5c>)
 801850e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018510:	681e      	ldr	r6, [r3, #0]
 8018512:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8018514:	4605      	mov	r5, r0
 8018516:	b9fc      	cbnz	r4, 8018558 <strtok+0x4c>
 8018518:	2050      	movs	r0, #80	; 0x50
 801851a:	9101      	str	r1, [sp, #4]
 801851c:	f001 fde6 	bl	801a0ec <malloc>
 8018520:	9901      	ldr	r1, [sp, #4]
 8018522:	65b0      	str	r0, [r6, #88]	; 0x58
 8018524:	4602      	mov	r2, r0
 8018526:	b920      	cbnz	r0, 8018532 <strtok+0x26>
 8018528:	4b10      	ldr	r3, [pc, #64]	; (801856c <strtok+0x60>)
 801852a:	4811      	ldr	r0, [pc, #68]	; (8018570 <strtok+0x64>)
 801852c:	2157      	movs	r1, #87	; 0x57
 801852e:	f000 f99b 	bl	8018868 <__assert_func>
 8018532:	e9c0 4400 	strd	r4, r4, [r0]
 8018536:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801853a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801853e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8018542:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8018546:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801854a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801854e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8018552:	6184      	str	r4, [r0, #24]
 8018554:	7704      	strb	r4, [r0, #28]
 8018556:	6244      	str	r4, [r0, #36]	; 0x24
 8018558:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801855a:	2301      	movs	r3, #1
 801855c:	4628      	mov	r0, r5
 801855e:	b002      	add	sp, #8
 8018560:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018564:	f000 b806 	b.w	8018574 <__strtok_r>
 8018568:	200005c8 	.word	0x200005c8
 801856c:	08032c2c 	.word	0x08032c2c
 8018570:	08032cf8 	.word	0x08032cf8

08018574 <__strtok_r>:
 8018574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018576:	b908      	cbnz	r0, 801857c <__strtok_r+0x8>
 8018578:	6810      	ldr	r0, [r2, #0]
 801857a:	b188      	cbz	r0, 80185a0 <__strtok_r+0x2c>
 801857c:	4604      	mov	r4, r0
 801857e:	4620      	mov	r0, r4
 8018580:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018584:	460f      	mov	r7, r1
 8018586:	f817 6b01 	ldrb.w	r6, [r7], #1
 801858a:	b91e      	cbnz	r6, 8018594 <__strtok_r+0x20>
 801858c:	b965      	cbnz	r5, 80185a8 <__strtok_r+0x34>
 801858e:	6015      	str	r5, [r2, #0]
 8018590:	4628      	mov	r0, r5
 8018592:	e005      	b.n	80185a0 <__strtok_r+0x2c>
 8018594:	42b5      	cmp	r5, r6
 8018596:	d1f6      	bne.n	8018586 <__strtok_r+0x12>
 8018598:	2b00      	cmp	r3, #0
 801859a:	d1f0      	bne.n	801857e <__strtok_r+0xa>
 801859c:	6014      	str	r4, [r2, #0]
 801859e:	7003      	strb	r3, [r0, #0]
 80185a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185a2:	461c      	mov	r4, r3
 80185a4:	e00c      	b.n	80185c0 <__strtok_r+0x4c>
 80185a6:	b915      	cbnz	r5, 80185ae <__strtok_r+0x3a>
 80185a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80185ac:	460e      	mov	r6, r1
 80185ae:	f816 5b01 	ldrb.w	r5, [r6], #1
 80185b2:	42ab      	cmp	r3, r5
 80185b4:	d1f7      	bne.n	80185a6 <__strtok_r+0x32>
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d0f3      	beq.n	80185a2 <__strtok_r+0x2e>
 80185ba:	2300      	movs	r3, #0
 80185bc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80185c0:	6014      	str	r4, [r2, #0]
 80185c2:	e7ed      	b.n	80185a0 <__strtok_r+0x2c>

080185c4 <strtok_r>:
 80185c4:	2301      	movs	r3, #1
 80185c6:	f7ff bfd5 	b.w	8018574 <__strtok_r>
	...

080185cc <_strtol_l.isra.0>:
 80185cc:	2b01      	cmp	r3, #1
 80185ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185d2:	d001      	beq.n	80185d8 <_strtol_l.isra.0+0xc>
 80185d4:	2b24      	cmp	r3, #36	; 0x24
 80185d6:	d906      	bls.n	80185e6 <_strtol_l.isra.0+0x1a>
 80185d8:	f000 ffde 	bl	8019598 <__errno>
 80185dc:	2316      	movs	r3, #22
 80185de:	6003      	str	r3, [r0, #0]
 80185e0:	2000      	movs	r0, #0
 80185e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185e6:	4f3a      	ldr	r7, [pc, #232]	; (80186d0 <_strtol_l.isra.0+0x104>)
 80185e8:	468e      	mov	lr, r1
 80185ea:	4676      	mov	r6, lr
 80185ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80185f0:	5de5      	ldrb	r5, [r4, r7]
 80185f2:	f015 0508 	ands.w	r5, r5, #8
 80185f6:	d1f8      	bne.n	80185ea <_strtol_l.isra.0+0x1e>
 80185f8:	2c2d      	cmp	r4, #45	; 0x2d
 80185fa:	d134      	bne.n	8018666 <_strtol_l.isra.0+0x9a>
 80185fc:	f89e 4000 	ldrb.w	r4, [lr]
 8018600:	f04f 0801 	mov.w	r8, #1
 8018604:	f106 0e02 	add.w	lr, r6, #2
 8018608:	2b00      	cmp	r3, #0
 801860a:	d05c      	beq.n	80186c6 <_strtol_l.isra.0+0xfa>
 801860c:	2b10      	cmp	r3, #16
 801860e:	d10c      	bne.n	801862a <_strtol_l.isra.0+0x5e>
 8018610:	2c30      	cmp	r4, #48	; 0x30
 8018612:	d10a      	bne.n	801862a <_strtol_l.isra.0+0x5e>
 8018614:	f89e 4000 	ldrb.w	r4, [lr]
 8018618:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801861c:	2c58      	cmp	r4, #88	; 0x58
 801861e:	d14d      	bne.n	80186bc <_strtol_l.isra.0+0xf0>
 8018620:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018624:	2310      	movs	r3, #16
 8018626:	f10e 0e02 	add.w	lr, lr, #2
 801862a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801862e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8018632:	2600      	movs	r6, #0
 8018634:	fbbc f9f3 	udiv	r9, ip, r3
 8018638:	4635      	mov	r5, r6
 801863a:	fb03 ca19 	mls	sl, r3, r9, ip
 801863e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018642:	2f09      	cmp	r7, #9
 8018644:	d818      	bhi.n	8018678 <_strtol_l.isra.0+0xac>
 8018646:	463c      	mov	r4, r7
 8018648:	42a3      	cmp	r3, r4
 801864a:	dd24      	ble.n	8018696 <_strtol_l.isra.0+0xca>
 801864c:	2e00      	cmp	r6, #0
 801864e:	db1f      	blt.n	8018690 <_strtol_l.isra.0+0xc4>
 8018650:	45a9      	cmp	r9, r5
 8018652:	d31d      	bcc.n	8018690 <_strtol_l.isra.0+0xc4>
 8018654:	d101      	bne.n	801865a <_strtol_l.isra.0+0x8e>
 8018656:	45a2      	cmp	sl, r4
 8018658:	db1a      	blt.n	8018690 <_strtol_l.isra.0+0xc4>
 801865a:	fb05 4503 	mla	r5, r5, r3, r4
 801865e:	2601      	movs	r6, #1
 8018660:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018664:	e7eb      	b.n	801863e <_strtol_l.isra.0+0x72>
 8018666:	2c2b      	cmp	r4, #43	; 0x2b
 8018668:	bf08      	it	eq
 801866a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801866e:	46a8      	mov	r8, r5
 8018670:	bf08      	it	eq
 8018672:	f106 0e02 	addeq.w	lr, r6, #2
 8018676:	e7c7      	b.n	8018608 <_strtol_l.isra.0+0x3c>
 8018678:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801867c:	2f19      	cmp	r7, #25
 801867e:	d801      	bhi.n	8018684 <_strtol_l.isra.0+0xb8>
 8018680:	3c37      	subs	r4, #55	; 0x37
 8018682:	e7e1      	b.n	8018648 <_strtol_l.isra.0+0x7c>
 8018684:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018688:	2f19      	cmp	r7, #25
 801868a:	d804      	bhi.n	8018696 <_strtol_l.isra.0+0xca>
 801868c:	3c57      	subs	r4, #87	; 0x57
 801868e:	e7db      	b.n	8018648 <_strtol_l.isra.0+0x7c>
 8018690:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8018694:	e7e4      	b.n	8018660 <_strtol_l.isra.0+0x94>
 8018696:	2e00      	cmp	r6, #0
 8018698:	da05      	bge.n	80186a6 <_strtol_l.isra.0+0xda>
 801869a:	2322      	movs	r3, #34	; 0x22
 801869c:	6003      	str	r3, [r0, #0]
 801869e:	4665      	mov	r5, ip
 80186a0:	b942      	cbnz	r2, 80186b4 <_strtol_l.isra.0+0xe8>
 80186a2:	4628      	mov	r0, r5
 80186a4:	e79d      	b.n	80185e2 <_strtol_l.isra.0+0x16>
 80186a6:	f1b8 0f00 	cmp.w	r8, #0
 80186aa:	d000      	beq.n	80186ae <_strtol_l.isra.0+0xe2>
 80186ac:	426d      	negs	r5, r5
 80186ae:	2a00      	cmp	r2, #0
 80186b0:	d0f7      	beq.n	80186a2 <_strtol_l.isra.0+0xd6>
 80186b2:	b10e      	cbz	r6, 80186b8 <_strtol_l.isra.0+0xec>
 80186b4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80186b8:	6011      	str	r1, [r2, #0]
 80186ba:	e7f2      	b.n	80186a2 <_strtol_l.isra.0+0xd6>
 80186bc:	2430      	movs	r4, #48	; 0x30
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d1b3      	bne.n	801862a <_strtol_l.isra.0+0x5e>
 80186c2:	2308      	movs	r3, #8
 80186c4:	e7b1      	b.n	801862a <_strtol_l.isra.0+0x5e>
 80186c6:	2c30      	cmp	r4, #48	; 0x30
 80186c8:	d0a4      	beq.n	8018614 <_strtol_l.isra.0+0x48>
 80186ca:	230a      	movs	r3, #10
 80186cc:	e7ad      	b.n	801862a <_strtol_l.isra.0+0x5e>
 80186ce:	bf00      	nop
 80186d0:	08032af3 	.word	0x08032af3

080186d4 <strtol>:
 80186d4:	4613      	mov	r3, r2
 80186d6:	460a      	mov	r2, r1
 80186d8:	4601      	mov	r1, r0
 80186da:	4802      	ldr	r0, [pc, #8]	; (80186e4 <strtol+0x10>)
 80186dc:	6800      	ldr	r0, [r0, #0]
 80186de:	f7ff bf75 	b.w	80185cc <_strtol_l.isra.0>
 80186e2:	bf00      	nop
 80186e4:	200005c8 	.word	0x200005c8

080186e8 <__swbuf_r>:
 80186e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ea:	460e      	mov	r6, r1
 80186ec:	4614      	mov	r4, r2
 80186ee:	4605      	mov	r5, r0
 80186f0:	b118      	cbz	r0, 80186fa <__swbuf_r+0x12>
 80186f2:	6983      	ldr	r3, [r0, #24]
 80186f4:	b90b      	cbnz	r3, 80186fa <__swbuf_r+0x12>
 80186f6:	f001 f86f 	bl	80197d8 <__sinit>
 80186fa:	4b21      	ldr	r3, [pc, #132]	; (8018780 <__swbuf_r+0x98>)
 80186fc:	429c      	cmp	r4, r3
 80186fe:	d12b      	bne.n	8018758 <__swbuf_r+0x70>
 8018700:	686c      	ldr	r4, [r5, #4]
 8018702:	69a3      	ldr	r3, [r4, #24]
 8018704:	60a3      	str	r3, [r4, #8]
 8018706:	89a3      	ldrh	r3, [r4, #12]
 8018708:	071a      	lsls	r2, r3, #28
 801870a:	d52f      	bpl.n	801876c <__swbuf_r+0x84>
 801870c:	6923      	ldr	r3, [r4, #16]
 801870e:	b36b      	cbz	r3, 801876c <__swbuf_r+0x84>
 8018710:	6923      	ldr	r3, [r4, #16]
 8018712:	6820      	ldr	r0, [r4, #0]
 8018714:	1ac0      	subs	r0, r0, r3
 8018716:	6963      	ldr	r3, [r4, #20]
 8018718:	b2f6      	uxtb	r6, r6
 801871a:	4283      	cmp	r3, r0
 801871c:	4637      	mov	r7, r6
 801871e:	dc04      	bgt.n	801872a <__swbuf_r+0x42>
 8018720:	4621      	mov	r1, r4
 8018722:	4628      	mov	r0, r5
 8018724:	f000 ffc4 	bl	80196b0 <_fflush_r>
 8018728:	bb30      	cbnz	r0, 8018778 <__swbuf_r+0x90>
 801872a:	68a3      	ldr	r3, [r4, #8]
 801872c:	3b01      	subs	r3, #1
 801872e:	60a3      	str	r3, [r4, #8]
 8018730:	6823      	ldr	r3, [r4, #0]
 8018732:	1c5a      	adds	r2, r3, #1
 8018734:	6022      	str	r2, [r4, #0]
 8018736:	701e      	strb	r6, [r3, #0]
 8018738:	6963      	ldr	r3, [r4, #20]
 801873a:	3001      	adds	r0, #1
 801873c:	4283      	cmp	r3, r0
 801873e:	d004      	beq.n	801874a <__swbuf_r+0x62>
 8018740:	89a3      	ldrh	r3, [r4, #12]
 8018742:	07db      	lsls	r3, r3, #31
 8018744:	d506      	bpl.n	8018754 <__swbuf_r+0x6c>
 8018746:	2e0a      	cmp	r6, #10
 8018748:	d104      	bne.n	8018754 <__swbuf_r+0x6c>
 801874a:	4621      	mov	r1, r4
 801874c:	4628      	mov	r0, r5
 801874e:	f000 ffaf 	bl	80196b0 <_fflush_r>
 8018752:	b988      	cbnz	r0, 8018778 <__swbuf_r+0x90>
 8018754:	4638      	mov	r0, r7
 8018756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018758:	4b0a      	ldr	r3, [pc, #40]	; (8018784 <__swbuf_r+0x9c>)
 801875a:	429c      	cmp	r4, r3
 801875c:	d101      	bne.n	8018762 <__swbuf_r+0x7a>
 801875e:	68ac      	ldr	r4, [r5, #8]
 8018760:	e7cf      	b.n	8018702 <__swbuf_r+0x1a>
 8018762:	4b09      	ldr	r3, [pc, #36]	; (8018788 <__swbuf_r+0xa0>)
 8018764:	429c      	cmp	r4, r3
 8018766:	bf08      	it	eq
 8018768:	68ec      	ldreq	r4, [r5, #12]
 801876a:	e7ca      	b.n	8018702 <__swbuf_r+0x1a>
 801876c:	4621      	mov	r1, r4
 801876e:	4628      	mov	r0, r5
 8018770:	f000 f80c 	bl	801878c <__swsetup_r>
 8018774:	2800      	cmp	r0, #0
 8018776:	d0cb      	beq.n	8018710 <__swbuf_r+0x28>
 8018778:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801877c:	e7ea      	b.n	8018754 <__swbuf_r+0x6c>
 801877e:	bf00      	nop
 8018780:	08032e34 	.word	0x08032e34
 8018784:	08032e54 	.word	0x08032e54
 8018788:	08032e14 	.word	0x08032e14

0801878c <__swsetup_r>:
 801878c:	4b32      	ldr	r3, [pc, #200]	; (8018858 <__swsetup_r+0xcc>)
 801878e:	b570      	push	{r4, r5, r6, lr}
 8018790:	681d      	ldr	r5, [r3, #0]
 8018792:	4606      	mov	r6, r0
 8018794:	460c      	mov	r4, r1
 8018796:	b125      	cbz	r5, 80187a2 <__swsetup_r+0x16>
 8018798:	69ab      	ldr	r3, [r5, #24]
 801879a:	b913      	cbnz	r3, 80187a2 <__swsetup_r+0x16>
 801879c:	4628      	mov	r0, r5
 801879e:	f001 f81b 	bl	80197d8 <__sinit>
 80187a2:	4b2e      	ldr	r3, [pc, #184]	; (801885c <__swsetup_r+0xd0>)
 80187a4:	429c      	cmp	r4, r3
 80187a6:	d10f      	bne.n	80187c8 <__swsetup_r+0x3c>
 80187a8:	686c      	ldr	r4, [r5, #4]
 80187aa:	89a3      	ldrh	r3, [r4, #12]
 80187ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80187b0:	0719      	lsls	r1, r3, #28
 80187b2:	d42c      	bmi.n	801880e <__swsetup_r+0x82>
 80187b4:	06dd      	lsls	r5, r3, #27
 80187b6:	d411      	bmi.n	80187dc <__swsetup_r+0x50>
 80187b8:	2309      	movs	r3, #9
 80187ba:	6033      	str	r3, [r6, #0]
 80187bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80187c0:	81a3      	strh	r3, [r4, #12]
 80187c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80187c6:	e03e      	b.n	8018846 <__swsetup_r+0xba>
 80187c8:	4b25      	ldr	r3, [pc, #148]	; (8018860 <__swsetup_r+0xd4>)
 80187ca:	429c      	cmp	r4, r3
 80187cc:	d101      	bne.n	80187d2 <__swsetup_r+0x46>
 80187ce:	68ac      	ldr	r4, [r5, #8]
 80187d0:	e7eb      	b.n	80187aa <__swsetup_r+0x1e>
 80187d2:	4b24      	ldr	r3, [pc, #144]	; (8018864 <__swsetup_r+0xd8>)
 80187d4:	429c      	cmp	r4, r3
 80187d6:	bf08      	it	eq
 80187d8:	68ec      	ldreq	r4, [r5, #12]
 80187da:	e7e6      	b.n	80187aa <__swsetup_r+0x1e>
 80187dc:	0758      	lsls	r0, r3, #29
 80187de:	d512      	bpl.n	8018806 <__swsetup_r+0x7a>
 80187e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80187e2:	b141      	cbz	r1, 80187f6 <__swsetup_r+0x6a>
 80187e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80187e8:	4299      	cmp	r1, r3
 80187ea:	d002      	beq.n	80187f2 <__swsetup_r+0x66>
 80187ec:	4630      	mov	r0, r6
 80187ee:	f002 f961 	bl	801aab4 <_free_r>
 80187f2:	2300      	movs	r3, #0
 80187f4:	6363      	str	r3, [r4, #52]	; 0x34
 80187f6:	89a3      	ldrh	r3, [r4, #12]
 80187f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80187fc:	81a3      	strh	r3, [r4, #12]
 80187fe:	2300      	movs	r3, #0
 8018800:	6063      	str	r3, [r4, #4]
 8018802:	6923      	ldr	r3, [r4, #16]
 8018804:	6023      	str	r3, [r4, #0]
 8018806:	89a3      	ldrh	r3, [r4, #12]
 8018808:	f043 0308 	orr.w	r3, r3, #8
 801880c:	81a3      	strh	r3, [r4, #12]
 801880e:	6923      	ldr	r3, [r4, #16]
 8018810:	b94b      	cbnz	r3, 8018826 <__swsetup_r+0x9a>
 8018812:	89a3      	ldrh	r3, [r4, #12]
 8018814:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801881c:	d003      	beq.n	8018826 <__swsetup_r+0x9a>
 801881e:	4621      	mov	r1, r4
 8018820:	4630      	mov	r0, r6
 8018822:	f001 fc23 	bl	801a06c <__smakebuf_r>
 8018826:	89a0      	ldrh	r0, [r4, #12]
 8018828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801882c:	f010 0301 	ands.w	r3, r0, #1
 8018830:	d00a      	beq.n	8018848 <__swsetup_r+0xbc>
 8018832:	2300      	movs	r3, #0
 8018834:	60a3      	str	r3, [r4, #8]
 8018836:	6963      	ldr	r3, [r4, #20]
 8018838:	425b      	negs	r3, r3
 801883a:	61a3      	str	r3, [r4, #24]
 801883c:	6923      	ldr	r3, [r4, #16]
 801883e:	b943      	cbnz	r3, 8018852 <__swsetup_r+0xc6>
 8018840:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018844:	d1ba      	bne.n	80187bc <__swsetup_r+0x30>
 8018846:	bd70      	pop	{r4, r5, r6, pc}
 8018848:	0781      	lsls	r1, r0, #30
 801884a:	bf58      	it	pl
 801884c:	6963      	ldrpl	r3, [r4, #20]
 801884e:	60a3      	str	r3, [r4, #8]
 8018850:	e7f4      	b.n	801883c <__swsetup_r+0xb0>
 8018852:	2000      	movs	r0, #0
 8018854:	e7f7      	b.n	8018846 <__swsetup_r+0xba>
 8018856:	bf00      	nop
 8018858:	200005c8 	.word	0x200005c8
 801885c:	08032e34 	.word	0x08032e34
 8018860:	08032e54 	.word	0x08032e54
 8018864:	08032e14 	.word	0x08032e14

08018868 <__assert_func>:
 8018868:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801886a:	4614      	mov	r4, r2
 801886c:	461a      	mov	r2, r3
 801886e:	4b09      	ldr	r3, [pc, #36]	; (8018894 <__assert_func+0x2c>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	4605      	mov	r5, r0
 8018874:	68d8      	ldr	r0, [r3, #12]
 8018876:	b14c      	cbz	r4, 801888c <__assert_func+0x24>
 8018878:	4b07      	ldr	r3, [pc, #28]	; (8018898 <__assert_func+0x30>)
 801887a:	9100      	str	r1, [sp, #0]
 801887c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018880:	4906      	ldr	r1, [pc, #24]	; (801889c <__assert_func+0x34>)
 8018882:	462b      	mov	r3, r5
 8018884:	f001 f826 	bl	80198d4 <fiprintf>
 8018888:	f002 fcf0 	bl	801b26c <abort>
 801888c:	4b04      	ldr	r3, [pc, #16]	; (80188a0 <__assert_func+0x38>)
 801888e:	461c      	mov	r4, r3
 8018890:	e7f3      	b.n	801887a <__assert_func+0x12>
 8018892:	bf00      	nop
 8018894:	200005c8 	.word	0x200005c8
 8018898:	08032d59 	.word	0x08032d59
 801889c:	08032d66 	.word	0x08032d66
 80188a0:	08032d94 	.word	0x08032d94

080188a4 <quorem>:
 80188a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188a8:	6903      	ldr	r3, [r0, #16]
 80188aa:	690c      	ldr	r4, [r1, #16]
 80188ac:	42a3      	cmp	r3, r4
 80188ae:	4607      	mov	r7, r0
 80188b0:	f2c0 8081 	blt.w	80189b6 <quorem+0x112>
 80188b4:	3c01      	subs	r4, #1
 80188b6:	f101 0814 	add.w	r8, r1, #20
 80188ba:	f100 0514 	add.w	r5, r0, #20
 80188be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80188c2:	9301      	str	r3, [sp, #4]
 80188c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80188c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80188cc:	3301      	adds	r3, #1
 80188ce:	429a      	cmp	r2, r3
 80188d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80188d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80188d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80188dc:	d331      	bcc.n	8018942 <quorem+0x9e>
 80188de:	f04f 0e00 	mov.w	lr, #0
 80188e2:	4640      	mov	r0, r8
 80188e4:	46ac      	mov	ip, r5
 80188e6:	46f2      	mov	sl, lr
 80188e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80188ec:	b293      	uxth	r3, r2
 80188ee:	fb06 e303 	mla	r3, r6, r3, lr
 80188f2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80188f6:	b29b      	uxth	r3, r3
 80188f8:	ebaa 0303 	sub.w	r3, sl, r3
 80188fc:	0c12      	lsrs	r2, r2, #16
 80188fe:	f8dc a000 	ldr.w	sl, [ip]
 8018902:	fb06 e202 	mla	r2, r6, r2, lr
 8018906:	fa13 f38a 	uxtah	r3, r3, sl
 801890a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801890e:	fa1f fa82 	uxth.w	sl, r2
 8018912:	f8dc 2000 	ldr.w	r2, [ip]
 8018916:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801891a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801891e:	b29b      	uxth	r3, r3
 8018920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018924:	4581      	cmp	r9, r0
 8018926:	f84c 3b04 	str.w	r3, [ip], #4
 801892a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801892e:	d2db      	bcs.n	80188e8 <quorem+0x44>
 8018930:	f855 300b 	ldr.w	r3, [r5, fp]
 8018934:	b92b      	cbnz	r3, 8018942 <quorem+0x9e>
 8018936:	9b01      	ldr	r3, [sp, #4]
 8018938:	3b04      	subs	r3, #4
 801893a:	429d      	cmp	r5, r3
 801893c:	461a      	mov	r2, r3
 801893e:	d32e      	bcc.n	801899e <quorem+0xfa>
 8018940:	613c      	str	r4, [r7, #16]
 8018942:	4638      	mov	r0, r7
 8018944:	f001 feb4 	bl	801a6b0 <__mcmp>
 8018948:	2800      	cmp	r0, #0
 801894a:	db24      	blt.n	8018996 <quorem+0xf2>
 801894c:	3601      	adds	r6, #1
 801894e:	4628      	mov	r0, r5
 8018950:	f04f 0c00 	mov.w	ip, #0
 8018954:	f858 2b04 	ldr.w	r2, [r8], #4
 8018958:	f8d0 e000 	ldr.w	lr, [r0]
 801895c:	b293      	uxth	r3, r2
 801895e:	ebac 0303 	sub.w	r3, ip, r3
 8018962:	0c12      	lsrs	r2, r2, #16
 8018964:	fa13 f38e 	uxtah	r3, r3, lr
 8018968:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801896c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018970:	b29b      	uxth	r3, r3
 8018972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018976:	45c1      	cmp	r9, r8
 8018978:	f840 3b04 	str.w	r3, [r0], #4
 801897c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018980:	d2e8      	bcs.n	8018954 <quorem+0xb0>
 8018982:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801898a:	b922      	cbnz	r2, 8018996 <quorem+0xf2>
 801898c:	3b04      	subs	r3, #4
 801898e:	429d      	cmp	r5, r3
 8018990:	461a      	mov	r2, r3
 8018992:	d30a      	bcc.n	80189aa <quorem+0x106>
 8018994:	613c      	str	r4, [r7, #16]
 8018996:	4630      	mov	r0, r6
 8018998:	b003      	add	sp, #12
 801899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801899e:	6812      	ldr	r2, [r2, #0]
 80189a0:	3b04      	subs	r3, #4
 80189a2:	2a00      	cmp	r2, #0
 80189a4:	d1cc      	bne.n	8018940 <quorem+0x9c>
 80189a6:	3c01      	subs	r4, #1
 80189a8:	e7c7      	b.n	801893a <quorem+0x96>
 80189aa:	6812      	ldr	r2, [r2, #0]
 80189ac:	3b04      	subs	r3, #4
 80189ae:	2a00      	cmp	r2, #0
 80189b0:	d1f0      	bne.n	8018994 <quorem+0xf0>
 80189b2:	3c01      	subs	r4, #1
 80189b4:	e7eb      	b.n	801898e <quorem+0xea>
 80189b6:	2000      	movs	r0, #0
 80189b8:	e7ee      	b.n	8018998 <quorem+0xf4>
 80189ba:	0000      	movs	r0, r0
 80189bc:	0000      	movs	r0, r0
	...

080189c0 <_dtoa_r>:
 80189c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189c4:	ed2d 8b02 	vpush	{d8}
 80189c8:	ec57 6b10 	vmov	r6, r7, d0
 80189cc:	b095      	sub	sp, #84	; 0x54
 80189ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80189d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80189d4:	9105      	str	r1, [sp, #20]
 80189d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80189da:	4604      	mov	r4, r0
 80189dc:	9209      	str	r2, [sp, #36]	; 0x24
 80189de:	930f      	str	r3, [sp, #60]	; 0x3c
 80189e0:	b975      	cbnz	r5, 8018a00 <_dtoa_r+0x40>
 80189e2:	2010      	movs	r0, #16
 80189e4:	f001 fb82 	bl	801a0ec <malloc>
 80189e8:	4602      	mov	r2, r0
 80189ea:	6260      	str	r0, [r4, #36]	; 0x24
 80189ec:	b920      	cbnz	r0, 80189f8 <_dtoa_r+0x38>
 80189ee:	4bb2      	ldr	r3, [pc, #712]	; (8018cb8 <_dtoa_r+0x2f8>)
 80189f0:	21ea      	movs	r1, #234	; 0xea
 80189f2:	48b2      	ldr	r0, [pc, #712]	; (8018cbc <_dtoa_r+0x2fc>)
 80189f4:	f7ff ff38 	bl	8018868 <__assert_func>
 80189f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80189fc:	6005      	str	r5, [r0, #0]
 80189fe:	60c5      	str	r5, [r0, #12]
 8018a00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a02:	6819      	ldr	r1, [r3, #0]
 8018a04:	b151      	cbz	r1, 8018a1c <_dtoa_r+0x5c>
 8018a06:	685a      	ldr	r2, [r3, #4]
 8018a08:	604a      	str	r2, [r1, #4]
 8018a0a:	2301      	movs	r3, #1
 8018a0c:	4093      	lsls	r3, r2
 8018a0e:	608b      	str	r3, [r1, #8]
 8018a10:	4620      	mov	r0, r4
 8018a12:	f001 fbc5 	bl	801a1a0 <_Bfree>
 8018a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a18:	2200      	movs	r2, #0
 8018a1a:	601a      	str	r2, [r3, #0]
 8018a1c:	1e3b      	subs	r3, r7, #0
 8018a1e:	bfb9      	ittee	lt
 8018a20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018a24:	9303      	strlt	r3, [sp, #12]
 8018a26:	2300      	movge	r3, #0
 8018a28:	f8c8 3000 	strge.w	r3, [r8]
 8018a2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018a30:	4ba3      	ldr	r3, [pc, #652]	; (8018cc0 <_dtoa_r+0x300>)
 8018a32:	bfbc      	itt	lt
 8018a34:	2201      	movlt	r2, #1
 8018a36:	f8c8 2000 	strlt.w	r2, [r8]
 8018a3a:	ea33 0309 	bics.w	r3, r3, r9
 8018a3e:	d11b      	bne.n	8018a78 <_dtoa_r+0xb8>
 8018a40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a42:	f242 730f 	movw	r3, #9999	; 0x270f
 8018a46:	6013      	str	r3, [r2, #0]
 8018a48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018a4c:	4333      	orrs	r3, r6
 8018a4e:	f000 857a 	beq.w	8019546 <_dtoa_r+0xb86>
 8018a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018a54:	b963      	cbnz	r3, 8018a70 <_dtoa_r+0xb0>
 8018a56:	4b9b      	ldr	r3, [pc, #620]	; (8018cc4 <_dtoa_r+0x304>)
 8018a58:	e024      	b.n	8018aa4 <_dtoa_r+0xe4>
 8018a5a:	4b9b      	ldr	r3, [pc, #620]	; (8018cc8 <_dtoa_r+0x308>)
 8018a5c:	9300      	str	r3, [sp, #0]
 8018a5e:	3308      	adds	r3, #8
 8018a60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018a62:	6013      	str	r3, [r2, #0]
 8018a64:	9800      	ldr	r0, [sp, #0]
 8018a66:	b015      	add	sp, #84	; 0x54
 8018a68:	ecbd 8b02 	vpop	{d8}
 8018a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a70:	4b94      	ldr	r3, [pc, #592]	; (8018cc4 <_dtoa_r+0x304>)
 8018a72:	9300      	str	r3, [sp, #0]
 8018a74:	3303      	adds	r3, #3
 8018a76:	e7f3      	b.n	8018a60 <_dtoa_r+0xa0>
 8018a78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018a7c:	2200      	movs	r2, #0
 8018a7e:	ec51 0b17 	vmov	r0, r1, d7
 8018a82:	2300      	movs	r3, #0
 8018a84:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018a88:	f7e8 f82e 	bl	8000ae8 <__aeabi_dcmpeq>
 8018a8c:	4680      	mov	r8, r0
 8018a8e:	b158      	cbz	r0, 8018aa8 <_dtoa_r+0xe8>
 8018a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a92:	2301      	movs	r3, #1
 8018a94:	6013      	str	r3, [r2, #0]
 8018a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	f000 8551 	beq.w	8019540 <_dtoa_r+0xb80>
 8018a9e:	488b      	ldr	r0, [pc, #556]	; (8018ccc <_dtoa_r+0x30c>)
 8018aa0:	6018      	str	r0, [r3, #0]
 8018aa2:	1e43      	subs	r3, r0, #1
 8018aa4:	9300      	str	r3, [sp, #0]
 8018aa6:	e7dd      	b.n	8018a64 <_dtoa_r+0xa4>
 8018aa8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018aac:	aa12      	add	r2, sp, #72	; 0x48
 8018aae:	a913      	add	r1, sp, #76	; 0x4c
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	f001 ff1d 	bl	801a8f0 <__d2b>
 8018ab6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018aba:	4683      	mov	fp, r0
 8018abc:	2d00      	cmp	r5, #0
 8018abe:	d07c      	beq.n	8018bba <_dtoa_r+0x1fa>
 8018ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ac2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018ac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018aca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8018ace:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018ad2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018ad6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018ada:	4b7d      	ldr	r3, [pc, #500]	; (8018cd0 <_dtoa_r+0x310>)
 8018adc:	2200      	movs	r2, #0
 8018ade:	4630      	mov	r0, r6
 8018ae0:	4639      	mov	r1, r7
 8018ae2:	f7e7 fbe1 	bl	80002a8 <__aeabi_dsub>
 8018ae6:	a36e      	add	r3, pc, #440	; (adr r3, 8018ca0 <_dtoa_r+0x2e0>)
 8018ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aec:	f7e7 fd94 	bl	8000618 <__aeabi_dmul>
 8018af0:	a36d      	add	r3, pc, #436	; (adr r3, 8018ca8 <_dtoa_r+0x2e8>)
 8018af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018af6:	f7e7 fbd9 	bl	80002ac <__adddf3>
 8018afa:	4606      	mov	r6, r0
 8018afc:	4628      	mov	r0, r5
 8018afe:	460f      	mov	r7, r1
 8018b00:	f7e7 fd20 	bl	8000544 <__aeabi_i2d>
 8018b04:	a36a      	add	r3, pc, #424	; (adr r3, 8018cb0 <_dtoa_r+0x2f0>)
 8018b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b0a:	f7e7 fd85 	bl	8000618 <__aeabi_dmul>
 8018b0e:	4602      	mov	r2, r0
 8018b10:	460b      	mov	r3, r1
 8018b12:	4630      	mov	r0, r6
 8018b14:	4639      	mov	r1, r7
 8018b16:	f7e7 fbc9 	bl	80002ac <__adddf3>
 8018b1a:	4606      	mov	r6, r0
 8018b1c:	460f      	mov	r7, r1
 8018b1e:	f7e8 f82b 	bl	8000b78 <__aeabi_d2iz>
 8018b22:	2200      	movs	r2, #0
 8018b24:	4682      	mov	sl, r0
 8018b26:	2300      	movs	r3, #0
 8018b28:	4630      	mov	r0, r6
 8018b2a:	4639      	mov	r1, r7
 8018b2c:	f7e7 ffe6 	bl	8000afc <__aeabi_dcmplt>
 8018b30:	b148      	cbz	r0, 8018b46 <_dtoa_r+0x186>
 8018b32:	4650      	mov	r0, sl
 8018b34:	f7e7 fd06 	bl	8000544 <__aeabi_i2d>
 8018b38:	4632      	mov	r2, r6
 8018b3a:	463b      	mov	r3, r7
 8018b3c:	f7e7 ffd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8018b40:	b908      	cbnz	r0, 8018b46 <_dtoa_r+0x186>
 8018b42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018b46:	f1ba 0f16 	cmp.w	sl, #22
 8018b4a:	d854      	bhi.n	8018bf6 <_dtoa_r+0x236>
 8018b4c:	4b61      	ldr	r3, [pc, #388]	; (8018cd4 <_dtoa_r+0x314>)
 8018b4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018b5a:	f7e7 ffcf 	bl	8000afc <__aeabi_dcmplt>
 8018b5e:	2800      	cmp	r0, #0
 8018b60:	d04b      	beq.n	8018bfa <_dtoa_r+0x23a>
 8018b62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018b66:	2300      	movs	r3, #0
 8018b68:	930e      	str	r3, [sp, #56]	; 0x38
 8018b6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b6c:	1b5d      	subs	r5, r3, r5
 8018b6e:	1e6b      	subs	r3, r5, #1
 8018b70:	9304      	str	r3, [sp, #16]
 8018b72:	bf43      	ittte	mi
 8018b74:	2300      	movmi	r3, #0
 8018b76:	f1c5 0801 	rsbmi	r8, r5, #1
 8018b7a:	9304      	strmi	r3, [sp, #16]
 8018b7c:	f04f 0800 	movpl.w	r8, #0
 8018b80:	f1ba 0f00 	cmp.w	sl, #0
 8018b84:	db3b      	blt.n	8018bfe <_dtoa_r+0x23e>
 8018b86:	9b04      	ldr	r3, [sp, #16]
 8018b88:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018b8c:	4453      	add	r3, sl
 8018b8e:	9304      	str	r3, [sp, #16]
 8018b90:	2300      	movs	r3, #0
 8018b92:	9306      	str	r3, [sp, #24]
 8018b94:	9b05      	ldr	r3, [sp, #20]
 8018b96:	2b09      	cmp	r3, #9
 8018b98:	d869      	bhi.n	8018c6e <_dtoa_r+0x2ae>
 8018b9a:	2b05      	cmp	r3, #5
 8018b9c:	bfc4      	itt	gt
 8018b9e:	3b04      	subgt	r3, #4
 8018ba0:	9305      	strgt	r3, [sp, #20]
 8018ba2:	9b05      	ldr	r3, [sp, #20]
 8018ba4:	f1a3 0302 	sub.w	r3, r3, #2
 8018ba8:	bfcc      	ite	gt
 8018baa:	2500      	movgt	r5, #0
 8018bac:	2501      	movle	r5, #1
 8018bae:	2b03      	cmp	r3, #3
 8018bb0:	d869      	bhi.n	8018c86 <_dtoa_r+0x2c6>
 8018bb2:	e8df f003 	tbb	[pc, r3]
 8018bb6:	4e2c      	.short	0x4e2c
 8018bb8:	5a4c      	.short	0x5a4c
 8018bba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018bbe:	441d      	add	r5, r3
 8018bc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018bc4:	2b20      	cmp	r3, #32
 8018bc6:	bfc1      	itttt	gt
 8018bc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018bcc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018bd0:	fa09 f303 	lslgt.w	r3, r9, r3
 8018bd4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018bd8:	bfda      	itte	le
 8018bda:	f1c3 0320 	rsble	r3, r3, #32
 8018bde:	fa06 f003 	lslle.w	r0, r6, r3
 8018be2:	4318      	orrgt	r0, r3
 8018be4:	f7e7 fc9e 	bl	8000524 <__aeabi_ui2d>
 8018be8:	2301      	movs	r3, #1
 8018bea:	4606      	mov	r6, r0
 8018bec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018bf0:	3d01      	subs	r5, #1
 8018bf2:	9310      	str	r3, [sp, #64]	; 0x40
 8018bf4:	e771      	b.n	8018ada <_dtoa_r+0x11a>
 8018bf6:	2301      	movs	r3, #1
 8018bf8:	e7b6      	b.n	8018b68 <_dtoa_r+0x1a8>
 8018bfa:	900e      	str	r0, [sp, #56]	; 0x38
 8018bfc:	e7b5      	b.n	8018b6a <_dtoa_r+0x1aa>
 8018bfe:	f1ca 0300 	rsb	r3, sl, #0
 8018c02:	9306      	str	r3, [sp, #24]
 8018c04:	2300      	movs	r3, #0
 8018c06:	eba8 080a 	sub.w	r8, r8, sl
 8018c0a:	930d      	str	r3, [sp, #52]	; 0x34
 8018c0c:	e7c2      	b.n	8018b94 <_dtoa_r+0x1d4>
 8018c0e:	2300      	movs	r3, #0
 8018c10:	9308      	str	r3, [sp, #32]
 8018c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	dc39      	bgt.n	8018c8c <_dtoa_r+0x2cc>
 8018c18:	f04f 0901 	mov.w	r9, #1
 8018c1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018c20:	464b      	mov	r3, r9
 8018c22:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018c26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018c28:	2200      	movs	r2, #0
 8018c2a:	6042      	str	r2, [r0, #4]
 8018c2c:	2204      	movs	r2, #4
 8018c2e:	f102 0614 	add.w	r6, r2, #20
 8018c32:	429e      	cmp	r6, r3
 8018c34:	6841      	ldr	r1, [r0, #4]
 8018c36:	d92f      	bls.n	8018c98 <_dtoa_r+0x2d8>
 8018c38:	4620      	mov	r0, r4
 8018c3a:	f001 fa71 	bl	801a120 <_Balloc>
 8018c3e:	9000      	str	r0, [sp, #0]
 8018c40:	2800      	cmp	r0, #0
 8018c42:	d14b      	bne.n	8018cdc <_dtoa_r+0x31c>
 8018c44:	4b24      	ldr	r3, [pc, #144]	; (8018cd8 <_dtoa_r+0x318>)
 8018c46:	4602      	mov	r2, r0
 8018c48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018c4c:	e6d1      	b.n	80189f2 <_dtoa_r+0x32>
 8018c4e:	2301      	movs	r3, #1
 8018c50:	e7de      	b.n	8018c10 <_dtoa_r+0x250>
 8018c52:	2300      	movs	r3, #0
 8018c54:	9308      	str	r3, [sp, #32]
 8018c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c58:	eb0a 0903 	add.w	r9, sl, r3
 8018c5c:	f109 0301 	add.w	r3, r9, #1
 8018c60:	2b01      	cmp	r3, #1
 8018c62:	9301      	str	r3, [sp, #4]
 8018c64:	bfb8      	it	lt
 8018c66:	2301      	movlt	r3, #1
 8018c68:	e7dd      	b.n	8018c26 <_dtoa_r+0x266>
 8018c6a:	2301      	movs	r3, #1
 8018c6c:	e7f2      	b.n	8018c54 <_dtoa_r+0x294>
 8018c6e:	2501      	movs	r5, #1
 8018c70:	2300      	movs	r3, #0
 8018c72:	9305      	str	r3, [sp, #20]
 8018c74:	9508      	str	r5, [sp, #32]
 8018c76:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018c80:	2312      	movs	r3, #18
 8018c82:	9209      	str	r2, [sp, #36]	; 0x24
 8018c84:	e7cf      	b.n	8018c26 <_dtoa_r+0x266>
 8018c86:	2301      	movs	r3, #1
 8018c88:	9308      	str	r3, [sp, #32]
 8018c8a:	e7f4      	b.n	8018c76 <_dtoa_r+0x2b6>
 8018c8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018c90:	f8cd 9004 	str.w	r9, [sp, #4]
 8018c94:	464b      	mov	r3, r9
 8018c96:	e7c6      	b.n	8018c26 <_dtoa_r+0x266>
 8018c98:	3101      	adds	r1, #1
 8018c9a:	6041      	str	r1, [r0, #4]
 8018c9c:	0052      	lsls	r2, r2, #1
 8018c9e:	e7c6      	b.n	8018c2e <_dtoa_r+0x26e>
 8018ca0:	636f4361 	.word	0x636f4361
 8018ca4:	3fd287a7 	.word	0x3fd287a7
 8018ca8:	8b60c8b3 	.word	0x8b60c8b3
 8018cac:	3fc68a28 	.word	0x3fc68a28
 8018cb0:	509f79fb 	.word	0x509f79fb
 8018cb4:	3fd34413 	.word	0x3fd34413
 8018cb8:	08032c2c 	.word	0x08032c2c
 8018cbc:	08032da2 	.word	0x08032da2
 8018cc0:	7ff00000 	.word	0x7ff00000
 8018cc4:	08032d9e 	.word	0x08032d9e
 8018cc8:	08032d95 	.word	0x08032d95
 8018ccc:	08032c09 	.word	0x08032c09
 8018cd0:	3ff80000 	.word	0x3ff80000
 8018cd4:	08032f80 	.word	0x08032f80
 8018cd8:	08032e01 	.word	0x08032e01
 8018cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018cde:	9a00      	ldr	r2, [sp, #0]
 8018ce0:	601a      	str	r2, [r3, #0]
 8018ce2:	9b01      	ldr	r3, [sp, #4]
 8018ce4:	2b0e      	cmp	r3, #14
 8018ce6:	f200 80ad 	bhi.w	8018e44 <_dtoa_r+0x484>
 8018cea:	2d00      	cmp	r5, #0
 8018cec:	f000 80aa 	beq.w	8018e44 <_dtoa_r+0x484>
 8018cf0:	f1ba 0f00 	cmp.w	sl, #0
 8018cf4:	dd36      	ble.n	8018d64 <_dtoa_r+0x3a4>
 8018cf6:	4ac3      	ldr	r2, [pc, #780]	; (8019004 <_dtoa_r+0x644>)
 8018cf8:	f00a 030f 	and.w	r3, sl, #15
 8018cfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018d00:	ed93 7b00 	vldr	d7, [r3]
 8018d04:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018d08:	ea4f 172a 	mov.w	r7, sl, asr #4
 8018d0c:	eeb0 8a47 	vmov.f32	s16, s14
 8018d10:	eef0 8a67 	vmov.f32	s17, s15
 8018d14:	d016      	beq.n	8018d44 <_dtoa_r+0x384>
 8018d16:	4bbc      	ldr	r3, [pc, #752]	; (8019008 <_dtoa_r+0x648>)
 8018d18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018d1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018d20:	f7e7 fda4 	bl	800086c <__aeabi_ddiv>
 8018d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018d28:	f007 070f 	and.w	r7, r7, #15
 8018d2c:	2503      	movs	r5, #3
 8018d2e:	4eb6      	ldr	r6, [pc, #728]	; (8019008 <_dtoa_r+0x648>)
 8018d30:	b957      	cbnz	r7, 8018d48 <_dtoa_r+0x388>
 8018d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018d36:	ec53 2b18 	vmov	r2, r3, d8
 8018d3a:	f7e7 fd97 	bl	800086c <__aeabi_ddiv>
 8018d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018d42:	e029      	b.n	8018d98 <_dtoa_r+0x3d8>
 8018d44:	2502      	movs	r5, #2
 8018d46:	e7f2      	b.n	8018d2e <_dtoa_r+0x36e>
 8018d48:	07f9      	lsls	r1, r7, #31
 8018d4a:	d508      	bpl.n	8018d5e <_dtoa_r+0x39e>
 8018d4c:	ec51 0b18 	vmov	r0, r1, d8
 8018d50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018d54:	f7e7 fc60 	bl	8000618 <__aeabi_dmul>
 8018d58:	ec41 0b18 	vmov	d8, r0, r1
 8018d5c:	3501      	adds	r5, #1
 8018d5e:	107f      	asrs	r7, r7, #1
 8018d60:	3608      	adds	r6, #8
 8018d62:	e7e5      	b.n	8018d30 <_dtoa_r+0x370>
 8018d64:	f000 80a6 	beq.w	8018eb4 <_dtoa_r+0x4f4>
 8018d68:	f1ca 0600 	rsb	r6, sl, #0
 8018d6c:	4ba5      	ldr	r3, [pc, #660]	; (8019004 <_dtoa_r+0x644>)
 8018d6e:	4fa6      	ldr	r7, [pc, #664]	; (8019008 <_dtoa_r+0x648>)
 8018d70:	f006 020f 	and.w	r2, r6, #15
 8018d74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018d80:	f7e7 fc4a 	bl	8000618 <__aeabi_dmul>
 8018d84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018d88:	1136      	asrs	r6, r6, #4
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	2502      	movs	r5, #2
 8018d8e:	2e00      	cmp	r6, #0
 8018d90:	f040 8085 	bne.w	8018e9e <_dtoa_r+0x4de>
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d1d2      	bne.n	8018d3e <_dtoa_r+0x37e>
 8018d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	f000 808c 	beq.w	8018eb8 <_dtoa_r+0x4f8>
 8018da0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018da4:	4b99      	ldr	r3, [pc, #612]	; (801900c <_dtoa_r+0x64c>)
 8018da6:	2200      	movs	r2, #0
 8018da8:	4630      	mov	r0, r6
 8018daa:	4639      	mov	r1, r7
 8018dac:	f7e7 fea6 	bl	8000afc <__aeabi_dcmplt>
 8018db0:	2800      	cmp	r0, #0
 8018db2:	f000 8081 	beq.w	8018eb8 <_dtoa_r+0x4f8>
 8018db6:	9b01      	ldr	r3, [sp, #4]
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d07d      	beq.n	8018eb8 <_dtoa_r+0x4f8>
 8018dbc:	f1b9 0f00 	cmp.w	r9, #0
 8018dc0:	dd3c      	ble.n	8018e3c <_dtoa_r+0x47c>
 8018dc2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8018dc6:	9307      	str	r3, [sp, #28]
 8018dc8:	2200      	movs	r2, #0
 8018dca:	4b91      	ldr	r3, [pc, #580]	; (8019010 <_dtoa_r+0x650>)
 8018dcc:	4630      	mov	r0, r6
 8018dce:	4639      	mov	r1, r7
 8018dd0:	f7e7 fc22 	bl	8000618 <__aeabi_dmul>
 8018dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018dd8:	3501      	adds	r5, #1
 8018dda:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018dde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018de2:	4628      	mov	r0, r5
 8018de4:	f7e7 fbae 	bl	8000544 <__aeabi_i2d>
 8018de8:	4632      	mov	r2, r6
 8018dea:	463b      	mov	r3, r7
 8018dec:	f7e7 fc14 	bl	8000618 <__aeabi_dmul>
 8018df0:	4b88      	ldr	r3, [pc, #544]	; (8019014 <_dtoa_r+0x654>)
 8018df2:	2200      	movs	r2, #0
 8018df4:	f7e7 fa5a 	bl	80002ac <__adddf3>
 8018df8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e00:	9303      	str	r3, [sp, #12]
 8018e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d15c      	bne.n	8018ec2 <_dtoa_r+0x502>
 8018e08:	4b83      	ldr	r3, [pc, #524]	; (8019018 <_dtoa_r+0x658>)
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	4630      	mov	r0, r6
 8018e0e:	4639      	mov	r1, r7
 8018e10:	f7e7 fa4a 	bl	80002a8 <__aeabi_dsub>
 8018e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018e18:	4606      	mov	r6, r0
 8018e1a:	460f      	mov	r7, r1
 8018e1c:	f7e7 fe8c 	bl	8000b38 <__aeabi_dcmpgt>
 8018e20:	2800      	cmp	r0, #0
 8018e22:	f040 8296 	bne.w	8019352 <_dtoa_r+0x992>
 8018e26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018e30:	4639      	mov	r1, r7
 8018e32:	f7e7 fe63 	bl	8000afc <__aeabi_dcmplt>
 8018e36:	2800      	cmp	r0, #0
 8018e38:	f040 8288 	bne.w	801934c <_dtoa_r+0x98c>
 8018e3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018e40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018e44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	f2c0 8158 	blt.w	80190fc <_dtoa_r+0x73c>
 8018e4c:	f1ba 0f0e 	cmp.w	sl, #14
 8018e50:	f300 8154 	bgt.w	80190fc <_dtoa_r+0x73c>
 8018e54:	4b6b      	ldr	r3, [pc, #428]	; (8019004 <_dtoa_r+0x644>)
 8018e56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018e5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	f280 80e3 	bge.w	801902c <_dtoa_r+0x66c>
 8018e66:	9b01      	ldr	r3, [sp, #4]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	f300 80df 	bgt.w	801902c <_dtoa_r+0x66c>
 8018e6e:	f040 826d 	bne.w	801934c <_dtoa_r+0x98c>
 8018e72:	4b69      	ldr	r3, [pc, #420]	; (8019018 <_dtoa_r+0x658>)
 8018e74:	2200      	movs	r2, #0
 8018e76:	4640      	mov	r0, r8
 8018e78:	4649      	mov	r1, r9
 8018e7a:	f7e7 fbcd 	bl	8000618 <__aeabi_dmul>
 8018e7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018e82:	f7e7 fe4f 	bl	8000b24 <__aeabi_dcmpge>
 8018e86:	9e01      	ldr	r6, [sp, #4]
 8018e88:	4637      	mov	r7, r6
 8018e8a:	2800      	cmp	r0, #0
 8018e8c:	f040 8243 	bne.w	8019316 <_dtoa_r+0x956>
 8018e90:	9d00      	ldr	r5, [sp, #0]
 8018e92:	2331      	movs	r3, #49	; 0x31
 8018e94:	f805 3b01 	strb.w	r3, [r5], #1
 8018e98:	f10a 0a01 	add.w	sl, sl, #1
 8018e9c:	e23f      	b.n	801931e <_dtoa_r+0x95e>
 8018e9e:	07f2      	lsls	r2, r6, #31
 8018ea0:	d505      	bpl.n	8018eae <_dtoa_r+0x4ee>
 8018ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ea6:	f7e7 fbb7 	bl	8000618 <__aeabi_dmul>
 8018eaa:	3501      	adds	r5, #1
 8018eac:	2301      	movs	r3, #1
 8018eae:	1076      	asrs	r6, r6, #1
 8018eb0:	3708      	adds	r7, #8
 8018eb2:	e76c      	b.n	8018d8e <_dtoa_r+0x3ce>
 8018eb4:	2502      	movs	r5, #2
 8018eb6:	e76f      	b.n	8018d98 <_dtoa_r+0x3d8>
 8018eb8:	9b01      	ldr	r3, [sp, #4]
 8018eba:	f8cd a01c 	str.w	sl, [sp, #28]
 8018ebe:	930c      	str	r3, [sp, #48]	; 0x30
 8018ec0:	e78d      	b.n	8018dde <_dtoa_r+0x41e>
 8018ec2:	9900      	ldr	r1, [sp, #0]
 8018ec4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018ec6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018ec8:	4b4e      	ldr	r3, [pc, #312]	; (8019004 <_dtoa_r+0x644>)
 8018eca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ece:	4401      	add	r1, r0
 8018ed0:	9102      	str	r1, [sp, #8]
 8018ed2:	9908      	ldr	r1, [sp, #32]
 8018ed4:	eeb0 8a47 	vmov.f32	s16, s14
 8018ed8:	eef0 8a67 	vmov.f32	s17, s15
 8018edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018ee0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018ee4:	2900      	cmp	r1, #0
 8018ee6:	d045      	beq.n	8018f74 <_dtoa_r+0x5b4>
 8018ee8:	494c      	ldr	r1, [pc, #304]	; (801901c <_dtoa_r+0x65c>)
 8018eea:	2000      	movs	r0, #0
 8018eec:	f7e7 fcbe 	bl	800086c <__aeabi_ddiv>
 8018ef0:	ec53 2b18 	vmov	r2, r3, d8
 8018ef4:	f7e7 f9d8 	bl	80002a8 <__aeabi_dsub>
 8018ef8:	9d00      	ldr	r5, [sp, #0]
 8018efa:	ec41 0b18 	vmov	d8, r0, r1
 8018efe:	4639      	mov	r1, r7
 8018f00:	4630      	mov	r0, r6
 8018f02:	f7e7 fe39 	bl	8000b78 <__aeabi_d2iz>
 8018f06:	900c      	str	r0, [sp, #48]	; 0x30
 8018f08:	f7e7 fb1c 	bl	8000544 <__aeabi_i2d>
 8018f0c:	4602      	mov	r2, r0
 8018f0e:	460b      	mov	r3, r1
 8018f10:	4630      	mov	r0, r6
 8018f12:	4639      	mov	r1, r7
 8018f14:	f7e7 f9c8 	bl	80002a8 <__aeabi_dsub>
 8018f18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018f1a:	3330      	adds	r3, #48	; 0x30
 8018f1c:	f805 3b01 	strb.w	r3, [r5], #1
 8018f20:	ec53 2b18 	vmov	r2, r3, d8
 8018f24:	4606      	mov	r6, r0
 8018f26:	460f      	mov	r7, r1
 8018f28:	f7e7 fde8 	bl	8000afc <__aeabi_dcmplt>
 8018f2c:	2800      	cmp	r0, #0
 8018f2e:	d165      	bne.n	8018ffc <_dtoa_r+0x63c>
 8018f30:	4632      	mov	r2, r6
 8018f32:	463b      	mov	r3, r7
 8018f34:	4935      	ldr	r1, [pc, #212]	; (801900c <_dtoa_r+0x64c>)
 8018f36:	2000      	movs	r0, #0
 8018f38:	f7e7 f9b6 	bl	80002a8 <__aeabi_dsub>
 8018f3c:	ec53 2b18 	vmov	r2, r3, d8
 8018f40:	f7e7 fddc 	bl	8000afc <__aeabi_dcmplt>
 8018f44:	2800      	cmp	r0, #0
 8018f46:	f040 80b9 	bne.w	80190bc <_dtoa_r+0x6fc>
 8018f4a:	9b02      	ldr	r3, [sp, #8]
 8018f4c:	429d      	cmp	r5, r3
 8018f4e:	f43f af75 	beq.w	8018e3c <_dtoa_r+0x47c>
 8018f52:	4b2f      	ldr	r3, [pc, #188]	; (8019010 <_dtoa_r+0x650>)
 8018f54:	ec51 0b18 	vmov	r0, r1, d8
 8018f58:	2200      	movs	r2, #0
 8018f5a:	f7e7 fb5d 	bl	8000618 <__aeabi_dmul>
 8018f5e:	4b2c      	ldr	r3, [pc, #176]	; (8019010 <_dtoa_r+0x650>)
 8018f60:	ec41 0b18 	vmov	d8, r0, r1
 8018f64:	2200      	movs	r2, #0
 8018f66:	4630      	mov	r0, r6
 8018f68:	4639      	mov	r1, r7
 8018f6a:	f7e7 fb55 	bl	8000618 <__aeabi_dmul>
 8018f6e:	4606      	mov	r6, r0
 8018f70:	460f      	mov	r7, r1
 8018f72:	e7c4      	b.n	8018efe <_dtoa_r+0x53e>
 8018f74:	ec51 0b17 	vmov	r0, r1, d7
 8018f78:	f7e7 fb4e 	bl	8000618 <__aeabi_dmul>
 8018f7c:	9b02      	ldr	r3, [sp, #8]
 8018f7e:	9d00      	ldr	r5, [sp, #0]
 8018f80:	930c      	str	r3, [sp, #48]	; 0x30
 8018f82:	ec41 0b18 	vmov	d8, r0, r1
 8018f86:	4639      	mov	r1, r7
 8018f88:	4630      	mov	r0, r6
 8018f8a:	f7e7 fdf5 	bl	8000b78 <__aeabi_d2iz>
 8018f8e:	9011      	str	r0, [sp, #68]	; 0x44
 8018f90:	f7e7 fad8 	bl	8000544 <__aeabi_i2d>
 8018f94:	4602      	mov	r2, r0
 8018f96:	460b      	mov	r3, r1
 8018f98:	4630      	mov	r0, r6
 8018f9a:	4639      	mov	r1, r7
 8018f9c:	f7e7 f984 	bl	80002a8 <__aeabi_dsub>
 8018fa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018fa2:	3330      	adds	r3, #48	; 0x30
 8018fa4:	f805 3b01 	strb.w	r3, [r5], #1
 8018fa8:	9b02      	ldr	r3, [sp, #8]
 8018faa:	429d      	cmp	r5, r3
 8018fac:	4606      	mov	r6, r0
 8018fae:	460f      	mov	r7, r1
 8018fb0:	f04f 0200 	mov.w	r2, #0
 8018fb4:	d134      	bne.n	8019020 <_dtoa_r+0x660>
 8018fb6:	4b19      	ldr	r3, [pc, #100]	; (801901c <_dtoa_r+0x65c>)
 8018fb8:	ec51 0b18 	vmov	r0, r1, d8
 8018fbc:	f7e7 f976 	bl	80002ac <__adddf3>
 8018fc0:	4602      	mov	r2, r0
 8018fc2:	460b      	mov	r3, r1
 8018fc4:	4630      	mov	r0, r6
 8018fc6:	4639      	mov	r1, r7
 8018fc8:	f7e7 fdb6 	bl	8000b38 <__aeabi_dcmpgt>
 8018fcc:	2800      	cmp	r0, #0
 8018fce:	d175      	bne.n	80190bc <_dtoa_r+0x6fc>
 8018fd0:	ec53 2b18 	vmov	r2, r3, d8
 8018fd4:	4911      	ldr	r1, [pc, #68]	; (801901c <_dtoa_r+0x65c>)
 8018fd6:	2000      	movs	r0, #0
 8018fd8:	f7e7 f966 	bl	80002a8 <__aeabi_dsub>
 8018fdc:	4602      	mov	r2, r0
 8018fde:	460b      	mov	r3, r1
 8018fe0:	4630      	mov	r0, r6
 8018fe2:	4639      	mov	r1, r7
 8018fe4:	f7e7 fd8a 	bl	8000afc <__aeabi_dcmplt>
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	f43f af27 	beq.w	8018e3c <_dtoa_r+0x47c>
 8018fee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018ff0:	1e6b      	subs	r3, r5, #1
 8018ff2:	930c      	str	r3, [sp, #48]	; 0x30
 8018ff4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018ff8:	2b30      	cmp	r3, #48	; 0x30
 8018ffa:	d0f8      	beq.n	8018fee <_dtoa_r+0x62e>
 8018ffc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019000:	e04a      	b.n	8019098 <_dtoa_r+0x6d8>
 8019002:	bf00      	nop
 8019004:	08032f80 	.word	0x08032f80
 8019008:	08032f58 	.word	0x08032f58
 801900c:	3ff00000 	.word	0x3ff00000
 8019010:	40240000 	.word	0x40240000
 8019014:	401c0000 	.word	0x401c0000
 8019018:	40140000 	.word	0x40140000
 801901c:	3fe00000 	.word	0x3fe00000
 8019020:	4baf      	ldr	r3, [pc, #700]	; (80192e0 <_dtoa_r+0x920>)
 8019022:	f7e7 faf9 	bl	8000618 <__aeabi_dmul>
 8019026:	4606      	mov	r6, r0
 8019028:	460f      	mov	r7, r1
 801902a:	e7ac      	b.n	8018f86 <_dtoa_r+0x5c6>
 801902c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019030:	9d00      	ldr	r5, [sp, #0]
 8019032:	4642      	mov	r2, r8
 8019034:	464b      	mov	r3, r9
 8019036:	4630      	mov	r0, r6
 8019038:	4639      	mov	r1, r7
 801903a:	f7e7 fc17 	bl	800086c <__aeabi_ddiv>
 801903e:	f7e7 fd9b 	bl	8000b78 <__aeabi_d2iz>
 8019042:	9002      	str	r0, [sp, #8]
 8019044:	f7e7 fa7e 	bl	8000544 <__aeabi_i2d>
 8019048:	4642      	mov	r2, r8
 801904a:	464b      	mov	r3, r9
 801904c:	f7e7 fae4 	bl	8000618 <__aeabi_dmul>
 8019050:	4602      	mov	r2, r0
 8019052:	460b      	mov	r3, r1
 8019054:	4630      	mov	r0, r6
 8019056:	4639      	mov	r1, r7
 8019058:	f7e7 f926 	bl	80002a8 <__aeabi_dsub>
 801905c:	9e02      	ldr	r6, [sp, #8]
 801905e:	9f01      	ldr	r7, [sp, #4]
 8019060:	3630      	adds	r6, #48	; 0x30
 8019062:	f805 6b01 	strb.w	r6, [r5], #1
 8019066:	9e00      	ldr	r6, [sp, #0]
 8019068:	1bae      	subs	r6, r5, r6
 801906a:	42b7      	cmp	r7, r6
 801906c:	4602      	mov	r2, r0
 801906e:	460b      	mov	r3, r1
 8019070:	d137      	bne.n	80190e2 <_dtoa_r+0x722>
 8019072:	f7e7 f91b 	bl	80002ac <__adddf3>
 8019076:	4642      	mov	r2, r8
 8019078:	464b      	mov	r3, r9
 801907a:	4606      	mov	r6, r0
 801907c:	460f      	mov	r7, r1
 801907e:	f7e7 fd5b 	bl	8000b38 <__aeabi_dcmpgt>
 8019082:	b9c8      	cbnz	r0, 80190b8 <_dtoa_r+0x6f8>
 8019084:	4642      	mov	r2, r8
 8019086:	464b      	mov	r3, r9
 8019088:	4630      	mov	r0, r6
 801908a:	4639      	mov	r1, r7
 801908c:	f7e7 fd2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8019090:	b110      	cbz	r0, 8019098 <_dtoa_r+0x6d8>
 8019092:	9b02      	ldr	r3, [sp, #8]
 8019094:	07d9      	lsls	r1, r3, #31
 8019096:	d40f      	bmi.n	80190b8 <_dtoa_r+0x6f8>
 8019098:	4620      	mov	r0, r4
 801909a:	4659      	mov	r1, fp
 801909c:	f001 f880 	bl	801a1a0 <_Bfree>
 80190a0:	2300      	movs	r3, #0
 80190a2:	702b      	strb	r3, [r5, #0]
 80190a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80190a6:	f10a 0001 	add.w	r0, sl, #1
 80190aa:	6018      	str	r0, [r3, #0]
 80190ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	f43f acd8 	beq.w	8018a64 <_dtoa_r+0xa4>
 80190b4:	601d      	str	r5, [r3, #0]
 80190b6:	e4d5      	b.n	8018a64 <_dtoa_r+0xa4>
 80190b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80190bc:	462b      	mov	r3, r5
 80190be:	461d      	mov	r5, r3
 80190c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80190c4:	2a39      	cmp	r2, #57	; 0x39
 80190c6:	d108      	bne.n	80190da <_dtoa_r+0x71a>
 80190c8:	9a00      	ldr	r2, [sp, #0]
 80190ca:	429a      	cmp	r2, r3
 80190cc:	d1f7      	bne.n	80190be <_dtoa_r+0x6fe>
 80190ce:	9a07      	ldr	r2, [sp, #28]
 80190d0:	9900      	ldr	r1, [sp, #0]
 80190d2:	3201      	adds	r2, #1
 80190d4:	9207      	str	r2, [sp, #28]
 80190d6:	2230      	movs	r2, #48	; 0x30
 80190d8:	700a      	strb	r2, [r1, #0]
 80190da:	781a      	ldrb	r2, [r3, #0]
 80190dc:	3201      	adds	r2, #1
 80190de:	701a      	strb	r2, [r3, #0]
 80190e0:	e78c      	b.n	8018ffc <_dtoa_r+0x63c>
 80190e2:	4b7f      	ldr	r3, [pc, #508]	; (80192e0 <_dtoa_r+0x920>)
 80190e4:	2200      	movs	r2, #0
 80190e6:	f7e7 fa97 	bl	8000618 <__aeabi_dmul>
 80190ea:	2200      	movs	r2, #0
 80190ec:	2300      	movs	r3, #0
 80190ee:	4606      	mov	r6, r0
 80190f0:	460f      	mov	r7, r1
 80190f2:	f7e7 fcf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80190f6:	2800      	cmp	r0, #0
 80190f8:	d09b      	beq.n	8019032 <_dtoa_r+0x672>
 80190fa:	e7cd      	b.n	8019098 <_dtoa_r+0x6d8>
 80190fc:	9a08      	ldr	r2, [sp, #32]
 80190fe:	2a00      	cmp	r2, #0
 8019100:	f000 80c4 	beq.w	801928c <_dtoa_r+0x8cc>
 8019104:	9a05      	ldr	r2, [sp, #20]
 8019106:	2a01      	cmp	r2, #1
 8019108:	f300 80a8 	bgt.w	801925c <_dtoa_r+0x89c>
 801910c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801910e:	2a00      	cmp	r2, #0
 8019110:	f000 80a0 	beq.w	8019254 <_dtoa_r+0x894>
 8019114:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019118:	9e06      	ldr	r6, [sp, #24]
 801911a:	4645      	mov	r5, r8
 801911c:	9a04      	ldr	r2, [sp, #16]
 801911e:	2101      	movs	r1, #1
 8019120:	441a      	add	r2, r3
 8019122:	4620      	mov	r0, r4
 8019124:	4498      	add	r8, r3
 8019126:	9204      	str	r2, [sp, #16]
 8019128:	f001 f940 	bl	801a3ac <__i2b>
 801912c:	4607      	mov	r7, r0
 801912e:	2d00      	cmp	r5, #0
 8019130:	dd0b      	ble.n	801914a <_dtoa_r+0x78a>
 8019132:	9b04      	ldr	r3, [sp, #16]
 8019134:	2b00      	cmp	r3, #0
 8019136:	dd08      	ble.n	801914a <_dtoa_r+0x78a>
 8019138:	42ab      	cmp	r3, r5
 801913a:	9a04      	ldr	r2, [sp, #16]
 801913c:	bfa8      	it	ge
 801913e:	462b      	movge	r3, r5
 8019140:	eba8 0803 	sub.w	r8, r8, r3
 8019144:	1aed      	subs	r5, r5, r3
 8019146:	1ad3      	subs	r3, r2, r3
 8019148:	9304      	str	r3, [sp, #16]
 801914a:	9b06      	ldr	r3, [sp, #24]
 801914c:	b1fb      	cbz	r3, 801918e <_dtoa_r+0x7ce>
 801914e:	9b08      	ldr	r3, [sp, #32]
 8019150:	2b00      	cmp	r3, #0
 8019152:	f000 809f 	beq.w	8019294 <_dtoa_r+0x8d4>
 8019156:	2e00      	cmp	r6, #0
 8019158:	dd11      	ble.n	801917e <_dtoa_r+0x7be>
 801915a:	4639      	mov	r1, r7
 801915c:	4632      	mov	r2, r6
 801915e:	4620      	mov	r0, r4
 8019160:	f001 f9e0 	bl	801a524 <__pow5mult>
 8019164:	465a      	mov	r2, fp
 8019166:	4601      	mov	r1, r0
 8019168:	4607      	mov	r7, r0
 801916a:	4620      	mov	r0, r4
 801916c:	f001 f934 	bl	801a3d8 <__multiply>
 8019170:	4659      	mov	r1, fp
 8019172:	9007      	str	r0, [sp, #28]
 8019174:	4620      	mov	r0, r4
 8019176:	f001 f813 	bl	801a1a0 <_Bfree>
 801917a:	9b07      	ldr	r3, [sp, #28]
 801917c:	469b      	mov	fp, r3
 801917e:	9b06      	ldr	r3, [sp, #24]
 8019180:	1b9a      	subs	r2, r3, r6
 8019182:	d004      	beq.n	801918e <_dtoa_r+0x7ce>
 8019184:	4659      	mov	r1, fp
 8019186:	4620      	mov	r0, r4
 8019188:	f001 f9cc 	bl	801a524 <__pow5mult>
 801918c:	4683      	mov	fp, r0
 801918e:	2101      	movs	r1, #1
 8019190:	4620      	mov	r0, r4
 8019192:	f001 f90b 	bl	801a3ac <__i2b>
 8019196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019198:	2b00      	cmp	r3, #0
 801919a:	4606      	mov	r6, r0
 801919c:	dd7c      	ble.n	8019298 <_dtoa_r+0x8d8>
 801919e:	461a      	mov	r2, r3
 80191a0:	4601      	mov	r1, r0
 80191a2:	4620      	mov	r0, r4
 80191a4:	f001 f9be 	bl	801a524 <__pow5mult>
 80191a8:	9b05      	ldr	r3, [sp, #20]
 80191aa:	2b01      	cmp	r3, #1
 80191ac:	4606      	mov	r6, r0
 80191ae:	dd76      	ble.n	801929e <_dtoa_r+0x8de>
 80191b0:	2300      	movs	r3, #0
 80191b2:	9306      	str	r3, [sp, #24]
 80191b4:	6933      	ldr	r3, [r6, #16]
 80191b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80191ba:	6918      	ldr	r0, [r3, #16]
 80191bc:	f001 f8a6 	bl	801a30c <__hi0bits>
 80191c0:	f1c0 0020 	rsb	r0, r0, #32
 80191c4:	9b04      	ldr	r3, [sp, #16]
 80191c6:	4418      	add	r0, r3
 80191c8:	f010 001f 	ands.w	r0, r0, #31
 80191cc:	f000 8086 	beq.w	80192dc <_dtoa_r+0x91c>
 80191d0:	f1c0 0320 	rsb	r3, r0, #32
 80191d4:	2b04      	cmp	r3, #4
 80191d6:	dd7f      	ble.n	80192d8 <_dtoa_r+0x918>
 80191d8:	f1c0 001c 	rsb	r0, r0, #28
 80191dc:	9b04      	ldr	r3, [sp, #16]
 80191de:	4403      	add	r3, r0
 80191e0:	4480      	add	r8, r0
 80191e2:	4405      	add	r5, r0
 80191e4:	9304      	str	r3, [sp, #16]
 80191e6:	f1b8 0f00 	cmp.w	r8, #0
 80191ea:	dd05      	ble.n	80191f8 <_dtoa_r+0x838>
 80191ec:	4659      	mov	r1, fp
 80191ee:	4642      	mov	r2, r8
 80191f0:	4620      	mov	r0, r4
 80191f2:	f001 f9f1 	bl	801a5d8 <__lshift>
 80191f6:	4683      	mov	fp, r0
 80191f8:	9b04      	ldr	r3, [sp, #16]
 80191fa:	2b00      	cmp	r3, #0
 80191fc:	dd05      	ble.n	801920a <_dtoa_r+0x84a>
 80191fe:	4631      	mov	r1, r6
 8019200:	461a      	mov	r2, r3
 8019202:	4620      	mov	r0, r4
 8019204:	f001 f9e8 	bl	801a5d8 <__lshift>
 8019208:	4606      	mov	r6, r0
 801920a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801920c:	2b00      	cmp	r3, #0
 801920e:	d069      	beq.n	80192e4 <_dtoa_r+0x924>
 8019210:	4631      	mov	r1, r6
 8019212:	4658      	mov	r0, fp
 8019214:	f001 fa4c 	bl	801a6b0 <__mcmp>
 8019218:	2800      	cmp	r0, #0
 801921a:	da63      	bge.n	80192e4 <_dtoa_r+0x924>
 801921c:	2300      	movs	r3, #0
 801921e:	4659      	mov	r1, fp
 8019220:	220a      	movs	r2, #10
 8019222:	4620      	mov	r0, r4
 8019224:	f000 ffde 	bl	801a1e4 <__multadd>
 8019228:	9b08      	ldr	r3, [sp, #32]
 801922a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801922e:	4683      	mov	fp, r0
 8019230:	2b00      	cmp	r3, #0
 8019232:	f000 818f 	beq.w	8019554 <_dtoa_r+0xb94>
 8019236:	4639      	mov	r1, r7
 8019238:	2300      	movs	r3, #0
 801923a:	220a      	movs	r2, #10
 801923c:	4620      	mov	r0, r4
 801923e:	f000 ffd1 	bl	801a1e4 <__multadd>
 8019242:	f1b9 0f00 	cmp.w	r9, #0
 8019246:	4607      	mov	r7, r0
 8019248:	f300 808e 	bgt.w	8019368 <_dtoa_r+0x9a8>
 801924c:	9b05      	ldr	r3, [sp, #20]
 801924e:	2b02      	cmp	r3, #2
 8019250:	dc50      	bgt.n	80192f4 <_dtoa_r+0x934>
 8019252:	e089      	b.n	8019368 <_dtoa_r+0x9a8>
 8019254:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019256:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801925a:	e75d      	b.n	8019118 <_dtoa_r+0x758>
 801925c:	9b01      	ldr	r3, [sp, #4]
 801925e:	1e5e      	subs	r6, r3, #1
 8019260:	9b06      	ldr	r3, [sp, #24]
 8019262:	42b3      	cmp	r3, r6
 8019264:	bfbf      	itttt	lt
 8019266:	9b06      	ldrlt	r3, [sp, #24]
 8019268:	9606      	strlt	r6, [sp, #24]
 801926a:	1af2      	sublt	r2, r6, r3
 801926c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801926e:	bfb6      	itet	lt
 8019270:	189b      	addlt	r3, r3, r2
 8019272:	1b9e      	subge	r6, r3, r6
 8019274:	930d      	strlt	r3, [sp, #52]	; 0x34
 8019276:	9b01      	ldr	r3, [sp, #4]
 8019278:	bfb8      	it	lt
 801927a:	2600      	movlt	r6, #0
 801927c:	2b00      	cmp	r3, #0
 801927e:	bfb5      	itete	lt
 8019280:	eba8 0503 	sublt.w	r5, r8, r3
 8019284:	9b01      	ldrge	r3, [sp, #4]
 8019286:	2300      	movlt	r3, #0
 8019288:	4645      	movge	r5, r8
 801928a:	e747      	b.n	801911c <_dtoa_r+0x75c>
 801928c:	9e06      	ldr	r6, [sp, #24]
 801928e:	9f08      	ldr	r7, [sp, #32]
 8019290:	4645      	mov	r5, r8
 8019292:	e74c      	b.n	801912e <_dtoa_r+0x76e>
 8019294:	9a06      	ldr	r2, [sp, #24]
 8019296:	e775      	b.n	8019184 <_dtoa_r+0x7c4>
 8019298:	9b05      	ldr	r3, [sp, #20]
 801929a:	2b01      	cmp	r3, #1
 801929c:	dc18      	bgt.n	80192d0 <_dtoa_r+0x910>
 801929e:	9b02      	ldr	r3, [sp, #8]
 80192a0:	b9b3      	cbnz	r3, 80192d0 <_dtoa_r+0x910>
 80192a2:	9b03      	ldr	r3, [sp, #12]
 80192a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80192a8:	b9a3      	cbnz	r3, 80192d4 <_dtoa_r+0x914>
 80192aa:	9b03      	ldr	r3, [sp, #12]
 80192ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80192b0:	0d1b      	lsrs	r3, r3, #20
 80192b2:	051b      	lsls	r3, r3, #20
 80192b4:	b12b      	cbz	r3, 80192c2 <_dtoa_r+0x902>
 80192b6:	9b04      	ldr	r3, [sp, #16]
 80192b8:	3301      	adds	r3, #1
 80192ba:	9304      	str	r3, [sp, #16]
 80192bc:	f108 0801 	add.w	r8, r8, #1
 80192c0:	2301      	movs	r3, #1
 80192c2:	9306      	str	r3, [sp, #24]
 80192c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	f47f af74 	bne.w	80191b4 <_dtoa_r+0x7f4>
 80192cc:	2001      	movs	r0, #1
 80192ce:	e779      	b.n	80191c4 <_dtoa_r+0x804>
 80192d0:	2300      	movs	r3, #0
 80192d2:	e7f6      	b.n	80192c2 <_dtoa_r+0x902>
 80192d4:	9b02      	ldr	r3, [sp, #8]
 80192d6:	e7f4      	b.n	80192c2 <_dtoa_r+0x902>
 80192d8:	d085      	beq.n	80191e6 <_dtoa_r+0x826>
 80192da:	4618      	mov	r0, r3
 80192dc:	301c      	adds	r0, #28
 80192de:	e77d      	b.n	80191dc <_dtoa_r+0x81c>
 80192e0:	40240000 	.word	0x40240000
 80192e4:	9b01      	ldr	r3, [sp, #4]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	dc38      	bgt.n	801935c <_dtoa_r+0x99c>
 80192ea:	9b05      	ldr	r3, [sp, #20]
 80192ec:	2b02      	cmp	r3, #2
 80192ee:	dd35      	ble.n	801935c <_dtoa_r+0x99c>
 80192f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80192f4:	f1b9 0f00 	cmp.w	r9, #0
 80192f8:	d10d      	bne.n	8019316 <_dtoa_r+0x956>
 80192fa:	4631      	mov	r1, r6
 80192fc:	464b      	mov	r3, r9
 80192fe:	2205      	movs	r2, #5
 8019300:	4620      	mov	r0, r4
 8019302:	f000 ff6f 	bl	801a1e4 <__multadd>
 8019306:	4601      	mov	r1, r0
 8019308:	4606      	mov	r6, r0
 801930a:	4658      	mov	r0, fp
 801930c:	f001 f9d0 	bl	801a6b0 <__mcmp>
 8019310:	2800      	cmp	r0, #0
 8019312:	f73f adbd 	bgt.w	8018e90 <_dtoa_r+0x4d0>
 8019316:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019318:	9d00      	ldr	r5, [sp, #0]
 801931a:	ea6f 0a03 	mvn.w	sl, r3
 801931e:	f04f 0800 	mov.w	r8, #0
 8019322:	4631      	mov	r1, r6
 8019324:	4620      	mov	r0, r4
 8019326:	f000 ff3b 	bl	801a1a0 <_Bfree>
 801932a:	2f00      	cmp	r7, #0
 801932c:	f43f aeb4 	beq.w	8019098 <_dtoa_r+0x6d8>
 8019330:	f1b8 0f00 	cmp.w	r8, #0
 8019334:	d005      	beq.n	8019342 <_dtoa_r+0x982>
 8019336:	45b8      	cmp	r8, r7
 8019338:	d003      	beq.n	8019342 <_dtoa_r+0x982>
 801933a:	4641      	mov	r1, r8
 801933c:	4620      	mov	r0, r4
 801933e:	f000 ff2f 	bl	801a1a0 <_Bfree>
 8019342:	4639      	mov	r1, r7
 8019344:	4620      	mov	r0, r4
 8019346:	f000 ff2b 	bl	801a1a0 <_Bfree>
 801934a:	e6a5      	b.n	8019098 <_dtoa_r+0x6d8>
 801934c:	2600      	movs	r6, #0
 801934e:	4637      	mov	r7, r6
 8019350:	e7e1      	b.n	8019316 <_dtoa_r+0x956>
 8019352:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019354:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019358:	4637      	mov	r7, r6
 801935a:	e599      	b.n	8018e90 <_dtoa_r+0x4d0>
 801935c:	9b08      	ldr	r3, [sp, #32]
 801935e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019362:	2b00      	cmp	r3, #0
 8019364:	f000 80fd 	beq.w	8019562 <_dtoa_r+0xba2>
 8019368:	2d00      	cmp	r5, #0
 801936a:	dd05      	ble.n	8019378 <_dtoa_r+0x9b8>
 801936c:	4639      	mov	r1, r7
 801936e:	462a      	mov	r2, r5
 8019370:	4620      	mov	r0, r4
 8019372:	f001 f931 	bl	801a5d8 <__lshift>
 8019376:	4607      	mov	r7, r0
 8019378:	9b06      	ldr	r3, [sp, #24]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d05c      	beq.n	8019438 <_dtoa_r+0xa78>
 801937e:	6879      	ldr	r1, [r7, #4]
 8019380:	4620      	mov	r0, r4
 8019382:	f000 fecd 	bl	801a120 <_Balloc>
 8019386:	4605      	mov	r5, r0
 8019388:	b928      	cbnz	r0, 8019396 <_dtoa_r+0x9d6>
 801938a:	4b80      	ldr	r3, [pc, #512]	; (801958c <_dtoa_r+0xbcc>)
 801938c:	4602      	mov	r2, r0
 801938e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019392:	f7ff bb2e 	b.w	80189f2 <_dtoa_r+0x32>
 8019396:	693a      	ldr	r2, [r7, #16]
 8019398:	3202      	adds	r2, #2
 801939a:	0092      	lsls	r2, r2, #2
 801939c:	f107 010c 	add.w	r1, r7, #12
 80193a0:	300c      	adds	r0, #12
 80193a2:	f7fd fc63 	bl	8016c6c <memcpy>
 80193a6:	2201      	movs	r2, #1
 80193a8:	4629      	mov	r1, r5
 80193aa:	4620      	mov	r0, r4
 80193ac:	f001 f914 	bl	801a5d8 <__lshift>
 80193b0:	9b00      	ldr	r3, [sp, #0]
 80193b2:	3301      	adds	r3, #1
 80193b4:	9301      	str	r3, [sp, #4]
 80193b6:	9b00      	ldr	r3, [sp, #0]
 80193b8:	444b      	add	r3, r9
 80193ba:	9307      	str	r3, [sp, #28]
 80193bc:	9b02      	ldr	r3, [sp, #8]
 80193be:	f003 0301 	and.w	r3, r3, #1
 80193c2:	46b8      	mov	r8, r7
 80193c4:	9306      	str	r3, [sp, #24]
 80193c6:	4607      	mov	r7, r0
 80193c8:	9b01      	ldr	r3, [sp, #4]
 80193ca:	4631      	mov	r1, r6
 80193cc:	3b01      	subs	r3, #1
 80193ce:	4658      	mov	r0, fp
 80193d0:	9302      	str	r3, [sp, #8]
 80193d2:	f7ff fa67 	bl	80188a4 <quorem>
 80193d6:	4603      	mov	r3, r0
 80193d8:	3330      	adds	r3, #48	; 0x30
 80193da:	9004      	str	r0, [sp, #16]
 80193dc:	4641      	mov	r1, r8
 80193de:	4658      	mov	r0, fp
 80193e0:	9308      	str	r3, [sp, #32]
 80193e2:	f001 f965 	bl	801a6b0 <__mcmp>
 80193e6:	463a      	mov	r2, r7
 80193e8:	4681      	mov	r9, r0
 80193ea:	4631      	mov	r1, r6
 80193ec:	4620      	mov	r0, r4
 80193ee:	f001 f97b 	bl	801a6e8 <__mdiff>
 80193f2:	68c2      	ldr	r2, [r0, #12]
 80193f4:	9b08      	ldr	r3, [sp, #32]
 80193f6:	4605      	mov	r5, r0
 80193f8:	bb02      	cbnz	r2, 801943c <_dtoa_r+0xa7c>
 80193fa:	4601      	mov	r1, r0
 80193fc:	4658      	mov	r0, fp
 80193fe:	f001 f957 	bl	801a6b0 <__mcmp>
 8019402:	9b08      	ldr	r3, [sp, #32]
 8019404:	4602      	mov	r2, r0
 8019406:	4629      	mov	r1, r5
 8019408:	4620      	mov	r0, r4
 801940a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801940e:	f000 fec7 	bl	801a1a0 <_Bfree>
 8019412:	9b05      	ldr	r3, [sp, #20]
 8019414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019416:	9d01      	ldr	r5, [sp, #4]
 8019418:	ea43 0102 	orr.w	r1, r3, r2
 801941c:	9b06      	ldr	r3, [sp, #24]
 801941e:	430b      	orrs	r3, r1
 8019420:	9b08      	ldr	r3, [sp, #32]
 8019422:	d10d      	bne.n	8019440 <_dtoa_r+0xa80>
 8019424:	2b39      	cmp	r3, #57	; 0x39
 8019426:	d029      	beq.n	801947c <_dtoa_r+0xabc>
 8019428:	f1b9 0f00 	cmp.w	r9, #0
 801942c:	dd01      	ble.n	8019432 <_dtoa_r+0xa72>
 801942e:	9b04      	ldr	r3, [sp, #16]
 8019430:	3331      	adds	r3, #49	; 0x31
 8019432:	9a02      	ldr	r2, [sp, #8]
 8019434:	7013      	strb	r3, [r2, #0]
 8019436:	e774      	b.n	8019322 <_dtoa_r+0x962>
 8019438:	4638      	mov	r0, r7
 801943a:	e7b9      	b.n	80193b0 <_dtoa_r+0x9f0>
 801943c:	2201      	movs	r2, #1
 801943e:	e7e2      	b.n	8019406 <_dtoa_r+0xa46>
 8019440:	f1b9 0f00 	cmp.w	r9, #0
 8019444:	db06      	blt.n	8019454 <_dtoa_r+0xa94>
 8019446:	9905      	ldr	r1, [sp, #20]
 8019448:	ea41 0909 	orr.w	r9, r1, r9
 801944c:	9906      	ldr	r1, [sp, #24]
 801944e:	ea59 0101 	orrs.w	r1, r9, r1
 8019452:	d120      	bne.n	8019496 <_dtoa_r+0xad6>
 8019454:	2a00      	cmp	r2, #0
 8019456:	ddec      	ble.n	8019432 <_dtoa_r+0xa72>
 8019458:	4659      	mov	r1, fp
 801945a:	2201      	movs	r2, #1
 801945c:	4620      	mov	r0, r4
 801945e:	9301      	str	r3, [sp, #4]
 8019460:	f001 f8ba 	bl	801a5d8 <__lshift>
 8019464:	4631      	mov	r1, r6
 8019466:	4683      	mov	fp, r0
 8019468:	f001 f922 	bl	801a6b0 <__mcmp>
 801946c:	2800      	cmp	r0, #0
 801946e:	9b01      	ldr	r3, [sp, #4]
 8019470:	dc02      	bgt.n	8019478 <_dtoa_r+0xab8>
 8019472:	d1de      	bne.n	8019432 <_dtoa_r+0xa72>
 8019474:	07da      	lsls	r2, r3, #31
 8019476:	d5dc      	bpl.n	8019432 <_dtoa_r+0xa72>
 8019478:	2b39      	cmp	r3, #57	; 0x39
 801947a:	d1d8      	bne.n	801942e <_dtoa_r+0xa6e>
 801947c:	9a02      	ldr	r2, [sp, #8]
 801947e:	2339      	movs	r3, #57	; 0x39
 8019480:	7013      	strb	r3, [r2, #0]
 8019482:	462b      	mov	r3, r5
 8019484:	461d      	mov	r5, r3
 8019486:	3b01      	subs	r3, #1
 8019488:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801948c:	2a39      	cmp	r2, #57	; 0x39
 801948e:	d050      	beq.n	8019532 <_dtoa_r+0xb72>
 8019490:	3201      	adds	r2, #1
 8019492:	701a      	strb	r2, [r3, #0]
 8019494:	e745      	b.n	8019322 <_dtoa_r+0x962>
 8019496:	2a00      	cmp	r2, #0
 8019498:	dd03      	ble.n	80194a2 <_dtoa_r+0xae2>
 801949a:	2b39      	cmp	r3, #57	; 0x39
 801949c:	d0ee      	beq.n	801947c <_dtoa_r+0xabc>
 801949e:	3301      	adds	r3, #1
 80194a0:	e7c7      	b.n	8019432 <_dtoa_r+0xa72>
 80194a2:	9a01      	ldr	r2, [sp, #4]
 80194a4:	9907      	ldr	r1, [sp, #28]
 80194a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80194aa:	428a      	cmp	r2, r1
 80194ac:	d02a      	beq.n	8019504 <_dtoa_r+0xb44>
 80194ae:	4659      	mov	r1, fp
 80194b0:	2300      	movs	r3, #0
 80194b2:	220a      	movs	r2, #10
 80194b4:	4620      	mov	r0, r4
 80194b6:	f000 fe95 	bl	801a1e4 <__multadd>
 80194ba:	45b8      	cmp	r8, r7
 80194bc:	4683      	mov	fp, r0
 80194be:	f04f 0300 	mov.w	r3, #0
 80194c2:	f04f 020a 	mov.w	r2, #10
 80194c6:	4641      	mov	r1, r8
 80194c8:	4620      	mov	r0, r4
 80194ca:	d107      	bne.n	80194dc <_dtoa_r+0xb1c>
 80194cc:	f000 fe8a 	bl	801a1e4 <__multadd>
 80194d0:	4680      	mov	r8, r0
 80194d2:	4607      	mov	r7, r0
 80194d4:	9b01      	ldr	r3, [sp, #4]
 80194d6:	3301      	adds	r3, #1
 80194d8:	9301      	str	r3, [sp, #4]
 80194da:	e775      	b.n	80193c8 <_dtoa_r+0xa08>
 80194dc:	f000 fe82 	bl	801a1e4 <__multadd>
 80194e0:	4639      	mov	r1, r7
 80194e2:	4680      	mov	r8, r0
 80194e4:	2300      	movs	r3, #0
 80194e6:	220a      	movs	r2, #10
 80194e8:	4620      	mov	r0, r4
 80194ea:	f000 fe7b 	bl	801a1e4 <__multadd>
 80194ee:	4607      	mov	r7, r0
 80194f0:	e7f0      	b.n	80194d4 <_dtoa_r+0xb14>
 80194f2:	f1b9 0f00 	cmp.w	r9, #0
 80194f6:	9a00      	ldr	r2, [sp, #0]
 80194f8:	bfcc      	ite	gt
 80194fa:	464d      	movgt	r5, r9
 80194fc:	2501      	movle	r5, #1
 80194fe:	4415      	add	r5, r2
 8019500:	f04f 0800 	mov.w	r8, #0
 8019504:	4659      	mov	r1, fp
 8019506:	2201      	movs	r2, #1
 8019508:	4620      	mov	r0, r4
 801950a:	9301      	str	r3, [sp, #4]
 801950c:	f001 f864 	bl	801a5d8 <__lshift>
 8019510:	4631      	mov	r1, r6
 8019512:	4683      	mov	fp, r0
 8019514:	f001 f8cc 	bl	801a6b0 <__mcmp>
 8019518:	2800      	cmp	r0, #0
 801951a:	dcb2      	bgt.n	8019482 <_dtoa_r+0xac2>
 801951c:	d102      	bne.n	8019524 <_dtoa_r+0xb64>
 801951e:	9b01      	ldr	r3, [sp, #4]
 8019520:	07db      	lsls	r3, r3, #31
 8019522:	d4ae      	bmi.n	8019482 <_dtoa_r+0xac2>
 8019524:	462b      	mov	r3, r5
 8019526:	461d      	mov	r5, r3
 8019528:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801952c:	2a30      	cmp	r2, #48	; 0x30
 801952e:	d0fa      	beq.n	8019526 <_dtoa_r+0xb66>
 8019530:	e6f7      	b.n	8019322 <_dtoa_r+0x962>
 8019532:	9a00      	ldr	r2, [sp, #0]
 8019534:	429a      	cmp	r2, r3
 8019536:	d1a5      	bne.n	8019484 <_dtoa_r+0xac4>
 8019538:	f10a 0a01 	add.w	sl, sl, #1
 801953c:	2331      	movs	r3, #49	; 0x31
 801953e:	e779      	b.n	8019434 <_dtoa_r+0xa74>
 8019540:	4b13      	ldr	r3, [pc, #76]	; (8019590 <_dtoa_r+0xbd0>)
 8019542:	f7ff baaf 	b.w	8018aa4 <_dtoa_r+0xe4>
 8019546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019548:	2b00      	cmp	r3, #0
 801954a:	f47f aa86 	bne.w	8018a5a <_dtoa_r+0x9a>
 801954e:	4b11      	ldr	r3, [pc, #68]	; (8019594 <_dtoa_r+0xbd4>)
 8019550:	f7ff baa8 	b.w	8018aa4 <_dtoa_r+0xe4>
 8019554:	f1b9 0f00 	cmp.w	r9, #0
 8019558:	dc03      	bgt.n	8019562 <_dtoa_r+0xba2>
 801955a:	9b05      	ldr	r3, [sp, #20]
 801955c:	2b02      	cmp	r3, #2
 801955e:	f73f aec9 	bgt.w	80192f4 <_dtoa_r+0x934>
 8019562:	9d00      	ldr	r5, [sp, #0]
 8019564:	4631      	mov	r1, r6
 8019566:	4658      	mov	r0, fp
 8019568:	f7ff f99c 	bl	80188a4 <quorem>
 801956c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019570:	f805 3b01 	strb.w	r3, [r5], #1
 8019574:	9a00      	ldr	r2, [sp, #0]
 8019576:	1aaa      	subs	r2, r5, r2
 8019578:	4591      	cmp	r9, r2
 801957a:	ddba      	ble.n	80194f2 <_dtoa_r+0xb32>
 801957c:	4659      	mov	r1, fp
 801957e:	2300      	movs	r3, #0
 8019580:	220a      	movs	r2, #10
 8019582:	4620      	mov	r0, r4
 8019584:	f000 fe2e 	bl	801a1e4 <__multadd>
 8019588:	4683      	mov	fp, r0
 801958a:	e7eb      	b.n	8019564 <_dtoa_r+0xba4>
 801958c:	08032e01 	.word	0x08032e01
 8019590:	08032c08 	.word	0x08032c08
 8019594:	08032d95 	.word	0x08032d95

08019598 <__errno>:
 8019598:	4b01      	ldr	r3, [pc, #4]	; (80195a0 <__errno+0x8>)
 801959a:	6818      	ldr	r0, [r3, #0]
 801959c:	4770      	bx	lr
 801959e:	bf00      	nop
 80195a0:	200005c8 	.word	0x200005c8

080195a4 <__sflush_r>:
 80195a4:	898a      	ldrh	r2, [r1, #12]
 80195a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195aa:	4605      	mov	r5, r0
 80195ac:	0710      	lsls	r0, r2, #28
 80195ae:	460c      	mov	r4, r1
 80195b0:	d458      	bmi.n	8019664 <__sflush_r+0xc0>
 80195b2:	684b      	ldr	r3, [r1, #4]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	dc05      	bgt.n	80195c4 <__sflush_r+0x20>
 80195b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	dc02      	bgt.n	80195c4 <__sflush_r+0x20>
 80195be:	2000      	movs	r0, #0
 80195c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80195c6:	2e00      	cmp	r6, #0
 80195c8:	d0f9      	beq.n	80195be <__sflush_r+0x1a>
 80195ca:	2300      	movs	r3, #0
 80195cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80195d0:	682f      	ldr	r7, [r5, #0]
 80195d2:	602b      	str	r3, [r5, #0]
 80195d4:	d032      	beq.n	801963c <__sflush_r+0x98>
 80195d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80195d8:	89a3      	ldrh	r3, [r4, #12]
 80195da:	075a      	lsls	r2, r3, #29
 80195dc:	d505      	bpl.n	80195ea <__sflush_r+0x46>
 80195de:	6863      	ldr	r3, [r4, #4]
 80195e0:	1ac0      	subs	r0, r0, r3
 80195e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80195e4:	b10b      	cbz	r3, 80195ea <__sflush_r+0x46>
 80195e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80195e8:	1ac0      	subs	r0, r0, r3
 80195ea:	2300      	movs	r3, #0
 80195ec:	4602      	mov	r2, r0
 80195ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80195f0:	6a21      	ldr	r1, [r4, #32]
 80195f2:	4628      	mov	r0, r5
 80195f4:	47b0      	blx	r6
 80195f6:	1c43      	adds	r3, r0, #1
 80195f8:	89a3      	ldrh	r3, [r4, #12]
 80195fa:	d106      	bne.n	801960a <__sflush_r+0x66>
 80195fc:	6829      	ldr	r1, [r5, #0]
 80195fe:	291d      	cmp	r1, #29
 8019600:	d82c      	bhi.n	801965c <__sflush_r+0xb8>
 8019602:	4a2a      	ldr	r2, [pc, #168]	; (80196ac <__sflush_r+0x108>)
 8019604:	40ca      	lsrs	r2, r1
 8019606:	07d6      	lsls	r6, r2, #31
 8019608:	d528      	bpl.n	801965c <__sflush_r+0xb8>
 801960a:	2200      	movs	r2, #0
 801960c:	6062      	str	r2, [r4, #4]
 801960e:	04d9      	lsls	r1, r3, #19
 8019610:	6922      	ldr	r2, [r4, #16]
 8019612:	6022      	str	r2, [r4, #0]
 8019614:	d504      	bpl.n	8019620 <__sflush_r+0x7c>
 8019616:	1c42      	adds	r2, r0, #1
 8019618:	d101      	bne.n	801961e <__sflush_r+0x7a>
 801961a:	682b      	ldr	r3, [r5, #0]
 801961c:	b903      	cbnz	r3, 8019620 <__sflush_r+0x7c>
 801961e:	6560      	str	r0, [r4, #84]	; 0x54
 8019620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019622:	602f      	str	r7, [r5, #0]
 8019624:	2900      	cmp	r1, #0
 8019626:	d0ca      	beq.n	80195be <__sflush_r+0x1a>
 8019628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801962c:	4299      	cmp	r1, r3
 801962e:	d002      	beq.n	8019636 <__sflush_r+0x92>
 8019630:	4628      	mov	r0, r5
 8019632:	f001 fa3f 	bl	801aab4 <_free_r>
 8019636:	2000      	movs	r0, #0
 8019638:	6360      	str	r0, [r4, #52]	; 0x34
 801963a:	e7c1      	b.n	80195c0 <__sflush_r+0x1c>
 801963c:	6a21      	ldr	r1, [r4, #32]
 801963e:	2301      	movs	r3, #1
 8019640:	4628      	mov	r0, r5
 8019642:	47b0      	blx	r6
 8019644:	1c41      	adds	r1, r0, #1
 8019646:	d1c7      	bne.n	80195d8 <__sflush_r+0x34>
 8019648:	682b      	ldr	r3, [r5, #0]
 801964a:	2b00      	cmp	r3, #0
 801964c:	d0c4      	beq.n	80195d8 <__sflush_r+0x34>
 801964e:	2b1d      	cmp	r3, #29
 8019650:	d001      	beq.n	8019656 <__sflush_r+0xb2>
 8019652:	2b16      	cmp	r3, #22
 8019654:	d101      	bne.n	801965a <__sflush_r+0xb6>
 8019656:	602f      	str	r7, [r5, #0]
 8019658:	e7b1      	b.n	80195be <__sflush_r+0x1a>
 801965a:	89a3      	ldrh	r3, [r4, #12]
 801965c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019660:	81a3      	strh	r3, [r4, #12]
 8019662:	e7ad      	b.n	80195c0 <__sflush_r+0x1c>
 8019664:	690f      	ldr	r7, [r1, #16]
 8019666:	2f00      	cmp	r7, #0
 8019668:	d0a9      	beq.n	80195be <__sflush_r+0x1a>
 801966a:	0793      	lsls	r3, r2, #30
 801966c:	680e      	ldr	r6, [r1, #0]
 801966e:	bf08      	it	eq
 8019670:	694b      	ldreq	r3, [r1, #20]
 8019672:	600f      	str	r7, [r1, #0]
 8019674:	bf18      	it	ne
 8019676:	2300      	movne	r3, #0
 8019678:	eba6 0807 	sub.w	r8, r6, r7
 801967c:	608b      	str	r3, [r1, #8]
 801967e:	f1b8 0f00 	cmp.w	r8, #0
 8019682:	dd9c      	ble.n	80195be <__sflush_r+0x1a>
 8019684:	6a21      	ldr	r1, [r4, #32]
 8019686:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019688:	4643      	mov	r3, r8
 801968a:	463a      	mov	r2, r7
 801968c:	4628      	mov	r0, r5
 801968e:	47b0      	blx	r6
 8019690:	2800      	cmp	r0, #0
 8019692:	dc06      	bgt.n	80196a2 <__sflush_r+0xfe>
 8019694:	89a3      	ldrh	r3, [r4, #12]
 8019696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801969a:	81a3      	strh	r3, [r4, #12]
 801969c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80196a0:	e78e      	b.n	80195c0 <__sflush_r+0x1c>
 80196a2:	4407      	add	r7, r0
 80196a4:	eba8 0800 	sub.w	r8, r8, r0
 80196a8:	e7e9      	b.n	801967e <__sflush_r+0xda>
 80196aa:	bf00      	nop
 80196ac:	20400001 	.word	0x20400001

080196b0 <_fflush_r>:
 80196b0:	b538      	push	{r3, r4, r5, lr}
 80196b2:	690b      	ldr	r3, [r1, #16]
 80196b4:	4605      	mov	r5, r0
 80196b6:	460c      	mov	r4, r1
 80196b8:	b913      	cbnz	r3, 80196c0 <_fflush_r+0x10>
 80196ba:	2500      	movs	r5, #0
 80196bc:	4628      	mov	r0, r5
 80196be:	bd38      	pop	{r3, r4, r5, pc}
 80196c0:	b118      	cbz	r0, 80196ca <_fflush_r+0x1a>
 80196c2:	6983      	ldr	r3, [r0, #24]
 80196c4:	b90b      	cbnz	r3, 80196ca <_fflush_r+0x1a>
 80196c6:	f000 f887 	bl	80197d8 <__sinit>
 80196ca:	4b14      	ldr	r3, [pc, #80]	; (801971c <_fflush_r+0x6c>)
 80196cc:	429c      	cmp	r4, r3
 80196ce:	d11b      	bne.n	8019708 <_fflush_r+0x58>
 80196d0:	686c      	ldr	r4, [r5, #4]
 80196d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d0ef      	beq.n	80196ba <_fflush_r+0xa>
 80196da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80196dc:	07d0      	lsls	r0, r2, #31
 80196de:	d404      	bmi.n	80196ea <_fflush_r+0x3a>
 80196e0:	0599      	lsls	r1, r3, #22
 80196e2:	d402      	bmi.n	80196ea <_fflush_r+0x3a>
 80196e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80196e6:	f000 fc9a 	bl	801a01e <__retarget_lock_acquire_recursive>
 80196ea:	4628      	mov	r0, r5
 80196ec:	4621      	mov	r1, r4
 80196ee:	f7ff ff59 	bl	80195a4 <__sflush_r>
 80196f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80196f4:	07da      	lsls	r2, r3, #31
 80196f6:	4605      	mov	r5, r0
 80196f8:	d4e0      	bmi.n	80196bc <_fflush_r+0xc>
 80196fa:	89a3      	ldrh	r3, [r4, #12]
 80196fc:	059b      	lsls	r3, r3, #22
 80196fe:	d4dd      	bmi.n	80196bc <_fflush_r+0xc>
 8019700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019702:	f000 fc8d 	bl	801a020 <__retarget_lock_release_recursive>
 8019706:	e7d9      	b.n	80196bc <_fflush_r+0xc>
 8019708:	4b05      	ldr	r3, [pc, #20]	; (8019720 <_fflush_r+0x70>)
 801970a:	429c      	cmp	r4, r3
 801970c:	d101      	bne.n	8019712 <_fflush_r+0x62>
 801970e:	68ac      	ldr	r4, [r5, #8]
 8019710:	e7df      	b.n	80196d2 <_fflush_r+0x22>
 8019712:	4b04      	ldr	r3, [pc, #16]	; (8019724 <_fflush_r+0x74>)
 8019714:	429c      	cmp	r4, r3
 8019716:	bf08      	it	eq
 8019718:	68ec      	ldreq	r4, [r5, #12]
 801971a:	e7da      	b.n	80196d2 <_fflush_r+0x22>
 801971c:	08032e34 	.word	0x08032e34
 8019720:	08032e54 	.word	0x08032e54
 8019724:	08032e14 	.word	0x08032e14

08019728 <std>:
 8019728:	2300      	movs	r3, #0
 801972a:	b510      	push	{r4, lr}
 801972c:	4604      	mov	r4, r0
 801972e:	e9c0 3300 	strd	r3, r3, [r0]
 8019732:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019736:	6083      	str	r3, [r0, #8]
 8019738:	8181      	strh	r1, [r0, #12]
 801973a:	6643      	str	r3, [r0, #100]	; 0x64
 801973c:	81c2      	strh	r2, [r0, #14]
 801973e:	6183      	str	r3, [r0, #24]
 8019740:	4619      	mov	r1, r3
 8019742:	2208      	movs	r2, #8
 8019744:	305c      	adds	r0, #92	; 0x5c
 8019746:	f7fd fab9 	bl	8016cbc <memset>
 801974a:	4b05      	ldr	r3, [pc, #20]	; (8019760 <std+0x38>)
 801974c:	6263      	str	r3, [r4, #36]	; 0x24
 801974e:	4b05      	ldr	r3, [pc, #20]	; (8019764 <std+0x3c>)
 8019750:	62a3      	str	r3, [r4, #40]	; 0x28
 8019752:	4b05      	ldr	r3, [pc, #20]	; (8019768 <std+0x40>)
 8019754:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019756:	4b05      	ldr	r3, [pc, #20]	; (801976c <std+0x44>)
 8019758:	6224      	str	r4, [r4, #32]
 801975a:	6323      	str	r3, [r4, #48]	; 0x30
 801975c:	bd10      	pop	{r4, pc}
 801975e:	bf00      	nop
 8019760:	0801b1a9 	.word	0x0801b1a9
 8019764:	0801b1cb 	.word	0x0801b1cb
 8019768:	0801b203 	.word	0x0801b203
 801976c:	0801b227 	.word	0x0801b227

08019770 <_cleanup_r>:
 8019770:	4901      	ldr	r1, [pc, #4]	; (8019778 <_cleanup_r+0x8>)
 8019772:	f000 b8c1 	b.w	80198f8 <_fwalk_reent>
 8019776:	bf00      	nop
 8019778:	080196b1 	.word	0x080196b1

0801977c <__sfmoreglue>:
 801977c:	b570      	push	{r4, r5, r6, lr}
 801977e:	1e4a      	subs	r2, r1, #1
 8019780:	2568      	movs	r5, #104	; 0x68
 8019782:	4355      	muls	r5, r2
 8019784:	460e      	mov	r6, r1
 8019786:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801978a:	f001 f9e3 	bl	801ab54 <_malloc_r>
 801978e:	4604      	mov	r4, r0
 8019790:	b140      	cbz	r0, 80197a4 <__sfmoreglue+0x28>
 8019792:	2100      	movs	r1, #0
 8019794:	e9c0 1600 	strd	r1, r6, [r0]
 8019798:	300c      	adds	r0, #12
 801979a:	60a0      	str	r0, [r4, #8]
 801979c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80197a0:	f7fd fa8c 	bl	8016cbc <memset>
 80197a4:	4620      	mov	r0, r4
 80197a6:	bd70      	pop	{r4, r5, r6, pc}

080197a8 <__sfp_lock_acquire>:
 80197a8:	4801      	ldr	r0, [pc, #4]	; (80197b0 <__sfp_lock_acquire+0x8>)
 80197aa:	f000 bc38 	b.w	801a01e <__retarget_lock_acquire_recursive>
 80197ae:	bf00      	nop
 80197b0:	2000d8a8 	.word	0x2000d8a8

080197b4 <__sfp_lock_release>:
 80197b4:	4801      	ldr	r0, [pc, #4]	; (80197bc <__sfp_lock_release+0x8>)
 80197b6:	f000 bc33 	b.w	801a020 <__retarget_lock_release_recursive>
 80197ba:	bf00      	nop
 80197bc:	2000d8a8 	.word	0x2000d8a8

080197c0 <__sinit_lock_acquire>:
 80197c0:	4801      	ldr	r0, [pc, #4]	; (80197c8 <__sinit_lock_acquire+0x8>)
 80197c2:	f000 bc2c 	b.w	801a01e <__retarget_lock_acquire_recursive>
 80197c6:	bf00      	nop
 80197c8:	2000d8a3 	.word	0x2000d8a3

080197cc <__sinit_lock_release>:
 80197cc:	4801      	ldr	r0, [pc, #4]	; (80197d4 <__sinit_lock_release+0x8>)
 80197ce:	f000 bc27 	b.w	801a020 <__retarget_lock_release_recursive>
 80197d2:	bf00      	nop
 80197d4:	2000d8a3 	.word	0x2000d8a3

080197d8 <__sinit>:
 80197d8:	b510      	push	{r4, lr}
 80197da:	4604      	mov	r4, r0
 80197dc:	f7ff fff0 	bl	80197c0 <__sinit_lock_acquire>
 80197e0:	69a3      	ldr	r3, [r4, #24]
 80197e2:	b11b      	cbz	r3, 80197ec <__sinit+0x14>
 80197e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80197e8:	f7ff bff0 	b.w	80197cc <__sinit_lock_release>
 80197ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80197f0:	6523      	str	r3, [r4, #80]	; 0x50
 80197f2:	4b13      	ldr	r3, [pc, #76]	; (8019840 <__sinit+0x68>)
 80197f4:	4a13      	ldr	r2, [pc, #76]	; (8019844 <__sinit+0x6c>)
 80197f6:	681b      	ldr	r3, [r3, #0]
 80197f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80197fa:	42a3      	cmp	r3, r4
 80197fc:	bf04      	itt	eq
 80197fe:	2301      	moveq	r3, #1
 8019800:	61a3      	streq	r3, [r4, #24]
 8019802:	4620      	mov	r0, r4
 8019804:	f000 f820 	bl	8019848 <__sfp>
 8019808:	6060      	str	r0, [r4, #4]
 801980a:	4620      	mov	r0, r4
 801980c:	f000 f81c 	bl	8019848 <__sfp>
 8019810:	60a0      	str	r0, [r4, #8]
 8019812:	4620      	mov	r0, r4
 8019814:	f000 f818 	bl	8019848 <__sfp>
 8019818:	2200      	movs	r2, #0
 801981a:	60e0      	str	r0, [r4, #12]
 801981c:	2104      	movs	r1, #4
 801981e:	6860      	ldr	r0, [r4, #4]
 8019820:	f7ff ff82 	bl	8019728 <std>
 8019824:	68a0      	ldr	r0, [r4, #8]
 8019826:	2201      	movs	r2, #1
 8019828:	2109      	movs	r1, #9
 801982a:	f7ff ff7d 	bl	8019728 <std>
 801982e:	68e0      	ldr	r0, [r4, #12]
 8019830:	2202      	movs	r2, #2
 8019832:	2112      	movs	r1, #18
 8019834:	f7ff ff78 	bl	8019728 <std>
 8019838:	2301      	movs	r3, #1
 801983a:	61a3      	str	r3, [r4, #24]
 801983c:	e7d2      	b.n	80197e4 <__sinit+0xc>
 801983e:	bf00      	nop
 8019840:	08032bf4 	.word	0x08032bf4
 8019844:	08019771 	.word	0x08019771

08019848 <__sfp>:
 8019848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801984a:	4607      	mov	r7, r0
 801984c:	f7ff ffac 	bl	80197a8 <__sfp_lock_acquire>
 8019850:	4b1e      	ldr	r3, [pc, #120]	; (80198cc <__sfp+0x84>)
 8019852:	681e      	ldr	r6, [r3, #0]
 8019854:	69b3      	ldr	r3, [r6, #24]
 8019856:	b913      	cbnz	r3, 801985e <__sfp+0x16>
 8019858:	4630      	mov	r0, r6
 801985a:	f7ff ffbd 	bl	80197d8 <__sinit>
 801985e:	3648      	adds	r6, #72	; 0x48
 8019860:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019864:	3b01      	subs	r3, #1
 8019866:	d503      	bpl.n	8019870 <__sfp+0x28>
 8019868:	6833      	ldr	r3, [r6, #0]
 801986a:	b30b      	cbz	r3, 80198b0 <__sfp+0x68>
 801986c:	6836      	ldr	r6, [r6, #0]
 801986e:	e7f7      	b.n	8019860 <__sfp+0x18>
 8019870:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019874:	b9d5      	cbnz	r5, 80198ac <__sfp+0x64>
 8019876:	4b16      	ldr	r3, [pc, #88]	; (80198d0 <__sfp+0x88>)
 8019878:	60e3      	str	r3, [r4, #12]
 801987a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801987e:	6665      	str	r5, [r4, #100]	; 0x64
 8019880:	f000 fbcc 	bl	801a01c <__retarget_lock_init_recursive>
 8019884:	f7ff ff96 	bl	80197b4 <__sfp_lock_release>
 8019888:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801988c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019890:	6025      	str	r5, [r4, #0]
 8019892:	61a5      	str	r5, [r4, #24]
 8019894:	2208      	movs	r2, #8
 8019896:	4629      	mov	r1, r5
 8019898:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801989c:	f7fd fa0e 	bl	8016cbc <memset>
 80198a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80198a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80198a8:	4620      	mov	r0, r4
 80198aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198ac:	3468      	adds	r4, #104	; 0x68
 80198ae:	e7d9      	b.n	8019864 <__sfp+0x1c>
 80198b0:	2104      	movs	r1, #4
 80198b2:	4638      	mov	r0, r7
 80198b4:	f7ff ff62 	bl	801977c <__sfmoreglue>
 80198b8:	4604      	mov	r4, r0
 80198ba:	6030      	str	r0, [r6, #0]
 80198bc:	2800      	cmp	r0, #0
 80198be:	d1d5      	bne.n	801986c <__sfp+0x24>
 80198c0:	f7ff ff78 	bl	80197b4 <__sfp_lock_release>
 80198c4:	230c      	movs	r3, #12
 80198c6:	603b      	str	r3, [r7, #0]
 80198c8:	e7ee      	b.n	80198a8 <__sfp+0x60>
 80198ca:	bf00      	nop
 80198cc:	08032bf4 	.word	0x08032bf4
 80198d0:	ffff0001 	.word	0xffff0001

080198d4 <fiprintf>:
 80198d4:	b40e      	push	{r1, r2, r3}
 80198d6:	b503      	push	{r0, r1, lr}
 80198d8:	4601      	mov	r1, r0
 80198da:	ab03      	add	r3, sp, #12
 80198dc:	4805      	ldr	r0, [pc, #20]	; (80198f4 <fiprintf+0x20>)
 80198de:	f853 2b04 	ldr.w	r2, [r3], #4
 80198e2:	6800      	ldr	r0, [r0, #0]
 80198e4:	9301      	str	r3, [sp, #4]
 80198e6:	f001 fb15 	bl	801af14 <_vfiprintf_r>
 80198ea:	b002      	add	sp, #8
 80198ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80198f0:	b003      	add	sp, #12
 80198f2:	4770      	bx	lr
 80198f4:	200005c8 	.word	0x200005c8

080198f8 <_fwalk_reent>:
 80198f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80198fc:	4606      	mov	r6, r0
 80198fe:	4688      	mov	r8, r1
 8019900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019904:	2700      	movs	r7, #0
 8019906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801990a:	f1b9 0901 	subs.w	r9, r9, #1
 801990e:	d505      	bpl.n	801991c <_fwalk_reent+0x24>
 8019910:	6824      	ldr	r4, [r4, #0]
 8019912:	2c00      	cmp	r4, #0
 8019914:	d1f7      	bne.n	8019906 <_fwalk_reent+0xe>
 8019916:	4638      	mov	r0, r7
 8019918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801991c:	89ab      	ldrh	r3, [r5, #12]
 801991e:	2b01      	cmp	r3, #1
 8019920:	d907      	bls.n	8019932 <_fwalk_reent+0x3a>
 8019922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019926:	3301      	adds	r3, #1
 8019928:	d003      	beq.n	8019932 <_fwalk_reent+0x3a>
 801992a:	4629      	mov	r1, r5
 801992c:	4630      	mov	r0, r6
 801992e:	47c0      	blx	r8
 8019930:	4307      	orrs	r7, r0
 8019932:	3568      	adds	r5, #104	; 0x68
 8019934:	e7e9      	b.n	801990a <_fwalk_reent+0x12>

08019936 <rshift>:
 8019936:	6903      	ldr	r3, [r0, #16]
 8019938:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801993c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019940:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019944:	f100 0414 	add.w	r4, r0, #20
 8019948:	dd45      	ble.n	80199d6 <rshift+0xa0>
 801994a:	f011 011f 	ands.w	r1, r1, #31
 801994e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019952:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019956:	d10c      	bne.n	8019972 <rshift+0x3c>
 8019958:	f100 0710 	add.w	r7, r0, #16
 801995c:	4629      	mov	r1, r5
 801995e:	42b1      	cmp	r1, r6
 8019960:	d334      	bcc.n	80199cc <rshift+0x96>
 8019962:	1a9b      	subs	r3, r3, r2
 8019964:	009b      	lsls	r3, r3, #2
 8019966:	1eea      	subs	r2, r5, #3
 8019968:	4296      	cmp	r6, r2
 801996a:	bf38      	it	cc
 801996c:	2300      	movcc	r3, #0
 801996e:	4423      	add	r3, r4
 8019970:	e015      	b.n	801999e <rshift+0x68>
 8019972:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019976:	f1c1 0820 	rsb	r8, r1, #32
 801997a:	40cf      	lsrs	r7, r1
 801997c:	f105 0e04 	add.w	lr, r5, #4
 8019980:	46a1      	mov	r9, r4
 8019982:	4576      	cmp	r6, lr
 8019984:	46f4      	mov	ip, lr
 8019986:	d815      	bhi.n	80199b4 <rshift+0x7e>
 8019988:	1a9b      	subs	r3, r3, r2
 801998a:	009a      	lsls	r2, r3, #2
 801998c:	3a04      	subs	r2, #4
 801998e:	3501      	adds	r5, #1
 8019990:	42ae      	cmp	r6, r5
 8019992:	bf38      	it	cc
 8019994:	2200      	movcc	r2, #0
 8019996:	18a3      	adds	r3, r4, r2
 8019998:	50a7      	str	r7, [r4, r2]
 801999a:	b107      	cbz	r7, 801999e <rshift+0x68>
 801999c:	3304      	adds	r3, #4
 801999e:	1b1a      	subs	r2, r3, r4
 80199a0:	42a3      	cmp	r3, r4
 80199a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80199a6:	bf08      	it	eq
 80199a8:	2300      	moveq	r3, #0
 80199aa:	6102      	str	r2, [r0, #16]
 80199ac:	bf08      	it	eq
 80199ae:	6143      	streq	r3, [r0, #20]
 80199b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199b4:	f8dc c000 	ldr.w	ip, [ip]
 80199b8:	fa0c fc08 	lsl.w	ip, ip, r8
 80199bc:	ea4c 0707 	orr.w	r7, ip, r7
 80199c0:	f849 7b04 	str.w	r7, [r9], #4
 80199c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80199c8:	40cf      	lsrs	r7, r1
 80199ca:	e7da      	b.n	8019982 <rshift+0x4c>
 80199cc:	f851 cb04 	ldr.w	ip, [r1], #4
 80199d0:	f847 cf04 	str.w	ip, [r7, #4]!
 80199d4:	e7c3      	b.n	801995e <rshift+0x28>
 80199d6:	4623      	mov	r3, r4
 80199d8:	e7e1      	b.n	801999e <rshift+0x68>

080199da <__hexdig_fun>:
 80199da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80199de:	2b09      	cmp	r3, #9
 80199e0:	d802      	bhi.n	80199e8 <__hexdig_fun+0xe>
 80199e2:	3820      	subs	r0, #32
 80199e4:	b2c0      	uxtb	r0, r0
 80199e6:	4770      	bx	lr
 80199e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80199ec:	2b05      	cmp	r3, #5
 80199ee:	d801      	bhi.n	80199f4 <__hexdig_fun+0x1a>
 80199f0:	3847      	subs	r0, #71	; 0x47
 80199f2:	e7f7      	b.n	80199e4 <__hexdig_fun+0xa>
 80199f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80199f8:	2b05      	cmp	r3, #5
 80199fa:	d801      	bhi.n	8019a00 <__hexdig_fun+0x26>
 80199fc:	3827      	subs	r0, #39	; 0x27
 80199fe:	e7f1      	b.n	80199e4 <__hexdig_fun+0xa>
 8019a00:	2000      	movs	r0, #0
 8019a02:	4770      	bx	lr

08019a04 <__gethex>:
 8019a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a08:	ed2d 8b02 	vpush	{d8}
 8019a0c:	b089      	sub	sp, #36	; 0x24
 8019a0e:	ee08 0a10 	vmov	s16, r0
 8019a12:	9304      	str	r3, [sp, #16]
 8019a14:	4bbc      	ldr	r3, [pc, #752]	; (8019d08 <__gethex+0x304>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	9301      	str	r3, [sp, #4]
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	468b      	mov	fp, r1
 8019a1e:	4690      	mov	r8, r2
 8019a20:	f7e6 fbe0 	bl	80001e4 <strlen>
 8019a24:	9b01      	ldr	r3, [sp, #4]
 8019a26:	f8db 2000 	ldr.w	r2, [fp]
 8019a2a:	4403      	add	r3, r0
 8019a2c:	4682      	mov	sl, r0
 8019a2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019a32:	9305      	str	r3, [sp, #20]
 8019a34:	1c93      	adds	r3, r2, #2
 8019a36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8019a3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8019a3e:	32fe      	adds	r2, #254	; 0xfe
 8019a40:	18d1      	adds	r1, r2, r3
 8019a42:	461f      	mov	r7, r3
 8019a44:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019a48:	9100      	str	r1, [sp, #0]
 8019a4a:	2830      	cmp	r0, #48	; 0x30
 8019a4c:	d0f8      	beq.n	8019a40 <__gethex+0x3c>
 8019a4e:	f7ff ffc4 	bl	80199da <__hexdig_fun>
 8019a52:	4604      	mov	r4, r0
 8019a54:	2800      	cmp	r0, #0
 8019a56:	d13a      	bne.n	8019ace <__gethex+0xca>
 8019a58:	9901      	ldr	r1, [sp, #4]
 8019a5a:	4652      	mov	r2, sl
 8019a5c:	4638      	mov	r0, r7
 8019a5e:	f7fd fee5 	bl	801782c <strncmp>
 8019a62:	4605      	mov	r5, r0
 8019a64:	2800      	cmp	r0, #0
 8019a66:	d168      	bne.n	8019b3a <__gethex+0x136>
 8019a68:	f817 000a 	ldrb.w	r0, [r7, sl]
 8019a6c:	eb07 060a 	add.w	r6, r7, sl
 8019a70:	f7ff ffb3 	bl	80199da <__hexdig_fun>
 8019a74:	2800      	cmp	r0, #0
 8019a76:	d062      	beq.n	8019b3e <__gethex+0x13a>
 8019a78:	4633      	mov	r3, r6
 8019a7a:	7818      	ldrb	r0, [r3, #0]
 8019a7c:	2830      	cmp	r0, #48	; 0x30
 8019a7e:	461f      	mov	r7, r3
 8019a80:	f103 0301 	add.w	r3, r3, #1
 8019a84:	d0f9      	beq.n	8019a7a <__gethex+0x76>
 8019a86:	f7ff ffa8 	bl	80199da <__hexdig_fun>
 8019a8a:	2301      	movs	r3, #1
 8019a8c:	fab0 f480 	clz	r4, r0
 8019a90:	0964      	lsrs	r4, r4, #5
 8019a92:	4635      	mov	r5, r6
 8019a94:	9300      	str	r3, [sp, #0]
 8019a96:	463a      	mov	r2, r7
 8019a98:	4616      	mov	r6, r2
 8019a9a:	3201      	adds	r2, #1
 8019a9c:	7830      	ldrb	r0, [r6, #0]
 8019a9e:	f7ff ff9c 	bl	80199da <__hexdig_fun>
 8019aa2:	2800      	cmp	r0, #0
 8019aa4:	d1f8      	bne.n	8019a98 <__gethex+0x94>
 8019aa6:	9901      	ldr	r1, [sp, #4]
 8019aa8:	4652      	mov	r2, sl
 8019aaa:	4630      	mov	r0, r6
 8019aac:	f7fd febe 	bl	801782c <strncmp>
 8019ab0:	b980      	cbnz	r0, 8019ad4 <__gethex+0xd0>
 8019ab2:	b94d      	cbnz	r5, 8019ac8 <__gethex+0xc4>
 8019ab4:	eb06 050a 	add.w	r5, r6, sl
 8019ab8:	462a      	mov	r2, r5
 8019aba:	4616      	mov	r6, r2
 8019abc:	3201      	adds	r2, #1
 8019abe:	7830      	ldrb	r0, [r6, #0]
 8019ac0:	f7ff ff8b 	bl	80199da <__hexdig_fun>
 8019ac4:	2800      	cmp	r0, #0
 8019ac6:	d1f8      	bne.n	8019aba <__gethex+0xb6>
 8019ac8:	1bad      	subs	r5, r5, r6
 8019aca:	00ad      	lsls	r5, r5, #2
 8019acc:	e004      	b.n	8019ad8 <__gethex+0xd4>
 8019ace:	2400      	movs	r4, #0
 8019ad0:	4625      	mov	r5, r4
 8019ad2:	e7e0      	b.n	8019a96 <__gethex+0x92>
 8019ad4:	2d00      	cmp	r5, #0
 8019ad6:	d1f7      	bne.n	8019ac8 <__gethex+0xc4>
 8019ad8:	7833      	ldrb	r3, [r6, #0]
 8019ada:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019ade:	2b50      	cmp	r3, #80	; 0x50
 8019ae0:	d13b      	bne.n	8019b5a <__gethex+0x156>
 8019ae2:	7873      	ldrb	r3, [r6, #1]
 8019ae4:	2b2b      	cmp	r3, #43	; 0x2b
 8019ae6:	d02c      	beq.n	8019b42 <__gethex+0x13e>
 8019ae8:	2b2d      	cmp	r3, #45	; 0x2d
 8019aea:	d02e      	beq.n	8019b4a <__gethex+0x146>
 8019aec:	1c71      	adds	r1, r6, #1
 8019aee:	f04f 0900 	mov.w	r9, #0
 8019af2:	7808      	ldrb	r0, [r1, #0]
 8019af4:	f7ff ff71 	bl	80199da <__hexdig_fun>
 8019af8:	1e43      	subs	r3, r0, #1
 8019afa:	b2db      	uxtb	r3, r3
 8019afc:	2b18      	cmp	r3, #24
 8019afe:	d82c      	bhi.n	8019b5a <__gethex+0x156>
 8019b00:	f1a0 0210 	sub.w	r2, r0, #16
 8019b04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019b08:	f7ff ff67 	bl	80199da <__hexdig_fun>
 8019b0c:	1e43      	subs	r3, r0, #1
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	2b18      	cmp	r3, #24
 8019b12:	d91d      	bls.n	8019b50 <__gethex+0x14c>
 8019b14:	f1b9 0f00 	cmp.w	r9, #0
 8019b18:	d000      	beq.n	8019b1c <__gethex+0x118>
 8019b1a:	4252      	negs	r2, r2
 8019b1c:	4415      	add	r5, r2
 8019b1e:	f8cb 1000 	str.w	r1, [fp]
 8019b22:	b1e4      	cbz	r4, 8019b5e <__gethex+0x15a>
 8019b24:	9b00      	ldr	r3, [sp, #0]
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	bf14      	ite	ne
 8019b2a:	2700      	movne	r7, #0
 8019b2c:	2706      	moveq	r7, #6
 8019b2e:	4638      	mov	r0, r7
 8019b30:	b009      	add	sp, #36	; 0x24
 8019b32:	ecbd 8b02 	vpop	{d8}
 8019b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b3a:	463e      	mov	r6, r7
 8019b3c:	4625      	mov	r5, r4
 8019b3e:	2401      	movs	r4, #1
 8019b40:	e7ca      	b.n	8019ad8 <__gethex+0xd4>
 8019b42:	f04f 0900 	mov.w	r9, #0
 8019b46:	1cb1      	adds	r1, r6, #2
 8019b48:	e7d3      	b.n	8019af2 <__gethex+0xee>
 8019b4a:	f04f 0901 	mov.w	r9, #1
 8019b4e:	e7fa      	b.n	8019b46 <__gethex+0x142>
 8019b50:	230a      	movs	r3, #10
 8019b52:	fb03 0202 	mla	r2, r3, r2, r0
 8019b56:	3a10      	subs	r2, #16
 8019b58:	e7d4      	b.n	8019b04 <__gethex+0x100>
 8019b5a:	4631      	mov	r1, r6
 8019b5c:	e7df      	b.n	8019b1e <__gethex+0x11a>
 8019b5e:	1bf3      	subs	r3, r6, r7
 8019b60:	3b01      	subs	r3, #1
 8019b62:	4621      	mov	r1, r4
 8019b64:	2b07      	cmp	r3, #7
 8019b66:	dc0b      	bgt.n	8019b80 <__gethex+0x17c>
 8019b68:	ee18 0a10 	vmov	r0, s16
 8019b6c:	f000 fad8 	bl	801a120 <_Balloc>
 8019b70:	4604      	mov	r4, r0
 8019b72:	b940      	cbnz	r0, 8019b86 <__gethex+0x182>
 8019b74:	4b65      	ldr	r3, [pc, #404]	; (8019d0c <__gethex+0x308>)
 8019b76:	4602      	mov	r2, r0
 8019b78:	21de      	movs	r1, #222	; 0xde
 8019b7a:	4865      	ldr	r0, [pc, #404]	; (8019d10 <__gethex+0x30c>)
 8019b7c:	f7fe fe74 	bl	8018868 <__assert_func>
 8019b80:	3101      	adds	r1, #1
 8019b82:	105b      	asrs	r3, r3, #1
 8019b84:	e7ee      	b.n	8019b64 <__gethex+0x160>
 8019b86:	f100 0914 	add.w	r9, r0, #20
 8019b8a:	f04f 0b00 	mov.w	fp, #0
 8019b8e:	f1ca 0301 	rsb	r3, sl, #1
 8019b92:	f8cd 9008 	str.w	r9, [sp, #8]
 8019b96:	f8cd b000 	str.w	fp, [sp]
 8019b9a:	9306      	str	r3, [sp, #24]
 8019b9c:	42b7      	cmp	r7, r6
 8019b9e:	d340      	bcc.n	8019c22 <__gethex+0x21e>
 8019ba0:	9802      	ldr	r0, [sp, #8]
 8019ba2:	9b00      	ldr	r3, [sp, #0]
 8019ba4:	f840 3b04 	str.w	r3, [r0], #4
 8019ba8:	eba0 0009 	sub.w	r0, r0, r9
 8019bac:	1080      	asrs	r0, r0, #2
 8019bae:	0146      	lsls	r6, r0, #5
 8019bb0:	6120      	str	r0, [r4, #16]
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f000 fbaa 	bl	801a30c <__hi0bits>
 8019bb8:	1a30      	subs	r0, r6, r0
 8019bba:	f8d8 6000 	ldr.w	r6, [r8]
 8019bbe:	42b0      	cmp	r0, r6
 8019bc0:	dd63      	ble.n	8019c8a <__gethex+0x286>
 8019bc2:	1b87      	subs	r7, r0, r6
 8019bc4:	4639      	mov	r1, r7
 8019bc6:	4620      	mov	r0, r4
 8019bc8:	f000 ff44 	bl	801aa54 <__any_on>
 8019bcc:	4682      	mov	sl, r0
 8019bce:	b1a8      	cbz	r0, 8019bfc <__gethex+0x1f8>
 8019bd0:	1e7b      	subs	r3, r7, #1
 8019bd2:	1159      	asrs	r1, r3, #5
 8019bd4:	f003 021f 	and.w	r2, r3, #31
 8019bd8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8019bdc:	f04f 0a01 	mov.w	sl, #1
 8019be0:	fa0a f202 	lsl.w	r2, sl, r2
 8019be4:	420a      	tst	r2, r1
 8019be6:	d009      	beq.n	8019bfc <__gethex+0x1f8>
 8019be8:	4553      	cmp	r3, sl
 8019bea:	dd05      	ble.n	8019bf8 <__gethex+0x1f4>
 8019bec:	1eb9      	subs	r1, r7, #2
 8019bee:	4620      	mov	r0, r4
 8019bf0:	f000 ff30 	bl	801aa54 <__any_on>
 8019bf4:	2800      	cmp	r0, #0
 8019bf6:	d145      	bne.n	8019c84 <__gethex+0x280>
 8019bf8:	f04f 0a02 	mov.w	sl, #2
 8019bfc:	4639      	mov	r1, r7
 8019bfe:	4620      	mov	r0, r4
 8019c00:	f7ff fe99 	bl	8019936 <rshift>
 8019c04:	443d      	add	r5, r7
 8019c06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019c0a:	42ab      	cmp	r3, r5
 8019c0c:	da4c      	bge.n	8019ca8 <__gethex+0x2a4>
 8019c0e:	ee18 0a10 	vmov	r0, s16
 8019c12:	4621      	mov	r1, r4
 8019c14:	f000 fac4 	bl	801a1a0 <_Bfree>
 8019c18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019c1a:	2300      	movs	r3, #0
 8019c1c:	6013      	str	r3, [r2, #0]
 8019c1e:	27a3      	movs	r7, #163	; 0xa3
 8019c20:	e785      	b.n	8019b2e <__gethex+0x12a>
 8019c22:	1e73      	subs	r3, r6, #1
 8019c24:	9a05      	ldr	r2, [sp, #20]
 8019c26:	9303      	str	r3, [sp, #12]
 8019c28:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8019c2c:	4293      	cmp	r3, r2
 8019c2e:	d019      	beq.n	8019c64 <__gethex+0x260>
 8019c30:	f1bb 0f20 	cmp.w	fp, #32
 8019c34:	d107      	bne.n	8019c46 <__gethex+0x242>
 8019c36:	9b02      	ldr	r3, [sp, #8]
 8019c38:	9a00      	ldr	r2, [sp, #0]
 8019c3a:	f843 2b04 	str.w	r2, [r3], #4
 8019c3e:	9302      	str	r3, [sp, #8]
 8019c40:	2300      	movs	r3, #0
 8019c42:	9300      	str	r3, [sp, #0]
 8019c44:	469b      	mov	fp, r3
 8019c46:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8019c4a:	f7ff fec6 	bl	80199da <__hexdig_fun>
 8019c4e:	9b00      	ldr	r3, [sp, #0]
 8019c50:	f000 000f 	and.w	r0, r0, #15
 8019c54:	fa00 f00b 	lsl.w	r0, r0, fp
 8019c58:	4303      	orrs	r3, r0
 8019c5a:	9300      	str	r3, [sp, #0]
 8019c5c:	f10b 0b04 	add.w	fp, fp, #4
 8019c60:	9b03      	ldr	r3, [sp, #12]
 8019c62:	e00d      	b.n	8019c80 <__gethex+0x27c>
 8019c64:	9b03      	ldr	r3, [sp, #12]
 8019c66:	9a06      	ldr	r2, [sp, #24]
 8019c68:	4413      	add	r3, r2
 8019c6a:	42bb      	cmp	r3, r7
 8019c6c:	d3e0      	bcc.n	8019c30 <__gethex+0x22c>
 8019c6e:	4618      	mov	r0, r3
 8019c70:	9901      	ldr	r1, [sp, #4]
 8019c72:	9307      	str	r3, [sp, #28]
 8019c74:	4652      	mov	r2, sl
 8019c76:	f7fd fdd9 	bl	801782c <strncmp>
 8019c7a:	9b07      	ldr	r3, [sp, #28]
 8019c7c:	2800      	cmp	r0, #0
 8019c7e:	d1d7      	bne.n	8019c30 <__gethex+0x22c>
 8019c80:	461e      	mov	r6, r3
 8019c82:	e78b      	b.n	8019b9c <__gethex+0x198>
 8019c84:	f04f 0a03 	mov.w	sl, #3
 8019c88:	e7b8      	b.n	8019bfc <__gethex+0x1f8>
 8019c8a:	da0a      	bge.n	8019ca2 <__gethex+0x29e>
 8019c8c:	1a37      	subs	r7, r6, r0
 8019c8e:	4621      	mov	r1, r4
 8019c90:	ee18 0a10 	vmov	r0, s16
 8019c94:	463a      	mov	r2, r7
 8019c96:	f000 fc9f 	bl	801a5d8 <__lshift>
 8019c9a:	1bed      	subs	r5, r5, r7
 8019c9c:	4604      	mov	r4, r0
 8019c9e:	f100 0914 	add.w	r9, r0, #20
 8019ca2:	f04f 0a00 	mov.w	sl, #0
 8019ca6:	e7ae      	b.n	8019c06 <__gethex+0x202>
 8019ca8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8019cac:	42a8      	cmp	r0, r5
 8019cae:	dd72      	ble.n	8019d96 <__gethex+0x392>
 8019cb0:	1b45      	subs	r5, r0, r5
 8019cb2:	42ae      	cmp	r6, r5
 8019cb4:	dc36      	bgt.n	8019d24 <__gethex+0x320>
 8019cb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019cba:	2b02      	cmp	r3, #2
 8019cbc:	d02a      	beq.n	8019d14 <__gethex+0x310>
 8019cbe:	2b03      	cmp	r3, #3
 8019cc0:	d02c      	beq.n	8019d1c <__gethex+0x318>
 8019cc2:	2b01      	cmp	r3, #1
 8019cc4:	d115      	bne.n	8019cf2 <__gethex+0x2ee>
 8019cc6:	42ae      	cmp	r6, r5
 8019cc8:	d113      	bne.n	8019cf2 <__gethex+0x2ee>
 8019cca:	2e01      	cmp	r6, #1
 8019ccc:	d10b      	bne.n	8019ce6 <__gethex+0x2e2>
 8019cce:	9a04      	ldr	r2, [sp, #16]
 8019cd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019cd4:	6013      	str	r3, [r2, #0]
 8019cd6:	2301      	movs	r3, #1
 8019cd8:	6123      	str	r3, [r4, #16]
 8019cda:	f8c9 3000 	str.w	r3, [r9]
 8019cde:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019ce0:	2762      	movs	r7, #98	; 0x62
 8019ce2:	601c      	str	r4, [r3, #0]
 8019ce4:	e723      	b.n	8019b2e <__gethex+0x12a>
 8019ce6:	1e71      	subs	r1, r6, #1
 8019ce8:	4620      	mov	r0, r4
 8019cea:	f000 feb3 	bl	801aa54 <__any_on>
 8019cee:	2800      	cmp	r0, #0
 8019cf0:	d1ed      	bne.n	8019cce <__gethex+0x2ca>
 8019cf2:	ee18 0a10 	vmov	r0, s16
 8019cf6:	4621      	mov	r1, r4
 8019cf8:	f000 fa52 	bl	801a1a0 <_Bfree>
 8019cfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019cfe:	2300      	movs	r3, #0
 8019d00:	6013      	str	r3, [r2, #0]
 8019d02:	2750      	movs	r7, #80	; 0x50
 8019d04:	e713      	b.n	8019b2e <__gethex+0x12a>
 8019d06:	bf00      	nop
 8019d08:	08032ee0 	.word	0x08032ee0
 8019d0c:	08032e01 	.word	0x08032e01
 8019d10:	08032e74 	.word	0x08032e74
 8019d14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d1eb      	bne.n	8019cf2 <__gethex+0x2ee>
 8019d1a:	e7d8      	b.n	8019cce <__gethex+0x2ca>
 8019d1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d1d5      	bne.n	8019cce <__gethex+0x2ca>
 8019d22:	e7e6      	b.n	8019cf2 <__gethex+0x2ee>
 8019d24:	1e6f      	subs	r7, r5, #1
 8019d26:	f1ba 0f00 	cmp.w	sl, #0
 8019d2a:	d131      	bne.n	8019d90 <__gethex+0x38c>
 8019d2c:	b127      	cbz	r7, 8019d38 <__gethex+0x334>
 8019d2e:	4639      	mov	r1, r7
 8019d30:	4620      	mov	r0, r4
 8019d32:	f000 fe8f 	bl	801aa54 <__any_on>
 8019d36:	4682      	mov	sl, r0
 8019d38:	117b      	asrs	r3, r7, #5
 8019d3a:	2101      	movs	r1, #1
 8019d3c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019d40:	f007 071f 	and.w	r7, r7, #31
 8019d44:	fa01 f707 	lsl.w	r7, r1, r7
 8019d48:	421f      	tst	r7, r3
 8019d4a:	4629      	mov	r1, r5
 8019d4c:	4620      	mov	r0, r4
 8019d4e:	bf18      	it	ne
 8019d50:	f04a 0a02 	orrne.w	sl, sl, #2
 8019d54:	1b76      	subs	r6, r6, r5
 8019d56:	f7ff fdee 	bl	8019936 <rshift>
 8019d5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8019d5e:	2702      	movs	r7, #2
 8019d60:	f1ba 0f00 	cmp.w	sl, #0
 8019d64:	d048      	beq.n	8019df8 <__gethex+0x3f4>
 8019d66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8019d6a:	2b02      	cmp	r3, #2
 8019d6c:	d015      	beq.n	8019d9a <__gethex+0x396>
 8019d6e:	2b03      	cmp	r3, #3
 8019d70:	d017      	beq.n	8019da2 <__gethex+0x39e>
 8019d72:	2b01      	cmp	r3, #1
 8019d74:	d109      	bne.n	8019d8a <__gethex+0x386>
 8019d76:	f01a 0f02 	tst.w	sl, #2
 8019d7a:	d006      	beq.n	8019d8a <__gethex+0x386>
 8019d7c:	f8d9 0000 	ldr.w	r0, [r9]
 8019d80:	ea4a 0a00 	orr.w	sl, sl, r0
 8019d84:	f01a 0f01 	tst.w	sl, #1
 8019d88:	d10e      	bne.n	8019da8 <__gethex+0x3a4>
 8019d8a:	f047 0710 	orr.w	r7, r7, #16
 8019d8e:	e033      	b.n	8019df8 <__gethex+0x3f4>
 8019d90:	f04f 0a01 	mov.w	sl, #1
 8019d94:	e7d0      	b.n	8019d38 <__gethex+0x334>
 8019d96:	2701      	movs	r7, #1
 8019d98:	e7e2      	b.n	8019d60 <__gethex+0x35c>
 8019d9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019d9c:	f1c3 0301 	rsb	r3, r3, #1
 8019da0:	9315      	str	r3, [sp, #84]	; 0x54
 8019da2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d0f0      	beq.n	8019d8a <__gethex+0x386>
 8019da8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8019dac:	f104 0314 	add.w	r3, r4, #20
 8019db0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8019db4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8019db8:	f04f 0c00 	mov.w	ip, #0
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019dc2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8019dc6:	d01c      	beq.n	8019e02 <__gethex+0x3fe>
 8019dc8:	3201      	adds	r2, #1
 8019dca:	6002      	str	r2, [r0, #0]
 8019dcc:	2f02      	cmp	r7, #2
 8019dce:	f104 0314 	add.w	r3, r4, #20
 8019dd2:	d13f      	bne.n	8019e54 <__gethex+0x450>
 8019dd4:	f8d8 2000 	ldr.w	r2, [r8]
 8019dd8:	3a01      	subs	r2, #1
 8019dda:	42b2      	cmp	r2, r6
 8019ddc:	d10a      	bne.n	8019df4 <__gethex+0x3f0>
 8019dde:	1171      	asrs	r1, r6, #5
 8019de0:	2201      	movs	r2, #1
 8019de2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019de6:	f006 061f 	and.w	r6, r6, #31
 8019dea:	fa02 f606 	lsl.w	r6, r2, r6
 8019dee:	421e      	tst	r6, r3
 8019df0:	bf18      	it	ne
 8019df2:	4617      	movne	r7, r2
 8019df4:	f047 0720 	orr.w	r7, r7, #32
 8019df8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019dfa:	601c      	str	r4, [r3, #0]
 8019dfc:	9b04      	ldr	r3, [sp, #16]
 8019dfe:	601d      	str	r5, [r3, #0]
 8019e00:	e695      	b.n	8019b2e <__gethex+0x12a>
 8019e02:	4299      	cmp	r1, r3
 8019e04:	f843 cc04 	str.w	ip, [r3, #-4]
 8019e08:	d8d8      	bhi.n	8019dbc <__gethex+0x3b8>
 8019e0a:	68a3      	ldr	r3, [r4, #8]
 8019e0c:	459b      	cmp	fp, r3
 8019e0e:	db19      	blt.n	8019e44 <__gethex+0x440>
 8019e10:	6861      	ldr	r1, [r4, #4]
 8019e12:	ee18 0a10 	vmov	r0, s16
 8019e16:	3101      	adds	r1, #1
 8019e18:	f000 f982 	bl	801a120 <_Balloc>
 8019e1c:	4681      	mov	r9, r0
 8019e1e:	b918      	cbnz	r0, 8019e28 <__gethex+0x424>
 8019e20:	4b1a      	ldr	r3, [pc, #104]	; (8019e8c <__gethex+0x488>)
 8019e22:	4602      	mov	r2, r0
 8019e24:	2184      	movs	r1, #132	; 0x84
 8019e26:	e6a8      	b.n	8019b7a <__gethex+0x176>
 8019e28:	6922      	ldr	r2, [r4, #16]
 8019e2a:	3202      	adds	r2, #2
 8019e2c:	f104 010c 	add.w	r1, r4, #12
 8019e30:	0092      	lsls	r2, r2, #2
 8019e32:	300c      	adds	r0, #12
 8019e34:	f7fc ff1a 	bl	8016c6c <memcpy>
 8019e38:	4621      	mov	r1, r4
 8019e3a:	ee18 0a10 	vmov	r0, s16
 8019e3e:	f000 f9af 	bl	801a1a0 <_Bfree>
 8019e42:	464c      	mov	r4, r9
 8019e44:	6923      	ldr	r3, [r4, #16]
 8019e46:	1c5a      	adds	r2, r3, #1
 8019e48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019e4c:	6122      	str	r2, [r4, #16]
 8019e4e:	2201      	movs	r2, #1
 8019e50:	615a      	str	r2, [r3, #20]
 8019e52:	e7bb      	b.n	8019dcc <__gethex+0x3c8>
 8019e54:	6922      	ldr	r2, [r4, #16]
 8019e56:	455a      	cmp	r2, fp
 8019e58:	dd0b      	ble.n	8019e72 <__gethex+0x46e>
 8019e5a:	2101      	movs	r1, #1
 8019e5c:	4620      	mov	r0, r4
 8019e5e:	f7ff fd6a 	bl	8019936 <rshift>
 8019e62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019e66:	3501      	adds	r5, #1
 8019e68:	42ab      	cmp	r3, r5
 8019e6a:	f6ff aed0 	blt.w	8019c0e <__gethex+0x20a>
 8019e6e:	2701      	movs	r7, #1
 8019e70:	e7c0      	b.n	8019df4 <__gethex+0x3f0>
 8019e72:	f016 061f 	ands.w	r6, r6, #31
 8019e76:	d0fa      	beq.n	8019e6e <__gethex+0x46a>
 8019e78:	449a      	add	sl, r3
 8019e7a:	f1c6 0620 	rsb	r6, r6, #32
 8019e7e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019e82:	f000 fa43 	bl	801a30c <__hi0bits>
 8019e86:	42b0      	cmp	r0, r6
 8019e88:	dbe7      	blt.n	8019e5a <__gethex+0x456>
 8019e8a:	e7f0      	b.n	8019e6e <__gethex+0x46a>
 8019e8c:	08032e01 	.word	0x08032e01

08019e90 <L_shift>:
 8019e90:	f1c2 0208 	rsb	r2, r2, #8
 8019e94:	0092      	lsls	r2, r2, #2
 8019e96:	b570      	push	{r4, r5, r6, lr}
 8019e98:	f1c2 0620 	rsb	r6, r2, #32
 8019e9c:	6843      	ldr	r3, [r0, #4]
 8019e9e:	6804      	ldr	r4, [r0, #0]
 8019ea0:	fa03 f506 	lsl.w	r5, r3, r6
 8019ea4:	432c      	orrs	r4, r5
 8019ea6:	40d3      	lsrs	r3, r2
 8019ea8:	6004      	str	r4, [r0, #0]
 8019eaa:	f840 3f04 	str.w	r3, [r0, #4]!
 8019eae:	4288      	cmp	r0, r1
 8019eb0:	d3f4      	bcc.n	8019e9c <L_shift+0xc>
 8019eb2:	bd70      	pop	{r4, r5, r6, pc}

08019eb4 <__match>:
 8019eb4:	b530      	push	{r4, r5, lr}
 8019eb6:	6803      	ldr	r3, [r0, #0]
 8019eb8:	3301      	adds	r3, #1
 8019eba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ebe:	b914      	cbnz	r4, 8019ec6 <__match+0x12>
 8019ec0:	6003      	str	r3, [r0, #0]
 8019ec2:	2001      	movs	r0, #1
 8019ec4:	bd30      	pop	{r4, r5, pc}
 8019ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019eca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019ece:	2d19      	cmp	r5, #25
 8019ed0:	bf98      	it	ls
 8019ed2:	3220      	addls	r2, #32
 8019ed4:	42a2      	cmp	r2, r4
 8019ed6:	d0f0      	beq.n	8019eba <__match+0x6>
 8019ed8:	2000      	movs	r0, #0
 8019eda:	e7f3      	b.n	8019ec4 <__match+0x10>

08019edc <__hexnan>:
 8019edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ee0:	680b      	ldr	r3, [r1, #0]
 8019ee2:	6801      	ldr	r1, [r0, #0]
 8019ee4:	115e      	asrs	r6, r3, #5
 8019ee6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019eea:	f013 031f 	ands.w	r3, r3, #31
 8019eee:	b087      	sub	sp, #28
 8019ef0:	bf18      	it	ne
 8019ef2:	3604      	addne	r6, #4
 8019ef4:	2500      	movs	r5, #0
 8019ef6:	1f37      	subs	r7, r6, #4
 8019ef8:	4682      	mov	sl, r0
 8019efa:	4690      	mov	r8, r2
 8019efc:	9301      	str	r3, [sp, #4]
 8019efe:	f846 5c04 	str.w	r5, [r6, #-4]
 8019f02:	46b9      	mov	r9, r7
 8019f04:	463c      	mov	r4, r7
 8019f06:	9502      	str	r5, [sp, #8]
 8019f08:	46ab      	mov	fp, r5
 8019f0a:	784a      	ldrb	r2, [r1, #1]
 8019f0c:	1c4b      	adds	r3, r1, #1
 8019f0e:	9303      	str	r3, [sp, #12]
 8019f10:	b342      	cbz	r2, 8019f64 <__hexnan+0x88>
 8019f12:	4610      	mov	r0, r2
 8019f14:	9105      	str	r1, [sp, #20]
 8019f16:	9204      	str	r2, [sp, #16]
 8019f18:	f7ff fd5f 	bl	80199da <__hexdig_fun>
 8019f1c:	2800      	cmp	r0, #0
 8019f1e:	d14f      	bne.n	8019fc0 <__hexnan+0xe4>
 8019f20:	9a04      	ldr	r2, [sp, #16]
 8019f22:	9905      	ldr	r1, [sp, #20]
 8019f24:	2a20      	cmp	r2, #32
 8019f26:	d818      	bhi.n	8019f5a <__hexnan+0x7e>
 8019f28:	9b02      	ldr	r3, [sp, #8]
 8019f2a:	459b      	cmp	fp, r3
 8019f2c:	dd13      	ble.n	8019f56 <__hexnan+0x7a>
 8019f2e:	454c      	cmp	r4, r9
 8019f30:	d206      	bcs.n	8019f40 <__hexnan+0x64>
 8019f32:	2d07      	cmp	r5, #7
 8019f34:	dc04      	bgt.n	8019f40 <__hexnan+0x64>
 8019f36:	462a      	mov	r2, r5
 8019f38:	4649      	mov	r1, r9
 8019f3a:	4620      	mov	r0, r4
 8019f3c:	f7ff ffa8 	bl	8019e90 <L_shift>
 8019f40:	4544      	cmp	r4, r8
 8019f42:	d950      	bls.n	8019fe6 <__hexnan+0x10a>
 8019f44:	2300      	movs	r3, #0
 8019f46:	f1a4 0904 	sub.w	r9, r4, #4
 8019f4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8019f4e:	f8cd b008 	str.w	fp, [sp, #8]
 8019f52:	464c      	mov	r4, r9
 8019f54:	461d      	mov	r5, r3
 8019f56:	9903      	ldr	r1, [sp, #12]
 8019f58:	e7d7      	b.n	8019f0a <__hexnan+0x2e>
 8019f5a:	2a29      	cmp	r2, #41	; 0x29
 8019f5c:	d156      	bne.n	801a00c <__hexnan+0x130>
 8019f5e:	3102      	adds	r1, #2
 8019f60:	f8ca 1000 	str.w	r1, [sl]
 8019f64:	f1bb 0f00 	cmp.w	fp, #0
 8019f68:	d050      	beq.n	801a00c <__hexnan+0x130>
 8019f6a:	454c      	cmp	r4, r9
 8019f6c:	d206      	bcs.n	8019f7c <__hexnan+0xa0>
 8019f6e:	2d07      	cmp	r5, #7
 8019f70:	dc04      	bgt.n	8019f7c <__hexnan+0xa0>
 8019f72:	462a      	mov	r2, r5
 8019f74:	4649      	mov	r1, r9
 8019f76:	4620      	mov	r0, r4
 8019f78:	f7ff ff8a 	bl	8019e90 <L_shift>
 8019f7c:	4544      	cmp	r4, r8
 8019f7e:	d934      	bls.n	8019fea <__hexnan+0x10e>
 8019f80:	f1a8 0204 	sub.w	r2, r8, #4
 8019f84:	4623      	mov	r3, r4
 8019f86:	f853 1b04 	ldr.w	r1, [r3], #4
 8019f8a:	f842 1f04 	str.w	r1, [r2, #4]!
 8019f8e:	429f      	cmp	r7, r3
 8019f90:	d2f9      	bcs.n	8019f86 <__hexnan+0xaa>
 8019f92:	1b3b      	subs	r3, r7, r4
 8019f94:	f023 0303 	bic.w	r3, r3, #3
 8019f98:	3304      	adds	r3, #4
 8019f9a:	3401      	adds	r4, #1
 8019f9c:	3e03      	subs	r6, #3
 8019f9e:	42b4      	cmp	r4, r6
 8019fa0:	bf88      	it	hi
 8019fa2:	2304      	movhi	r3, #4
 8019fa4:	4443      	add	r3, r8
 8019fa6:	2200      	movs	r2, #0
 8019fa8:	f843 2b04 	str.w	r2, [r3], #4
 8019fac:	429f      	cmp	r7, r3
 8019fae:	d2fb      	bcs.n	8019fa8 <__hexnan+0xcc>
 8019fb0:	683b      	ldr	r3, [r7, #0]
 8019fb2:	b91b      	cbnz	r3, 8019fbc <__hexnan+0xe0>
 8019fb4:	4547      	cmp	r7, r8
 8019fb6:	d127      	bne.n	801a008 <__hexnan+0x12c>
 8019fb8:	2301      	movs	r3, #1
 8019fba:	603b      	str	r3, [r7, #0]
 8019fbc:	2005      	movs	r0, #5
 8019fbe:	e026      	b.n	801a00e <__hexnan+0x132>
 8019fc0:	3501      	adds	r5, #1
 8019fc2:	2d08      	cmp	r5, #8
 8019fc4:	f10b 0b01 	add.w	fp, fp, #1
 8019fc8:	dd06      	ble.n	8019fd8 <__hexnan+0xfc>
 8019fca:	4544      	cmp	r4, r8
 8019fcc:	d9c3      	bls.n	8019f56 <__hexnan+0x7a>
 8019fce:	2300      	movs	r3, #0
 8019fd0:	f844 3c04 	str.w	r3, [r4, #-4]
 8019fd4:	2501      	movs	r5, #1
 8019fd6:	3c04      	subs	r4, #4
 8019fd8:	6822      	ldr	r2, [r4, #0]
 8019fda:	f000 000f 	and.w	r0, r0, #15
 8019fde:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019fe2:	6022      	str	r2, [r4, #0]
 8019fe4:	e7b7      	b.n	8019f56 <__hexnan+0x7a>
 8019fe6:	2508      	movs	r5, #8
 8019fe8:	e7b5      	b.n	8019f56 <__hexnan+0x7a>
 8019fea:	9b01      	ldr	r3, [sp, #4]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d0df      	beq.n	8019fb0 <__hexnan+0xd4>
 8019ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019ff4:	f1c3 0320 	rsb	r3, r3, #32
 8019ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8019ffc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801a000:	401a      	ands	r2, r3
 801a002:	f846 2c04 	str.w	r2, [r6, #-4]
 801a006:	e7d3      	b.n	8019fb0 <__hexnan+0xd4>
 801a008:	3f04      	subs	r7, #4
 801a00a:	e7d1      	b.n	8019fb0 <__hexnan+0xd4>
 801a00c:	2004      	movs	r0, #4
 801a00e:	b007      	add	sp, #28
 801a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a014 <_localeconv_r>:
 801a014:	4800      	ldr	r0, [pc, #0]	; (801a018 <_localeconv_r+0x4>)
 801a016:	4770      	bx	lr
 801a018:	20000720 	.word	0x20000720

0801a01c <__retarget_lock_init_recursive>:
 801a01c:	4770      	bx	lr

0801a01e <__retarget_lock_acquire_recursive>:
 801a01e:	4770      	bx	lr

0801a020 <__retarget_lock_release_recursive>:
 801a020:	4770      	bx	lr

0801a022 <__swhatbuf_r>:
 801a022:	b570      	push	{r4, r5, r6, lr}
 801a024:	460e      	mov	r6, r1
 801a026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a02a:	2900      	cmp	r1, #0
 801a02c:	b096      	sub	sp, #88	; 0x58
 801a02e:	4614      	mov	r4, r2
 801a030:	461d      	mov	r5, r3
 801a032:	da07      	bge.n	801a044 <__swhatbuf_r+0x22>
 801a034:	2300      	movs	r3, #0
 801a036:	602b      	str	r3, [r5, #0]
 801a038:	89b3      	ldrh	r3, [r6, #12]
 801a03a:	061a      	lsls	r2, r3, #24
 801a03c:	d410      	bmi.n	801a060 <__swhatbuf_r+0x3e>
 801a03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a042:	e00e      	b.n	801a062 <__swhatbuf_r+0x40>
 801a044:	466a      	mov	r2, sp
 801a046:	f001 f929 	bl	801b29c <_fstat_r>
 801a04a:	2800      	cmp	r0, #0
 801a04c:	dbf2      	blt.n	801a034 <__swhatbuf_r+0x12>
 801a04e:	9a01      	ldr	r2, [sp, #4]
 801a050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a058:	425a      	negs	r2, r3
 801a05a:	415a      	adcs	r2, r3
 801a05c:	602a      	str	r2, [r5, #0]
 801a05e:	e7ee      	b.n	801a03e <__swhatbuf_r+0x1c>
 801a060:	2340      	movs	r3, #64	; 0x40
 801a062:	2000      	movs	r0, #0
 801a064:	6023      	str	r3, [r4, #0]
 801a066:	b016      	add	sp, #88	; 0x58
 801a068:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a06c <__smakebuf_r>:
 801a06c:	898b      	ldrh	r3, [r1, #12]
 801a06e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a070:	079d      	lsls	r5, r3, #30
 801a072:	4606      	mov	r6, r0
 801a074:	460c      	mov	r4, r1
 801a076:	d507      	bpl.n	801a088 <__smakebuf_r+0x1c>
 801a078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a07c:	6023      	str	r3, [r4, #0]
 801a07e:	6123      	str	r3, [r4, #16]
 801a080:	2301      	movs	r3, #1
 801a082:	6163      	str	r3, [r4, #20]
 801a084:	b002      	add	sp, #8
 801a086:	bd70      	pop	{r4, r5, r6, pc}
 801a088:	ab01      	add	r3, sp, #4
 801a08a:	466a      	mov	r2, sp
 801a08c:	f7ff ffc9 	bl	801a022 <__swhatbuf_r>
 801a090:	9900      	ldr	r1, [sp, #0]
 801a092:	4605      	mov	r5, r0
 801a094:	4630      	mov	r0, r6
 801a096:	f000 fd5d 	bl	801ab54 <_malloc_r>
 801a09a:	b948      	cbnz	r0, 801a0b0 <__smakebuf_r+0x44>
 801a09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0a0:	059a      	lsls	r2, r3, #22
 801a0a2:	d4ef      	bmi.n	801a084 <__smakebuf_r+0x18>
 801a0a4:	f023 0303 	bic.w	r3, r3, #3
 801a0a8:	f043 0302 	orr.w	r3, r3, #2
 801a0ac:	81a3      	strh	r3, [r4, #12]
 801a0ae:	e7e3      	b.n	801a078 <__smakebuf_r+0xc>
 801a0b0:	4b0d      	ldr	r3, [pc, #52]	; (801a0e8 <__smakebuf_r+0x7c>)
 801a0b2:	62b3      	str	r3, [r6, #40]	; 0x28
 801a0b4:	89a3      	ldrh	r3, [r4, #12]
 801a0b6:	6020      	str	r0, [r4, #0]
 801a0b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a0bc:	81a3      	strh	r3, [r4, #12]
 801a0be:	9b00      	ldr	r3, [sp, #0]
 801a0c0:	6163      	str	r3, [r4, #20]
 801a0c2:	9b01      	ldr	r3, [sp, #4]
 801a0c4:	6120      	str	r0, [r4, #16]
 801a0c6:	b15b      	cbz	r3, 801a0e0 <__smakebuf_r+0x74>
 801a0c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a0cc:	4630      	mov	r0, r6
 801a0ce:	f001 f8f7 	bl	801b2c0 <_isatty_r>
 801a0d2:	b128      	cbz	r0, 801a0e0 <__smakebuf_r+0x74>
 801a0d4:	89a3      	ldrh	r3, [r4, #12]
 801a0d6:	f023 0303 	bic.w	r3, r3, #3
 801a0da:	f043 0301 	orr.w	r3, r3, #1
 801a0de:	81a3      	strh	r3, [r4, #12]
 801a0e0:	89a0      	ldrh	r0, [r4, #12]
 801a0e2:	4305      	orrs	r5, r0
 801a0e4:	81a5      	strh	r5, [r4, #12]
 801a0e6:	e7cd      	b.n	801a084 <__smakebuf_r+0x18>
 801a0e8:	08019771 	.word	0x08019771

0801a0ec <malloc>:
 801a0ec:	4b02      	ldr	r3, [pc, #8]	; (801a0f8 <malloc+0xc>)
 801a0ee:	4601      	mov	r1, r0
 801a0f0:	6818      	ldr	r0, [r3, #0]
 801a0f2:	f000 bd2f 	b.w	801ab54 <_malloc_r>
 801a0f6:	bf00      	nop
 801a0f8:	200005c8 	.word	0x200005c8

0801a0fc <__ascii_mbtowc>:
 801a0fc:	b082      	sub	sp, #8
 801a0fe:	b901      	cbnz	r1, 801a102 <__ascii_mbtowc+0x6>
 801a100:	a901      	add	r1, sp, #4
 801a102:	b142      	cbz	r2, 801a116 <__ascii_mbtowc+0x1a>
 801a104:	b14b      	cbz	r3, 801a11a <__ascii_mbtowc+0x1e>
 801a106:	7813      	ldrb	r3, [r2, #0]
 801a108:	600b      	str	r3, [r1, #0]
 801a10a:	7812      	ldrb	r2, [r2, #0]
 801a10c:	1e10      	subs	r0, r2, #0
 801a10e:	bf18      	it	ne
 801a110:	2001      	movne	r0, #1
 801a112:	b002      	add	sp, #8
 801a114:	4770      	bx	lr
 801a116:	4610      	mov	r0, r2
 801a118:	e7fb      	b.n	801a112 <__ascii_mbtowc+0x16>
 801a11a:	f06f 0001 	mvn.w	r0, #1
 801a11e:	e7f8      	b.n	801a112 <__ascii_mbtowc+0x16>

0801a120 <_Balloc>:
 801a120:	b570      	push	{r4, r5, r6, lr}
 801a122:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a124:	4604      	mov	r4, r0
 801a126:	460d      	mov	r5, r1
 801a128:	b976      	cbnz	r6, 801a148 <_Balloc+0x28>
 801a12a:	2010      	movs	r0, #16
 801a12c:	f7ff ffde 	bl	801a0ec <malloc>
 801a130:	4602      	mov	r2, r0
 801a132:	6260      	str	r0, [r4, #36]	; 0x24
 801a134:	b920      	cbnz	r0, 801a140 <_Balloc+0x20>
 801a136:	4b18      	ldr	r3, [pc, #96]	; (801a198 <_Balloc+0x78>)
 801a138:	4818      	ldr	r0, [pc, #96]	; (801a19c <_Balloc+0x7c>)
 801a13a:	2166      	movs	r1, #102	; 0x66
 801a13c:	f7fe fb94 	bl	8018868 <__assert_func>
 801a140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a144:	6006      	str	r6, [r0, #0]
 801a146:	60c6      	str	r6, [r0, #12]
 801a148:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a14a:	68f3      	ldr	r3, [r6, #12]
 801a14c:	b183      	cbz	r3, 801a170 <_Balloc+0x50>
 801a14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a150:	68db      	ldr	r3, [r3, #12]
 801a152:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a156:	b9b8      	cbnz	r0, 801a188 <_Balloc+0x68>
 801a158:	2101      	movs	r1, #1
 801a15a:	fa01 f605 	lsl.w	r6, r1, r5
 801a15e:	1d72      	adds	r2, r6, #5
 801a160:	0092      	lsls	r2, r2, #2
 801a162:	4620      	mov	r0, r4
 801a164:	f000 fc97 	bl	801aa96 <_calloc_r>
 801a168:	b160      	cbz	r0, 801a184 <_Balloc+0x64>
 801a16a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a16e:	e00e      	b.n	801a18e <_Balloc+0x6e>
 801a170:	2221      	movs	r2, #33	; 0x21
 801a172:	2104      	movs	r1, #4
 801a174:	4620      	mov	r0, r4
 801a176:	f000 fc8e 	bl	801aa96 <_calloc_r>
 801a17a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a17c:	60f0      	str	r0, [r6, #12]
 801a17e:	68db      	ldr	r3, [r3, #12]
 801a180:	2b00      	cmp	r3, #0
 801a182:	d1e4      	bne.n	801a14e <_Balloc+0x2e>
 801a184:	2000      	movs	r0, #0
 801a186:	bd70      	pop	{r4, r5, r6, pc}
 801a188:	6802      	ldr	r2, [r0, #0]
 801a18a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a18e:	2300      	movs	r3, #0
 801a190:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a194:	e7f7      	b.n	801a186 <_Balloc+0x66>
 801a196:	bf00      	nop
 801a198:	08032c2c 	.word	0x08032c2c
 801a19c:	08032ef4 	.word	0x08032ef4

0801a1a0 <_Bfree>:
 801a1a0:	b570      	push	{r4, r5, r6, lr}
 801a1a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a1a4:	4605      	mov	r5, r0
 801a1a6:	460c      	mov	r4, r1
 801a1a8:	b976      	cbnz	r6, 801a1c8 <_Bfree+0x28>
 801a1aa:	2010      	movs	r0, #16
 801a1ac:	f7ff ff9e 	bl	801a0ec <malloc>
 801a1b0:	4602      	mov	r2, r0
 801a1b2:	6268      	str	r0, [r5, #36]	; 0x24
 801a1b4:	b920      	cbnz	r0, 801a1c0 <_Bfree+0x20>
 801a1b6:	4b09      	ldr	r3, [pc, #36]	; (801a1dc <_Bfree+0x3c>)
 801a1b8:	4809      	ldr	r0, [pc, #36]	; (801a1e0 <_Bfree+0x40>)
 801a1ba:	218a      	movs	r1, #138	; 0x8a
 801a1bc:	f7fe fb54 	bl	8018868 <__assert_func>
 801a1c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a1c4:	6006      	str	r6, [r0, #0]
 801a1c6:	60c6      	str	r6, [r0, #12]
 801a1c8:	b13c      	cbz	r4, 801a1da <_Bfree+0x3a>
 801a1ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a1cc:	6862      	ldr	r2, [r4, #4]
 801a1ce:	68db      	ldr	r3, [r3, #12]
 801a1d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a1d4:	6021      	str	r1, [r4, #0]
 801a1d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a1da:	bd70      	pop	{r4, r5, r6, pc}
 801a1dc:	08032c2c 	.word	0x08032c2c
 801a1e0:	08032ef4 	.word	0x08032ef4

0801a1e4 <__multadd>:
 801a1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e8:	690e      	ldr	r6, [r1, #16]
 801a1ea:	4607      	mov	r7, r0
 801a1ec:	4698      	mov	r8, r3
 801a1ee:	460c      	mov	r4, r1
 801a1f0:	f101 0014 	add.w	r0, r1, #20
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	6805      	ldr	r5, [r0, #0]
 801a1f8:	b2a9      	uxth	r1, r5
 801a1fa:	fb02 8101 	mla	r1, r2, r1, r8
 801a1fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801a202:	0c2d      	lsrs	r5, r5, #16
 801a204:	fb02 c505 	mla	r5, r2, r5, ip
 801a208:	b289      	uxth	r1, r1
 801a20a:	3301      	adds	r3, #1
 801a20c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801a210:	429e      	cmp	r6, r3
 801a212:	f840 1b04 	str.w	r1, [r0], #4
 801a216:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801a21a:	dcec      	bgt.n	801a1f6 <__multadd+0x12>
 801a21c:	f1b8 0f00 	cmp.w	r8, #0
 801a220:	d022      	beq.n	801a268 <__multadd+0x84>
 801a222:	68a3      	ldr	r3, [r4, #8]
 801a224:	42b3      	cmp	r3, r6
 801a226:	dc19      	bgt.n	801a25c <__multadd+0x78>
 801a228:	6861      	ldr	r1, [r4, #4]
 801a22a:	4638      	mov	r0, r7
 801a22c:	3101      	adds	r1, #1
 801a22e:	f7ff ff77 	bl	801a120 <_Balloc>
 801a232:	4605      	mov	r5, r0
 801a234:	b928      	cbnz	r0, 801a242 <__multadd+0x5e>
 801a236:	4602      	mov	r2, r0
 801a238:	4b0d      	ldr	r3, [pc, #52]	; (801a270 <__multadd+0x8c>)
 801a23a:	480e      	ldr	r0, [pc, #56]	; (801a274 <__multadd+0x90>)
 801a23c:	21b5      	movs	r1, #181	; 0xb5
 801a23e:	f7fe fb13 	bl	8018868 <__assert_func>
 801a242:	6922      	ldr	r2, [r4, #16]
 801a244:	3202      	adds	r2, #2
 801a246:	f104 010c 	add.w	r1, r4, #12
 801a24a:	0092      	lsls	r2, r2, #2
 801a24c:	300c      	adds	r0, #12
 801a24e:	f7fc fd0d 	bl	8016c6c <memcpy>
 801a252:	4621      	mov	r1, r4
 801a254:	4638      	mov	r0, r7
 801a256:	f7ff ffa3 	bl	801a1a0 <_Bfree>
 801a25a:	462c      	mov	r4, r5
 801a25c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a260:	3601      	adds	r6, #1
 801a262:	f8c3 8014 	str.w	r8, [r3, #20]
 801a266:	6126      	str	r6, [r4, #16]
 801a268:	4620      	mov	r0, r4
 801a26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a26e:	bf00      	nop
 801a270:	08032e01 	.word	0x08032e01
 801a274:	08032ef4 	.word	0x08032ef4

0801a278 <__s2b>:
 801a278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a27c:	460c      	mov	r4, r1
 801a27e:	4615      	mov	r5, r2
 801a280:	461f      	mov	r7, r3
 801a282:	2209      	movs	r2, #9
 801a284:	3308      	adds	r3, #8
 801a286:	4606      	mov	r6, r0
 801a288:	fb93 f3f2 	sdiv	r3, r3, r2
 801a28c:	2100      	movs	r1, #0
 801a28e:	2201      	movs	r2, #1
 801a290:	429a      	cmp	r2, r3
 801a292:	db09      	blt.n	801a2a8 <__s2b+0x30>
 801a294:	4630      	mov	r0, r6
 801a296:	f7ff ff43 	bl	801a120 <_Balloc>
 801a29a:	b940      	cbnz	r0, 801a2ae <__s2b+0x36>
 801a29c:	4602      	mov	r2, r0
 801a29e:	4b19      	ldr	r3, [pc, #100]	; (801a304 <__s2b+0x8c>)
 801a2a0:	4819      	ldr	r0, [pc, #100]	; (801a308 <__s2b+0x90>)
 801a2a2:	21ce      	movs	r1, #206	; 0xce
 801a2a4:	f7fe fae0 	bl	8018868 <__assert_func>
 801a2a8:	0052      	lsls	r2, r2, #1
 801a2aa:	3101      	adds	r1, #1
 801a2ac:	e7f0      	b.n	801a290 <__s2b+0x18>
 801a2ae:	9b08      	ldr	r3, [sp, #32]
 801a2b0:	6143      	str	r3, [r0, #20]
 801a2b2:	2d09      	cmp	r5, #9
 801a2b4:	f04f 0301 	mov.w	r3, #1
 801a2b8:	6103      	str	r3, [r0, #16]
 801a2ba:	dd16      	ble.n	801a2ea <__s2b+0x72>
 801a2bc:	f104 0909 	add.w	r9, r4, #9
 801a2c0:	46c8      	mov	r8, r9
 801a2c2:	442c      	add	r4, r5
 801a2c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 801a2c8:	4601      	mov	r1, r0
 801a2ca:	3b30      	subs	r3, #48	; 0x30
 801a2cc:	220a      	movs	r2, #10
 801a2ce:	4630      	mov	r0, r6
 801a2d0:	f7ff ff88 	bl	801a1e4 <__multadd>
 801a2d4:	45a0      	cmp	r8, r4
 801a2d6:	d1f5      	bne.n	801a2c4 <__s2b+0x4c>
 801a2d8:	f1a5 0408 	sub.w	r4, r5, #8
 801a2dc:	444c      	add	r4, r9
 801a2de:	1b2d      	subs	r5, r5, r4
 801a2e0:	1963      	adds	r3, r4, r5
 801a2e2:	42bb      	cmp	r3, r7
 801a2e4:	db04      	blt.n	801a2f0 <__s2b+0x78>
 801a2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a2ea:	340a      	adds	r4, #10
 801a2ec:	2509      	movs	r5, #9
 801a2ee:	e7f6      	b.n	801a2de <__s2b+0x66>
 801a2f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 801a2f4:	4601      	mov	r1, r0
 801a2f6:	3b30      	subs	r3, #48	; 0x30
 801a2f8:	220a      	movs	r2, #10
 801a2fa:	4630      	mov	r0, r6
 801a2fc:	f7ff ff72 	bl	801a1e4 <__multadd>
 801a300:	e7ee      	b.n	801a2e0 <__s2b+0x68>
 801a302:	bf00      	nop
 801a304:	08032e01 	.word	0x08032e01
 801a308:	08032ef4 	.word	0x08032ef4

0801a30c <__hi0bits>:
 801a30c:	0c03      	lsrs	r3, r0, #16
 801a30e:	041b      	lsls	r3, r3, #16
 801a310:	b9d3      	cbnz	r3, 801a348 <__hi0bits+0x3c>
 801a312:	0400      	lsls	r0, r0, #16
 801a314:	2310      	movs	r3, #16
 801a316:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a31a:	bf04      	itt	eq
 801a31c:	0200      	lsleq	r0, r0, #8
 801a31e:	3308      	addeq	r3, #8
 801a320:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a324:	bf04      	itt	eq
 801a326:	0100      	lsleq	r0, r0, #4
 801a328:	3304      	addeq	r3, #4
 801a32a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a32e:	bf04      	itt	eq
 801a330:	0080      	lsleq	r0, r0, #2
 801a332:	3302      	addeq	r3, #2
 801a334:	2800      	cmp	r0, #0
 801a336:	db05      	blt.n	801a344 <__hi0bits+0x38>
 801a338:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a33c:	f103 0301 	add.w	r3, r3, #1
 801a340:	bf08      	it	eq
 801a342:	2320      	moveq	r3, #32
 801a344:	4618      	mov	r0, r3
 801a346:	4770      	bx	lr
 801a348:	2300      	movs	r3, #0
 801a34a:	e7e4      	b.n	801a316 <__hi0bits+0xa>

0801a34c <__lo0bits>:
 801a34c:	6803      	ldr	r3, [r0, #0]
 801a34e:	f013 0207 	ands.w	r2, r3, #7
 801a352:	4601      	mov	r1, r0
 801a354:	d00b      	beq.n	801a36e <__lo0bits+0x22>
 801a356:	07da      	lsls	r2, r3, #31
 801a358:	d424      	bmi.n	801a3a4 <__lo0bits+0x58>
 801a35a:	0798      	lsls	r0, r3, #30
 801a35c:	bf49      	itett	mi
 801a35e:	085b      	lsrmi	r3, r3, #1
 801a360:	089b      	lsrpl	r3, r3, #2
 801a362:	2001      	movmi	r0, #1
 801a364:	600b      	strmi	r3, [r1, #0]
 801a366:	bf5c      	itt	pl
 801a368:	600b      	strpl	r3, [r1, #0]
 801a36a:	2002      	movpl	r0, #2
 801a36c:	4770      	bx	lr
 801a36e:	b298      	uxth	r0, r3
 801a370:	b9b0      	cbnz	r0, 801a3a0 <__lo0bits+0x54>
 801a372:	0c1b      	lsrs	r3, r3, #16
 801a374:	2010      	movs	r0, #16
 801a376:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a37a:	bf04      	itt	eq
 801a37c:	0a1b      	lsreq	r3, r3, #8
 801a37e:	3008      	addeq	r0, #8
 801a380:	071a      	lsls	r2, r3, #28
 801a382:	bf04      	itt	eq
 801a384:	091b      	lsreq	r3, r3, #4
 801a386:	3004      	addeq	r0, #4
 801a388:	079a      	lsls	r2, r3, #30
 801a38a:	bf04      	itt	eq
 801a38c:	089b      	lsreq	r3, r3, #2
 801a38e:	3002      	addeq	r0, #2
 801a390:	07da      	lsls	r2, r3, #31
 801a392:	d403      	bmi.n	801a39c <__lo0bits+0x50>
 801a394:	085b      	lsrs	r3, r3, #1
 801a396:	f100 0001 	add.w	r0, r0, #1
 801a39a:	d005      	beq.n	801a3a8 <__lo0bits+0x5c>
 801a39c:	600b      	str	r3, [r1, #0]
 801a39e:	4770      	bx	lr
 801a3a0:	4610      	mov	r0, r2
 801a3a2:	e7e8      	b.n	801a376 <__lo0bits+0x2a>
 801a3a4:	2000      	movs	r0, #0
 801a3a6:	4770      	bx	lr
 801a3a8:	2020      	movs	r0, #32
 801a3aa:	4770      	bx	lr

0801a3ac <__i2b>:
 801a3ac:	b510      	push	{r4, lr}
 801a3ae:	460c      	mov	r4, r1
 801a3b0:	2101      	movs	r1, #1
 801a3b2:	f7ff feb5 	bl	801a120 <_Balloc>
 801a3b6:	4602      	mov	r2, r0
 801a3b8:	b928      	cbnz	r0, 801a3c6 <__i2b+0x1a>
 801a3ba:	4b05      	ldr	r3, [pc, #20]	; (801a3d0 <__i2b+0x24>)
 801a3bc:	4805      	ldr	r0, [pc, #20]	; (801a3d4 <__i2b+0x28>)
 801a3be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a3c2:	f7fe fa51 	bl	8018868 <__assert_func>
 801a3c6:	2301      	movs	r3, #1
 801a3c8:	6144      	str	r4, [r0, #20]
 801a3ca:	6103      	str	r3, [r0, #16]
 801a3cc:	bd10      	pop	{r4, pc}
 801a3ce:	bf00      	nop
 801a3d0:	08032e01 	.word	0x08032e01
 801a3d4:	08032ef4 	.word	0x08032ef4

0801a3d8 <__multiply>:
 801a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3dc:	4614      	mov	r4, r2
 801a3de:	690a      	ldr	r2, [r1, #16]
 801a3e0:	6923      	ldr	r3, [r4, #16]
 801a3e2:	429a      	cmp	r2, r3
 801a3e4:	bfb8      	it	lt
 801a3e6:	460b      	movlt	r3, r1
 801a3e8:	460d      	mov	r5, r1
 801a3ea:	bfbc      	itt	lt
 801a3ec:	4625      	movlt	r5, r4
 801a3ee:	461c      	movlt	r4, r3
 801a3f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a3f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a3f8:	68ab      	ldr	r3, [r5, #8]
 801a3fa:	6869      	ldr	r1, [r5, #4]
 801a3fc:	eb0a 0709 	add.w	r7, sl, r9
 801a400:	42bb      	cmp	r3, r7
 801a402:	b085      	sub	sp, #20
 801a404:	bfb8      	it	lt
 801a406:	3101      	addlt	r1, #1
 801a408:	f7ff fe8a 	bl	801a120 <_Balloc>
 801a40c:	b930      	cbnz	r0, 801a41c <__multiply+0x44>
 801a40e:	4602      	mov	r2, r0
 801a410:	4b42      	ldr	r3, [pc, #264]	; (801a51c <__multiply+0x144>)
 801a412:	4843      	ldr	r0, [pc, #268]	; (801a520 <__multiply+0x148>)
 801a414:	f240 115d 	movw	r1, #349	; 0x15d
 801a418:	f7fe fa26 	bl	8018868 <__assert_func>
 801a41c:	f100 0614 	add.w	r6, r0, #20
 801a420:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a424:	4633      	mov	r3, r6
 801a426:	2200      	movs	r2, #0
 801a428:	4543      	cmp	r3, r8
 801a42a:	d31e      	bcc.n	801a46a <__multiply+0x92>
 801a42c:	f105 0c14 	add.w	ip, r5, #20
 801a430:	f104 0314 	add.w	r3, r4, #20
 801a434:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a438:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a43c:	9202      	str	r2, [sp, #8]
 801a43e:	ebac 0205 	sub.w	r2, ip, r5
 801a442:	3a15      	subs	r2, #21
 801a444:	f022 0203 	bic.w	r2, r2, #3
 801a448:	3204      	adds	r2, #4
 801a44a:	f105 0115 	add.w	r1, r5, #21
 801a44e:	458c      	cmp	ip, r1
 801a450:	bf38      	it	cc
 801a452:	2204      	movcc	r2, #4
 801a454:	9201      	str	r2, [sp, #4]
 801a456:	9a02      	ldr	r2, [sp, #8]
 801a458:	9303      	str	r3, [sp, #12]
 801a45a:	429a      	cmp	r2, r3
 801a45c:	d808      	bhi.n	801a470 <__multiply+0x98>
 801a45e:	2f00      	cmp	r7, #0
 801a460:	dc55      	bgt.n	801a50e <__multiply+0x136>
 801a462:	6107      	str	r7, [r0, #16]
 801a464:	b005      	add	sp, #20
 801a466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a46a:	f843 2b04 	str.w	r2, [r3], #4
 801a46e:	e7db      	b.n	801a428 <__multiply+0x50>
 801a470:	f8b3 a000 	ldrh.w	sl, [r3]
 801a474:	f1ba 0f00 	cmp.w	sl, #0
 801a478:	d020      	beq.n	801a4bc <__multiply+0xe4>
 801a47a:	f105 0e14 	add.w	lr, r5, #20
 801a47e:	46b1      	mov	r9, r6
 801a480:	2200      	movs	r2, #0
 801a482:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a486:	f8d9 b000 	ldr.w	fp, [r9]
 801a48a:	b2a1      	uxth	r1, r4
 801a48c:	fa1f fb8b 	uxth.w	fp, fp
 801a490:	fb0a b101 	mla	r1, sl, r1, fp
 801a494:	4411      	add	r1, r2
 801a496:	f8d9 2000 	ldr.w	r2, [r9]
 801a49a:	0c24      	lsrs	r4, r4, #16
 801a49c:	0c12      	lsrs	r2, r2, #16
 801a49e:	fb0a 2404 	mla	r4, sl, r4, r2
 801a4a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a4a6:	b289      	uxth	r1, r1
 801a4a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a4ac:	45f4      	cmp	ip, lr
 801a4ae:	f849 1b04 	str.w	r1, [r9], #4
 801a4b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a4b6:	d8e4      	bhi.n	801a482 <__multiply+0xaa>
 801a4b8:	9901      	ldr	r1, [sp, #4]
 801a4ba:	5072      	str	r2, [r6, r1]
 801a4bc:	9a03      	ldr	r2, [sp, #12]
 801a4be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a4c2:	3304      	adds	r3, #4
 801a4c4:	f1b9 0f00 	cmp.w	r9, #0
 801a4c8:	d01f      	beq.n	801a50a <__multiply+0x132>
 801a4ca:	6834      	ldr	r4, [r6, #0]
 801a4cc:	f105 0114 	add.w	r1, r5, #20
 801a4d0:	46b6      	mov	lr, r6
 801a4d2:	f04f 0a00 	mov.w	sl, #0
 801a4d6:	880a      	ldrh	r2, [r1, #0]
 801a4d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a4dc:	fb09 b202 	mla	r2, r9, r2, fp
 801a4e0:	4492      	add	sl, r2
 801a4e2:	b2a4      	uxth	r4, r4
 801a4e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a4e8:	f84e 4b04 	str.w	r4, [lr], #4
 801a4ec:	f851 4b04 	ldr.w	r4, [r1], #4
 801a4f0:	f8be 2000 	ldrh.w	r2, [lr]
 801a4f4:	0c24      	lsrs	r4, r4, #16
 801a4f6:	fb09 2404 	mla	r4, r9, r4, r2
 801a4fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a4fe:	458c      	cmp	ip, r1
 801a500:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a504:	d8e7      	bhi.n	801a4d6 <__multiply+0xfe>
 801a506:	9a01      	ldr	r2, [sp, #4]
 801a508:	50b4      	str	r4, [r6, r2]
 801a50a:	3604      	adds	r6, #4
 801a50c:	e7a3      	b.n	801a456 <__multiply+0x7e>
 801a50e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a512:	2b00      	cmp	r3, #0
 801a514:	d1a5      	bne.n	801a462 <__multiply+0x8a>
 801a516:	3f01      	subs	r7, #1
 801a518:	e7a1      	b.n	801a45e <__multiply+0x86>
 801a51a:	bf00      	nop
 801a51c:	08032e01 	.word	0x08032e01
 801a520:	08032ef4 	.word	0x08032ef4

0801a524 <__pow5mult>:
 801a524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a528:	4615      	mov	r5, r2
 801a52a:	f012 0203 	ands.w	r2, r2, #3
 801a52e:	4606      	mov	r6, r0
 801a530:	460f      	mov	r7, r1
 801a532:	d007      	beq.n	801a544 <__pow5mult+0x20>
 801a534:	4c25      	ldr	r4, [pc, #148]	; (801a5cc <__pow5mult+0xa8>)
 801a536:	3a01      	subs	r2, #1
 801a538:	2300      	movs	r3, #0
 801a53a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a53e:	f7ff fe51 	bl	801a1e4 <__multadd>
 801a542:	4607      	mov	r7, r0
 801a544:	10ad      	asrs	r5, r5, #2
 801a546:	d03d      	beq.n	801a5c4 <__pow5mult+0xa0>
 801a548:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a54a:	b97c      	cbnz	r4, 801a56c <__pow5mult+0x48>
 801a54c:	2010      	movs	r0, #16
 801a54e:	f7ff fdcd 	bl	801a0ec <malloc>
 801a552:	4602      	mov	r2, r0
 801a554:	6270      	str	r0, [r6, #36]	; 0x24
 801a556:	b928      	cbnz	r0, 801a564 <__pow5mult+0x40>
 801a558:	4b1d      	ldr	r3, [pc, #116]	; (801a5d0 <__pow5mult+0xac>)
 801a55a:	481e      	ldr	r0, [pc, #120]	; (801a5d4 <__pow5mult+0xb0>)
 801a55c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a560:	f7fe f982 	bl	8018868 <__assert_func>
 801a564:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a568:	6004      	str	r4, [r0, #0]
 801a56a:	60c4      	str	r4, [r0, #12]
 801a56c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a570:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a574:	b94c      	cbnz	r4, 801a58a <__pow5mult+0x66>
 801a576:	f240 2171 	movw	r1, #625	; 0x271
 801a57a:	4630      	mov	r0, r6
 801a57c:	f7ff ff16 	bl	801a3ac <__i2b>
 801a580:	2300      	movs	r3, #0
 801a582:	f8c8 0008 	str.w	r0, [r8, #8]
 801a586:	4604      	mov	r4, r0
 801a588:	6003      	str	r3, [r0, #0]
 801a58a:	f04f 0900 	mov.w	r9, #0
 801a58e:	07eb      	lsls	r3, r5, #31
 801a590:	d50a      	bpl.n	801a5a8 <__pow5mult+0x84>
 801a592:	4639      	mov	r1, r7
 801a594:	4622      	mov	r2, r4
 801a596:	4630      	mov	r0, r6
 801a598:	f7ff ff1e 	bl	801a3d8 <__multiply>
 801a59c:	4639      	mov	r1, r7
 801a59e:	4680      	mov	r8, r0
 801a5a0:	4630      	mov	r0, r6
 801a5a2:	f7ff fdfd 	bl	801a1a0 <_Bfree>
 801a5a6:	4647      	mov	r7, r8
 801a5a8:	106d      	asrs	r5, r5, #1
 801a5aa:	d00b      	beq.n	801a5c4 <__pow5mult+0xa0>
 801a5ac:	6820      	ldr	r0, [r4, #0]
 801a5ae:	b938      	cbnz	r0, 801a5c0 <__pow5mult+0x9c>
 801a5b0:	4622      	mov	r2, r4
 801a5b2:	4621      	mov	r1, r4
 801a5b4:	4630      	mov	r0, r6
 801a5b6:	f7ff ff0f 	bl	801a3d8 <__multiply>
 801a5ba:	6020      	str	r0, [r4, #0]
 801a5bc:	f8c0 9000 	str.w	r9, [r0]
 801a5c0:	4604      	mov	r4, r0
 801a5c2:	e7e4      	b.n	801a58e <__pow5mult+0x6a>
 801a5c4:	4638      	mov	r0, r7
 801a5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5ca:	bf00      	nop
 801a5cc:	08033048 	.word	0x08033048
 801a5d0:	08032c2c 	.word	0x08032c2c
 801a5d4:	08032ef4 	.word	0x08032ef4

0801a5d8 <__lshift>:
 801a5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5dc:	460c      	mov	r4, r1
 801a5de:	6849      	ldr	r1, [r1, #4]
 801a5e0:	6923      	ldr	r3, [r4, #16]
 801a5e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a5e6:	68a3      	ldr	r3, [r4, #8]
 801a5e8:	4607      	mov	r7, r0
 801a5ea:	4691      	mov	r9, r2
 801a5ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a5f0:	f108 0601 	add.w	r6, r8, #1
 801a5f4:	42b3      	cmp	r3, r6
 801a5f6:	db0b      	blt.n	801a610 <__lshift+0x38>
 801a5f8:	4638      	mov	r0, r7
 801a5fa:	f7ff fd91 	bl	801a120 <_Balloc>
 801a5fe:	4605      	mov	r5, r0
 801a600:	b948      	cbnz	r0, 801a616 <__lshift+0x3e>
 801a602:	4602      	mov	r2, r0
 801a604:	4b28      	ldr	r3, [pc, #160]	; (801a6a8 <__lshift+0xd0>)
 801a606:	4829      	ldr	r0, [pc, #164]	; (801a6ac <__lshift+0xd4>)
 801a608:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a60c:	f7fe f92c 	bl	8018868 <__assert_func>
 801a610:	3101      	adds	r1, #1
 801a612:	005b      	lsls	r3, r3, #1
 801a614:	e7ee      	b.n	801a5f4 <__lshift+0x1c>
 801a616:	2300      	movs	r3, #0
 801a618:	f100 0114 	add.w	r1, r0, #20
 801a61c:	f100 0210 	add.w	r2, r0, #16
 801a620:	4618      	mov	r0, r3
 801a622:	4553      	cmp	r3, sl
 801a624:	db33      	blt.n	801a68e <__lshift+0xb6>
 801a626:	6920      	ldr	r0, [r4, #16]
 801a628:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a62c:	f104 0314 	add.w	r3, r4, #20
 801a630:	f019 091f 	ands.w	r9, r9, #31
 801a634:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a638:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a63c:	d02b      	beq.n	801a696 <__lshift+0xbe>
 801a63e:	f1c9 0e20 	rsb	lr, r9, #32
 801a642:	468a      	mov	sl, r1
 801a644:	2200      	movs	r2, #0
 801a646:	6818      	ldr	r0, [r3, #0]
 801a648:	fa00 f009 	lsl.w	r0, r0, r9
 801a64c:	4302      	orrs	r2, r0
 801a64e:	f84a 2b04 	str.w	r2, [sl], #4
 801a652:	f853 2b04 	ldr.w	r2, [r3], #4
 801a656:	459c      	cmp	ip, r3
 801a658:	fa22 f20e 	lsr.w	r2, r2, lr
 801a65c:	d8f3      	bhi.n	801a646 <__lshift+0x6e>
 801a65e:	ebac 0304 	sub.w	r3, ip, r4
 801a662:	3b15      	subs	r3, #21
 801a664:	f023 0303 	bic.w	r3, r3, #3
 801a668:	3304      	adds	r3, #4
 801a66a:	f104 0015 	add.w	r0, r4, #21
 801a66e:	4584      	cmp	ip, r0
 801a670:	bf38      	it	cc
 801a672:	2304      	movcc	r3, #4
 801a674:	50ca      	str	r2, [r1, r3]
 801a676:	b10a      	cbz	r2, 801a67c <__lshift+0xa4>
 801a678:	f108 0602 	add.w	r6, r8, #2
 801a67c:	3e01      	subs	r6, #1
 801a67e:	4638      	mov	r0, r7
 801a680:	612e      	str	r6, [r5, #16]
 801a682:	4621      	mov	r1, r4
 801a684:	f7ff fd8c 	bl	801a1a0 <_Bfree>
 801a688:	4628      	mov	r0, r5
 801a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a68e:	f842 0f04 	str.w	r0, [r2, #4]!
 801a692:	3301      	adds	r3, #1
 801a694:	e7c5      	b.n	801a622 <__lshift+0x4a>
 801a696:	3904      	subs	r1, #4
 801a698:	f853 2b04 	ldr.w	r2, [r3], #4
 801a69c:	f841 2f04 	str.w	r2, [r1, #4]!
 801a6a0:	459c      	cmp	ip, r3
 801a6a2:	d8f9      	bhi.n	801a698 <__lshift+0xc0>
 801a6a4:	e7ea      	b.n	801a67c <__lshift+0xa4>
 801a6a6:	bf00      	nop
 801a6a8:	08032e01 	.word	0x08032e01
 801a6ac:	08032ef4 	.word	0x08032ef4

0801a6b0 <__mcmp>:
 801a6b0:	b530      	push	{r4, r5, lr}
 801a6b2:	6902      	ldr	r2, [r0, #16]
 801a6b4:	690c      	ldr	r4, [r1, #16]
 801a6b6:	1b12      	subs	r2, r2, r4
 801a6b8:	d10e      	bne.n	801a6d8 <__mcmp+0x28>
 801a6ba:	f100 0314 	add.w	r3, r0, #20
 801a6be:	3114      	adds	r1, #20
 801a6c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a6c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a6c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a6cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a6d0:	42a5      	cmp	r5, r4
 801a6d2:	d003      	beq.n	801a6dc <__mcmp+0x2c>
 801a6d4:	d305      	bcc.n	801a6e2 <__mcmp+0x32>
 801a6d6:	2201      	movs	r2, #1
 801a6d8:	4610      	mov	r0, r2
 801a6da:	bd30      	pop	{r4, r5, pc}
 801a6dc:	4283      	cmp	r3, r0
 801a6de:	d3f3      	bcc.n	801a6c8 <__mcmp+0x18>
 801a6e0:	e7fa      	b.n	801a6d8 <__mcmp+0x28>
 801a6e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a6e6:	e7f7      	b.n	801a6d8 <__mcmp+0x28>

0801a6e8 <__mdiff>:
 801a6e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6ec:	460c      	mov	r4, r1
 801a6ee:	4606      	mov	r6, r0
 801a6f0:	4611      	mov	r1, r2
 801a6f2:	4620      	mov	r0, r4
 801a6f4:	4617      	mov	r7, r2
 801a6f6:	f7ff ffdb 	bl	801a6b0 <__mcmp>
 801a6fa:	1e05      	subs	r5, r0, #0
 801a6fc:	d110      	bne.n	801a720 <__mdiff+0x38>
 801a6fe:	4629      	mov	r1, r5
 801a700:	4630      	mov	r0, r6
 801a702:	f7ff fd0d 	bl	801a120 <_Balloc>
 801a706:	b930      	cbnz	r0, 801a716 <__mdiff+0x2e>
 801a708:	4b39      	ldr	r3, [pc, #228]	; (801a7f0 <__mdiff+0x108>)
 801a70a:	4602      	mov	r2, r0
 801a70c:	f240 2132 	movw	r1, #562	; 0x232
 801a710:	4838      	ldr	r0, [pc, #224]	; (801a7f4 <__mdiff+0x10c>)
 801a712:	f7fe f8a9 	bl	8018868 <__assert_func>
 801a716:	2301      	movs	r3, #1
 801a718:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a71c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a720:	bfa4      	itt	ge
 801a722:	463b      	movge	r3, r7
 801a724:	4627      	movge	r7, r4
 801a726:	4630      	mov	r0, r6
 801a728:	6879      	ldr	r1, [r7, #4]
 801a72a:	bfa6      	itte	ge
 801a72c:	461c      	movge	r4, r3
 801a72e:	2500      	movge	r5, #0
 801a730:	2501      	movlt	r5, #1
 801a732:	f7ff fcf5 	bl	801a120 <_Balloc>
 801a736:	b920      	cbnz	r0, 801a742 <__mdiff+0x5a>
 801a738:	4b2d      	ldr	r3, [pc, #180]	; (801a7f0 <__mdiff+0x108>)
 801a73a:	4602      	mov	r2, r0
 801a73c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a740:	e7e6      	b.n	801a710 <__mdiff+0x28>
 801a742:	693e      	ldr	r6, [r7, #16]
 801a744:	60c5      	str	r5, [r0, #12]
 801a746:	6925      	ldr	r5, [r4, #16]
 801a748:	f107 0114 	add.w	r1, r7, #20
 801a74c:	f104 0914 	add.w	r9, r4, #20
 801a750:	f100 0e14 	add.w	lr, r0, #20
 801a754:	f107 0210 	add.w	r2, r7, #16
 801a758:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a75c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a760:	46f2      	mov	sl, lr
 801a762:	2700      	movs	r7, #0
 801a764:	f859 3b04 	ldr.w	r3, [r9], #4
 801a768:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a76c:	fa1f f883 	uxth.w	r8, r3
 801a770:	fa17 f78b 	uxtah	r7, r7, fp
 801a774:	0c1b      	lsrs	r3, r3, #16
 801a776:	eba7 0808 	sub.w	r8, r7, r8
 801a77a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a77e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a782:	fa1f f888 	uxth.w	r8, r8
 801a786:	141f      	asrs	r7, r3, #16
 801a788:	454d      	cmp	r5, r9
 801a78a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a78e:	f84a 3b04 	str.w	r3, [sl], #4
 801a792:	d8e7      	bhi.n	801a764 <__mdiff+0x7c>
 801a794:	1b2b      	subs	r3, r5, r4
 801a796:	3b15      	subs	r3, #21
 801a798:	f023 0303 	bic.w	r3, r3, #3
 801a79c:	3304      	adds	r3, #4
 801a79e:	3415      	adds	r4, #21
 801a7a0:	42a5      	cmp	r5, r4
 801a7a2:	bf38      	it	cc
 801a7a4:	2304      	movcc	r3, #4
 801a7a6:	4419      	add	r1, r3
 801a7a8:	4473      	add	r3, lr
 801a7aa:	469e      	mov	lr, r3
 801a7ac:	460d      	mov	r5, r1
 801a7ae:	4565      	cmp	r5, ip
 801a7b0:	d30e      	bcc.n	801a7d0 <__mdiff+0xe8>
 801a7b2:	f10c 0203 	add.w	r2, ip, #3
 801a7b6:	1a52      	subs	r2, r2, r1
 801a7b8:	f022 0203 	bic.w	r2, r2, #3
 801a7bc:	3903      	subs	r1, #3
 801a7be:	458c      	cmp	ip, r1
 801a7c0:	bf38      	it	cc
 801a7c2:	2200      	movcc	r2, #0
 801a7c4:	441a      	add	r2, r3
 801a7c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a7ca:	b17b      	cbz	r3, 801a7ec <__mdiff+0x104>
 801a7cc:	6106      	str	r6, [r0, #16]
 801a7ce:	e7a5      	b.n	801a71c <__mdiff+0x34>
 801a7d0:	f855 8b04 	ldr.w	r8, [r5], #4
 801a7d4:	fa17 f488 	uxtah	r4, r7, r8
 801a7d8:	1422      	asrs	r2, r4, #16
 801a7da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a7de:	b2a4      	uxth	r4, r4
 801a7e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a7e4:	f84e 4b04 	str.w	r4, [lr], #4
 801a7e8:	1417      	asrs	r7, r2, #16
 801a7ea:	e7e0      	b.n	801a7ae <__mdiff+0xc6>
 801a7ec:	3e01      	subs	r6, #1
 801a7ee:	e7ea      	b.n	801a7c6 <__mdiff+0xde>
 801a7f0:	08032e01 	.word	0x08032e01
 801a7f4:	08032ef4 	.word	0x08032ef4

0801a7f8 <__ulp>:
 801a7f8:	b082      	sub	sp, #8
 801a7fa:	ed8d 0b00 	vstr	d0, [sp]
 801a7fe:	9b01      	ldr	r3, [sp, #4]
 801a800:	4912      	ldr	r1, [pc, #72]	; (801a84c <__ulp+0x54>)
 801a802:	4019      	ands	r1, r3
 801a804:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a808:	2900      	cmp	r1, #0
 801a80a:	dd05      	ble.n	801a818 <__ulp+0x20>
 801a80c:	2200      	movs	r2, #0
 801a80e:	460b      	mov	r3, r1
 801a810:	ec43 2b10 	vmov	d0, r2, r3
 801a814:	b002      	add	sp, #8
 801a816:	4770      	bx	lr
 801a818:	4249      	negs	r1, r1
 801a81a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a81e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a822:	f04f 0200 	mov.w	r2, #0
 801a826:	f04f 0300 	mov.w	r3, #0
 801a82a:	da04      	bge.n	801a836 <__ulp+0x3e>
 801a82c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a830:	fa41 f300 	asr.w	r3, r1, r0
 801a834:	e7ec      	b.n	801a810 <__ulp+0x18>
 801a836:	f1a0 0114 	sub.w	r1, r0, #20
 801a83a:	291e      	cmp	r1, #30
 801a83c:	bfda      	itte	le
 801a83e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a842:	fa20 f101 	lsrle.w	r1, r0, r1
 801a846:	2101      	movgt	r1, #1
 801a848:	460a      	mov	r2, r1
 801a84a:	e7e1      	b.n	801a810 <__ulp+0x18>
 801a84c:	7ff00000 	.word	0x7ff00000

0801a850 <__b2d>:
 801a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a852:	6905      	ldr	r5, [r0, #16]
 801a854:	f100 0714 	add.w	r7, r0, #20
 801a858:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a85c:	1f2e      	subs	r6, r5, #4
 801a85e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a862:	4620      	mov	r0, r4
 801a864:	f7ff fd52 	bl	801a30c <__hi0bits>
 801a868:	f1c0 0320 	rsb	r3, r0, #32
 801a86c:	280a      	cmp	r0, #10
 801a86e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a8ec <__b2d+0x9c>
 801a872:	600b      	str	r3, [r1, #0]
 801a874:	dc14      	bgt.n	801a8a0 <__b2d+0x50>
 801a876:	f1c0 0e0b 	rsb	lr, r0, #11
 801a87a:	fa24 f10e 	lsr.w	r1, r4, lr
 801a87e:	42b7      	cmp	r7, r6
 801a880:	ea41 030c 	orr.w	r3, r1, ip
 801a884:	bf34      	ite	cc
 801a886:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a88a:	2100      	movcs	r1, #0
 801a88c:	3015      	adds	r0, #21
 801a88e:	fa04 f000 	lsl.w	r0, r4, r0
 801a892:	fa21 f10e 	lsr.w	r1, r1, lr
 801a896:	ea40 0201 	orr.w	r2, r0, r1
 801a89a:	ec43 2b10 	vmov	d0, r2, r3
 801a89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a8a0:	42b7      	cmp	r7, r6
 801a8a2:	bf3a      	itte	cc
 801a8a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a8a8:	f1a5 0608 	subcc.w	r6, r5, #8
 801a8ac:	2100      	movcs	r1, #0
 801a8ae:	380b      	subs	r0, #11
 801a8b0:	d017      	beq.n	801a8e2 <__b2d+0x92>
 801a8b2:	f1c0 0c20 	rsb	ip, r0, #32
 801a8b6:	fa04 f500 	lsl.w	r5, r4, r0
 801a8ba:	42be      	cmp	r6, r7
 801a8bc:	fa21 f40c 	lsr.w	r4, r1, ip
 801a8c0:	ea45 0504 	orr.w	r5, r5, r4
 801a8c4:	bf8c      	ite	hi
 801a8c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a8ca:	2400      	movls	r4, #0
 801a8cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a8d0:	fa01 f000 	lsl.w	r0, r1, r0
 801a8d4:	fa24 f40c 	lsr.w	r4, r4, ip
 801a8d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a8dc:	ea40 0204 	orr.w	r2, r0, r4
 801a8e0:	e7db      	b.n	801a89a <__b2d+0x4a>
 801a8e2:	ea44 030c 	orr.w	r3, r4, ip
 801a8e6:	460a      	mov	r2, r1
 801a8e8:	e7d7      	b.n	801a89a <__b2d+0x4a>
 801a8ea:	bf00      	nop
 801a8ec:	3ff00000 	.word	0x3ff00000

0801a8f0 <__d2b>:
 801a8f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a8f4:	4689      	mov	r9, r1
 801a8f6:	2101      	movs	r1, #1
 801a8f8:	ec57 6b10 	vmov	r6, r7, d0
 801a8fc:	4690      	mov	r8, r2
 801a8fe:	f7ff fc0f 	bl	801a120 <_Balloc>
 801a902:	4604      	mov	r4, r0
 801a904:	b930      	cbnz	r0, 801a914 <__d2b+0x24>
 801a906:	4602      	mov	r2, r0
 801a908:	4b25      	ldr	r3, [pc, #148]	; (801a9a0 <__d2b+0xb0>)
 801a90a:	4826      	ldr	r0, [pc, #152]	; (801a9a4 <__d2b+0xb4>)
 801a90c:	f240 310a 	movw	r1, #778	; 0x30a
 801a910:	f7fd ffaa 	bl	8018868 <__assert_func>
 801a914:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a918:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a91c:	bb35      	cbnz	r5, 801a96c <__d2b+0x7c>
 801a91e:	2e00      	cmp	r6, #0
 801a920:	9301      	str	r3, [sp, #4]
 801a922:	d028      	beq.n	801a976 <__d2b+0x86>
 801a924:	4668      	mov	r0, sp
 801a926:	9600      	str	r6, [sp, #0]
 801a928:	f7ff fd10 	bl	801a34c <__lo0bits>
 801a92c:	9900      	ldr	r1, [sp, #0]
 801a92e:	b300      	cbz	r0, 801a972 <__d2b+0x82>
 801a930:	9a01      	ldr	r2, [sp, #4]
 801a932:	f1c0 0320 	rsb	r3, r0, #32
 801a936:	fa02 f303 	lsl.w	r3, r2, r3
 801a93a:	430b      	orrs	r3, r1
 801a93c:	40c2      	lsrs	r2, r0
 801a93e:	6163      	str	r3, [r4, #20]
 801a940:	9201      	str	r2, [sp, #4]
 801a942:	9b01      	ldr	r3, [sp, #4]
 801a944:	61a3      	str	r3, [r4, #24]
 801a946:	2b00      	cmp	r3, #0
 801a948:	bf14      	ite	ne
 801a94a:	2202      	movne	r2, #2
 801a94c:	2201      	moveq	r2, #1
 801a94e:	6122      	str	r2, [r4, #16]
 801a950:	b1d5      	cbz	r5, 801a988 <__d2b+0x98>
 801a952:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a956:	4405      	add	r5, r0
 801a958:	f8c9 5000 	str.w	r5, [r9]
 801a95c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a960:	f8c8 0000 	str.w	r0, [r8]
 801a964:	4620      	mov	r0, r4
 801a966:	b003      	add	sp, #12
 801a968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a96c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a970:	e7d5      	b.n	801a91e <__d2b+0x2e>
 801a972:	6161      	str	r1, [r4, #20]
 801a974:	e7e5      	b.n	801a942 <__d2b+0x52>
 801a976:	a801      	add	r0, sp, #4
 801a978:	f7ff fce8 	bl	801a34c <__lo0bits>
 801a97c:	9b01      	ldr	r3, [sp, #4]
 801a97e:	6163      	str	r3, [r4, #20]
 801a980:	2201      	movs	r2, #1
 801a982:	6122      	str	r2, [r4, #16]
 801a984:	3020      	adds	r0, #32
 801a986:	e7e3      	b.n	801a950 <__d2b+0x60>
 801a988:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a98c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a990:	f8c9 0000 	str.w	r0, [r9]
 801a994:	6918      	ldr	r0, [r3, #16]
 801a996:	f7ff fcb9 	bl	801a30c <__hi0bits>
 801a99a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a99e:	e7df      	b.n	801a960 <__d2b+0x70>
 801a9a0:	08032e01 	.word	0x08032e01
 801a9a4:	08032ef4 	.word	0x08032ef4

0801a9a8 <__ratio>:
 801a9a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9ac:	4688      	mov	r8, r1
 801a9ae:	4669      	mov	r1, sp
 801a9b0:	4681      	mov	r9, r0
 801a9b2:	f7ff ff4d 	bl	801a850 <__b2d>
 801a9b6:	a901      	add	r1, sp, #4
 801a9b8:	4640      	mov	r0, r8
 801a9ba:	ec55 4b10 	vmov	r4, r5, d0
 801a9be:	f7ff ff47 	bl	801a850 <__b2d>
 801a9c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a9c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a9ca:	eba3 0c02 	sub.w	ip, r3, r2
 801a9ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a9d2:	1a9b      	subs	r3, r3, r2
 801a9d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a9d8:	ec51 0b10 	vmov	r0, r1, d0
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	bfd6      	itet	le
 801a9e0:	460a      	movle	r2, r1
 801a9e2:	462a      	movgt	r2, r5
 801a9e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a9e8:	468b      	mov	fp, r1
 801a9ea:	462f      	mov	r7, r5
 801a9ec:	bfd4      	ite	le
 801a9ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a9f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a9f6:	4620      	mov	r0, r4
 801a9f8:	ee10 2a10 	vmov	r2, s0
 801a9fc:	465b      	mov	r3, fp
 801a9fe:	4639      	mov	r1, r7
 801aa00:	f7e5 ff34 	bl	800086c <__aeabi_ddiv>
 801aa04:	ec41 0b10 	vmov	d0, r0, r1
 801aa08:	b003      	add	sp, #12
 801aa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801aa0e <__copybits>:
 801aa0e:	3901      	subs	r1, #1
 801aa10:	b570      	push	{r4, r5, r6, lr}
 801aa12:	1149      	asrs	r1, r1, #5
 801aa14:	6914      	ldr	r4, [r2, #16]
 801aa16:	3101      	adds	r1, #1
 801aa18:	f102 0314 	add.w	r3, r2, #20
 801aa1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801aa20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801aa24:	1f05      	subs	r5, r0, #4
 801aa26:	42a3      	cmp	r3, r4
 801aa28:	d30c      	bcc.n	801aa44 <__copybits+0x36>
 801aa2a:	1aa3      	subs	r3, r4, r2
 801aa2c:	3b11      	subs	r3, #17
 801aa2e:	f023 0303 	bic.w	r3, r3, #3
 801aa32:	3211      	adds	r2, #17
 801aa34:	42a2      	cmp	r2, r4
 801aa36:	bf88      	it	hi
 801aa38:	2300      	movhi	r3, #0
 801aa3a:	4418      	add	r0, r3
 801aa3c:	2300      	movs	r3, #0
 801aa3e:	4288      	cmp	r0, r1
 801aa40:	d305      	bcc.n	801aa4e <__copybits+0x40>
 801aa42:	bd70      	pop	{r4, r5, r6, pc}
 801aa44:	f853 6b04 	ldr.w	r6, [r3], #4
 801aa48:	f845 6f04 	str.w	r6, [r5, #4]!
 801aa4c:	e7eb      	b.n	801aa26 <__copybits+0x18>
 801aa4e:	f840 3b04 	str.w	r3, [r0], #4
 801aa52:	e7f4      	b.n	801aa3e <__copybits+0x30>

0801aa54 <__any_on>:
 801aa54:	f100 0214 	add.w	r2, r0, #20
 801aa58:	6900      	ldr	r0, [r0, #16]
 801aa5a:	114b      	asrs	r3, r1, #5
 801aa5c:	4298      	cmp	r0, r3
 801aa5e:	b510      	push	{r4, lr}
 801aa60:	db11      	blt.n	801aa86 <__any_on+0x32>
 801aa62:	dd0a      	ble.n	801aa7a <__any_on+0x26>
 801aa64:	f011 011f 	ands.w	r1, r1, #31
 801aa68:	d007      	beq.n	801aa7a <__any_on+0x26>
 801aa6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801aa6e:	fa24 f001 	lsr.w	r0, r4, r1
 801aa72:	fa00 f101 	lsl.w	r1, r0, r1
 801aa76:	428c      	cmp	r4, r1
 801aa78:	d10b      	bne.n	801aa92 <__any_on+0x3e>
 801aa7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801aa7e:	4293      	cmp	r3, r2
 801aa80:	d803      	bhi.n	801aa8a <__any_on+0x36>
 801aa82:	2000      	movs	r0, #0
 801aa84:	bd10      	pop	{r4, pc}
 801aa86:	4603      	mov	r3, r0
 801aa88:	e7f7      	b.n	801aa7a <__any_on+0x26>
 801aa8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801aa8e:	2900      	cmp	r1, #0
 801aa90:	d0f5      	beq.n	801aa7e <__any_on+0x2a>
 801aa92:	2001      	movs	r0, #1
 801aa94:	e7f6      	b.n	801aa84 <__any_on+0x30>

0801aa96 <_calloc_r>:
 801aa96:	b513      	push	{r0, r1, r4, lr}
 801aa98:	434a      	muls	r2, r1
 801aa9a:	4611      	mov	r1, r2
 801aa9c:	9201      	str	r2, [sp, #4]
 801aa9e:	f000 f859 	bl	801ab54 <_malloc_r>
 801aaa2:	4604      	mov	r4, r0
 801aaa4:	b118      	cbz	r0, 801aaae <_calloc_r+0x18>
 801aaa6:	9a01      	ldr	r2, [sp, #4]
 801aaa8:	2100      	movs	r1, #0
 801aaaa:	f7fc f907 	bl	8016cbc <memset>
 801aaae:	4620      	mov	r0, r4
 801aab0:	b002      	add	sp, #8
 801aab2:	bd10      	pop	{r4, pc}

0801aab4 <_free_r>:
 801aab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aab6:	2900      	cmp	r1, #0
 801aab8:	d048      	beq.n	801ab4c <_free_r+0x98>
 801aaba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aabe:	9001      	str	r0, [sp, #4]
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	f1a1 0404 	sub.w	r4, r1, #4
 801aac6:	bfb8      	it	lt
 801aac8:	18e4      	addlt	r4, r4, r3
 801aaca:	f000 fc1b 	bl	801b304 <__malloc_lock>
 801aace:	4a20      	ldr	r2, [pc, #128]	; (801ab50 <_free_r+0x9c>)
 801aad0:	9801      	ldr	r0, [sp, #4]
 801aad2:	6813      	ldr	r3, [r2, #0]
 801aad4:	4615      	mov	r5, r2
 801aad6:	b933      	cbnz	r3, 801aae6 <_free_r+0x32>
 801aad8:	6063      	str	r3, [r4, #4]
 801aada:	6014      	str	r4, [r2, #0]
 801aadc:	b003      	add	sp, #12
 801aade:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aae2:	f000 bc15 	b.w	801b310 <__malloc_unlock>
 801aae6:	42a3      	cmp	r3, r4
 801aae8:	d90b      	bls.n	801ab02 <_free_r+0x4e>
 801aaea:	6821      	ldr	r1, [r4, #0]
 801aaec:	1862      	adds	r2, r4, r1
 801aaee:	4293      	cmp	r3, r2
 801aaf0:	bf04      	itt	eq
 801aaf2:	681a      	ldreq	r2, [r3, #0]
 801aaf4:	685b      	ldreq	r3, [r3, #4]
 801aaf6:	6063      	str	r3, [r4, #4]
 801aaf8:	bf04      	itt	eq
 801aafa:	1852      	addeq	r2, r2, r1
 801aafc:	6022      	streq	r2, [r4, #0]
 801aafe:	602c      	str	r4, [r5, #0]
 801ab00:	e7ec      	b.n	801aadc <_free_r+0x28>
 801ab02:	461a      	mov	r2, r3
 801ab04:	685b      	ldr	r3, [r3, #4]
 801ab06:	b10b      	cbz	r3, 801ab0c <_free_r+0x58>
 801ab08:	42a3      	cmp	r3, r4
 801ab0a:	d9fa      	bls.n	801ab02 <_free_r+0x4e>
 801ab0c:	6811      	ldr	r1, [r2, #0]
 801ab0e:	1855      	adds	r5, r2, r1
 801ab10:	42a5      	cmp	r5, r4
 801ab12:	d10b      	bne.n	801ab2c <_free_r+0x78>
 801ab14:	6824      	ldr	r4, [r4, #0]
 801ab16:	4421      	add	r1, r4
 801ab18:	1854      	adds	r4, r2, r1
 801ab1a:	42a3      	cmp	r3, r4
 801ab1c:	6011      	str	r1, [r2, #0]
 801ab1e:	d1dd      	bne.n	801aadc <_free_r+0x28>
 801ab20:	681c      	ldr	r4, [r3, #0]
 801ab22:	685b      	ldr	r3, [r3, #4]
 801ab24:	6053      	str	r3, [r2, #4]
 801ab26:	4421      	add	r1, r4
 801ab28:	6011      	str	r1, [r2, #0]
 801ab2a:	e7d7      	b.n	801aadc <_free_r+0x28>
 801ab2c:	d902      	bls.n	801ab34 <_free_r+0x80>
 801ab2e:	230c      	movs	r3, #12
 801ab30:	6003      	str	r3, [r0, #0]
 801ab32:	e7d3      	b.n	801aadc <_free_r+0x28>
 801ab34:	6825      	ldr	r5, [r4, #0]
 801ab36:	1961      	adds	r1, r4, r5
 801ab38:	428b      	cmp	r3, r1
 801ab3a:	bf04      	itt	eq
 801ab3c:	6819      	ldreq	r1, [r3, #0]
 801ab3e:	685b      	ldreq	r3, [r3, #4]
 801ab40:	6063      	str	r3, [r4, #4]
 801ab42:	bf04      	itt	eq
 801ab44:	1949      	addeq	r1, r1, r5
 801ab46:	6021      	streq	r1, [r4, #0]
 801ab48:	6054      	str	r4, [r2, #4]
 801ab4a:	e7c7      	b.n	801aadc <_free_r+0x28>
 801ab4c:	b003      	add	sp, #12
 801ab4e:	bd30      	pop	{r4, r5, pc}
 801ab50:	2000135c 	.word	0x2000135c

0801ab54 <_malloc_r>:
 801ab54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab56:	1ccd      	adds	r5, r1, #3
 801ab58:	f025 0503 	bic.w	r5, r5, #3
 801ab5c:	3508      	adds	r5, #8
 801ab5e:	2d0c      	cmp	r5, #12
 801ab60:	bf38      	it	cc
 801ab62:	250c      	movcc	r5, #12
 801ab64:	2d00      	cmp	r5, #0
 801ab66:	4606      	mov	r6, r0
 801ab68:	db01      	blt.n	801ab6e <_malloc_r+0x1a>
 801ab6a:	42a9      	cmp	r1, r5
 801ab6c:	d903      	bls.n	801ab76 <_malloc_r+0x22>
 801ab6e:	230c      	movs	r3, #12
 801ab70:	6033      	str	r3, [r6, #0]
 801ab72:	2000      	movs	r0, #0
 801ab74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab76:	f000 fbc5 	bl	801b304 <__malloc_lock>
 801ab7a:	4921      	ldr	r1, [pc, #132]	; (801ac00 <_malloc_r+0xac>)
 801ab7c:	680a      	ldr	r2, [r1, #0]
 801ab7e:	4614      	mov	r4, r2
 801ab80:	b99c      	cbnz	r4, 801abaa <_malloc_r+0x56>
 801ab82:	4f20      	ldr	r7, [pc, #128]	; (801ac04 <_malloc_r+0xb0>)
 801ab84:	683b      	ldr	r3, [r7, #0]
 801ab86:	b923      	cbnz	r3, 801ab92 <_malloc_r+0x3e>
 801ab88:	4621      	mov	r1, r4
 801ab8a:	4630      	mov	r0, r6
 801ab8c:	f000 fafc 	bl	801b188 <_sbrk_r>
 801ab90:	6038      	str	r0, [r7, #0]
 801ab92:	4629      	mov	r1, r5
 801ab94:	4630      	mov	r0, r6
 801ab96:	f000 faf7 	bl	801b188 <_sbrk_r>
 801ab9a:	1c43      	adds	r3, r0, #1
 801ab9c:	d123      	bne.n	801abe6 <_malloc_r+0x92>
 801ab9e:	230c      	movs	r3, #12
 801aba0:	6033      	str	r3, [r6, #0]
 801aba2:	4630      	mov	r0, r6
 801aba4:	f000 fbb4 	bl	801b310 <__malloc_unlock>
 801aba8:	e7e3      	b.n	801ab72 <_malloc_r+0x1e>
 801abaa:	6823      	ldr	r3, [r4, #0]
 801abac:	1b5b      	subs	r3, r3, r5
 801abae:	d417      	bmi.n	801abe0 <_malloc_r+0x8c>
 801abb0:	2b0b      	cmp	r3, #11
 801abb2:	d903      	bls.n	801abbc <_malloc_r+0x68>
 801abb4:	6023      	str	r3, [r4, #0]
 801abb6:	441c      	add	r4, r3
 801abb8:	6025      	str	r5, [r4, #0]
 801abba:	e004      	b.n	801abc6 <_malloc_r+0x72>
 801abbc:	6863      	ldr	r3, [r4, #4]
 801abbe:	42a2      	cmp	r2, r4
 801abc0:	bf0c      	ite	eq
 801abc2:	600b      	streq	r3, [r1, #0]
 801abc4:	6053      	strne	r3, [r2, #4]
 801abc6:	4630      	mov	r0, r6
 801abc8:	f000 fba2 	bl	801b310 <__malloc_unlock>
 801abcc:	f104 000b 	add.w	r0, r4, #11
 801abd0:	1d23      	adds	r3, r4, #4
 801abd2:	f020 0007 	bic.w	r0, r0, #7
 801abd6:	1ac2      	subs	r2, r0, r3
 801abd8:	d0cc      	beq.n	801ab74 <_malloc_r+0x20>
 801abda:	1a1b      	subs	r3, r3, r0
 801abdc:	50a3      	str	r3, [r4, r2]
 801abde:	e7c9      	b.n	801ab74 <_malloc_r+0x20>
 801abe0:	4622      	mov	r2, r4
 801abe2:	6864      	ldr	r4, [r4, #4]
 801abe4:	e7cc      	b.n	801ab80 <_malloc_r+0x2c>
 801abe6:	1cc4      	adds	r4, r0, #3
 801abe8:	f024 0403 	bic.w	r4, r4, #3
 801abec:	42a0      	cmp	r0, r4
 801abee:	d0e3      	beq.n	801abb8 <_malloc_r+0x64>
 801abf0:	1a21      	subs	r1, r4, r0
 801abf2:	4630      	mov	r0, r6
 801abf4:	f000 fac8 	bl	801b188 <_sbrk_r>
 801abf8:	3001      	adds	r0, #1
 801abfa:	d1dd      	bne.n	801abb8 <_malloc_r+0x64>
 801abfc:	e7cf      	b.n	801ab9e <_malloc_r+0x4a>
 801abfe:	bf00      	nop
 801ac00:	2000135c 	.word	0x2000135c
 801ac04:	20001360 	.word	0x20001360

0801ac08 <__ssputs_r>:
 801ac08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac0c:	688e      	ldr	r6, [r1, #8]
 801ac0e:	429e      	cmp	r6, r3
 801ac10:	4682      	mov	sl, r0
 801ac12:	460c      	mov	r4, r1
 801ac14:	4690      	mov	r8, r2
 801ac16:	461f      	mov	r7, r3
 801ac18:	d838      	bhi.n	801ac8c <__ssputs_r+0x84>
 801ac1a:	898a      	ldrh	r2, [r1, #12]
 801ac1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ac20:	d032      	beq.n	801ac88 <__ssputs_r+0x80>
 801ac22:	6825      	ldr	r5, [r4, #0]
 801ac24:	6909      	ldr	r1, [r1, #16]
 801ac26:	eba5 0901 	sub.w	r9, r5, r1
 801ac2a:	6965      	ldr	r5, [r4, #20]
 801ac2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ac30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ac34:	3301      	adds	r3, #1
 801ac36:	444b      	add	r3, r9
 801ac38:	106d      	asrs	r5, r5, #1
 801ac3a:	429d      	cmp	r5, r3
 801ac3c:	bf38      	it	cc
 801ac3e:	461d      	movcc	r5, r3
 801ac40:	0553      	lsls	r3, r2, #21
 801ac42:	d531      	bpl.n	801aca8 <__ssputs_r+0xa0>
 801ac44:	4629      	mov	r1, r5
 801ac46:	f7ff ff85 	bl	801ab54 <_malloc_r>
 801ac4a:	4606      	mov	r6, r0
 801ac4c:	b950      	cbnz	r0, 801ac64 <__ssputs_r+0x5c>
 801ac4e:	230c      	movs	r3, #12
 801ac50:	f8ca 3000 	str.w	r3, [sl]
 801ac54:	89a3      	ldrh	r3, [r4, #12]
 801ac56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ac5a:	81a3      	strh	r3, [r4, #12]
 801ac5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ac60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac64:	6921      	ldr	r1, [r4, #16]
 801ac66:	464a      	mov	r2, r9
 801ac68:	f7fc f800 	bl	8016c6c <memcpy>
 801ac6c:	89a3      	ldrh	r3, [r4, #12]
 801ac6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ac72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac76:	81a3      	strh	r3, [r4, #12]
 801ac78:	6126      	str	r6, [r4, #16]
 801ac7a:	6165      	str	r5, [r4, #20]
 801ac7c:	444e      	add	r6, r9
 801ac7e:	eba5 0509 	sub.w	r5, r5, r9
 801ac82:	6026      	str	r6, [r4, #0]
 801ac84:	60a5      	str	r5, [r4, #8]
 801ac86:	463e      	mov	r6, r7
 801ac88:	42be      	cmp	r6, r7
 801ac8a:	d900      	bls.n	801ac8e <__ssputs_r+0x86>
 801ac8c:	463e      	mov	r6, r7
 801ac8e:	4632      	mov	r2, r6
 801ac90:	6820      	ldr	r0, [r4, #0]
 801ac92:	4641      	mov	r1, r8
 801ac94:	f7fb fff8 	bl	8016c88 <memmove>
 801ac98:	68a3      	ldr	r3, [r4, #8]
 801ac9a:	6822      	ldr	r2, [r4, #0]
 801ac9c:	1b9b      	subs	r3, r3, r6
 801ac9e:	4432      	add	r2, r6
 801aca0:	60a3      	str	r3, [r4, #8]
 801aca2:	6022      	str	r2, [r4, #0]
 801aca4:	2000      	movs	r0, #0
 801aca6:	e7db      	b.n	801ac60 <__ssputs_r+0x58>
 801aca8:	462a      	mov	r2, r5
 801acaa:	f000 fb37 	bl	801b31c <_realloc_r>
 801acae:	4606      	mov	r6, r0
 801acb0:	2800      	cmp	r0, #0
 801acb2:	d1e1      	bne.n	801ac78 <__ssputs_r+0x70>
 801acb4:	6921      	ldr	r1, [r4, #16]
 801acb6:	4650      	mov	r0, sl
 801acb8:	f7ff fefc 	bl	801aab4 <_free_r>
 801acbc:	e7c7      	b.n	801ac4e <__ssputs_r+0x46>
	...

0801acc0 <_svfiprintf_r>:
 801acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acc4:	4698      	mov	r8, r3
 801acc6:	898b      	ldrh	r3, [r1, #12]
 801acc8:	061b      	lsls	r3, r3, #24
 801acca:	b09d      	sub	sp, #116	; 0x74
 801accc:	4607      	mov	r7, r0
 801acce:	460d      	mov	r5, r1
 801acd0:	4614      	mov	r4, r2
 801acd2:	d50e      	bpl.n	801acf2 <_svfiprintf_r+0x32>
 801acd4:	690b      	ldr	r3, [r1, #16]
 801acd6:	b963      	cbnz	r3, 801acf2 <_svfiprintf_r+0x32>
 801acd8:	2140      	movs	r1, #64	; 0x40
 801acda:	f7ff ff3b 	bl	801ab54 <_malloc_r>
 801acde:	6028      	str	r0, [r5, #0]
 801ace0:	6128      	str	r0, [r5, #16]
 801ace2:	b920      	cbnz	r0, 801acee <_svfiprintf_r+0x2e>
 801ace4:	230c      	movs	r3, #12
 801ace6:	603b      	str	r3, [r7, #0]
 801ace8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801acec:	e0d1      	b.n	801ae92 <_svfiprintf_r+0x1d2>
 801acee:	2340      	movs	r3, #64	; 0x40
 801acf0:	616b      	str	r3, [r5, #20]
 801acf2:	2300      	movs	r3, #0
 801acf4:	9309      	str	r3, [sp, #36]	; 0x24
 801acf6:	2320      	movs	r3, #32
 801acf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801acfc:	f8cd 800c 	str.w	r8, [sp, #12]
 801ad00:	2330      	movs	r3, #48	; 0x30
 801ad02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801aeac <_svfiprintf_r+0x1ec>
 801ad06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ad0a:	f04f 0901 	mov.w	r9, #1
 801ad0e:	4623      	mov	r3, r4
 801ad10:	469a      	mov	sl, r3
 801ad12:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad16:	b10a      	cbz	r2, 801ad1c <_svfiprintf_r+0x5c>
 801ad18:	2a25      	cmp	r2, #37	; 0x25
 801ad1a:	d1f9      	bne.n	801ad10 <_svfiprintf_r+0x50>
 801ad1c:	ebba 0b04 	subs.w	fp, sl, r4
 801ad20:	d00b      	beq.n	801ad3a <_svfiprintf_r+0x7a>
 801ad22:	465b      	mov	r3, fp
 801ad24:	4622      	mov	r2, r4
 801ad26:	4629      	mov	r1, r5
 801ad28:	4638      	mov	r0, r7
 801ad2a:	f7ff ff6d 	bl	801ac08 <__ssputs_r>
 801ad2e:	3001      	adds	r0, #1
 801ad30:	f000 80aa 	beq.w	801ae88 <_svfiprintf_r+0x1c8>
 801ad34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad36:	445a      	add	r2, fp
 801ad38:	9209      	str	r2, [sp, #36]	; 0x24
 801ad3a:	f89a 3000 	ldrb.w	r3, [sl]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	f000 80a2 	beq.w	801ae88 <_svfiprintf_r+0x1c8>
 801ad44:	2300      	movs	r3, #0
 801ad46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ad4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ad4e:	f10a 0a01 	add.w	sl, sl, #1
 801ad52:	9304      	str	r3, [sp, #16]
 801ad54:	9307      	str	r3, [sp, #28]
 801ad56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ad5a:	931a      	str	r3, [sp, #104]	; 0x68
 801ad5c:	4654      	mov	r4, sl
 801ad5e:	2205      	movs	r2, #5
 801ad60:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad64:	4851      	ldr	r0, [pc, #324]	; (801aeac <_svfiprintf_r+0x1ec>)
 801ad66:	f7e5 fa4b 	bl	8000200 <memchr>
 801ad6a:	9a04      	ldr	r2, [sp, #16]
 801ad6c:	b9d8      	cbnz	r0, 801ada6 <_svfiprintf_r+0xe6>
 801ad6e:	06d0      	lsls	r0, r2, #27
 801ad70:	bf44      	itt	mi
 801ad72:	2320      	movmi	r3, #32
 801ad74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad78:	0711      	lsls	r1, r2, #28
 801ad7a:	bf44      	itt	mi
 801ad7c:	232b      	movmi	r3, #43	; 0x2b
 801ad7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad82:	f89a 3000 	ldrb.w	r3, [sl]
 801ad86:	2b2a      	cmp	r3, #42	; 0x2a
 801ad88:	d015      	beq.n	801adb6 <_svfiprintf_r+0xf6>
 801ad8a:	9a07      	ldr	r2, [sp, #28]
 801ad8c:	4654      	mov	r4, sl
 801ad8e:	2000      	movs	r0, #0
 801ad90:	f04f 0c0a 	mov.w	ip, #10
 801ad94:	4621      	mov	r1, r4
 801ad96:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad9a:	3b30      	subs	r3, #48	; 0x30
 801ad9c:	2b09      	cmp	r3, #9
 801ad9e:	d94e      	bls.n	801ae3e <_svfiprintf_r+0x17e>
 801ada0:	b1b0      	cbz	r0, 801add0 <_svfiprintf_r+0x110>
 801ada2:	9207      	str	r2, [sp, #28]
 801ada4:	e014      	b.n	801add0 <_svfiprintf_r+0x110>
 801ada6:	eba0 0308 	sub.w	r3, r0, r8
 801adaa:	fa09 f303 	lsl.w	r3, r9, r3
 801adae:	4313      	orrs	r3, r2
 801adb0:	9304      	str	r3, [sp, #16]
 801adb2:	46a2      	mov	sl, r4
 801adb4:	e7d2      	b.n	801ad5c <_svfiprintf_r+0x9c>
 801adb6:	9b03      	ldr	r3, [sp, #12]
 801adb8:	1d19      	adds	r1, r3, #4
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	9103      	str	r1, [sp, #12]
 801adbe:	2b00      	cmp	r3, #0
 801adc0:	bfbb      	ittet	lt
 801adc2:	425b      	neglt	r3, r3
 801adc4:	f042 0202 	orrlt.w	r2, r2, #2
 801adc8:	9307      	strge	r3, [sp, #28]
 801adca:	9307      	strlt	r3, [sp, #28]
 801adcc:	bfb8      	it	lt
 801adce:	9204      	strlt	r2, [sp, #16]
 801add0:	7823      	ldrb	r3, [r4, #0]
 801add2:	2b2e      	cmp	r3, #46	; 0x2e
 801add4:	d10c      	bne.n	801adf0 <_svfiprintf_r+0x130>
 801add6:	7863      	ldrb	r3, [r4, #1]
 801add8:	2b2a      	cmp	r3, #42	; 0x2a
 801adda:	d135      	bne.n	801ae48 <_svfiprintf_r+0x188>
 801addc:	9b03      	ldr	r3, [sp, #12]
 801adde:	1d1a      	adds	r2, r3, #4
 801ade0:	681b      	ldr	r3, [r3, #0]
 801ade2:	9203      	str	r2, [sp, #12]
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	bfb8      	it	lt
 801ade8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801adec:	3402      	adds	r4, #2
 801adee:	9305      	str	r3, [sp, #20]
 801adf0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aebc <_svfiprintf_r+0x1fc>
 801adf4:	7821      	ldrb	r1, [r4, #0]
 801adf6:	2203      	movs	r2, #3
 801adf8:	4650      	mov	r0, sl
 801adfa:	f7e5 fa01 	bl	8000200 <memchr>
 801adfe:	b140      	cbz	r0, 801ae12 <_svfiprintf_r+0x152>
 801ae00:	2340      	movs	r3, #64	; 0x40
 801ae02:	eba0 000a 	sub.w	r0, r0, sl
 801ae06:	fa03 f000 	lsl.w	r0, r3, r0
 801ae0a:	9b04      	ldr	r3, [sp, #16]
 801ae0c:	4303      	orrs	r3, r0
 801ae0e:	3401      	adds	r4, #1
 801ae10:	9304      	str	r3, [sp, #16]
 801ae12:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae16:	4826      	ldr	r0, [pc, #152]	; (801aeb0 <_svfiprintf_r+0x1f0>)
 801ae18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ae1c:	2206      	movs	r2, #6
 801ae1e:	f7e5 f9ef 	bl	8000200 <memchr>
 801ae22:	2800      	cmp	r0, #0
 801ae24:	d038      	beq.n	801ae98 <_svfiprintf_r+0x1d8>
 801ae26:	4b23      	ldr	r3, [pc, #140]	; (801aeb4 <_svfiprintf_r+0x1f4>)
 801ae28:	bb1b      	cbnz	r3, 801ae72 <_svfiprintf_r+0x1b2>
 801ae2a:	9b03      	ldr	r3, [sp, #12]
 801ae2c:	3307      	adds	r3, #7
 801ae2e:	f023 0307 	bic.w	r3, r3, #7
 801ae32:	3308      	adds	r3, #8
 801ae34:	9303      	str	r3, [sp, #12]
 801ae36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae38:	4433      	add	r3, r6
 801ae3a:	9309      	str	r3, [sp, #36]	; 0x24
 801ae3c:	e767      	b.n	801ad0e <_svfiprintf_r+0x4e>
 801ae3e:	fb0c 3202 	mla	r2, ip, r2, r3
 801ae42:	460c      	mov	r4, r1
 801ae44:	2001      	movs	r0, #1
 801ae46:	e7a5      	b.n	801ad94 <_svfiprintf_r+0xd4>
 801ae48:	2300      	movs	r3, #0
 801ae4a:	3401      	adds	r4, #1
 801ae4c:	9305      	str	r3, [sp, #20]
 801ae4e:	4619      	mov	r1, r3
 801ae50:	f04f 0c0a 	mov.w	ip, #10
 801ae54:	4620      	mov	r0, r4
 801ae56:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ae5a:	3a30      	subs	r2, #48	; 0x30
 801ae5c:	2a09      	cmp	r2, #9
 801ae5e:	d903      	bls.n	801ae68 <_svfiprintf_r+0x1a8>
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d0c5      	beq.n	801adf0 <_svfiprintf_r+0x130>
 801ae64:	9105      	str	r1, [sp, #20]
 801ae66:	e7c3      	b.n	801adf0 <_svfiprintf_r+0x130>
 801ae68:	fb0c 2101 	mla	r1, ip, r1, r2
 801ae6c:	4604      	mov	r4, r0
 801ae6e:	2301      	movs	r3, #1
 801ae70:	e7f0      	b.n	801ae54 <_svfiprintf_r+0x194>
 801ae72:	ab03      	add	r3, sp, #12
 801ae74:	9300      	str	r3, [sp, #0]
 801ae76:	462a      	mov	r2, r5
 801ae78:	4b0f      	ldr	r3, [pc, #60]	; (801aeb8 <_svfiprintf_r+0x1f8>)
 801ae7a:	a904      	add	r1, sp, #16
 801ae7c:	4638      	mov	r0, r7
 801ae7e:	f7fb ffc5 	bl	8016e0c <_printf_float>
 801ae82:	1c42      	adds	r2, r0, #1
 801ae84:	4606      	mov	r6, r0
 801ae86:	d1d6      	bne.n	801ae36 <_svfiprintf_r+0x176>
 801ae88:	89ab      	ldrh	r3, [r5, #12]
 801ae8a:	065b      	lsls	r3, r3, #25
 801ae8c:	f53f af2c 	bmi.w	801ace8 <_svfiprintf_r+0x28>
 801ae90:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae92:	b01d      	add	sp, #116	; 0x74
 801ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae98:	ab03      	add	r3, sp, #12
 801ae9a:	9300      	str	r3, [sp, #0]
 801ae9c:	462a      	mov	r2, r5
 801ae9e:	4b06      	ldr	r3, [pc, #24]	; (801aeb8 <_svfiprintf_r+0x1f8>)
 801aea0:	a904      	add	r1, sp, #16
 801aea2:	4638      	mov	r0, r7
 801aea4:	f7fc fa56 	bl	8017354 <_printf_i>
 801aea8:	e7eb      	b.n	801ae82 <_svfiprintf_r+0x1c2>
 801aeaa:	bf00      	nop
 801aeac:	08033054 	.word	0x08033054
 801aeb0:	0803305e 	.word	0x0803305e
 801aeb4:	08016e0d 	.word	0x08016e0d
 801aeb8:	0801ac09 	.word	0x0801ac09
 801aebc:	0803305a 	.word	0x0803305a

0801aec0 <__sfputc_r>:
 801aec0:	6893      	ldr	r3, [r2, #8]
 801aec2:	3b01      	subs	r3, #1
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	b410      	push	{r4}
 801aec8:	6093      	str	r3, [r2, #8]
 801aeca:	da08      	bge.n	801aede <__sfputc_r+0x1e>
 801aecc:	6994      	ldr	r4, [r2, #24]
 801aece:	42a3      	cmp	r3, r4
 801aed0:	db01      	blt.n	801aed6 <__sfputc_r+0x16>
 801aed2:	290a      	cmp	r1, #10
 801aed4:	d103      	bne.n	801aede <__sfputc_r+0x1e>
 801aed6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aeda:	f7fd bc05 	b.w	80186e8 <__swbuf_r>
 801aede:	6813      	ldr	r3, [r2, #0]
 801aee0:	1c58      	adds	r0, r3, #1
 801aee2:	6010      	str	r0, [r2, #0]
 801aee4:	7019      	strb	r1, [r3, #0]
 801aee6:	4608      	mov	r0, r1
 801aee8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aeec:	4770      	bx	lr

0801aeee <__sfputs_r>:
 801aeee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aef0:	4606      	mov	r6, r0
 801aef2:	460f      	mov	r7, r1
 801aef4:	4614      	mov	r4, r2
 801aef6:	18d5      	adds	r5, r2, r3
 801aef8:	42ac      	cmp	r4, r5
 801aefa:	d101      	bne.n	801af00 <__sfputs_r+0x12>
 801aefc:	2000      	movs	r0, #0
 801aefe:	e007      	b.n	801af10 <__sfputs_r+0x22>
 801af00:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af04:	463a      	mov	r2, r7
 801af06:	4630      	mov	r0, r6
 801af08:	f7ff ffda 	bl	801aec0 <__sfputc_r>
 801af0c:	1c43      	adds	r3, r0, #1
 801af0e:	d1f3      	bne.n	801aef8 <__sfputs_r+0xa>
 801af10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801af14 <_vfiprintf_r>:
 801af14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af18:	460d      	mov	r5, r1
 801af1a:	b09d      	sub	sp, #116	; 0x74
 801af1c:	4614      	mov	r4, r2
 801af1e:	4698      	mov	r8, r3
 801af20:	4606      	mov	r6, r0
 801af22:	b118      	cbz	r0, 801af2c <_vfiprintf_r+0x18>
 801af24:	6983      	ldr	r3, [r0, #24]
 801af26:	b90b      	cbnz	r3, 801af2c <_vfiprintf_r+0x18>
 801af28:	f7fe fc56 	bl	80197d8 <__sinit>
 801af2c:	4b89      	ldr	r3, [pc, #548]	; (801b154 <_vfiprintf_r+0x240>)
 801af2e:	429d      	cmp	r5, r3
 801af30:	d11b      	bne.n	801af6a <_vfiprintf_r+0x56>
 801af32:	6875      	ldr	r5, [r6, #4]
 801af34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af36:	07d9      	lsls	r1, r3, #31
 801af38:	d405      	bmi.n	801af46 <_vfiprintf_r+0x32>
 801af3a:	89ab      	ldrh	r3, [r5, #12]
 801af3c:	059a      	lsls	r2, r3, #22
 801af3e:	d402      	bmi.n	801af46 <_vfiprintf_r+0x32>
 801af40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af42:	f7ff f86c 	bl	801a01e <__retarget_lock_acquire_recursive>
 801af46:	89ab      	ldrh	r3, [r5, #12]
 801af48:	071b      	lsls	r3, r3, #28
 801af4a:	d501      	bpl.n	801af50 <_vfiprintf_r+0x3c>
 801af4c:	692b      	ldr	r3, [r5, #16]
 801af4e:	b9eb      	cbnz	r3, 801af8c <_vfiprintf_r+0x78>
 801af50:	4629      	mov	r1, r5
 801af52:	4630      	mov	r0, r6
 801af54:	f7fd fc1a 	bl	801878c <__swsetup_r>
 801af58:	b1c0      	cbz	r0, 801af8c <_vfiprintf_r+0x78>
 801af5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af5c:	07dc      	lsls	r4, r3, #31
 801af5e:	d50e      	bpl.n	801af7e <_vfiprintf_r+0x6a>
 801af60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af64:	b01d      	add	sp, #116	; 0x74
 801af66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af6a:	4b7b      	ldr	r3, [pc, #492]	; (801b158 <_vfiprintf_r+0x244>)
 801af6c:	429d      	cmp	r5, r3
 801af6e:	d101      	bne.n	801af74 <_vfiprintf_r+0x60>
 801af70:	68b5      	ldr	r5, [r6, #8]
 801af72:	e7df      	b.n	801af34 <_vfiprintf_r+0x20>
 801af74:	4b79      	ldr	r3, [pc, #484]	; (801b15c <_vfiprintf_r+0x248>)
 801af76:	429d      	cmp	r5, r3
 801af78:	bf08      	it	eq
 801af7a:	68f5      	ldreq	r5, [r6, #12]
 801af7c:	e7da      	b.n	801af34 <_vfiprintf_r+0x20>
 801af7e:	89ab      	ldrh	r3, [r5, #12]
 801af80:	0598      	lsls	r0, r3, #22
 801af82:	d4ed      	bmi.n	801af60 <_vfiprintf_r+0x4c>
 801af84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af86:	f7ff f84b 	bl	801a020 <__retarget_lock_release_recursive>
 801af8a:	e7e9      	b.n	801af60 <_vfiprintf_r+0x4c>
 801af8c:	2300      	movs	r3, #0
 801af8e:	9309      	str	r3, [sp, #36]	; 0x24
 801af90:	2320      	movs	r3, #32
 801af92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801af96:	f8cd 800c 	str.w	r8, [sp, #12]
 801af9a:	2330      	movs	r3, #48	; 0x30
 801af9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b160 <_vfiprintf_r+0x24c>
 801afa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801afa4:	f04f 0901 	mov.w	r9, #1
 801afa8:	4623      	mov	r3, r4
 801afaa:	469a      	mov	sl, r3
 801afac:	f813 2b01 	ldrb.w	r2, [r3], #1
 801afb0:	b10a      	cbz	r2, 801afb6 <_vfiprintf_r+0xa2>
 801afb2:	2a25      	cmp	r2, #37	; 0x25
 801afb4:	d1f9      	bne.n	801afaa <_vfiprintf_r+0x96>
 801afb6:	ebba 0b04 	subs.w	fp, sl, r4
 801afba:	d00b      	beq.n	801afd4 <_vfiprintf_r+0xc0>
 801afbc:	465b      	mov	r3, fp
 801afbe:	4622      	mov	r2, r4
 801afc0:	4629      	mov	r1, r5
 801afc2:	4630      	mov	r0, r6
 801afc4:	f7ff ff93 	bl	801aeee <__sfputs_r>
 801afc8:	3001      	adds	r0, #1
 801afca:	f000 80aa 	beq.w	801b122 <_vfiprintf_r+0x20e>
 801afce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801afd0:	445a      	add	r2, fp
 801afd2:	9209      	str	r2, [sp, #36]	; 0x24
 801afd4:	f89a 3000 	ldrb.w	r3, [sl]
 801afd8:	2b00      	cmp	r3, #0
 801afda:	f000 80a2 	beq.w	801b122 <_vfiprintf_r+0x20e>
 801afde:	2300      	movs	r3, #0
 801afe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801afe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801afe8:	f10a 0a01 	add.w	sl, sl, #1
 801afec:	9304      	str	r3, [sp, #16]
 801afee:	9307      	str	r3, [sp, #28]
 801aff0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aff4:	931a      	str	r3, [sp, #104]	; 0x68
 801aff6:	4654      	mov	r4, sl
 801aff8:	2205      	movs	r2, #5
 801affa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801affe:	4858      	ldr	r0, [pc, #352]	; (801b160 <_vfiprintf_r+0x24c>)
 801b000:	f7e5 f8fe 	bl	8000200 <memchr>
 801b004:	9a04      	ldr	r2, [sp, #16]
 801b006:	b9d8      	cbnz	r0, 801b040 <_vfiprintf_r+0x12c>
 801b008:	06d1      	lsls	r1, r2, #27
 801b00a:	bf44      	itt	mi
 801b00c:	2320      	movmi	r3, #32
 801b00e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b012:	0713      	lsls	r3, r2, #28
 801b014:	bf44      	itt	mi
 801b016:	232b      	movmi	r3, #43	; 0x2b
 801b018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b01c:	f89a 3000 	ldrb.w	r3, [sl]
 801b020:	2b2a      	cmp	r3, #42	; 0x2a
 801b022:	d015      	beq.n	801b050 <_vfiprintf_r+0x13c>
 801b024:	9a07      	ldr	r2, [sp, #28]
 801b026:	4654      	mov	r4, sl
 801b028:	2000      	movs	r0, #0
 801b02a:	f04f 0c0a 	mov.w	ip, #10
 801b02e:	4621      	mov	r1, r4
 801b030:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b034:	3b30      	subs	r3, #48	; 0x30
 801b036:	2b09      	cmp	r3, #9
 801b038:	d94e      	bls.n	801b0d8 <_vfiprintf_r+0x1c4>
 801b03a:	b1b0      	cbz	r0, 801b06a <_vfiprintf_r+0x156>
 801b03c:	9207      	str	r2, [sp, #28]
 801b03e:	e014      	b.n	801b06a <_vfiprintf_r+0x156>
 801b040:	eba0 0308 	sub.w	r3, r0, r8
 801b044:	fa09 f303 	lsl.w	r3, r9, r3
 801b048:	4313      	orrs	r3, r2
 801b04a:	9304      	str	r3, [sp, #16]
 801b04c:	46a2      	mov	sl, r4
 801b04e:	e7d2      	b.n	801aff6 <_vfiprintf_r+0xe2>
 801b050:	9b03      	ldr	r3, [sp, #12]
 801b052:	1d19      	adds	r1, r3, #4
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	9103      	str	r1, [sp, #12]
 801b058:	2b00      	cmp	r3, #0
 801b05a:	bfbb      	ittet	lt
 801b05c:	425b      	neglt	r3, r3
 801b05e:	f042 0202 	orrlt.w	r2, r2, #2
 801b062:	9307      	strge	r3, [sp, #28]
 801b064:	9307      	strlt	r3, [sp, #28]
 801b066:	bfb8      	it	lt
 801b068:	9204      	strlt	r2, [sp, #16]
 801b06a:	7823      	ldrb	r3, [r4, #0]
 801b06c:	2b2e      	cmp	r3, #46	; 0x2e
 801b06e:	d10c      	bne.n	801b08a <_vfiprintf_r+0x176>
 801b070:	7863      	ldrb	r3, [r4, #1]
 801b072:	2b2a      	cmp	r3, #42	; 0x2a
 801b074:	d135      	bne.n	801b0e2 <_vfiprintf_r+0x1ce>
 801b076:	9b03      	ldr	r3, [sp, #12]
 801b078:	1d1a      	adds	r2, r3, #4
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	9203      	str	r2, [sp, #12]
 801b07e:	2b00      	cmp	r3, #0
 801b080:	bfb8      	it	lt
 801b082:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b086:	3402      	adds	r4, #2
 801b088:	9305      	str	r3, [sp, #20]
 801b08a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b170 <_vfiprintf_r+0x25c>
 801b08e:	7821      	ldrb	r1, [r4, #0]
 801b090:	2203      	movs	r2, #3
 801b092:	4650      	mov	r0, sl
 801b094:	f7e5 f8b4 	bl	8000200 <memchr>
 801b098:	b140      	cbz	r0, 801b0ac <_vfiprintf_r+0x198>
 801b09a:	2340      	movs	r3, #64	; 0x40
 801b09c:	eba0 000a 	sub.w	r0, r0, sl
 801b0a0:	fa03 f000 	lsl.w	r0, r3, r0
 801b0a4:	9b04      	ldr	r3, [sp, #16]
 801b0a6:	4303      	orrs	r3, r0
 801b0a8:	3401      	adds	r4, #1
 801b0aa:	9304      	str	r3, [sp, #16]
 801b0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0b0:	482c      	ldr	r0, [pc, #176]	; (801b164 <_vfiprintf_r+0x250>)
 801b0b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b0b6:	2206      	movs	r2, #6
 801b0b8:	f7e5 f8a2 	bl	8000200 <memchr>
 801b0bc:	2800      	cmp	r0, #0
 801b0be:	d03f      	beq.n	801b140 <_vfiprintf_r+0x22c>
 801b0c0:	4b29      	ldr	r3, [pc, #164]	; (801b168 <_vfiprintf_r+0x254>)
 801b0c2:	bb1b      	cbnz	r3, 801b10c <_vfiprintf_r+0x1f8>
 801b0c4:	9b03      	ldr	r3, [sp, #12]
 801b0c6:	3307      	adds	r3, #7
 801b0c8:	f023 0307 	bic.w	r3, r3, #7
 801b0cc:	3308      	adds	r3, #8
 801b0ce:	9303      	str	r3, [sp, #12]
 801b0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0d2:	443b      	add	r3, r7
 801b0d4:	9309      	str	r3, [sp, #36]	; 0x24
 801b0d6:	e767      	b.n	801afa8 <_vfiprintf_r+0x94>
 801b0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 801b0dc:	460c      	mov	r4, r1
 801b0de:	2001      	movs	r0, #1
 801b0e0:	e7a5      	b.n	801b02e <_vfiprintf_r+0x11a>
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	3401      	adds	r4, #1
 801b0e6:	9305      	str	r3, [sp, #20]
 801b0e8:	4619      	mov	r1, r3
 801b0ea:	f04f 0c0a 	mov.w	ip, #10
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b0f4:	3a30      	subs	r2, #48	; 0x30
 801b0f6:	2a09      	cmp	r2, #9
 801b0f8:	d903      	bls.n	801b102 <_vfiprintf_r+0x1ee>
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	d0c5      	beq.n	801b08a <_vfiprintf_r+0x176>
 801b0fe:	9105      	str	r1, [sp, #20]
 801b100:	e7c3      	b.n	801b08a <_vfiprintf_r+0x176>
 801b102:	fb0c 2101 	mla	r1, ip, r1, r2
 801b106:	4604      	mov	r4, r0
 801b108:	2301      	movs	r3, #1
 801b10a:	e7f0      	b.n	801b0ee <_vfiprintf_r+0x1da>
 801b10c:	ab03      	add	r3, sp, #12
 801b10e:	9300      	str	r3, [sp, #0]
 801b110:	462a      	mov	r2, r5
 801b112:	4b16      	ldr	r3, [pc, #88]	; (801b16c <_vfiprintf_r+0x258>)
 801b114:	a904      	add	r1, sp, #16
 801b116:	4630      	mov	r0, r6
 801b118:	f7fb fe78 	bl	8016e0c <_printf_float>
 801b11c:	4607      	mov	r7, r0
 801b11e:	1c78      	adds	r0, r7, #1
 801b120:	d1d6      	bne.n	801b0d0 <_vfiprintf_r+0x1bc>
 801b122:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b124:	07d9      	lsls	r1, r3, #31
 801b126:	d405      	bmi.n	801b134 <_vfiprintf_r+0x220>
 801b128:	89ab      	ldrh	r3, [r5, #12]
 801b12a:	059a      	lsls	r2, r3, #22
 801b12c:	d402      	bmi.n	801b134 <_vfiprintf_r+0x220>
 801b12e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b130:	f7fe ff76 	bl	801a020 <__retarget_lock_release_recursive>
 801b134:	89ab      	ldrh	r3, [r5, #12]
 801b136:	065b      	lsls	r3, r3, #25
 801b138:	f53f af12 	bmi.w	801af60 <_vfiprintf_r+0x4c>
 801b13c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b13e:	e711      	b.n	801af64 <_vfiprintf_r+0x50>
 801b140:	ab03      	add	r3, sp, #12
 801b142:	9300      	str	r3, [sp, #0]
 801b144:	462a      	mov	r2, r5
 801b146:	4b09      	ldr	r3, [pc, #36]	; (801b16c <_vfiprintf_r+0x258>)
 801b148:	a904      	add	r1, sp, #16
 801b14a:	4630      	mov	r0, r6
 801b14c:	f7fc f902 	bl	8017354 <_printf_i>
 801b150:	e7e4      	b.n	801b11c <_vfiprintf_r+0x208>
 801b152:	bf00      	nop
 801b154:	08032e34 	.word	0x08032e34
 801b158:	08032e54 	.word	0x08032e54
 801b15c:	08032e14 	.word	0x08032e14
 801b160:	08033054 	.word	0x08033054
 801b164:	0803305e 	.word	0x0803305e
 801b168:	08016e0d 	.word	0x08016e0d
 801b16c:	0801aeef 	.word	0x0801aeef
 801b170:	0803305a 	.word	0x0803305a
 801b174:	00000000 	.word	0x00000000

0801b178 <nan>:
 801b178:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b180 <nan+0x8>
 801b17c:	4770      	bx	lr
 801b17e:	bf00      	nop
 801b180:	00000000 	.word	0x00000000
 801b184:	7ff80000 	.word	0x7ff80000

0801b188 <_sbrk_r>:
 801b188:	b538      	push	{r3, r4, r5, lr}
 801b18a:	4d06      	ldr	r5, [pc, #24]	; (801b1a4 <_sbrk_r+0x1c>)
 801b18c:	2300      	movs	r3, #0
 801b18e:	4604      	mov	r4, r0
 801b190:	4608      	mov	r0, r1
 801b192:	602b      	str	r3, [r5, #0]
 801b194:	f7e9 fb04 	bl	80047a0 <_sbrk>
 801b198:	1c43      	adds	r3, r0, #1
 801b19a:	d102      	bne.n	801b1a2 <_sbrk_r+0x1a>
 801b19c:	682b      	ldr	r3, [r5, #0]
 801b19e:	b103      	cbz	r3, 801b1a2 <_sbrk_r+0x1a>
 801b1a0:	6023      	str	r3, [r4, #0]
 801b1a2:	bd38      	pop	{r3, r4, r5, pc}
 801b1a4:	2000d89c 	.word	0x2000d89c

0801b1a8 <__sread>:
 801b1a8:	b510      	push	{r4, lr}
 801b1aa:	460c      	mov	r4, r1
 801b1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1b0:	f000 f8da 	bl	801b368 <_read_r>
 801b1b4:	2800      	cmp	r0, #0
 801b1b6:	bfab      	itete	ge
 801b1b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b1ba:	89a3      	ldrhlt	r3, [r4, #12]
 801b1bc:	181b      	addge	r3, r3, r0
 801b1be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b1c2:	bfac      	ite	ge
 801b1c4:	6563      	strge	r3, [r4, #84]	; 0x54
 801b1c6:	81a3      	strhlt	r3, [r4, #12]
 801b1c8:	bd10      	pop	{r4, pc}

0801b1ca <__swrite>:
 801b1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1ce:	461f      	mov	r7, r3
 801b1d0:	898b      	ldrh	r3, [r1, #12]
 801b1d2:	05db      	lsls	r3, r3, #23
 801b1d4:	4605      	mov	r5, r0
 801b1d6:	460c      	mov	r4, r1
 801b1d8:	4616      	mov	r6, r2
 801b1da:	d505      	bpl.n	801b1e8 <__swrite+0x1e>
 801b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1e0:	2302      	movs	r3, #2
 801b1e2:	2200      	movs	r2, #0
 801b1e4:	f000 f87c 	bl	801b2e0 <_lseek_r>
 801b1e8:	89a3      	ldrh	r3, [r4, #12]
 801b1ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b1ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b1f2:	81a3      	strh	r3, [r4, #12]
 801b1f4:	4632      	mov	r2, r6
 801b1f6:	463b      	mov	r3, r7
 801b1f8:	4628      	mov	r0, r5
 801b1fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b1fe:	f000 b823 	b.w	801b248 <_write_r>

0801b202 <__sseek>:
 801b202:	b510      	push	{r4, lr}
 801b204:	460c      	mov	r4, r1
 801b206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b20a:	f000 f869 	bl	801b2e0 <_lseek_r>
 801b20e:	1c43      	adds	r3, r0, #1
 801b210:	89a3      	ldrh	r3, [r4, #12]
 801b212:	bf15      	itete	ne
 801b214:	6560      	strne	r0, [r4, #84]	; 0x54
 801b216:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b21a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b21e:	81a3      	strheq	r3, [r4, #12]
 801b220:	bf18      	it	ne
 801b222:	81a3      	strhne	r3, [r4, #12]
 801b224:	bd10      	pop	{r4, pc}

0801b226 <__sclose>:
 801b226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b22a:	f000 b827 	b.w	801b27c <_close_r>

0801b22e <__ascii_wctomb>:
 801b22e:	b149      	cbz	r1, 801b244 <__ascii_wctomb+0x16>
 801b230:	2aff      	cmp	r2, #255	; 0xff
 801b232:	bf85      	ittet	hi
 801b234:	238a      	movhi	r3, #138	; 0x8a
 801b236:	6003      	strhi	r3, [r0, #0]
 801b238:	700a      	strbls	r2, [r1, #0]
 801b23a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801b23e:	bf98      	it	ls
 801b240:	2001      	movls	r0, #1
 801b242:	4770      	bx	lr
 801b244:	4608      	mov	r0, r1
 801b246:	4770      	bx	lr

0801b248 <_write_r>:
 801b248:	b538      	push	{r3, r4, r5, lr}
 801b24a:	4d07      	ldr	r5, [pc, #28]	; (801b268 <_write_r+0x20>)
 801b24c:	4604      	mov	r4, r0
 801b24e:	4608      	mov	r0, r1
 801b250:	4611      	mov	r1, r2
 801b252:	2200      	movs	r2, #0
 801b254:	602a      	str	r2, [r5, #0]
 801b256:	461a      	mov	r2, r3
 801b258:	f7e8 fffa 	bl	8004250 <_write>
 801b25c:	1c43      	adds	r3, r0, #1
 801b25e:	d102      	bne.n	801b266 <_write_r+0x1e>
 801b260:	682b      	ldr	r3, [r5, #0]
 801b262:	b103      	cbz	r3, 801b266 <_write_r+0x1e>
 801b264:	6023      	str	r3, [r4, #0]
 801b266:	bd38      	pop	{r3, r4, r5, pc}
 801b268:	2000d89c 	.word	0x2000d89c

0801b26c <abort>:
 801b26c:	b508      	push	{r3, lr}
 801b26e:	2006      	movs	r0, #6
 801b270:	f000 f8b4 	bl	801b3dc <raise>
 801b274:	2001      	movs	r0, #1
 801b276:	f7e9 fa37 	bl	80046e8 <_exit>
	...

0801b27c <_close_r>:
 801b27c:	b538      	push	{r3, r4, r5, lr}
 801b27e:	4d06      	ldr	r5, [pc, #24]	; (801b298 <_close_r+0x1c>)
 801b280:	2300      	movs	r3, #0
 801b282:	4604      	mov	r4, r0
 801b284:	4608      	mov	r0, r1
 801b286:	602b      	str	r3, [r5, #0]
 801b288:	f7e9 fa55 	bl	8004736 <_close>
 801b28c:	1c43      	adds	r3, r0, #1
 801b28e:	d102      	bne.n	801b296 <_close_r+0x1a>
 801b290:	682b      	ldr	r3, [r5, #0]
 801b292:	b103      	cbz	r3, 801b296 <_close_r+0x1a>
 801b294:	6023      	str	r3, [r4, #0]
 801b296:	bd38      	pop	{r3, r4, r5, pc}
 801b298:	2000d89c 	.word	0x2000d89c

0801b29c <_fstat_r>:
 801b29c:	b538      	push	{r3, r4, r5, lr}
 801b29e:	4d07      	ldr	r5, [pc, #28]	; (801b2bc <_fstat_r+0x20>)
 801b2a0:	2300      	movs	r3, #0
 801b2a2:	4604      	mov	r4, r0
 801b2a4:	4608      	mov	r0, r1
 801b2a6:	4611      	mov	r1, r2
 801b2a8:	602b      	str	r3, [r5, #0]
 801b2aa:	f7e9 fa50 	bl	800474e <_fstat>
 801b2ae:	1c43      	adds	r3, r0, #1
 801b2b0:	d102      	bne.n	801b2b8 <_fstat_r+0x1c>
 801b2b2:	682b      	ldr	r3, [r5, #0]
 801b2b4:	b103      	cbz	r3, 801b2b8 <_fstat_r+0x1c>
 801b2b6:	6023      	str	r3, [r4, #0]
 801b2b8:	bd38      	pop	{r3, r4, r5, pc}
 801b2ba:	bf00      	nop
 801b2bc:	2000d89c 	.word	0x2000d89c

0801b2c0 <_isatty_r>:
 801b2c0:	b538      	push	{r3, r4, r5, lr}
 801b2c2:	4d06      	ldr	r5, [pc, #24]	; (801b2dc <_isatty_r+0x1c>)
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	4604      	mov	r4, r0
 801b2c8:	4608      	mov	r0, r1
 801b2ca:	602b      	str	r3, [r5, #0]
 801b2cc:	f7e9 fa4f 	bl	800476e <_isatty>
 801b2d0:	1c43      	adds	r3, r0, #1
 801b2d2:	d102      	bne.n	801b2da <_isatty_r+0x1a>
 801b2d4:	682b      	ldr	r3, [r5, #0]
 801b2d6:	b103      	cbz	r3, 801b2da <_isatty_r+0x1a>
 801b2d8:	6023      	str	r3, [r4, #0]
 801b2da:	bd38      	pop	{r3, r4, r5, pc}
 801b2dc:	2000d89c 	.word	0x2000d89c

0801b2e0 <_lseek_r>:
 801b2e0:	b538      	push	{r3, r4, r5, lr}
 801b2e2:	4d07      	ldr	r5, [pc, #28]	; (801b300 <_lseek_r+0x20>)
 801b2e4:	4604      	mov	r4, r0
 801b2e6:	4608      	mov	r0, r1
 801b2e8:	4611      	mov	r1, r2
 801b2ea:	2200      	movs	r2, #0
 801b2ec:	602a      	str	r2, [r5, #0]
 801b2ee:	461a      	mov	r2, r3
 801b2f0:	f7e9 fa48 	bl	8004784 <_lseek>
 801b2f4:	1c43      	adds	r3, r0, #1
 801b2f6:	d102      	bne.n	801b2fe <_lseek_r+0x1e>
 801b2f8:	682b      	ldr	r3, [r5, #0]
 801b2fa:	b103      	cbz	r3, 801b2fe <_lseek_r+0x1e>
 801b2fc:	6023      	str	r3, [r4, #0]
 801b2fe:	bd38      	pop	{r3, r4, r5, pc}
 801b300:	2000d89c 	.word	0x2000d89c

0801b304 <__malloc_lock>:
 801b304:	4801      	ldr	r0, [pc, #4]	; (801b30c <__malloc_lock+0x8>)
 801b306:	f7fe be8a 	b.w	801a01e <__retarget_lock_acquire_recursive>
 801b30a:	bf00      	nop
 801b30c:	2000d8a4 	.word	0x2000d8a4

0801b310 <__malloc_unlock>:
 801b310:	4801      	ldr	r0, [pc, #4]	; (801b318 <__malloc_unlock+0x8>)
 801b312:	f7fe be85 	b.w	801a020 <__retarget_lock_release_recursive>
 801b316:	bf00      	nop
 801b318:	2000d8a4 	.word	0x2000d8a4

0801b31c <_realloc_r>:
 801b31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b31e:	4607      	mov	r7, r0
 801b320:	4614      	mov	r4, r2
 801b322:	460e      	mov	r6, r1
 801b324:	b921      	cbnz	r1, 801b330 <_realloc_r+0x14>
 801b326:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b32a:	4611      	mov	r1, r2
 801b32c:	f7ff bc12 	b.w	801ab54 <_malloc_r>
 801b330:	b922      	cbnz	r2, 801b33c <_realloc_r+0x20>
 801b332:	f7ff fbbf 	bl	801aab4 <_free_r>
 801b336:	4625      	mov	r5, r4
 801b338:	4628      	mov	r0, r5
 801b33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b33c:	f000 f86a 	bl	801b414 <_malloc_usable_size_r>
 801b340:	42a0      	cmp	r0, r4
 801b342:	d20f      	bcs.n	801b364 <_realloc_r+0x48>
 801b344:	4621      	mov	r1, r4
 801b346:	4638      	mov	r0, r7
 801b348:	f7ff fc04 	bl	801ab54 <_malloc_r>
 801b34c:	4605      	mov	r5, r0
 801b34e:	2800      	cmp	r0, #0
 801b350:	d0f2      	beq.n	801b338 <_realloc_r+0x1c>
 801b352:	4631      	mov	r1, r6
 801b354:	4622      	mov	r2, r4
 801b356:	f7fb fc89 	bl	8016c6c <memcpy>
 801b35a:	4631      	mov	r1, r6
 801b35c:	4638      	mov	r0, r7
 801b35e:	f7ff fba9 	bl	801aab4 <_free_r>
 801b362:	e7e9      	b.n	801b338 <_realloc_r+0x1c>
 801b364:	4635      	mov	r5, r6
 801b366:	e7e7      	b.n	801b338 <_realloc_r+0x1c>

0801b368 <_read_r>:
 801b368:	b538      	push	{r3, r4, r5, lr}
 801b36a:	4d07      	ldr	r5, [pc, #28]	; (801b388 <_read_r+0x20>)
 801b36c:	4604      	mov	r4, r0
 801b36e:	4608      	mov	r0, r1
 801b370:	4611      	mov	r1, r2
 801b372:	2200      	movs	r2, #0
 801b374:	602a      	str	r2, [r5, #0]
 801b376:	461a      	mov	r2, r3
 801b378:	f7e9 f9c0 	bl	80046fc <_read>
 801b37c:	1c43      	adds	r3, r0, #1
 801b37e:	d102      	bne.n	801b386 <_read_r+0x1e>
 801b380:	682b      	ldr	r3, [r5, #0]
 801b382:	b103      	cbz	r3, 801b386 <_read_r+0x1e>
 801b384:	6023      	str	r3, [r4, #0]
 801b386:	bd38      	pop	{r3, r4, r5, pc}
 801b388:	2000d89c 	.word	0x2000d89c

0801b38c <_raise_r>:
 801b38c:	291f      	cmp	r1, #31
 801b38e:	b538      	push	{r3, r4, r5, lr}
 801b390:	4604      	mov	r4, r0
 801b392:	460d      	mov	r5, r1
 801b394:	d904      	bls.n	801b3a0 <_raise_r+0x14>
 801b396:	2316      	movs	r3, #22
 801b398:	6003      	str	r3, [r0, #0]
 801b39a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b39e:	bd38      	pop	{r3, r4, r5, pc}
 801b3a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b3a2:	b112      	cbz	r2, 801b3aa <_raise_r+0x1e>
 801b3a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b3a8:	b94b      	cbnz	r3, 801b3be <_raise_r+0x32>
 801b3aa:	4620      	mov	r0, r4
 801b3ac:	f000 f830 	bl	801b410 <_getpid_r>
 801b3b0:	462a      	mov	r2, r5
 801b3b2:	4601      	mov	r1, r0
 801b3b4:	4620      	mov	r0, r4
 801b3b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3ba:	f000 b817 	b.w	801b3ec <_kill_r>
 801b3be:	2b01      	cmp	r3, #1
 801b3c0:	d00a      	beq.n	801b3d8 <_raise_r+0x4c>
 801b3c2:	1c59      	adds	r1, r3, #1
 801b3c4:	d103      	bne.n	801b3ce <_raise_r+0x42>
 801b3c6:	2316      	movs	r3, #22
 801b3c8:	6003      	str	r3, [r0, #0]
 801b3ca:	2001      	movs	r0, #1
 801b3cc:	e7e7      	b.n	801b39e <_raise_r+0x12>
 801b3ce:	2400      	movs	r4, #0
 801b3d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b3d4:	4628      	mov	r0, r5
 801b3d6:	4798      	blx	r3
 801b3d8:	2000      	movs	r0, #0
 801b3da:	e7e0      	b.n	801b39e <_raise_r+0x12>

0801b3dc <raise>:
 801b3dc:	4b02      	ldr	r3, [pc, #8]	; (801b3e8 <raise+0xc>)
 801b3de:	4601      	mov	r1, r0
 801b3e0:	6818      	ldr	r0, [r3, #0]
 801b3e2:	f7ff bfd3 	b.w	801b38c <_raise_r>
 801b3e6:	bf00      	nop
 801b3e8:	200005c8 	.word	0x200005c8

0801b3ec <_kill_r>:
 801b3ec:	b538      	push	{r3, r4, r5, lr}
 801b3ee:	4d07      	ldr	r5, [pc, #28]	; (801b40c <_kill_r+0x20>)
 801b3f0:	2300      	movs	r3, #0
 801b3f2:	4604      	mov	r4, r0
 801b3f4:	4608      	mov	r0, r1
 801b3f6:	4611      	mov	r1, r2
 801b3f8:	602b      	str	r3, [r5, #0]
 801b3fa:	f7e9 f963 	bl	80046c4 <_kill>
 801b3fe:	1c43      	adds	r3, r0, #1
 801b400:	d102      	bne.n	801b408 <_kill_r+0x1c>
 801b402:	682b      	ldr	r3, [r5, #0]
 801b404:	b103      	cbz	r3, 801b408 <_kill_r+0x1c>
 801b406:	6023      	str	r3, [r4, #0]
 801b408:	bd38      	pop	{r3, r4, r5, pc}
 801b40a:	bf00      	nop
 801b40c:	2000d89c 	.word	0x2000d89c

0801b410 <_getpid_r>:
 801b410:	f7e9 b950 	b.w	80046b4 <_getpid>

0801b414 <_malloc_usable_size_r>:
 801b414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b418:	1f18      	subs	r0, r3, #4
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	bfbc      	itt	lt
 801b41e:	580b      	ldrlt	r3, [r1, r0]
 801b420:	18c0      	addlt	r0, r0, r3
 801b422:	4770      	bx	lr

0801b424 <_init>:
 801b424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b426:	bf00      	nop
 801b428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b42a:	bc08      	pop	{r3}
 801b42c:	469e      	mov	lr, r3
 801b42e:	4770      	bx	lr

0801b430 <_fini>:
 801b430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b432:	bf00      	nop
 801b434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b436:	bc08      	pop	{r3}
 801b438:	469e      	mov	lr, r3
 801b43a:	4770      	bx	lr
