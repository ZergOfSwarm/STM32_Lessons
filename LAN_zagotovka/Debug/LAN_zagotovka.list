
LAN_zagotovka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000acf8  08016b98  08016b98  00026b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021890  08021890  00040520  2**0
                  CONTENTS
  4 .ARM          00000008  08021890  08021890  00031890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021898  08021898  00040520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021898  08021898  00031898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802189c  0802189c  0003189c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000520  20000000  080218a0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040520  2**0
                  CONTENTS
 10 .bss          0000db10  20000520  20000520  00040520  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000e030  2000e030  00040520  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040520  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e942  00000000  00000000  00040550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000757e  00000000  00000000  0007ee92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e20  00000000  00000000  00086410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d38  00000000  00000000  00088230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030c57  00000000  00000000  00089f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031180  00000000  00000000  000babbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebfb7  00000000  00000000  000ebd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d7cf6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000088c0  00000000  00000000  001d7d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000520 	.word	0x20000520
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016b80 	.word	0x08016b80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000524 	.word	0x20000524
 80001cc:	08016b80 	.word	0x08016b80

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ssi_handler>:
/* we will use character "x", "y","z" as tag for SSI */
char const *TAGCHAR[] = { "json", "formjson", "formjson2", "jsontag1", "jsontag2", "jsontag3" };
char const **TAGS = TAGCHAR;
int f = 0;
//
uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen, u16_t current_tag_part, u16_t *next_tag_part) {
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	b09b      	sub	sp, #108	; 0x6c
 800059c:	af0c      	add	r7, sp, #48	; 0x30
 800059e:	6378      	str	r0, [r7, #52]	; 0x34
 80005a0:	6339      	str	r1, [r7, #48]	; 0x30
 80005a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80005a4:	857b      	strh	r3, [r7, #42]	; 0x2a
	//printf("+++ jsongo +++ %d \n", jsongo);
	switch (iIndex) {
 80005a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	f000 874f 	beq.w	800144c <ssi_handler+0xeb4>
 80005ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005b0:	2b02      	cmp	r3, #2
 80005b2:	f300 874d 	bgt.w	8001450 <ssi_handler+0xeb8>
 80005b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d005      	beq.n	80005c8 <ssi_handler+0x30>
 80005bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005be:	2b01      	cmp	r3, #1
 80005c0:	f000 8598 	beq.w	80010f4 <ssi_handler+0xb5c>
//			memset(json, '\0', sizeof(json));
//			memset(arrline, '\0', sizeof(arrline));
//			return strlen(pcInsert);
		break;
	default:
		break;
 80005c4:	f000 bf44 	b.w	8001450 <ssi_handler+0xeb8>
		if (variable == tabline) {
 80005c8:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <ssi_handler+0x48>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <ssi_handler+0x4c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	d109      	bne.n	80005e8 <ssi_handler+0x50>
			variable = 0;
 80005d4:	4b02      	ldr	r3, [pc, #8]	; (80005e0 <ssi_handler+0x48>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
			break;
 80005da:	f000 bf3a 	b.w	8001452 <ssi_handler+0xeba>
 80005de:	bf00      	nop
 80005e0:	2000053c 	.word	0x2000053c
 80005e4:	20000488 	.word	0x20000488
			if (variable == 0) {
 80005e8:	4ba6      	ldr	r3, [pc, #664]	; (8000884 <ssi_handler+0x2ec>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	f040 81cd 	bne.w	800098c <ssi_handler+0x3f4>
				if (jsongo == 1) {
 80005f2:	4ba5      	ldr	r3, [pc, #660]	; (8000888 <ssi_handler+0x2f0>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d17c      	bne.n	80006f4 <ssi_handler+0x15c>
					sprintf(pcInsert, "[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype,
 80005fa:	4ba2      	ldr	r3, [pc, #648]	; (8000884 <ssi_handler+0x2ec>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4aa3      	ldr	r2, [pc, #652]	; (800088c <ssi_handler+0x2f4>)
 8000600:	218c      	movs	r1, #140	; 0x8c
 8000602:	fb01 f303 	mul.w	r3, r1, r3
 8000606:	4413      	add	r3, r2
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
 800060c:	4b9d      	ldr	r3, [pc, #628]	; (8000884 <ssi_handler+0x2ec>)
 800060e:	6819      	ldr	r1, [r3, #0]
 8000610:	6239      	str	r1, [r7, #32]
 8000612:	4b9c      	ldr	r3, [pc, #624]	; (8000884 <ssi_handler+0x2ec>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4613      	mov	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4413      	add	r3, r2
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4a9c      	ldr	r2, [pc, #624]	; (8000890 <ssi_handler+0x2f8>)
 8000620:	1899      	adds	r1, r3, r2
 8000622:	61f9      	str	r1, [r7, #28]
 8000624:	4b97      	ldr	r3, [pc, #604]	; (8000884 <ssi_handler+0x2ec>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	228c      	movs	r2, #140	; 0x8c
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	3318      	adds	r3, #24
 8000630:	4a96      	ldr	r2, [pc, #600]	; (800088c <ssi_handler+0x2f4>)
 8000632:	189c      	adds	r4, r3, r2
 8000634:	4b93      	ldr	r3, [pc, #588]	; (8000884 <ssi_handler+0x2ec>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a94      	ldr	r2, [pc, #592]	; (800088c <ssi_handler+0x2f4>)
 800063a:	218c      	movs	r1, #140	; 0x8c
 800063c:	fb01 f303 	mul.w	r3, r1, r3
 8000640:	4413      	add	r3, r2
 8000642:	332c      	adds	r3, #44	; 0x2c
 8000644:	681d      	ldr	r5, [r3, #0]
 8000646:	4b8f      	ldr	r3, [pc, #572]	; (8000884 <ssi_handler+0x2ec>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a90      	ldr	r2, [pc, #576]	; (800088c <ssi_handler+0x2f4>)
 800064c:	218c      	movs	r1, #140	; 0x8c
 800064e:	fb01 f303 	mul.w	r3, r1, r3
 8000652:	4413      	add	r3, r2
 8000654:	3330      	adds	r3, #48	; 0x30
 8000656:	681e      	ldr	r6, [r3, #0]
 8000658:	4b8a      	ldr	r3, [pc, #552]	; (8000884 <ssi_handler+0x2ec>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a8b      	ldr	r2, [pc, #556]	; (800088c <ssi_handler+0x2f4>)
 800065e:	218c      	movs	r1, #140	; 0x8c
 8000660:	fb01 f303 	mul.w	r3, r1, r3
 8000664:	4413      	add	r3, r2
 8000666:	3334      	adds	r3, #52	; 0x34
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	61ba      	str	r2, [r7, #24]
 800066c:	4b85      	ldr	r3, [pc, #532]	; (8000884 <ssi_handler+0x2ec>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a86      	ldr	r2, [pc, #536]	; (800088c <ssi_handler+0x2f4>)
 8000672:	218c      	movs	r1, #140	; 0x8c
 8000674:	fb01 f303 	mul.w	r3, r1, r3
 8000678:	4413      	add	r3, r2
 800067a:	3338      	adds	r3, #56	; 0x38
 800067c:	6819      	ldr	r1, [r3, #0]
 800067e:	6179      	str	r1, [r7, #20]
 8000680:	4b80      	ldr	r3, [pc, #512]	; (8000884 <ssi_handler+0x2ec>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a81      	ldr	r2, [pc, #516]	; (800088c <ssi_handler+0x2f4>)
 8000686:	218c      	movs	r1, #140	; 0x8c
 8000688:	fb01 f303 	mul.w	r3, r1, r3
 800068c:	4413      	add	r3, r2
 800068e:	333c      	adds	r3, #60	; 0x3c
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	613b      	str	r3, [r7, #16]
 8000694:	4b7b      	ldr	r3, [pc, #492]	; (8000884 <ssi_handler+0x2ec>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a7c      	ldr	r2, [pc, #496]	; (800088c <ssi_handler+0x2f4>)
 800069a:	218c      	movs	r1, #140	; 0x8c
 800069c:	fb01 f303 	mul.w	r3, r1, r3
 80006a0:	4413      	add	r3, r2
 80006a2:	3340      	adds	r3, #64	; 0x40
 80006a4:	6819      	ldr	r1, [r3, #0]
							T[variable].binter, T[variable].hinter, T[variable].repeat, T[variable].rinter, T[variable].dcinter, T[variable].pclick, T[variable].info, T[variable].onoff);
 80006a6:	4b77      	ldr	r3, [pc, #476]	; (8000884 <ssi_handler+0x2ec>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	228c      	movs	r2, #140	; 0x8c
 80006ac:	fb02 f303 	mul.w	r3, r2, r3
 80006b0:	3340      	adds	r3, #64	; 0x40
 80006b2:	4a76      	ldr	r2, [pc, #472]	; (800088c <ssi_handler+0x2f4>)
 80006b4:	4413      	add	r3, r2
 80006b6:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert, "[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype,
 80006b8:	4b72      	ldr	r3, [pc, #456]	; (8000884 <ssi_handler+0x2ec>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4873      	ldr	r0, [pc, #460]	; (800088c <ssi_handler+0x2f4>)
 80006be:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 80006c2:	fb0c f303 	mul.w	r3, ip, r3
 80006c6:	4403      	add	r3, r0
 80006c8:	3364      	adds	r3, #100	; 0x64
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	9309      	str	r3, [sp, #36]	; 0x24
 80006ce:	9208      	str	r2, [sp, #32]
 80006d0:	9107      	str	r1, [sp, #28]
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	9306      	str	r3, [sp, #24]
 80006d6:	6979      	ldr	r1, [r7, #20]
 80006d8:	9105      	str	r1, [sp, #20]
 80006da:	69ba      	ldr	r2, [r7, #24]
 80006dc:	9204      	str	r2, [sp, #16]
 80006de:	9603      	str	r6, [sp, #12]
 80006e0:	9502      	str	r5, [sp, #8]
 80006e2:	9401      	str	r4, [sp, #4]
 80006e4:	69f9      	ldr	r1, [r7, #28]
 80006e6:	9100      	str	r1, [sp, #0]
 80006e8:	6a3b      	ldr	r3, [r7, #32]
 80006ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006ec:	4969      	ldr	r1, [pc, #420]	; (8000894 <ssi_handler+0x2fc>)
 80006ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80006f0:	f014 ffba 	bl	8015668 <siprintf>
				if (jsongo == 2) {
 80006f4:	4b64      	ldr	r3, [pc, #400]	; (8000888 <ssi_handler+0x2f0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d177      	bne.n	80007ec <ssi_handler+0x254>
					sprintf(pcInsert, "[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 80006fc:	4b61      	ldr	r3, [pc, #388]	; (8000884 <ssi_handler+0x2ec>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a62      	ldr	r2, [pc, #392]	; (800088c <ssi_handler+0x2f4>)
 8000702:	218c      	movs	r1, #140	; 0x8c
 8000704:	fb01 f303 	mul.w	r3, r1, r3
 8000708:	4413      	add	r3, r2
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
 800070e:	4b5d      	ldr	r3, [pc, #372]	; (8000884 <ssi_handler+0x2ec>)
 8000710:	6819      	ldr	r1, [r3, #0]
 8000712:	6239      	str	r1, [r7, #32]
 8000714:	4b5b      	ldr	r3, [pc, #364]	; (8000884 <ssi_handler+0x2ec>)
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	4613      	mov	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	4413      	add	r3, r2
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4a5b      	ldr	r2, [pc, #364]	; (8000890 <ssi_handler+0x2f8>)
 8000722:	4413      	add	r3, r2
 8000724:	4a57      	ldr	r2, [pc, #348]	; (8000884 <ssi_handler+0x2ec>)
 8000726:	6812      	ldr	r2, [r2, #0]
 8000728:	218c      	movs	r1, #140	; 0x8c
 800072a:	fb01 f202 	mul.w	r2, r1, r2
 800072e:	3218      	adds	r2, #24
 8000730:	4956      	ldr	r1, [pc, #344]	; (800088c <ssi_handler+0x2f4>)
 8000732:	440a      	add	r2, r1
 8000734:	4953      	ldr	r1, [pc, #332]	; (8000884 <ssi_handler+0x2ec>)
 8000736:	6809      	ldr	r1, [r1, #0]
 8000738:	4854      	ldr	r0, [pc, #336]	; (800088c <ssi_handler+0x2f4>)
 800073a:	248c      	movs	r4, #140	; 0x8c
 800073c:	fb04 f101 	mul.w	r1, r4, r1
 8000740:	4401      	add	r1, r0
 8000742:	3104      	adds	r1, #4
 8000744:	6809      	ldr	r1, [r1, #0]
 8000746:	484f      	ldr	r0, [pc, #316]	; (8000884 <ssi_handler+0x2ec>)
 8000748:	6800      	ldr	r0, [r0, #0]
 800074a:	4c50      	ldr	r4, [pc, #320]	; (800088c <ssi_handler+0x2f4>)
 800074c:	258c      	movs	r5, #140	; 0x8c
 800074e:	fb05 f000 	mul.w	r0, r5, r0
 8000752:	4420      	add	r0, r4
 8000754:	3008      	adds	r0, #8
 8000756:	6800      	ldr	r0, [r0, #0]
 8000758:	61f8      	str	r0, [r7, #28]
 800075a:	4c4a      	ldr	r4, [pc, #296]	; (8000884 <ssi_handler+0x2ec>)
 800075c:	6824      	ldr	r4, [r4, #0]
 800075e:	4d4b      	ldr	r5, [pc, #300]	; (800088c <ssi_handler+0x2f4>)
 8000760:	268c      	movs	r6, #140	; 0x8c
 8000762:	fb06 f404 	mul.w	r4, r6, r4
 8000766:	442c      	add	r4, r5
 8000768:	340c      	adds	r4, #12
 800076a:	6820      	ldr	r0, [r4, #0]
 800076c:	61b8      	str	r0, [r7, #24]
 800076e:	4d45      	ldr	r5, [pc, #276]	; (8000884 <ssi_handler+0x2ec>)
 8000770:	682d      	ldr	r5, [r5, #0]
 8000772:	4e46      	ldr	r6, [pc, #280]	; (800088c <ssi_handler+0x2f4>)
 8000774:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000778:	fb0c f505 	mul.w	r5, ip, r5
 800077c:	4435      	add	r5, r6
 800077e:	3510      	adds	r5, #16
 8000780:	682d      	ldr	r5, [r5, #0]
 8000782:	4e40      	ldr	r6, [pc, #256]	; (8000884 <ssi_handler+0x2ec>)
 8000784:	6836      	ldr	r6, [r6, #0]
 8000786:	4841      	ldr	r0, [pc, #260]	; (800088c <ssi_handler+0x2f4>)
 8000788:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 800078c:	fb0c f606 	mul.w	r6, ip, r6
 8000790:	4406      	add	r6, r0
 8000792:	3614      	adds	r6, #20
 8000794:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue, T[variable].ponr, T[variable].info, T[variable].onoff);
 8000796:	483b      	ldr	r0, [pc, #236]	; (8000884 <ssi_handler+0x2ec>)
 8000798:	6800      	ldr	r0, [r0, #0]
 800079a:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 800079e:	fb0c fc00 	mul.w	ip, ip, r0
 80007a2:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80007a6:	4839      	ldr	r0, [pc, #228]	; (800088c <ssi_handler+0x2f4>)
 80007a8:	4484      	add	ip, r0
 80007aa:	f10c 0004 	add.w	r0, ip, #4
 80007ae:	6178      	str	r0, [r7, #20]
					sprintf(pcInsert, "[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 80007b0:	4834      	ldr	r0, [pc, #208]	; (8000884 <ssi_handler+0x2ec>)
 80007b2:	6800      	ldr	r0, [r0, #0]
 80007b4:	4c35      	ldr	r4, [pc, #212]	; (800088c <ssi_handler+0x2f4>)
 80007b6:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 80007ba:	fb0c fc00 	mul.w	ip, ip, r0
 80007be:	44a4      	add	ip, r4
 80007c0:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 80007c4:	f8dc 0000 	ldr.w	r0, [ip]
 80007c8:	9008      	str	r0, [sp, #32]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	9007      	str	r0, [sp, #28]
 80007ce:	9606      	str	r6, [sp, #24]
 80007d0:	9505      	str	r5, [sp, #20]
 80007d2:	69b8      	ldr	r0, [r7, #24]
 80007d4:	9004      	str	r0, [sp, #16]
 80007d6:	69f8      	ldr	r0, [r7, #28]
 80007d8:	9003      	str	r0, [sp, #12]
 80007da:	9102      	str	r1, [sp, #8]
 80007dc:	9201      	str	r2, [sp, #4]
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	6a3b      	ldr	r3, [r7, #32]
 80007e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007e4:	492c      	ldr	r1, [pc, #176]	; (8000898 <ssi_handler+0x300>)
 80007e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80007e8:	f014 ff3e 	bl	8015668 <siprintf>
				if (jsongo == 3) {
 80007ec:	4b26      	ldr	r3, [pc, #152]	; (8000888 <ssi_handler+0x2f0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d118      	bne.n	8000826 <ssi_handler+0x28e>
					sprintf(pcInsert, "[{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},", variable, tp[variable].pins, T[variable].topin);
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <ssi_handler+0x2ec>)
 80007f6:	6819      	ldr	r1, [r3, #0]
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <ssi_handler+0x2ec>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <ssi_handler+0x2f8>)
 8000806:	441a      	add	r2, r3
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <ssi_handler+0x2ec>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	481f      	ldr	r0, [pc, #124]	; (800088c <ssi_handler+0x2f4>)
 800080e:	248c      	movs	r4, #140	; 0x8c
 8000810:	fb04 f303 	mul.w	r3, r4, r3
 8000814:	4403      	add	r3, r0
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	4613      	mov	r3, r2
 800081c:	460a      	mov	r2, r1
 800081e:	491f      	ldr	r1, [pc, #124]	; (800089c <ssi_handler+0x304>)
 8000820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000822:	f014 ff21 	bl	8015668 <siprintf>
				if (jsongo == 4) {
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <ssi_handler+0x2f0>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b04      	cmp	r3, #4
 800082c:	f040 844b 	bne.w	80010c6 <ssi_handler+0xb2e>
					sprintf(pcInsert, "[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"dow\":\"%d\",\"tim\":%d,\"hr\":%d,\"min\":%d,\"sec\":%d,\"sr\":%d,\"ss\":%d,\"lat\":%d,\"lon\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].dow, T[variable].tim,
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <ssi_handler+0x2ec>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a15      	ldr	r2, [pc, #84]	; (800088c <ssi_handler+0x2f4>)
 8000836:	218c      	movs	r1, #140	; 0x8c
 8000838:	fb01 f303 	mul.w	r3, r1, r3
 800083c:	4413      	add	r3, r2
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <ssi_handler+0x2ec>)
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	6239      	str	r1, [r7, #32]
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <ssi_handler+0x2ec>)
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4613      	mov	r3, r2
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <ssi_handler+0x2f8>)
 8000856:	189d      	adds	r5, r3, r2
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <ssi_handler+0x2ec>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0b      	ldr	r2, [pc, #44]	; (800088c <ssi_handler+0x2f4>)
 800085e:	218c      	movs	r1, #140	; 0x8c
 8000860:	fb01 f303 	mul.w	r3, r1, r3
 8000864:	4413      	add	r3, r2
 8000866:	3368      	adds	r3, #104	; 0x68
 8000868:	681e      	ldr	r6, [r3, #0]
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <ssi_handler+0x2ec>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <ssi_handler+0x2f4>)
 8000870:	218c      	movs	r1, #140	; 0x8c
 8000872:	fb01 f303 	mul.w	r3, r1, r3
 8000876:	4413      	add	r3, r2
 8000878:	336c      	adds	r3, #108	; 0x6c
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	61f8      	str	r0, [r7, #28]
 800087e:	4b01      	ldr	r3, [pc, #4]	; (8000884 <ssi_handler+0x2ec>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	e00d      	b.n	80008a0 <ssi_handler+0x308>
 8000884:	2000053c 	.word	0x2000053c
 8000888:	20000540 	.word	0x20000540
 800088c:	20000b60 	.word	0x20000b60
 8000890:	20000000 	.word	0x20000000
 8000894:	08016bdc 	.word	0x08016bdc
 8000898:	08016c6c 	.word	0x08016c6c
 800089c:	08016ce8 	.word	0x08016ce8
 80008a0:	4a37      	ldr	r2, [pc, #220]	; (8000980 <ssi_handler+0x3e8>)
 80008a2:	218c      	movs	r1, #140	; 0x8c
 80008a4:	fb01 f303 	mul.w	r3, r1, r3
 80008a8:	4413      	add	r3, r2
 80008aa:	3370      	adds	r3, #112	; 0x70
 80008ac:	681c      	ldr	r4, [r3, #0]
 80008ae:	61bc      	str	r4, [r7, #24]
 80008b0:	4b34      	ldr	r3, [pc, #208]	; (8000984 <ssi_handler+0x3ec>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a32      	ldr	r2, [pc, #200]	; (8000980 <ssi_handler+0x3e8>)
 80008b6:	218c      	movs	r1, #140	; 0x8c
 80008b8:	fb01 f303 	mul.w	r3, r1, r3
 80008bc:	4413      	add	r3, r2
 80008be:	3374      	adds	r3, #116	; 0x74
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	617a      	str	r2, [r7, #20]
 80008c4:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <ssi_handler+0x3ec>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a2d      	ldr	r2, [pc, #180]	; (8000980 <ssi_handler+0x3e8>)
 80008ca:	218c      	movs	r1, #140	; 0x8c
 80008cc:	fb01 f303 	mul.w	r3, r1, r3
 80008d0:	4413      	add	r3, r2
 80008d2:	3378      	adds	r3, #120	; 0x78
 80008d4:	6819      	ldr	r1, [r3, #0]
 80008d6:	6139      	str	r1, [r7, #16]
 80008d8:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <ssi_handler+0x3ec>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a28      	ldr	r2, [pc, #160]	; (8000980 <ssi_handler+0x3e8>)
 80008de:	218c      	movs	r1, #140	; 0x8c
 80008e0:	fb01 f303 	mul.w	r3, r1, r3
 80008e4:	4413      	add	r3, r2
 80008e6:	337c      	adds	r3, #124	; 0x7c
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <ssi_handler+0x3ec>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a23      	ldr	r2, [pc, #140]	; (8000980 <ssi_handler+0x3e8>)
 80008f2:	218c      	movs	r1, #140	; 0x8c
 80008f4:	fb01 f303 	mul.w	r3, r1, r3
 80008f8:	4413      	add	r3, r2
 80008fa:	3380      	adds	r3, #128	; 0x80
 80008fc:	6818      	ldr	r0, [r3, #0]
 80008fe:	60b8      	str	r0, [r7, #8]
 8000900:	4b20      	ldr	r3, [pc, #128]	; (8000984 <ssi_handler+0x3ec>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <ssi_handler+0x3e8>)
 8000906:	218c      	movs	r1, #140	; 0x8c
 8000908:	fb01 f303 	mul.w	r3, r1, r3
 800090c:	4413      	add	r3, r2
 800090e:	3384      	adds	r3, #132	; 0x84
 8000910:	681c      	ldr	r4, [r3, #0]
 8000912:	607c      	str	r4, [r7, #4]
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <ssi_handler+0x3ec>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a19      	ldr	r2, [pc, #100]	; (8000980 <ssi_handler+0x3e8>)
 800091a:	218c      	movs	r1, #140	; 0x8c
 800091c:	fb01 f303 	mul.w	r3, r1, r3
 8000920:	4413      	add	r3, r2
 8000922:	3388      	adds	r3, #136	; 0x88
 8000924:	681c      	ldr	r4, [r3, #0]
							T[variable].hr, T[variable].min, T[variable].sec, T[variable].sr, T[variable].ss, T[variable].lat, T[variable].lon, T[variable].info, T[variable].onoff);
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <ssi_handler+0x3ec>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	228c      	movs	r2, #140	; 0x8c
 800092c:	fb02 f303 	mul.w	r3, r2, r3
 8000930:	3340      	adds	r3, #64	; 0x40
 8000932:	4a13      	ldr	r2, [pc, #76]	; (8000980 <ssi_handler+0x3e8>)
 8000934:	4413      	add	r3, r2
 8000936:	1d18      	adds	r0, r3, #4
					sprintf(pcInsert, "[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"dow\":\"%d\",\"tim\":%d,\"hr\":%d,\"min\":%d,\"sec\":%d,\"sr\":%d,\"ss\":%d,\"lat\":%d,\"lon\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].dow, T[variable].tim,
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <ssi_handler+0x3ec>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4910      	ldr	r1, [pc, #64]	; (8000980 <ssi_handler+0x3e8>)
 800093e:	238c      	movs	r3, #140	; 0x8c
 8000940:	fb03 f302 	mul.w	r3, r3, r2
 8000944:	440b      	add	r3, r1
 8000946:	3364      	adds	r3, #100	; 0x64
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	930b      	str	r3, [sp, #44]	; 0x2c
 800094c:	900a      	str	r0, [sp, #40]	; 0x28
 800094e:	9409      	str	r4, [sp, #36]	; 0x24
 8000950:	687c      	ldr	r4, [r7, #4]
 8000952:	9408      	str	r4, [sp, #32]
 8000954:	68b8      	ldr	r0, [r7, #8]
 8000956:	9007      	str	r0, [sp, #28]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	9306      	str	r3, [sp, #24]
 800095c:	6939      	ldr	r1, [r7, #16]
 800095e:	9105      	str	r1, [sp, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	9204      	str	r2, [sp, #16]
 8000964:	69bc      	ldr	r4, [r7, #24]
 8000966:	9403      	str	r4, [sp, #12]
 8000968:	69f8      	ldr	r0, [r7, #28]
 800096a:	9002      	str	r0, [sp, #8]
 800096c:	9601      	str	r6, [sp, #4]
 800096e:	9500      	str	r5, [sp, #0]
 8000970:	6a3b      	ldr	r3, [r7, #32]
 8000972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000974:	4904      	ldr	r1, [pc, #16]	; (8000988 <ssi_handler+0x3f0>)
 8000976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000978:	f014 fe76 	bl	8015668 <siprintf>
 800097c:	e3a3      	b.n	80010c6 <ssi_handler+0xb2e>
 800097e:	bf00      	nop
 8000980:	20000b60 	.word	0x20000b60
 8000984:	2000053c 	.word	0x2000053c
 8000988:	08016d0c 	.word	0x08016d0c
			} else if (variable == tabline - 1) {
 800098c:	4ba7      	ldr	r3, [pc, #668]	; (8000c2c <ssi_handler+0x694>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	4ba7      	ldr	r3, [pc, #668]	; (8000c30 <ssi_handler+0x698>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	429a      	cmp	r2, r3
 8000998:	f040 81d0 	bne.w	8000d3c <ssi_handler+0x7a4>
				if (jsongo == 1) {
 800099c:	4ba5      	ldr	r3, [pc, #660]	; (8000c34 <ssi_handler+0x69c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d17c      	bne.n	8000a9e <ssi_handler+0x506>
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}]", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].binter,
 80009a4:	4ba2      	ldr	r3, [pc, #648]	; (8000c30 <ssi_handler+0x698>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4aa3      	ldr	r2, [pc, #652]	; (8000c38 <ssi_handler+0x6a0>)
 80009aa:	218c      	movs	r1, #140	; 0x8c
 80009ac:	fb01 f303 	mul.w	r3, r1, r3
 80009b0:	4413      	add	r3, r2
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
 80009b6:	4b9e      	ldr	r3, [pc, #632]	; (8000c30 <ssi_handler+0x698>)
 80009b8:	6819      	ldr	r1, [r3, #0]
 80009ba:	6239      	str	r1, [r7, #32]
 80009bc:	4b9c      	ldr	r3, [pc, #624]	; (8000c30 <ssi_handler+0x698>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4a9c      	ldr	r2, [pc, #624]	; (8000c3c <ssi_handler+0x6a4>)
 80009ca:	1899      	adds	r1, r3, r2
 80009cc:	61f9      	str	r1, [r7, #28]
 80009ce:	4b98      	ldr	r3, [pc, #608]	; (8000c30 <ssi_handler+0x698>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	228c      	movs	r2, #140	; 0x8c
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
 80009d8:	3318      	adds	r3, #24
 80009da:	4a97      	ldr	r2, [pc, #604]	; (8000c38 <ssi_handler+0x6a0>)
 80009dc:	189c      	adds	r4, r3, r2
 80009de:	4b94      	ldr	r3, [pc, #592]	; (8000c30 <ssi_handler+0x698>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a95      	ldr	r2, [pc, #596]	; (8000c38 <ssi_handler+0x6a0>)
 80009e4:	218c      	movs	r1, #140	; 0x8c
 80009e6:	fb01 f303 	mul.w	r3, r1, r3
 80009ea:	4413      	add	r3, r2
 80009ec:	332c      	adds	r3, #44	; 0x2c
 80009ee:	681d      	ldr	r5, [r3, #0]
 80009f0:	4b8f      	ldr	r3, [pc, #572]	; (8000c30 <ssi_handler+0x698>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a90      	ldr	r2, [pc, #576]	; (8000c38 <ssi_handler+0x6a0>)
 80009f6:	218c      	movs	r1, #140	; 0x8c
 80009f8:	fb01 f303 	mul.w	r3, r1, r3
 80009fc:	4413      	add	r3, r2
 80009fe:	3330      	adds	r3, #48	; 0x30
 8000a00:	681e      	ldr	r6, [r3, #0]
 8000a02:	4b8b      	ldr	r3, [pc, #556]	; (8000c30 <ssi_handler+0x698>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a8c      	ldr	r2, [pc, #560]	; (8000c38 <ssi_handler+0x6a0>)
 8000a08:	218c      	movs	r1, #140	; 0x8c
 8000a0a:	fb01 f303 	mul.w	r3, r1, r3
 8000a0e:	4413      	add	r3, r2
 8000a10:	3334      	adds	r3, #52	; 0x34
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	61ba      	str	r2, [r7, #24]
 8000a16:	4b86      	ldr	r3, [pc, #536]	; (8000c30 <ssi_handler+0x698>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a87      	ldr	r2, [pc, #540]	; (8000c38 <ssi_handler+0x6a0>)
 8000a1c:	218c      	movs	r1, #140	; 0x8c
 8000a1e:	fb01 f303 	mul.w	r3, r1, r3
 8000a22:	4413      	add	r3, r2
 8000a24:	3338      	adds	r3, #56	; 0x38
 8000a26:	6819      	ldr	r1, [r3, #0]
 8000a28:	6179      	str	r1, [r7, #20]
 8000a2a:	4b81      	ldr	r3, [pc, #516]	; (8000c30 <ssi_handler+0x698>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a82      	ldr	r2, [pc, #520]	; (8000c38 <ssi_handler+0x6a0>)
 8000a30:	218c      	movs	r1, #140	; 0x8c
 8000a32:	fb01 f303 	mul.w	r3, r1, r3
 8000a36:	4413      	add	r3, r2
 8000a38:	333c      	adds	r3, #60	; 0x3c
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b7c      	ldr	r3, [pc, #496]	; (8000c30 <ssi_handler+0x698>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a7d      	ldr	r2, [pc, #500]	; (8000c38 <ssi_handler+0x6a0>)
 8000a44:	218c      	movs	r1, #140	; 0x8c
 8000a46:	fb01 f303 	mul.w	r3, r1, r3
 8000a4a:	4413      	add	r3, r2
 8000a4c:	3340      	adds	r3, #64	; 0x40
 8000a4e:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat, T[variable].rinter, T[variable].dcinter, T[variable].pclick, T[variable].info, T[variable].onoff);
 8000a50:	4b77      	ldr	r3, [pc, #476]	; (8000c30 <ssi_handler+0x698>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	228c      	movs	r2, #140	; 0x8c
 8000a56:	fb02 f303 	mul.w	r3, r2, r3
 8000a5a:	3340      	adds	r3, #64	; 0x40
 8000a5c:	4a76      	ldr	r2, [pc, #472]	; (8000c38 <ssi_handler+0x6a0>)
 8000a5e:	4413      	add	r3, r2
 8000a60:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}]", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].binter,
 8000a62:	4b73      	ldr	r3, [pc, #460]	; (8000c30 <ssi_handler+0x698>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4874      	ldr	r0, [pc, #464]	; (8000c38 <ssi_handler+0x6a0>)
 8000a68:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000a6c:	fb0c f303 	mul.w	r3, ip, r3
 8000a70:	4403      	add	r3, r0
 8000a72:	3364      	adds	r3, #100	; 0x64
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	9309      	str	r3, [sp, #36]	; 0x24
 8000a78:	9208      	str	r2, [sp, #32]
 8000a7a:	9107      	str	r1, [sp, #28]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	9306      	str	r3, [sp, #24]
 8000a80:	6979      	ldr	r1, [r7, #20]
 8000a82:	9105      	str	r1, [sp, #20]
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	9204      	str	r2, [sp, #16]
 8000a88:	9603      	str	r6, [sp, #12]
 8000a8a:	9502      	str	r5, [sp, #8]
 8000a8c:	9401      	str	r4, [sp, #4]
 8000a8e:	69f9      	ldr	r1, [r7, #28]
 8000a90:	9100      	str	r1, [sp, #0]
 8000a92:	6a3b      	ldr	r3, [r7, #32]
 8000a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a96:	496a      	ldr	r1, [pc, #424]	; (8000c40 <ssi_handler+0x6a8>)
 8000a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a9a:	f014 fde5 	bl	8015668 <siprintf>
				if (jsongo == 2) {
 8000a9e:	4b65      	ldr	r3, [pc, #404]	; (8000c34 <ssi_handler+0x69c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b02      	cmp	r3, #2
 8000aa4:	d177      	bne.n	8000b96 <ssi_handler+0x5fe>
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}]", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 8000aa6:	4b62      	ldr	r3, [pc, #392]	; (8000c30 <ssi_handler+0x698>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a63      	ldr	r2, [pc, #396]	; (8000c38 <ssi_handler+0x6a0>)
 8000aac:	218c      	movs	r1, #140	; 0x8c
 8000aae:	fb01 f303 	mul.w	r3, r1, r3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ab8:	4b5d      	ldr	r3, [pc, #372]	; (8000c30 <ssi_handler+0x698>)
 8000aba:	6819      	ldr	r1, [r3, #0]
 8000abc:	6239      	str	r1, [r7, #32]
 8000abe:	4b5c      	ldr	r3, [pc, #368]	; (8000c30 <ssi_handler+0x698>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4a5c      	ldr	r2, [pc, #368]	; (8000c3c <ssi_handler+0x6a4>)
 8000acc:	4413      	add	r3, r2
 8000ace:	4a58      	ldr	r2, [pc, #352]	; (8000c30 <ssi_handler+0x698>)
 8000ad0:	6812      	ldr	r2, [r2, #0]
 8000ad2:	218c      	movs	r1, #140	; 0x8c
 8000ad4:	fb01 f202 	mul.w	r2, r1, r2
 8000ad8:	3218      	adds	r2, #24
 8000ada:	4957      	ldr	r1, [pc, #348]	; (8000c38 <ssi_handler+0x6a0>)
 8000adc:	440a      	add	r2, r1
 8000ade:	4954      	ldr	r1, [pc, #336]	; (8000c30 <ssi_handler+0x698>)
 8000ae0:	6809      	ldr	r1, [r1, #0]
 8000ae2:	4855      	ldr	r0, [pc, #340]	; (8000c38 <ssi_handler+0x6a0>)
 8000ae4:	248c      	movs	r4, #140	; 0x8c
 8000ae6:	fb04 f101 	mul.w	r1, r4, r1
 8000aea:	4401      	add	r1, r0
 8000aec:	3104      	adds	r1, #4
 8000aee:	6809      	ldr	r1, [r1, #0]
 8000af0:	484f      	ldr	r0, [pc, #316]	; (8000c30 <ssi_handler+0x698>)
 8000af2:	6800      	ldr	r0, [r0, #0]
 8000af4:	4c50      	ldr	r4, [pc, #320]	; (8000c38 <ssi_handler+0x6a0>)
 8000af6:	258c      	movs	r5, #140	; 0x8c
 8000af8:	fb05 f000 	mul.w	r0, r5, r0
 8000afc:	4420      	add	r0, r4
 8000afe:	3008      	adds	r0, #8
 8000b00:	6800      	ldr	r0, [r0, #0]
 8000b02:	61f8      	str	r0, [r7, #28]
 8000b04:	4c4a      	ldr	r4, [pc, #296]	; (8000c30 <ssi_handler+0x698>)
 8000b06:	6824      	ldr	r4, [r4, #0]
 8000b08:	4d4b      	ldr	r5, [pc, #300]	; (8000c38 <ssi_handler+0x6a0>)
 8000b0a:	268c      	movs	r6, #140	; 0x8c
 8000b0c:	fb06 f404 	mul.w	r4, r6, r4
 8000b10:	442c      	add	r4, r5
 8000b12:	340c      	adds	r4, #12
 8000b14:	6820      	ldr	r0, [r4, #0]
 8000b16:	61b8      	str	r0, [r7, #24]
 8000b18:	4d45      	ldr	r5, [pc, #276]	; (8000c30 <ssi_handler+0x698>)
 8000b1a:	682d      	ldr	r5, [r5, #0]
 8000b1c:	4e46      	ldr	r6, [pc, #280]	; (8000c38 <ssi_handler+0x6a0>)
 8000b1e:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000b22:	fb0c f505 	mul.w	r5, ip, r5
 8000b26:	4435      	add	r5, r6
 8000b28:	3510      	adds	r5, #16
 8000b2a:	682d      	ldr	r5, [r5, #0]
 8000b2c:	4e40      	ldr	r6, [pc, #256]	; (8000c30 <ssi_handler+0x698>)
 8000b2e:	6836      	ldr	r6, [r6, #0]
 8000b30:	4841      	ldr	r0, [pc, #260]	; (8000c38 <ssi_handler+0x6a0>)
 8000b32:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000b36:	fb0c f606 	mul.w	r6, ip, r6
 8000b3a:	4406      	add	r6, r0
 8000b3c:	3614      	adds	r6, #20
 8000b3e:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue, T[variable].ponr, T[variable].info, T[variable].onoff);
 8000b40:	483b      	ldr	r0, [pc, #236]	; (8000c30 <ssi_handler+0x698>)
 8000b42:	6800      	ldr	r0, [r0, #0]
 8000b44:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000b48:	fb0c fc00 	mul.w	ip, ip, r0
 8000b4c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000b50:	4839      	ldr	r0, [pc, #228]	; (8000c38 <ssi_handler+0x6a0>)
 8000b52:	4484      	add	ip, r0
 8000b54:	f10c 0004 	add.w	r0, ip, #4
 8000b58:	6178      	str	r0, [r7, #20]
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}]", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 8000b5a:	4835      	ldr	r0, [pc, #212]	; (8000c30 <ssi_handler+0x698>)
 8000b5c:	6800      	ldr	r0, [r0, #0]
 8000b5e:	4c36      	ldr	r4, [pc, #216]	; (8000c38 <ssi_handler+0x6a0>)
 8000b60:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000b64:	fb0c fc00 	mul.w	ip, ip, r0
 8000b68:	44a4      	add	ip, r4
 8000b6a:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000b6e:	f8dc 0000 	ldr.w	r0, [ip]
 8000b72:	9008      	str	r0, [sp, #32]
 8000b74:	6978      	ldr	r0, [r7, #20]
 8000b76:	9007      	str	r0, [sp, #28]
 8000b78:	9606      	str	r6, [sp, #24]
 8000b7a:	9505      	str	r5, [sp, #20]
 8000b7c:	69b8      	ldr	r0, [r7, #24]
 8000b7e:	9004      	str	r0, [sp, #16]
 8000b80:	69f8      	ldr	r0, [r7, #28]
 8000b82:	9003      	str	r0, [sp, #12]
 8000b84:	9102      	str	r1, [sp, #8]
 8000b86:	9201      	str	r2, [sp, #4]
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	6a3b      	ldr	r3, [r7, #32]
 8000b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b8e:	492d      	ldr	r1, [pc, #180]	; (8000c44 <ssi_handler+0x6ac>)
 8000b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b92:	f014 fd69 	bl	8015668 <siprintf>
				if (jsongo == 3) {
 8000b96:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <ssi_handler+0x69c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b03      	cmp	r3, #3
 8000b9c:	d118      	bne.n	8000bd0 <ssi_handler+0x638>
					sprintf(pcInsert, "{\"id\":%d,\"pins\":\"%s\",\"topin\":%d}]", variable, tp[variable].pins, T[variable].topin);
 8000b9e:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <ssi_handler+0x698>)
 8000ba0:	6819      	ldr	r1, [r3, #0]
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <ssi_handler+0x698>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	4413      	add	r3, r2
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <ssi_handler+0x6a4>)
 8000bb0:	441a      	add	r2, r3
 8000bb2:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <ssi_handler+0x698>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4820      	ldr	r0, [pc, #128]	; (8000c38 <ssi_handler+0x6a0>)
 8000bb8:	248c      	movs	r4, #140	; 0x8c
 8000bba:	fb04 f303 	mul.w	r3, r4, r3
 8000bbe:	4403      	add	r3, r0
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	460a      	mov	r2, r1
 8000bc8:	491f      	ldr	r1, [pc, #124]	; (8000c48 <ssi_handler+0x6b0>)
 8000bca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bcc:	f014 fd4c 	bl	8015668 <siprintf>
				if (jsongo == 4) {
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <ssi_handler+0x69c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b04      	cmp	r3, #4
 8000bd6:	f040 8276 	bne.w	80010c6 <ssi_handler+0xb2e>
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"dow\":\"%d\",\"tim\":%d,\"hr\":%d,\"min\":%d,\"sec\":%d,\"sr\":%d,\"ss\":%d,\"lat\":%d,\"lon\":%d,\"info\":\"%s\",\"onoff\":%d}]", T[variable].topin, variable, tp[variable].pins, T[variable].dow, T[variable].tim,
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <ssi_handler+0x698>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <ssi_handler+0x6a0>)
 8000be0:	218c      	movs	r1, #140	; 0x8c
 8000be2:	fb01 f303 	mul.w	r3, r1, r3
 8000be6:	4413      	add	r3, r2
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <ssi_handler+0x698>)
 8000bee:	6819      	ldr	r1, [r3, #0]
 8000bf0:	6239      	str	r1, [r7, #32]
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <ssi_handler+0x698>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <ssi_handler+0x6a4>)
 8000c00:	189d      	adds	r5, r3, r2
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <ssi_handler+0x698>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a0c      	ldr	r2, [pc, #48]	; (8000c38 <ssi_handler+0x6a0>)
 8000c08:	218c      	movs	r1, #140	; 0x8c
 8000c0a:	fb01 f303 	mul.w	r3, r1, r3
 8000c0e:	4413      	add	r3, r2
 8000c10:	3368      	adds	r3, #104	; 0x68
 8000c12:	681e      	ldr	r6, [r3, #0]
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <ssi_handler+0x698>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <ssi_handler+0x6a0>)
 8000c1a:	218c      	movs	r1, #140	; 0x8c
 8000c1c:	fb01 f303 	mul.w	r3, r1, r3
 8000c20:	4413      	add	r3, r2
 8000c22:	336c      	adds	r3, #108	; 0x6c
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	61f8      	str	r0, [r7, #28]
 8000c28:	e010      	b.n	8000c4c <ssi_handler+0x6b4>
 8000c2a:	bf00      	nop
 8000c2c:	20000488 	.word	0x20000488
 8000c30:	2000053c 	.word	0x2000053c
 8000c34:	20000540 	.word	0x20000540
 8000c38:	20000b60 	.word	0x20000b60
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	08016d98 	.word	0x08016d98
 8000c44:	08016e28 	.word	0x08016e28
 8000c48:	08016ea4 	.word	0x08016ea4
 8000c4c:	4b38      	ldr	r3, [pc, #224]	; (8000d30 <ssi_handler+0x798>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a38      	ldr	r2, [pc, #224]	; (8000d34 <ssi_handler+0x79c>)
 8000c52:	218c      	movs	r1, #140	; 0x8c
 8000c54:	fb01 f303 	mul.w	r3, r1, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	3370      	adds	r3, #112	; 0x70
 8000c5c:	681c      	ldr	r4, [r3, #0]
 8000c5e:	61bc      	str	r4, [r7, #24]
 8000c60:	4b33      	ldr	r3, [pc, #204]	; (8000d30 <ssi_handler+0x798>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a33      	ldr	r2, [pc, #204]	; (8000d34 <ssi_handler+0x79c>)
 8000c66:	218c      	movs	r1, #140	; 0x8c
 8000c68:	fb01 f303 	mul.w	r3, r1, r3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3374      	adds	r3, #116	; 0x74
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	617a      	str	r2, [r7, #20]
 8000c74:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <ssi_handler+0x798>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a2e      	ldr	r2, [pc, #184]	; (8000d34 <ssi_handler+0x79c>)
 8000c7a:	218c      	movs	r1, #140	; 0x8c
 8000c7c:	fb01 f303 	mul.w	r3, r1, r3
 8000c80:	4413      	add	r3, r2
 8000c82:	3378      	adds	r3, #120	; 0x78
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	6139      	str	r1, [r7, #16]
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <ssi_handler+0x798>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a29      	ldr	r2, [pc, #164]	; (8000d34 <ssi_handler+0x79c>)
 8000c8e:	218c      	movs	r1, #140	; 0x8c
 8000c90:	fb01 f303 	mul.w	r3, r1, r3
 8000c94:	4413      	add	r3, r2
 8000c96:	337c      	adds	r3, #124	; 0x7c
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <ssi_handler+0x798>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a24      	ldr	r2, [pc, #144]	; (8000d34 <ssi_handler+0x79c>)
 8000ca2:	218c      	movs	r1, #140	; 0x8c
 8000ca4:	fb01 f303 	mul.w	r3, r1, r3
 8000ca8:	4413      	add	r3, r2
 8000caa:	3380      	adds	r3, #128	; 0x80
 8000cac:	6818      	ldr	r0, [r3, #0]
 8000cae:	60b8      	str	r0, [r7, #8]
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <ssi_handler+0x798>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <ssi_handler+0x79c>)
 8000cb6:	218c      	movs	r1, #140	; 0x8c
 8000cb8:	fb01 f303 	mul.w	r3, r1, r3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3384      	adds	r3, #132	; 0x84
 8000cc0:	681c      	ldr	r4, [r3, #0]
 8000cc2:	607c      	str	r4, [r7, #4]
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <ssi_handler+0x798>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	; (8000d34 <ssi_handler+0x79c>)
 8000cca:	218c      	movs	r1, #140	; 0x8c
 8000ccc:	fb01 f303 	mul.w	r3, r1, r3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3388      	adds	r3, #136	; 0x88
 8000cd4:	681c      	ldr	r4, [r3, #0]
							T[variable].hr, T[variable].min, T[variable].sec, T[variable].sr, T[variable].ss, T[variable].lat, T[variable].lon, T[variable].info, T[variable].onoff);
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <ssi_handler+0x798>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	228c      	movs	r2, #140	; 0x8c
 8000cdc:	fb02 f303 	mul.w	r3, r2, r3
 8000ce0:	3340      	adds	r3, #64	; 0x40
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <ssi_handler+0x79c>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	1d18      	adds	r0, r3, #4
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"dow\":\"%d\",\"tim\":%d,\"hr\":%d,\"min\":%d,\"sec\":%d,\"sr\":%d,\"ss\":%d,\"lat\":%d,\"lon\":%d,\"info\":\"%s\",\"onoff\":%d}]", T[variable].topin, variable, tp[variable].pins, T[variable].dow, T[variable].tim,
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <ssi_handler+0x798>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4911      	ldr	r1, [pc, #68]	; (8000d34 <ssi_handler+0x79c>)
 8000cee:	238c      	movs	r3, #140	; 0x8c
 8000cf0:	fb03 f302 	mul.w	r3, r3, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	3364      	adds	r3, #100	; 0x64
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8000cfc:	900a      	str	r0, [sp, #40]	; 0x28
 8000cfe:	9409      	str	r4, [sp, #36]	; 0x24
 8000d00:	687c      	ldr	r4, [r7, #4]
 8000d02:	9408      	str	r4, [sp, #32]
 8000d04:	68b8      	ldr	r0, [r7, #8]
 8000d06:	9007      	str	r0, [sp, #28]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	9306      	str	r3, [sp, #24]
 8000d0c:	6939      	ldr	r1, [r7, #16]
 8000d0e:	9105      	str	r1, [sp, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	9204      	str	r2, [sp, #16]
 8000d14:	69bc      	ldr	r4, [r7, #24]
 8000d16:	9403      	str	r4, [sp, #12]
 8000d18:	69f8      	ldr	r0, [r7, #28]
 8000d1a:	9002      	str	r0, [sp, #8]
 8000d1c:	9601      	str	r6, [sp, #4]
 8000d1e:	9500      	str	r5, [sp, #0]
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d24:	4904      	ldr	r1, [pc, #16]	; (8000d38 <ssi_handler+0x7a0>)
 8000d26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d28:	f014 fc9e 	bl	8015668 <siprintf>
 8000d2c:	e1cb      	b.n	80010c6 <ssi_handler+0xb2e>
 8000d2e:	bf00      	nop
 8000d30:	2000053c 	.word	0x2000053c
 8000d34:	20000b60 	.word	0x20000b60
 8000d38:	08016ec8 	.word	0x08016ec8
				if (jsongo == 1) {
 8000d3c:	4ba7      	ldr	r3, [pc, #668]	; (8000fdc <ssi_handler+0xa44>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d17c      	bne.n	8000e3e <ssi_handler+0x8a6>
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].binter,
 8000d44:	4ba6      	ldr	r3, [pc, #664]	; (8000fe0 <ssi_handler+0xa48>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4aa6      	ldr	r2, [pc, #664]	; (8000fe4 <ssi_handler+0xa4c>)
 8000d4a:	218c      	movs	r1, #140	; 0x8c
 8000d4c:	fb01 f303 	mul.w	r3, r1, r3
 8000d50:	4413      	add	r3, r2
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
 8000d56:	4ba2      	ldr	r3, [pc, #648]	; (8000fe0 <ssi_handler+0xa48>)
 8000d58:	6819      	ldr	r1, [r3, #0]
 8000d5a:	6239      	str	r1, [r7, #32]
 8000d5c:	4ba0      	ldr	r3, [pc, #640]	; (8000fe0 <ssi_handler+0xa48>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	4a9f      	ldr	r2, [pc, #636]	; (8000fe8 <ssi_handler+0xa50>)
 8000d6a:	1899      	adds	r1, r3, r2
 8000d6c:	61f9      	str	r1, [r7, #28]
 8000d6e:	4b9c      	ldr	r3, [pc, #624]	; (8000fe0 <ssi_handler+0xa48>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	228c      	movs	r2, #140	; 0x8c
 8000d74:	fb02 f303 	mul.w	r3, r2, r3
 8000d78:	3318      	adds	r3, #24
 8000d7a:	4a9a      	ldr	r2, [pc, #616]	; (8000fe4 <ssi_handler+0xa4c>)
 8000d7c:	189c      	adds	r4, r3, r2
 8000d7e:	4b98      	ldr	r3, [pc, #608]	; (8000fe0 <ssi_handler+0xa48>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a98      	ldr	r2, [pc, #608]	; (8000fe4 <ssi_handler+0xa4c>)
 8000d84:	218c      	movs	r1, #140	; 0x8c
 8000d86:	fb01 f303 	mul.w	r3, r1, r3
 8000d8a:	4413      	add	r3, r2
 8000d8c:	332c      	adds	r3, #44	; 0x2c
 8000d8e:	681d      	ldr	r5, [r3, #0]
 8000d90:	4b93      	ldr	r3, [pc, #588]	; (8000fe0 <ssi_handler+0xa48>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a93      	ldr	r2, [pc, #588]	; (8000fe4 <ssi_handler+0xa4c>)
 8000d96:	218c      	movs	r1, #140	; 0x8c
 8000d98:	fb01 f303 	mul.w	r3, r1, r3
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3330      	adds	r3, #48	; 0x30
 8000da0:	681e      	ldr	r6, [r3, #0]
 8000da2:	4b8f      	ldr	r3, [pc, #572]	; (8000fe0 <ssi_handler+0xa48>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a8f      	ldr	r2, [pc, #572]	; (8000fe4 <ssi_handler+0xa4c>)
 8000da8:	218c      	movs	r1, #140	; 0x8c
 8000daa:	fb01 f303 	mul.w	r3, r1, r3
 8000dae:	4413      	add	r3, r2
 8000db0:	3334      	adds	r3, #52	; 0x34
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	61ba      	str	r2, [r7, #24]
 8000db6:	4b8a      	ldr	r3, [pc, #552]	; (8000fe0 <ssi_handler+0xa48>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a8a      	ldr	r2, [pc, #552]	; (8000fe4 <ssi_handler+0xa4c>)
 8000dbc:	218c      	movs	r1, #140	; 0x8c
 8000dbe:	fb01 f303 	mul.w	r3, r1, r3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3338      	adds	r3, #56	; 0x38
 8000dc6:	6819      	ldr	r1, [r3, #0]
 8000dc8:	6179      	str	r1, [r7, #20]
 8000dca:	4b85      	ldr	r3, [pc, #532]	; (8000fe0 <ssi_handler+0xa48>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a85      	ldr	r2, [pc, #532]	; (8000fe4 <ssi_handler+0xa4c>)
 8000dd0:	218c      	movs	r1, #140	; 0x8c
 8000dd2:	fb01 f303 	mul.w	r3, r1, r3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	333c      	adds	r3, #60	; 0x3c
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b80      	ldr	r3, [pc, #512]	; (8000fe0 <ssi_handler+0xa48>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a80      	ldr	r2, [pc, #512]	; (8000fe4 <ssi_handler+0xa4c>)
 8000de4:	218c      	movs	r1, #140	; 0x8c
 8000de6:	fb01 f303 	mul.w	r3, r1, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	3340      	adds	r3, #64	; 0x40
 8000dee:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat, T[variable].rinter, T[variable].dcinter, T[variable].pclick, T[variable].info, T[variable].onoff);
 8000df0:	4b7b      	ldr	r3, [pc, #492]	; (8000fe0 <ssi_handler+0xa48>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	228c      	movs	r2, #140	; 0x8c
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	3340      	adds	r3, #64	; 0x40
 8000dfc:	4a79      	ldr	r2, [pc, #484]	; (8000fe4 <ssi_handler+0xa4c>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].binter,
 8000e02:	4b77      	ldr	r3, [pc, #476]	; (8000fe0 <ssi_handler+0xa48>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4877      	ldr	r0, [pc, #476]	; (8000fe4 <ssi_handler+0xa4c>)
 8000e08:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000e0c:	fb0c f303 	mul.w	r3, ip, r3
 8000e10:	4403      	add	r3, r0
 8000e12:	3364      	adds	r3, #100	; 0x64
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	9309      	str	r3, [sp, #36]	; 0x24
 8000e18:	9208      	str	r2, [sp, #32]
 8000e1a:	9107      	str	r1, [sp, #28]
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	9306      	str	r3, [sp, #24]
 8000e20:	6979      	ldr	r1, [r7, #20]
 8000e22:	9105      	str	r1, [sp, #20]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	9204      	str	r2, [sp, #16]
 8000e28:	9603      	str	r6, [sp, #12]
 8000e2a:	9502      	str	r5, [sp, #8]
 8000e2c:	9401      	str	r4, [sp, #4]
 8000e2e:	69f9      	ldr	r1, [r7, #28]
 8000e30:	9100      	str	r1, [sp, #0]
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e36:	496d      	ldr	r1, [pc, #436]	; (8000fec <ssi_handler+0xa54>)
 8000e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e3a:	f014 fc15 	bl	8015668 <siprintf>
				if (jsongo == 2) {
 8000e3e:	4b67      	ldr	r3, [pc, #412]	; (8000fdc <ssi_handler+0xa44>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d177      	bne.n	8000f36 <ssi_handler+0x99e>
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 8000e46:	4b66      	ldr	r3, [pc, #408]	; (8000fe0 <ssi_handler+0xa48>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a66      	ldr	r2, [pc, #408]	; (8000fe4 <ssi_handler+0xa4c>)
 8000e4c:	218c      	movs	r1, #140	; 0x8c
 8000e4e:	fb01 f303 	mul.w	r3, r1, r3
 8000e52:	4413      	add	r3, r2
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
 8000e58:	4b61      	ldr	r3, [pc, #388]	; (8000fe0 <ssi_handler+0xa48>)
 8000e5a:	6819      	ldr	r1, [r3, #0]
 8000e5c:	6239      	str	r1, [r7, #32]
 8000e5e:	4b60      	ldr	r3, [pc, #384]	; (8000fe0 <ssi_handler+0xa48>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4a5f      	ldr	r2, [pc, #380]	; (8000fe8 <ssi_handler+0xa50>)
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a5c      	ldr	r2, [pc, #368]	; (8000fe0 <ssi_handler+0xa48>)
 8000e70:	6812      	ldr	r2, [r2, #0]
 8000e72:	218c      	movs	r1, #140	; 0x8c
 8000e74:	fb01 f202 	mul.w	r2, r1, r2
 8000e78:	3218      	adds	r2, #24
 8000e7a:	495a      	ldr	r1, [pc, #360]	; (8000fe4 <ssi_handler+0xa4c>)
 8000e7c:	440a      	add	r2, r1
 8000e7e:	4958      	ldr	r1, [pc, #352]	; (8000fe0 <ssi_handler+0xa48>)
 8000e80:	6809      	ldr	r1, [r1, #0]
 8000e82:	4858      	ldr	r0, [pc, #352]	; (8000fe4 <ssi_handler+0xa4c>)
 8000e84:	248c      	movs	r4, #140	; 0x8c
 8000e86:	fb04 f101 	mul.w	r1, r4, r1
 8000e8a:	4401      	add	r1, r0
 8000e8c:	3104      	adds	r1, #4
 8000e8e:	6809      	ldr	r1, [r1, #0]
 8000e90:	4853      	ldr	r0, [pc, #332]	; (8000fe0 <ssi_handler+0xa48>)
 8000e92:	6800      	ldr	r0, [r0, #0]
 8000e94:	4c53      	ldr	r4, [pc, #332]	; (8000fe4 <ssi_handler+0xa4c>)
 8000e96:	258c      	movs	r5, #140	; 0x8c
 8000e98:	fb05 f000 	mul.w	r0, r5, r0
 8000e9c:	4420      	add	r0, r4
 8000e9e:	3008      	adds	r0, #8
 8000ea0:	6800      	ldr	r0, [r0, #0]
 8000ea2:	61f8      	str	r0, [r7, #28]
 8000ea4:	4c4e      	ldr	r4, [pc, #312]	; (8000fe0 <ssi_handler+0xa48>)
 8000ea6:	6824      	ldr	r4, [r4, #0]
 8000ea8:	4d4e      	ldr	r5, [pc, #312]	; (8000fe4 <ssi_handler+0xa4c>)
 8000eaa:	268c      	movs	r6, #140	; 0x8c
 8000eac:	fb06 f404 	mul.w	r4, r6, r4
 8000eb0:	442c      	add	r4, r5
 8000eb2:	340c      	adds	r4, #12
 8000eb4:	6820      	ldr	r0, [r4, #0]
 8000eb6:	61b8      	str	r0, [r7, #24]
 8000eb8:	4d49      	ldr	r5, [pc, #292]	; (8000fe0 <ssi_handler+0xa48>)
 8000eba:	682d      	ldr	r5, [r5, #0]
 8000ebc:	4e49      	ldr	r6, [pc, #292]	; (8000fe4 <ssi_handler+0xa4c>)
 8000ebe:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000ec2:	fb0c f505 	mul.w	r5, ip, r5
 8000ec6:	4435      	add	r5, r6
 8000ec8:	3510      	adds	r5, #16
 8000eca:	682d      	ldr	r5, [r5, #0]
 8000ecc:	4e44      	ldr	r6, [pc, #272]	; (8000fe0 <ssi_handler+0xa48>)
 8000ece:	6836      	ldr	r6, [r6, #0]
 8000ed0:	4844      	ldr	r0, [pc, #272]	; (8000fe4 <ssi_handler+0xa4c>)
 8000ed2:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000ed6:	fb0c f606 	mul.w	r6, ip, r6
 8000eda:	4406      	add	r6, r0
 8000edc:	3614      	adds	r6, #20
 8000ede:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue, T[variable].ponr, T[variable].info, T[variable].onoff);
 8000ee0:	483f      	ldr	r0, [pc, #252]	; (8000fe0 <ssi_handler+0xa48>)
 8000ee2:	6800      	ldr	r0, [r0, #0]
 8000ee4:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000ee8:	fb0c fc00 	mul.w	ip, ip, r0
 8000eec:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8000ef0:	483c      	ldr	r0, [pc, #240]	; (8000fe4 <ssi_handler+0xa4c>)
 8000ef2:	4484      	add	ip, r0
 8000ef4:	f10c 0004 	add.w	r0, ip, #4
 8000ef8:	6178      	str	r0, [r7, #20]
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].ptype, T[variable].pwm, T[variable].on,
 8000efa:	4839      	ldr	r0, [pc, #228]	; (8000fe0 <ssi_handler+0xa48>)
 8000efc:	6800      	ldr	r0, [r0, #0]
 8000efe:	4c39      	ldr	r4, [pc, #228]	; (8000fe4 <ssi_handler+0xa4c>)
 8000f00:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 8000f04:	fb0c fc00 	mul.w	ip, ip, r0
 8000f08:	44a4      	add	ip, r4
 8000f0a:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8000f0e:	f8dc 0000 	ldr.w	r0, [ip]
 8000f12:	9008      	str	r0, [sp, #32]
 8000f14:	6978      	ldr	r0, [r7, #20]
 8000f16:	9007      	str	r0, [sp, #28]
 8000f18:	9606      	str	r6, [sp, #24]
 8000f1a:	9505      	str	r5, [sp, #20]
 8000f1c:	69b8      	ldr	r0, [r7, #24]
 8000f1e:	9004      	str	r0, [sp, #16]
 8000f20:	69f8      	ldr	r0, [r7, #28]
 8000f22:	9003      	str	r0, [sp, #12]
 8000f24:	9102      	str	r1, [sp, #8]
 8000f26:	9201      	str	r2, [sp, #4]
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2e:	4930      	ldr	r1, [pc, #192]	; (8000ff0 <ssi_handler+0xa58>)
 8000f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f32:	f014 fb99 	bl	8015668 <siprintf>
				if (jsongo == 3) {
 8000f36:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <ssi_handler+0xa44>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d118      	bne.n	8000f70 <ssi_handler+0x9d8>
					sprintf(pcInsert, "{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},", variable, tp[variable].pins, T[variable].topin);
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <ssi_handler+0xa48>)
 8000f40:	6819      	ldr	r1, [r3, #0]
 8000f42:	4b27      	ldr	r3, [pc, #156]	; (8000fe0 <ssi_handler+0xa48>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4613      	mov	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <ssi_handler+0xa50>)
 8000f50:	441a      	add	r2, r3
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <ssi_handler+0xa48>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4823      	ldr	r0, [pc, #140]	; (8000fe4 <ssi_handler+0xa4c>)
 8000f58:	248c      	movs	r4, #140	; 0x8c
 8000f5a:	fb04 f303 	mul.w	r3, r4, r3
 8000f5e:	4403      	add	r3, r0
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	4613      	mov	r3, r2
 8000f66:	460a      	mov	r2, r1
 8000f68:	4922      	ldr	r1, [pc, #136]	; (8000ff4 <ssi_handler+0xa5c>)
 8000f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f6c:	f014 fb7c 	bl	8015668 <siprintf>
				if (jsongo == 4) {
 8000f70:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <ssi_handler+0xa44>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	f040 80a6 	bne.w	80010c6 <ssi_handler+0xb2e>
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"dow\":\"%d\",\"tim\":%d,\"hr\":%d,\"min\":%d,\"sec\":%d,\"sr\":%d,\"ss\":%d,\"lat\":%d,\"lon\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].dow, T[variable].tim,
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <ssi_handler+0xa48>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a19      	ldr	r2, [pc, #100]	; (8000fe4 <ssi_handler+0xa4c>)
 8000f80:	218c      	movs	r1, #140	; 0x8c
 8000f82:	fb01 f303 	mul.w	r3, r1, r3
 8000f86:	4413      	add	r3, r2
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <ssi_handler+0xa48>)
 8000f8e:	6819      	ldr	r1, [r3, #0]
 8000f90:	6239      	str	r1, [r7, #32]
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <ssi_handler+0xa48>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4613      	mov	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <ssi_handler+0xa50>)
 8000fa0:	189d      	adds	r5, r3, r2
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <ssi_handler+0xa48>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <ssi_handler+0xa4c>)
 8000fa8:	218c      	movs	r1, #140	; 0x8c
 8000faa:	fb01 f303 	mul.w	r3, r1, r3
 8000fae:	4413      	add	r3, r2
 8000fb0:	3368      	adds	r3, #104	; 0x68
 8000fb2:	681e      	ldr	r6, [r3, #0]
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <ssi_handler+0xa48>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <ssi_handler+0xa4c>)
 8000fba:	218c      	movs	r1, #140	; 0x8c
 8000fbc:	fb01 f303 	mul.w	r3, r1, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	336c      	adds	r3, #108	; 0x6c
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	61f8      	str	r0, [r7, #28]
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <ssi_handler+0xa48>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <ssi_handler+0xa4c>)
 8000fce:	218c      	movs	r1, #140	; 0x8c
 8000fd0:	fb01 f303 	mul.w	r3, r1, r3
 8000fd4:	4413      	add	r3, r2
 8000fd6:	3370      	adds	r3, #112	; 0x70
 8000fd8:	681c      	ldr	r4, [r3, #0]
 8000fda:	e00d      	b.n	8000ff8 <ssi_handler+0xa60>
 8000fdc:	20000540 	.word	0x20000540
 8000fe0:	2000053c 	.word	0x2000053c
 8000fe4:	20000b60 	.word	0x20000b60
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	08016f54 	.word	0x08016f54
 8000ff0:	08016fe4 	.word	0x08016fe4
 8000ff4:	08017060 	.word	0x08017060
 8000ff8:	61bc      	str	r4, [r7, #24]
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <ssi_handler+0xb50>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a3b      	ldr	r2, [pc, #236]	; (80010ec <ssi_handler+0xb54>)
 8001000:	218c      	movs	r1, #140	; 0x8c
 8001002:	fb01 f303 	mul.w	r3, r1, r3
 8001006:	4413      	add	r3, r2
 8001008:	3374      	adds	r3, #116	; 0x74
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	617a      	str	r2, [r7, #20]
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <ssi_handler+0xb50>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a36      	ldr	r2, [pc, #216]	; (80010ec <ssi_handler+0xb54>)
 8001014:	218c      	movs	r1, #140	; 0x8c
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	4413      	add	r3, r2
 800101c:	3378      	adds	r3, #120	; 0x78
 800101e:	6819      	ldr	r1, [r3, #0]
 8001020:	6139      	str	r1, [r7, #16]
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <ssi_handler+0xb50>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a31      	ldr	r2, [pc, #196]	; (80010ec <ssi_handler+0xb54>)
 8001028:	218c      	movs	r1, #140	; 0x8c
 800102a:	fb01 f303 	mul.w	r3, r1, r3
 800102e:	4413      	add	r3, r2
 8001030:	337c      	adds	r3, #124	; 0x7c
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <ssi_handler+0xb50>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a2c      	ldr	r2, [pc, #176]	; (80010ec <ssi_handler+0xb54>)
 800103c:	218c      	movs	r1, #140	; 0x8c
 800103e:	fb01 f303 	mul.w	r3, r1, r3
 8001042:	4413      	add	r3, r2
 8001044:	3380      	adds	r3, #128	; 0x80
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	60b8      	str	r0, [r7, #8]
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <ssi_handler+0xb50>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a27      	ldr	r2, [pc, #156]	; (80010ec <ssi_handler+0xb54>)
 8001050:	218c      	movs	r1, #140	; 0x8c
 8001052:	fb01 f303 	mul.w	r3, r1, r3
 8001056:	4413      	add	r3, r2
 8001058:	3384      	adds	r3, #132	; 0x84
 800105a:	681c      	ldr	r4, [r3, #0]
 800105c:	607c      	str	r4, [r7, #4]
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <ssi_handler+0xb50>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a22      	ldr	r2, [pc, #136]	; (80010ec <ssi_handler+0xb54>)
 8001064:	218c      	movs	r1, #140	; 0x8c
 8001066:	fb01 f303 	mul.w	r3, r1, r3
 800106a:	4413      	add	r3, r2
 800106c:	3388      	adds	r3, #136	; 0x88
 800106e:	681c      	ldr	r4, [r3, #0]
							T[variable].hr, T[variable].min, T[variable].sec, T[variable].sr, T[variable].ss, T[variable].lat, T[variable].lon, T[variable].info, T[variable].onoff);
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <ssi_handler+0xb50>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	228c      	movs	r2, #140	; 0x8c
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	3340      	adds	r3, #64	; 0x40
 800107c:	4a1b      	ldr	r2, [pc, #108]	; (80010ec <ssi_handler+0xb54>)
 800107e:	4413      	add	r3, r2
 8001080:	1d18      	adds	r0, r3, #4
					sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"dow\":\"%d\",\"tim\":%d,\"hr\":%d,\"min\":%d,\"sec\":%d,\"sr\":%d,\"ss\":%d,\"lat\":%d,\"lon\":%d,\"info\":\"%s\",\"onoff\":%d},", T[variable].topin, variable, tp[variable].pins, T[variable].dow, T[variable].tim,
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <ssi_handler+0xb50>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4919      	ldr	r1, [pc, #100]	; (80010ec <ssi_handler+0xb54>)
 8001088:	238c      	movs	r3, #140	; 0x8c
 800108a:	fb03 f302 	mul.w	r3, r3, r2
 800108e:	440b      	add	r3, r1
 8001090:	3364      	adds	r3, #100	; 0x64
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	930b      	str	r3, [sp, #44]	; 0x2c
 8001096:	900a      	str	r0, [sp, #40]	; 0x28
 8001098:	9409      	str	r4, [sp, #36]	; 0x24
 800109a:	687c      	ldr	r4, [r7, #4]
 800109c:	9408      	str	r4, [sp, #32]
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	9007      	str	r0, [sp, #28]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	9306      	str	r3, [sp, #24]
 80010a6:	6939      	ldr	r1, [r7, #16]
 80010a8:	9105      	str	r1, [sp, #20]
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	9204      	str	r2, [sp, #16]
 80010ae:	69bc      	ldr	r4, [r7, #24]
 80010b0:	9403      	str	r4, [sp, #12]
 80010b2:	69f8      	ldr	r0, [r7, #28]
 80010b4:	9002      	str	r0, [sp, #8]
 80010b6:	9601      	str	r6, [sp, #4]
 80010b8:	9500      	str	r5, [sp, #0]
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010be:	490c      	ldr	r1, [pc, #48]	; (80010f0 <ssi_handler+0xb58>)
 80010c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010c2:	f014 fad1 	bl	8015668 <siprintf>
			*next_tag_part = variable;
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <ssi_handler+0xb50>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ce:	801a      	strh	r2, [r3, #0]
			variable++;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <ssi_handler+0xb50>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <ssi_handler+0xb50>)
 80010d8:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 80010da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010dc:	f7ff f882 	bl	80001e4 <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	e1b6      	b.n	8001454 <ssi_handler+0xebc>
 80010e6:	bf00      	nop
 80010e8:	2000053c 	.word	0x2000053c
 80010ec:	20000b60 	.word	0x20000b60
 80010f0:	08017084 	.word	0x08017084
		if (idtab == 1) {
 80010f4:	4ba7      	ldr	r3, [pc, #668]	; (8001394 <ssi_handler+0xdfc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d17c      	bne.n	80011f6 <ssi_handler+0xc5e>
			sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}", T[id].topin, id, tp[id].pins, T[id].ptype, T[id].binter, T[id].hinter, T[id].repeat,
 80010fc:	4ba6      	ldr	r3, [pc, #664]	; (8001398 <ssi_handler+0xe00>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4aa6      	ldr	r2, [pc, #664]	; (800139c <ssi_handler+0xe04>)
 8001102:	218c      	movs	r1, #140	; 0x8c
 8001104:	fb01 f303 	mul.w	r3, r1, r3
 8001108:	4413      	add	r3, r2
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
 800110e:	4ba2      	ldr	r3, [pc, #648]	; (8001398 <ssi_handler+0xe00>)
 8001110:	6819      	ldr	r1, [r3, #0]
 8001112:	6239      	str	r1, [r7, #32]
 8001114:	4ba0      	ldr	r3, [pc, #640]	; (8001398 <ssi_handler+0xe00>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4a9f      	ldr	r2, [pc, #636]	; (80013a0 <ssi_handler+0xe08>)
 8001122:	1899      	adds	r1, r3, r2
 8001124:	61f9      	str	r1, [r7, #28]
 8001126:	4b9c      	ldr	r3, [pc, #624]	; (8001398 <ssi_handler+0xe00>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	228c      	movs	r2, #140	; 0x8c
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	3318      	adds	r3, #24
 8001132:	4a9a      	ldr	r2, [pc, #616]	; (800139c <ssi_handler+0xe04>)
 8001134:	189c      	adds	r4, r3, r2
 8001136:	4b98      	ldr	r3, [pc, #608]	; (8001398 <ssi_handler+0xe00>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a98      	ldr	r2, [pc, #608]	; (800139c <ssi_handler+0xe04>)
 800113c:	218c      	movs	r1, #140	; 0x8c
 800113e:	fb01 f303 	mul.w	r3, r1, r3
 8001142:	4413      	add	r3, r2
 8001144:	332c      	adds	r3, #44	; 0x2c
 8001146:	681d      	ldr	r5, [r3, #0]
 8001148:	4b93      	ldr	r3, [pc, #588]	; (8001398 <ssi_handler+0xe00>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a93      	ldr	r2, [pc, #588]	; (800139c <ssi_handler+0xe04>)
 800114e:	218c      	movs	r1, #140	; 0x8c
 8001150:	fb01 f303 	mul.w	r3, r1, r3
 8001154:	4413      	add	r3, r2
 8001156:	3330      	adds	r3, #48	; 0x30
 8001158:	681e      	ldr	r6, [r3, #0]
 800115a:	4b8f      	ldr	r3, [pc, #572]	; (8001398 <ssi_handler+0xe00>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a8f      	ldr	r2, [pc, #572]	; (800139c <ssi_handler+0xe04>)
 8001160:	218c      	movs	r1, #140	; 0x8c
 8001162:	fb01 f303 	mul.w	r3, r1, r3
 8001166:	4413      	add	r3, r2
 8001168:	3334      	adds	r3, #52	; 0x34
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	61ba      	str	r2, [r7, #24]
 800116e:	4b8a      	ldr	r3, [pc, #552]	; (8001398 <ssi_handler+0xe00>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a8a      	ldr	r2, [pc, #552]	; (800139c <ssi_handler+0xe04>)
 8001174:	218c      	movs	r1, #140	; 0x8c
 8001176:	fb01 f303 	mul.w	r3, r1, r3
 800117a:	4413      	add	r3, r2
 800117c:	3338      	adds	r3, #56	; 0x38
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	6179      	str	r1, [r7, #20]
 8001182:	4b85      	ldr	r3, [pc, #532]	; (8001398 <ssi_handler+0xe00>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a85      	ldr	r2, [pc, #532]	; (800139c <ssi_handler+0xe04>)
 8001188:	218c      	movs	r1, #140	; 0x8c
 800118a:	fb01 f303 	mul.w	r3, r1, r3
 800118e:	4413      	add	r3, r2
 8001190:	333c      	adds	r3, #60	; 0x3c
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b80      	ldr	r3, [pc, #512]	; (8001398 <ssi_handler+0xe00>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a80      	ldr	r2, [pc, #512]	; (800139c <ssi_handler+0xe04>)
 800119c:	218c      	movs	r1, #140	; 0x8c
 800119e:	fb01 f303 	mul.w	r3, r1, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	3340      	adds	r3, #64	; 0x40
 80011a6:	6819      	ldr	r1, [r3, #0]
					T[id].rinter, T[id].dcinter, T[id].pclick, T[id].info, T[id].onoff);
 80011a8:	4b7b      	ldr	r3, [pc, #492]	; (8001398 <ssi_handler+0xe00>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	228c      	movs	r2, #140	; 0x8c
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	3340      	adds	r3, #64	; 0x40
 80011b4:	4a79      	ldr	r2, [pc, #484]	; (800139c <ssi_handler+0xe04>)
 80011b6:	4413      	add	r3, r2
 80011b8:	1d1a      	adds	r2, r3, #4
			sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}", T[id].topin, id, tp[id].pins, T[id].ptype, T[id].binter, T[id].hinter, T[id].repeat,
 80011ba:	4b77      	ldr	r3, [pc, #476]	; (8001398 <ssi_handler+0xe00>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4877      	ldr	r0, [pc, #476]	; (800139c <ssi_handler+0xe04>)
 80011c0:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 80011c4:	fb0c f303 	mul.w	r3, ip, r3
 80011c8:	4403      	add	r3, r0
 80011ca:	3364      	adds	r3, #100	; 0x64
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	9309      	str	r3, [sp, #36]	; 0x24
 80011d0:	9208      	str	r2, [sp, #32]
 80011d2:	9107      	str	r1, [sp, #28]
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	9306      	str	r3, [sp, #24]
 80011d8:	6979      	ldr	r1, [r7, #20]
 80011da:	9105      	str	r1, [sp, #20]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	9204      	str	r2, [sp, #16]
 80011e0:	9603      	str	r6, [sp, #12]
 80011e2:	9502      	str	r5, [sp, #8]
 80011e4:	9401      	str	r4, [sp, #4]
 80011e6:	69f9      	ldr	r1, [r7, #28]
 80011e8:	9100      	str	r1, [sp, #0]
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ee:	496d      	ldr	r1, [pc, #436]	; (80013a4 <ssi_handler+0xe0c>)
 80011f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011f2:	f014 fa39 	bl	8015668 <siprintf>
		if (idtab == 2) {
 80011f6:	4b67      	ldr	r3, [pc, #412]	; (8001394 <ssi_handler+0xdfc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d177      	bne.n	80012ee <ssi_handler+0xd56>
			sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}", T[id].topin, id, tp[id].pins, T[id].ptype, T[id].pwm, T[id].on, T[id].istate, T[id].dvalue, T[id].ponr, T[id].info,
 80011fe:	4b66      	ldr	r3, [pc, #408]	; (8001398 <ssi_handler+0xe00>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a66      	ldr	r2, [pc, #408]	; (800139c <ssi_handler+0xe04>)
 8001204:	218c      	movs	r1, #140	; 0x8c
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	4413      	add	r3, r2
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
 8001210:	4b61      	ldr	r3, [pc, #388]	; (8001398 <ssi_handler+0xe00>)
 8001212:	6819      	ldr	r1, [r3, #0]
 8001214:	6239      	str	r1, [r7, #32]
 8001216:	4b60      	ldr	r3, [pc, #384]	; (8001398 <ssi_handler+0xe00>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4a5f      	ldr	r2, [pc, #380]	; (80013a0 <ssi_handler+0xe08>)
 8001224:	4413      	add	r3, r2
 8001226:	4a5c      	ldr	r2, [pc, #368]	; (8001398 <ssi_handler+0xe00>)
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	218c      	movs	r1, #140	; 0x8c
 800122c:	fb01 f202 	mul.w	r2, r1, r2
 8001230:	3218      	adds	r2, #24
 8001232:	495a      	ldr	r1, [pc, #360]	; (800139c <ssi_handler+0xe04>)
 8001234:	440a      	add	r2, r1
 8001236:	4958      	ldr	r1, [pc, #352]	; (8001398 <ssi_handler+0xe00>)
 8001238:	6809      	ldr	r1, [r1, #0]
 800123a:	4858      	ldr	r0, [pc, #352]	; (800139c <ssi_handler+0xe04>)
 800123c:	248c      	movs	r4, #140	; 0x8c
 800123e:	fb04 f101 	mul.w	r1, r4, r1
 8001242:	4401      	add	r1, r0
 8001244:	3104      	adds	r1, #4
 8001246:	6809      	ldr	r1, [r1, #0]
 8001248:	4853      	ldr	r0, [pc, #332]	; (8001398 <ssi_handler+0xe00>)
 800124a:	6800      	ldr	r0, [r0, #0]
 800124c:	4c53      	ldr	r4, [pc, #332]	; (800139c <ssi_handler+0xe04>)
 800124e:	258c      	movs	r5, #140	; 0x8c
 8001250:	fb05 f000 	mul.w	r0, r5, r0
 8001254:	4420      	add	r0, r4
 8001256:	3008      	adds	r0, #8
 8001258:	6800      	ldr	r0, [r0, #0]
 800125a:	61f8      	str	r0, [r7, #28]
 800125c:	4c4e      	ldr	r4, [pc, #312]	; (8001398 <ssi_handler+0xe00>)
 800125e:	6824      	ldr	r4, [r4, #0]
 8001260:	4d4e      	ldr	r5, [pc, #312]	; (800139c <ssi_handler+0xe04>)
 8001262:	268c      	movs	r6, #140	; 0x8c
 8001264:	fb06 f404 	mul.w	r4, r6, r4
 8001268:	442c      	add	r4, r5
 800126a:	340c      	adds	r4, #12
 800126c:	6820      	ldr	r0, [r4, #0]
 800126e:	61b8      	str	r0, [r7, #24]
 8001270:	4d49      	ldr	r5, [pc, #292]	; (8001398 <ssi_handler+0xe00>)
 8001272:	682d      	ldr	r5, [r5, #0]
 8001274:	4e49      	ldr	r6, [pc, #292]	; (800139c <ssi_handler+0xe04>)
 8001276:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 800127a:	fb0c f505 	mul.w	r5, ip, r5
 800127e:	4435      	add	r5, r6
 8001280:	3510      	adds	r5, #16
 8001282:	682d      	ldr	r5, [r5, #0]
 8001284:	4e44      	ldr	r6, [pc, #272]	; (8001398 <ssi_handler+0xe00>)
 8001286:	6836      	ldr	r6, [r6, #0]
 8001288:	4844      	ldr	r0, [pc, #272]	; (800139c <ssi_handler+0xe04>)
 800128a:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 800128e:	fb0c f606 	mul.w	r6, ip, r6
 8001292:	4406      	add	r6, r0
 8001294:	3614      	adds	r6, #20
 8001296:	6836      	ldr	r6, [r6, #0]
 8001298:	483f      	ldr	r0, [pc, #252]	; (8001398 <ssi_handler+0xe00>)
 800129a:	6800      	ldr	r0, [r0, #0]
 800129c:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 80012a0:	fb0c fc00 	mul.w	ip, ip, r0
 80012a4:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80012a8:	483c      	ldr	r0, [pc, #240]	; (800139c <ssi_handler+0xe04>)
 80012aa:	4484      	add	ip, r0
 80012ac:	f10c 0004 	add.w	r0, ip, #4
 80012b0:	6178      	str	r0, [r7, #20]
 80012b2:	4839      	ldr	r0, [pc, #228]	; (8001398 <ssi_handler+0xe00>)
 80012b4:	6800      	ldr	r0, [r0, #0]
 80012b6:	4c39      	ldr	r4, [pc, #228]	; (800139c <ssi_handler+0xe04>)
 80012b8:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
 80012bc:	fb0c fc00 	mul.w	ip, ip, r0
 80012c0:	44a4      	add	ip, r4
 80012c2:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 80012c6:	f8dc 0000 	ldr.w	r0, [ip]
 80012ca:	9008      	str	r0, [sp, #32]
 80012cc:	6978      	ldr	r0, [r7, #20]
 80012ce:	9007      	str	r0, [sp, #28]
 80012d0:	9606      	str	r6, [sp, #24]
 80012d2:	9505      	str	r5, [sp, #20]
 80012d4:	69b8      	ldr	r0, [r7, #24]
 80012d6:	9004      	str	r0, [sp, #16]
 80012d8:	69f8      	ldr	r0, [r7, #28]
 80012da:	9003      	str	r0, [sp, #12]
 80012dc:	9102      	str	r1, [sp, #8]
 80012de:	9201      	str	r2, [sp, #4]
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e6:	4930      	ldr	r1, [pc, #192]	; (80013a8 <ssi_handler+0xe10>)
 80012e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012ea:	f014 f9bd 	bl	8015668 <siprintf>
		if (idtab == 3) {
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <ssi_handler+0xdfc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	f040 80a4 	bne.w	8001440 <ssi_handler+0xea8>
			sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"dow\":\"%d\",\"tim\":%d,\"hr\":%d,\"min\":%d,\"sec\":%d,\"sr\":%d,\"ss\":%d,\"lat\":%d,\"lon\":%d,\"info\":\"%s\",\"onoff\":%d}", T[id].topin, id, tp[id].pins, T[id].dow, T[id].tim, T[id].hr, T[id].min, T[id].sec, T[id].sr,
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <ssi_handler+0xe00>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a27      	ldr	r2, [pc, #156]	; (800139c <ssi_handler+0xe04>)
 80012fe:	218c      	movs	r1, #140	; 0x8c
 8001300:	fb01 f303 	mul.w	r3, r1, r3
 8001304:	4413      	add	r3, r2
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
 800130a:	4b23      	ldr	r3, [pc, #140]	; (8001398 <ssi_handler+0xe00>)
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	6239      	str	r1, [r7, #32]
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <ssi_handler+0xe00>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <ssi_handler+0xe08>)
 800131e:	189d      	adds	r5, r3, r2
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <ssi_handler+0xe00>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1d      	ldr	r2, [pc, #116]	; (800139c <ssi_handler+0xe04>)
 8001326:	218c      	movs	r1, #140	; 0x8c
 8001328:	fb01 f303 	mul.w	r3, r1, r3
 800132c:	4413      	add	r3, r2
 800132e:	3368      	adds	r3, #104	; 0x68
 8001330:	681e      	ldr	r6, [r3, #0]
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <ssi_handler+0xe00>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <ssi_handler+0xe04>)
 8001338:	218c      	movs	r1, #140	; 0x8c
 800133a:	fb01 f303 	mul.w	r3, r1, r3
 800133e:	4413      	add	r3, r2
 8001340:	336c      	adds	r3, #108	; 0x6c
 8001342:	6818      	ldr	r0, [r3, #0]
 8001344:	61f8      	str	r0, [r7, #28]
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <ssi_handler+0xe00>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a14      	ldr	r2, [pc, #80]	; (800139c <ssi_handler+0xe04>)
 800134c:	218c      	movs	r1, #140	; 0x8c
 800134e:	fb01 f303 	mul.w	r3, r1, r3
 8001352:	4413      	add	r3, r2
 8001354:	3370      	adds	r3, #112	; 0x70
 8001356:	681c      	ldr	r4, [r3, #0]
 8001358:	61bc      	str	r4, [r7, #24]
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <ssi_handler+0xe00>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <ssi_handler+0xe04>)
 8001360:	218c      	movs	r1, #140	; 0x8c
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4413      	add	r3, r2
 8001368:	3374      	adds	r3, #116	; 0x74
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	617a      	str	r2, [r7, #20]
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <ssi_handler+0xe00>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <ssi_handler+0xe04>)
 8001374:	218c      	movs	r1, #140	; 0x8c
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	3378      	adds	r3, #120	; 0x78
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	6139      	str	r1, [r7, #16]
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <ssi_handler+0xe00>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <ssi_handler+0xe04>)
 8001388:	218c      	movs	r1, #140	; 0x8c
 800138a:	fb01 f303 	mul.w	r3, r1, r3
 800138e:	4413      	add	r3, r2
 8001390:	337c      	adds	r3, #124	; 0x7c
 8001392:	e00b      	b.n	80013ac <ssi_handler+0xe14>
 8001394:	20000548 	.word	0x20000548
 8001398:	20000544 	.word	0x20000544
 800139c:	20000b60 	.word	0x20000b60
 80013a0:	20000000 	.word	0x20000000
 80013a4:	08017110 	.word	0x08017110
 80013a8:	080171a0 	.word	0x080171a0
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <ssi_handler+0xec4>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a2a      	ldr	r2, [pc, #168]	; (8001460 <ssi_handler+0xec8>)
 80013b6:	218c      	movs	r1, #140	; 0x8c
 80013b8:	fb01 f303 	mul.w	r3, r1, r3
 80013bc:	4413      	add	r3, r2
 80013be:	3380      	adds	r3, #128	; 0x80
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	60b8      	str	r0, [r7, #8]
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <ssi_handler+0xec4>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a25      	ldr	r2, [pc, #148]	; (8001460 <ssi_handler+0xec8>)
 80013ca:	218c      	movs	r1, #140	; 0x8c
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	3384      	adds	r3, #132	; 0x84
 80013d4:	681c      	ldr	r4, [r3, #0]
 80013d6:	607c      	str	r4, [r7, #4]
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <ssi_handler+0xec4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a20      	ldr	r2, [pc, #128]	; (8001460 <ssi_handler+0xec8>)
 80013de:	218c      	movs	r1, #140	; 0x8c
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	3388      	adds	r3, #136	; 0x88
 80013e8:	681c      	ldr	r4, [r3, #0]
					T[id].ss, T[id].lat, T[id].lon, T[id].info, T[id].onoff);
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <ssi_handler+0xec4>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	228c      	movs	r2, #140	; 0x8c
 80013f0:	fb02 f303 	mul.w	r3, r2, r3
 80013f4:	3340      	adds	r3, #64	; 0x40
 80013f6:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <ssi_handler+0xec8>)
 80013f8:	4413      	add	r3, r2
 80013fa:	1d18      	adds	r0, r3, #4
			sprintf(pcInsert, "{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"dow\":\"%d\",\"tim\":%d,\"hr\":%d,\"min\":%d,\"sec\":%d,\"sr\":%d,\"ss\":%d,\"lat\":%d,\"lon\":%d,\"info\":\"%s\",\"onoff\":%d}", T[id].topin, id, tp[id].pins, T[id].dow, T[id].tim, T[id].hr, T[id].min, T[id].sec, T[id].sr,
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <ssi_handler+0xec4>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4917      	ldr	r1, [pc, #92]	; (8001460 <ssi_handler+0xec8>)
 8001402:	238c      	movs	r3, #140	; 0x8c
 8001404:	fb03 f302 	mul.w	r3, r3, r2
 8001408:	440b      	add	r3, r1
 800140a:	3364      	adds	r3, #100	; 0x64
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001410:	900a      	str	r0, [sp, #40]	; 0x28
 8001412:	9409      	str	r4, [sp, #36]	; 0x24
 8001414:	687c      	ldr	r4, [r7, #4]
 8001416:	9408      	str	r4, [sp, #32]
 8001418:	68b8      	ldr	r0, [r7, #8]
 800141a:	9007      	str	r0, [sp, #28]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	9306      	str	r3, [sp, #24]
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	9105      	str	r1, [sp, #20]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	9204      	str	r2, [sp, #16]
 8001428:	69bc      	ldr	r4, [r7, #24]
 800142a:	9403      	str	r4, [sp, #12]
 800142c:	69f8      	ldr	r0, [r7, #28]
 800142e:	9002      	str	r0, [sp, #8]
 8001430:	9601      	str	r6, [sp, #4]
 8001432:	9500      	str	r5, [sp, #0]
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001438:	490a      	ldr	r1, [pc, #40]	; (8001464 <ssi_handler+0xecc>)
 800143a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800143c:	f014 f914 	bl	8015668 <siprintf>
		return strlen(pcInsert);
 8001440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001442:	f7fe fecf 	bl	80001e4 <strlen>
 8001446:	4603      	mov	r3, r0
 8001448:	b29b      	uxth	r3, r3
 800144a:	e003      	b.n	8001454 <ssi_handler+0xebc>
		break;
 800144c:	bf00      	nop
 800144e:	e000      	b.n	8001452 <ssi_handler+0xeba>
		break;
 8001450:	bf00      	nop
	}
	return 0;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	373c      	adds	r7, #60	; 0x3c
 8001458:	46bd      	mov	sp, r7
 800145a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145c:	20000544 	.word	0x20000544
 8001460:	20000b60 	.word	0x20000b60
 8001464:	08017218 	.word	0x08017218

08001468 <CGIForm_Handler>:
static const tCGI URL_TABLES[] = { { "/json.shtml", CGIForm_Handler }, { "/form1.shtml", CGIForm_Handler1 }, { "/form2.shtml", CGIForm_Handler1 }, { "/T_form.shtml", CGIForm_Handler1 } };

const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));

//tCGI CGI_TAB[3]; // 3. For LED создадим массив для LED CGI
const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	603b      	str	r3, [r7, #0]
	//printf("GET OK 1 \n");
	if (iIndex == 0) {
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d120      	bne.n	80014be <CGIForm_Handler+0x56>
		for (int i = 0; i < iNumParams; i++) {
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e019      	b.n	80014b6 <CGIForm_Handler+0x4e>
			if (strcmp(pcParam[i], "jsongo") == 0)  // if the fname string is found
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	490e      	ldr	r1, [pc, #56]	; (80014c8 <CGIForm_Handler+0x60>)
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe fe9e 	bl	80001d0 <strcmp>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10a      	bne.n	80014b0 <CGIForm_Handler+0x48>
					{
				//memset(name, '\0', 30);  // Очищаем массив перед записью новых данных.
				//strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
				jsongo = atoi(pcValue[i]);
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	4413      	add	r3, r2
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f013 ff77 	bl	8015398 <atoi>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <CGIForm_Handler+0x64>)
 80014ae:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dbe1      	blt.n	8001482 <CGIForm_Handler+0x1a>
			}
		}
	}
	return "/json.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <CGIForm_Handler+0x68>)
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	080172dc 	.word	0x080172dc
 80014cc:	20000540 	.word	0x20000540
 80014d0:	080172a0 	.word	0x080172a0

080014d4 <CGIForm_Handler1>:

const char* CGIForm_Handler1(int iIndex, int iNumParams, char *pcParam[], char *pcValue[]) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
	//printf("GET 1 OK  \n");
	if (iIndex == 1 || iIndex == 2 || iIndex == 3) {
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d005      	beq.n	80014f4 <CGIForm_Handler1+0x20>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d002      	beq.n	80014f4 <CGIForm_Handler1+0x20>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d137      	bne.n	8001564 <CGIForm_Handler1+0x90>
		for (int i = 0; i < iNumParams; i++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e030      	b.n	800155c <CGIForm_Handler1+0x88>
			if (strcmp(pcParam[i], "id") == 0)  // if the fname string is found
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4921      	ldr	r1, [pc, #132]	; (800158c <CGIForm_Handler1+0xb8>)
 8001506:	4618      	mov	r0, r3
 8001508:	f7fe fe62 	bl	80001d0 <strcmp>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10a      	bne.n	8001528 <CGIForm_Handler1+0x54>
					{
				id = atoi(pcValue[i]);
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	4413      	add	r3, r2
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f013 ff3b 	bl	8015398 <atoi>
 8001522:	4603      	mov	r3, r0
 8001524:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <CGIForm_Handler1+0xbc>)
 8001526:	6013      	str	r3, [r2, #0]
				//printf("+++++++++ %d \n", id);
			}
			if (strcmp(pcParam[i], "tab") == 0)  // if the fname string is found
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4413      	add	r3, r2
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4918      	ldr	r1, [pc, #96]	; (8001594 <CGIForm_Handler1+0xc0>)
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fe4b 	bl	80001d0 <strcmp>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d10a      	bne.n	8001556 <CGIForm_Handler1+0x82>
					{
				idtab = atoi(pcValue[i]);
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	4413      	add	r3, r2
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f013 ff24 	bl	8015398 <atoi>
 8001550:	4603      	mov	r3, r0
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <CGIForm_Handler1+0xc4>)
 8001554:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3301      	adds	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbca      	blt.n	80014fa <CGIForm_Handler1+0x26>
				//printf("+++++++++ %d \n", idtab);
			}
		}
	}
	if (iIndex == 1) {
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <CGIForm_Handler1+0x9a>
		return "/form1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <CGIForm_Handler1+0xc8>)
 800156c:	e00a      	b.n	8001584 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 2) {
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d101      	bne.n	8001578 <CGIForm_Handler1+0xa4>
		return "/form2.shtml";
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <CGIForm_Handler1+0xcc>)
 8001576:	e005      	b.n	8001584 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 3) {
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b03      	cmp	r3, #3
 800157c:	d101      	bne.n	8001582 <CGIForm_Handler1+0xae>
			return "/T_form.shtml";
 800157e:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <CGIForm_Handler1+0xd0>)
 8001580:	e000      	b.n	8001584 <CGIForm_Handler1+0xb0>
	} else {
		return "/404.html";
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <CGIForm_Handler1+0xd4>)
	}
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	080172e4 	.word	0x080172e4
 8001590:	20000544 	.word	0x20000544
 8001594:	080172e8 	.word	0x080172e8
 8001598:	20000548 	.word	0x20000548
 800159c:	080172ac 	.word	0x080172ac
 80015a0:	080172bc 	.word	0x080172bc
 80015a4:	080172cc 	.word	0x080172cc
 80015a8:	080172ec 	.word	0x080172ec

080015ac <httpd_post_begin>:
static void *current_connection;
static void *valid_connection;
int http_post_content_len;
// char *urls;!!!!!!!!!!!!!!!!!!!!!!!!!!
char urls[30] = { 0 };
err_t httpd_post_begin(void *connection, const char *uri, const char *http_request, uint16_t http_request_len, int content_len, char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	807b      	strh	r3, [r7, #2]
	//LWIP_UNUSED_ARG(connection);
	//LWIP_UNUSED_ARG(http_request);
	//LWIP_UNUSED_ARG(http_request_len);
	//LWIP_UNUSED_ARG(content_len);
	//LWIP_UNUSED_ARG(post_auto_wnd);
	http_post_content_len = content_len;
 80015ba:	4a0d      	ldr	r2, [pc, #52]	; (80015f0 <httpd_post_begin+0x44>)
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	6013      	str	r3, [r2, #0]
	strncpy(urls, uri, 15);
 80015c0:	220f      	movs	r2, #15
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	480b      	ldr	r0, [pc, #44]	; (80015f4 <httpd_post_begin+0x48>)
 80015c6:	f014 f8a5 	bl	8015714 <strncpy>
	//printf("+++++++++uri %s +++++++++++------- \r\n",uri);  // Вывод /select.shtml +
	//printf("httpd_post_begin: Post Content: %s\n",  http_request);
	//printf("%d \r\n",  http_post_content_len);
	if (current_connection != connection) {
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <httpd_post_begin+0x4c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d007      	beq.n	80015e4 <httpd_post_begin+0x38>
		current_connection = connection;
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <httpd_post_begin+0x4c>)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <httpd_post_begin+0x50>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
		//snprintf(response_uri, response_uri_len, "/cgi_leds.html");
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e001      	b.n	80015e8 <httpd_post_begin+0x3c>
	}
	return ERR_VAL;
 80015e4:	f06f 0305 	mvn.w	r3, #5
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000b5c 	.word	0x20000b5c
 80015f4:	20000554 	.word	0x20000554
 80015f8:	2000054c 	.word	0x2000054c
 80015fc:	20000550 	.word	0x20000550

08001600 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
	printf("OK POST 2 \r\n");
 800160a:	4817      	ldr	r0, [pc, #92]	; (8001668 <httpd_post_receive_data+0x68>)
 800160c:	f013 ffb0 	bl	8015570 <puts>
	char *data;
	if (current_connection == connection && p != NULL) {
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <httpd_post_receive_data+0x6c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	429a      	cmp	r2, r3
 8001618:	d117      	bne.n	800164a <httpd_post_receive_data+0x4a>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d014      	beq.n	800164a <httpd_post_receive_data+0x4a>
		data = p->payload;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	60fb      	str	r3, [r7, #12]
		printf("DATA %s \r\n", data);
 8001626:	68f9      	ldr	r1, [r7, #12]
 8001628:	4811      	ldr	r0, [pc, #68]	; (8001670 <httpd_post_receive_data+0x70>)
 800162a:	f013 ff1b 	bl	8015464 <iprintf>
		strcat(bufervar, data);
 800162e:	68f9      	ldr	r1, [r7, #12]
 8001630:	4810      	ldr	r0, [pc, #64]	; (8001674 <httpd_post_receive_data+0x74>)
 8001632:	f014 f839 	bl	80156a8 <strcat>
		pbuf_free(p);
 8001636:	6838      	ldr	r0, [r7, #0]
 8001638:	f00a fe06 	bl	800c248 <pbuf_free>
		memset(data, '\0', sizeof(*data));
 800163c:	2201      	movs	r2, #1
 800163e:	2100      	movs	r1, #0
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f013 ff07 	bl	8015454 <memset>
		return ERR_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e00a      	b.n	8001660 <httpd_post_receive_data+0x60>
	}
	if (p != NULL) {
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <httpd_post_receive_data+0x5c>
		printf("END \r\n");
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <httpd_post_receive_data+0x78>)
 8001652:	f013 ff8d 	bl	8015570 <puts>
		pbuf_free(p);
 8001656:	6838      	ldr	r0, [r7, #0]
 8001658:	f00a fdf6 	bl	800c248 <pbuf_free>
	}
	return ERR_VAL;
 800165c:	f06f 0305 	mvn.w	r3, #5
}
 8001660:	4618      	mov	r0, r3
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	080172f8 	.word	0x080172f8
 800166c:	2000054c 	.word	0x2000054c
 8001670:	08017304 	.word	0x08017304
 8001674:	20002b18 	.word	0x20002b18
 8001678:	08017310 	.word	0x08017310

0800167c <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len) {
 800167c:	b580      	push	{r7, lr}
 800167e:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8001682:	af00      	add	r7, sp, #0
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	6018      	str	r0, [r3, #0]
 800168a:	f107 0308 	add.w	r3, r7, #8
 800168e:	6019      	str	r1, [r3, #0]
 8001690:	1dbb      	adds	r3, r7, #6
 8001692:	801a      	strh	r2, [r3, #0]
	printf("OK POST 3 \r\n");
 8001694:	48cc      	ldr	r0, [pc, #816]	; (80019c8 <httpd_post_finished+0x34c>)
 8001696:	f013 ff6b 	bl	8015570 <puts>

	char *token;
	char *token1;
	char *token2;
	char *name1;
	int z = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	//char urlline[http_post_content_len];
	char urlline[1000];
	char name0[50];
	char nametoken[50];

	memset(name0, '\0', sizeof(name0));
 80016a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016a4:	2232      	movs	r2, #50	; 0x32
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f013 fed3 	bl	8015454 <memset>
	//memset(urlline, '\0', sizeof(urlline));
	strncpy(urlline, bufervar, http_post_content_len);
 80016ae:	4bc7      	ldr	r3, [pc, #796]	; (80019cc <httpd_post_finished+0x350>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016b8:	49c5      	ldr	r1, [pc, #788]	; (80019d0 <httpd_post_finished+0x354>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	f014 f82a 	bl	8015714 <strncpy>

	printf("%s \r\n", urlline);
 80016c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016c4:	4619      	mov	r1, r3
 80016c6:	48c3      	ldr	r0, [pc, #780]	; (80019d4 <httpd_post_finished+0x358>)
 80016c8:	f013 fecc 	bl	8015464 <iprintf>
	printf("COUNT %d \r\n", http_post_content_len);
 80016cc:	4bbf      	ldr	r3, [pc, #764]	; (80019cc <httpd_post_finished+0x350>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	48c1      	ldr	r0, [pc, #772]	; (80019d8 <httpd_post_finished+0x35c>)
 80016d4:	f013 fec6 	bl	8015464 <iprintf>
	char *rest = urlline;
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016e0:	601a      	str	r2, [r3, #0]
	while ((token = strtok_r(rest, "&", &rest))) {
 80016e2:	e2e0      	b.n	8001ca6 <httpd_post_finished+0x62a>
		//printf("%s\n", token);
		char *rest1 = token;
 80016e4:	f107 0318 	add.w	r3, r7, #24
 80016e8:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 80016ec:	601a      	str	r2, [r3, #0]
		strcat(name0, token); // решение с пустой строкой
 80016ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016f2:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 80016f6:	4618      	mov	r0, r3
 80016f8:	f013 ffd6 	bl	80156a8 <strcat>
		y = 0;
 80016fc:	4bb7      	ldr	r3, [pc, #732]	; (80019dc <httpd_post_finished+0x360>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8001702:	e28c      	b.n	8001c1e <httpd_post_finished+0x5a2>
			z = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
			if (y == 0) {
 800170a:	4bb4      	ldr	r3, [pc, #720]	; (80019dc <httpd_post_finished+0x360>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d12b      	bne.n	800176a <httpd_post_finished+0xee>
				//printf("NAME %s\n", token1);
				// получение id
				char *rest2 = token1;
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800171a:	601a      	str	r2, [r3, #0]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 800171c:	e016      	b.n	800174c <httpd_post_finished+0xd0>
					if (z == 0) {
 800171e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <httpd_post_finished+0xb2>
						name1 = token2;
 8001726:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800172a:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
					}
					if (z == 1) {
 800172e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001732:	2b01      	cmp	r3, #1
 8001734:	d105      	bne.n	8001742 <httpd_post_finished+0xc6>
						id = atoi(token2);
 8001736:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 800173a:	f013 fe2d 	bl	8015398 <atoi>
 800173e:	f8c7 047c 	str.w	r0, [r7, #1148]	; 0x47c
						//printf("ID %d\n", id);
					}
					z++;
 8001742:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001746:	3301      	adds	r3, #1
 8001748:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f107 0214 	add.w	r2, r7, #20
 8001756:	49a2      	ldr	r1, [pc, #648]	; (80019e0 <httpd_post_finished+0x364>)
 8001758:	4618      	mov	r0, r3
 800175a:	f014 f82d 	bl	80157b8 <strtok_r>
 800175e:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
 8001762:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1d9      	bne.n	800171e <httpd_post_finished+0xa2>
				}
			}
			if (y == 1) {
 800176a:	4b9c      	ldr	r3, [pc, #624]	; (80019dc <httpd_post_finished+0x360>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	f040 8250 	bne.w	8001c14 <httpd_post_finished+0x598>
				// значение переменной
				//printf("VAL %s\n", token1);
				// пишем в структуру
				if (strcmp(name1, "ptype") == 0) {
 8001774:	499b      	ldr	r1, [pc, #620]	; (80019e4 <httpd_post_finished+0x368>)
 8001776:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800177a:	f7fe fd29 	bl	80001d0 <strcmp>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10d      	bne.n	80017a0 <httpd_post_finished+0x124>
					strcpy(T[id].ptype, token1);
 8001784:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001788:	228c      	movs	r2, #140	; 0x8c
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	3318      	adds	r3, #24
 8001790:	4a95      	ldr	r2, [pc, #596]	; (80019e8 <httpd_post_finished+0x36c>)
 8001792:	4413      	add	r3, r2
 8001794:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8001798:	4618      	mov	r0, r3
 800179a:	f013 ffa1 	bl	80156e0 <strcpy>
 800179e:	e239      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "topin") == 0) {
 80017a0:	4992      	ldr	r1, [pc, #584]	; (80019ec <httpd_post_finished+0x370>)
 80017a2:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 80017a6:	f7fe fd13 	bl	80001d0 <strcmp>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10d      	bne.n	80017cc <httpd_post_finished+0x150>
					T[id].topin = atoi(token1);
 80017b0:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80017b4:	f013 fdf0 	bl	8015398 <atoi>
 80017b8:	4602      	mov	r2, r0
 80017ba:	498b      	ldr	r1, [pc, #556]	; (80019e8 <httpd_post_finished+0x36c>)
 80017bc:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80017c0:	208c      	movs	r0, #140	; 0x8c
 80017c2:	fb00 f303 	mul.w	r3, r0, r3
 80017c6:	440b      	add	r3, r1
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	e223      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "binter") == 0) {
 80017cc:	4988      	ldr	r1, [pc, #544]	; (80019f0 <httpd_post_finished+0x374>)
 80017ce:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 80017d2:	f7fe fcfd 	bl	80001d0 <strcmp>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10e      	bne.n	80017fa <httpd_post_finished+0x17e>
					T[id].binter = atoi(token1);
 80017dc:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80017e0:	f013 fdda 	bl	8015398 <atoi>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4980      	ldr	r1, [pc, #512]	; (80019e8 <httpd_post_finished+0x36c>)
 80017e8:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80017ec:	208c      	movs	r0, #140	; 0x8c
 80017ee:	fb00 f303 	mul.w	r3, r0, r3
 80017f2:	440b      	add	r3, r1
 80017f4:	332c      	adds	r3, #44	; 0x2c
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e20c      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "hinter") == 0) {
 80017fa:	497e      	ldr	r1, [pc, #504]	; (80019f4 <httpd_post_finished+0x378>)
 80017fc:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001800:	f7fe fce6 	bl	80001d0 <strcmp>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10e      	bne.n	8001828 <httpd_post_finished+0x1ac>
					T[id].hinter = atoi(token1);
 800180a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800180e:	f013 fdc3 	bl	8015398 <atoi>
 8001812:	4602      	mov	r2, r0
 8001814:	4974      	ldr	r1, [pc, #464]	; (80019e8 <httpd_post_finished+0x36c>)
 8001816:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800181a:	208c      	movs	r0, #140	; 0x8c
 800181c:	fb00 f303 	mul.w	r3, r0, r3
 8001820:	440b      	add	r3, r1
 8001822:	3330      	adds	r3, #48	; 0x30
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e1f5      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "repeat") == 0) {
 8001828:	4973      	ldr	r1, [pc, #460]	; (80019f8 <httpd_post_finished+0x37c>)
 800182a:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800182e:	f7fe fccf 	bl	80001d0 <strcmp>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10e      	bne.n	8001856 <httpd_post_finished+0x1da>
					T[id].repeat = atoi(token1);
 8001838:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800183c:	f013 fdac 	bl	8015398 <atoi>
 8001840:	4602      	mov	r2, r0
 8001842:	4969      	ldr	r1, [pc, #420]	; (80019e8 <httpd_post_finished+0x36c>)
 8001844:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001848:	208c      	movs	r0, #140	; 0x8c
 800184a:	fb00 f303 	mul.w	r3, r0, r3
 800184e:	440b      	add	r3, r1
 8001850:	3334      	adds	r3, #52	; 0x34
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e1de      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "rinter") == 0) {
 8001856:	4969      	ldr	r1, [pc, #420]	; (80019fc <httpd_post_finished+0x380>)
 8001858:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800185c:	f7fe fcb8 	bl	80001d0 <strcmp>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10e      	bne.n	8001884 <httpd_post_finished+0x208>
					T[id].rinter = atoi(token1);
 8001866:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800186a:	f013 fd95 	bl	8015398 <atoi>
 800186e:	4602      	mov	r2, r0
 8001870:	495d      	ldr	r1, [pc, #372]	; (80019e8 <httpd_post_finished+0x36c>)
 8001872:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001876:	208c      	movs	r0, #140	; 0x8c
 8001878:	fb00 f303 	mul.w	r3, r0, r3
 800187c:	440b      	add	r3, r1
 800187e:	3338      	adds	r3, #56	; 0x38
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e1c7      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "dcinter") == 0) {
 8001884:	495e      	ldr	r1, [pc, #376]	; (8001a00 <httpd_post_finished+0x384>)
 8001886:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800188a:	f7fe fca1 	bl	80001d0 <strcmp>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d10e      	bne.n	80018b2 <httpd_post_finished+0x236>
					T[id].dcinter = atoi(token1);
 8001894:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001898:	f013 fd7e 	bl	8015398 <atoi>
 800189c:	4602      	mov	r2, r0
 800189e:	4952      	ldr	r1, [pc, #328]	; (80019e8 <httpd_post_finished+0x36c>)
 80018a0:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80018a4:	208c      	movs	r0, #140	; 0x8c
 80018a6:	fb00 f303 	mul.w	r3, r0, r3
 80018aa:	440b      	add	r3, r1
 80018ac:	333c      	adds	r3, #60	; 0x3c
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e1b0      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "pclick") == 0) {
 80018b2:	4954      	ldr	r1, [pc, #336]	; (8001a04 <httpd_post_finished+0x388>)
 80018b4:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 80018b8:	f7fe fc8a 	bl	80001d0 <strcmp>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10e      	bne.n	80018e0 <httpd_post_finished+0x264>
					T[id].pclick = atoi(token1);
 80018c2:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80018c6:	f013 fd67 	bl	8015398 <atoi>
 80018ca:	4602      	mov	r2, r0
 80018cc:	4946      	ldr	r1, [pc, #280]	; (80019e8 <httpd_post_finished+0x36c>)
 80018ce:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80018d2:	208c      	movs	r0, #140	; 0x8c
 80018d4:	fb00 f303 	mul.w	r3, r0, r3
 80018d8:	440b      	add	r3, r1
 80018da:	3340      	adds	r3, #64	; 0x40
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e199      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "info") == 0) {
 80018e0:	4949      	ldr	r1, [pc, #292]	; (8001a08 <httpd_post_finished+0x38c>)
 80018e2:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 80018e6:	f7fe fc73 	bl	80001d0 <strcmp>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10e      	bne.n	800190e <httpd_post_finished+0x292>
					//memset(T[id].info, '\0', sizeof(T[id].info));
					strcpy(T[id].info, token1);
 80018f0:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80018f4:	228c      	movs	r2, #140	; 0x8c
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	3340      	adds	r3, #64	; 0x40
 80018fc:	4a3a      	ldr	r2, [pc, #232]	; (80019e8 <httpd_post_finished+0x36c>)
 80018fe:	4413      	add	r3, r2
 8001900:	3304      	adds	r3, #4
 8001902:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8001906:	4618      	mov	r0, r3
 8001908:	f013 feea 	bl	80156e0 <strcpy>
 800190c:	e182      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "onoff") == 0) {
 800190e:	493f      	ldr	r1, [pc, #252]	; (8001a0c <httpd_post_finished+0x390>)
 8001910:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001914:	f7fe fc5c 	bl	80001d0 <strcmp>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10e      	bne.n	800193c <httpd_post_finished+0x2c0>
					T[id].onoff = atoi(token1);
 800191e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001922:	f013 fd39 	bl	8015398 <atoi>
 8001926:	4602      	mov	r2, r0
 8001928:	492f      	ldr	r1, [pc, #188]	; (80019e8 <httpd_post_finished+0x36c>)
 800192a:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800192e:	208c      	movs	r0, #140	; 0x8c
 8001930:	fb00 f303 	mul.w	r3, r0, r3
 8001934:	440b      	add	r3, r1
 8001936:	3364      	adds	r3, #100	; 0x64
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	e16b      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "pwm") == 0) {
 800193c:	4934      	ldr	r1, [pc, #208]	; (8001a10 <httpd_post_finished+0x394>)
 800193e:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001942:	f7fe fc45 	bl	80001d0 <strcmp>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10e      	bne.n	800196a <httpd_post_finished+0x2ee>
					T[id].pwm = atoi(token1);
 800194c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001950:	f013 fd22 	bl	8015398 <atoi>
 8001954:	4602      	mov	r2, r0
 8001956:	4924      	ldr	r1, [pc, #144]	; (80019e8 <httpd_post_finished+0x36c>)
 8001958:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800195c:	208c      	movs	r0, #140	; 0x8c
 800195e:	fb00 f303 	mul.w	r3, r0, r3
 8001962:	440b      	add	r3, r1
 8001964:	3304      	adds	r3, #4
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	e154      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "on") == 0) {
 800196a:	492a      	ldr	r1, [pc, #168]	; (8001a14 <httpd_post_finished+0x398>)
 800196c:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001970:	f7fe fc2e 	bl	80001d0 <strcmp>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10e      	bne.n	8001998 <httpd_post_finished+0x31c>
					T[id].on = atoi(token1);
 800197a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800197e:	f013 fd0b 	bl	8015398 <atoi>
 8001982:	4602      	mov	r2, r0
 8001984:	4918      	ldr	r1, [pc, #96]	; (80019e8 <httpd_post_finished+0x36c>)
 8001986:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 800198a:	208c      	movs	r0, #140	; 0x8c
 800198c:	fb00 f303 	mul.w	r3, r0, r3
 8001990:	440b      	add	r3, r1
 8001992:	3308      	adds	r3, #8
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e13d      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "istate") == 0) {
 8001998:	491f      	ldr	r1, [pc, #124]	; (8001a18 <httpd_post_finished+0x39c>)
 800199a:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 800199e:	f7fe fc17 	bl	80001d0 <strcmp>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d139      	bne.n	8001a1c <httpd_post_finished+0x3a0>
					T[id].istate = atoi(token1);
 80019a8:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80019ac:	f013 fcf4 	bl	8015398 <atoi>
 80019b0:	4602      	mov	r2, r0
 80019b2:	490d      	ldr	r1, [pc, #52]	; (80019e8 <httpd_post_finished+0x36c>)
 80019b4:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 80019b8:	208c      	movs	r0, #140	; 0x8c
 80019ba:	fb00 f303 	mul.w	r3, r0, r3
 80019be:	440b      	add	r3, r1
 80019c0:	330c      	adds	r3, #12
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e126      	b.n	8001c14 <httpd_post_finished+0x598>
 80019c6:	bf00      	nop
 80019c8:	08017318 	.word	0x08017318
 80019cc:	20000b5c 	.word	0x20000b5c
 80019d0:	20002b18 	.word	0x20002b18
 80019d4:	08017324 	.word	0x08017324
 80019d8:	0801732c 	.word	0x0801732c
 80019dc:	2000541c 	.word	0x2000541c
 80019e0:	08017338 	.word	0x08017338
 80019e4:	0801733c 	.word	0x0801733c
 80019e8:	20000b60 	.word	0x20000b60
 80019ec:	08017344 	.word	0x08017344
 80019f0:	0801734c 	.word	0x0801734c
 80019f4:	08017354 	.word	0x08017354
 80019f8:	0801735c 	.word	0x0801735c
 80019fc:	08017364 	.word	0x08017364
 8001a00:	0801736c 	.word	0x0801736c
 8001a04:	08017374 	.word	0x08017374
 8001a08:	0801737c 	.word	0x0801737c
 8001a0c:	08017384 	.word	0x08017384
 8001a10:	0801738c 	.word	0x0801738c
 8001a14:	08017390 	.word	0x08017390
 8001a18:	08017394 	.word	0x08017394
				} else if (strcmp(name1, "dvalue") == 0) {
 8001a1c:	49c7      	ldr	r1, [pc, #796]	; (8001d3c <httpd_post_finished+0x6c0>)
 8001a1e:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001a22:	f7fe fbd5 	bl	80001d0 <strcmp>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10e      	bne.n	8001a4a <httpd_post_finished+0x3ce>
					T[id].dvalue = atoi(token1);
 8001a2c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001a30:	f013 fcb2 	bl	8015398 <atoi>
 8001a34:	4602      	mov	r2, r0
 8001a36:	49c2      	ldr	r1, [pc, #776]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001a38:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001a3c:	208c      	movs	r0, #140	; 0x8c
 8001a3e:	fb00 f303 	mul.w	r3, r0, r3
 8001a42:	440b      	add	r3, r1
 8001a44:	3310      	adds	r3, #16
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e0e4      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "ponr") == 0) {
 8001a4a:	49be      	ldr	r1, [pc, #760]	; (8001d44 <httpd_post_finished+0x6c8>)
 8001a4c:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001a50:	f7fe fbbe 	bl	80001d0 <strcmp>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10e      	bne.n	8001a78 <httpd_post_finished+0x3fc>
					T[id].ponr = atoi(token1);
 8001a5a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001a5e:	f013 fc9b 	bl	8015398 <atoi>
 8001a62:	4602      	mov	r2, r0
 8001a64:	49b6      	ldr	r1, [pc, #728]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001a66:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001a6a:	208c      	movs	r0, #140	; 0x8c
 8001a6c:	fb00 f303 	mul.w	r3, r0, r3
 8001a70:	440b      	add	r3, r1
 8001a72:	3314      	adds	r3, #20
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e0cd      	b.n	8001c14 <httpd_post_finished+0x598>
					// Timer
				} else if (strcmp(name1, "dow") == 0) {
 8001a78:	49b3      	ldr	r1, [pc, #716]	; (8001d48 <httpd_post_finished+0x6cc>)
 8001a7a:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001a7e:	f7fe fba7 	bl	80001d0 <strcmp>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10e      	bne.n	8001aa6 <httpd_post_finished+0x42a>
					T[id].dow = atoi(token1);
 8001a88:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001a8c:	f013 fc84 	bl	8015398 <atoi>
 8001a90:	4602      	mov	r2, r0
 8001a92:	49ab      	ldr	r1, [pc, #684]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001a94:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001a98:	208c      	movs	r0, #140	; 0x8c
 8001a9a:	fb00 f303 	mul.w	r3, r0, r3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3368      	adds	r3, #104	; 0x68
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e0b6      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "tim") == 0) {
 8001aa6:	49a9      	ldr	r1, [pc, #676]	; (8001d4c <httpd_post_finished+0x6d0>)
 8001aa8:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001aac:	f7fe fb90 	bl	80001d0 <strcmp>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10e      	bne.n	8001ad4 <httpd_post_finished+0x458>
					T[id].tim = atoi(token1);
 8001ab6:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001aba:	f013 fc6d 	bl	8015398 <atoi>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	499f      	ldr	r1, [pc, #636]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001ac2:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001ac6:	208c      	movs	r0, #140	; 0x8c
 8001ac8:	fb00 f303 	mul.w	r3, r0, r3
 8001acc:	440b      	add	r3, r1
 8001ace:	336c      	adds	r3, #108	; 0x6c
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e09f      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "hr") == 0) {
 8001ad4:	499e      	ldr	r1, [pc, #632]	; (8001d50 <httpd_post_finished+0x6d4>)
 8001ad6:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001ada:	f7fe fb79 	bl	80001d0 <strcmp>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10e      	bne.n	8001b02 <httpd_post_finished+0x486>
					T[id].hr = atoi(token1);
 8001ae4:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001ae8:	f013 fc56 	bl	8015398 <atoi>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4994      	ldr	r1, [pc, #592]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001af0:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001af4:	208c      	movs	r0, #140	; 0x8c
 8001af6:	fb00 f303 	mul.w	r3, r0, r3
 8001afa:	440b      	add	r3, r1
 8001afc:	3370      	adds	r3, #112	; 0x70
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e088      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "min") == 0) {
 8001b02:	4994      	ldr	r1, [pc, #592]	; (8001d54 <httpd_post_finished+0x6d8>)
 8001b04:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001b08:	f7fe fb62 	bl	80001d0 <strcmp>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10e      	bne.n	8001b30 <httpd_post_finished+0x4b4>
					T[id].min = atoi(token1);
 8001b12:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001b16:	f013 fc3f 	bl	8015398 <atoi>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4988      	ldr	r1, [pc, #544]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001b1e:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001b22:	208c      	movs	r0, #140	; 0x8c
 8001b24:	fb00 f303 	mul.w	r3, r0, r3
 8001b28:	440b      	add	r3, r1
 8001b2a:	3374      	adds	r3, #116	; 0x74
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	e071      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "sec") == 0) {
 8001b30:	4989      	ldr	r1, [pc, #548]	; (8001d58 <httpd_post_finished+0x6dc>)
 8001b32:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001b36:	f7fe fb4b 	bl	80001d0 <strcmp>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10e      	bne.n	8001b5e <httpd_post_finished+0x4e2>
					T[id].sec = atoi(token1);
 8001b40:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001b44:	f013 fc28 	bl	8015398 <atoi>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	497d      	ldr	r1, [pc, #500]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001b4c:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001b50:	208c      	movs	r0, #140	; 0x8c
 8001b52:	fb00 f303 	mul.w	r3, r0, r3
 8001b56:	440b      	add	r3, r1
 8001b58:	3378      	adds	r3, #120	; 0x78
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e05a      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "sr") == 0) {
 8001b5e:	497f      	ldr	r1, [pc, #508]	; (8001d5c <httpd_post_finished+0x6e0>)
 8001b60:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001b64:	f7fe fb34 	bl	80001d0 <strcmp>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10e      	bne.n	8001b8c <httpd_post_finished+0x510>
					T[id].sr = atoi(token1);
 8001b6e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001b72:	f013 fc11 	bl	8015398 <atoi>
 8001b76:	4602      	mov	r2, r0
 8001b78:	4971      	ldr	r1, [pc, #452]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001b7a:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001b7e:	208c      	movs	r0, #140	; 0x8c
 8001b80:	fb00 f303 	mul.w	r3, r0, r3
 8001b84:	440b      	add	r3, r1
 8001b86:	337c      	adds	r3, #124	; 0x7c
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e043      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "ss") == 0) {
 8001b8c:	4974      	ldr	r1, [pc, #464]	; (8001d60 <httpd_post_finished+0x6e4>)
 8001b8e:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001b92:	f7fe fb1d 	bl	80001d0 <strcmp>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d10e      	bne.n	8001bba <httpd_post_finished+0x53e>
					T[id].ss = atoi(token1);
 8001b9c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001ba0:	f013 fbfa 	bl	8015398 <atoi>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4966      	ldr	r1, [pc, #408]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001ba8:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001bac:	208c      	movs	r0, #140	; 0x8c
 8001bae:	fb00 f303 	mul.w	r3, r0, r3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3380      	adds	r3, #128	; 0x80
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e02c      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "lat") == 0) {
 8001bba:	496a      	ldr	r1, [pc, #424]	; (8001d64 <httpd_post_finished+0x6e8>)
 8001bbc:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001bc0:	f7fe fb06 	bl	80001d0 <strcmp>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10e      	bne.n	8001be8 <httpd_post_finished+0x56c>
					T[id].lat = atoi(token1);
 8001bca:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001bce:	f013 fbe3 	bl	8015398 <atoi>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	495a      	ldr	r1, [pc, #360]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001bd6:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001bda:	208c      	movs	r0, #140	; 0x8c
 8001bdc:	fb00 f303 	mul.w	r3, r0, r3
 8001be0:	440b      	add	r3, r1
 8001be2:	3384      	adds	r3, #132	; 0x84
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e015      	b.n	8001c14 <httpd_post_finished+0x598>
				} else if (strcmp(name1, "lon") == 0) {
 8001be8:	495f      	ldr	r1, [pc, #380]	; (8001d68 <httpd_post_finished+0x6ec>)
 8001bea:	f8d7 0484 	ldr.w	r0, [r7, #1156]	; 0x484
 8001bee:	f7fe faef 	bl	80001d0 <strcmp>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10d      	bne.n	8001c14 <httpd_post_finished+0x598>
					T[id].lon = atoi(token1);
 8001bf8:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8001bfc:	f013 fbcc 	bl	8015398 <atoi>
 8001c00:	4602      	mov	r2, r0
 8001c02:	494f      	ldr	r1, [pc, #316]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001c04:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001c08:	208c      	movs	r0, #140	; 0x8c
 8001c0a:	fb00 f303 	mul.w	r3, r0, r3
 8001c0e:	440b      	add	r3, r1
 8001c10:	3388      	adds	r3, #136	; 0x88
 8001c12:	601a      	str	r2, [r3, #0]
				}
			}
			y++;
 8001c14:	4b55      	ldr	r3, [pc, #340]	; (8001d6c <httpd_post_finished+0x6f0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	4a54      	ldr	r2, [pc, #336]	; (8001d6c <httpd_post_finished+0x6f0>)
 8001c1c:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8001c1e:	f107 0318 	add.w	r3, r7, #24
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f107 0218 	add.w	r2, r7, #24
 8001c28:	4951      	ldr	r1, [pc, #324]	; (8001d70 <httpd_post_finished+0x6f4>)
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f013 fdc4 	bl	80157b8 <strtok_r>
 8001c30:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
 8001c34:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f47f ad63 	bne.w	8001704 <httpd_post_finished+0x88>
		}
		// решение с пустой строкой
		sprintf(nametoken, "infofield_%d=", id); // Если поле пустое то, его заполняем "null".
 8001c3e:	f107 0320 	add.w	r3, r7, #32
 8001c42:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8001c46:	494b      	ldr	r1, [pc, #300]	; (8001d74 <httpd_post_finished+0x6f8>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f013 fd0d 	bl	8015668 <siprintf>
		if (strcmp(name0, nametoken) == 0) {
 8001c4e:	f107 0220 	add.w	r2, r7, #32
 8001c52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fab9 	bl	80001d0 <strcmp>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10d      	bne.n	8001c80 <httpd_post_finished+0x604>
			strcpy(T[id].info, "null");
 8001c64:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8001c68:	228c      	movs	r2, #140	; 0x8c
 8001c6a:	fb02 f303 	mul.w	r3, r2, r3
 8001c6e:	3340      	adds	r3, #64	; 0x40
 8001c70:	4a33      	ldr	r2, [pc, #204]	; (8001d40 <httpd_post_finished+0x6c4>)
 8001c72:	4413      	add	r3, r2
 8001c74:	3304      	adds	r3, #4
 8001c76:	4a40      	ldr	r2, [pc, #256]	; (8001d78 <httpd_post_finished+0x6fc>)
 8001c78:	6810      	ldr	r0, [r2, #0]
 8001c7a:	6018      	str	r0, [r3, #0]
 8001c7c:	7912      	ldrb	r2, [r2, #4]
 8001c7e:	711a      	strb	r2, [r3, #4]
			//printf("Yes \n");
		}
		memset(name0, '\0', sizeof(name0));
 8001c80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c84:	2232      	movs	r2, #50	; 0x32
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f013 fbe3 	bl	8015454 <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	2232      	movs	r2, #50	; 0x32
 8001c94:	2100      	movs	r1, #0
 8001c96:	4618      	mov	r0, r3
 8001c98:	f013 fbdc 	bl	8015454 <memset>
		z++;
 8001c9c:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	while ((token = strtok_r(rest, "&", &rest))) {
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f107 021c 	add.w	r2, r7, #28
 8001cb0:	4932      	ldr	r1, [pc, #200]	; (8001d7c <httpd_post_finished+0x700>)
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f013 fd80 	bl	80157b8 <strtok_r>
 8001cb8:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
 8001cbc:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f47f ad0f 	bne.w	80016e4 <httpd_post_finished+0x68>
	}

	memset(urlline, '\0', sizeof(urlline));
 8001cc6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f013 fbbf 	bl	8015454 <memset>
	memset(bufervar, '\0', sizeof(bufervar));
 8001cd6:	f642 1204 	movw	r2, #10500	; 0x2904
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4828      	ldr	r0, [pc, #160]	; (8001d80 <httpd_post_finished+0x704>)
 8001cde:	f013 fbb9 	bl	8015454 <memset>
	//memset(json, '\0', sizeof(json));
	//printf("----------- %s ------- \r\n", urls);
	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	//snprintf(response_uri, response_uri_len, "/tab.shtml");
	snprintf(response_uri, response_uri_len, urls);
 8001ce2:	1dbb      	adds	r3, r7, #6
 8001ce4:	8819      	ldrh	r1, [r3, #0]
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <httpd_post_finished+0x708>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	f013 fc87 	bl	8015600 <sniprintf>
	if (current_connection == connection) {
 8001cf2:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <httpd_post_finished+0x70c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f107 020c 	add.w	r2, r7, #12
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d114      	bne.n	8001d2a <httpd_post_finished+0x6ae>
		if (valid_connection == connection) {
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <httpd_post_finished+0x710>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f107 020c 	add.w	r2, r7, #12
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d107      	bne.n	8001d1e <httpd_post_finished+0x6a2>
			/* login succeeded */
			//snprintf(response_uri, response_uri_len, "/tab.shtml");
			snprintf(response_uri, response_uri_len, urls);
 8001d0e:	1dbb      	adds	r3, r7, #6
 8001d10:	8819      	ldrh	r1, [r3, #0]
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <httpd_post_finished+0x708>)
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	f013 fc71 	bl	8015600 <sniprintf>
		}
		current_connection = NULL;
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <httpd_post_finished+0x70c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8001d24:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <httpd_post_finished+0x710>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	f507 6791 	add.w	r7, r7, #1160	; 0x488
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	0801739c 	.word	0x0801739c
 8001d40:	20000b60 	.word	0x20000b60
 8001d44:	080173a4 	.word	0x080173a4
 8001d48:	080173ac 	.word	0x080173ac
 8001d4c:	080173b0 	.word	0x080173b0
 8001d50:	080173b4 	.word	0x080173b4
 8001d54:	080173b8 	.word	0x080173b8
 8001d58:	080173bc 	.word	0x080173bc
 8001d5c:	080173c0 	.word	0x080173c0
 8001d60:	080173c4 	.word	0x080173c4
 8001d64:	080173c8 	.word	0x080173c8
 8001d68:	080173cc 	.word	0x080173cc
 8001d6c:	2000541c 	.word	0x2000541c
 8001d70:	080173d0 	.word	0x080173d0
 8001d74:	080173d4 	.word	0x080173d4
 8001d78:	080173e4 	.word	0x080173e4
 8001d7c:	080173ec 	.word	0x080173ec
 8001d80:	20002b18 	.word	0x20002b18
 8001d84:	20000554 	.word	0x20000554
 8001d88:	2000054c 	.word	0x2000054c
 8001d8c:	20000550 	.word	0x20000550

08001d90 <http_server_init>:

//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	httpd_init();
 8001d94:	f008 fe34 	bl	800aa00 <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 6);
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <http_server_init+0x24>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2206      	movs	r2, #6
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <http_server_init+0x28>)
 8001da2:	f008 fe4d 	bl	800aa40 <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	//CGI_TAB[0] = FORM_CGI; // CGI структуру
	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); // 5. И теперь мы передадим структуру массива в CGI_handle!
 8001da6:	2304      	movs	r3, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4804      	ldr	r0, [pc, #16]	; (8001dbc <http_server_init+0x2c>)
 8001dac:	f008 fe8a 	bl	800aac4 <http_set_cgi_handlers>
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200004a4 	.word	0x200004a4
 8001db8:	08000599 	.word	0x08000599
 8001dbc:	0801a570 	.word	0x0801a570

08001dc0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dc8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dcc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d013      	beq.n	8001e00 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001dd8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001ddc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001de0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00b      	beq.n	8001e00 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001de8:	e000      	b.n	8001dec <ITM_SendChar+0x2c>
    {
      __NOP();
 8001dea:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001dec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f9      	beq.n	8001dea <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001df6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e00:	687b      	ldr	r3, [r7, #4]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <_write>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	2332      	movs	r3, #50	; 0x32
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	480c      	ldr	r0, [pc, #48]	; (8001e58 <_write+0x48>)
 8001e26:	f004 ff2e 	bl	8006c86 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e009      	b.n	8001e44 <_write+0x34>
		ITM_SendChar(*ptr++);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ffc1 	bl	8001dc0 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf1      	blt.n	8001e30 <_write+0x20>
	}
	return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200055b8 	.word	0x200055b8

08001e5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e60:	f000 fc80 	bl	8002764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e64:	f000 f816 	bl	8001e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e68:	f000 f8f0 	bl	800204c <MX_GPIO_Init>
  MX_DMA_Init();
 8001e6c:	f000 f8c6 	bl	8001ffc <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001e70:	f000 f87a 	bl	8001f68 <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 8001e74:	f000 f898 	bl	8001fa8 <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8001e78:	f006 f980 	bl	800817c <MX_LWIP_Init>
  MX_FATFS_Init();
 8001e7c:	f005 ff40 	bl	8007d00 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 8001e80:	f7ff ff86 	bl	8001d90 <http_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      ethernetif_input(&gnetif);/* Read a received packet from the Ethernet buffers and send it
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <main+0x34>)
 8001e86:	f006 fd51 	bl	800892c <ethernetif_input>
       to the lwIP for handling */
      sys_check_timeouts();/* Handle timeouts */
 8001e8a:	f010 fdc9 	bl	8012a20 <sys_check_timeouts>
      ethernetif_input(&gnetif);/* Read a received packet from the Ethernet buffers and send it
 8001e8e:	e7f9      	b.n	8001e84 <main+0x28>
 8001e90:	200054a0 	.word	0x200054a0

08001e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b094      	sub	sp, #80	; 0x50
 8001e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9a:	f107 0320 	add.w	r3, r7, #32
 8001e9e:	2230      	movs	r2, #48	; 0x30
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f013 fad6 	bl	8015454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <SystemClock_Config+0xcc>)
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	4a27      	ldr	r2, [pc, #156]	; (8001f60 <SystemClock_Config+0xcc>)
 8001ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <SystemClock_Config+0xcc>)
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <SystemClock_Config+0xd0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a21      	ldr	r2, [pc, #132]	; (8001f64 <SystemClock_Config+0xd0>)
 8001ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <SystemClock_Config+0xd0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ef4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001efa:	2302      	movs	r3, #2
 8001efc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001efe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f04:	2304      	movs	r3, #4
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f08:	23a8      	movs	r3, #168	; 0xa8
 8001f0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f10:	2307      	movs	r3, #7
 8001f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f14:	f107 0320 	add.w	r3, r7, #32
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 fbe5 	bl	80046e8 <HAL_RCC_OscConfig>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f24:	f000 f910 	bl	8002148 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f28:	230f      	movs	r3, #15
 8001f2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	2105      	movs	r1, #5
 8001f46:	4618      	mov	r0, r3
 8001f48:	f002 fe46 	bl	8004bd8 <HAL_RCC_ClockConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f52:	f000 f8f9 	bl	8002148 <Error_Handler>
  }
}
 8001f56:	bf00      	nop
 8001f58:	3750      	adds	r7, #80	; 0x50
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40007000 	.word	0x40007000

08001f68 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_SDIO_SD_Init+0x38>)
 8001f6e:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <MX_SDIO_SD_Init+0x3c>)
 8001f70:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_SDIO_SD_Init+0x38>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_SDIO_SD_Init+0x38>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_SDIO_SD_Init+0x38>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_SDIO_SD_Init+0x38>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <MX_SDIO_SD_Init+0x38>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 5;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <MX_SDIO_SD_Init+0x38>)
 8001f92:	2205      	movs	r2, #5
 8001f94:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	20005534 	.word	0x20005534
 8001fa4:	40012c00 	.word	0x40012c00

08001fa8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_USART6_UART_Init+0x4c>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <MX_USART6_UART_Init+0x50>)
 8001fb0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <MX_USART6_UART_Init+0x4c>)
 8001fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_USART6_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_USART6_UART_Init+0x4c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <MX_USART6_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_USART6_UART_Init+0x4c>)
 8001fce:	220c      	movs	r2, #12
 8001fd0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <MX_USART6_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_USART6_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <MX_USART6_UART_Init+0x4c>)
 8001fe0:	f004 fe04 	bl	8006bec <HAL_UART_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001fea:	f000 f8ad 	bl	8002148 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200055b8 	.word	0x200055b8
 8001ff8:	40011400 	.word	0x40011400

08001ffc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_DMA_Init+0x4c>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <MX_DMA_Init+0x4c>)
 800200c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <MX_DMA_Init+0x4c>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	203b      	movs	r0, #59	; 0x3b
 8002024:	f000 fcbc 	bl	80029a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002028:	203b      	movs	r0, #59	; 0x3b
 800202a:	f000 fcd5 	bl	80029d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	2045      	movs	r0, #69	; 0x45
 8002034:	f000 fcb4 	bl	80029a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002038:	2045      	movs	r0, #69	; 0x45
 800203a:	f000 fccd 	bl	80029d8 <HAL_NVIC_EnableIRQ>

}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800

0800204c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <MX_GPIO_Init+0xd0>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a2c      	ldr	r2, [pc, #176]	; (800211c <MX_GPIO_Init+0xd0>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <MX_GPIO_Init+0xd0>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <MX_GPIO_Init+0xd0>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a25      	ldr	r2, [pc, #148]	; (800211c <MX_GPIO_Init+0xd0>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b23      	ldr	r3, [pc, #140]	; (800211c <MX_GPIO_Init+0xd0>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b1f      	ldr	r3, [pc, #124]	; (800211c <MX_GPIO_Init+0xd0>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a1e      	ldr	r2, [pc, #120]	; (800211c <MX_GPIO_Init+0xd0>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <MX_GPIO_Init+0xd0>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4b18      	ldr	r3, [pc, #96]	; (800211c <MX_GPIO_Init+0xd0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a17      	ldr	r2, [pc, #92]	; (800211c <MX_GPIO_Init+0xd0>)
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <MX_GPIO_Init+0xd0>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4b11      	ldr	r3, [pc, #68]	; (800211c <MX_GPIO_Init+0xd0>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a10      	ldr	r2, [pc, #64]	; (800211c <MX_GPIO_Init+0xd0>)
 80020dc:	f043 0308 	orr.w	r3, r3, #8
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b0e      	ldr	r3, [pc, #56]	; (800211c <MX_GPIO_Init+0xd0>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2101      	movs	r1, #1
 80020f2:	480b      	ldr	r0, [pc, #44]	; (8002120 <MX_GPIO_Init+0xd4>)
 80020f4:	f002 fade 	bl	80046b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020f8:	2301      	movs	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fc:	2301      	movs	r3, #1
 80020fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002108:	f107 0314 	add.w	r3, r7, #20
 800210c:	4619      	mov	r1, r3
 800210e:	4804      	ldr	r0, [pc, #16]	; (8002120 <MX_GPIO_Init+0xd4>)
 8002110:	f002 f934 	bl	800437c <HAL_GPIO_Init>

}
 8002114:	bf00      	nop
 8002116:	3728      	adds	r7, #40	; 0x28
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40023800 	.word	0x40023800
 8002120:	40020c00 	.word	0x40020c00

08002124 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002136:	f000 fb37 	bl	80027a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40002000 	.word	0x40002000

08002148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214c:	b672      	cpsid	i
}
 800214e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002150:	e7fe      	b.n	8002150 <Error_Handler+0x8>
	...

08002154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_MspInit+0x4c>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HAL_MspInit+0x4c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	603b      	str	r3, [r7, #0]
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_MspInit+0x4c>)
 8002180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002184:	6413      	str	r3, [r2, #64]	; 0x40
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_MspInit+0x4c>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a70      	ldr	r2, [pc, #448]	; (8002384 <HAL_SD_MspInit+0x1e0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	f040 80da 	bne.w	800237c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	4b6e      	ldr	r3, [pc, #440]	; (8002388 <HAL_SD_MspInit+0x1e4>)
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	4a6d      	ldr	r2, [pc, #436]	; (8002388 <HAL_SD_MspInit+0x1e4>)
 80021d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021d6:	6453      	str	r3, [r2, #68]	; 0x44
 80021d8:	4b6b      	ldr	r3, [pc, #428]	; (8002388 <HAL_SD_MspInit+0x1e4>)
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	4b67      	ldr	r3, [pc, #412]	; (8002388 <HAL_SD_MspInit+0x1e4>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a66      	ldr	r2, [pc, #408]	; (8002388 <HAL_SD_MspInit+0x1e4>)
 80021ee:	f043 0304 	orr.w	r3, r3, #4
 80021f2:	6313      	str	r3, [r2, #48]	; 0x30
 80021f4:	4b64      	ldr	r3, [pc, #400]	; (8002388 <HAL_SD_MspInit+0x1e4>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002200:	2300      	movs	r3, #0
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	4b60      	ldr	r3, [pc, #384]	; (8002388 <HAL_SD_MspInit+0x1e4>)
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	4a5f      	ldr	r2, [pc, #380]	; (8002388 <HAL_SD_MspInit+0x1e4>)
 800220a:	f043 0308 	orr.w	r3, r3, #8
 800220e:	6313      	str	r3, [r2, #48]	; 0x30
 8002210:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_SD_MspInit+0x1e4>)
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800221c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002226:	2301      	movs	r3, #1
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800222e:	230c      	movs	r3, #12
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	4854      	ldr	r0, [pc, #336]	; (800238c <HAL_SD_MspInit+0x1e8>)
 800223a:	f002 f89f 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002244:	2302      	movs	r3, #2
 8002246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002250:	230c      	movs	r3, #12
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	4619      	mov	r1, r3
 800225a:	484c      	ldr	r0, [pc, #304]	; (800238c <HAL_SD_MspInit+0x1e8>)
 800225c:	f002 f88e 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002260:	2304      	movs	r3, #4
 8002262:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002268:	2301      	movs	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002270:	230c      	movs	r3, #12
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	4845      	ldr	r0, [pc, #276]	; (8002390 <HAL_SD_MspInit+0x1ec>)
 800227c:	f002 f87e 	bl	800437c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002280:	4b44      	ldr	r3, [pc, #272]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 8002282:	4a45      	ldr	r2, [pc, #276]	; (8002398 <HAL_SD_MspInit+0x1f4>)
 8002284:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002286:	4b43      	ldr	r3, [pc, #268]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 8002288:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800228c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002294:	4b3f      	ldr	r3, [pc, #252]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 8002296:	2200      	movs	r2, #0
 8002298:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800229a:	4b3e      	ldr	r3, [pc, #248]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 800229c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a0:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022a2:	4b3c      	ldr	r3, [pc, #240]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022a8:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022aa:	4b3a      	ldr	r3, [pc, #232]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022b0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80022b2:	4b38      	ldr	r3, [pc, #224]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022b4:	2220      	movs	r2, #32
 80022b6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022b8:	4b36      	ldr	r3, [pc, #216]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022be:	4b35      	ldr	r3, [pc, #212]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022c0:	2204      	movs	r2, #4
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80022c4:	4b33      	ldr	r3, [pc, #204]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022c6:	2203      	movs	r2, #3
 80022c8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80022ca:	4b32      	ldr	r3, [pc, #200]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80022d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80022d2:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80022da:	482e      	ldr	r0, [pc, #184]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022dc:	f000 fb8a 	bl	80029f4 <HAL_DMA_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80022e6:	f7ff ff2f 	bl	8002148 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a29      	ldr	r2, [pc, #164]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40
 80022f0:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_SD_MspInit+0x1f0>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80022f6:	4b29      	ldr	r3, [pc, #164]	; (800239c <HAL_SD_MspInit+0x1f8>)
 80022f8:	4a29      	ldr	r2, [pc, #164]	; (80023a0 <HAL_SD_MspInit+0x1fc>)
 80022fa:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80022fc:	4b27      	ldr	r3, [pc, #156]	; (800239c <HAL_SD_MspInit+0x1f8>)
 80022fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002302:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002304:	4b25      	ldr	r3, [pc, #148]	; (800239c <HAL_SD_MspInit+0x1f8>)
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800230a:	4b24      	ldr	r3, [pc, #144]	; (800239c <HAL_SD_MspInit+0x1f8>)
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002310:	4b22      	ldr	r3, [pc, #136]	; (800239c <HAL_SD_MspInit+0x1f8>)
 8002312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002316:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002318:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_SD_MspInit+0x1f8>)
 800231a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800231e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002320:	4b1e      	ldr	r3, [pc, #120]	; (800239c <HAL_SD_MspInit+0x1f8>)
 8002322:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002326:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002328:	4b1c      	ldr	r3, [pc, #112]	; (800239c <HAL_SD_MspInit+0x1f8>)
 800232a:	2220      	movs	r2, #32
 800232c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800232e:	4b1b      	ldr	r3, [pc, #108]	; (800239c <HAL_SD_MspInit+0x1f8>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_SD_MspInit+0x1f8>)
 8002336:	2204      	movs	r2, #4
 8002338:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800233a:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_SD_MspInit+0x1f8>)
 800233c:	2203      	movs	r2, #3
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_SD_MspInit+0x1f8>)
 8002342:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002346:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <HAL_SD_MspInit+0x1f8>)
 800234a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002350:	4812      	ldr	r0, [pc, #72]	; (800239c <HAL_SD_MspInit+0x1f8>)
 8002352:	f000 fb4f 	bl	80029f4 <HAL_DMA_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 800235c:	f7ff fef4 	bl	8002148 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a0e      	ldr	r2, [pc, #56]	; (800239c <HAL_SD_MspInit+0x1f8>)
 8002364:	63da      	str	r2, [r3, #60]	; 0x3c
 8002366:	4a0d      	ldr	r2, [pc, #52]	; (800239c <HAL_SD_MspInit+0x1f8>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	2031      	movs	r0, #49	; 0x31
 8002372:	f000 fb15 	bl	80029a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002376:	2031      	movs	r0, #49	; 0x31
 8002378:	f000 fb2e 	bl	80029d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800237c:	bf00      	nop
 800237e:	3728      	adds	r7, #40	; 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40023800 	.word	0x40023800
 800238c:	40020800 	.word	0x40020800
 8002390:	40020c00 	.word	0x40020c00
 8002394:	20005440 	.word	0x20005440
 8002398:	40026458 	.word	0x40026458
 800239c:	200054d4 	.word	0x200054d4
 80023a0:	400264a0 	.word	0x400264a0

080023a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a19      	ldr	r2, [pc, #100]	; (8002428 <HAL_UART_MspInit+0x84>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d12b      	bne.n	800241e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_UART_MspInit+0x88>)
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <HAL_UART_MspInit+0x88>)
 80023d0:	f043 0320 	orr.w	r3, r3, #32
 80023d4:	6453      	str	r3, [r2, #68]	; 0x44
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_UART_MspInit+0x88>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	f003 0320 	and.w	r3, r3, #32
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_UART_MspInit+0x88>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a10      	ldr	r2, [pc, #64]	; (800242c <HAL_UART_MspInit+0x88>)
 80023ec:	f043 0304 	orr.w	r3, r3, #4
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_UART_MspInit+0x88>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023fe:	23c0      	movs	r3, #192	; 0xc0
 8002400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800240e:	2308      	movs	r3, #8
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4805      	ldr	r0, [pc, #20]	; (8002430 <HAL_UART_MspInit+0x8c>)
 800241a:	f001 ffaf 	bl	800437c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40011400 	.word	0x40011400
 800242c:	40023800 	.word	0x40023800
 8002430:	40020800 	.word	0x40020800

08002434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8002444:	2200      	movs	r2, #0
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	202d      	movs	r0, #45	; 0x2d
 800244a:	f000 faa9 	bl	80029a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800244e:	202d      	movs	r0, #45	; 0x2d
 8002450:	f000 fac2 	bl	80029d8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <HAL_InitTick+0xa4>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_InitTick+0xa4>)
 800245e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
 8002464:	4b1c      	ldr	r3, [pc, #112]	; (80024d8 <HAL_InitTick+0xa4>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002470:	f107 0210 	add.w	r2, r7, #16
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f002 fda8 	bl	8004fd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002480:	f002 fd7e 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8002484:	4603      	mov	r3, r0
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	4a13      	ldr	r2, [pc, #76]	; (80024dc <HAL_InitTick+0xa8>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0c9b      	lsrs	r3, r3, #18
 8002494:	3b01      	subs	r3, #1
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_InitTick+0xac>)
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <HAL_InitTick+0xb0>)
 800249c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_InitTick+0xac>)
 80024a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024a4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80024a6:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <HAL_InitTick+0xac>)
 80024a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024aa:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <HAL_InitTick+0xac>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_InitTick+0xac>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80024b8:	4809      	ldr	r0, [pc, #36]	; (80024e0 <HAL_InitTick+0xac>)
 80024ba:	f004 f8ea 	bl	8006692 <HAL_TIM_Base_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80024c4:	4806      	ldr	r0, [pc, #24]	; (80024e0 <HAL_InitTick+0xac>)
 80024c6:	f004 f93d 	bl	8006744 <HAL_TIM_Base_Start_IT>
 80024ca:	4603      	mov	r3, r0
 80024cc:	e000      	b.n	80024d0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3730      	adds	r7, #48	; 0x30
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	200055fc 	.word	0x200055fc
 80024e4:	40002000 	.word	0x40002000

080024e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024ec:	e7fe      	b.n	80024ec <NMI_Handler+0x4>

080024ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <HardFault_Handler+0x4>

080024f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <MemManage_Handler+0x4>

080024fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fa:	b480      	push	{r7}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024fe:	e7fe      	b.n	80024fe <BusFault_Handler+0x4>

08002500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002504:	e7fe      	b.n	8002504 <UsageFault_Handler+0x4>

08002506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002534:	bf00      	nop
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002544:	4802      	ldr	r0, [pc, #8]	; (8002550 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002546:	f004 f96d 	bl	8006824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200055fc 	.word	0x200055fc

08002554 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <SDIO_IRQHandler+0x10>)
 800255a:	f002 ffe1 	bl	8005520 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20005534 	.word	0x20005534

08002568 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <DMA2_Stream3_IRQHandler+0x10>)
 800256e:	f000 fb69 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20005440 	.word	0x20005440

0800257c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <DMA2_Stream6_IRQHandler+0x10>)
 8002582:	f000 fb5f 	bl	8002c44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	200054d4 	.word	0x200054d4

08002590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
	return 1;
 8002594:	2301      	movs	r3, #1
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <_kill>:

int _kill(int pid, int sig)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <_kill+0x20>)
 80025ac:	2216      	movs	r2, #22
 80025ae:	601a      	str	r2, [r3, #0]
	return -1;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	2000e020 	.word	0x2000e020

080025c4 <_exit>:

void _exit (int status)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ffe5 	bl	80025a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025d6:	e7fe      	b.n	80025d6 <_exit+0x12>

080025d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e00a      	b.n	8002600 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025ea:	f3af 8000 	nop.w
 80025ee:	4601      	mov	r1, r0
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	60ba      	str	r2, [r7, #8]
 80025f6:	b2ca      	uxtb	r2, r1
 80025f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3301      	adds	r3, #1
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	dbf0      	blt.n	80025ea <_read+0x12>
	}

return len;
 8002608:	687b      	ldr	r3, [r7, #4]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
	return -1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800261e:	4618      	mov	r0, r3
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800263a:	605a      	str	r2, [r3, #4]
	return 0;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <_isatty>:

int _isatty(int file)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
	return 1;
 8002652:	2301      	movs	r3, #1
}
 8002654:	4618      	mov	r0, r3
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
	return 0;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <_sbrk+0x5c>)
 8002686:	4b15      	ldr	r3, [pc, #84]	; (80026dc <_sbrk+0x60>)
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002690:	4b13      	ldr	r3, [pc, #76]	; (80026e0 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <_sbrk+0x64>)
 800269a:	4a12      	ldr	r2, [pc, #72]	; (80026e4 <_sbrk+0x68>)
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800269e:	4b10      	ldr	r3, [pc, #64]	; (80026e0 <_sbrk+0x64>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4413      	add	r3, r2
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d205      	bcs.n	80026b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <_sbrk+0x6c>)
 80026ae:	220c      	movs	r2, #12
 80026b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026b6:	e009      	b.n	80026cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b8:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026be:	4b08      	ldr	r3, [pc, #32]	; (80026e0 <_sbrk+0x64>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <_sbrk+0x64>)
 80026c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	20020000 	.word	0x20020000
 80026dc:	00000400 	.word	0x00000400
 80026e0:	20000574 	.word	0x20000574
 80026e4:	2000e030 	.word	0x2000e030
 80026e8:	2000e020 	.word	0x2000e020

080026ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f0:	4b06      	ldr	r3, [pc, #24]	; (800270c <SystemInit+0x20>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	4a05      	ldr	r2, [pc, #20]	; (800270c <SystemInit+0x20>)
 80026f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	e000ed00 	.word	0xe000ed00

08002710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002748 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002714:	480d      	ldr	r0, [pc, #52]	; (800274c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002716:	490e      	ldr	r1, [pc, #56]	; (8002750 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002718:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800271a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800271c:	e002      	b.n	8002724 <LoopCopyDataInit>

0800271e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800271e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002722:	3304      	adds	r3, #4

08002724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002728:	d3f9      	bcc.n	800271e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272a:	4a0b      	ldr	r2, [pc, #44]	; (8002758 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800272c:	4c0b      	ldr	r4, [pc, #44]	; (800275c <LoopFillZerobss+0x26>)
  movs r3, #0
 800272e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002730:	e001      	b.n	8002736 <LoopFillZerobss>

08002732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002734:	3204      	adds	r2, #4

08002736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002738:	d3fb      	bcc.n	8002732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800273a:	f7ff ffd7 	bl	80026ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800273e:	f012 fe2f 	bl	80153a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002742:	f7ff fb8b 	bl	8001e5c <main>
  bx  lr    
 8002746:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002748:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800274c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002750:	20000520 	.word	0x20000520
  ldr r2, =_sidata
 8002754:	080218a0 	.word	0x080218a0
  ldr r2, =_sbss
 8002758:	20000520 	.word	0x20000520
  ldr r4, =_ebss
 800275c:	2000e030 	.word	0x2000e030

08002760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC_IRQHandler>
	...

08002764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <HAL_Init+0x40>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <HAL_Init+0x40>)
 800276e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002772:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_Init+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <HAL_Init+0x40>)
 800277a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <HAL_Init+0x40>)
 8002786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278c:	2003      	movs	r0, #3
 800278e:	f000 f8fc 	bl	800298a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002792:	200f      	movs	r0, #15
 8002794:	f7ff fe4e 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002798:	f7ff fcdc 	bl	8002154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023c00 	.word	0x40023c00

080027a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_IncTick+0x20>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x24>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_IncTick+0x24>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	200004b0 	.word	0x200004b0
 80027cc:	20005644 	.word	0x20005644

080027d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return uwTick;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_GetTick+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20005644 	.word	0x20005644

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff ffee 	bl	80027d0 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002800:	d005      	beq.n	800280e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_Delay+0x44>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800280e:	bf00      	nop
 8002810:	f7ff ffde 	bl	80027d0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d8f7      	bhi.n	8002810 <HAL_Delay+0x28>
  {
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200004b0 	.word	0x200004b0

08002830 <__NVIC_SetPriorityGrouping>:
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800284c:	4013      	ands	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800285c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	; (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_GetPriorityGrouping>:
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <__NVIC_GetPriorityGrouping+0x18>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0307 	and.w	r3, r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_EnableIRQ>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	db0b      	blt.n	80028be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	4907      	ldr	r1, [pc, #28]	; (80028cc <__NVIC_EnableIRQ+0x38>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2001      	movs	r0, #1
 80028b6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000e100 	.word	0xe000e100

080028d0 <__NVIC_SetPriority>:
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	6039      	str	r1, [r7, #0]
 80028da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	db0a      	blt.n	80028fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	490c      	ldr	r1, [pc, #48]	; (800291c <__NVIC_SetPriority+0x4c>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	0112      	lsls	r2, r2, #4
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	440b      	add	r3, r1
 80028f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80028f8:	e00a      	b.n	8002910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4908      	ldr	r1, [pc, #32]	; (8002920 <__NVIC_SetPriority+0x50>)
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	3b04      	subs	r3, #4
 8002908:	0112      	lsls	r2, r2, #4
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	440b      	add	r3, r1
 800290e:	761a      	strb	r2, [r3, #24]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000e100 	.word	0xe000e100
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <NVIC_EncodePriority>:
{
 8002924:	b480      	push	{r7}
 8002926:	b089      	sub	sp, #36	; 0x24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f1c3 0307 	rsb	r3, r3, #7
 800293e:	2b04      	cmp	r3, #4
 8002940:	bf28      	it	cs
 8002942:	2304      	movcs	r3, #4
 8002944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3304      	adds	r3, #4
 800294a:	2b06      	cmp	r3, #6
 800294c:	d902      	bls.n	8002954 <NVIC_EncodePriority+0x30>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3b03      	subs	r3, #3
 8002952:	e000      	b.n	8002956 <NVIC_EncodePriority+0x32>
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	401a      	ands	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800296c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	43d9      	mvns	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	4313      	orrs	r3, r2
}
 800297e:	4618      	mov	r0, r3
 8002980:	3724      	adds	r7, #36	; 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b082      	sub	sp, #8
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff4c 	bl	8002830 <__NVIC_SetPriorityGrouping>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029b2:	f7ff ff61 	bl	8002878 <__NVIC_GetPriorityGrouping>
 80029b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	6978      	ldr	r0, [r7, #20]
 80029be:	f7ff ffb1 	bl	8002924 <NVIC_EncodePriority>
 80029c2:	4602      	mov	r2, r0
 80029c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ff80 	bl	80028d0 <__NVIC_SetPriority>
}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff54 	bl	8002894 <__NVIC_EnableIRQ>
}
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a00:	f7ff fee6 	bl	80027d0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e099      	b.n	8002b44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a30:	e00f      	b.n	8002a52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a32:	f7ff fecd 	bl	80027d0 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d908      	bls.n	8002a52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e078      	b.n	8002b44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1e8      	bne.n	8002a32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	4b38      	ldr	r3, [pc, #224]	; (8002b4c <HAL_DMA_Init+0x158>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d107      	bne.n	8002abc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f023 0307 	bic.w	r3, r3, #7
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d117      	bne.n	8002b16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00e      	beq.n	8002b16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fa9d 	bl	8003038 <DMA_CheckFifoParam>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2240      	movs	r2, #64	; 0x40
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b12:	2301      	movs	r3, #1
 8002b14:	e016      	b.n	8002b44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fa54 	bl	8002fcc <DMA_CalcBaseAndBitshift>
 8002b24:	4603      	mov	r3, r0
 8002b26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	223f      	movs	r2, #63	; 0x3f
 8002b2e:	409a      	lsls	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	f010803f 	.word	0xf010803f

08002b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_DMA_Start_IT+0x26>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e040      	b.n	8002bf8 <HAL_DMA_Start_IT+0xa8>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d12f      	bne.n	8002bea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f9e6 	bl	8002f70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	223f      	movs	r2, #63	; 0x3f
 8002baa:	409a      	lsls	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0216 	orr.w	r2, r2, #22
 8002bbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d007      	beq.n	8002bd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0208 	orr.w	r2, r2, #8
 8002bd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e005      	b.n	8002bf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d004      	beq.n	8002c1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00c      	b.n	8002c38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2205      	movs	r2, #5
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0201 	bic.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c50:	4b92      	ldr	r3, [pc, #584]	; (8002e9c <HAL_DMA_IRQHandler+0x258>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a92      	ldr	r2, [pc, #584]	; (8002ea0 <HAL_DMA_IRQHandler+0x25c>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0a9b      	lsrs	r3, r3, #10
 8002c5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	2208      	movs	r2, #8
 8002c70:	409a      	lsls	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01a      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0204 	bic.w	r2, r2, #4
 8002c96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d012      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	f043 0202 	orr.w	r2, r3, #2
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cea:	2204      	movs	r2, #4
 8002cec:	409a      	lsls	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d012      	beq.n	8002d1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00b      	beq.n	8002d1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	2204      	movs	r2, #4
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d14:	f043 0204 	orr.w	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	2210      	movs	r2, #16
 8002d22:	409a      	lsls	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d043      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d03c      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	2210      	movs	r2, #16
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d018      	beq.n	8002d86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d108      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d024      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
 8002d72:	e01f      	b.n	8002db4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d01b      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
 8002d84:	e016      	b.n	8002db4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0208 	bic.w	r2, r2, #8
 8002da2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db8:	2220      	movs	r2, #32
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 808e 	beq.w	8002ee2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8086 	beq.w	8002ee2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	2220      	movs	r2, #32
 8002ddc:	409a      	lsls	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b05      	cmp	r3, #5
 8002dec:	d136      	bne.n	8002e5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0216 	bic.w	r2, r2, #22
 8002dfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695a      	ldr	r2, [r3, #20]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <HAL_DMA_IRQHandler+0x1da>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0208 	bic.w	r2, r2, #8
 8002e2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	223f      	movs	r2, #63	; 0x3f
 8002e34:	409a      	lsls	r2, r3
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d07d      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
        }
        return;
 8002e5a:	e078      	b.n	8002f4e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01c      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d108      	bne.n	8002e8a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d030      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
 8002e88:	e02b      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d027      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
 8002e9a:	e022      	b.n	8002ee2 <HAL_DMA_IRQHandler+0x29e>
 8002e9c:	200004a8 	.word	0x200004a8
 8002ea0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10f      	bne.n	8002ed2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0210 	bic.w	r2, r2, #16
 8002ec0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d032      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d022      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2205      	movs	r2, #5
 8002efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3301      	adds	r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d307      	bcc.n	8002f2a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f2      	bne.n	8002f0e <HAL_DMA_IRQHandler+0x2ca>
 8002f28:	e000      	b.n	8002f2c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f2a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e000      	b.n	8002f50 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f4e:	bf00      	nop
    }
  }
}
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop

08002f58 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	d108      	bne.n	8002fb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fae:	e007      	b.n	8002fc0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	60da      	str	r2, [r3, #12]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	3b10      	subs	r3, #16
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <DMA_CalcBaseAndBitshift+0x64>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fe6:	4a13      	ldr	r2, [pc, #76]	; (8003034 <DMA_CalcBaseAndBitshift+0x68>)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4413      	add	r3, r2
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b03      	cmp	r3, #3
 8002ff8:	d909      	bls.n	800300e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003002:	f023 0303 	bic.w	r3, r3, #3
 8003006:	1d1a      	adds	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	659a      	str	r2, [r3, #88]	; 0x58
 800300c:	e007      	b.n	800301e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003016:	f023 0303 	bic.w	r3, r3, #3
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	aaaaaaab 	.word	0xaaaaaaab
 8003034:	0801a5a8 	.word	0x0801a5a8

08003038 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d11f      	bne.n	8003092 <DMA_CheckFifoParam+0x5a>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d856      	bhi.n	8003106 <DMA_CheckFifoParam+0xce>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <DMA_CheckFifoParam+0x28>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003071 	.word	0x08003071
 8003064:	08003083 	.word	0x08003083
 8003068:	08003071 	.word	0x08003071
 800306c:	08003107 	.word	0x08003107
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d046      	beq.n	800310a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003080:	e043      	b.n	800310a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003086:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800308a:	d140      	bne.n	800310e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003090:	e03d      	b.n	800310e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309a:	d121      	bne.n	80030e0 <DMA_CheckFifoParam+0xa8>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b03      	cmp	r3, #3
 80030a0:	d837      	bhi.n	8003112 <DMA_CheckFifoParam+0xda>
 80030a2:	a201      	add	r2, pc, #4	; (adr r2, 80030a8 <DMA_CheckFifoParam+0x70>)
 80030a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a8:	080030b9 	.word	0x080030b9
 80030ac:	080030bf 	.word	0x080030bf
 80030b0:	080030b9 	.word	0x080030b9
 80030b4:	080030d1 	.word	0x080030d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e030      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d025      	beq.n	8003116 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ce:	e022      	b.n	8003116 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030d8:	d11f      	bne.n	800311a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030de:	e01c      	b.n	800311a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d903      	bls.n	80030ee <DMA_CheckFifoParam+0xb6>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d003      	beq.n	80030f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030ec:	e018      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
      break;
 80030f2:	e015      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00e      	beq.n	800311e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e00b      	b.n	800311e <DMA_CheckFifoParam+0xe6>
      break;
 8003106:	bf00      	nop
 8003108:	e00a      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;
 800310a:	bf00      	nop
 800310c:	e008      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;
 800310e:	bf00      	nop
 8003110:	e006      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e004      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e002      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;   
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <DMA_CheckFifoParam+0xe8>
      break;
 800311e:	bf00      	nop
    }
  } 
  
  return status; 
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop

08003130 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8003140:	4baa      	ldr	r3, [pc, #680]	; (80033ec <HAL_ETH_Init+0x2bc>)
 8003142:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003148:	2300      	movs	r3, #0
 800314a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e183      	b.n	800345e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f005 f938 	bl	80083e0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	4b9e      	ldr	r3, [pc, #632]	; (80033f0 <HAL_ETH_Init+0x2c0>)
 8003176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003178:	4a9d      	ldr	r2, [pc, #628]	; (80033f0 <HAL_ETH_Init+0x2c0>)
 800317a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800317e:	6453      	str	r3, [r2, #68]	; 0x44
 8003180:	4b9b      	ldr	r3, [pc, #620]	; (80033f0 <HAL_ETH_Init+0x2c0>)
 8003182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800318c:	4b99      	ldr	r3, [pc, #612]	; (80033f4 <HAL_ETH_Init+0x2c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	4a98      	ldr	r2, [pc, #608]	; (80033f4 <HAL_ETH_Init+0x2c4>)
 8003192:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003196:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003198:	4b96      	ldr	r3, [pc, #600]	; (80033f4 <HAL_ETH_Init+0x2c4>)
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	4994      	ldr	r1, [pc, #592]	; (80033f4 <HAL_ETH_Init+0x2c4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031bc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80031be:	f7ff fb07 	bl	80027d0 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80031c4:	e011      	b.n	80031ea <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80031c6:	f7ff fb03 	bl	80027d0 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031d4:	d909      	bls.n	80031ea <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2203      	movs	r2, #3
 80031da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e139      	b.n	800345e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e4      	bne.n	80031c6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f023 031c 	bic.w	r3, r3, #28
 800320a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800320c:	f001 feac 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8003210:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	4a78      	ldr	r2, [pc, #480]	; (80033f8 <HAL_ETH_Init+0x2c8>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d908      	bls.n	800322c <HAL_ETH_Init+0xfc>
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	4a77      	ldr	r2, [pc, #476]	; (80033fc <HAL_ETH_Init+0x2cc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d804      	bhi.n	800322c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f043 0308 	orr.w	r3, r3, #8
 8003228:	61fb      	str	r3, [r7, #28]
 800322a:	e027      	b.n	800327c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4a73      	ldr	r2, [pc, #460]	; (80033fc <HAL_ETH_Init+0x2cc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d908      	bls.n	8003246 <HAL_ETH_Init+0x116>
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	4a6d      	ldr	r2, [pc, #436]	; (80033ec <HAL_ETH_Init+0x2bc>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d204      	bcs.n	8003246 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f043 030c 	orr.w	r3, r3, #12
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	e01a      	b.n	800327c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4a68      	ldr	r2, [pc, #416]	; (80033ec <HAL_ETH_Init+0x2bc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d303      	bcc.n	8003256 <HAL_ETH_Init+0x126>
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4a6b      	ldr	r2, [pc, #428]	; (8003400 <HAL_ETH_Init+0x2d0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d911      	bls.n	800327a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4a69      	ldr	r2, [pc, #420]	; (8003400 <HAL_ETH_Init+0x2d0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d908      	bls.n	8003270 <HAL_ETH_Init+0x140>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4a68      	ldr	r2, [pc, #416]	; (8003404 <HAL_ETH_Init+0x2d4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d804      	bhi.n	8003270 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	61fb      	str	r3, [r7, #28]
 800326e:	e005      	b.n	800327c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f043 0310 	orr.w	r3, r3, #16
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	e000      	b.n	800327c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800327a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003284:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003288:	2100      	movs	r1, #0
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fb98 	bl	80039c0 <HAL_ETH_WritePHYRegister>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00b      	beq.n	80032ae <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800329a:	6939      	ldr	r1, [r7, #16]
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 fd4d 	bl	8003d3c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0d7      	b.n	800345e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80032ae:	20ff      	movs	r0, #255	; 0xff
 80032b0:	f7ff fa9a 	bl	80027e8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80a5 	beq.w	8003408 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80032be:	f7ff fa87 	bl	80027d0 <HAL_GetTick>
 80032c2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80032c4:	f107 030c 	add.w	r3, r7, #12
 80032c8:	461a      	mov	r2, r3
 80032ca:	2101      	movs	r1, #1
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fb0f 	bl	80038f0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80032d2:	f7ff fa7d 	bl	80027d0 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d90f      	bls.n	8003304 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80032e8:	6939      	ldr	r1, [r7, #16]
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 fd26 	bl	8003d3c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0ac      	b.n	800345e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0da      	beq.n	80032c4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800330e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003312:	2100      	movs	r1, #0
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fb53 	bl	80039c0 <HAL_ETH_WritePHYRegister>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00b      	beq.n	8003338 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003324:	6939      	ldr	r1, [r7, #16]
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fd08 	bl	8003d3c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003334:	2301      	movs	r3, #1
 8003336:	e092      	b.n	800345e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003338:	f7ff fa4a 	bl	80027d0 <HAL_GetTick>
 800333c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800333e:	f107 030c 	add.w	r3, r7, #12
 8003342:	461a      	mov	r2, r3
 8003344:	2101      	movs	r1, #1
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fad2 	bl	80038f0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800334c:	f7ff fa40 	bl	80027d0 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d90f      	bls.n	800337e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003362:	6939      	ldr	r1, [r7, #16]
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 fce9 	bl	8003d3c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e06f      	b.n	800345e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0da      	beq.n	800333e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003388:	f107 030c 	add.w	r3, r7, #12
 800338c:	461a      	mov	r2, r3
 800338e:	2110      	movs	r1, #16
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 faad 	bl	80038f0 <HAL_ETH_ReadPHYRegister>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00b      	beq.n	80033b4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80033a0:	6939      	ldr	r1, [r7, #16]
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fcca 	bl	8003d3c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80033b0:	2301      	movs	r3, #1
 80033b2:	e054      	b.n	800345e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d004      	beq.n	80033c8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	e002      	b.n	80033ce <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	e035      	b.n	800344c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	e030      	b.n	800344c <HAL_ETH_Init+0x31c>
 80033ea:	bf00      	nop
 80033ec:	03938700 	.word	0x03938700
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40013800 	.word	0x40013800
 80033f8:	01312cff 	.word	0x01312cff
 80033fc:	02160ebf 	.word	0x02160ebf
 8003400:	05f5e0ff 	.word	0x05f5e0ff
 8003404:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	08db      	lsrs	r3, r3, #3
 800340e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003418:	4313      	orrs	r3, r2
 800341a:	b29b      	uxth	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	2100      	movs	r1, #0
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 facd 	bl	80039c0 <HAL_ETH_WritePHYRegister>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00b      	beq.n	8003444 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003430:	6939      	ldr	r1, [r7, #16]
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 fc82 	bl	8003d3c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e00c      	b.n	800345e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003444:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003448:	f7ff f9ce 	bl	80027e8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800344c:	6939      	ldr	r1, [r7, #16]
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fc74 	bl	8003d3c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3720      	adds	r7, #32
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop

08003468 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_ETH_DMATxDescListInit+0x20>
 8003484:	2302      	movs	r3, #2
 8003486:	e052      	b.n	800352e <HAL_ETH_DMATxDescListInit+0xc6>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e030      	b.n	8003506 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	015b      	lsls	r3, r3, #5
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	4413      	add	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034b4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	461a      	mov	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d105      	bne.n	80034de <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d208      	bcs.n	80034fa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	3301      	adds	r3, #1
 80034ec:	015b      	lsls	r3, r3, #5
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	4413      	add	r3, r2
 80034f2:	461a      	mov	r2, r3
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	60da      	str	r2, [r3, #12]
 80034f8:	e002      	b.n	8003500 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3301      	adds	r3, #1
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d3ca      	bcc.n	80034a4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003518:	3310      	adds	r3, #16
 800351a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800353a:	b480      	push	{r7}
 800353c:	b087      	sub	sp, #28
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_ETH_DMARxDescListInit+0x20>
 8003556:	2302      	movs	r3, #2
 8003558:	e056      	b.n	8003608 <HAL_ETH_DMARxDescListInit+0xce>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	e034      	b.n	80035e0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	015b      	lsls	r3, r3, #5
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	4413      	add	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003586:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800358e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	4413      	add	r3, r2
 800359e:	461a      	mov	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d105      	bne.n	80035b8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d208      	bcs.n	80035d4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	3301      	adds	r3, #1
 80035c6:	015b      	lsls	r3, r3, #5
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	4413      	add	r3, r2
 80035cc:	461a      	mov	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	60da      	str	r2, [r3, #12]
 80035d2:	e002      	b.n	80035da <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	3301      	adds	r3, #1
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d3c6      	bcc.n	8003576 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f2:	330c      	adds	r3, #12
 80035f4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	2300      	movs	r3, #0
 8003628:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_ETH_TransmitFrame+0x24>
 8003634:	2302      	movs	r3, #2
 8003636:	e0cd      	b.n	80037d4 <HAL_ETH_TransmitFrame+0x1c0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800365e:	2301      	movs	r3, #1
 8003660:	e0b8      	b.n	80037d4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	da09      	bge.n	8003680 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2212      	movs	r2, #18
 8003670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e0a9      	b.n	80037d4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003686:	4293      	cmp	r3, r2
 8003688:	d915      	bls.n	80036b6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	4a54      	ldr	r2, [pc, #336]	; (80037e0 <HAL_ETH_TransmitFrame+0x1cc>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	0a9b      	lsrs	r3, r3, #10
 8003694:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	4b51      	ldr	r3, [pc, #324]	; (80037e0 <HAL_ETH_TransmitFrame+0x1cc>)
 800369a:	fba3 1302 	umull	r1, r3, r3, r2
 800369e:	0a9b      	lsrs	r3, r3, #10
 80036a0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	3301      	adds	r3, #1
 80036b2:	617b      	str	r3, [r7, #20]
 80036b4:	e001      	b.n	80036ba <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80036b6:	2301      	movs	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d11c      	bne.n	80036fa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ca:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80036ce:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80036da:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80036ea:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	461a      	mov	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80036f8:	e04b      	b.n	8003792 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	e044      	b.n	800378a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800370e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d107      	bne.n	8003726 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003724:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800372e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	3b01      	subs	r3, #1
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	429a      	cmp	r2, r3
 8003738:	d116      	bne.n	8003768 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003748:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	4a25      	ldr	r2, [pc, #148]	; (80037e4 <HAL_ETH_TransmitFrame+0x1d0>)
 800374e:	fb02 f203 	mul.w	r2, r2, r3
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	4413      	add	r3, r2
 8003756:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800375a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003766:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003776:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	461a      	mov	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	3301      	adds	r3, #1
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	429a      	cmp	r2, r3
 8003790:	d3b6      	bcc.n	8003700 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800379a:	3314      	adds	r3, #20
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00d      	beq.n	80037c2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037ae:	3314      	adds	r3, #20
 80037b0:	2204      	movs	r2, #4
 80037b2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037bc:	3304      	adds	r3, #4
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	ac02b00b 	.word	0xac02b00b
 80037e4:	fffffa0c 	.word	0xfffffa0c

080037e8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_ETH_GetReceivedFrame+0x1a>
 80037fe:	2302      	movs	r3, #2
 8003800:	e070      	b.n	80038e4 <HAL_ETH_GetReceivedFrame+0xfc>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	db5a      	blt.n	80038d2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d030      	beq.n	800388c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	2b01      	cmp	r3, #1
 800383a:	d103      	bne.n	8003844 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	0c1b      	lsrs	r3, r3, #16
 8003854:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003858:	3b04      	subs	r3, #4
 800385a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	461a      	mov	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	e02b      	b.n	80038e4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003896:	2b00      	cmp	r3, #0
 8003898:	d010      	beq.n	80038bc <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	629a      	str	r2, [r3, #40]	; 0x28
 80038ba:	e00a      	b.n	80038d2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	461a      	mov	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	460b      	mov	r3, r1
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b82      	cmp	r3, #130	; 0x82
 8003910:	d101      	bne.n	8003916 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
 8003914:	e050      	b.n	80039b8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2282      	movs	r2, #130	; 0x82
 800391a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 031c 	and.w	r3, r3, #28
 800392c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8a1b      	ldrh	r3, [r3, #16]
 8003932:	02db      	lsls	r3, r3, #11
 8003934:	b29b      	uxth	r3, r3
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800393c:	897b      	ldrh	r3, [r7, #10]
 800393e:	019b      	lsls	r3, r3, #6
 8003940:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f023 0302 	bic.w	r3, r3, #2
 8003950:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003962:	f7fe ff35 	bl	80027d0 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003968:	e015      	b.n	8003996 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800396a:	f7fe ff31 	bl	80027d0 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003978:	d309      	bcc.n	800398e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e014      	b.n	80039b8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e4      	bne.n	800396a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	460b      	mov	r3, r1
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b42      	cmp	r3, #66	; 0x42
 80039e0:	d101      	bne.n	80039e6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
 80039e4:	e04e      	b.n	8003a84 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2242      	movs	r2, #66	; 0x42
 80039ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	f003 031c 	and.w	r3, r3, #28
 80039fc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8a1b      	ldrh	r3, [r3, #16]
 8003a02:	02db      	lsls	r3, r3, #11
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003a0c:	897b      	ldrh	r3, [r7, #10]
 8003a0e:	019b      	lsls	r3, r3, #6
 8003a10:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003a3c:	f7fe fec8 	bl	80027d0 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a42:	e015      	b.n	8003a70 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003a44:	f7fe fec4 	bl	80027d0 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a52:	d309      	bcc.n	8003a68 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e00d      	b.n	8003a84 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e4      	bne.n	8003a44 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_ETH_Start+0x16>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e01f      	b.n	8003ae2 <HAL_ETH_Start+0x56>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fb44 	bl	8004140 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fb7b 	bl	80041b4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fc12 	bl	80042e8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 fbaf 	bl	8004228 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fbdc 	bl	8004288 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_ETH_Stop+0x16>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e01f      	b.n	8003b40 <HAL_ETH_Stop+0x56>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fba1 	bl	8004258 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fbce 	bl	80042b8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fb66 	bl	80041ee <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fbe0 	bl	80042e8 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fb26 	bl	800417a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_ETH_ConfigMAC+0x1c>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e0e4      	b.n	8003d2e <HAL_ETH_ConfigMAC+0x1e6>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80b1 	beq.w	8003cde <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4b6c      	ldr	r3, [pc, #432]	; (8003d38 <HAL_ETH_ConfigMAC+0x1f0>)
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003b94:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003b9a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003ba0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003ba6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003bac:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003bb2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003bb8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003bbe:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003bc4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003bca:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003bd0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003bd6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bee:	2001      	movs	r0, #1
 8003bf0:	f7fe fdfa 	bl	80027e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003c04:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003c0a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003c10:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003c16:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003c1c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003c22:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003c2e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003c30:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	f7fe fdd4 	bl	80027e8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c50:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c5a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003c78:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003c7e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003c84:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003c8a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003c90:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f7fe fd9d 	bl	80027e8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f7fe fd8a 	bl	80027e8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	61da      	str	r2, [r3, #28]
 8003cdc:	e01e      	b.n	8003d1c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003cec:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d0e:	2001      	movs	r0, #1
 8003d10:	f7fe fd6a 	bl	80027e8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	ff20810f 	.word	0xff20810f

08003d3c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b0b0      	sub	sp, #192	; 0xc0
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d007      	beq.n	8003d62 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d58:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d60:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003d72:	2300      	movs	r3, #0
 8003d74:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003d76:	2300      	movs	r3, #0
 8003d78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d86:	663b      	str	r3, [r7, #96]	; 0x60
 8003d88:	e001      	b.n	8003d8e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d92:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003da4:	2300      	movs	r3, #0
 8003da6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003da8:	2340      	movs	r3, #64	; 0x40
 8003daa:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003db8:	2300      	movs	r3, #0
 8003dba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003e10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e14:	4bac      	ldr	r3, [pc, #688]	; (80040c8 <ETH_MACDMAConfig+0x38c>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003e20:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003e24:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003e28:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003e2e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003e32:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003e36:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003e3c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003e40:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003e42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003e44:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003e48:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003e4c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003e50:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003e52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e64:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e70:	2001      	movs	r0, #1
 8003e72:	f7fe fcb9 	bl	80027e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e7e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e80:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e84:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003e86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003e88:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003e8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003e8e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003e94:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003e9a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003ea0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003ea4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003eac:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003eae:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f7fe fc94 	bl	80027e8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ec8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ed2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003edc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003ee8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003eec:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003ef6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003efa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003efc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003f00:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003f02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003f06:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003f0c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003f12:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003f14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003f18:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003f1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f2c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f38:	2001      	movs	r0, #1
 8003f3a:	f7fe fc55 	bl	80027e8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f46:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003f48:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003f4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f62:	2001      	movs	r0, #1
 8003f64:	f7fe fc40 	bl	80027e8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f70:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f7a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003f80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f84:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f92:	2300      	movs	r3, #0
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003f96:	2304      	movs	r3, #4
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fb0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003fb2:	2380      	movs	r3, #128	; 0x80
 8003fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc6:	3318      	adds	r3, #24
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003fce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fd2:	4b3e      	ldr	r3, [pc, #248]	; (80040cc <ETH_MACDMAConfig+0x390>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003fda:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003fdc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003fde:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003fe0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003fe2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003fe4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003fe6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003fe8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003fea:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003fec:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003fee:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003ff2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003ff6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003ffa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003ffc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	3318      	adds	r3, #24
 8004010:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004014:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800401e:	3318      	adds	r3, #24
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004026:	2001      	movs	r0, #1
 8004028:	f7fe fbde 	bl	80027e8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004034:	3318      	adds	r3, #24
 8004036:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800403a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800403c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004040:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004044:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004048:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800404a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800404c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800404e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004050:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004052:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8004056:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004064:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004074:	2001      	movs	r0, #1
 8004076:	f7fe fbb7 	bl	80027e8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004082:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004086:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d10f      	bne.n	80040b0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004098:	331c      	adds	r3, #28
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80040a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ac:	331c      	adds	r3, #28
 80040ae:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	461a      	mov	r2, r3
 80040b6:	2100      	movs	r1, #0
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f809 	bl	80040d0 <ETH_MACAddressConfig>
}
 80040be:	bf00      	nop
 80040c0:	37c0      	adds	r7, #192	; 0xc0
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	ff20810f 	.word	0xff20810f
 80040cc:	f8de3f23 	.word	0xf8de3f23

080040d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3305      	adds	r3, #5
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	021b      	lsls	r3, r3, #8
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	3204      	adds	r2, #4
 80040e8:	7812      	ldrb	r2, [r2, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <ETH_MACAddressConfig+0x68>)
 80040f2:	4413      	add	r3, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3303      	adds	r3, #3
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	061a      	lsls	r2, r3, #24
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3302      	adds	r3, #2
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	041b      	lsls	r3, r3, #16
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3301      	adds	r3, #1
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	4313      	orrs	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	7812      	ldrb	r2, [r2, #0]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <ETH_MACAddressConfig+0x6c>)
 8004122:	4413      	add	r3, r2
 8004124:	461a      	mov	r2, r3
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	6013      	str	r3, [r2, #0]
}
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40028040 	.word	0x40028040
 800413c:	40028044 	.word	0x40028044

08004140 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0208 	orr.w	r2, r2, #8
 800415a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004164:	2001      	movs	r0, #1
 8004166:	f000 f8e9 	bl	800433c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	601a      	str	r2, [r3, #0]
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0208 	bic.w	r2, r2, #8
 8004194:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800419e:	2001      	movs	r0, #1
 80041a0:	f000 f8cc 	bl	800433c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0204 	orr.w	r2, r2, #4
 80041ce:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80041d8:	2001      	movs	r0, #1
 80041da:	f000 f8af 	bl	800433c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	601a      	str	r2, [r3, #0]
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f022 0204 	bic.w	r2, r2, #4
 8004208:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8004212:	2001      	movs	r0, #1
 8004214:	f000 f892 	bl	800433c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	601a      	str	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004238:	3318      	adds	r3, #24
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004248:	3318      	adds	r3, #24
 800424a:	601a      	str	r2, [r3, #0]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004268:	3318      	adds	r3, #24
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004278:	3318      	adds	r3, #24
 800427a:	601a      	str	r2, [r3, #0]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004298:	3318      	adds	r3, #24
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0202 	orr.w	r2, r2, #2
 80042a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a8:	3318      	adds	r3, #24
 80042aa:	601a      	str	r2, [r3, #0]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c8:	3318      	adds	r3, #24
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0202 	bic.w	r2, r2, #2
 80042d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d8:	3318      	adds	r3, #24
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fc:	3318      	adds	r3, #24
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800430c:	3318      	adds	r3, #24
 800430e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004318:	3318      	adds	r3, #24
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800431e:	2001      	movs	r0, #1
 8004320:	f000 f80c 	bl	800433c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432e:	3318      	adds	r3, #24
 8004330:	601a      	str	r2, [r3, #0]
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
	...

0800433c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <ETH_Delay+0x38>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0b      	ldr	r2, [pc, #44]	; (8004378 <ETH_Delay+0x3c>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0a5b      	lsrs	r3, r3, #9
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8004358:	bf00      	nop
  } 
  while (Delay --);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	60fa      	str	r2, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f9      	bne.n	8004358 <ETH_Delay+0x1c>
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	200004a8 	.word	0x200004a8
 8004378:	10624dd3 	.word	0x10624dd3

0800437c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800437c:	b480      	push	{r7}
 800437e:	b089      	sub	sp, #36	; 0x24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800438e:	2300      	movs	r3, #0
 8004390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	e16b      	b.n	8004670 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004398:	2201      	movs	r2, #1
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4013      	ands	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	f040 815a 	bne.w	800466a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d005      	beq.n	80043ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d130      	bne.n	8004430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	2203      	movs	r2, #3
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004404:	2201      	movs	r2, #1
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 0201 	and.w	r2, r3, #1
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	4313      	orrs	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	2b03      	cmp	r3, #3
 800443a:	d017      	beq.n	800446c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	2203      	movs	r2, #3
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43db      	mvns	r3, r3
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4013      	ands	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4313      	orrs	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f003 0303 	and.w	r3, r3, #3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d123      	bne.n	80044c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	08da      	lsrs	r2, r3, #3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3208      	adds	r2, #8
 8004480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	220f      	movs	r2, #15
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	08da      	lsrs	r2, r3, #3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3208      	adds	r2, #8
 80044ba:	69b9      	ldr	r1, [r7, #24]
 80044bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f003 0203 	and.w	r2, r3, #3
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80b4 	beq.w	800466a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004502:	2300      	movs	r3, #0
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	4b60      	ldr	r3, [pc, #384]	; (8004688 <HAL_GPIO_Init+0x30c>)
 8004508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450a:	4a5f      	ldr	r2, [pc, #380]	; (8004688 <HAL_GPIO_Init+0x30c>)
 800450c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004510:	6453      	str	r3, [r2, #68]	; 0x44
 8004512:	4b5d      	ldr	r3, [pc, #372]	; (8004688 <HAL_GPIO_Init+0x30c>)
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800451e:	4a5b      	ldr	r2, [pc, #364]	; (800468c <HAL_GPIO_Init+0x310>)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	089b      	lsrs	r3, r3, #2
 8004524:	3302      	adds	r3, #2
 8004526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	220f      	movs	r2, #15
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43db      	mvns	r3, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4013      	ands	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a52      	ldr	r2, [pc, #328]	; (8004690 <HAL_GPIO_Init+0x314>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d02b      	beq.n	80045a2 <HAL_GPIO_Init+0x226>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a51      	ldr	r2, [pc, #324]	; (8004694 <HAL_GPIO_Init+0x318>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d025      	beq.n	800459e <HAL_GPIO_Init+0x222>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a50      	ldr	r2, [pc, #320]	; (8004698 <HAL_GPIO_Init+0x31c>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01f      	beq.n	800459a <HAL_GPIO_Init+0x21e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a4f      	ldr	r2, [pc, #316]	; (800469c <HAL_GPIO_Init+0x320>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d019      	beq.n	8004596 <HAL_GPIO_Init+0x21a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a4e      	ldr	r2, [pc, #312]	; (80046a0 <HAL_GPIO_Init+0x324>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d013      	beq.n	8004592 <HAL_GPIO_Init+0x216>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a4d      	ldr	r2, [pc, #308]	; (80046a4 <HAL_GPIO_Init+0x328>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00d      	beq.n	800458e <HAL_GPIO_Init+0x212>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a4c      	ldr	r2, [pc, #304]	; (80046a8 <HAL_GPIO_Init+0x32c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <HAL_GPIO_Init+0x20e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a4b      	ldr	r2, [pc, #300]	; (80046ac <HAL_GPIO_Init+0x330>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d101      	bne.n	8004586 <HAL_GPIO_Init+0x20a>
 8004582:	2307      	movs	r3, #7
 8004584:	e00e      	b.n	80045a4 <HAL_GPIO_Init+0x228>
 8004586:	2308      	movs	r3, #8
 8004588:	e00c      	b.n	80045a4 <HAL_GPIO_Init+0x228>
 800458a:	2306      	movs	r3, #6
 800458c:	e00a      	b.n	80045a4 <HAL_GPIO_Init+0x228>
 800458e:	2305      	movs	r3, #5
 8004590:	e008      	b.n	80045a4 <HAL_GPIO_Init+0x228>
 8004592:	2304      	movs	r3, #4
 8004594:	e006      	b.n	80045a4 <HAL_GPIO_Init+0x228>
 8004596:	2303      	movs	r3, #3
 8004598:	e004      	b.n	80045a4 <HAL_GPIO_Init+0x228>
 800459a:	2302      	movs	r3, #2
 800459c:	e002      	b.n	80045a4 <HAL_GPIO_Init+0x228>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_GPIO_Init+0x228>
 80045a2:	2300      	movs	r3, #0
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	f002 0203 	and.w	r2, r2, #3
 80045aa:	0092      	lsls	r2, r2, #2
 80045ac:	4093      	lsls	r3, r2
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045b4:	4935      	ldr	r1, [pc, #212]	; (800468c <HAL_GPIO_Init+0x310>)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	3302      	adds	r3, #2
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045c2:	4b3b      	ldr	r3, [pc, #236]	; (80046b0 <HAL_GPIO_Init+0x334>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	43db      	mvns	r3, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4013      	ands	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045e6:	4a32      	ldr	r2, [pc, #200]	; (80046b0 <HAL_GPIO_Init+0x334>)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045ec:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <HAL_GPIO_Init+0x334>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004610:	4a27      	ldr	r2, [pc, #156]	; (80046b0 <HAL_GPIO_Init+0x334>)
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004616:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <HAL_GPIO_Init+0x334>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800463a:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_GPIO_Init+0x334>)
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004640:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <HAL_GPIO_Init+0x334>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	43db      	mvns	r3, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4013      	ands	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004664:	4a12      	ldr	r2, [pc, #72]	; (80046b0 <HAL_GPIO_Init+0x334>)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	3301      	adds	r3, #1
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b0f      	cmp	r3, #15
 8004674:	f67f ae90 	bls.w	8004398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	3724      	adds	r7, #36	; 0x24
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800
 800468c:	40013800 	.word	0x40013800
 8004690:	40020000 	.word	0x40020000
 8004694:	40020400 	.word	0x40020400
 8004698:	40020800 	.word	0x40020800
 800469c:	40020c00 	.word	0x40020c00
 80046a0:	40021000 	.word	0x40021000
 80046a4:	40021400 	.word	0x40021400
 80046a8:	40021800 	.word	0x40021800
 80046ac:	40021c00 	.word	0x40021c00
 80046b0:	40013c00 	.word	0x40013c00

080046b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	807b      	strh	r3, [r7, #2]
 80046c0:	4613      	mov	r3, r2
 80046c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046c4:	787b      	ldrb	r3, [r7, #1]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046ca:	887a      	ldrh	r2, [r7, #2]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046d0:	e003      	b.n	80046da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046d2:	887b      	ldrh	r3, [r7, #2]
 80046d4:	041a      	lsls	r2, r3, #16
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	619a      	str	r2, [r3, #24]
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e264      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d075      	beq.n	80047f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004706:	4ba3      	ldr	r3, [pc, #652]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b04      	cmp	r3, #4
 8004710:	d00c      	beq.n	800472c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004712:	4ba0      	ldr	r3, [pc, #640]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800471a:	2b08      	cmp	r3, #8
 800471c:	d112      	bne.n	8004744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800471e:	4b9d      	ldr	r3, [pc, #628]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800472a:	d10b      	bne.n	8004744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800472c:	4b99      	ldr	r3, [pc, #612]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d05b      	beq.n	80047f0 <HAL_RCC_OscConfig+0x108>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d157      	bne.n	80047f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e23f      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474c:	d106      	bne.n	800475c <HAL_RCC_OscConfig+0x74>
 800474e:	4b91      	ldr	r3, [pc, #580]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a90      	ldr	r2, [pc, #576]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e01d      	b.n	8004798 <HAL_RCC_OscConfig+0xb0>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0x98>
 8004766:	4b8b      	ldr	r3, [pc, #556]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a8a      	ldr	r2, [pc, #552]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 800476c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b88      	ldr	r3, [pc, #544]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a87      	ldr	r2, [pc, #540]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0xb0>
 8004780:	4b84      	ldr	r3, [pc, #528]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a83      	ldr	r2, [pc, #524]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b81      	ldr	r3, [pc, #516]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a80      	ldr	r2, [pc, #512]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fe f816 	bl	80027d0 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fe f812 	bl	80027d0 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e204      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	4b76      	ldr	r3, [pc, #472]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0xc0>
 80047c6:	e014      	b.n	80047f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7fe f802 	bl	80027d0 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d0:	f7fd fffe 	bl	80027d0 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e1f0      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e2:	4b6c      	ldr	r3, [pc, #432]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0xe8>
 80047ee:	e000      	b.n	80047f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d063      	beq.n	80048c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047fe:	4b65      	ldr	r3, [pc, #404]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800480a:	4b62      	ldr	r3, [pc, #392]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004812:	2b08      	cmp	r3, #8
 8004814:	d11c      	bne.n	8004850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004816:	4b5f      	ldr	r3, [pc, #380]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d116      	bne.n	8004850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004822:	4b5c      	ldr	r3, [pc, #368]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_RCC_OscConfig+0x152>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e1c4      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483a:	4b56      	ldr	r3, [pc, #344]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4952      	ldr	r1, [pc, #328]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484e:	e03a      	b.n	80048c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004858:	4b4f      	ldr	r3, [pc, #316]	; (8004998 <HAL_RCC_OscConfig+0x2b0>)
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485e:	f7fd ffb7 	bl	80027d0 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004866:	f7fd ffb3 	bl	80027d0 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e1a5      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004878:	4b46      	ldr	r3, [pc, #280]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004884:	4b43      	ldr	r3, [pc, #268]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4940      	ldr	r1, [pc, #256]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004894:	4313      	orrs	r3, r2
 8004896:	600b      	str	r3, [r1, #0]
 8004898:	e015      	b.n	80048c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489a:	4b3f      	ldr	r3, [pc, #252]	; (8004998 <HAL_RCC_OscConfig+0x2b0>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fd ff96 	bl	80027d0 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048a8:	f7fd ff92 	bl	80027d0 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e184      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ba:	4b36      	ldr	r3, [pc, #216]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d030      	beq.n	8004934 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d016      	beq.n	8004908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048da:	4b30      	ldr	r3, [pc, #192]	; (800499c <HAL_RCC_OscConfig+0x2b4>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e0:	f7fd ff76 	bl	80027d0 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048e8:	f7fd ff72 	bl	80027d0 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e164      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fa:	4b26      	ldr	r3, [pc, #152]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x200>
 8004906:	e015      	b.n	8004934 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004908:	4b24      	ldr	r3, [pc, #144]	; (800499c <HAL_RCC_OscConfig+0x2b4>)
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490e:	f7fd ff5f 	bl	80027d0 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004916:	f7fd ff5b 	bl	80027d0 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e14d      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004928:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 800492a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80a0 	beq.w	8004a82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	4a0e      	ldr	r2, [pc, #56]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	6413      	str	r3, [r2, #64]	; 0x40
 8004962:	4b0c      	ldr	r3, [pc, #48]	; (8004994 <HAL_RCC_OscConfig+0x2ac>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800496e:	2301      	movs	r3, #1
 8004970:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <HAL_RCC_OscConfig+0x2b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d121      	bne.n	80049c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <HAL_RCC_OscConfig+0x2b8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a07      	ldr	r2, [pc, #28]	; (80049a0 <HAL_RCC_OscConfig+0x2b8>)
 8004984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498a:	f7fd ff21 	bl	80027d0 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004990:	e011      	b.n	80049b6 <HAL_RCC_OscConfig+0x2ce>
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800
 8004998:	42470000 	.word	0x42470000
 800499c:	42470e80 	.word	0x42470e80
 80049a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a4:	f7fd ff14 	bl	80027d0 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e106      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b6:	4b85      	ldr	r3, [pc, #532]	; (8004bcc <HAL_RCC_OscConfig+0x4e4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d106      	bne.n	80049d8 <HAL_RCC_OscConfig+0x2f0>
 80049ca:	4b81      	ldr	r3, [pc, #516]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	4a80      	ldr	r2, [pc, #512]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	6713      	str	r3, [r2, #112]	; 0x70
 80049d6:	e01c      	b.n	8004a12 <HAL_RCC_OscConfig+0x32a>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d10c      	bne.n	80049fa <HAL_RCC_OscConfig+0x312>
 80049e0:	4b7b      	ldr	r3, [pc, #492]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	4a7a      	ldr	r2, [pc, #488]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 80049e6:	f043 0304 	orr.w	r3, r3, #4
 80049ea:	6713      	str	r3, [r2, #112]	; 0x70
 80049ec:	4b78      	ldr	r3, [pc, #480]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	4a77      	ldr	r2, [pc, #476]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	6713      	str	r3, [r2, #112]	; 0x70
 80049f8:	e00b      	b.n	8004a12 <HAL_RCC_OscConfig+0x32a>
 80049fa:	4b75      	ldr	r3, [pc, #468]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	4a74      	ldr	r2, [pc, #464]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004a00:	f023 0301 	bic.w	r3, r3, #1
 8004a04:	6713      	str	r3, [r2, #112]	; 0x70
 8004a06:	4b72      	ldr	r3, [pc, #456]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0a:	4a71      	ldr	r2, [pc, #452]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004a0c:	f023 0304 	bic.w	r3, r3, #4
 8004a10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d015      	beq.n	8004a46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1a:	f7fd fed9 	bl	80027d0 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a20:	e00a      	b.n	8004a38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a22:	f7fd fed5 	bl	80027d0 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e0c5      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a38:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ee      	beq.n	8004a22 <HAL_RCC_OscConfig+0x33a>
 8004a44:	e014      	b.n	8004a70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a46:	f7fd fec3 	bl	80027d0 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4c:	e00a      	b.n	8004a64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fd febf 	bl	80027d0 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e0af      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a64:	4b5a      	ldr	r3, [pc, #360]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1ee      	bne.n	8004a4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d105      	bne.n	8004a82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a76:	4b56      	ldr	r3, [pc, #344]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	4a55      	ldr	r2, [pc, #340]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 809b 	beq.w	8004bc2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a8c:	4b50      	ldr	r3, [pc, #320]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f003 030c 	and.w	r3, r3, #12
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d05c      	beq.n	8004b52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d141      	bne.n	8004b24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa0:	4b4c      	ldr	r3, [pc, #304]	; (8004bd4 <HAL_RCC_OscConfig+0x4ec>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa6:	f7fd fe93 	bl	80027d0 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aac:	e008      	b.n	8004ac0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fd fe8f 	bl	80027d0 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d901      	bls.n	8004ac0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e081      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac0:	4b43      	ldr	r3, [pc, #268]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f0      	bne.n	8004aae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	019b      	lsls	r3, r3, #6
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	061b      	lsls	r3, r3, #24
 8004af0:	4937      	ldr	r1, [pc, #220]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004af6:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <HAL_RCC_OscConfig+0x4ec>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fd fe68 	bl	80027d0 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b04:	f7fd fe64 	bl	80027d0 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e056      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b16:	4b2e      	ldr	r3, [pc, #184]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0f0      	beq.n	8004b04 <HAL_RCC_OscConfig+0x41c>
 8004b22:	e04e      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b24:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_RCC_OscConfig+0x4ec>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2a:	f7fd fe51 	bl	80027d0 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b32:	f7fd fe4d 	bl	80027d0 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e03f      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b44:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCC_OscConfig+0x44a>
 8004b50:	e037      	b.n	8004bc2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e032      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b5e:	4b1c      	ldr	r3, [pc, #112]	; (8004bd0 <HAL_RCC_OscConfig+0x4e8>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d028      	beq.n	8004bbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d121      	bne.n	8004bbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d11a      	bne.n	8004bbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b8e:	4013      	ands	r3, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b94:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d111      	bne.n	8004bbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	085b      	lsrs	r3, r3, #1
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d107      	bne.n	8004bbe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40007000 	.word	0x40007000
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	42470060 	.word	0x42470060

08004bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0cc      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bec:	4b68      	ldr	r3, [pc, #416]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0307 	and.w	r3, r3, #7
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d90c      	bls.n	8004c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfa:	4b65      	ldr	r3, [pc, #404]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c02:	4b63      	ldr	r3, [pc, #396]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0307 	and.w	r3, r3, #7
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e0b8      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d020      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c2c:	4b59      	ldr	r3, [pc, #356]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	4a58      	ldr	r2, [pc, #352]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c44:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	4a52      	ldr	r2, [pc, #328]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c50:	4b50      	ldr	r3, [pc, #320]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	494d      	ldr	r1, [pc, #308]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d044      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d107      	bne.n	8004c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	4b47      	ldr	r3, [pc, #284]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d119      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e07f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d003      	beq.n	8004c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c96:	4b3f      	ldr	r3, [pc, #252]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e06f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca6:	4b3b      	ldr	r3, [pc, #236]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e067      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cb6:	4b37      	ldr	r3, [pc, #220]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f023 0203 	bic.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	4934      	ldr	r1, [pc, #208]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cc8:	f7fd fd82 	bl	80027d0 <HAL_GetTick>
 8004ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cce:	e00a      	b.n	8004ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd0:	f7fd fd7e 	bl	80027d0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e04f      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce6:	4b2b      	ldr	r3, [pc, #172]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 020c 	and.w	r2, r3, #12
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d1eb      	bne.n	8004cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b25      	ldr	r3, [pc, #148]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d20c      	bcs.n	8004d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b22      	ldr	r3, [pc, #136]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e032      	b.n	8004d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d2c:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4916      	ldr	r1, [pc, #88]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	490e      	ldr	r1, [pc, #56]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d5e:	f000 f821 	bl	8004da4 <HAL_RCC_GetSysClockFreq>
 8004d62:	4602      	mov	r2, r0
 8004d64:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	490a      	ldr	r1, [pc, #40]	; (8004d98 <HAL_RCC_ClockConfig+0x1c0>)
 8004d70:	5ccb      	ldrb	r3, [r1, r3]
 8004d72:	fa22 f303 	lsr.w	r3, r2, r3
 8004d76:	4a09      	ldr	r2, [pc, #36]	; (8004d9c <HAL_RCC_ClockConfig+0x1c4>)
 8004d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fd fb58 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40023c00 	.word	0x40023c00
 8004d94:	40023800 	.word	0x40023800
 8004d98:	0801a590 	.word	0x0801a590
 8004d9c:	200004a8 	.word	0x200004a8
 8004da0:	200004ac 	.word	0x200004ac

08004da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	2300      	movs	r3, #0
 8004db6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dbc:	4b67      	ldr	r3, [pc, #412]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f003 030c 	and.w	r3, r3, #12
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d00d      	beq.n	8004de4 <HAL_RCC_GetSysClockFreq+0x40>
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	f200 80bd 	bhi.w	8004f48 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d003      	beq.n	8004dde <HAL_RCC_GetSysClockFreq+0x3a>
 8004dd6:	e0b7      	b.n	8004f48 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dd8:	4b61      	ldr	r3, [pc, #388]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004dda:	60bb      	str	r3, [r7, #8]
       break;
 8004ddc:	e0b7      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dde:	4b61      	ldr	r3, [pc, #388]	; (8004f64 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004de0:	60bb      	str	r3, [r7, #8]
      break;
 8004de2:	e0b4      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de4:	4b5d      	ldr	r3, [pc, #372]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dee:	4b5b      	ldr	r3, [pc, #364]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d04d      	beq.n	8004e96 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfa:	4b58      	ldr	r3, [pc, #352]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	461a      	mov	r2, r3
 8004e02:	f04f 0300 	mov.w	r3, #0
 8004e06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e0a:	f04f 0100 	mov.w	r1, #0
 8004e0e:	ea02 0800 	and.w	r8, r2, r0
 8004e12:	ea03 0901 	and.w	r9, r3, r1
 8004e16:	4640      	mov	r0, r8
 8004e18:	4649      	mov	r1, r9
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	014b      	lsls	r3, r1, #5
 8004e24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e28:	0142      	lsls	r2, r0, #5
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	ebb0 0008 	subs.w	r0, r0, r8
 8004e32:	eb61 0109 	sbc.w	r1, r1, r9
 8004e36:	f04f 0200 	mov.w	r2, #0
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	018b      	lsls	r3, r1, #6
 8004e40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e44:	0182      	lsls	r2, r0, #6
 8004e46:	1a12      	subs	r2, r2, r0
 8004e48:	eb63 0301 	sbc.w	r3, r3, r1
 8004e4c:	f04f 0000 	mov.w	r0, #0
 8004e50:	f04f 0100 	mov.w	r1, #0
 8004e54:	00d9      	lsls	r1, r3, #3
 8004e56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e5a:	00d0      	lsls	r0, r2, #3
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	eb12 0208 	adds.w	r2, r2, r8
 8004e64:	eb43 0309 	adc.w	r3, r3, r9
 8004e68:	f04f 0000 	mov.w	r0, #0
 8004e6c:	f04f 0100 	mov.w	r1, #0
 8004e70:	0259      	lsls	r1, r3, #9
 8004e72:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e76:	0250      	lsls	r0, r2, #9
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4619      	mov	r1, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	461a      	mov	r2, r3
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	f7fb fa0a 	bl	80002a0 <__aeabi_uldivmod>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4613      	mov	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	e04a      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e96:	4b31      	ldr	r3, [pc, #196]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	099b      	lsrs	r3, r3, #6
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ea6:	f04f 0100 	mov.w	r1, #0
 8004eaa:	ea02 0400 	and.w	r4, r2, r0
 8004eae:	ea03 0501 	and.w	r5, r3, r1
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	f04f 0200 	mov.w	r2, #0
 8004eba:	f04f 0300 	mov.w	r3, #0
 8004ebe:	014b      	lsls	r3, r1, #5
 8004ec0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ec4:	0142      	lsls	r2, r0, #5
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	1b00      	subs	r0, r0, r4
 8004ecc:	eb61 0105 	sbc.w	r1, r1, r5
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	f04f 0300 	mov.w	r3, #0
 8004ed8:	018b      	lsls	r3, r1, #6
 8004eda:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ede:	0182      	lsls	r2, r0, #6
 8004ee0:	1a12      	subs	r2, r2, r0
 8004ee2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ee6:	f04f 0000 	mov.w	r0, #0
 8004eea:	f04f 0100 	mov.w	r1, #0
 8004eee:	00d9      	lsls	r1, r3, #3
 8004ef0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ef4:	00d0      	lsls	r0, r2, #3
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	1912      	adds	r2, r2, r4
 8004efc:	eb45 0303 	adc.w	r3, r5, r3
 8004f00:	f04f 0000 	mov.w	r0, #0
 8004f04:	f04f 0100 	mov.w	r1, #0
 8004f08:	0299      	lsls	r1, r3, #10
 8004f0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f0e:	0290      	lsls	r0, r2, #10
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	f7fb f9be 	bl	80002a0 <__aeabi_uldivmod>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4613      	mov	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	f003 0303 	and.w	r3, r3, #3
 8004f36:	3301      	adds	r3, #1
 8004f38:	005b      	lsls	r3, r3, #1
 8004f3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	60bb      	str	r3, [r7, #8]
      break;
 8004f46:	e002      	b.n	8004f4e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f4a:	60bb      	str	r3, [r7, #8]
      break;
 8004f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	00f42400 	.word	0x00f42400
 8004f64:	007a1200 	.word	0x007a1200

08004f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f6c:	4b03      	ldr	r3, [pc, #12]	; (8004f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	200004a8 	.word	0x200004a8

08004f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f84:	f7ff fff0 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	0a9b      	lsrs	r3, r3, #10
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	4903      	ldr	r1, [pc, #12]	; (8004fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f96:	5ccb      	ldrb	r3, [r1, r3]
 8004f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	0801a5a0 	.word	0x0801a5a0

08004fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fac:	f7ff ffdc 	bl	8004f68 <HAL_RCC_GetHCLKFreq>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	0b5b      	lsrs	r3, r3, #13
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	4903      	ldr	r1, [pc, #12]	; (8004fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fbe:	5ccb      	ldrb	r3, [r1, r3]
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	0801a5a0 	.word	0x0801a5a0

08004fd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	220f      	movs	r2, #15
 8004fde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fe0:	4b12      	ldr	r3, [pc, #72]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 0203 	and.w	r2, r3, #3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005004:	4b09      	ldr	r3, [pc, #36]	; (800502c <HAL_RCC_GetClockConfig+0x5c>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	08db      	lsrs	r3, r3, #3
 800500a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005012:	4b07      	ldr	r3, [pc, #28]	; (8005030 <HAL_RCC_GetClockConfig+0x60>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0207 	and.w	r2, r3, #7
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	601a      	str	r2, [r3, #0]
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40023800 	.word	0x40023800
 8005030:	40023c00 	.word	0x40023c00

08005034 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e022      	b.n	800508c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d105      	bne.n	800505e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fd f8a3 	bl	80021a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2203      	movs	r2, #3
 8005062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f814 	bl	8005094 <HAL_SD_InitCard>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e00a      	b.n	800508c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005094:	b5b0      	push	{r4, r5, r7, lr}
 8005096:	b08e      	sub	sp, #56	; 0x38
 8005098:	af04      	add	r7, sp, #16
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800509c:	2300      	movs	r3, #0
 800509e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80050b0:	2376      	movs	r3, #118	; 0x76
 80050b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681d      	ldr	r5, [r3, #0]
 80050b8:	466c      	mov	r4, sp
 80050ba:	f107 0314 	add.w	r3, r7, #20
 80050be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80050c6:	f107 0308 	add.w	r3, r7, #8
 80050ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050cc:	4628      	mov	r0, r5
 80050ce:	f002 f8a3 	bl	8007218 <SDIO_Init>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80050d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e04c      	b.n	800517e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80050e4:	4b28      	ldr	r3, [pc, #160]	; (8005188 <HAL_SD_InitCard+0xf4>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f002 f8db 	bl	80072aa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80050f4:	4b24      	ldr	r3, [pc, #144]	; (8005188 <HAL_SD_InitCard+0xf4>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f001 f804 	bl	8006108 <SD_PowerON>
 8005100:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e02e      	b.n	800517e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 ff25 	bl	8005f70 <SD_InitCard>
 8005126:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e01b      	b.n	800517e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800514e:	4618      	mov	r0, r3
 8005150:	f002 f93e 	bl	80073d0 <SDMMC_CmdBlockLength>
 8005154:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00f      	beq.n	800517c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a0a      	ldr	r2, [pc, #40]	; (800518c <HAL_SD_InitCard+0xf8>)
 8005162:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3728      	adds	r7, #40	; 0x28
 8005182:	46bd      	mov	sp, r7
 8005184:	bdb0      	pop	{r4, r5, r7, pc}
 8005186:	bf00      	nop
 8005188:	422580a0 	.word	0x422580a0
 800518c:	004005ff 	.word	0x004005ff

08005190 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b08c      	sub	sp, #48	; 0x30
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
 800519c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d107      	bne.n	80051b8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0c0      	b.n	800533a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	f040 80b9 	bne.w	8005338 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80051cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	441a      	add	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d907      	bls.n	80051ea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e0a7      	b.n	800533a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2203      	movs	r2, #3
 80051ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8005208:	f043 0302 	orr.w	r3, r3, #2
 800520c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	4a4c      	ldr	r2, [pc, #304]	; (8005344 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8005214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	4a4b      	ldr	r2, [pc, #300]	; (8005348 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800521c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	2200      	movs	r2, #0
 8005224:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	2200      	movs	r2, #0
 800522c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3380      	adds	r3, #128	; 0x80
 8005254:	4619      	mov	r1, r3
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	025b      	lsls	r3, r3, #9
 800525c:	089b      	lsrs	r3, r3, #2
 800525e:	f7fd fc77 	bl	8002b50 <HAL_DMA_Start_IT>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d017      	beq.n	8005298 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005276:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a33      	ldr	r2, [pc, #204]	; (800534c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800527e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e050      	b.n	800533a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005298:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d002      	beq.n	80052ac <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	025b      	lsls	r3, r3, #9
 80052aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80052ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052b0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	025b      	lsls	r3, r3, #9
 80052b6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80052b8:	2390      	movs	r3, #144	; 0x90
 80052ba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80052bc:	2302      	movs	r3, #2
 80052be:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80052c4:	2301      	movs	r3, #1
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f107 0210 	add.w	r2, r7, #16
 80052d0:	4611      	mov	r1, r2
 80052d2:	4618      	mov	r0, r3
 80052d4:	f002 f850 	bl	8007378 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d90a      	bls.n	80052f4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2282      	movs	r2, #130	; 0x82
 80052e2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052ea:	4618      	mov	r0, r3
 80052ec:	f002 f8b4 	bl	8007458 <SDMMC_CmdReadMultiBlock>
 80052f0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80052f2:	e009      	b.n	8005308 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2281      	movs	r2, #129	; 0x81
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005300:	4618      	mov	r0, r3
 8005302:	f002 f887 	bl	8007414 <SDMMC_CmdReadSingleBlock>
 8005306:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d012      	beq.n	8005334 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a0e      	ldr	r2, [pc, #56]	; (800534c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005314:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	431a      	orrs	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e002      	b.n	800533a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8005334:	2300      	movs	r3, #0
 8005336:	e000      	b.n	800533a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8005338:	2302      	movs	r3, #2
  }
}
 800533a:	4618      	mov	r0, r3
 800533c:	3730      	adds	r7, #48	; 0x30
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	08005d7f 	.word	0x08005d7f
 8005348:	08005df1 	.word	0x08005df1
 800534c:	004005ff 	.word	0x004005ff
 8005350:	4225858c 	.word	0x4225858c

08005354 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08c      	sub	sp, #48	; 0x30
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d107      	bne.n	800537c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005370:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e0c5      	b.n	8005508 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b01      	cmp	r3, #1
 8005386:	f040 80be 	bne.w	8005506 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	441a      	add	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539a:	429a      	cmp	r2, r3
 800539c:	d907      	bls.n	80053ae <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e0ac      	b.n	8005508 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2203      	movs	r2, #3
 80053b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2200      	movs	r2, #0
 80053bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80053cc:	f043 0302 	orr.w	r3, r3, #2
 80053d0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d6:	4a4e      	ldr	r2, [pc, #312]	; (8005510 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80053d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053de:	4a4d      	ldr	r2, [pc, #308]	; (8005514 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80053e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e6:	2200      	movs	r2, #0
 80053e8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d002      	beq.n	80053f8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	025b      	lsls	r3, r3, #9
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d90a      	bls.n	8005414 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	22a0      	movs	r2, #160	; 0xa0
 8005402:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800540a:	4618      	mov	r0, r3
 800540c:	f002 f868 	bl	80074e0 <SDMMC_CmdWriteMultiBlock>
 8005410:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005412:	e009      	b.n	8005428 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2290      	movs	r2, #144	; 0x90
 8005418:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005420:	4618      	mov	r0, r3
 8005422:	f002 f83b 	bl	800749c <SDMMC_CmdWriteSingleBlock>
 8005426:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	2b00      	cmp	r3, #0
 800542c:	d012      	beq.n	8005454 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a39      	ldr	r2, [pc, #228]	; (8005518 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005434:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e059      	b.n	8005508 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005454:	4b31      	ldr	r3, [pc, #196]	; (800551c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005456:	2201      	movs	r2, #1
 8005458:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	2240      	movs	r2, #64	; 0x40
 8005460:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3380      	adds	r3, #128	; 0x80
 800548a:	461a      	mov	r2, r3
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	025b      	lsls	r3, r3, #9
 8005490:	089b      	lsrs	r3, r3, #2
 8005492:	f7fd fb5d 	bl	8002b50 <HAL_DMA_Start_IT>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01c      	beq.n	80054d6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	6812      	ldr	r2, [r2, #0]
 80054a6:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80054aa:	f023 0302 	bic.w	r3, r3, #2
 80054ae:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e018      	b.n	8005508 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054da:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	025b      	lsls	r3, r3, #9
 80054e0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80054e2:	2390      	movs	r3, #144	; 0x90
 80054e4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80054ee:	2301      	movs	r3, #1
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f107 0210 	add.w	r2, r7, #16
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 ff3b 	bl	8007378 <SDIO_ConfigData>

      return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3730      	adds	r7, #48	; 0x30
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	08005d55 	.word	0x08005d55
 8005514:	08005df1 	.word	0x08005df1
 8005518:	004005ff 	.word	0x004005ff
 800551c:	4225858c 	.word	0x4225858c

08005520 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_SD_IRQHandler+0x2e>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fffd 	bl	8006546 <SD_Read_IT>
 800554c:	e165      	b.n	800581a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 808f 	beq.w	800567c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005566:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005576:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800557a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d039      	beq.n	800560a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d104      	bne.n	80055aa <HAL_SD_IRQHandler+0x8a>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d011      	beq.n	80055ce <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4618      	mov	r0, r3
 80055b0:	f001 ffb8 	bl	8007524 <SDMMC_CmdStopTransfer>
 80055b4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d008      	beq.n	80055ce <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f92f 	bl	800582c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0301 	and.w	r3, r3, #1
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d104      	bne.n	80055fa <HAL_SD_IRQHandler+0xda>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f002 fc1e 	bl	8007e3c <HAL_SD_RxCpltCallback>
 8005600:	e10b      	b.n	800581a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f002 fc10 	bl	8007e28 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005608:	e107      	b.n	800581a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8102 	beq.w	800581a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d011      	beq.n	8005644 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f001 ff7d 	bl	8007524 <SDMMC_CmdStopTransfer>
 800562a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f8f4 	bl	800582c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 80e5 	bne.w	800581a <HAL_SD_IRQHandler+0x2fa>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	f040 80df 	bne.w	800581a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0208 	bic.w	r2, r2, #8
 800566a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f002 fbd7 	bl	8007e28 <HAL_SD_TxCpltCallback>
}
 800567a:	e0ce      	b.n	800581a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_SD_IRQHandler+0x17c>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 ffa7 	bl	80065e8 <SD_Write_IT>
 800569a:	e0be      	b.n	800581a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a2:	f240 233a 	movw	r3, #570	; 0x23a
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80b6 	beq.w	800581a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d005      	beq.n	80056c8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	f043 0202 	orr.w	r2, r3, #2
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	f043 0208 	orr.w	r2, r3, #8
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e8:	f003 0320 	and.w	r3, r3, #32
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	f043 0220 	orr.w	r2, r3, #32
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b00      	cmp	r3, #0
 8005708:	d005      	beq.n	8005716 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	f043 0210 	orr.w	r2, r3, #16
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	f043 0208 	orr.w	r2, r3, #8
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f240 723a 	movw	r2, #1850	; 0x73a
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005748:	f023 0302 	bic.w	r3, r3, #2
 800574c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fee6 	bl	8007524 <SDMMC_CmdStopTransfer>
 8005758:	4602      	mov	r2, r0
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f855 	bl	800582c <HAL_SD_ErrorCallback>
}
 8005782:	e04a      	b.n	800581a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	2b00      	cmp	r3, #0
 800578c:	d045      	beq.n	800581a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	d104      	bne.n	80057a2 <HAL_SD_IRQHandler+0x282>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d011      	beq.n	80057c6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <HAL_SD_IRQHandler+0x304>)
 80057a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fd fa26 	bl	8002c00 <HAL_DMA_Abort_IT>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d02f      	beq.n	800581a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fb68 	bl	8005e94 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80057c4:	e029      	b.n	800581a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <HAL_SD_IRQHandler+0x2ba>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d011      	beq.n	80057fe <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	4a12      	ldr	r2, [pc, #72]	; (8005828 <HAL_SD_IRQHandler+0x308>)
 80057e0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fd fa0a 	bl	8002c00 <HAL_DMA_Abort_IT>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d013      	beq.n	800581a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 fb83 	bl	8005f02 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80057fc:	e00d      	b.n	800581a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f002 fafe 	bl	8007e14 <HAL_SD_AbortCallback>
}
 8005818:	e7ff      	b.n	800581a <HAL_SD_IRQHandler+0x2fa>
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	08005e95 	.word	0x08005e95
 8005828:	08005f03 	.word	0x08005f03

0800582c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800584e:	0f9b      	lsrs	r3, r3, #30
 8005850:	b2da      	uxtb	r2, r3
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800585a:	0e9b      	lsrs	r3, r3, #26
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	b2da      	uxtb	r2, r3
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800586c:	0e1b      	lsrs	r3, r3, #24
 800586e:	b2db      	uxtb	r3, r3
 8005870:	f003 0303 	and.w	r3, r3, #3
 8005874:	b2da      	uxtb	r2, r3
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587e:	0c1b      	lsrs	r3, r3, #16
 8005880:	b2da      	uxtb	r2, r3
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800588a:	0a1b      	lsrs	r3, r3, #8
 800588c:	b2da      	uxtb	r2, r3
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005896:	b2da      	uxtb	r2, r3
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a0:	0d1b      	lsrs	r3, r3, #20
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058be:	0bdb      	lsrs	r3, r3, #15
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d0:	0b9b      	lsrs	r3, r3, #14
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058e2:	0b5b      	lsrs	r3, r3, #13
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058f4:	0b1b      	lsrs	r3, r3, #12
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2200      	movs	r2, #0
 8005906:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590c:	2b00      	cmp	r3, #0
 800590e:	d163      	bne.n	80059d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005914:	009a      	lsls	r2, r3, #2
 8005916:	f640 73fc 	movw	r3, #4092	; 0xffc
 800591a:	4013      	ands	r3, r2
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005920:	0f92      	lsrs	r2, r2, #30
 8005922:	431a      	orrs	r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800592c:	0edb      	lsrs	r3, r3, #27
 800592e:	b2db      	uxtb	r3, r3
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	b2da      	uxtb	r2, r3
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800593e:	0e1b      	lsrs	r3, r3, #24
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	b2da      	uxtb	r2, r3
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005950:	0d5b      	lsrs	r3, r3, #21
 8005952:	b2db      	uxtb	r3, r3
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	b2da      	uxtb	r2, r3
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005962:	0c9b      	lsrs	r3, r3, #18
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	b2da      	uxtb	r2, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005974:	0bdb      	lsrs	r3, r3, #15
 8005976:	b2db      	uxtb	r3, r3
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	b2da      	uxtb	r2, r3
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	7e1b      	ldrb	r3, [r3, #24]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	3302      	adds	r3, #2
 8005998:	2201      	movs	r2, #1
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80059a2:	fb02 f203 	mul.w	r2, r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	7a1b      	ldrb	r3, [r3, #8]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	f003 030f 	and.w	r3, r3, #15
 80059b4:	2201      	movs	r2, #1
 80059b6:	409a      	lsls	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80059c4:	0a52      	lsrs	r2, r2, #9
 80059c6:	fb02 f203 	mul.w	r2, r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059d4:	661a      	str	r2, [r3, #96]	; 0x60
 80059d6:	e031      	b.n	8005a3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d11d      	bne.n	8005a1c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ee:	0c1b      	lsrs	r3, r3, #16
 80059f0:	431a      	orrs	r2, r3
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	3301      	adds	r3, #1
 80059fc:	029a      	lsls	r2, r3, #10
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a10:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	661a      	str	r2, [r3, #96]	; 0x60
 8005a1a:	e00f      	b.n	8005a3c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a58      	ldr	r2, [pc, #352]	; (8005b84 <HAL_SD_GetCardCSD+0x344>)
 8005a22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e09d      	b.n	8005b78 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a40:	0b9b      	lsrs	r3, r3, #14
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a52:	09db      	lsrs	r3, r3, #7
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a74:	0fdb      	lsrs	r3, r3, #31
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a80:	0f5b      	lsrs	r3, r3, #29
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f003 0303 	and.w	r3, r3, #3
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	0e9b      	lsrs	r3, r3, #26
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa4:	0d9b      	lsrs	r3, r3, #22
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab6:	0d5b      	lsrs	r3, r3, #21
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad2:	0c1b      	lsrs	r3, r3, #16
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	0bdb      	lsrs	r3, r3, #15
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afa:	0b9b      	lsrs	r3, r3, #14
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	0b5b      	lsrs	r3, r3, #13
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	0b1b      	lsrs	r3, r3, #12
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b36:	0a9b      	lsrs	r3, r3, #10
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4a:	0a1b      	lsrs	r3, r3, #8
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 0303 	and.w	r3, r3, #3
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b5e:	085b      	lsrs	r3, r3, #1
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	004005ff 	.word	0x004005ff

08005b88 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005be0:	b5b0      	push	{r4, r5, r7, lr}
 8005be2:	b08e      	sub	sp, #56	; 0x38
 8005be4:	af04      	add	r7, sp, #16
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d02e      	beq.n	8005c5e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c06:	d106      	bne.n	8005c16 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
 8005c14:	e029      	b.n	8005c6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c1c:	d10a      	bne.n	8005c34 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fb28 	bl	8006274 <SD_WideBus_Enable>
 8005c24:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38
 8005c32:	e01a      	b.n	8005c6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10a      	bne.n	8005c50 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fb65 	bl	800630a <SD_WideBus_Disable>
 8005c40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	639a      	str	r2, [r3, #56]	; 0x38
 8005c4e:	e00c      	b.n	8005c6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c54:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8005c5c:	e005      	b.n	8005c6a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00b      	beq.n	8005c8a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a26      	ldr	r2, [pc, #152]	; (8005d10 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c88:	e01f      	b.n	8005cca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681d      	ldr	r5, [r3, #0]
 8005cb0:	466c      	mov	r4, sp
 8005cb2:	f107 0314 	add.w	r3, r7, #20
 8005cb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005cba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005cbe:	f107 0308 	add.w	r3, r7, #8
 8005cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f001 faa7 	bl	8007218 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 fb7c 	bl	80073d0 <SDMMC_CmdBlockLength>
 8005cd8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00c      	beq.n	8005cfa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0a      	ldr	r2, [pc, #40]	; (8005d10 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005ce6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3728      	adds	r7, #40	; 0x28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bdb0      	pop	{r4, r5, r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	004005ff 	.word	0x004005ff

08005d14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005d20:	f107 030c 	add.w	r3, r7, #12
 8005d24:	4619      	mov	r1, r3
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fa7c 	bl	8006224 <SD_SendStatus>
 8005d2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	0a5b      	lsrs	r3, r3, #9
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005d4a:	693b      	ldr	r3, [r7, #16]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	2b82      	cmp	r3, #130	; 0x82
 8005d92:	d111      	bne.n	8005db8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 fbc3 	bl	8007524 <SDMMC_CmdStopTransfer>
 8005d9e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d008      	beq.n	8005db8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	431a      	orrs	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff fd3a 	bl	800582c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0208 	bic.w	r2, r2, #8
 8005dc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005dd0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f002 f82b 	bl	8007e3c <HAL_SD_RxCpltCallback>
#endif
}
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7fd f8aa 	bl	8002f58 <HAL_DMA_GetError>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d03e      	beq.n	8005e88 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e10:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e18:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d002      	beq.n	8005e26 <SD_DMAError+0x36>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d12d      	bne.n	8005e82 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a19      	ldr	r2, [pc, #100]	; (8005e90 <SD_DMAError+0xa0>)
 8005e2c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005e3c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005e4a:	6978      	ldr	r0, [r7, #20]
 8005e4c:	f7ff ff62 	bl	8005d14 <HAL_SD_GetCardState>
 8005e50:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d002      	beq.n	8005e5e <SD_DMAError+0x6e>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b05      	cmp	r3, #5
 8005e5c:	d10a      	bne.n	8005e74 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 fb5e 	bl	8007524 <SDMMC_CmdStopTransfer>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005e82:	6978      	ldr	r0, [r7, #20]
 8005e84:	f7ff fcd2 	bl	800582c <HAL_SD_ErrorCallback>
#endif
  }
}
 8005e88:	bf00      	nop
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	004005ff 	.word	0x004005ff

08005e94 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f240 523a 	movw	r2, #1338	; 0x53a
 8005eaa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff ff31 	bl	8005d14 <HAL_SD_GetCardState>
 8005eb2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b06      	cmp	r3, #6
 8005ec6:	d002      	beq.n	8005ece <SD_DMATxAbort+0x3a>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d10a      	bne.n	8005ee4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f001 fb26 	bl	8007524 <SDMMC_CmdStopTransfer>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d103      	bne.n	8005ef4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f001 ff91 	bl	8007e14 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005ef2:	e002      	b.n	8005efa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f7ff fc99 	bl	800582c <HAL_SD_ErrorCallback>
}
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f7ff fefa 	bl	8005d14 <HAL_SD_GetCardState>
 8005f20:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2b06      	cmp	r3, #6
 8005f34:	d002      	beq.n	8005f3c <SD_DMARxAbort+0x3a>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b05      	cmp	r3, #5
 8005f3a:	d10a      	bne.n	8005f52 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 faef 	bl	8007524 <SDMMC_CmdStopTransfer>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f001 ff5a 	bl	8007e14 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005f60:	e002      	b.n	8005f68 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff fc62 	bl	800582c <HAL_SD_ErrorCallback>
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f70:	b5b0      	push	{r4, r5, r7, lr}
 8005f72:	b094      	sub	sp, #80	; 0x50
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 f9a1 	bl	80072c8 <SDIO_GetPowerState>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d102      	bne.n	8005f92 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005f90:	e0b6      	b.n	8006100 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d02f      	beq.n	8005ffa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f001 fbca 	bl	8007738 <SDMMC_CmdSendCID>
 8005fa4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <SD_InitCard+0x40>
    {
      return errorstate;
 8005fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fae:	e0a7      	b.n	8006100 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f001 f9cb 	bl	8007352 <SDIO_GetResponse>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2104      	movs	r1, #4
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f9c2 	bl	8007352 <SDIO_GetResponse>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2108      	movs	r1, #8
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 f9b9 	bl	8007352 <SDIO_GetResponse>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	210c      	movs	r1, #12
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 f9b0 	bl	8007352 <SDIO_GetResponse>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d00d      	beq.n	800601e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f107 020e 	add.w	r2, r7, #14
 800600a:	4611      	mov	r1, r2
 800600c:	4618      	mov	r0, r3
 800600e:	f001 fbd0 	bl	80077b2 <SDMMC_CmdSetRelAdd>
 8006012:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <SD_InitCard+0xae>
    {
      return errorstate;
 800601a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800601c:	e070      	b.n	8006100 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	2b03      	cmp	r3, #3
 8006024:	d036      	beq.n	8006094 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006026:	89fb      	ldrh	r3, [r7, #14]
 8006028:	461a      	mov	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f001 fb9a 	bl	8007774 <SDMMC_CmdSendCSD>
 8006040:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604a:	e059      	b.n	8006100 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f001 f97d 	bl	8007352 <SDIO_GetResponse>
 8006058:	4602      	mov	r2, r0
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2104      	movs	r1, #4
 8006064:	4618      	mov	r0, r3
 8006066:	f001 f974 	bl	8007352 <SDIO_GetResponse>
 800606a:	4602      	mov	r2, r0
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2108      	movs	r1, #8
 8006076:	4618      	mov	r0, r3
 8006078:	f001 f96b 	bl	8007352 <SDIO_GetResponse>
 800607c:	4602      	mov	r2, r0
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	210c      	movs	r1, #12
 8006088:	4618      	mov	r0, r3
 800608a:	f001 f962 	bl	8007352 <SDIO_GetResponse>
 800608e:	4602      	mov	r2, r0
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2104      	movs	r1, #4
 800609a:	4618      	mov	r0, r3
 800609c:	f001 f959 	bl	8007352 <SDIO_GetResponse>
 80060a0:	4603      	mov	r3, r0
 80060a2:	0d1a      	lsrs	r2, r3, #20
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80060a8:	f107 0310 	add.w	r3, r7, #16
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff fbc6 	bl	8005840 <HAL_SD_GetCardCSD>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060be:	e01f      	b.n	8006100 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6819      	ldr	r1, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	041b      	lsls	r3, r3, #16
 80060ca:	461a      	mov	r2, r3
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	4608      	mov	r0, r1
 80060d2:	f001 fa49 	bl	8007568 <SDMMC_CmdSelDesel>
 80060d6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80060d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <SD_InitCard+0x172>
  {
    return errorstate;
 80060de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e0:	e00e      	b.n	8006100 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681d      	ldr	r5, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	466c      	mov	r4, sp
 80060ea:	f103 0210 	add.w	r2, r3, #16
 80060ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80060f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060f4:	3304      	adds	r3, #4
 80060f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060f8:	4628      	mov	r0, r5
 80060fa:	f001 f88d 	bl	8007218 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3740      	adds	r7, #64	; 0x40
 8006104:	46bd      	mov	sp, r7
 8006106:	bdb0      	pop	{r4, r5, r7, pc}

08006108 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	2300      	movs	r3, #0
 800611a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4618      	mov	r0, r3
 8006122:	f001 fa44 	bl	80075ae <SDMMC_CmdGoIdleState>
 8006126:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <SD_PowerON+0x2a>
  {
    return errorstate;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	e072      	b.n	8006218 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4618      	mov	r0, r3
 8006138:	f001 fa57 	bl	80075ea <SDMMC_CmdOperCond>
 800613c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00d      	beq.n	8006160 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f001 fa2d 	bl	80075ae <SDMMC_CmdGoIdleState>
 8006154:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d004      	beq.n	8006166 <SD_PowerON+0x5e>
    {
      return errorstate;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	e05b      	b.n	8006218 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800616a:	2b01      	cmp	r3, #1
 800616c:	d137      	bne.n	80061de <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2100      	movs	r1, #0
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fa57 	bl	8007628 <SDMMC_CmdAppCommand>
 800617a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d02d      	beq.n	80061de <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006186:	e047      	b.n	8006218 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2100      	movs	r1, #0
 800618e:	4618      	mov	r0, r3
 8006190:	f001 fa4a 	bl	8007628 <SDMMC_CmdAppCommand>
 8006194:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <SD_PowerON+0x98>
    {
      return errorstate;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	e03b      	b.n	8006218 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	491e      	ldr	r1, [pc, #120]	; (8006220 <SD_PowerON+0x118>)
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 fa60 	bl	800766c <SDMMC_CmdAppOperCommand>
 80061ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80061b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061b8:	e02e      	b.n	8006218 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2100      	movs	r1, #0
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 f8c6 	bl	8007352 <SDIO_GetResponse>
 80061c6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	0fdb      	lsrs	r3, r3, #31
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <SD_PowerON+0xcc>
 80061d0:	2301      	movs	r3, #1
 80061d2:	e000      	b.n	80061d6 <SD_PowerON+0xce>
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]

    count++;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	3301      	adds	r3, #1
 80061dc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d802      	bhi.n	80061ee <SD_PowerON+0xe6>
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0cc      	beq.n	8006188 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d902      	bls.n	80061fe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80061f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061fc:	e00c      	b.n	8006218 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	645a      	str	r2, [r3, #68]	; 0x44
 800620e:	e002      	b.n	8006216 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	c1100000 	.word	0xc1100000

08006224 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d102      	bne.n	800623a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006234:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006238:	e018      	b.n	800626c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006242:	041b      	lsls	r3, r3, #16
 8006244:	4619      	mov	r1, r3
 8006246:	4610      	mov	r0, r2
 8006248:	f001 fad4 	bl	80077f4 <SDMMC_CmdSendStatus>
 800624c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	e009      	b.n	800626c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2100      	movs	r1, #0
 800625e:	4618      	mov	r0, r3
 8006260:	f001 f877 	bl	8007352 <SDIO_GetResponse>
 8006264:	4602      	mov	r2, r0
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	2300      	movs	r3, #0
 8006282:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f001 f861 	bl	8007352 <SDIO_GetResponse>
 8006290:	4603      	mov	r3, r0
 8006292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800629a:	d102      	bne.n	80062a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800629c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062a0:	e02f      	b.n	8006302 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80062a2:	f107 030c 	add.w	r3, r7, #12
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f879 	bl	80063a0 <SD_FindSCR>
 80062ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	e023      	b.n	8006302 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01c      	beq.n	80062fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062cc:	041b      	lsls	r3, r3, #16
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f001 f9a9 	bl	8007628 <SDMMC_CmdAppCommand>
 80062d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	e00f      	b.n	8006302 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2102      	movs	r1, #2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f001 f9e2 	bl	80076b2 <SDMMC_CmdBusWidth>
 80062ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	e003      	b.n	8006302 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	e001      	b.n	8006302 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b086      	sub	sp, #24
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	2300      	movs	r3, #0
 8006318:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f001 f816 	bl	8007352 <SDIO_GetResponse>
 8006326:	4603      	mov	r3, r0
 8006328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006330:	d102      	bne.n	8006338 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006336:	e02f      	b.n	8006398 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006338:	f107 030c 	add.w	r3, r7, #12
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f82e 	bl	80063a0 <SD_FindSCR>
 8006344:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	e023      	b.n	8006398 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01c      	beq.n	8006394 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006362:	041b      	lsls	r3, r3, #16
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f001 f95e 	bl	8007628 <SDMMC_CmdAppCommand>
 800636c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	e00f      	b.n	8006398 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f001 f997 	bl	80076b2 <SDMMC_CmdBusWidth>
 8006384:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	e003      	b.n	8006398 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006390:	2300      	movs	r3, #0
 8006392:	e001      	b.n	8006398 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006394:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80063a0:	b590      	push	{r4, r7, lr}
 80063a2:	b08f      	sub	sp, #60	; 0x3c
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80063aa:	f7fc fa11 	bl	80027d0 <HAL_GetTick>
 80063ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80063b4:	2300      	movs	r3, #0
 80063b6:	60bb      	str	r3, [r7, #8]
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2108      	movs	r1, #8
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 f802 	bl	80073d0 <SDMMC_CmdBlockLength>
 80063cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	e0b2      	b.n	800653e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f001 f91f 	bl	8007628 <SDMMC_CmdAppCommand>
 80063ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	e0a3      	b.n	800653e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80063f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80063fc:	2308      	movs	r3, #8
 80063fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006400:	2330      	movs	r3, #48	; 0x30
 8006402:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006404:	2302      	movs	r3, #2
 8006406:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006408:	2300      	movs	r3, #0
 800640a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800640c:	2301      	movs	r3, #1
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f107 0210 	add.w	r2, r7, #16
 8006418:	4611      	mov	r1, r2
 800641a:	4618      	mov	r0, r3
 800641c:	f000 ffac 	bl	8007378 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f001 f966 	bl	80076f6 <SDMMC_CmdSendSCR>
 800642a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	2b00      	cmp	r3, #0
 8006430:	d02a      	beq.n	8006488 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	e083      	b.n	800653e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00f      	beq.n	8006464 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6819      	ldr	r1, [r3, #0]
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	f107 0208 	add.w	r2, r7, #8
 8006450:	18d4      	adds	r4, r2, r3
 8006452:	4608      	mov	r0, r1
 8006454:	f000 ff0b 	bl	800726e <SDIO_ReadFIFO>
 8006458:	4603      	mov	r3, r0
 800645a:	6023      	str	r3, [r4, #0]
      index++;
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	3301      	adds	r3, #1
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
 8006462:	e006      	b.n	8006472 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d012      	beq.n	8006498 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006472:	f7fc f9ad 	bl	80027d0 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006480:	d102      	bne.n	8006488 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006482:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006486:	e05a      	b.n	800653e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800648e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0cf      	beq.n	8006436 <SD_FindSCR+0x96>
 8006496:	e000      	b.n	800649a <SD_FindSCR+0xfa>
      break;
 8006498:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d005      	beq.n	80064b4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2208      	movs	r2, #8
 80064ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80064b0:	2308      	movs	r3, #8
 80064b2:	e044      	b.n	800653e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2202      	movs	r2, #2
 80064c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80064ca:	2302      	movs	r3, #2
 80064cc:	e037      	b.n	800653e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2220      	movs	r2, #32
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80064e4:	2320      	movs	r3, #32
 80064e6:	e02a      	b.n	800653e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	061a      	lsls	r2, r3, #24
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006508:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	0e1b      	lsrs	r3, r3, #24
 800650e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006512:	601a      	str	r2, [r3, #0]
    scr++;
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	3304      	adds	r3, #4
 8006518:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	061a      	lsls	r2, r3, #24
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006526:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	0a1b      	lsrs	r3, r3, #8
 800652c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006530:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	0e1b      	lsrs	r3, r3, #24
 8006536:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	373c      	adds	r7, #60	; 0x3c
 8006542:	46bd      	mov	sp, r7
 8006544:	bd90      	pop	{r4, r7, pc}

08006546 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d03f      	beq.n	80065e0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]
 8006564:	e033      	b.n	80065ce <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fe7f 	bl	800726e <SDIO_ReadFIFO>
 8006570:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	b2da      	uxtb	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	701a      	strb	r2, [r3, #0]
      tmp++;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	3301      	adds	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	3b01      	subs	r3, #1
 8006584:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	0a1b      	lsrs	r3, r3, #8
 800658a:	b2da      	uxtb	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	3b01      	subs	r3, #1
 800659a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	0c1b      	lsrs	r3, r3, #16
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3301      	adds	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	0e1b      	lsrs	r3, r3, #24
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	3301      	adds	r3, #1
 80065c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	3301      	adds	r3, #1
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2b07      	cmp	r3, #7
 80065d2:	d9c8      	bls.n	8006566 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80065e0:	bf00      	nop
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d043      	beq.n	800668a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006602:	2300      	movs	r3, #0
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	e037      	b.n	8006678 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3301      	adds	r3, #1
 8006612:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	3b01      	subs	r3, #1
 8006618:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	021a      	lsls	r2, r3, #8
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4313      	orrs	r3, r2
 8006624:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	3b01      	subs	r3, #1
 8006630:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	041a      	lsls	r2, r3, #16
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4313      	orrs	r3, r2
 800663c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3301      	adds	r3, #1
 8006642:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	3b01      	subs	r3, #1
 8006648:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	061a      	lsls	r2, r3, #24
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	4313      	orrs	r3, r2
 8006654:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	3b01      	subs	r3, #1
 8006660:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f107 0208 	add.w	r2, r7, #8
 800666a:	4611      	mov	r1, r2
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fe0b 	bl	8007288 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	3301      	adds	r3, #1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b07      	cmp	r3, #7
 800667c:	d9c4      	bls.n	8006608 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800668a:	bf00      	nop
 800668c:	3718      	adds	r7, #24
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b082      	sub	sp, #8
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e041      	b.n	8006728 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d106      	bne.n	80066be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f839 	bl	8006730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2202      	movs	r2, #2
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f000 f9d7 	bl	8006a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b01      	cmp	r3, #1
 8006756:	d001      	beq.n	800675c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e04e      	b.n	80067fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a23      	ldr	r2, [pc, #140]	; (8006808 <HAL_TIM_Base_Start_IT+0xc4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d022      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006786:	d01d      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a1f      	ldr	r2, [pc, #124]	; (800680c <HAL_TIM_Base_Start_IT+0xc8>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d018      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1e      	ldr	r2, [pc, #120]	; (8006810 <HAL_TIM_Base_Start_IT+0xcc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d013      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1c      	ldr	r2, [pc, #112]	; (8006814 <HAL_TIM_Base_Start_IT+0xd0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00e      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <HAL_TIM_Base_Start_IT+0xd4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d009      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a19      	ldr	r2, [pc, #100]	; (800681c <HAL_TIM_Base_Start_IT+0xd8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d004      	beq.n	80067c4 <HAL_TIM_Base_Start_IT+0x80>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a18      	ldr	r2, [pc, #96]	; (8006820 <HAL_TIM_Base_Start_IT+0xdc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d111      	bne.n	80067e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b06      	cmp	r3, #6
 80067d4:	d010      	beq.n	80067f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f042 0201 	orr.w	r2, r2, #1
 80067e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e6:	e007      	b.n	80067f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40010000 	.word	0x40010000
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800
 8006814:	40000c00 	.word	0x40000c00
 8006818:	40010400 	.word	0x40010400
 800681c:	40014000 	.word	0x40014000
 8006820:	40001800 	.word	0x40001800

08006824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b02      	cmp	r3, #2
 8006838:	d122      	bne.n	8006880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b02      	cmp	r3, #2
 8006846:	d11b      	bne.n	8006880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f06f 0202 	mvn.w	r2, #2
 8006850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f8ee 	bl	8006a48 <HAL_TIM_IC_CaptureCallback>
 800686c:	e005      	b.n	800687a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f8e0 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f8f1 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b04      	cmp	r3, #4
 800688c:	d122      	bne.n	80068d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0304 	and.w	r3, r3, #4
 8006898:	2b04      	cmp	r3, #4
 800689a:	d11b      	bne.n	80068d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0204 	mvn.w	r2, #4
 80068a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f8c4 	bl	8006a48 <HAL_TIM_IC_CaptureCallback>
 80068c0:	e005      	b.n	80068ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f8b6 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f8c7 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d122      	bne.n	8006928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d11b      	bne.n	8006928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0208 	mvn.w	r2, #8
 80068f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2204      	movs	r2, #4
 80068fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	f003 0303 	and.w	r3, r3, #3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f89a 	bl	8006a48 <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f88c 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f89d 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0310 	and.w	r3, r3, #16
 8006932:	2b10      	cmp	r3, #16
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0310 	and.w	r3, r3, #16
 8006940:	2b10      	cmp	r3, #16
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0210 	mvn.w	r2, #16
 800694c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2208      	movs	r2, #8
 8006952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f870 	bl	8006a48 <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f862 	bl	8006a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f873 	bl	8006a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b01      	cmp	r3, #1
 8006988:	d10e      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b01      	cmp	r3, #1
 8006996:	d107      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0201 	mvn.w	r2, #1
 80069a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fb fbbe 	bl	8002124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b2:	2b80      	cmp	r3, #128	; 0x80
 80069b4:	d10e      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c0:	2b80      	cmp	r3, #128	; 0x80
 80069c2:	d107      	bne.n	80069d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f902 	bl	8006bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d10e      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ec:	2b40      	cmp	r3, #64	; 0x40
 80069ee:	d107      	bne.n	8006a00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f838 	bl	8006a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	d10e      	bne.n	8006a2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	d107      	bne.n	8006a2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f06f 0220 	mvn.w	r2, #32
 8006a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8cc 	bl	8006bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a40      	ldr	r2, [pc, #256]	; (8006b98 <TIM_Base_SetConfig+0x114>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d013      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa2:	d00f      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a3d      	ldr	r2, [pc, #244]	; (8006b9c <TIM_Base_SetConfig+0x118>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00b      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a3c      	ldr	r2, [pc, #240]	; (8006ba0 <TIM_Base_SetConfig+0x11c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d007      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a3b      	ldr	r2, [pc, #236]	; (8006ba4 <TIM_Base_SetConfig+0x120>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d003      	beq.n	8006ac4 <TIM_Base_SetConfig+0x40>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a3a      	ldr	r2, [pc, #232]	; (8006ba8 <TIM_Base_SetConfig+0x124>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d108      	bne.n	8006ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a2f      	ldr	r2, [pc, #188]	; (8006b98 <TIM_Base_SetConfig+0x114>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d02b      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae4:	d027      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2c      	ldr	r2, [pc, #176]	; (8006b9c <TIM_Base_SetConfig+0x118>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d023      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2b      	ldr	r2, [pc, #172]	; (8006ba0 <TIM_Base_SetConfig+0x11c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01f      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a2a      	ldr	r2, [pc, #168]	; (8006ba4 <TIM_Base_SetConfig+0x120>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d01b      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a29      	ldr	r2, [pc, #164]	; (8006ba8 <TIM_Base_SetConfig+0x124>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d017      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a28      	ldr	r2, [pc, #160]	; (8006bac <TIM_Base_SetConfig+0x128>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a27      	ldr	r2, [pc, #156]	; (8006bb0 <TIM_Base_SetConfig+0x12c>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00f      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a26      	ldr	r2, [pc, #152]	; (8006bb4 <TIM_Base_SetConfig+0x130>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00b      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a25      	ldr	r2, [pc, #148]	; (8006bb8 <TIM_Base_SetConfig+0x134>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d007      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a24      	ldr	r2, [pc, #144]	; (8006bbc <TIM_Base_SetConfig+0x138>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d003      	beq.n	8006b36 <TIM_Base_SetConfig+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a23      	ldr	r2, [pc, #140]	; (8006bc0 <TIM_Base_SetConfig+0x13c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d108      	bne.n	8006b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a0a      	ldr	r2, [pc, #40]	; (8006b98 <TIM_Base_SetConfig+0x114>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <TIM_Base_SetConfig+0xf8>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a0c      	ldr	r2, [pc, #48]	; (8006ba8 <TIM_Base_SetConfig+0x124>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d103      	bne.n	8006b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	615a      	str	r2, [r3, #20]
}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40010000 	.word	0x40010000
 8006b9c:	40000400 	.word	0x40000400
 8006ba0:	40000800 	.word	0x40000800
 8006ba4:	40000c00 	.word	0x40000c00
 8006ba8:	40010400 	.word	0x40010400
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40014400 	.word	0x40014400
 8006bb4:	40014800 	.word	0x40014800
 8006bb8:	40001800 	.word	0x40001800
 8006bbc:	40001c00 	.word	0x40001c00
 8006bc0:	40002000 	.word	0x40002000

08006bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e03f      	b.n	8006c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fb fbc6 	bl	80023a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2224      	movs	r2, #36	; 0x24
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 f929 	bl	8006e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	691a      	ldr	r2, [r3, #16]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695a      	ldr	r2, [r3, #20]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b08a      	sub	sp, #40	; 0x28
 8006c8a:	af02      	add	r7, sp, #8
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	603b      	str	r3, [r7, #0]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c96:	2300      	movs	r3, #0
 8006c98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d17c      	bne.n	8006da0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <HAL_UART_Transmit+0x2c>
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e075      	b.n	8006da2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_UART_Transmit+0x3e>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e06e      	b.n	8006da2 <HAL_UART_Transmit+0x11c>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2221      	movs	r2, #33	; 0x21
 8006cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cda:	f7fb fd79 	bl	80027d0 <HAL_GetTick>
 8006cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	88fa      	ldrh	r2, [r7, #6]
 8006ce4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	88fa      	ldrh	r2, [r7, #6]
 8006cea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf4:	d108      	bne.n	8006d08 <HAL_UART_Transmit+0x82>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	e003      	b.n	8006d10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006d18:	e02a      	b.n	8006d70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2200      	movs	r2, #0
 8006d22:	2180      	movs	r1, #128	; 0x80
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f840 	bl	8006daa <UART_WaitOnFlagUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e036      	b.n	8006da2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10b      	bne.n	8006d52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	3302      	adds	r3, #2
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	e007      	b.n	8006d62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	781a      	ldrb	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1cf      	bne.n	8006d1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2200      	movs	r2, #0
 8006d82:	2140      	movs	r1, #64	; 0x40
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 f810 	bl	8006daa <UART_WaitOnFlagUntilTimeout>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e006      	b.n	8006da2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e000      	b.n	8006da2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006da0:	2302      	movs	r3, #2
  }
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b090      	sub	sp, #64	; 0x40
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	60f8      	str	r0, [r7, #12]
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	603b      	str	r3, [r7, #0]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dba:	e050      	b.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc2:	d04c      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d007      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0x30>
 8006dca:	f7fb fd01 	bl	80027d0 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d241      	bcs.n	8006e5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	330c      	adds	r3, #12
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	330c      	adds	r3, #12
 8006df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dfa:	637a      	str	r2, [r7, #52]	; 0x34
 8006dfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e02:	e841 2300 	strex	r3, r2, [r1]
 8006e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e5      	bne.n	8006dda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3314      	adds	r3, #20
 8006e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f023 0301 	bic.w	r3, r3, #1
 8006e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3314      	adds	r3, #20
 8006e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e2e:	623a      	str	r2, [r7, #32]
 8006e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	69f9      	ldr	r1, [r7, #28]
 8006e34:	6a3a      	ldr	r2, [r7, #32]
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e5      	bne.n	8006e0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2220      	movs	r2, #32
 8006e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e00f      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4013      	ands	r3, r2
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	bf0c      	ite	eq
 8006e6e:	2301      	moveq	r3, #1
 8006e70:	2300      	movne	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d09f      	beq.n	8006dbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3740      	adds	r7, #64	; 0x40
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	b09f      	sub	sp, #124	; 0x7c
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e9e:	68d9      	ldr	r1, [r3, #12]
 8006ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	ea40 0301 	orr.w	r3, r0, r1
 8006ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eac:	689a      	ldr	r2, [r3, #8]
 8006eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ecc:	f021 010c 	bic.w	r1, r1, #12
 8006ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee6:	6999      	ldr	r1, [r3, #24]
 8006ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	ea40 0301 	orr.w	r3, r0, r1
 8006ef0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4bc5      	ldr	r3, [pc, #788]	; (800720c <UART_SetConfig+0x384>)
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d004      	beq.n	8006f06 <UART_SetConfig+0x7e>
 8006efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	4bc3      	ldr	r3, [pc, #780]	; (8007210 <UART_SetConfig+0x388>)
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d103      	bne.n	8006f0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f06:	f7fe f84f 	bl	8004fa8 <HAL_RCC_GetPCLK2Freq>
 8006f0a:	6778      	str	r0, [r7, #116]	; 0x74
 8006f0c:	e002      	b.n	8006f14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f0e:	f7fe f837 	bl	8004f80 <HAL_RCC_GetPCLK1Freq>
 8006f12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f16:	69db      	ldr	r3, [r3, #28]
 8006f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f1c:	f040 80b6 	bne.w	800708c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f22:	461c      	mov	r4, r3
 8006f24:	f04f 0500 	mov.w	r5, #0
 8006f28:	4622      	mov	r2, r4
 8006f2a:	462b      	mov	r3, r5
 8006f2c:	1891      	adds	r1, r2, r2
 8006f2e:	6439      	str	r1, [r7, #64]	; 0x40
 8006f30:	415b      	adcs	r3, r3
 8006f32:	647b      	str	r3, [r7, #68]	; 0x44
 8006f34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f38:	1912      	adds	r2, r2, r4
 8006f3a:	eb45 0303 	adc.w	r3, r5, r3
 8006f3e:	f04f 0000 	mov.w	r0, #0
 8006f42:	f04f 0100 	mov.w	r1, #0
 8006f46:	00d9      	lsls	r1, r3, #3
 8006f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f4c:	00d0      	lsls	r0, r2, #3
 8006f4e:	4602      	mov	r2, r0
 8006f50:	460b      	mov	r3, r1
 8006f52:	1911      	adds	r1, r2, r4
 8006f54:	6639      	str	r1, [r7, #96]	; 0x60
 8006f56:	416b      	adcs	r3, r5
 8006f58:	667b      	str	r3, [r7, #100]	; 0x64
 8006f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	1891      	adds	r1, r2, r2
 8006f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f68:	415b      	adcs	r3, r3
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006f74:	f7f9 f994 	bl	80002a0 <__aeabi_uldivmod>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4ba5      	ldr	r3, [pc, #660]	; (8007214 <UART_SetConfig+0x38c>)
 8006f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f82:	095b      	lsrs	r3, r3, #5
 8006f84:	011e      	lsls	r6, r3, #4
 8006f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f88:	461c      	mov	r4, r3
 8006f8a:	f04f 0500 	mov.w	r5, #0
 8006f8e:	4622      	mov	r2, r4
 8006f90:	462b      	mov	r3, r5
 8006f92:	1891      	adds	r1, r2, r2
 8006f94:	6339      	str	r1, [r7, #48]	; 0x30
 8006f96:	415b      	adcs	r3, r3
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f9e:	1912      	adds	r2, r2, r4
 8006fa0:	eb45 0303 	adc.w	r3, r5, r3
 8006fa4:	f04f 0000 	mov.w	r0, #0
 8006fa8:	f04f 0100 	mov.w	r1, #0
 8006fac:	00d9      	lsls	r1, r3, #3
 8006fae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fb2:	00d0      	lsls	r0, r2, #3
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	1911      	adds	r1, r2, r4
 8006fba:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fbc:	416b      	adcs	r3, r5
 8006fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	f04f 0300 	mov.w	r3, #0
 8006fca:	1891      	adds	r1, r2, r2
 8006fcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8006fce:	415b      	adcs	r3, r3
 8006fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006fda:	f7f9 f961 	bl	80002a0 <__aeabi_uldivmod>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4b8c      	ldr	r3, [pc, #560]	; (8007214 <UART_SetConfig+0x38c>)
 8006fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	2164      	movs	r1, #100	; 0x64
 8006fec:	fb01 f303 	mul.w	r3, r1, r3
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	3332      	adds	r3, #50	; 0x32
 8006ff6:	4a87      	ldr	r2, [pc, #540]	; (8007214 <UART_SetConfig+0x38c>)
 8006ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007004:	441e      	add	r6, r3
 8007006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007008:	4618      	mov	r0, r3
 800700a:	f04f 0100 	mov.w	r1, #0
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	1894      	adds	r4, r2, r2
 8007014:	623c      	str	r4, [r7, #32]
 8007016:	415b      	adcs	r3, r3
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
 800701a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800701e:	1812      	adds	r2, r2, r0
 8007020:	eb41 0303 	adc.w	r3, r1, r3
 8007024:	f04f 0400 	mov.w	r4, #0
 8007028:	f04f 0500 	mov.w	r5, #0
 800702c:	00dd      	lsls	r5, r3, #3
 800702e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007032:	00d4      	lsls	r4, r2, #3
 8007034:	4622      	mov	r2, r4
 8007036:	462b      	mov	r3, r5
 8007038:	1814      	adds	r4, r2, r0
 800703a:	653c      	str	r4, [r7, #80]	; 0x50
 800703c:	414b      	adcs	r3, r1
 800703e:	657b      	str	r3, [r7, #84]	; 0x54
 8007040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	461a      	mov	r2, r3
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	1891      	adds	r1, r2, r2
 800704c:	61b9      	str	r1, [r7, #24]
 800704e:	415b      	adcs	r3, r3
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007056:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800705a:	f7f9 f921 	bl	80002a0 <__aeabi_uldivmod>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	4b6c      	ldr	r3, [pc, #432]	; (8007214 <UART_SetConfig+0x38c>)
 8007064:	fba3 1302 	umull	r1, r3, r3, r2
 8007068:	095b      	lsrs	r3, r3, #5
 800706a:	2164      	movs	r1, #100	; 0x64
 800706c:	fb01 f303 	mul.w	r3, r1, r3
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	3332      	adds	r3, #50	; 0x32
 8007076:	4a67      	ldr	r2, [pc, #412]	; (8007214 <UART_SetConfig+0x38c>)
 8007078:	fba2 2303 	umull	r2, r3, r2, r3
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	f003 0207 	and.w	r2, r3, #7
 8007082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4432      	add	r2, r6
 8007088:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800708a:	e0b9      	b.n	8007200 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800708c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800708e:	461c      	mov	r4, r3
 8007090:	f04f 0500 	mov.w	r5, #0
 8007094:	4622      	mov	r2, r4
 8007096:	462b      	mov	r3, r5
 8007098:	1891      	adds	r1, r2, r2
 800709a:	6139      	str	r1, [r7, #16]
 800709c:	415b      	adcs	r3, r3
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80070a4:	1912      	adds	r2, r2, r4
 80070a6:	eb45 0303 	adc.w	r3, r5, r3
 80070aa:	f04f 0000 	mov.w	r0, #0
 80070ae:	f04f 0100 	mov.w	r1, #0
 80070b2:	00d9      	lsls	r1, r3, #3
 80070b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070b8:	00d0      	lsls	r0, r2, #3
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	eb12 0804 	adds.w	r8, r2, r4
 80070c2:	eb43 0905 	adc.w	r9, r3, r5
 80070c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f04f 0100 	mov.w	r1, #0
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	008b      	lsls	r3, r1, #2
 80070da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070de:	0082      	lsls	r2, r0, #2
 80070e0:	4640      	mov	r0, r8
 80070e2:	4649      	mov	r1, r9
 80070e4:	f7f9 f8dc 	bl	80002a0 <__aeabi_uldivmod>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4b49      	ldr	r3, [pc, #292]	; (8007214 <UART_SetConfig+0x38c>)
 80070ee:	fba3 2302 	umull	r2, r3, r3, r2
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	011e      	lsls	r6, r3, #4
 80070f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f8:	4618      	mov	r0, r3
 80070fa:	f04f 0100 	mov.w	r1, #0
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	1894      	adds	r4, r2, r2
 8007104:	60bc      	str	r4, [r7, #8]
 8007106:	415b      	adcs	r3, r3
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800710e:	1812      	adds	r2, r2, r0
 8007110:	eb41 0303 	adc.w	r3, r1, r3
 8007114:	f04f 0400 	mov.w	r4, #0
 8007118:	f04f 0500 	mov.w	r5, #0
 800711c:	00dd      	lsls	r5, r3, #3
 800711e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007122:	00d4      	lsls	r4, r2, #3
 8007124:	4622      	mov	r2, r4
 8007126:	462b      	mov	r3, r5
 8007128:	1814      	adds	r4, r2, r0
 800712a:	64bc      	str	r4, [r7, #72]	; 0x48
 800712c:	414b      	adcs	r3, r1
 800712e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	4618      	mov	r0, r3
 8007136:	f04f 0100 	mov.w	r1, #0
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	f04f 0300 	mov.w	r3, #0
 8007142:	008b      	lsls	r3, r1, #2
 8007144:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007148:	0082      	lsls	r2, r0, #2
 800714a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800714e:	f7f9 f8a7 	bl	80002a0 <__aeabi_uldivmod>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4b2f      	ldr	r3, [pc, #188]	; (8007214 <UART_SetConfig+0x38c>)
 8007158:	fba3 1302 	umull	r1, r3, r3, r2
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	2164      	movs	r1, #100	; 0x64
 8007160:	fb01 f303 	mul.w	r3, r1, r3
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	3332      	adds	r3, #50	; 0x32
 800716a:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <UART_SetConfig+0x38c>)
 800716c:	fba2 2303 	umull	r2, r3, r2, r3
 8007170:	095b      	lsrs	r3, r3, #5
 8007172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007176:	441e      	add	r6, r3
 8007178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800717a:	4618      	mov	r0, r3
 800717c:	f04f 0100 	mov.w	r1, #0
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	1894      	adds	r4, r2, r2
 8007186:	603c      	str	r4, [r7, #0]
 8007188:	415b      	adcs	r3, r3
 800718a:	607b      	str	r3, [r7, #4]
 800718c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007190:	1812      	adds	r2, r2, r0
 8007192:	eb41 0303 	adc.w	r3, r1, r3
 8007196:	f04f 0400 	mov.w	r4, #0
 800719a:	f04f 0500 	mov.w	r5, #0
 800719e:	00dd      	lsls	r5, r3, #3
 80071a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80071a4:	00d4      	lsls	r4, r2, #3
 80071a6:	4622      	mov	r2, r4
 80071a8:	462b      	mov	r3, r5
 80071aa:	eb12 0a00 	adds.w	sl, r2, r0
 80071ae:	eb43 0b01 	adc.w	fp, r3, r1
 80071b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f04f 0100 	mov.w	r1, #0
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	008b      	lsls	r3, r1, #2
 80071c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80071ca:	0082      	lsls	r2, r0, #2
 80071cc:	4650      	mov	r0, sl
 80071ce:	4659      	mov	r1, fp
 80071d0:	f7f9 f866 	bl	80002a0 <__aeabi_uldivmod>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <UART_SetConfig+0x38c>)
 80071da:	fba3 1302 	umull	r1, r3, r3, r2
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	2164      	movs	r1, #100	; 0x64
 80071e2:	fb01 f303 	mul.w	r3, r1, r3
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	3332      	adds	r3, #50	; 0x32
 80071ec:	4a09      	ldr	r2, [pc, #36]	; (8007214 <UART_SetConfig+0x38c>)
 80071ee:	fba2 2303 	umull	r2, r3, r2, r3
 80071f2:	095b      	lsrs	r3, r3, #5
 80071f4:	f003 020f 	and.w	r2, r3, #15
 80071f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4432      	add	r2, r6
 80071fe:	609a      	str	r2, [r3, #8]
}
 8007200:	bf00      	nop
 8007202:	377c      	adds	r7, #124	; 0x7c
 8007204:	46bd      	mov	sp, r7
 8007206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720a:	bf00      	nop
 800720c:	40011000 	.word	0x40011000
 8007210:	40011400 	.word	0x40011400
 8007214:	51eb851f 	.word	0x51eb851f

08007218 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8007218:	b084      	sub	sp, #16
 800721a:	b480      	push	{r7}
 800721c:	b085      	sub	sp, #20
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	f107 001c 	add.w	r0, r7, #28
 8007226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800722e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007230:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007232:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007236:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800723a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800723e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007242:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007252:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	b004      	add	sp, #16
 800726c:	4770      	bx	lr

0800726e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800727c:	4618      	mov	r0, r3
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b082      	sub	sp, #8
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2203      	movs	r2, #3
 80072b6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80072b8:	2002      	movs	r0, #2
 80072ba:	f7fb fa95 	bl	80027e8 <HAL_Delay>
  
  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0303 	and.w	r3, r3, #3
}
 80072d8:	4618      	mov	r0, r3
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007302:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007308:	431a      	orrs	r2, r3
                       Command->CPSM);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800730e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800731e:	f023 030f 	bic.w	r3, r3, #15
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	b2db      	uxtb	r3, r3
}
 8007346:	4618      	mov	r0, r3
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3314      	adds	r3, #20
 8007360:	461a      	mov	r2, r3
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	4413      	add	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
}  
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800739e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80073a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80073aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0

}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80073de:	2310      	movs	r3, #16
 80073e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073e2:	2340      	movs	r3, #64	; 0x40
 80073e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073f0:	f107 0308 	add.w	r3, r7, #8
 80073f4:	4619      	mov	r1, r3
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff ff74 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80073fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007400:	2110      	movs	r1, #16
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa44 	bl	8007890 <SDMMC_GetCmdResp1>
 8007408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800740a:	69fb      	ldr	r3, [r7, #28]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b088      	sub	sp, #32
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007422:	2311      	movs	r3, #17
 8007424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007426:	2340      	movs	r3, #64	; 0x40
 8007428:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800742e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007432:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007434:	f107 0308 	add.w	r3, r7, #8
 8007438:	4619      	mov	r1, r3
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff ff52 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007440:	f241 3288 	movw	r2, #5000	; 0x1388
 8007444:	2111      	movs	r1, #17
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa22 	bl	8007890 <SDMMC_GetCmdResp1>
 800744c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800744e:	69fb      	ldr	r3, [r7, #28]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3720      	adds	r7, #32
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b088      	sub	sp, #32
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007466:	2312      	movs	r3, #18
 8007468:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800746a:	2340      	movs	r3, #64	; 0x40
 800746c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800746e:	2300      	movs	r3, #0
 8007470:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007476:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007478:	f107 0308 	add.w	r3, r7, #8
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff ff30 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007484:	f241 3288 	movw	r2, #5000	; 0x1388
 8007488:	2112      	movs	r1, #18
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa00 	bl	8007890 <SDMMC_GetCmdResp1>
 8007490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007492:	69fb      	ldr	r3, [r7, #28]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80074aa:	2318      	movs	r3, #24
 80074ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074ae:	2340      	movs	r3, #64	; 0x40
 80074b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074bc:	f107 0308 	add.w	r3, r7, #8
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff ff0e 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80074c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80074cc:	2118      	movs	r1, #24
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 f9de 	bl	8007890 <SDMMC_GetCmdResp1>
 80074d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074d6:	69fb      	ldr	r3, [r7, #28]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3720      	adds	r7, #32
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80074ee:	2319      	movs	r3, #25
 80074f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074f2:	2340      	movs	r3, #64	; 0x40
 80074f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074f6:	2300      	movs	r3, #0
 80074f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007500:	f107 0308 	add.w	r3, r7, #8
 8007504:	4619      	mov	r1, r3
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff feec 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800750c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007510:	2119      	movs	r1, #25
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f9bc 	bl	8007890 <SDMMC_GetCmdResp1>
 8007518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800751a:	69fb      	ldr	r3, [r7, #28]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3720      	adds	r7, #32
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007530:	230c      	movs	r3, #12
 8007532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007534:	2340      	movs	r3, #64	; 0x40
 8007536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800753c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007540:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007542:	f107 0308 	add.w	r3, r7, #8
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f7ff fecb 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800754e:	4a05      	ldr	r2, [pc, #20]	; (8007564 <SDMMC_CmdStopTransfer+0x40>)
 8007550:	210c      	movs	r1, #12
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f99c 	bl	8007890 <SDMMC_GetCmdResp1>
 8007558:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800755a:	69fb      	ldr	r3, [r7, #28]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3720      	adds	r7, #32
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	05f5e100 	.word	0x05f5e100

08007568 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08a      	sub	sp, #40	; 0x28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007578:	2307      	movs	r3, #7
 800757a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800757c:	2340      	movs	r3, #64	; 0x40
 800757e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007588:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800758a:	f107 0310 	add.w	r3, r7, #16
 800758e:	4619      	mov	r1, r3
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff fea7 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007596:	f241 3288 	movw	r2, #5000	; 0x1388
 800759a:	2107      	movs	r1, #7
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 f977 	bl	8007890 <SDMMC_GetCmdResp1>
 80075a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3728      	adds	r7, #40	; 0x28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b088      	sub	sp, #32
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80075be:	2300      	movs	r3, #0
 80075c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075cc:	f107 0308 	add.w	r3, r7, #8
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7ff fe86 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f92d 	bl	8007838 <SDMMC_GetCmdError>
 80075de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075e0:	69fb      	ldr	r3, [r7, #28]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3720      	adds	r7, #32
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}

080075ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b088      	sub	sp, #32
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80075f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80075f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80075f8:	2308      	movs	r3, #8
 80075fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80075fc:	2340      	movs	r3, #64	; 0x40
 80075fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007600:	2300      	movs	r3, #0
 8007602:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007608:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800760a:	f107 0308 	add.w	r3, r7, #8
 800760e:	4619      	mov	r1, r3
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff fe67 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fb24 	bl	8007c64 <SDMMC_GetCmdResp7>
 800761c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800761e:	69fb      	ldr	r3, [r7, #28]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007636:	2337      	movs	r3, #55	; 0x37
 8007638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800763a:	2340      	movs	r3, #64	; 0x40
 800763c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007646:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007648:	f107 0308 	add.w	r3, r7, #8
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff fe48 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007654:	f241 3288 	movw	r2, #5000	; 0x1388
 8007658:	2137      	movs	r1, #55	; 0x37
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f918 	bl	8007890 <SDMMC_GetCmdResp1>
 8007660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007662:	69fb      	ldr	r3, [r7, #28]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3720      	adds	r7, #32
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800767c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007682:	2329      	movs	r3, #41	; 0x29
 8007684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007686:	2340      	movs	r3, #64	; 0x40
 8007688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800768a:	2300      	movs	r3, #0
 800768c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800768e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007692:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007694:	f107 0308 	add.w	r3, r7, #8
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7ff fe22 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fa2b 	bl	8007afc <SDMMC_GetCmdResp3>
 80076a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076a8:	69fb      	ldr	r3, [r7, #28]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3720      	adds	r7, #32
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b088      	sub	sp, #32
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
 80076ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80076c0:	2306      	movs	r3, #6
 80076c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80076c4:	2340      	movs	r3, #64	; 0x40
 80076c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80076cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80076d2:	f107 0308 	add.w	r3, r7, #8
 80076d6:	4619      	mov	r1, r3
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff fe03 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80076de:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e2:	2106      	movs	r1, #6
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f8d3 	bl	8007890 <SDMMC_GetCmdResp1>
 80076ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076ec:	69fb      	ldr	r3, [r7, #28]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3720      	adds	r7, #32
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b088      	sub	sp, #32
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007702:	2333      	movs	r3, #51	; 0x33
 8007704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007706:	2340      	movs	r3, #64	; 0x40
 8007708:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800770e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007712:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007714:	f107 0308 	add.w	r3, r7, #8
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fde2 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007720:	f241 3288 	movw	r2, #5000	; 0x1388
 8007724:	2133      	movs	r1, #51	; 0x33
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f8b2 	bl	8007890 <SDMMC_GetCmdResp1>
 800772c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800772e:	69fb      	ldr	r3, [r7, #28]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3720      	adds	r7, #32
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007744:	2302      	movs	r3, #2
 8007746:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007748:	23c0      	movs	r3, #192	; 0xc0
 800774a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800774c:	2300      	movs	r3, #0
 800774e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007754:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007756:	f107 0308 	add.w	r3, r7, #8
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff fdc1 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f982 	bl	8007a6c <SDMMC_GetCmdResp2>
 8007768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800776a:	69fb      	ldr	r3, [r7, #28]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3720      	adds	r7, #32
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007782:	2309      	movs	r3, #9
 8007784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007786:	23c0      	movs	r3, #192	; 0xc0
 8007788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800778e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007792:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007794:	f107 0308 	add.w	r3, r7, #8
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fda2 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f963 	bl	8007a6c <SDMMC_GetCmdResp2>
 80077a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077a8:	69fb      	ldr	r3, [r7, #28]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3720      	adds	r7, #32
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b088      	sub	sp, #32
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80077c0:	2303      	movs	r3, #3
 80077c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80077c4:	2340      	movs	r3, #64	; 0x40
 80077c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80077cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80077d2:	f107 0308 	add.w	r3, r7, #8
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7ff fd83 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	2103      	movs	r1, #3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f9c8 	bl	8007b78 <SDMMC_GetCmdResp6>
 80077e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077ea:	69fb      	ldr	r3, [r7, #28]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3720      	adds	r7, #32
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007802:	230d      	movs	r3, #13
 8007804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007806:	2340      	movs	r3, #64	; 0x40
 8007808:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800780a:	2300      	movs	r3, #0
 800780c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800780e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007812:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007814:	f107 0308 	add.w	r3, r7, #8
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff fd62 	bl	80072e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007820:	f241 3288 	movw	r2, #5000	; 0x1388
 8007824:	210d      	movs	r1, #13
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f832 	bl	8007890 <SDMMC_GetCmdResp1>
 800782c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800782e:	69fb      	ldr	r3, [r7, #28]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3720      	adds	r7, #32
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007840:	4b11      	ldr	r3, [pc, #68]	; (8007888 <SDMMC_GetCmdError+0x50>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a11      	ldr	r2, [pc, #68]	; (800788c <SDMMC_GetCmdError+0x54>)
 8007846:	fba2 2303 	umull	r2, r3, r2, r3
 800784a:	0a5b      	lsrs	r3, r3, #9
 800784c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007850:	fb02 f303 	mul.w	r3, r2, r3
 8007854:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	1e5a      	subs	r2, r3, #1
 800785a:	60fa      	str	r2, [r7, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007860:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007864:	e009      	b.n	800787a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f1      	beq.n	8007856 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	22c5      	movs	r2, #197	; 0xc5
 8007876:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	200004a8 	.word	0x200004a8
 800788c:	10624dd3 	.word	0x10624dd3

08007890 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	460b      	mov	r3, r1
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800789e:	4b70      	ldr	r3, [pc, #448]	; (8007a60 <SDMMC_GetCmdResp1+0x1d0>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a70      	ldr	r2, [pc, #448]	; (8007a64 <SDMMC_GetCmdResp1+0x1d4>)
 80078a4:	fba2 2303 	umull	r2, r3, r2, r3
 80078a8:	0a5a      	lsrs	r2, r3, #9
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	fb02 f303 	mul.w	r3, r2, r3
 80078b0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	1e5a      	subs	r2, r3, #1
 80078b6:	61fa      	str	r2, [r7, #28]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80078c0:	e0c9      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0ef      	beq.n	80078b2 <SDMMC_GetCmdResp1+0x22>
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1ea      	bne.n	80078b2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d004      	beq.n	80078f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2204      	movs	r2, #4
 80078ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078ee:	2304      	movs	r3, #4
 80078f0:	e0b1      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007904:	2301      	movs	r3, #1
 8007906:	e0a6      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	22c5      	movs	r2, #197	; 0xc5
 800790c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff fd12 	bl	8007338 <SDIO_GetCommandResponse>
 8007914:	4603      	mov	r3, r0
 8007916:	461a      	mov	r2, r3
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	4293      	cmp	r3, r2
 800791c:	d001      	beq.n	8007922 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800791e:	2301      	movs	r3, #1
 8007920:	e099      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007922:	2100      	movs	r1, #0
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff fd14 	bl	8007352 <SDIO_GetResponse>
 800792a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	4b4e      	ldr	r3, [pc, #312]	; (8007a68 <SDMMC_GetCmdResp1+0x1d8>)
 8007930:	4013      	ands	r3, r2
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007936:	2300      	movs	r3, #0
 8007938:	e08d      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2b00      	cmp	r3, #0
 800793e:	da02      	bge.n	8007946 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007944:	e087      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007950:	2340      	movs	r3, #64	; 0x40
 8007952:	e080      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800795e:	2380      	movs	r3, #128	; 0x80
 8007960:	e079      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800796c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007970:	e071      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800797c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007980:	e069      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800798c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007990:	e061      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800799c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079a0:	e059      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80079ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079b0:	e051      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80079bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079c0:	e049      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d002      	beq.n	80079d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80079cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079d0:	e041      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d002      	beq.n	80079e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80079dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e0:	e039      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80079ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079f0:	e031      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80079fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007a00:	e029      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007a0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a10:	e021      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007a1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007a20:	e019      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d002      	beq.n	8007a32 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007a2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007a30:	e011      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d002      	beq.n	8007a42 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007a3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a40:	e009      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007a4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007a50:	e001      	b.n	8007a56 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	200004a8 	.word	0x200004a8
 8007a64:	10624dd3 	.word	0x10624dd3
 8007a68:	fdffe008 	.word	0xfdffe008

08007a6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a74:	4b1f      	ldr	r3, [pc, #124]	; (8007af4 <SDMMC_GetCmdResp2+0x88>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1f      	ldr	r2, [pc, #124]	; (8007af8 <SDMMC_GetCmdResp2+0x8c>)
 8007a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a7e:	0a5b      	lsrs	r3, r3, #9
 8007a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a84:	fb02 f303 	mul.w	r3, r2, r3
 8007a88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	1e5a      	subs	r2, r3, #1
 8007a8e:	60fa      	str	r2, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a98:	e026      	b.n	8007ae8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0ef      	beq.n	8007a8a <SDMMC_GetCmdResp2+0x1e>
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1ea      	bne.n	8007a8a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2204      	movs	r2, #4
 8007ac4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ac6:	2304      	movs	r3, #4
 8007ac8:	e00e      	b.n	8007ae8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d004      	beq.n	8007ae0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e003      	b.n	8007ae8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	22c5      	movs	r2, #197	; 0xc5
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	200004a8 	.word	0x200004a8
 8007af8:	10624dd3 	.word	0x10624dd3

08007afc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b04:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <SDMMC_GetCmdResp3+0x74>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a1a      	ldr	r2, [pc, #104]	; (8007b74 <SDMMC_GetCmdResp3+0x78>)
 8007b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0e:	0a5b      	lsrs	r3, r3, #9
 8007b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b14:	fb02 f303 	mul.w	r3, r2, r3
 8007b18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	1e5a      	subs	r2, r3, #1
 8007b1e:	60fa      	str	r2, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b28:	e01b      	b.n	8007b62 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0ef      	beq.n	8007b1a <SDMMC_GetCmdResp3+0x1e>
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1ea      	bne.n	8007b1a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2204      	movs	r2, #4
 8007b54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b56:	2304      	movs	r3, #4
 8007b58:	e003      	b.n	8007b62 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	22c5      	movs	r2, #197	; 0xc5
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	200004a8 	.word	0x200004a8
 8007b74:	10624dd3 	.word	0x10624dd3

08007b78 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	460b      	mov	r3, r1
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b86:	4b35      	ldr	r3, [pc, #212]	; (8007c5c <SDMMC_GetCmdResp6+0xe4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a35      	ldr	r2, [pc, #212]	; (8007c60 <SDMMC_GetCmdResp6+0xe8>)
 8007b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b90:	0a5b      	lsrs	r3, r3, #9
 8007b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
 8007b9a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	1e5a      	subs	r2, r3, #1
 8007ba0:	61fa      	str	r2, [r7, #28]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ba6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007baa:	e052      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d0ef      	beq.n	8007b9c <SDMMC_GetCmdResp6+0x24>
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1ea      	bne.n	8007b9c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d004      	beq.n	8007bdc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2204      	movs	r2, #4
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bd8:	2304      	movs	r3, #4
 8007bda:	e03a      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be0:	f003 0301 	and.w	r3, r3, #1
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2201      	movs	r2, #1
 8007bec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e02f      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7ff fba0 	bl	8007338 <SDIO_GetCommandResponse>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	7afb      	ldrb	r3, [r7, #11]
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d001      	beq.n	8007c06 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e025      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	22c5      	movs	r2, #197	; 0xc5
 8007c0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f7ff fb9f 	bl	8007352 <SDIO_GetResponse>
 8007c14:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d106      	bne.n	8007c2e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	0c1b      	lsrs	r3, r3, #16
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e011      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007c3c:	e009      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d002      	beq.n	8007c4e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c4c:	e001      	b.n	8007c52 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3720      	adds	r7, #32
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	200004a8 	.word	0x200004a8
 8007c60:	10624dd3 	.word	0x10624dd3

08007c64 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c6c:	4b22      	ldr	r3, [pc, #136]	; (8007cf8 <SDMMC_GetCmdResp7+0x94>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a22      	ldr	r2, [pc, #136]	; (8007cfc <SDMMC_GetCmdResp7+0x98>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	0a5b      	lsrs	r3, r3, #9
 8007c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c7c:	fb02 f303 	mul.w	r3, r2, r3
 8007c80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	1e5a      	subs	r2, r3, #1
 8007c86:	60fa      	str	r2, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d102      	bne.n	8007c92 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c90:	e02c      	b.n	8007cec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0ef      	beq.n	8007c82 <SDMMC_GetCmdResp7+0x1e>
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1ea      	bne.n	8007c82 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	f003 0304 	and.w	r3, r3, #4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d004      	beq.n	8007cc2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2204      	movs	r2, #4
 8007cbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007cbe:	2304      	movs	r3, #4
 8007cc0:	e014      	b.n	8007cec <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e009      	b.n	8007cec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2240      	movs	r2, #64	; 0x40
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007cea:	2300      	movs	r3, #0
  
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	200004a8 	.word	0x200004a8
 8007cfc:	10624dd3 	.word	0x10624dd3

08007d00 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007d04:	4904      	ldr	r1, [pc, #16]	; (8007d18 <MX_FATFS_Init+0x18>)
 8007d06:	4805      	ldr	r0, [pc, #20]	; (8007d1c <MX_FATFS_Init+0x1c>)
 8007d08:	f000 ff38 	bl	8008b7c <FATFS_LinkDriver>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4b03      	ldr	r3, [pc, #12]	; (8007d20 <MX_FATFS_Init+0x20>)
 8007d12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007d14:	bf00      	nop
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	2000564c 	.word	0x2000564c
 8007d1c:	0801a5b0 	.word	0x0801a5b0
 8007d20:	20005648 	.word	0x20005648

08007d24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007d2e:	f000 f896 	bl	8007e5e <BSP_SD_IsDetected>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d001      	beq.n	8007d3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e012      	b.n	8007d62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007d3c:	480b      	ldr	r0, [pc, #44]	; (8007d6c <BSP_SD_Init+0x48>)
 8007d3e:	f7fd f979 	bl	8005034 <HAL_SD_Init>
 8007d42:	4603      	mov	r3, r0
 8007d44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d109      	bne.n	8007d60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d50:	4806      	ldr	r0, [pc, #24]	; (8007d6c <BSP_SD_Init+0x48>)
 8007d52:	f7fd ff45 	bl	8005be0 <HAL_SD_ConfigWideBusOperation>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007d60:	79fb      	ldrb	r3, [r7, #7]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20005534 	.word	0x20005534

08007d70 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	68f9      	ldr	r1, [r7, #12]
 8007d86:	4806      	ldr	r0, [pc, #24]	; (8007da0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007d88:	f7fd fa02 	bl	8005190 <HAL_SD_ReadBlocks_DMA>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20005534 	.word	0x20005534

08007da4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	68f9      	ldr	r1, [r7, #12]
 8007dba:	4806      	ldr	r0, [pc, #24]	; (8007dd4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007dbc:	f7fd faca 	bl	8005354 <HAL_SD_WriteBlocks_DMA>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20005534 	.word	0x20005534

08007dd8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007ddc:	4805      	ldr	r0, [pc, #20]	; (8007df4 <BSP_SD_GetCardState+0x1c>)
 8007dde:	f7fd ff99 	bl	8005d14 <HAL_SD_GetCardState>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	bf14      	ite	ne
 8007de8:	2301      	movne	r3, #1
 8007dea:	2300      	moveq	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	20005534 	.word	0x20005534

08007df8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	4803      	ldr	r0, [pc, #12]	; (8007e10 <BSP_SD_GetCardInfo+0x18>)
 8007e04:	f7fd fec0 	bl	8005b88 <HAL_SD_GetCardInfo>
}
 8007e08:	bf00      	nop
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	20005534 	.word	0x20005534

08007e14 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007e1c:	f000 f818 	bl	8007e50 <BSP_SD_AbortCallback>
}
 8007e20:	bf00      	nop
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007e30:	f000 f98c 	bl	800814c <BSP_SD_WriteCpltCallback>
}
 8007e34:	bf00      	nop
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007e44:	f000 f98e 	bl	8008164 <BSP_SD_ReadCpltCallback>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0

}
 8007e54:	bf00      	nop
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007e64:	2301      	movs	r3, #1
 8007e66:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	b2db      	uxtb	r3, r3
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007e80:	f7fa fca6 	bl	80027d0 <HAL_GetTick>
 8007e84:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007e86:	e006      	b.n	8007e96 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e88:	f7ff ffa6 	bl	8007dd8 <BSP_SD_GetCardState>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007e92:	2300      	movs	r3, #0
 8007e94:	e009      	b.n	8007eaa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007e96:	f7fa fc9b 	bl	80027d0 <HAL_GetTick>
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d8f0      	bhi.n	8007e88 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	4603      	mov	r3, r0
 8007ebc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007ebe:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <SD_CheckStatus+0x38>)
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007ec4:	f7ff ff88 	bl	8007dd8 <BSP_SD_GetCardState>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d107      	bne.n	8007ede <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007ece:	4b07      	ldr	r3, [pc, #28]	; (8007eec <SD_CheckStatus+0x38>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f023 0301 	bic.w	r3, r3, #1
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	4b04      	ldr	r3, [pc, #16]	; (8007eec <SD_CheckStatus+0x38>)
 8007edc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007ede:	4b03      	ldr	r3, [pc, #12]	; (8007eec <SD_CheckStatus+0x38>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	b2db      	uxtb	r3, r3
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	200004b1 	.word	0x200004b1

08007ef0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007efa:	f7ff ff13 	bl	8007d24 <BSP_SD_Init>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d107      	bne.n	8007f14 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007f04:	79fb      	ldrb	r3, [r7, #7]
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff ffd4 	bl	8007eb4 <SD_CheckStatus>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <SD_initialize+0x34>)
 8007f12:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007f14:	4b03      	ldr	r3, [pc, #12]	; (8007f24 <SD_initialize+0x34>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	b2db      	uxtb	r3, r3
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	200004b1 	.word	0x200004b1

08007f28 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007f32:	79fb      	ldrb	r3, [r7, #7]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f7ff ffbd 	bl	8007eb4 <SD_CheckStatus>
 8007f3a:	4603      	mov	r3, r0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007f58:	f247 5030 	movw	r0, #30000	; 0x7530
 8007f5c:	f7ff ff8c 	bl	8007e78 <SD_CheckStatusWithTimeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da01      	bge.n	8007f6a <SD_read+0x26>
  {
    return res;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	e03b      	b.n	8007fe2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	68b8      	ldr	r0, [r7, #8]
 8007f70:	f7ff fefe 	bl	8007d70 <BSP_SD_ReadBlocks_DMA>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d132      	bne.n	8007fe0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007f7a:	4b1c      	ldr	r3, [pc, #112]	; (8007fec <SD_read+0xa8>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007f80:	f7fa fc26 	bl	80027d0 <HAL_GetTick>
 8007f84:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007f86:	bf00      	nop
 8007f88:	4b18      	ldr	r3, [pc, #96]	; (8007fec <SD_read+0xa8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d108      	bne.n	8007fa2 <SD_read+0x5e>
 8007f90:	f7fa fc1e 	bl	80027d0 <HAL_GetTick>
 8007f94:	4602      	mov	r2, r0
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	f247 522f 	movw	r2, #29999	; 0x752f
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d9f2      	bls.n	8007f88 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007fa2:	4b12      	ldr	r3, [pc, #72]	; (8007fec <SD_read+0xa8>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d102      	bne.n	8007fb0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	75fb      	strb	r3, [r7, #23]
 8007fae:	e017      	b.n	8007fe0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007fb0:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <SD_read+0xa8>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007fb6:	f7fa fc0b 	bl	80027d0 <HAL_GetTick>
 8007fba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007fbc:	e007      	b.n	8007fce <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007fbe:	f7ff ff0b 	bl	8007dd8 <BSP_SD_GetCardState>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <SD_read+0x8a>
          {
            res = RES_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007fcc:	e008      	b.n	8007fe0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007fce:	f7fa fbff 	bl	80027d0 <HAL_GetTick>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	1ad3      	subs	r3, r2, r3
 8007fd8:	f247 522f 	movw	r2, #29999	; 0x752f
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d9ee      	bls.n	8007fbe <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	2000057c 	.word	0x2000057c

08007ff0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
 8007ffa:	603b      	str	r3, [r7, #0]
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008004:	4b24      	ldr	r3, [pc, #144]	; (8008098 <SD_write+0xa8>)
 8008006:	2200      	movs	r2, #0
 8008008:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800800a:	f247 5030 	movw	r0, #30000	; 0x7530
 800800e:	f7ff ff33 	bl	8007e78 <SD_CheckStatusWithTimeout>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	da01      	bge.n	800801c <SD_write+0x2c>
  {
    return res;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	e038      	b.n	800808e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	68b8      	ldr	r0, [r7, #8]
 8008022:	f7ff febf 	bl	8007da4 <BSP_SD_WriteBlocks_DMA>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d12f      	bne.n	800808c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800802c:	f7fa fbd0 	bl	80027d0 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008032:	bf00      	nop
 8008034:	4b18      	ldr	r3, [pc, #96]	; (8008098 <SD_write+0xa8>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d108      	bne.n	800804e <SD_write+0x5e>
 800803c:	f7fa fbc8 	bl	80027d0 <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	f247 522f 	movw	r2, #29999	; 0x752f
 800804a:	4293      	cmp	r3, r2
 800804c:	d9f2      	bls.n	8008034 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800804e:	4b12      	ldr	r3, [pc, #72]	; (8008098 <SD_write+0xa8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d102      	bne.n	800805c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	75fb      	strb	r3, [r7, #23]
 800805a:	e017      	b.n	800808c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800805c:	4b0e      	ldr	r3, [pc, #56]	; (8008098 <SD_write+0xa8>)
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008062:	f7fa fbb5 	bl	80027d0 <HAL_GetTick>
 8008066:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008068:	e007      	b.n	800807a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800806a:	f7ff feb5 	bl	8007dd8 <BSP_SD_GetCardState>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d102      	bne.n	800807a <SD_write+0x8a>
          {
            res = RES_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	75fb      	strb	r3, [r7, #23]
            break;
 8008078:	e008      	b.n	800808c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800807a:	f7fa fba9 	bl	80027d0 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	f247 522f 	movw	r2, #29999	; 0x752f
 8008088:	4293      	cmp	r3, r2
 800808a:	d9ee      	bls.n	800806a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000578 	.word	0x20000578

0800809c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08c      	sub	sp, #48	; 0x30
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	603a      	str	r2, [r7, #0]
 80080a6:	71fb      	strb	r3, [r7, #7]
 80080a8:	460b      	mov	r3, r1
 80080aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80080b2:	4b25      	ldr	r3, [pc, #148]	; (8008148 <SD_ioctl+0xac>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f003 0301 	and.w	r3, r3, #1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <SD_ioctl+0x28>
 80080c0:	2303      	movs	r3, #3
 80080c2:	e03c      	b.n	800813e <SD_ioctl+0xa2>

  switch (cmd)
 80080c4:	79bb      	ldrb	r3, [r7, #6]
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d834      	bhi.n	8008134 <SD_ioctl+0x98>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <SD_ioctl+0x34>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	080080e1 	.word	0x080080e1
 80080d4:	080080e9 	.word	0x080080e9
 80080d8:	08008101 	.word	0x08008101
 80080dc:	0800811b 	.word	0x0800811b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080e6:	e028      	b.n	800813a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80080e8:	f107 030c 	add.w	r3, r7, #12
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff fe83 	bl	8007df8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80080f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080fe:	e01c      	b.n	800813a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008100:	f107 030c 	add.w	r3, r7, #12
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff fe77 	bl	8007df8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	b29a      	uxth	r2, r3
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008118:	e00f      	b.n	800813a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800811a:	f107 030c 	add.w	r3, r7, #12
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff fe6a 	bl	8007df8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	0a5a      	lsrs	r2, r3, #9
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008132:	e002      	b.n	800813a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008134:	2304      	movs	r3, #4
 8008136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800813a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800813e:	4618      	mov	r0, r3
 8008140:	3730      	adds	r7, #48	; 0x30
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	200004b1 	.word	0x200004b1

0800814c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800814c:	b480      	push	{r7}
 800814e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008150:	4b03      	ldr	r3, [pc, #12]	; (8008160 <BSP_SD_WriteCpltCallback+0x14>)
 8008152:	2201      	movs	r2, #1
 8008154:	601a      	str	r2, [r3, #0]
}
 8008156:	bf00      	nop
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	20000578 	.word	0x20000578

08008164 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008168:	4b03      	ldr	r3, [pc, #12]	; (8008178 <BSP_SD_ReadCpltCallback+0x14>)
 800816a:	2201      	movs	r2, #1
 800816c:	601a      	str	r2, [r3, #0]
}
 800816e:	bf00      	nop
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	2000057c 	.word	0x2000057c

0800817c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008182:	4b8d      	ldr	r3, [pc, #564]	; (80083b8 <MX_LWIP_Init+0x23c>)
 8008184:	22c0      	movs	r2, #192	; 0xc0
 8008186:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008188:	4b8b      	ldr	r3, [pc, #556]	; (80083b8 <MX_LWIP_Init+0x23c>)
 800818a:	22a8      	movs	r2, #168	; 0xa8
 800818c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 800818e:	4b8a      	ldr	r3, [pc, #552]	; (80083b8 <MX_LWIP_Init+0x23c>)
 8008190:	2212      	movs	r2, #18
 8008192:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8008194:	4b88      	ldr	r3, [pc, #544]	; (80083b8 <MX_LWIP_Init+0x23c>)
 8008196:	226f      	movs	r2, #111	; 0x6f
 8008198:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800819a:	4b88      	ldr	r3, [pc, #544]	; (80083bc <MX_LWIP_Init+0x240>)
 800819c:	22ff      	movs	r2, #255	; 0xff
 800819e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80081a0:	4b86      	ldr	r3, [pc, #536]	; (80083bc <MX_LWIP_Init+0x240>)
 80081a2:	22ff      	movs	r2, #255	; 0xff
 80081a4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80081a6:	4b85      	ldr	r3, [pc, #532]	; (80083bc <MX_LWIP_Init+0x240>)
 80081a8:	22ff      	movs	r2, #255	; 0xff
 80081aa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80081ac:	4b83      	ldr	r3, [pc, #524]	; (80083bc <MX_LWIP_Init+0x240>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80081b2:	4b83      	ldr	r3, [pc, #524]	; (80083c0 <MX_LWIP_Init+0x244>)
 80081b4:	22c0      	movs	r2, #192	; 0xc0
 80081b6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80081b8:	4b81      	ldr	r3, [pc, #516]	; (80083c0 <MX_LWIP_Init+0x244>)
 80081ba:	22a8      	movs	r2, #168	; 0xa8
 80081bc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 80081be:	4b80      	ldr	r3, [pc, #512]	; (80083c0 <MX_LWIP_Init+0x244>)
 80081c0:	2212      	movs	r2, #18
 80081c2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80081c4:	4b7e      	ldr	r3, [pc, #504]	; (80083c0 <MX_LWIP_Init+0x244>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80081ca:	f002 fdb7 	bl	800ad3c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80081ce:	4b7a      	ldr	r3, [pc, #488]	; (80083b8 <MX_LWIP_Init+0x23c>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	061a      	lsls	r2, r3, #24
 80081d4:	4b78      	ldr	r3, [pc, #480]	; (80083b8 <MX_LWIP_Init+0x23c>)
 80081d6:	785b      	ldrb	r3, [r3, #1]
 80081d8:	041b      	lsls	r3, r3, #16
 80081da:	431a      	orrs	r2, r3
 80081dc:	4b76      	ldr	r3, [pc, #472]	; (80083b8 <MX_LWIP_Init+0x23c>)
 80081de:	789b      	ldrb	r3, [r3, #2]
 80081e0:	021b      	lsls	r3, r3, #8
 80081e2:	4313      	orrs	r3, r2
 80081e4:	4a74      	ldr	r2, [pc, #464]	; (80083b8 <MX_LWIP_Init+0x23c>)
 80081e6:	78d2      	ldrb	r2, [r2, #3]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	061a      	lsls	r2, r3, #24
 80081ec:	4b72      	ldr	r3, [pc, #456]	; (80083b8 <MX_LWIP_Init+0x23c>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	0619      	lsls	r1, r3, #24
 80081f2:	4b71      	ldr	r3, [pc, #452]	; (80083b8 <MX_LWIP_Init+0x23c>)
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	041b      	lsls	r3, r3, #16
 80081f8:	4319      	orrs	r1, r3
 80081fa:	4b6f      	ldr	r3, [pc, #444]	; (80083b8 <MX_LWIP_Init+0x23c>)
 80081fc:	789b      	ldrb	r3, [r3, #2]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	430b      	orrs	r3, r1
 8008202:	496d      	ldr	r1, [pc, #436]	; (80083b8 <MX_LWIP_Init+0x23c>)
 8008204:	78c9      	ldrb	r1, [r1, #3]
 8008206:	430b      	orrs	r3, r1
 8008208:	021b      	lsls	r3, r3, #8
 800820a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800820e:	431a      	orrs	r2, r3
 8008210:	4b69      	ldr	r3, [pc, #420]	; (80083b8 <MX_LWIP_Init+0x23c>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	0619      	lsls	r1, r3, #24
 8008216:	4b68      	ldr	r3, [pc, #416]	; (80083b8 <MX_LWIP_Init+0x23c>)
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	041b      	lsls	r3, r3, #16
 800821c:	4319      	orrs	r1, r3
 800821e:	4b66      	ldr	r3, [pc, #408]	; (80083b8 <MX_LWIP_Init+0x23c>)
 8008220:	789b      	ldrb	r3, [r3, #2]
 8008222:	021b      	lsls	r3, r3, #8
 8008224:	430b      	orrs	r3, r1
 8008226:	4964      	ldr	r1, [pc, #400]	; (80083b8 <MX_LWIP_Init+0x23c>)
 8008228:	78c9      	ldrb	r1, [r1, #3]
 800822a:	430b      	orrs	r3, r1
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008232:	431a      	orrs	r2, r3
 8008234:	4b60      	ldr	r3, [pc, #384]	; (80083b8 <MX_LWIP_Init+0x23c>)
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	0619      	lsls	r1, r3, #24
 800823a:	4b5f      	ldr	r3, [pc, #380]	; (80083b8 <MX_LWIP_Init+0x23c>)
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	041b      	lsls	r3, r3, #16
 8008240:	4319      	orrs	r1, r3
 8008242:	4b5d      	ldr	r3, [pc, #372]	; (80083b8 <MX_LWIP_Init+0x23c>)
 8008244:	789b      	ldrb	r3, [r3, #2]
 8008246:	021b      	lsls	r3, r3, #8
 8008248:	430b      	orrs	r3, r1
 800824a:	495b      	ldr	r1, [pc, #364]	; (80083b8 <MX_LWIP_Init+0x23c>)
 800824c:	78c9      	ldrb	r1, [r1, #3]
 800824e:	430b      	orrs	r3, r1
 8008250:	0e1b      	lsrs	r3, r3, #24
 8008252:	4313      	orrs	r3, r2
 8008254:	4a5b      	ldr	r2, [pc, #364]	; (80083c4 <MX_LWIP_Init+0x248>)
 8008256:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008258:	4b58      	ldr	r3, [pc, #352]	; (80083bc <MX_LWIP_Init+0x240>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	061a      	lsls	r2, r3, #24
 800825e:	4b57      	ldr	r3, [pc, #348]	; (80083bc <MX_LWIP_Init+0x240>)
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	041b      	lsls	r3, r3, #16
 8008264:	431a      	orrs	r2, r3
 8008266:	4b55      	ldr	r3, [pc, #340]	; (80083bc <MX_LWIP_Init+0x240>)
 8008268:	789b      	ldrb	r3, [r3, #2]
 800826a:	021b      	lsls	r3, r3, #8
 800826c:	4313      	orrs	r3, r2
 800826e:	4a53      	ldr	r2, [pc, #332]	; (80083bc <MX_LWIP_Init+0x240>)
 8008270:	78d2      	ldrb	r2, [r2, #3]
 8008272:	4313      	orrs	r3, r2
 8008274:	061a      	lsls	r2, r3, #24
 8008276:	4b51      	ldr	r3, [pc, #324]	; (80083bc <MX_LWIP_Init+0x240>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	0619      	lsls	r1, r3, #24
 800827c:	4b4f      	ldr	r3, [pc, #316]	; (80083bc <MX_LWIP_Init+0x240>)
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	041b      	lsls	r3, r3, #16
 8008282:	4319      	orrs	r1, r3
 8008284:	4b4d      	ldr	r3, [pc, #308]	; (80083bc <MX_LWIP_Init+0x240>)
 8008286:	789b      	ldrb	r3, [r3, #2]
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	430b      	orrs	r3, r1
 800828c:	494b      	ldr	r1, [pc, #300]	; (80083bc <MX_LWIP_Init+0x240>)
 800828e:	78c9      	ldrb	r1, [r1, #3]
 8008290:	430b      	orrs	r3, r1
 8008292:	021b      	lsls	r3, r3, #8
 8008294:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008298:	431a      	orrs	r2, r3
 800829a:	4b48      	ldr	r3, [pc, #288]	; (80083bc <MX_LWIP_Init+0x240>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	0619      	lsls	r1, r3, #24
 80082a0:	4b46      	ldr	r3, [pc, #280]	; (80083bc <MX_LWIP_Init+0x240>)
 80082a2:	785b      	ldrb	r3, [r3, #1]
 80082a4:	041b      	lsls	r3, r3, #16
 80082a6:	4319      	orrs	r1, r3
 80082a8:	4b44      	ldr	r3, [pc, #272]	; (80083bc <MX_LWIP_Init+0x240>)
 80082aa:	789b      	ldrb	r3, [r3, #2]
 80082ac:	021b      	lsls	r3, r3, #8
 80082ae:	430b      	orrs	r3, r1
 80082b0:	4942      	ldr	r1, [pc, #264]	; (80083bc <MX_LWIP_Init+0x240>)
 80082b2:	78c9      	ldrb	r1, [r1, #3]
 80082b4:	430b      	orrs	r3, r1
 80082b6:	0a1b      	lsrs	r3, r3, #8
 80082b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80082bc:	431a      	orrs	r2, r3
 80082be:	4b3f      	ldr	r3, [pc, #252]	; (80083bc <MX_LWIP_Init+0x240>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	0619      	lsls	r1, r3, #24
 80082c4:	4b3d      	ldr	r3, [pc, #244]	; (80083bc <MX_LWIP_Init+0x240>)
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	041b      	lsls	r3, r3, #16
 80082ca:	4319      	orrs	r1, r3
 80082cc:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <MX_LWIP_Init+0x240>)
 80082ce:	789b      	ldrb	r3, [r3, #2]
 80082d0:	021b      	lsls	r3, r3, #8
 80082d2:	430b      	orrs	r3, r1
 80082d4:	4939      	ldr	r1, [pc, #228]	; (80083bc <MX_LWIP_Init+0x240>)
 80082d6:	78c9      	ldrb	r1, [r1, #3]
 80082d8:	430b      	orrs	r3, r1
 80082da:	0e1b      	lsrs	r3, r3, #24
 80082dc:	4313      	orrs	r3, r2
 80082de:	4a3a      	ldr	r2, [pc, #232]	; (80083c8 <MX_LWIP_Init+0x24c>)
 80082e0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80082e2:	4b37      	ldr	r3, [pc, #220]	; (80083c0 <MX_LWIP_Init+0x244>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	061a      	lsls	r2, r3, #24
 80082e8:	4b35      	ldr	r3, [pc, #212]	; (80083c0 <MX_LWIP_Init+0x244>)
 80082ea:	785b      	ldrb	r3, [r3, #1]
 80082ec:	041b      	lsls	r3, r3, #16
 80082ee:	431a      	orrs	r2, r3
 80082f0:	4b33      	ldr	r3, [pc, #204]	; (80083c0 <MX_LWIP_Init+0x244>)
 80082f2:	789b      	ldrb	r3, [r3, #2]
 80082f4:	021b      	lsls	r3, r3, #8
 80082f6:	4313      	orrs	r3, r2
 80082f8:	4a31      	ldr	r2, [pc, #196]	; (80083c0 <MX_LWIP_Init+0x244>)
 80082fa:	78d2      	ldrb	r2, [r2, #3]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	061a      	lsls	r2, r3, #24
 8008300:	4b2f      	ldr	r3, [pc, #188]	; (80083c0 <MX_LWIP_Init+0x244>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	0619      	lsls	r1, r3, #24
 8008306:	4b2e      	ldr	r3, [pc, #184]	; (80083c0 <MX_LWIP_Init+0x244>)
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	041b      	lsls	r3, r3, #16
 800830c:	4319      	orrs	r1, r3
 800830e:	4b2c      	ldr	r3, [pc, #176]	; (80083c0 <MX_LWIP_Init+0x244>)
 8008310:	789b      	ldrb	r3, [r3, #2]
 8008312:	021b      	lsls	r3, r3, #8
 8008314:	430b      	orrs	r3, r1
 8008316:	492a      	ldr	r1, [pc, #168]	; (80083c0 <MX_LWIP_Init+0x244>)
 8008318:	78c9      	ldrb	r1, [r1, #3]
 800831a:	430b      	orrs	r3, r1
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008322:	431a      	orrs	r2, r3
 8008324:	4b26      	ldr	r3, [pc, #152]	; (80083c0 <MX_LWIP_Init+0x244>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	0619      	lsls	r1, r3, #24
 800832a:	4b25      	ldr	r3, [pc, #148]	; (80083c0 <MX_LWIP_Init+0x244>)
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	041b      	lsls	r3, r3, #16
 8008330:	4319      	orrs	r1, r3
 8008332:	4b23      	ldr	r3, [pc, #140]	; (80083c0 <MX_LWIP_Init+0x244>)
 8008334:	789b      	ldrb	r3, [r3, #2]
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	430b      	orrs	r3, r1
 800833a:	4921      	ldr	r1, [pc, #132]	; (80083c0 <MX_LWIP_Init+0x244>)
 800833c:	78c9      	ldrb	r1, [r1, #3]
 800833e:	430b      	orrs	r3, r1
 8008340:	0a1b      	lsrs	r3, r3, #8
 8008342:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008346:	431a      	orrs	r2, r3
 8008348:	4b1d      	ldr	r3, [pc, #116]	; (80083c0 <MX_LWIP_Init+0x244>)
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	0619      	lsls	r1, r3, #24
 800834e:	4b1c      	ldr	r3, [pc, #112]	; (80083c0 <MX_LWIP_Init+0x244>)
 8008350:	785b      	ldrb	r3, [r3, #1]
 8008352:	041b      	lsls	r3, r3, #16
 8008354:	4319      	orrs	r1, r3
 8008356:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <MX_LWIP_Init+0x244>)
 8008358:	789b      	ldrb	r3, [r3, #2]
 800835a:	021b      	lsls	r3, r3, #8
 800835c:	430b      	orrs	r3, r1
 800835e:	4918      	ldr	r1, [pc, #96]	; (80083c0 <MX_LWIP_Init+0x244>)
 8008360:	78c9      	ldrb	r1, [r1, #3]
 8008362:	430b      	orrs	r3, r1
 8008364:	0e1b      	lsrs	r3, r3, #24
 8008366:	4313      	orrs	r3, r2
 8008368:	4a18      	ldr	r2, [pc, #96]	; (80083cc <MX_LWIP_Init+0x250>)
 800836a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800836c:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <MX_LWIP_Init+0x254>)
 800836e:	9302      	str	r3, [sp, #8]
 8008370:	4b18      	ldr	r3, [pc, #96]	; (80083d4 <MX_LWIP_Init+0x258>)
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	2300      	movs	r3, #0
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4b14      	ldr	r3, [pc, #80]	; (80083cc <MX_LWIP_Init+0x250>)
 800837a:	4a13      	ldr	r2, [pc, #76]	; (80083c8 <MX_LWIP_Init+0x24c>)
 800837c:	4911      	ldr	r1, [pc, #68]	; (80083c4 <MX_LWIP_Init+0x248>)
 800837e:	4816      	ldr	r0, [pc, #88]	; (80083d8 <MX_LWIP_Init+0x25c>)
 8008380:	f003 f982 	bl	800b688 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008384:	4814      	ldr	r0, [pc, #80]	; (80083d8 <MX_LWIP_Init+0x25c>)
 8008386:	f003 fb31 	bl	800b9ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800838a:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <MX_LWIP_Init+0x25c>)
 800838c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008390:	089b      	lsrs	r3, r3, #2
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800839c:	480e      	ldr	r0, [pc, #56]	; (80083d8 <MX_LWIP_Init+0x25c>)
 800839e:	f003 fb35 	bl	800ba0c <netif_set_up>
 80083a2:	e002      	b.n	80083aa <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80083a4:	480c      	ldr	r0, [pc, #48]	; (80083d8 <MX_LWIP_Init+0x25c>)
 80083a6:	f003 fb9d 	bl	800bae4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80083aa:	490c      	ldr	r1, [pc, #48]	; (80083dc <MX_LWIP_Init+0x260>)
 80083ac:	480a      	ldr	r0, [pc, #40]	; (80083d8 <MX_LWIP_Init+0x25c>)
 80083ae:	f003 fbcb 	bl	800bb48 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80083b2:	bf00      	nop
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}
 80083b8:	200076c0 	.word	0x200076c0
 80083bc:	200076bc 	.word	0x200076bc
 80083c0:	200076b4 	.word	0x200076b4
 80083c4:	200076b8 	.word	0x200076b8
 80083c8:	200076c4 	.word	0x200076c4
 80083cc:	200076c8 	.word	0x200076c8
 80083d0:	080151ed 	.word	0x080151ed
 80083d4:	0800896d 	.word	0x0800896d
 80083d8:	200054a0 	.word	0x200054a0
 80083dc:	080089d9 	.word	0x080089d9

080083e0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08e      	sub	sp, #56	; 0x38
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	605a      	str	r2, [r3, #4]
 80083f2:	609a      	str	r2, [r3, #8]
 80083f4:	60da      	str	r2, [r3, #12]
 80083f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a46      	ldr	r2, [pc, #280]	; (8008518 <HAL_ETH_MspInit+0x138>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	f040 8085 	bne.w	800850e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008404:	2300      	movs	r3, #0
 8008406:	623b      	str	r3, [r7, #32]
 8008408:	4b44      	ldr	r3, [pc, #272]	; (800851c <HAL_ETH_MspInit+0x13c>)
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	4a43      	ldr	r2, [pc, #268]	; (800851c <HAL_ETH_MspInit+0x13c>)
 800840e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008412:	6313      	str	r3, [r2, #48]	; 0x30
 8008414:	4b41      	ldr	r3, [pc, #260]	; (800851c <HAL_ETH_MspInit+0x13c>)
 8008416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841c:	623b      	str	r3, [r7, #32]
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	2300      	movs	r3, #0
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	4b3d      	ldr	r3, [pc, #244]	; (800851c <HAL_ETH_MspInit+0x13c>)
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	4a3c      	ldr	r2, [pc, #240]	; (800851c <HAL_ETH_MspInit+0x13c>)
 800842a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800842e:	6313      	str	r3, [r2, #48]	; 0x30
 8008430:	4b3a      	ldr	r3, [pc, #232]	; (800851c <HAL_ETH_MspInit+0x13c>)
 8008432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008438:	61fb      	str	r3, [r7, #28]
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	2300      	movs	r3, #0
 800843e:	61bb      	str	r3, [r7, #24]
 8008440:	4b36      	ldr	r3, [pc, #216]	; (800851c <HAL_ETH_MspInit+0x13c>)
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	4a35      	ldr	r2, [pc, #212]	; (800851c <HAL_ETH_MspInit+0x13c>)
 8008446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800844a:	6313      	str	r3, [r2, #48]	; 0x30
 800844c:	4b33      	ldr	r3, [pc, #204]	; (800851c <HAL_ETH_MspInit+0x13c>)
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008454:	61bb      	str	r3, [r7, #24]
 8008456:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	4b2f      	ldr	r3, [pc, #188]	; (800851c <HAL_ETH_MspInit+0x13c>)
 800845e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008460:	4a2e      	ldr	r2, [pc, #184]	; (800851c <HAL_ETH_MspInit+0x13c>)
 8008462:	f043 0304 	orr.w	r3, r3, #4
 8008466:	6313      	str	r3, [r2, #48]	; 0x30
 8008468:	4b2c      	ldr	r3, [pc, #176]	; (800851c <HAL_ETH_MspInit+0x13c>)
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008474:	2300      	movs	r3, #0
 8008476:	613b      	str	r3, [r7, #16]
 8008478:	4b28      	ldr	r3, [pc, #160]	; (800851c <HAL_ETH_MspInit+0x13c>)
 800847a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847c:	4a27      	ldr	r2, [pc, #156]	; (800851c <HAL_ETH_MspInit+0x13c>)
 800847e:	f043 0301 	orr.w	r3, r3, #1
 8008482:	6313      	str	r3, [r2, #48]	; 0x30
 8008484:	4b25      	ldr	r3, [pc, #148]	; (800851c <HAL_ETH_MspInit+0x13c>)
 8008486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	613b      	str	r3, [r7, #16]
 800848e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008490:	2300      	movs	r3, #0
 8008492:	60fb      	str	r3, [r7, #12]
 8008494:	4b21      	ldr	r3, [pc, #132]	; (800851c <HAL_ETH_MspInit+0x13c>)
 8008496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008498:	4a20      	ldr	r2, [pc, #128]	; (800851c <HAL_ETH_MspInit+0x13c>)
 800849a:	f043 0302 	orr.w	r3, r3, #2
 800849e:	6313      	str	r3, [r2, #48]	; 0x30
 80084a0:	4b1e      	ldr	r3, [pc, #120]	; (800851c <HAL_ETH_MspInit+0x13c>)
 80084a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	60fb      	str	r3, [r7, #12]
 80084aa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80084ac:	2332      	movs	r3, #50	; 0x32
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084b0:	2302      	movs	r3, #2
 80084b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b4:	2300      	movs	r3, #0
 80084b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084b8:	2303      	movs	r3, #3
 80084ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084bc:	230b      	movs	r3, #11
 80084be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084c4:	4619      	mov	r1, r3
 80084c6:	4816      	ldr	r0, [pc, #88]	; (8008520 <HAL_ETH_MspInit+0x140>)
 80084c8:	f7fb ff58 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80084cc:	2386      	movs	r3, #134	; 0x86
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084d0:	2302      	movs	r3, #2
 80084d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d4:	2300      	movs	r3, #0
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084d8:	2303      	movs	r3, #3
 80084da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084dc:	230b      	movs	r3, #11
 80084de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084e4:	4619      	mov	r1, r3
 80084e6:	480f      	ldr	r0, [pc, #60]	; (8008524 <HAL_ETH_MspInit+0x144>)
 80084e8:	f7fb ff48 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80084ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084f2:	2302      	movs	r3, #2
 80084f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084fa:	2303      	movs	r3, #3
 80084fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084fe:	230b      	movs	r3, #11
 8008500:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008506:	4619      	mov	r1, r3
 8008508:	4807      	ldr	r0, [pc, #28]	; (8008528 <HAL_ETH_MspInit+0x148>)
 800850a:	f7fb ff37 	bl	800437c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800850e:	bf00      	nop
 8008510:	3738      	adds	r7, #56	; 0x38
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	40028000 	.word	0x40028000
 800851c:	40023800 	.word	0x40023800
 8008520:	40020800 	.word	0x40020800
 8008524:	40020000 	.word	0x40020000
 8008528:	40020400 	.word	0x40020400

0800852c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b086      	sub	sp, #24
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008534:	2300      	movs	r3, #0
 8008536:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008538:	4b4d      	ldr	r3, [pc, #308]	; (8008670 <low_level_init+0x144>)
 800853a:	4a4e      	ldr	r2, [pc, #312]	; (8008674 <low_level_init+0x148>)
 800853c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800853e:	4b4c      	ldr	r3, [pc, #304]	; (8008670 <low_level_init+0x144>)
 8008540:	2201      	movs	r2, #1
 8008542:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008544:	4b4a      	ldr	r3, [pc, #296]	; (8008670 <low_level_init+0x144>)
 8008546:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800854a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800854c:	4b48      	ldr	r3, [pc, #288]	; (8008670 <low_level_init+0x144>)
 800854e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008552:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008554:	4b46      	ldr	r3, [pc, #280]	; (8008670 <low_level_init+0x144>)
 8008556:	2201      	movs	r2, #1
 8008558:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800855a:	2300      	movs	r3, #0
 800855c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800855e:	2380      	movs	r3, #128	; 0x80
 8008560:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8008562:	23e1      	movs	r3, #225	; 0xe1
 8008564:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8008566:	2300      	movs	r3, #0
 8008568:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800856a:	2300      	movs	r3, #0
 800856c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800856e:	2300      	movs	r3, #0
 8008570:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8008572:	4a3f      	ldr	r2, [pc, #252]	; (8008670 <low_level_init+0x144>)
 8008574:	f107 0308 	add.w	r3, r7, #8
 8008578:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800857a:	4b3d      	ldr	r3, [pc, #244]	; (8008670 <low_level_init+0x144>)
 800857c:	2200      	movs	r2, #0
 800857e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008580:	4b3b      	ldr	r3, [pc, #236]	; (8008670 <low_level_init+0x144>)
 8008582:	2200      	movs	r2, #0
 8008584:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008586:	4b3a      	ldr	r3, [pc, #232]	; (8008670 <low_level_init+0x144>)
 8008588:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800858c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800858e:	4838      	ldr	r0, [pc, #224]	; (8008670 <low_level_init+0x144>)
 8008590:	f7fa fdce 	bl	8003130 <HAL_ETH_Init>
 8008594:	4603      	mov	r3, r0
 8008596:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8008598:	7dfb      	ldrb	r3, [r7, #23]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d108      	bne.n	80085b0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80085a4:	f043 0304 	orr.w	r3, r3, #4
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80085b0:	2304      	movs	r3, #4
 80085b2:	4a31      	ldr	r2, [pc, #196]	; (8008678 <low_level_init+0x14c>)
 80085b4:	4931      	ldr	r1, [pc, #196]	; (800867c <low_level_init+0x150>)
 80085b6:	482e      	ldr	r0, [pc, #184]	; (8008670 <low_level_init+0x144>)
 80085b8:	f7fa ff56 	bl	8003468 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80085bc:	2304      	movs	r3, #4
 80085be:	4a30      	ldr	r2, [pc, #192]	; (8008680 <low_level_init+0x154>)
 80085c0:	4930      	ldr	r1, [pc, #192]	; (8008684 <low_level_init+0x158>)
 80085c2:	482b      	ldr	r0, [pc, #172]	; (8008670 <low_level_init+0x144>)
 80085c4:	f7fa ffb9 	bl	800353a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2206      	movs	r2, #6
 80085cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80085d0:	4b27      	ldr	r3, [pc, #156]	; (8008670 <low_level_init+0x144>)
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	781a      	ldrb	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80085dc:	4b24      	ldr	r3, [pc, #144]	; (8008670 <low_level_init+0x144>)
 80085de:	695b      	ldr	r3, [r3, #20]
 80085e0:	785a      	ldrb	r2, [r3, #1]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80085e8:	4b21      	ldr	r3, [pc, #132]	; (8008670 <low_level_init+0x144>)
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	789a      	ldrb	r2, [r3, #2]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80085f4:	4b1e      	ldr	r3, [pc, #120]	; (8008670 <low_level_init+0x144>)
 80085f6:	695b      	ldr	r3, [r3, #20]
 80085f8:	78da      	ldrb	r2, [r3, #3]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008600:	4b1b      	ldr	r3, [pc, #108]	; (8008670 <low_level_init+0x144>)
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	791a      	ldrb	r2, [r3, #4]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800860c:	4b18      	ldr	r3, [pc, #96]	; (8008670 <low_level_init+0x144>)
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	795a      	ldrb	r2, [r3, #5]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800861e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008626:	f043 030a 	orr.w	r3, r3, #10
 800862a:	b2da      	uxtb	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008632:	480f      	ldr	r0, [pc, #60]	; (8008670 <low_level_init+0x144>)
 8008634:	f7fb fa2a 	bl	8003a8c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008638:	f107 0310 	add.w	r3, r7, #16
 800863c:	461a      	mov	r2, r3
 800863e:	211d      	movs	r1, #29
 8008640:	480b      	ldr	r0, [pc, #44]	; (8008670 <low_level_init+0x144>)
 8008642:	f7fb f955 	bl	80038f0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f043 030b 	orr.w	r3, r3, #11
 800864c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	461a      	mov	r2, r3
 8008652:	211d      	movs	r1, #29
 8008654:	4806      	ldr	r0, [pc, #24]	; (8008670 <low_level_init+0x144>)
 8008656:	f7fb f9b3 	bl	80039c0 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800865a:	f107 0310 	add.w	r3, r7, #16
 800865e:	461a      	mov	r2, r3
 8008660:	211d      	movs	r1, #29
 8008662:	4803      	ldr	r0, [pc, #12]	; (8008670 <low_level_init+0x144>)
 8008664:	f7fb f944 	bl	80038f0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008668:	bf00      	nop
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	20008f9c 	.word	0x20008f9c
 8008674:	40028000 	.word	0x40028000
 8008678:	20008fe4 	.word	0x20008fe4
 800867c:	200076cc 	.word	0x200076cc
 8008680:	2000774c 	.word	0x2000774c
 8008684:	20008f1c 	.word	0x20008f1c

08008688 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08a      	sub	sp, #40	; 0x28
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008692:	4b4b      	ldr	r3, [pc, #300]	; (80087c0 <low_level_output+0x138>)
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80086a2:	2300      	movs	r3, #0
 80086a4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80086aa:	4b45      	ldr	r3, [pc, #276]	; (80087c0 <low_level_output+0x138>)
 80086ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ae:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80086b0:	2300      	movs	r3, #0
 80086b2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	623b      	str	r3, [r7, #32]
 80086b8:	e05a      	b.n	8008770 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	da03      	bge.n	80086ca <low_level_output+0x42>
      {
        errval = ERR_USE;
 80086c2:	23f8      	movs	r3, #248	; 0xf8
 80086c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80086c8:	e05c      	b.n	8008784 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	895b      	ldrh	r3, [r3, #10]
 80086ce:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80086d4:	e02f      	b.n	8008736 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80086d6:	69fa      	ldr	r2, [r7, #28]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	18d0      	adds	r0, r2, r3
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	18d1      	adds	r1, r2, r3
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80086ea:	3304      	adds	r3, #4
 80086ec:	461a      	mov	r2, r3
 80086ee:	f00c fe89 	bl	8015404 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	da03      	bge.n	8008708 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008700:	23f8      	movs	r3, #248	; 0xf8
 8008702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008706:	e03d      	b.n	8008784 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800870e:	693a      	ldr	r2, [r7, #16]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4413      	add	r3, r2
 8008714:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008718:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008724:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008730:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	4413      	add	r3, r2
 800873c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008740:	4293      	cmp	r3, r2
 8008742:	d8c8      	bhi.n	80086d6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008744:	69fa      	ldr	r2, [r7, #28]
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	18d0      	adds	r0, r2, r3
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	4413      	add	r3, r2
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4619      	mov	r1, r3
 8008756:	f00c fe55 	bl	8015404 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4413      	add	r3, r2
 8008760:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	623b      	str	r3, [r7, #32]
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1a1      	bne.n	80086ba <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008776:	6979      	ldr	r1, [r7, #20]
 8008778:	4811      	ldr	r0, [pc, #68]	; (80087c0 <low_level_output+0x138>)
 800877a:	f7fa ff4b 	bl	8003614 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008784:	4b0e      	ldr	r3, [pc, #56]	; (80087c0 <low_level_output+0x138>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800878c:	3314      	adds	r3, #20
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0320 	and.w	r3, r3, #32
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00d      	beq.n	80087b4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008798:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <low_level_output+0x138>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087a0:	3314      	adds	r3, #20
 80087a2:	2220      	movs	r2, #32
 80087a4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80087a6:	4b06      	ldr	r3, [pc, #24]	; (80087c0 <low_level_output+0x138>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087ae:	3304      	adds	r3, #4
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80087b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3728      	adds	r7, #40	; 0x28
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20008f9c 	.word	0x20008f9c

080087c4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b08c      	sub	sp, #48	; 0x30
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80087cc:	2300      	movs	r3, #0
 80087ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80087d0:	2300      	movs	r3, #0
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80087e0:	2300      	movs	r3, #0
 80087e2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80087e8:	484f      	ldr	r0, [pc, #316]	; (8008928 <low_level_input+0x164>)
 80087ea:	f7fa fffd 	bl	80037e8 <HAL_ETH_GetReceivedFrame>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <low_level_input+0x34>

    return NULL;
 80087f4:	2300      	movs	r3, #0
 80087f6:	e092      	b.n	800891e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80087f8:	4b4b      	ldr	r3, [pc, #300]	; (8008928 <low_level_input+0x164>)
 80087fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80087fe:	4b4a      	ldr	r3, [pc, #296]	; (8008928 <low_level_input+0x164>)
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008804:	89fb      	ldrh	r3, [r7, #14]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d007      	beq.n	800881a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800880a:	89fb      	ldrh	r3, [r7, #14]
 800880c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008810:	4619      	mov	r1, r3
 8008812:	2000      	movs	r0, #0
 8008814:	f003 fa34 	bl	800bc80 <pbuf_alloc>
 8008818:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d04b      	beq.n	80088b8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008820:	4b41      	ldr	r3, [pc, #260]	; (8008928 <low_level_input+0x164>)
 8008822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008824:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28
 800882e:	e040      	b.n	80088b2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	895b      	ldrh	r3, [r3, #10]
 8008834:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800883a:	e021      	b.n	8008880 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	18d0      	adds	r0, r2, r3
 8008844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	18d1      	adds	r1, r2, r3
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8008850:	3304      	adds	r3, #4
 8008852:	461a      	mov	r2, r3
 8008854:	f00c fdd6 	bl	8015404 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008864:	69fa      	ldr	r2, [r7, #28]
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	4413      	add	r3, r2
 800886a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800886e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800887a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800888a:	4293      	cmp	r3, r2
 800888c:	d8d6      	bhi.n	800883c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800888e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	18d0      	adds	r0, r2, r3
 8008896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	4413      	add	r3, r2
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	4619      	mov	r1, r3
 80088a0:	f00c fdb0 	bl	8015404 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80088a4:	69fa      	ldr	r2, [r7, #28]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	4413      	add	r3, r2
 80088aa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1bb      	bne.n	8008830 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80088b8:	4b1b      	ldr	r3, [pc, #108]	; (8008928 <low_level_input+0x164>)
 80088ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088bc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80088be:	2300      	movs	r3, #0
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	e00b      	b.n	80088dc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80088cc:	6a3b      	ldr	r3, [r7, #32]
 80088ce:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	3301      	adds	r3, #1
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	4b12      	ldr	r3, [pc, #72]	; (8008928 <low_level_input+0x164>)
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d3ee      	bcc.n	80088c4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80088e6:	4b10      	ldr	r3, [pc, #64]	; (8008928 <low_level_input+0x164>)
 80088e8:	2200      	movs	r2, #0
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80088ec:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <low_level_input+0x164>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088f4:	3314      	adds	r3, #20
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00d      	beq.n	800891c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008900:	4b09      	ldr	r3, [pc, #36]	; (8008928 <low_level_input+0x164>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008908:	3314      	adds	r3, #20
 800890a:	2280      	movs	r2, #128	; 0x80
 800890c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800890e:	4b06      	ldr	r3, [pc, #24]	; (8008928 <low_level_input+0x164>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008916:	3308      	adds	r3, #8
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800891e:	4618      	mov	r0, r3
 8008920:	3730      	adds	r7, #48	; 0x30
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20008f9c 	.word	0x20008f9c

0800892c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff ff45 	bl	80087c4 <low_level_input>
 800893a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d010      	beq.n	8008964 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	6879      	ldr	r1, [r7, #4]
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	4798      	blx	r3
 800894c:	4603      	mov	r3, r0
 800894e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8008950:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d006      	beq.n	8008966 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f003 fc75 	bl	800c248 <pbuf_free>
    p = NULL;
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
 8008962:	e000      	b.n	8008966 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8008964:	bf00      	nop
  }
}
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d106      	bne.n	8008988 <ethernetif_init+0x1c>
 800897a:	4b0e      	ldr	r3, [pc, #56]	; (80089b4 <ethernetif_init+0x48>)
 800897c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8008980:	490d      	ldr	r1, [pc, #52]	; (80089b8 <ethernetif_init+0x4c>)
 8008982:	480e      	ldr	r0, [pc, #56]	; (80089bc <ethernetif_init+0x50>)
 8008984:	f00c fd6e 	bl	8015464 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2273      	movs	r2, #115	; 0x73
 800898c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2274      	movs	r2, #116	; 0x74
 8008994:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a09      	ldr	r2, [pc, #36]	; (80089c0 <ethernetif_init+0x54>)
 800899c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a08      	ldr	r2, [pc, #32]	; (80089c4 <ethernetif_init+0x58>)
 80089a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7ff fdc1 	bl	800852c <low_level_init>

  return ERR_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	080173f0 	.word	0x080173f0
 80089b8:	0801740c 	.word	0x0801740c
 80089bc:	0801741c 	.word	0x0801741c
 80089c0:	080136b1 	.word	0x080136b1
 80089c4:	08008689 	.word	0x08008689

080089c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80089cc:	f7f9 ff00 	bl	80027d0 <HAL_GetTick>
 80089d0:	4603      	mov	r3, r0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089ee:	089b      	lsrs	r3, r3, #2
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d05d      	beq.n	8008ab6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80089fa:	4b34      	ldr	r3, [pc, #208]	; (8008acc <ethernetif_update_config+0xf4>)
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d03f      	beq.n	8008a82 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008a02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a06:	2100      	movs	r1, #0
 8008a08:	4830      	ldr	r0, [pc, #192]	; (8008acc <ethernetif_update_config+0xf4>)
 8008a0a:	f7fa ffd9 	bl	80039c0 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008a0e:	f7f9 fedf 	bl	80027d0 <HAL_GetTick>
 8008a12:	4603      	mov	r3, r0
 8008a14:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008a16:	f107 0308 	add.w	r3, r7, #8
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	482b      	ldr	r0, [pc, #172]	; (8008acc <ethernetif_update_config+0xf4>)
 8008a20:	f7fa ff66 	bl	80038f0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008a24:	f7f9 fed4 	bl	80027d0 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a32:	d828      	bhi.n	8008a86 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	f003 0320 	and.w	r3, r3, #32
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0eb      	beq.n	8008a16 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008a3e:	f107 0308 	add.w	r3, r7, #8
 8008a42:	461a      	mov	r2, r3
 8008a44:	2110      	movs	r1, #16
 8008a46:	4821      	ldr	r0, [pc, #132]	; (8008acc <ethernetif_update_config+0xf4>)
 8008a48:	f7fa ff52 	bl	80038f0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f003 0304 	and.w	r3, r3, #4
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008a56:	4b1d      	ldr	r3, [pc, #116]	; (8008acc <ethernetif_update_config+0xf4>)
 8008a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a5c:	60da      	str	r2, [r3, #12]
 8008a5e:	e002      	b.n	8008a66 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008a60:	4b1a      	ldr	r3, [pc, #104]	; (8008acc <ethernetif_update_config+0xf4>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d003      	beq.n	8008a78 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008a70:	4b16      	ldr	r3, [pc, #88]	; (8008acc <ethernetif_update_config+0xf4>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	609a      	str	r2, [r3, #8]
 8008a76:	e016      	b.n	8008aa6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008a78:	4b14      	ldr	r3, [pc, #80]	; (8008acc <ethernetif_update_config+0xf4>)
 8008a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008a7e:	609a      	str	r2, [r3, #8]
 8008a80:	e011      	b.n	8008aa6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008a82:	bf00      	nop
 8008a84:	e000      	b.n	8008a88 <ethernetif_update_config+0xb0>
          goto error;
 8008a86:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008a88:	4b10      	ldr	r3, [pc, #64]	; (8008acc <ethernetif_update_config+0xf4>)
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	08db      	lsrs	r3, r3, #3
 8008a8e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008a90:	4b0e      	ldr	r3, [pc, #56]	; (8008acc <ethernetif_update_config+0xf4>)
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	085b      	lsrs	r3, r3, #1
 8008a96:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	480a      	ldr	r0, [pc, #40]	; (8008acc <ethernetif_update_config+0xf4>)
 8008aa2:	f7fa ff8d 	bl	80039c0 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	4808      	ldr	r0, [pc, #32]	; (8008acc <ethernetif_update_config+0xf4>)
 8008aaa:	f7fb f84d 	bl	8003b48 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008aae:	4807      	ldr	r0, [pc, #28]	; (8008acc <ethernetif_update_config+0xf4>)
 8008ab0:	f7fa ffec 	bl	8003a8c <HAL_ETH_Start>
 8008ab4:	e002      	b.n	8008abc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008ab6:	4805      	ldr	r0, [pc, #20]	; (8008acc <ethernetif_update_config+0xf4>)
 8008ab8:	f7fb f817 	bl	8003aea <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f807 	bl	8008ad0 <ethernetif_notify_conn_changed>
}
 8008ac2:	bf00      	nop
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20008f9c 	.word	0x20008f9c

08008ad0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b087      	sub	sp, #28
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	4613      	mov	r3, r2
 8008af0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008af2:	2301      	movs	r3, #1
 8008af4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008af6:	2300      	movs	r3, #0
 8008af8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008afa:	4b1f      	ldr	r3, [pc, #124]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008afc:	7a5b      	ldrb	r3, [r3, #9]
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d131      	bne.n	8008b68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b04:	4b1c      	ldr	r3, [pc, #112]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b06:	7a5b      	ldrb	r3, [r3, #9]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b0e:	2100      	movs	r1, #0
 8008b10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008b12:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b14:	7a5b      	ldrb	r3, [r3, #9]
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	4a17      	ldr	r2, [pc, #92]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b22:	4b15      	ldr	r3, [pc, #84]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b24:	7a5b      	ldrb	r3, [r3, #9]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b2c:	4413      	add	r3, r2
 8008b2e:	79fa      	ldrb	r2, [r7, #7]
 8008b30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008b32:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b34:	7a5b      	ldrb	r3, [r3, #9]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	1c5a      	adds	r2, r3, #1
 8008b3a:	b2d1      	uxtb	r1, r2
 8008b3c:	4a0e      	ldr	r2, [pc, #56]	; (8008b78 <FATFS_LinkDriverEx+0x94>)
 8008b3e:	7251      	strb	r1, [r2, #9]
 8008b40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008b42:	7dbb      	ldrb	r3, [r7, #22]
 8008b44:	3330      	adds	r3, #48	; 0x30
 8008b46:	b2da      	uxtb	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	223a      	movs	r2, #58	; 0x3a
 8008b52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	3302      	adds	r3, #2
 8008b58:	222f      	movs	r2, #47	; 0x2f
 8008b5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	3303      	adds	r3, #3
 8008b60:	2200      	movs	r2, #0
 8008b62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	371c      	adds	r7, #28
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	20000580 	.word	0x20000580

08008b7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008b86:	2200      	movs	r2, #0
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff ffaa 	bl	8008ae4 <FATFS_LinkDriverEx>
 8008b90:	4603      	mov	r3, r0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
	...

08008b9c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <fs_open+0x16>
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <fs_open+0x1c>
    return ERR_ARG;
 8008bb2:	f06f 030f 	mvn.w	r3, #15
 8008bb6:	e028      	b.n	8008c0a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8008bb8:	4b16      	ldr	r3, [pc, #88]	; (8008c14 <fs_open+0x78>)
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	e020      	b.n	8008c00 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6838      	ldr	r0, [r7, #0]
 8008bc6:	f7f7 fb03 	bl	80001d0 <strcmp>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d114      	bne.n	8008bfa <fs_open+0x5e>
      file->data = (const char *)f->data;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68da      	ldr	r2, [r3, #12]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	7c1a      	ldrb	r2, [r3, #16]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e007      	b.n	8008c0a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1db      	bne.n	8008bbe <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8008c06:	f06f 0305 	mvn.w	r3, #5
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3710      	adds	r7, #16
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	08021460 	.word	0x08021460

08008c18 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	1ad3      	subs	r3, r2, r3
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b082      	sub	sp, #8
 8008c4e:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8008c50:	f44f 7090 	mov.w	r0, #288	; 0x120
 8008c54:	f002 fb2c 	bl	800b2b0 <mem_malloc>
 8008c58:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8008c60:	f44f 7290 	mov.w	r2, #288	; 0x120
 8008c64:	2100      	movs	r1, #0
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f00c fbf4 	bl	8015454 <memset>
  }
  return ret;
 8008c6c:	687b      	ldr	r3, [r7, #4]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3708      	adds	r7, #8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}

08008c76 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f002 f9ad 	bl	800afe4 <mem_free>
  }
}
 8008c8a:	bf00      	nop
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}

08008c92 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8008c92:	b580      	push	{r7, lr}
 8008c94:	b082      	sub	sp, #8
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8008c9a:	22d8      	movs	r2, #216	; 0xd8
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f00c fbd8 	bl	8015454 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2205      	movs	r2, #5
 8008ca8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8008cba:	20d8      	movs	r0, #216	; 0xd8
 8008cbc:	f002 faf8 	bl	800b2b0 <mem_malloc>
 8008cc0:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <http_state_alloc+0x1a>
    http_state_init(ret);
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff ffe2 	bl	8008c92 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8008cce:	687b      	ldr	r3, [r7, #4]
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d007      	beq.n	8008cf8 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff ff93 	bl	8008c18 <fs_close>
    hs->handle = NULL;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d007      	beq.n	8008d10 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7ff ffb6 	bl	8008c76 <http_ssi_state_free>
    hs->ssi = NULL;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6a1b      	ldr	r3, [r3, #32]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d007      	beq.n	8008d28 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f003 fa93 	bl	800c248 <pbuf_free>
    hs->req = NULL;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d005      	beq.n	8008d4a <http_state_free+0x1a>
    http_state_eof(hs);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f7ff ffca 	bl	8008cd8 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f002 f94d 	bl	800afe4 <mem_free>
  }
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b086      	sub	sp, #24
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d106      	bne.n	8008d76 <http_write+0x22>
 8008d68:	4b2c      	ldr	r3, [pc, #176]	; (8008e1c <http_write+0xc8>)
 8008d6a:	f240 2219 	movw	r2, #537	; 0x219
 8008d6e:	492c      	ldr	r1, [pc, #176]	; (8008e20 <http_write+0xcc>)
 8008d70:	482c      	ldr	r0, [pc, #176]	; (8008e24 <http_write+0xd0>)
 8008d72:	f00c fb77 	bl	8015464 <iprintf>
  len = *length;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	881b      	ldrh	r3, [r3, #0]
 8008d7a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8008d7c:	8afb      	ldrh	r3, [r7, #22]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <http_write+0x32>
    return ERR_OK;
 8008d82:	2300      	movs	r3, #0
 8008d84:	e045      	b.n	8008e12 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d8c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8008d8e:	8aba      	ldrh	r2, [r7, #20]
 8008d90:	8afb      	ldrh	r3, [r7, #22]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d201      	bcs.n	8008d9a <http_write+0x46>
    len = max_len;
 8008d96:	8abb      	ldrh	r3, [r7, #20]
 8008d98:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d9e:	005b      	lsls	r3, r3, #1
 8008da0:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8008da2:	8afa      	ldrh	r2, [r7, #22]
 8008da4:	8abb      	ldrh	r3, [r7, #20]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d901      	bls.n	8008dae <http_write+0x5a>
    len = max_len;
 8008daa:	8abb      	ldrh	r3, [r7, #20]
 8008dac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8008dae:	78fb      	ldrb	r3, [r7, #3]
 8008db0:	8afa      	ldrh	r2, [r7, #22]
 8008db2:	68b9      	ldr	r1, [r7, #8]
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f007 ffcb 	bl	8010d50 <tcp_write>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8008dbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dc6:	d10f      	bne.n	8008de8 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d004      	beq.n	8008ddc <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d902      	bls.n	8008de2 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	82fb      	strh	r3, [r7, #22]
 8008de0:	e002      	b.n	8008de8 <http_write+0x94>
      } else {
        len /= 2;
 8008de2:	8afb      	ldrh	r3, [r7, #22]
 8008de4:	085b      	lsrs	r3, r3, #1
 8008de6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8008de8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008df0:	d102      	bne.n	8008df8 <http_write+0xa4>
 8008df2:	8afb      	ldrh	r3, [r7, #22]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d8da      	bhi.n	8008dae <http_write+0x5a>

  if (err == ERR_OK) {
 8008df8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d103      	bne.n	8008e08 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	8afa      	ldrh	r2, [r7, #22]
 8008e04:	801a      	strh	r2, [r3, #0]
 8008e06:	e002      	b.n	8008e0e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8008e0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	08017914 	.word	0x08017914
 8008e20:	0801794c 	.word	0x0801794c
 8008e24:	0801795c 	.word	0x0801795c

08008e28 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	4613      	mov	r3, r2
 8008e34:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00c      	beq.n	8008e56 <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d007      	beq.n	8008e56 <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8008e46:	4b1f      	ldr	r3, [pc, #124]	; (8008ec4 <http_close_or_abort_conn+0x9c>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8008e4c:	223f      	movs	r2, #63	; 0x3f
 8008e4e:	491d      	ldr	r1, [pc, #116]	; (8008ec4 <http_close_or_abort_conn+0x9c>)
 8008e50:	68b8      	ldr	r0, [r7, #8]
 8008e52:	f7f8 fc13 	bl	800167c <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8008e56:	2100      	movs	r1, #0
 8008e58:	68f8      	ldr	r0, [r7, #12]
 8008e5a:	f005 f83b 	bl	800ded4 <tcp_arg>
  altcp_recv(pcb, NULL);
 8008e5e:	2100      	movs	r1, #0
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f005 f849 	bl	800def8 <tcp_recv>
  altcp_err(pcb, NULL);
 8008e66:	2100      	movs	r1, #0
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f005 f889 	bl	800df80 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8008e6e:	2200      	movs	r2, #0
 8008e70:	2100      	movs	r1, #0
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f005 f8be 	bl	800dff4 <tcp_poll>
  altcp_sent(pcb, NULL);
 8008e78:	2100      	movs	r1, #0
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f005 f85e 	bl	800df3c <tcp_sent>
  if (hs != NULL) {
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d002      	beq.n	8008e8c <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 8008e86:	68b8      	ldr	r0, [r7, #8]
 8008e88:	f7ff ff52 	bl	8008d30 <http_state_free>
  }

  if (abort_conn) {
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d004      	beq.n	8008e9c <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f003 ff60 	bl	800cd58 <tcp_abort>
    return ERR_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e00f      	b.n	8008ebc <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f003 fe71 	bl	800cb84 <tcp_close>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8008ea6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d004      	beq.n	8008eb8 <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8008eae:	2204      	movs	r2, #4
 8008eb0:	4905      	ldr	r1, [pc, #20]	; (8008ec8 <http_close_or_abort_conn+0xa0>)
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f005 f89e 	bl	800dff4 <tcp_poll>
  }
  return err;
 8008eb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3718      	adds	r7, #24
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	2000098c 	.word	0x2000098c
 8008ec8:	0800a73b 	.word	0x0800a73b

08008ecc <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff ffa4 	bl	8008e28 <http_close_or_abort_conn>
 8008ee0:	4603      	mov	r3, r0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f7ff ffe8 	bl	8008ecc <http_close_conn>
  }
}
 8008efc:	bf00      	nop
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d003      	beq.n	8008f1c <extract_uri_parameters+0x18>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <extract_uri_parameters+0x1c>
    return (0);
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e04b      	b.n	8008fb8 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008f24:	2300      	movs	r3, #0
 8008f26:	613b      	str	r3, [r7, #16]
 8008f28:	e03f      	b.n	8008faa <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	320c      	adds	r2, #12
 8008f30:	6979      	ldr	r1, [r7, #20]
 8008f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8008f3a:	2126      	movs	r1, #38	; 0x26
 8008f3c:	6978      	ldr	r0, [r7, #20]
 8008f3e:	f00c fbc2 	bl	80156c6 <strchr>
 8008f42:	6178      	str	r0, [r7, #20]
    if (pair) {
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d006      	beq.n	8008f58 <extract_uri_parameters+0x54>
      *pair = '\0';
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	701a      	strb	r2, [r3, #0]
      pair++;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	3301      	adds	r3, #1
 8008f54:	617b      	str	r3, [r7, #20]
 8008f56:	e00c      	b.n	8008f72 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8008f58:	2120      	movs	r1, #32
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f00c fbb3 	bl	80156c6 <strchr>
 8008f60:	6178      	str	r0, [r7, #20]
      if (pair) {
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d002      	beq.n	8008f6e <extract_uri_parameters+0x6a>
        *pair = '\0';
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8008f72:	213d      	movs	r1, #61	; 0x3d
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f00c fba6 	bl	80156c6 <strchr>
 8008f7a:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <extract_uri_parameters+0x94>
      *equals = '\0';
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2200      	movs	r2, #0
 8008f86:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	1c59      	adds	r1, r3, #1
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	321c      	adds	r2, #28
 8008f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008f96:	e005      	b.n	8008fa4 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	321c      	adds	r2, #28
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	613b      	str	r3, [r7, #16]
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	2b0f      	cmp	r3, #15
 8008fae:	dc02      	bgt.n	8008fb6 <extract_uri_parameters+0xb2>
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1b9      	bne.n	8008f2a <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8008fb6:	693b      	ldr	r3, [r7, #16]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8008fc0:	b590      	push	{r4, r7, lr}
 8008fc2:	b089      	sub	sp, #36	; 0x24
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d106      	bne.n	8008fdc <get_tag_insert+0x1c>
 8008fce:	4b58      	ldr	r3, [pc, #352]	; (8009130 <get_tag_insert+0x170>)
 8008fd0:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008fd4:	4957      	ldr	r1, [pc, #348]	; (8009134 <get_tag_insert+0x174>)
 8008fd6:	4858      	ldr	r0, [pc, #352]	; (8009138 <get_tag_insert+0x178>)
 8008fd8:	f00c fa44 	bl	8015464 <iprintf>
  ssi = hs->ssi;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe0:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d106      	bne.n	8008ff6 <get_tag_insert+0x36>
 8008fe8:	4b51      	ldr	r3, [pc, #324]	; (8009130 <get_tag_insert+0x170>)
 8008fea:	f240 3206 	movw	r2, #774	; 0x306
 8008fee:	4953      	ldr	r1, [pc, #332]	; (800913c <get_tag_insert+0x17c>)
 8008ff0:	4851      	ldr	r0, [pc, #324]	; (8009138 <get_tag_insert+0x178>)
 8008ff2:	f00c fa37 	bl	8015464 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	8a9b      	ldrh	r3, [r3, #20]
 8008ffa:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009002:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8009004:	4b4e      	ldr	r3, [pc, #312]	; (8009140 <get_tag_insert+0x180>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d033      	beq.n	8009074 <get_tag_insert+0xb4>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800900c:	4b4d      	ldr	r3, [pc, #308]	; (8009144 <get_tag_insert+0x184>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d02f      	beq.n	8009074 <get_tag_insert+0xb4>
 8009014:	4b4c      	ldr	r3, [pc, #304]	; (8009148 <get_tag_insert+0x188>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d02b      	beq.n	8009074 <get_tag_insert+0xb4>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800901c:	2300      	movs	r3, #0
 800901e:	617b      	str	r3, [r7, #20]
 8009020:	e023      	b.n	800906a <get_tag_insert+0xaa>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f103 0018 	add.w	r0, r3, #24
 8009028:	4b46      	ldr	r3, [pc, #280]	; (8009144 <get_tag_insert+0x184>)
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4619      	mov	r1, r3
 8009036:	f7f7 f8cb 	bl	80001d0 <strcmp>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d111      	bne.n	8009064 <get_tag_insert+0xa4>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8009040:	4b3f      	ldr	r3, [pc, #252]	; (8009140 <get_tag_insert+0x180>)
 8009042:	681c      	ldr	r4, [r3, #0]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	3314      	adds	r3, #20
 800904e:	89fa      	ldrh	r2, [r7, #14]
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	4613      	mov	r3, r2
 8009054:	22fa      	movs	r2, #250	; 0xfa
 8009056:	6978      	ldr	r0, [r7, #20]
 8009058:	47a0      	blx	r4
 800905a:	4603      	mov	r3, r0
 800905c:	461a      	mov	r2, r3
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8009062:	e061      	b.n	8009128 <get_tag_insert+0x168>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	3301      	adds	r3, #1
 8009068:	617b      	str	r3, [r7, #20]
 800906a:	4b37      	ldr	r3, [pc, #220]	; (8009148 <get_tag_insert+0x188>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	697a      	ldr	r2, [r7, #20]
 8009070:	429a      	cmp	r2, r3
 8009072:	dbd6      	blt.n	8009022 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	3318      	adds	r3, #24
 8009078:	4618      	mov	r0, r3
 800907a:	f7f7 f8b3 	bl	80001e4 <strlen>
 800907e:	4603      	mov	r3, r0
 8009080:	2be0      	cmp	r3, #224	; 0xe0
 8009082:	d818      	bhi.n	80090b6 <get_tag_insert+0xf6>
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	3318      	adds	r3, #24
 8009088:	4618      	mov	r0, r3
 800908a:	f7f7 f8ab 	bl	80001e4 <strlen>
 800908e:	4603      	mov	r3, r0
 8009090:	2b09      	cmp	r3, #9
 8009092:	d810      	bhi.n	80090b6 <get_tag_insert+0xf6>
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	3318      	adds	r3, #24
 8009098:	4618      	mov	r0, r3
 800909a:	f7f7 f8a3 	bl	80001e4 <strlen>
 800909e:	4603      	mov	r3, r0
 80090a0:	2be0      	cmp	r3, #224	; 0xe0
 80090a2:	d806      	bhi.n	80090b2 <get_tag_insert+0xf2>
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	3318      	adds	r3, #24
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7f7 f89b 	bl	80001e4 <strlen>
 80090ae:	4603      	mov	r3, r0
 80090b0:	e002      	b.n	80090b8 <get_tag_insert+0xf8>
 80090b2:	23e1      	movs	r3, #225	; 0xe1
 80090b4:	e000      	b.n	80090b8 <get_tag_insert+0xf8>
 80090b6:	2309      	movs	r3, #9
 80090b8:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	3321      	adds	r3, #33	; 0x21
 80090be:	2212      	movs	r2, #18
 80090c0:	4922      	ldr	r1, [pc, #136]	; (800914c <get_tag_insert+0x18c>)
 80090c2:	4618      	mov	r0, r3
 80090c4:	f00c f99e 	bl	8015404 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f103 0033 	add.w	r0, r3, #51	; 0x33
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	3318      	adds	r3, #24
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	4619      	mov	r1, r3
 80090d6:	f00c f995 	bl	8015404 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	3312      	adds	r3, #18
 80090de:	3320      	adds	r3, #32
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4413      	add	r3, r2
 80090e4:	3301      	adds	r3, #1
 80090e6:	2207      	movs	r2, #7
 80090e8:	4919      	ldr	r1, [pc, #100]	; (8009150 <get_tag_insert+0x190>)
 80090ea:	4618      	mov	r0, r3
 80090ec:	f00c f98a 	bl	8015404 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	3319      	adds	r3, #25
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	4413      	add	r3, r2
 80090f8:	2200      	movs	r2, #0
 80090fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	3321      	adds	r3, #33	; 0x21
 8009102:	4618      	mov	r0, r3
 8009104:	f7f7 f86e 	bl	80001e4 <strlen>
 8009108:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009110:	d306      	bcc.n	8009120 <get_tag_insert+0x160>
 8009112:	4b07      	ldr	r3, [pc, #28]	; (8009130 <get_tag_insert+0x170>)
 8009114:	f240 323f 	movw	r2, #831	; 0x33f
 8009118:	490e      	ldr	r1, [pc, #56]	; (8009154 <get_tag_insert+0x194>)
 800911a:	4807      	ldr	r0, [pc, #28]	; (8009138 <get_tag_insert+0x178>)
 800911c:	f00c f9a2 	bl	8015464 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	b29a      	uxth	r2, r3
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	825a      	strh	r2, [r3, #18]
}
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	bd90      	pop	{r4, r7, pc}
 800912e:	bf00      	nop
 8009130:	08017914 	.word	0x08017914
 8009134:	08017984 	.word	0x08017984
 8009138:	0801795c 	.word	0x0801795c
 800913c:	08017990 	.word	0x08017990
 8009140:	200009cc 	.word	0x200009cc
 8009144:	200009d4 	.word	0x200009d4
 8009148:	200009d0 	.word	0x200009d0
 800914c:	0801799c 	.word	0x0801799c
 8009150:	080179b0 	.word	0x080179b0
 8009154:	080179b8 	.word	0x080179b8

08009158 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 8009162:	4a55      	ldr	r2, [pc, #340]	; (80092b8 <get_http_headers+0x160>)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2200      	movs	r2, #0
 8009176:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d110      	bne.n	80091a2 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8009180:	4a4e      	ldr	r2, [pc, #312]	; (80092bc <get_http_headers+0x164>)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 8009188:	4a4d      	ldr	r2, [pc, #308]	; (80092c0 <get_http_headers+0x168>)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 80091a0:	e087      	b.n	80092b2 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 80091a2:	4948      	ldr	r1, [pc, #288]	; (80092c4 <get_http_headers+0x16c>)
 80091a4:	6838      	ldr	r0, [r7, #0]
 80091a6:	f00c fac8 	bl	801573a <strstr>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d004      	beq.n	80091ba <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80091b0:	4a42      	ldr	r2, [pc, #264]	; (80092bc <get_http_headers+0x164>)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80091b8:	e01b      	b.n	80091f2 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 80091ba:	4943      	ldr	r1, [pc, #268]	; (80092c8 <get_http_headers+0x170>)
 80091bc:	6838      	ldr	r0, [r7, #0]
 80091be:	f00c fabc 	bl	801573a <strstr>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d004      	beq.n	80091d2 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 80091c8:	4a40      	ldr	r2, [pc, #256]	; (80092cc <get_http_headers+0x174>)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80091d0:	e00f      	b.n	80091f2 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 80091d2:	493f      	ldr	r1, [pc, #252]	; (80092d0 <get_http_headers+0x178>)
 80091d4:	6838      	ldr	r0, [r7, #0]
 80091d6:	f00c fab0 	bl	801573a <strstr>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d004      	beq.n	80091ea <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 80091e0:	4a3c      	ldr	r2, [pc, #240]	; (80092d4 <get_http_headers+0x17c>)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80091e8:	e003      	b.n	80091f2 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 80091ea:	4a3b      	ldr	r2, [pc, #236]	; (80092d8 <get_http_headers+0x180>)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 80091f2:	213f      	movs	r1, #63	; 0x3f
 80091f4:	6838      	ldr	r0, [r7, #0]
 80091f6:	f00c fa66 	bl	80156c6 <strchr>
 80091fa:	60b8      	str	r0, [r7, #8]
  if (vars) {
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <get_http_headers+0xb0>
    *vars = '\0';
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 8009208:	2300      	movs	r3, #0
 800920a:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800920c:	212e      	movs	r1, #46	; 0x2e
 800920e:	6838      	ldr	r0, [r7, #0]
 8009210:	f00c fa59 	bl	80156c6 <strchr>
 8009214:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8009216:	e007      	b.n	8009228 <get_http_headers+0xd0>
    ext = tmp + 1;
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	3301      	adds	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800921e:	212e      	movs	r1, #46	; 0x2e
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f00c fa50 	bl	80156c6 <strchr>
 8009226:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1f4      	bne.n	8009218 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d014      	beq.n	800925e <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8009234:	2300      	movs	r3, #0
 8009236:	617b      	str	r3, [r7, #20]
 8009238:	e00d      	b.n	8009256 <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800923a:	4a28      	ldr	r2, [pc, #160]	; (80092dc <get_http_headers+0x184>)
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009242:	68f9      	ldr	r1, [r7, #12]
 8009244:	4618      	mov	r0, r3
 8009246:	f001 fcd1 	bl	800abec <lwip_stricmp>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d009      	beq.n	8009264 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	3301      	adds	r3, #1
 8009254:	617b      	str	r3, [r7, #20]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b13      	cmp	r3, #19
 800925a:	d9ee      	bls.n	800923a <get_http_headers+0xe2>
 800925c:	e003      	b.n	8009266 <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800925e:	2314      	movs	r3, #20
 8009260:	617b      	str	r3, [r7, #20]
 8009262:	e000      	b.n	8009266 <get_http_headers+0x10e>
        break;
 8009264:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <get_http_headers+0x11a>
    *vars = '?';
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	223f      	movs	r2, #63	; 0x3f
 8009270:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b13      	cmp	r3, #19
 8009276:	d808      	bhi.n	800928a <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 8009278:	4a18      	ldr	r2, [pc, #96]	; (80092dc <get_http_headers+0x184>)
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	00db      	lsls	r3, r3, #3
 800927e:	4413      	add	r3, r2
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8009288:	e00b      	b.n	80092a2 <get_http_headers+0x14a>
  } else if (!ext) {
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d104      	bne.n	800929a <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a13      	ldr	r2, [pc, #76]	; (80092e0 <get_http_headers+0x188>)
 8009294:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8009298:	e003      	b.n	80092a2 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a11      	ldr	r2, [pc, #68]	; (80092e4 <get_http_headers+0x18c>)
 800929e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 80092b2:	3718      	adds	r7, #24
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	08017594 	.word	0x08017594
 80092bc:	08017458 	.word	0x08017458
 80092c0:	080175d4 	.word	0x080175d4
 80092c4:	080179c8 	.word	0x080179c8
 80092c8:	080179cc 	.word	0x080179cc
 80092cc:	08017478 	.word	0x08017478
 80092d0:	080179d0 	.word	0x080179d0
 80092d4:	08017494 	.word	0x08017494
 80092d8:	08017444 	.word	0x08017444
 80092dc:	08021474 	.word	0x08021474
 80092e0:	08017768 	.word	0x08017768
 80092e4:	080179d4 	.word	0x080179d4

080092e8 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d006      	beq.n	800930c <get_http_content_length+0x24>
 80092fe:	4b27      	ldr	r3, [pc, #156]	; (800939c <get_http_content_length+0xb4>)
 8009300:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8009304:	4926      	ldr	r1, [pc, #152]	; (80093a0 <get_http_content_length+0xb8>)
 8009306:	4827      	ldr	r0, [pc, #156]	; (80093a4 <get_http_content_length+0xbc>)
 8009308:	f00c f8ac 	bl	8015464 <iprintf>

  add_content_len = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10c      	bne.n	8009332 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	695b      	ldr	r3, [r3, #20]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d008      	beq.n	8009332 <get_http_content_length+0x4a>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	7c1b      	ldrb	r3, [r3, #16]
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <get_http_content_length+0x4a>
      add_content_len = 1;
 800932e:	2301      	movs	r3, #1
 8009330:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d025      	beq.n	8009384 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	461a      	mov	r2, r3
 8009346:	210c      	movs	r1, #12
 8009348:	f001 fc84 	bl	800ac54 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	33c4      	adds	r3, #196	; 0xc4
 8009350:	4618      	mov	r0, r3
 8009352:	f7f6 ff47 	bl	80001e4 <strlen>
 8009356:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	2b09      	cmp	r3, #9
 800935c:	d810      	bhi.n	8009380 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	33c0      	adds	r3, #192	; 0xc0
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	4413      	add	r3, r2
 8009366:	3304      	adds	r3, #4
 8009368:	2203      	movs	r2, #3
 800936a:	490f      	ldr	r1, [pc, #60]	; (80093a8 <get_http_content_length+0xc0>)
 800936c:	4618      	mov	r0, r3
 800936e:	f00c f849 	bl	8015404 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800937e:	e001      	b.n	8009384 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 8009384:	7bfb      	ldrb	r3, [r7, #15]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800938a:	4a08      	ldr	r2, [pc, #32]	; (80093ac <get_http_content_length+0xc4>)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	08017914 	.word	0x08017914
 80093a0:	080179f4 	.word	0x080179f4
 80093a4:	0801795c 	.word	0x0801795c
 80093a8:	08017a08 	.word	0x08017a08
 80093ac:	08017524 	.word	0x08017524

080093b0 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80093ba:	2300      	movs	r3, #0
 80093bc:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 80093c8:	6838      	ldr	r0, [r7, #0]
 80093ca:	f7ff ff8d 	bl	80092e8 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80093d4:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 80093d6:	8bfb      	ldrh	r3, [r7, #30]
 80093d8:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 80093da:	e08b      	b.n	80094f4 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80093e2:	461a      	mov	r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	322c      	adds	r2, #44	; 0x2c
 80093e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7f6 fef9 	bl	80001e4 <strlen>
 80093f2:	4603      	mov	r3, r0
 80093f4:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 80093f6:	8b7b      	ldrh	r3, [r7, #26]
 80093f8:	683a      	ldr	r2, [r7, #0]
 80093fa:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 80093fe:	1a9a      	subs	r2, r3, r2
 8009400:	8bfb      	ldrh	r3, [r7, #30]
 8009402:	4293      	cmp	r3, r2
 8009404:	bfa8      	it	ge
 8009406:	4613      	movge	r3, r2
 8009408:	b29b      	uxth	r3, r3
 800940a:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8009412:	461a      	mov	r2, r3
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	322c      	adds	r2, #44	; 0x2c
 8009418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 8009422:	4413      	add	r3, r2
 8009424:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 8009426:	89fb      	ldrh	r3, [r7, #14]
 8009428:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800942a:	2300      	movs	r3, #0
 800942c:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8009434:	2b03      	cmp	r3, #3
 8009436:	d103      	bne.n	8009440 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 8009438:	7f3b      	ldrb	r3, [r7, #28]
 800943a:	f043 0301 	orr.w	r3, r3, #1
 800943e:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8009446:	2b03      	cmp	r3, #3
 8009448:	d803      	bhi.n	8009452 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800944a:	7f3b      	ldrb	r3, [r7, #28]
 800944c:	f043 0302 	orr.w	r3, r3, #2
 8009450:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 8009452:	7f3b      	ldrb	r3, [r7, #28]
 8009454:	f107 020e 	add.w	r2, r7, #14
 8009458:	6979      	ldr	r1, [r7, #20]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7ff fc7a 	bl	8008d54 <http_write>
 8009460:	4603      	mov	r3, r0
 8009462:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8009464:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d106      	bne.n	800947a <http_send_headers+0xca>
 800946c:	89fb      	ldrh	r3, [r7, #14]
 800946e:	8a7a      	ldrh	r2, [r7, #18]
 8009470:	429a      	cmp	r2, r3
 8009472:	d002      	beq.n	800947a <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 8009474:	2301      	movs	r3, #1
 8009476:	777b      	strb	r3, [r7, #29]
 8009478:	e005      	b.n	8009486 <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800947a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 8009482:	2300      	movs	r3, #0
 8009484:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800948c:	89fb      	ldrh	r3, [r7, #14]
 800948e:	4413      	add	r3, r2
 8009490:	b29a      	uxth	r2, r3
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 8009498:	89fb      	ldrh	r3, [r7, #14]
 800949a:	8bfa      	ldrh	r2, [r7, #30]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80094a6:	8b7a      	ldrh	r2, [r7, #26]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d123      	bne.n	80094f4 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80094b2:	3301      	adds	r3, #1
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80094bc:	e007      	b.n	80094ce <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80094c4:	3301      	adds	r3, #1
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80094d4:	2b04      	cmp	r3, #4
 80094d6:	d809      	bhi.n	80094ec <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80094de:	461a      	mov	r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	322c      	adds	r2, #44	; 0x2c
 80094e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d0e8      	beq.n	80094be <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2200      	movs	r2, #0
 80094f0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 80094f4:	8bfb      	ldrh	r3, [r7, #30]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d008      	beq.n	800950c <http_send_headers+0x15c>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8009500:	2b04      	cmp	r3, #4
 8009502:	d803      	bhi.n	800950c <http_send_headers+0x15c>
 8009504:	89fb      	ldrh	r3, [r7, #14]
 8009506:	2b00      	cmp	r3, #0
 8009508:	f47f af68 	bne.w	80093dc <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8009512:	2b04      	cmp	r3, #4
 8009514:	d90f      	bls.n	8009536 <http_send_headers+0x186>
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10b      	bne.n	8009536 <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f819 	bl	8009558 <http_check_eof>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d002      	beq.n	8009532 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800952c:	2302      	movs	r3, #2
 800952e:	777b      	strb	r3, [r7, #29]
 8009530:	e001      	b.n	8009536 <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 8009532:	2303      	movs	r3, #3
 8009534:	e00b      	b.n	800954e <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800953c:	2b04      	cmp	r3, #4
 800953e:	d903      	bls.n	8009548 <http_send_headers+0x198>
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	699b      	ldr	r3, [r3, #24]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 8009548:	2302      	movs	r3, #2
 800954a:	e000      	b.n	800954e <http_send_headers+0x19e>
  }
  return data_to_send;
 800954c:	7f7b      	ldrb	r3, [r7, #29]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3720      	adds	r7, #32
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
	...

08009558 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d105      	bne.n	8009576 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7ff fcbc 	bl	8008eea <http_eof>
    return 0;
 8009572:	2300      	movs	r3, #0
 8009574:	e016      	b.n	80095a4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff fb56 	bl	8008c2c <fs_bytes_left>
 8009580:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	dc05      	bgt.n	8009594 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7ff fcad 	bl	8008eea <http_eof>
    return 0;
 8009590:	2300      	movs	r3, #0
 8009592:	e007      	b.n	80095a4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8009594:	4b05      	ldr	r3, [pc, #20]	; (80095ac <http_check_eof+0x54>)
 8009596:	f240 429d 	movw	r2, #1181	; 0x49d
 800959a:	4905      	ldr	r1, [pc, #20]	; (80095b0 <http_check_eof+0x58>)
 800959c:	4805      	ldr	r0, [pc, #20]	; (80095b4 <http_check_eof+0x5c>)
 800959e:	f00b ff61 	bl	8015464 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80095a2:	2301      	movs	r3, #1
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	08017914 	.word	0x08017914
 80095b0:	08017a0c 	.word	0x08017a0c
 80095b4:	0801795c 	.word	0x0801795c

080095b8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d803      	bhi.n	80095da <http_send_data_nonssi+0x22>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	e001      	b.n	80095de <http_send_data_nonssi+0x26>
 80095da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80095de:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	6999      	ldr	r1, [r3, #24]
 80095e4:	f107 020c 	add.w	r2, r7, #12
 80095e8:	2300      	movs	r3, #0
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7ff fbb2 	bl	8008d54 <http_write>
 80095f0:	4603      	mov	r3, r0
 80095f2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 80095f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10d      	bne.n	8009618 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 80095fc:	2301      	movs	r3, #1
 80095fe:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	89ba      	ldrh	r2, [r7, #12]
 8009606:	441a      	add	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	89ba      	ldrh	r2, [r7, #12]
 8009612:	1a9a      	subs	r2, r3, r2
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8009618:	7bfb      	ldrb	r3, [r7, #15]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b086      	sub	sp, #24
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963a:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d106      	bne.n	8009650 <http_send_data_ssi+0x2c>
 8009642:	4b89      	ldr	r3, [pc, #548]	; (8009868 <http_send_data_ssi+0x244>)
 8009644:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8009648:	4988      	ldr	r1, [pc, #544]	; (800986c <http_send_data_ssi+0x248>)
 800964a:	4889      	ldr	r0, [pc, #548]	; (8009870 <http_send_data_ssi+0x24c>)
 800964c:	f00b ff0a 	bl	8015464 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009656:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	429a      	cmp	r2, r3
 8009662:	f240 82c5 	bls.w	8009bf0 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009674:	4293      	cmp	r3, r2
 8009676:	dc06      	bgt.n	8009686 <http_send_data_ssi+0x62>
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	b29b      	uxth	r3, r3
 8009684:	e001      	b.n	800968a <http_send_data_ssi+0x66>
 8009686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800968a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	6999      	ldr	r1, [r3, #24]
 8009690:	f107 020e 	add.w	r2, r7, #14
 8009694:	2300      	movs	r3, #0
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff fb5c 	bl	8008d54 <http_write>
 800969c:	4603      	mov	r3, r0
 800969e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80096a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10d      	bne.n	80096c4 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 80096a8:	2301      	movs	r3, #1
 80096aa:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	89fa      	ldrh	r2, [r7, #14]
 80096b2:	441a      	add	r2, r3
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	89fa      	ldrh	r2, [r7, #14]
 80096be:	1a9a      	subs	r2, r3, r2
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f040 8290 	bne.w	8009bf0 <http_send_data_ssi+0x5cc>
      return data_to_send;
 80096d0:	7dbb      	ldrb	r3, [r7, #22]
 80096d2:	e2d6      	b.n	8009c82 <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 80096d4:	89fb      	ldrh	r3, [r7, #14]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <http_send_data_ssi+0xba>
      return data_to_send;
 80096da:	7dbb      	ldrb	r3, [r7, #22]
 80096dc:	e2d1      	b.n	8009c82 <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 80096e4:	2b04      	cmp	r3, #4
 80096e6:	f200 8282 	bhi.w	8009bee <http_send_data_ssi+0x5ca>
 80096ea:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <http_send_data_ssi+0xcc>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009705 	.word	0x08009705
 80096f4:	0800975f 	.word	0x0800975f
 80096f8:	080097d1 	.word	0x080097d1
 80096fc:	08009919 	.word	0x08009919
 8009700:	08009a8f 	.word	0x08009a8f
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8009704:	2300      	movs	r3, #0
 8009706:	757b      	strb	r3, [r7, #21]
 8009708:	e01b      	b.n	8009742 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	781a      	ldrb	r2, [r3, #0]
 8009710:	7d7b      	ldrb	r3, [r7, #21]
 8009712:	4958      	ldr	r1, [pc, #352]	; (8009874 <http_send_data_ssi+0x250>)
 8009714:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	429a      	cmp	r2, r3
 800971c:	d10e      	bne.n	800973c <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	7d7a      	ldrb	r2, [r7, #21]
 8009722:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            ssi->tag_index = 1;
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2201      	movs	r2, #1
 8009730:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800973a:	e005      	b.n	8009748 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800973c:	7d7b      	ldrb	r3, [r7, #21]
 800973e:	3301      	adds	r3, #1
 8009740:	757b      	strb	r3, [r7, #21]
 8009742:	7d7b      	ldrb	r3, [r7, #21]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d9e0      	bls.n	800970a <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	1e5a      	subs	r2, r3, #1
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	1c5a      	adds	r2, r3, #1
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	601a      	str	r2, [r3, #0]
        break;
 800975c:	e248      	b.n	8009bf0 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	7d9b      	ldrb	r3, [r3, #22]
 8009762:	461a      	mov	r2, r3
 8009764:	4b43      	ldr	r3, [pc, #268]	; (8009874 <http_send_data_ssi+0x250>)
 8009766:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	8a12      	ldrh	r2, [r2, #16]
 800976e:	4413      	add	r3, r2
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d107      	bne.n	8009786 <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2200      	movs	r2, #0
 800977a:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2202      	movs	r2, #2
 8009780:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
 8009784:	e234      	b.n	8009bf0 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	781a      	ldrb	r2, [r3, #0]
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	7d9b      	ldrb	r3, [r3, #22]
 8009790:	4619      	mov	r1, r3
 8009792:	4b38      	ldr	r3, [pc, #224]	; (8009874 <http_send_data_ssi+0x250>)
 8009794:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8009798:	6939      	ldr	r1, [r7, #16]
 800979a:	8a09      	ldrh	r1, [r1, #16]
 800979c:	440b      	add	r3, r1
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d106      	bne.n	80097b2 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	8a1b      	ldrh	r3, [r3, #16]
 80097a8:	3301      	adds	r3, #1
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	821a      	strh	r2, [r3, #16]
 80097b0:	e003      	b.n	80097ba <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80097ba:	693b      	ldr	r3, [r7, #16]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	1e5a      	subs	r2, r3, #1
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	1c5a      	adds	r2, r3, #1
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	601a      	str	r2, [r3, #0]
        }
        break;
 80097ce:	e20f      	b.n	8009bf0 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	8a1b      	ldrh	r3, [r3, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d11e      	bne.n	8009816 <http_send_data_ssi+0x1f2>
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b20      	cmp	r3, #32
 80097e0:	d00e      	beq.n	8009800 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80097e8:	2b09      	cmp	r3, #9
 80097ea:	d009      	beq.n	8009800 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2b0a      	cmp	r3, #10
 80097f4:	d004      	beq.n	8009800 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80097fc:	2b0d      	cmp	r3, #13
 80097fe:	d10a      	bne.n	8009816 <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	1e5a      	subs	r2, r3, #1
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	1c5a      	adds	r2, r3, #1
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	601a      	str	r2, [r3, #0]
          break;
 8009814:	e1ec      	b.n	8009bf0 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	781a      	ldrb	r2, [r3, #0]
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	7d9b      	ldrb	r3, [r3, #22]
 8009820:	4914      	ldr	r1, [pc, #80]	; (8009874 <http_send_data_ssi+0x250>)
 8009822:	00db      	lsls	r3, r3, #3
 8009824:	440b      	add	r3, r1
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d013      	beq.n	8009856 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8009834:	2b20      	cmp	r3, #32
 8009836:	d00e      	beq.n	8009856 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	2b09      	cmp	r3, #9
 8009840:	d009      	beq.n	8009856 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8009848:	2b0a      	cmp	r3, #10
 800984a:	d004      	beq.n	8009856 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	2b0d      	cmp	r3, #13
 8009854:	d13f      	bne.n	80098d6 <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	8a1b      	ldrh	r3, [r3, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10c      	bne.n	8009878 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          if (ssi->tag_index == 0) {
 8009866:	e04c      	b.n	8009902 <http_send_data_ssi+0x2de>
 8009868:	08017914 	.word	0x08017914
 800986c:	08017990 	.word	0x08017990
 8009870:	0801795c 	.word	0x0801795c
 8009874:	08021550 	.word	0x08021550
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	2203      	movs	r2, #3
 800987c:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	8a1b      	ldrh	r3, [r3, #16]
 8009884:	2bff      	cmp	r3, #255	; 0xff
 8009886:	d906      	bls.n	8009896 <http_send_data_ssi+0x272>
 8009888:	4b92      	ldr	r3, [pc, #584]	; (8009ad4 <http_send_data_ssi+0x4b0>)
 800988a:	f240 523a 	movw	r2, #1338	; 0x53a
 800988e:	4992      	ldr	r1, [pc, #584]	; (8009ad8 <http_send_data_ssi+0x4b4>)
 8009890:	4892      	ldr	r0, [pc, #584]	; (8009adc <http_send_data_ssi+0x4b8>)
 8009892:	f00b fde7 	bl	8015464 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	8a1b      	ldrh	r3, [r3, #16]
 800989a:	b2da      	uxtb	r2, r3
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	8a1b      	ldrh	r3, [r3, #16]
 80098a4:	461a      	mov	r2, r3
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	4413      	add	r3, r2
 80098aa:	2200      	movs	r2, #0
 80098ac:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	781a      	ldrb	r2, [r3, #0]
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	7d9b      	ldrb	r3, [r3, #22]
 80098b8:	4989      	ldr	r1, [pc, #548]	; (8009ae0 <http_send_data_ssi+0x4bc>)
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	440b      	add	r3, r1
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d103      	bne.n	80098ce <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2201      	movs	r2, #1
 80098ca:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 80098cc:	e019      	b.n	8009902 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2200      	movs	r2, #0
 80098d2:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 80098d4:	e015      	b.n	8009902 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	8a1b      	ldrh	r3, [r3, #16]
 80098da:	2b07      	cmp	r3, #7
 80098dc:	d80d      	bhi.n	80098fa <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	8a1b      	ldrh	r3, [r3, #16]
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	b288      	uxth	r0, r1
 80098ea:	6939      	ldr	r1, [r7, #16]
 80098ec:	8208      	strh	r0, [r1, #16]
 80098ee:	4619      	mov	r1, r3
 80098f0:	7812      	ldrb	r2, [r2, #0]
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	440b      	add	r3, r1
 80098f6:	761a      	strb	r2, [r3, #24]
 80098f8:	e003      	b.n	8009902 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	1e5a      	subs	r2, r3, #1
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	1c5a      	adds	r2, r3, #1
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	601a      	str	r2, [r3, #0]

        break;
 8009916:	e16b      	b.n	8009bf0 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	8a1b      	ldrh	r3, [r3, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d11e      	bne.n	800995e <http_send_data_ssi+0x33a>
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b20      	cmp	r3, #32
 8009928:	d00e      	beq.n	8009948 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009930:	2b09      	cmp	r3, #9
 8009932:	d009      	beq.n	8009948 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	2b0a      	cmp	r3, #10
 800993c:	d004      	beq.n	8009948 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009944:	2b0d      	cmp	r3, #13
 8009946:	d10a      	bne.n	800995e <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	1e5a      	subs	r2, r3, #1
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	1c5a      	adds	r2, r3, #1
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	601a      	str	r2, [r3, #0]
          break;
 800995c:	e148      	b.n	8009bf0 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	781a      	ldrb	r2, [r3, #0]
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	7d9b      	ldrb	r3, [r3, #22]
 8009968:	495d      	ldr	r1, [pc, #372]	; (8009ae0 <http_send_data_ssi+0x4bc>)
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	440b      	add	r3, r1
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	6939      	ldr	r1, [r7, #16]
 8009972:	8a09      	ldrh	r1, [r1, #16]
 8009974:	440b      	add	r3, r1
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d179      	bne.n	8009a70 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	1e5a      	subs	r2, r3, #1
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	1c5a      	adds	r2, r3, #1
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	8a1b      	ldrh	r3, [r3, #16]
 8009994:	3301      	adds	r3, #1
 8009996:	b29a      	uxth	r2, r3
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	7d9b      	ldrb	r3, [r3, #22]
 80099a0:	4a4f      	ldr	r2, [pc, #316]	; (8009ae0 <http_send_data_ssi+0x4bc>)
 80099a2:	00db      	lsls	r3, r3, #3
 80099a4:	4413      	add	r3, r2
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	8a12      	ldrh	r2, [r2, #16]
 80099ac:	4413      	add	r3, r2
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f040 811d 	bne.w	8009bf0 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	2200      	movs	r2, #0
 80099ba:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 80099bc:	6838      	ldr	r0, [r7, #0]
 80099be:	f7ff faff 	bl	8008fc0 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	2200      	movs	r2, #0
 80099c6:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	2204      	movs	r2, #4
 80099cc:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
            ssi->tag_end = ssi->parsed;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	685a      	ldr	r2, [r3, #4]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	f240 8101 	bls.w	8009bf0 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	699b      	ldr	r3, [r3, #24]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80099fc:	4293      	cmp	r3, r2
 80099fe:	dc06      	bgt.n	8009a0e <http_send_data_ssi+0x3ea>
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	685a      	ldr	r2, [r3, #4]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	e001      	b.n	8009a12 <http_send_data_ssi+0x3ee>
 8009a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a12:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	6999      	ldr	r1, [r3, #24]
 8009a18:	f107 020e 	add.w	r2, r7, #14
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff f998 	bl	8008d54 <http_write>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8009a28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f040 80df 	bne.w	8009bf0 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 8009a32:	2301      	movs	r3, #1
 8009a34:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	685a      	ldr	r2, [r3, #4]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d809      	bhi.n	8009a56 <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	689a      	ldr	r2, [r3, #8]
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	685b      	ldr	r3, [r3, #4]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	b29a      	uxth	r2, r3
 8009a4e:	89fb      	ldrh	r3, [r7, #14]
 8009a50:	4413      	add	r3, r2
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	89fa      	ldrh	r2, [r7, #14]
 8009a5c:	441a      	add	r2, r3
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	89fa      	ldrh	r2, [r7, #14]
 8009a68:	1a9a      	subs	r2, r3, r2
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8009a6e:	e0bf      	b.n	8009bf0 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	1e5a      	subs	r2, r3, #1
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	1c5a      	adds	r2, r3, #1
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
        }
        break;
 8009a8c:	e0b0      	b.n	8009bf0 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	689a      	ldr	r2, [r3, #8]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d95c      	bls.n	8009b54 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d206      	bcs.n	8009ab4 <http_send_data_ssi+0x490>
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	; (8009ad4 <http_send_data_ssi+0x4b0>)
 8009aa8:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8009aac:	490d      	ldr	r1, [pc, #52]	; (8009ae4 <http_send_data_ssi+0x4c0>)
 8009aae:	480b      	ldr	r0, [pc, #44]	; (8009adc <http_send_data_ssi+0x4b8>)
 8009ab0:	f00b fcd8 	bl	8015464 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	dc10      	bgt.n	8009ae8 <http_send_data_ssi+0x4c4>
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	685a      	ldr	r2, [r3, #4]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	699b      	ldr	r3, [r3, #24]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	e00b      	b.n	8009aec <http_send_data_ssi+0x4c8>
 8009ad4:	08017914 	.word	0x08017914
 8009ad8:	08017a44 	.word	0x08017a44
 8009adc:	0801795c 	.word	0x0801795c
 8009ae0:	08021550 	.word	0x08021550
 8009ae4:	08017a5c 	.word	0x08017a5c
 8009ae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009aec:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8009aee:	89fb      	ldrh	r3, [r7, #14]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	6999      	ldr	r1, [r3, #24]
 8009af8:	f107 020e 	add.w	r2, r7, #14
 8009afc:	2300      	movs	r3, #0
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7ff f928 	bl	8008d54 <http_write>
 8009b04:	4603      	mov	r3, r0
 8009b06:	75fb      	strb	r3, [r7, #23]
 8009b08:	e001      	b.n	8009b0e <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8009b0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d16c      	bne.n	8009bf0 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 8009b16:	2301      	movs	r3, #1
 8009b18:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d809      	bhi.n	8009b3a <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	689a      	ldr	r2, [r3, #8]
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	89fb      	ldrh	r3, [r7, #14]
 8009b34:	4413      	add	r3, r2
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	89fa      	ldrh	r2, [r7, #14]
 8009b40:	441a      	add	r2, r3
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	89fa      	ldrh	r2, [r7, #14]
 8009b4c:	1a9a      	subs	r2, r3, r2
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	625a      	str	r2, [r3, #36]	; 0x24
 8009b52:	e04d      	b.n	8009bf0 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	8a1a      	ldrh	r2, [r3, #16]
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	8a5b      	ldrh	r3, [r3, #18]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d30b      	bcc.n	8009b78 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	8a9b      	ldrh	r3, [r3, #20]
 8009b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d005      	beq.n	8009b78 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 8009b72:	6838      	ldr	r0, [r7, #0]
 8009b74:	f7ff fa24 	bl	8008fc0 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	8a1a      	ldrh	r2, [r3, #16]
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	8a5b      	ldrh	r3, [r3, #18]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	d222      	bcs.n	8009bca <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	8a5a      	ldrh	r2, [r3, #18]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	8a1b      	ldrh	r3, [r3, #16]
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	8a1b      	ldrh	r3, [r3, #16]
 8009b96:	3320      	adds	r3, #32
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	1c59      	adds	r1, r3, #1
 8009b9e:	f107 020e 	add.w	r2, r7, #14
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff f8d5 	bl	8008d54 <http_write>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8009bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d11c      	bne.n	8009bf0 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	8a1a      	ldrh	r2, [r3, #16]
 8009bbe:	89fb      	ldrh	r3, [r7, #14]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	821a      	strh	r2, [r3, #16]
 8009bc8:	e012      	b.n	8009bf0 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	8a9b      	ldrh	r3, [r3, #20]
 8009bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d10c      	bne.n	8009bf0 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	689a      	ldr	r2, [r3, #8]
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8009bec:	e000      	b.n	8009bf0 <http_send_data_ssi+0x5cc>
        default:
          break;
 8009bee:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009bf6:	2b04      	cmp	r3, #4
 8009bf8:	d003      	beq.n	8009c02 <http_send_data_ssi+0x5de>
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d004      	beq.n	8009c0c <http_send_data_ssi+0x5e8>
 8009c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f43f ad64 	beq.w	80096d4 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8009c12:	2b04      	cmp	r3, #4
 8009c14:	d034      	beq.n	8009c80 <http_send_data_ssi+0x65c>
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d92e      	bls.n	8009c80 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009c30:	4293      	cmp	r3, r2
 8009c32:	dc06      	bgt.n	8009c42 <http_send_data_ssi+0x61e>
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	e001      	b.n	8009c46 <http_send_data_ssi+0x622>
 8009c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c46:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	6999      	ldr	r1, [r3, #24]
 8009c4c:	f107 020e 	add.w	r2, r7, #14
 8009c50:	2300      	movs	r3, #0
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff f87e 	bl	8008d54 <http_write>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8009c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10d      	bne.n	8009c80 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 8009c64:	2301      	movs	r3, #1
 8009c66:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	699b      	ldr	r3, [r3, #24]
 8009c6c:	89fa      	ldrh	r2, [r7, #14]
 8009c6e:	441a      	add	r2, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	89fa      	ldrh	r2, [r7, #14]
 8009c7a:	1a9a      	subs	r2, r3, r2
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8009c80:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3718      	adds	r7, #24
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop

08009c8c <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8009c96:	2300      	movs	r3, #0
 8009c98:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <http_send+0x18>
    return 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e048      	b.n	8009d36 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	d812      	bhi.n	8009cd4 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff fb7d 	bl	80093b0 <http_send_headers>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
 8009cbc:	2b03      	cmp	r3, #3
 8009cbe:	d007      	beq.n	8009cd0 <http_send+0x44>
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d006      	beq.n	8009cd4 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 8009ccc:	2b04      	cmp	r3, #4
 8009cce:	d801      	bhi.n	8009cd4 <http_send+0x48>
      return data_to_send;
 8009cd0:	7bfb      	ldrb	r3, [r7, #15]
 8009cd2:	e030      	b.n	8009d36 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d108      	bne.n	8009cee <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f7ff fc3a 	bl	8009558 <http_check_eof>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <http_send+0x62>
      return 0;
 8009cea:	2300      	movs	r3, #0
 8009cec:	e023      	b.n	8009d36 <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d006      	beq.n	8009d04 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff fc93 	bl	8009624 <http_send_data_ssi>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73fb      	strb	r3, [r7, #15]
 8009d02:	e005      	b.n	8009d10 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff fc56 	bl	80095b8 <http_send_data_nonssi>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10d      	bne.n	8009d34 <http_send+0xa8>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe ff85 	bl	8008c2c <fs_bytes_left>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dc05      	bgt.n	8009d34 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff f8dd 	bl	8008eea <http_eof>
    return 0;
 8009d30:	2300      	movs	r3, #0
 8009d32:	e000      	b.n	8009d36 <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	4a1c      	ldr	r2, [pc, #112]	; (8009dc0 <http_get_404_file+0x80>)
 8009d4e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4619      	mov	r1, r3
 8009d58:	4610      	mov	r0, r2
 8009d5a:	f7fe ff1f 	bl	8008b9c <fs_open>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d024      	beq.n	8009db4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	4a15      	ldr	r2, [pc, #84]	; (8009dc4 <http_get_404_file+0x84>)
 8009d6e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4619      	mov	r1, r3
 8009d78:	4610      	mov	r0, r2
 8009d7a:	f7fe ff0f 	bl	8008b9c <fs_open>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d014      	beq.n	8009db4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	4a0e      	ldr	r2, [pc, #56]	; (8009dc8 <http_get_404_file+0x88>)
 8009d8e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4619      	mov	r1, r3
 8009d98:	4610      	mov	r0, r2
 8009d9a:	f7fe feff 	bl	8008b9c <fs_open>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8009da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d004      	beq.n	8009db4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2200      	movs	r2, #0
 8009dae:	601a      	str	r2, [r3, #0]
        return NULL;
 8009db0:	2300      	movs	r3, #0
 8009db2:	e000      	b.n	8009db6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8009db4:	687b      	ldr	r3, [r7, #4]
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	08017a74 	.word	0x08017a74
 8009dc4:	08017a80 	.word	0x08017a80
 8009dc8:	08017a8c 	.word	0x08017a8c

08009dcc <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 8009dd4:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <http_handle_post_finished+0x2c>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8009dda:	223f      	movs	r2, #63	; 0x3f
 8009ddc:	4906      	ldr	r1, [pc, #24]	; (8009df8 <http_handle_post_finished+0x2c>)
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7f7 fc4c 	bl	800167c <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8009de4:	2200      	movs	r2, #0
 8009de6:	4904      	ldr	r1, [pc, #16]	; (8009df8 <http_handle_post_finished+0x2c>)
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f000 faab 	bl	800a344 <http_find_file>
 8009dee:	4603      	mov	r3, r0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	2000098c 	.word	0x2000098c

08009dfc <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d014      	beq.n	8009e36 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	8912      	ldrh	r2, [r2, #8]
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d204      	bcs.n	8009e24 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009e22:	e008      	b.n	8009e36 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	8912      	ldrh	r2, [r2, #8]
 8009e2e:	1a9a      	subs	r2, r3, r2
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d006      	beq.n	8009e4a <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7f7 fbde 	bl	8001600 <httpd_post_receive_data>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
 8009e48:	e001      	b.n	8009e4e <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 8009e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d003      	beq.n	8009e5e <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d104      	bne.n	8009e72 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f7ff ffaf 	bl	8009dcc <http_handle_post_finished>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	e000      	b.n	8009e74 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b092      	sub	sp, #72	; 0x48
 8009e80:	af04      	add	r7, sp, #16
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8009e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e8c:	1c58      	adds	r0, r3, #1
 8009e8e:	887a      	ldrh	r2, [r7, #2]
 8009e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e92:	1c59      	adds	r1, r3, #1
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	1acb      	subs	r3, r1, r3
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4965      	ldr	r1, [pc, #404]	; (800a034 <http_post_request+0x1b8>)
 8009e9e:	f000 fe6f 	bl	800ab80 <lwip_strnstr>
 8009ea2:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 8009ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 80be 	beq.w	800a028 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8009eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eae:	1c58      	adds	r0, r3, #1
 8009eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	495f      	ldr	r1, [pc, #380]	; (800a038 <http_post_request+0x1bc>)
 8009ebc:	f000 fe60 	bl	800ab80 <lwip_strnstr>
 8009ec0:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 80ac 	beq.w	800a022 <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	3310      	adds	r3, #16
 8009ece:	220a      	movs	r2, #10
 8009ed0:	495a      	ldr	r1, [pc, #360]	; (800a03c <http_post_request+0x1c0>)
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fe54 	bl	800ab80 <lwip_strnstr>
 8009ed8:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 80a0 	beq.w	800a022 <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	3310      	adds	r3, #16
 8009ee6:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 8009ee8:	69f8      	ldr	r0, [r7, #28]
 8009eea:	f00b fa55 	bl	8015398 <atoi>
 8009eee:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8009ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d10b      	bne.n	8009f0e <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8009ef6:	69fb      	ldr	r3, [r7, #28]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	2b30      	cmp	r3, #48	; 0x30
 8009efc:	d104      	bne.n	8009f08 <http_post_request+0x8c>
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	3301      	adds	r3, #1
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b0d      	cmp	r3, #13
 8009f06:	d002      	beq.n	8009f0e <http_post_request+0x92>
            content_len = -1;
 8009f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f0c:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 8009f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	f2c0 8083 	blt.w	800a01c <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 8009f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f18:	3301      	adds	r3, #1
 8009f1a:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8009f1c:	887a      	ldrh	r2, [r7, #2]
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	1d19      	adds	r1, r3, #4
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	1acb      	subs	r3, r1, r3
 8009f26:	429a      	cmp	r2, r3
 8009f28:	db05      	blt.n	8009f36 <http_post_request+0xba>
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	1d1a      	adds	r2, r3, #4
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	e000      	b.n	8009f38 <http_post_request+0xbc>
 8009f36:	887b      	ldrh	r3, [r7, #2]
 8009f38:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8009f3a:	887a      	ldrh	r2, [r7, #2]
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	1d19      	adds	r1, r3, #4
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	1acb      	subs	r3, r1, r3
 8009f44:	429a      	cmp	r2, r3
 8009f46:	db05      	blt.n	8009f54 <http_post_request+0xd8>
 8009f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4a:	1d1a      	adds	r2, r3, #4
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	1ad3      	subs	r3, r2, r3
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	e000      	b.n	8009f56 <http_post_request+0xda>
 8009f54:	887b      	ldrh	r3, [r7, #2]
 8009f56:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 8009f5c:	4b38      	ldr	r3, [pc, #224]	; (800a040 <http_post_request+0x1c4>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8009f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f64:	2200      	movs	r2, #0
 8009f66:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8009f68:	8aba      	ldrh	r2, [r7, #20]
 8009f6a:	f107 0312 	add.w	r3, r7, #18
 8009f6e:	9303      	str	r3, [sp, #12]
 8009f70:	233f      	movs	r3, #63	; 0x3f
 8009f72:	9302      	str	r3, [sp, #8]
 8009f74:	4b32      	ldr	r3, [pc, #200]	; (800a040 <http_post_request+0x1c4>)
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	4613      	mov	r3, r2
 8009f7e:	69ba      	ldr	r2, [r7, #24]
 8009f80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f82:	68b8      	ldr	r0, [r7, #8]
 8009f84:	f7f7 fb12 	bl	80015ac <httpd_post_begin>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 8009f8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d13c      	bne.n	800a00e <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 8009f98:	8afb      	ldrh	r3, [r7, #22]
 8009f9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 8009f9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 8009fa4:	e007      	b.n	8009fb6 <http_post_request+0x13a>
              start_offset -= q->len;
 8009fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa8:	895b      	ldrh	r3, [r3, #10]
 8009faa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d004      	beq.n	8009fc6 <http_post_request+0x14a>
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	895b      	ldrh	r3, [r3, #10]
 8009fc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d2ef      	bcs.n	8009fa6 <http_post_request+0x12a>
            }
            if (q != NULL) {
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d00d      	beq.n	8009fe8 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 8009fcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fd2:	f002 f8b3 	bl	800c13c <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 8009fd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fd8:	f002 f9d6 	bl	800c388 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8009fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fde:	68b8      	ldr	r0, [r7, #8]
 8009fe0:	f7ff ff0c 	bl	8009dfc <http_post_rxpbuf>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	e021      	b.n	800a02c <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10b      	bne.n	800a00a <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8009ff2:	2241      	movs	r2, #65	; 0x41
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	f001 fe42 	bl	800bc80 <pbuf_alloc>
 8009ffc:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 8009ffe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a000:	68b8      	ldr	r0, [r7, #8]
 800a002:	f7ff fefb 	bl	8009dfc <http_post_rxpbuf>
 800a006:	4603      	mov	r3, r0
 800a008:	e010      	b.n	800a02c <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	e00e      	b.n	800a02c <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800a00e:	2200      	movs	r2, #0
 800a010:	490b      	ldr	r1, [pc, #44]	; (800a040 <http_post_request+0x1c4>)
 800a012:	68b8      	ldr	r0, [r7, #8]
 800a014:	f000 f996 	bl	800a344 <http_find_file>
 800a018:	4603      	mov	r3, r0
 800a01a:	e007      	b.n	800a02c <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800a01c:	f06f 030f 	mvn.w	r3, #15
 800a020:	e004      	b.n	800a02c <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800a022:	f06f 030f 	mvn.w	r3, #15
 800a026:	e001      	b.n	800a02c <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800a028:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3738      	adds	r7, #56	; 0x38
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	08017a98 	.word	0x08017a98
 800a038:	08017524 	.word	0x08017524
 800a03c:	08017a08 	.word	0x08017a08
 800a040:	2000098c 	.word	0x2000098c

0800a044 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b092      	sub	sp, #72	; 0x48
 800a048:	af02      	add	r7, sp, #8
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	2b00      	cmp	r3, #0
 800a058:	d106      	bne.n	800a068 <http_parse_request+0x24>
 800a05a:	4b87      	ldr	r3, [pc, #540]	; (800a278 <http_parse_request+0x234>)
 800a05c:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800a060:	4986      	ldr	r1, [pc, #536]	; (800a27c <http_parse_request+0x238>)
 800a062:	4887      	ldr	r0, [pc, #540]	; (800a280 <http_parse_request+0x23c>)
 800a064:	f00b f9fe 	bl	8015464 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d106      	bne.n	800a07c <http_parse_request+0x38>
 800a06e:	4b82      	ldr	r3, [pc, #520]	; (800a278 <http_parse_request+0x234>)
 800a070:	f240 72af 	movw	r2, #1967	; 0x7af
 800a074:	4983      	ldr	r1, [pc, #524]	; (800a284 <http_parse_request+0x240>)
 800a076:	4882      	ldr	r0, [pc, #520]	; (800a280 <http_parse_request+0x23c>)
 800a078:	f00b f9f4 	bl	8015464 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d103      	bne.n	800a08c <http_parse_request+0x48>
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a08c:	f06f 0307 	mvn.w	r3, #7
 800a090:	e0ed      	b.n	800a26e <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d103      	bne.n	800a0a2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09e:	621a      	str	r2, [r3, #32]
 800a0a0:	e005      	b.n	800a0ae <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f002 f98f 	bl	800c3cc <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a0ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0b0:	f002 f96a 	bl	800c388 <pbuf_ref>

  if (hs->req->next != NULL) {
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	6a1b      	ldr	r3, [r3, #32]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d012      	beq.n	800a0e4 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	6a1b      	ldr	r3, [r3, #32]
 800a0c2:	891b      	ldrh	r3, [r3, #8]
 800a0c4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	bf28      	it	cs
 800a0cc:	4613      	movcs	r3, r2
 800a0ce:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	6a18      	ldr	r0, [r3, #32]
 800a0d4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	496b      	ldr	r1, [pc, #428]	; (800a288 <http_parse_request+0x244>)
 800a0da:	f002 fa9f 	bl	800c61c <pbuf_copy_partial>
    data = httpd_req_buf;
 800a0de:	4b6a      	ldr	r3, [pc, #424]	; (800a288 <http_parse_request+0x244>)
 800a0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0e2:	e005      	b.n	800a0f0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800a0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ec:	895b      	ldrh	r3, [r3, #10]
 800a0ee:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a0f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a0f2:	2b06      	cmp	r3, #6
 800a0f4:	f240 80a1 	bls.w	800a23a <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a0f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4963      	ldr	r1, [pc, #396]	; (800a28c <http_parse_request+0x248>)
 800a0fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a100:	f000 fd3e 	bl	800ab80 <lwip_strnstr>
 800a104:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 8096 	beq.w	800a23a <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800a10e:	2300      	movs	r3, #0
 800a110:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a116:	2204      	movs	r2, #4
 800a118:	495d      	ldr	r1, [pc, #372]	; (800a290 <http_parse_request+0x24c>)
 800a11a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a11c:	f00b fae8 	bl	80156f0 <strncmp>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d103      	bne.n	800a12e <http_parse_request+0xea>
        sp1 = data + 3;
 800a126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a128:	3303      	adds	r3, #3
 800a12a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a12c:	e014      	b.n	800a158 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800a12e:	2205      	movs	r2, #5
 800a130:	4958      	ldr	r1, [pc, #352]	; (800a294 <http_parse_request+0x250>)
 800a132:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a134:	f00b fadc 	bl	80156f0 <strncmp>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d105      	bne.n	800a14a <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800a13e:	2301      	movs	r3, #1
 800a140:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800a142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a144:	3304      	adds	r3, #4
 800a146:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a148:	e006      	b.n	800a158 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800a14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a14c:	3304      	adds	r3, #4
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800a152:	f06f 030f 	mvn.w	r3, #15
 800a156:	e08a      	b.n	800a26e <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800a158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15a:	1c5a      	adds	r2, r3, #1
 800a15c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	b29b      	uxth	r3, r3
 800a162:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a16a:	3301      	adds	r3, #1
 800a16c:	8bfa      	ldrh	r2, [r7, #30]
 800a16e:	494a      	ldr	r1, [pc, #296]	; (800a298 <http_parse_request+0x254>)
 800a170:	4618      	mov	r0, r3
 800a172:	f000 fd05 	bl	800ab80 <lwip_strnstr>
 800a176:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10c      	bne.n	800a198 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a180:	3301      	adds	r3, #1
 800a182:	8bfa      	ldrh	r2, [r7, #30]
 800a184:	4941      	ldr	r1, [pc, #260]	; (800a28c <http_parse_request+0x248>)
 800a186:	4618      	mov	r0, r3
 800a188:	f000 fcfa 	bl	800ab80 <lwip_strnstr>
 800a18c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a18e:	2301      	movs	r3, #1
 800a190:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800a192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a194:	2b00      	cmp	r3, #0
 800a196:	d163      	bne.n	800a260 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	3301      	adds	r3, #1
 800a19c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d048      	beq.n	800a23a <http_parse_request+0x1f6>
 800a1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d944      	bls.n	800a23a <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a1b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	4939      	ldr	r1, [pc, #228]	; (800a29c <http_parse_request+0x258>)
 800a1b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a1b8:	f000 fce2 	bl	800ab80 <lwip_strnstr>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d03b      	beq.n	800a23a <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800a1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c4:	3301      	adds	r3, #1
 800a1c6:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a1ce:	8bbb      	ldrh	r3, [r7, #28]
 800a1d0:	69ba      	ldr	r2, [r7, #24]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800a1d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d026      	beq.n	800a22c <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800a1e4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e8:	9301      	str	r3, [sp, #4]
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a1f2:	68b9      	ldr	r1, [r7, #8]
 800a1f4:	6978      	ldr	r0, [r7, #20]
 800a1f6:	f7ff fe41 	bl	8009e7c <http_post_request>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800a1fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00a      	beq.n	800a21c <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a208:	2220      	movs	r2, #32
 800a20a:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800a20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20e:	2220      	movs	r2, #32
 800a210:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800a212:	8bbb      	ldrh	r3, [r7, #28]
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	4413      	add	r3, r2
 800a218:	2220      	movs	r2, #32
 800a21a:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800a21c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a220:	f113 0f10 	cmn.w	r3, #16
 800a224:	d01e      	beq.n	800a264 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800a226:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a22a:	e020      	b.n	800a26e <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a22c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a22e:	69b9      	ldr	r1, [r7, #24]
 800a230:	68b8      	ldr	r0, [r7, #8]
 800a232:	f000 f887 	bl	800a344 <http_find_file>
 800a236:	4603      	mov	r3, r0
 800a238:	e019      	b.n	800a26e <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	4618      	mov	r0, r3
 800a240:	f002 f88a 	bl	800c358 <pbuf_clen>
 800a244:	4603      	mov	r3, r0
 800a246:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	6a1b      	ldr	r3, [r3, #32]
 800a24c:	891b      	ldrh	r3, [r3, #8]
 800a24e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a252:	d209      	bcs.n	800a268 <http_parse_request+0x224>
 800a254:	8a3b      	ldrh	r3, [r7, #16]
 800a256:	2b05      	cmp	r3, #5
 800a258:	d806      	bhi.n	800a268 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a25a:	f06f 0304 	mvn.w	r3, #4
 800a25e:	e006      	b.n	800a26e <http_parse_request+0x22a>
          goto badrequest;
 800a260:	bf00      	nop
 800a262:	e002      	b.n	800a26a <http_parse_request+0x226>
              goto badrequest;
 800a264:	bf00      	nop
 800a266:	e000      	b.n	800a26a <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800a268:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a26a:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3740      	adds	r7, #64	; 0x40
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	08017914 	.word	0x08017914
 800a27c:	08017aa0 	.word	0x08017aa0
 800a280:	0801795c 	.word	0x0801795c
 800a284:	08017984 	.word	0x08017984
 800a288:	2000058c 	.word	0x2000058c
 800a28c:	08017a08 	.word	0x08017a08
 800a290:	08017aac 	.word	0x08017aac
 800a294:	08017ab4 	.word	0x08017ab4
 800a298:	08017abc 	.word	0x08017abc
 800a29c:	08017a98 	.word	0x08017a98

0800a2a0 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d040      	beq.n	800a336 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800a2b8:	213f      	movs	r1, #63	; 0x3f
 800a2ba:	6838      	ldr	r0, [r7, #0]
 800a2bc:	f00b fa03 	bl	80156c6 <strchr>
 800a2c0:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	613b      	str	r3, [r7, #16]
    ext = uri;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800a2d6:	212e      	movs	r1, #46	; 0x2e
 800a2d8:	6938      	ldr	r0, [r7, #16]
 800a2da:	f00b f9f4 	bl	80156c6 <strchr>
 800a2de:	6138      	str	r0, [r7, #16]
 800a2e0:	e009      	b.n	800a2f6 <http_uri_is_ssi+0x56>
      ext = sub;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	617b      	str	r3, [r7, #20]
      sub++;
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800a2ec:	212e      	movs	r1, #46	; 0x2e
 800a2ee:	6938      	ldr	r0, [r7, #16]
 800a2f0:	f00b f9e9 	bl	80156c6 <strchr>
 800a2f4:	6138      	str	r0, [r7, #16]
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1f2      	bne.n	800a2e2 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	61fb      	str	r3, [r7, #28]
 800a300:	e010      	b.n	800a324 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800a302:	4a0f      	ldr	r2, [pc, #60]	; (800a340 <http_uri_is_ssi+0xa0>)
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a30a:	4619      	mov	r1, r3
 800a30c:	6978      	ldr	r0, [r7, #20]
 800a30e:	f000 fc6d 	bl	800abec <lwip_stricmp>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d102      	bne.n	800a31e <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800a318:	2301      	movs	r3, #1
 800a31a:	76fb      	strb	r3, [r7, #27]
        break;
 800a31c:	e005      	b.n	800a32a <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	3301      	adds	r3, #1
 800a322:	61fb      	str	r3, [r7, #28]
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	2b04      	cmp	r3, #4
 800a328:	d9eb      	bls.n	800a302 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <http_uri_is_ssi+0x96>
      *param = '?';
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	223f      	movs	r2, #63	; 0x3f
 800a334:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800a336:	7efb      	ldrb	r3, [r7, #27]
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3720      	adds	r7, #32
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	08021514 	.word	0x08021514

0800a344 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a344:	b590      	push	{r4, r7, lr}
 800a346:	b093      	sub	sp, #76	; 0x4c
 800a348:	af02      	add	r7, sp, #8
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a350:	2300      	movs	r3, #0
 800a352:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a354:	2300      	movs	r3, #0
 800a356:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	4618      	mov	r0, r3
 800a362:	f7f5 ff3f 	bl	80001e4 <strlen>
 800a366:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d072      	beq.n	800a454 <http_find_file+0x110>
 800a36e:	68ba      	ldr	r2, [r7, #8]
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	3b01      	subs	r3, #1
 800a374:	4413      	add	r3, r2
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b2f      	cmp	r3, #47	; 0x2f
 800a37a:	d16b      	bne.n	800a454 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a37c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a37e:	4a80      	ldr	r2, [pc, #512]	; (800a580 <http_find_file+0x23c>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d102      	bne.n	800a38a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	2b01      	cmp	r3, #1
 800a388:	d164      	bne.n	800a454 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38c:	3b01      	subs	r3, #1
 800a38e:	2b3f      	cmp	r3, #63	; 0x3f
 800a390:	bf28      	it	cs
 800a392:	233f      	movcs	r3, #63	; 0x3f
 800a394:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800a396:	6a3b      	ldr	r3, [r7, #32]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00a      	beq.n	800a3b2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	6a3a      	ldr	r2, [r7, #32]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	4877      	ldr	r0, [pc, #476]	; (800a580 <http_find_file+0x23c>)
 800a3a4:	f00b f82e 	bl	8015404 <memcpy>
      http_uri_buf[copy_len] = 0;
 800a3a8:	4a75      	ldr	r2, [pc, #468]	; (800a580 <http_find_file+0x23c>)
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3b6:	e04a      	b.n	800a44e <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a3b8:	6a3b      	ldr	r3, [r7, #32]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d028      	beq.n	800a410 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a3be:	6a3b      	ldr	r3, [r7, #32]
 800a3c0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a3c4:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d01e      	beq.n	800a40a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800a3cc:	4a6d      	ldr	r2, [pc, #436]	; (800a584 <http_find_file+0x240>)
 800a3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7f5 ff05 	bl	80001e4 <strlen>
 800a3da:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	69fb      	ldr	r3, [r7, #28]
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	bf28      	it	cs
 800a3e4:	4613      	movcs	r3, r2
 800a3e6:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	4a65      	ldr	r2, [pc, #404]	; (800a580 <http_find_file+0x23c>)
 800a3ec:	1898      	adds	r0, r3, r2
 800a3ee:	4a65      	ldr	r2, [pc, #404]	; (800a584 <http_find_file+0x240>)
 800a3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	f00b f803 	bl	8015404 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800a3fe:	6a3a      	ldr	r2, [r7, #32]
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	4413      	add	r3, r2
 800a404:	4a5e      	ldr	r2, [pc, #376]	; (800a580 <http_find_file+0x23c>)
 800a406:	2100      	movs	r1, #0
 800a408:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800a40a:	4b5d      	ldr	r3, [pc, #372]	; (800a580 <http_find_file+0x23c>)
 800a40c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a40e:	e004      	b.n	800a41a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800a410:	4a5c      	ldr	r2, [pc, #368]	; (800a584 <http_find_file+0x240>)
 800a412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a418:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a41e:	4618      	mov	r0, r3
 800a420:	f7fe fbbc 	bl	8008b9c <fs_open>
 800a424:	4603      	mov	r3, r0
 800a426:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800a428:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10b      	bne.n	800a448 <http_find_file+0x104>
        uri = file_name;
 800a430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a432:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800a438:	4a52      	ldr	r2, [pc, #328]	; (800a584 <http_find_file+0x240>)
 800a43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a43c:	00db      	lsls	r3, r3, #3
 800a43e:	4413      	add	r3, r2
 800a440:	791b      	ldrb	r3, [r3, #4]
 800a442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800a446:	e005      	b.n	800a454 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a44a:	3301      	adds	r3, #1
 800a44c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a450:	2b04      	cmp	r3, #4
 800a452:	d9b1      	bls.n	800a3b8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a456:	2b00      	cmp	r3, #0
 800a458:	d176      	bne.n	800a548 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	213f      	movs	r1, #63	; 0x3f
 800a45e:	4618      	mov	r0, r3
 800a460:	f00b f931 	bl	80156c6 <strchr>
 800a464:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d005      	beq.n	800a478 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46e:	2200      	movs	r2, #0
 800a470:	701a      	strb	r2, [r3, #0]
      params++;
 800a472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a474:	3301      	adds	r3, #1
 800a476:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800a478:	4b43      	ldr	r3, [pc, #268]	; (800a588 <http_find_file+0x244>)
 800a47a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a47e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800a480:	4b42      	ldr	r3, [pc, #264]	; (800a58c <http_find_file+0x248>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d034      	beq.n	800a4f2 <http_find_file+0x1ae>
 800a488:	4b41      	ldr	r3, [pc, #260]	; (800a590 <http_find_file+0x24c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d030      	beq.n	800a4f2 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800a490:	2300      	movs	r3, #0
 800a492:	633b      	str	r3, [r7, #48]	; 0x30
 800a494:	e028      	b.n	800a4e8 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800a496:	68b8      	ldr	r0, [r7, #8]
 800a498:	4b3d      	ldr	r3, [pc, #244]	; (800a590 <http_find_file+0x24c>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	4413      	add	r3, r2
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	f7f5 fe93 	bl	80001d0 <strcmp>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d118      	bne.n	800a4e2 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800a4b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a4b2:	68f8      	ldr	r0, [r7, #12]
 800a4b4:	f7fe fd26 	bl	8008f04 <extract_uri_parameters>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	4a33      	ldr	r2, [pc, #204]	; (800a588 <http_find_file+0x244>)
 800a4bc:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800a4be:	4b34      	ldr	r3, [pc, #208]	; (800a590 <http_find_file+0x24c>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	00db      	lsls	r3, r3, #3
 800a4c6:	4413      	add	r3, r2
 800a4c8:	685c      	ldr	r4, [r3, #4]
 800a4ca:	4b2f      	ldr	r3, [pc, #188]	; (800a588 <http_find_file+0x244>)
 800a4cc:	6819      	ldr	r1, [r3, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800a4d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4da:	47a0      	blx	r4
 800a4dc:	4603      	mov	r3, r0
 800a4de:	60bb      	str	r3, [r7, #8]
          break;
 800a4e0:	e007      	b.n	800a4f2 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800a4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	633b      	str	r3, [r7, #48]	; 0x30
 800a4e8:	4b28      	ldr	r3, [pc, #160]	; (800a58c <http_find_file+0x248>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	dbd1      	blt.n	800a496 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	68ba      	ldr	r2, [r7, #8]
 800a4f6:	4611      	mov	r1, r2
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fe fb4f 	bl	8008b9c <fs_open>
 800a4fe:	4603      	mov	r3, r0
 800a500:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800a502:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d102      	bne.n	800a510 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a50e:	e006      	b.n	800a51e <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800a510:	f107 0308 	add.w	r3, r7, #8
 800a514:	4619      	mov	r1, r3
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f7ff fc12 	bl	8009d40 <http_get_404_file>
 800a51c:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	2b00      	cmp	r3, #0
 800a522:	d011      	beq.n	800a548 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	7c1b      	ldrb	r3, [r3, #16]
 800a528:	f003 0308 	and.w	r3, r3, #8
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <http_find_file+0x1f4>
        tag_check = 1;
 800a530:	2301      	movs	r3, #1
 800a532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a536:	e007      	b.n	800a548 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	4619      	mov	r1, r3
 800a53c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a53e:	f7ff feaf 	bl	800a2a0 <http_uri_is_ssi>
 800a542:	4603      	mov	r3, r0
 800a544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d106      	bne.n	800a55c <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a54e:	f107 0308 	add.w	r3, r7, #8
 800a552:	4619      	mov	r1, r3
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7ff fbf3 	bl	8009d40 <http_get_404_file>
 800a55a:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	4613      	mov	r3, r2
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 f810 	bl	800a594 <http_init_file>
 800a574:	4603      	mov	r3, r0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3744      	adds	r7, #68	; 0x44
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd90      	pop	{r4, r7, pc}
 800a57e:	bf00      	nop
 800a580:	2000098c 	.word	0x2000098c
 800a584:	08021528 	.word	0x08021528
 800a588:	200009e0 	.word	0x200009e0
 800a58c:	200009dc 	.word	0x200009dc
 800a590:	200009d8 	.word	0x200009d8

0800a594 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
 800a5a0:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d06f      	beq.n	800a688 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d106      	bne.n	800a5be <http_init_file+0x2a>
 800a5b0:	4b46      	ldr	r3, [pc, #280]	; (800a6cc <http_init_file+0x138>)
 800a5b2:	f640 120b 	movw	r2, #2315	; 0x90b
 800a5b6:	4946      	ldr	r1, [pc, #280]	; (800a6d0 <http_init_file+0x13c>)
 800a5b8:	4846      	ldr	r0, [pc, #280]	; (800a6d4 <http_init_file+0x140>)
 800a5ba:	f00a ff53 	bl	8015464 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800a5be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d01c      	beq.n	800a600 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800a5c6:	f7fe fb40 	bl	8008c4a <http_ssi_state_alloc>
 800a5ca:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d016      	beq.n	800a600 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
        ssi->parsed = file->data;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	69fa      	ldr	r2, [r7, #28]
 800a5fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	da06      	bge.n	800a624 <http_init_file+0x90>
 800a616:	4b2d      	ldr	r3, [pc, #180]	; (800a6cc <http_init_file+0x138>)
 800a618:	f640 1234 	movw	r2, #2356	; 0x934
 800a61c:	492e      	ldr	r1, [pc, #184]	; (800a6d8 <http_init_file+0x144>)
 800a61e:	482d      	ldr	r0, [pc, #180]	; (800a6d4 <http_init_file+0x140>)
 800a620:	f00a ff20 	bl	8015464 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	461a      	mov	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d032      	beq.n	800a6a2 <http_init_file+0x10e>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	695b      	ldr	r3, [r3, #20]
 800a640:	7c1b      	ldrb	r3, [r3, #16]
 800a642:	f003 0301 	and.w	r3, r3, #1
 800a646:	2b00      	cmp	r3, #0
 800a648:	d02b      	beq.n	800a6a2 <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6998      	ldr	r0, [r3, #24]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a652:	461a      	mov	r2, r3
 800a654:	4921      	ldr	r1, [pc, #132]	; (800a6dc <http_init_file+0x148>)
 800a656:	f000 fa93 	bl	800ab80 <lwip_strnstr>
 800a65a:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d01f      	beq.n	800a6a2 <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 800a662:	69bb      	ldr	r3, [r7, #24]
 800a664:	1d1a      	adds	r2, r3, #4
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	699a      	ldr	r2, [r3, #24]
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	441a      	add	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	1ad2      	subs	r2, r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	625a      	str	r2, [r3, #36]	; 0x24
 800a686:	e00c      	b.n	800a6a2 <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2200      	movs	r2, #0
 800a68c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2200      	movs	r2, #0
 800a692:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d006      	beq.n	800a6b8 <http_init_file+0x124>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	7c1b      	ldrb	r3, [r3, #16]
 800a6b0:	f003 0301 	and.w	r3, r3, #1
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d103      	bne.n	800a6c0 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f7fe fd4c 	bl	8009158 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3720      	adds	r7, #32
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	08017914 	.word	0x08017914
 800a6d0:	08017ac0 	.word	0x08017ac0
 800a6d4:	0801795c 	.word	0x0801795c
 800a6d8:	08017ad4 	.word	0x08017ad4
 800a6dc:	08017a98 	.word	0x08017a98

0800a6e0 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d002      	beq.n	800a6fc <http_err+0x1c>
    http_state_free(hs);
 800a6f6:	68f8      	ldr	r0, [r7, #12]
 800a6f8:	f7fe fb1a 	bl	8008d30 <http_state_free>
  }
}
 800a6fc:	bf00      	nop
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b086      	sub	sp, #24
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	4613      	mov	r3, r2
 800a710:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <http_sent+0x1c>
    return ERR_OK;
 800a71c:	2300      	movs	r3, #0
 800a71e:	e008      	b.n	800a732 <http_sent+0x2e>
  }

  hs->retries = 0;
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800a728:	6979      	ldr	r1, [r7, #20]
 800a72a:	68b8      	ldr	r0, [r7, #8]
 800a72c:	f7ff faae 	bl	8009c8c <http_send>

  return ERR_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d107      	bne.n	800a75e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800a74e:	2100      	movs	r1, #0
 800a750:	6838      	ldr	r0, [r7, #0]
 800a752:	f7fe fbbb 	bl	8008ecc <http_close_conn>
 800a756:	4603      	mov	r3, r0
 800a758:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	e021      	b.n	800a7a2 <http_poll+0x68>
  } else {
    hs->retries++;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a764:	3301      	adds	r3, #1
 800a766:	b2da      	uxtb	r2, r3
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a774:	2b04      	cmp	r3, #4
 800a776:	d105      	bne.n	800a784 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800a778:	68f9      	ldr	r1, [r7, #12]
 800a77a:	6838      	ldr	r0, [r7, #0]
 800a77c:	f7fe fba6 	bl	8008ecc <http_close_conn>
      return ERR_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	e00e      	b.n	800a7a2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	695b      	ldr	r3, [r3, #20]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d009      	beq.n	800a7a0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800a78c:	68f9      	ldr	r1, [r7, #12]
 800a78e:	6838      	ldr	r0, [r7, #0]
 800a790:	f7ff fa7c 	bl	8009c8c <http_send>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d002      	beq.n	800a7a0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800a79a:	6838      	ldr	r0, [r7, #0]
 800a79c:	f007 f8c2 	bl	8011924 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
	...

0800a7ac <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a7be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d105      	bne.n	800a7d2 <http_recv+0x26>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <http_recv+0x26>
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d111      	bne.n	800a7f6 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d008      	beq.n	800a7ea <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	891b      	ldrh	r3, [r3, #8]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	68b8      	ldr	r0, [r7, #8]
 800a7e0:	f002 fc94 	bl	800d10c <tcp_recved>
      pbuf_free(p);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f001 fd2f 	bl	800c248 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a7ea:	6979      	ldr	r1, [r7, #20]
 800a7ec:	68b8      	ldr	r0, [r7, #8]
 800a7ee:	f7fe fb6d 	bl	8008ecc <http_close_conn>
    return ERR_OK;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e072      	b.n	800a8dc <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	891b      	ldrh	r3, [r3, #8]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	68b8      	ldr	r0, [r7, #8]
 800a7fe:	f002 fc85 	bl	800d10c <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d012      	beq.n	800a832 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	6978      	ldr	r0, [r7, #20]
 800a818:	f7ff faf0 	bl	8009dfc <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a822:	2b00      	cmp	r3, #0
 800a824:	d103      	bne.n	800a82e <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800a826:	6979      	ldr	r1, [r7, #20]
 800a828:	68b8      	ldr	r0, [r7, #8]
 800a82a:	f7ff fa2f 	bl	8009c8c <http_send>
    }
    return ERR_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	e054      	b.n	800a8dc <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d14c      	bne.n	800a8d4 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800a83a:	68ba      	ldr	r2, [r7, #8]
 800a83c:	6979      	ldr	r1, [r7, #20]
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f7ff fc00 	bl	800a044 <http_parse_request>
 800a844:	4603      	mov	r3, r0
 800a846:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a848:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d015      	beq.n	800a87c <http_recv+0xd0>
 800a850:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a854:	f113 0f05 	cmn.w	r3, #5
 800a858:	d010      	beq.n	800a87c <http_recv+0xd0>
 800a85a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a85e:	f113 0f10 	cmn.w	r3, #16
 800a862:	d00b      	beq.n	800a87c <http_recv+0xd0>
 800a864:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a868:	f113 0f08 	cmn.w	r3, #8
 800a86c:	d006      	beq.n	800a87c <http_recv+0xd0>
 800a86e:	4b1d      	ldr	r3, [pc, #116]	; (800a8e4 <http_recv+0x138>)
 800a870:	f640 2204 	movw	r2, #2564	; 0xa04
 800a874:	491c      	ldr	r1, [pc, #112]	; (800a8e8 <http_recv+0x13c>)
 800a876:	481d      	ldr	r0, [pc, #116]	; (800a8ec <http_recv+0x140>)
 800a878:	f00a fdf4 	bl	8015464 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800a87c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a880:	f113 0f05 	cmn.w	r3, #5
 800a884:	d00b      	beq.n	800a89e <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d007      	beq.n	800a89e <http_recv+0xf2>
          pbuf_free(hs->req);
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	4618      	mov	r0, r3
 800a894:	f001 fcd8 	bl	800c248 <pbuf_free>
          hs->req = NULL;
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	2200      	movs	r2, #0
 800a89c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f001 fcd2 	bl	800c248 <pbuf_free>
      if (parsed == ERR_OK) {
 800a8a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d109      	bne.n	800a8c0 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d111      	bne.n	800a8da <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800a8b6:	6979      	ldr	r1, [r7, #20]
 800a8b8:	68b8      	ldr	r0, [r7, #8]
 800a8ba:	f7ff f9e7 	bl	8009c8c <http_send>
 800a8be:	e00c      	b.n	800a8da <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800a8c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8c4:	f113 0f10 	cmn.w	r3, #16
 800a8c8:	d107      	bne.n	800a8da <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800a8ca:	6979      	ldr	r1, [r7, #20]
 800a8cc:	68b8      	ldr	r0, [r7, #8]
 800a8ce:	f7fe fafd 	bl	8008ecc <http_close_conn>
 800a8d2:	e002      	b.n	800a8da <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f001 fcb7 	bl	800c248 <pbuf_free>
    }
  }
  return ERR_OK;
 800a8da:	2300      	movs	r3, #0
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	08017914 	.word	0x08017914
 800a8e8:	08017af4 	.word	0x08017af4
 800a8ec:	0801795c 	.word	0x0801795c

0800a8f0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	60f8      	str	r0, [r7, #12]
 800a8f8:	60b9      	str	r1, [r7, #8]
 800a8fa:	4613      	mov	r3, r2
 800a8fc:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a8fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d102      	bne.n	800a90c <http_accept+0x1c>
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d102      	bne.n	800a912 <http_accept+0x22>
    return ERR_VAL;
 800a90c:	f06f 0305 	mvn.w	r3, #5
 800a910:	e025      	b.n	800a95e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a912:	2101      	movs	r1, #1
 800a914:	68b8      	ldr	r0, [r7, #8]
 800a916:	f003 f8dd 	bl	800dad4 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800a91a:	f7fe f9cb 	bl	8008cb4 <http_state_alloc>
 800a91e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d102      	bne.n	800a92c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800a926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a92a:	e018      	b.n	800a95e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800a932:	6979      	ldr	r1, [r7, #20]
 800a934:	68b8      	ldr	r0, [r7, #8]
 800a936:	f003 facd 	bl	800ded4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800a93a:	490b      	ldr	r1, [pc, #44]	; (800a968 <http_accept+0x78>)
 800a93c:	68b8      	ldr	r0, [r7, #8]
 800a93e:	f003 fadb 	bl	800def8 <tcp_recv>
  altcp_err(pcb, http_err);
 800a942:	490a      	ldr	r1, [pc, #40]	; (800a96c <http_accept+0x7c>)
 800a944:	68b8      	ldr	r0, [r7, #8]
 800a946:	f003 fb1b 	bl	800df80 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a94a:	2204      	movs	r2, #4
 800a94c:	4908      	ldr	r1, [pc, #32]	; (800a970 <http_accept+0x80>)
 800a94e:	68b8      	ldr	r0, [r7, #8]
 800a950:	f003 fb50 	bl	800dff4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800a954:	4907      	ldr	r1, [pc, #28]	; (800a974 <http_accept+0x84>)
 800a956:	68b8      	ldr	r0, [r7, #8]
 800a958:	f003 faf0 	bl	800df3c <tcp_sent>

  return ERR_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	0800a7ad 	.word	0x0800a7ad
 800a96c:	0800a6e1 	.word	0x0800a6e1
 800a970:	0800a73b 	.word	0x0800a73b
 800a974:	0800a705 	.word	0x0800a705

0800a978 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d029      	beq.n	800a9de <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a98a:	2101      	movs	r1, #1
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f003 f8a1 	bl	800dad4 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800a992:	887b      	ldrh	r3, [r7, #2]
 800a994:	461a      	mov	r2, r3
 800a996:	4914      	ldr	r1, [pc, #80]	; (800a9e8 <httpd_init_pcb+0x70>)
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f002 f9e9 	bl	800cd70 <tcp_bind>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800a9a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d006      	beq.n	800a9b8 <httpd_init_pcb+0x40>
 800a9aa:	4b10      	ldr	r3, [pc, #64]	; (800a9ec <httpd_init_pcb+0x74>)
 800a9ac:	f640 2257 	movw	r2, #2647	; 0xa57
 800a9b0:	490f      	ldr	r1, [pc, #60]	; (800a9f0 <httpd_init_pcb+0x78>)
 800a9b2:	4810      	ldr	r0, [pc, #64]	; (800a9f4 <httpd_init_pcb+0x7c>)
 800a9b4:	f00a fd56 	bl	8015464 <iprintf>
    pcb = altcp_listen(pcb);
 800a9b8:	21ff      	movs	r1, #255	; 0xff
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f002 fa90 	bl	800cee0 <tcp_listen_with_backlog>
 800a9c0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <httpd_init_pcb+0x5e>
 800a9c8:	4b08      	ldr	r3, [pc, #32]	; (800a9ec <httpd_init_pcb+0x74>)
 800a9ca:	f640 2259 	movw	r2, #2649	; 0xa59
 800a9ce:	490a      	ldr	r1, [pc, #40]	; (800a9f8 <httpd_init_pcb+0x80>)
 800a9d0:	4808      	ldr	r0, [pc, #32]	; (800a9f4 <httpd_init_pcb+0x7c>)
 800a9d2:	f00a fd47 	bl	8015464 <iprintf>
    altcp_accept(pcb, http_accept);
 800a9d6:	4909      	ldr	r1, [pc, #36]	; (800a9fc <httpd_init_pcb+0x84>)
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f003 faf3 	bl	800dfc4 <tcp_accept>
  }
}
 800a9de:	bf00      	nop
 800a9e0:	3710      	adds	r7, #16
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	08021630 	.word	0x08021630
 800a9ec:	08017914 	.word	0x08017914
 800a9f0:	08017b20 	.word	0x08017b20
 800a9f4:	0801795c 	.word	0x0801795c
 800a9f8:	08017b3c 	.word	0x08017b3c
 800a9fc:	0800a8f1 	.word	0x0800a8f1

0800aa00 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800aa06:	202e      	movs	r0, #46	; 0x2e
 800aa08:	f003 fa56 	bl	800deb8 <tcp_new_ip_type>
 800aa0c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d106      	bne.n	800aa22 <httpd_init+0x22>
 800aa14:	4b07      	ldr	r3, [pc, #28]	; (800aa34 <httpd_init+0x34>)
 800aa16:	f640 2272 	movw	r2, #2674	; 0xa72
 800aa1a:	4907      	ldr	r1, [pc, #28]	; (800aa38 <httpd_init+0x38>)
 800aa1c:	4807      	ldr	r0, [pc, #28]	; (800aa3c <httpd_init+0x3c>)
 800aa1e:	f00a fd21 	bl	8015464 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800aa22:	2150      	movs	r1, #80	; 0x50
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff ffa7 	bl	800a978 <httpd_init_pcb>
}
 800aa2a:	bf00      	nop
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	08017914 	.word	0x08017914
 800aa38:	08017b5c 	.word	0x08017b5c
 800aa3c:	0801795c 	.word	0x0801795c

0800aa40 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d106      	bne.n	800aa60 <http_set_ssi_handler+0x20>
 800aa52:	4b14      	ldr	r3, [pc, #80]	; (800aaa4 <http_set_ssi_handler+0x64>)
 800aa54:	f640 2297 	movw	r2, #2711	; 0xa97
 800aa58:	4913      	ldr	r1, [pc, #76]	; (800aaa8 <http_set_ssi_handler+0x68>)
 800aa5a:	4814      	ldr	r0, [pc, #80]	; (800aaac <http_set_ssi_handler+0x6c>)
 800aa5c:	f00a fd02 	bl	8015464 <iprintf>
  httpd_ssi_handler = ssi_handler;
 800aa60:	4a13      	ldr	r2, [pc, #76]	; (800aab0 <http_set_ssi_handler+0x70>)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d106      	bne.n	800aa7a <http_set_ssi_handler+0x3a>
 800aa6c:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <http_set_ssi_handler+0x64>)
 800aa6e:	f640 229e 	movw	r2, #2718	; 0xa9e
 800aa72:	4910      	ldr	r1, [pc, #64]	; (800aab4 <http_set_ssi_handler+0x74>)
 800aa74:	480d      	ldr	r0, [pc, #52]	; (800aaac <http_set_ssi_handler+0x6c>)
 800aa76:	f00a fcf5 	bl	8015464 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	dc06      	bgt.n	800aa8e <http_set_ssi_handler+0x4e>
 800aa80:	4b08      	ldr	r3, [pc, #32]	; (800aaa4 <http_set_ssi_handler+0x64>)
 800aa82:	f640 229f 	movw	r2, #2719	; 0xa9f
 800aa86:	490c      	ldr	r1, [pc, #48]	; (800aab8 <http_set_ssi_handler+0x78>)
 800aa88:	4808      	ldr	r0, [pc, #32]	; (800aaac <http_set_ssi_handler+0x6c>)
 800aa8a:	f00a fceb 	bl	8015464 <iprintf>

  httpd_tags = tags;
 800aa8e:	4a0b      	ldr	r2, [pc, #44]	; (800aabc <http_set_ssi_handler+0x7c>)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800aa94:	4a0a      	ldr	r2, [pc, #40]	; (800aac0 <http_set_ssi_handler+0x80>)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800aa9a:	bf00      	nop
 800aa9c:	3710      	adds	r7, #16
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	08017914 	.word	0x08017914
 800aaa8:	08017b78 	.word	0x08017b78
 800aaac:	0801795c 	.word	0x0801795c
 800aab0:	200009cc 	.word	0x200009cc
 800aab4:	08017b90 	.word	0x08017b90
 800aab8:	08017ba0 	.word	0x08017ba0
 800aabc:	200009d4 	.word	0x200009d4
 800aac0:	200009d0 	.word	0x200009d0

0800aac4 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b082      	sub	sp, #8
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d106      	bne.n	800aae2 <http_set_cgi_handlers+0x1e>
 800aad4:	4b0d      	ldr	r3, [pc, #52]	; (800ab0c <http_set_cgi_handlers+0x48>)
 800aad6:	f640 22b2 	movw	r2, #2738	; 0xab2
 800aada:	490d      	ldr	r1, [pc, #52]	; (800ab10 <http_set_cgi_handlers+0x4c>)
 800aadc:	480d      	ldr	r0, [pc, #52]	; (800ab14 <http_set_cgi_handlers+0x50>)
 800aade:	f00a fcc1 	bl	8015464 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	dc06      	bgt.n	800aaf6 <http_set_cgi_handlers+0x32>
 800aae8:	4b08      	ldr	r3, [pc, #32]	; (800ab0c <http_set_cgi_handlers+0x48>)
 800aaea:	f640 22b3 	movw	r2, #2739	; 0xab3
 800aaee:	490a      	ldr	r1, [pc, #40]	; (800ab18 <http_set_cgi_handlers+0x54>)
 800aaf0:	4808      	ldr	r0, [pc, #32]	; (800ab14 <http_set_cgi_handlers+0x50>)
 800aaf2:	f00a fcb7 	bl	8015464 <iprintf>

  httpd_cgis = cgis;
 800aaf6:	4a09      	ldr	r2, [pc, #36]	; (800ab1c <http_set_cgi_handlers+0x58>)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800aafc:	4a08      	ldr	r2, [pc, #32]	; (800ab20 <http_set_cgi_handlers+0x5c>)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	6013      	str	r3, [r2, #0]
}
 800ab02:	bf00      	nop
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	08017914 	.word	0x08017914
 800ab10:	08017bb8 	.word	0x08017bb8
 800ab14:	0801795c 	.word	0x0801795c
 800ab18:	08017bc8 	.word	0x08017bc8
 800ab1c:	200009d8 	.word	0x200009d8
 800ab20:	200009dc 	.word	0x200009dc

0800ab24 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ab2e:	88fb      	ldrh	r3, [r7, #6]
 800ab30:	021b      	lsls	r3, r3, #8
 800ab32:	b21a      	sxth	r2, r3
 800ab34:	88fb      	ldrh	r3, [r7, #6]
 800ab36:	0a1b      	lsrs	r3, r3, #8
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	b21b      	sxth	r3, r3
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	b21b      	sxth	r3, r3
 800ab40:	b29b      	uxth	r3, r3
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	061a      	lsls	r2, r3, #24
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	021b      	lsls	r3, r3, #8
 800ab5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab62:	431a      	orrs	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	0a1b      	lsrs	r3, r3, #8
 800ab68:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ab6c:	431a      	orrs	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	0e1b      	lsrs	r3, r3, #24
 800ab72:	4313      	orrs	r3, r2
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800ab8c:	68b8      	ldr	r0, [r7, #8]
 800ab8e:	f7f5 fb29 	bl	80001e4 <strlen>
 800ab92:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d101      	bne.n	800ab9e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	e022      	b.n	800abe4 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	617b      	str	r3, [r7, #20]
 800aba2:	e012      	b.n	800abca <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	781a      	ldrb	r2, [r3, #0]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	429a      	cmp	r2, r3
 800abae:	d109      	bne.n	800abc4 <lwip_strnstr+0x44>
 800abb0:	693a      	ldr	r2, [r7, #16]
 800abb2:	68b9      	ldr	r1, [r7, #8]
 800abb4:	6978      	ldr	r0, [r7, #20]
 800abb6:	f00a fd9b 	bl	80156f0 <strncmp>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d101      	bne.n	800abc4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	e00f      	b.n	800abe4 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	3301      	adds	r3, #1
 800abc8:	617b      	str	r3, [r7, #20]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d007      	beq.n	800abe2 <lwip_strnstr+0x62>
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	441a      	add	r2, r3
 800abd8:	68f9      	ldr	r1, [r7, #12]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	440b      	add	r3, r1
 800abde:	429a      	cmp	r2, r3
 800abe0:	d9e0      	bls.n	800aba4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	1c5a      	adds	r2, r3, #1
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	603a      	str	r2, [r7, #0]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800ac0a:	7bfa      	ldrb	r2, [r7, #15]
 800ac0c:	7bbb      	ldrb	r3, [r7, #14]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d016      	beq.n	800ac40 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800ac12:	7bfb      	ldrb	r3, [r7, #15]
 800ac14:	f043 0320 	orr.w	r3, r3, #32
 800ac18:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800ac1a:	7b7b      	ldrb	r3, [r7, #13]
 800ac1c:	2b60      	cmp	r3, #96	; 0x60
 800ac1e:	d90c      	bls.n	800ac3a <lwip_stricmp+0x4e>
 800ac20:	7b7b      	ldrb	r3, [r7, #13]
 800ac22:	2b7a      	cmp	r3, #122	; 0x7a
 800ac24:	d809      	bhi.n	800ac3a <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800ac26:	7bbb      	ldrb	r3, [r7, #14]
 800ac28:	f043 0320 	orr.w	r3, r3, #32
 800ac2c:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800ac2e:	7b7a      	ldrb	r2, [r7, #13]
 800ac30:	7b3b      	ldrb	r3, [r7, #12]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d003      	beq.n	800ac3e <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e006      	b.n	800ac48 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e004      	b.n	800ac48 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800ac3e:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d1d7      	bne.n	800abf6 <lwip_stricmp+0xa>
  return 0;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b088      	sub	sp, #32
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	60f8      	str	r0, [r7, #12]
 800ac5c:	60b9      	str	r1, [r7, #8]
 800ac5e:	607a      	str	r2, [r7, #4]
  char *res = result;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	3b01      	subs	r3, #1
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	bfb8      	it	lt
 800ac74:	425b      	neglt	r3, r3
 800ac76:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d806      	bhi.n	800ac8c <lwip_itoa+0x38>
    if (bufsize == 1) {
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d154      	bne.n	800ad2e <lwip_itoa+0xda>
      *result = 0;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2200      	movs	r2, #0
 800ac88:	701a      	strb	r2, [r3, #0]
    }
    return;
 800ac8a:	e050      	b.n	800ad2e <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	da04      	bge.n	800ac9c <lwip_itoa+0x48>
    *res++ = '-';
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	1c5a      	adds	r2, r3, #1
 800ac96:	61fa      	str	r2, [r7, #28]
 800ac98:	222d      	movs	r2, #45	; 0x2d
 800ac9a:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800aca2:	e01c      	b.n	800acde <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	4b24      	ldr	r3, [pc, #144]	; (800ad38 <lwip_itoa+0xe4>)
 800aca8:	fb83 1302 	smull	r1, r3, r3, r2
 800acac:	1099      	asrs	r1, r3, #2
 800acae:	17d3      	asrs	r3, r2, #31
 800acb0:	1ac9      	subs	r1, r1, r3
 800acb2:	460b      	mov	r3, r1
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	440b      	add	r3, r1
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	1ad1      	subs	r1, r2, r3
 800acbc:	b2cb      	uxtb	r3, r1
 800acbe:	3330      	adds	r3, #48	; 0x30
 800acc0:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	7cfa      	ldrb	r2, [r7, #19]
 800accc:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	4a19      	ldr	r2, [pc, #100]	; (800ad38 <lwip_itoa+0xe4>)
 800acd2:	fb82 1203 	smull	r1, r2, r2, r3
 800acd6:	1092      	asrs	r2, r2, #2
 800acd8:	17db      	asrs	r3, r3, #31
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d003      	beq.n	800acec <lwip_itoa+0x98>
 800ace4:	69ba      	ldr	r2, [r7, #24]
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d8db      	bhi.n	800aca4 <lwip_itoa+0x50>
  }
  if (n) {
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2200      	movs	r2, #0
 800acf6:	701a      	strb	r2, [r3, #0]
    return;
 800acf8:	e01a      	b.n	800ad30 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10a      	bne.n	800ad18 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	1c5a      	adds	r2, r3, #1
 800ad06:	61fa      	str	r2, [r7, #28]
 800ad08:	2230      	movs	r2, #48	; 0x30
 800ad0a:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	1c5a      	adds	r2, r3, #1
 800ad10:	61fa      	str	r2, [r7, #28]
 800ad12:	2200      	movs	r2, #0
 800ad14:	701a      	strb	r2, [r3, #0]
    return;
 800ad16:	e00b      	b.n	800ad30 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	441a      	add	r2, r3
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	461a      	mov	r2, r3
 800ad24:	69b9      	ldr	r1, [r7, #24]
 800ad26:	69f8      	ldr	r0, [r7, #28]
 800ad28:	f00a fb7a 	bl	8015420 <memmove>
 800ad2c:	e000      	b.n	800ad30 <lwip_itoa+0xdc>
    return;
 800ad2e:	bf00      	nop
}
 800ad30:	3720      	adds	r7, #32
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	66666667 	.word	0x66666667

0800ad3c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ad46:	f000 f8d5 	bl	800aef4 <mem_init>
  memp_init();
 800ad4a:	f000 fbdb 	bl	800b504 <memp_init>
  pbuf_init();
  netif_init();
 800ad4e:	f000 fc93 	bl	800b678 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ad52:	f007 fea7 	bl	8012aa4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ad56:	f001 fd05 	bl	800c764 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ad5a:	f007 fe19 	bl	8012990 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ad5e:	bf00      	nop
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
	...

0800ad68 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	4603      	mov	r3, r0
 800ad70:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ad72:	4b05      	ldr	r3, [pc, #20]	; (800ad88 <ptr_to_mem+0x20>)
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	88fb      	ldrh	r3, [r7, #6]
 800ad78:	4413      	add	r3, r2
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	200009e4 	.word	0x200009e4

0800ad8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad94:	4b05      	ldr	r3, [pc, #20]	; (800adac <mem_to_ptr+0x20>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	b29b      	uxth	r3, r3
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	200009e4 	.word	0x200009e4

0800adb0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800adb0:	b590      	push	{r4, r7, lr}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800adb8:	4b45      	ldr	r3, [pc, #276]	; (800aed0 <plug_holes+0x120>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d206      	bcs.n	800add0 <plug_holes+0x20>
 800adc2:	4b44      	ldr	r3, [pc, #272]	; (800aed4 <plug_holes+0x124>)
 800adc4:	f240 12df 	movw	r2, #479	; 0x1df
 800adc8:	4943      	ldr	r1, [pc, #268]	; (800aed8 <plug_holes+0x128>)
 800adca:	4844      	ldr	r0, [pc, #272]	; (800aedc <plug_holes+0x12c>)
 800adcc:	f00a fb4a 	bl	8015464 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800add0:	4b43      	ldr	r3, [pc, #268]	; (800aee0 <plug_holes+0x130>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	429a      	cmp	r2, r3
 800add8:	d306      	bcc.n	800ade8 <plug_holes+0x38>
 800adda:	4b3e      	ldr	r3, [pc, #248]	; (800aed4 <plug_holes+0x124>)
 800addc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ade0:	4940      	ldr	r1, [pc, #256]	; (800aee4 <plug_holes+0x134>)
 800ade2:	483e      	ldr	r0, [pc, #248]	; (800aedc <plug_holes+0x12c>)
 800ade4:	f00a fb3e 	bl	8015464 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	791b      	ldrb	r3, [r3, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d006      	beq.n	800adfe <plug_holes+0x4e>
 800adf0:	4b38      	ldr	r3, [pc, #224]	; (800aed4 <plug_holes+0x124>)
 800adf2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800adf6:	493c      	ldr	r1, [pc, #240]	; (800aee8 <plug_holes+0x138>)
 800adf8:	4838      	ldr	r0, [pc, #224]	; (800aedc <plug_holes+0x12c>)
 800adfa:	f00a fb33 	bl	8015464 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	881b      	ldrh	r3, [r3, #0]
 800ae02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae06:	d906      	bls.n	800ae16 <plug_holes+0x66>
 800ae08:	4b32      	ldr	r3, [pc, #200]	; (800aed4 <plug_holes+0x124>)
 800ae0a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ae0e:	4937      	ldr	r1, [pc, #220]	; (800aeec <plug_holes+0x13c>)
 800ae10:	4832      	ldr	r0, [pc, #200]	; (800aedc <plug_holes+0x12c>)
 800ae12:	f00a fb27 	bl	8015464 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f7ff ffa4 	bl	800ad68 <ptr_to_mem>
 800ae20:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d024      	beq.n	800ae74 <plug_holes+0xc4>
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	791b      	ldrb	r3, [r3, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d120      	bne.n	800ae74 <plug_holes+0xc4>
 800ae32:	4b2b      	ldr	r3, [pc, #172]	; (800aee0 <plug_holes+0x130>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d01b      	beq.n	800ae74 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ae3c:	4b2c      	ldr	r3, [pc, #176]	; (800aef0 <plug_holes+0x140>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d102      	bne.n	800ae4c <plug_holes+0x9c>
      lfree = mem;
 800ae46:	4a2a      	ldr	r2, [pc, #168]	; (800aef0 <plug_holes+0x140>)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	881a      	ldrh	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae5c:	d00a      	beq.n	800ae74 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7ff ff80 	bl	800ad68 <ptr_to_mem>
 800ae68:	4604      	mov	r4, r0
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7ff ff8e 	bl	800ad8c <mem_to_ptr>
 800ae70:	4603      	mov	r3, r0
 800ae72:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	885b      	ldrh	r3, [r3, #2]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff ff75 	bl	800ad68 <ptr_to_mem>
 800ae7e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d01f      	beq.n	800aec8 <plug_holes+0x118>
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	791b      	ldrb	r3, [r3, #4]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d11b      	bne.n	800aec8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae90:	4b17      	ldr	r3, [pc, #92]	; (800aef0 <plug_holes+0x140>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d102      	bne.n	800aea0 <plug_holes+0xf0>
      lfree = pmem;
 800ae9a:	4a15      	ldr	r2, [pc, #84]	; (800aef0 <plug_holes+0x140>)
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	881a      	ldrh	r2, [r3, #0]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	881b      	ldrh	r3, [r3, #0]
 800aeac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aeb0:	d00a      	beq.n	800aec8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff ff56 	bl	800ad68 <ptr_to_mem>
 800aebc:	4604      	mov	r4, r0
 800aebe:	68b8      	ldr	r0, [r7, #8]
 800aec0:	f7ff ff64 	bl	800ad8c <mem_to_ptr>
 800aec4:	4603      	mov	r3, r0
 800aec6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800aec8:	bf00      	nop
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd90      	pop	{r4, r7, pc}
 800aed0:	200009e4 	.word	0x200009e4
 800aed4:	08017be4 	.word	0x08017be4
 800aed8:	08017c14 	.word	0x08017c14
 800aedc:	08017c2c 	.word	0x08017c2c
 800aee0:	200009e8 	.word	0x200009e8
 800aee4:	08017c54 	.word	0x08017c54
 800aee8:	08017c70 	.word	0x08017c70
 800aeec:	08017c8c 	.word	0x08017c8c
 800aef0:	200009ec 	.word	0x200009ec

0800aef4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800aefa:	4b18      	ldr	r3, [pc, #96]	; (800af5c <mem_init+0x68>)
 800aefc:	3303      	adds	r3, #3
 800aefe:	f023 0303 	bic.w	r3, r3, #3
 800af02:	461a      	mov	r2, r3
 800af04:	4b16      	ldr	r3, [pc, #88]	; (800af60 <mem_init+0x6c>)
 800af06:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800af08:	4b15      	ldr	r3, [pc, #84]	; (800af60 <mem_init+0x6c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af14:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800af22:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800af26:	f7ff ff1f 	bl	800ad68 <ptr_to_mem>
 800af2a:	4603      	mov	r3, r0
 800af2c:	4a0d      	ldr	r2, [pc, #52]	; (800af64 <mem_init+0x70>)
 800af2e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800af30:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <mem_init+0x70>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2201      	movs	r2, #1
 800af36:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800af38:	4b0a      	ldr	r3, [pc, #40]	; (800af64 <mem_init+0x70>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af40:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800af42:	4b08      	ldr	r3, [pc, #32]	; (800af64 <mem_init+0x70>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800af4a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800af4c:	4b04      	ldr	r3, [pc, #16]	; (800af60 <mem_init+0x6c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a05      	ldr	r2, [pc, #20]	; (800af68 <mem_init+0x74>)
 800af52:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	2000a7cc 	.word	0x2000a7cc
 800af60:	200009e4 	.word	0x200009e4
 800af64:	200009e8 	.word	0x200009e8
 800af68:	200009ec 	.word	0x200009ec

0800af6c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7ff ff09 	bl	800ad8c <mem_to_ptr>
 800af7a:	4603      	mov	r3, r0
 800af7c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	881b      	ldrh	r3, [r3, #0]
 800af82:	4618      	mov	r0, r3
 800af84:	f7ff fef0 	bl	800ad68 <ptr_to_mem>
 800af88:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	885b      	ldrh	r3, [r3, #2]
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff feea 	bl	800ad68 <ptr_to_mem>
 800af94:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af9e:	d818      	bhi.n	800afd2 <mem_link_valid+0x66>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	885b      	ldrh	r3, [r3, #2]
 800afa4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afa8:	d813      	bhi.n	800afd2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800afae:	8afa      	ldrh	r2, [r7, #22]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d004      	beq.n	800afbe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	881b      	ldrh	r3, [r3, #0]
 800afb8:	8afa      	ldrh	r2, [r7, #22]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d109      	bne.n	800afd2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800afbe:	4b08      	ldr	r3, [pc, #32]	; (800afe0 <mem_link_valid+0x74>)
 800afc0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d006      	beq.n	800afd6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	885b      	ldrh	r3, [r3, #2]
 800afcc:	8afa      	ldrh	r2, [r7, #22]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d001      	beq.n	800afd6 <mem_link_valid+0x6a>
    return 0;
 800afd2:	2300      	movs	r3, #0
 800afd4:	e000      	b.n	800afd8 <mem_link_valid+0x6c>
  }
  return 1;
 800afd6:	2301      	movs	r3, #1
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3718      	adds	r7, #24
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	200009e8 	.word	0x200009e8

0800afe4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d04c      	beq.n	800b08c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f003 0303 	and.w	r3, r3, #3
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d007      	beq.n	800b00c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800affc:	4b25      	ldr	r3, [pc, #148]	; (800b094 <mem_free+0xb0>)
 800affe:	f240 2273 	movw	r2, #627	; 0x273
 800b002:	4925      	ldr	r1, [pc, #148]	; (800b098 <mem_free+0xb4>)
 800b004:	4825      	ldr	r0, [pc, #148]	; (800b09c <mem_free+0xb8>)
 800b006:	f00a fa2d 	bl	8015464 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b00a:	e040      	b.n	800b08e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	3b08      	subs	r3, #8
 800b010:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b012:	4b23      	ldr	r3, [pc, #140]	; (800b0a0 <mem_free+0xbc>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d306      	bcc.n	800b02a <mem_free+0x46>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f103 020c 	add.w	r2, r3, #12
 800b022:	4b20      	ldr	r3, [pc, #128]	; (800b0a4 <mem_free+0xc0>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	429a      	cmp	r2, r3
 800b028:	d907      	bls.n	800b03a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b02a:	4b1a      	ldr	r3, [pc, #104]	; (800b094 <mem_free+0xb0>)
 800b02c:	f240 227f 	movw	r2, #639	; 0x27f
 800b030:	491d      	ldr	r1, [pc, #116]	; (800b0a8 <mem_free+0xc4>)
 800b032:	481a      	ldr	r0, [pc, #104]	; (800b09c <mem_free+0xb8>)
 800b034:	f00a fa16 	bl	8015464 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b038:	e029      	b.n	800b08e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	791b      	ldrb	r3, [r3, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d107      	bne.n	800b052 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b042:	4b14      	ldr	r3, [pc, #80]	; (800b094 <mem_free+0xb0>)
 800b044:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800b048:	4918      	ldr	r1, [pc, #96]	; (800b0ac <mem_free+0xc8>)
 800b04a:	4814      	ldr	r0, [pc, #80]	; (800b09c <mem_free+0xb8>)
 800b04c:	f00a fa0a 	bl	8015464 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b050:	e01d      	b.n	800b08e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	f7ff ff8a 	bl	800af6c <mem_link_valid>
 800b058:	4603      	mov	r3, r0
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d107      	bne.n	800b06e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b05e:	4b0d      	ldr	r3, [pc, #52]	; (800b094 <mem_free+0xb0>)
 800b060:	f240 2295 	movw	r2, #661	; 0x295
 800b064:	4912      	ldr	r1, [pc, #72]	; (800b0b0 <mem_free+0xcc>)
 800b066:	480d      	ldr	r0, [pc, #52]	; (800b09c <mem_free+0xb8>)
 800b068:	f00a f9fc 	bl	8015464 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800b06c:	e00f      	b.n	800b08e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b074:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <mem_free+0xd0>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d202      	bcs.n	800b084 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b07e:	4a0d      	ldr	r2, [pc, #52]	; (800b0b4 <mem_free+0xd0>)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f7ff fe93 	bl	800adb0 <plug_holes>
 800b08a:	e000      	b.n	800b08e <mem_free+0xaa>
    return;
 800b08c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	08017be4 	.word	0x08017be4
 800b098:	08017cb8 	.word	0x08017cb8
 800b09c:	08017c2c 	.word	0x08017c2c
 800b0a0:	200009e4 	.word	0x200009e4
 800b0a4:	200009e8 	.word	0x200009e8
 800b0a8:	08017cdc 	.word	0x08017cdc
 800b0ac:	08017cf8 	.word	0x08017cf8
 800b0b0:	08017d20 	.word	0x08017d20
 800b0b4:	200009ec 	.word	0x200009ec

0800b0b8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b088      	sub	sp, #32
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b0c4:	887b      	ldrh	r3, [r7, #2]
 800b0c6:	3303      	adds	r3, #3
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	f023 0303 	bic.w	r3, r3, #3
 800b0ce:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b0d0:	8bfb      	ldrh	r3, [r7, #30]
 800b0d2:	2b0b      	cmp	r3, #11
 800b0d4:	d801      	bhi.n	800b0da <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b0d6:	230c      	movs	r3, #12
 800b0d8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b0da:	8bfb      	ldrh	r3, [r7, #30]
 800b0dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0e0:	d803      	bhi.n	800b0ea <mem_trim+0x32>
 800b0e2:	8bfa      	ldrh	r2, [r7, #30]
 800b0e4:	887b      	ldrh	r3, [r7, #2]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d201      	bcs.n	800b0ee <mem_trim+0x36>
    return NULL;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e0cc      	b.n	800b288 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b0ee:	4b68      	ldr	r3, [pc, #416]	; (800b290 <mem_trim+0x1d8>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d304      	bcc.n	800b102 <mem_trim+0x4a>
 800b0f8:	4b66      	ldr	r3, [pc, #408]	; (800b294 <mem_trim+0x1dc>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d306      	bcc.n	800b110 <mem_trim+0x58>
 800b102:	4b65      	ldr	r3, [pc, #404]	; (800b298 <mem_trim+0x1e0>)
 800b104:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b108:	4964      	ldr	r1, [pc, #400]	; (800b29c <mem_trim+0x1e4>)
 800b10a:	4865      	ldr	r0, [pc, #404]	; (800b2a0 <mem_trim+0x1e8>)
 800b10c:	f00a f9aa 	bl	8015464 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b110:	4b5f      	ldr	r3, [pc, #380]	; (800b290 <mem_trim+0x1d8>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	687a      	ldr	r2, [r7, #4]
 800b116:	429a      	cmp	r2, r3
 800b118:	d304      	bcc.n	800b124 <mem_trim+0x6c>
 800b11a:	4b5e      	ldr	r3, [pc, #376]	; (800b294 <mem_trim+0x1dc>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	429a      	cmp	r2, r3
 800b122:	d301      	bcc.n	800b128 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	e0af      	b.n	800b288 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	3b08      	subs	r3, #8
 800b12c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b12e:	69b8      	ldr	r0, [r7, #24]
 800b130:	f7ff fe2c 	bl	800ad8c <mem_to_ptr>
 800b134:	4603      	mov	r3, r0
 800b136:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	881a      	ldrh	r2, [r3, #0]
 800b13c:	8afb      	ldrh	r3, [r7, #22]
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	b29b      	uxth	r3, r3
 800b142:	3b08      	subs	r3, #8
 800b144:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b146:	8bfa      	ldrh	r2, [r7, #30]
 800b148:	8abb      	ldrh	r3, [r7, #20]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d906      	bls.n	800b15c <mem_trim+0xa4>
 800b14e:	4b52      	ldr	r3, [pc, #328]	; (800b298 <mem_trim+0x1e0>)
 800b150:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b154:	4953      	ldr	r1, [pc, #332]	; (800b2a4 <mem_trim+0x1ec>)
 800b156:	4852      	ldr	r0, [pc, #328]	; (800b2a0 <mem_trim+0x1e8>)
 800b158:	f00a f984 	bl	8015464 <iprintf>
  if (newsize > size) {
 800b15c:	8bfa      	ldrh	r2, [r7, #30]
 800b15e:	8abb      	ldrh	r3, [r7, #20]
 800b160:	429a      	cmp	r2, r3
 800b162:	d901      	bls.n	800b168 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800b164:	2300      	movs	r3, #0
 800b166:	e08f      	b.n	800b288 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800b168:	8bfa      	ldrh	r2, [r7, #30]
 800b16a:	8abb      	ldrh	r3, [r7, #20]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d101      	bne.n	800b174 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	e089      	b.n	800b288 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	881b      	ldrh	r3, [r3, #0]
 800b178:	4618      	mov	r0, r3
 800b17a:	f7ff fdf5 	bl	800ad68 <ptr_to_mem>
 800b17e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b180:	693b      	ldr	r3, [r7, #16]
 800b182:	791b      	ldrb	r3, [r3, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d13f      	bne.n	800b208 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b190:	d106      	bne.n	800b1a0 <mem_trim+0xe8>
 800b192:	4b41      	ldr	r3, [pc, #260]	; (800b298 <mem_trim+0x1e0>)
 800b194:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b198:	4943      	ldr	r1, [pc, #268]	; (800b2a8 <mem_trim+0x1f0>)
 800b19a:	4841      	ldr	r0, [pc, #260]	; (800b2a0 <mem_trim+0x1e8>)
 800b19c:	f00a f962 	bl	8015464 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b1a6:	8afa      	ldrh	r2, [r7, #22]
 800b1a8:	8bfb      	ldrh	r3, [r7, #30]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	3308      	adds	r3, #8
 800b1b0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b1b2:	4b3e      	ldr	r3, [pc, #248]	; (800b2ac <mem_trim+0x1f4>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d106      	bne.n	800b1ca <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800b1bc:	89fb      	ldrh	r3, [r7, #14]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7ff fdd2 	bl	800ad68 <ptr_to_mem>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	4a39      	ldr	r2, [pc, #228]	; (800b2ac <mem_trim+0x1f4>)
 800b1c8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b1ca:	89fb      	ldrh	r3, [r7, #14]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff fdcb 	bl	800ad68 <ptr_to_mem>
 800b1d2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	89ba      	ldrh	r2, [r7, #12]
 800b1de:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	8afa      	ldrh	r2, [r7, #22]
 800b1e4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	89fa      	ldrh	r2, [r7, #14]
 800b1ea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1f4:	d047      	beq.n	800b286 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	881b      	ldrh	r3, [r3, #0]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff fdb4 	bl	800ad68 <ptr_to_mem>
 800b200:	4602      	mov	r2, r0
 800b202:	89fb      	ldrh	r3, [r7, #14]
 800b204:	8053      	strh	r3, [r2, #2]
 800b206:	e03e      	b.n	800b286 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b208:	8bfb      	ldrh	r3, [r7, #30]
 800b20a:	f103 0214 	add.w	r2, r3, #20
 800b20e:	8abb      	ldrh	r3, [r7, #20]
 800b210:	429a      	cmp	r2, r3
 800b212:	d838      	bhi.n	800b286 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b214:	8afa      	ldrh	r2, [r7, #22]
 800b216:	8bfb      	ldrh	r3, [r7, #30]
 800b218:	4413      	add	r3, r2
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	3308      	adds	r3, #8
 800b21e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	881b      	ldrh	r3, [r3, #0]
 800b224:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b228:	d106      	bne.n	800b238 <mem_trim+0x180>
 800b22a:	4b1b      	ldr	r3, [pc, #108]	; (800b298 <mem_trim+0x1e0>)
 800b22c:	f240 3216 	movw	r2, #790	; 0x316
 800b230:	491d      	ldr	r1, [pc, #116]	; (800b2a8 <mem_trim+0x1f0>)
 800b232:	481b      	ldr	r0, [pc, #108]	; (800b2a0 <mem_trim+0x1e8>)
 800b234:	f00a f916 	bl	8015464 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b238:	89fb      	ldrh	r3, [r7, #14]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff fd94 	bl	800ad68 <ptr_to_mem>
 800b240:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b242:	4b1a      	ldr	r3, [pc, #104]	; (800b2ac <mem_trim+0x1f4>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d202      	bcs.n	800b252 <mem_trim+0x19a>
      lfree = mem2;
 800b24c:	4a17      	ldr	r2, [pc, #92]	; (800b2ac <mem_trim+0x1f4>)
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	2200      	movs	r2, #0
 800b256:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	881a      	ldrh	r2, [r3, #0]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	8afa      	ldrh	r2, [r7, #22]
 800b264:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	89fa      	ldrh	r2, [r7, #14]
 800b26a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	881b      	ldrh	r3, [r3, #0]
 800b270:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b274:	d007      	beq.n	800b286 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	881b      	ldrh	r3, [r3, #0]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff fd74 	bl	800ad68 <ptr_to_mem>
 800b280:	4602      	mov	r2, r0
 800b282:	89fb      	ldrh	r3, [r7, #14]
 800b284:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800b286:	687b      	ldr	r3, [r7, #4]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3720      	adds	r7, #32
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	200009e4 	.word	0x200009e4
 800b294:	200009e8 	.word	0x200009e8
 800b298:	08017be4 	.word	0x08017be4
 800b29c:	08017d54 	.word	0x08017d54
 800b2a0:	08017c2c 	.word	0x08017c2c
 800b2a4:	08017d6c 	.word	0x08017d6c
 800b2a8:	08017d8c 	.word	0x08017d8c
 800b2ac:	200009ec 	.word	0x200009ec

0800b2b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b088      	sub	sp, #32
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b2ba:	88fb      	ldrh	r3, [r7, #6]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <mem_malloc+0x14>
    return NULL;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	e0d9      	b.n	800b478 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b2c4:	88fb      	ldrh	r3, [r7, #6]
 800b2c6:	3303      	adds	r3, #3
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	f023 0303 	bic.w	r3, r3, #3
 800b2ce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b2d0:	8bbb      	ldrh	r3, [r7, #28]
 800b2d2:	2b0b      	cmp	r3, #11
 800b2d4:	d801      	bhi.n	800b2da <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b2d6:	230c      	movs	r3, #12
 800b2d8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b2da:	8bbb      	ldrh	r3, [r7, #28]
 800b2dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b2e0:	d803      	bhi.n	800b2ea <mem_malloc+0x3a>
 800b2e2:	8bba      	ldrh	r2, [r7, #28]
 800b2e4:	88fb      	ldrh	r3, [r7, #6]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d201      	bcs.n	800b2ee <mem_malloc+0x3e>
    return NULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e0c4      	b.n	800b478 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b2ee:	4b64      	ldr	r3, [pc, #400]	; (800b480 <mem_malloc+0x1d0>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7ff fd4a 	bl	800ad8c <mem_to_ptr>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	83fb      	strh	r3, [r7, #30]
 800b2fc:	e0b4      	b.n	800b468 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b2fe:	8bfb      	ldrh	r3, [r7, #30]
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff fd31 	bl	800ad68 <ptr_to_mem>
 800b306:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	791b      	ldrb	r3, [r3, #4]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f040 80a4 	bne.w	800b45a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	461a      	mov	r2, r3
 800b318:	8bfb      	ldrh	r3, [r7, #30]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	f1a3 0208 	sub.w	r2, r3, #8
 800b320:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b322:	429a      	cmp	r2, r3
 800b324:	f0c0 8099 	bcc.w	800b45a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	881b      	ldrh	r3, [r3, #0]
 800b32c:	461a      	mov	r2, r3
 800b32e:	8bfb      	ldrh	r3, [r7, #30]
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	f1a3 0208 	sub.w	r2, r3, #8
 800b336:	8bbb      	ldrh	r3, [r7, #28]
 800b338:	3314      	adds	r3, #20
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d333      	bcc.n	800b3a6 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b33e:	8bfa      	ldrh	r2, [r7, #30]
 800b340:	8bbb      	ldrh	r3, [r7, #28]
 800b342:	4413      	add	r3, r2
 800b344:	b29b      	uxth	r3, r3
 800b346:	3308      	adds	r3, #8
 800b348:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b34a:	8a7b      	ldrh	r3, [r7, #18]
 800b34c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b350:	d106      	bne.n	800b360 <mem_malloc+0xb0>
 800b352:	4b4c      	ldr	r3, [pc, #304]	; (800b484 <mem_malloc+0x1d4>)
 800b354:	f240 3287 	movw	r2, #903	; 0x387
 800b358:	494b      	ldr	r1, [pc, #300]	; (800b488 <mem_malloc+0x1d8>)
 800b35a:	484c      	ldr	r0, [pc, #304]	; (800b48c <mem_malloc+0x1dc>)
 800b35c:	f00a f882 	bl	8015464 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b360:	8a7b      	ldrh	r3, [r7, #18]
 800b362:	4618      	mov	r0, r3
 800b364:	f7ff fd00 	bl	800ad68 <ptr_to_mem>
 800b368:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2200      	movs	r2, #0
 800b36e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	881a      	ldrh	r2, [r3, #0]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	8bfa      	ldrh	r2, [r7, #30]
 800b37c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	8a7a      	ldrh	r2, [r7, #18]
 800b382:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	2201      	movs	r2, #1
 800b388:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	881b      	ldrh	r3, [r3, #0]
 800b38e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b392:	d00b      	beq.n	800b3ac <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	4618      	mov	r0, r3
 800b39a:	f7ff fce5 	bl	800ad68 <ptr_to_mem>
 800b39e:	4602      	mov	r2, r0
 800b3a0:	8a7b      	ldrh	r3, [r7, #18]
 800b3a2:	8053      	strh	r3, [r2, #2]
 800b3a4:	e002      	b.n	800b3ac <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b3ac:	4b34      	ldr	r3, [pc, #208]	; (800b480 <mem_malloc+0x1d0>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d127      	bne.n	800b406 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800b3b6:	4b32      	ldr	r3, [pc, #200]	; (800b480 <mem_malloc+0x1d0>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b3bc:	e005      	b.n	800b3ca <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	881b      	ldrh	r3, [r3, #0]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff fcd0 	bl	800ad68 <ptr_to_mem>
 800b3c8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	791b      	ldrb	r3, [r3, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d004      	beq.n	800b3dc <mem_malloc+0x12c>
 800b3d2:	4b2f      	ldr	r3, [pc, #188]	; (800b490 <mem_malloc+0x1e0>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	69ba      	ldr	r2, [r7, #24]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d1f0      	bne.n	800b3be <mem_malloc+0x10e>
          }
          lfree = cur;
 800b3dc:	4a28      	ldr	r2, [pc, #160]	; (800b480 <mem_malloc+0x1d0>)
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b3e2:	4b27      	ldr	r3, [pc, #156]	; (800b480 <mem_malloc+0x1d0>)
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	4b2a      	ldr	r3, [pc, #168]	; (800b490 <mem_malloc+0x1e0>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d00b      	beq.n	800b406 <mem_malloc+0x156>
 800b3ee:	4b24      	ldr	r3, [pc, #144]	; (800b480 <mem_malloc+0x1d0>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	791b      	ldrb	r3, [r3, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d006      	beq.n	800b406 <mem_malloc+0x156>
 800b3f8:	4b22      	ldr	r3, [pc, #136]	; (800b484 <mem_malloc+0x1d4>)
 800b3fa:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b3fe:	4925      	ldr	r1, [pc, #148]	; (800b494 <mem_malloc+0x1e4>)
 800b400:	4822      	ldr	r0, [pc, #136]	; (800b48c <mem_malloc+0x1dc>)
 800b402:	f00a f82f 	bl	8015464 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b406:	8bba      	ldrh	r2, [r7, #28]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	4413      	add	r3, r2
 800b40c:	3308      	adds	r3, #8
 800b40e:	4a20      	ldr	r2, [pc, #128]	; (800b490 <mem_malloc+0x1e0>)
 800b410:	6812      	ldr	r2, [r2, #0]
 800b412:	4293      	cmp	r3, r2
 800b414:	d906      	bls.n	800b424 <mem_malloc+0x174>
 800b416:	4b1b      	ldr	r3, [pc, #108]	; (800b484 <mem_malloc+0x1d4>)
 800b418:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b41c:	491e      	ldr	r1, [pc, #120]	; (800b498 <mem_malloc+0x1e8>)
 800b41e:	481b      	ldr	r0, [pc, #108]	; (800b48c <mem_malloc+0x1dc>)
 800b420:	f00a f820 	bl	8015464 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f003 0303 	and.w	r3, r3, #3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d006      	beq.n	800b43c <mem_malloc+0x18c>
 800b42e:	4b15      	ldr	r3, [pc, #84]	; (800b484 <mem_malloc+0x1d4>)
 800b430:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b434:	4919      	ldr	r1, [pc, #100]	; (800b49c <mem_malloc+0x1ec>)
 800b436:	4815      	ldr	r0, [pc, #84]	; (800b48c <mem_malloc+0x1dc>)
 800b438:	f00a f814 	bl	8015464 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	f003 0303 	and.w	r3, r3, #3
 800b442:	2b00      	cmp	r3, #0
 800b444:	d006      	beq.n	800b454 <mem_malloc+0x1a4>
 800b446:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <mem_malloc+0x1d4>)
 800b448:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b44c:	4914      	ldr	r1, [pc, #80]	; (800b4a0 <mem_malloc+0x1f0>)
 800b44e:	480f      	ldr	r0, [pc, #60]	; (800b48c <mem_malloc+0x1dc>)
 800b450:	f00a f808 	bl	8015464 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	3308      	adds	r3, #8
 800b458:	e00e      	b.n	800b478 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b45a:	8bfb      	ldrh	r3, [r7, #30]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7ff fc83 	bl	800ad68 <ptr_to_mem>
 800b462:	4603      	mov	r3, r0
 800b464:	881b      	ldrh	r3, [r3, #0]
 800b466:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b468:	8bfa      	ldrh	r2, [r7, #30]
 800b46a:	8bbb      	ldrh	r3, [r7, #28]
 800b46c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b470:	429a      	cmp	r2, r3
 800b472:	f4ff af44 	bcc.w	800b2fe <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b476:	2300      	movs	r3, #0
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3720      	adds	r7, #32
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	200009ec 	.word	0x200009ec
 800b484:	08017be4 	.word	0x08017be4
 800b488:	08017d8c 	.word	0x08017d8c
 800b48c:	08017c2c 	.word	0x08017c2c
 800b490:	200009e8 	.word	0x200009e8
 800b494:	08017da0 	.word	0x08017da0
 800b498:	08017dbc 	.word	0x08017dbc
 800b49c:	08017dec 	.word	0x08017dec
 800b4a0:	08017e1c 	.word	0x08017e1c

0800b4a4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	3303      	adds	r3, #3
 800b4ba:	f023 0303 	bic.w	r3, r3, #3
 800b4be:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	60fb      	str	r3, [r7, #12]
 800b4c4:	e011      	b.n	800b4ea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	461a      	mov	r2, r3
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	60fb      	str	r3, [r7, #12]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	885b      	ldrh	r3, [r3, #2]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	dbe7      	blt.n	800b4c6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b4f6:	bf00      	nop
 800b4f8:	bf00      	nop
 800b4fa:	3714      	adds	r7, #20
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr

0800b504 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b50a:	2300      	movs	r3, #0
 800b50c:	80fb      	strh	r3, [r7, #6]
 800b50e:	e009      	b.n	800b524 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b510:	88fb      	ldrh	r3, [r7, #6]
 800b512:	4a08      	ldr	r2, [pc, #32]	; (800b534 <memp_init+0x30>)
 800b514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff ffc3 	bl	800b4a4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b51e:	88fb      	ldrh	r3, [r7, #6]
 800b520:	3301      	adds	r3, #1
 800b522:	80fb      	strh	r3, [r7, #6]
 800b524:	88fb      	ldrh	r3, [r7, #6]
 800b526:	2b08      	cmp	r3, #8
 800b528:	d9f2      	bls.n	800b510 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b52a:	bf00      	nop
 800b52c:	bf00      	nop
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	080215cc 	.word	0x080215cc

0800b538 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d012      	beq.n	800b574 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	6812      	ldr	r2, [r2, #0]
 800b556:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f003 0303 	and.w	r3, r3, #3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d006      	beq.n	800b570 <do_memp_malloc_pool+0x38>
 800b562:	4b07      	ldr	r3, [pc, #28]	; (800b580 <do_memp_malloc_pool+0x48>)
 800b564:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b568:	4906      	ldr	r1, [pc, #24]	; (800b584 <do_memp_malloc_pool+0x4c>)
 800b56a:	4807      	ldr	r0, [pc, #28]	; (800b588 <do_memp_malloc_pool+0x50>)
 800b56c:	f009 ff7a 	bl	8015464 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	e000      	b.n	800b576 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	08017e40 	.word	0x08017e40
 800b584:	08017e70 	.word	0x08017e70
 800b588:	08017e94 	.word	0x08017e94

0800b58c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	4603      	mov	r3, r0
 800b594:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b596:	79fb      	ldrb	r3, [r7, #7]
 800b598:	2b08      	cmp	r3, #8
 800b59a:	d908      	bls.n	800b5ae <memp_malloc+0x22>
 800b59c:	4b0a      	ldr	r3, [pc, #40]	; (800b5c8 <memp_malloc+0x3c>)
 800b59e:	f240 1257 	movw	r2, #343	; 0x157
 800b5a2:	490a      	ldr	r1, [pc, #40]	; (800b5cc <memp_malloc+0x40>)
 800b5a4:	480a      	ldr	r0, [pc, #40]	; (800b5d0 <memp_malloc+0x44>)
 800b5a6:	f009 ff5d 	bl	8015464 <iprintf>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e008      	b.n	800b5c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b5ae:	79fb      	ldrb	r3, [r7, #7]
 800b5b0:	4a08      	ldr	r2, [pc, #32]	; (800b5d4 <memp_malloc+0x48>)
 800b5b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7ff ffbe 	bl	800b538 <do_memp_malloc_pool>
 800b5bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b5be:	68fb      	ldr	r3, [r7, #12]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	08017e40 	.word	0x08017e40
 800b5cc:	08017ed0 	.word	0x08017ed0
 800b5d0:	08017e94 	.word	0x08017e94
 800b5d4:	080215cc 	.word	0x080215cc

0800b5d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	f003 0303 	and.w	r3, r3, #3
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d006      	beq.n	800b5fa <do_memp_free_pool+0x22>
 800b5ec:	4b0a      	ldr	r3, [pc, #40]	; (800b618 <do_memp_free_pool+0x40>)
 800b5ee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b5f2:	490a      	ldr	r1, [pc, #40]	; (800b61c <do_memp_free_pool+0x44>)
 800b5f4:	480a      	ldr	r0, [pc, #40]	; (800b620 <do_memp_free_pool+0x48>)
 800b5f6:	f009 ff35 	bl	8015464 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b610:	bf00      	nop
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	08017e40 	.word	0x08017e40
 800b61c:	08017ef0 	.word	0x08017ef0
 800b620:	08017e94 	.word	0x08017e94

0800b624 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	6039      	str	r1, [r7, #0]
 800b62e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b630:	79fb      	ldrb	r3, [r7, #7]
 800b632:	2b08      	cmp	r3, #8
 800b634:	d907      	bls.n	800b646 <memp_free+0x22>
 800b636:	4b0c      	ldr	r3, [pc, #48]	; (800b668 <memp_free+0x44>)
 800b638:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b63c:	490b      	ldr	r1, [pc, #44]	; (800b66c <memp_free+0x48>)
 800b63e:	480c      	ldr	r0, [pc, #48]	; (800b670 <memp_free+0x4c>)
 800b640:	f009 ff10 	bl	8015464 <iprintf>
 800b644:	e00c      	b.n	800b660 <memp_free+0x3c>

  if (mem == NULL) {
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d008      	beq.n	800b65e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b64c:	79fb      	ldrb	r3, [r7, #7]
 800b64e:	4a09      	ldr	r2, [pc, #36]	; (800b674 <memp_free+0x50>)
 800b650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b654:	6839      	ldr	r1, [r7, #0]
 800b656:	4618      	mov	r0, r3
 800b658:	f7ff ffbe 	bl	800b5d8 <do_memp_free_pool>
 800b65c:	e000      	b.n	800b660 <memp_free+0x3c>
    return;
 800b65e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	08017e40 	.word	0x08017e40
 800b66c:	08017f10 	.word	0x08017f10
 800b670:	08017e94 	.word	0x08017e94
 800b674:	080215cc 	.word	0x080215cc

0800b678 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b678:	b480      	push	{r7}
 800b67a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b67c:	bf00      	nop
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
	...

0800b688 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b086      	sub	sp, #24
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
 800b694:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d108      	bne.n	800b6ae <netif_add+0x26>
 800b69c:	4b57      	ldr	r3, [pc, #348]	; (800b7fc <netif_add+0x174>)
 800b69e:	f240 1227 	movw	r2, #295	; 0x127
 800b6a2:	4957      	ldr	r1, [pc, #348]	; (800b800 <netif_add+0x178>)
 800b6a4:	4857      	ldr	r0, [pc, #348]	; (800b804 <netif_add+0x17c>)
 800b6a6:	f009 fedd 	bl	8015464 <iprintf>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e0a2      	b.n	800b7f4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d108      	bne.n	800b6c6 <netif_add+0x3e>
 800b6b4:	4b51      	ldr	r3, [pc, #324]	; (800b7fc <netif_add+0x174>)
 800b6b6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b6ba:	4953      	ldr	r1, [pc, #332]	; (800b808 <netif_add+0x180>)
 800b6bc:	4851      	ldr	r0, [pc, #324]	; (800b804 <netif_add+0x17c>)
 800b6be:	f009 fed1 	bl	8015464 <iprintf>
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	e096      	b.n	800b7f4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b6cc:	4b4f      	ldr	r3, [pc, #316]	; (800b80c <netif_add+0x184>)
 800b6ce:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d101      	bne.n	800b6da <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b6d6:	4b4d      	ldr	r3, [pc, #308]	; (800b80c <netif_add+0x184>)
 800b6d8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d101      	bne.n	800b6e4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b6e0:	4b4a      	ldr	r3, [pc, #296]	; (800b80c <netif_add+0x184>)
 800b6e2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	4a45      	ldr	r2, [pc, #276]	; (800b810 <netif_add+0x188>)
 800b6fa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	2200      	movs	r2, #0
 800b706:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2200      	movs	r2, #0
 800b70e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6a3a      	ldr	r2, [r7, #32]
 800b714:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b716:	4b3f      	ldr	r3, [pc, #252]	; (800b814 <netif_add+0x18c>)
 800b718:	781a      	ldrb	r2, [r3, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b724:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	687a      	ldr	r2, [r7, #4]
 800b72a:	68b9      	ldr	r1, [r7, #8]
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f000 f913 	bl	800b958 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	4798      	blx	r3
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d001      	beq.n	800b742 <netif_add+0xba>
    return NULL;
 800b73e:	2300      	movs	r3, #0
 800b740:	e058      	b.n	800b7f4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b748:	2bff      	cmp	r3, #255	; 0xff
 800b74a:	d103      	bne.n	800b754 <netif_add+0xcc>
        netif->num = 0;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b754:	2300      	movs	r3, #0
 800b756:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b758:	4b2f      	ldr	r3, [pc, #188]	; (800b818 <netif_add+0x190>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	617b      	str	r3, [r7, #20]
 800b75e:	e02b      	b.n	800b7b8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	429a      	cmp	r2, r3
 800b766:	d106      	bne.n	800b776 <netif_add+0xee>
 800b768:	4b24      	ldr	r3, [pc, #144]	; (800b7fc <netif_add+0x174>)
 800b76a:	f240 128b 	movw	r2, #395	; 0x18b
 800b76e:	492b      	ldr	r1, [pc, #172]	; (800b81c <netif_add+0x194>)
 800b770:	4824      	ldr	r0, [pc, #144]	; (800b804 <netif_add+0x17c>)
 800b772:	f009 fe77 	bl	8015464 <iprintf>
        num_netifs++;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	3301      	adds	r3, #1
 800b77a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2bff      	cmp	r3, #255	; 0xff
 800b780:	dd06      	ble.n	800b790 <netif_add+0x108>
 800b782:	4b1e      	ldr	r3, [pc, #120]	; (800b7fc <netif_add+0x174>)
 800b784:	f240 128d 	movw	r2, #397	; 0x18d
 800b788:	4925      	ldr	r1, [pc, #148]	; (800b820 <netif_add+0x198>)
 800b78a:	481e      	ldr	r0, [pc, #120]	; (800b804 <netif_add+0x17c>)
 800b78c:	f009 fe6a 	bl	8015464 <iprintf>
        if (netif2->num == netif->num) {
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d108      	bne.n	800b7b2 <netif_add+0x12a>
          netif->num++;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b7b0:	e005      	b.n	800b7be <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	617b      	str	r3, [r7, #20]
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1d0      	bne.n	800b760 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1be      	bne.n	800b742 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7ca:	2bfe      	cmp	r3, #254	; 0xfe
 800b7cc:	d103      	bne.n	800b7d6 <netif_add+0x14e>
    netif_num = 0;
 800b7ce:	4b11      	ldr	r3, [pc, #68]	; (800b814 <netif_add+0x18c>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	701a      	strb	r2, [r3, #0]
 800b7d4:	e006      	b.n	800b7e4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7dc:	3301      	adds	r3, #1
 800b7de:	b2da      	uxtb	r2, r3
 800b7e0:	4b0c      	ldr	r3, [pc, #48]	; (800b814 <netif_add+0x18c>)
 800b7e2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b7e4:	4b0c      	ldr	r3, [pc, #48]	; (800b818 <netif_add+0x190>)
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b7ec:	4a0a      	ldr	r2, [pc, #40]	; (800b818 <netif_add+0x190>)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3718      	adds	r7, #24
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	08017f2c 	.word	0x08017f2c
 800b800:	08017fc0 	.word	0x08017fc0
 800b804:	08017f7c 	.word	0x08017f7c
 800b808:	08017fdc 	.word	0x08017fdc
 800b80c:	08021630 	.word	0x08021630
 800b810:	0800bb6b 	.word	0x0800bb6b
 800b814:	20000a14 	.word	0x20000a14
 800b818:	2000dff4 	.word	0x2000dff4
 800b81c:	08018000 	.word	0x08018000
 800b820:	08018014 	.word	0x08018014

0800b824 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b082      	sub	sp, #8
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b82e:	6839      	ldr	r1, [r7, #0]
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f002 fd85 	bl	800e340 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b836:	6839      	ldr	r1, [r7, #0]
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f007 fabd 	bl	8012db8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b086      	sub	sp, #24
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d106      	bne.n	800b868 <netif_do_set_ipaddr+0x20>
 800b85a:	4b1d      	ldr	r3, [pc, #116]	; (800b8d0 <netif_do_set_ipaddr+0x88>)
 800b85c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b860:	491c      	ldr	r1, [pc, #112]	; (800b8d4 <netif_do_set_ipaddr+0x8c>)
 800b862:	481d      	ldr	r0, [pc, #116]	; (800b8d8 <netif_do_set_ipaddr+0x90>)
 800b864:	f009 fdfe 	bl	8015464 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d106      	bne.n	800b87c <netif_do_set_ipaddr+0x34>
 800b86e:	4b18      	ldr	r3, [pc, #96]	; (800b8d0 <netif_do_set_ipaddr+0x88>)
 800b870:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b874:	4917      	ldr	r1, [pc, #92]	; (800b8d4 <netif_do_set_ipaddr+0x8c>)
 800b876:	4818      	ldr	r0, [pc, #96]	; (800b8d8 <netif_do_set_ipaddr+0x90>)
 800b878:	f009 fdf4 	bl	8015464 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	3304      	adds	r3, #4
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	429a      	cmp	r2, r3
 800b888:	d01c      	beq.n	800b8c4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3304      	adds	r3, #4
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b89a:	f107 0314 	add.w	r3, r7, #20
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f7ff ffbf 	bl	800b824 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d002      	beq.n	800b8b2 <netif_do_set_ipaddr+0x6a>
 800b8ac:	68bb      	ldr	r3, [r7, #8]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	e000      	b.n	800b8b4 <netif_do_set_ipaddr+0x6c>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b8b8:	2101      	movs	r1, #1
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f000 f8d2 	bl	800ba64 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e000      	b.n	800b8c6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	08017f2c 	.word	0x08017f2c
 800b8d4:	08018044 	.word	0x08018044
 800b8d8:	08017f7c 	.word	0x08017f7c

0800b8dc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d00a      	beq.n	800b90c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <netif_do_set_netmask+0x26>
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	e000      	b.n	800b904 <netif_do_set_netmask+0x28>
 800b902:	2300      	movs	r3, #0
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b908:	2301      	movs	r3, #1
 800b90a:	e000      	b.n	800b90e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3714      	adds	r7, #20
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b085      	sub	sp, #20
 800b91e:	af00      	add	r7, sp, #0
 800b920:	60f8      	str	r0, [r7, #12]
 800b922:	60b9      	str	r1, [r7, #8]
 800b924:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	330c      	adds	r3, #12
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	429a      	cmp	r2, r3
 800b932:	d00a      	beq.n	800b94a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d002      	beq.n	800b940 <netif_do_set_gw+0x26>
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	e000      	b.n	800b942 <netif_do_set_gw+0x28>
 800b940:	2300      	movs	r3, #0
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b946:	2301      	movs	r3, #1
 800b948:	e000      	b.n	800b94c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
 800b964:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b966:	2300      	movs	r3, #0
 800b968:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b96a:	2300      	movs	r3, #0
 800b96c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d101      	bne.n	800b978 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b974:	4b1c      	ldr	r3, [pc, #112]	; (800b9e8 <netif_set_addr+0x90>)
 800b976:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d101      	bne.n	800b982 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b97e:	4b1a      	ldr	r3, [pc, #104]	; (800b9e8 <netif_set_addr+0x90>)
 800b980:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d101      	bne.n	800b98c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b988:	4b17      	ldr	r3, [pc, #92]	; (800b9e8 <netif_set_addr+0x90>)
 800b98a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <netif_set_addr+0x42>
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d101      	bne.n	800b99e <netif_set_addr+0x46>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e000      	b.n	800b9a0 <netif_set_addr+0x48>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d006      	beq.n	800b9b6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b9a8:	f107 0310 	add.w	r3, r7, #16
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	68b9      	ldr	r1, [r7, #8]
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f7ff ff49 	bl	800b848 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b9b6:	69fa      	ldr	r2, [r7, #28]
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f7ff ff8e 	bl	800b8dc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b9c0:	69ba      	ldr	r2, [r7, #24]
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f7ff ffa8 	bl	800b91a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d106      	bne.n	800b9de <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b9d0:	f107 0310 	add.w	r3, r7, #16
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	68b9      	ldr	r1, [r7, #8]
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f7ff ff35 	bl	800b848 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b9de:	bf00      	nop
 800b9e0:	3720      	adds	r7, #32
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	08021630 	.word	0x08021630

0800b9ec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b9f4:	4a04      	ldr	r2, [pc, #16]	; (800ba08 <netif_set_default+0x1c>)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b9fa:	bf00      	nop
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	2000dff8 	.word	0x2000dff8

0800ba0c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d107      	bne.n	800ba2a <netif_set_up+0x1e>
 800ba1a:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <netif_set_up+0x4c>)
 800ba1c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ba20:	490e      	ldr	r1, [pc, #56]	; (800ba5c <netif_set_up+0x50>)
 800ba22:	480f      	ldr	r0, [pc, #60]	; (800ba60 <netif_set_up+0x54>)
 800ba24:	f009 fd1e 	bl	8015464 <iprintf>
 800ba28:	e013      	b.n	800ba52 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10c      	bne.n	800ba52 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba3e:	f043 0301 	orr.w	r3, r3, #1
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ba4a:	2103      	movs	r1, #3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f809 	bl	800ba64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	08017f2c 	.word	0x08017f2c
 800ba5c:	080180b4 	.word	0x080180b4
 800ba60:	08017f7c 	.word	0x08017f7c

0800ba64 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d106      	bne.n	800ba84 <netif_issue_reports+0x20>
 800ba76:	4b18      	ldr	r3, [pc, #96]	; (800bad8 <netif_issue_reports+0x74>)
 800ba78:	f240 326d 	movw	r2, #877	; 0x36d
 800ba7c:	4917      	ldr	r1, [pc, #92]	; (800badc <netif_issue_reports+0x78>)
 800ba7e:	4818      	ldr	r0, [pc, #96]	; (800bae0 <netif_issue_reports+0x7c>)
 800ba80:	f009 fcf0 	bl	8015464 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba8a:	f003 0304 	and.w	r3, r3, #4
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d01e      	beq.n	800bad0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba98:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d017      	beq.n	800bad0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800baa0:	78fb      	ldrb	r3, [r7, #3]
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d013      	beq.n	800bad2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	3304      	adds	r3, #4
 800baae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00e      	beq.n	800bad2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800baba:	f003 0308 	and.w	r3, r3, #8
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d007      	beq.n	800bad2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	3304      	adds	r3, #4
 800bac6:	4619      	mov	r1, r3
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f008 f8df 	bl	8013c8c <etharp_request>
 800bace:	e000      	b.n	800bad2 <netif_issue_reports+0x6e>
    return;
 800bad0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	08017f2c 	.word	0x08017f2c
 800badc:	080180d0 	.word	0x080180d0
 800bae0:	08017f7c 	.word	0x08017f7c

0800bae4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d107      	bne.n	800bb02 <netif_set_down+0x1e>
 800baf2:	4b12      	ldr	r3, [pc, #72]	; (800bb3c <netif_set_down+0x58>)
 800baf4:	f240 329b 	movw	r2, #923	; 0x39b
 800baf8:	4911      	ldr	r1, [pc, #68]	; (800bb40 <netif_set_down+0x5c>)
 800bafa:	4812      	ldr	r0, [pc, #72]	; (800bb44 <netif_set_down+0x60>)
 800bafc:	f009 fcb2 	bl	8015464 <iprintf>
 800bb00:	e019      	b.n	800bb36 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb08:	f003 0301 	and.w	r3, r3, #1
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d012      	beq.n	800bb36 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb16:	f023 0301 	bic.w	r3, r3, #1
 800bb1a:	b2da      	uxtb	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb28:	f003 0308 	and.w	r3, r3, #8
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f007 fc69 	bl	8013408 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	08017f2c 	.word	0x08017f2c
 800bb40:	080180f4 	.word	0x080180f4
 800bb44:	08017f7c 	.word	0x08017f7c

0800bb48 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d002      	beq.n	800bb5e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	61da      	str	r2, [r3, #28]
  }
}
 800bb5e:	bf00      	nop
 800bb60:	370c      	adds	r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b085      	sub	sp, #20
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	60f8      	str	r0, [r7, #12]
 800bb72:	60b9      	str	r1, [r7, #8]
 800bb74:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bb76:	f06f 030b 	mvn.w	r3, #11
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
	...

0800bb88 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bb92:	79fb      	ldrb	r3, [r7, #7]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d013      	beq.n	800bbc0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bb98:	4b0d      	ldr	r3, [pc, #52]	; (800bbd0 <netif_get_by_index+0x48>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	e00c      	b.n	800bbba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bba6:	3301      	adds	r3, #1
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	79fa      	ldrb	r2, [r7, #7]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d101      	bne.n	800bbb4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	e006      	b.n	800bbc2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	60fb      	str	r3, [r7, #12]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1ef      	bne.n	800bba0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bbc0:	2300      	movs	r3, #0
}
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	3714      	adds	r7, #20
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbcc:	4770      	bx	lr
 800bbce:	bf00      	nop
 800bbd0:	2000dff4 	.word	0x2000dff4

0800bbd4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bbda:	4b0c      	ldr	r3, [pc, #48]	; (800bc0c <pbuf_free_ooseq+0x38>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bbe0:	4b0b      	ldr	r3, [pc, #44]	; (800bc10 <pbuf_free_ooseq+0x3c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	607b      	str	r3, [r7, #4]
 800bbe6:	e00a      	b.n	800bbfe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d003      	beq.n	800bbf8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f002 fbe3 	bl	800e3bc <tcp_free_ooseq>
      return;
 800bbf6:	e005      	b.n	800bc04 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	607b      	str	r3, [r7, #4]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1f1      	bne.n	800bbe8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	2000dffc 	.word	0x2000dffc
 800bc10:	2000e004 	.word	0x2000e004

0800bc14 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bc14:	b480      	push	{r7}
 800bc16:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800bc18:	4b03      	ldr	r3, [pc, #12]	; (800bc28 <pbuf_pool_is_empty+0x14>)
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bc1e:	bf00      	nop
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	2000dffc 	.word	0x2000dffc

0800bc2c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	4611      	mov	r1, r2
 800bc38:	461a      	mov	r2, r3
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	80fb      	strh	r3, [r7, #6]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2200      	movs	r2, #0
 800bc46:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	68ba      	ldr	r2, [r7, #8]
 800bc4c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	88fa      	ldrh	r2, [r7, #6]
 800bc52:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	88ba      	ldrh	r2, [r7, #4]
 800bc58:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bc5a:	8b3b      	ldrh	r3, [r7, #24]
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	7f3a      	ldrb	r2, [r7, #28]
 800bc66:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	73da      	strb	r2, [r3, #15]
}
 800bc74:	bf00      	nop
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08c      	sub	sp, #48	; 0x30
 800bc84:	af02      	add	r7, sp, #8
 800bc86:	4603      	mov	r3, r0
 800bc88:	71fb      	strb	r3, [r7, #7]
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	80bb      	strh	r3, [r7, #4]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bc92:	79fb      	ldrb	r3, [r7, #7]
 800bc94:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bc96:	887b      	ldrh	r3, [r7, #2]
 800bc98:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc9c:	d07f      	beq.n	800bd9e <pbuf_alloc+0x11e>
 800bc9e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bca2:	f300 80c8 	bgt.w	800be36 <pbuf_alloc+0x1b6>
 800bca6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bcaa:	d010      	beq.n	800bcce <pbuf_alloc+0x4e>
 800bcac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bcb0:	f300 80c1 	bgt.w	800be36 <pbuf_alloc+0x1b6>
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d002      	beq.n	800bcbe <pbuf_alloc+0x3e>
 800bcb8:	2b41      	cmp	r3, #65	; 0x41
 800bcba:	f040 80bc 	bne.w	800be36 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bcbe:	887a      	ldrh	r2, [r7, #2]
 800bcc0:	88bb      	ldrh	r3, [r7, #4]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	f000 f8d1 	bl	800be6c <pbuf_alloc_reference>
 800bcca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bccc:	e0bd      	b.n	800be4a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bcd6:	88bb      	ldrh	r3, [r7, #4]
 800bcd8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bcda:	2008      	movs	r0, #8
 800bcdc:	f7ff fc56 	bl	800b58c <memp_malloc>
 800bce0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d109      	bne.n	800bcfc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bce8:	f7ff ff94 	bl	800bc14 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d002      	beq.n	800bcf8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bcf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcf4:	f000 faa8 	bl	800c248 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	e0a7      	b.n	800be4c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bcfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcfe:	3303      	adds	r3, #3
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	f023 0303 	bic.w	r3, r3, #3
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	8b7a      	ldrh	r2, [r7, #26]
 800bd10:	4293      	cmp	r3, r2
 800bd12:	bf28      	it	cs
 800bd14:	4613      	movcs	r3, r2
 800bd16:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bd18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd1a:	3310      	adds	r3, #16
 800bd1c:	693a      	ldr	r2, [r7, #16]
 800bd1e:	4413      	add	r3, r2
 800bd20:	3303      	adds	r3, #3
 800bd22:	f023 0303 	bic.w	r3, r3, #3
 800bd26:	4618      	mov	r0, r3
 800bd28:	89f9      	ldrh	r1, [r7, #14]
 800bd2a:	8b7a      	ldrh	r2, [r7, #26]
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9301      	str	r3, [sp, #4]
 800bd30:	887b      	ldrh	r3, [r7, #2]
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	460b      	mov	r3, r1
 800bd36:	4601      	mov	r1, r0
 800bd38:	6938      	ldr	r0, [r7, #16]
 800bd3a:	f7ff ff77 	bl	800bc2c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	f003 0303 	and.w	r3, r3, #3
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d006      	beq.n	800bd58 <pbuf_alloc+0xd8>
 800bd4a:	4b42      	ldr	r3, [pc, #264]	; (800be54 <pbuf_alloc+0x1d4>)
 800bd4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd50:	4941      	ldr	r1, [pc, #260]	; (800be58 <pbuf_alloc+0x1d8>)
 800bd52:	4842      	ldr	r0, [pc, #264]	; (800be5c <pbuf_alloc+0x1dc>)
 800bd54:	f009 fb86 	bl	8015464 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bd58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd5a:	3303      	adds	r3, #3
 800bd5c:	f023 0303 	bic.w	r3, r3, #3
 800bd60:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bd64:	d106      	bne.n	800bd74 <pbuf_alloc+0xf4>
 800bd66:	4b3b      	ldr	r3, [pc, #236]	; (800be54 <pbuf_alloc+0x1d4>)
 800bd68:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bd6c:	493c      	ldr	r1, [pc, #240]	; (800be60 <pbuf_alloc+0x1e0>)
 800bd6e:	483b      	ldr	r0, [pc, #236]	; (800be5c <pbuf_alloc+0x1dc>)
 800bd70:	f009 fb78 	bl	8015464 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d102      	bne.n	800bd80 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd7e:	e002      	b.n	800bd86 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bd8a:	8b7a      	ldrh	r2, [r7, #26]
 800bd8c:	89fb      	ldrh	r3, [r7, #14]
 800bd8e:	1ad3      	subs	r3, r2, r3
 800bd90:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bd92:	2300      	movs	r3, #0
 800bd94:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bd96:	8b7b      	ldrh	r3, [r7, #26]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d19e      	bne.n	800bcda <pbuf_alloc+0x5a>
      break;
 800bd9c:	e055      	b.n	800be4a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bd9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bda0:	3303      	adds	r3, #3
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	f023 0303 	bic.w	r3, r3, #3
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	88bb      	ldrh	r3, [r7, #4]
 800bdac:	3303      	adds	r3, #3
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	f023 0303 	bic.w	r3, r3, #3
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	4413      	add	r3, r2
 800bdb8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bdba:	8b3b      	ldrh	r3, [r7, #24]
 800bdbc:	3310      	adds	r3, #16
 800bdbe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bdc0:	8b3a      	ldrh	r2, [r7, #24]
 800bdc2:	88bb      	ldrh	r3, [r7, #4]
 800bdc4:	3303      	adds	r3, #3
 800bdc6:	f023 0303 	bic.w	r3, r3, #3
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d306      	bcc.n	800bddc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bdce:	8afa      	ldrh	r2, [r7, #22]
 800bdd0:	88bb      	ldrh	r3, [r7, #4]
 800bdd2:	3303      	adds	r3, #3
 800bdd4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d201      	bcs.n	800bde0 <pbuf_alloc+0x160>
        return NULL;
 800bddc:	2300      	movs	r3, #0
 800bdde:	e035      	b.n	800be4c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bde0:	8afb      	ldrh	r3, [r7, #22]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff fa64 	bl	800b2b0 <mem_malloc>
 800bde8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bdea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <pbuf_alloc+0x174>
        return NULL;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	e02b      	b.n	800be4c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bdf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdf6:	3310      	adds	r3, #16
 800bdf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdfa:	4413      	add	r3, r2
 800bdfc:	3303      	adds	r3, #3
 800bdfe:	f023 0303 	bic.w	r3, r3, #3
 800be02:	4618      	mov	r0, r3
 800be04:	88b9      	ldrh	r1, [r7, #4]
 800be06:	88ba      	ldrh	r2, [r7, #4]
 800be08:	2300      	movs	r3, #0
 800be0a:	9301      	str	r3, [sp, #4]
 800be0c:	887b      	ldrh	r3, [r7, #2]
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	460b      	mov	r3, r1
 800be12:	4601      	mov	r1, r0
 800be14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be16:	f7ff ff09 	bl	800bc2c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800be1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	f003 0303 	and.w	r3, r3, #3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d010      	beq.n	800be48 <pbuf_alloc+0x1c8>
 800be26:	4b0b      	ldr	r3, [pc, #44]	; (800be54 <pbuf_alloc+0x1d4>)
 800be28:	f44f 7291 	mov.w	r2, #290	; 0x122
 800be2c:	490d      	ldr	r1, [pc, #52]	; (800be64 <pbuf_alloc+0x1e4>)
 800be2e:	480b      	ldr	r0, [pc, #44]	; (800be5c <pbuf_alloc+0x1dc>)
 800be30:	f009 fb18 	bl	8015464 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800be34:	e008      	b.n	800be48 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800be36:	4b07      	ldr	r3, [pc, #28]	; (800be54 <pbuf_alloc+0x1d4>)
 800be38:	f240 1227 	movw	r2, #295	; 0x127
 800be3c:	490a      	ldr	r1, [pc, #40]	; (800be68 <pbuf_alloc+0x1e8>)
 800be3e:	4807      	ldr	r0, [pc, #28]	; (800be5c <pbuf_alloc+0x1dc>)
 800be40:	f009 fb10 	bl	8015464 <iprintf>
      return NULL;
 800be44:	2300      	movs	r3, #0
 800be46:	e001      	b.n	800be4c <pbuf_alloc+0x1cc>
      break;
 800be48:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3728      	adds	r7, #40	; 0x28
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	0801815c 	.word	0x0801815c
 800be58:	0801818c 	.word	0x0801818c
 800be5c:	080181bc 	.word	0x080181bc
 800be60:	080181e4 	.word	0x080181e4
 800be64:	08018218 	.word	0x08018218
 800be68:	08018244 	.word	0x08018244

0800be6c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af02      	add	r7, sp, #8
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	807b      	strh	r3, [r7, #2]
 800be78:	4613      	mov	r3, r2
 800be7a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800be7c:	883b      	ldrh	r3, [r7, #0]
 800be7e:	2b41      	cmp	r3, #65	; 0x41
 800be80:	d009      	beq.n	800be96 <pbuf_alloc_reference+0x2a>
 800be82:	883b      	ldrh	r3, [r7, #0]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d006      	beq.n	800be96 <pbuf_alloc_reference+0x2a>
 800be88:	4b0f      	ldr	r3, [pc, #60]	; (800bec8 <pbuf_alloc_reference+0x5c>)
 800be8a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800be8e:	490f      	ldr	r1, [pc, #60]	; (800becc <pbuf_alloc_reference+0x60>)
 800be90:	480f      	ldr	r0, [pc, #60]	; (800bed0 <pbuf_alloc_reference+0x64>)
 800be92:	f009 fae7 	bl	8015464 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800be96:	2007      	movs	r0, #7
 800be98:	f7ff fb78 	bl	800b58c <memp_malloc>
 800be9c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d101      	bne.n	800bea8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bea4:	2300      	movs	r3, #0
 800bea6:	e00b      	b.n	800bec0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bea8:	8879      	ldrh	r1, [r7, #2]
 800beaa:	887a      	ldrh	r2, [r7, #2]
 800beac:	2300      	movs	r3, #0
 800beae:	9301      	str	r3, [sp, #4]
 800beb0:	883b      	ldrh	r3, [r7, #0]
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	460b      	mov	r3, r1
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f7ff feb7 	bl	800bc2c <pbuf_init_alloced_pbuf>
  return p;
 800bebe:	68fb      	ldr	r3, [r7, #12]
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}
 800bec8:	0801815c 	.word	0x0801815c
 800becc:	08018260 	.word	0x08018260
 800bed0:	080181bc 	.word	0x080181bc

0800bed4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af02      	add	r7, sp, #8
 800beda:	607b      	str	r3, [r7, #4]
 800bedc:	4603      	mov	r3, r0
 800bede:	73fb      	strb	r3, [r7, #15]
 800bee0:	460b      	mov	r3, r1
 800bee2:	81bb      	strh	r3, [r7, #12]
 800bee4:	4613      	mov	r3, r2
 800bee6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800beec:	8a7b      	ldrh	r3, [r7, #18]
 800beee:	3303      	adds	r3, #3
 800bef0:	f023 0203 	bic.w	r2, r3, #3
 800bef4:	89bb      	ldrh	r3, [r7, #12]
 800bef6:	441a      	add	r2, r3
 800bef8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800befa:	429a      	cmp	r2, r3
 800befc:	d901      	bls.n	800bf02 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800befe:	2300      	movs	r3, #0
 800bf00:	e018      	b.n	800bf34 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d007      	beq.n	800bf18 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bf08:	8a7b      	ldrh	r3, [r7, #18]
 800bf0a:	3303      	adds	r3, #3
 800bf0c:	f023 0303 	bic.w	r3, r3, #3
 800bf10:	6a3a      	ldr	r2, [r7, #32]
 800bf12:	4413      	add	r3, r2
 800bf14:	617b      	str	r3, [r7, #20]
 800bf16:	e001      	b.n	800bf1c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	89b9      	ldrh	r1, [r7, #12]
 800bf20:	89ba      	ldrh	r2, [r7, #12]
 800bf22:	2302      	movs	r3, #2
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	897b      	ldrh	r3, [r7, #10]
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	6979      	ldr	r1, [r7, #20]
 800bf2e:	f7ff fe7d 	bl	800bc2c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bf32:	687b      	ldr	r3, [r7, #4]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3718      	adds	r7, #24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d106      	bne.n	800bf5c <pbuf_realloc+0x20>
 800bf4e:	4b3a      	ldr	r3, [pc, #232]	; (800c038 <pbuf_realloc+0xfc>)
 800bf50:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bf54:	4939      	ldr	r1, [pc, #228]	; (800c03c <pbuf_realloc+0x100>)
 800bf56:	483a      	ldr	r0, [pc, #232]	; (800c040 <pbuf_realloc+0x104>)
 800bf58:	f009 fa84 	bl	8015464 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	891b      	ldrh	r3, [r3, #8]
 800bf60:	887a      	ldrh	r2, [r7, #2]
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d263      	bcs.n	800c02e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	891a      	ldrh	r2, [r3, #8]
 800bf6a:	887b      	ldrh	r3, [r7, #2]
 800bf6c:	1ad3      	subs	r3, r2, r3
 800bf6e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bf70:	887b      	ldrh	r3, [r7, #2]
 800bf72:	817b      	strh	r3, [r7, #10]
  q = p;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bf78:	e018      	b.n	800bfac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	895b      	ldrh	r3, [r3, #10]
 800bf7e:	897a      	ldrh	r2, [r7, #10]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	891a      	ldrh	r2, [r3, #8]
 800bf88:	893b      	ldrh	r3, [r7, #8]
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	b29a      	uxth	r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d106      	bne.n	800bfac <pbuf_realloc+0x70>
 800bf9e:	4b26      	ldr	r3, [pc, #152]	; (800c038 <pbuf_realloc+0xfc>)
 800bfa0:	f240 12af 	movw	r2, #431	; 0x1af
 800bfa4:	4927      	ldr	r1, [pc, #156]	; (800c044 <pbuf_realloc+0x108>)
 800bfa6:	4826      	ldr	r0, [pc, #152]	; (800c040 <pbuf_realloc+0x104>)
 800bfa8:	f009 fa5c 	bl	8015464 <iprintf>
  while (rem_len > q->len) {
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	895b      	ldrh	r3, [r3, #10]
 800bfb0:	897a      	ldrh	r2, [r7, #10]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d8e1      	bhi.n	800bf7a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	7b1b      	ldrb	r3, [r3, #12]
 800bfba:	f003 030f 	and.w	r3, r3, #15
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d121      	bne.n	800c006 <pbuf_realloc+0xca>
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	895b      	ldrh	r3, [r3, #10]
 800bfc6:	897a      	ldrh	r2, [r7, #10]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d01c      	beq.n	800c006 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	7b5b      	ldrb	r3, [r3, #13]
 800bfd0:	f003 0302 	and.w	r3, r3, #2
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d116      	bne.n	800c006 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	897b      	ldrh	r3, [r7, #10]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	4619      	mov	r1, r3
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7ff f864 	bl	800b0b8 <mem_trim>
 800bff0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d106      	bne.n	800c006 <pbuf_realloc+0xca>
 800bff8:	4b0f      	ldr	r3, [pc, #60]	; (800c038 <pbuf_realloc+0xfc>)
 800bffa:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bffe:	4912      	ldr	r1, [pc, #72]	; (800c048 <pbuf_realloc+0x10c>)
 800c000:	480f      	ldr	r0, [pc, #60]	; (800c040 <pbuf_realloc+0x104>)
 800c002:	f009 fa2f 	bl	8015464 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	897a      	ldrh	r2, [r7, #10]
 800c00a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	895a      	ldrh	r2, [r3, #10]
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d004      	beq.n	800c026 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4618      	mov	r0, r3
 800c022:	f000 f911 	bl	800c248 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]
 800c02c:	e000      	b.n	800c030 <pbuf_realloc+0xf4>
    return;
 800c02e:	bf00      	nop

}
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	0801815c 	.word	0x0801815c
 800c03c:	08018274 	.word	0x08018274
 800c040:	080181bc 	.word	0x080181bc
 800c044:	0801828c 	.word	0x0801828c
 800c048:	080182a4 	.word	0x080182a4

0800c04c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	4613      	mov	r3, r2
 800c058:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d106      	bne.n	800c06e <pbuf_add_header_impl+0x22>
 800c060:	4b2b      	ldr	r3, [pc, #172]	; (800c110 <pbuf_add_header_impl+0xc4>)
 800c062:	f240 12df 	movw	r2, #479	; 0x1df
 800c066:	492b      	ldr	r1, [pc, #172]	; (800c114 <pbuf_add_header_impl+0xc8>)
 800c068:	482b      	ldr	r0, [pc, #172]	; (800c118 <pbuf_add_header_impl+0xcc>)
 800c06a:	f009 f9fb 	bl	8015464 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d003      	beq.n	800c07c <pbuf_add_header_impl+0x30>
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c07a:	d301      	bcc.n	800c080 <pbuf_add_header_impl+0x34>
    return 1;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e043      	b.n	800c108 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <pbuf_add_header_impl+0x3e>
    return 0;
 800c086:	2300      	movs	r3, #0
 800c088:	e03e      	b.n	800c108 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	891a      	ldrh	r2, [r3, #8]
 800c092:	8a7b      	ldrh	r3, [r7, #18]
 800c094:	4413      	add	r3, r2
 800c096:	b29b      	uxth	r3, r3
 800c098:	8a7a      	ldrh	r2, [r7, #18]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d901      	bls.n	800c0a2 <pbuf_add_header_impl+0x56>
    return 1;
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e032      	b.n	800c108 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	7b1b      	ldrb	r3, [r3, #12]
 800c0a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c0a8:	8a3b      	ldrh	r3, [r7, #16]
 800c0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00c      	beq.n	800c0cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	425b      	negs	r3, r3
 800c0ba:	4413      	add	r3, r2
 800c0bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3310      	adds	r3, #16
 800c0c2:	697a      	ldr	r2, [r7, #20]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d20d      	bcs.n	800c0e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e01d      	b.n	800c108 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c0cc:	79fb      	ldrb	r3, [r7, #7]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d006      	beq.n	800c0e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	425b      	negs	r3, r3
 800c0da:	4413      	add	r3, r2
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	e001      	b.n	800c0e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e011      	b.n	800c108 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	895a      	ldrh	r2, [r3, #10]
 800c0ee:	8a7b      	ldrh	r3, [r7, #18]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	891a      	ldrh	r2, [r3, #8]
 800c0fc:	8a7b      	ldrh	r3, [r7, #18]
 800c0fe:	4413      	add	r3, r2
 800c100:	b29a      	uxth	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	811a      	strh	r2, [r3, #8]


  return 0;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	0801815c 	.word	0x0801815c
 800c114:	080182c0 	.word	0x080182c0
 800c118:	080181bc 	.word	0x080181bc

0800c11c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c126:	2200      	movs	r2, #0
 800c128:	6839      	ldr	r1, [r7, #0]
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff ff8e 	bl	800c04c <pbuf_add_header_impl>
 800c130:	4603      	mov	r3, r0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
	...

0800c13c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d106      	bne.n	800c15a <pbuf_remove_header+0x1e>
 800c14c:	4b20      	ldr	r3, [pc, #128]	; (800c1d0 <pbuf_remove_header+0x94>)
 800c14e:	f240 224b 	movw	r2, #587	; 0x24b
 800c152:	4920      	ldr	r1, [pc, #128]	; (800c1d4 <pbuf_remove_header+0x98>)
 800c154:	4820      	ldr	r0, [pc, #128]	; (800c1d8 <pbuf_remove_header+0x9c>)
 800c156:	f009 f985 	bl	8015464 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d003      	beq.n	800c168 <pbuf_remove_header+0x2c>
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c166:	d301      	bcc.n	800c16c <pbuf_remove_header+0x30>
    return 1;
 800c168:	2301      	movs	r3, #1
 800c16a:	e02c      	b.n	800c1c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <pbuf_remove_header+0x3a>
    return 0;
 800c172:	2300      	movs	r3, #0
 800c174:	e027      	b.n	800c1c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	895b      	ldrh	r3, [r3, #10]
 800c17e:	89fa      	ldrh	r2, [r7, #14]
 800c180:	429a      	cmp	r2, r3
 800c182:	d908      	bls.n	800c196 <pbuf_remove_header+0x5a>
 800c184:	4b12      	ldr	r3, [pc, #72]	; (800c1d0 <pbuf_remove_header+0x94>)
 800c186:	f240 2255 	movw	r2, #597	; 0x255
 800c18a:	4914      	ldr	r1, [pc, #80]	; (800c1dc <pbuf_remove_header+0xa0>)
 800c18c:	4812      	ldr	r0, [pc, #72]	; (800c1d8 <pbuf_remove_header+0x9c>)
 800c18e:	f009 f969 	bl	8015464 <iprintf>
 800c192:	2301      	movs	r3, #1
 800c194:	e017      	b.n	800c1c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	685a      	ldr	r2, [r3, #4]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	441a      	add	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	895a      	ldrh	r2, [r3, #10]
 800c1ac:	89fb      	ldrh	r3, [r7, #14]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	b29a      	uxth	r2, r3
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	891a      	ldrh	r2, [r3, #8]
 800c1ba:	89fb      	ldrh	r3, [r7, #14]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	b29a      	uxth	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	0801815c 	.word	0x0801815c
 800c1d4:	080182c0 	.word	0x080182c0
 800c1d8:	080181bc 	.word	0x080181bc
 800c1dc:	080182cc 	.word	0x080182cc

0800c1e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	807b      	strh	r3, [r7, #2]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c1f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	da08      	bge.n	800c20a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c1f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1fc:	425b      	negs	r3, r3
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f7ff ff9b 	bl	800c13c <pbuf_remove_header>
 800c206:	4603      	mov	r3, r0
 800c208:	e007      	b.n	800c21a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c20a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c20e:	787a      	ldrb	r2, [r7, #1]
 800c210:	4619      	mov	r1, r3
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f7ff ff1a 	bl	800c04c <pbuf_add_header_impl>
 800c218:	4603      	mov	r3, r0
  }
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b082      	sub	sp, #8
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	460b      	mov	r3, r1
 800c22c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c22e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c232:	2201      	movs	r2, #1
 800c234:	4619      	mov	r1, r3
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7ff ffd2 	bl	800c1e0 <pbuf_header_impl>
 800c23c:	4603      	mov	r3, r0
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3708      	adds	r7, #8
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
	...

0800c248 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d10b      	bne.n	800c26e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d106      	bne.n	800c26a <pbuf_free+0x22>
 800c25c:	4b38      	ldr	r3, [pc, #224]	; (800c340 <pbuf_free+0xf8>)
 800c25e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c262:	4938      	ldr	r1, [pc, #224]	; (800c344 <pbuf_free+0xfc>)
 800c264:	4838      	ldr	r0, [pc, #224]	; (800c348 <pbuf_free+0x100>)
 800c266:	f009 f8fd 	bl	8015464 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	e063      	b.n	800c336 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c26e:	2300      	movs	r3, #0
 800c270:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c272:	e05c      	b.n	800c32e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	7b9b      	ldrb	r3, [r3, #14]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d106      	bne.n	800c28a <pbuf_free+0x42>
 800c27c:	4b30      	ldr	r3, [pc, #192]	; (800c340 <pbuf_free+0xf8>)
 800c27e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c282:	4932      	ldr	r1, [pc, #200]	; (800c34c <pbuf_free+0x104>)
 800c284:	4830      	ldr	r0, [pc, #192]	; (800c348 <pbuf_free+0x100>)
 800c286:	f009 f8ed 	bl	8015464 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	7b9b      	ldrb	r3, [r3, #14]
 800c28e:	3b01      	subs	r3, #1
 800c290:	b2da      	uxtb	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	739a      	strb	r2, [r3, #14]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	7b9b      	ldrb	r3, [r3, #14]
 800c29a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c29c:	7dbb      	ldrb	r3, [r7, #22]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d143      	bne.n	800c32a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	7b1b      	ldrb	r3, [r3, #12]
 800c2ac:	f003 030f 	and.w	r3, r3, #15
 800c2b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	7b5b      	ldrb	r3, [r3, #13]
 800c2b6:	f003 0302 	and.w	r3, r3, #2
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d011      	beq.n	800c2e2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d106      	bne.n	800c2d8 <pbuf_free+0x90>
 800c2ca:	4b1d      	ldr	r3, [pc, #116]	; (800c340 <pbuf_free+0xf8>)
 800c2cc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c2d0:	491f      	ldr	r1, [pc, #124]	; (800c350 <pbuf_free+0x108>)
 800c2d2:	481d      	ldr	r0, [pc, #116]	; (800c348 <pbuf_free+0x100>)
 800c2d4:	f009 f8c6 	bl	8015464 <iprintf>
        pc->custom_free_function(p);
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	4798      	blx	r3
 800c2e0:	e01d      	b.n	800c31e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d104      	bne.n	800c2f2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	2008      	movs	r0, #8
 800c2ec:	f7ff f99a 	bl	800b624 <memp_free>
 800c2f0:	e015      	b.n	800c31e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d104      	bne.n	800c302 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c2f8:	6879      	ldr	r1, [r7, #4]
 800c2fa:	2007      	movs	r0, #7
 800c2fc:	f7ff f992 	bl	800b624 <memp_free>
 800c300:	e00d      	b.n	800c31e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c302:	7bfb      	ldrb	r3, [r7, #15]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d103      	bne.n	800c310 <pbuf_free+0xc8>
          mem_free(p);
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7fe fe6b 	bl	800afe4 <mem_free>
 800c30e:	e006      	b.n	800c31e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c310:	4b0b      	ldr	r3, [pc, #44]	; (800c340 <pbuf_free+0xf8>)
 800c312:	f240 320f 	movw	r2, #783	; 0x30f
 800c316:	490f      	ldr	r1, [pc, #60]	; (800c354 <pbuf_free+0x10c>)
 800c318:	480b      	ldr	r0, [pc, #44]	; (800c348 <pbuf_free+0x100>)
 800c31a:	f009 f8a3 	bl	8015464 <iprintf>
        }
      }
      count++;
 800c31e:	7dfb      	ldrb	r3, [r7, #23]
 800c320:	3301      	adds	r3, #1
 800c322:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	607b      	str	r3, [r7, #4]
 800c328:	e001      	b.n	800c32e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c32a:	2300      	movs	r3, #0
 800c32c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d19f      	bne.n	800c274 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c334:	7dfb      	ldrb	r3, [r7, #23]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3718      	adds	r7, #24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
 800c33e:	bf00      	nop
 800c340:	0801815c 	.word	0x0801815c
 800c344:	080182c0 	.word	0x080182c0
 800c348:	080181bc 	.word	0x080181bc
 800c34c:	080182ec 	.word	0x080182ec
 800c350:	08018304 	.word	0x08018304
 800c354:	08018328 	.word	0x08018328

0800c358 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c364:	e005      	b.n	800c372 <pbuf_clen+0x1a>
    ++len;
 800c366:	89fb      	ldrh	r3, [r7, #14]
 800c368:	3301      	adds	r3, #1
 800c36a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d1f6      	bne.n	800c366 <pbuf_clen+0xe>
  }
  return len;
 800c378:	89fb      	ldrh	r3, [r7, #14]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
	...

0800c388 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b082      	sub	sp, #8
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d010      	beq.n	800c3b8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	7b9b      	ldrb	r3, [r3, #14]
 800c39a:	3301      	adds	r3, #1
 800c39c:	b2da      	uxtb	r2, r3
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	7b9b      	ldrb	r3, [r3, #14]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d106      	bne.n	800c3b8 <pbuf_ref+0x30>
 800c3aa:	4b05      	ldr	r3, [pc, #20]	; (800c3c0 <pbuf_ref+0x38>)
 800c3ac:	f240 3242 	movw	r2, #834	; 0x342
 800c3b0:	4904      	ldr	r1, [pc, #16]	; (800c3c4 <pbuf_ref+0x3c>)
 800c3b2:	4805      	ldr	r0, [pc, #20]	; (800c3c8 <pbuf_ref+0x40>)
 800c3b4:	f009 f856 	bl	8015464 <iprintf>
  }
}
 800c3b8:	bf00      	nop
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	0801815c 	.word	0x0801815c
 800c3c4:	0801833c 	.word	0x0801833c
 800c3c8:	080181bc 	.word	0x080181bc

0800c3cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b084      	sub	sp, #16
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d002      	beq.n	800c3e2 <pbuf_cat+0x16>
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d107      	bne.n	800c3f2 <pbuf_cat+0x26>
 800c3e2:	4b20      	ldr	r3, [pc, #128]	; (800c464 <pbuf_cat+0x98>)
 800c3e4:	f240 3259 	movw	r2, #857	; 0x359
 800c3e8:	491f      	ldr	r1, [pc, #124]	; (800c468 <pbuf_cat+0x9c>)
 800c3ea:	4820      	ldr	r0, [pc, #128]	; (800c46c <pbuf_cat+0xa0>)
 800c3ec:	f009 f83a 	bl	8015464 <iprintf>
 800c3f0:	e034      	b.n	800c45c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	60fb      	str	r3, [r7, #12]
 800c3f6:	e00a      	b.n	800c40e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	891a      	ldrh	r2, [r3, #8]
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	891b      	ldrh	r3, [r3, #8]
 800c400:	4413      	add	r3, r2
 800c402:	b29a      	uxth	r2, r3
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	60fb      	str	r3, [r7, #12]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1f0      	bne.n	800c3f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	891a      	ldrh	r2, [r3, #8]
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	895b      	ldrh	r3, [r3, #10]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d006      	beq.n	800c430 <pbuf_cat+0x64>
 800c422:	4b10      	ldr	r3, [pc, #64]	; (800c464 <pbuf_cat+0x98>)
 800c424:	f240 3262 	movw	r2, #866	; 0x362
 800c428:	4911      	ldr	r1, [pc, #68]	; (800c470 <pbuf_cat+0xa4>)
 800c42a:	4810      	ldr	r0, [pc, #64]	; (800c46c <pbuf_cat+0xa0>)
 800c42c:	f009 f81a 	bl	8015464 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d006      	beq.n	800c446 <pbuf_cat+0x7a>
 800c438:	4b0a      	ldr	r3, [pc, #40]	; (800c464 <pbuf_cat+0x98>)
 800c43a:	f240 3263 	movw	r2, #867	; 0x363
 800c43e:	490d      	ldr	r1, [pc, #52]	; (800c474 <pbuf_cat+0xa8>)
 800c440:	480a      	ldr	r0, [pc, #40]	; (800c46c <pbuf_cat+0xa0>)
 800c442:	f009 f80f 	bl	8015464 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	891a      	ldrh	r2, [r3, #8]
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	891b      	ldrh	r3, [r3, #8]
 800c44e:	4413      	add	r3, r2
 800c450:	b29a      	uxth	r2, r3
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	683a      	ldr	r2, [r7, #0]
 800c45a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c45c:	3710      	adds	r7, #16
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	0801815c 	.word	0x0801815c
 800c468:	08018350 	.word	0x08018350
 800c46c:	080181bc 	.word	0x080181bc
 800c470:	08018388 	.word	0x08018388
 800c474:	080183b8 	.word	0x080183b8

0800c478 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c482:	2300      	movs	r3, #0
 800c484:	617b      	str	r3, [r7, #20]
 800c486:	2300      	movs	r3, #0
 800c488:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d008      	beq.n	800c4a2 <pbuf_copy+0x2a>
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d005      	beq.n	800c4a2 <pbuf_copy+0x2a>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	891a      	ldrh	r2, [r3, #8]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	891b      	ldrh	r3, [r3, #8]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d209      	bcs.n	800c4b6 <pbuf_copy+0x3e>
 800c4a2:	4b57      	ldr	r3, [pc, #348]	; (800c600 <pbuf_copy+0x188>)
 800c4a4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c4a8:	4956      	ldr	r1, [pc, #344]	; (800c604 <pbuf_copy+0x18c>)
 800c4aa:	4857      	ldr	r0, [pc, #348]	; (800c608 <pbuf_copy+0x190>)
 800c4ac:	f008 ffda 	bl	8015464 <iprintf>
 800c4b0:	f06f 030f 	mvn.w	r3, #15
 800c4b4:	e09f      	b.n	800c5f6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	895b      	ldrh	r3, [r3, #10]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	1ad2      	subs	r2, r2, r3
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	895b      	ldrh	r3, [r3, #10]
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	1acb      	subs	r3, r1, r3
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d306      	bcc.n	800c4dc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	895b      	ldrh	r3, [r3, #10]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	60fb      	str	r3, [r7, #12]
 800c4da:	e005      	b.n	800c4e8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	895b      	ldrh	r3, [r3, #10]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	1ad3      	subs	r3, r2, r3
 800c4e6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	685a      	ldr	r2, [r3, #4]
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	18d0      	adds	r0, r2, r3
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	685a      	ldr	r2, [r3, #4]
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	f008 ff82 	bl	8015404 <memcpy>
    offset_to += len;
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	4413      	add	r3, r2
 800c506:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	4413      	add	r3, r2
 800c50e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	895b      	ldrh	r3, [r3, #10]
 800c514:	461a      	mov	r2, r3
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	4293      	cmp	r3, r2
 800c51a:	d906      	bls.n	800c52a <pbuf_copy+0xb2>
 800c51c:	4b38      	ldr	r3, [pc, #224]	; (800c600 <pbuf_copy+0x188>)
 800c51e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c522:	493a      	ldr	r1, [pc, #232]	; (800c60c <pbuf_copy+0x194>)
 800c524:	4838      	ldr	r0, [pc, #224]	; (800c608 <pbuf_copy+0x190>)
 800c526:	f008 ff9d 	bl	8015464 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	895b      	ldrh	r3, [r3, #10]
 800c52e:	461a      	mov	r2, r3
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	4293      	cmp	r3, r2
 800c534:	d906      	bls.n	800c544 <pbuf_copy+0xcc>
 800c536:	4b32      	ldr	r3, [pc, #200]	; (800c600 <pbuf_copy+0x188>)
 800c538:	f240 32da 	movw	r2, #986	; 0x3da
 800c53c:	4934      	ldr	r1, [pc, #208]	; (800c610 <pbuf_copy+0x198>)
 800c53e:	4832      	ldr	r0, [pc, #200]	; (800c608 <pbuf_copy+0x190>)
 800c540:	f008 ff90 	bl	8015464 <iprintf>
    if (offset_from >= p_from->len) {
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	895b      	ldrh	r3, [r3, #10]
 800c548:	461a      	mov	r2, r3
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d304      	bcc.n	800c55a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c550:	2300      	movs	r3, #0
 800c552:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	895b      	ldrh	r3, [r3, #10]
 800c55e:	461a      	mov	r2, r3
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	4293      	cmp	r3, r2
 800c564:	d114      	bne.n	800c590 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c566:	2300      	movs	r3, #0
 800c568:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10c      	bne.n	800c590 <pbuf_copy+0x118>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d009      	beq.n	800c590 <pbuf_copy+0x118>
 800c57c:	4b20      	ldr	r3, [pc, #128]	; (800c600 <pbuf_copy+0x188>)
 800c57e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c582:	4924      	ldr	r1, [pc, #144]	; (800c614 <pbuf_copy+0x19c>)
 800c584:	4820      	ldr	r0, [pc, #128]	; (800c608 <pbuf_copy+0x190>)
 800c586:	f008 ff6d 	bl	8015464 <iprintf>
 800c58a:	f06f 030f 	mvn.w	r3, #15
 800c58e:	e032      	b.n	800c5f6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d013      	beq.n	800c5be <pbuf_copy+0x146>
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	895a      	ldrh	r2, [r3, #10]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	891b      	ldrh	r3, [r3, #8]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d10d      	bne.n	800c5be <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d009      	beq.n	800c5be <pbuf_copy+0x146>
 800c5aa:	4b15      	ldr	r3, [pc, #84]	; (800c600 <pbuf_copy+0x188>)
 800c5ac:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c5b0:	4919      	ldr	r1, [pc, #100]	; (800c618 <pbuf_copy+0x1a0>)
 800c5b2:	4815      	ldr	r0, [pc, #84]	; (800c608 <pbuf_copy+0x190>)
 800c5b4:	f008 ff56 	bl	8015464 <iprintf>
 800c5b8:	f06f 0305 	mvn.w	r3, #5
 800c5bc:	e01b      	b.n	800c5f6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d013      	beq.n	800c5ec <pbuf_copy+0x174>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	895a      	ldrh	r2, [r3, #10]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	891b      	ldrh	r3, [r3, #8]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d10d      	bne.n	800c5ec <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d009      	beq.n	800c5ec <pbuf_copy+0x174>
 800c5d8:	4b09      	ldr	r3, [pc, #36]	; (800c600 <pbuf_copy+0x188>)
 800c5da:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c5de:	490e      	ldr	r1, [pc, #56]	; (800c618 <pbuf_copy+0x1a0>)
 800c5e0:	4809      	ldr	r0, [pc, #36]	; (800c608 <pbuf_copy+0x190>)
 800c5e2:	f008 ff3f 	bl	8015464 <iprintf>
 800c5e6:	f06f 0305 	mvn.w	r3, #5
 800c5ea:	e004      	b.n	800c5f6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	f47f af61 	bne.w	800c4b6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	0801815c 	.word	0x0801815c
 800c604:	08018404 	.word	0x08018404
 800c608:	080181bc 	.word	0x080181bc
 800c60c:	08018434 	.word	0x08018434
 800c610:	0801844c 	.word	0x0801844c
 800c614:	08018468 	.word	0x08018468
 800c618:	08018478 	.word	0x08018478

0800c61c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	4611      	mov	r1, r2
 800c628:	461a      	mov	r2, r3
 800c62a:	460b      	mov	r3, r1
 800c62c:	80fb      	strh	r3, [r7, #6]
 800c62e:	4613      	mov	r3, r2
 800c630:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c636:	2300      	movs	r3, #0
 800c638:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d108      	bne.n	800c652 <pbuf_copy_partial+0x36>
 800c640:	4b2b      	ldr	r3, [pc, #172]	; (800c6f0 <pbuf_copy_partial+0xd4>)
 800c642:	f240 420a 	movw	r2, #1034	; 0x40a
 800c646:	492b      	ldr	r1, [pc, #172]	; (800c6f4 <pbuf_copy_partial+0xd8>)
 800c648:	482b      	ldr	r0, [pc, #172]	; (800c6f8 <pbuf_copy_partial+0xdc>)
 800c64a:	f008 ff0b 	bl	8015464 <iprintf>
 800c64e:	2300      	movs	r3, #0
 800c650:	e04a      	b.n	800c6e8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d108      	bne.n	800c66a <pbuf_copy_partial+0x4e>
 800c658:	4b25      	ldr	r3, [pc, #148]	; (800c6f0 <pbuf_copy_partial+0xd4>)
 800c65a:	f240 420b 	movw	r2, #1035	; 0x40b
 800c65e:	4927      	ldr	r1, [pc, #156]	; (800c6fc <pbuf_copy_partial+0xe0>)
 800c660:	4825      	ldr	r0, [pc, #148]	; (800c6f8 <pbuf_copy_partial+0xdc>)
 800c662:	f008 feff 	bl	8015464 <iprintf>
 800c666:	2300      	movs	r3, #0
 800c668:	e03e      	b.n	800c6e8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	61fb      	str	r3, [r7, #28]
 800c66e:	e034      	b.n	800c6da <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c670:	88bb      	ldrh	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00a      	beq.n	800c68c <pbuf_copy_partial+0x70>
 800c676:	69fb      	ldr	r3, [r7, #28]
 800c678:	895b      	ldrh	r3, [r3, #10]
 800c67a:	88ba      	ldrh	r2, [r7, #4]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d305      	bcc.n	800c68c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	895b      	ldrh	r3, [r3, #10]
 800c684:	88ba      	ldrh	r2, [r7, #4]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	80bb      	strh	r3, [r7, #4]
 800c68a:	e023      	b.n	800c6d4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	895a      	ldrh	r2, [r3, #10]
 800c690:	88bb      	ldrh	r3, [r7, #4]
 800c692:	1ad3      	subs	r3, r2, r3
 800c694:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c696:	8b3a      	ldrh	r2, [r7, #24]
 800c698:	88fb      	ldrh	r3, [r7, #6]
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d901      	bls.n	800c6a2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c69e:	88fb      	ldrh	r3, [r7, #6]
 800c6a0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c6a2:	8b7b      	ldrh	r3, [r7, #26]
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	18d0      	adds	r0, r2, r3
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	88bb      	ldrh	r3, [r7, #4]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	8b3a      	ldrh	r2, [r7, #24]
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	f008 fea6 	bl	8015404 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c6b8:	8afa      	ldrh	r2, [r7, #22]
 800c6ba:	8b3b      	ldrh	r3, [r7, #24]
 800c6bc:	4413      	add	r3, r2
 800c6be:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c6c0:	8b7a      	ldrh	r2, [r7, #26]
 800c6c2:	8b3b      	ldrh	r3, [r7, #24]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c6c8:	88fa      	ldrh	r2, [r7, #6]
 800c6ca:	8b3b      	ldrh	r3, [r7, #24]
 800c6cc:	1ad3      	subs	r3, r2, r3
 800c6ce:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	61fb      	str	r3, [r7, #28]
 800c6da:	88fb      	ldrh	r3, [r7, #6]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <pbuf_copy_partial+0xca>
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1c4      	bne.n	800c670 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c6e6:	8afb      	ldrh	r3, [r7, #22]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3720      	adds	r7, #32
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	0801815c 	.word	0x0801815c
 800c6f4:	080184a4 	.word	0x080184a4
 800c6f8:	080181bc 	.word	0x080181bc
 800c6fc:	080184c4 	.word	0x080184c4

0800c700 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	4603      	mov	r3, r0
 800c708:	603a      	str	r2, [r7, #0]
 800c70a:	71fb      	strb	r3, [r7, #7]
 800c70c:	460b      	mov	r3, r1
 800c70e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	8919      	ldrh	r1, [r3, #8]
 800c714:	88ba      	ldrh	r2, [r7, #4]
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff fab1 	bl	800bc80 <pbuf_alloc>
 800c71e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <pbuf_clone+0x2a>
    return NULL;
 800c726:	2300      	movs	r3, #0
 800c728:	e011      	b.n	800c74e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f7ff fea3 	bl	800c478 <pbuf_copy>
 800c732:	4603      	mov	r3, r0
 800c734:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c736:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d006      	beq.n	800c74c <pbuf_clone+0x4c>
 800c73e:	4b06      	ldr	r3, [pc, #24]	; (800c758 <pbuf_clone+0x58>)
 800c740:	f240 5224 	movw	r2, #1316	; 0x524
 800c744:	4905      	ldr	r1, [pc, #20]	; (800c75c <pbuf_clone+0x5c>)
 800c746:	4806      	ldr	r0, [pc, #24]	; (800c760 <pbuf_clone+0x60>)
 800c748:	f008 fe8c 	bl	8015464 <iprintf>
  return q;
 800c74c:	68fb      	ldr	r3, [r7, #12]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	0801815c 	.word	0x0801815c
 800c75c:	080185d0 	.word	0x080185d0
 800c760:	080181bc 	.word	0x080181bc

0800c764 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c768:	f008 ff0a 	bl	8015580 <rand>
 800c76c:	4603      	mov	r3, r0
 800c76e:	b29b      	uxth	r3, r3
 800c770:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c774:	b29b      	uxth	r3, r3
 800c776:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	4b01      	ldr	r3, [pc, #4]	; (800c784 <tcp_init+0x20>)
 800c77e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c780:	bf00      	nop
 800c782:	bd80      	pop	{r7, pc}
 800c784:	200004b2 	.word	0x200004b2

0800c788 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	7d1b      	ldrb	r3, [r3, #20]
 800c794:	2b01      	cmp	r3, #1
 800c796:	d105      	bne.n	800c7a4 <tcp_free+0x1c>
 800c798:	4b06      	ldr	r3, [pc, #24]	; (800c7b4 <tcp_free+0x2c>)
 800c79a:	22d4      	movs	r2, #212	; 0xd4
 800c79c:	4906      	ldr	r1, [pc, #24]	; (800c7b8 <tcp_free+0x30>)
 800c79e:	4807      	ldr	r0, [pc, #28]	; (800c7bc <tcp_free+0x34>)
 800c7a0:	f008 fe60 	bl	8015464 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c7a4:	6879      	ldr	r1, [r7, #4]
 800c7a6:	2001      	movs	r0, #1
 800c7a8:	f7fe ff3c 	bl	800b624 <memp_free>
}
 800c7ac:	bf00      	nop
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	0801865c 	.word	0x0801865c
 800c7b8:	0801868c 	.word	0x0801868c
 800c7bc:	080186a0 	.word	0x080186a0

0800c7c0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	7d1b      	ldrb	r3, [r3, #20]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d105      	bne.n	800c7dc <tcp_free_listen+0x1c>
 800c7d0:	4b06      	ldr	r3, [pc, #24]	; (800c7ec <tcp_free_listen+0x2c>)
 800c7d2:	22df      	movs	r2, #223	; 0xdf
 800c7d4:	4906      	ldr	r1, [pc, #24]	; (800c7f0 <tcp_free_listen+0x30>)
 800c7d6:	4807      	ldr	r0, [pc, #28]	; (800c7f4 <tcp_free_listen+0x34>)
 800c7d8:	f008 fe44 	bl	8015464 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	2002      	movs	r0, #2
 800c7e0:	f7fe ff20 	bl	800b624 <memp_free>
}
 800c7e4:	bf00      	nop
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	0801865c 	.word	0x0801865c
 800c7f0:	080186c8 	.word	0x080186c8
 800c7f4:	080186a0 	.word	0x080186a0

0800c7f8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c7fc:	f001 f85c 	bl	800d8b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c800:	4b07      	ldr	r3, [pc, #28]	; (800c820 <tcp_tmr+0x28>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	b2da      	uxtb	r2, r3
 800c808:	4b05      	ldr	r3, [pc, #20]	; (800c820 <tcp_tmr+0x28>)
 800c80a:	701a      	strb	r2, [r3, #0]
 800c80c:	4b04      	ldr	r3, [pc, #16]	; (800c820 <tcp_tmr+0x28>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	f003 0301 	and.w	r3, r3, #1
 800c814:	2b00      	cmp	r3, #0
 800c816:	d001      	beq.n	800c81c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c818:	f000 fd0e 	bl	800d238 <tcp_slowtmr>
  }
}
 800c81c:	bf00      	nop
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	20000a15 	.word	0x20000a15

0800c824 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b084      	sub	sp, #16
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d105      	bne.n	800c840 <tcp_remove_listener+0x1c>
 800c834:	4b0d      	ldr	r3, [pc, #52]	; (800c86c <tcp_remove_listener+0x48>)
 800c836:	22ff      	movs	r2, #255	; 0xff
 800c838:	490d      	ldr	r1, [pc, #52]	; (800c870 <tcp_remove_listener+0x4c>)
 800c83a:	480e      	ldr	r0, [pc, #56]	; (800c874 <tcp_remove_listener+0x50>)
 800c83c:	f008 fe12 	bl	8015464 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	60fb      	str	r3, [r7, #12]
 800c844:	e00a      	b.n	800c85c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d102      	bne.n	800c856 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1f1      	bne.n	800c846 <tcp_remove_listener+0x22>
    }
  }
}
 800c862:	bf00      	nop
 800c864:	bf00      	nop
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}
 800c86c:	0801865c 	.word	0x0801865c
 800c870:	080186e4 	.word	0x080186e4
 800c874:	080186a0 	.word	0x080186a0

0800c878 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d106      	bne.n	800c894 <tcp_listen_closed+0x1c>
 800c886:	4b14      	ldr	r3, [pc, #80]	; (800c8d8 <tcp_listen_closed+0x60>)
 800c888:	f240 1211 	movw	r2, #273	; 0x111
 800c88c:	4913      	ldr	r1, [pc, #76]	; (800c8dc <tcp_listen_closed+0x64>)
 800c88e:	4814      	ldr	r0, [pc, #80]	; (800c8e0 <tcp_listen_closed+0x68>)
 800c890:	f008 fde8 	bl	8015464 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	7d1b      	ldrb	r3, [r3, #20]
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d006      	beq.n	800c8aa <tcp_listen_closed+0x32>
 800c89c:	4b0e      	ldr	r3, [pc, #56]	; (800c8d8 <tcp_listen_closed+0x60>)
 800c89e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c8a2:	4910      	ldr	r1, [pc, #64]	; (800c8e4 <tcp_listen_closed+0x6c>)
 800c8a4:	480e      	ldr	r0, [pc, #56]	; (800c8e0 <tcp_listen_closed+0x68>)
 800c8a6:	f008 fddd 	bl	8015464 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	60fb      	str	r3, [r7, #12]
 800c8ae:	e00b      	b.n	800c8c8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c8b0:	4a0d      	ldr	r2, [pc, #52]	; (800c8e8 <tcp_listen_closed+0x70>)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	6879      	ldr	r1, [r7, #4]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7ff ffb1 	bl	800c824 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	60fb      	str	r3, [r7, #12]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2b03      	cmp	r3, #3
 800c8cc:	d9f0      	bls.n	800c8b0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c8ce:	bf00      	nop
 800c8d0:	bf00      	nop
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	0801865c 	.word	0x0801865c
 800c8dc:	0801870c 	.word	0x0801870c
 800c8e0:	080186a0 	.word	0x080186a0
 800c8e4:	08018718 	.word	0x08018718
 800c8e8:	08021608 	.word	0x08021608

0800c8ec <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c8ec:	b5b0      	push	{r4, r5, r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af04      	add	r7, sp, #16
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d106      	bne.n	800c90c <tcp_close_shutdown+0x20>
 800c8fe:	4b63      	ldr	r3, [pc, #396]	; (800ca8c <tcp_close_shutdown+0x1a0>)
 800c900:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c904:	4962      	ldr	r1, [pc, #392]	; (800ca90 <tcp_close_shutdown+0x1a4>)
 800c906:	4863      	ldr	r0, [pc, #396]	; (800ca94 <tcp_close_shutdown+0x1a8>)
 800c908:	f008 fdac 	bl	8015464 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c90c:	78fb      	ldrb	r3, [r7, #3]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d066      	beq.n	800c9e0 <tcp_close_shutdown+0xf4>
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	7d1b      	ldrb	r3, [r3, #20]
 800c916:	2b04      	cmp	r3, #4
 800c918:	d003      	beq.n	800c922 <tcp_close_shutdown+0x36>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	7d1b      	ldrb	r3, [r3, #20]
 800c91e:	2b07      	cmp	r3, #7
 800c920:	d15e      	bne.n	800c9e0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c926:	2b00      	cmp	r3, #0
 800c928:	d104      	bne.n	800c934 <tcp_close_shutdown+0x48>
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c92e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c932:	d055      	beq.n	800c9e0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	8b5b      	ldrh	r3, [r3, #26]
 800c938:	f003 0310 	and.w	r3, r3, #16
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d106      	bne.n	800c94e <tcp_close_shutdown+0x62>
 800c940:	4b52      	ldr	r3, [pc, #328]	; (800ca8c <tcp_close_shutdown+0x1a0>)
 800c942:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c946:	4954      	ldr	r1, [pc, #336]	; (800ca98 <tcp_close_shutdown+0x1ac>)
 800c948:	4852      	ldr	r0, [pc, #328]	; (800ca94 <tcp_close_shutdown+0x1a8>)
 800c94a:	f008 fd8b 	bl	8015464 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c956:	687d      	ldr	r5, [r7, #4]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	3304      	adds	r3, #4
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	8ad2      	ldrh	r2, [r2, #22]
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	8b09      	ldrh	r1, [r1, #24]
 800c964:	9102      	str	r1, [sp, #8]
 800c966:	9201      	str	r2, [sp, #4]
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	462b      	mov	r3, r5
 800c96c:	4622      	mov	r2, r4
 800c96e:	4601      	mov	r1, r0
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f005 fd8b 	bl	801248c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f001 fb6c 	bl	800e054 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c97c:	4b47      	ldr	r3, [pc, #284]	; (800ca9c <tcp_close_shutdown+0x1b0>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	429a      	cmp	r2, r3
 800c984:	d105      	bne.n	800c992 <tcp_close_shutdown+0xa6>
 800c986:	4b45      	ldr	r3, [pc, #276]	; (800ca9c <tcp_close_shutdown+0x1b0>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	68db      	ldr	r3, [r3, #12]
 800c98c:	4a43      	ldr	r2, [pc, #268]	; (800ca9c <tcp_close_shutdown+0x1b0>)
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	e013      	b.n	800c9ba <tcp_close_shutdown+0xce>
 800c992:	4b42      	ldr	r3, [pc, #264]	; (800ca9c <tcp_close_shutdown+0x1b0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	60fb      	str	r3, [r7, #12]
 800c998:	e00c      	b.n	800c9b4 <tcp_close_shutdown+0xc8>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d104      	bne.n	800c9ae <tcp_close_shutdown+0xc2>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68da      	ldr	r2, [r3, #12]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	60da      	str	r2, [r3, #12]
 800c9ac:	e005      	b.n	800c9ba <tcp_close_shutdown+0xce>
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	68db      	ldr	r3, [r3, #12]
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1ef      	bne.n	800c99a <tcp_close_shutdown+0xae>
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	60da      	str	r2, [r3, #12]
 800c9c0:	4b37      	ldr	r3, [pc, #220]	; (800caa0 <tcp_close_shutdown+0x1b4>)
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c9c6:	4b37      	ldr	r3, [pc, #220]	; (800caa4 <tcp_close_shutdown+0x1b8>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d102      	bne.n	800c9d6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c9d0:	f004 f800 	bl	80109d4 <tcp_trigger_input_pcb_close>
 800c9d4:	e002      	b.n	800c9dc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff fed6 	bl	800c788 <tcp_free>
      }
      return ERR_OK;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	e050      	b.n	800ca82 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	7d1b      	ldrb	r3, [r3, #20]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d03b      	beq.n	800ca60 <tcp_close_shutdown+0x174>
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	dc44      	bgt.n	800ca76 <tcp_close_shutdown+0x18a>
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d002      	beq.n	800c9f6 <tcp_close_shutdown+0x10a>
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d02a      	beq.n	800ca4a <tcp_close_shutdown+0x15e>
 800c9f4:	e03f      	b.n	800ca76 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	8adb      	ldrh	r3, [r3, #22]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d021      	beq.n	800ca42 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c9fe:	4b2a      	ldr	r3, [pc, #168]	; (800caa8 <tcp_close_shutdown+0x1bc>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d105      	bne.n	800ca14 <tcp_close_shutdown+0x128>
 800ca08:	4b27      	ldr	r3, [pc, #156]	; (800caa8 <tcp_close_shutdown+0x1bc>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	68db      	ldr	r3, [r3, #12]
 800ca0e:	4a26      	ldr	r2, [pc, #152]	; (800caa8 <tcp_close_shutdown+0x1bc>)
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	e013      	b.n	800ca3c <tcp_close_shutdown+0x150>
 800ca14:	4b24      	ldr	r3, [pc, #144]	; (800caa8 <tcp_close_shutdown+0x1bc>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	60bb      	str	r3, [r7, #8]
 800ca1a:	e00c      	b.n	800ca36 <tcp_close_shutdown+0x14a>
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	68db      	ldr	r3, [r3, #12]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d104      	bne.n	800ca30 <tcp_close_shutdown+0x144>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68da      	ldr	r2, [r3, #12]
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	60da      	str	r2, [r3, #12]
 800ca2e:	e005      	b.n	800ca3c <tcp_close_shutdown+0x150>
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	68db      	ldr	r3, [r3, #12]
 800ca34:	60bb      	str	r3, [r7, #8]
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1ef      	bne.n	800ca1c <tcp_close_shutdown+0x130>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f7ff fea0 	bl	800c788 <tcp_free>
      break;
 800ca48:	e01a      	b.n	800ca80 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7ff ff14 	bl	800c878 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ca50:	6879      	ldr	r1, [r7, #4]
 800ca52:	4816      	ldr	r0, [pc, #88]	; (800caac <tcp_close_shutdown+0x1c0>)
 800ca54:	f001 fb4e 	bl	800e0f4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f7ff feb1 	bl	800c7c0 <tcp_free_listen>
      break;
 800ca5e:	e00f      	b.n	800ca80 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ca60:	6879      	ldr	r1, [r7, #4]
 800ca62:	480e      	ldr	r0, [pc, #56]	; (800ca9c <tcp_close_shutdown+0x1b0>)
 800ca64:	f001 fb46 	bl	800e0f4 <tcp_pcb_remove>
 800ca68:	4b0d      	ldr	r3, [pc, #52]	; (800caa0 <tcp_close_shutdown+0x1b4>)
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7ff fe8a 	bl	800c788 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ca74:	e004      	b.n	800ca80 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 f81a 	bl	800cab0 <tcp_close_shutdown_fin>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	e000      	b.n	800ca82 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bdb0      	pop	{r4, r5, r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	0801865c 	.word	0x0801865c
 800ca90:	08018730 	.word	0x08018730
 800ca94:	080186a0 	.word	0x080186a0
 800ca98:	08018750 	.word	0x08018750
 800ca9c:	2000e004 	.word	0x2000e004
 800caa0:	2000e000 	.word	0x2000e000
 800caa4:	2000e018 	.word	0x2000e018
 800caa8:	2000e010 	.word	0x2000e010
 800caac:	2000e00c 	.word	0x2000e00c

0800cab0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b084      	sub	sp, #16
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d106      	bne.n	800cacc <tcp_close_shutdown_fin+0x1c>
 800cabe:	4b2e      	ldr	r3, [pc, #184]	; (800cb78 <tcp_close_shutdown_fin+0xc8>)
 800cac0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cac4:	492d      	ldr	r1, [pc, #180]	; (800cb7c <tcp_close_shutdown_fin+0xcc>)
 800cac6:	482e      	ldr	r0, [pc, #184]	; (800cb80 <tcp_close_shutdown_fin+0xd0>)
 800cac8:	f008 fccc 	bl	8015464 <iprintf>

  switch (pcb->state) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	7d1b      	ldrb	r3, [r3, #20]
 800cad0:	2b07      	cmp	r3, #7
 800cad2:	d020      	beq.n	800cb16 <tcp_close_shutdown_fin+0x66>
 800cad4:	2b07      	cmp	r3, #7
 800cad6:	dc2b      	bgt.n	800cb30 <tcp_close_shutdown_fin+0x80>
 800cad8:	2b03      	cmp	r3, #3
 800cada:	d002      	beq.n	800cae2 <tcp_close_shutdown_fin+0x32>
 800cadc:	2b04      	cmp	r3, #4
 800cade:	d00d      	beq.n	800cafc <tcp_close_shutdown_fin+0x4c>
 800cae0:	e026      	b.n	800cb30 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f004 fde0 	bl	80116a8 <tcp_send_fin>
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800caec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d11f      	bne.n	800cb34 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2205      	movs	r2, #5
 800caf8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cafa:	e01b      	b.n	800cb34 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f004 fdd3 	bl	80116a8 <tcp_send_fin>
 800cb02:	4603      	mov	r3, r0
 800cb04:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d114      	bne.n	800cb38 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2205      	movs	r2, #5
 800cb12:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb14:	e010      	b.n	800cb38 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f004 fdc6 	bl	80116a8 <tcp_send_fin>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d109      	bne.n	800cb3c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2209      	movs	r2, #9
 800cb2c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb2e:	e005      	b.n	800cb3c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	e01c      	b.n	800cb6e <tcp_close_shutdown_fin+0xbe>
      break;
 800cb34:	bf00      	nop
 800cb36:	e002      	b.n	800cb3e <tcp_close_shutdown_fin+0x8e>
      break;
 800cb38:	bf00      	nop
 800cb3a:	e000      	b.n	800cb3e <tcp_close_shutdown_fin+0x8e>
      break;
 800cb3c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cb3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d103      	bne.n	800cb4e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f004 feec 	bl	8011924 <tcp_output>
 800cb4c:	e00d      	b.n	800cb6a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cb4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb56:	d108      	bne.n	800cb6a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	8b5b      	ldrh	r3, [r3, #26]
 800cb5c:	f043 0308 	orr.w	r3, r3, #8
 800cb60:	b29a      	uxth	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cb66:	2300      	movs	r3, #0
 800cb68:	e001      	b.n	800cb6e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cb6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	0801865c 	.word	0x0801865c
 800cb7c:	0801870c 	.word	0x0801870c
 800cb80:	080186a0 	.word	0x080186a0

0800cb84 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d109      	bne.n	800cba6 <tcp_close+0x22>
 800cb92:	4b0f      	ldr	r3, [pc, #60]	; (800cbd0 <tcp_close+0x4c>)
 800cb94:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cb98:	490e      	ldr	r1, [pc, #56]	; (800cbd4 <tcp_close+0x50>)
 800cb9a:	480f      	ldr	r0, [pc, #60]	; (800cbd8 <tcp_close+0x54>)
 800cb9c:	f008 fc62 	bl	8015464 <iprintf>
 800cba0:	f06f 030f 	mvn.w	r3, #15
 800cba4:	e00f      	b.n	800cbc6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	7d1b      	ldrb	r3, [r3, #20]
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d006      	beq.n	800cbbc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8b5b      	ldrh	r3, [r3, #26]
 800cbb2:	f043 0310 	orr.w	r3, r3, #16
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7ff fe94 	bl	800c8ec <tcp_close_shutdown>
 800cbc4:	4603      	mov	r3, r0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	0801865c 	.word	0x0801865c
 800cbd4:	0801876c 	.word	0x0801876c
 800cbd8:	080186a0 	.word	0x080186a0

0800cbdc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b08e      	sub	sp, #56	; 0x38
 800cbe0:	af04      	add	r7, sp, #16
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d107      	bne.n	800cbfc <tcp_abandon+0x20>
 800cbec:	4b52      	ldr	r3, [pc, #328]	; (800cd38 <tcp_abandon+0x15c>)
 800cbee:	f240 223d 	movw	r2, #573	; 0x23d
 800cbf2:	4952      	ldr	r1, [pc, #328]	; (800cd3c <tcp_abandon+0x160>)
 800cbf4:	4852      	ldr	r0, [pc, #328]	; (800cd40 <tcp_abandon+0x164>)
 800cbf6:	f008 fc35 	bl	8015464 <iprintf>
 800cbfa:	e099      	b.n	800cd30 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	7d1b      	ldrb	r3, [r3, #20]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d106      	bne.n	800cc12 <tcp_abandon+0x36>
 800cc04:	4b4c      	ldr	r3, [pc, #304]	; (800cd38 <tcp_abandon+0x15c>)
 800cc06:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cc0a:	494e      	ldr	r1, [pc, #312]	; (800cd44 <tcp_abandon+0x168>)
 800cc0c:	484c      	ldr	r0, [pc, #304]	; (800cd40 <tcp_abandon+0x164>)
 800cc0e:	f008 fc29 	bl	8015464 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	7d1b      	ldrb	r3, [r3, #20]
 800cc16:	2b0a      	cmp	r3, #10
 800cc18:	d107      	bne.n	800cc2a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cc1a:	6879      	ldr	r1, [r7, #4]
 800cc1c:	484a      	ldr	r0, [pc, #296]	; (800cd48 <tcp_abandon+0x16c>)
 800cc1e:	f001 fa69 	bl	800e0f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7ff fdb0 	bl	800c788 <tcp_free>
 800cc28:	e082      	b.n	800cd30 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc36:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc44:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	7d1b      	ldrb	r3, [r3, #20]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d126      	bne.n	800cca2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	8adb      	ldrh	r3, [r3, #22]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d02e      	beq.n	800ccba <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc5c:	4b3b      	ldr	r3, [pc, #236]	; (800cd4c <tcp_abandon+0x170>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	687a      	ldr	r2, [r7, #4]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d105      	bne.n	800cc72 <tcp_abandon+0x96>
 800cc66:	4b39      	ldr	r3, [pc, #228]	; (800cd4c <tcp_abandon+0x170>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	4a37      	ldr	r2, [pc, #220]	; (800cd4c <tcp_abandon+0x170>)
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	e013      	b.n	800cc9a <tcp_abandon+0xbe>
 800cc72:	4b36      	ldr	r3, [pc, #216]	; (800cd4c <tcp_abandon+0x170>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	61fb      	str	r3, [r7, #28]
 800cc78:	e00c      	b.n	800cc94 <tcp_abandon+0xb8>
 800cc7a:	69fb      	ldr	r3, [r7, #28]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d104      	bne.n	800cc8e <tcp_abandon+0xb2>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	68da      	ldr	r2, [r3, #12]
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	60da      	str	r2, [r3, #12]
 800cc8c:	e005      	b.n	800cc9a <tcp_abandon+0xbe>
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	68db      	ldr	r3, [r3, #12]
 800cc92:	61fb      	str	r3, [r7, #28]
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1ef      	bne.n	800cc7a <tcp_abandon+0x9e>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	60da      	str	r2, [r3, #12]
 800cca0:	e00b      	b.n	800ccba <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	8adb      	ldrh	r3, [r3, #22]
 800ccaa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ccac:	6879      	ldr	r1, [r7, #4]
 800ccae:	4828      	ldr	r0, [pc, #160]	; (800cd50 <tcp_abandon+0x174>)
 800ccb0:	f001 fa20 	bl	800e0f4 <tcp_pcb_remove>
 800ccb4:	4b27      	ldr	r3, [pc, #156]	; (800cd54 <tcp_abandon+0x178>)
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d004      	beq.n	800cccc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f000 fed6 	bl	800da78 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d004      	beq.n	800ccde <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f000 fecd 	bl	800da78 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d004      	beq.n	800ccf0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fec4 	bl	800da78 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00e      	beq.n	800cd14 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ccf6:	6879      	ldr	r1, [r7, #4]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	8b12      	ldrh	r2, [r2, #24]
 800cd00:	9202      	str	r2, [sp, #8]
 800cd02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd04:	9201      	str	r2, [sp, #4]
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	697a      	ldr	r2, [r7, #20]
 800cd0c:	69b9      	ldr	r1, [r7, #24]
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f005 fbbc 	bl	801248c <tcp_rst>
    }
    last_state = pcb->state;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	7d1b      	ldrb	r3, [r3, #20]
 800cd18:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7ff fd34 	bl	800c788 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d004      	beq.n	800cd30 <tcp_abandon+0x154>
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	f06f 010c 	mvn.w	r1, #12
 800cd2c:	68f8      	ldr	r0, [r7, #12]
 800cd2e:	4798      	blx	r3
  }
}
 800cd30:	3728      	adds	r7, #40	; 0x28
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	0801865c 	.word	0x0801865c
 800cd3c:	080187a0 	.word	0x080187a0
 800cd40:	080186a0 	.word	0x080186a0
 800cd44:	080187bc 	.word	0x080187bc
 800cd48:	2000e014 	.word	0x2000e014
 800cd4c:	2000e010 	.word	0x2000e010
 800cd50:	2000e004 	.word	0x2000e004
 800cd54:	2000e000 	.word	0x2000e000

0800cd58 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cd60:	2101      	movs	r1, #1
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f7ff ff3a 	bl	800cbdc <tcp_abandon>
}
 800cd68:	bf00      	nop
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b088      	sub	sp, #32
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800cd7e:	2304      	movs	r3, #4
 800cd80:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d101      	bne.n	800cd8c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800cd88:	4b3e      	ldr	r3, [pc, #248]	; (800ce84 <tcp_bind+0x114>)
 800cd8a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d109      	bne.n	800cda6 <tcp_bind+0x36>
 800cd92:	4b3d      	ldr	r3, [pc, #244]	; (800ce88 <tcp_bind+0x118>)
 800cd94:	f240 22a9 	movw	r2, #681	; 0x2a9
 800cd98:	493c      	ldr	r1, [pc, #240]	; (800ce8c <tcp_bind+0x11c>)
 800cd9a:	483d      	ldr	r0, [pc, #244]	; (800ce90 <tcp_bind+0x120>)
 800cd9c:	f008 fb62 	bl	8015464 <iprintf>
 800cda0:	f06f 030f 	mvn.w	r3, #15
 800cda4:	e06a      	b.n	800ce7c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	7d1b      	ldrb	r3, [r3, #20]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d009      	beq.n	800cdc2 <tcp_bind+0x52>
 800cdae:	4b36      	ldr	r3, [pc, #216]	; (800ce88 <tcp_bind+0x118>)
 800cdb0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cdb4:	4937      	ldr	r1, [pc, #220]	; (800ce94 <tcp_bind+0x124>)
 800cdb6:	4836      	ldr	r0, [pc, #216]	; (800ce90 <tcp_bind+0x120>)
 800cdb8:	f008 fb54 	bl	8015464 <iprintf>
 800cdbc:	f06f 0305 	mvn.w	r3, #5
 800cdc0:	e05c      	b.n	800ce7c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800cdc2:	88fb      	ldrh	r3, [r7, #6]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d109      	bne.n	800cddc <tcp_bind+0x6c>
    port = tcp_new_port();
 800cdc8:	f000 f9f0 	bl	800d1ac <tcp_new_port>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800cdd0:	88fb      	ldrh	r3, [r7, #6]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d135      	bne.n	800ce42 <tcp_bind+0xd2>
      return ERR_BUF;
 800cdd6:	f06f 0301 	mvn.w	r3, #1
 800cdda:	e04f      	b.n	800ce7c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800cddc:	2300      	movs	r3, #0
 800cdde:	61fb      	str	r3, [r7, #28]
 800cde0:	e02b      	b.n	800ce3a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cde2:	4a2d      	ldr	r2, [pc, #180]	; (800ce98 <tcp_bind+0x128>)
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	61bb      	str	r3, [r7, #24]
 800cdee:	e01e      	b.n	800ce2e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	8adb      	ldrh	r3, [r3, #22]
 800cdf4:	88fa      	ldrh	r2, [r7, #6]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d116      	bne.n	800ce28 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800cdfa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d010      	beq.n	800ce22 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00c      	beq.n	800ce22 <tcp_bind+0xb2>
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d009      	beq.n	800ce22 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d005      	beq.n	800ce22 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d102      	bne.n	800ce28 <tcp_bind+0xb8>
              return ERR_USE;
 800ce22:	f06f 0307 	mvn.w	r3, #7
 800ce26:	e029      	b.n	800ce7c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	61bb      	str	r3, [r7, #24]
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1dd      	bne.n	800cdf0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800ce34:	69fb      	ldr	r3, [r7, #28]
 800ce36:	3301      	adds	r3, #1
 800ce38:	61fb      	str	r3, [r7, #28]
 800ce3a:	69fa      	ldr	r2, [r7, #28]
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	dbcf      	blt.n	800cde2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00c      	beq.n	800ce62 <tcp_bind+0xf2>
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d008      	beq.n	800ce62 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d002      	beq.n	800ce5c <tcp_bind+0xec>
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	e000      	b.n	800ce5e <tcp_bind+0xee>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	88fa      	ldrh	r2, [r7, #6]
 800ce66:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800ce68:	4b0c      	ldr	r3, [pc, #48]	; (800ce9c <tcp_bind+0x12c>)
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	60da      	str	r2, [r3, #12]
 800ce70:	4a0a      	ldr	r2, [pc, #40]	; (800ce9c <tcp_bind+0x12c>)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6013      	str	r3, [r2, #0]
 800ce76:	f005 fccb 	bl	8012810 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3720      	adds	r7, #32
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	08021630 	.word	0x08021630
 800ce88:	0801865c 	.word	0x0801865c
 800ce8c:	080187f0 	.word	0x080187f0
 800ce90:	080186a0 	.word	0x080186a0
 800ce94:	08018808 	.word	0x08018808
 800ce98:	08021608 	.word	0x08021608
 800ce9c:	2000e010 	.word	0x2000e010

0800cea0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	4613      	mov	r3, r2
 800ceac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d106      	bne.n	800cec2 <tcp_accept_null+0x22>
 800ceb4:	4b07      	ldr	r3, [pc, #28]	; (800ced4 <tcp_accept_null+0x34>)
 800ceb6:	f240 320f 	movw	r2, #783	; 0x30f
 800ceba:	4907      	ldr	r1, [pc, #28]	; (800ced8 <tcp_accept_null+0x38>)
 800cebc:	4807      	ldr	r0, [pc, #28]	; (800cedc <tcp_accept_null+0x3c>)
 800cebe:	f008 fad1 	bl	8015464 <iprintf>

  tcp_abort(pcb);
 800cec2:	68b8      	ldr	r0, [r7, #8]
 800cec4:	f7ff ff48 	bl	800cd58 <tcp_abort>

  return ERR_ABRT;
 800cec8:	f06f 030c 	mvn.w	r3, #12
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	0801865c 	.word	0x0801865c
 800ced8:	08018830 	.word	0x08018830
 800cedc:	080186a0 	.word	0x080186a0

0800cee0 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	460b      	mov	r3, r1
 800ceea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ceec:	78fb      	ldrb	r3, [r7, #3]
 800ceee:	2200      	movs	r2, #0
 800cef0:	4619      	mov	r1, r3
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f806 	bl	800cf04 <tcp_listen_with_backlog_and_err>
 800cef8:	4603      	mov	r3, r0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
	...

0800cf04 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b088      	sub	sp, #32
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	607a      	str	r2, [r7, #4]
 800cf10:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800cf12:	2300      	movs	r3, #0
 800cf14:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d109      	bne.n	800cf30 <tcp_listen_with_backlog_and_err+0x2c>
 800cf1c:	4b47      	ldr	r3, [pc, #284]	; (800d03c <tcp_listen_with_backlog_and_err+0x138>)
 800cf1e:	f240 3259 	movw	r2, #857	; 0x359
 800cf22:	4947      	ldr	r1, [pc, #284]	; (800d040 <tcp_listen_with_backlog_and_err+0x13c>)
 800cf24:	4847      	ldr	r0, [pc, #284]	; (800d044 <tcp_listen_with_backlog_and_err+0x140>)
 800cf26:	f008 fa9d 	bl	8015464 <iprintf>
 800cf2a:	23f0      	movs	r3, #240	; 0xf0
 800cf2c:	76fb      	strb	r3, [r7, #27]
 800cf2e:	e079      	b.n	800d024 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	7d1b      	ldrb	r3, [r3, #20]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d009      	beq.n	800cf4c <tcp_listen_with_backlog_and_err+0x48>
 800cf38:	4b40      	ldr	r3, [pc, #256]	; (800d03c <tcp_listen_with_backlog_and_err+0x138>)
 800cf3a:	f240 325a 	movw	r2, #858	; 0x35a
 800cf3e:	4942      	ldr	r1, [pc, #264]	; (800d048 <tcp_listen_with_backlog_and_err+0x144>)
 800cf40:	4840      	ldr	r0, [pc, #256]	; (800d044 <tcp_listen_with_backlog_and_err+0x140>)
 800cf42:	f008 fa8f 	bl	8015464 <iprintf>
 800cf46:	23f1      	movs	r3, #241	; 0xf1
 800cf48:	76fb      	strb	r3, [r7, #27]
 800cf4a:	e06b      	b.n	800d024 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	7d1b      	ldrb	r3, [r3, #20]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d104      	bne.n	800cf5e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cf58:	23f7      	movs	r3, #247	; 0xf7
 800cf5a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cf5c:	e062      	b.n	800d024 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cf5e:	2002      	movs	r0, #2
 800cf60:	f7fe fb14 	bl	800b58c <memp_malloc>
 800cf64:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d102      	bne.n	800cf72 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800cf6c:	23ff      	movs	r3, #255	; 0xff
 800cf6e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cf70:	e058      	b.n	800d024 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	691a      	ldr	r2, [r3, #16]
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	8ada      	ldrh	r2, [r3, #22]
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	2201      	movs	r2, #1
 800cf86:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	7d5a      	ldrb	r2, [r3, #21]
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	7a5a      	ldrb	r2, [r3, #9]
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800cf98:	69fb      	ldr	r3, [r7, #28]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	7ada      	ldrb	r2, [r3, #11]
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	7a9a      	ldrb	r2, [r3, #10]
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	8adb      	ldrh	r3, [r3, #22]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d021      	beq.n	800d002 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cfbe:	4b23      	ldr	r3, [pc, #140]	; (800d04c <tcp_listen_with_backlog_and_err+0x148>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d105      	bne.n	800cfd4 <tcp_listen_with_backlog_and_err+0xd0>
 800cfc8:	4b20      	ldr	r3, [pc, #128]	; (800d04c <tcp_listen_with_backlog_and_err+0x148>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	4a1f      	ldr	r2, [pc, #124]	; (800d04c <tcp_listen_with_backlog_and_err+0x148>)
 800cfd0:	6013      	str	r3, [r2, #0]
 800cfd2:	e013      	b.n	800cffc <tcp_listen_with_backlog_and_err+0xf8>
 800cfd4:	4b1d      	ldr	r3, [pc, #116]	; (800d04c <tcp_listen_with_backlog_and_err+0x148>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	617b      	str	r3, [r7, #20]
 800cfda:	e00c      	b.n	800cff6 <tcp_listen_with_backlog_and_err+0xf2>
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	68fa      	ldr	r2, [r7, #12]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d104      	bne.n	800cff0 <tcp_listen_with_backlog_and_err+0xec>
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	68da      	ldr	r2, [r3, #12]
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	60da      	str	r2, [r3, #12]
 800cfee:	e005      	b.n	800cffc <tcp_listen_with_backlog_and_err+0xf8>
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	617b      	str	r3, [r7, #20]
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1ef      	bne.n	800cfdc <tcp_listen_with_backlog_and_err+0xd8>
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f7ff fbc0 	bl	800c788 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d008:	69fb      	ldr	r3, [r7, #28]
 800d00a:	4a11      	ldr	r2, [pc, #68]	; (800d050 <tcp_listen_with_backlog_and_err+0x14c>)
 800d00c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d00e:	4b11      	ldr	r3, [pc, #68]	; (800d054 <tcp_listen_with_backlog_and_err+0x150>)
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	69fb      	ldr	r3, [r7, #28]
 800d014:	60da      	str	r2, [r3, #12]
 800d016:	4a0f      	ldr	r2, [pc, #60]	; (800d054 <tcp_listen_with_backlog_and_err+0x150>)
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	6013      	str	r3, [r2, #0]
 800d01c:	f005 fbf8 	bl	8012810 <tcp_timer_needed>
  res = ERR_OK;
 800d020:	2300      	movs	r3, #0
 800d022:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d002      	beq.n	800d030 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7efa      	ldrb	r2, [r7, #27]
 800d02e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d030:	69fb      	ldr	r3, [r7, #28]
}
 800d032:	4618      	mov	r0, r3
 800d034:	3720      	adds	r7, #32
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	bf00      	nop
 800d03c:	0801865c 	.word	0x0801865c
 800d040:	08018850 	.word	0x08018850
 800d044:	080186a0 	.word	0x080186a0
 800d048:	08018880 	.word	0x08018880
 800d04c:	2000e010 	.word	0x2000e010
 800d050:	0800cea1 	.word	0x0800cea1
 800d054:	2000e00c 	.word	0x2000e00c

0800d058 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d106      	bne.n	800d074 <tcp_update_rcv_ann_wnd+0x1c>
 800d066:	4b25      	ldr	r3, [pc, #148]	; (800d0fc <tcp_update_rcv_ann_wnd+0xa4>)
 800d068:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d06c:	4924      	ldr	r1, [pc, #144]	; (800d100 <tcp_update_rcv_ann_wnd+0xa8>)
 800d06e:	4825      	ldr	r0, [pc, #148]	; (800d104 <tcp_update_rcv_ann_wnd+0xac>)
 800d070:	f008 f9f8 	bl	8015464 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d07c:	4413      	add	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d088:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d08c:	bf28      	it	cs
 800d08e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d092:	b292      	uxth	r2, r2
 800d094:	4413      	add	r3, r2
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	1ad3      	subs	r3, r2, r3
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	db08      	blt.n	800d0b0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	e020      	b.n	800d0f2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b8:	1ad3      	subs	r3, r2, r3
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	dd03      	ble.n	800d0c6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0c4:	e014      	b.n	800d0f0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ce:	1ad3      	subs	r3, r2, r3
 800d0d0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0d8:	d306      	bcc.n	800d0e8 <tcp_update_rcv_ann_wnd+0x90>
 800d0da:	4b08      	ldr	r3, [pc, #32]	; (800d0fc <tcp_update_rcv_ann_wnd+0xa4>)
 800d0dc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d0e0:	4909      	ldr	r1, [pc, #36]	; (800d108 <tcp_update_rcv_ann_wnd+0xb0>)
 800d0e2:	4808      	ldr	r0, [pc, #32]	; (800d104 <tcp_update_rcv_ann_wnd+0xac>)
 800d0e4:	f008 f9be 	bl	8015464 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d0f0:	2300      	movs	r3, #0
  }
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	0801865c 	.word	0x0801865c
 800d100:	080188b8 	.word	0x080188b8
 800d104:	080186a0 	.word	0x080186a0
 800d108:	080188dc 	.word	0x080188dc

0800d10c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	460b      	mov	r3, r1
 800d116:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d107      	bne.n	800d12e <tcp_recved+0x22>
 800d11e:	4b1f      	ldr	r3, [pc, #124]	; (800d19c <tcp_recved+0x90>)
 800d120:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d124:	491e      	ldr	r1, [pc, #120]	; (800d1a0 <tcp_recved+0x94>)
 800d126:	481f      	ldr	r0, [pc, #124]	; (800d1a4 <tcp_recved+0x98>)
 800d128:	f008 f99c 	bl	8015464 <iprintf>
 800d12c:	e032      	b.n	800d194 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	7d1b      	ldrb	r3, [r3, #20]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d106      	bne.n	800d144 <tcp_recved+0x38>
 800d136:	4b19      	ldr	r3, [pc, #100]	; (800d19c <tcp_recved+0x90>)
 800d138:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d13c:	491a      	ldr	r1, [pc, #104]	; (800d1a8 <tcp_recved+0x9c>)
 800d13e:	4819      	ldr	r0, [pc, #100]	; (800d1a4 <tcp_recved+0x98>)
 800d140:	f008 f990 	bl	8015464 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d148:	887b      	ldrh	r3, [r7, #2]
 800d14a:	4413      	add	r3, r2
 800d14c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d14e:	89fb      	ldrh	r3, [r7, #14]
 800d150:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d154:	d804      	bhi.n	800d160 <tcp_recved+0x54>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d15a:	89fa      	ldrh	r2, [r7, #14]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d204      	bcs.n	800d16a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d166:	851a      	strh	r2, [r3, #40]	; 0x28
 800d168:	e002      	b.n	800d170 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	89fa      	ldrh	r2, [r7, #14]
 800d16e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	f7ff ff71 	bl	800d058 <tcp_update_rcv_ann_wnd>
 800d176:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d17e:	d309      	bcc.n	800d194 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	8b5b      	ldrh	r3, [r3, #26]
 800d184:	f043 0302 	orr.w	r3, r3, #2
 800d188:	b29a      	uxth	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f004 fbc8 	bl	8011924 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	0801865c 	.word	0x0801865c
 800d1a0:	080188f8 	.word	0x080188f8
 800d1a4:	080186a0 	.word	0x080186a0
 800d1a8:	08018910 	.word	0x08018910

0800d1ac <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d1b6:	4b1e      	ldr	r3, [pc, #120]	; (800d230 <tcp_new_port+0x84>)
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	4b1c      	ldr	r3, [pc, #112]	; (800d230 <tcp_new_port+0x84>)
 800d1c0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d1c2:	4b1b      	ldr	r3, [pc, #108]	; (800d230 <tcp_new_port+0x84>)
 800d1c4:	881b      	ldrh	r3, [r3, #0]
 800d1c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d103      	bne.n	800d1d6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d1ce:	4b18      	ldr	r3, [pc, #96]	; (800d230 <tcp_new_port+0x84>)
 800d1d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d1d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	71fb      	strb	r3, [r7, #7]
 800d1da:	e01e      	b.n	800d21a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d1dc:	79fb      	ldrb	r3, [r7, #7]
 800d1de:	4a15      	ldr	r2, [pc, #84]	; (800d234 <tcp_new_port+0x88>)
 800d1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	603b      	str	r3, [r7, #0]
 800d1e8:	e011      	b.n	800d20e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	8ada      	ldrh	r2, [r3, #22]
 800d1ee:	4b10      	ldr	r3, [pc, #64]	; (800d230 <tcp_new_port+0x84>)
 800d1f0:	881b      	ldrh	r3, [r3, #0]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d108      	bne.n	800d208 <tcp_new_port+0x5c>
        n++;
 800d1f6:	88bb      	ldrh	r3, [r7, #4]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d1fc:	88bb      	ldrh	r3, [r7, #4]
 800d1fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d202:	d3d8      	bcc.n	800d1b6 <tcp_new_port+0xa>
          return 0;
 800d204:	2300      	movs	r3, #0
 800d206:	e00d      	b.n	800d224 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	603b      	str	r3, [r7, #0]
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d1ea      	bne.n	800d1ea <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d214:	79fb      	ldrb	r3, [r7, #7]
 800d216:	3301      	adds	r3, #1
 800d218:	71fb      	strb	r3, [r7, #7]
 800d21a:	79fb      	ldrb	r3, [r7, #7]
 800d21c:	2b03      	cmp	r3, #3
 800d21e:	d9dd      	bls.n	800d1dc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d220:	4b03      	ldr	r3, [pc, #12]	; (800d230 <tcp_new_port+0x84>)
 800d222:	881b      	ldrh	r3, [r3, #0]
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	200004b2 	.word	0x200004b2
 800d234:	08021608 	.word	0x08021608

0800d238 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d238:	b5b0      	push	{r4, r5, r7, lr}
 800d23a:	b090      	sub	sp, #64	; 0x40
 800d23c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d23e:	2300      	movs	r3, #0
 800d240:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d244:	4b94      	ldr	r3, [pc, #592]	; (800d498 <tcp_slowtmr+0x260>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	3301      	adds	r3, #1
 800d24a:	4a93      	ldr	r2, [pc, #588]	; (800d498 <tcp_slowtmr+0x260>)
 800d24c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d24e:	4b93      	ldr	r3, [pc, #588]	; (800d49c <tcp_slowtmr+0x264>)
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	3301      	adds	r3, #1
 800d254:	b2da      	uxtb	r2, r3
 800d256:	4b91      	ldr	r3, [pc, #580]	; (800d49c <tcp_slowtmr+0x264>)
 800d258:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d25a:	2300      	movs	r3, #0
 800d25c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d25e:	4b90      	ldr	r3, [pc, #576]	; (800d4a0 <tcp_slowtmr+0x268>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d264:	e29f      	b.n	800d7a6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d268:	7d1b      	ldrb	r3, [r3, #20]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d106      	bne.n	800d27c <tcp_slowtmr+0x44>
 800d26e:	4b8d      	ldr	r3, [pc, #564]	; (800d4a4 <tcp_slowtmr+0x26c>)
 800d270:	f240 42be 	movw	r2, #1214	; 0x4be
 800d274:	498c      	ldr	r1, [pc, #560]	; (800d4a8 <tcp_slowtmr+0x270>)
 800d276:	488d      	ldr	r0, [pc, #564]	; (800d4ac <tcp_slowtmr+0x274>)
 800d278:	f008 f8f4 	bl	8015464 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27e:	7d1b      	ldrb	r3, [r3, #20]
 800d280:	2b01      	cmp	r3, #1
 800d282:	d106      	bne.n	800d292 <tcp_slowtmr+0x5a>
 800d284:	4b87      	ldr	r3, [pc, #540]	; (800d4a4 <tcp_slowtmr+0x26c>)
 800d286:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d28a:	4989      	ldr	r1, [pc, #548]	; (800d4b0 <tcp_slowtmr+0x278>)
 800d28c:	4887      	ldr	r0, [pc, #540]	; (800d4ac <tcp_slowtmr+0x274>)
 800d28e:	f008 f8e9 	bl	8015464 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d294:	7d1b      	ldrb	r3, [r3, #20]
 800d296:	2b0a      	cmp	r3, #10
 800d298:	d106      	bne.n	800d2a8 <tcp_slowtmr+0x70>
 800d29a:	4b82      	ldr	r3, [pc, #520]	; (800d4a4 <tcp_slowtmr+0x26c>)
 800d29c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d2a0:	4984      	ldr	r1, [pc, #528]	; (800d4b4 <tcp_slowtmr+0x27c>)
 800d2a2:	4882      	ldr	r0, [pc, #520]	; (800d4ac <tcp_slowtmr+0x274>)
 800d2a4:	f008 f8de 	bl	8015464 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2aa:	7f9a      	ldrb	r2, [r3, #30]
 800d2ac:	4b7b      	ldr	r3, [pc, #492]	; (800d49c <tcp_slowtmr+0x264>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d105      	bne.n	800d2c0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d2be:	e272      	b.n	800d7a6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d2c0:	4b76      	ldr	r3, [pc, #472]	; (800d49c <tcp_slowtmr+0x264>)
 800d2c2:	781a      	ldrb	r2, [r3, #0]
 800d2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d6:	7d1b      	ldrb	r3, [r3, #20]
 800d2d8:	2b02      	cmp	r3, #2
 800d2da:	d10a      	bne.n	800d2f2 <tcp_slowtmr+0xba>
 800d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2e2:	2b05      	cmp	r3, #5
 800d2e4:	d905      	bls.n	800d2f2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d2e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2f0:	e11e      	b.n	800d530 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d2f8:	2b0b      	cmp	r3, #11
 800d2fa:	d905      	bls.n	800d308 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d300:	3301      	adds	r3, #1
 800d302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d306:	e113      	b.n	800d530 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d075      	beq.n	800d3fe <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d316:	2b00      	cmp	r3, #0
 800d318:	d006      	beq.n	800d328 <tcp_slowtmr+0xf0>
 800d31a:	4b62      	ldr	r3, [pc, #392]	; (800d4a4 <tcp_slowtmr+0x26c>)
 800d31c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d320:	4965      	ldr	r1, [pc, #404]	; (800d4b8 <tcp_slowtmr+0x280>)
 800d322:	4862      	ldr	r0, [pc, #392]	; (800d4ac <tcp_slowtmr+0x274>)
 800d324:	f008 f89e 	bl	8015464 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d106      	bne.n	800d33e <tcp_slowtmr+0x106>
 800d330:	4b5c      	ldr	r3, [pc, #368]	; (800d4a4 <tcp_slowtmr+0x26c>)
 800d332:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d336:	4961      	ldr	r1, [pc, #388]	; (800d4bc <tcp_slowtmr+0x284>)
 800d338:	485c      	ldr	r0, [pc, #368]	; (800d4ac <tcp_slowtmr+0x274>)
 800d33a:	f008 f893 	bl	8015464 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d340:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d344:	2b0b      	cmp	r3, #11
 800d346:	d905      	bls.n	800d354 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d34c:	3301      	adds	r3, #1
 800d34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d352:	e0ed      	b.n	800d530 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d356:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d35a:	3b01      	subs	r3, #1
 800d35c:	4a58      	ldr	r2, [pc, #352]	; (800d4c0 <tcp_slowtmr+0x288>)
 800d35e:	5cd3      	ldrb	r3, [r2, r3]
 800d360:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d364:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d368:	7c7a      	ldrb	r2, [r7, #17]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d907      	bls.n	800d37e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d370:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d374:	3301      	adds	r3, #1
 800d376:	b2da      	uxtb	r2, r3
 800d378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d37a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d384:	7c7a      	ldrb	r2, [r7, #17]
 800d386:	429a      	cmp	r2, r3
 800d388:	f200 80d2 	bhi.w	800d530 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d38c:	2301      	movs	r3, #1
 800d38e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d396:	2b00      	cmp	r3, #0
 800d398:	d108      	bne.n	800d3ac <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d39a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d39c:	f005 f96a 	bl	8012674 <tcp_zero_window_probe>
 800d3a0:	4603      	mov	r3, r0
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d014      	beq.n	800d3d0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	623b      	str	r3, [r7, #32]
 800d3aa:	e011      	b.n	800d3d0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3b6:	f004 f82f 	bl	8011418 <tcp_split_unsent_seg>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d107      	bne.n	800d3d0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d3c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3c2:	f004 faaf 	bl	8011924 <tcp_output>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d3d0:	6a3b      	ldr	r3, [r7, #32]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f000 80ac 	beq.w	800d530 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d3e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d3e6:	2b06      	cmp	r3, #6
 800d3e8:	f200 80a2 	bhi.w	800d530 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d3fc:	e098      	b.n	800d530 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d400:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d404:	2b00      	cmp	r3, #0
 800d406:	db0f      	blt.n	800d428 <tcp_slowtmr+0x1f0>
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d40e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d412:	4293      	cmp	r3, r2
 800d414:	d008      	beq.n	800d428 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d418:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	3301      	adds	r3, #1
 800d420:	b29b      	uxth	r3, r3
 800d422:	b21a      	sxth	r2, r3
 800d424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d426:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d430:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d434:	429a      	cmp	r2, r3
 800d436:	db7b      	blt.n	800d530 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d43a:	f004 fd65 	bl	8011f08 <tcp_rexmit_rto_prepare>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d007      	beq.n	800d454 <tcp_slowtmr+0x21c>
 800d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d171      	bne.n	800d530 <tcp_slowtmr+0x2f8>
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d450:	2b00      	cmp	r3, #0
 800d452:	d06d      	beq.n	800d530 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	7d1b      	ldrb	r3, [r3, #20]
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d03a      	beq.n	800d4d2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d462:	2b0c      	cmp	r3, #12
 800d464:	bf28      	it	cs
 800d466:	230c      	movcs	r3, #12
 800d468:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d470:	10db      	asrs	r3, r3, #3
 800d472:	b21b      	sxth	r3, r3
 800d474:	461a      	mov	r2, r3
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d478:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d47c:	4413      	add	r3, r2
 800d47e:	7efa      	ldrb	r2, [r7, #27]
 800d480:	4910      	ldr	r1, [pc, #64]	; (800d4c4 <tcp_slowtmr+0x28c>)
 800d482:	5c8a      	ldrb	r2, [r1, r2]
 800d484:	4093      	lsls	r3, r2
 800d486:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d48e:	4293      	cmp	r3, r2
 800d490:	dc1a      	bgt.n	800d4c8 <tcp_slowtmr+0x290>
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	b21a      	sxth	r2, r3
 800d496:	e019      	b.n	800d4cc <tcp_slowtmr+0x294>
 800d498:	2000e008 	.word	0x2000e008
 800d49c:	20000a16 	.word	0x20000a16
 800d4a0:	2000e004 	.word	0x2000e004
 800d4a4:	0801865c 	.word	0x0801865c
 800d4a8:	080189a0 	.word	0x080189a0
 800d4ac:	080186a0 	.word	0x080186a0
 800d4b0:	080189cc 	.word	0x080189cc
 800d4b4:	080189f8 	.word	0x080189f8
 800d4b8:	08018a28 	.word	0x08018a28
 800d4bc:	08018a5c 	.word	0x08018a5c
 800d4c0:	08021600 	.word	0x08021600
 800d4c4:	080215f0 	.word	0x080215f0
 800d4c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	bf28      	it	cs
 800d4e8:	4613      	movcs	r3, r2
 800d4ea:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d4ec:	8a7b      	ldrh	r3, [r7, #18]
 800d4ee:	085b      	lsrs	r3, r3, #1
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	b29b      	uxth	r3, r3
 800d506:	429a      	cmp	r2, r3
 800d508:	d206      	bcs.n	800d518 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d50e:	005b      	lsls	r3, r3, #1
 800d510:	b29a      	uxth	r2, r3
 800d512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d514:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d524:	2200      	movs	r2, #0
 800d526:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d52a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d52c:	f004 fd5c 	bl	8011fe8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d532:	7d1b      	ldrb	r3, [r3, #20]
 800d534:	2b06      	cmp	r3, #6
 800d536:	d111      	bne.n	800d55c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53a:	8b5b      	ldrh	r3, [r3, #26]
 800d53c:	f003 0310 	and.w	r3, r3, #16
 800d540:	2b00      	cmp	r3, #0
 800d542:	d00b      	beq.n	800d55c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d544:	4b9d      	ldr	r3, [pc, #628]	; (800d7bc <tcp_slowtmr+0x584>)
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54a:	6a1b      	ldr	r3, [r3, #32]
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	2b28      	cmp	r3, #40	; 0x28
 800d550:	d904      	bls.n	800d55c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d556:	3301      	adds	r3, #1
 800d558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	7a5b      	ldrb	r3, [r3, #9]
 800d560:	f003 0308 	and.w	r3, r3, #8
 800d564:	2b00      	cmp	r3, #0
 800d566:	d04c      	beq.n	800d602 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800d568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d56a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d56c:	2b04      	cmp	r3, #4
 800d56e:	d003      	beq.n	800d578 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d574:	2b07      	cmp	r3, #7
 800d576:	d144      	bne.n	800d602 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d578:	4b90      	ldr	r3, [pc, #576]	; (800d7bc <tcp_slowtmr+0x584>)
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d57e:	6a1b      	ldr	r3, [r3, #32]
 800d580:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d588:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800d58c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800d590:	498b      	ldr	r1, [pc, #556]	; (800d7c0 <tcp_slowtmr+0x588>)
 800d592:	fba1 1303 	umull	r1, r3, r1, r3
 800d596:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d598:	429a      	cmp	r2, r3
 800d59a:	d90a      	bls.n	800d5b2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d59c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d5a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d5b0:	e027      	b.n	800d602 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5b2:	4b82      	ldr	r3, [pc, #520]	; (800d7bc <tcp_slowtmr+0x584>)
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b8:	6a1b      	ldr	r3, [r3, #32]
 800d5ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5be:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	4b7e      	ldr	r3, [pc, #504]	; (800d7c4 <tcp_slowtmr+0x58c>)
 800d5cc:	fb03 f300 	mul.w	r3, r3, r0
 800d5d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d5d2:	497b      	ldr	r1, [pc, #492]	; (800d7c0 <tcp_slowtmr+0x588>)
 800d5d4:	fba1 1303 	umull	r1, r3, r1, r3
 800d5d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d911      	bls.n	800d602 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800d5de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5e0:	f005 f808 	bl	80125f4 <tcp_keepalive>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d5ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d107      	bne.n	800d602 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	b2da      	uxtb	r2, r3
 800d5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d606:	2b00      	cmp	r3, #0
 800d608:	d011      	beq.n	800d62e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d60a:	4b6c      	ldr	r3, [pc, #432]	; (800d7bc <tcp_slowtmr+0x584>)
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	1ad2      	subs	r2, r2, r3
 800d614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d616:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d61a:	4619      	mov	r1, r3
 800d61c:	460b      	mov	r3, r1
 800d61e:	005b      	lsls	r3, r3, #1
 800d620:	440b      	add	r3, r1
 800d622:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d624:	429a      	cmp	r2, r3
 800d626:	d302      	bcc.n	800d62e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d62a:	f000 fec7 	bl	800e3bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d630:	7d1b      	ldrb	r3, [r3, #20]
 800d632:	2b03      	cmp	r3, #3
 800d634:	d10b      	bne.n	800d64e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d636:	4b61      	ldr	r3, [pc, #388]	; (800d7bc <tcp_slowtmr+0x584>)
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63c:	6a1b      	ldr	r3, [r3, #32]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	2b28      	cmp	r3, #40	; 0x28
 800d642:	d904      	bls.n	800d64e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d648:	3301      	adds	r3, #1
 800d64a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d650:	7d1b      	ldrb	r3, [r3, #20]
 800d652:	2b09      	cmp	r3, #9
 800d654:	d10b      	bne.n	800d66e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d656:	4b59      	ldr	r3, [pc, #356]	; (800d7bc <tcp_slowtmr+0x584>)
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	1ad3      	subs	r3, r2, r3
 800d660:	2bf0      	cmp	r3, #240	; 0xf0
 800d662:	d904      	bls.n	800d66e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800d664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d668:	3301      	adds	r3, #1
 800d66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d66e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d672:	2b00      	cmp	r3, #0
 800d674:	d060      	beq.n	800d738 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d67c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d67e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d680:	f000 fce8 	bl	800e054 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d686:	2b00      	cmp	r3, #0
 800d688:	d010      	beq.n	800d6ac <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d68a:	4b4f      	ldr	r3, [pc, #316]	; (800d7c8 <tcp_slowtmr+0x590>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d690:	429a      	cmp	r2, r3
 800d692:	d106      	bne.n	800d6a2 <tcp_slowtmr+0x46a>
 800d694:	4b4d      	ldr	r3, [pc, #308]	; (800d7cc <tcp_slowtmr+0x594>)
 800d696:	f240 526d 	movw	r2, #1389	; 0x56d
 800d69a:	494d      	ldr	r1, [pc, #308]	; (800d7d0 <tcp_slowtmr+0x598>)
 800d69c:	484d      	ldr	r0, [pc, #308]	; (800d7d4 <tcp_slowtmr+0x59c>)
 800d69e:	f007 fee1 	bl	8015464 <iprintf>
        prev->next = pcb->next;
 800d6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a4:	68da      	ldr	r2, [r3, #12]
 800d6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a8:	60da      	str	r2, [r3, #12]
 800d6aa:	e00f      	b.n	800d6cc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d6ac:	4b46      	ldr	r3, [pc, #280]	; (800d7c8 <tcp_slowtmr+0x590>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d006      	beq.n	800d6c4 <tcp_slowtmr+0x48c>
 800d6b6:	4b45      	ldr	r3, [pc, #276]	; (800d7cc <tcp_slowtmr+0x594>)
 800d6b8:	f240 5271 	movw	r2, #1393	; 0x571
 800d6bc:	4946      	ldr	r1, [pc, #280]	; (800d7d8 <tcp_slowtmr+0x5a0>)
 800d6be:	4845      	ldr	r0, [pc, #276]	; (800d7d4 <tcp_slowtmr+0x59c>)
 800d6c0:	f007 fed0 	bl	8015464 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	4a3f      	ldr	r2, [pc, #252]	; (800d7c8 <tcp_slowtmr+0x590>)
 800d6ca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d6cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d013      	beq.n	800d6fc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d6dc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6e4:	8ad2      	ldrh	r2, [r2, #22]
 800d6e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6e8:	8b09      	ldrh	r1, [r1, #24]
 800d6ea:	9102      	str	r1, [sp, #8]
 800d6ec:	9201      	str	r2, [sp, #4]
 800d6ee:	9300      	str	r3, [sp, #0]
 800d6f0:	462b      	mov	r3, r5
 800d6f2:	4622      	mov	r2, r4
 800d6f4:	4601      	mov	r1, r0
 800d6f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6f8:	f004 fec8 	bl	801248c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fe:	691b      	ldr	r3, [r3, #16]
 800d700:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d704:	7d1b      	ldrb	r3, [r3, #20]
 800d706:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d712:	6838      	ldr	r0, [r7, #0]
 800d714:	f7ff f838 	bl	800c788 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d718:	4b30      	ldr	r3, [pc, #192]	; (800d7dc <tcp_slowtmr+0x5a4>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d004      	beq.n	800d72e <tcp_slowtmr+0x4f6>
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f06f 010c 	mvn.w	r1, #12
 800d72a:	68b8      	ldr	r0, [r7, #8]
 800d72c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d72e:	4b2b      	ldr	r3, [pc, #172]	; (800d7dc <tcp_slowtmr+0x5a4>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d037      	beq.n	800d7a6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800d736:	e590      	b.n	800d25a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d744:	7f1b      	ldrb	r3, [r3, #28]
 800d746:	3301      	adds	r3, #1
 800d748:	b2da      	uxtb	r2, r3
 800d74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d74c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d750:	7f1a      	ldrb	r2, [r3, #28]
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	7f5b      	ldrb	r3, [r3, #29]
 800d756:	429a      	cmp	r2, r3
 800d758:	d325      	bcc.n	800d7a6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800d75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d75c:	2200      	movs	r2, #0
 800d75e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d760:	4b1e      	ldr	r3, [pc, #120]	; (800d7dc <tcp_slowtmr+0x5a4>)
 800d762:	2200      	movs	r2, #0
 800d764:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00b      	beq.n	800d788 <tcp_slowtmr+0x550>
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d778:	6912      	ldr	r2, [r2, #16]
 800d77a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d77c:	4610      	mov	r0, r2
 800d77e:	4798      	blx	r3
 800d780:	4603      	mov	r3, r0
 800d782:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d786:	e002      	b.n	800d78e <tcp_slowtmr+0x556>
 800d788:	2300      	movs	r3, #0
 800d78a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d78e:	4b13      	ldr	r3, [pc, #76]	; (800d7dc <tcp_slowtmr+0x5a4>)
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d000      	beq.n	800d798 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800d796:	e560      	b.n	800d25a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d798:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d102      	bne.n	800d7a6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800d7a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d7a2:	f004 f8bf 	bl	8011924 <tcp_output>
  while (pcb != NULL) {
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	f47f ad5c 	bne.w	800d266 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d7b2:	4b0b      	ldr	r3, [pc, #44]	; (800d7e0 <tcp_slowtmr+0x5a8>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d7b8:	e067      	b.n	800d88a <tcp_slowtmr+0x652>
 800d7ba:	bf00      	nop
 800d7bc:	2000e008 	.word	0x2000e008
 800d7c0:	10624dd3 	.word	0x10624dd3
 800d7c4:	000124f8 	.word	0x000124f8
 800d7c8:	2000e004 	.word	0x2000e004
 800d7cc:	0801865c 	.word	0x0801865c
 800d7d0:	08018a94 	.word	0x08018a94
 800d7d4:	080186a0 	.word	0x080186a0
 800d7d8:	08018ac0 	.word	0x08018ac0
 800d7dc:	2000e000 	.word	0x2000e000
 800d7e0:	2000e014 	.word	0x2000e014
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e6:	7d1b      	ldrb	r3, [r3, #20]
 800d7e8:	2b0a      	cmp	r3, #10
 800d7ea:	d006      	beq.n	800d7fa <tcp_slowtmr+0x5c2>
 800d7ec:	4b2b      	ldr	r3, [pc, #172]	; (800d89c <tcp_slowtmr+0x664>)
 800d7ee:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d7f2:	492b      	ldr	r1, [pc, #172]	; (800d8a0 <tcp_slowtmr+0x668>)
 800d7f4:	482b      	ldr	r0, [pc, #172]	; (800d8a4 <tcp_slowtmr+0x66c>)
 800d7f6:	f007 fe35 	bl	8015464 <iprintf>
    pcb_remove = 0;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d800:	4b29      	ldr	r3, [pc, #164]	; (800d8a8 <tcp_slowtmr+0x670>)
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d806:	6a1b      	ldr	r3, [r3, #32]
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	2bf0      	cmp	r3, #240	; 0xf0
 800d80c:	d904      	bls.n	800d818 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d80e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d812:	3301      	adds	r3, #1
 800d814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d02f      	beq.n	800d880 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d822:	f000 fc17 	bl	800e054 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d010      	beq.n	800d84e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d82c:	4b1f      	ldr	r3, [pc, #124]	; (800d8ac <tcp_slowtmr+0x674>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d832:	429a      	cmp	r2, r3
 800d834:	d106      	bne.n	800d844 <tcp_slowtmr+0x60c>
 800d836:	4b19      	ldr	r3, [pc, #100]	; (800d89c <tcp_slowtmr+0x664>)
 800d838:	f240 52af 	movw	r2, #1455	; 0x5af
 800d83c:	491c      	ldr	r1, [pc, #112]	; (800d8b0 <tcp_slowtmr+0x678>)
 800d83e:	4819      	ldr	r0, [pc, #100]	; (800d8a4 <tcp_slowtmr+0x66c>)
 800d840:	f007 fe10 	bl	8015464 <iprintf>
        prev->next = pcb->next;
 800d844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d846:	68da      	ldr	r2, [r3, #12]
 800d848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84a:	60da      	str	r2, [r3, #12]
 800d84c:	e00f      	b.n	800d86e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d84e:	4b17      	ldr	r3, [pc, #92]	; (800d8ac <tcp_slowtmr+0x674>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d854:	429a      	cmp	r2, r3
 800d856:	d006      	beq.n	800d866 <tcp_slowtmr+0x62e>
 800d858:	4b10      	ldr	r3, [pc, #64]	; (800d89c <tcp_slowtmr+0x664>)
 800d85a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d85e:	4915      	ldr	r1, [pc, #84]	; (800d8b4 <tcp_slowtmr+0x67c>)
 800d860:	4810      	ldr	r0, [pc, #64]	; (800d8a4 <tcp_slowtmr+0x66c>)
 800d862:	f007 fdff 	bl	8015464 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	4a10      	ldr	r2, [pc, #64]	; (800d8ac <tcp_slowtmr+0x674>)
 800d86c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d870:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d878:	69f8      	ldr	r0, [r7, #28]
 800d87a:	f7fe ff85 	bl	800c788 <tcp_free>
 800d87e:	e004      	b.n	800d88a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d882:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d88a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1a9      	bne.n	800d7e4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d890:	bf00      	nop
 800d892:	bf00      	nop
 800d894:	3730      	adds	r7, #48	; 0x30
 800d896:	46bd      	mov	sp, r7
 800d898:	bdb0      	pop	{r4, r5, r7, pc}
 800d89a:	bf00      	nop
 800d89c:	0801865c 	.word	0x0801865c
 800d8a0:	08018aec 	.word	0x08018aec
 800d8a4:	080186a0 	.word	0x080186a0
 800d8a8:	2000e008 	.word	0x2000e008
 800d8ac:	2000e014 	.word	0x2000e014
 800d8b0:	08018b1c 	.word	0x08018b1c
 800d8b4:	08018b44 	.word	0x08018b44

0800d8b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d8be:	4b2d      	ldr	r3, [pc, #180]	; (800d974 <tcp_fasttmr+0xbc>)
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	4b2b      	ldr	r3, [pc, #172]	; (800d974 <tcp_fasttmr+0xbc>)
 800d8c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d8ca:	4b2b      	ldr	r3, [pc, #172]	; (800d978 <tcp_fasttmr+0xc0>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d8d0:	e048      	b.n	800d964 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	7f9a      	ldrb	r2, [r3, #30]
 800d8d6:	4b27      	ldr	r3, [pc, #156]	; (800d974 <tcp_fasttmr+0xbc>)
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	429a      	cmp	r2, r3
 800d8dc:	d03f      	beq.n	800d95e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d8de:	4b25      	ldr	r3, [pc, #148]	; (800d974 <tcp_fasttmr+0xbc>)
 800d8e0:	781a      	ldrb	r2, [r3, #0]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	8b5b      	ldrh	r3, [r3, #26]
 800d8ea:	f003 0301 	and.w	r3, r3, #1
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d010      	beq.n	800d914 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	8b5b      	ldrh	r3, [r3, #26]
 800d8f6:	f043 0302 	orr.w	r3, r3, #2
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f004 f80f 	bl	8011924 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	8b5b      	ldrh	r3, [r3, #26]
 800d90a:	f023 0303 	bic.w	r3, r3, #3
 800d90e:	b29a      	uxth	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	8b5b      	ldrh	r3, [r3, #26]
 800d918:	f003 0308 	and.w	r3, r3, #8
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d009      	beq.n	800d934 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	8b5b      	ldrh	r3, [r3, #26]
 800d924:	f023 0308 	bic.w	r3, r3, #8
 800d928:	b29a      	uxth	r2, r3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f7ff f8be 	bl	800cab0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00a      	beq.n	800d958 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d942:	4b0e      	ldr	r3, [pc, #56]	; (800d97c <tcp_fasttmr+0xc4>)
 800d944:	2200      	movs	r2, #0
 800d946:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 f819 	bl	800d980 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d94e:	4b0b      	ldr	r3, [pc, #44]	; (800d97c <tcp_fasttmr+0xc4>)
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d000      	beq.n	800d958 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d956:	e7b8      	b.n	800d8ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	607b      	str	r3, [r7, #4]
 800d95c:	e002      	b.n	800d964 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	68db      	ldr	r3, [r3, #12]
 800d962:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d1b3      	bne.n	800d8d2 <tcp_fasttmr+0x1a>
    }
  }
}
 800d96a:	bf00      	nop
 800d96c:	bf00      	nop
 800d96e:	3708      	adds	r7, #8
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}
 800d974:	20000a16 	.word	0x20000a16
 800d978:	2000e004 	.word	0x2000e004
 800d97c:	2000e000 	.word	0x2000e000

0800d980 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d980:	b590      	push	{r4, r7, lr}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d109      	bne.n	800d9a2 <tcp_process_refused_data+0x22>
 800d98e:	4b37      	ldr	r3, [pc, #220]	; (800da6c <tcp_process_refused_data+0xec>)
 800d990:	f240 6209 	movw	r2, #1545	; 0x609
 800d994:	4936      	ldr	r1, [pc, #216]	; (800da70 <tcp_process_refused_data+0xf0>)
 800d996:	4837      	ldr	r0, [pc, #220]	; (800da74 <tcp_process_refused_data+0xf4>)
 800d998:	f007 fd64 	bl	8015464 <iprintf>
 800d99c:	f06f 030f 	mvn.w	r3, #15
 800d9a0:	e060      	b.n	800da64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9a6:	7b5b      	ldrb	r3, [r3, #13]
 800d9a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00b      	beq.n	800d9d8 <tcp_process_refused_data+0x58>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6918      	ldr	r0, [r3, #16]
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	6879      	ldr	r1, [r7, #4]
 800d9d0:	47a0      	blx	r4
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	73fb      	strb	r3, [r7, #15]
 800d9d6:	e007      	b.n	800d9e8 <tcp_process_refused_data+0x68>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	68ba      	ldr	r2, [r7, #8]
 800d9dc:	6879      	ldr	r1, [r7, #4]
 800d9de:	2000      	movs	r0, #0
 800d9e0:	f000 f8c2 	bl	800db68 <tcp_recv_null>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d9e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d12a      	bne.n	800da46 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d9f0:	7bbb      	ldrb	r3, [r7, #14]
 800d9f2:	f003 0320 	and.w	r3, r3, #32
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d033      	beq.n	800da62 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d9fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800da02:	d005      	beq.n	800da10 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800da08:	3301      	adds	r3, #1
 800da0a:	b29a      	uxth	r2, r3
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da16:	2b00      	cmp	r3, #0
 800da18:	d00b      	beq.n	800da32 <tcp_process_refused_data+0xb2>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6918      	ldr	r0, [r3, #16]
 800da24:	2300      	movs	r3, #0
 800da26:	2200      	movs	r2, #0
 800da28:	6879      	ldr	r1, [r7, #4]
 800da2a:	47a0      	blx	r4
 800da2c:	4603      	mov	r3, r0
 800da2e:	73fb      	strb	r3, [r7, #15]
 800da30:	e001      	b.n	800da36 <tcp_process_refused_data+0xb6>
 800da32:	2300      	movs	r3, #0
 800da34:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800da36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da3a:	f113 0f0d 	cmn.w	r3, #13
 800da3e:	d110      	bne.n	800da62 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800da40:	f06f 030c 	mvn.w	r3, #12
 800da44:	e00e      	b.n	800da64 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800da46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da4a:	f113 0f0d 	cmn.w	r3, #13
 800da4e:	d102      	bne.n	800da56 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800da50:	f06f 030c 	mvn.w	r3, #12
 800da54:	e006      	b.n	800da64 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68ba      	ldr	r2, [r7, #8]
 800da5a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800da5c:	f06f 0304 	mvn.w	r3, #4
 800da60:	e000      	b.n	800da64 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800da62:	2300      	movs	r3, #0
}
 800da64:	4618      	mov	r0, r3
 800da66:	3714      	adds	r7, #20
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd90      	pop	{r4, r7, pc}
 800da6c:	0801865c 	.word	0x0801865c
 800da70:	08018b6c 	.word	0x08018b6c
 800da74:	080186a0 	.word	0x080186a0

0800da78 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800da80:	e007      	b.n	800da92 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 f80a 	bl	800daa2 <tcp_seg_free>
    seg = next;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d1f4      	bne.n	800da82 <tcp_segs_free+0xa>
  }
}
 800da98:	bf00      	nop
 800da9a:	bf00      	nop
 800da9c:	3710      	adds	r7, #16
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b082      	sub	sp, #8
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d00c      	beq.n	800daca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d004      	beq.n	800dac2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fe fbc3 	bl	800c248 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dac2:	6879      	ldr	r1, [r7, #4]
 800dac4:	2003      	movs	r0, #3
 800dac6:	f7fd fdad 	bl	800b624 <memp_free>
  }
}
 800daca:	bf00      	nop
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
	...

0800dad4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d107      	bne.n	800daf6 <tcp_setprio+0x22>
 800dae6:	4b07      	ldr	r3, [pc, #28]	; (800db04 <tcp_setprio+0x30>)
 800dae8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800daec:	4906      	ldr	r1, [pc, #24]	; (800db08 <tcp_setprio+0x34>)
 800daee:	4807      	ldr	r0, [pc, #28]	; (800db0c <tcp_setprio+0x38>)
 800daf0:	f007 fcb8 	bl	8015464 <iprintf>
 800daf4:	e002      	b.n	800dafc <tcp_setprio+0x28>

  pcb->prio = prio;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	78fa      	ldrb	r2, [r7, #3]
 800dafa:	755a      	strb	r2, [r3, #21]
}
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
 800db02:	bf00      	nop
 800db04:	0801865c 	.word	0x0801865c
 800db08:	08018b94 	.word	0x08018b94
 800db0c:	080186a0 	.word	0x080186a0

0800db10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d106      	bne.n	800db2c <tcp_seg_copy+0x1c>
 800db1e:	4b0f      	ldr	r3, [pc, #60]	; (800db5c <tcp_seg_copy+0x4c>)
 800db20:	f240 6282 	movw	r2, #1666	; 0x682
 800db24:	490e      	ldr	r1, [pc, #56]	; (800db60 <tcp_seg_copy+0x50>)
 800db26:	480f      	ldr	r0, [pc, #60]	; (800db64 <tcp_seg_copy+0x54>)
 800db28:	f007 fc9c 	bl	8015464 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800db2c:	2003      	movs	r0, #3
 800db2e:	f7fd fd2d 	bl	800b58c <memp_malloc>
 800db32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d101      	bne.n	800db3e <tcp_seg_copy+0x2e>
    return NULL;
 800db3a:	2300      	movs	r3, #0
 800db3c:	e00a      	b.n	800db54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800db3e:	2210      	movs	r2, #16
 800db40:	6879      	ldr	r1, [r7, #4]
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f007 fc5e 	bl	8015404 <memcpy>
  pbuf_ref(cseg->p);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fe fc1b 	bl	800c388 <pbuf_ref>
  return cseg;
 800db52:	68fb      	ldr	r3, [r7, #12]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	0801865c 	.word	0x0801865c
 800db60:	08018bb0 	.word	0x08018bb0
 800db64:	080186a0 	.word	0x080186a0

0800db68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
 800db74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d109      	bne.n	800db90 <tcp_recv_null+0x28>
 800db7c:	4b12      	ldr	r3, [pc, #72]	; (800dbc8 <tcp_recv_null+0x60>)
 800db7e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800db82:	4912      	ldr	r1, [pc, #72]	; (800dbcc <tcp_recv_null+0x64>)
 800db84:	4812      	ldr	r0, [pc, #72]	; (800dbd0 <tcp_recv_null+0x68>)
 800db86:	f007 fc6d 	bl	8015464 <iprintf>
 800db8a:	f06f 030f 	mvn.w	r3, #15
 800db8e:	e016      	b.n	800dbbe <tcp_recv_null+0x56>

  if (p != NULL) {
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d009      	beq.n	800dbaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	891b      	ldrh	r3, [r3, #8]
 800db9a:	4619      	mov	r1, r3
 800db9c:	68b8      	ldr	r0, [r7, #8]
 800db9e:	f7ff fab5 	bl	800d10c <tcp_recved>
    pbuf_free(p);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f7fe fb50 	bl	800c248 <pbuf_free>
 800dba8:	e008      	b.n	800dbbc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dbaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d104      	bne.n	800dbbc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dbb2:	68b8      	ldr	r0, [r7, #8]
 800dbb4:	f7fe ffe6 	bl	800cb84 <tcp_close>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	e000      	b.n	800dbbe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	0801865c 	.word	0x0801865c
 800dbcc:	08018bcc 	.word	0x08018bcc
 800dbd0:	080186a0 	.word	0x080186a0

0800dbd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b086      	sub	sp, #24
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	4603      	mov	r3, r0
 800dbdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dbde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	db01      	blt.n	800dbea <tcp_kill_prio+0x16>
 800dbe6:	79fb      	ldrb	r3, [r7, #7]
 800dbe8:	e000      	b.n	800dbec <tcp_kill_prio+0x18>
 800dbea:	237f      	movs	r3, #127	; 0x7f
 800dbec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dbee:	7afb      	ldrb	r3, [r7, #11]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d034      	beq.n	800dc5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dbf4:	7afb      	ldrb	r3, [r7, #11]
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc02:	4b19      	ldr	r3, [pc, #100]	; (800dc68 <tcp_kill_prio+0x94>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	617b      	str	r3, [r7, #20]
 800dc08:	e01f      	b.n	800dc4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	7d5b      	ldrb	r3, [r3, #21]
 800dc0e:	7afa      	ldrb	r2, [r7, #11]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d80c      	bhi.n	800dc2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dc18:	7afa      	ldrb	r2, [r7, #11]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d112      	bne.n	800dc44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dc1e:	4b13      	ldr	r3, [pc, #76]	; (800dc6c <tcp_kill_prio+0x98>)
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	6a1b      	ldr	r3, [r3, #32]
 800dc26:	1ad3      	subs	r3, r2, r3
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d80a      	bhi.n	800dc44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dc2e:	4b0f      	ldr	r3, [pc, #60]	; (800dc6c <tcp_kill_prio+0x98>)
 800dc30:	681a      	ldr	r2, [r3, #0]
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	6a1b      	ldr	r3, [r3, #32]
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	7d5b      	ldrb	r3, [r3, #21]
 800dc42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	617b      	str	r3, [r7, #20]
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1dc      	bne.n	800dc0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d004      	beq.n	800dc60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dc56:	6938      	ldr	r0, [r7, #16]
 800dc58:	f7ff f87e 	bl	800cd58 <tcp_abort>
 800dc5c:	e000      	b.n	800dc60 <tcp_kill_prio+0x8c>
    return;
 800dc5e:	bf00      	nop
  }
}
 800dc60:	3718      	adds	r7, #24
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	2000e004 	.word	0x2000e004
 800dc6c:	2000e008 	.word	0x2000e008

0800dc70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	4603      	mov	r3, r0
 800dc78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dc7a:	79fb      	ldrb	r3, [r7, #7]
 800dc7c:	2b08      	cmp	r3, #8
 800dc7e:	d009      	beq.n	800dc94 <tcp_kill_state+0x24>
 800dc80:	79fb      	ldrb	r3, [r7, #7]
 800dc82:	2b09      	cmp	r3, #9
 800dc84:	d006      	beq.n	800dc94 <tcp_kill_state+0x24>
 800dc86:	4b1a      	ldr	r3, [pc, #104]	; (800dcf0 <tcp_kill_state+0x80>)
 800dc88:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800dc8c:	4919      	ldr	r1, [pc, #100]	; (800dcf4 <tcp_kill_state+0x84>)
 800dc8e:	481a      	ldr	r0, [pc, #104]	; (800dcf8 <tcp_kill_state+0x88>)
 800dc90:	f007 fbe8 	bl	8015464 <iprintf>

  inactivity = 0;
 800dc94:	2300      	movs	r3, #0
 800dc96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc9c:	4b17      	ldr	r3, [pc, #92]	; (800dcfc <tcp_kill_state+0x8c>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	617b      	str	r3, [r7, #20]
 800dca2:	e017      	b.n	800dcd4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	7d1b      	ldrb	r3, [r3, #20]
 800dca8:	79fa      	ldrb	r2, [r7, #7]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d10f      	bne.n	800dcce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dcae:	4b14      	ldr	r3, [pc, #80]	; (800dd00 <tcp_kill_state+0x90>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	6a1b      	ldr	r3, [r3, #32]
 800dcb6:	1ad3      	subs	r3, r2, r3
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d807      	bhi.n	800dcce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dcbe:	4b10      	ldr	r3, [pc, #64]	; (800dd00 <tcp_kill_state+0x90>)
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	6a1b      	ldr	r3, [r3, #32]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	617b      	str	r3, [r7, #20]
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1e4      	bne.n	800dca4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d003      	beq.n	800dce8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dce0:	2100      	movs	r1, #0
 800dce2:	6938      	ldr	r0, [r7, #16]
 800dce4:	f7fe ff7a 	bl	800cbdc <tcp_abandon>
  }
}
 800dce8:	bf00      	nop
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}
 800dcf0:	0801865c 	.word	0x0801865c
 800dcf4:	08018be8 	.word	0x08018be8
 800dcf8:	080186a0 	.word	0x080186a0
 800dcfc:	2000e004 	.word	0x2000e004
 800dd00:	2000e008 	.word	0x2000e008

0800dd04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd12:	4b12      	ldr	r3, [pc, #72]	; (800dd5c <tcp_kill_timewait+0x58>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	e012      	b.n	800dd40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd1a:	4b11      	ldr	r3, [pc, #68]	; (800dd60 <tcp_kill_timewait+0x5c>)
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6a1b      	ldr	r3, [r3, #32]
 800dd22:	1ad3      	subs	r3, r2, r3
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d807      	bhi.n	800dd3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800dd2a:	4b0d      	ldr	r3, [pc, #52]	; (800dd60 <tcp_kill_timewait+0x5c>)
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	1ad3      	subs	r3, r2, r3
 800dd34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	60fb      	str	r3, [r7, #12]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1e9      	bne.n	800dd1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d002      	beq.n	800dd52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dd4c:	68b8      	ldr	r0, [r7, #8]
 800dd4e:	f7ff f803 	bl	800cd58 <tcp_abort>
  }
}
 800dd52:	bf00      	nop
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	2000e014 	.word	0x2000e014
 800dd60:	2000e008 	.word	0x2000e008

0800dd64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800dd6a:	4b10      	ldr	r3, [pc, #64]	; (800ddac <tcp_handle_closepend+0x48>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dd70:	e014      	b.n	800dd9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	8b5b      	ldrh	r3, [r3, #26]
 800dd7c:	f003 0308 	and.w	r3, r3, #8
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d009      	beq.n	800dd98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	8b5b      	ldrh	r3, [r3, #26]
 800dd88:	f023 0308 	bic.w	r3, r3, #8
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7fe fe8c 	bl	800cab0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1e7      	bne.n	800dd72 <tcp_handle_closepend+0xe>
  }
}
 800dda2:	bf00      	nop
 800dda4:	bf00      	nop
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	2000e004 	.word	0x2000e004

0800ddb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddba:	2001      	movs	r0, #1
 800ddbc:	f7fd fbe6 	bl	800b58c <memp_malloc>
 800ddc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d126      	bne.n	800de16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ddc8:	f7ff ffcc 	bl	800dd64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ddcc:	f7ff ff9a 	bl	800dd04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddd0:	2001      	movs	r0, #1
 800ddd2:	f7fd fbdb 	bl	800b58c <memp_malloc>
 800ddd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d11b      	bne.n	800de16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ddde:	2009      	movs	r0, #9
 800dde0:	f7ff ff46 	bl	800dc70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dde4:	2001      	movs	r0, #1
 800dde6:	f7fd fbd1 	bl	800b58c <memp_malloc>
 800ddea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d111      	bne.n	800de16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ddf2:	2008      	movs	r0, #8
 800ddf4:	f7ff ff3c 	bl	800dc70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ddf8:	2001      	movs	r0, #1
 800ddfa:	f7fd fbc7 	bl	800b58c <memp_malloc>
 800ddfe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d107      	bne.n	800de16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800de06:	79fb      	ldrb	r3, [r7, #7]
 800de08:	4618      	mov	r0, r3
 800de0a:	f7ff fee3 	bl	800dbd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de0e:	2001      	movs	r0, #1
 800de10:	f7fd fbbc 	bl	800b58c <memp_malloc>
 800de14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d03f      	beq.n	800de9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800de1c:	229c      	movs	r2, #156	; 0x9c
 800de1e:	2100      	movs	r1, #0
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f007 fb17 	bl	8015454 <memset>
    pcb->prio = prio;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	79fa      	ldrb	r2, [r7, #7]
 800de2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800de32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800de3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	22ff      	movs	r2, #255	; 0xff
 800de4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800de52:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2206      	movs	r2, #6
 800de58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2206      	movs	r2, #6
 800de60:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de68:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2201      	movs	r2, #1
 800de6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800de72:	4b0d      	ldr	r3, [pc, #52]	; (800dea8 <tcp_alloc+0xf8>)
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800de7a:	4b0c      	ldr	r3, [pc, #48]	; (800deac <tcp_alloc+0xfc>)
 800de7c:	781a      	ldrb	r2, [r3, #0]
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800de88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	4a08      	ldr	r2, [pc, #32]	; (800deb0 <tcp_alloc+0x100>)
 800de90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	4a07      	ldr	r2, [pc, #28]	; (800deb4 <tcp_alloc+0x104>)
 800de98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800de9c:	68fb      	ldr	r3, [r7, #12]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	2000e008 	.word	0x2000e008
 800deac:	20000a16 	.word	0x20000a16
 800deb0:	0800db69 	.word	0x0800db69
 800deb4:	006ddd00 	.word	0x006ddd00

0800deb8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	4603      	mov	r3, r0
 800dec0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800dec2:	2040      	movs	r0, #64	; 0x40
 800dec4:	f7ff ff74 	bl	800ddb0 <tcp_alloc>
 800dec8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800deca:	68fb      	ldr	r3, [r7, #12]
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	683a      	ldr	r2, [r7, #0]
 800dee8:	611a      	str	r2, [r3, #16]
  }
}
 800deea:	bf00      	nop
 800deec:	370c      	adds	r7, #12
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr
	...

0800def8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d00e      	beq.n	800df26 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	7d1b      	ldrb	r3, [r3, #20]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d106      	bne.n	800df1e <tcp_recv+0x26>
 800df10:	4b07      	ldr	r3, [pc, #28]	; (800df30 <tcp_recv+0x38>)
 800df12:	f240 72df 	movw	r2, #2015	; 0x7df
 800df16:	4907      	ldr	r1, [pc, #28]	; (800df34 <tcp_recv+0x3c>)
 800df18:	4807      	ldr	r0, [pc, #28]	; (800df38 <tcp_recv+0x40>)
 800df1a:	f007 faa3 	bl	8015464 <iprintf>
    pcb->recv = recv;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	683a      	ldr	r2, [r7, #0]
 800df22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800df26:	bf00      	nop
 800df28:	3708      	adds	r7, #8
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	0801865c 	.word	0x0801865c
 800df34:	08018bf8 	.word	0x08018bf8
 800df38:	080186a0 	.word	0x080186a0

0800df3c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00e      	beq.n	800df6a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	7d1b      	ldrb	r3, [r3, #20]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d106      	bne.n	800df62 <tcp_sent+0x26>
 800df54:	4b07      	ldr	r3, [pc, #28]	; (800df74 <tcp_sent+0x38>)
 800df56:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800df5a:	4907      	ldr	r1, [pc, #28]	; (800df78 <tcp_sent+0x3c>)
 800df5c:	4807      	ldr	r0, [pc, #28]	; (800df7c <tcp_sent+0x40>)
 800df5e:	f007 fa81 	bl	8015464 <iprintf>
    pcb->sent = sent;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	683a      	ldr	r2, [r7, #0]
 800df66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800df6a:	bf00      	nop
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	0801865c 	.word	0x0801865c
 800df78:	08018c20 	.word	0x08018c20
 800df7c:	080186a0 	.word	0x080186a0

0800df80 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00e      	beq.n	800dfae <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7d1b      	ldrb	r3, [r3, #20]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d106      	bne.n	800dfa6 <tcp_err+0x26>
 800df98:	4b07      	ldr	r3, [pc, #28]	; (800dfb8 <tcp_err+0x38>)
 800df9a:	f640 020d 	movw	r2, #2061	; 0x80d
 800df9e:	4907      	ldr	r1, [pc, #28]	; (800dfbc <tcp_err+0x3c>)
 800dfa0:	4807      	ldr	r0, [pc, #28]	; (800dfc0 <tcp_err+0x40>)
 800dfa2:	f007 fa5f 	bl	8015464 <iprintf>
    pcb->errf = err;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800dfae:	bf00      	nop
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	0801865c 	.word	0x0801865c
 800dfbc:	08018c48 	.word	0x08018c48
 800dfc0:	080186a0 	.word	0x080186a0

0800dfc4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b085      	sub	sp, #20
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d008      	beq.n	800dfe6 <tcp_accept+0x22>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	7d1b      	ldrb	r3, [r3, #20]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d104      	bne.n	800dfe6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	683a      	ldr	r2, [r7, #0]
 800dfe4:	619a      	str	r2, [r3, #24]
  }
}
 800dfe6:	bf00      	nop
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
	...

0800dff4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	4613      	mov	r3, r2
 800e000:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d107      	bne.n	800e018 <tcp_poll+0x24>
 800e008:	4b0e      	ldr	r3, [pc, #56]	; (800e044 <tcp_poll+0x50>)
 800e00a:	f640 023d 	movw	r2, #2109	; 0x83d
 800e00e:	490e      	ldr	r1, [pc, #56]	; (800e048 <tcp_poll+0x54>)
 800e010:	480e      	ldr	r0, [pc, #56]	; (800e04c <tcp_poll+0x58>)
 800e012:	f007 fa27 	bl	8015464 <iprintf>
 800e016:	e011      	b.n	800e03c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	7d1b      	ldrb	r3, [r3, #20]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d106      	bne.n	800e02e <tcp_poll+0x3a>
 800e020:	4b08      	ldr	r3, [pc, #32]	; (800e044 <tcp_poll+0x50>)
 800e022:	f640 023e 	movw	r2, #2110	; 0x83e
 800e026:	490a      	ldr	r1, [pc, #40]	; (800e050 <tcp_poll+0x5c>)
 800e028:	4808      	ldr	r0, [pc, #32]	; (800e04c <tcp_poll+0x58>)
 800e02a:	f007 fa1b 	bl	8015464 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	79fa      	ldrb	r2, [r7, #7]
 800e03a:	775a      	strb	r2, [r3, #29]
}
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	0801865c 	.word	0x0801865c
 800e048:	08018c70 	.word	0x08018c70
 800e04c:	080186a0 	.word	0x080186a0
 800e050:	08018c88 	.word	0x08018c88

0800e054 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d107      	bne.n	800e072 <tcp_pcb_purge+0x1e>
 800e062:	4b21      	ldr	r3, [pc, #132]	; (800e0e8 <tcp_pcb_purge+0x94>)
 800e064:	f640 0251 	movw	r2, #2129	; 0x851
 800e068:	4920      	ldr	r1, [pc, #128]	; (800e0ec <tcp_pcb_purge+0x98>)
 800e06a:	4821      	ldr	r0, [pc, #132]	; (800e0f0 <tcp_pcb_purge+0x9c>)
 800e06c:	f007 f9fa 	bl	8015464 <iprintf>
 800e070:	e037      	b.n	800e0e2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	7d1b      	ldrb	r3, [r3, #20]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d033      	beq.n	800e0e2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e07e:	2b0a      	cmp	r3, #10
 800e080:	d02f      	beq.n	800e0e2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e086:	2b01      	cmp	r3, #1
 800e088:	d02b      	beq.n	800e0e2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d007      	beq.n	800e0a2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e096:	4618      	mov	r0, r3
 800e098:	f7fe f8d6 	bl	800c248 <pbuf_free>
      pcb->refused_data = NULL;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f986 	bl	800e3bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0b6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7ff fcdb 	bl	800da78 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7ff fcd6 	bl	800da78 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	0801865c 	.word	0x0801865c
 800e0ec:	08018ca8 	.word	0x08018ca8
 800e0f0:	080186a0 	.word	0x080186a0

0800e0f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d106      	bne.n	800e112 <tcp_pcb_remove+0x1e>
 800e104:	4b3e      	ldr	r3, [pc, #248]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e106:	f640 0283 	movw	r2, #2179	; 0x883
 800e10a:	493e      	ldr	r1, [pc, #248]	; (800e204 <tcp_pcb_remove+0x110>)
 800e10c:	483e      	ldr	r0, [pc, #248]	; (800e208 <tcp_pcb_remove+0x114>)
 800e10e:	f007 f9a9 	bl	8015464 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d106      	bne.n	800e126 <tcp_pcb_remove+0x32>
 800e118:	4b39      	ldr	r3, [pc, #228]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e11a:	f640 0284 	movw	r2, #2180	; 0x884
 800e11e:	493b      	ldr	r1, [pc, #236]	; (800e20c <tcp_pcb_remove+0x118>)
 800e120:	4839      	ldr	r0, [pc, #228]	; (800e208 <tcp_pcb_remove+0x114>)
 800e122:	f007 f99f 	bl	8015464 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	683a      	ldr	r2, [r7, #0]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d105      	bne.n	800e13c <tcp_pcb_remove+0x48>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68da      	ldr	r2, [r3, #12]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	601a      	str	r2, [r3, #0]
 800e13a:	e013      	b.n	800e164 <tcp_pcb_remove+0x70>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	60fb      	str	r3, [r7, #12]
 800e142:	e00c      	b.n	800e15e <tcp_pcb_remove+0x6a>
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	68db      	ldr	r3, [r3, #12]
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d104      	bne.n	800e158 <tcp_pcb_remove+0x64>
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	68da      	ldr	r2, [r3, #12]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	60da      	str	r2, [r3, #12]
 800e156:	e005      	b.n	800e164 <tcp_pcb_remove+0x70>
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	68db      	ldr	r3, [r3, #12]
 800e15c:	60fb      	str	r3, [r7, #12]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d1ef      	bne.n	800e144 <tcp_pcb_remove+0x50>
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	2200      	movs	r2, #0
 800e168:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e16a:	6838      	ldr	r0, [r7, #0]
 800e16c:	f7ff ff72 	bl	800e054 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	7d1b      	ldrb	r3, [r3, #20]
 800e174:	2b0a      	cmp	r3, #10
 800e176:	d013      	beq.n	800e1a0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d00f      	beq.n	800e1a0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	8b5b      	ldrh	r3, [r3, #26]
 800e184:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d009      	beq.n	800e1a0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	8b5b      	ldrh	r3, [r3, #26]
 800e190:	f043 0302 	orr.w	r3, r3, #2
 800e194:	b29a      	uxth	r2, r3
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e19a:	6838      	ldr	r0, [r7, #0]
 800e19c:	f003 fbc2 	bl	8011924 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	7d1b      	ldrb	r3, [r3, #20]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d020      	beq.n	800e1ea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d006      	beq.n	800e1be <tcp_pcb_remove+0xca>
 800e1b0:	4b13      	ldr	r3, [pc, #76]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e1b2:	f640 0293 	movw	r2, #2195	; 0x893
 800e1b6:	4916      	ldr	r1, [pc, #88]	; (800e210 <tcp_pcb_remove+0x11c>)
 800e1b8:	4813      	ldr	r0, [pc, #76]	; (800e208 <tcp_pcb_remove+0x114>)
 800e1ba:	f007 f953 	bl	8015464 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d006      	beq.n	800e1d4 <tcp_pcb_remove+0xe0>
 800e1c6:	4b0e      	ldr	r3, [pc, #56]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e1c8:	f640 0294 	movw	r2, #2196	; 0x894
 800e1cc:	4911      	ldr	r1, [pc, #68]	; (800e214 <tcp_pcb_remove+0x120>)
 800e1ce:	480e      	ldr	r0, [pc, #56]	; (800e208 <tcp_pcb_remove+0x114>)
 800e1d0:	f007 f948 	bl	8015464 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d006      	beq.n	800e1ea <tcp_pcb_remove+0xf6>
 800e1dc:	4b08      	ldr	r3, [pc, #32]	; (800e200 <tcp_pcb_remove+0x10c>)
 800e1de:	f640 0296 	movw	r2, #2198	; 0x896
 800e1e2:	490d      	ldr	r1, [pc, #52]	; (800e218 <tcp_pcb_remove+0x124>)
 800e1e4:	4808      	ldr	r0, [pc, #32]	; (800e208 <tcp_pcb_remove+0x114>)
 800e1e6:	f007 f93d 	bl	8015464 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e1f6:	bf00      	nop
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	0801865c 	.word	0x0801865c
 800e204:	08018cc4 	.word	0x08018cc4
 800e208:	080186a0 	.word	0x080186a0
 800e20c:	08018ce0 	.word	0x08018ce0
 800e210:	08018d00 	.word	0x08018d00
 800e214:	08018d18 	.word	0x08018d18
 800e218:	08018d34 	.word	0x08018d34

0800e21c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b082      	sub	sp, #8
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d106      	bne.n	800e238 <tcp_next_iss+0x1c>
 800e22a:	4b0a      	ldr	r3, [pc, #40]	; (800e254 <tcp_next_iss+0x38>)
 800e22c:	f640 02af 	movw	r2, #2223	; 0x8af
 800e230:	4909      	ldr	r1, [pc, #36]	; (800e258 <tcp_next_iss+0x3c>)
 800e232:	480a      	ldr	r0, [pc, #40]	; (800e25c <tcp_next_iss+0x40>)
 800e234:	f007 f916 	bl	8015464 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e238:	4b09      	ldr	r3, [pc, #36]	; (800e260 <tcp_next_iss+0x44>)
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	4b09      	ldr	r3, [pc, #36]	; (800e264 <tcp_next_iss+0x48>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	4413      	add	r3, r2
 800e242:	4a07      	ldr	r2, [pc, #28]	; (800e260 <tcp_next_iss+0x44>)
 800e244:	6013      	str	r3, [r2, #0]
  return iss;
 800e246:	4b06      	ldr	r3, [pc, #24]	; (800e260 <tcp_next_iss+0x44>)
 800e248:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3708      	adds	r7, #8
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop
 800e254:	0801865c 	.word	0x0801865c
 800e258:	08018d4c 	.word	0x08018d4c
 800e25c:	080186a0 	.word	0x080186a0
 800e260:	200004b4 	.word	0x200004b4
 800e264:	2000e008 	.word	0x2000e008

0800e268 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	60b9      	str	r1, [r7, #8]
 800e272:	607a      	str	r2, [r7, #4]
 800e274:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d106      	bne.n	800e28a <tcp_eff_send_mss_netif+0x22>
 800e27c:	4b14      	ldr	r3, [pc, #80]	; (800e2d0 <tcp_eff_send_mss_netif+0x68>)
 800e27e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e282:	4914      	ldr	r1, [pc, #80]	; (800e2d4 <tcp_eff_send_mss_netif+0x6c>)
 800e284:	4814      	ldr	r0, [pc, #80]	; (800e2d8 <tcp_eff_send_mss_netif+0x70>)
 800e286:	f007 f8ed 	bl	8015464 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d101      	bne.n	800e294 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e290:	89fb      	ldrh	r3, [r7, #14]
 800e292:	e019      	b.n	800e2c8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e298:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e29a:	8afb      	ldrh	r3, [r7, #22]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d012      	beq.n	800e2c6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e2a0:	2328      	movs	r3, #40	; 0x28
 800e2a2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e2a4:	8afa      	ldrh	r2, [r7, #22]
 800e2a6:	8abb      	ldrh	r3, [r7, #20]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d904      	bls.n	800e2b6 <tcp_eff_send_mss_netif+0x4e>
 800e2ac:	8afa      	ldrh	r2, [r7, #22]
 800e2ae:	8abb      	ldrh	r3, [r7, #20]
 800e2b0:	1ad3      	subs	r3, r2, r3
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	e000      	b.n	800e2b8 <tcp_eff_send_mss_netif+0x50>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e2ba:	8a7a      	ldrh	r2, [r7, #18]
 800e2bc:	89fb      	ldrh	r3, [r7, #14]
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	bf28      	it	cs
 800e2c2:	4613      	movcs	r3, r2
 800e2c4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e2c6:	89fb      	ldrh	r3, [r7, #14]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3718      	adds	r7, #24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	0801865c 	.word	0x0801865c
 800e2d4:	08018d68 	.word	0x08018d68
 800e2d8:	080186a0 	.word	0x080186a0

0800e2dc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d119      	bne.n	800e324 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e2f0:	4b10      	ldr	r3, [pc, #64]	; (800e334 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e2f2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e2f6:	4910      	ldr	r1, [pc, #64]	; (800e338 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e2f8:	4810      	ldr	r0, [pc, #64]	; (800e33c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e2fa:	f007 f8b3 	bl	8015464 <iprintf>

  while (pcb != NULL) {
 800e2fe:	e011      	b.n	800e324 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681a      	ldr	r2, [r3, #0]
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d108      	bne.n	800e31e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e312:	68f8      	ldr	r0, [r7, #12]
 800e314:	f7fe fd20 	bl	800cd58 <tcp_abort>
      pcb = next;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	60fb      	str	r3, [r7, #12]
 800e31c:	e002      	b.n	800e324 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1ea      	bne.n	800e300 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e32a:	bf00      	nop
 800e32c:	bf00      	nop
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	0801865c 	.word	0x0801865c
 800e338:	08018d90 	.word	0x08018d90
 800e33c:	080186a0 	.word	0x080186a0

0800e340 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d02a      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d026      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e358:	4b15      	ldr	r3, [pc, #84]	; (800e3b0 <tcp_netif_ip_addr_changed+0x70>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4619      	mov	r1, r3
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f7ff ffbc 	bl	800e2dc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e364:	4b13      	ldr	r3, [pc, #76]	; (800e3b4 <tcp_netif_ip_addr_changed+0x74>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4619      	mov	r1, r3
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff ffb6 	bl	800e2dc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d017      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d013      	beq.n	800e3a6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e37e:	4b0e      	ldr	r3, [pc, #56]	; (800e3b8 <tcp_netif_ip_addr_changed+0x78>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	e00c      	b.n	800e3a0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	429a      	cmp	r2, r3
 800e390:	d103      	bne.n	800e39a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	60fb      	str	r3, [r7, #12]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1ef      	bne.n	800e386 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e3a6:	bf00      	nop
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	2000e004 	.word	0x2000e004
 800e3b4:	2000e010 	.word	0x2000e010
 800e3b8:	2000e00c 	.word	0x2000e00c

0800e3bc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d007      	beq.n	800e3dc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7ff fb51 	bl	800da78 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e3dc:	bf00      	nop
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e3e4:	b590      	push	{r4, r7, lr}
 800e3e6:	b08d      	sub	sp, #52	; 0x34
 800e3e8:	af04      	add	r7, sp, #16
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d105      	bne.n	800e400 <tcp_input+0x1c>
 800e3f4:	4b9b      	ldr	r3, [pc, #620]	; (800e664 <tcp_input+0x280>)
 800e3f6:	2283      	movs	r2, #131	; 0x83
 800e3f8:	499b      	ldr	r1, [pc, #620]	; (800e668 <tcp_input+0x284>)
 800e3fa:	489c      	ldr	r0, [pc, #624]	; (800e66c <tcp_input+0x288>)
 800e3fc:	f007 f832 	bl	8015464 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	4a9a      	ldr	r2, [pc, #616]	; (800e670 <tcp_input+0x28c>)
 800e406:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	895b      	ldrh	r3, [r3, #10]
 800e40c:	2b13      	cmp	r3, #19
 800e40e:	f240 83c4 	bls.w	800eb9a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e412:	4b98      	ldr	r3, [pc, #608]	; (800e674 <tcp_input+0x290>)
 800e414:	695b      	ldr	r3, [r3, #20]
 800e416:	4a97      	ldr	r2, [pc, #604]	; (800e674 <tcp_input+0x290>)
 800e418:	6812      	ldr	r2, [r2, #0]
 800e41a:	4611      	mov	r1, r2
 800e41c:	4618      	mov	r0, r3
 800e41e:	f006 f86b 	bl	80144f8 <ip4_addr_isbroadcast_u32>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	f040 83ba 	bne.w	800eb9e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e42a:	4b92      	ldr	r3, [pc, #584]	; (800e674 <tcp_input+0x290>)
 800e42c:	695b      	ldr	r3, [r3, #20]
 800e42e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e432:	2be0      	cmp	r3, #224	; 0xe0
 800e434:	f000 83b3 	beq.w	800eb9e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e438:	4b8d      	ldr	r3, [pc, #564]	; (800e670 <tcp_input+0x28c>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	899b      	ldrh	r3, [r3, #12]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	4618      	mov	r0, r3
 800e442:	f7fc fb6f 	bl	800ab24 <lwip_htons>
 800e446:	4603      	mov	r3, r0
 800e448:	0b1b      	lsrs	r3, r3, #12
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e452:	7cbb      	ldrb	r3, [r7, #18]
 800e454:	2b13      	cmp	r3, #19
 800e456:	f240 83a4 	bls.w	800eba2 <tcp_input+0x7be>
 800e45a:	7cbb      	ldrb	r3, [r7, #18]
 800e45c:	b29a      	uxth	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	891b      	ldrh	r3, [r3, #8]
 800e462:	429a      	cmp	r2, r3
 800e464:	f200 839d 	bhi.w	800eba2 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e468:	7cbb      	ldrb	r3, [r7, #18]
 800e46a:	b29b      	uxth	r3, r3
 800e46c:	3b14      	subs	r3, #20
 800e46e:	b29a      	uxth	r2, r3
 800e470:	4b81      	ldr	r3, [pc, #516]	; (800e678 <tcp_input+0x294>)
 800e472:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e474:	4b81      	ldr	r3, [pc, #516]	; (800e67c <tcp_input+0x298>)
 800e476:	2200      	movs	r2, #0
 800e478:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	895a      	ldrh	r2, [r3, #10]
 800e47e:	7cbb      	ldrb	r3, [r7, #18]
 800e480:	b29b      	uxth	r3, r3
 800e482:	429a      	cmp	r2, r3
 800e484:	d309      	bcc.n	800e49a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e486:	4b7c      	ldr	r3, [pc, #496]	; (800e678 <tcp_input+0x294>)
 800e488:	881a      	ldrh	r2, [r3, #0]
 800e48a:	4b7d      	ldr	r3, [pc, #500]	; (800e680 <tcp_input+0x29c>)
 800e48c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e48e:	7cbb      	ldrb	r3, [r7, #18]
 800e490:	4619      	mov	r1, r3
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7fd fe52 	bl	800c13c <pbuf_remove_header>
 800e498:	e04e      	b.n	800e538 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d105      	bne.n	800e4ae <tcp_input+0xca>
 800e4a2:	4b70      	ldr	r3, [pc, #448]	; (800e664 <tcp_input+0x280>)
 800e4a4:	22c2      	movs	r2, #194	; 0xc2
 800e4a6:	4977      	ldr	r1, [pc, #476]	; (800e684 <tcp_input+0x2a0>)
 800e4a8:	4870      	ldr	r0, [pc, #448]	; (800e66c <tcp_input+0x288>)
 800e4aa:	f006 ffdb 	bl	8015464 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e4ae:	2114      	movs	r1, #20
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7fd fe43 	bl	800c13c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	895a      	ldrh	r2, [r3, #10]
 800e4ba:	4b71      	ldr	r3, [pc, #452]	; (800e680 <tcp_input+0x29c>)
 800e4bc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e4be:	4b6e      	ldr	r3, [pc, #440]	; (800e678 <tcp_input+0x294>)
 800e4c0:	881a      	ldrh	r2, [r3, #0]
 800e4c2:	4b6f      	ldr	r3, [pc, #444]	; (800e680 <tcp_input+0x29c>)
 800e4c4:	881b      	ldrh	r3, [r3, #0]
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e4ca:	4b6d      	ldr	r3, [pc, #436]	; (800e680 <tcp_input+0x29c>)
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f7fd fe33 	bl	800c13c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	895b      	ldrh	r3, [r3, #10]
 800e4dc:	8a3a      	ldrh	r2, [r7, #16]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	f200 8361 	bhi.w	800eba6 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	4a64      	ldr	r2, [pc, #400]	; (800e67c <tcp_input+0x298>)
 800e4ec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	8a3a      	ldrh	r2, [r7, #16]
 800e4f4:	4611      	mov	r1, r2
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fd fe20 	bl	800c13c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	891a      	ldrh	r2, [r3, #8]
 800e500:	8a3b      	ldrh	r3, [r7, #16]
 800e502:	1ad3      	subs	r3, r2, r3
 800e504:	b29a      	uxth	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	895b      	ldrh	r3, [r3, #10]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d005      	beq.n	800e51e <tcp_input+0x13a>
 800e512:	4b54      	ldr	r3, [pc, #336]	; (800e664 <tcp_input+0x280>)
 800e514:	22df      	movs	r2, #223	; 0xdf
 800e516:	495c      	ldr	r1, [pc, #368]	; (800e688 <tcp_input+0x2a4>)
 800e518:	4854      	ldr	r0, [pc, #336]	; (800e66c <tcp_input+0x288>)
 800e51a:	f006 ffa3 	bl	8015464 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	891a      	ldrh	r2, [r3, #8]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	891b      	ldrh	r3, [r3, #8]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d005      	beq.n	800e538 <tcp_input+0x154>
 800e52c:	4b4d      	ldr	r3, [pc, #308]	; (800e664 <tcp_input+0x280>)
 800e52e:	22e0      	movs	r2, #224	; 0xe0
 800e530:	4956      	ldr	r1, [pc, #344]	; (800e68c <tcp_input+0x2a8>)
 800e532:	484e      	ldr	r0, [pc, #312]	; (800e66c <tcp_input+0x288>)
 800e534:	f006 ff96 	bl	8015464 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e538:	4b4d      	ldr	r3, [pc, #308]	; (800e670 <tcp_input+0x28c>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	881b      	ldrh	r3, [r3, #0]
 800e53e:	b29b      	uxth	r3, r3
 800e540:	4a4b      	ldr	r2, [pc, #300]	; (800e670 <tcp_input+0x28c>)
 800e542:	6814      	ldr	r4, [r2, #0]
 800e544:	4618      	mov	r0, r3
 800e546:	f7fc faed 	bl	800ab24 <lwip_htons>
 800e54a:	4603      	mov	r3, r0
 800e54c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e54e:	4b48      	ldr	r3, [pc, #288]	; (800e670 <tcp_input+0x28c>)
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	885b      	ldrh	r3, [r3, #2]
 800e554:	b29b      	uxth	r3, r3
 800e556:	4a46      	ldr	r2, [pc, #280]	; (800e670 <tcp_input+0x28c>)
 800e558:	6814      	ldr	r4, [r2, #0]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fc fae2 	bl	800ab24 <lwip_htons>
 800e560:	4603      	mov	r3, r0
 800e562:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e564:	4b42      	ldr	r3, [pc, #264]	; (800e670 <tcp_input+0x28c>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	4a41      	ldr	r2, [pc, #260]	; (800e670 <tcp_input+0x28c>)
 800e56c:	6814      	ldr	r4, [r2, #0]
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fc faed 	bl	800ab4e <lwip_htonl>
 800e574:	4603      	mov	r3, r0
 800e576:	6063      	str	r3, [r4, #4]
 800e578:	6863      	ldr	r3, [r4, #4]
 800e57a:	4a45      	ldr	r2, [pc, #276]	; (800e690 <tcp_input+0x2ac>)
 800e57c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e57e:	4b3c      	ldr	r3, [pc, #240]	; (800e670 <tcp_input+0x28c>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	689b      	ldr	r3, [r3, #8]
 800e584:	4a3a      	ldr	r2, [pc, #232]	; (800e670 <tcp_input+0x28c>)
 800e586:	6814      	ldr	r4, [r2, #0]
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fc fae0 	bl	800ab4e <lwip_htonl>
 800e58e:	4603      	mov	r3, r0
 800e590:	60a3      	str	r3, [r4, #8]
 800e592:	68a3      	ldr	r3, [r4, #8]
 800e594:	4a3f      	ldr	r2, [pc, #252]	; (800e694 <tcp_input+0x2b0>)
 800e596:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e598:	4b35      	ldr	r3, [pc, #212]	; (800e670 <tcp_input+0x28c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	89db      	ldrh	r3, [r3, #14]
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	4a33      	ldr	r2, [pc, #204]	; (800e670 <tcp_input+0x28c>)
 800e5a2:	6814      	ldr	r4, [r2, #0]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fc fabd 	bl	800ab24 <lwip_htons>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e5ae:	4b30      	ldr	r3, [pc, #192]	; (800e670 <tcp_input+0x28c>)
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	899b      	ldrh	r3, [r3, #12]
 800e5b4:	b29b      	uxth	r3, r3
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fc fab4 	bl	800ab24 <lwip_htons>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5c4:	b2da      	uxtb	r2, r3
 800e5c6:	4b34      	ldr	r3, [pc, #208]	; (800e698 <tcp_input+0x2b4>)
 800e5c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	891a      	ldrh	r2, [r3, #8]
 800e5ce:	4b33      	ldr	r3, [pc, #204]	; (800e69c <tcp_input+0x2b8>)
 800e5d0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e5d2:	4b31      	ldr	r3, [pc, #196]	; (800e698 <tcp_input+0x2b4>)
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	f003 0303 	and.w	r3, r3, #3
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00c      	beq.n	800e5f8 <tcp_input+0x214>
    tcplen++;
 800e5de:	4b2f      	ldr	r3, [pc, #188]	; (800e69c <tcp_input+0x2b8>)
 800e5e0:	881b      	ldrh	r3, [r3, #0]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	4b2d      	ldr	r3, [pc, #180]	; (800e69c <tcp_input+0x2b8>)
 800e5e8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	891a      	ldrh	r2, [r3, #8]
 800e5ee:	4b2b      	ldr	r3, [pc, #172]	; (800e69c <tcp_input+0x2b8>)
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	f200 82d9 	bhi.w	800ebaa <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5fc:	4b28      	ldr	r3, [pc, #160]	; (800e6a0 <tcp_input+0x2bc>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	61fb      	str	r3, [r7, #28]
 800e602:	e09d      	b.n	800e740 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	7d1b      	ldrb	r3, [r3, #20]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d105      	bne.n	800e618 <tcp_input+0x234>
 800e60c:	4b15      	ldr	r3, [pc, #84]	; (800e664 <tcp_input+0x280>)
 800e60e:	22fb      	movs	r2, #251	; 0xfb
 800e610:	4924      	ldr	r1, [pc, #144]	; (800e6a4 <tcp_input+0x2c0>)
 800e612:	4816      	ldr	r0, [pc, #88]	; (800e66c <tcp_input+0x288>)
 800e614:	f006 ff26 	bl	8015464 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	7d1b      	ldrb	r3, [r3, #20]
 800e61c:	2b0a      	cmp	r3, #10
 800e61e:	d105      	bne.n	800e62c <tcp_input+0x248>
 800e620:	4b10      	ldr	r3, [pc, #64]	; (800e664 <tcp_input+0x280>)
 800e622:	22fc      	movs	r2, #252	; 0xfc
 800e624:	4920      	ldr	r1, [pc, #128]	; (800e6a8 <tcp_input+0x2c4>)
 800e626:	4811      	ldr	r0, [pc, #68]	; (800e66c <tcp_input+0x288>)
 800e628:	f006 ff1c 	bl	8015464 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	7d1b      	ldrb	r3, [r3, #20]
 800e630:	2b01      	cmp	r3, #1
 800e632:	d105      	bne.n	800e640 <tcp_input+0x25c>
 800e634:	4b0b      	ldr	r3, [pc, #44]	; (800e664 <tcp_input+0x280>)
 800e636:	22fd      	movs	r2, #253	; 0xfd
 800e638:	491c      	ldr	r1, [pc, #112]	; (800e6ac <tcp_input+0x2c8>)
 800e63a:	480c      	ldr	r0, [pc, #48]	; (800e66c <tcp_input+0x288>)
 800e63c:	f006 ff12 	bl	8015464 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e640:	69fb      	ldr	r3, [r7, #28]
 800e642:	7a1b      	ldrb	r3, [r3, #8]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d033      	beq.n	800e6b0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	7a1a      	ldrb	r2, [r3, #8]
 800e64c:	4b09      	ldr	r3, [pc, #36]	; (800e674 <tcp_input+0x290>)
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e654:	3301      	adds	r3, #1
 800e656:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e658:	429a      	cmp	r2, r3
 800e65a:	d029      	beq.n	800e6b0 <tcp_input+0x2cc>
      prev = pcb;
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	61bb      	str	r3, [r7, #24]
      continue;
 800e660:	e06b      	b.n	800e73a <tcp_input+0x356>
 800e662:	bf00      	nop
 800e664:	08018dc4 	.word	0x08018dc4
 800e668:	08018df8 	.word	0x08018df8
 800e66c:	08018e10 	.word	0x08018e10
 800e670:	20000a28 	.word	0x20000a28
 800e674:	2000a7b4 	.word	0x2000a7b4
 800e678:	20000a2c 	.word	0x20000a2c
 800e67c:	20000a30 	.word	0x20000a30
 800e680:	20000a2e 	.word	0x20000a2e
 800e684:	08018e38 	.word	0x08018e38
 800e688:	08018e48 	.word	0x08018e48
 800e68c:	08018e54 	.word	0x08018e54
 800e690:	20000a38 	.word	0x20000a38
 800e694:	20000a3c 	.word	0x20000a3c
 800e698:	20000a44 	.word	0x20000a44
 800e69c:	20000a42 	.word	0x20000a42
 800e6a0:	2000e004 	.word	0x2000e004
 800e6a4:	08018e74 	.word	0x08018e74
 800e6a8:	08018e9c 	.word	0x08018e9c
 800e6ac:	08018ec8 	.word	0x08018ec8
    }

    if (pcb->remote_port == tcphdr->src &&
 800e6b0:	69fb      	ldr	r3, [r7, #28]
 800e6b2:	8b1a      	ldrh	r2, [r3, #24]
 800e6b4:	4b94      	ldr	r3, [pc, #592]	; (800e908 <tcp_input+0x524>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	881b      	ldrh	r3, [r3, #0]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d13a      	bne.n	800e736 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e6c0:	69fb      	ldr	r3, [r7, #28]
 800e6c2:	8ada      	ldrh	r2, [r3, #22]
 800e6c4:	4b90      	ldr	r3, [pc, #576]	; (800e908 <tcp_input+0x524>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	885b      	ldrh	r3, [r3, #2]
 800e6ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e6cc:	429a      	cmp	r2, r3
 800e6ce:	d132      	bne.n	800e736 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	685a      	ldr	r2, [r3, #4]
 800e6d4:	4b8d      	ldr	r3, [pc, #564]	; (800e90c <tcp_input+0x528>)
 800e6d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d12c      	bne.n	800e736 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	4b8a      	ldr	r3, [pc, #552]	; (800e90c <tcp_input+0x528>)
 800e6e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d126      	bne.n	800e736 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	69fa      	ldr	r2, [r7, #28]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d106      	bne.n	800e700 <tcp_input+0x31c>
 800e6f2:	4b87      	ldr	r3, [pc, #540]	; (800e910 <tcp_input+0x52c>)
 800e6f4:	f240 120d 	movw	r2, #269	; 0x10d
 800e6f8:	4986      	ldr	r1, [pc, #536]	; (800e914 <tcp_input+0x530>)
 800e6fa:	4887      	ldr	r0, [pc, #540]	; (800e918 <tcp_input+0x534>)
 800e6fc:	f006 feb2 	bl	8015464 <iprintf>
      if (prev != NULL) {
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00a      	beq.n	800e71c <tcp_input+0x338>
        prev->next = pcb->next;
 800e706:	69fb      	ldr	r3, [r7, #28]
 800e708:	68da      	ldr	r2, [r3, #12]
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e70e:	4b83      	ldr	r3, [pc, #524]	; (800e91c <tcp_input+0x538>)
 800e710:	681a      	ldr	r2, [r3, #0]
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e716:	4a81      	ldr	r2, [pc, #516]	; (800e91c <tcp_input+0x538>)
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e71c:	69fb      	ldr	r3, [r7, #28]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	69fa      	ldr	r2, [r7, #28]
 800e722:	429a      	cmp	r2, r3
 800e724:	d111      	bne.n	800e74a <tcp_input+0x366>
 800e726:	4b7a      	ldr	r3, [pc, #488]	; (800e910 <tcp_input+0x52c>)
 800e728:	f240 1215 	movw	r2, #277	; 0x115
 800e72c:	497c      	ldr	r1, [pc, #496]	; (800e920 <tcp_input+0x53c>)
 800e72e:	487a      	ldr	r0, [pc, #488]	; (800e918 <tcp_input+0x534>)
 800e730:	f006 fe98 	bl	8015464 <iprintf>
      break;
 800e734:	e009      	b.n	800e74a <tcp_input+0x366>
    }
    prev = pcb;
 800e736:	69fb      	ldr	r3, [r7, #28]
 800e738:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	61fb      	str	r3, [r7, #28]
 800e740:	69fb      	ldr	r3, [r7, #28]
 800e742:	2b00      	cmp	r3, #0
 800e744:	f47f af5e 	bne.w	800e604 <tcp_input+0x220>
 800e748:	e000      	b.n	800e74c <tcp_input+0x368>
      break;
 800e74a:	bf00      	nop
  }

  if (pcb == NULL) {
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f040 8095 	bne.w	800e87e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e754:	4b73      	ldr	r3, [pc, #460]	; (800e924 <tcp_input+0x540>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	61fb      	str	r3, [r7, #28]
 800e75a:	e03f      	b.n	800e7dc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	7d1b      	ldrb	r3, [r3, #20]
 800e760:	2b0a      	cmp	r3, #10
 800e762:	d006      	beq.n	800e772 <tcp_input+0x38e>
 800e764:	4b6a      	ldr	r3, [pc, #424]	; (800e910 <tcp_input+0x52c>)
 800e766:	f240 121f 	movw	r2, #287	; 0x11f
 800e76a:	496f      	ldr	r1, [pc, #444]	; (800e928 <tcp_input+0x544>)
 800e76c:	486a      	ldr	r0, [pc, #424]	; (800e918 <tcp_input+0x534>)
 800e76e:	f006 fe79 	bl	8015464 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	7a1b      	ldrb	r3, [r3, #8]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d009      	beq.n	800e78e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e77a:	69fb      	ldr	r3, [r7, #28]
 800e77c:	7a1a      	ldrb	r2, [r3, #8]
 800e77e:	4b63      	ldr	r3, [pc, #396]	; (800e90c <tcp_input+0x528>)
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e786:	3301      	adds	r3, #1
 800e788:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d122      	bne.n	800e7d4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e78e:	69fb      	ldr	r3, [r7, #28]
 800e790:	8b1a      	ldrh	r2, [r3, #24]
 800e792:	4b5d      	ldr	r3, [pc, #372]	; (800e908 <tcp_input+0x524>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	881b      	ldrh	r3, [r3, #0]
 800e798:	b29b      	uxth	r3, r3
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d11b      	bne.n	800e7d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	8ada      	ldrh	r2, [r3, #22]
 800e7a2:	4b59      	ldr	r3, [pc, #356]	; (800e908 <tcp_input+0x524>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	885b      	ldrh	r3, [r3, #2]
 800e7a8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e7aa:	429a      	cmp	r2, r3
 800e7ac:	d113      	bne.n	800e7d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	4b56      	ldr	r3, [pc, #344]	; (800e90c <tcp_input+0x528>)
 800e7b4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d10d      	bne.n	800e7d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	4b53      	ldr	r3, [pc, #332]	; (800e90c <tcp_input+0x528>)
 800e7c0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d107      	bne.n	800e7d6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e7c6:	69f8      	ldr	r0, [r7, #28]
 800e7c8:	f000 fb54 	bl	800ee74 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e7cc:	6878      	ldr	r0, [r7, #4]
 800e7ce:	f7fd fd3b 	bl	800c248 <pbuf_free>
        return;
 800e7d2:	e1f0      	b.n	800ebb6 <tcp_input+0x7d2>
        continue;
 800e7d4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	61fb      	str	r3, [r7, #28]
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d1bc      	bne.n	800e75c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e7e6:	4b51      	ldr	r3, [pc, #324]	; (800e92c <tcp_input+0x548>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	617b      	str	r3, [r7, #20]
 800e7ec:	e02a      	b.n	800e844 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e7ee:	697b      	ldr	r3, [r7, #20]
 800e7f0:	7a1b      	ldrb	r3, [r3, #8]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00c      	beq.n	800e810 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	7a1a      	ldrb	r2, [r3, #8]
 800e7fa:	4b44      	ldr	r3, [pc, #272]	; (800e90c <tcp_input+0x528>)
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e802:	3301      	adds	r3, #1
 800e804:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e806:	429a      	cmp	r2, r3
 800e808:	d002      	beq.n	800e810 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	61bb      	str	r3, [r7, #24]
        continue;
 800e80e:	e016      	b.n	800e83e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	8ada      	ldrh	r2, [r3, #22]
 800e814:	4b3c      	ldr	r3, [pc, #240]	; (800e908 <tcp_input+0x524>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	885b      	ldrh	r3, [r3, #2]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d10c      	bne.n	800e83a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	681a      	ldr	r2, [r3, #0]
 800e824:	4b39      	ldr	r3, [pc, #228]	; (800e90c <tcp_input+0x528>)
 800e826:	695b      	ldr	r3, [r3, #20]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d00f      	beq.n	800e84c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00d      	beq.n	800e84e <tcp_input+0x46a>
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d009      	beq.n	800e84e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e83e:	697b      	ldr	r3, [r7, #20]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	617b      	str	r3, [r7, #20]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1d1      	bne.n	800e7ee <tcp_input+0x40a>
 800e84a:	e000      	b.n	800e84e <tcp_input+0x46a>
            break;
 800e84c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d014      	beq.n	800e87e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d00a      	beq.n	800e870 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	68da      	ldr	r2, [r3, #12]
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e862:	4b32      	ldr	r3, [pc, #200]	; (800e92c <tcp_input+0x548>)
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e86a:	4a30      	ldr	r2, [pc, #192]	; (800e92c <tcp_input+0x548>)
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e870:	6978      	ldr	r0, [r7, #20]
 800e872:	f000 fa01 	bl	800ec78 <tcp_listen_input>
      }
      pbuf_free(p);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7fd fce6 	bl	800c248 <pbuf_free>
      return;
 800e87c:	e19b      	b.n	800ebb6 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	2b00      	cmp	r3, #0
 800e882:	f000 8160 	beq.w	800eb46 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e886:	4b2a      	ldr	r3, [pc, #168]	; (800e930 <tcp_input+0x54c>)
 800e888:	2200      	movs	r2, #0
 800e88a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	891a      	ldrh	r2, [r3, #8]
 800e890:	4b27      	ldr	r3, [pc, #156]	; (800e930 <tcp_input+0x54c>)
 800e892:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e894:	4a26      	ldr	r2, [pc, #152]	; (800e930 <tcp_input+0x54c>)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e89a:	4b1b      	ldr	r3, [pc, #108]	; (800e908 <tcp_input+0x524>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	4a24      	ldr	r2, [pc, #144]	; (800e930 <tcp_input+0x54c>)
 800e8a0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e8a2:	4b24      	ldr	r3, [pc, #144]	; (800e934 <tcp_input+0x550>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e8a8:	4b23      	ldr	r3, [pc, #140]	; (800e938 <tcp_input+0x554>)
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e8ae:	4b23      	ldr	r3, [pc, #140]	; (800e93c <tcp_input+0x558>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e8b4:	4b22      	ldr	r3, [pc, #136]	; (800e940 <tcp_input+0x55c>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	f003 0308 	and.w	r3, r3, #8
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d006      	beq.n	800e8ce <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	7b5b      	ldrb	r3, [r3, #13]
 800e8c4:	f043 0301 	orr.w	r3, r3, #1
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e8ce:	69fb      	ldr	r3, [r7, #28]
 800e8d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d038      	beq.n	800e948 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e8d6:	69f8      	ldr	r0, [r7, #28]
 800e8d8:	f7ff f852 	bl	800d980 <tcp_process_refused_data>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	f113 0f0d 	cmn.w	r3, #13
 800e8e2:	d007      	beq.n	800e8f4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d02d      	beq.n	800e948 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e8ec:	4b15      	ldr	r3, [pc, #84]	; (800e944 <tcp_input+0x560>)
 800e8ee:	881b      	ldrh	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d029      	beq.n	800e948 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f040 8104 	bne.w	800eb06 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e8fe:	69f8      	ldr	r0, [r7, #28]
 800e900:	f003 fe16 	bl	8012530 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e904:	e0ff      	b.n	800eb06 <tcp_input+0x722>
 800e906:	bf00      	nop
 800e908:	20000a28 	.word	0x20000a28
 800e90c:	2000a7b4 	.word	0x2000a7b4
 800e910:	08018dc4 	.word	0x08018dc4
 800e914:	08018ef0 	.word	0x08018ef0
 800e918:	08018e10 	.word	0x08018e10
 800e91c:	2000e004 	.word	0x2000e004
 800e920:	08018f1c 	.word	0x08018f1c
 800e924:	2000e014 	.word	0x2000e014
 800e928:	08018f48 	.word	0x08018f48
 800e92c:	2000e00c 	.word	0x2000e00c
 800e930:	20000a18 	.word	0x20000a18
 800e934:	20000a48 	.word	0x20000a48
 800e938:	20000a45 	.word	0x20000a45
 800e93c:	20000a40 	.word	0x20000a40
 800e940:	20000a44 	.word	0x20000a44
 800e944:	20000a42 	.word	0x20000a42
      }
    }
    tcp_input_pcb = pcb;
 800e948:	4a9c      	ldr	r2, [pc, #624]	; (800ebbc <tcp_input+0x7d8>)
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e94e:	69f8      	ldr	r0, [r7, #28]
 800e950:	f000 fb0a 	bl	800ef68 <tcp_process>
 800e954:	4603      	mov	r3, r0
 800e956:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e958:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e95c:	f113 0f0d 	cmn.w	r3, #13
 800e960:	f000 80d3 	beq.w	800eb0a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e964:	4b96      	ldr	r3, [pc, #600]	; (800ebc0 <tcp_input+0x7dc>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f003 0308 	and.w	r3, r3, #8
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d015      	beq.n	800e99c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e976:	2b00      	cmp	r3, #0
 800e978:	d008      	beq.n	800e98c <tcp_input+0x5a8>
 800e97a:	69fb      	ldr	r3, [r7, #28]
 800e97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	6912      	ldr	r2, [r2, #16]
 800e984:	f06f 010d 	mvn.w	r1, #13
 800e988:	4610      	mov	r0, r2
 800e98a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e98c:	69f9      	ldr	r1, [r7, #28]
 800e98e:	488d      	ldr	r0, [pc, #564]	; (800ebc4 <tcp_input+0x7e0>)
 800e990:	f7ff fbb0 	bl	800e0f4 <tcp_pcb_remove>
        tcp_free(pcb);
 800e994:	69f8      	ldr	r0, [r7, #28]
 800e996:	f7fd fef7 	bl	800c788 <tcp_free>
 800e99a:	e0c1      	b.n	800eb20 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e99c:	2300      	movs	r3, #0
 800e99e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e9a0:	4b89      	ldr	r3, [pc, #548]	; (800ebc8 <tcp_input+0x7e4>)
 800e9a2:	881b      	ldrh	r3, [r3, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d01d      	beq.n	800e9e4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e9a8:	4b87      	ldr	r3, [pc, #540]	; (800ebc8 <tcp_input+0x7e4>)
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00a      	beq.n	800e9ce <tcp_input+0x5ea>
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9be:	69fa      	ldr	r2, [r7, #28]
 800e9c0:	6910      	ldr	r0, [r2, #16]
 800e9c2:	89fa      	ldrh	r2, [r7, #14]
 800e9c4:	69f9      	ldr	r1, [r7, #28]
 800e9c6:	4798      	blx	r3
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	74fb      	strb	r3, [r7, #19]
 800e9cc:	e001      	b.n	800e9d2 <tcp_input+0x5ee>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e9d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9d6:	f113 0f0d 	cmn.w	r3, #13
 800e9da:	f000 8098 	beq.w	800eb0e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e9de:	4b7a      	ldr	r3, [pc, #488]	; (800ebc8 <tcp_input+0x7e4>)
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e9e4:	69f8      	ldr	r0, [r7, #28]
 800e9e6:	f000 f907 	bl	800ebf8 <tcp_input_delayed_close>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f040 8090 	bne.w	800eb12 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e9f2:	4b76      	ldr	r3, [pc, #472]	; (800ebcc <tcp_input+0x7e8>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d041      	beq.n	800ea7e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e9fa:	69fb      	ldr	r3, [r7, #28]
 800e9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d006      	beq.n	800ea10 <tcp_input+0x62c>
 800ea02:	4b73      	ldr	r3, [pc, #460]	; (800ebd0 <tcp_input+0x7ec>)
 800ea04:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ea08:	4972      	ldr	r1, [pc, #456]	; (800ebd4 <tcp_input+0x7f0>)
 800ea0a:	4873      	ldr	r0, [pc, #460]	; (800ebd8 <tcp_input+0x7f4>)
 800ea0c:	f006 fd2a 	bl	8015464 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	8b5b      	ldrh	r3, [r3, #26]
 800ea14:	f003 0310 	and.w	r3, r3, #16
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d008      	beq.n	800ea2e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ea1c:	4b6b      	ldr	r3, [pc, #428]	; (800ebcc <tcp_input+0x7e8>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fd fc11 	bl	800c248 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ea26:	69f8      	ldr	r0, [r7, #28]
 800ea28:	f7fe f996 	bl	800cd58 <tcp_abort>
            goto aborted;
 800ea2c:	e078      	b.n	800eb20 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d00c      	beq.n	800ea52 <tcp_input+0x66e>
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	6918      	ldr	r0, [r3, #16]
 800ea42:	4b62      	ldr	r3, [pc, #392]	; (800ebcc <tcp_input+0x7e8>)
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	2300      	movs	r3, #0
 800ea48:	69f9      	ldr	r1, [r7, #28]
 800ea4a:	47a0      	blx	r4
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	74fb      	strb	r3, [r7, #19]
 800ea50:	e008      	b.n	800ea64 <tcp_input+0x680>
 800ea52:	4b5e      	ldr	r3, [pc, #376]	; (800ebcc <tcp_input+0x7e8>)
 800ea54:	681a      	ldr	r2, [r3, #0]
 800ea56:	2300      	movs	r3, #0
 800ea58:	69f9      	ldr	r1, [r7, #28]
 800ea5a:	2000      	movs	r0, #0
 800ea5c:	f7ff f884 	bl	800db68 <tcp_recv_null>
 800ea60:	4603      	mov	r3, r0
 800ea62:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ea64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea68:	f113 0f0d 	cmn.w	r3, #13
 800ea6c:	d053      	beq.n	800eb16 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ea6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d003      	beq.n	800ea7e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ea76:	4b55      	ldr	r3, [pc, #340]	; (800ebcc <tcp_input+0x7e8>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ea7e:	4b50      	ldr	r3, [pc, #320]	; (800ebc0 <tcp_input+0x7dc>)
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	f003 0320 	and.w	r3, r3, #32
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d030      	beq.n	800eaec <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ea8a:	69fb      	ldr	r3, [r7, #28]
 800ea8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d009      	beq.n	800eaa6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea96:	7b5a      	ldrb	r2, [r3, #13]
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea9c:	f042 0220 	orr.w	r2, r2, #32
 800eaa0:	b2d2      	uxtb	r2, r2
 800eaa2:	735a      	strb	r2, [r3, #13]
 800eaa4:	e022      	b.n	800eaec <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eaaa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eaae:	d005      	beq.n	800eabc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800eab0:	69fb      	ldr	r3, [r7, #28]
 800eab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eab4:	3301      	adds	r3, #1
 800eab6:	b29a      	uxth	r2, r3
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00b      	beq.n	800eade <tcp_input+0x6fa>
 800eac6:	69fb      	ldr	r3, [r7, #28]
 800eac8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eacc:	69fb      	ldr	r3, [r7, #28]
 800eace:	6918      	ldr	r0, [r3, #16]
 800ead0:	2300      	movs	r3, #0
 800ead2:	2200      	movs	r2, #0
 800ead4:	69f9      	ldr	r1, [r7, #28]
 800ead6:	47a0      	blx	r4
 800ead8:	4603      	mov	r3, r0
 800eada:	74fb      	strb	r3, [r7, #19]
 800eadc:	e001      	b.n	800eae2 <tcp_input+0x6fe>
 800eade:	2300      	movs	r3, #0
 800eae0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eae2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eae6:	f113 0f0d 	cmn.w	r3, #13
 800eaea:	d016      	beq.n	800eb1a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800eaec:	4b33      	ldr	r3, [pc, #204]	; (800ebbc <tcp_input+0x7d8>)
 800eaee:	2200      	movs	r2, #0
 800eaf0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800eaf2:	69f8      	ldr	r0, [r7, #28]
 800eaf4:	f000 f880 	bl	800ebf8 <tcp_input_delayed_close>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d10f      	bne.n	800eb1e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800eafe:	69f8      	ldr	r0, [r7, #28]
 800eb00:	f002 ff10 	bl	8011924 <tcp_output>
 800eb04:	e00c      	b.n	800eb20 <tcp_input+0x73c>
        goto aborted;
 800eb06:	bf00      	nop
 800eb08:	e00a      	b.n	800eb20 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800eb0a:	bf00      	nop
 800eb0c:	e008      	b.n	800eb20 <tcp_input+0x73c>
              goto aborted;
 800eb0e:	bf00      	nop
 800eb10:	e006      	b.n	800eb20 <tcp_input+0x73c>
          goto aborted;
 800eb12:	bf00      	nop
 800eb14:	e004      	b.n	800eb20 <tcp_input+0x73c>
            goto aborted;
 800eb16:	bf00      	nop
 800eb18:	e002      	b.n	800eb20 <tcp_input+0x73c>
              goto aborted;
 800eb1a:	bf00      	nop
 800eb1c:	e000      	b.n	800eb20 <tcp_input+0x73c>
          goto aborted;
 800eb1e:	bf00      	nop
    tcp_input_pcb = NULL;
 800eb20:	4b26      	ldr	r3, [pc, #152]	; (800ebbc <tcp_input+0x7d8>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800eb26:	4b29      	ldr	r3, [pc, #164]	; (800ebcc <tcp_input+0x7e8>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800eb2c:	4b2b      	ldr	r3, [pc, #172]	; (800ebdc <tcp_input+0x7f8>)
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d03f      	beq.n	800ebb4 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800eb34:	4b29      	ldr	r3, [pc, #164]	; (800ebdc <tcp_input+0x7f8>)
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fd fb85 	bl	800c248 <pbuf_free>
      inseg.p = NULL;
 800eb3e:	4b27      	ldr	r3, [pc, #156]	; (800ebdc <tcp_input+0x7f8>)
 800eb40:	2200      	movs	r2, #0
 800eb42:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800eb44:	e036      	b.n	800ebb4 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eb46:	4b26      	ldr	r3, [pc, #152]	; (800ebe0 <tcp_input+0x7fc>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	899b      	ldrh	r3, [r3, #12]
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fb ffe8 	bl	800ab24 <lwip_htons>
 800eb54:	4603      	mov	r3, r0
 800eb56:	b2db      	uxtb	r3, r3
 800eb58:	f003 0304 	and.w	r3, r3, #4
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d118      	bne.n	800eb92 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb60:	4b20      	ldr	r3, [pc, #128]	; (800ebe4 <tcp_input+0x800>)
 800eb62:	6819      	ldr	r1, [r3, #0]
 800eb64:	4b20      	ldr	r3, [pc, #128]	; (800ebe8 <tcp_input+0x804>)
 800eb66:	881b      	ldrh	r3, [r3, #0]
 800eb68:	461a      	mov	r2, r3
 800eb6a:	4b20      	ldr	r3, [pc, #128]	; (800ebec <tcp_input+0x808>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb70:	4b1b      	ldr	r3, [pc, #108]	; (800ebe0 <tcp_input+0x7fc>)
 800eb72:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb74:	885b      	ldrh	r3, [r3, #2]
 800eb76:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb78:	4a19      	ldr	r2, [pc, #100]	; (800ebe0 <tcp_input+0x7fc>)
 800eb7a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb7c:	8812      	ldrh	r2, [r2, #0]
 800eb7e:	b292      	uxth	r2, r2
 800eb80:	9202      	str	r2, [sp, #8]
 800eb82:	9301      	str	r3, [sp, #4]
 800eb84:	4b1a      	ldr	r3, [pc, #104]	; (800ebf0 <tcp_input+0x80c>)
 800eb86:	9300      	str	r3, [sp, #0]
 800eb88:	4b1a      	ldr	r3, [pc, #104]	; (800ebf4 <tcp_input+0x810>)
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	f003 fc7d 	bl	801248c <tcp_rst>
    pbuf_free(p);
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7fd fb58 	bl	800c248 <pbuf_free>
  return;
 800eb98:	e00c      	b.n	800ebb4 <tcp_input+0x7d0>
    goto dropped;
 800eb9a:	bf00      	nop
 800eb9c:	e006      	b.n	800ebac <tcp_input+0x7c8>
    goto dropped;
 800eb9e:	bf00      	nop
 800eba0:	e004      	b.n	800ebac <tcp_input+0x7c8>
    goto dropped;
 800eba2:	bf00      	nop
 800eba4:	e002      	b.n	800ebac <tcp_input+0x7c8>
      goto dropped;
 800eba6:	bf00      	nop
 800eba8:	e000      	b.n	800ebac <tcp_input+0x7c8>
      goto dropped;
 800ebaa:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7fd fb4b 	bl	800c248 <pbuf_free>
 800ebb2:	e000      	b.n	800ebb6 <tcp_input+0x7d2>
  return;
 800ebb4:	bf00      	nop
}
 800ebb6:	3724      	adds	r7, #36	; 0x24
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd90      	pop	{r4, r7, pc}
 800ebbc:	2000e018 	.word	0x2000e018
 800ebc0:	20000a45 	.word	0x20000a45
 800ebc4:	2000e004 	.word	0x2000e004
 800ebc8:	20000a40 	.word	0x20000a40
 800ebcc:	20000a48 	.word	0x20000a48
 800ebd0:	08018dc4 	.word	0x08018dc4
 800ebd4:	08018f78 	.word	0x08018f78
 800ebd8:	08018e10 	.word	0x08018e10
 800ebdc:	20000a18 	.word	0x20000a18
 800ebe0:	20000a28 	.word	0x20000a28
 800ebe4:	20000a3c 	.word	0x20000a3c
 800ebe8:	20000a42 	.word	0x20000a42
 800ebec:	20000a38 	.word	0x20000a38
 800ebf0:	2000a7c4 	.word	0x2000a7c4
 800ebf4:	2000a7c8 	.word	0x2000a7c8

0800ebf8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d106      	bne.n	800ec14 <tcp_input_delayed_close+0x1c>
 800ec06:	4b17      	ldr	r3, [pc, #92]	; (800ec64 <tcp_input_delayed_close+0x6c>)
 800ec08:	f240 225a 	movw	r2, #602	; 0x25a
 800ec0c:	4916      	ldr	r1, [pc, #88]	; (800ec68 <tcp_input_delayed_close+0x70>)
 800ec0e:	4817      	ldr	r0, [pc, #92]	; (800ec6c <tcp_input_delayed_close+0x74>)
 800ec10:	f006 fc28 	bl	8015464 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ec14:	4b16      	ldr	r3, [pc, #88]	; (800ec70 <tcp_input_delayed_close+0x78>)
 800ec16:	781b      	ldrb	r3, [r3, #0]
 800ec18:	f003 0310 	and.w	r3, r3, #16
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d01c      	beq.n	800ec5a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	8b5b      	ldrh	r3, [r3, #26]
 800ec24:	f003 0310 	and.w	r3, r3, #16
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10d      	bne.n	800ec48 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d008      	beq.n	800ec48 <tcp_input_delayed_close+0x50>
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	6912      	ldr	r2, [r2, #16]
 800ec40:	f06f 010e 	mvn.w	r1, #14
 800ec44:	4610      	mov	r0, r2
 800ec46:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ec48:	6879      	ldr	r1, [r7, #4]
 800ec4a:	480a      	ldr	r0, [pc, #40]	; (800ec74 <tcp_input_delayed_close+0x7c>)
 800ec4c:	f7ff fa52 	bl	800e0f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f7fd fd99 	bl	800c788 <tcp_free>
    return 1;
 800ec56:	2301      	movs	r3, #1
 800ec58:	e000      	b.n	800ec5c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	08018dc4 	.word	0x08018dc4
 800ec68:	08018f94 	.word	0x08018f94
 800ec6c:	08018e10 	.word	0x08018e10
 800ec70:	20000a45 	.word	0x20000a45
 800ec74:	2000e004 	.word	0x2000e004

0800ec78 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ec78:	b590      	push	{r4, r7, lr}
 800ec7a:	b08b      	sub	sp, #44	; 0x2c
 800ec7c:	af04      	add	r7, sp, #16
 800ec7e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ec80:	4b6f      	ldr	r3, [pc, #444]	; (800ee40 <tcp_listen_input+0x1c8>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	f003 0304 	and.w	r3, r3, #4
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f040 80d2 	bne.w	800ee32 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d106      	bne.n	800eca2 <tcp_listen_input+0x2a>
 800ec94:	4b6b      	ldr	r3, [pc, #428]	; (800ee44 <tcp_listen_input+0x1cc>)
 800ec96:	f240 2281 	movw	r2, #641	; 0x281
 800ec9a:	496b      	ldr	r1, [pc, #428]	; (800ee48 <tcp_listen_input+0x1d0>)
 800ec9c:	486b      	ldr	r0, [pc, #428]	; (800ee4c <tcp_listen_input+0x1d4>)
 800ec9e:	f006 fbe1 	bl	8015464 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800eca2:	4b67      	ldr	r3, [pc, #412]	; (800ee40 <tcp_listen_input+0x1c8>)
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	f003 0310 	and.w	r3, r3, #16
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d019      	beq.n	800ece2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecae:	4b68      	ldr	r3, [pc, #416]	; (800ee50 <tcp_listen_input+0x1d8>)
 800ecb0:	6819      	ldr	r1, [r3, #0]
 800ecb2:	4b68      	ldr	r3, [pc, #416]	; (800ee54 <tcp_listen_input+0x1dc>)
 800ecb4:	881b      	ldrh	r3, [r3, #0]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	4b67      	ldr	r3, [pc, #412]	; (800ee58 <tcp_listen_input+0x1e0>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecbe:	4b67      	ldr	r3, [pc, #412]	; (800ee5c <tcp_listen_input+0x1e4>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecc2:	885b      	ldrh	r3, [r3, #2]
 800ecc4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ecc6:	4a65      	ldr	r2, [pc, #404]	; (800ee5c <tcp_listen_input+0x1e4>)
 800ecc8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ecca:	8812      	ldrh	r2, [r2, #0]
 800eccc:	b292      	uxth	r2, r2
 800ecce:	9202      	str	r2, [sp, #8]
 800ecd0:	9301      	str	r3, [sp, #4]
 800ecd2:	4b63      	ldr	r3, [pc, #396]	; (800ee60 <tcp_listen_input+0x1e8>)
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	4b63      	ldr	r3, [pc, #396]	; (800ee64 <tcp_listen_input+0x1ec>)
 800ecd8:	4602      	mov	r2, r0
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f003 fbd6 	bl	801248c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ece0:	e0a9      	b.n	800ee36 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800ece2:	4b57      	ldr	r3, [pc, #348]	; (800ee40 <tcp_listen_input+0x1c8>)
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	f003 0302 	and.w	r3, r3, #2
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f000 80a3 	beq.w	800ee36 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	7d5b      	ldrb	r3, [r3, #21]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f7ff f85b 	bl	800ddb0 <tcp_alloc>
 800ecfa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d111      	bne.n	800ed26 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	699b      	ldr	r3, [r3, #24]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00a      	beq.n	800ed20 <tcp_listen_input+0xa8>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	699b      	ldr	r3, [r3, #24]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	6910      	ldr	r0, [r2, #16]
 800ed12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed16:	2100      	movs	r1, #0
 800ed18:	4798      	blx	r3
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	73bb      	strb	r3, [r7, #14]
      return;
 800ed1e:	e08b      	b.n	800ee38 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ed20:	23f0      	movs	r3, #240	; 0xf0
 800ed22:	73bb      	strb	r3, [r7, #14]
      return;
 800ed24:	e088      	b.n	800ee38 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ed26:	4b50      	ldr	r3, [pc, #320]	; (800ee68 <tcp_listen_input+0x1f0>)
 800ed28:	695a      	ldr	r2, [r3, #20]
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ed2e:	4b4e      	ldr	r3, [pc, #312]	; (800ee68 <tcp_listen_input+0x1f0>)
 800ed30:	691a      	ldr	r2, [r3, #16]
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	8ada      	ldrh	r2, [r3, #22]
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ed3e:	4b47      	ldr	r3, [pc, #284]	; (800ee5c <tcp_listen_input+0x1e4>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	881b      	ldrh	r3, [r3, #0]
 800ed44:	b29a      	uxth	r2, r3
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	2203      	movs	r2, #3
 800ed4e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ed50:	4b41      	ldr	r3, [pc, #260]	; (800ee58 <tcp_listen_input+0x1e0>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	1c5a      	adds	r2, r3, #1
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ed62:	6978      	ldr	r0, [r7, #20]
 800ed64:	f7ff fa5a 	bl	800e21c <tcp_next_iss>
 800ed68:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	693a      	ldr	r2, [r7, #16]
 800ed6e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	693a      	ldr	r2, [r7, #16]
 800ed74:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	693a      	ldr	r2, [r7, #16]
 800ed7a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	693a      	ldr	r2, [r7, #16]
 800ed80:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ed82:	4b35      	ldr	r3, [pc, #212]	; (800ee58 <tcp_listen_input+0x1e0>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	1e5a      	subs	r2, r3, #1
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	691a      	ldr	r2, [r3, #16]
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ed94:	697b      	ldr	r3, [r7, #20]
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	7a5b      	ldrb	r3, [r3, #9]
 800ed9e:	f003 030c 	and.w	r3, r3, #12
 800eda2:	b2da      	uxtb	r2, r3
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	7a1a      	ldrb	r2, [r3, #8]
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800edb0:	4b2e      	ldr	r3, [pc, #184]	; (800ee6c <tcp_listen_input+0x1f4>)
 800edb2:	681a      	ldr	r2, [r3, #0]
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	60da      	str	r2, [r3, #12]
 800edb8:	4a2c      	ldr	r2, [pc, #176]	; (800ee6c <tcp_listen_input+0x1f4>)
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	6013      	str	r3, [r2, #0]
 800edbe:	f003 fd27 	bl	8012810 <tcp_timer_needed>
 800edc2:	4b2b      	ldr	r3, [pc, #172]	; (800ee70 <tcp_listen_input+0x1f8>)
 800edc4:	2201      	movs	r2, #1
 800edc6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800edc8:	6978      	ldr	r0, [r7, #20]
 800edca:	f001 fd8d 	bl	80108e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800edce:	4b23      	ldr	r3, [pc, #140]	; (800ee5c <tcp_listen_input+0x1e4>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	89db      	ldrh	r3, [r3, #14]
 800edd4:	b29a      	uxth	r2, r3
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	3304      	adds	r3, #4
 800edf0:	4618      	mov	r0, r3
 800edf2:	f005 f8eb 	bl	8013fcc <ip4_route>
 800edf6:	4601      	mov	r1, r0
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	3304      	adds	r3, #4
 800edfc:	461a      	mov	r2, r3
 800edfe:	4620      	mov	r0, r4
 800ee00:	f7ff fa32 	bl	800e268 <tcp_eff_send_mss_netif>
 800ee04:	4603      	mov	r3, r0
 800ee06:	461a      	mov	r2, r3
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ee0c:	2112      	movs	r1, #18
 800ee0e:	6978      	ldr	r0, [r7, #20]
 800ee10:	f002 fc9a 	bl	8011748 <tcp_enqueue_flags>
 800ee14:	4603      	mov	r3, r0
 800ee16:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ee18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d004      	beq.n	800ee2a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ee20:	2100      	movs	r1, #0
 800ee22:	6978      	ldr	r0, [r7, #20]
 800ee24:	f7fd feda 	bl	800cbdc <tcp_abandon>
      return;
 800ee28:	e006      	b.n	800ee38 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ee2a:	6978      	ldr	r0, [r7, #20]
 800ee2c:	f002 fd7a 	bl	8011924 <tcp_output>
  return;
 800ee30:	e001      	b.n	800ee36 <tcp_listen_input+0x1be>
    return;
 800ee32:	bf00      	nop
 800ee34:	e000      	b.n	800ee38 <tcp_listen_input+0x1c0>
  return;
 800ee36:	bf00      	nop
}
 800ee38:	371c      	adds	r7, #28
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd90      	pop	{r4, r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	20000a44 	.word	0x20000a44
 800ee44:	08018dc4 	.word	0x08018dc4
 800ee48:	08018fbc 	.word	0x08018fbc
 800ee4c:	08018e10 	.word	0x08018e10
 800ee50:	20000a3c 	.word	0x20000a3c
 800ee54:	20000a42 	.word	0x20000a42
 800ee58:	20000a38 	.word	0x20000a38
 800ee5c:	20000a28 	.word	0x20000a28
 800ee60:	2000a7c4 	.word	0x2000a7c4
 800ee64:	2000a7c8 	.word	0x2000a7c8
 800ee68:	2000a7b4 	.word	0x2000a7b4
 800ee6c:	2000e004 	.word	0x2000e004
 800ee70:	2000e000 	.word	0x2000e000

0800ee74 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b086      	sub	sp, #24
 800ee78:	af04      	add	r7, sp, #16
 800ee7a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ee7c:	4b2f      	ldr	r3, [pc, #188]	; (800ef3c <tcp_timewait_input+0xc8>)
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	f003 0304 	and.w	r3, r3, #4
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d153      	bne.n	800ef30 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <tcp_timewait_input+0x28>
 800ee8e:	4b2c      	ldr	r3, [pc, #176]	; (800ef40 <tcp_timewait_input+0xcc>)
 800ee90:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ee94:	492b      	ldr	r1, [pc, #172]	; (800ef44 <tcp_timewait_input+0xd0>)
 800ee96:	482c      	ldr	r0, [pc, #176]	; (800ef48 <tcp_timewait_input+0xd4>)
 800ee98:	f006 fae4 	bl	8015464 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ee9c:	4b27      	ldr	r3, [pc, #156]	; (800ef3c <tcp_timewait_input+0xc8>)
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	f003 0302 	and.w	r3, r3, #2
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d02a      	beq.n	800eefe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eea8:	4b28      	ldr	r3, [pc, #160]	; (800ef4c <tcp_timewait_input+0xd8>)
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	db2d      	blt.n	800ef12 <tcp_timewait_input+0x9e>
 800eeb6:	4b25      	ldr	r3, [pc, #148]	; (800ef4c <tcp_timewait_input+0xd8>)
 800eeb8:	681a      	ldr	r2, [r3, #0]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eebe:	6879      	ldr	r1, [r7, #4]
 800eec0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eec2:	440b      	add	r3, r1
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	dc23      	bgt.n	800ef12 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeca:	4b21      	ldr	r3, [pc, #132]	; (800ef50 <tcp_timewait_input+0xdc>)
 800eecc:	6819      	ldr	r1, [r3, #0]
 800eece:	4b21      	ldr	r3, [pc, #132]	; (800ef54 <tcp_timewait_input+0xe0>)
 800eed0:	881b      	ldrh	r3, [r3, #0]
 800eed2:	461a      	mov	r2, r3
 800eed4:	4b1d      	ldr	r3, [pc, #116]	; (800ef4c <tcp_timewait_input+0xd8>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eeda:	4b1f      	ldr	r3, [pc, #124]	; (800ef58 <tcp_timewait_input+0xe4>)
 800eedc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eede:	885b      	ldrh	r3, [r3, #2]
 800eee0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eee2:	4a1d      	ldr	r2, [pc, #116]	; (800ef58 <tcp_timewait_input+0xe4>)
 800eee4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eee6:	8812      	ldrh	r2, [r2, #0]
 800eee8:	b292      	uxth	r2, r2
 800eeea:	9202      	str	r2, [sp, #8]
 800eeec:	9301      	str	r3, [sp, #4]
 800eeee:	4b1b      	ldr	r3, [pc, #108]	; (800ef5c <tcp_timewait_input+0xe8>)
 800eef0:	9300      	str	r3, [sp, #0]
 800eef2:	4b1b      	ldr	r3, [pc, #108]	; (800ef60 <tcp_timewait_input+0xec>)
 800eef4:	4602      	mov	r2, r0
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f003 fac8 	bl	801248c <tcp_rst>
      return;
 800eefc:	e01b      	b.n	800ef36 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800eefe:	4b0f      	ldr	r3, [pc, #60]	; (800ef3c <tcp_timewait_input+0xc8>)
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d003      	beq.n	800ef12 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ef0a:	4b16      	ldr	r3, [pc, #88]	; (800ef64 <tcp_timewait_input+0xf0>)
 800ef0c:	681a      	ldr	r2, [r3, #0]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ef12:	4b10      	ldr	r3, [pc, #64]	; (800ef54 <tcp_timewait_input+0xe0>)
 800ef14:	881b      	ldrh	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d00c      	beq.n	800ef34 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	8b5b      	ldrh	r3, [r3, #26]
 800ef1e:	f043 0302 	orr.w	r3, r3, #2
 800ef22:	b29a      	uxth	r2, r3
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f002 fcfb 	bl	8011924 <tcp_output>
  }
  return;
 800ef2e:	e001      	b.n	800ef34 <tcp_timewait_input+0xc0>
    return;
 800ef30:	bf00      	nop
 800ef32:	e000      	b.n	800ef36 <tcp_timewait_input+0xc2>
  return;
 800ef34:	bf00      	nop
}
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	20000a44 	.word	0x20000a44
 800ef40:	08018dc4 	.word	0x08018dc4
 800ef44:	08018fdc 	.word	0x08018fdc
 800ef48:	08018e10 	.word	0x08018e10
 800ef4c:	20000a38 	.word	0x20000a38
 800ef50:	20000a3c 	.word	0x20000a3c
 800ef54:	20000a42 	.word	0x20000a42
 800ef58:	20000a28 	.word	0x20000a28
 800ef5c:	2000a7c4 	.word	0x2000a7c4
 800ef60:	2000a7c8 	.word	0x2000a7c8
 800ef64:	2000e008 	.word	0x2000e008

0800ef68 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ef68:	b590      	push	{r4, r7, lr}
 800ef6a:	b08d      	sub	sp, #52	; 0x34
 800ef6c:	af04      	add	r7, sp, #16
 800ef6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ef70:	2300      	movs	r3, #0
 800ef72:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d106      	bne.n	800ef8c <tcp_process+0x24>
 800ef7e:	4ba5      	ldr	r3, [pc, #660]	; (800f214 <tcp_process+0x2ac>)
 800ef80:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ef84:	49a4      	ldr	r1, [pc, #656]	; (800f218 <tcp_process+0x2b0>)
 800ef86:	48a5      	ldr	r0, [pc, #660]	; (800f21c <tcp_process+0x2b4>)
 800ef88:	f006 fa6c 	bl	8015464 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ef8c:	4ba4      	ldr	r3, [pc, #656]	; (800f220 <tcp_process+0x2b8>)
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	f003 0304 	and.w	r3, r3, #4
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d04e      	beq.n	800f036 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	7d1b      	ldrb	r3, [r3, #20]
 800ef9c:	2b02      	cmp	r3, #2
 800ef9e:	d108      	bne.n	800efb2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efa4:	4b9f      	ldr	r3, [pc, #636]	; (800f224 <tcp_process+0x2bc>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d123      	bne.n	800eff4 <tcp_process+0x8c>
        acceptable = 1;
 800efac:	2301      	movs	r3, #1
 800efae:	76fb      	strb	r3, [r7, #27]
 800efb0:	e020      	b.n	800eff4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efb6:	4b9c      	ldr	r3, [pc, #624]	; (800f228 <tcp_process+0x2c0>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	429a      	cmp	r2, r3
 800efbc:	d102      	bne.n	800efc4 <tcp_process+0x5c>
        acceptable = 1;
 800efbe:	2301      	movs	r3, #1
 800efc0:	76fb      	strb	r3, [r7, #27]
 800efc2:	e017      	b.n	800eff4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800efc4:	4b98      	ldr	r3, [pc, #608]	; (800f228 <tcp_process+0x2c0>)
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	2b00      	cmp	r3, #0
 800efd0:	db10      	blt.n	800eff4 <tcp_process+0x8c>
 800efd2:	4b95      	ldr	r3, [pc, #596]	; (800f228 <tcp_process+0x2c0>)
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efda:	6879      	ldr	r1, [r7, #4]
 800efdc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800efde:	440b      	add	r3, r1
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	dc06      	bgt.n	800eff4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	8b5b      	ldrh	r3, [r3, #26]
 800efea:	f043 0302 	orr.w	r3, r3, #2
 800efee:	b29a      	uxth	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800eff4:	7efb      	ldrb	r3, [r7, #27]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d01b      	beq.n	800f032 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	7d1b      	ldrb	r3, [r3, #20]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d106      	bne.n	800f010 <tcp_process+0xa8>
 800f002:	4b84      	ldr	r3, [pc, #528]	; (800f214 <tcp_process+0x2ac>)
 800f004:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f008:	4988      	ldr	r1, [pc, #544]	; (800f22c <tcp_process+0x2c4>)
 800f00a:	4884      	ldr	r0, [pc, #528]	; (800f21c <tcp_process+0x2b4>)
 800f00c:	f006 fa2a 	bl	8015464 <iprintf>
      recv_flags |= TF_RESET;
 800f010:	4b87      	ldr	r3, [pc, #540]	; (800f230 <tcp_process+0x2c8>)
 800f012:	781b      	ldrb	r3, [r3, #0]
 800f014:	f043 0308 	orr.w	r3, r3, #8
 800f018:	b2da      	uxtb	r2, r3
 800f01a:	4b85      	ldr	r3, [pc, #532]	; (800f230 <tcp_process+0x2c8>)
 800f01c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	8b5b      	ldrh	r3, [r3, #26]
 800f022:	f023 0301 	bic.w	r3, r3, #1
 800f026:	b29a      	uxth	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f02c:	f06f 030d 	mvn.w	r3, #13
 800f030:	e37a      	b.n	800f728 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f032:	2300      	movs	r3, #0
 800f034:	e378      	b.n	800f728 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f036:	4b7a      	ldr	r3, [pc, #488]	; (800f220 <tcp_process+0x2b8>)
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	f003 0302 	and.w	r3, r3, #2
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d010      	beq.n	800f064 <tcp_process+0xfc>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	7d1b      	ldrb	r3, [r3, #20]
 800f046:	2b02      	cmp	r3, #2
 800f048:	d00c      	beq.n	800f064 <tcp_process+0xfc>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	7d1b      	ldrb	r3, [r3, #20]
 800f04e:	2b03      	cmp	r3, #3
 800f050:	d008      	beq.n	800f064 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	8b5b      	ldrh	r3, [r3, #26]
 800f056:	f043 0302 	orr.w	r3, r3, #2
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	e361      	b.n	800f728 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	8b5b      	ldrh	r3, [r3, #26]
 800f068:	f003 0310 	and.w	r3, r3, #16
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d103      	bne.n	800f078 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f070:	4b70      	ldr	r3, [pc, #448]	; (800f234 <tcp_process+0x2cc>)
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2200      	movs	r2, #0
 800f084:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f001 fc2d 	bl	80108e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	7d1b      	ldrb	r3, [r3, #20]
 800f092:	3b02      	subs	r3, #2
 800f094:	2b07      	cmp	r3, #7
 800f096:	f200 8337 	bhi.w	800f708 <tcp_process+0x7a0>
 800f09a:	a201      	add	r2, pc, #4	; (adr r2, 800f0a0 <tcp_process+0x138>)
 800f09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a0:	0800f0c1 	.word	0x0800f0c1
 800f0a4:	0800f2f1 	.word	0x0800f2f1
 800f0a8:	0800f469 	.word	0x0800f469
 800f0ac:	0800f493 	.word	0x0800f493
 800f0b0:	0800f5b7 	.word	0x0800f5b7
 800f0b4:	0800f469 	.word	0x0800f469
 800f0b8:	0800f643 	.word	0x0800f643
 800f0bc:	0800f6d3 	.word	0x0800f6d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f0c0:	4b57      	ldr	r3, [pc, #348]	; (800f220 <tcp_process+0x2b8>)
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	f003 0310 	and.w	r3, r3, #16
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f000 80e4 	beq.w	800f296 <tcp_process+0x32e>
 800f0ce:	4b54      	ldr	r3, [pc, #336]	; (800f220 <tcp_process+0x2b8>)
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	f003 0302 	and.w	r3, r3, #2
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	f000 80dd 	beq.w	800f296 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0e0:	1c5a      	adds	r2, r3, #1
 800f0e2:	4b50      	ldr	r3, [pc, #320]	; (800f224 <tcp_process+0x2bc>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	f040 80d5 	bne.w	800f296 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f0ec:	4b4e      	ldr	r3, [pc, #312]	; (800f228 <tcp_process+0x2c0>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	1c5a      	adds	r2, r3, #1
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f0fe:	4b49      	ldr	r3, [pc, #292]	; (800f224 <tcp_process+0x2bc>)
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f106:	4b4c      	ldr	r3, [pc, #304]	; (800f238 <tcp_process+0x2d0>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	89db      	ldrh	r3, [r3, #14]
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f120:	4b41      	ldr	r3, [pc, #260]	; (800f228 <tcp_process+0x2c0>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	1e5a      	subs	r2, r3, #1
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2204      	movs	r2, #4
 800f12e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	3304      	adds	r3, #4
 800f138:	4618      	mov	r0, r3
 800f13a:	f004 ff47 	bl	8013fcc <ip4_route>
 800f13e:	4601      	mov	r1, r0
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	3304      	adds	r3, #4
 800f144:	461a      	mov	r2, r3
 800f146:	4620      	mov	r0, r4
 800f148:	f7ff f88e 	bl	800e268 <tcp_eff_send_mss_netif>
 800f14c:	4603      	mov	r3, r0
 800f14e:	461a      	mov	r2, r3
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f158:	009a      	lsls	r2, r3, #2
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f15e:	005b      	lsls	r3, r3, #1
 800f160:	f241 111c 	movw	r1, #4380	; 0x111c
 800f164:	428b      	cmp	r3, r1
 800f166:	bf38      	it	cc
 800f168:	460b      	movcc	r3, r1
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d204      	bcs.n	800f178 <tcp_process+0x210>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	b29b      	uxth	r3, r3
 800f176:	e00d      	b.n	800f194 <tcp_process+0x22c>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f182:	4293      	cmp	r3, r2
 800f184:	d904      	bls.n	800f190 <tcp_process+0x228>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f18a:	005b      	lsls	r3, r3, #1
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	e001      	b.n	800f194 <tcp_process+0x22c>
 800f190:	f241 131c 	movw	r3, #4380	; 0x111c
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d106      	bne.n	800f1b2 <tcp_process+0x24a>
 800f1a4:	4b1b      	ldr	r3, [pc, #108]	; (800f214 <tcp_process+0x2ac>)
 800f1a6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f1aa:	4924      	ldr	r1, [pc, #144]	; (800f23c <tcp_process+0x2d4>)
 800f1ac:	481b      	ldr	r0, [pc, #108]	; (800f21c <tcp_process+0x2b4>)
 800f1ae:	f006 f959 	bl	8015464 <iprintf>
        --pcb->snd_queuelen;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1c6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d111      	bne.n	800f1f2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1d2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <tcp_process+0x280>
 800f1da:	4b0e      	ldr	r3, [pc, #56]	; (800f214 <tcp_process+0x2ac>)
 800f1dc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f1e0:	4917      	ldr	r1, [pc, #92]	; (800f240 <tcp_process+0x2d8>)
 800f1e2:	480e      	ldr	r0, [pc, #56]	; (800f21c <tcp_process+0x2b4>)
 800f1e4:	f006 f93e 	bl	8015464 <iprintf>
          pcb->unsent = rseg->next;
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	66da      	str	r2, [r3, #108]	; 0x6c
 800f1f0:	e003      	b.n	800f1fa <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800f1f2:	69fb      	ldr	r3, [r7, #28]
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f1fa:	69f8      	ldr	r0, [r7, #28]
 800f1fc:	f7fe fc51 	bl	800daa2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f204:	2b00      	cmp	r3, #0
 800f206:	d11d      	bne.n	800f244 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f20e:	861a      	strh	r2, [r3, #48]	; 0x30
 800f210:	e01f      	b.n	800f252 <tcp_process+0x2ea>
 800f212:	bf00      	nop
 800f214:	08018dc4 	.word	0x08018dc4
 800f218:	08018ffc 	.word	0x08018ffc
 800f21c:	08018e10 	.word	0x08018e10
 800f220:	20000a44 	.word	0x20000a44
 800f224:	20000a3c 	.word	0x20000a3c
 800f228:	20000a38 	.word	0x20000a38
 800f22c:	08019018 	.word	0x08019018
 800f230:	20000a45 	.word	0x20000a45
 800f234:	2000e008 	.word	0x2000e008
 800f238:	20000a28 	.word	0x20000a28
 800f23c:	08019038 	.word	0x08019038
 800f240:	08019050 	.word	0x08019050
        } else {
          pcb->rtime = 0;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2200      	movs	r2, #0
 800f248:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	2200      	movs	r2, #0
 800f24e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00a      	beq.n	800f272 <tcp_process+0x30a>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	6910      	ldr	r0, [r2, #16]
 800f266:	2200      	movs	r2, #0
 800f268:	6879      	ldr	r1, [r7, #4]
 800f26a:	4798      	blx	r3
 800f26c:	4603      	mov	r3, r0
 800f26e:	76bb      	strb	r3, [r7, #26]
 800f270:	e001      	b.n	800f276 <tcp_process+0x30e>
 800f272:	2300      	movs	r3, #0
 800f274:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f276:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f27a:	f113 0f0d 	cmn.w	r3, #13
 800f27e:	d102      	bne.n	800f286 <tcp_process+0x31e>
          return ERR_ABRT;
 800f280:	f06f 030c 	mvn.w	r3, #12
 800f284:	e250      	b.n	800f728 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	8b5b      	ldrh	r3, [r3, #26]
 800f28a:	f043 0302 	orr.w	r3, r3, #2
 800f28e:	b29a      	uxth	r2, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f294:	e23a      	b.n	800f70c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f296:	4b9d      	ldr	r3, [pc, #628]	; (800f50c <tcp_process+0x5a4>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	f003 0310 	and.w	r3, r3, #16
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	f000 8234 	beq.w	800f70c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2a4:	4b9a      	ldr	r3, [pc, #616]	; (800f510 <tcp_process+0x5a8>)
 800f2a6:	6819      	ldr	r1, [r3, #0]
 800f2a8:	4b9a      	ldr	r3, [pc, #616]	; (800f514 <tcp_process+0x5ac>)
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	4b9a      	ldr	r3, [pc, #616]	; (800f518 <tcp_process+0x5b0>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2b4:	4b99      	ldr	r3, [pc, #612]	; (800f51c <tcp_process+0x5b4>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2b8:	885b      	ldrh	r3, [r3, #2]
 800f2ba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f2bc:	4a97      	ldr	r2, [pc, #604]	; (800f51c <tcp_process+0x5b4>)
 800f2be:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f2c0:	8812      	ldrh	r2, [r2, #0]
 800f2c2:	b292      	uxth	r2, r2
 800f2c4:	9202      	str	r2, [sp, #8]
 800f2c6:	9301      	str	r3, [sp, #4]
 800f2c8:	4b95      	ldr	r3, [pc, #596]	; (800f520 <tcp_process+0x5b8>)
 800f2ca:	9300      	str	r3, [sp, #0]
 800f2cc:	4b95      	ldr	r3, [pc, #596]	; (800f524 <tcp_process+0x5bc>)
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f003 f8db 	bl	801248c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f2dc:	2b05      	cmp	r3, #5
 800f2de:	f200 8215 	bhi.w	800f70c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f002 fea5 	bl	8012038 <tcp_rexmit_rto>
      break;
 800f2ee:	e20d      	b.n	800f70c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f2f0:	4b86      	ldr	r3, [pc, #536]	; (800f50c <tcp_process+0x5a4>)
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	f003 0310 	and.w	r3, r3, #16
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	f000 80a1 	beq.w	800f440 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2fe:	4b84      	ldr	r3, [pc, #528]	; (800f510 <tcp_process+0x5a8>)
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f306:	1ad3      	subs	r3, r2, r3
 800f308:	3b01      	subs	r3, #1
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	db7e      	blt.n	800f40c <tcp_process+0x4a4>
 800f30e:	4b80      	ldr	r3, [pc, #512]	; (800f510 <tcp_process+0x5a8>)
 800f310:	681a      	ldr	r2, [r3, #0]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f316:	1ad3      	subs	r3, r2, r3
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dc77      	bgt.n	800f40c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2204      	movs	r2, #4
 800f320:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f326:	2b00      	cmp	r3, #0
 800f328:	d102      	bne.n	800f330 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f32a:	23fa      	movs	r3, #250	; 0xfa
 800f32c:	76bb      	strb	r3, [r7, #26]
 800f32e:	e01d      	b.n	800f36c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f334:	699b      	ldr	r3, [r3, #24]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d106      	bne.n	800f348 <tcp_process+0x3e0>
 800f33a:	4b7b      	ldr	r3, [pc, #492]	; (800f528 <tcp_process+0x5c0>)
 800f33c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f340:	497a      	ldr	r1, [pc, #488]	; (800f52c <tcp_process+0x5c4>)
 800f342:	487b      	ldr	r0, [pc, #492]	; (800f530 <tcp_process+0x5c8>)
 800f344:	f006 f88e 	bl	8015464 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f34c:	699b      	ldr	r3, [r3, #24]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00a      	beq.n	800f368 <tcp_process+0x400>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f356:	699b      	ldr	r3, [r3, #24]
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	6910      	ldr	r0, [r2, #16]
 800f35c:	2200      	movs	r2, #0
 800f35e:	6879      	ldr	r1, [r7, #4]
 800f360:	4798      	blx	r3
 800f362:	4603      	mov	r3, r0
 800f364:	76bb      	strb	r3, [r7, #26]
 800f366:	e001      	b.n	800f36c <tcp_process+0x404>
 800f368:	23f0      	movs	r3, #240	; 0xf0
 800f36a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f36c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d00a      	beq.n	800f38a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f374:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f378:	f113 0f0d 	cmn.w	r3, #13
 800f37c:	d002      	beq.n	800f384 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7fd fcea 	bl	800cd58 <tcp_abort>
            }
            return ERR_ABRT;
 800f384:	f06f 030c 	mvn.w	r3, #12
 800f388:	e1ce      	b.n	800f728 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 fae0 	bl	800f950 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f390:	4b68      	ldr	r3, [pc, #416]	; (800f534 <tcp_process+0x5cc>)
 800f392:	881b      	ldrh	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d005      	beq.n	800f3a4 <tcp_process+0x43c>
            recv_acked--;
 800f398:	4b66      	ldr	r3, [pc, #408]	; (800f534 <tcp_process+0x5cc>)
 800f39a:	881b      	ldrh	r3, [r3, #0]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	b29a      	uxth	r2, r3
 800f3a0:	4b64      	ldr	r3, [pc, #400]	; (800f534 <tcp_process+0x5cc>)
 800f3a2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3a8:	009a      	lsls	r2, r3, #2
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3ae:	005b      	lsls	r3, r3, #1
 800f3b0:	f241 111c 	movw	r1, #4380	; 0x111c
 800f3b4:	428b      	cmp	r3, r1
 800f3b6:	bf38      	it	cc
 800f3b8:	460b      	movcc	r3, r1
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d204      	bcs.n	800f3c8 <tcp_process+0x460>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	e00d      	b.n	800f3e4 <tcp_process+0x47c>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3cc:	005b      	lsls	r3, r3, #1
 800f3ce:	f241 121c 	movw	r2, #4380	; 0x111c
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d904      	bls.n	800f3e0 <tcp_process+0x478>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3da:	005b      	lsls	r3, r3, #1
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	e001      	b.n	800f3e4 <tcp_process+0x47c>
 800f3e0:	f241 131c 	movw	r3, #4380	; 0x111c
 800f3e4:	687a      	ldr	r2, [r7, #4]
 800f3e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f3ea:	4b53      	ldr	r3, [pc, #332]	; (800f538 <tcp_process+0x5d0>)
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	f003 0320 	and.w	r3, r3, #32
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d037      	beq.n	800f466 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	8b5b      	ldrh	r3, [r3, #26]
 800f3fa:	f043 0302 	orr.w	r3, r3, #2
 800f3fe:	b29a      	uxth	r2, r3
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2207      	movs	r2, #7
 800f408:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f40a:	e02c      	b.n	800f466 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f40c:	4b40      	ldr	r3, [pc, #256]	; (800f510 <tcp_process+0x5a8>)
 800f40e:	6819      	ldr	r1, [r3, #0]
 800f410:	4b40      	ldr	r3, [pc, #256]	; (800f514 <tcp_process+0x5ac>)
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	461a      	mov	r2, r3
 800f416:	4b40      	ldr	r3, [pc, #256]	; (800f518 <tcp_process+0x5b0>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f41c:	4b3f      	ldr	r3, [pc, #252]	; (800f51c <tcp_process+0x5b4>)
 800f41e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f420:	885b      	ldrh	r3, [r3, #2]
 800f422:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f424:	4a3d      	ldr	r2, [pc, #244]	; (800f51c <tcp_process+0x5b4>)
 800f426:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f428:	8812      	ldrh	r2, [r2, #0]
 800f42a:	b292      	uxth	r2, r2
 800f42c:	9202      	str	r2, [sp, #8]
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	4b3b      	ldr	r3, [pc, #236]	; (800f520 <tcp_process+0x5b8>)
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	4b3b      	ldr	r3, [pc, #236]	; (800f524 <tcp_process+0x5bc>)
 800f436:	4602      	mov	r2, r0
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f003 f827 	bl	801248c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f43e:	e167      	b.n	800f710 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f440:	4b32      	ldr	r3, [pc, #200]	; (800f50c <tcp_process+0x5a4>)
 800f442:	781b      	ldrb	r3, [r3, #0]
 800f444:	f003 0302 	and.w	r3, r3, #2
 800f448:	2b00      	cmp	r3, #0
 800f44a:	f000 8161 	beq.w	800f710 <tcp_process+0x7a8>
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f452:	1e5a      	subs	r2, r3, #1
 800f454:	4b30      	ldr	r3, [pc, #192]	; (800f518 <tcp_process+0x5b0>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	429a      	cmp	r2, r3
 800f45a:	f040 8159 	bne.w	800f710 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f002 fe0c 	bl	801207c <tcp_rexmit>
      break;
 800f464:	e154      	b.n	800f710 <tcp_process+0x7a8>
 800f466:	e153      	b.n	800f710 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 fa71 	bl	800f950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f46e:	4b32      	ldr	r3, [pc, #200]	; (800f538 <tcp_process+0x5d0>)
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	f003 0320 	and.w	r3, r3, #32
 800f476:	2b00      	cmp	r3, #0
 800f478:	f000 814c 	beq.w	800f714 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	8b5b      	ldrh	r3, [r3, #26]
 800f480:	f043 0302 	orr.w	r3, r3, #2
 800f484:	b29a      	uxth	r2, r3
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2207      	movs	r2, #7
 800f48e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f490:	e140      	b.n	800f714 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 fa5c 	bl	800f950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f498:	4b27      	ldr	r3, [pc, #156]	; (800f538 <tcp_process+0x5d0>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	f003 0320 	and.w	r3, r3, #32
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d071      	beq.n	800f588 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4a4:	4b19      	ldr	r3, [pc, #100]	; (800f50c <tcp_process+0x5a4>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	f003 0310 	and.w	r3, r3, #16
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d060      	beq.n	800f572 <tcp_process+0x60a>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f4b4:	4b16      	ldr	r3, [pc, #88]	; (800f510 <tcp_process+0x5a8>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d15a      	bne.n	800f572 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d156      	bne.n	800f572 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	8b5b      	ldrh	r3, [r3, #26]
 800f4c8:	f043 0302 	orr.w	r3, r3, #2
 800f4cc:	b29a      	uxth	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7fe fdbe 	bl	800e054 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f4d8:	4b18      	ldr	r3, [pc, #96]	; (800f53c <tcp_process+0x5d4>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d105      	bne.n	800f4ee <tcp_process+0x586>
 800f4e2:	4b16      	ldr	r3, [pc, #88]	; (800f53c <tcp_process+0x5d4>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	4a14      	ldr	r2, [pc, #80]	; (800f53c <tcp_process+0x5d4>)
 800f4ea:	6013      	str	r3, [r2, #0]
 800f4ec:	e02e      	b.n	800f54c <tcp_process+0x5e4>
 800f4ee:	4b13      	ldr	r3, [pc, #76]	; (800f53c <tcp_process+0x5d4>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	617b      	str	r3, [r7, #20]
 800f4f4:	e027      	b.n	800f546 <tcp_process+0x5de>
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	429a      	cmp	r2, r3
 800f4fe:	d11f      	bne.n	800f540 <tcp_process+0x5d8>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	68da      	ldr	r2, [r3, #12]
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	60da      	str	r2, [r3, #12]
 800f508:	e020      	b.n	800f54c <tcp_process+0x5e4>
 800f50a:	bf00      	nop
 800f50c:	20000a44 	.word	0x20000a44
 800f510:	20000a3c 	.word	0x20000a3c
 800f514:	20000a42 	.word	0x20000a42
 800f518:	20000a38 	.word	0x20000a38
 800f51c:	20000a28 	.word	0x20000a28
 800f520:	2000a7c4 	.word	0x2000a7c4
 800f524:	2000a7c8 	.word	0x2000a7c8
 800f528:	08018dc4 	.word	0x08018dc4
 800f52c:	08019064 	.word	0x08019064
 800f530:	08018e10 	.word	0x08018e10
 800f534:	20000a40 	.word	0x20000a40
 800f538:	20000a45 	.word	0x20000a45
 800f53c:	2000e004 	.word	0x2000e004
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1d4      	bne.n	800f4f6 <tcp_process+0x58e>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	60da      	str	r2, [r3, #12]
 800f552:	4b77      	ldr	r3, [pc, #476]	; (800f730 <tcp_process+0x7c8>)
 800f554:	2201      	movs	r2, #1
 800f556:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	220a      	movs	r2, #10
 800f55c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f55e:	4b75      	ldr	r3, [pc, #468]	; (800f734 <tcp_process+0x7cc>)
 800f560:	681a      	ldr	r2, [r3, #0]
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	60da      	str	r2, [r3, #12]
 800f566:	4a73      	ldr	r2, [pc, #460]	; (800f734 <tcp_process+0x7cc>)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	f003 f950 	bl	8012810 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f570:	e0d2      	b.n	800f718 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8b5b      	ldrh	r3, [r3, #26]
 800f576:	f043 0302 	orr.w	r3, r3, #2
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	2208      	movs	r2, #8
 800f584:	751a      	strb	r2, [r3, #20]
      break;
 800f586:	e0c7      	b.n	800f718 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f588:	4b6b      	ldr	r3, [pc, #428]	; (800f738 <tcp_process+0x7d0>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	f003 0310 	and.w	r3, r3, #16
 800f590:	2b00      	cmp	r3, #0
 800f592:	f000 80c1 	beq.w	800f718 <tcp_process+0x7b0>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f59a:	4b68      	ldr	r3, [pc, #416]	; (800f73c <tcp_process+0x7d4>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	f040 80ba 	bne.w	800f718 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f040 80b5 	bne.w	800f718 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	2206      	movs	r2, #6
 800f5b2:	751a      	strb	r2, [r3, #20]
      break;
 800f5b4:	e0b0      	b.n	800f718 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f000 f9ca 	bl	800f950 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f5bc:	4b60      	ldr	r3, [pc, #384]	; (800f740 <tcp_process+0x7d8>)
 800f5be:	781b      	ldrb	r3, [r3, #0]
 800f5c0:	f003 0320 	and.w	r3, r3, #32
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 80a9 	beq.w	800f71c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	8b5b      	ldrh	r3, [r3, #26]
 800f5ce:	f043 0302 	orr.w	r3, r3, #2
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7fe fd3b 	bl	800e054 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f5de:	4b59      	ldr	r3, [pc, #356]	; (800f744 <tcp_process+0x7dc>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d105      	bne.n	800f5f4 <tcp_process+0x68c>
 800f5e8:	4b56      	ldr	r3, [pc, #344]	; (800f744 <tcp_process+0x7dc>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	68db      	ldr	r3, [r3, #12]
 800f5ee:	4a55      	ldr	r2, [pc, #340]	; (800f744 <tcp_process+0x7dc>)
 800f5f0:	6013      	str	r3, [r2, #0]
 800f5f2:	e013      	b.n	800f61c <tcp_process+0x6b4>
 800f5f4:	4b53      	ldr	r3, [pc, #332]	; (800f744 <tcp_process+0x7dc>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	613b      	str	r3, [r7, #16]
 800f5fa:	e00c      	b.n	800f616 <tcp_process+0x6ae>
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	429a      	cmp	r2, r3
 800f604:	d104      	bne.n	800f610 <tcp_process+0x6a8>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	68da      	ldr	r2, [r3, #12]
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	60da      	str	r2, [r3, #12]
 800f60e:	e005      	b.n	800f61c <tcp_process+0x6b4>
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	613b      	str	r3, [r7, #16]
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d1ef      	bne.n	800f5fc <tcp_process+0x694>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2200      	movs	r2, #0
 800f620:	60da      	str	r2, [r3, #12]
 800f622:	4b43      	ldr	r3, [pc, #268]	; (800f730 <tcp_process+0x7c8>)
 800f624:	2201      	movs	r2, #1
 800f626:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	220a      	movs	r2, #10
 800f62c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f62e:	4b41      	ldr	r3, [pc, #260]	; (800f734 <tcp_process+0x7cc>)
 800f630:	681a      	ldr	r2, [r3, #0]
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	60da      	str	r2, [r3, #12]
 800f636:	4a3f      	ldr	r2, [pc, #252]	; (800f734 <tcp_process+0x7cc>)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6013      	str	r3, [r2, #0]
 800f63c:	f003 f8e8 	bl	8012810 <tcp_timer_needed>
      }
      break;
 800f640:	e06c      	b.n	800f71c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 f984 	bl	800f950 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f648:	4b3b      	ldr	r3, [pc, #236]	; (800f738 <tcp_process+0x7d0>)
 800f64a:	781b      	ldrb	r3, [r3, #0]
 800f64c:	f003 0310 	and.w	r3, r3, #16
 800f650:	2b00      	cmp	r3, #0
 800f652:	d065      	beq.n	800f720 <tcp_process+0x7b8>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f658:	4b38      	ldr	r3, [pc, #224]	; (800f73c <tcp_process+0x7d4>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d15f      	bne.n	800f720 <tcp_process+0x7b8>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f664:	2b00      	cmp	r3, #0
 800f666:	d15b      	bne.n	800f720 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f7fe fcf3 	bl	800e054 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f66e:	4b35      	ldr	r3, [pc, #212]	; (800f744 <tcp_process+0x7dc>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	687a      	ldr	r2, [r7, #4]
 800f674:	429a      	cmp	r2, r3
 800f676:	d105      	bne.n	800f684 <tcp_process+0x71c>
 800f678:	4b32      	ldr	r3, [pc, #200]	; (800f744 <tcp_process+0x7dc>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	4a31      	ldr	r2, [pc, #196]	; (800f744 <tcp_process+0x7dc>)
 800f680:	6013      	str	r3, [r2, #0]
 800f682:	e013      	b.n	800f6ac <tcp_process+0x744>
 800f684:	4b2f      	ldr	r3, [pc, #188]	; (800f744 <tcp_process+0x7dc>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	60fb      	str	r3, [r7, #12]
 800f68a:	e00c      	b.n	800f6a6 <tcp_process+0x73e>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	429a      	cmp	r2, r3
 800f694:	d104      	bne.n	800f6a0 <tcp_process+0x738>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	68da      	ldr	r2, [r3, #12]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	60da      	str	r2, [r3, #12]
 800f69e:	e005      	b.n	800f6ac <tcp_process+0x744>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	60fb      	str	r3, [r7, #12]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1ef      	bne.n	800f68c <tcp_process+0x724>
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	60da      	str	r2, [r3, #12]
 800f6b2:	4b1f      	ldr	r3, [pc, #124]	; (800f730 <tcp_process+0x7c8>)
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	220a      	movs	r2, #10
 800f6bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f6be:	4b1d      	ldr	r3, [pc, #116]	; (800f734 <tcp_process+0x7cc>)
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	60da      	str	r2, [r3, #12]
 800f6c6:	4a1b      	ldr	r2, [pc, #108]	; (800f734 <tcp_process+0x7cc>)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6013      	str	r3, [r2, #0]
 800f6cc:	f003 f8a0 	bl	8012810 <tcp_timer_needed>
      }
      break;
 800f6d0:	e026      	b.n	800f720 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 f93c 	bl	800f950 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f6d8:	4b17      	ldr	r3, [pc, #92]	; (800f738 <tcp_process+0x7d0>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	f003 0310 	and.w	r3, r3, #16
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d01f      	beq.n	800f724 <tcp_process+0x7bc>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6e8:	4b14      	ldr	r3, [pc, #80]	; (800f73c <tcp_process+0x7d4>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d119      	bne.n	800f724 <tcp_process+0x7bc>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d115      	bne.n	800f724 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f6f8:	4b11      	ldr	r3, [pc, #68]	; (800f740 <tcp_process+0x7d8>)
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	f043 0310 	orr.w	r3, r3, #16
 800f700:	b2da      	uxtb	r2, r3
 800f702:	4b0f      	ldr	r3, [pc, #60]	; (800f740 <tcp_process+0x7d8>)
 800f704:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f706:	e00d      	b.n	800f724 <tcp_process+0x7bc>
    default:
      break;
 800f708:	bf00      	nop
 800f70a:	e00c      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f70c:	bf00      	nop
 800f70e:	e00a      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f710:	bf00      	nop
 800f712:	e008      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f714:	bf00      	nop
 800f716:	e006      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f718:	bf00      	nop
 800f71a:	e004      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f71c:	bf00      	nop
 800f71e:	e002      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f720:	bf00      	nop
 800f722:	e000      	b.n	800f726 <tcp_process+0x7be>
      break;
 800f724:	bf00      	nop
  }
  return ERR_OK;
 800f726:	2300      	movs	r3, #0
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3724      	adds	r7, #36	; 0x24
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd90      	pop	{r4, r7, pc}
 800f730:	2000e000 	.word	0x2000e000
 800f734:	2000e014 	.word	0x2000e014
 800f738:	20000a44 	.word	0x20000a44
 800f73c:	20000a3c 	.word	0x20000a3c
 800f740:	20000a45 	.word	0x20000a45
 800f744:	2000e004 	.word	0x2000e004

0800f748 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f748:	b590      	push	{r4, r7, lr}
 800f74a:	b085      	sub	sp, #20
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d106      	bne.n	800f766 <tcp_oos_insert_segment+0x1e>
 800f758:	4b3b      	ldr	r3, [pc, #236]	; (800f848 <tcp_oos_insert_segment+0x100>)
 800f75a:	f240 421f 	movw	r2, #1055	; 0x41f
 800f75e:	493b      	ldr	r1, [pc, #236]	; (800f84c <tcp_oos_insert_segment+0x104>)
 800f760:	483b      	ldr	r0, [pc, #236]	; (800f850 <tcp_oos_insert_segment+0x108>)
 800f762:	f005 fe7f 	bl	8015464 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	899b      	ldrh	r3, [r3, #12]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fb f9d8 	bl	800ab24 <lwip_htons>
 800f774:	4603      	mov	r3, r0
 800f776:	b2db      	uxtb	r3, r3
 800f778:	f003 0301 	and.w	r3, r3, #1
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d028      	beq.n	800f7d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f780:	6838      	ldr	r0, [r7, #0]
 800f782:	f7fe f979 	bl	800da78 <tcp_segs_free>
    next = NULL;
 800f786:	2300      	movs	r3, #0
 800f788:	603b      	str	r3, [r7, #0]
 800f78a:	e056      	b.n	800f83a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	899b      	ldrh	r3, [r3, #12]
 800f792:	b29b      	uxth	r3, r3
 800f794:	4618      	mov	r0, r3
 800f796:	f7fb f9c5 	bl	800ab24 <lwip_htons>
 800f79a:	4603      	mov	r3, r0
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	f003 0301 	and.w	r3, r3, #1
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d00d      	beq.n	800f7c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	899b      	ldrh	r3, [r3, #12]
 800f7ac:	b29c      	uxth	r4, r3
 800f7ae:	2001      	movs	r0, #1
 800f7b0:	f7fb f9b8 	bl	800ab24 <lwip_htons>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	4322      	orrs	r2, r4
 800f7be:	b292      	uxth	r2, r2
 800f7c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f7fe f968 	bl	800daa2 <tcp_seg_free>
    while (next &&
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d00e      	beq.n	800f7f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	891b      	ldrh	r3, [r3, #8]
 800f7dc:	461a      	mov	r2, r3
 800f7de:	4b1d      	ldr	r3, [pc, #116]	; (800f854 <tcp_oos_insert_segment+0x10c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	441a      	add	r2, r3
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	68db      	ldr	r3, [r3, #12]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	8909      	ldrh	r1, [r1, #8]
 800f7ee:	440b      	add	r3, r1
 800f7f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	daca      	bge.n	800f78c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f7f6:	683b      	ldr	r3, [r7, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d01e      	beq.n	800f83a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	891b      	ldrh	r3, [r3, #8]
 800f800:	461a      	mov	r2, r3
 800f802:	4b14      	ldr	r3, [pc, #80]	; (800f854 <tcp_oos_insert_segment+0x10c>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	441a      	add	r2, r3
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f810:	2b00      	cmp	r3, #0
 800f812:	dd12      	ble.n	800f83a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	68db      	ldr	r3, [r3, #12]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	4b0d      	ldr	r3, [pc, #52]	; (800f854 <tcp_oos_insert_segment+0x10c>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	b29b      	uxth	r3, r3
 800f822:	1ad3      	subs	r3, r2, r3
 800f824:	b29a      	uxth	r2, r3
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	685a      	ldr	r2, [r3, #4]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	891b      	ldrh	r3, [r3, #8]
 800f832:	4619      	mov	r1, r3
 800f834:	4610      	mov	r0, r2
 800f836:	f7fc fb81 	bl	800bf3c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	683a      	ldr	r2, [r7, #0]
 800f83e:	601a      	str	r2, [r3, #0]
}
 800f840:	bf00      	nop
 800f842:	3714      	adds	r7, #20
 800f844:	46bd      	mov	sp, r7
 800f846:	bd90      	pop	{r4, r7, pc}
 800f848:	08018dc4 	.word	0x08018dc4
 800f84c:	08019084 	.word	0x08019084
 800f850:	08018e10 	.word	0x08018e10
 800f854:	20000a38 	.word	0x20000a38

0800f858 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f858:	b5b0      	push	{r4, r5, r7, lr}
 800f85a:	b086      	sub	sp, #24
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
 800f864:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f866:	e03e      	b.n	800f8e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	685b      	ldr	r3, [r3, #4]
 800f876:	4618      	mov	r0, r3
 800f878:	f7fc fd6e 	bl	800c358 <pbuf_clen>
 800f87c:	4603      	mov	r3, r0
 800f87e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f886:	8a7a      	ldrh	r2, [r7, #18]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d906      	bls.n	800f89a <tcp_free_acked_segments+0x42>
 800f88c:	4b2a      	ldr	r3, [pc, #168]	; (800f938 <tcp_free_acked_segments+0xe0>)
 800f88e:	f240 4257 	movw	r2, #1111	; 0x457
 800f892:	492a      	ldr	r1, [pc, #168]	; (800f93c <tcp_free_acked_segments+0xe4>)
 800f894:	482a      	ldr	r0, [pc, #168]	; (800f940 <tcp_free_acked_segments+0xe8>)
 800f896:	f005 fde5 	bl	8015464 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f8a0:	8a7b      	ldrh	r3, [r7, #18]
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	891a      	ldrh	r2, [r3, #8]
 800f8b0:	4b24      	ldr	r3, [pc, #144]	; (800f944 <tcp_free_acked_segments+0xec>)
 800f8b2:	881b      	ldrh	r3, [r3, #0]
 800f8b4:	4413      	add	r3, r2
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	4b22      	ldr	r3, [pc, #136]	; (800f944 <tcp_free_acked_segments+0xec>)
 800f8ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f8bc:	6978      	ldr	r0, [r7, #20]
 800f8be:	f7fe f8f0 	bl	800daa2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00c      	beq.n	800f8e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d109      	bne.n	800f8e6 <tcp_free_acked_segments+0x8e>
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d106      	bne.n	800f8e6 <tcp_free_acked_segments+0x8e>
 800f8d8:	4b17      	ldr	r3, [pc, #92]	; (800f938 <tcp_free_acked_segments+0xe0>)
 800f8da:	f240 4261 	movw	r2, #1121	; 0x461
 800f8de:	491a      	ldr	r1, [pc, #104]	; (800f948 <tcp_free_acked_segments+0xf0>)
 800f8e0:	4817      	ldr	r0, [pc, #92]	; (800f940 <tcp_free_acked_segments+0xe8>)
 800f8e2:	f005 fdbf 	bl	8015464 <iprintf>
  while (seg_list != NULL &&
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d020      	beq.n	800f92e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fb f92b 	bl	800ab4e <lwip_htonl>
 800f8f8:	4604      	mov	r4, r0
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	891b      	ldrh	r3, [r3, #8]
 800f8fe:	461d      	mov	r5, r3
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	68db      	ldr	r3, [r3, #12]
 800f904:	899b      	ldrh	r3, [r3, #12]
 800f906:	b29b      	uxth	r3, r3
 800f908:	4618      	mov	r0, r3
 800f90a:	f7fb f90b 	bl	800ab24 <lwip_htons>
 800f90e:	4603      	mov	r3, r0
 800f910:	b2db      	uxtb	r3, r3
 800f912:	f003 0303 	and.w	r3, r3, #3
 800f916:	2b00      	cmp	r3, #0
 800f918:	d001      	beq.n	800f91e <tcp_free_acked_segments+0xc6>
 800f91a:	2301      	movs	r3, #1
 800f91c:	e000      	b.n	800f920 <tcp_free_acked_segments+0xc8>
 800f91e:	2300      	movs	r3, #0
 800f920:	442b      	add	r3, r5
 800f922:	18e2      	adds	r2, r4, r3
 800f924:	4b09      	ldr	r3, [pc, #36]	; (800f94c <tcp_free_acked_segments+0xf4>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	dd9c      	ble.n	800f868 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f92e:	68bb      	ldr	r3, [r7, #8]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3718      	adds	r7, #24
 800f934:	46bd      	mov	sp, r7
 800f936:	bdb0      	pop	{r4, r5, r7, pc}
 800f938:	08018dc4 	.word	0x08018dc4
 800f93c:	080190ac 	.word	0x080190ac
 800f940:	08018e10 	.word	0x08018e10
 800f944:	20000a40 	.word	0x20000a40
 800f948:	080190d4 	.word	0x080190d4
 800f94c:	20000a3c 	.word	0x20000a3c

0800f950 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f950:	b5b0      	push	{r4, r5, r7, lr}
 800f952:	b094      	sub	sp, #80	; 0x50
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f958:	2300      	movs	r3, #0
 800f95a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d106      	bne.n	800f970 <tcp_receive+0x20>
 800f962:	4ba6      	ldr	r3, [pc, #664]	; (800fbfc <tcp_receive+0x2ac>)
 800f964:	f240 427b 	movw	r2, #1147	; 0x47b
 800f968:	49a5      	ldr	r1, [pc, #660]	; (800fc00 <tcp_receive+0x2b0>)
 800f96a:	48a6      	ldr	r0, [pc, #664]	; (800fc04 <tcp_receive+0x2b4>)
 800f96c:	f005 fd7a 	bl	8015464 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	7d1b      	ldrb	r3, [r3, #20]
 800f974:	2b03      	cmp	r3, #3
 800f976:	d806      	bhi.n	800f986 <tcp_receive+0x36>
 800f978:	4ba0      	ldr	r3, [pc, #640]	; (800fbfc <tcp_receive+0x2ac>)
 800f97a:	f240 427c 	movw	r2, #1148	; 0x47c
 800f97e:	49a2      	ldr	r1, [pc, #648]	; (800fc08 <tcp_receive+0x2b8>)
 800f980:	48a0      	ldr	r0, [pc, #640]	; (800fc04 <tcp_receive+0x2b4>)
 800f982:	f005 fd6f 	bl	8015464 <iprintf>

  if (flags & TCP_ACK) {
 800f986:	4ba1      	ldr	r3, [pc, #644]	; (800fc0c <tcp_receive+0x2bc>)
 800f988:	781b      	ldrb	r3, [r3, #0]
 800f98a:	f003 0310 	and.w	r3, r3, #16
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 8263 	beq.w	800fe5a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f99a:	461a      	mov	r2, r3
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9a0:	4413      	add	r3, r2
 800f9a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9a8:	4b99      	ldr	r3, [pc, #612]	; (800fc10 <tcp_receive+0x2c0>)
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	1ad3      	subs	r3, r2, r3
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	db1b      	blt.n	800f9ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f9b6:	4b96      	ldr	r3, [pc, #600]	; (800fc10 <tcp_receive+0x2c0>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d106      	bne.n	800f9cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9c2:	4b94      	ldr	r3, [pc, #592]	; (800fc14 <tcp_receive+0x2c4>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	1ad3      	subs	r3, r2, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	db0e      	blt.n	800f9ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f9d0:	4b90      	ldr	r3, [pc, #576]	; (800fc14 <tcp_receive+0x2c4>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d125      	bne.n	800fa24 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f9d8:	4b8f      	ldr	r3, [pc, #572]	; (800fc18 <tcp_receive+0x2c8>)
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	89db      	ldrh	r3, [r3, #14]
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d91c      	bls.n	800fa24 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f9ea:	4b8b      	ldr	r3, [pc, #556]	; (800fc18 <tcp_receive+0x2c8>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	89db      	ldrh	r3, [r3, #14]
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d205      	bcs.n	800fa14 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fa14:	4b7e      	ldr	r3, [pc, #504]	; (800fc10 <tcp_receive+0x2c0>)
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fa1c:	4b7d      	ldr	r3, [pc, #500]	; (800fc14 <tcp_receive+0x2c4>)
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fa24:	4b7b      	ldr	r3, [pc, #492]	; (800fc14 <tcp_receive+0x2c4>)
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa2c:	1ad3      	subs	r3, r2, r3
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	dc58      	bgt.n	800fae4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fa32:	4b7a      	ldr	r3, [pc, #488]	; (800fc1c <tcp_receive+0x2cc>)
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d14b      	bne.n	800fad2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fa44:	4413      	add	r3, r2
 800fa46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d142      	bne.n	800fad2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	db3d      	blt.n	800fad2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fa5a:	4b6e      	ldr	r3, [pc, #440]	; (800fc14 <tcp_receive+0x2c4>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d137      	bne.n	800fad2 <tcp_receive+0x182>
              found_dupack = 1;
 800fa62:	2301      	movs	r3, #1
 800fa64:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa6c:	2bff      	cmp	r3, #255	; 0xff
 800fa6e:	d007      	beq.n	800fa80 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa76:	3301      	adds	r3, #1
 800fa78:	b2da      	uxtb	r2, r3
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa86:	2b03      	cmp	r3, #3
 800fa88:	d91b      	bls.n	800fac2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa94:	4413      	add	r3, r2
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d30a      	bcc.n	800fab8 <tcp_receive+0x168>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800faac:	4413      	add	r3, r2
 800faae:	b29a      	uxth	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fab6:	e004      	b.n	800fac2 <tcp_receive+0x172>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fabe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fac8:	2b02      	cmp	r3, #2
 800faca:	d902      	bls.n	800fad2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f002 fb41 	bl	8012154 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f040 8160 	bne.w	800fd9a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fae2:	e15a      	b.n	800fd9a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fae4:	4b4b      	ldr	r3, [pc, #300]	; (800fc14 <tcp_receive+0x2c4>)
 800fae6:	681a      	ldr	r2, [r3, #0]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	3b01      	subs	r3, #1
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f2c0 814d 	blt.w	800fd90 <tcp_receive+0x440>
 800faf6:	4b47      	ldr	r3, [pc, #284]	; (800fc14 <tcp_receive+0x2c4>)
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fafe:	1ad3      	subs	r3, r2, r3
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	f300 8145 	bgt.w	800fd90 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	8b5b      	ldrh	r3, [r3, #26]
 800fb0a:	f003 0304 	and.w	r3, r3, #4
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d010      	beq.n	800fb34 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	8b5b      	ldrh	r3, [r3, #26]
 800fb16:	f023 0304 	bic.w	r3, r3, #4
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb42:	10db      	asrs	r3, r3, #3
 800fb44:	b21b      	sxth	r3, r3
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb4e:	b29b      	uxth	r3, r3
 800fb50:	4413      	add	r3, r2
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	b21a      	sxth	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fb5c:	4b2d      	ldr	r3, [pc, #180]	; (800fc14 <tcp_receive+0x2c4>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb66:	b29b      	uxth	r3, r3
 800fb68:	1ad3      	subs	r3, r2, r3
 800fb6a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fb74:	4b27      	ldr	r3, [pc, #156]	; (800fc14 <tcp_receive+0x2c4>)
 800fb76:	681a      	ldr	r2, [r3, #0]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	7d1b      	ldrb	r3, [r3, #20]
 800fb80:	2b03      	cmp	r3, #3
 800fb82:	f240 8096 	bls.w	800fcb2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d244      	bcs.n	800fc20 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	8b5b      	ldrh	r3, [r3, #26]
 800fb9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d001      	beq.n	800fba6 <tcp_receive+0x256>
 800fba2:	2301      	movs	r3, #1
 800fba4:	e000      	b.n	800fba8 <tcp_receive+0x258>
 800fba6:	2302      	movs	r3, #2
 800fba8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fbac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbb6:	fb12 f303 	smulbb	r3, r2, r3
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	bf28      	it	cs
 800fbc2:	4613      	movcs	r3, r2
 800fbc4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbcc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbce:	4413      	add	r3, r2
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d309      	bcc.n	800fbf0 <tcp_receive+0x2a0>
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbe2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fbe4:	4413      	add	r3, r2
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fbee:	e060      	b.n	800fcb2 <tcp_receive+0x362>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbf6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fbfa:	e05a      	b.n	800fcb2 <tcp_receive+0x362>
 800fbfc:	08018dc4 	.word	0x08018dc4
 800fc00:	080190f4 	.word	0x080190f4
 800fc04:	08018e10 	.word	0x08018e10
 800fc08:	08019110 	.word	0x08019110
 800fc0c:	20000a44 	.word	0x20000a44
 800fc10:	20000a38 	.word	0x20000a38
 800fc14:	20000a3c 	.word	0x20000a3c
 800fc18:	20000a28 	.word	0x20000a28
 800fc1c:	20000a42 	.word	0x20000a42
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc28:	4413      	add	r3, r2
 800fc2a:	b29a      	uxth	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d309      	bcc.n	800fc4a <tcp_receive+0x2fa>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc3c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc3e:	4413      	add	r3, r2
 800fc40:	b29a      	uxth	r2, r3
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fc48:	e004      	b.n	800fc54 <tcp_receive+0x304>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d326      	bcc.n	800fcb2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc70:	1ad3      	subs	r3, r2, r3
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc84:	4413      	add	r3, r2
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d30a      	bcc.n	800fca8 <tcp_receive+0x358>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc9c:	4413      	add	r3, r2
 800fc9e:	b29a      	uxth	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fca6:	e004      	b.n	800fcb2 <tcp_receive+0x362>
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcba:	4a98      	ldr	r2, [pc, #608]	; (800ff1c <tcp_receive+0x5cc>)
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f7ff fdcb 	bl	800f858 <tcp_free_acked_segments>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fcd0:	4a93      	ldr	r2, [pc, #588]	; (800ff20 <tcp_receive+0x5d0>)
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f7ff fdc0 	bl	800f858 <tcp_free_acked_segments>
 800fcd8:	4602      	mov	r2, r0
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d104      	bne.n	800fcf0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcec:	861a      	strh	r2, [r3, #48]	; 0x30
 800fcee:	e002      	b.n	800fcf6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d103      	bne.n	800fd0c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2200      	movs	r2, #0
 800fd08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fd12:	4b84      	ldr	r3, [pc, #528]	; (800ff24 <tcp_receive+0x5d4>)
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	4413      	add	r3, r2
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	8b5b      	ldrh	r3, [r3, #26]
 800fd24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d035      	beq.n	800fd98 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d118      	bne.n	800fd66 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d00c      	beq.n	800fd56 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f7fa ff00 	bl	800ab4e <lwip_htonl>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	dc20      	bgt.n	800fd98 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	8b5b      	ldrh	r3, [r3, #26]
 800fd5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd5e:	b29a      	uxth	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd64:	e018      	b.n	800fd98 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd6e:	68db      	ldr	r3, [r3, #12]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fa feeb 	bl	800ab4e <lwip_htonl>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	1ae3      	subs	r3, r4, r3
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	dc0b      	bgt.n	800fd98 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	8b5b      	ldrh	r3, [r3, #26]
 800fd84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd88:	b29a      	uxth	r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd8e:	e003      	b.n	800fd98 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f002 fbcd 	bl	8012530 <tcp_send_empty_ack>
 800fd96:	e000      	b.n	800fd9a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fd98:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d05b      	beq.n	800fe5a <tcp_receive+0x50a>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fda6:	4b60      	ldr	r3, [pc, #384]	; (800ff28 <tcp_receive+0x5d8>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	1ad3      	subs	r3, r2, r3
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	da54      	bge.n	800fe5a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fdb0:	4b5e      	ldr	r3, [pc, #376]	; (800ff2c <tcp_receive+0x5dc>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	b29b      	uxth	r3, r3
 800fdc0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fdc4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fdce:	10db      	asrs	r3, r3, #3
 800fdd0:	b21b      	sxth	r3, r3
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fde8:	4413      	add	r3, r2
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	b21a      	sxth	r2, r3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fdf2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	da05      	bge.n	800fe06 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800fdfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fdfe:	425b      	negs	r3, r3
 800fe00:	b29b      	uxth	r3, r3
 800fe02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fe06:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe10:	109b      	asrs	r3, r3, #2
 800fe12:	b21b      	sxth	r3, r3
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	1ad3      	subs	r3, r2, r3
 800fe18:	b29b      	uxth	r3, r3
 800fe1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe24:	b29a      	uxth	r2, r3
 800fe26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fe2a:	4413      	add	r3, r2
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	b21a      	sxth	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe3a:	10db      	asrs	r3, r3, #3
 800fe3c:	b21b      	sxth	r3, r3
 800fe3e:	b29a      	uxth	r2, r3
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	4413      	add	r3, r2
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	b21a      	sxth	r2, r3
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fe5a:	4b35      	ldr	r3, [pc, #212]	; (800ff30 <tcp_receive+0x5e0>)
 800fe5c:	881b      	ldrh	r3, [r3, #0]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f000 84e1 	beq.w	8010826 <tcp_receive+0xed6>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	7d1b      	ldrb	r3, [r3, #20]
 800fe68:	2b06      	cmp	r3, #6
 800fe6a:	f200 84dc 	bhi.w	8010826 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe72:	4b30      	ldr	r3, [pc, #192]	; (800ff34 <tcp_receive+0x5e4>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	3b01      	subs	r3, #1
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	f2c0 808e 	blt.w	800ff9c <tcp_receive+0x64c>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe84:	4b2a      	ldr	r3, [pc, #168]	; (800ff30 <tcp_receive+0x5e0>)
 800fe86:	881b      	ldrh	r3, [r3, #0]
 800fe88:	4619      	mov	r1, r3
 800fe8a:	4b2a      	ldr	r3, [pc, #168]	; (800ff34 <tcp_receive+0x5e4>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	440b      	add	r3, r1
 800fe90:	1ad3      	subs	r3, r2, r3
 800fe92:	3301      	adds	r3, #1
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f300 8081 	bgt.w	800ff9c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fe9a:	4b27      	ldr	r3, [pc, #156]	; (800ff38 <tcp_receive+0x5e8>)
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fea4:	4b23      	ldr	r3, [pc, #140]	; (800ff34 <tcp_receive+0x5e4>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	1ad3      	subs	r3, r2, r3
 800feaa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800feac:	4b22      	ldr	r3, [pc, #136]	; (800ff38 <tcp_receive+0x5e8>)
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d106      	bne.n	800fec2 <tcp_receive+0x572>
 800feb4:	4b21      	ldr	r3, [pc, #132]	; (800ff3c <tcp_receive+0x5ec>)
 800feb6:	f240 5294 	movw	r2, #1428	; 0x594
 800feba:	4921      	ldr	r1, [pc, #132]	; (800ff40 <tcp_receive+0x5f0>)
 800febc:	4821      	ldr	r0, [pc, #132]	; (800ff44 <tcp_receive+0x5f4>)
 800febe:	f005 fad1 	bl	8015464 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fec8:	4293      	cmp	r3, r2
 800feca:	d906      	bls.n	800feda <tcp_receive+0x58a>
 800fecc:	4b1b      	ldr	r3, [pc, #108]	; (800ff3c <tcp_receive+0x5ec>)
 800fece:	f240 5295 	movw	r2, #1429	; 0x595
 800fed2:	491d      	ldr	r1, [pc, #116]	; (800ff48 <tcp_receive+0x5f8>)
 800fed4:	481b      	ldr	r0, [pc, #108]	; (800ff44 <tcp_receive+0x5f4>)
 800fed6:	f005 fac5 	bl	8015464 <iprintf>
      off = (u16_t)off32;
 800feda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fedc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fee0:	4b15      	ldr	r3, [pc, #84]	; (800ff38 <tcp_receive+0x5e8>)
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	891b      	ldrh	r3, [r3, #8]
 800fee6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800feea:	429a      	cmp	r2, r3
 800feec:	d906      	bls.n	800fefc <tcp_receive+0x5ac>
 800feee:	4b13      	ldr	r3, [pc, #76]	; (800ff3c <tcp_receive+0x5ec>)
 800fef0:	f240 5297 	movw	r2, #1431	; 0x597
 800fef4:	4915      	ldr	r1, [pc, #84]	; (800ff4c <tcp_receive+0x5fc>)
 800fef6:	4813      	ldr	r0, [pc, #76]	; (800ff44 <tcp_receive+0x5f4>)
 800fef8:	f005 fab4 	bl	8015464 <iprintf>
      inseg.len -= off;
 800fefc:	4b0e      	ldr	r3, [pc, #56]	; (800ff38 <tcp_receive+0x5e8>)
 800fefe:	891a      	ldrh	r2, [r3, #8]
 800ff00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	b29a      	uxth	r2, r3
 800ff08:	4b0b      	ldr	r3, [pc, #44]	; (800ff38 <tcp_receive+0x5e8>)
 800ff0a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ff0c:	4b0a      	ldr	r3, [pc, #40]	; (800ff38 <tcp_receive+0x5e8>)
 800ff0e:	685b      	ldr	r3, [r3, #4]
 800ff10:	891a      	ldrh	r2, [r3, #8]
 800ff12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff16:	1ad3      	subs	r3, r2, r3
 800ff18:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ff1a:	e029      	b.n	800ff70 <tcp_receive+0x620>
 800ff1c:	0801912c 	.word	0x0801912c
 800ff20:	08019134 	.word	0x08019134
 800ff24:	20000a40 	.word	0x20000a40
 800ff28:	20000a3c 	.word	0x20000a3c
 800ff2c:	2000e008 	.word	0x2000e008
 800ff30:	20000a42 	.word	0x20000a42
 800ff34:	20000a38 	.word	0x20000a38
 800ff38:	20000a18 	.word	0x20000a18
 800ff3c:	08018dc4 	.word	0x08018dc4
 800ff40:	0801913c 	.word	0x0801913c
 800ff44:	08018e10 	.word	0x08018e10
 800ff48:	0801914c 	.word	0x0801914c
 800ff4c:	0801915c 	.word	0x0801915c
        off -= p->len;
 800ff50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff52:	895b      	ldrh	r3, [r3, #10]
 800ff54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff58:	1ad3      	subs	r3, r2, r3
 800ff5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ff5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ff62:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ff64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff66:	2200      	movs	r2, #0
 800ff68:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ff6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ff70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff72:	895b      	ldrh	r3, [r3, #10]
 800ff74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff78:	429a      	cmp	r2, r3
 800ff7a:	d8e9      	bhi.n	800ff50 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ff7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff80:	4619      	mov	r1, r3
 800ff82:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ff84:	f7fc f8da 	bl	800c13c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff8c:	4a91      	ldr	r2, [pc, #580]	; (80101d4 <tcp_receive+0x884>)
 800ff8e:	6013      	str	r3, [r2, #0]
 800ff90:	4b91      	ldr	r3, [pc, #580]	; (80101d8 <tcp_receive+0x888>)
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	4a8f      	ldr	r2, [pc, #572]	; (80101d4 <tcp_receive+0x884>)
 800ff96:	6812      	ldr	r2, [r2, #0]
 800ff98:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ff9a:	e00d      	b.n	800ffb8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ff9c:	4b8d      	ldr	r3, [pc, #564]	; (80101d4 <tcp_receive+0x884>)
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa4:	1ad3      	subs	r3, r2, r3
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	da06      	bge.n	800ffb8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	8b5b      	ldrh	r3, [r3, #26]
 800ffae:	f043 0302 	orr.w	r3, r3, #2
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffb8:	4b86      	ldr	r3, [pc, #536]	; (80101d4 <tcp_receive+0x884>)
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f2c0 842a 	blt.w	801081c <tcp_receive+0xecc>
 800ffc8:	4b82      	ldr	r3, [pc, #520]	; (80101d4 <tcp_receive+0x884>)
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffd0:	6879      	ldr	r1, [r7, #4]
 800ffd2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffd4:	440b      	add	r3, r1
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	3301      	adds	r3, #1
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	f300 841e 	bgt.w	801081c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffe4:	4b7b      	ldr	r3, [pc, #492]	; (80101d4 <tcp_receive+0x884>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	429a      	cmp	r2, r3
 800ffea:	f040 829a 	bne.w	8010522 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ffee:	4b7a      	ldr	r3, [pc, #488]	; (80101d8 <tcp_receive+0x888>)
 800fff0:	891c      	ldrh	r4, [r3, #8]
 800fff2:	4b79      	ldr	r3, [pc, #484]	; (80101d8 <tcp_receive+0x888>)
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	899b      	ldrh	r3, [r3, #12]
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fa fd92 	bl	800ab24 <lwip_htons>
 8010000:	4603      	mov	r3, r0
 8010002:	b2db      	uxtb	r3, r3
 8010004:	f003 0303 	and.w	r3, r3, #3
 8010008:	2b00      	cmp	r3, #0
 801000a:	d001      	beq.n	8010010 <tcp_receive+0x6c0>
 801000c:	2301      	movs	r3, #1
 801000e:	e000      	b.n	8010012 <tcp_receive+0x6c2>
 8010010:	2300      	movs	r3, #0
 8010012:	4423      	add	r3, r4
 8010014:	b29a      	uxth	r2, r3
 8010016:	4b71      	ldr	r3, [pc, #452]	; (80101dc <tcp_receive+0x88c>)
 8010018:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801001e:	4b6f      	ldr	r3, [pc, #444]	; (80101dc <tcp_receive+0x88c>)
 8010020:	881b      	ldrh	r3, [r3, #0]
 8010022:	429a      	cmp	r2, r3
 8010024:	d275      	bcs.n	8010112 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010026:	4b6c      	ldr	r3, [pc, #432]	; (80101d8 <tcp_receive+0x888>)
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	899b      	ldrh	r3, [r3, #12]
 801002c:	b29b      	uxth	r3, r3
 801002e:	4618      	mov	r0, r3
 8010030:	f7fa fd78 	bl	800ab24 <lwip_htons>
 8010034:	4603      	mov	r3, r0
 8010036:	b2db      	uxtb	r3, r3
 8010038:	f003 0301 	and.w	r3, r3, #1
 801003c:	2b00      	cmp	r3, #0
 801003e:	d01f      	beq.n	8010080 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010040:	4b65      	ldr	r3, [pc, #404]	; (80101d8 <tcp_receive+0x888>)
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	899b      	ldrh	r3, [r3, #12]
 8010046:	b29b      	uxth	r3, r3
 8010048:	b21b      	sxth	r3, r3
 801004a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801004e:	b21c      	sxth	r4, r3
 8010050:	4b61      	ldr	r3, [pc, #388]	; (80101d8 <tcp_receive+0x888>)
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	899b      	ldrh	r3, [r3, #12]
 8010056:	b29b      	uxth	r3, r3
 8010058:	4618      	mov	r0, r3
 801005a:	f7fa fd63 	bl	800ab24 <lwip_htons>
 801005e:	4603      	mov	r3, r0
 8010060:	b2db      	uxtb	r3, r3
 8010062:	b29b      	uxth	r3, r3
 8010064:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010068:	b29b      	uxth	r3, r3
 801006a:	4618      	mov	r0, r3
 801006c:	f7fa fd5a 	bl	800ab24 <lwip_htons>
 8010070:	4603      	mov	r3, r0
 8010072:	b21b      	sxth	r3, r3
 8010074:	4323      	orrs	r3, r4
 8010076:	b21a      	sxth	r2, r3
 8010078:	4b57      	ldr	r3, [pc, #348]	; (80101d8 <tcp_receive+0x888>)
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	b292      	uxth	r2, r2
 801007e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010084:	4b54      	ldr	r3, [pc, #336]	; (80101d8 <tcp_receive+0x888>)
 8010086:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010088:	4b53      	ldr	r3, [pc, #332]	; (80101d8 <tcp_receive+0x888>)
 801008a:	68db      	ldr	r3, [r3, #12]
 801008c:	899b      	ldrh	r3, [r3, #12]
 801008e:	b29b      	uxth	r3, r3
 8010090:	4618      	mov	r0, r3
 8010092:	f7fa fd47 	bl	800ab24 <lwip_htons>
 8010096:	4603      	mov	r3, r0
 8010098:	b2db      	uxtb	r3, r3
 801009a:	f003 0302 	and.w	r3, r3, #2
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d005      	beq.n	80100ae <tcp_receive+0x75e>
            inseg.len -= 1;
 80100a2:	4b4d      	ldr	r3, [pc, #308]	; (80101d8 <tcp_receive+0x888>)
 80100a4:	891b      	ldrh	r3, [r3, #8]
 80100a6:	3b01      	subs	r3, #1
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	4b4b      	ldr	r3, [pc, #300]	; (80101d8 <tcp_receive+0x888>)
 80100ac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80100ae:	4b4a      	ldr	r3, [pc, #296]	; (80101d8 <tcp_receive+0x888>)
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	4a49      	ldr	r2, [pc, #292]	; (80101d8 <tcp_receive+0x888>)
 80100b4:	8912      	ldrh	r2, [r2, #8]
 80100b6:	4611      	mov	r1, r2
 80100b8:	4618      	mov	r0, r3
 80100ba:	f7fb ff3f 	bl	800bf3c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80100be:	4b46      	ldr	r3, [pc, #280]	; (80101d8 <tcp_receive+0x888>)
 80100c0:	891c      	ldrh	r4, [r3, #8]
 80100c2:	4b45      	ldr	r3, [pc, #276]	; (80101d8 <tcp_receive+0x888>)
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	899b      	ldrh	r3, [r3, #12]
 80100c8:	b29b      	uxth	r3, r3
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7fa fd2a 	bl	800ab24 <lwip_htons>
 80100d0:	4603      	mov	r3, r0
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	f003 0303 	and.w	r3, r3, #3
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d001      	beq.n	80100e0 <tcp_receive+0x790>
 80100dc:	2301      	movs	r3, #1
 80100de:	e000      	b.n	80100e2 <tcp_receive+0x792>
 80100e0:	2300      	movs	r3, #0
 80100e2:	4423      	add	r3, r4
 80100e4:	b29a      	uxth	r2, r3
 80100e6:	4b3d      	ldr	r3, [pc, #244]	; (80101dc <tcp_receive+0x88c>)
 80100e8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80100ea:	4b3c      	ldr	r3, [pc, #240]	; (80101dc <tcp_receive+0x88c>)
 80100ec:	881b      	ldrh	r3, [r3, #0]
 80100ee:	461a      	mov	r2, r3
 80100f0:	4b38      	ldr	r3, [pc, #224]	; (80101d4 <tcp_receive+0x884>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	441a      	add	r2, r3
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100fa:	6879      	ldr	r1, [r7, #4]
 80100fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100fe:	440b      	add	r3, r1
 8010100:	429a      	cmp	r2, r3
 8010102:	d006      	beq.n	8010112 <tcp_receive+0x7c2>
 8010104:	4b36      	ldr	r3, [pc, #216]	; (80101e0 <tcp_receive+0x890>)
 8010106:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801010a:	4936      	ldr	r1, [pc, #216]	; (80101e4 <tcp_receive+0x894>)
 801010c:	4836      	ldr	r0, [pc, #216]	; (80101e8 <tcp_receive+0x898>)
 801010e:	f005 f9a9 	bl	8015464 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010116:	2b00      	cmp	r3, #0
 8010118:	f000 80e7 	beq.w	80102ea <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801011c:	4b2e      	ldr	r3, [pc, #184]	; (80101d8 <tcp_receive+0x888>)
 801011e:	68db      	ldr	r3, [r3, #12]
 8010120:	899b      	ldrh	r3, [r3, #12]
 8010122:	b29b      	uxth	r3, r3
 8010124:	4618      	mov	r0, r3
 8010126:	f7fa fcfd 	bl	800ab24 <lwip_htons>
 801012a:	4603      	mov	r3, r0
 801012c:	b2db      	uxtb	r3, r3
 801012e:	f003 0301 	and.w	r3, r3, #1
 8010132:	2b00      	cmp	r3, #0
 8010134:	d010      	beq.n	8010158 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010136:	e00a      	b.n	801014e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801013c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010142:	681a      	ldr	r2, [r3, #0]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010148:	68f8      	ldr	r0, [r7, #12]
 801014a:	f7fd fcaa 	bl	800daa2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1f0      	bne.n	8010138 <tcp_receive+0x7e8>
 8010156:	e0c8      	b.n	80102ea <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801015c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801015e:	e052      	b.n	8010206 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	899b      	ldrh	r3, [r3, #12]
 8010166:	b29b      	uxth	r3, r3
 8010168:	4618      	mov	r0, r3
 801016a:	f7fa fcdb 	bl	800ab24 <lwip_htons>
 801016e:	4603      	mov	r3, r0
 8010170:	b2db      	uxtb	r3, r3
 8010172:	f003 0301 	and.w	r3, r3, #1
 8010176:	2b00      	cmp	r3, #0
 8010178:	d03d      	beq.n	80101f6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801017a:	4b17      	ldr	r3, [pc, #92]	; (80101d8 <tcp_receive+0x888>)
 801017c:	68db      	ldr	r3, [r3, #12]
 801017e:	899b      	ldrh	r3, [r3, #12]
 8010180:	b29b      	uxth	r3, r3
 8010182:	4618      	mov	r0, r3
 8010184:	f7fa fcce 	bl	800ab24 <lwip_htons>
 8010188:	4603      	mov	r3, r0
 801018a:	b2db      	uxtb	r3, r3
 801018c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010190:	2b00      	cmp	r3, #0
 8010192:	d130      	bne.n	80101f6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010194:	4b10      	ldr	r3, [pc, #64]	; (80101d8 <tcp_receive+0x888>)
 8010196:	68db      	ldr	r3, [r3, #12]
 8010198:	899b      	ldrh	r3, [r3, #12]
 801019a:	b29c      	uxth	r4, r3
 801019c:	2001      	movs	r0, #1
 801019e:	f7fa fcc1 	bl	800ab24 <lwip_htons>
 80101a2:	4603      	mov	r3, r0
 80101a4:	461a      	mov	r2, r3
 80101a6:	4b0c      	ldr	r3, [pc, #48]	; (80101d8 <tcp_receive+0x888>)
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	4322      	orrs	r2, r4
 80101ac:	b292      	uxth	r2, r2
 80101ae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80101b0:	4b09      	ldr	r3, [pc, #36]	; (80101d8 <tcp_receive+0x888>)
 80101b2:	891c      	ldrh	r4, [r3, #8]
 80101b4:	4b08      	ldr	r3, [pc, #32]	; (80101d8 <tcp_receive+0x888>)
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	899b      	ldrh	r3, [r3, #12]
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	4618      	mov	r0, r3
 80101be:	f7fa fcb1 	bl	800ab24 <lwip_htons>
 80101c2:	4603      	mov	r3, r0
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	f003 0303 	and.w	r3, r3, #3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00e      	beq.n	80101ec <tcp_receive+0x89c>
 80101ce:	2301      	movs	r3, #1
 80101d0:	e00d      	b.n	80101ee <tcp_receive+0x89e>
 80101d2:	bf00      	nop
 80101d4:	20000a38 	.word	0x20000a38
 80101d8:	20000a18 	.word	0x20000a18
 80101dc:	20000a42 	.word	0x20000a42
 80101e0:	08018dc4 	.word	0x08018dc4
 80101e4:	0801916c 	.word	0x0801916c
 80101e8:	08018e10 	.word	0x08018e10
 80101ec:	2300      	movs	r3, #0
 80101ee:	4423      	add	r3, r4
 80101f0:	b29a      	uxth	r2, r3
 80101f2:	4b98      	ldr	r3, [pc, #608]	; (8010454 <tcp_receive+0xb04>)
 80101f4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80101f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101f8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80101fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010200:	6938      	ldr	r0, [r7, #16]
 8010202:	f7fd fc4e 	bl	800daa2 <tcp_seg_free>
            while (next &&
 8010206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010208:	2b00      	cmp	r3, #0
 801020a:	d00e      	beq.n	801022a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801020c:	4b91      	ldr	r3, [pc, #580]	; (8010454 <tcp_receive+0xb04>)
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	461a      	mov	r2, r3
 8010212:	4b91      	ldr	r3, [pc, #580]	; (8010458 <tcp_receive+0xb08>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	441a      	add	r2, r3
 8010218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801021a:	68db      	ldr	r3, [r3, #12]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010220:	8909      	ldrh	r1, [r1, #8]
 8010222:	440b      	add	r3, r1
 8010224:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010226:	2b00      	cmp	r3, #0
 8010228:	da9a      	bge.n	8010160 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801022a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801022c:	2b00      	cmp	r3, #0
 801022e:	d059      	beq.n	80102e4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010230:	4b88      	ldr	r3, [pc, #544]	; (8010454 <tcp_receive+0xb04>)
 8010232:	881b      	ldrh	r3, [r3, #0]
 8010234:	461a      	mov	r2, r3
 8010236:	4b88      	ldr	r3, [pc, #544]	; (8010458 <tcp_receive+0xb08>)
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	441a      	add	r2, r3
 801023c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	685b      	ldr	r3, [r3, #4]
 8010242:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010244:	2b00      	cmp	r3, #0
 8010246:	dd4d      	ble.n	80102e4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801024a:	68db      	ldr	r3, [r3, #12]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	b29a      	uxth	r2, r3
 8010250:	4b81      	ldr	r3, [pc, #516]	; (8010458 <tcp_receive+0xb08>)
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	b29b      	uxth	r3, r3
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	b29a      	uxth	r2, r3
 801025a:	4b80      	ldr	r3, [pc, #512]	; (801045c <tcp_receive+0xb0c>)
 801025c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801025e:	4b7f      	ldr	r3, [pc, #508]	; (801045c <tcp_receive+0xb0c>)
 8010260:	68db      	ldr	r3, [r3, #12]
 8010262:	899b      	ldrh	r3, [r3, #12]
 8010264:	b29b      	uxth	r3, r3
 8010266:	4618      	mov	r0, r3
 8010268:	f7fa fc5c 	bl	800ab24 <lwip_htons>
 801026c:	4603      	mov	r3, r0
 801026e:	b2db      	uxtb	r3, r3
 8010270:	f003 0302 	and.w	r3, r3, #2
 8010274:	2b00      	cmp	r3, #0
 8010276:	d005      	beq.n	8010284 <tcp_receive+0x934>
                inseg.len -= 1;
 8010278:	4b78      	ldr	r3, [pc, #480]	; (801045c <tcp_receive+0xb0c>)
 801027a:	891b      	ldrh	r3, [r3, #8]
 801027c:	3b01      	subs	r3, #1
 801027e:	b29a      	uxth	r2, r3
 8010280:	4b76      	ldr	r3, [pc, #472]	; (801045c <tcp_receive+0xb0c>)
 8010282:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010284:	4b75      	ldr	r3, [pc, #468]	; (801045c <tcp_receive+0xb0c>)
 8010286:	685b      	ldr	r3, [r3, #4]
 8010288:	4a74      	ldr	r2, [pc, #464]	; (801045c <tcp_receive+0xb0c>)
 801028a:	8912      	ldrh	r2, [r2, #8]
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7fb fe54 	bl	800bf3c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010294:	4b71      	ldr	r3, [pc, #452]	; (801045c <tcp_receive+0xb0c>)
 8010296:	891c      	ldrh	r4, [r3, #8]
 8010298:	4b70      	ldr	r3, [pc, #448]	; (801045c <tcp_receive+0xb0c>)
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	899b      	ldrh	r3, [r3, #12]
 801029e:	b29b      	uxth	r3, r3
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7fa fc3f 	bl	800ab24 <lwip_htons>
 80102a6:	4603      	mov	r3, r0
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	f003 0303 	and.w	r3, r3, #3
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d001      	beq.n	80102b6 <tcp_receive+0x966>
 80102b2:	2301      	movs	r3, #1
 80102b4:	e000      	b.n	80102b8 <tcp_receive+0x968>
 80102b6:	2300      	movs	r3, #0
 80102b8:	4423      	add	r3, r4
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	4b65      	ldr	r3, [pc, #404]	; (8010454 <tcp_receive+0xb04>)
 80102be:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80102c0:	4b64      	ldr	r3, [pc, #400]	; (8010454 <tcp_receive+0xb04>)
 80102c2:	881b      	ldrh	r3, [r3, #0]
 80102c4:	461a      	mov	r2, r3
 80102c6:	4b64      	ldr	r3, [pc, #400]	; (8010458 <tcp_receive+0xb08>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	441a      	add	r2, r3
 80102cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102ce:	68db      	ldr	r3, [r3, #12]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	429a      	cmp	r2, r3
 80102d4:	d006      	beq.n	80102e4 <tcp_receive+0x994>
 80102d6:	4b62      	ldr	r3, [pc, #392]	; (8010460 <tcp_receive+0xb10>)
 80102d8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80102dc:	4961      	ldr	r1, [pc, #388]	; (8010464 <tcp_receive+0xb14>)
 80102de:	4862      	ldr	r0, [pc, #392]	; (8010468 <tcp_receive+0xb18>)
 80102e0:	f005 f8c0 	bl	8015464 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80102e8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80102ea:	4b5a      	ldr	r3, [pc, #360]	; (8010454 <tcp_receive+0xb04>)
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	461a      	mov	r2, r3
 80102f0:	4b59      	ldr	r3, [pc, #356]	; (8010458 <tcp_receive+0xb08>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	441a      	add	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80102fe:	4b55      	ldr	r3, [pc, #340]	; (8010454 <tcp_receive+0xb04>)
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	429a      	cmp	r2, r3
 8010304:	d206      	bcs.n	8010314 <tcp_receive+0x9c4>
 8010306:	4b56      	ldr	r3, [pc, #344]	; (8010460 <tcp_receive+0xb10>)
 8010308:	f240 6207 	movw	r2, #1543	; 0x607
 801030c:	4957      	ldr	r1, [pc, #348]	; (801046c <tcp_receive+0xb1c>)
 801030e:	4856      	ldr	r0, [pc, #344]	; (8010468 <tcp_receive+0xb18>)
 8010310:	f005 f8a8 	bl	8015464 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010318:	4b4e      	ldr	r3, [pc, #312]	; (8010454 <tcp_receive+0xb04>)
 801031a:	881b      	ldrh	r3, [r3, #0]
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	b29a      	uxth	r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f7fc fe97 	bl	800d058 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801032a:	4b4c      	ldr	r3, [pc, #304]	; (801045c <tcp_receive+0xb0c>)
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	891b      	ldrh	r3, [r3, #8]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d006      	beq.n	8010342 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010334:	4b49      	ldr	r3, [pc, #292]	; (801045c <tcp_receive+0xb0c>)
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	4a4d      	ldr	r2, [pc, #308]	; (8010470 <tcp_receive+0xb20>)
 801033a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801033c:	4b47      	ldr	r3, [pc, #284]	; (801045c <tcp_receive+0xb0c>)
 801033e:	2200      	movs	r2, #0
 8010340:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010342:	4b46      	ldr	r3, [pc, #280]	; (801045c <tcp_receive+0xb0c>)
 8010344:	68db      	ldr	r3, [r3, #12]
 8010346:	899b      	ldrh	r3, [r3, #12]
 8010348:	b29b      	uxth	r3, r3
 801034a:	4618      	mov	r0, r3
 801034c:	f7fa fbea 	bl	800ab24 <lwip_htons>
 8010350:	4603      	mov	r3, r0
 8010352:	b2db      	uxtb	r3, r3
 8010354:	f003 0301 	and.w	r3, r3, #1
 8010358:	2b00      	cmp	r3, #0
 801035a:	f000 80b8 	beq.w	80104ce <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801035e:	4b45      	ldr	r3, [pc, #276]	; (8010474 <tcp_receive+0xb24>)
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	f043 0320 	orr.w	r3, r3, #32
 8010366:	b2da      	uxtb	r2, r3
 8010368:	4b42      	ldr	r3, [pc, #264]	; (8010474 <tcp_receive+0xb24>)
 801036a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801036c:	e0af      	b.n	80104ce <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010372:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	4a36      	ldr	r2, [pc, #216]	; (8010458 <tcp_receive+0xb08>)
 801037e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	891b      	ldrh	r3, [r3, #8]
 8010384:	461c      	mov	r4, r3
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	899b      	ldrh	r3, [r3, #12]
 801038c:	b29b      	uxth	r3, r3
 801038e:	4618      	mov	r0, r3
 8010390:	f7fa fbc8 	bl	800ab24 <lwip_htons>
 8010394:	4603      	mov	r3, r0
 8010396:	b2db      	uxtb	r3, r3
 8010398:	f003 0303 	and.w	r3, r3, #3
 801039c:	2b00      	cmp	r3, #0
 801039e:	d001      	beq.n	80103a4 <tcp_receive+0xa54>
 80103a0:	2301      	movs	r3, #1
 80103a2:	e000      	b.n	80103a6 <tcp_receive+0xa56>
 80103a4:	2300      	movs	r3, #0
 80103a6:	191a      	adds	r2, r3, r4
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ac:	441a      	add	r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103b6:	461c      	mov	r4, r3
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	891b      	ldrh	r3, [r3, #8]
 80103bc:	461d      	mov	r5, r3
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	899b      	ldrh	r3, [r3, #12]
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fa fbac 	bl	800ab24 <lwip_htons>
 80103cc:	4603      	mov	r3, r0
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	f003 0303 	and.w	r3, r3, #3
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d001      	beq.n	80103dc <tcp_receive+0xa8c>
 80103d8:	2301      	movs	r3, #1
 80103da:	e000      	b.n	80103de <tcp_receive+0xa8e>
 80103dc:	2300      	movs	r3, #0
 80103de:	442b      	add	r3, r5
 80103e0:	429c      	cmp	r4, r3
 80103e2:	d206      	bcs.n	80103f2 <tcp_receive+0xaa2>
 80103e4:	4b1e      	ldr	r3, [pc, #120]	; (8010460 <tcp_receive+0xb10>)
 80103e6:	f240 622b 	movw	r2, #1579	; 0x62b
 80103ea:	4923      	ldr	r1, [pc, #140]	; (8010478 <tcp_receive+0xb28>)
 80103ec:	481e      	ldr	r0, [pc, #120]	; (8010468 <tcp_receive+0xb18>)
 80103ee:	f005 f839 	bl	8015464 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	891b      	ldrh	r3, [r3, #8]
 80103f6:	461c      	mov	r4, r3
 80103f8:	68bb      	ldr	r3, [r7, #8]
 80103fa:	68db      	ldr	r3, [r3, #12]
 80103fc:	899b      	ldrh	r3, [r3, #12]
 80103fe:	b29b      	uxth	r3, r3
 8010400:	4618      	mov	r0, r3
 8010402:	f7fa fb8f 	bl	800ab24 <lwip_htons>
 8010406:	4603      	mov	r3, r0
 8010408:	b2db      	uxtb	r3, r3
 801040a:	f003 0303 	and.w	r3, r3, #3
 801040e:	2b00      	cmp	r3, #0
 8010410:	d001      	beq.n	8010416 <tcp_receive+0xac6>
 8010412:	2301      	movs	r3, #1
 8010414:	e000      	b.n	8010418 <tcp_receive+0xac8>
 8010416:	2300      	movs	r3, #0
 8010418:	1919      	adds	r1, r3, r4
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801041e:	b28b      	uxth	r3, r1
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	b29a      	uxth	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f7fc fe15 	bl	800d058 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	891b      	ldrh	r3, [r3, #8]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d028      	beq.n	801048a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010438:	4b0d      	ldr	r3, [pc, #52]	; (8010470 <tcp_receive+0xb20>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d01d      	beq.n	801047c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010440:	4b0b      	ldr	r3, [pc, #44]	; (8010470 <tcp_receive+0xb20>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	4619      	mov	r1, r3
 801044a:	4610      	mov	r0, r2
 801044c:	f7fb ffbe 	bl	800c3cc <pbuf_cat>
 8010450:	e018      	b.n	8010484 <tcp_receive+0xb34>
 8010452:	bf00      	nop
 8010454:	20000a42 	.word	0x20000a42
 8010458:	20000a38 	.word	0x20000a38
 801045c:	20000a18 	.word	0x20000a18
 8010460:	08018dc4 	.word	0x08018dc4
 8010464:	080191a4 	.word	0x080191a4
 8010468:	08018e10 	.word	0x08018e10
 801046c:	080191e0 	.word	0x080191e0
 8010470:	20000a48 	.word	0x20000a48
 8010474:	20000a45 	.word	0x20000a45
 8010478:	08019200 	.word	0x08019200
            } else {
              recv_data = cseg->p;
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	4a70      	ldr	r2, [pc, #448]	; (8010644 <tcp_receive+0xcf4>)
 8010482:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	2200      	movs	r2, #0
 8010488:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	899b      	ldrh	r3, [r3, #12]
 8010490:	b29b      	uxth	r3, r3
 8010492:	4618      	mov	r0, r3
 8010494:	f7fa fb46 	bl	800ab24 <lwip_htons>
 8010498:	4603      	mov	r3, r0
 801049a:	b2db      	uxtb	r3, r3
 801049c:	f003 0301 	and.w	r3, r3, #1
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00d      	beq.n	80104c0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80104a4:	4b68      	ldr	r3, [pc, #416]	; (8010648 <tcp_receive+0xcf8>)
 80104a6:	781b      	ldrb	r3, [r3, #0]
 80104a8:	f043 0320 	orr.w	r3, r3, #32
 80104ac:	b2da      	uxtb	r2, r3
 80104ae:	4b66      	ldr	r3, [pc, #408]	; (8010648 <tcp_receive+0xcf8>)
 80104b0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	7d1b      	ldrb	r3, [r3, #20]
 80104b6:	2b04      	cmp	r3, #4
 80104b8:	d102      	bne.n	80104c0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2207      	movs	r2, #7
 80104be:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80104c8:	68b8      	ldr	r0, [r7, #8]
 80104ca:	f7fd faea 	bl	800daa2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d008      	beq.n	80104e8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	685a      	ldr	r2, [r3, #4]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80104e2:	429a      	cmp	r2, r3
 80104e4:	f43f af43 	beq.w	801036e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	8b5b      	ldrh	r3, [r3, #26]
 80104ec:	f003 0301 	and.w	r3, r3, #1
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00e      	beq.n	8010512 <tcp_receive+0xbc2>
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	8b5b      	ldrh	r3, [r3, #26]
 80104f8:	f023 0301 	bic.w	r3, r3, #1
 80104fc:	b29a      	uxth	r2, r3
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	835a      	strh	r2, [r3, #26]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	8b5b      	ldrh	r3, [r3, #26]
 8010506:	f043 0302 	orr.w	r3, r3, #2
 801050a:	b29a      	uxth	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010510:	e188      	b.n	8010824 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	8b5b      	ldrh	r3, [r3, #26]
 8010516:	f043 0301 	orr.w	r3, r3, #1
 801051a:	b29a      	uxth	r2, r3
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010520:	e180      	b.n	8010824 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010526:	2b00      	cmp	r3, #0
 8010528:	d106      	bne.n	8010538 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801052a:	4848      	ldr	r0, [pc, #288]	; (801064c <tcp_receive+0xcfc>)
 801052c:	f7fd faf0 	bl	800db10 <tcp_seg_copy>
 8010530:	4602      	mov	r2, r0
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	675a      	str	r2, [r3, #116]	; 0x74
 8010536:	e16d      	b.n	8010814 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010538:	2300      	movs	r3, #0
 801053a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010540:	63bb      	str	r3, [r7, #56]	; 0x38
 8010542:	e157      	b.n	80107f4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	685a      	ldr	r2, [r3, #4]
 801054a:	4b41      	ldr	r3, [pc, #260]	; (8010650 <tcp_receive+0xd00>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	429a      	cmp	r2, r3
 8010550:	d11d      	bne.n	801058e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010552:	4b3e      	ldr	r3, [pc, #248]	; (801064c <tcp_receive+0xcfc>)
 8010554:	891a      	ldrh	r2, [r3, #8]
 8010556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010558:	891b      	ldrh	r3, [r3, #8]
 801055a:	429a      	cmp	r2, r3
 801055c:	f240 814f 	bls.w	80107fe <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010560:	483a      	ldr	r0, [pc, #232]	; (801064c <tcp_receive+0xcfc>)
 8010562:	f7fd fad5 	bl	800db10 <tcp_seg_copy>
 8010566:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	2b00      	cmp	r3, #0
 801056c:	f000 8149 	beq.w	8010802 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010572:	2b00      	cmp	r3, #0
 8010574:	d003      	beq.n	801057e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	601a      	str	r2, [r3, #0]
 801057c:	e002      	b.n	8010584 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	697a      	ldr	r2, [r7, #20]
 8010582:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010586:	6978      	ldr	r0, [r7, #20]
 8010588:	f7ff f8de 	bl	800f748 <tcp_oos_insert_segment>
                }
                break;
 801058c:	e139      	b.n	8010802 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801058e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010590:	2b00      	cmp	r3, #0
 8010592:	d117      	bne.n	80105c4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010594:	4b2e      	ldr	r3, [pc, #184]	; (8010650 <tcp_receive+0xd00>)
 8010596:	681a      	ldr	r2, [r3, #0]
 8010598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801059a:	68db      	ldr	r3, [r3, #12]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	da57      	bge.n	8010654 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80105a4:	4829      	ldr	r0, [pc, #164]	; (801064c <tcp_receive+0xcfc>)
 80105a6:	f7fd fab3 	bl	800db10 <tcp_seg_copy>
 80105aa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	f000 8129 	beq.w	8010806 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	69ba      	ldr	r2, [r7, #24]
 80105b8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80105ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105bc:	69b8      	ldr	r0, [r7, #24]
 80105be:	f7ff f8c3 	bl	800f748 <tcp_oos_insert_segment>
                  }
                  break;
 80105c2:	e120      	b.n	8010806 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80105c4:	4b22      	ldr	r3, [pc, #136]	; (8010650 <tcp_receive+0xd00>)
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	1ad3      	subs	r3, r2, r3
 80105d0:	3b01      	subs	r3, #1
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	db3e      	blt.n	8010654 <tcp_receive+0xd04>
 80105d6:	4b1e      	ldr	r3, [pc, #120]	; (8010650 <tcp_receive+0xd00>)
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105dc:	68db      	ldr	r3, [r3, #12]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	1ad3      	subs	r3, r2, r3
 80105e2:	3301      	adds	r3, #1
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	dc35      	bgt.n	8010654 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80105e8:	4818      	ldr	r0, [pc, #96]	; (801064c <tcp_receive+0xcfc>)
 80105ea:	f7fd fa91 	bl	800db10 <tcp_seg_copy>
 80105ee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	f000 8109 	beq.w	801080a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80105f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010600:	8912      	ldrh	r2, [r2, #8]
 8010602:	441a      	add	r2, r3
 8010604:	4b12      	ldr	r3, [pc, #72]	; (8010650 <tcp_receive+0xd00>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	2b00      	cmp	r3, #0
 801060c:	dd12      	ble.n	8010634 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801060e:	4b10      	ldr	r3, [pc, #64]	; (8010650 <tcp_receive+0xd00>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	b29a      	uxth	r2, r3
 8010614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010616:	68db      	ldr	r3, [r3, #12]
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	b29b      	uxth	r3, r3
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	b29a      	uxth	r2, r3
 8010620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010622:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010626:	685a      	ldr	r2, [r3, #4]
 8010628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801062a:	891b      	ldrh	r3, [r3, #8]
 801062c:	4619      	mov	r1, r3
 801062e:	4610      	mov	r0, r2
 8010630:	f7fb fc84 	bl	800bf3c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010636:	69fa      	ldr	r2, [r7, #28]
 8010638:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801063a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801063c:	69f8      	ldr	r0, [r7, #28]
 801063e:	f7ff f883 	bl	800f748 <tcp_oos_insert_segment>
                  }
                  break;
 8010642:	e0e2      	b.n	801080a <tcp_receive+0xeba>
 8010644:	20000a48 	.word	0x20000a48
 8010648:	20000a45 	.word	0x20000a45
 801064c:	20000a18 	.word	0x20000a18
 8010650:	20000a38 	.word	0x20000a38
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010656:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b00      	cmp	r3, #0
 801065e:	f040 80c6 	bne.w	80107ee <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010662:	4b80      	ldr	r3, [pc, #512]	; (8010864 <tcp_receive+0xf14>)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801066e:	2b00      	cmp	r3, #0
 8010670:	f340 80bd 	ble.w	80107ee <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	899b      	ldrh	r3, [r3, #12]
 801067a:	b29b      	uxth	r3, r3
 801067c:	4618      	mov	r0, r3
 801067e:	f7fa fa51 	bl	800ab24 <lwip_htons>
 8010682:	4603      	mov	r3, r0
 8010684:	b2db      	uxtb	r3, r3
 8010686:	f003 0301 	and.w	r3, r3, #1
 801068a:	2b00      	cmp	r3, #0
 801068c:	f040 80bf 	bne.w	801080e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010690:	4875      	ldr	r0, [pc, #468]	; (8010868 <tcp_receive+0xf18>)
 8010692:	f7fd fa3d 	bl	800db10 <tcp_seg_copy>
 8010696:	4602      	mov	r2, r0
 8010698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	f000 80b6 	beq.w	8010812 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80106a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a8:	68db      	ldr	r3, [r3, #12]
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106ae:	8912      	ldrh	r2, [r2, #8]
 80106b0:	441a      	add	r2, r3
 80106b2:	4b6c      	ldr	r3, [pc, #432]	; (8010864 <tcp_receive+0xf14>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	1ad3      	subs	r3, r2, r3
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	dd12      	ble.n	80106e2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80106bc:	4b69      	ldr	r3, [pc, #420]	; (8010864 <tcp_receive+0xf14>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	b29a      	uxth	r2, r3
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80106d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d4:	685a      	ldr	r2, [r3, #4]
 80106d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d8:	891b      	ldrh	r3, [r3, #8]
 80106da:	4619      	mov	r1, r3
 80106dc:	4610      	mov	r0, r2
 80106de:	f7fb fc2d 	bl	800bf3c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80106e2:	4b62      	ldr	r3, [pc, #392]	; (801086c <tcp_receive+0xf1c>)
 80106e4:	881b      	ldrh	r3, [r3, #0]
 80106e6:	461a      	mov	r2, r3
 80106e8:	4b5e      	ldr	r3, [pc, #376]	; (8010864 <tcp_receive+0xf14>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	441a      	add	r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106f2:	6879      	ldr	r1, [r7, #4]
 80106f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80106f6:	440b      	add	r3, r1
 80106f8:	1ad3      	subs	r3, r2, r3
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	f340 8089 	ble.w	8010812 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	68db      	ldr	r3, [r3, #12]
 8010706:	899b      	ldrh	r3, [r3, #12]
 8010708:	b29b      	uxth	r3, r3
 801070a:	4618      	mov	r0, r3
 801070c:	f7fa fa0a 	bl	800ab24 <lwip_htons>
 8010710:	4603      	mov	r3, r0
 8010712:	b2db      	uxtb	r3, r3
 8010714:	f003 0301 	and.w	r3, r3, #1
 8010718:	2b00      	cmp	r3, #0
 801071a:	d022      	beq.n	8010762 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801071c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	68db      	ldr	r3, [r3, #12]
 8010722:	899b      	ldrh	r3, [r3, #12]
 8010724:	b29b      	uxth	r3, r3
 8010726:	b21b      	sxth	r3, r3
 8010728:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801072c:	b21c      	sxth	r4, r3
 801072e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	899b      	ldrh	r3, [r3, #12]
 8010736:	b29b      	uxth	r3, r3
 8010738:	4618      	mov	r0, r3
 801073a:	f7fa f9f3 	bl	800ab24 <lwip_htons>
 801073e:	4603      	mov	r3, r0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	b29b      	uxth	r3, r3
 8010744:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010748:	b29b      	uxth	r3, r3
 801074a:	4618      	mov	r0, r3
 801074c:	f7fa f9ea 	bl	800ab24 <lwip_htons>
 8010750:	4603      	mov	r3, r0
 8010752:	b21b      	sxth	r3, r3
 8010754:	4323      	orrs	r3, r4
 8010756:	b21a      	sxth	r2, r3
 8010758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	b292      	uxth	r2, r2
 8010760:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010766:	b29a      	uxth	r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801076c:	4413      	add	r3, r2
 801076e:	b299      	uxth	r1, r3
 8010770:	4b3c      	ldr	r3, [pc, #240]	; (8010864 <tcp_receive+0xf14>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	b29a      	uxth	r2, r3
 8010776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	1a8a      	subs	r2, r1, r2
 801077c:	b292      	uxth	r2, r2
 801077e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	685a      	ldr	r2, [r3, #4]
 8010786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	891b      	ldrh	r3, [r3, #8]
 801078c:	4619      	mov	r1, r3
 801078e:	4610      	mov	r0, r2
 8010790:	f7fb fbd4 	bl	800bf3c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	891c      	ldrh	r4, [r3, #8]
 801079a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	899b      	ldrh	r3, [r3, #12]
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7fa f9bd 	bl	800ab24 <lwip_htons>
 80107aa:	4603      	mov	r3, r0
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	f003 0303 	and.w	r3, r3, #3
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d001      	beq.n	80107ba <tcp_receive+0xe6a>
 80107b6:	2301      	movs	r3, #1
 80107b8:	e000      	b.n	80107bc <tcp_receive+0xe6c>
 80107ba:	2300      	movs	r3, #0
 80107bc:	4423      	add	r3, r4
 80107be:	b29a      	uxth	r2, r3
 80107c0:	4b2a      	ldr	r3, [pc, #168]	; (801086c <tcp_receive+0xf1c>)
 80107c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80107c4:	4b29      	ldr	r3, [pc, #164]	; (801086c <tcp_receive+0xf1c>)
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	461a      	mov	r2, r3
 80107ca:	4b26      	ldr	r3, [pc, #152]	; (8010864 <tcp_receive+0xf14>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	441a      	add	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d4:	6879      	ldr	r1, [r7, #4]
 80107d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107d8:	440b      	add	r3, r1
 80107da:	429a      	cmp	r2, r3
 80107dc:	d019      	beq.n	8010812 <tcp_receive+0xec2>
 80107de:	4b24      	ldr	r3, [pc, #144]	; (8010870 <tcp_receive+0xf20>)
 80107e0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80107e4:	4923      	ldr	r1, [pc, #140]	; (8010874 <tcp_receive+0xf24>)
 80107e6:	4824      	ldr	r0, [pc, #144]	; (8010878 <tcp_receive+0xf28>)
 80107e8:	f004 fe3c 	bl	8015464 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80107ec:	e011      	b.n	8010812 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80107ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80107f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	f47f aea4 	bne.w	8010544 <tcp_receive+0xbf4>
 80107fc:	e00a      	b.n	8010814 <tcp_receive+0xec4>
                break;
 80107fe:	bf00      	nop
 8010800:	e008      	b.n	8010814 <tcp_receive+0xec4>
                break;
 8010802:	bf00      	nop
 8010804:	e006      	b.n	8010814 <tcp_receive+0xec4>
                  break;
 8010806:	bf00      	nop
 8010808:	e004      	b.n	8010814 <tcp_receive+0xec4>
                  break;
 801080a:	bf00      	nop
 801080c:	e002      	b.n	8010814 <tcp_receive+0xec4>
                  break;
 801080e:	bf00      	nop
 8010810:	e000      	b.n	8010814 <tcp_receive+0xec4>
                break;
 8010812:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f001 fe8b 	bl	8012530 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801081a:	e003      	b.n	8010824 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f001 fe87 	bl	8012530 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010822:	e01a      	b.n	801085a <tcp_receive+0xf0a>
 8010824:	e019      	b.n	801085a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010826:	4b0f      	ldr	r3, [pc, #60]	; (8010864 <tcp_receive+0xf14>)
 8010828:	681a      	ldr	r2, [r3, #0]
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801082e:	1ad3      	subs	r3, r2, r3
 8010830:	2b00      	cmp	r3, #0
 8010832:	db0a      	blt.n	801084a <tcp_receive+0xefa>
 8010834:	4b0b      	ldr	r3, [pc, #44]	; (8010864 <tcp_receive+0xf14>)
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801083c:	6879      	ldr	r1, [r7, #4]
 801083e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010840:	440b      	add	r3, r1
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	3301      	adds	r3, #1
 8010846:	2b00      	cmp	r3, #0
 8010848:	dd07      	ble.n	801085a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	8b5b      	ldrh	r3, [r3, #26]
 801084e:	f043 0302 	orr.w	r3, r3, #2
 8010852:	b29a      	uxth	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010858:	e7ff      	b.n	801085a <tcp_receive+0xf0a>
 801085a:	bf00      	nop
 801085c:	3750      	adds	r7, #80	; 0x50
 801085e:	46bd      	mov	sp, r7
 8010860:	bdb0      	pop	{r4, r5, r7, pc}
 8010862:	bf00      	nop
 8010864:	20000a38 	.word	0x20000a38
 8010868:	20000a18 	.word	0x20000a18
 801086c:	20000a42 	.word	0x20000a42
 8010870:	08018dc4 	.word	0x08018dc4
 8010874:	0801916c 	.word	0x0801916c
 8010878:	08018e10 	.word	0x08018e10

0801087c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801087c:	b480      	push	{r7}
 801087e:	b083      	sub	sp, #12
 8010880:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010882:	4b15      	ldr	r3, [pc, #84]	; (80108d8 <tcp_get_next_optbyte+0x5c>)
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	1c5a      	adds	r2, r3, #1
 8010888:	b291      	uxth	r1, r2
 801088a:	4a13      	ldr	r2, [pc, #76]	; (80108d8 <tcp_get_next_optbyte+0x5c>)
 801088c:	8011      	strh	r1, [r2, #0]
 801088e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010890:	4b12      	ldr	r3, [pc, #72]	; (80108dc <tcp_get_next_optbyte+0x60>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <tcp_get_next_optbyte+0x26>
 8010898:	4b11      	ldr	r3, [pc, #68]	; (80108e0 <tcp_get_next_optbyte+0x64>)
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	88fa      	ldrh	r2, [r7, #6]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d208      	bcs.n	80108b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80108a2:	4b10      	ldr	r3, [pc, #64]	; (80108e4 <tcp_get_next_optbyte+0x68>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3314      	adds	r3, #20
 80108a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80108aa:	88fb      	ldrh	r3, [r7, #6]
 80108ac:	683a      	ldr	r2, [r7, #0]
 80108ae:	4413      	add	r3, r2
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	e00b      	b.n	80108cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80108b4:	88fb      	ldrh	r3, [r7, #6]
 80108b6:	b2da      	uxtb	r2, r3
 80108b8:	4b09      	ldr	r3, [pc, #36]	; (80108e0 <tcp_get_next_optbyte+0x64>)
 80108ba:	881b      	ldrh	r3, [r3, #0]
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80108c2:	4b06      	ldr	r3, [pc, #24]	; (80108dc <tcp_get_next_optbyte+0x60>)
 80108c4:	681a      	ldr	r2, [r3, #0]
 80108c6:	797b      	ldrb	r3, [r7, #5]
 80108c8:	4413      	add	r3, r2
 80108ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr
 80108d8:	20000a34 	.word	0x20000a34
 80108dc:	20000a30 	.word	0x20000a30
 80108e0:	20000a2e 	.word	0x20000a2e
 80108e4:	20000a28 	.word	0x20000a28

080108e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80108e8:	b580      	push	{r7, lr}
 80108ea:	b084      	sub	sp, #16
 80108ec:	af00      	add	r7, sp, #0
 80108ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d106      	bne.n	8010904 <tcp_parseopt+0x1c>
 80108f6:	4b32      	ldr	r3, [pc, #200]	; (80109c0 <tcp_parseopt+0xd8>)
 80108f8:	f240 727d 	movw	r2, #1917	; 0x77d
 80108fc:	4931      	ldr	r1, [pc, #196]	; (80109c4 <tcp_parseopt+0xdc>)
 80108fe:	4832      	ldr	r0, [pc, #200]	; (80109c8 <tcp_parseopt+0xe0>)
 8010900:	f004 fdb0 	bl	8015464 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010904:	4b31      	ldr	r3, [pc, #196]	; (80109cc <tcp_parseopt+0xe4>)
 8010906:	881b      	ldrh	r3, [r3, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d055      	beq.n	80109b8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801090c:	4b30      	ldr	r3, [pc, #192]	; (80109d0 <tcp_parseopt+0xe8>)
 801090e:	2200      	movs	r2, #0
 8010910:	801a      	strh	r2, [r3, #0]
 8010912:	e045      	b.n	80109a0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010914:	f7ff ffb2 	bl	801087c <tcp_get_next_optbyte>
 8010918:	4603      	mov	r3, r0
 801091a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801091c:	7bfb      	ldrb	r3, [r7, #15]
 801091e:	2b02      	cmp	r3, #2
 8010920:	d006      	beq.n	8010930 <tcp_parseopt+0x48>
 8010922:	2b02      	cmp	r3, #2
 8010924:	dc2b      	bgt.n	801097e <tcp_parseopt+0x96>
 8010926:	2b00      	cmp	r3, #0
 8010928:	d041      	beq.n	80109ae <tcp_parseopt+0xc6>
 801092a:	2b01      	cmp	r3, #1
 801092c:	d127      	bne.n	801097e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801092e:	e037      	b.n	80109a0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010930:	f7ff ffa4 	bl	801087c <tcp_get_next_optbyte>
 8010934:	4603      	mov	r3, r0
 8010936:	2b04      	cmp	r3, #4
 8010938:	d13b      	bne.n	80109b2 <tcp_parseopt+0xca>
 801093a:	4b25      	ldr	r3, [pc, #148]	; (80109d0 <tcp_parseopt+0xe8>)
 801093c:	881b      	ldrh	r3, [r3, #0]
 801093e:	3301      	adds	r3, #1
 8010940:	4a22      	ldr	r2, [pc, #136]	; (80109cc <tcp_parseopt+0xe4>)
 8010942:	8812      	ldrh	r2, [r2, #0]
 8010944:	4293      	cmp	r3, r2
 8010946:	da34      	bge.n	80109b2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010948:	f7ff ff98 	bl	801087c <tcp_get_next_optbyte>
 801094c:	4603      	mov	r3, r0
 801094e:	b29b      	uxth	r3, r3
 8010950:	021b      	lsls	r3, r3, #8
 8010952:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010954:	f7ff ff92 	bl	801087c <tcp_get_next_optbyte>
 8010958:	4603      	mov	r3, r0
 801095a:	b29a      	uxth	r2, r3
 801095c:	89bb      	ldrh	r3, [r7, #12]
 801095e:	4313      	orrs	r3, r2
 8010960:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010962:	89bb      	ldrh	r3, [r7, #12]
 8010964:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010968:	d804      	bhi.n	8010974 <tcp_parseopt+0x8c>
 801096a:	89bb      	ldrh	r3, [r7, #12]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d001      	beq.n	8010974 <tcp_parseopt+0x8c>
 8010970:	89ba      	ldrh	r2, [r7, #12]
 8010972:	e001      	b.n	8010978 <tcp_parseopt+0x90>
 8010974:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801097c:	e010      	b.n	80109a0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801097e:	f7ff ff7d 	bl	801087c <tcp_get_next_optbyte>
 8010982:	4603      	mov	r3, r0
 8010984:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010986:	7afb      	ldrb	r3, [r7, #11]
 8010988:	2b01      	cmp	r3, #1
 801098a:	d914      	bls.n	80109b6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801098c:	7afb      	ldrb	r3, [r7, #11]
 801098e:	b29a      	uxth	r2, r3
 8010990:	4b0f      	ldr	r3, [pc, #60]	; (80109d0 <tcp_parseopt+0xe8>)
 8010992:	881b      	ldrh	r3, [r3, #0]
 8010994:	4413      	add	r3, r2
 8010996:	b29b      	uxth	r3, r3
 8010998:	3b02      	subs	r3, #2
 801099a:	b29a      	uxth	r2, r3
 801099c:	4b0c      	ldr	r3, [pc, #48]	; (80109d0 <tcp_parseopt+0xe8>)
 801099e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80109a0:	4b0b      	ldr	r3, [pc, #44]	; (80109d0 <tcp_parseopt+0xe8>)
 80109a2:	881a      	ldrh	r2, [r3, #0]
 80109a4:	4b09      	ldr	r3, [pc, #36]	; (80109cc <tcp_parseopt+0xe4>)
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d3b3      	bcc.n	8010914 <tcp_parseopt+0x2c>
 80109ac:	e004      	b.n	80109b8 <tcp_parseopt+0xd0>
          return;
 80109ae:	bf00      	nop
 80109b0:	e002      	b.n	80109b8 <tcp_parseopt+0xd0>
            return;
 80109b2:	bf00      	nop
 80109b4:	e000      	b.n	80109b8 <tcp_parseopt+0xd0>
            return;
 80109b6:	bf00      	nop
      }
    }
  }
}
 80109b8:	3710      	adds	r7, #16
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	08018dc4 	.word	0x08018dc4
 80109c4:	08019228 	.word	0x08019228
 80109c8:	08018e10 	.word	0x08018e10
 80109cc:	20000a2c 	.word	0x20000a2c
 80109d0:	20000a34 	.word	0x20000a34

080109d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80109d4:	b480      	push	{r7}
 80109d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80109d8:	4b05      	ldr	r3, [pc, #20]	; (80109f0 <tcp_trigger_input_pcb_close+0x1c>)
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	f043 0310 	orr.w	r3, r3, #16
 80109e0:	b2da      	uxtb	r2, r3
 80109e2:	4b03      	ldr	r3, [pc, #12]	; (80109f0 <tcp_trigger_input_pcb_close+0x1c>)
 80109e4:	701a      	strb	r2, [r3, #0]
}
 80109e6:	bf00      	nop
 80109e8:	46bd      	mov	sp, r7
 80109ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ee:	4770      	bx	lr
 80109f0:	20000a45 	.word	0x20000a45

080109f4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d00a      	beq.n	8010a1c <tcp_route+0x28>
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	7a1b      	ldrb	r3, [r3, #8]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d006      	beq.n	8010a1c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	7a1b      	ldrb	r3, [r3, #8]
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fb f8b8 	bl	800bb88 <netif_get_by_index>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	e003      	b.n	8010a24 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f003 fad5 	bl	8013fcc <ip4_route>
 8010a22:	4603      	mov	r3, r0
  }
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3710      	adds	r7, #16
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010a2c:	b590      	push	{r4, r7, lr}
 8010a2e:	b087      	sub	sp, #28
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	603b      	str	r3, [r7, #0]
 8010a38:	4613      	mov	r3, r2
 8010a3a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d105      	bne.n	8010a4e <tcp_create_segment+0x22>
 8010a42:	4b44      	ldr	r3, [pc, #272]	; (8010b54 <tcp_create_segment+0x128>)
 8010a44:	22a3      	movs	r2, #163	; 0xa3
 8010a46:	4944      	ldr	r1, [pc, #272]	; (8010b58 <tcp_create_segment+0x12c>)
 8010a48:	4844      	ldr	r0, [pc, #272]	; (8010b5c <tcp_create_segment+0x130>)
 8010a4a:	f004 fd0b 	bl	8015464 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d105      	bne.n	8010a60 <tcp_create_segment+0x34>
 8010a54:	4b3f      	ldr	r3, [pc, #252]	; (8010b54 <tcp_create_segment+0x128>)
 8010a56:	22a4      	movs	r2, #164	; 0xa4
 8010a58:	4941      	ldr	r1, [pc, #260]	; (8010b60 <tcp_create_segment+0x134>)
 8010a5a:	4840      	ldr	r0, [pc, #256]	; (8010b5c <tcp_create_segment+0x130>)
 8010a5c:	f004 fd02 	bl	8015464 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a60:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	b2db      	uxtb	r3, r3
 8010a68:	f003 0304 	and.w	r3, r3, #4
 8010a6c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010a6e:	2003      	movs	r0, #3
 8010a70:	f7fa fd8c 	bl	800b58c <memp_malloc>
 8010a74:	6138      	str	r0, [r7, #16]
 8010a76:	693b      	ldr	r3, [r7, #16]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d104      	bne.n	8010a86 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010a7c:	68b8      	ldr	r0, [r7, #8]
 8010a7e:	f7fb fbe3 	bl	800c248 <pbuf_free>
    return NULL;
 8010a82:	2300      	movs	r3, #0
 8010a84:	e061      	b.n	8010b4a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010a8c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	2200      	movs	r2, #0
 8010a92:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	891a      	ldrh	r2, [r3, #8]
 8010a9e:	7dfb      	ldrb	r3, [r7, #23]
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d205      	bcs.n	8010ab2 <tcp_create_segment+0x86>
 8010aa6:	4b2b      	ldr	r3, [pc, #172]	; (8010b54 <tcp_create_segment+0x128>)
 8010aa8:	22b0      	movs	r2, #176	; 0xb0
 8010aaa:	492e      	ldr	r1, [pc, #184]	; (8010b64 <tcp_create_segment+0x138>)
 8010aac:	482b      	ldr	r0, [pc, #172]	; (8010b5c <tcp_create_segment+0x130>)
 8010aae:	f004 fcd9 	bl	8015464 <iprintf>
  seg->len = p->tot_len - optlen;
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	891a      	ldrh	r2, [r3, #8]
 8010ab6:	7dfb      	ldrb	r3, [r7, #23]
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	b29a      	uxth	r2, r3
 8010abe:	693b      	ldr	r3, [r7, #16]
 8010ac0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010ac2:	2114      	movs	r1, #20
 8010ac4:	68b8      	ldr	r0, [r7, #8]
 8010ac6:	f7fb fb29 	bl	800c11c <pbuf_add_header>
 8010aca:	4603      	mov	r3, r0
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d004      	beq.n	8010ada <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010ad0:	6938      	ldr	r0, [r7, #16]
 8010ad2:	f7fc ffe6 	bl	800daa2 <tcp_seg_free>
    return NULL;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	e037      	b.n	8010b4a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010ada:	693b      	ldr	r3, [r7, #16]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	685a      	ldr	r2, [r3, #4]
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	8ada      	ldrh	r2, [r3, #22]
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	68dc      	ldr	r4, [r3, #12]
 8010aec:	4610      	mov	r0, r2
 8010aee:	f7fa f819 	bl	800ab24 <lwip_htons>
 8010af2:	4603      	mov	r3, r0
 8010af4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	8b1a      	ldrh	r2, [r3, #24]
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	68dc      	ldr	r4, [r3, #12]
 8010afe:	4610      	mov	r0, r2
 8010b00:	f7fa f810 	bl	800ab24 <lwip_htons>
 8010b04:	4603      	mov	r3, r0
 8010b06:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010b08:	693b      	ldr	r3, [r7, #16]
 8010b0a:	68dc      	ldr	r4, [r3, #12]
 8010b0c:	6838      	ldr	r0, [r7, #0]
 8010b0e:	f7fa f81e 	bl	800ab4e <lwip_htonl>
 8010b12:	4603      	mov	r3, r0
 8010b14:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010b16:	7dfb      	ldrb	r3, [r7, #23]
 8010b18:	089b      	lsrs	r3, r3, #2
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	b29b      	uxth	r3, r3
 8010b1e:	3305      	adds	r3, #5
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	031b      	lsls	r3, r3, #12
 8010b24:	b29a      	uxth	r2, r3
 8010b26:	79fb      	ldrb	r3, [r7, #7]
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	b29a      	uxth	r2, r3
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	68dc      	ldr	r4, [r3, #12]
 8010b32:	4610      	mov	r0, r2
 8010b34:	f7f9 fff6 	bl	800ab24 <lwip_htons>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010b3c:	693b      	ldr	r3, [r7, #16]
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	2200      	movs	r2, #0
 8010b42:	749a      	strb	r2, [r3, #18]
 8010b44:	2200      	movs	r2, #0
 8010b46:	74da      	strb	r2, [r3, #19]
  return seg;
 8010b48:	693b      	ldr	r3, [r7, #16]
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	371c      	adds	r7, #28
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd90      	pop	{r4, r7, pc}
 8010b52:	bf00      	nop
 8010b54:	08019244 	.word	0x08019244
 8010b58:	08019278 	.word	0x08019278
 8010b5c:	08019298 	.word	0x08019298
 8010b60:	080192c0 	.word	0x080192c0
 8010b64:	080192e4 	.word	0x080192e4

08010b68 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b086      	sub	sp, #24
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	607b      	str	r3, [r7, #4]
 8010b70:	4603      	mov	r3, r0
 8010b72:	73fb      	strb	r3, [r7, #15]
 8010b74:	460b      	mov	r3, r1
 8010b76:	81bb      	strh	r3, [r7, #12]
 8010b78:	4613      	mov	r3, r2
 8010b7a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010b7c:	89bb      	ldrh	r3, [r7, #12]
 8010b7e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d105      	bne.n	8010b92 <tcp_pbuf_prealloc+0x2a>
 8010b86:	4b30      	ldr	r3, [pc, #192]	; (8010c48 <tcp_pbuf_prealloc+0xe0>)
 8010b88:	22e8      	movs	r2, #232	; 0xe8
 8010b8a:	4930      	ldr	r1, [pc, #192]	; (8010c4c <tcp_pbuf_prealloc+0xe4>)
 8010b8c:	4830      	ldr	r0, [pc, #192]	; (8010c50 <tcp_pbuf_prealloc+0xe8>)
 8010b8e:	f004 fc69 	bl	8015464 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010b92:	6a3b      	ldr	r3, [r7, #32]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d105      	bne.n	8010ba4 <tcp_pbuf_prealloc+0x3c>
 8010b98:	4b2b      	ldr	r3, [pc, #172]	; (8010c48 <tcp_pbuf_prealloc+0xe0>)
 8010b9a:	22e9      	movs	r2, #233	; 0xe9
 8010b9c:	492d      	ldr	r1, [pc, #180]	; (8010c54 <tcp_pbuf_prealloc+0xec>)
 8010b9e:	482c      	ldr	r0, [pc, #176]	; (8010c50 <tcp_pbuf_prealloc+0xe8>)
 8010ba0:	f004 fc60 	bl	8015464 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010ba4:	89ba      	ldrh	r2, [r7, #12]
 8010ba6:	897b      	ldrh	r3, [r7, #10]
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d221      	bcs.n	8010bf0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010bac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010bb0:	f003 0302 	and.w	r3, r3, #2
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d111      	bne.n	8010bdc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010bb8:	6a3b      	ldr	r3, [r7, #32]
 8010bba:	8b5b      	ldrh	r3, [r3, #26]
 8010bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d115      	bne.n	8010bf0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010bc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d007      	beq.n	8010bdc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010bcc:	6a3b      	ldr	r3, [r7, #32]
 8010bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d103      	bne.n	8010bdc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010bd4:	6a3b      	ldr	r3, [r7, #32]
 8010bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d009      	beq.n	8010bf0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010bdc:	89bb      	ldrh	r3, [r7, #12]
 8010bde:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010be2:	f023 0203 	bic.w	r2, r3, #3
 8010be6:	897b      	ldrh	r3, [r7, #10]
 8010be8:	4293      	cmp	r3, r2
 8010bea:	bf28      	it	cs
 8010bec:	4613      	movcs	r3, r2
 8010bee:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010bf0:	8af9      	ldrh	r1, [r7, #22]
 8010bf2:	7bfb      	ldrb	r3, [r7, #15]
 8010bf4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fb f841 	bl	800bc80 <pbuf_alloc>
 8010bfe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d101      	bne.n	8010c0a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010c06:	2300      	movs	r3, #0
 8010c08:	e019      	b.n	8010c3e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d006      	beq.n	8010c20 <tcp_pbuf_prealloc+0xb8>
 8010c12:	4b0d      	ldr	r3, [pc, #52]	; (8010c48 <tcp_pbuf_prealloc+0xe0>)
 8010c14:	f240 120b 	movw	r2, #267	; 0x10b
 8010c18:	490f      	ldr	r1, [pc, #60]	; (8010c58 <tcp_pbuf_prealloc+0xf0>)
 8010c1a:	480d      	ldr	r0, [pc, #52]	; (8010c50 <tcp_pbuf_prealloc+0xe8>)
 8010c1c:	f004 fc22 	bl	8015464 <iprintf>
  *oversize = p->len - length;
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	895a      	ldrh	r2, [r3, #10]
 8010c24:	89bb      	ldrh	r3, [r7, #12]
 8010c26:	1ad3      	subs	r3, r2, r3
 8010c28:	b29a      	uxth	r2, r3
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	89ba      	ldrh	r2, [r7, #12]
 8010c32:	811a      	strh	r2, [r3, #8]
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	891a      	ldrh	r2, [r3, #8]
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	815a      	strh	r2, [r3, #10]
  return p;
 8010c3c:	693b      	ldr	r3, [r7, #16]
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3718      	adds	r7, #24
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}
 8010c46:	bf00      	nop
 8010c48:	08019244 	.word	0x08019244
 8010c4c:	080192fc 	.word	0x080192fc
 8010c50:	08019298 	.word	0x08019298
 8010c54:	08019320 	.word	0x08019320
 8010c58:	08019340 	.word	0x08019340

08010c5c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b082      	sub	sp, #8
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	460b      	mov	r3, r1
 8010c66:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d106      	bne.n	8010c7c <tcp_write_checks+0x20>
 8010c6e:	4b33      	ldr	r3, [pc, #204]	; (8010d3c <tcp_write_checks+0xe0>)
 8010c70:	f240 1233 	movw	r2, #307	; 0x133
 8010c74:	4932      	ldr	r1, [pc, #200]	; (8010d40 <tcp_write_checks+0xe4>)
 8010c76:	4833      	ldr	r0, [pc, #204]	; (8010d44 <tcp_write_checks+0xe8>)
 8010c78:	f004 fbf4 	bl	8015464 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	7d1b      	ldrb	r3, [r3, #20]
 8010c80:	2b04      	cmp	r3, #4
 8010c82:	d00e      	beq.n	8010ca2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010c88:	2b07      	cmp	r3, #7
 8010c8a:	d00a      	beq.n	8010ca2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010c90:	2b02      	cmp	r3, #2
 8010c92:	d006      	beq.n	8010ca2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010c98:	2b03      	cmp	r3, #3
 8010c9a:	d002      	beq.n	8010ca2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010c9c:	f06f 030a 	mvn.w	r3, #10
 8010ca0:	e048      	b.n	8010d34 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010ca2:	887b      	ldrh	r3, [r7, #2]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d101      	bne.n	8010cac <tcp_write_checks+0x50>
    return ERR_OK;
 8010ca8:	2300      	movs	r3, #0
 8010caa:	e043      	b.n	8010d34 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010cb2:	887a      	ldrh	r2, [r7, #2]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d909      	bls.n	8010ccc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	8b5b      	ldrh	r3, [r3, #26]
 8010cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cc0:	b29a      	uxth	r2, r3
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cca:	e033      	b.n	8010d34 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cd2:	2b08      	cmp	r3, #8
 8010cd4:	d909      	bls.n	8010cea <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	8b5b      	ldrh	r3, [r3, #26]
 8010cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ce8:	e024      	b.n	8010d34 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d00f      	beq.n	8010d14 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d11a      	bne.n	8010d32 <tcp_write_checks+0xd6>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d116      	bne.n	8010d32 <tcp_write_checks+0xd6>
 8010d04:	4b0d      	ldr	r3, [pc, #52]	; (8010d3c <tcp_write_checks+0xe0>)
 8010d06:	f240 1255 	movw	r2, #341	; 0x155
 8010d0a:	490f      	ldr	r1, [pc, #60]	; (8010d48 <tcp_write_checks+0xec>)
 8010d0c:	480d      	ldr	r0, [pc, #52]	; (8010d44 <tcp_write_checks+0xe8>)
 8010d0e:	f004 fba9 	bl	8015464 <iprintf>
 8010d12:	e00e      	b.n	8010d32 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d103      	bne.n	8010d24 <tcp_write_checks+0xc8>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d006      	beq.n	8010d32 <tcp_write_checks+0xd6>
 8010d24:	4b05      	ldr	r3, [pc, #20]	; (8010d3c <tcp_write_checks+0xe0>)
 8010d26:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010d2a:	4908      	ldr	r1, [pc, #32]	; (8010d4c <tcp_write_checks+0xf0>)
 8010d2c:	4805      	ldr	r0, [pc, #20]	; (8010d44 <tcp_write_checks+0xe8>)
 8010d2e:	f004 fb99 	bl	8015464 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	08019244 	.word	0x08019244
 8010d40:	08019354 	.word	0x08019354
 8010d44:	08019298 	.word	0x08019298
 8010d48:	08019374 	.word	0x08019374
 8010d4c:	080193b0 	.word	0x080193b0

08010d50 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010d50:	b590      	push	{r4, r7, lr}
 8010d52:	b09b      	sub	sp, #108	; 0x6c
 8010d54:	af04      	add	r7, sp, #16
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	60b9      	str	r1, [r7, #8]
 8010d5a:	4611      	mov	r1, r2
 8010d5c:	461a      	mov	r2, r3
 8010d5e:	460b      	mov	r3, r1
 8010d60:	80fb      	strh	r3, [r7, #6]
 8010d62:	4613      	mov	r3, r2
 8010d64:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010d66:	2300      	movs	r3, #0
 8010d68:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	653b      	str	r3, [r7, #80]	; 0x50
 8010d6e:	2300      	movs	r3, #0
 8010d70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d72:	2300      	movs	r3, #0
 8010d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d76:	2300      	movs	r3, #0
 8010d78:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010d80:	2300      	movs	r3, #0
 8010d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010d86:	2300      	movs	r3, #0
 8010d88:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d109      	bne.n	8010dac <tcp_write+0x5c>
 8010d98:	4ba4      	ldr	r3, [pc, #656]	; (801102c <tcp_write+0x2dc>)
 8010d9a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010d9e:	49a4      	ldr	r1, [pc, #656]	; (8011030 <tcp_write+0x2e0>)
 8010da0:	48a4      	ldr	r0, [pc, #656]	; (8011034 <tcp_write+0x2e4>)
 8010da2:	f004 fb5f 	bl	8015464 <iprintf>
 8010da6:	f06f 030f 	mvn.w	r3, #15
 8010daa:	e32a      	b.n	8011402 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010db2:	085b      	lsrs	r3, r3, #1
 8010db4:	b29a      	uxth	r2, r3
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	bf28      	it	cs
 8010dbe:	4613      	movcs	r3, r2
 8010dc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010dc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d102      	bne.n	8010dce <tcp_write+0x7e>
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dcc:	e000      	b.n	8010dd0 <tcp_write+0x80>
 8010dce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dd0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d109      	bne.n	8010dec <tcp_write+0x9c>
 8010dd8:	4b94      	ldr	r3, [pc, #592]	; (801102c <tcp_write+0x2dc>)
 8010dda:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010dde:	4996      	ldr	r1, [pc, #600]	; (8011038 <tcp_write+0x2e8>)
 8010de0:	4894      	ldr	r0, [pc, #592]	; (8011034 <tcp_write+0x2e4>)
 8010de2:	f004 fb3f 	bl	8015464 <iprintf>
 8010de6:	f06f 030f 	mvn.w	r3, #15
 8010dea:	e30a      	b.n	8011402 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010dec:	88fb      	ldrh	r3, [r7, #6]
 8010dee:	4619      	mov	r1, r3
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f7ff ff33 	bl	8010c5c <tcp_write_checks>
 8010df6:	4603      	mov	r3, r0
 8010df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010dfc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d002      	beq.n	8010e0a <tcp_write+0xba>
    return err;
 8010e04:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010e08:	e2fb      	b.n	8011402 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e10:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010e14:	2300      	movs	r3, #0
 8010e16:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f000 80f6 	beq.w	8011010 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e28:	653b      	str	r3, [r7, #80]	; 0x50
 8010e2a:	e002      	b.n	8010e32 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d1f8      	bne.n	8010e2c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e3c:	7a9b      	ldrb	r3, [r3, #10]
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	f003 0304 	and.w	r3, r3, #4
 8010e46:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010e48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e4c:	891b      	ldrh	r3, [r3, #8]
 8010e4e:	4619      	mov	r1, r3
 8010e50:	8c3b      	ldrh	r3, [r7, #32]
 8010e52:	440b      	add	r3, r1
 8010e54:	429a      	cmp	r2, r3
 8010e56:	da06      	bge.n	8010e66 <tcp_write+0x116>
 8010e58:	4b74      	ldr	r3, [pc, #464]	; (801102c <tcp_write+0x2dc>)
 8010e5a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010e5e:	4977      	ldr	r1, [pc, #476]	; (801103c <tcp_write+0x2ec>)
 8010e60:	4874      	ldr	r0, [pc, #464]	; (8011034 <tcp_write+0x2e4>)
 8010e62:	f004 faff 	bl	8015464 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e68:	891a      	ldrh	r2, [r3, #8]
 8010e6a:	8c3b      	ldrh	r3, [r7, #32]
 8010e6c:	4413      	add	r3, r2
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010e72:	1ad3      	subs	r3, r2, r3
 8010e74:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010e7c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010e7e:	8a7b      	ldrh	r3, [r7, #18]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d026      	beq.n	8010ed2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010e84:	8a7b      	ldrh	r3, [r7, #18]
 8010e86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010e88:	429a      	cmp	r2, r3
 8010e8a:	d206      	bcs.n	8010e9a <tcp_write+0x14a>
 8010e8c:	4b67      	ldr	r3, [pc, #412]	; (801102c <tcp_write+0x2dc>)
 8010e8e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010e92:	496b      	ldr	r1, [pc, #428]	; (8011040 <tcp_write+0x2f0>)
 8010e94:	4867      	ldr	r0, [pc, #412]	; (8011034 <tcp_write+0x2e4>)
 8010e96:	f004 fae5 	bl	8015464 <iprintf>
      seg = last_unsent;
 8010e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010e9e:	8a7b      	ldrh	r3, [r7, #18]
 8010ea0:	88fa      	ldrh	r2, [r7, #6]
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	bf28      	it	cs
 8010ea6:	4613      	movcs	r3, r2
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010eac:	4293      	cmp	r3, r2
 8010eae:	bf28      	it	cs
 8010eb0:	4613      	movcs	r3, r2
 8010eb2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010eb4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010eb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010eba:	4413      	add	r3, r2
 8010ebc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010ec0:	8a7a      	ldrh	r2, [r7, #18]
 8010ec2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ec4:	1ad3      	subs	r3, r2, r3
 8010ec6:	b29b      	uxth	r3, r3
 8010ec8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010eca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010ecc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ece:	1ad3      	subs	r3, r2, r3
 8010ed0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010ed2:	8a7b      	ldrh	r3, [r7, #18]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00b      	beq.n	8010ef0 <tcp_write+0x1a0>
 8010ed8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010edc:	88fb      	ldrh	r3, [r7, #6]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d006      	beq.n	8010ef0 <tcp_write+0x1a0>
 8010ee2:	4b52      	ldr	r3, [pc, #328]	; (801102c <tcp_write+0x2dc>)
 8010ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ee8:	4956      	ldr	r1, [pc, #344]	; (8011044 <tcp_write+0x2f4>)
 8010eea:	4852      	ldr	r0, [pc, #328]	; (8011034 <tcp_write+0x2e4>)
 8010eec:	f004 faba 	bl	8015464 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010ef0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ef4:	88fb      	ldrh	r3, [r7, #6]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	f080 8167 	bcs.w	80111ca <tcp_write+0x47a>
 8010efc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	f000 8163 	beq.w	80111ca <tcp_write+0x47a>
 8010f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f06:	891b      	ldrh	r3, [r3, #8]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	f000 815e 	beq.w	80111ca <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010f0e:	88fa      	ldrh	r2, [r7, #6]
 8010f10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f14:	1ad2      	subs	r2, r2, r3
 8010f16:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	bfa8      	it	ge
 8010f1c:	4613      	movge	r3, r2
 8010f1e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f22:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010f24:	797b      	ldrb	r3, [r7, #5]
 8010f26:	f003 0301 	and.w	r3, r3, #1
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d027      	beq.n	8010f7e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010f2e:	f107 0012 	add.w	r0, r7, #18
 8010f32:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010f34:	8bf9      	ldrh	r1, [r7, #30]
 8010f36:	2301      	movs	r3, #1
 8010f38:	9302      	str	r3, [sp, #8]
 8010f3a:	797b      	ldrb	r3, [r7, #5]
 8010f3c:	9301      	str	r3, [sp, #4]
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	9300      	str	r3, [sp, #0]
 8010f42:	4603      	mov	r3, r0
 8010f44:	2000      	movs	r0, #0
 8010f46:	f7ff fe0f 	bl	8010b68 <tcp_pbuf_prealloc>
 8010f4a:	6578      	str	r0, [r7, #84]	; 0x54
 8010f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	f000 8225 	beq.w	801139e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f56:	6858      	ldr	r0, [r3, #4]
 8010f58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f5c:	68ba      	ldr	r2, [r7, #8]
 8010f5e:	4413      	add	r3, r2
 8010f60:	8bfa      	ldrh	r2, [r7, #30]
 8010f62:	4619      	mov	r1, r3
 8010f64:	f004 fa4e 	bl	8015404 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010f68:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010f6a:	f7fb f9f5 	bl	800c358 <pbuf_clen>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	461a      	mov	r2, r3
 8010f72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010f76:	4413      	add	r3, r2
 8010f78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010f7c:	e041      	b.n	8011002 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f80:	685b      	ldr	r3, [r3, #4]
 8010f82:	637b      	str	r3, [r7, #52]	; 0x34
 8010f84:	e002      	b.n	8010f8c <tcp_write+0x23c>
 8010f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d1f8      	bne.n	8010f86 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f96:	7b1b      	ldrb	r3, [r3, #12]
 8010f98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d115      	bne.n	8010fcc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fa6:	8952      	ldrh	r2, [r2, #10]
 8010fa8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010faa:	68ba      	ldr	r2, [r7, #8]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d10d      	bne.n	8010fcc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010fb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d006      	beq.n	8010fc6 <tcp_write+0x276>
 8010fb8:	4b1c      	ldr	r3, [pc, #112]	; (801102c <tcp_write+0x2dc>)
 8010fba:	f240 2231 	movw	r2, #561	; 0x231
 8010fbe:	4922      	ldr	r1, [pc, #136]	; (8011048 <tcp_write+0x2f8>)
 8010fc0:	481c      	ldr	r0, [pc, #112]	; (8011034 <tcp_write+0x2e4>)
 8010fc2:	f004 fa4f 	bl	8015464 <iprintf>
          extendlen = seglen;
 8010fc6:	8bfb      	ldrh	r3, [r7, #30]
 8010fc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010fca:	e01a      	b.n	8011002 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010fcc:	8bfb      	ldrh	r3, [r7, #30]
 8010fce:	2201      	movs	r2, #1
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	2000      	movs	r0, #0
 8010fd4:	f7fa fe54 	bl	800bc80 <pbuf_alloc>
 8010fd8:	6578      	str	r0, [r7, #84]	; 0x54
 8010fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f000 81e0 	beq.w	80113a2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010fe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fe6:	68ba      	ldr	r2, [r7, #8]
 8010fe8:	441a      	add	r2, r3
 8010fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010fec:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010fee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010ff0:	f7fb f9b2 	bl	800c358 <pbuf_clen>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	461a      	mov	r2, r3
 8010ff8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ffc:	4413      	add	r3, r2
 8010ffe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011002:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011006:	8bfb      	ldrh	r3, [r7, #30]
 8011008:	4413      	add	r3, r2
 801100a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801100e:	e0dc      	b.n	80111ca <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011016:	2b00      	cmp	r3, #0
 8011018:	f000 80d7 	beq.w	80111ca <tcp_write+0x47a>
 801101c:	4b03      	ldr	r3, [pc, #12]	; (801102c <tcp_write+0x2dc>)
 801101e:	f240 224a 	movw	r2, #586	; 0x24a
 8011022:	490a      	ldr	r1, [pc, #40]	; (801104c <tcp_write+0x2fc>)
 8011024:	4803      	ldr	r0, [pc, #12]	; (8011034 <tcp_write+0x2e4>)
 8011026:	f004 fa1d 	bl	8015464 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801102a:	e0ce      	b.n	80111ca <tcp_write+0x47a>
 801102c:	08019244 	.word	0x08019244
 8011030:	080193e4 	.word	0x080193e4
 8011034:	08019298 	.word	0x08019298
 8011038:	080193fc 	.word	0x080193fc
 801103c:	08019430 	.word	0x08019430
 8011040:	08019448 	.word	0x08019448
 8011044:	08019468 	.word	0x08019468
 8011048:	08019488 	.word	0x08019488
 801104c:	080194b4 	.word	0x080194b4
    struct pbuf *p;
    u16_t left = len - pos;
 8011050:	88fa      	ldrh	r2, [r7, #6]
 8011052:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011056:	1ad3      	subs	r3, r2, r3
 8011058:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801105a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801105e:	b29b      	uxth	r3, r3
 8011060:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011066:	8b7a      	ldrh	r2, [r7, #26]
 8011068:	8bbb      	ldrh	r3, [r7, #28]
 801106a:	4293      	cmp	r3, r2
 801106c:	bf28      	it	cs
 801106e:	4613      	movcs	r3, r2
 8011070:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011072:	797b      	ldrb	r3, [r7, #5]
 8011074:	f003 0301 	and.w	r3, r3, #1
 8011078:	2b00      	cmp	r3, #0
 801107a:	d036      	beq.n	80110ea <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801107c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011080:	b29a      	uxth	r2, r3
 8011082:	8b3b      	ldrh	r3, [r7, #24]
 8011084:	4413      	add	r3, r2
 8011086:	b299      	uxth	r1, r3
 8011088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801108a:	2b00      	cmp	r3, #0
 801108c:	bf0c      	ite	eq
 801108e:	2301      	moveq	r3, #1
 8011090:	2300      	movne	r3, #0
 8011092:	b2db      	uxtb	r3, r3
 8011094:	f107 0012 	add.w	r0, r7, #18
 8011098:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801109a:	9302      	str	r3, [sp, #8]
 801109c:	797b      	ldrb	r3, [r7, #5]
 801109e:	9301      	str	r3, [sp, #4]
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	9300      	str	r3, [sp, #0]
 80110a4:	4603      	mov	r3, r0
 80110a6:	2036      	movs	r0, #54	; 0x36
 80110a8:	f7ff fd5e 	bl	8010b68 <tcp_pbuf_prealloc>
 80110ac:	6338      	str	r0, [r7, #48]	; 0x30
 80110ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f000 8178 	beq.w	80113a6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80110b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110b8:	895b      	ldrh	r3, [r3, #10]
 80110ba:	8b3a      	ldrh	r2, [r7, #24]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d906      	bls.n	80110ce <tcp_write+0x37e>
 80110c0:	4b8c      	ldr	r3, [pc, #560]	; (80112f4 <tcp_write+0x5a4>)
 80110c2:	f240 2266 	movw	r2, #614	; 0x266
 80110c6:	498c      	ldr	r1, [pc, #560]	; (80112f8 <tcp_write+0x5a8>)
 80110c8:	488c      	ldr	r0, [pc, #560]	; (80112fc <tcp_write+0x5ac>)
 80110ca:	f004 f9cb 	bl	8015464 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80110ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110d0:	685a      	ldr	r2, [r3, #4]
 80110d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80110d6:	18d0      	adds	r0, r2, r3
 80110d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110dc:	68ba      	ldr	r2, [r7, #8]
 80110de:	4413      	add	r3, r2
 80110e0:	8b3a      	ldrh	r2, [r7, #24]
 80110e2:	4619      	mov	r1, r3
 80110e4:	f004 f98e 	bl	8015404 <memcpy>
 80110e8:	e02f      	b.n	801114a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80110ea:	8a7b      	ldrh	r3, [r7, #18]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d006      	beq.n	80110fe <tcp_write+0x3ae>
 80110f0:	4b80      	ldr	r3, [pc, #512]	; (80112f4 <tcp_write+0x5a4>)
 80110f2:	f240 2271 	movw	r2, #625	; 0x271
 80110f6:	4982      	ldr	r1, [pc, #520]	; (8011300 <tcp_write+0x5b0>)
 80110f8:	4880      	ldr	r0, [pc, #512]	; (80112fc <tcp_write+0x5ac>)
 80110fa:	f004 f9b3 	bl	8015464 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80110fe:	8b3b      	ldrh	r3, [r7, #24]
 8011100:	2201      	movs	r2, #1
 8011102:	4619      	mov	r1, r3
 8011104:	2036      	movs	r0, #54	; 0x36
 8011106:	f7fa fdbb 	bl	800bc80 <pbuf_alloc>
 801110a:	6178      	str	r0, [r7, #20]
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	2b00      	cmp	r3, #0
 8011110:	f000 814b 	beq.w	80113aa <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011114:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011118:	68ba      	ldr	r2, [r7, #8]
 801111a:	441a      	add	r2, r3
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011120:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011124:	b29b      	uxth	r3, r3
 8011126:	f44f 7220 	mov.w	r2, #640	; 0x280
 801112a:	4619      	mov	r1, r3
 801112c:	2036      	movs	r0, #54	; 0x36
 801112e:	f7fa fda7 	bl	800bc80 <pbuf_alloc>
 8011132:	6338      	str	r0, [r7, #48]	; 0x30
 8011134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011136:	2b00      	cmp	r3, #0
 8011138:	d103      	bne.n	8011142 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801113a:	6978      	ldr	r0, [r7, #20]
 801113c:	f7fb f884 	bl	800c248 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011140:	e136      	b.n	80113b0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011142:	6979      	ldr	r1, [r7, #20]
 8011144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011146:	f7fb f941 	bl	800c3cc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801114a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801114c:	f7fb f904 	bl	800c358 <pbuf_clen>
 8011150:	4603      	mov	r3, r0
 8011152:	461a      	mov	r2, r3
 8011154:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011158:	4413      	add	r3, r2
 801115a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801115e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011162:	2b09      	cmp	r3, #9
 8011164:	d903      	bls.n	801116e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011168:	f7fb f86e 	bl	800c248 <pbuf_free>
      goto memerr;
 801116c:	e120      	b.n	80113b0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011172:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011176:	441a      	add	r2, r3
 8011178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801117c:	9300      	str	r3, [sp, #0]
 801117e:	4613      	mov	r3, r2
 8011180:	2200      	movs	r2, #0
 8011182:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011184:	68f8      	ldr	r0, [r7, #12]
 8011186:	f7ff fc51 	bl	8010a2c <tcp_create_segment>
 801118a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801118c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801118e:	2b00      	cmp	r3, #0
 8011190:	f000 810d 	beq.w	80113ae <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011196:	2b00      	cmp	r3, #0
 8011198:	d102      	bne.n	80111a0 <tcp_write+0x450>
      queue = seg;
 801119a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801119c:	647b      	str	r3, [r7, #68]	; 0x44
 801119e:	e00c      	b.n	80111ba <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80111a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d106      	bne.n	80111b4 <tcp_write+0x464>
 80111a6:	4b53      	ldr	r3, [pc, #332]	; (80112f4 <tcp_write+0x5a4>)
 80111a8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80111ac:	4955      	ldr	r1, [pc, #340]	; (8011304 <tcp_write+0x5b4>)
 80111ae:	4853      	ldr	r0, [pc, #332]	; (80112fc <tcp_write+0x5ac>)
 80111b0:	f004 f958 	bl	8015464 <iprintf>
      prev_seg->next = seg;
 80111b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80111b8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80111ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80111bc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80111be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111c2:	8b3b      	ldrh	r3, [r7, #24]
 80111c4:	4413      	add	r3, r2
 80111c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80111ca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111ce:	88fb      	ldrh	r3, [r7, #6]
 80111d0:	429a      	cmp	r2, r3
 80111d2:	f4ff af3d 	bcc.w	8011050 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80111d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d02c      	beq.n	8011236 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80111dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111e2:	e01e      	b.n	8011222 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80111e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e6:	891a      	ldrh	r2, [r3, #8]
 80111e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111ea:	4413      	add	r3, r2
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80111f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d110      	bne.n	801121c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80111fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011200:	8952      	ldrh	r2, [r2, #10]
 8011202:	4413      	add	r3, r2
 8011204:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011206:	68b9      	ldr	r1, [r7, #8]
 8011208:	4618      	mov	r0, r3
 801120a:	f004 f8fb 	bl	8015404 <memcpy>
        p->len += oversize_used;
 801120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011210:	895a      	ldrh	r2, [r3, #10]
 8011212:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011214:	4413      	add	r3, r2
 8011216:	b29a      	uxth	r2, r3
 8011218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801121c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011224:	2b00      	cmp	r3, #0
 8011226:	d1dd      	bne.n	80111e4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801122a:	891a      	ldrh	r2, [r3, #8]
 801122c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801122e:	4413      	add	r3, r2
 8011230:	b29a      	uxth	r2, r3
 8011232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011234:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011236:	8a7a      	ldrh	r2, [r7, #18]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801123e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011240:	2b00      	cmp	r3, #0
 8011242:	d018      	beq.n	8011276 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011246:	2b00      	cmp	r3, #0
 8011248:	d106      	bne.n	8011258 <tcp_write+0x508>
 801124a:	4b2a      	ldr	r3, [pc, #168]	; (80112f4 <tcp_write+0x5a4>)
 801124c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011250:	492d      	ldr	r1, [pc, #180]	; (8011308 <tcp_write+0x5b8>)
 8011252:	482a      	ldr	r0, [pc, #168]	; (80112fc <tcp_write+0x5ac>)
 8011254:	f004 f906 	bl	8015464 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801125e:	4618      	mov	r0, r3
 8011260:	f7fb f8b4 	bl	800c3cc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011266:	891a      	ldrh	r2, [r3, #8]
 8011268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801126a:	891b      	ldrh	r3, [r3, #8]
 801126c:	4413      	add	r3, r2
 801126e:	b29a      	uxth	r2, r3
 8011270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011272:	811a      	strh	r2, [r3, #8]
 8011274:	e037      	b.n	80112e6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011276:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011278:	2b00      	cmp	r3, #0
 801127a:	d034      	beq.n	80112e6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801127c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801127e:	2b00      	cmp	r3, #0
 8011280:	d003      	beq.n	801128a <tcp_write+0x53a>
 8011282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d106      	bne.n	8011298 <tcp_write+0x548>
 801128a:	4b1a      	ldr	r3, [pc, #104]	; (80112f4 <tcp_write+0x5a4>)
 801128c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8011290:	491e      	ldr	r1, [pc, #120]	; (801130c <tcp_write+0x5bc>)
 8011292:	481a      	ldr	r0, [pc, #104]	; (80112fc <tcp_write+0x5ac>)
 8011294:	f004 f8e6 	bl	8015464 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801129a:	685b      	ldr	r3, [r3, #4]
 801129c:	62bb      	str	r3, [r7, #40]	; 0x28
 801129e:	e009      	b.n	80112b4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80112a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a2:	891a      	ldrh	r2, [r3, #8]
 80112a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112a6:	4413      	add	r3, r2
 80112a8:	b29a      	uxth	r2, r3
 80112aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ac:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80112ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80112b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d1f1      	bne.n	80112a0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80112bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112be:	891a      	ldrh	r2, [r3, #8]
 80112c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112c2:	4413      	add	r3, r2
 80112c4:	b29a      	uxth	r2, r3
 80112c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80112ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112cc:	895a      	ldrh	r2, [r3, #10]
 80112ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112d0:	4413      	add	r3, r2
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80112d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112da:	891a      	ldrh	r2, [r3, #8]
 80112dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80112de:	4413      	add	r3, r2
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112e4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80112e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d111      	bne.n	8011310 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112f0:	66da      	str	r2, [r3, #108]	; 0x6c
 80112f2:	e010      	b.n	8011316 <tcp_write+0x5c6>
 80112f4:	08019244 	.word	0x08019244
 80112f8:	080194e4 	.word	0x080194e4
 80112fc:	08019298 	.word	0x08019298
 8011300:	08019524 	.word	0x08019524
 8011304:	08019534 	.word	0x08019534
 8011308:	08019548 	.word	0x08019548
 801130c:	08019580 	.word	0x08019580
  } else {
    last_unsent->next = queue;
 8011310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011314:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801131a:	88fb      	ldrh	r3, [r7, #6]
 801131c:	441a      	add	r2, r3
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011328:	88fb      	ldrh	r3, [r7, #6]
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	b29a      	uxth	r2, r3
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801133a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011344:	2b00      	cmp	r3, #0
 8011346:	d00e      	beq.n	8011366 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801134c:	2b00      	cmp	r3, #0
 801134e:	d10a      	bne.n	8011366 <tcp_write+0x616>
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011354:	2b00      	cmp	r3, #0
 8011356:	d106      	bne.n	8011366 <tcp_write+0x616>
 8011358:	4b2c      	ldr	r3, [pc, #176]	; (801140c <tcp_write+0x6bc>)
 801135a:	f240 3212 	movw	r2, #786	; 0x312
 801135e:	492c      	ldr	r1, [pc, #176]	; (8011410 <tcp_write+0x6c0>)
 8011360:	482c      	ldr	r0, [pc, #176]	; (8011414 <tcp_write+0x6c4>)
 8011362:	f004 f87f 	bl	8015464 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011368:	2b00      	cmp	r3, #0
 801136a:	d016      	beq.n	801139a <tcp_write+0x64a>
 801136c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d012      	beq.n	801139a <tcp_write+0x64a>
 8011374:	797b      	ldrb	r3, [r7, #5]
 8011376:	f003 0302 	and.w	r3, r3, #2
 801137a:	2b00      	cmp	r3, #0
 801137c:	d10d      	bne.n	801139a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801137e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	899b      	ldrh	r3, [r3, #12]
 8011384:	b29c      	uxth	r4, r3
 8011386:	2008      	movs	r0, #8
 8011388:	f7f9 fbcc 	bl	800ab24 <lwip_htons>
 801138c:	4603      	mov	r3, r0
 801138e:	461a      	mov	r2, r3
 8011390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	4322      	orrs	r2, r4
 8011396:	b292      	uxth	r2, r2
 8011398:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801139a:	2300      	movs	r3, #0
 801139c:	e031      	b.n	8011402 <tcp_write+0x6b2>
          goto memerr;
 801139e:	bf00      	nop
 80113a0:	e006      	b.n	80113b0 <tcp_write+0x660>
            goto memerr;
 80113a2:	bf00      	nop
 80113a4:	e004      	b.n	80113b0 <tcp_write+0x660>
        goto memerr;
 80113a6:	bf00      	nop
 80113a8:	e002      	b.n	80113b0 <tcp_write+0x660>
        goto memerr;
 80113aa:	bf00      	nop
 80113ac:	e000      	b.n	80113b0 <tcp_write+0x660>
      goto memerr;
 80113ae:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	8b5b      	ldrh	r3, [r3, #26]
 80113b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113b8:	b29a      	uxth	r2, r3
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80113be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d002      	beq.n	80113ca <tcp_write+0x67a>
    pbuf_free(concat_p);
 80113c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80113c6:	f7fa ff3f 	bl	800c248 <pbuf_free>
  }
  if (queue != NULL) {
 80113ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d002      	beq.n	80113d6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80113d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80113d2:	f7fc fb51 	bl	800da78 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d00e      	beq.n	80113fe <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d10a      	bne.n	80113fe <tcp_write+0x6ae>
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d106      	bne.n	80113fe <tcp_write+0x6ae>
 80113f0:	4b06      	ldr	r3, [pc, #24]	; (801140c <tcp_write+0x6bc>)
 80113f2:	f240 3227 	movw	r2, #807	; 0x327
 80113f6:	4906      	ldr	r1, [pc, #24]	; (8011410 <tcp_write+0x6c0>)
 80113f8:	4806      	ldr	r0, [pc, #24]	; (8011414 <tcp_write+0x6c4>)
 80113fa:	f004 f833 	bl	8015464 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80113fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011402:	4618      	mov	r0, r3
 8011404:	375c      	adds	r7, #92	; 0x5c
 8011406:	46bd      	mov	sp, r7
 8011408:	bd90      	pop	{r4, r7, pc}
 801140a:	bf00      	nop
 801140c:	08019244 	.word	0x08019244
 8011410:	080195b8 	.word	0x080195b8
 8011414:	08019298 	.word	0x08019298

08011418 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011418:	b590      	push	{r4, r7, lr}
 801141a:	b08b      	sub	sp, #44	; 0x2c
 801141c:	af02      	add	r7, sp, #8
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	460b      	mov	r3, r1
 8011422:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011424:	2300      	movs	r3, #0
 8011426:	61fb      	str	r3, [r7, #28]
 8011428:	2300      	movs	r3, #0
 801142a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801142c:	2300      	movs	r3, #0
 801142e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <tcp_split_unsent_seg+0x2c>
 8011436:	4b95      	ldr	r3, [pc, #596]	; (801168c <tcp_split_unsent_seg+0x274>)
 8011438:	f240 324b 	movw	r2, #843	; 0x34b
 801143c:	4994      	ldr	r1, [pc, #592]	; (8011690 <tcp_split_unsent_seg+0x278>)
 801143e:	4895      	ldr	r0, [pc, #596]	; (8011694 <tcp_split_unsent_seg+0x27c>)
 8011440:	f004 f810 	bl	8015464 <iprintf>

  useg = pcb->unsent;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011448:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d102      	bne.n	8011456 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011454:	e116      	b.n	8011684 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011456:	887b      	ldrh	r3, [r7, #2]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d109      	bne.n	8011470 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801145c:	4b8b      	ldr	r3, [pc, #556]	; (801168c <tcp_split_unsent_seg+0x274>)
 801145e:	f240 3253 	movw	r2, #851	; 0x353
 8011462:	498d      	ldr	r1, [pc, #564]	; (8011698 <tcp_split_unsent_seg+0x280>)
 8011464:	488b      	ldr	r0, [pc, #556]	; (8011694 <tcp_split_unsent_seg+0x27c>)
 8011466:	f003 fffd 	bl	8015464 <iprintf>
    return ERR_VAL;
 801146a:	f06f 0305 	mvn.w	r3, #5
 801146e:	e109      	b.n	8011684 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	891b      	ldrh	r3, [r3, #8]
 8011474:	887a      	ldrh	r2, [r7, #2]
 8011476:	429a      	cmp	r2, r3
 8011478:	d301      	bcc.n	801147e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801147a:	2300      	movs	r3, #0
 801147c:	e102      	b.n	8011684 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011482:	887a      	ldrh	r2, [r7, #2]
 8011484:	429a      	cmp	r2, r3
 8011486:	d906      	bls.n	8011496 <tcp_split_unsent_seg+0x7e>
 8011488:	4b80      	ldr	r3, [pc, #512]	; (801168c <tcp_split_unsent_seg+0x274>)
 801148a:	f240 325b 	movw	r2, #859	; 0x35b
 801148e:	4983      	ldr	r1, [pc, #524]	; (801169c <tcp_split_unsent_seg+0x284>)
 8011490:	4880      	ldr	r0, [pc, #512]	; (8011694 <tcp_split_unsent_seg+0x27c>)
 8011492:	f003 ffe7 	bl	8015464 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	891b      	ldrh	r3, [r3, #8]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d106      	bne.n	80114ac <tcp_split_unsent_seg+0x94>
 801149e:	4b7b      	ldr	r3, [pc, #492]	; (801168c <tcp_split_unsent_seg+0x274>)
 80114a0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80114a4:	497e      	ldr	r1, [pc, #504]	; (80116a0 <tcp_split_unsent_seg+0x288>)
 80114a6:	487b      	ldr	r0, [pc, #492]	; (8011694 <tcp_split_unsent_seg+0x27c>)
 80114a8:	f003 ffdc 	bl	8015464 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	7a9b      	ldrb	r3, [r3, #10]
 80114b0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80114b2:	7bfb      	ldrb	r3, [r7, #15]
 80114b4:	009b      	lsls	r3, r3, #2
 80114b6:	b2db      	uxtb	r3, r3
 80114b8:	f003 0304 	and.w	r3, r3, #4
 80114bc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	891a      	ldrh	r2, [r3, #8]
 80114c2:	887b      	ldrh	r3, [r7, #2]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80114c8:	7bbb      	ldrb	r3, [r7, #14]
 80114ca:	b29a      	uxth	r2, r3
 80114cc:	89bb      	ldrh	r3, [r7, #12]
 80114ce:	4413      	add	r3, r2
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80114d6:	4619      	mov	r1, r3
 80114d8:	2036      	movs	r0, #54	; 0x36
 80114da:	f7fa fbd1 	bl	800bc80 <pbuf_alloc>
 80114de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f000 80b7 	beq.w	8011656 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	685b      	ldr	r3, [r3, #4]
 80114ec:	891a      	ldrh	r2, [r3, #8]
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	891b      	ldrh	r3, [r3, #8]
 80114f2:	1ad3      	subs	r3, r2, r3
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	887b      	ldrh	r3, [r7, #2]
 80114f8:	4413      	add	r3, r2
 80114fa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	6858      	ldr	r0, [r3, #4]
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	685a      	ldr	r2, [r3, #4]
 8011504:	7bbb      	ldrb	r3, [r7, #14]
 8011506:	18d1      	adds	r1, r2, r3
 8011508:	897b      	ldrh	r3, [r7, #10]
 801150a:	89ba      	ldrh	r2, [r7, #12]
 801150c:	f7fb f886 	bl	800c61c <pbuf_copy_partial>
 8011510:	4603      	mov	r3, r0
 8011512:	461a      	mov	r2, r3
 8011514:	89bb      	ldrh	r3, [r7, #12]
 8011516:	4293      	cmp	r3, r2
 8011518:	f040 809f 	bne.w	801165a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	68db      	ldr	r3, [r3, #12]
 8011520:	899b      	ldrh	r3, [r3, #12]
 8011522:	b29b      	uxth	r3, r3
 8011524:	4618      	mov	r0, r3
 8011526:	f7f9 fafd 	bl	800ab24 <lwip_htons>
 801152a:	4603      	mov	r3, r0
 801152c:	b2db      	uxtb	r3, r3
 801152e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011532:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011534:	2300      	movs	r3, #0
 8011536:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011538:	7efb      	ldrb	r3, [r7, #27]
 801153a:	f003 0308 	and.w	r3, r3, #8
 801153e:	2b00      	cmp	r3, #0
 8011540:	d007      	beq.n	8011552 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011542:	7efb      	ldrb	r3, [r7, #27]
 8011544:	f023 0308 	bic.w	r3, r3, #8
 8011548:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801154a:	7ebb      	ldrb	r3, [r7, #26]
 801154c:	f043 0308 	orr.w	r3, r3, #8
 8011550:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011552:	7efb      	ldrb	r3, [r7, #27]
 8011554:	f003 0301 	and.w	r3, r3, #1
 8011558:	2b00      	cmp	r3, #0
 801155a:	d007      	beq.n	801156c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801155c:	7efb      	ldrb	r3, [r7, #27]
 801155e:	f023 0301 	bic.w	r3, r3, #1
 8011562:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011564:	7ebb      	ldrb	r3, [r7, #26]
 8011566:	f043 0301 	orr.w	r3, r3, #1
 801156a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	4618      	mov	r0, r3
 8011574:	f7f9 faeb 	bl	800ab4e <lwip_htonl>
 8011578:	4602      	mov	r2, r0
 801157a:	887b      	ldrh	r3, [r7, #2]
 801157c:	18d1      	adds	r1, r2, r3
 801157e:	7eba      	ldrb	r2, [r7, #26]
 8011580:	7bfb      	ldrb	r3, [r7, #15]
 8011582:	9300      	str	r3, [sp, #0]
 8011584:	460b      	mov	r3, r1
 8011586:	6939      	ldr	r1, [r7, #16]
 8011588:	6878      	ldr	r0, [r7, #4]
 801158a:	f7ff fa4f 	bl	8010a2c <tcp_create_segment>
 801158e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d063      	beq.n	801165e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	4618      	mov	r0, r3
 801159c:	f7fa fedc 	bl	800c358 <pbuf_clen>
 80115a0:	4603      	mov	r3, r0
 80115a2:	461a      	mov	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115aa:	1a9b      	subs	r3, r3, r2
 80115ac:	b29a      	uxth	r2, r3
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	6858      	ldr	r0, [r3, #4]
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	891a      	ldrh	r2, [r3, #8]
 80115be:	89bb      	ldrh	r3, [r7, #12]
 80115c0:	1ad3      	subs	r3, r2, r3
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	4619      	mov	r1, r3
 80115c6:	f7fa fcb9 	bl	800bf3c <pbuf_realloc>
  useg->len -= remainder;
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	891a      	ldrh	r2, [r3, #8]
 80115ce:	89bb      	ldrh	r3, [r7, #12]
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	68db      	ldr	r3, [r3, #12]
 80115dc:	899b      	ldrh	r3, [r3, #12]
 80115de:	b29c      	uxth	r4, r3
 80115e0:	7efb      	ldrb	r3, [r7, #27]
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	4618      	mov	r0, r3
 80115e6:	f7f9 fa9d 	bl	800ab24 <lwip_htons>
 80115ea:	4603      	mov	r3, r0
 80115ec:	461a      	mov	r2, r3
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	4322      	orrs	r2, r4
 80115f4:	b292      	uxth	r2, r2
 80115f6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7fa feab 	bl	800c358 <pbuf_clen>
 8011602:	4603      	mov	r3, r0
 8011604:	461a      	mov	r2, r3
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801160c:	4413      	add	r3, r2
 801160e:	b29a      	uxth	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011616:	69fb      	ldr	r3, [r7, #28]
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	4618      	mov	r0, r3
 801161c:	f7fa fe9c 	bl	800c358 <pbuf_clen>
 8011620:	4603      	mov	r3, r0
 8011622:	461a      	mov	r2, r3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801162a:	4413      	add	r3, r2
 801162c:	b29a      	uxth	r2, r3
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	69fa      	ldr	r2, [r7, #28]
 8011640:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d103      	bne.n	8011652 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2200      	movs	r2, #0
 801164e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011652:	2300      	movs	r3, #0
 8011654:	e016      	b.n	8011684 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011656:	bf00      	nop
 8011658:	e002      	b.n	8011660 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801165a:	bf00      	nop
 801165c:	e000      	b.n	8011660 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801165e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d006      	beq.n	8011674 <tcp_split_unsent_seg+0x25c>
 8011666:	4b09      	ldr	r3, [pc, #36]	; (801168c <tcp_split_unsent_seg+0x274>)
 8011668:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801166c:	490d      	ldr	r1, [pc, #52]	; (80116a4 <tcp_split_unsent_seg+0x28c>)
 801166e:	4809      	ldr	r0, [pc, #36]	; (8011694 <tcp_split_unsent_seg+0x27c>)
 8011670:	f003 fef8 	bl	8015464 <iprintf>
  if (p != NULL) {
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d002      	beq.n	8011680 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801167a:	6938      	ldr	r0, [r7, #16]
 801167c:	f7fa fde4 	bl	800c248 <pbuf_free>
  }

  return ERR_MEM;
 8011680:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011684:	4618      	mov	r0, r3
 8011686:	3724      	adds	r7, #36	; 0x24
 8011688:	46bd      	mov	sp, r7
 801168a:	bd90      	pop	{r4, r7, pc}
 801168c:	08019244 	.word	0x08019244
 8011690:	080195d8 	.word	0x080195d8
 8011694:	08019298 	.word	0x08019298
 8011698:	080195fc 	.word	0x080195fc
 801169c:	08019620 	.word	0x08019620
 80116a0:	08019630 	.word	0x08019630
 80116a4:	08019640 	.word	0x08019640

080116a8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80116a8:	b590      	push	{r4, r7, lr}
 80116aa:	b085      	sub	sp, #20
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d106      	bne.n	80116c4 <tcp_send_fin+0x1c>
 80116b6:	4b21      	ldr	r3, [pc, #132]	; (801173c <tcp_send_fin+0x94>)
 80116b8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80116bc:	4920      	ldr	r1, [pc, #128]	; (8011740 <tcp_send_fin+0x98>)
 80116be:	4821      	ldr	r0, [pc, #132]	; (8011744 <tcp_send_fin+0x9c>)
 80116c0:	f003 fed0 	bl	8015464 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d02e      	beq.n	801172a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116d0:	60fb      	str	r3, [r7, #12]
 80116d2:	e002      	b.n	80116da <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d1f8      	bne.n	80116d4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	899b      	ldrh	r3, [r3, #12]
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7f9 fa1a 	bl	800ab24 <lwip_htons>
 80116f0:	4603      	mov	r3, r0
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	f003 0307 	and.w	r3, r3, #7
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d116      	bne.n	801172a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	68db      	ldr	r3, [r3, #12]
 8011700:	899b      	ldrh	r3, [r3, #12]
 8011702:	b29c      	uxth	r4, r3
 8011704:	2001      	movs	r0, #1
 8011706:	f7f9 fa0d 	bl	800ab24 <lwip_htons>
 801170a:	4603      	mov	r3, r0
 801170c:	461a      	mov	r2, r3
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	4322      	orrs	r2, r4
 8011714:	b292      	uxth	r2, r2
 8011716:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	8b5b      	ldrh	r3, [r3, #26]
 801171c:	f043 0320 	orr.w	r3, r3, #32
 8011720:	b29a      	uxth	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011726:	2300      	movs	r3, #0
 8011728:	e004      	b.n	8011734 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801172a:	2101      	movs	r1, #1
 801172c:	6878      	ldr	r0, [r7, #4]
 801172e:	f000 f80b 	bl	8011748 <tcp_enqueue_flags>
 8011732:	4603      	mov	r3, r0
}
 8011734:	4618      	mov	r0, r3
 8011736:	3714      	adds	r7, #20
 8011738:	46bd      	mov	sp, r7
 801173a:	bd90      	pop	{r4, r7, pc}
 801173c:	08019244 	.word	0x08019244
 8011740:	0801964c 	.word	0x0801964c
 8011744:	08019298 	.word	0x08019298

08011748 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b08a      	sub	sp, #40	; 0x28
 801174c:	af02      	add	r7, sp, #8
 801174e:	6078      	str	r0, [r7, #4]
 8011750:	460b      	mov	r3, r1
 8011752:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011754:	2300      	movs	r3, #0
 8011756:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011758:	2300      	movs	r3, #0
 801175a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801175c:	78fb      	ldrb	r3, [r7, #3]
 801175e:	f003 0303 	and.w	r3, r3, #3
 8011762:	2b00      	cmp	r3, #0
 8011764:	d106      	bne.n	8011774 <tcp_enqueue_flags+0x2c>
 8011766:	4b67      	ldr	r3, [pc, #412]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 8011768:	f240 4211 	movw	r2, #1041	; 0x411
 801176c:	4966      	ldr	r1, [pc, #408]	; (8011908 <tcp_enqueue_flags+0x1c0>)
 801176e:	4867      	ldr	r0, [pc, #412]	; (801190c <tcp_enqueue_flags+0x1c4>)
 8011770:	f003 fe78 	bl	8015464 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d106      	bne.n	8011788 <tcp_enqueue_flags+0x40>
 801177a:	4b62      	ldr	r3, [pc, #392]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 801177c:	f240 4213 	movw	r2, #1043	; 0x413
 8011780:	4963      	ldr	r1, [pc, #396]	; (8011910 <tcp_enqueue_flags+0x1c8>)
 8011782:	4862      	ldr	r0, [pc, #392]	; (801190c <tcp_enqueue_flags+0x1c4>)
 8011784:	f003 fe6e 	bl	8015464 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011788:	78fb      	ldrb	r3, [r7, #3]
 801178a:	f003 0302 	and.w	r3, r3, #2
 801178e:	2b00      	cmp	r3, #0
 8011790:	d001      	beq.n	8011796 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011792:	2301      	movs	r3, #1
 8011794:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011796:	7ffb      	ldrb	r3, [r7, #31]
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	b2db      	uxtb	r3, r3
 801179c:	f003 0304 	and.w	r3, r3, #4
 80117a0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80117a2:	7dfb      	ldrb	r3, [r7, #23]
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80117aa:	4619      	mov	r1, r3
 80117ac:	2036      	movs	r0, #54	; 0x36
 80117ae:	f7fa fa67 	bl	800bc80 <pbuf_alloc>
 80117b2:	6138      	str	r0, [r7, #16]
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d109      	bne.n	80117ce <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	8b5b      	ldrh	r3, [r3, #26]
 80117be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117c2:	b29a      	uxth	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80117c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117cc:	e095      	b.n	80118fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	895a      	ldrh	r2, [r3, #10]
 80117d2:	7dfb      	ldrb	r3, [r7, #23]
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d206      	bcs.n	80117e8 <tcp_enqueue_flags+0xa0>
 80117da:	4b4a      	ldr	r3, [pc, #296]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 80117dc:	f240 4239 	movw	r2, #1081	; 0x439
 80117e0:	494c      	ldr	r1, [pc, #304]	; (8011914 <tcp_enqueue_flags+0x1cc>)
 80117e2:	484a      	ldr	r0, [pc, #296]	; (801190c <tcp_enqueue_flags+0x1c4>)
 80117e4:	f003 fe3e 	bl	8015464 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80117ec:	78fa      	ldrb	r2, [r7, #3]
 80117ee:	7ffb      	ldrb	r3, [r7, #31]
 80117f0:	9300      	str	r3, [sp, #0]
 80117f2:	460b      	mov	r3, r1
 80117f4:	6939      	ldr	r1, [r7, #16]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f7ff f918 	bl	8010a2c <tcp_create_segment>
 80117fc:	60f8      	str	r0, [r7, #12]
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d109      	bne.n	8011818 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	8b5b      	ldrh	r3, [r3, #26]
 8011808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801180c:	b29a      	uxth	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011816:	e070      	b.n	80118fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	f003 0303 	and.w	r3, r3, #3
 8011820:	2b00      	cmp	r3, #0
 8011822:	d006      	beq.n	8011832 <tcp_enqueue_flags+0xea>
 8011824:	4b37      	ldr	r3, [pc, #220]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 8011826:	f240 4242 	movw	r2, #1090	; 0x442
 801182a:	493b      	ldr	r1, [pc, #236]	; (8011918 <tcp_enqueue_flags+0x1d0>)
 801182c:	4837      	ldr	r0, [pc, #220]	; (801190c <tcp_enqueue_flags+0x1c4>)
 801182e:	f003 fe19 	bl	8015464 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	891b      	ldrh	r3, [r3, #8]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d006      	beq.n	8011848 <tcp_enqueue_flags+0x100>
 801183a:	4b32      	ldr	r3, [pc, #200]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 801183c:	f240 4243 	movw	r2, #1091	; 0x443
 8011840:	4936      	ldr	r1, [pc, #216]	; (801191c <tcp_enqueue_flags+0x1d4>)
 8011842:	4832      	ldr	r0, [pc, #200]	; (801190c <tcp_enqueue_flags+0x1c4>)
 8011844:	f003 fe0e 	bl	8015464 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801184c:	2b00      	cmp	r3, #0
 801184e:	d103      	bne.n	8011858 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	66da      	str	r2, [r3, #108]	; 0x6c
 8011856:	e00d      	b.n	8011874 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801185c:	61bb      	str	r3, [r7, #24]
 801185e:	e002      	b.n	8011866 <tcp_enqueue_flags+0x11e>
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	61bb      	str	r3, [r7, #24]
 8011866:	69bb      	ldr	r3, [r7, #24]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d1f8      	bne.n	8011860 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	68fa      	ldr	r2, [r7, #12]
 8011872:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2200      	movs	r2, #0
 8011878:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801187c:	78fb      	ldrb	r3, [r7, #3]
 801187e:	f003 0302 	and.w	r3, r3, #2
 8011882:	2b00      	cmp	r3, #0
 8011884:	d104      	bne.n	8011890 <tcp_enqueue_flags+0x148>
 8011886:	78fb      	ldrb	r3, [r7, #3]
 8011888:	f003 0301 	and.w	r3, r3, #1
 801188c:	2b00      	cmp	r3, #0
 801188e:	d004      	beq.n	801189a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011894:	1c5a      	adds	r2, r3, #1
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801189a:	78fb      	ldrb	r3, [r7, #3]
 801189c:	f003 0301 	and.w	r3, r3, #1
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d006      	beq.n	80118b2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	8b5b      	ldrh	r3, [r3, #26]
 80118a8:	f043 0320 	orr.w	r3, r3, #32
 80118ac:	b29a      	uxth	r2, r3
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fa fd4e 	bl	800c358 <pbuf_clen>
 80118bc:	4603      	mov	r3, r0
 80118be:	461a      	mov	r2, r3
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118c6:	4413      	add	r3, r2
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d00e      	beq.n	80118f8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10a      	bne.n	80118f8 <tcp_enqueue_flags+0x1b0>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d106      	bne.n	80118f8 <tcp_enqueue_flags+0x1b0>
 80118ea:	4b06      	ldr	r3, [pc, #24]	; (8011904 <tcp_enqueue_flags+0x1bc>)
 80118ec:	f240 4265 	movw	r2, #1125	; 0x465
 80118f0:	490b      	ldr	r1, [pc, #44]	; (8011920 <tcp_enqueue_flags+0x1d8>)
 80118f2:	4806      	ldr	r0, [pc, #24]	; (801190c <tcp_enqueue_flags+0x1c4>)
 80118f4:	f003 fdb6 	bl	8015464 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80118f8:	2300      	movs	r3, #0
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3720      	adds	r7, #32
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	08019244 	.word	0x08019244
 8011908:	08019668 	.word	0x08019668
 801190c:	08019298 	.word	0x08019298
 8011910:	080196c0 	.word	0x080196c0
 8011914:	080196e0 	.word	0x080196e0
 8011918:	0801971c 	.word	0x0801971c
 801191c:	08019734 	.word	0x08019734
 8011920:	08019760 	.word	0x08019760

08011924 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011924:	b5b0      	push	{r4, r5, r7, lr}
 8011926:	b08a      	sub	sp, #40	; 0x28
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d106      	bne.n	8011940 <tcp_output+0x1c>
 8011932:	4b9e      	ldr	r3, [pc, #632]	; (8011bac <tcp_output+0x288>)
 8011934:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011938:	499d      	ldr	r1, [pc, #628]	; (8011bb0 <tcp_output+0x28c>)
 801193a:	489e      	ldr	r0, [pc, #632]	; (8011bb4 <tcp_output+0x290>)
 801193c:	f003 fd92 	bl	8015464 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	7d1b      	ldrb	r3, [r3, #20]
 8011944:	2b01      	cmp	r3, #1
 8011946:	d106      	bne.n	8011956 <tcp_output+0x32>
 8011948:	4b98      	ldr	r3, [pc, #608]	; (8011bac <tcp_output+0x288>)
 801194a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801194e:	499a      	ldr	r1, [pc, #616]	; (8011bb8 <tcp_output+0x294>)
 8011950:	4898      	ldr	r0, [pc, #608]	; (8011bb4 <tcp_output+0x290>)
 8011952:	f003 fd87 	bl	8015464 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011956:	4b99      	ldr	r3, [pc, #612]	; (8011bbc <tcp_output+0x298>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	687a      	ldr	r2, [r7, #4]
 801195c:	429a      	cmp	r2, r3
 801195e:	d101      	bne.n	8011964 <tcp_output+0x40>
    return ERR_OK;
 8011960:	2300      	movs	r3, #0
 8011962:	e1ce      	b.n	8011d02 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011970:	4293      	cmp	r3, r2
 8011972:	bf28      	it	cs
 8011974:	4613      	movcs	r3, r2
 8011976:	b29b      	uxth	r3, r3
 8011978:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801197e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011982:	2b00      	cmp	r3, #0
 8011984:	d10b      	bne.n	801199e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	8b5b      	ldrh	r3, [r3, #26]
 801198a:	f003 0302 	and.w	r3, r3, #2
 801198e:	2b00      	cmp	r3, #0
 8011990:	f000 81aa 	beq.w	8011ce8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011994:	6878      	ldr	r0, [r7, #4]
 8011996:	f000 fdcb 	bl	8012530 <tcp_send_empty_ack>
 801199a:	4603      	mov	r3, r0
 801199c:	e1b1      	b.n	8011d02 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801199e:	6879      	ldr	r1, [r7, #4]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	3304      	adds	r3, #4
 80119a4:	461a      	mov	r2, r3
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7ff f824 	bl	80109f4 <tcp_route>
 80119ac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d102      	bne.n	80119ba <tcp_output+0x96>
    return ERR_RTE;
 80119b4:	f06f 0303 	mvn.w	r3, #3
 80119b8:	e1a3      	b.n	8011d02 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d003      	beq.n	80119c8 <tcp_output+0xa4>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d111      	bne.n	80119ec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d002      	beq.n	80119d4 <tcp_output+0xb0>
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	3304      	adds	r3, #4
 80119d2:	e000      	b.n	80119d6 <tcp_output+0xb2>
 80119d4:	2300      	movs	r3, #0
 80119d6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d102      	bne.n	80119e4 <tcp_output+0xc0>
      return ERR_RTE;
 80119de:	f06f 0303 	mvn.w	r3, #3
 80119e2:	e18e      	b.n	8011d02 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	681a      	ldr	r2, [r3, #0]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80119ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7f9 f8ab 	bl	800ab4e <lwip_htonl>
 80119f8:	4602      	mov	r2, r0
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119fe:	1ad3      	subs	r3, r2, r3
 8011a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a02:	8912      	ldrh	r2, [r2, #8]
 8011a04:	4413      	add	r3, r2
 8011a06:	69ba      	ldr	r2, [r7, #24]
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d227      	bcs.n	8011a5c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a12:	461a      	mov	r2, r3
 8011a14:	69bb      	ldr	r3, [r7, #24]
 8011a16:	4293      	cmp	r3, r2
 8011a18:	d114      	bne.n	8011a44 <tcp_output+0x120>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d110      	bne.n	8011a44 <tcp_output+0x120>
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d10b      	bne.n	8011a44 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2201      	movs	r2, #1
 8011a38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	8b5b      	ldrh	r3, [r3, #26]
 8011a48:	f003 0302 	and.w	r3, r3, #2
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	f000 814d 	beq.w	8011cec <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f000 fd6c 	bl	8012530 <tcp_send_empty_ack>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	e152      	b.n	8011d02 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a68:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011a6a:	6a3b      	ldr	r3, [r7, #32]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	f000 811c 	beq.w	8011caa <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011a72:	e002      	b.n	8011a7a <tcp_output+0x156>
 8011a74:	6a3b      	ldr	r3, [r7, #32]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	623b      	str	r3, [r7, #32]
 8011a7a:	6a3b      	ldr	r3, [r7, #32]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d1f8      	bne.n	8011a74 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011a82:	e112      	b.n	8011caa <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a86:	68db      	ldr	r3, [r3, #12]
 8011a88:	899b      	ldrh	r3, [r3, #12]
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7f9 f849 	bl	800ab24 <lwip_htons>
 8011a92:	4603      	mov	r3, r0
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	f003 0304 	and.w	r3, r3, #4
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d006      	beq.n	8011aac <tcp_output+0x188>
 8011a9e:	4b43      	ldr	r3, [pc, #268]	; (8011bac <tcp_output+0x288>)
 8011aa0:	f240 5236 	movw	r2, #1334	; 0x536
 8011aa4:	4946      	ldr	r1, [pc, #280]	; (8011bc0 <tcp_output+0x29c>)
 8011aa6:	4843      	ldr	r0, [pc, #268]	; (8011bb4 <tcp_output+0x290>)
 8011aa8:	f003 fcdc 	bl	8015464 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d01f      	beq.n	8011af4 <tcp_output+0x1d0>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	8b5b      	ldrh	r3, [r3, #26]
 8011ab8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d119      	bne.n	8011af4 <tcp_output+0x1d0>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d00b      	beq.n	8011ae0 <tcp_output+0x1bc>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d110      	bne.n	8011af4 <tcp_output+0x1d0>
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ad6:	891a      	ldrh	r2, [r3, #8]
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d209      	bcs.n	8011af4 <tcp_output+0x1d0>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d004      	beq.n	8011af4 <tcp_output+0x1d0>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011af0:	2b08      	cmp	r3, #8
 8011af2:	d901      	bls.n	8011af8 <tcp_output+0x1d4>
 8011af4:	2301      	movs	r3, #1
 8011af6:	e000      	b.n	8011afa <tcp_output+0x1d6>
 8011af8:	2300      	movs	r3, #0
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d106      	bne.n	8011b0c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	8b5b      	ldrh	r3, [r3, #26]
 8011b02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f000 80e4 	beq.w	8011cd4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	7d1b      	ldrb	r3, [r3, #20]
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	d00d      	beq.n	8011b30 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	899b      	ldrh	r3, [r3, #12]
 8011b1a:	b29c      	uxth	r4, r3
 8011b1c:	2010      	movs	r0, #16
 8011b1e:	f7f9 f801 	bl	800ab24 <lwip_htons>
 8011b22:	4603      	mov	r3, r0
 8011b24:	461a      	mov	r2, r3
 8011b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	4322      	orrs	r2, r4
 8011b2c:	b292      	uxth	r2, r2
 8011b2e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011b30:	697a      	ldr	r2, [r7, #20]
 8011b32:	6879      	ldr	r1, [r7, #4]
 8011b34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b36:	f000 f909 	bl	8011d4c <tcp_output_segment>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d009      	beq.n	8011b5a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	8b5b      	ldrh	r3, [r3, #26]
 8011b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	835a      	strh	r2, [r3, #26]
      return err;
 8011b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b58:	e0d3      	b.n	8011d02 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5c:	681a      	ldr	r2, [r3, #0]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	7d1b      	ldrb	r3, [r3, #20]
 8011b66:	2b02      	cmp	r3, #2
 8011b68:	d006      	beq.n	8011b78 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	8b5b      	ldrh	r3, [r3, #26]
 8011b6e:	f023 0303 	bic.w	r3, r3, #3
 8011b72:	b29a      	uxth	r2, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7f8 ffe5 	bl	800ab4e <lwip_htonl>
 8011b84:	4604      	mov	r4, r0
 8011b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b88:	891b      	ldrh	r3, [r3, #8]
 8011b8a:	461d      	mov	r5, r3
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8e:	68db      	ldr	r3, [r3, #12]
 8011b90:	899b      	ldrh	r3, [r3, #12]
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7f8 ffc5 	bl	800ab24 <lwip_htons>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	f003 0303 	and.w	r3, r3, #3
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d00e      	beq.n	8011bc4 <tcp_output+0x2a0>
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	e00d      	b.n	8011bc6 <tcp_output+0x2a2>
 8011baa:	bf00      	nop
 8011bac:	08019244 	.word	0x08019244
 8011bb0:	08019788 	.word	0x08019788
 8011bb4:	08019298 	.word	0x08019298
 8011bb8:	080197a0 	.word	0x080197a0
 8011bbc:	2000e018 	.word	0x2000e018
 8011bc0:	080197c8 	.word	0x080197c8
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	442b      	add	r3, r5
 8011bc8:	4423      	add	r3, r4
 8011bca:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	da02      	bge.n	8011bde <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	68ba      	ldr	r2, [r7, #8]
 8011bdc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be0:	891b      	ldrh	r3, [r3, #8]
 8011be2:	461c      	mov	r4, r3
 8011be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	899b      	ldrh	r3, [r3, #12]
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7f8 ff99 	bl	800ab24 <lwip_htons>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	b2db      	uxtb	r3, r3
 8011bf6:	f003 0303 	and.w	r3, r3, #3
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d001      	beq.n	8011c02 <tcp_output+0x2de>
 8011bfe:	2301      	movs	r3, #1
 8011c00:	e000      	b.n	8011c04 <tcp_output+0x2e0>
 8011c02:	2300      	movs	r3, #0
 8011c04:	4423      	add	r3, r4
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d049      	beq.n	8011c9e <tcp_output+0x37a>
      seg->next = NULL;
 8011c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d105      	bne.n	8011c24 <tcp_output+0x300>
        pcb->unacked = seg;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c1c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c20:	623b      	str	r3, [r7, #32]
 8011c22:	e03f      	b.n	8011ca4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7f8 ff8f 	bl	800ab4e <lwip_htonl>
 8011c30:	4604      	mov	r4, r0
 8011c32:	6a3b      	ldr	r3, [r7, #32]
 8011c34:	68db      	ldr	r3, [r3, #12]
 8011c36:	685b      	ldr	r3, [r3, #4]
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7f8 ff88 	bl	800ab4e <lwip_htonl>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	1ae3      	subs	r3, r4, r3
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	da24      	bge.n	8011c90 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	3370      	adds	r3, #112	; 0x70
 8011c4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c4c:	e002      	b.n	8011c54 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011c4e:	69fb      	ldr	r3, [r7, #28]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c54:	69fb      	ldr	r3, [r7, #28]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d011      	beq.n	8011c80 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	4618      	mov	r0, r3
 8011c66:	f7f8 ff72 	bl	800ab4e <lwip_htonl>
 8011c6a:	4604      	mov	r4, r0
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6e:	68db      	ldr	r3, [r3, #12]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7f8 ff6b 	bl	800ab4e <lwip_htonl>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	dbe6      	blt.n	8011c4e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c86:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011c88:	69fb      	ldr	r3, [r7, #28]
 8011c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c8c:	601a      	str	r2, [r3, #0]
 8011c8e:	e009      	b.n	8011ca4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011c90:	6a3b      	ldr	r3, [r7, #32]
 8011c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c94:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011c96:	6a3b      	ldr	r3, [r7, #32]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	623b      	str	r3, [r7, #32]
 8011c9c:	e002      	b.n	8011ca4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011c9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ca0:	f7fb feff 	bl	800daa2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ca8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d012      	beq.n	8011cd6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb2:	68db      	ldr	r3, [r3, #12]
 8011cb4:	685b      	ldr	r3, [r3, #4]
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7f8 ff49 	bl	800ab4e <lwip_htonl>
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cc2:	1ad3      	subs	r3, r2, r3
 8011cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cc6:	8912      	ldrh	r2, [r2, #8]
 8011cc8:	4413      	add	r3, r2
  while (seg != NULL &&
 8011cca:	69ba      	ldr	r2, [r7, #24]
 8011ccc:	429a      	cmp	r2, r3
 8011cce:	f4bf aed9 	bcs.w	8011a84 <tcp_output+0x160>
 8011cd2:	e000      	b.n	8011cd6 <tcp_output+0x3b2>
      break;
 8011cd4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d108      	bne.n	8011cf0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011ce6:	e004      	b.n	8011cf2 <tcp_output+0x3ce>
    goto output_done;
 8011ce8:	bf00      	nop
 8011cea:	e002      	b.n	8011cf2 <tcp_output+0x3ce>
    goto output_done;
 8011cec:	bf00      	nop
 8011cee:	e000      	b.n	8011cf2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011cf0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	8b5b      	ldrh	r3, [r3, #26]
 8011cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011d00:	2300      	movs	r3, #0
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3728      	adds	r7, #40	; 0x28
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bdb0      	pop	{r4, r5, r7, pc}
 8011d0a:	bf00      	nop

08011d0c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d106      	bne.n	8011d28 <tcp_output_segment_busy+0x1c>
 8011d1a:	4b09      	ldr	r3, [pc, #36]	; (8011d40 <tcp_output_segment_busy+0x34>)
 8011d1c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011d20:	4908      	ldr	r1, [pc, #32]	; (8011d44 <tcp_output_segment_busy+0x38>)
 8011d22:	4809      	ldr	r0, [pc, #36]	; (8011d48 <tcp_output_segment_busy+0x3c>)
 8011d24:	f003 fb9e 	bl	8015464 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	7b9b      	ldrb	r3, [r3, #14]
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	d001      	beq.n	8011d36 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011d32:	2301      	movs	r3, #1
 8011d34:	e000      	b.n	8011d38 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011d36:	2300      	movs	r3, #0
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	08019244 	.word	0x08019244
 8011d44:	080197e0 	.word	0x080197e0
 8011d48:	08019298 	.word	0x08019298

08011d4c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011d4c:	b5b0      	push	{r4, r5, r7, lr}
 8011d4e:	b08c      	sub	sp, #48	; 0x30
 8011d50:	af04      	add	r7, sp, #16
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d106      	bne.n	8011d6c <tcp_output_segment+0x20>
 8011d5e:	4b63      	ldr	r3, [pc, #396]	; (8011eec <tcp_output_segment+0x1a0>)
 8011d60:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011d64:	4962      	ldr	r1, [pc, #392]	; (8011ef0 <tcp_output_segment+0x1a4>)
 8011d66:	4863      	ldr	r0, [pc, #396]	; (8011ef4 <tcp_output_segment+0x1a8>)
 8011d68:	f003 fb7c 	bl	8015464 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d106      	bne.n	8011d80 <tcp_output_segment+0x34>
 8011d72:	4b5e      	ldr	r3, [pc, #376]	; (8011eec <tcp_output_segment+0x1a0>)
 8011d74:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011d78:	495f      	ldr	r1, [pc, #380]	; (8011ef8 <tcp_output_segment+0x1ac>)
 8011d7a:	485e      	ldr	r0, [pc, #376]	; (8011ef4 <tcp_output_segment+0x1a8>)
 8011d7c:	f003 fb72 	bl	8015464 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d106      	bne.n	8011d94 <tcp_output_segment+0x48>
 8011d86:	4b59      	ldr	r3, [pc, #356]	; (8011eec <tcp_output_segment+0x1a0>)
 8011d88:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011d8c:	495b      	ldr	r1, [pc, #364]	; (8011efc <tcp_output_segment+0x1b0>)
 8011d8e:	4859      	ldr	r0, [pc, #356]	; (8011ef4 <tcp_output_segment+0x1a8>)
 8011d90:	f003 fb68 	bl	8015464 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011d94:	68f8      	ldr	r0, [r7, #12]
 8011d96:	f7ff ffb9 	bl	8011d0c <tcp_output_segment_busy>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d001      	beq.n	8011da4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011da0:	2300      	movs	r3, #0
 8011da2:	e09f      	b.n	8011ee4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	68dc      	ldr	r4, [r3, #12]
 8011dac:	4610      	mov	r0, r2
 8011dae:	f7f8 fece 	bl	800ab4e <lwip_htonl>
 8011db2:	4603      	mov	r3, r0
 8011db4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	68dc      	ldr	r4, [r3, #12]
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	f7f8 feb0 	bl	800ab24 <lwip_htons>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dcc:	68ba      	ldr	r2, [r7, #8]
 8011dce:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011dd0:	441a      	add	r2, r3
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	68db      	ldr	r3, [r3, #12]
 8011dda:	3314      	adds	r3, #20
 8011ddc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	7a9b      	ldrb	r3, [r3, #10]
 8011de2:	f003 0301 	and.w	r3, r3, #1
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d015      	beq.n	8011e16 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	3304      	adds	r3, #4
 8011dee:	461a      	mov	r2, r3
 8011df0:	6879      	ldr	r1, [r7, #4]
 8011df2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011df6:	f7fc fa37 	bl	800e268 <tcp_eff_send_mss_netif>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011dfe:	8b7b      	ldrh	r3, [r7, #26]
 8011e00:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7f8 fea2 	bl	800ab4e <lwip_htonl>
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	69fb      	ldr	r3, [r7, #28]
 8011e0e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	3304      	adds	r3, #4
 8011e14:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	da02      	bge.n	8011e26 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	2200      	movs	r2, #0
 8011e24:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d10c      	bne.n	8011e48 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011e2e:	4b34      	ldr	r3, [pc, #208]	; (8011f00 <tcp_output_segment+0x1b4>)
 8011e30:	681a      	ldr	r2, [r3, #0]
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	68db      	ldr	r3, [r3, #12]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f7f8 fe86 	bl	800ab4e <lwip_htonl>
 8011e42:	4602      	mov	r2, r0
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	68da      	ldr	r2, [r3, #12]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	685b      	ldr	r3, [r3, #4]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	1ad3      	subs	r3, r2, r3
 8011e54:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	8959      	ldrh	r1, [r3, #10]
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	8b3a      	ldrh	r2, [r7, #24]
 8011e62:	1a8a      	subs	r2, r1, r2
 8011e64:	b292      	uxth	r2, r2
 8011e66:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	8919      	ldrh	r1, [r3, #8]
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	8b3a      	ldrh	r2, [r7, #24]
 8011e74:	1a8a      	subs	r2, r1, r2
 8011e76:	b292      	uxth	r2, r2
 8011e78:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	68fa      	ldr	r2, [r7, #12]
 8011e80:	68d2      	ldr	r2, [r2, #12]
 8011e82:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	2200      	movs	r2, #0
 8011e8a:	741a      	strb	r2, [r3, #16]
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	f103 0214 	add.w	r2, r3, #20
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	7a9b      	ldrb	r3, [r3, #10]
 8011e9c:	009b      	lsls	r3, r3, #2
 8011e9e:	f003 0304 	and.w	r3, r3, #4
 8011ea2:	4413      	add	r3, r2
 8011ea4:	69fa      	ldr	r2, [r7, #28]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d006      	beq.n	8011eb8 <tcp_output_segment+0x16c>
 8011eaa:	4b10      	ldr	r3, [pc, #64]	; (8011eec <tcp_output_segment+0x1a0>)
 8011eac:	f240 621c 	movw	r2, #1564	; 0x61c
 8011eb0:	4914      	ldr	r1, [pc, #80]	; (8011f04 <tcp_output_segment+0x1b8>)
 8011eb2:	4810      	ldr	r0, [pc, #64]	; (8011ef4 <tcp_output_segment+0x1a8>)
 8011eb4:	f003 fad6 	bl	8015464 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	6858      	ldr	r0, [r3, #4]
 8011ebc:	68b9      	ldr	r1, [r7, #8]
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	1d1c      	adds	r4, r3, #4
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	7add      	ldrb	r5, [r3, #11]
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	7a9b      	ldrb	r3, [r3, #10]
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	9202      	str	r2, [sp, #8]
 8011ece:	2206      	movs	r2, #6
 8011ed0:	9201      	str	r2, [sp, #4]
 8011ed2:	9300      	str	r3, [sp, #0]
 8011ed4:	462b      	mov	r3, r5
 8011ed6:	4622      	mov	r2, r4
 8011ed8:	f002 fa36 	bl	8014348 <ip4_output_if>
 8011edc:	4603      	mov	r3, r0
 8011ede:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3720      	adds	r7, #32
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bdb0      	pop	{r4, r5, r7, pc}
 8011eec:	08019244 	.word	0x08019244
 8011ef0:	08019808 	.word	0x08019808
 8011ef4:	08019298 	.word	0x08019298
 8011ef8:	08019828 	.word	0x08019828
 8011efc:	08019848 	.word	0x08019848
 8011f00:	2000e008 	.word	0x2000e008
 8011f04:	0801986c 	.word	0x0801986c

08011f08 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011f08:	b5b0      	push	{r4, r5, r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d106      	bne.n	8011f24 <tcp_rexmit_rto_prepare+0x1c>
 8011f16:	4b31      	ldr	r3, [pc, #196]	; (8011fdc <tcp_rexmit_rto_prepare+0xd4>)
 8011f18:	f240 6263 	movw	r2, #1635	; 0x663
 8011f1c:	4930      	ldr	r1, [pc, #192]	; (8011fe0 <tcp_rexmit_rto_prepare+0xd8>)
 8011f1e:	4831      	ldr	r0, [pc, #196]	; (8011fe4 <tcp_rexmit_rto_prepare+0xdc>)
 8011f20:	f003 faa0 	bl	8015464 <iprintf>

  if (pcb->unacked == NULL) {
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d102      	bne.n	8011f32 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011f2c:	f06f 0305 	mvn.w	r3, #5
 8011f30:	e050      	b.n	8011fd4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f36:	60fb      	str	r3, [r7, #12]
 8011f38:	e00b      	b.n	8011f52 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f7ff fee6 	bl	8011d0c <tcp_output_segment_busy>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d002      	beq.n	8011f4c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011f46:	f06f 0305 	mvn.w	r3, #5
 8011f4a:	e043      	b.n	8011fd4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	60fb      	str	r3, [r7, #12]
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d1ef      	bne.n	8011f3a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011f5a:	68f8      	ldr	r0, [r7, #12]
 8011f5c:	f7ff fed6 	bl	8011d0c <tcp_output_segment_busy>
 8011f60:	4603      	mov	r3, r0
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d002      	beq.n	8011f6c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011f66:	f06f 0305 	mvn.w	r3, #5
 8011f6a:	e033      	b.n	8011fd4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	8b5b      	ldrh	r3, [r3, #26]
 8011f86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011f8a:	b29a      	uxth	r2, r3
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7f8 fdd9 	bl	800ab4e <lwip_htonl>
 8011f9c:	4604      	mov	r4, r0
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	891b      	ldrh	r3, [r3, #8]
 8011fa2:	461d      	mov	r5, r3
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	68db      	ldr	r3, [r3, #12]
 8011fa8:	899b      	ldrh	r3, [r3, #12]
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7f8 fdb9 	bl	800ab24 <lwip_htons>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	b2db      	uxtb	r3, r3
 8011fb6:	f003 0303 	and.w	r3, r3, #3
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d001      	beq.n	8011fc2 <tcp_rexmit_rto_prepare+0xba>
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e000      	b.n	8011fc4 <tcp_rexmit_rto_prepare+0xbc>
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	442b      	add	r3, r5
 8011fc6:	18e2      	adds	r2, r4, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011fd2:	2300      	movs	r3, #0
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3710      	adds	r7, #16
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bdb0      	pop	{r4, r5, r7, pc}
 8011fdc:	08019244 	.word	0x08019244
 8011fe0:	08019880 	.word	0x08019880
 8011fe4:	08019298 	.word	0x08019298

08011fe8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b082      	sub	sp, #8
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d106      	bne.n	8012004 <tcp_rexmit_rto_commit+0x1c>
 8011ff6:	4b0d      	ldr	r3, [pc, #52]	; (801202c <tcp_rexmit_rto_commit+0x44>)
 8011ff8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011ffc:	490c      	ldr	r1, [pc, #48]	; (8012030 <tcp_rexmit_rto_commit+0x48>)
 8011ffe:	480d      	ldr	r0, [pc, #52]	; (8012034 <tcp_rexmit_rto_commit+0x4c>)
 8012000:	f003 fa30 	bl	8015464 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801200a:	2bff      	cmp	r3, #255	; 0xff
 801200c:	d007      	beq.n	801201e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012014:	3301      	adds	r3, #1
 8012016:	b2da      	uxtb	r2, r3
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f7ff fc80 	bl	8011924 <tcp_output>
}
 8012024:	bf00      	nop
 8012026:	3708      	adds	r7, #8
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}
 801202c:	08019244 	.word	0x08019244
 8012030:	080198a4 	.word	0x080198a4
 8012034:	08019298 	.word	0x08019298

08012038 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b082      	sub	sp, #8
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d106      	bne.n	8012054 <tcp_rexmit_rto+0x1c>
 8012046:	4b0a      	ldr	r3, [pc, #40]	; (8012070 <tcp_rexmit_rto+0x38>)
 8012048:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801204c:	4909      	ldr	r1, [pc, #36]	; (8012074 <tcp_rexmit_rto+0x3c>)
 801204e:	480a      	ldr	r0, [pc, #40]	; (8012078 <tcp_rexmit_rto+0x40>)
 8012050:	f003 fa08 	bl	8015464 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ff ff57 	bl	8011f08 <tcp_rexmit_rto_prepare>
 801205a:	4603      	mov	r3, r0
 801205c:	2b00      	cmp	r3, #0
 801205e:	d102      	bne.n	8012066 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f7ff ffc1 	bl	8011fe8 <tcp_rexmit_rto_commit>
  }
}
 8012066:	bf00      	nop
 8012068:	3708      	adds	r7, #8
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}
 801206e:	bf00      	nop
 8012070:	08019244 	.word	0x08019244
 8012074:	080198c8 	.word	0x080198c8
 8012078:	08019298 	.word	0x08019298

0801207c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801207c:	b590      	push	{r4, r7, lr}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d106      	bne.n	8012098 <tcp_rexmit+0x1c>
 801208a:	4b2f      	ldr	r3, [pc, #188]	; (8012148 <tcp_rexmit+0xcc>)
 801208c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012090:	492e      	ldr	r1, [pc, #184]	; (801214c <tcp_rexmit+0xd0>)
 8012092:	482f      	ldr	r0, [pc, #188]	; (8012150 <tcp_rexmit+0xd4>)
 8012094:	f003 f9e6 	bl	8015464 <iprintf>

  if (pcb->unacked == NULL) {
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801209c:	2b00      	cmp	r3, #0
 801209e:	d102      	bne.n	80120a6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80120a0:	f06f 0305 	mvn.w	r3, #5
 80120a4:	e04c      	b.n	8012140 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120aa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80120ac:	68b8      	ldr	r0, [r7, #8]
 80120ae:	f7ff fe2d 	bl	8011d0c <tcp_output_segment_busy>
 80120b2:	4603      	mov	r3, r0
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d002      	beq.n	80120be <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80120b8:	f06f 0305 	mvn.w	r3, #5
 80120bc:	e040      	b.n	8012140 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	681a      	ldr	r2, [r3, #0]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	336c      	adds	r3, #108	; 0x6c
 80120ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80120cc:	e002      	b.n	80120d4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d011      	beq.n	8012100 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7f8 fd32 	bl	800ab4e <lwip_htonl>
 80120ea:	4604      	mov	r4, r0
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	68db      	ldr	r3, [r3, #12]
 80120f0:	685b      	ldr	r3, [r3, #4]
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7f8 fd2b 	bl	800ab4e <lwip_htonl>
 80120f8:	4603      	mov	r3, r0
 80120fa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	dbe6      	blt.n	80120ce <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	681a      	ldr	r2, [r3, #0]
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	68ba      	ldr	r2, [r7, #8]
 801210c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d103      	bne.n	801211e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2200      	movs	r2, #0
 801211a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012124:	2bff      	cmp	r3, #255	; 0xff
 8012126:	d007      	beq.n	8012138 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801212e:	3301      	adds	r3, #1
 8012130:	b2da      	uxtb	r2, r3
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2200      	movs	r2, #0
 801213c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801213e:	2300      	movs	r3, #0
}
 8012140:	4618      	mov	r0, r3
 8012142:	3714      	adds	r7, #20
 8012144:	46bd      	mov	sp, r7
 8012146:	bd90      	pop	{r4, r7, pc}
 8012148:	08019244 	.word	0x08019244
 801214c:	080198e4 	.word	0x080198e4
 8012150:	08019298 	.word	0x08019298

08012154 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d106      	bne.n	8012170 <tcp_rexmit_fast+0x1c>
 8012162:	4b2a      	ldr	r3, [pc, #168]	; (801220c <tcp_rexmit_fast+0xb8>)
 8012164:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012168:	4929      	ldr	r1, [pc, #164]	; (8012210 <tcp_rexmit_fast+0xbc>)
 801216a:	482a      	ldr	r0, [pc, #168]	; (8012214 <tcp_rexmit_fast+0xc0>)
 801216c:	f003 f97a 	bl	8015464 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012174:	2b00      	cmp	r3, #0
 8012176:	d044      	beq.n	8012202 <tcp_rexmit_fast+0xae>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	8b5b      	ldrh	r3, [r3, #26]
 801217c:	f003 0304 	and.w	r3, r3, #4
 8012180:	2b00      	cmp	r3, #0
 8012182:	d13e      	bne.n	8012202 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f7ff ff79 	bl	801207c <tcp_rexmit>
 801218a:	4603      	mov	r3, r0
 801218c:	2b00      	cmp	r3, #0
 801218e:	d138      	bne.n	8012202 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801219c:	4293      	cmp	r3, r2
 801219e:	bf28      	it	cs
 80121a0:	4613      	movcs	r3, r2
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	0fda      	lsrs	r2, r3, #31
 80121a6:	4413      	add	r3, r2
 80121a8:	105b      	asrs	r3, r3, #1
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80121b8:	461a      	mov	r2, r3
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121be:	005b      	lsls	r3, r3, #1
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d206      	bcs.n	80121d2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121c8:	005b      	lsls	r3, r3, #1
 80121ca:	b29a      	uxth	r2, r3
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121dc:	4619      	mov	r1, r3
 80121de:	0049      	lsls	r1, r1, #1
 80121e0:	440b      	add	r3, r1
 80121e2:	b29b      	uxth	r3, r3
 80121e4:	4413      	add	r3, r2
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	8b5b      	ldrh	r3, [r3, #26]
 80121f2:	f043 0304 	orr.w	r3, r3, #4
 80121f6:	b29a      	uxth	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2200      	movs	r2, #0
 8012200:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012202:	bf00      	nop
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	08019244 	.word	0x08019244
 8012210:	080198fc 	.word	0x080198fc
 8012214:	08019298 	.word	0x08019298

08012218 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b086      	sub	sp, #24
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	607b      	str	r3, [r7, #4]
 8012222:	460b      	mov	r3, r1
 8012224:	817b      	strh	r3, [r7, #10]
 8012226:	4613      	mov	r3, r2
 8012228:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801222a:	897a      	ldrh	r2, [r7, #10]
 801222c:	893b      	ldrh	r3, [r7, #8]
 801222e:	4413      	add	r3, r2
 8012230:	b29b      	uxth	r3, r3
 8012232:	3314      	adds	r3, #20
 8012234:	b29b      	uxth	r3, r3
 8012236:	f44f 7220 	mov.w	r2, #640	; 0x280
 801223a:	4619      	mov	r1, r3
 801223c:	2022      	movs	r0, #34	; 0x22
 801223e:	f7f9 fd1f 	bl	800bc80 <pbuf_alloc>
 8012242:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d04d      	beq.n	80122e6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801224a:	897b      	ldrh	r3, [r7, #10]
 801224c:	3313      	adds	r3, #19
 801224e:	697a      	ldr	r2, [r7, #20]
 8012250:	8952      	ldrh	r2, [r2, #10]
 8012252:	4293      	cmp	r3, r2
 8012254:	db06      	blt.n	8012264 <tcp_output_alloc_header_common+0x4c>
 8012256:	4b26      	ldr	r3, [pc, #152]	; (80122f0 <tcp_output_alloc_header_common+0xd8>)
 8012258:	f240 7223 	movw	r2, #1827	; 0x723
 801225c:	4925      	ldr	r1, [pc, #148]	; (80122f4 <tcp_output_alloc_header_common+0xdc>)
 801225e:	4826      	ldr	r0, [pc, #152]	; (80122f8 <tcp_output_alloc_header_common+0xe0>)
 8012260:	f003 f900 	bl	8015464 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012264:	697b      	ldr	r3, [r7, #20]
 8012266:	685b      	ldr	r3, [r3, #4]
 8012268:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801226a:	8c3b      	ldrh	r3, [r7, #32]
 801226c:	4618      	mov	r0, r3
 801226e:	f7f8 fc59 	bl	800ab24 <lwip_htons>
 8012272:	4603      	mov	r3, r0
 8012274:	461a      	mov	r2, r3
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801227a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801227c:	4618      	mov	r0, r3
 801227e:	f7f8 fc51 	bl	800ab24 <lwip_htons>
 8012282:	4603      	mov	r3, r0
 8012284:	461a      	mov	r2, r3
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	687a      	ldr	r2, [r7, #4]
 801228e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012290:	68f8      	ldr	r0, [r7, #12]
 8012292:	f7f8 fc5c 	bl	800ab4e <lwip_htonl>
 8012296:	4602      	mov	r2, r0
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801229c:	897b      	ldrh	r3, [r7, #10]
 801229e:	089b      	lsrs	r3, r3, #2
 80122a0:	b29b      	uxth	r3, r3
 80122a2:	3305      	adds	r3, #5
 80122a4:	b29b      	uxth	r3, r3
 80122a6:	031b      	lsls	r3, r3, #12
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	4313      	orrs	r3, r2
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7f8 fc35 	bl	800ab24 <lwip_htons>
 80122ba:	4603      	mov	r3, r0
 80122bc:	461a      	mov	r2, r3
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80122c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7f8 fc2d 	bl	800ab24 <lwip_htons>
 80122ca:	4603      	mov	r3, r0
 80122cc:	461a      	mov	r2, r3
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	2200      	movs	r2, #0
 80122d6:	741a      	strb	r2, [r3, #16]
 80122d8:	2200      	movs	r2, #0
 80122da:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	2200      	movs	r2, #0
 80122e0:	749a      	strb	r2, [r3, #18]
 80122e2:	2200      	movs	r2, #0
 80122e4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80122e6:	697b      	ldr	r3, [r7, #20]
}
 80122e8:	4618      	mov	r0, r3
 80122ea:	3718      	adds	r7, #24
 80122ec:	46bd      	mov	sp, r7
 80122ee:	bd80      	pop	{r7, pc}
 80122f0:	08019244 	.word	0x08019244
 80122f4:	0801991c 	.word	0x0801991c
 80122f8:	08019298 	.word	0x08019298

080122fc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80122fc:	b5b0      	push	{r4, r5, r7, lr}
 80122fe:	b08a      	sub	sp, #40	; 0x28
 8012300:	af04      	add	r7, sp, #16
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	607b      	str	r3, [r7, #4]
 8012306:	460b      	mov	r3, r1
 8012308:	817b      	strh	r3, [r7, #10]
 801230a:	4613      	mov	r3, r2
 801230c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d106      	bne.n	8012322 <tcp_output_alloc_header+0x26>
 8012314:	4b15      	ldr	r3, [pc, #84]	; (801236c <tcp_output_alloc_header+0x70>)
 8012316:	f240 7242 	movw	r2, #1858	; 0x742
 801231a:	4915      	ldr	r1, [pc, #84]	; (8012370 <tcp_output_alloc_header+0x74>)
 801231c:	4815      	ldr	r0, [pc, #84]	; (8012374 <tcp_output_alloc_header+0x78>)
 801231e:	f003 f8a1 	bl	8015464 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	8adb      	ldrh	r3, [r3, #22]
 801232a:	68fa      	ldr	r2, [r7, #12]
 801232c:	8b12      	ldrh	r2, [r2, #24]
 801232e:	68f9      	ldr	r1, [r7, #12]
 8012330:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012332:	893d      	ldrh	r5, [r7, #8]
 8012334:	897c      	ldrh	r4, [r7, #10]
 8012336:	9103      	str	r1, [sp, #12]
 8012338:	2110      	movs	r1, #16
 801233a:	9102      	str	r1, [sp, #8]
 801233c:	9201      	str	r2, [sp, #4]
 801233e:	9300      	str	r3, [sp, #0]
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	462a      	mov	r2, r5
 8012344:	4621      	mov	r1, r4
 8012346:	f7ff ff67 	bl	8012218 <tcp_output_alloc_header_common>
 801234a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801234c:	697b      	ldr	r3, [r7, #20]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d006      	beq.n	8012360 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012356:	68fa      	ldr	r2, [r7, #12]
 8012358:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801235a:	441a      	add	r2, r3
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012360:	697b      	ldr	r3, [r7, #20]
}
 8012362:	4618      	mov	r0, r3
 8012364:	3718      	adds	r7, #24
 8012366:	46bd      	mov	sp, r7
 8012368:	bdb0      	pop	{r4, r5, r7, pc}
 801236a:	bf00      	nop
 801236c:	08019244 	.word	0x08019244
 8012370:	0801994c 	.word	0x0801994c
 8012374:	08019298 	.word	0x08019298

08012378 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b088      	sub	sp, #32
 801237c:	af00      	add	r7, sp, #0
 801237e:	60f8      	str	r0, [r7, #12]
 8012380:	60b9      	str	r1, [r7, #8]
 8012382:	4611      	mov	r1, r2
 8012384:	461a      	mov	r2, r3
 8012386:	460b      	mov	r3, r1
 8012388:	71fb      	strb	r3, [r7, #7]
 801238a:	4613      	mov	r3, r2
 801238c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d106      	bne.n	80123a6 <tcp_output_fill_options+0x2e>
 8012398:	4b13      	ldr	r3, [pc, #76]	; (80123e8 <tcp_output_fill_options+0x70>)
 801239a:	f240 7256 	movw	r2, #1878	; 0x756
 801239e:	4913      	ldr	r1, [pc, #76]	; (80123ec <tcp_output_fill_options+0x74>)
 80123a0:	4813      	ldr	r0, [pc, #76]	; (80123f0 <tcp_output_fill_options+0x78>)
 80123a2:	f003 f85f 	bl	8015464 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80123ac:	69bb      	ldr	r3, [r7, #24]
 80123ae:	3314      	adds	r3, #20
 80123b0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80123b2:	69bb      	ldr	r3, [r7, #24]
 80123b4:	f103 0214 	add.w	r2, r3, #20
 80123b8:	8bfb      	ldrh	r3, [r7, #30]
 80123ba:	009b      	lsls	r3, r3, #2
 80123bc:	4619      	mov	r1, r3
 80123be:	79fb      	ldrb	r3, [r7, #7]
 80123c0:	009b      	lsls	r3, r3, #2
 80123c2:	f003 0304 	and.w	r3, r3, #4
 80123c6:	440b      	add	r3, r1
 80123c8:	4413      	add	r3, r2
 80123ca:	697a      	ldr	r2, [r7, #20]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d006      	beq.n	80123de <tcp_output_fill_options+0x66>
 80123d0:	4b05      	ldr	r3, [pc, #20]	; (80123e8 <tcp_output_fill_options+0x70>)
 80123d2:	f240 7275 	movw	r2, #1909	; 0x775
 80123d6:	4907      	ldr	r1, [pc, #28]	; (80123f4 <tcp_output_fill_options+0x7c>)
 80123d8:	4805      	ldr	r0, [pc, #20]	; (80123f0 <tcp_output_fill_options+0x78>)
 80123da:	f003 f843 	bl	8015464 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80123de:	bf00      	nop
 80123e0:	3720      	adds	r7, #32
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	08019244 	.word	0x08019244
 80123ec:	08019974 	.word	0x08019974
 80123f0:	08019298 	.word	0x08019298
 80123f4:	0801986c 	.word	0x0801986c

080123f8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b08a      	sub	sp, #40	; 0x28
 80123fc:	af04      	add	r7, sp, #16
 80123fe:	60f8      	str	r0, [r7, #12]
 8012400:	60b9      	str	r1, [r7, #8]
 8012402:	607a      	str	r2, [r7, #4]
 8012404:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d106      	bne.n	801241a <tcp_output_control_segment+0x22>
 801240c:	4b1c      	ldr	r3, [pc, #112]	; (8012480 <tcp_output_control_segment+0x88>)
 801240e:	f240 7287 	movw	r2, #1927	; 0x787
 8012412:	491c      	ldr	r1, [pc, #112]	; (8012484 <tcp_output_control_segment+0x8c>)
 8012414:	481c      	ldr	r0, [pc, #112]	; (8012488 <tcp_output_control_segment+0x90>)
 8012416:	f003 f825 	bl	8015464 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801241a:	683a      	ldr	r2, [r7, #0]
 801241c:	6879      	ldr	r1, [r7, #4]
 801241e:	68f8      	ldr	r0, [r7, #12]
 8012420:	f7fe fae8 	bl	80109f4 <tcp_route>
 8012424:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012426:	693b      	ldr	r3, [r7, #16]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d102      	bne.n	8012432 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801242c:	23fc      	movs	r3, #252	; 0xfc
 801242e:	75fb      	strb	r3, [r7, #23]
 8012430:	e01c      	b.n	801246c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	2b00      	cmp	r3, #0
 8012436:	d006      	beq.n	8012446 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	7adb      	ldrb	r3, [r3, #11]
 801243c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	7a9b      	ldrb	r3, [r3, #10]
 8012442:	757b      	strb	r3, [r7, #21]
 8012444:	e003      	b.n	801244e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012446:	23ff      	movs	r3, #255	; 0xff
 8012448:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801244a:	2300      	movs	r3, #0
 801244c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801244e:	7dba      	ldrb	r2, [r7, #22]
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	9302      	str	r3, [sp, #8]
 8012454:	2306      	movs	r3, #6
 8012456:	9301      	str	r3, [sp, #4]
 8012458:	7d7b      	ldrb	r3, [r7, #21]
 801245a:	9300      	str	r3, [sp, #0]
 801245c:	4613      	mov	r3, r2
 801245e:	683a      	ldr	r2, [r7, #0]
 8012460:	6879      	ldr	r1, [r7, #4]
 8012462:	68b8      	ldr	r0, [r7, #8]
 8012464:	f001 ff70 	bl	8014348 <ip4_output_if>
 8012468:	4603      	mov	r3, r0
 801246a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801246c:	68b8      	ldr	r0, [r7, #8]
 801246e:	f7f9 feeb 	bl	800c248 <pbuf_free>
  return err;
 8012472:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012476:	4618      	mov	r0, r3
 8012478:	3718      	adds	r7, #24
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
 801247e:	bf00      	nop
 8012480:	08019244 	.word	0x08019244
 8012484:	0801999c 	.word	0x0801999c
 8012488:	08019298 	.word	0x08019298

0801248c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801248c:	b590      	push	{r4, r7, lr}
 801248e:	b08b      	sub	sp, #44	; 0x2c
 8012490:	af04      	add	r7, sp, #16
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	607a      	str	r2, [r7, #4]
 8012498:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801249a:	683b      	ldr	r3, [r7, #0]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d106      	bne.n	80124ae <tcp_rst+0x22>
 80124a0:	4b1f      	ldr	r3, [pc, #124]	; (8012520 <tcp_rst+0x94>)
 80124a2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80124a6:	491f      	ldr	r1, [pc, #124]	; (8012524 <tcp_rst+0x98>)
 80124a8:	481f      	ldr	r0, [pc, #124]	; (8012528 <tcp_rst+0x9c>)
 80124aa:	f002 ffdb 	bl	8015464 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80124ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d106      	bne.n	80124c2 <tcp_rst+0x36>
 80124b4:	4b1a      	ldr	r3, [pc, #104]	; (8012520 <tcp_rst+0x94>)
 80124b6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80124ba:	491c      	ldr	r1, [pc, #112]	; (801252c <tcp_rst+0xa0>)
 80124bc:	481a      	ldr	r0, [pc, #104]	; (8012528 <tcp_rst+0x9c>)
 80124be:	f002 ffd1 	bl	8015464 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124c2:	2300      	movs	r3, #0
 80124c4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80124c6:	f246 0308 	movw	r3, #24584	; 0x6008
 80124ca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80124cc:	7dfb      	ldrb	r3, [r7, #23]
 80124ce:	b29c      	uxth	r4, r3
 80124d0:	68b8      	ldr	r0, [r7, #8]
 80124d2:	f7f8 fb3c 	bl	800ab4e <lwip_htonl>
 80124d6:	4602      	mov	r2, r0
 80124d8:	8abb      	ldrh	r3, [r7, #20]
 80124da:	9303      	str	r3, [sp, #12]
 80124dc:	2314      	movs	r3, #20
 80124de:	9302      	str	r3, [sp, #8]
 80124e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80124e2:	9301      	str	r3, [sp, #4]
 80124e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80124e6:	9300      	str	r3, [sp, #0]
 80124e8:	4613      	mov	r3, r2
 80124ea:	2200      	movs	r2, #0
 80124ec:	4621      	mov	r1, r4
 80124ee:	6878      	ldr	r0, [r7, #4]
 80124f0:	f7ff fe92 	bl	8012218 <tcp_output_alloc_header_common>
 80124f4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80124f6:	693b      	ldr	r3, [r7, #16]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d00c      	beq.n	8012516 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80124fc:	7dfb      	ldrb	r3, [r7, #23]
 80124fe:	2200      	movs	r2, #0
 8012500:	6939      	ldr	r1, [r7, #16]
 8012502:	68f8      	ldr	r0, [r7, #12]
 8012504:	f7ff ff38 	bl	8012378 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	6939      	ldr	r1, [r7, #16]
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f7ff ff72 	bl	80123f8 <tcp_output_control_segment>
 8012514:	e000      	b.n	8012518 <tcp_rst+0x8c>
    return;
 8012516:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012518:	371c      	adds	r7, #28
 801251a:	46bd      	mov	sp, r7
 801251c:	bd90      	pop	{r4, r7, pc}
 801251e:	bf00      	nop
 8012520:	08019244 	.word	0x08019244
 8012524:	080199c8 	.word	0x080199c8
 8012528:	08019298 	.word	0x08019298
 801252c:	080199e4 	.word	0x080199e4

08012530 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012530:	b590      	push	{r4, r7, lr}
 8012532:	b087      	sub	sp, #28
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012538:	2300      	movs	r3, #0
 801253a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801253c:	2300      	movs	r3, #0
 801253e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d106      	bne.n	8012554 <tcp_send_empty_ack+0x24>
 8012546:	4b28      	ldr	r3, [pc, #160]	; (80125e8 <tcp_send_empty_ack+0xb8>)
 8012548:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801254c:	4927      	ldr	r1, [pc, #156]	; (80125ec <tcp_send_empty_ack+0xbc>)
 801254e:	4828      	ldr	r0, [pc, #160]	; (80125f0 <tcp_send_empty_ack+0xc0>)
 8012550:	f002 ff88 	bl	8015464 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012554:	7dfb      	ldrb	r3, [r7, #23]
 8012556:	009b      	lsls	r3, r3, #2
 8012558:	b2db      	uxtb	r3, r3
 801255a:	f003 0304 	and.w	r3, r3, #4
 801255e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012560:	7d7b      	ldrb	r3, [r7, #21]
 8012562:	b29c      	uxth	r4, r3
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012568:	4618      	mov	r0, r3
 801256a:	f7f8 faf0 	bl	800ab4e <lwip_htonl>
 801256e:	4603      	mov	r3, r0
 8012570:	2200      	movs	r2, #0
 8012572:	4621      	mov	r1, r4
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f7ff fec1 	bl	80122fc <tcp_output_alloc_header>
 801257a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d109      	bne.n	8012596 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	8b5b      	ldrh	r3, [r3, #26]
 8012586:	f043 0303 	orr.w	r3, r3, #3
 801258a:	b29a      	uxth	r2, r3
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012590:	f06f 0301 	mvn.w	r3, #1
 8012594:	e023      	b.n	80125de <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012596:	7dbb      	ldrb	r3, [r7, #22]
 8012598:	7dfa      	ldrb	r2, [r7, #23]
 801259a:	6939      	ldr	r1, [r7, #16]
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7ff feeb 	bl	8012378 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	3304      	adds	r3, #4
 80125a8:	6939      	ldr	r1, [r7, #16]
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f7ff ff24 	bl	80123f8 <tcp_output_control_segment>
 80125b0:	4603      	mov	r3, r0
 80125b2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80125b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d007      	beq.n	80125cc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	8b5b      	ldrh	r3, [r3, #26]
 80125c0:	f043 0303 	orr.w	r3, r3, #3
 80125c4:	b29a      	uxth	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	835a      	strh	r2, [r3, #26]
 80125ca:	e006      	b.n	80125da <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	8b5b      	ldrh	r3, [r3, #26]
 80125d0:	f023 0303 	bic.w	r3, r3, #3
 80125d4:	b29a      	uxth	r2, r3
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80125da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80125de:	4618      	mov	r0, r3
 80125e0:	371c      	adds	r7, #28
 80125e2:	46bd      	mov	sp, r7
 80125e4:	bd90      	pop	{r4, r7, pc}
 80125e6:	bf00      	nop
 80125e8:	08019244 	.word	0x08019244
 80125ec:	08019a00 	.word	0x08019a00
 80125f0:	08019298 	.word	0x08019298

080125f4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80125f4:	b590      	push	{r4, r7, lr}
 80125f6:	b087      	sub	sp, #28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80125fc:	2300      	movs	r3, #0
 80125fe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d106      	bne.n	8012614 <tcp_keepalive+0x20>
 8012606:	4b18      	ldr	r3, [pc, #96]	; (8012668 <tcp_keepalive+0x74>)
 8012608:	f640 0224 	movw	r2, #2084	; 0x824
 801260c:	4917      	ldr	r1, [pc, #92]	; (801266c <tcp_keepalive+0x78>)
 801260e:	4818      	ldr	r0, [pc, #96]	; (8012670 <tcp_keepalive+0x7c>)
 8012610:	f002 ff28 	bl	8015464 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012614:	7dfb      	ldrb	r3, [r7, #23]
 8012616:	b29c      	uxth	r4, r3
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801261c:	3b01      	subs	r3, #1
 801261e:	4618      	mov	r0, r3
 8012620:	f7f8 fa95 	bl	800ab4e <lwip_htonl>
 8012624:	4603      	mov	r3, r0
 8012626:	2200      	movs	r2, #0
 8012628:	4621      	mov	r1, r4
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f7ff fe66 	bl	80122fc <tcp_output_alloc_header>
 8012630:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d102      	bne.n	801263e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012638:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801263c:	e010      	b.n	8012660 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801263e:	7dfb      	ldrb	r3, [r7, #23]
 8012640:	2200      	movs	r2, #0
 8012642:	6939      	ldr	r1, [r7, #16]
 8012644:	6878      	ldr	r0, [r7, #4]
 8012646:	f7ff fe97 	bl	8012378 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801264a:	687a      	ldr	r2, [r7, #4]
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	3304      	adds	r3, #4
 8012650:	6939      	ldr	r1, [r7, #16]
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f7ff fed0 	bl	80123f8 <tcp_output_control_segment>
 8012658:	4603      	mov	r3, r0
 801265a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801265c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012660:	4618      	mov	r0, r3
 8012662:	371c      	adds	r7, #28
 8012664:	46bd      	mov	sp, r7
 8012666:	bd90      	pop	{r4, r7, pc}
 8012668:	08019244 	.word	0x08019244
 801266c:	08019a20 	.word	0x08019a20
 8012670:	08019298 	.word	0x08019298

08012674 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012674:	b590      	push	{r4, r7, lr}
 8012676:	b08b      	sub	sp, #44	; 0x2c
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801267c:	2300      	movs	r3, #0
 801267e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d106      	bne.n	8012696 <tcp_zero_window_probe+0x22>
 8012688:	4b4c      	ldr	r3, [pc, #304]	; (80127bc <tcp_zero_window_probe+0x148>)
 801268a:	f640 024f 	movw	r2, #2127	; 0x84f
 801268e:	494c      	ldr	r1, [pc, #304]	; (80127c0 <tcp_zero_window_probe+0x14c>)
 8012690:	484c      	ldr	r0, [pc, #304]	; (80127c4 <tcp_zero_window_probe+0x150>)
 8012692:	f002 fee7 	bl	8015464 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801269a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801269c:	6a3b      	ldr	r3, [r7, #32]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d101      	bne.n	80126a6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80126a2:	2300      	movs	r3, #0
 80126a4:	e086      	b.n	80127b4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126ac:	2bff      	cmp	r3, #255	; 0xff
 80126ae:	d007      	beq.n	80126c0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126b6:	3301      	adds	r3, #1
 80126b8:	b2da      	uxtb	r2, r3
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80126c0:	6a3b      	ldr	r3, [r7, #32]
 80126c2:	68db      	ldr	r3, [r3, #12]
 80126c4:	899b      	ldrh	r3, [r3, #12]
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7f8 fa2b 	bl	800ab24 <lwip_htons>
 80126ce:	4603      	mov	r3, r0
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	f003 0301 	and.w	r3, r3, #1
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d005      	beq.n	80126e6 <tcp_zero_window_probe+0x72>
 80126da:	6a3b      	ldr	r3, [r7, #32]
 80126dc:	891b      	ldrh	r3, [r3, #8]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d101      	bne.n	80126e6 <tcp_zero_window_probe+0x72>
 80126e2:	2301      	movs	r3, #1
 80126e4:	e000      	b.n	80126e8 <tcp_zero_window_probe+0x74>
 80126e6:	2300      	movs	r3, #0
 80126e8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80126ea:	7ffb      	ldrb	r3, [r7, #31]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	bf0c      	ite	eq
 80126f0:	2301      	moveq	r3, #1
 80126f2:	2300      	movne	r3, #0
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80126f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126fc:	b299      	uxth	r1, r3
 80126fe:	6a3b      	ldr	r3, [r7, #32]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	8bba      	ldrh	r2, [r7, #28]
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f7ff fdf8 	bl	80122fc <tcp_output_alloc_header>
 801270c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801270e:	69bb      	ldr	r3, [r7, #24]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d102      	bne.n	801271a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012718:	e04c      	b.n	80127b4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801271a:	69bb      	ldr	r3, [r7, #24]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012720:	7ffb      	ldrb	r3, [r7, #31]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d011      	beq.n	801274a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	899b      	ldrh	r3, [r3, #12]
 801272a:	b29b      	uxth	r3, r3
 801272c:	b21b      	sxth	r3, r3
 801272e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012732:	b21c      	sxth	r4, r3
 8012734:	2011      	movs	r0, #17
 8012736:	f7f8 f9f5 	bl	800ab24 <lwip_htons>
 801273a:	4603      	mov	r3, r0
 801273c:	b21b      	sxth	r3, r3
 801273e:	4323      	orrs	r3, r4
 8012740:	b21b      	sxth	r3, r3
 8012742:	b29a      	uxth	r2, r3
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	819a      	strh	r2, [r3, #12]
 8012748:	e010      	b.n	801276c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801274a:	69bb      	ldr	r3, [r7, #24]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	3314      	adds	r3, #20
 8012750:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012752:	6a3b      	ldr	r3, [r7, #32]
 8012754:	6858      	ldr	r0, [r3, #4]
 8012756:	6a3b      	ldr	r3, [r7, #32]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	891a      	ldrh	r2, [r3, #8]
 801275c:	6a3b      	ldr	r3, [r7, #32]
 801275e:	891b      	ldrh	r3, [r3, #8]
 8012760:	1ad3      	subs	r3, r2, r3
 8012762:	b29b      	uxth	r3, r3
 8012764:	2201      	movs	r2, #1
 8012766:	6939      	ldr	r1, [r7, #16]
 8012768:	f7f9 ff58 	bl	800c61c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801276c:	6a3b      	ldr	r3, [r7, #32]
 801276e:	68db      	ldr	r3, [r3, #12]
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	4618      	mov	r0, r3
 8012774:	f7f8 f9eb 	bl	800ab4e <lwip_htonl>
 8012778:	4603      	mov	r3, r0
 801277a:	3301      	adds	r3, #1
 801277c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	1ad3      	subs	r3, r2, r3
 8012786:	2b00      	cmp	r3, #0
 8012788:	da02      	bge.n	8012790 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	68fa      	ldr	r2, [r7, #12]
 801278e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012794:	2200      	movs	r2, #0
 8012796:	69b9      	ldr	r1, [r7, #24]
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f7ff fded 	bl	8012378 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801279e:	687a      	ldr	r2, [r7, #4]
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	3304      	adds	r3, #4
 80127a4:	69b9      	ldr	r1, [r7, #24]
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f7ff fe26 	bl	80123f8 <tcp_output_control_segment>
 80127ac:	4603      	mov	r3, r0
 80127ae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80127b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	372c      	adds	r7, #44	; 0x2c
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd90      	pop	{r4, r7, pc}
 80127bc:	08019244 	.word	0x08019244
 80127c0:	08019a3c 	.word	0x08019a3c
 80127c4:	08019298 	.word	0x08019298

080127c8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b082      	sub	sp, #8
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80127d0:	f7fa f812 	bl	800c7f8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80127d4:	4b0a      	ldr	r3, [pc, #40]	; (8012800 <tcpip_tcp_timer+0x38>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d103      	bne.n	80127e4 <tcpip_tcp_timer+0x1c>
 80127dc:	4b09      	ldr	r3, [pc, #36]	; (8012804 <tcpip_tcp_timer+0x3c>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d005      	beq.n	80127f0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80127e4:	2200      	movs	r2, #0
 80127e6:	4908      	ldr	r1, [pc, #32]	; (8012808 <tcpip_tcp_timer+0x40>)
 80127e8:	20fa      	movs	r0, #250	; 0xfa
 80127ea:	f000 f8f3 	bl	80129d4 <sys_timeout>
 80127ee:	e003      	b.n	80127f8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80127f0:	4b06      	ldr	r3, [pc, #24]	; (801280c <tcpip_tcp_timer+0x44>)
 80127f2:	2200      	movs	r2, #0
 80127f4:	601a      	str	r2, [r3, #0]
  }
}
 80127f6:	bf00      	nop
 80127f8:	bf00      	nop
 80127fa:	3708      	adds	r7, #8
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}
 8012800:	2000e004 	.word	0x2000e004
 8012804:	2000e014 	.word	0x2000e014
 8012808:	080127c9 	.word	0x080127c9
 801280c:	20000a54 	.word	0x20000a54

08012810 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012814:	4b0a      	ldr	r3, [pc, #40]	; (8012840 <tcp_timer_needed+0x30>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d10f      	bne.n	801283c <tcp_timer_needed+0x2c>
 801281c:	4b09      	ldr	r3, [pc, #36]	; (8012844 <tcp_timer_needed+0x34>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d103      	bne.n	801282c <tcp_timer_needed+0x1c>
 8012824:	4b08      	ldr	r3, [pc, #32]	; (8012848 <tcp_timer_needed+0x38>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	2b00      	cmp	r3, #0
 801282a:	d007      	beq.n	801283c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801282c:	4b04      	ldr	r3, [pc, #16]	; (8012840 <tcp_timer_needed+0x30>)
 801282e:	2201      	movs	r2, #1
 8012830:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012832:	2200      	movs	r2, #0
 8012834:	4905      	ldr	r1, [pc, #20]	; (801284c <tcp_timer_needed+0x3c>)
 8012836:	20fa      	movs	r0, #250	; 0xfa
 8012838:	f000 f8cc 	bl	80129d4 <sys_timeout>
  }
}
 801283c:	bf00      	nop
 801283e:	bd80      	pop	{r7, pc}
 8012840:	20000a54 	.word	0x20000a54
 8012844:	2000e004 	.word	0x2000e004
 8012848:	2000e014 	.word	0x2000e014
 801284c:	080127c9 	.word	0x080127c9

08012850 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b086      	sub	sp, #24
 8012854:	af00      	add	r7, sp, #0
 8012856:	60f8      	str	r0, [r7, #12]
 8012858:	60b9      	str	r1, [r7, #8]
 801285a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801285c:	2006      	movs	r0, #6
 801285e:	f7f8 fe95 	bl	800b58c <memp_malloc>
 8012862:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d109      	bne.n	801287e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801286a:	693b      	ldr	r3, [r7, #16]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d151      	bne.n	8012914 <sys_timeout_abs+0xc4>
 8012870:	4b2a      	ldr	r3, [pc, #168]	; (801291c <sys_timeout_abs+0xcc>)
 8012872:	22be      	movs	r2, #190	; 0xbe
 8012874:	492a      	ldr	r1, [pc, #168]	; (8012920 <sys_timeout_abs+0xd0>)
 8012876:	482b      	ldr	r0, [pc, #172]	; (8012924 <sys_timeout_abs+0xd4>)
 8012878:	f002 fdf4 	bl	8015464 <iprintf>
    return;
 801287c:	e04a      	b.n	8012914 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	2200      	movs	r2, #0
 8012882:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	68ba      	ldr	r2, [r7, #8]
 8012888:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801288a:	693b      	ldr	r3, [r7, #16]
 801288c:	687a      	ldr	r2, [r7, #4]
 801288e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012896:	4b24      	ldr	r3, [pc, #144]	; (8012928 <sys_timeout_abs+0xd8>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d103      	bne.n	80128a6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801289e:	4a22      	ldr	r2, [pc, #136]	; (8012928 <sys_timeout_abs+0xd8>)
 80128a0:	693b      	ldr	r3, [r7, #16]
 80128a2:	6013      	str	r3, [r2, #0]
    return;
 80128a4:	e037      	b.n	8012916 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80128a6:	693b      	ldr	r3, [r7, #16]
 80128a8:	685a      	ldr	r2, [r3, #4]
 80128aa:	4b1f      	ldr	r3, [pc, #124]	; (8012928 <sys_timeout_abs+0xd8>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	0fdb      	lsrs	r3, r3, #31
 80128b4:	f003 0301 	and.w	r3, r3, #1
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d007      	beq.n	80128ce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80128be:	4b1a      	ldr	r3, [pc, #104]	; (8012928 <sys_timeout_abs+0xd8>)
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80128c6:	4a18      	ldr	r2, [pc, #96]	; (8012928 <sys_timeout_abs+0xd8>)
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	6013      	str	r3, [r2, #0]
 80128cc:	e023      	b.n	8012916 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80128ce:	4b16      	ldr	r3, [pc, #88]	; (8012928 <sys_timeout_abs+0xd8>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	617b      	str	r3, [r7, #20]
 80128d4:	e01a      	b.n	801290c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d00b      	beq.n	80128f6 <sys_timeout_abs+0xa6>
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	685a      	ldr	r2, [r3, #4]
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	1ad3      	subs	r3, r2, r3
 80128ea:	0fdb      	lsrs	r3, r3, #31
 80128ec:	f003 0301 	and.w	r3, r3, #1
 80128f0:	b2db      	uxtb	r3, r3
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d007      	beq.n	8012906 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	693a      	ldr	r2, [r7, #16]
 8012902:	601a      	str	r2, [r3, #0]
        break;
 8012904:	e007      	b.n	8012916 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012906:	697b      	ldr	r3, [r7, #20]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	617b      	str	r3, [r7, #20]
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d1e1      	bne.n	80128d6 <sys_timeout_abs+0x86>
 8012912:	e000      	b.n	8012916 <sys_timeout_abs+0xc6>
    return;
 8012914:	bf00      	nop
      }
    }
  }
}
 8012916:	3718      	adds	r7, #24
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	08019a60 	.word	0x08019a60
 8012920:	08019a94 	.word	0x08019a94
 8012924:	08019ad4 	.word	0x08019ad4
 8012928:	20000a4c 	.word	0x20000a4c

0801292c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b086      	sub	sp, #24
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	4798      	blx	r3

  now = sys_now();
 801293e:	f7f6 f843 	bl	80089c8 <sys_now>
 8012942:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	4b0f      	ldr	r3, [pc, #60]	; (8012988 <lwip_cyclic_timer+0x5c>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	4413      	add	r3, r2
 801294e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012950:	68fa      	ldr	r2, [r7, #12]
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	1ad3      	subs	r3, r2, r3
 8012956:	0fdb      	lsrs	r3, r3, #31
 8012958:	f003 0301 	and.w	r3, r3, #1
 801295c:	b2db      	uxtb	r3, r3
 801295e:	2b00      	cmp	r3, #0
 8012960:	d009      	beq.n	8012976 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	681a      	ldr	r2, [r3, #0]
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	4413      	add	r3, r2
 801296a:	687a      	ldr	r2, [r7, #4]
 801296c:	4907      	ldr	r1, [pc, #28]	; (801298c <lwip_cyclic_timer+0x60>)
 801296e:	4618      	mov	r0, r3
 8012970:	f7ff ff6e 	bl	8012850 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012974:	e004      	b.n	8012980 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012976:	687a      	ldr	r2, [r7, #4]
 8012978:	4904      	ldr	r1, [pc, #16]	; (801298c <lwip_cyclic_timer+0x60>)
 801297a:	68f8      	ldr	r0, [r7, #12]
 801297c:	f7ff ff68 	bl	8012850 <sys_timeout_abs>
}
 8012980:	bf00      	nop
 8012982:	3718      	adds	r7, #24
 8012984:	46bd      	mov	sp, r7
 8012986:	bd80      	pop	{r7, pc}
 8012988:	20000a50 	.word	0x20000a50
 801298c:	0801292d 	.word	0x0801292d

08012990 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012996:	2301      	movs	r3, #1
 8012998:	607b      	str	r3, [r7, #4]
 801299a:	e00e      	b.n	80129ba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801299c:	4a0b      	ldr	r2, [pc, #44]	; (80129cc <sys_timeouts_init+0x3c>)
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	00db      	lsls	r3, r3, #3
 80129a8:	4a08      	ldr	r2, [pc, #32]	; (80129cc <sys_timeouts_init+0x3c>)
 80129aa:	4413      	add	r3, r2
 80129ac:	461a      	mov	r2, r3
 80129ae:	4908      	ldr	r1, [pc, #32]	; (80129d0 <sys_timeouts_init+0x40>)
 80129b0:	f000 f810 	bl	80129d4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	3301      	adds	r3, #1
 80129b8:	607b      	str	r3, [r7, #4]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2b02      	cmp	r3, #2
 80129be:	d9ed      	bls.n	801299c <sys_timeouts_init+0xc>
  }
}
 80129c0:	bf00      	nop
 80129c2:	bf00      	nop
 80129c4:	3708      	adds	r7, #8
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	08021618 	.word	0x08021618
 80129d0:	0801292d 	.word	0x0801292d

080129d4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b086      	sub	sp, #24
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80129e6:	d306      	bcc.n	80129f6 <sys_timeout+0x22>
 80129e8:	4b0a      	ldr	r3, [pc, #40]	; (8012a14 <sys_timeout+0x40>)
 80129ea:	f240 1229 	movw	r2, #297	; 0x129
 80129ee:	490a      	ldr	r1, [pc, #40]	; (8012a18 <sys_timeout+0x44>)
 80129f0:	480a      	ldr	r0, [pc, #40]	; (8012a1c <sys_timeout+0x48>)
 80129f2:	f002 fd37 	bl	8015464 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80129f6:	f7f5 ffe7 	bl	80089c8 <sys_now>
 80129fa:	4602      	mov	r2, r0
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	4413      	add	r3, r2
 8012a00:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	68b9      	ldr	r1, [r7, #8]
 8012a06:	6978      	ldr	r0, [r7, #20]
 8012a08:	f7ff ff22 	bl	8012850 <sys_timeout_abs>
#endif
}
 8012a0c:	bf00      	nop
 8012a0e:	3718      	adds	r7, #24
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	08019a60 	.word	0x08019a60
 8012a18:	08019afc 	.word	0x08019afc
 8012a1c:	08019ad4 	.word	0x08019ad4

08012a20 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b084      	sub	sp, #16
 8012a24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012a26:	f7f5 ffcf 	bl	80089c8 <sys_now>
 8012a2a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012a2c:	4b1a      	ldr	r3, [pc, #104]	; (8012a98 <sys_check_timeouts+0x78>)
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	b2db      	uxtb	r3, r3
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d001      	beq.n	8012a3a <sys_check_timeouts+0x1a>
 8012a36:	f7f9 f8cd 	bl	800bbd4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012a3a:	4b18      	ldr	r3, [pc, #96]	; (8012a9c <sys_check_timeouts+0x7c>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d022      	beq.n	8012a8c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	68fa      	ldr	r2, [r7, #12]
 8012a4c:	1ad3      	subs	r3, r2, r3
 8012a4e:	0fdb      	lsrs	r3, r3, #31
 8012a50:	f003 0301 	and.w	r3, r3, #1
 8012a54:	b2db      	uxtb	r3, r3
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d11a      	bne.n	8012a90 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	4a0f      	ldr	r2, [pc, #60]	; (8012a9c <sys_check_timeouts+0x7c>)
 8012a60:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	689b      	ldr	r3, [r3, #8]
 8012a66:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	68db      	ldr	r3, [r3, #12]
 8012a6c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	685b      	ldr	r3, [r3, #4]
 8012a72:	4a0b      	ldr	r2, [pc, #44]	; (8012aa0 <sys_check_timeouts+0x80>)
 8012a74:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012a76:	68b9      	ldr	r1, [r7, #8]
 8012a78:	2006      	movs	r0, #6
 8012a7a:	f7f8 fdd3 	bl	800b624 <memp_free>
    if (handler != NULL) {
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d0d3      	beq.n	8012a2c <sys_check_timeouts+0xc>
      handler(arg);
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	6838      	ldr	r0, [r7, #0]
 8012a88:	4798      	blx	r3
  do {
 8012a8a:	e7cf      	b.n	8012a2c <sys_check_timeouts+0xc>
      return;
 8012a8c:	bf00      	nop
 8012a8e:	e000      	b.n	8012a92 <sys_check_timeouts+0x72>
      return;
 8012a90:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012a92:	3710      	adds	r7, #16
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	2000dffc 	.word	0x2000dffc
 8012a9c:	20000a4c 	.word	0x20000a4c
 8012aa0:	20000a50 	.word	0x20000a50

08012aa4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012aa8:	f002 fd6a 	bl	8015580 <rand>
 8012aac:	4603      	mov	r3, r0
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012ab4:	b29b      	uxth	r3, r3
 8012ab6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012aba:	b29a      	uxth	r2, r3
 8012abc:	4b01      	ldr	r3, [pc, #4]	; (8012ac4 <udp_init+0x20>)
 8012abe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012ac0:	bf00      	nop
 8012ac2:	bd80      	pop	{r7, pc}
 8012ac4:	200004b8 	.word	0x200004b8

08012ac8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b084      	sub	sp, #16
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	4613      	mov	r3, r2
 8012ad4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d105      	bne.n	8012ae8 <udp_input_local_match+0x20>
 8012adc:	4b27      	ldr	r3, [pc, #156]	; (8012b7c <udp_input_local_match+0xb4>)
 8012ade:	2287      	movs	r2, #135	; 0x87
 8012ae0:	4927      	ldr	r1, [pc, #156]	; (8012b80 <udp_input_local_match+0xb8>)
 8012ae2:	4828      	ldr	r0, [pc, #160]	; (8012b84 <udp_input_local_match+0xbc>)
 8012ae4:	f002 fcbe 	bl	8015464 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d105      	bne.n	8012afa <udp_input_local_match+0x32>
 8012aee:	4b23      	ldr	r3, [pc, #140]	; (8012b7c <udp_input_local_match+0xb4>)
 8012af0:	2288      	movs	r2, #136	; 0x88
 8012af2:	4925      	ldr	r1, [pc, #148]	; (8012b88 <udp_input_local_match+0xc0>)
 8012af4:	4823      	ldr	r0, [pc, #140]	; (8012b84 <udp_input_local_match+0xbc>)
 8012af6:	f002 fcb5 	bl	8015464 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	7a1b      	ldrb	r3, [r3, #8]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d00b      	beq.n	8012b1a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	7a1a      	ldrb	r2, [r3, #8]
 8012b06:	4b21      	ldr	r3, [pc, #132]	; (8012b8c <udp_input_local_match+0xc4>)
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b0e:	3301      	adds	r3, #1
 8012b10:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012b12:	429a      	cmp	r2, r3
 8012b14:	d001      	beq.n	8012b1a <udp_input_local_match+0x52>
    return 0;
 8012b16:	2300      	movs	r3, #0
 8012b18:	e02b      	b.n	8012b72 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012b1a:	79fb      	ldrb	r3, [r7, #7]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d018      	beq.n	8012b52 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d013      	beq.n	8012b4e <udp_input_local_match+0x86>
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d00f      	beq.n	8012b4e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012b2e:	4b17      	ldr	r3, [pc, #92]	; (8012b8c <udp_input_local_match+0xc4>)
 8012b30:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b36:	d00a      	beq.n	8012b4e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	681a      	ldr	r2, [r3, #0]
 8012b3c:	4b13      	ldr	r3, [pc, #76]	; (8012b8c <udp_input_local_match+0xc4>)
 8012b3e:	695b      	ldr	r3, [r3, #20]
 8012b40:	405a      	eors	r2, r3
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	3308      	adds	r3, #8
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d110      	bne.n	8012b70 <udp_input_local_match+0xa8>
          return 1;
 8012b4e:	2301      	movs	r3, #1
 8012b50:	e00f      	b.n	8012b72 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d009      	beq.n	8012b6c <udp_input_local_match+0xa4>
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d005      	beq.n	8012b6c <udp_input_local_match+0xa4>
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	681a      	ldr	r2, [r3, #0]
 8012b64:	4b09      	ldr	r3, [pc, #36]	; (8012b8c <udp_input_local_match+0xc4>)
 8012b66:	695b      	ldr	r3, [r3, #20]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d101      	bne.n	8012b70 <udp_input_local_match+0xa8>
        return 1;
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	e000      	b.n	8012b72 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012b70:	2300      	movs	r3, #0
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3710      	adds	r7, #16
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	08019b48 	.word	0x08019b48
 8012b80:	08019b78 	.word	0x08019b78
 8012b84:	08019b9c 	.word	0x08019b9c
 8012b88:	08019bc4 	.word	0x08019bc4
 8012b8c:	2000a7b4 	.word	0x2000a7b4

08012b90 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012b90:	b590      	push	{r4, r7, lr}
 8012b92:	b08d      	sub	sp, #52	; 0x34
 8012b94:	af02      	add	r7, sp, #8
 8012b96:	6078      	str	r0, [r7, #4]
 8012b98:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d105      	bne.n	8012bb0 <udp_input+0x20>
 8012ba4:	4b7c      	ldr	r3, [pc, #496]	; (8012d98 <udp_input+0x208>)
 8012ba6:	22cf      	movs	r2, #207	; 0xcf
 8012ba8:	497c      	ldr	r1, [pc, #496]	; (8012d9c <udp_input+0x20c>)
 8012baa:	487d      	ldr	r0, [pc, #500]	; (8012da0 <udp_input+0x210>)
 8012bac:	f002 fc5a 	bl	8015464 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d105      	bne.n	8012bc2 <udp_input+0x32>
 8012bb6:	4b78      	ldr	r3, [pc, #480]	; (8012d98 <udp_input+0x208>)
 8012bb8:	22d0      	movs	r2, #208	; 0xd0
 8012bba:	497a      	ldr	r1, [pc, #488]	; (8012da4 <udp_input+0x214>)
 8012bbc:	4878      	ldr	r0, [pc, #480]	; (8012da0 <udp_input+0x210>)
 8012bbe:	f002 fc51 	bl	8015464 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	895b      	ldrh	r3, [r3, #10]
 8012bc6:	2b07      	cmp	r3, #7
 8012bc8:	d803      	bhi.n	8012bd2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012bca:	6878      	ldr	r0, [r7, #4]
 8012bcc:	f7f9 fb3c 	bl	800c248 <pbuf_free>
    goto end;
 8012bd0:	e0de      	b.n	8012d90 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	685b      	ldr	r3, [r3, #4]
 8012bd6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012bd8:	4b73      	ldr	r3, [pc, #460]	; (8012da8 <udp_input+0x218>)
 8012bda:	695b      	ldr	r3, [r3, #20]
 8012bdc:	4a72      	ldr	r2, [pc, #456]	; (8012da8 <udp_input+0x218>)
 8012bde:	6812      	ldr	r2, [r2, #0]
 8012be0:	4611      	mov	r1, r2
 8012be2:	4618      	mov	r0, r3
 8012be4:	f001 fc88 	bl	80144f8 <ip4_addr_isbroadcast_u32>
 8012be8:	4603      	mov	r3, r0
 8012bea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	881b      	ldrh	r3, [r3, #0]
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f7f7 ff96 	bl	800ab24 <lwip_htons>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	885b      	ldrh	r3, [r3, #2]
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7f7 ff8e 	bl	800ab24 <lwip_htons>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012c10:	2300      	movs	r3, #0
 8012c12:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012c14:	2300      	movs	r3, #0
 8012c16:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c18:	4b64      	ldr	r3, [pc, #400]	; (8012dac <udp_input+0x21c>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8012c1e:	e054      	b.n	8012cca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c22:	8a5b      	ldrh	r3, [r3, #18]
 8012c24:	89fa      	ldrh	r2, [r7, #14]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d14a      	bne.n	8012cc0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012c2a:	7cfb      	ldrb	r3, [r7, #19]
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	6839      	ldr	r1, [r7, #0]
 8012c30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c32:	f7ff ff49 	bl	8012ac8 <udp_input_local_match>
 8012c36:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d041      	beq.n	8012cc0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3e:	7c1b      	ldrb	r3, [r3, #16]
 8012c40:	f003 0304 	and.w	r3, r3, #4
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d11d      	bne.n	8012c84 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012c48:	69fb      	ldr	r3, [r7, #28]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d102      	bne.n	8012c54 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c50:	61fb      	str	r3, [r7, #28]
 8012c52:	e017      	b.n	8012c84 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012c54:	7cfb      	ldrb	r3, [r7, #19]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d014      	beq.n	8012c84 <udp_input+0xf4>
 8012c5a:	4b53      	ldr	r3, [pc, #332]	; (8012da8 <udp_input+0x218>)
 8012c5c:	695b      	ldr	r3, [r3, #20]
 8012c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c62:	d10f      	bne.n	8012c84 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012c64:	69fb      	ldr	r3, [r7, #28]
 8012c66:	681a      	ldr	r2, [r3, #0]
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	3304      	adds	r3, #4
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d008      	beq.n	8012c84 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	3304      	adds	r3, #4
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d101      	bne.n	8012c84 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c86:	8a9b      	ldrh	r3, [r3, #20]
 8012c88:	8a3a      	ldrh	r2, [r7, #16]
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	d118      	bne.n	8012cc0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c90:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d005      	beq.n	8012ca2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c98:	685a      	ldr	r2, [r3, #4]
 8012c9a:	4b43      	ldr	r3, [pc, #268]	; (8012da8 <udp_input+0x218>)
 8012c9c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d10e      	bne.n	8012cc0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012ca2:	6a3b      	ldr	r3, [r7, #32]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d014      	beq.n	8012cd2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012caa:	68da      	ldr	r2, [r3, #12]
 8012cac:	6a3b      	ldr	r3, [r7, #32]
 8012cae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012cb0:	4b3e      	ldr	r3, [pc, #248]	; (8012dac <udp_input+0x21c>)
 8012cb2:	681a      	ldr	r2, [r3, #0]
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012cb8:	4a3c      	ldr	r2, [pc, #240]	; (8012dac <udp_input+0x21c>)
 8012cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012cbe:	e008      	b.n	8012cd2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8012cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d1a7      	bne.n	8012c20 <udp_input+0x90>
 8012cd0:	e000      	b.n	8012cd4 <udp_input+0x144>
        break;
 8012cd2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d101      	bne.n	8012cde <udp_input+0x14e>
    pcb = uncon_pcb;
 8012cda:	69fb      	ldr	r3, [r7, #28]
 8012cdc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d002      	beq.n	8012cea <udp_input+0x15a>
    for_us = 1;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	76fb      	strb	r3, [r7, #27]
 8012ce8:	e00a      	b.n	8012d00 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	3304      	adds	r3, #4
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	4b2d      	ldr	r3, [pc, #180]	; (8012da8 <udp_input+0x218>)
 8012cf2:	695b      	ldr	r3, [r3, #20]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	bf0c      	ite	eq
 8012cf8:	2301      	moveq	r3, #1
 8012cfa:	2300      	movne	r3, #0
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012d00:	7efb      	ldrb	r3, [r7, #27]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d041      	beq.n	8012d8a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012d06:	2108      	movs	r1, #8
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f7f9 fa17 	bl	800c13c <pbuf_remove_header>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d00a      	beq.n	8012d2a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012d14:	4b20      	ldr	r3, [pc, #128]	; (8012d98 <udp_input+0x208>)
 8012d16:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012d1a:	4925      	ldr	r1, [pc, #148]	; (8012db0 <udp_input+0x220>)
 8012d1c:	4820      	ldr	r0, [pc, #128]	; (8012da0 <udp_input+0x210>)
 8012d1e:	f002 fba1 	bl	8015464 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f7f9 fa90 	bl	800c248 <pbuf_free>
      goto end;
 8012d28:	e032      	b.n	8012d90 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d012      	beq.n	8012d56 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d32:	699b      	ldr	r3, [r3, #24]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d00a      	beq.n	8012d4e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3a:	699c      	ldr	r4, [r3, #24]
 8012d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3e:	69d8      	ldr	r0, [r3, #28]
 8012d40:	8a3b      	ldrh	r3, [r7, #16]
 8012d42:	9300      	str	r3, [sp, #0]
 8012d44:	4b1b      	ldr	r3, [pc, #108]	; (8012db4 <udp_input+0x224>)
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d4a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012d4c:	e021      	b.n	8012d92 <udp_input+0x202>
        pbuf_free(p);
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f7f9 fa7a 	bl	800c248 <pbuf_free>
        goto end;
 8012d54:	e01c      	b.n	8012d90 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012d56:	7cfb      	ldrb	r3, [r7, #19]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d112      	bne.n	8012d82 <udp_input+0x1f2>
 8012d5c:	4b12      	ldr	r3, [pc, #72]	; (8012da8 <udp_input+0x218>)
 8012d5e:	695b      	ldr	r3, [r3, #20]
 8012d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d64:	2be0      	cmp	r3, #224	; 0xe0
 8012d66:	d00c      	beq.n	8012d82 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012d68:	4b0f      	ldr	r3, [pc, #60]	; (8012da8 <udp_input+0x218>)
 8012d6a:	899b      	ldrh	r3, [r3, #12]
 8012d6c:	3308      	adds	r3, #8
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	b21b      	sxth	r3, r3
 8012d72:	4619      	mov	r1, r3
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f7f9 fa54 	bl	800c222 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012d7a:	2103      	movs	r1, #3
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f001 f89b 	bl	8013eb8 <icmp_dest_unreach>
      pbuf_free(p);
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f7f9 fa60 	bl	800c248 <pbuf_free>
  return;
 8012d88:	e003      	b.n	8012d92 <udp_input+0x202>
    pbuf_free(p);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f7f9 fa5c 	bl	800c248 <pbuf_free>
  return;
 8012d90:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012d92:	372c      	adds	r7, #44	; 0x2c
 8012d94:	46bd      	mov	sp, r7
 8012d96:	bd90      	pop	{r4, r7, pc}
 8012d98:	08019b48 	.word	0x08019b48
 8012d9c:	08019bec 	.word	0x08019bec
 8012da0:	08019b9c 	.word	0x08019b9c
 8012da4:	08019c04 	.word	0x08019c04
 8012da8:	2000a7b4 	.word	0x2000a7b4
 8012dac:	2000e01c 	.word	0x2000e01c
 8012db0:	08019c20 	.word	0x08019c20
 8012db4:	2000a7c4 	.word	0x2000a7c4

08012db8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012db8:	b480      	push	{r7}
 8012dba:	b085      	sub	sp, #20
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d01e      	beq.n	8012e06 <udp_netif_ip_addr_changed+0x4e>
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d01a      	beq.n	8012e06 <udp_netif_ip_addr_changed+0x4e>
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d017      	beq.n	8012e06 <udp_netif_ip_addr_changed+0x4e>
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d013      	beq.n	8012e06 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012dde:	4b0d      	ldr	r3, [pc, #52]	; (8012e14 <udp_netif_ip_addr_changed+0x5c>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	60fb      	str	r3, [r7, #12]
 8012de4:	e00c      	b.n	8012e00 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681a      	ldr	r2, [r3, #0]
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d103      	bne.n	8012dfa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	68db      	ldr	r3, [r3, #12]
 8012dfe:	60fb      	str	r3, [r7, #12]
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d1ef      	bne.n	8012de6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012e06:	bf00      	nop
 8012e08:	3714      	adds	r7, #20
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop
 8012e14:	2000e01c 	.word	0x2000e01c

08012e18 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b082      	sub	sp, #8
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012e20:	4915      	ldr	r1, [pc, #84]	; (8012e78 <etharp_free_entry+0x60>)
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	4613      	mov	r3, r2
 8012e26:	005b      	lsls	r3, r3, #1
 8012e28:	4413      	add	r3, r2
 8012e2a:	00db      	lsls	r3, r3, #3
 8012e2c:	440b      	add	r3, r1
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d013      	beq.n	8012e5c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012e34:	4910      	ldr	r1, [pc, #64]	; (8012e78 <etharp_free_entry+0x60>)
 8012e36:	687a      	ldr	r2, [r7, #4]
 8012e38:	4613      	mov	r3, r2
 8012e3a:	005b      	lsls	r3, r3, #1
 8012e3c:	4413      	add	r3, r2
 8012e3e:	00db      	lsls	r3, r3, #3
 8012e40:	440b      	add	r3, r1
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7f9 f9ff 	bl	800c248 <pbuf_free>
    arp_table[i].q = NULL;
 8012e4a:	490b      	ldr	r1, [pc, #44]	; (8012e78 <etharp_free_entry+0x60>)
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	4613      	mov	r3, r2
 8012e50:	005b      	lsls	r3, r3, #1
 8012e52:	4413      	add	r3, r2
 8012e54:	00db      	lsls	r3, r3, #3
 8012e56:	440b      	add	r3, r1
 8012e58:	2200      	movs	r2, #0
 8012e5a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012e5c:	4906      	ldr	r1, [pc, #24]	; (8012e78 <etharp_free_entry+0x60>)
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	4613      	mov	r3, r2
 8012e62:	005b      	lsls	r3, r3, #1
 8012e64:	4413      	add	r3, r2
 8012e66:	00db      	lsls	r3, r3, #3
 8012e68:	440b      	add	r3, r1
 8012e6a:	3314      	adds	r3, #20
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012e70:	bf00      	nop
 8012e72:	3708      	adds	r7, #8
 8012e74:	46bd      	mov	sp, r7
 8012e76:	bd80      	pop	{r7, pc}
 8012e78:	20000a58 	.word	0x20000a58

08012e7c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012e82:	2300      	movs	r3, #0
 8012e84:	607b      	str	r3, [r7, #4]
 8012e86:	e096      	b.n	8012fb6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012e88:	494f      	ldr	r1, [pc, #316]	; (8012fc8 <etharp_tmr+0x14c>)
 8012e8a:	687a      	ldr	r2, [r7, #4]
 8012e8c:	4613      	mov	r3, r2
 8012e8e:	005b      	lsls	r3, r3, #1
 8012e90:	4413      	add	r3, r2
 8012e92:	00db      	lsls	r3, r3, #3
 8012e94:	440b      	add	r3, r1
 8012e96:	3314      	adds	r3, #20
 8012e98:	781b      	ldrb	r3, [r3, #0]
 8012e9a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012e9c:	78fb      	ldrb	r3, [r7, #3]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	f000 8086 	beq.w	8012fb0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012ea4:	4948      	ldr	r1, [pc, #288]	; (8012fc8 <etharp_tmr+0x14c>)
 8012ea6:	687a      	ldr	r2, [r7, #4]
 8012ea8:	4613      	mov	r3, r2
 8012eaa:	005b      	lsls	r3, r3, #1
 8012eac:	4413      	add	r3, r2
 8012eae:	00db      	lsls	r3, r3, #3
 8012eb0:	440b      	add	r3, r1
 8012eb2:	3312      	adds	r3, #18
 8012eb4:	881b      	ldrh	r3, [r3, #0]
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	b298      	uxth	r0, r3
 8012eba:	4943      	ldr	r1, [pc, #268]	; (8012fc8 <etharp_tmr+0x14c>)
 8012ebc:	687a      	ldr	r2, [r7, #4]
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	005b      	lsls	r3, r3, #1
 8012ec2:	4413      	add	r3, r2
 8012ec4:	00db      	lsls	r3, r3, #3
 8012ec6:	440b      	add	r3, r1
 8012ec8:	3312      	adds	r3, #18
 8012eca:	4602      	mov	r2, r0
 8012ecc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012ece:	493e      	ldr	r1, [pc, #248]	; (8012fc8 <etharp_tmr+0x14c>)
 8012ed0:	687a      	ldr	r2, [r7, #4]
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	005b      	lsls	r3, r3, #1
 8012ed6:	4413      	add	r3, r2
 8012ed8:	00db      	lsls	r3, r3, #3
 8012eda:	440b      	add	r3, r1
 8012edc:	3312      	adds	r3, #18
 8012ede:	881b      	ldrh	r3, [r3, #0]
 8012ee0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012ee4:	d215      	bcs.n	8012f12 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012ee6:	4938      	ldr	r1, [pc, #224]	; (8012fc8 <etharp_tmr+0x14c>)
 8012ee8:	687a      	ldr	r2, [r7, #4]
 8012eea:	4613      	mov	r3, r2
 8012eec:	005b      	lsls	r3, r3, #1
 8012eee:	4413      	add	r3, r2
 8012ef0:	00db      	lsls	r3, r3, #3
 8012ef2:	440b      	add	r3, r1
 8012ef4:	3314      	adds	r3, #20
 8012ef6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012ef8:	2b01      	cmp	r3, #1
 8012efa:	d10e      	bne.n	8012f1a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012efc:	4932      	ldr	r1, [pc, #200]	; (8012fc8 <etharp_tmr+0x14c>)
 8012efe:	687a      	ldr	r2, [r7, #4]
 8012f00:	4613      	mov	r3, r2
 8012f02:	005b      	lsls	r3, r3, #1
 8012f04:	4413      	add	r3, r2
 8012f06:	00db      	lsls	r3, r3, #3
 8012f08:	440b      	add	r3, r1
 8012f0a:	3312      	adds	r3, #18
 8012f0c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012f0e:	2b04      	cmp	r3, #4
 8012f10:	d903      	bls.n	8012f1a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f7ff ff80 	bl	8012e18 <etharp_free_entry>
 8012f18:	e04a      	b.n	8012fb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012f1a:	492b      	ldr	r1, [pc, #172]	; (8012fc8 <etharp_tmr+0x14c>)
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	4613      	mov	r3, r2
 8012f20:	005b      	lsls	r3, r3, #1
 8012f22:	4413      	add	r3, r2
 8012f24:	00db      	lsls	r3, r3, #3
 8012f26:	440b      	add	r3, r1
 8012f28:	3314      	adds	r3, #20
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	2b03      	cmp	r3, #3
 8012f2e:	d10a      	bne.n	8012f46 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012f30:	4925      	ldr	r1, [pc, #148]	; (8012fc8 <etharp_tmr+0x14c>)
 8012f32:	687a      	ldr	r2, [r7, #4]
 8012f34:	4613      	mov	r3, r2
 8012f36:	005b      	lsls	r3, r3, #1
 8012f38:	4413      	add	r3, r2
 8012f3a:	00db      	lsls	r3, r3, #3
 8012f3c:	440b      	add	r3, r1
 8012f3e:	3314      	adds	r3, #20
 8012f40:	2204      	movs	r2, #4
 8012f42:	701a      	strb	r2, [r3, #0]
 8012f44:	e034      	b.n	8012fb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012f46:	4920      	ldr	r1, [pc, #128]	; (8012fc8 <etharp_tmr+0x14c>)
 8012f48:	687a      	ldr	r2, [r7, #4]
 8012f4a:	4613      	mov	r3, r2
 8012f4c:	005b      	lsls	r3, r3, #1
 8012f4e:	4413      	add	r3, r2
 8012f50:	00db      	lsls	r3, r3, #3
 8012f52:	440b      	add	r3, r1
 8012f54:	3314      	adds	r3, #20
 8012f56:	781b      	ldrb	r3, [r3, #0]
 8012f58:	2b04      	cmp	r3, #4
 8012f5a:	d10a      	bne.n	8012f72 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012f5c:	491a      	ldr	r1, [pc, #104]	; (8012fc8 <etharp_tmr+0x14c>)
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	4613      	mov	r3, r2
 8012f62:	005b      	lsls	r3, r3, #1
 8012f64:	4413      	add	r3, r2
 8012f66:	00db      	lsls	r3, r3, #3
 8012f68:	440b      	add	r3, r1
 8012f6a:	3314      	adds	r3, #20
 8012f6c:	2202      	movs	r2, #2
 8012f6e:	701a      	strb	r2, [r3, #0]
 8012f70:	e01e      	b.n	8012fb0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012f72:	4915      	ldr	r1, [pc, #84]	; (8012fc8 <etharp_tmr+0x14c>)
 8012f74:	687a      	ldr	r2, [r7, #4]
 8012f76:	4613      	mov	r3, r2
 8012f78:	005b      	lsls	r3, r3, #1
 8012f7a:	4413      	add	r3, r2
 8012f7c:	00db      	lsls	r3, r3, #3
 8012f7e:	440b      	add	r3, r1
 8012f80:	3314      	adds	r3, #20
 8012f82:	781b      	ldrb	r3, [r3, #0]
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d113      	bne.n	8012fb0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012f88:	490f      	ldr	r1, [pc, #60]	; (8012fc8 <etharp_tmr+0x14c>)
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	005b      	lsls	r3, r3, #1
 8012f90:	4413      	add	r3, r2
 8012f92:	00db      	lsls	r3, r3, #3
 8012f94:	440b      	add	r3, r1
 8012f96:	3308      	adds	r3, #8
 8012f98:	6818      	ldr	r0, [r3, #0]
 8012f9a:	687a      	ldr	r2, [r7, #4]
 8012f9c:	4613      	mov	r3, r2
 8012f9e:	005b      	lsls	r3, r3, #1
 8012fa0:	4413      	add	r3, r2
 8012fa2:	00db      	lsls	r3, r3, #3
 8012fa4:	4a08      	ldr	r2, [pc, #32]	; (8012fc8 <etharp_tmr+0x14c>)
 8012fa6:	4413      	add	r3, r2
 8012fa8:	3304      	adds	r3, #4
 8012faa:	4619      	mov	r1, r3
 8012fac:	f000 fe6e 	bl	8013c8c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	3301      	adds	r3, #1
 8012fb4:	607b      	str	r3, [r7, #4]
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	2b09      	cmp	r3, #9
 8012fba:	f77f af65 	ble.w	8012e88 <etharp_tmr+0xc>
      }
    }
  }
}
 8012fbe:	bf00      	nop
 8012fc0:	bf00      	nop
 8012fc2:	3708      	adds	r7, #8
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	20000a58 	.word	0x20000a58

08012fcc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b08a      	sub	sp, #40	; 0x28
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	607a      	str	r2, [r7, #4]
 8012fd8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012fda:	230a      	movs	r3, #10
 8012fdc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012fde:	230a      	movs	r3, #10
 8012fe0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012fe2:	230a      	movs	r3, #10
 8012fe4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012fea:	230a      	movs	r3, #10
 8012fec:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	83bb      	strh	r3, [r7, #28]
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	837b      	strh	r3, [r7, #26]
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	843b      	strh	r3, [r7, #32]
 8012ffe:	e0ae      	b.n	801315e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013000:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013004:	49a6      	ldr	r1, [pc, #664]	; (80132a0 <etharp_find_entry+0x2d4>)
 8013006:	4613      	mov	r3, r2
 8013008:	005b      	lsls	r3, r3, #1
 801300a:	4413      	add	r3, r2
 801300c:	00db      	lsls	r3, r3, #3
 801300e:	440b      	add	r3, r1
 8013010:	3314      	adds	r3, #20
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013016:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801301a:	2b0a      	cmp	r3, #10
 801301c:	d105      	bne.n	801302a <etharp_find_entry+0x5e>
 801301e:	7dfb      	ldrb	r3, [r7, #23]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d102      	bne.n	801302a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013024:	8c3b      	ldrh	r3, [r7, #32]
 8013026:	847b      	strh	r3, [r7, #34]	; 0x22
 8013028:	e095      	b.n	8013156 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801302a:	7dfb      	ldrb	r3, [r7, #23]
 801302c:	2b00      	cmp	r3, #0
 801302e:	f000 8092 	beq.w	8013156 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013032:	7dfb      	ldrb	r3, [r7, #23]
 8013034:	2b01      	cmp	r3, #1
 8013036:	d009      	beq.n	801304c <etharp_find_entry+0x80>
 8013038:	7dfb      	ldrb	r3, [r7, #23]
 801303a:	2b01      	cmp	r3, #1
 801303c:	d806      	bhi.n	801304c <etharp_find_entry+0x80>
 801303e:	4b99      	ldr	r3, [pc, #612]	; (80132a4 <etharp_find_entry+0x2d8>)
 8013040:	f240 1223 	movw	r2, #291	; 0x123
 8013044:	4998      	ldr	r1, [pc, #608]	; (80132a8 <etharp_find_entry+0x2dc>)
 8013046:	4899      	ldr	r0, [pc, #612]	; (80132ac <etharp_find_entry+0x2e0>)
 8013048:	f002 fa0c 	bl	8015464 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d020      	beq.n	8013094 <etharp_find_entry+0xc8>
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	6819      	ldr	r1, [r3, #0]
 8013056:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801305a:	4891      	ldr	r0, [pc, #580]	; (80132a0 <etharp_find_entry+0x2d4>)
 801305c:	4613      	mov	r3, r2
 801305e:	005b      	lsls	r3, r3, #1
 8013060:	4413      	add	r3, r2
 8013062:	00db      	lsls	r3, r3, #3
 8013064:	4403      	add	r3, r0
 8013066:	3304      	adds	r3, #4
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	4299      	cmp	r1, r3
 801306c:	d112      	bne.n	8013094 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d00c      	beq.n	801308e <etharp_find_entry+0xc2>
 8013074:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013078:	4989      	ldr	r1, [pc, #548]	; (80132a0 <etharp_find_entry+0x2d4>)
 801307a:	4613      	mov	r3, r2
 801307c:	005b      	lsls	r3, r3, #1
 801307e:	4413      	add	r3, r2
 8013080:	00db      	lsls	r3, r3, #3
 8013082:	440b      	add	r3, r1
 8013084:	3308      	adds	r3, #8
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	687a      	ldr	r2, [r7, #4]
 801308a:	429a      	cmp	r2, r3
 801308c:	d102      	bne.n	8013094 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801308e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013092:	e100      	b.n	8013296 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013094:	7dfb      	ldrb	r3, [r7, #23]
 8013096:	2b01      	cmp	r3, #1
 8013098:	d140      	bne.n	801311c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801309a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801309e:	4980      	ldr	r1, [pc, #512]	; (80132a0 <etharp_find_entry+0x2d4>)
 80130a0:	4613      	mov	r3, r2
 80130a2:	005b      	lsls	r3, r3, #1
 80130a4:	4413      	add	r3, r2
 80130a6:	00db      	lsls	r3, r3, #3
 80130a8:	440b      	add	r3, r1
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d01a      	beq.n	80130e6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80130b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130b4:	497a      	ldr	r1, [pc, #488]	; (80132a0 <etharp_find_entry+0x2d4>)
 80130b6:	4613      	mov	r3, r2
 80130b8:	005b      	lsls	r3, r3, #1
 80130ba:	4413      	add	r3, r2
 80130bc:	00db      	lsls	r3, r3, #3
 80130be:	440b      	add	r3, r1
 80130c0:	3312      	adds	r3, #18
 80130c2:	881b      	ldrh	r3, [r3, #0]
 80130c4:	8bba      	ldrh	r2, [r7, #28]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d845      	bhi.n	8013156 <etharp_find_entry+0x18a>
            old_queue = i;
 80130ca:	8c3b      	ldrh	r3, [r7, #32]
 80130cc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80130ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130d2:	4973      	ldr	r1, [pc, #460]	; (80132a0 <etharp_find_entry+0x2d4>)
 80130d4:	4613      	mov	r3, r2
 80130d6:	005b      	lsls	r3, r3, #1
 80130d8:	4413      	add	r3, r2
 80130da:	00db      	lsls	r3, r3, #3
 80130dc:	440b      	add	r3, r1
 80130de:	3312      	adds	r3, #18
 80130e0:	881b      	ldrh	r3, [r3, #0]
 80130e2:	83bb      	strh	r3, [r7, #28]
 80130e4:	e037      	b.n	8013156 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80130e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80130ea:	496d      	ldr	r1, [pc, #436]	; (80132a0 <etharp_find_entry+0x2d4>)
 80130ec:	4613      	mov	r3, r2
 80130ee:	005b      	lsls	r3, r3, #1
 80130f0:	4413      	add	r3, r2
 80130f2:	00db      	lsls	r3, r3, #3
 80130f4:	440b      	add	r3, r1
 80130f6:	3312      	adds	r3, #18
 80130f8:	881b      	ldrh	r3, [r3, #0]
 80130fa:	8b7a      	ldrh	r2, [r7, #26]
 80130fc:	429a      	cmp	r2, r3
 80130fe:	d82a      	bhi.n	8013156 <etharp_find_entry+0x18a>
            old_pending = i;
 8013100:	8c3b      	ldrh	r3, [r7, #32]
 8013102:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013104:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013108:	4965      	ldr	r1, [pc, #404]	; (80132a0 <etharp_find_entry+0x2d4>)
 801310a:	4613      	mov	r3, r2
 801310c:	005b      	lsls	r3, r3, #1
 801310e:	4413      	add	r3, r2
 8013110:	00db      	lsls	r3, r3, #3
 8013112:	440b      	add	r3, r1
 8013114:	3312      	adds	r3, #18
 8013116:	881b      	ldrh	r3, [r3, #0]
 8013118:	837b      	strh	r3, [r7, #26]
 801311a:	e01c      	b.n	8013156 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801311c:	7dfb      	ldrb	r3, [r7, #23]
 801311e:	2b01      	cmp	r3, #1
 8013120:	d919      	bls.n	8013156 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013122:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013126:	495e      	ldr	r1, [pc, #376]	; (80132a0 <etharp_find_entry+0x2d4>)
 8013128:	4613      	mov	r3, r2
 801312a:	005b      	lsls	r3, r3, #1
 801312c:	4413      	add	r3, r2
 801312e:	00db      	lsls	r3, r3, #3
 8013130:	440b      	add	r3, r1
 8013132:	3312      	adds	r3, #18
 8013134:	881b      	ldrh	r3, [r3, #0]
 8013136:	8b3a      	ldrh	r2, [r7, #24]
 8013138:	429a      	cmp	r2, r3
 801313a:	d80c      	bhi.n	8013156 <etharp_find_entry+0x18a>
            old_stable = i;
 801313c:	8c3b      	ldrh	r3, [r7, #32]
 801313e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013140:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013144:	4956      	ldr	r1, [pc, #344]	; (80132a0 <etharp_find_entry+0x2d4>)
 8013146:	4613      	mov	r3, r2
 8013148:	005b      	lsls	r3, r3, #1
 801314a:	4413      	add	r3, r2
 801314c:	00db      	lsls	r3, r3, #3
 801314e:	440b      	add	r3, r1
 8013150:	3312      	adds	r3, #18
 8013152:	881b      	ldrh	r3, [r3, #0]
 8013154:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013156:	8c3b      	ldrh	r3, [r7, #32]
 8013158:	3301      	adds	r3, #1
 801315a:	b29b      	uxth	r3, r3
 801315c:	843b      	strh	r3, [r7, #32]
 801315e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013162:	2b09      	cmp	r3, #9
 8013164:	f77f af4c 	ble.w	8013000 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013168:	7afb      	ldrb	r3, [r7, #11]
 801316a:	f003 0302 	and.w	r3, r3, #2
 801316e:	2b00      	cmp	r3, #0
 8013170:	d108      	bne.n	8013184 <etharp_find_entry+0x1b8>
 8013172:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013176:	2b0a      	cmp	r3, #10
 8013178:	d107      	bne.n	801318a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801317a:	7afb      	ldrb	r3, [r7, #11]
 801317c:	f003 0301 	and.w	r3, r3, #1
 8013180:	2b00      	cmp	r3, #0
 8013182:	d102      	bne.n	801318a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013188:	e085      	b.n	8013296 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801318a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801318e:	2b09      	cmp	r3, #9
 8013190:	dc02      	bgt.n	8013198 <etharp_find_entry+0x1cc>
    i = empty;
 8013192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013194:	843b      	strh	r3, [r7, #32]
 8013196:	e039      	b.n	801320c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013198:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801319c:	2b09      	cmp	r3, #9
 801319e:	dc14      	bgt.n	80131ca <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80131a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131a2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80131a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80131a8:	493d      	ldr	r1, [pc, #244]	; (80132a0 <etharp_find_entry+0x2d4>)
 80131aa:	4613      	mov	r3, r2
 80131ac:	005b      	lsls	r3, r3, #1
 80131ae:	4413      	add	r3, r2
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	440b      	add	r3, r1
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d018      	beq.n	80131ec <etharp_find_entry+0x220>
 80131ba:	4b3a      	ldr	r3, [pc, #232]	; (80132a4 <etharp_find_entry+0x2d8>)
 80131bc:	f240 126d 	movw	r2, #365	; 0x16d
 80131c0:	493b      	ldr	r1, [pc, #236]	; (80132b0 <etharp_find_entry+0x2e4>)
 80131c2:	483a      	ldr	r0, [pc, #232]	; (80132ac <etharp_find_entry+0x2e0>)
 80131c4:	f002 f94e 	bl	8015464 <iprintf>
 80131c8:	e010      	b.n	80131ec <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80131ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80131ce:	2b09      	cmp	r3, #9
 80131d0:	dc02      	bgt.n	80131d8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80131d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80131d4:	843b      	strh	r3, [r7, #32]
 80131d6:	e009      	b.n	80131ec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80131d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80131dc:	2b09      	cmp	r3, #9
 80131de:	dc02      	bgt.n	80131e6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80131e0:	8bfb      	ldrh	r3, [r7, #30]
 80131e2:	843b      	strh	r3, [r7, #32]
 80131e4:	e002      	b.n	80131ec <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80131e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80131ea:	e054      	b.n	8013296 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80131ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80131f0:	2b09      	cmp	r3, #9
 80131f2:	dd06      	ble.n	8013202 <etharp_find_entry+0x236>
 80131f4:	4b2b      	ldr	r3, [pc, #172]	; (80132a4 <etharp_find_entry+0x2d8>)
 80131f6:	f240 127f 	movw	r2, #383	; 0x17f
 80131fa:	492e      	ldr	r1, [pc, #184]	; (80132b4 <etharp_find_entry+0x2e8>)
 80131fc:	482b      	ldr	r0, [pc, #172]	; (80132ac <etharp_find_entry+0x2e0>)
 80131fe:	f002 f931 	bl	8015464 <iprintf>
    etharp_free_entry(i);
 8013202:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013206:	4618      	mov	r0, r3
 8013208:	f7ff fe06 	bl	8012e18 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801320c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013210:	2b09      	cmp	r3, #9
 8013212:	dd06      	ble.n	8013222 <etharp_find_entry+0x256>
 8013214:	4b23      	ldr	r3, [pc, #140]	; (80132a4 <etharp_find_entry+0x2d8>)
 8013216:	f240 1283 	movw	r2, #387	; 0x183
 801321a:	4926      	ldr	r1, [pc, #152]	; (80132b4 <etharp_find_entry+0x2e8>)
 801321c:	4823      	ldr	r0, [pc, #140]	; (80132ac <etharp_find_entry+0x2e0>)
 801321e:	f002 f921 	bl	8015464 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013222:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013226:	491e      	ldr	r1, [pc, #120]	; (80132a0 <etharp_find_entry+0x2d4>)
 8013228:	4613      	mov	r3, r2
 801322a:	005b      	lsls	r3, r3, #1
 801322c:	4413      	add	r3, r2
 801322e:	00db      	lsls	r3, r3, #3
 8013230:	440b      	add	r3, r1
 8013232:	3314      	adds	r3, #20
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d006      	beq.n	8013248 <etharp_find_entry+0x27c>
 801323a:	4b1a      	ldr	r3, [pc, #104]	; (80132a4 <etharp_find_entry+0x2d8>)
 801323c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013240:	491d      	ldr	r1, [pc, #116]	; (80132b8 <etharp_find_entry+0x2ec>)
 8013242:	481a      	ldr	r0, [pc, #104]	; (80132ac <etharp_find_entry+0x2e0>)
 8013244:	f002 f90e 	bl	8015464 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d00b      	beq.n	8013266 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801324e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	6819      	ldr	r1, [r3, #0]
 8013256:	4812      	ldr	r0, [pc, #72]	; (80132a0 <etharp_find_entry+0x2d4>)
 8013258:	4613      	mov	r3, r2
 801325a:	005b      	lsls	r3, r3, #1
 801325c:	4413      	add	r3, r2
 801325e:	00db      	lsls	r3, r3, #3
 8013260:	4403      	add	r3, r0
 8013262:	3304      	adds	r3, #4
 8013264:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013266:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801326a:	490d      	ldr	r1, [pc, #52]	; (80132a0 <etharp_find_entry+0x2d4>)
 801326c:	4613      	mov	r3, r2
 801326e:	005b      	lsls	r3, r3, #1
 8013270:	4413      	add	r3, r2
 8013272:	00db      	lsls	r3, r3, #3
 8013274:	440b      	add	r3, r1
 8013276:	3312      	adds	r3, #18
 8013278:	2200      	movs	r2, #0
 801327a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801327c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013280:	4907      	ldr	r1, [pc, #28]	; (80132a0 <etharp_find_entry+0x2d4>)
 8013282:	4613      	mov	r3, r2
 8013284:	005b      	lsls	r3, r3, #1
 8013286:	4413      	add	r3, r2
 8013288:	00db      	lsls	r3, r3, #3
 801328a:	440b      	add	r3, r1
 801328c:	3308      	adds	r3, #8
 801328e:	687a      	ldr	r2, [r7, #4]
 8013290:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013292:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013296:	4618      	mov	r0, r3
 8013298:	3728      	adds	r7, #40	; 0x28
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}
 801329e:	bf00      	nop
 80132a0:	20000a58 	.word	0x20000a58
 80132a4:	08019eac 	.word	0x08019eac
 80132a8:	08019ee4 	.word	0x08019ee4
 80132ac:	08019f24 	.word	0x08019f24
 80132b0:	08019f4c 	.word	0x08019f4c
 80132b4:	08019f64 	.word	0x08019f64
 80132b8:	08019f78 	.word	0x08019f78

080132bc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b088      	sub	sp, #32
 80132c0:	af02      	add	r7, sp, #8
 80132c2:	60f8      	str	r0, [r7, #12]
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	607a      	str	r2, [r7, #4]
 80132c8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80132d0:	2b06      	cmp	r3, #6
 80132d2:	d006      	beq.n	80132e2 <etharp_update_arp_entry+0x26>
 80132d4:	4b48      	ldr	r3, [pc, #288]	; (80133f8 <etharp_update_arp_entry+0x13c>)
 80132d6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80132da:	4948      	ldr	r1, [pc, #288]	; (80133fc <etharp_update_arp_entry+0x140>)
 80132dc:	4848      	ldr	r0, [pc, #288]	; (8013400 <etharp_update_arp_entry+0x144>)
 80132de:	f002 f8c1 	bl	8015464 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80132e2:	68bb      	ldr	r3, [r7, #8]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d012      	beq.n	801330e <etharp_update_arp_entry+0x52>
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d00e      	beq.n	801330e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80132f0:	68bb      	ldr	r3, [r7, #8]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	68f9      	ldr	r1, [r7, #12]
 80132f6:	4618      	mov	r0, r3
 80132f8:	f001 f8fe 	bl	80144f8 <ip4_addr_isbroadcast_u32>
 80132fc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d105      	bne.n	801330e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013302:	68bb      	ldr	r3, [r7, #8]
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801330a:	2be0      	cmp	r3, #224	; 0xe0
 801330c:	d102      	bne.n	8013314 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801330e:	f06f 030f 	mvn.w	r3, #15
 8013312:	e06c      	b.n	80133ee <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013314:	78fb      	ldrb	r3, [r7, #3]
 8013316:	68fa      	ldr	r2, [r7, #12]
 8013318:	4619      	mov	r1, r3
 801331a:	68b8      	ldr	r0, [r7, #8]
 801331c:	f7ff fe56 	bl	8012fcc <etharp_find_entry>
 8013320:	4603      	mov	r3, r0
 8013322:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013324:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013328:	2b00      	cmp	r3, #0
 801332a:	da02      	bge.n	8013332 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801332c:	8afb      	ldrh	r3, [r7, #22]
 801332e:	b25b      	sxtb	r3, r3
 8013330:	e05d      	b.n	80133ee <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013332:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013336:	4933      	ldr	r1, [pc, #204]	; (8013404 <etharp_update_arp_entry+0x148>)
 8013338:	4613      	mov	r3, r2
 801333a:	005b      	lsls	r3, r3, #1
 801333c:	4413      	add	r3, r2
 801333e:	00db      	lsls	r3, r3, #3
 8013340:	440b      	add	r3, r1
 8013342:	3314      	adds	r3, #20
 8013344:	2202      	movs	r2, #2
 8013346:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013348:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801334c:	492d      	ldr	r1, [pc, #180]	; (8013404 <etharp_update_arp_entry+0x148>)
 801334e:	4613      	mov	r3, r2
 8013350:	005b      	lsls	r3, r3, #1
 8013352:	4413      	add	r3, r2
 8013354:	00db      	lsls	r3, r3, #3
 8013356:	440b      	add	r3, r1
 8013358:	3308      	adds	r3, #8
 801335a:	68fa      	ldr	r2, [r7, #12]
 801335c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801335e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013362:	4613      	mov	r3, r2
 8013364:	005b      	lsls	r3, r3, #1
 8013366:	4413      	add	r3, r2
 8013368:	00db      	lsls	r3, r3, #3
 801336a:	3308      	adds	r3, #8
 801336c:	4a25      	ldr	r2, [pc, #148]	; (8013404 <etharp_update_arp_entry+0x148>)
 801336e:	4413      	add	r3, r2
 8013370:	3304      	adds	r3, #4
 8013372:	2206      	movs	r2, #6
 8013374:	6879      	ldr	r1, [r7, #4]
 8013376:	4618      	mov	r0, r3
 8013378:	f002 f844 	bl	8015404 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801337c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013380:	4920      	ldr	r1, [pc, #128]	; (8013404 <etharp_update_arp_entry+0x148>)
 8013382:	4613      	mov	r3, r2
 8013384:	005b      	lsls	r3, r3, #1
 8013386:	4413      	add	r3, r2
 8013388:	00db      	lsls	r3, r3, #3
 801338a:	440b      	add	r3, r1
 801338c:	3312      	adds	r3, #18
 801338e:	2200      	movs	r2, #0
 8013390:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013392:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013396:	491b      	ldr	r1, [pc, #108]	; (8013404 <etharp_update_arp_entry+0x148>)
 8013398:	4613      	mov	r3, r2
 801339a:	005b      	lsls	r3, r3, #1
 801339c:	4413      	add	r3, r2
 801339e:	00db      	lsls	r3, r3, #3
 80133a0:	440b      	add	r3, r1
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d021      	beq.n	80133ec <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80133a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133ac:	4915      	ldr	r1, [pc, #84]	; (8013404 <etharp_update_arp_entry+0x148>)
 80133ae:	4613      	mov	r3, r2
 80133b0:	005b      	lsls	r3, r3, #1
 80133b2:	4413      	add	r3, r2
 80133b4:	00db      	lsls	r3, r3, #3
 80133b6:	440b      	add	r3, r1
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80133bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80133c0:	4910      	ldr	r1, [pc, #64]	; (8013404 <etharp_update_arp_entry+0x148>)
 80133c2:	4613      	mov	r3, r2
 80133c4:	005b      	lsls	r3, r3, #1
 80133c6:	4413      	add	r3, r2
 80133c8:	00db      	lsls	r3, r3, #3
 80133ca:	440b      	add	r3, r1
 80133cc:	2200      	movs	r2, #0
 80133ce:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80133d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80133da:	9300      	str	r3, [sp, #0]
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6939      	ldr	r1, [r7, #16]
 80133e0:	68f8      	ldr	r0, [r7, #12]
 80133e2:	f001 ff91 	bl	8015308 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80133e6:	6938      	ldr	r0, [r7, #16]
 80133e8:	f7f8 ff2e 	bl	800c248 <pbuf_free>
  }
  return ERR_OK;
 80133ec:	2300      	movs	r3, #0
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3718      	adds	r7, #24
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	08019eac 	.word	0x08019eac
 80133fc:	08019fa4 	.word	0x08019fa4
 8013400:	08019f24 	.word	0x08019f24
 8013404:	20000a58 	.word	0x20000a58

08013408 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013410:	2300      	movs	r3, #0
 8013412:	60fb      	str	r3, [r7, #12]
 8013414:	e01e      	b.n	8013454 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013416:	4913      	ldr	r1, [pc, #76]	; (8013464 <etharp_cleanup_netif+0x5c>)
 8013418:	68fa      	ldr	r2, [r7, #12]
 801341a:	4613      	mov	r3, r2
 801341c:	005b      	lsls	r3, r3, #1
 801341e:	4413      	add	r3, r2
 8013420:	00db      	lsls	r3, r3, #3
 8013422:	440b      	add	r3, r1
 8013424:	3314      	adds	r3, #20
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801342a:	7afb      	ldrb	r3, [r7, #11]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d00e      	beq.n	801344e <etharp_cleanup_netif+0x46>
 8013430:	490c      	ldr	r1, [pc, #48]	; (8013464 <etharp_cleanup_netif+0x5c>)
 8013432:	68fa      	ldr	r2, [r7, #12]
 8013434:	4613      	mov	r3, r2
 8013436:	005b      	lsls	r3, r3, #1
 8013438:	4413      	add	r3, r2
 801343a:	00db      	lsls	r3, r3, #3
 801343c:	440b      	add	r3, r1
 801343e:	3308      	adds	r3, #8
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	687a      	ldr	r2, [r7, #4]
 8013444:	429a      	cmp	r2, r3
 8013446:	d102      	bne.n	801344e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013448:	68f8      	ldr	r0, [r7, #12]
 801344a:	f7ff fce5 	bl	8012e18 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	3301      	adds	r3, #1
 8013452:	60fb      	str	r3, [r7, #12]
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	2b09      	cmp	r3, #9
 8013458:	dddd      	ble.n	8013416 <etharp_cleanup_netif+0xe>
    }
  }
}
 801345a:	bf00      	nop
 801345c:	bf00      	nop
 801345e:	3710      	adds	r7, #16
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}
 8013464:	20000a58 	.word	0x20000a58

08013468 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013468:	b5b0      	push	{r4, r5, r7, lr}
 801346a:	b08a      	sub	sp, #40	; 0x28
 801346c:	af04      	add	r7, sp, #16
 801346e:	6078      	str	r0, [r7, #4]
 8013470:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d107      	bne.n	8013488 <etharp_input+0x20>
 8013478:	4b3d      	ldr	r3, [pc, #244]	; (8013570 <etharp_input+0x108>)
 801347a:	f240 228a 	movw	r2, #650	; 0x28a
 801347e:	493d      	ldr	r1, [pc, #244]	; (8013574 <etharp_input+0x10c>)
 8013480:	483d      	ldr	r0, [pc, #244]	; (8013578 <etharp_input+0x110>)
 8013482:	f001 ffef 	bl	8015464 <iprintf>
 8013486:	e06f      	b.n	8013568 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	685b      	ldr	r3, [r3, #4]
 801348c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	881b      	ldrh	r3, [r3, #0]
 8013492:	b29b      	uxth	r3, r3
 8013494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013498:	d10c      	bne.n	80134b4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801349e:	2b06      	cmp	r3, #6
 80134a0:	d108      	bne.n	80134b4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80134a6:	2b04      	cmp	r3, #4
 80134a8:	d104      	bne.n	80134b4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	885b      	ldrh	r3, [r3, #2]
 80134ae:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80134b0:	2b08      	cmp	r3, #8
 80134b2:	d003      	beq.n	80134bc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f7f8 fec7 	bl	800c248 <pbuf_free>
    return;
 80134ba:	e055      	b.n	8013568 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80134bc:	693b      	ldr	r3, [r7, #16]
 80134be:	330e      	adds	r3, #14
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	3318      	adds	r3, #24
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	3304      	adds	r3, #4
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d102      	bne.n	80134dc <etharp_input+0x74>
    for_us = 0;
 80134d6:	2300      	movs	r3, #0
 80134d8:	75fb      	strb	r3, [r7, #23]
 80134da:	e009      	b.n	80134f0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80134dc:	68ba      	ldr	r2, [r7, #8]
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	3304      	adds	r3, #4
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	bf0c      	ite	eq
 80134e8:	2301      	moveq	r3, #1
 80134ea:	2300      	movne	r3, #0
 80134ec:	b2db      	uxtb	r3, r3
 80134ee:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	f103 0208 	add.w	r2, r3, #8
 80134f6:	7dfb      	ldrb	r3, [r7, #23]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d001      	beq.n	8013500 <etharp_input+0x98>
 80134fc:	2301      	movs	r3, #1
 80134fe:	e000      	b.n	8013502 <etharp_input+0x9a>
 8013500:	2302      	movs	r3, #2
 8013502:	f107 010c 	add.w	r1, r7, #12
 8013506:	6838      	ldr	r0, [r7, #0]
 8013508:	f7ff fed8 	bl	80132bc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	88db      	ldrh	r3, [r3, #6]
 8013510:	b29b      	uxth	r3, r3
 8013512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013516:	d003      	beq.n	8013520 <etharp_input+0xb8>
 8013518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801351c:	d01e      	beq.n	801355c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801351e:	e020      	b.n	8013562 <etharp_input+0xfa>
      if (for_us) {
 8013520:	7dfb      	ldrb	r3, [r7, #23]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d01c      	beq.n	8013560 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801353c:	693a      	ldr	r2, [r7, #16]
 801353e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013540:	2102      	movs	r1, #2
 8013542:	9103      	str	r1, [sp, #12]
 8013544:	f107 010c 	add.w	r1, r7, #12
 8013548:	9102      	str	r1, [sp, #8]
 801354a:	9201      	str	r2, [sp, #4]
 801354c:	9300      	str	r3, [sp, #0]
 801354e:	462b      	mov	r3, r5
 8013550:	4622      	mov	r2, r4
 8013552:	4601      	mov	r1, r0
 8013554:	6838      	ldr	r0, [r7, #0]
 8013556:	f000 faeb 	bl	8013b30 <etharp_raw>
      break;
 801355a:	e001      	b.n	8013560 <etharp_input+0xf8>
      break;
 801355c:	bf00      	nop
 801355e:	e000      	b.n	8013562 <etharp_input+0xfa>
      break;
 8013560:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f7f8 fe70 	bl	800c248 <pbuf_free>
}
 8013568:	3718      	adds	r7, #24
 801356a:	46bd      	mov	sp, r7
 801356c:	bdb0      	pop	{r4, r5, r7, pc}
 801356e:	bf00      	nop
 8013570:	08019eac 	.word	0x08019eac
 8013574:	08019ffc 	.word	0x08019ffc
 8013578:	08019f24 	.word	0x08019f24

0801357c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b086      	sub	sp, #24
 8013580:	af02      	add	r7, sp, #8
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	60b9      	str	r1, [r7, #8]
 8013586:	4613      	mov	r3, r2
 8013588:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801358a:	79fa      	ldrb	r2, [r7, #7]
 801358c:	4944      	ldr	r1, [pc, #272]	; (80136a0 <etharp_output_to_arp_index+0x124>)
 801358e:	4613      	mov	r3, r2
 8013590:	005b      	lsls	r3, r3, #1
 8013592:	4413      	add	r3, r2
 8013594:	00db      	lsls	r3, r3, #3
 8013596:	440b      	add	r3, r1
 8013598:	3314      	adds	r3, #20
 801359a:	781b      	ldrb	r3, [r3, #0]
 801359c:	2b01      	cmp	r3, #1
 801359e:	d806      	bhi.n	80135ae <etharp_output_to_arp_index+0x32>
 80135a0:	4b40      	ldr	r3, [pc, #256]	; (80136a4 <etharp_output_to_arp_index+0x128>)
 80135a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80135a6:	4940      	ldr	r1, [pc, #256]	; (80136a8 <etharp_output_to_arp_index+0x12c>)
 80135a8:	4840      	ldr	r0, [pc, #256]	; (80136ac <etharp_output_to_arp_index+0x130>)
 80135aa:	f001 ff5b 	bl	8015464 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80135ae:	79fa      	ldrb	r2, [r7, #7]
 80135b0:	493b      	ldr	r1, [pc, #236]	; (80136a0 <etharp_output_to_arp_index+0x124>)
 80135b2:	4613      	mov	r3, r2
 80135b4:	005b      	lsls	r3, r3, #1
 80135b6:	4413      	add	r3, r2
 80135b8:	00db      	lsls	r3, r3, #3
 80135ba:	440b      	add	r3, r1
 80135bc:	3314      	adds	r3, #20
 80135be:	781b      	ldrb	r3, [r3, #0]
 80135c0:	2b02      	cmp	r3, #2
 80135c2:	d153      	bne.n	801366c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80135c4:	79fa      	ldrb	r2, [r7, #7]
 80135c6:	4936      	ldr	r1, [pc, #216]	; (80136a0 <etharp_output_to_arp_index+0x124>)
 80135c8:	4613      	mov	r3, r2
 80135ca:	005b      	lsls	r3, r3, #1
 80135cc:	4413      	add	r3, r2
 80135ce:	00db      	lsls	r3, r3, #3
 80135d0:	440b      	add	r3, r1
 80135d2:	3312      	adds	r3, #18
 80135d4:	881b      	ldrh	r3, [r3, #0]
 80135d6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80135da:	d919      	bls.n	8013610 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80135dc:	79fa      	ldrb	r2, [r7, #7]
 80135de:	4613      	mov	r3, r2
 80135e0:	005b      	lsls	r3, r3, #1
 80135e2:	4413      	add	r3, r2
 80135e4:	00db      	lsls	r3, r3, #3
 80135e6:	4a2e      	ldr	r2, [pc, #184]	; (80136a0 <etharp_output_to_arp_index+0x124>)
 80135e8:	4413      	add	r3, r2
 80135ea:	3304      	adds	r3, #4
 80135ec:	4619      	mov	r1, r3
 80135ee:	68f8      	ldr	r0, [r7, #12]
 80135f0:	f000 fb4c 	bl	8013c8c <etharp_request>
 80135f4:	4603      	mov	r3, r0
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d138      	bne.n	801366c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80135fa:	79fa      	ldrb	r2, [r7, #7]
 80135fc:	4928      	ldr	r1, [pc, #160]	; (80136a0 <etharp_output_to_arp_index+0x124>)
 80135fe:	4613      	mov	r3, r2
 8013600:	005b      	lsls	r3, r3, #1
 8013602:	4413      	add	r3, r2
 8013604:	00db      	lsls	r3, r3, #3
 8013606:	440b      	add	r3, r1
 8013608:	3314      	adds	r3, #20
 801360a:	2203      	movs	r2, #3
 801360c:	701a      	strb	r2, [r3, #0]
 801360e:	e02d      	b.n	801366c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013610:	79fa      	ldrb	r2, [r7, #7]
 8013612:	4923      	ldr	r1, [pc, #140]	; (80136a0 <etharp_output_to_arp_index+0x124>)
 8013614:	4613      	mov	r3, r2
 8013616:	005b      	lsls	r3, r3, #1
 8013618:	4413      	add	r3, r2
 801361a:	00db      	lsls	r3, r3, #3
 801361c:	440b      	add	r3, r1
 801361e:	3312      	adds	r3, #18
 8013620:	881b      	ldrh	r3, [r3, #0]
 8013622:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013626:	d321      	bcc.n	801366c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013628:	79fa      	ldrb	r2, [r7, #7]
 801362a:	4613      	mov	r3, r2
 801362c:	005b      	lsls	r3, r3, #1
 801362e:	4413      	add	r3, r2
 8013630:	00db      	lsls	r3, r3, #3
 8013632:	4a1b      	ldr	r2, [pc, #108]	; (80136a0 <etharp_output_to_arp_index+0x124>)
 8013634:	4413      	add	r3, r2
 8013636:	1d19      	adds	r1, r3, #4
 8013638:	79fa      	ldrb	r2, [r7, #7]
 801363a:	4613      	mov	r3, r2
 801363c:	005b      	lsls	r3, r3, #1
 801363e:	4413      	add	r3, r2
 8013640:	00db      	lsls	r3, r3, #3
 8013642:	3308      	adds	r3, #8
 8013644:	4a16      	ldr	r2, [pc, #88]	; (80136a0 <etharp_output_to_arp_index+0x124>)
 8013646:	4413      	add	r3, r2
 8013648:	3304      	adds	r3, #4
 801364a:	461a      	mov	r2, r3
 801364c:	68f8      	ldr	r0, [r7, #12]
 801364e:	f000 fafb 	bl	8013c48 <etharp_request_dst>
 8013652:	4603      	mov	r3, r0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d109      	bne.n	801366c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013658:	79fa      	ldrb	r2, [r7, #7]
 801365a:	4911      	ldr	r1, [pc, #68]	; (80136a0 <etharp_output_to_arp_index+0x124>)
 801365c:	4613      	mov	r3, r2
 801365e:	005b      	lsls	r3, r3, #1
 8013660:	4413      	add	r3, r2
 8013662:	00db      	lsls	r3, r3, #3
 8013664:	440b      	add	r3, r1
 8013666:	3314      	adds	r3, #20
 8013668:	2203      	movs	r2, #3
 801366a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013672:	79fa      	ldrb	r2, [r7, #7]
 8013674:	4613      	mov	r3, r2
 8013676:	005b      	lsls	r3, r3, #1
 8013678:	4413      	add	r3, r2
 801367a:	00db      	lsls	r3, r3, #3
 801367c:	3308      	adds	r3, #8
 801367e:	4a08      	ldr	r2, [pc, #32]	; (80136a0 <etharp_output_to_arp_index+0x124>)
 8013680:	4413      	add	r3, r2
 8013682:	3304      	adds	r3, #4
 8013684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013688:	9200      	str	r2, [sp, #0]
 801368a:	460a      	mov	r2, r1
 801368c:	68b9      	ldr	r1, [r7, #8]
 801368e:	68f8      	ldr	r0, [r7, #12]
 8013690:	f001 fe3a 	bl	8015308 <ethernet_output>
 8013694:	4603      	mov	r3, r0
}
 8013696:	4618      	mov	r0, r3
 8013698:	3710      	adds	r7, #16
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
 801369e:	bf00      	nop
 80136a0:	20000a58 	.word	0x20000a58
 80136a4:	08019eac 	.word	0x08019eac
 80136a8:	0801a01c 	.word	0x0801a01c
 80136ac:	08019f24 	.word	0x08019f24

080136b0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b08a      	sub	sp, #40	; 0x28
 80136b4:	af02      	add	r7, sp, #8
 80136b6:	60f8      	str	r0, [r7, #12]
 80136b8:	60b9      	str	r1, [r7, #8]
 80136ba:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d106      	bne.n	80136d4 <etharp_output+0x24>
 80136c6:	4b73      	ldr	r3, [pc, #460]	; (8013894 <etharp_output+0x1e4>)
 80136c8:	f240 321e 	movw	r2, #798	; 0x31e
 80136cc:	4972      	ldr	r1, [pc, #456]	; (8013898 <etharp_output+0x1e8>)
 80136ce:	4873      	ldr	r0, [pc, #460]	; (801389c <etharp_output+0x1ec>)
 80136d0:	f001 fec8 	bl	8015464 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d106      	bne.n	80136e8 <etharp_output+0x38>
 80136da:	4b6e      	ldr	r3, [pc, #440]	; (8013894 <etharp_output+0x1e4>)
 80136dc:	f240 321f 	movw	r2, #799	; 0x31f
 80136e0:	496f      	ldr	r1, [pc, #444]	; (80138a0 <etharp_output+0x1f0>)
 80136e2:	486e      	ldr	r0, [pc, #440]	; (801389c <etharp_output+0x1ec>)
 80136e4:	f001 febe 	bl	8015464 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d106      	bne.n	80136fc <etharp_output+0x4c>
 80136ee:	4b69      	ldr	r3, [pc, #420]	; (8013894 <etharp_output+0x1e4>)
 80136f0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80136f4:	496b      	ldr	r1, [pc, #428]	; (80138a4 <etharp_output+0x1f4>)
 80136f6:	4869      	ldr	r0, [pc, #420]	; (801389c <etharp_output+0x1ec>)
 80136f8:	f001 feb4 	bl	8015464 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	68f9      	ldr	r1, [r7, #12]
 8013702:	4618      	mov	r0, r3
 8013704:	f000 fef8 	bl	80144f8 <ip4_addr_isbroadcast_u32>
 8013708:	4603      	mov	r3, r0
 801370a:	2b00      	cmp	r3, #0
 801370c:	d002      	beq.n	8013714 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801370e:	4b66      	ldr	r3, [pc, #408]	; (80138a8 <etharp_output+0x1f8>)
 8013710:	61fb      	str	r3, [r7, #28]
 8013712:	e0af      	b.n	8013874 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801371c:	2be0      	cmp	r3, #224	; 0xe0
 801371e:	d118      	bne.n	8013752 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013720:	2301      	movs	r3, #1
 8013722:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013724:	2300      	movs	r3, #0
 8013726:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013728:	235e      	movs	r3, #94	; 0x5e
 801372a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	3301      	adds	r3, #1
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013736:	b2db      	uxtb	r3, r3
 8013738:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	3302      	adds	r3, #2
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	3303      	adds	r3, #3
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801374a:	f107 0310 	add.w	r3, r7, #16
 801374e:	61fb      	str	r3, [r7, #28]
 8013750:	e090      	b.n	8013874 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	681a      	ldr	r2, [r3, #0]
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	3304      	adds	r3, #4
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	405a      	eors	r2, r3
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	3308      	adds	r3, #8
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	4013      	ands	r3, r2
 8013766:	2b00      	cmp	r3, #0
 8013768:	d012      	beq.n	8013790 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013770:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013774:	4293      	cmp	r3, r2
 8013776:	d00b      	beq.n	8013790 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	330c      	adds	r3, #12
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d003      	beq.n	801378a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	330c      	adds	r3, #12
 8013786:	61bb      	str	r3, [r7, #24]
 8013788:	e002      	b.n	8013790 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801378a:	f06f 0303 	mvn.w	r3, #3
 801378e:	e07d      	b.n	801388c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013790:	4b46      	ldr	r3, [pc, #280]	; (80138ac <etharp_output+0x1fc>)
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	4619      	mov	r1, r3
 8013796:	4a46      	ldr	r2, [pc, #280]	; (80138b0 <etharp_output+0x200>)
 8013798:	460b      	mov	r3, r1
 801379a:	005b      	lsls	r3, r3, #1
 801379c:	440b      	add	r3, r1
 801379e:	00db      	lsls	r3, r3, #3
 80137a0:	4413      	add	r3, r2
 80137a2:	3314      	adds	r3, #20
 80137a4:	781b      	ldrb	r3, [r3, #0]
 80137a6:	2b01      	cmp	r3, #1
 80137a8:	d925      	bls.n	80137f6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80137aa:	4b40      	ldr	r3, [pc, #256]	; (80138ac <etharp_output+0x1fc>)
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	4619      	mov	r1, r3
 80137b0:	4a3f      	ldr	r2, [pc, #252]	; (80138b0 <etharp_output+0x200>)
 80137b2:	460b      	mov	r3, r1
 80137b4:	005b      	lsls	r3, r3, #1
 80137b6:	440b      	add	r3, r1
 80137b8:	00db      	lsls	r3, r3, #3
 80137ba:	4413      	add	r3, r2
 80137bc:	3308      	adds	r3, #8
 80137be:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80137c0:	68fa      	ldr	r2, [r7, #12]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	d117      	bne.n	80137f6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80137c6:	69bb      	ldr	r3, [r7, #24]
 80137c8:	681a      	ldr	r2, [r3, #0]
 80137ca:	4b38      	ldr	r3, [pc, #224]	; (80138ac <etharp_output+0x1fc>)
 80137cc:	781b      	ldrb	r3, [r3, #0]
 80137ce:	4618      	mov	r0, r3
 80137d0:	4937      	ldr	r1, [pc, #220]	; (80138b0 <etharp_output+0x200>)
 80137d2:	4603      	mov	r3, r0
 80137d4:	005b      	lsls	r3, r3, #1
 80137d6:	4403      	add	r3, r0
 80137d8:	00db      	lsls	r3, r3, #3
 80137da:	440b      	add	r3, r1
 80137dc:	3304      	adds	r3, #4
 80137de:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d108      	bne.n	80137f6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80137e4:	4b31      	ldr	r3, [pc, #196]	; (80138ac <etharp_output+0x1fc>)
 80137e6:	781b      	ldrb	r3, [r3, #0]
 80137e8:	461a      	mov	r2, r3
 80137ea:	68b9      	ldr	r1, [r7, #8]
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	f7ff fec5 	bl	801357c <etharp_output_to_arp_index>
 80137f2:	4603      	mov	r3, r0
 80137f4:	e04a      	b.n	801388c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80137f6:	2300      	movs	r3, #0
 80137f8:	75fb      	strb	r3, [r7, #23]
 80137fa:	e031      	b.n	8013860 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80137fc:	7dfa      	ldrb	r2, [r7, #23]
 80137fe:	492c      	ldr	r1, [pc, #176]	; (80138b0 <etharp_output+0x200>)
 8013800:	4613      	mov	r3, r2
 8013802:	005b      	lsls	r3, r3, #1
 8013804:	4413      	add	r3, r2
 8013806:	00db      	lsls	r3, r3, #3
 8013808:	440b      	add	r3, r1
 801380a:	3314      	adds	r3, #20
 801380c:	781b      	ldrb	r3, [r3, #0]
 801380e:	2b01      	cmp	r3, #1
 8013810:	d923      	bls.n	801385a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013812:	7dfa      	ldrb	r2, [r7, #23]
 8013814:	4926      	ldr	r1, [pc, #152]	; (80138b0 <etharp_output+0x200>)
 8013816:	4613      	mov	r3, r2
 8013818:	005b      	lsls	r3, r3, #1
 801381a:	4413      	add	r3, r2
 801381c:	00db      	lsls	r3, r3, #3
 801381e:	440b      	add	r3, r1
 8013820:	3308      	adds	r3, #8
 8013822:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013824:	68fa      	ldr	r2, [r7, #12]
 8013826:	429a      	cmp	r2, r3
 8013828:	d117      	bne.n	801385a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	6819      	ldr	r1, [r3, #0]
 801382e:	7dfa      	ldrb	r2, [r7, #23]
 8013830:	481f      	ldr	r0, [pc, #124]	; (80138b0 <etharp_output+0x200>)
 8013832:	4613      	mov	r3, r2
 8013834:	005b      	lsls	r3, r3, #1
 8013836:	4413      	add	r3, r2
 8013838:	00db      	lsls	r3, r3, #3
 801383a:	4403      	add	r3, r0
 801383c:	3304      	adds	r3, #4
 801383e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013840:	4299      	cmp	r1, r3
 8013842:	d10a      	bne.n	801385a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013844:	4a19      	ldr	r2, [pc, #100]	; (80138ac <etharp_output+0x1fc>)
 8013846:	7dfb      	ldrb	r3, [r7, #23]
 8013848:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801384a:	7dfb      	ldrb	r3, [r7, #23]
 801384c:	461a      	mov	r2, r3
 801384e:	68b9      	ldr	r1, [r7, #8]
 8013850:	68f8      	ldr	r0, [r7, #12]
 8013852:	f7ff fe93 	bl	801357c <etharp_output_to_arp_index>
 8013856:	4603      	mov	r3, r0
 8013858:	e018      	b.n	801388c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801385a:	7dfb      	ldrb	r3, [r7, #23]
 801385c:	3301      	adds	r3, #1
 801385e:	75fb      	strb	r3, [r7, #23]
 8013860:	7dfb      	ldrb	r3, [r7, #23]
 8013862:	2b09      	cmp	r3, #9
 8013864:	d9ca      	bls.n	80137fc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013866:	68ba      	ldr	r2, [r7, #8]
 8013868:	69b9      	ldr	r1, [r7, #24]
 801386a:	68f8      	ldr	r0, [r7, #12]
 801386c:	f000 f822 	bl	80138b4 <etharp_query>
 8013870:	4603      	mov	r3, r0
 8013872:	e00b      	b.n	801388c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801387a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801387e:	9300      	str	r3, [sp, #0]
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	68b9      	ldr	r1, [r7, #8]
 8013884:	68f8      	ldr	r0, [r7, #12]
 8013886:	f001 fd3f 	bl	8015308 <ethernet_output>
 801388a:	4603      	mov	r3, r0
}
 801388c:	4618      	mov	r0, r3
 801388e:	3720      	adds	r7, #32
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}
 8013894:	08019eac 	.word	0x08019eac
 8013898:	08019ffc 	.word	0x08019ffc
 801389c:	08019f24 	.word	0x08019f24
 80138a0:	0801a04c 	.word	0x0801a04c
 80138a4:	08019fec 	.word	0x08019fec
 80138a8:	08021634 	.word	0x08021634
 80138ac:	20000b48 	.word	0x20000b48
 80138b0:	20000a58 	.word	0x20000a58

080138b4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b08c      	sub	sp, #48	; 0x30
 80138b8:	af02      	add	r7, sp, #8
 80138ba:	60f8      	str	r0, [r7, #12]
 80138bc:	60b9      	str	r1, [r7, #8]
 80138be:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	3326      	adds	r3, #38	; 0x26
 80138c4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80138c6:	23ff      	movs	r3, #255	; 0xff
 80138c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80138cc:	2300      	movs	r3, #0
 80138ce:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	68f9      	ldr	r1, [r7, #12]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f000 fe0e 	bl	80144f8 <ip4_addr_isbroadcast_u32>
 80138dc:	4603      	mov	r3, r0
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d10c      	bne.n	80138fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80138ea:	2be0      	cmp	r3, #224	; 0xe0
 80138ec:	d006      	beq.n	80138fc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d003      	beq.n	80138fc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80138f4:	68bb      	ldr	r3, [r7, #8]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d102      	bne.n	8013902 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80138fc:	f06f 030f 	mvn.w	r3, #15
 8013900:	e101      	b.n	8013b06 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013902:	68fa      	ldr	r2, [r7, #12]
 8013904:	2101      	movs	r1, #1
 8013906:	68b8      	ldr	r0, [r7, #8]
 8013908:	f7ff fb60 	bl	8012fcc <etharp_find_entry>
 801390c:	4603      	mov	r3, r0
 801390e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013910:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013914:	2b00      	cmp	r3, #0
 8013916:	da02      	bge.n	801391e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013918:	8a7b      	ldrh	r3, [r7, #18]
 801391a:	b25b      	sxtb	r3, r3
 801391c:	e0f3      	b.n	8013b06 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801391e:	8a7b      	ldrh	r3, [r7, #18]
 8013920:	2b7e      	cmp	r3, #126	; 0x7e
 8013922:	d906      	bls.n	8013932 <etharp_query+0x7e>
 8013924:	4b7a      	ldr	r3, [pc, #488]	; (8013b10 <etharp_query+0x25c>)
 8013926:	f240 32c1 	movw	r2, #961	; 0x3c1
 801392a:	497a      	ldr	r1, [pc, #488]	; (8013b14 <etharp_query+0x260>)
 801392c:	487a      	ldr	r0, [pc, #488]	; (8013b18 <etharp_query+0x264>)
 801392e:	f001 fd99 	bl	8015464 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013932:	8a7b      	ldrh	r3, [r7, #18]
 8013934:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013936:	7c7a      	ldrb	r2, [r7, #17]
 8013938:	4978      	ldr	r1, [pc, #480]	; (8013b1c <etharp_query+0x268>)
 801393a:	4613      	mov	r3, r2
 801393c:	005b      	lsls	r3, r3, #1
 801393e:	4413      	add	r3, r2
 8013940:	00db      	lsls	r3, r3, #3
 8013942:	440b      	add	r3, r1
 8013944:	3314      	adds	r3, #20
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d115      	bne.n	8013978 <etharp_query+0xc4>
    is_new_entry = 1;
 801394c:	2301      	movs	r3, #1
 801394e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013950:	7c7a      	ldrb	r2, [r7, #17]
 8013952:	4972      	ldr	r1, [pc, #456]	; (8013b1c <etharp_query+0x268>)
 8013954:	4613      	mov	r3, r2
 8013956:	005b      	lsls	r3, r3, #1
 8013958:	4413      	add	r3, r2
 801395a:	00db      	lsls	r3, r3, #3
 801395c:	440b      	add	r3, r1
 801395e:	3314      	adds	r3, #20
 8013960:	2201      	movs	r2, #1
 8013962:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013964:	7c7a      	ldrb	r2, [r7, #17]
 8013966:	496d      	ldr	r1, [pc, #436]	; (8013b1c <etharp_query+0x268>)
 8013968:	4613      	mov	r3, r2
 801396a:	005b      	lsls	r3, r3, #1
 801396c:	4413      	add	r3, r2
 801396e:	00db      	lsls	r3, r3, #3
 8013970:	440b      	add	r3, r1
 8013972:	3308      	adds	r3, #8
 8013974:	68fa      	ldr	r2, [r7, #12]
 8013976:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013978:	7c7a      	ldrb	r2, [r7, #17]
 801397a:	4968      	ldr	r1, [pc, #416]	; (8013b1c <etharp_query+0x268>)
 801397c:	4613      	mov	r3, r2
 801397e:	005b      	lsls	r3, r3, #1
 8013980:	4413      	add	r3, r2
 8013982:	00db      	lsls	r3, r3, #3
 8013984:	440b      	add	r3, r1
 8013986:	3314      	adds	r3, #20
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	2b01      	cmp	r3, #1
 801398c:	d011      	beq.n	80139b2 <etharp_query+0xfe>
 801398e:	7c7a      	ldrb	r2, [r7, #17]
 8013990:	4962      	ldr	r1, [pc, #392]	; (8013b1c <etharp_query+0x268>)
 8013992:	4613      	mov	r3, r2
 8013994:	005b      	lsls	r3, r3, #1
 8013996:	4413      	add	r3, r2
 8013998:	00db      	lsls	r3, r3, #3
 801399a:	440b      	add	r3, r1
 801399c:	3314      	adds	r3, #20
 801399e:	781b      	ldrb	r3, [r3, #0]
 80139a0:	2b01      	cmp	r3, #1
 80139a2:	d806      	bhi.n	80139b2 <etharp_query+0xfe>
 80139a4:	4b5a      	ldr	r3, [pc, #360]	; (8013b10 <etharp_query+0x25c>)
 80139a6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80139aa:	495d      	ldr	r1, [pc, #372]	; (8013b20 <etharp_query+0x26c>)
 80139ac:	485a      	ldr	r0, [pc, #360]	; (8013b18 <etharp_query+0x264>)
 80139ae:	f001 fd59 	bl	8015464 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80139b2:	6a3b      	ldr	r3, [r7, #32]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d102      	bne.n	80139be <etharp_query+0x10a>
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d10c      	bne.n	80139d8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80139be:	68b9      	ldr	r1, [r7, #8]
 80139c0:	68f8      	ldr	r0, [r7, #12]
 80139c2:	f000 f963 	bl	8013c8c <etharp_request>
 80139c6:	4603      	mov	r3, r0
 80139c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d102      	bne.n	80139d8 <etharp_query+0x124>
      return result;
 80139d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80139d6:	e096      	b.n	8013b06 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d106      	bne.n	80139ec <etharp_query+0x138>
 80139de:	4b4c      	ldr	r3, [pc, #304]	; (8013b10 <etharp_query+0x25c>)
 80139e0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80139e4:	494f      	ldr	r1, [pc, #316]	; (8013b24 <etharp_query+0x270>)
 80139e6:	484c      	ldr	r0, [pc, #304]	; (8013b18 <etharp_query+0x264>)
 80139e8:	f001 fd3c 	bl	8015464 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80139ec:	7c7a      	ldrb	r2, [r7, #17]
 80139ee:	494b      	ldr	r1, [pc, #300]	; (8013b1c <etharp_query+0x268>)
 80139f0:	4613      	mov	r3, r2
 80139f2:	005b      	lsls	r3, r3, #1
 80139f4:	4413      	add	r3, r2
 80139f6:	00db      	lsls	r3, r3, #3
 80139f8:	440b      	add	r3, r1
 80139fa:	3314      	adds	r3, #20
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d917      	bls.n	8013a32 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013a02:	4a49      	ldr	r2, [pc, #292]	; (8013b28 <etharp_query+0x274>)
 8013a04:	7c7b      	ldrb	r3, [r7, #17]
 8013a06:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013a08:	7c7a      	ldrb	r2, [r7, #17]
 8013a0a:	4613      	mov	r3, r2
 8013a0c:	005b      	lsls	r3, r3, #1
 8013a0e:	4413      	add	r3, r2
 8013a10:	00db      	lsls	r3, r3, #3
 8013a12:	3308      	adds	r3, #8
 8013a14:	4a41      	ldr	r2, [pc, #260]	; (8013b1c <etharp_query+0x268>)
 8013a16:	4413      	add	r3, r2
 8013a18:	3304      	adds	r3, #4
 8013a1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013a1e:	9200      	str	r2, [sp, #0]
 8013a20:	697a      	ldr	r2, [r7, #20]
 8013a22:	6879      	ldr	r1, [r7, #4]
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f001 fc6f 	bl	8015308 <ethernet_output>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a30:	e067      	b.n	8013b02 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013a32:	7c7a      	ldrb	r2, [r7, #17]
 8013a34:	4939      	ldr	r1, [pc, #228]	; (8013b1c <etharp_query+0x268>)
 8013a36:	4613      	mov	r3, r2
 8013a38:	005b      	lsls	r3, r3, #1
 8013a3a:	4413      	add	r3, r2
 8013a3c:	00db      	lsls	r3, r3, #3
 8013a3e:	440b      	add	r3, r1
 8013a40:	3314      	adds	r3, #20
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	2b01      	cmp	r3, #1
 8013a46:	d15c      	bne.n	8013b02 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013a50:	e01c      	b.n	8013a8c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013a52:	69fb      	ldr	r3, [r7, #28]
 8013a54:	895a      	ldrh	r2, [r3, #10]
 8013a56:	69fb      	ldr	r3, [r7, #28]
 8013a58:	891b      	ldrh	r3, [r3, #8]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d10a      	bne.n	8013a74 <etharp_query+0x1c0>
 8013a5e:	69fb      	ldr	r3, [r7, #28]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d006      	beq.n	8013a74 <etharp_query+0x1c0>
 8013a66:	4b2a      	ldr	r3, [pc, #168]	; (8013b10 <etharp_query+0x25c>)
 8013a68:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8013a6c:	492f      	ldr	r1, [pc, #188]	; (8013b2c <etharp_query+0x278>)
 8013a6e:	482a      	ldr	r0, [pc, #168]	; (8013b18 <etharp_query+0x264>)
 8013a70:	f001 fcf8 	bl	8015464 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	7b1b      	ldrb	r3, [r3, #12]
 8013a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d002      	beq.n	8013a86 <etharp_query+0x1d2>
        copy_needed = 1;
 8013a80:	2301      	movs	r3, #1
 8013a82:	61bb      	str	r3, [r7, #24]
        break;
 8013a84:	e005      	b.n	8013a92 <etharp_query+0x1de>
      }
      p = p->next;
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013a8c:	69fb      	ldr	r3, [r7, #28]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d1df      	bne.n	8013a52 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8013a92:	69bb      	ldr	r3, [r7, #24]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d007      	beq.n	8013aa8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013a9e:	200e      	movs	r0, #14
 8013aa0:	f7f8 fe2e 	bl	800c700 <pbuf_clone>
 8013aa4:	61f8      	str	r0, [r7, #28]
 8013aa6:	e004      	b.n	8013ab2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013aac:	69f8      	ldr	r0, [r7, #28]
 8013aae:	f7f8 fc6b 	bl	800c388 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013ab2:	69fb      	ldr	r3, [r7, #28]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d021      	beq.n	8013afc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013ab8:	7c7a      	ldrb	r2, [r7, #17]
 8013aba:	4918      	ldr	r1, [pc, #96]	; (8013b1c <etharp_query+0x268>)
 8013abc:	4613      	mov	r3, r2
 8013abe:	005b      	lsls	r3, r3, #1
 8013ac0:	4413      	add	r3, r2
 8013ac2:	00db      	lsls	r3, r3, #3
 8013ac4:	440b      	add	r3, r1
 8013ac6:	681b      	ldr	r3, [r3, #0]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d00a      	beq.n	8013ae2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013acc:	7c7a      	ldrb	r2, [r7, #17]
 8013ace:	4913      	ldr	r1, [pc, #76]	; (8013b1c <etharp_query+0x268>)
 8013ad0:	4613      	mov	r3, r2
 8013ad2:	005b      	lsls	r3, r3, #1
 8013ad4:	4413      	add	r3, r2
 8013ad6:	00db      	lsls	r3, r3, #3
 8013ad8:	440b      	add	r3, r1
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7f8 fbb3 	bl	800c248 <pbuf_free>
      }
      arp_table[i].q = p;
 8013ae2:	7c7a      	ldrb	r2, [r7, #17]
 8013ae4:	490d      	ldr	r1, [pc, #52]	; (8013b1c <etharp_query+0x268>)
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	005b      	lsls	r3, r3, #1
 8013aea:	4413      	add	r3, r2
 8013aec:	00db      	lsls	r3, r3, #3
 8013aee:	440b      	add	r3, r1
 8013af0:	69fa      	ldr	r2, [r7, #28]
 8013af2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013af4:	2300      	movs	r3, #0
 8013af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013afa:	e002      	b.n	8013b02 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013afc:	23ff      	movs	r3, #255	; 0xff
 8013afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013b02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3728      	adds	r7, #40	; 0x28
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	08019eac 	.word	0x08019eac
 8013b14:	0801a058 	.word	0x0801a058
 8013b18:	08019f24 	.word	0x08019f24
 8013b1c:	20000a58 	.word	0x20000a58
 8013b20:	0801a068 	.word	0x0801a068
 8013b24:	0801a04c 	.word	0x0801a04c
 8013b28:	20000b48 	.word	0x20000b48
 8013b2c:	0801a090 	.word	0x0801a090

08013b30 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b08a      	sub	sp, #40	; 0x28
 8013b34:	af02      	add	r7, sp, #8
 8013b36:	60f8      	str	r0, [r7, #12]
 8013b38:	60b9      	str	r1, [r7, #8]
 8013b3a:	607a      	str	r2, [r7, #4]
 8013b3c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d106      	bne.n	8013b56 <etharp_raw+0x26>
 8013b48:	4b3a      	ldr	r3, [pc, #232]	; (8013c34 <etharp_raw+0x104>)
 8013b4a:	f240 4257 	movw	r2, #1111	; 0x457
 8013b4e:	493a      	ldr	r1, [pc, #232]	; (8013c38 <etharp_raw+0x108>)
 8013b50:	483a      	ldr	r0, [pc, #232]	; (8013c3c <etharp_raw+0x10c>)
 8013b52:	f001 fc87 	bl	8015464 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013b56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b5a:	211c      	movs	r1, #28
 8013b5c:	200e      	movs	r0, #14
 8013b5e:	f7f8 f88f 	bl	800bc80 <pbuf_alloc>
 8013b62:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013b64:	69bb      	ldr	r3, [r7, #24]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d102      	bne.n	8013b70 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8013b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b6e:	e05d      	b.n	8013c2c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013b70:	69bb      	ldr	r3, [r7, #24]
 8013b72:	895b      	ldrh	r3, [r3, #10]
 8013b74:	2b1b      	cmp	r3, #27
 8013b76:	d806      	bhi.n	8013b86 <etharp_raw+0x56>
 8013b78:	4b2e      	ldr	r3, [pc, #184]	; (8013c34 <etharp_raw+0x104>)
 8013b7a:	f240 4262 	movw	r2, #1122	; 0x462
 8013b7e:	4930      	ldr	r1, [pc, #192]	; (8013c40 <etharp_raw+0x110>)
 8013b80:	482e      	ldr	r0, [pc, #184]	; (8013c3c <etharp_raw+0x10c>)
 8013b82:	f001 fc6f 	bl	8015464 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	685b      	ldr	r3, [r3, #4]
 8013b8a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8013b8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f7f6 ffc8 	bl	800ab24 <lwip_htons>
 8013b94:	4603      	mov	r3, r0
 8013b96:	461a      	mov	r2, r3
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013ba2:	2b06      	cmp	r3, #6
 8013ba4:	d006      	beq.n	8013bb4 <etharp_raw+0x84>
 8013ba6:	4b23      	ldr	r3, [pc, #140]	; (8013c34 <etharp_raw+0x104>)
 8013ba8:	f240 4269 	movw	r2, #1129	; 0x469
 8013bac:	4925      	ldr	r1, [pc, #148]	; (8013c44 <etharp_raw+0x114>)
 8013bae:	4823      	ldr	r0, [pc, #140]	; (8013c3c <etharp_raw+0x10c>)
 8013bb0:	f001 fc58 	bl	8015464 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	3308      	adds	r3, #8
 8013bb8:	2206      	movs	r2, #6
 8013bba:	6839      	ldr	r1, [r7, #0]
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	f001 fc21 	bl	8015404 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	3312      	adds	r3, #18
 8013bc6:	2206      	movs	r2, #6
 8013bc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f001 fc1a 	bl	8015404 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	330e      	adds	r3, #14
 8013bd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bd6:	6812      	ldr	r2, [r2, #0]
 8013bd8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	3318      	adds	r3, #24
 8013bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013be0:	6812      	ldr	r2, [r2, #0]
 8013be2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	2200      	movs	r2, #0
 8013be8:	701a      	strb	r2, [r3, #0]
 8013bea:	2200      	movs	r2, #0
 8013bec:	f042 0201 	orr.w	r2, r2, #1
 8013bf0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	f042 0208 	orr.w	r2, r2, #8
 8013bfa:	709a      	strb	r2, [r3, #2]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	2206      	movs	r2, #6
 8013c04:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	2204      	movs	r2, #4
 8013c0a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013c0c:	f640 0306 	movw	r3, #2054	; 0x806
 8013c10:	9300      	str	r3, [sp, #0]
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	68ba      	ldr	r2, [r7, #8]
 8013c16:	69b9      	ldr	r1, [r7, #24]
 8013c18:	68f8      	ldr	r0, [r7, #12]
 8013c1a:	f001 fb75 	bl	8015308 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013c1e:	69b8      	ldr	r0, [r7, #24]
 8013c20:	f7f8 fb12 	bl	800c248 <pbuf_free>
  p = NULL;
 8013c24:	2300      	movs	r3, #0
 8013c26:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013c28:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3720      	adds	r7, #32
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}
 8013c34:	08019eac 	.word	0x08019eac
 8013c38:	08019ffc 	.word	0x08019ffc
 8013c3c:	08019f24 	.word	0x08019f24
 8013c40:	0801a0ac 	.word	0x0801a0ac
 8013c44:	0801a0e0 	.word	0x0801a0e0

08013c48 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013c48:	b580      	push	{r7, lr}
 8013c4a:	b088      	sub	sp, #32
 8013c4c:	af04      	add	r7, sp, #16
 8013c4e:	60f8      	str	r0, [r7, #12]
 8013c50:	60b9      	str	r1, [r7, #8]
 8013c52:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013c64:	2201      	movs	r2, #1
 8013c66:	9203      	str	r2, [sp, #12]
 8013c68:	68ba      	ldr	r2, [r7, #8]
 8013c6a:	9202      	str	r2, [sp, #8]
 8013c6c:	4a06      	ldr	r2, [pc, #24]	; (8013c88 <etharp_request_dst+0x40>)
 8013c6e:	9201      	str	r2, [sp, #4]
 8013c70:	9300      	str	r3, [sp, #0]
 8013c72:	4603      	mov	r3, r0
 8013c74:	687a      	ldr	r2, [r7, #4]
 8013c76:	68f8      	ldr	r0, [r7, #12]
 8013c78:	f7ff ff5a 	bl	8013b30 <etharp_raw>
 8013c7c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3710      	adds	r7, #16
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
 8013c86:	bf00      	nop
 8013c88:	0802163c 	.word	0x0802163c

08013c8c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b082      	sub	sp, #8
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
 8013c94:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013c96:	4a05      	ldr	r2, [pc, #20]	; (8013cac <etharp_request+0x20>)
 8013c98:	6839      	ldr	r1, [r7, #0]
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f7ff ffd4 	bl	8013c48 <etharp_request_dst>
 8013ca0:	4603      	mov	r3, r0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3708      	adds	r7, #8
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	08021634 	.word	0x08021634

08013cb0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b08e      	sub	sp, #56	; 0x38
 8013cb4:	af04      	add	r7, sp, #16
 8013cb6:	6078      	str	r0, [r7, #4]
 8013cb8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013cba:	4b79      	ldr	r3, [pc, #484]	; (8013ea0 <icmp_input+0x1f0>)
 8013cbc:	689b      	ldr	r3, [r3, #8]
 8013cbe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc2:	781b      	ldrb	r3, [r3, #0]
 8013cc4:	f003 030f 	and.w	r3, r3, #15
 8013cc8:	b2db      	uxtb	r3, r3
 8013cca:	009b      	lsls	r3, r3, #2
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013cd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013cd2:	2b13      	cmp	r3, #19
 8013cd4:	f240 80cd 	bls.w	8013e72 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	895b      	ldrh	r3, [r3, #10]
 8013cdc:	2b03      	cmp	r3, #3
 8013cde:	f240 80ca 	bls.w	8013e76 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	685b      	ldr	r3, [r3, #4]
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013cec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	f000 80b7 	beq.w	8013e64 <icmp_input+0x1b4>
 8013cf6:	2b08      	cmp	r3, #8
 8013cf8:	f040 80b7 	bne.w	8013e6a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013cfc:	4b69      	ldr	r3, [pc, #420]	; (8013ea4 <icmp_input+0x1f4>)
 8013cfe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013d00:	4b67      	ldr	r3, [pc, #412]	; (8013ea0 <icmp_input+0x1f0>)
 8013d02:	695b      	ldr	r3, [r3, #20]
 8013d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d08:	2be0      	cmp	r3, #224	; 0xe0
 8013d0a:	f000 80bb 	beq.w	8013e84 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013d0e:	4b64      	ldr	r3, [pc, #400]	; (8013ea0 <icmp_input+0x1f0>)
 8013d10:	695b      	ldr	r3, [r3, #20]
 8013d12:	4a63      	ldr	r2, [pc, #396]	; (8013ea0 <icmp_input+0x1f0>)
 8013d14:	6812      	ldr	r2, [r2, #0]
 8013d16:	4611      	mov	r1, r2
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f000 fbed 	bl	80144f8 <ip4_addr_isbroadcast_u32>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	f040 80b1 	bne.w	8013e88 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	891b      	ldrh	r3, [r3, #8]
 8013d2a:	2b07      	cmp	r3, #7
 8013d2c:	f240 80a5 	bls.w	8013e7a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013d30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d32:	330e      	adds	r3, #14
 8013d34:	4619      	mov	r1, r3
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f7f8 f9f0 	bl	800c11c <pbuf_add_header>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d04b      	beq.n	8013dda <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	891a      	ldrh	r2, [r3, #8]
 8013d46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d48:	4413      	add	r3, r2
 8013d4a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	891b      	ldrh	r3, [r3, #8]
 8013d50:	8b7a      	ldrh	r2, [r7, #26]
 8013d52:	429a      	cmp	r2, r3
 8013d54:	f0c0 809a 	bcc.w	8013e8c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013d58:	8b7b      	ldrh	r3, [r7, #26]
 8013d5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d5e:	4619      	mov	r1, r3
 8013d60:	200e      	movs	r0, #14
 8013d62:	f7f7 ff8d 	bl	800bc80 <pbuf_alloc>
 8013d66:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013d68:	697b      	ldr	r3, [r7, #20]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	f000 8090 	beq.w	8013e90 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013d70:	697b      	ldr	r3, [r7, #20]
 8013d72:	895b      	ldrh	r3, [r3, #10]
 8013d74:	461a      	mov	r2, r3
 8013d76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d78:	3308      	adds	r3, #8
 8013d7a:	429a      	cmp	r2, r3
 8013d7c:	d203      	bcs.n	8013d86 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8013d7e:	6978      	ldr	r0, [r7, #20]
 8013d80:	f7f8 fa62 	bl	800c248 <pbuf_free>
          goto icmperr;
 8013d84:	e085      	b.n	8013e92 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f001 fb38 	bl	8015404 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013d94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013d96:	4619      	mov	r1, r3
 8013d98:	6978      	ldr	r0, [r7, #20]
 8013d9a:	f7f8 f9cf 	bl	800c13c <pbuf_remove_header>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d009      	beq.n	8013db8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013da4:	4b40      	ldr	r3, [pc, #256]	; (8013ea8 <icmp_input+0x1f8>)
 8013da6:	22b6      	movs	r2, #182	; 0xb6
 8013da8:	4940      	ldr	r1, [pc, #256]	; (8013eac <icmp_input+0x1fc>)
 8013daa:	4841      	ldr	r0, [pc, #260]	; (8013eb0 <icmp_input+0x200>)
 8013dac:	f001 fb5a 	bl	8015464 <iprintf>
          pbuf_free(r);
 8013db0:	6978      	ldr	r0, [r7, #20]
 8013db2:	f7f8 fa49 	bl	800c248 <pbuf_free>
          goto icmperr;
 8013db6:	e06c      	b.n	8013e92 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013db8:	6879      	ldr	r1, [r7, #4]
 8013dba:	6978      	ldr	r0, [r7, #20]
 8013dbc:	f7f8 fb5c 	bl	800c478 <pbuf_copy>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d003      	beq.n	8013dce <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013dc6:	6978      	ldr	r0, [r7, #20]
 8013dc8:	f7f8 fa3e 	bl	800c248 <pbuf_free>
          goto icmperr;
 8013dcc:	e061      	b.n	8013e92 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f7f8 fa3a 	bl	800c248 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	607b      	str	r3, [r7, #4]
 8013dd8:	e00f      	b.n	8013dfa <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013dda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013ddc:	330e      	adds	r3, #14
 8013dde:	4619      	mov	r1, r3
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f7f8 f9ab 	bl	800c13c <pbuf_remove_header>
 8013de6:	4603      	mov	r3, r0
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d006      	beq.n	8013dfa <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013dec:	4b2e      	ldr	r3, [pc, #184]	; (8013ea8 <icmp_input+0x1f8>)
 8013dee:	22c7      	movs	r2, #199	; 0xc7
 8013df0:	4930      	ldr	r1, [pc, #192]	; (8013eb4 <icmp_input+0x204>)
 8013df2:	482f      	ldr	r0, [pc, #188]	; (8013eb0 <icmp_input+0x200>)
 8013df4:	f001 fb36 	bl	8015464 <iprintf>
          goto icmperr;
 8013df8:	e04b      	b.n	8013e92 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	685b      	ldr	r3, [r3, #4]
 8013dfe:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013e00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013e02:	4619      	mov	r1, r3
 8013e04:	6878      	ldr	r0, [r7, #4]
 8013e06:	f7f8 f989 	bl	800c11c <pbuf_add_header>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d12b      	bne.n	8013e68 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	685b      	ldr	r3, [r3, #4]
 8013e14:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013e16:	69fb      	ldr	r3, [r7, #28]
 8013e18:	681a      	ldr	r2, [r3, #0]
 8013e1a:	68fb      	ldr	r3, [r7, #12]
 8013e1c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013e1e:	4b20      	ldr	r3, [pc, #128]	; (8013ea0 <icmp_input+0x1f0>)
 8013e20:	691a      	ldr	r2, [r3, #16]
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	2200      	movs	r2, #0
 8013e2a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	709a      	strb	r2, [r3, #2]
 8013e32:	2200      	movs	r2, #0
 8013e34:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	22ff      	movs	r2, #255	; 0xff
 8013e3a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	2200      	movs	r2, #0
 8013e40:	729a      	strb	r2, [r3, #10]
 8013e42:	2200      	movs	r2, #0
 8013e44:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	9302      	str	r3, [sp, #8]
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	9301      	str	r3, [sp, #4]
 8013e4e:	2300      	movs	r3, #0
 8013e50:	9300      	str	r3, [sp, #0]
 8013e52:	23ff      	movs	r3, #255	; 0xff
 8013e54:	2200      	movs	r2, #0
 8013e56:	69f9      	ldr	r1, [r7, #28]
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f000 fa75 	bl	8014348 <ip4_output_if>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013e62:	e001      	b.n	8013e68 <icmp_input+0x1b8>
      break;
 8013e64:	bf00      	nop
 8013e66:	e000      	b.n	8013e6a <icmp_input+0x1ba>
      break;
 8013e68:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013e6a:	6878      	ldr	r0, [r7, #4]
 8013e6c:	f7f8 f9ec 	bl	800c248 <pbuf_free>
  return;
 8013e70:	e013      	b.n	8013e9a <icmp_input+0x1ea>
    goto lenerr;
 8013e72:	bf00      	nop
 8013e74:	e002      	b.n	8013e7c <icmp_input+0x1cc>
    goto lenerr;
 8013e76:	bf00      	nop
 8013e78:	e000      	b.n	8013e7c <icmp_input+0x1cc>
        goto lenerr;
 8013e7a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f7f8 f9e3 	bl	800c248 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013e82:	e00a      	b.n	8013e9a <icmp_input+0x1ea>
        goto icmperr;
 8013e84:	bf00      	nop
 8013e86:	e004      	b.n	8013e92 <icmp_input+0x1e2>
        goto icmperr;
 8013e88:	bf00      	nop
 8013e8a:	e002      	b.n	8013e92 <icmp_input+0x1e2>
          goto icmperr;
 8013e8c:	bf00      	nop
 8013e8e:	e000      	b.n	8013e92 <icmp_input+0x1e2>
          goto icmperr;
 8013e90:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f7f8 f9d8 	bl	800c248 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013e98:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013e9a:	3728      	adds	r7, #40	; 0x28
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	bd80      	pop	{r7, pc}
 8013ea0:	2000a7b4 	.word	0x2000a7b4
 8013ea4:	2000a7c8 	.word	0x2000a7c8
 8013ea8:	0801a124 	.word	0x0801a124
 8013eac:	0801a15c 	.word	0x0801a15c
 8013eb0:	0801a194 	.word	0x0801a194
 8013eb4:	0801a1bc 	.word	0x0801a1bc

08013eb8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b082      	sub	sp, #8
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	460b      	mov	r3, r1
 8013ec2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013ec4:	78fb      	ldrb	r3, [r7, #3]
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	2103      	movs	r1, #3
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 f814 	bl	8013ef8 <icmp_send_response>
}
 8013ed0:	bf00      	nop
 8013ed2:	3708      	adds	r7, #8
 8013ed4:	46bd      	mov	sp, r7
 8013ed6:	bd80      	pop	{r7, pc}

08013ed8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013ee4:	78fb      	ldrb	r3, [r7, #3]
 8013ee6:	461a      	mov	r2, r3
 8013ee8:	210b      	movs	r1, #11
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f000 f804 	bl	8013ef8 <icmp_send_response>
}
 8013ef0:	bf00      	nop
 8013ef2:	3708      	adds	r7, #8
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}

08013ef8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b08c      	sub	sp, #48	; 0x30
 8013efc:	af04      	add	r7, sp, #16
 8013efe:	6078      	str	r0, [r7, #4]
 8013f00:	460b      	mov	r3, r1
 8013f02:	70fb      	strb	r3, [r7, #3]
 8013f04:	4613      	mov	r3, r2
 8013f06:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013f08:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f0c:	2124      	movs	r1, #36	; 0x24
 8013f0e:	2022      	movs	r0, #34	; 0x22
 8013f10:	f7f7 feb6 	bl	800bc80 <pbuf_alloc>
 8013f14:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013f16:	69fb      	ldr	r3, [r7, #28]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d04c      	beq.n	8013fb6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013f1c:	69fb      	ldr	r3, [r7, #28]
 8013f1e:	895b      	ldrh	r3, [r3, #10]
 8013f20:	2b23      	cmp	r3, #35	; 0x23
 8013f22:	d806      	bhi.n	8013f32 <icmp_send_response+0x3a>
 8013f24:	4b26      	ldr	r3, [pc, #152]	; (8013fc0 <icmp_send_response+0xc8>)
 8013f26:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8013f2a:	4926      	ldr	r1, [pc, #152]	; (8013fc4 <icmp_send_response+0xcc>)
 8013f2c:	4826      	ldr	r0, [pc, #152]	; (8013fc8 <icmp_send_response+0xd0>)
 8013f2e:	f001 fa99 	bl	8015464 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	685b      	ldr	r3, [r3, #4]
 8013f36:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013f38:	69fb      	ldr	r3, [r7, #28]
 8013f3a:	685b      	ldr	r3, [r3, #4]
 8013f3c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013f3e:	697b      	ldr	r3, [r7, #20]
 8013f40:	78fa      	ldrb	r2, [r7, #3]
 8013f42:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	78ba      	ldrb	r2, [r7, #2]
 8013f48:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	711a      	strb	r2, [r3, #4]
 8013f50:	2200      	movs	r2, #0
 8013f52:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	2200      	movs	r2, #0
 8013f58:	719a      	strb	r2, [r3, #6]
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013f5e:	69fb      	ldr	r3, [r7, #28]
 8013f60:	685b      	ldr	r3, [r3, #4]
 8013f62:	f103 0008 	add.w	r0, r3, #8
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	685b      	ldr	r3, [r3, #4]
 8013f6a:	221c      	movs	r2, #28
 8013f6c:	4619      	mov	r1, r3
 8013f6e:	f001 fa49 	bl	8015404 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	68db      	ldr	r3, [r3, #12]
 8013f76:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013f78:	f107 030c 	add.w	r3, r7, #12
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f000 f825 	bl	8013fcc <ip4_route>
 8013f82:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013f84:	693b      	ldr	r3, [r7, #16]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d011      	beq.n	8013fae <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	709a      	strb	r2, [r3, #2]
 8013f90:	2200      	movs	r2, #0
 8013f92:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013f94:	f107 020c 	add.w	r2, r7, #12
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	9302      	str	r3, [sp, #8]
 8013f9c:	2301      	movs	r3, #1
 8013f9e:	9301      	str	r3, [sp, #4]
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	9300      	str	r3, [sp, #0]
 8013fa4:	23ff      	movs	r3, #255	; 0xff
 8013fa6:	2100      	movs	r1, #0
 8013fa8:	69f8      	ldr	r0, [r7, #28]
 8013faa:	f000 f9cd 	bl	8014348 <ip4_output_if>
  }
  pbuf_free(q);
 8013fae:	69f8      	ldr	r0, [r7, #28]
 8013fb0:	f7f8 f94a 	bl	800c248 <pbuf_free>
 8013fb4:	e000      	b.n	8013fb8 <icmp_send_response+0xc0>
    return;
 8013fb6:	bf00      	nop
}
 8013fb8:	3720      	adds	r7, #32
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	0801a124 	.word	0x0801a124
 8013fc4:	0801a1f0 	.word	0x0801a1f0
 8013fc8:	0801a194 	.word	0x0801a194

08013fcc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013fcc:	b480      	push	{r7}
 8013fce:	b085      	sub	sp, #20
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013fd4:	4b33      	ldr	r3, [pc, #204]	; (80140a4 <ip4_route+0xd8>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	60fb      	str	r3, [r7, #12]
 8013fda:	e036      	b.n	801404a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013fe2:	f003 0301 	and.w	r3, r3, #1
 8013fe6:	b2db      	uxtb	r3, r3
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d02b      	beq.n	8014044 <ip4_route+0x78>
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ff2:	089b      	lsrs	r3, r3, #2
 8013ff4:	f003 0301 	and.w	r3, r3, #1
 8013ff8:	b2db      	uxtb	r3, r3
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d022      	beq.n	8014044 <ip4_route+0x78>
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	3304      	adds	r3, #4
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d01d      	beq.n	8014044 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681a      	ldr	r2, [r3, #0]
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	3304      	adds	r3, #4
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	405a      	eors	r2, r3
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	3308      	adds	r3, #8
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	4013      	ands	r3, r2
 801401c:	2b00      	cmp	r3, #0
 801401e:	d101      	bne.n	8014024 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	e038      	b.n	8014096 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801402a:	f003 0302 	and.w	r3, r3, #2
 801402e:	2b00      	cmp	r3, #0
 8014030:	d108      	bne.n	8014044 <ip4_route+0x78>
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	330c      	adds	r3, #12
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	429a      	cmp	r2, r3
 801403e:	d101      	bne.n	8014044 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	e028      	b.n	8014096 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	60fb      	str	r3, [r7, #12]
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d1c5      	bne.n	8013fdc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014050:	4b15      	ldr	r3, [pc, #84]	; (80140a8 <ip4_route+0xdc>)
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d01a      	beq.n	801408e <ip4_route+0xc2>
 8014058:	4b13      	ldr	r3, [pc, #76]	; (80140a8 <ip4_route+0xdc>)
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014060:	f003 0301 	and.w	r3, r3, #1
 8014064:	2b00      	cmp	r3, #0
 8014066:	d012      	beq.n	801408e <ip4_route+0xc2>
 8014068:	4b0f      	ldr	r3, [pc, #60]	; (80140a8 <ip4_route+0xdc>)
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014070:	f003 0304 	and.w	r3, r3, #4
 8014074:	2b00      	cmp	r3, #0
 8014076:	d00a      	beq.n	801408e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014078:	4b0b      	ldr	r3, [pc, #44]	; (80140a8 <ip4_route+0xdc>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	3304      	adds	r3, #4
 801407e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014080:	2b00      	cmp	r3, #0
 8014082:	d004      	beq.n	801408e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	b2db      	uxtb	r3, r3
 801408a:	2b7f      	cmp	r3, #127	; 0x7f
 801408c:	d101      	bne.n	8014092 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801408e:	2300      	movs	r3, #0
 8014090:	e001      	b.n	8014096 <ip4_route+0xca>
  }

  return netif_default;
 8014092:	4b05      	ldr	r3, [pc, #20]	; (80140a8 <ip4_route+0xdc>)
 8014094:	681b      	ldr	r3, [r3, #0]
}
 8014096:	4618      	mov	r0, r3
 8014098:	3714      	adds	r7, #20
 801409a:	46bd      	mov	sp, r7
 801409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140a0:	4770      	bx	lr
 80140a2:	bf00      	nop
 80140a4:	2000dff4 	.word	0x2000dff4
 80140a8:	2000dff8 	.word	0x2000dff8

080140ac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b082      	sub	sp, #8
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80140ba:	f003 0301 	and.w	r3, r3, #1
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d016      	beq.n	80140f2 <ip4_input_accept+0x46>
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	3304      	adds	r3, #4
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d011      	beq.n	80140f2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80140ce:	4b0b      	ldr	r3, [pc, #44]	; (80140fc <ip4_input_accept+0x50>)
 80140d0:	695a      	ldr	r2, [r3, #20]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	3304      	adds	r3, #4
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	429a      	cmp	r2, r3
 80140da:	d008      	beq.n	80140ee <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80140dc:	4b07      	ldr	r3, [pc, #28]	; (80140fc <ip4_input_accept+0x50>)
 80140de:	695b      	ldr	r3, [r3, #20]
 80140e0:	6879      	ldr	r1, [r7, #4]
 80140e2:	4618      	mov	r0, r3
 80140e4:	f000 fa08 	bl	80144f8 <ip4_addr_isbroadcast_u32>
 80140e8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d001      	beq.n	80140f2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80140ee:	2301      	movs	r3, #1
 80140f0:	e000      	b.n	80140f4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80140f2:	2300      	movs	r3, #0
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3708      	adds	r7, #8
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}
 80140fc:	2000a7b4 	.word	0x2000a7b4

08014100 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b086      	sub	sp, #24
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
 8014108:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	091b      	lsrs	r3, r3, #4
 8014116:	b2db      	uxtb	r3, r3
 8014118:	2b04      	cmp	r3, #4
 801411a:	d004      	beq.n	8014126 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801411c:	6878      	ldr	r0, [r7, #4]
 801411e:	f7f8 f893 	bl	800c248 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014122:	2300      	movs	r3, #0
 8014124:	e107      	b.n	8014336 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	f003 030f 	and.w	r3, r3, #15
 801412e:	b2db      	uxtb	r3, r3
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	b2db      	uxtb	r3, r3
 8014134:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	885b      	ldrh	r3, [r3, #2]
 801413a:	b29b      	uxth	r3, r3
 801413c:	4618      	mov	r0, r3
 801413e:	f7f6 fcf1 	bl	800ab24 <lwip_htons>
 8014142:	4603      	mov	r3, r0
 8014144:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	891b      	ldrh	r3, [r3, #8]
 801414a:	89ba      	ldrh	r2, [r7, #12]
 801414c:	429a      	cmp	r2, r3
 801414e:	d204      	bcs.n	801415a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014150:	89bb      	ldrh	r3, [r7, #12]
 8014152:	4619      	mov	r1, r3
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f7f7 fef1 	bl	800bf3c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	895b      	ldrh	r3, [r3, #10]
 801415e:	89fa      	ldrh	r2, [r7, #14]
 8014160:	429a      	cmp	r2, r3
 8014162:	d807      	bhi.n	8014174 <ip4_input+0x74>
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	891b      	ldrh	r3, [r3, #8]
 8014168:	89ba      	ldrh	r2, [r7, #12]
 801416a:	429a      	cmp	r2, r3
 801416c:	d802      	bhi.n	8014174 <ip4_input+0x74>
 801416e:	89fb      	ldrh	r3, [r7, #14]
 8014170:	2b13      	cmp	r3, #19
 8014172:	d804      	bhi.n	801417e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f7f8 f867 	bl	800c248 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801417a:	2300      	movs	r3, #0
 801417c:	e0db      	b.n	8014336 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	691b      	ldr	r3, [r3, #16]
 8014182:	4a6f      	ldr	r2, [pc, #444]	; (8014340 <ip4_input+0x240>)
 8014184:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	68db      	ldr	r3, [r3, #12]
 801418a:	4a6d      	ldr	r2, [pc, #436]	; (8014340 <ip4_input+0x240>)
 801418c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801418e:	4b6c      	ldr	r3, [pc, #432]	; (8014340 <ip4_input+0x240>)
 8014190:	695b      	ldr	r3, [r3, #20]
 8014192:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014196:	2be0      	cmp	r3, #224	; 0xe0
 8014198:	d112      	bne.n	80141c0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801419a:	683b      	ldr	r3, [r7, #0]
 801419c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80141a0:	f003 0301 	and.w	r3, r3, #1
 80141a4:	b2db      	uxtb	r3, r3
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d007      	beq.n	80141ba <ip4_input+0xba>
 80141aa:	683b      	ldr	r3, [r7, #0]
 80141ac:	3304      	adds	r3, #4
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d002      	beq.n	80141ba <ip4_input+0xba>
      netif = inp;
 80141b4:	683b      	ldr	r3, [r7, #0]
 80141b6:	613b      	str	r3, [r7, #16]
 80141b8:	e02a      	b.n	8014210 <ip4_input+0x110>
    } else {
      netif = NULL;
 80141ba:	2300      	movs	r3, #0
 80141bc:	613b      	str	r3, [r7, #16]
 80141be:	e027      	b.n	8014210 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80141c0:	6838      	ldr	r0, [r7, #0]
 80141c2:	f7ff ff73 	bl	80140ac <ip4_input_accept>
 80141c6:	4603      	mov	r3, r0
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d002      	beq.n	80141d2 <ip4_input+0xd2>
      netif = inp;
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	613b      	str	r3, [r7, #16]
 80141d0:	e01e      	b.n	8014210 <ip4_input+0x110>
    } else {
      netif = NULL;
 80141d2:	2300      	movs	r3, #0
 80141d4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80141d6:	4b5a      	ldr	r3, [pc, #360]	; (8014340 <ip4_input+0x240>)
 80141d8:	695b      	ldr	r3, [r3, #20]
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	2b7f      	cmp	r3, #127	; 0x7f
 80141de:	d017      	beq.n	8014210 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80141e0:	4b58      	ldr	r3, [pc, #352]	; (8014344 <ip4_input+0x244>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	613b      	str	r3, [r7, #16]
 80141e6:	e00e      	b.n	8014206 <ip4_input+0x106>
          if (netif == inp) {
 80141e8:	693a      	ldr	r2, [r7, #16]
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	429a      	cmp	r2, r3
 80141ee:	d006      	beq.n	80141fe <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80141f0:	6938      	ldr	r0, [r7, #16]
 80141f2:	f7ff ff5b 	bl	80140ac <ip4_input_accept>
 80141f6:	4603      	mov	r3, r0
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d108      	bne.n	801420e <ip4_input+0x10e>
 80141fc:	e000      	b.n	8014200 <ip4_input+0x100>
            continue;
 80141fe:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	613b      	str	r3, [r7, #16]
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d1ed      	bne.n	80141e8 <ip4_input+0xe8>
 801420c:	e000      	b.n	8014210 <ip4_input+0x110>
            break;
 801420e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014210:	4b4b      	ldr	r3, [pc, #300]	; (8014340 <ip4_input+0x240>)
 8014212:	691b      	ldr	r3, [r3, #16]
 8014214:	6839      	ldr	r1, [r7, #0]
 8014216:	4618      	mov	r0, r3
 8014218:	f000 f96e 	bl	80144f8 <ip4_addr_isbroadcast_u32>
 801421c:	4603      	mov	r3, r0
 801421e:	2b00      	cmp	r3, #0
 8014220:	d105      	bne.n	801422e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014222:	4b47      	ldr	r3, [pc, #284]	; (8014340 <ip4_input+0x240>)
 8014224:	691b      	ldr	r3, [r3, #16]
 8014226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801422a:	2be0      	cmp	r3, #224	; 0xe0
 801422c:	d104      	bne.n	8014238 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f7f8 f80a 	bl	800c248 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014234:	2300      	movs	r3, #0
 8014236:	e07e      	b.n	8014336 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014238:	693b      	ldr	r3, [r7, #16]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d104      	bne.n	8014248 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801423e:	6878      	ldr	r0, [r7, #4]
 8014240:	f7f8 f802 	bl	800c248 <pbuf_free>
    return ERR_OK;
 8014244:	2300      	movs	r3, #0
 8014246:	e076      	b.n	8014336 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	88db      	ldrh	r3, [r3, #6]
 801424c:	b29b      	uxth	r3, r3
 801424e:	461a      	mov	r2, r3
 8014250:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014254:	4013      	ands	r3, r2
 8014256:	2b00      	cmp	r3, #0
 8014258:	d00b      	beq.n	8014272 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f000 fc92 	bl	8014b84 <ip4_reass>
 8014260:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d101      	bne.n	801426c <ip4_input+0x16c>
      return ERR_OK;
 8014268:	2300      	movs	r3, #0
 801426a:	e064      	b.n	8014336 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014272:	4a33      	ldr	r2, [pc, #204]	; (8014340 <ip4_input+0x240>)
 8014274:	693b      	ldr	r3, [r7, #16]
 8014276:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014278:	4a31      	ldr	r2, [pc, #196]	; (8014340 <ip4_input+0x240>)
 801427a:	683b      	ldr	r3, [r7, #0]
 801427c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801427e:	4a30      	ldr	r2, [pc, #192]	; (8014340 <ip4_input+0x240>)
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	f003 030f 	and.w	r3, r3, #15
 801428c:	b2db      	uxtb	r3, r3
 801428e:	009b      	lsls	r3, r3, #2
 8014290:	b2db      	uxtb	r3, r3
 8014292:	b29a      	uxth	r2, r3
 8014294:	4b2a      	ldr	r3, [pc, #168]	; (8014340 <ip4_input+0x240>)
 8014296:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014298:	89fb      	ldrh	r3, [r7, #14]
 801429a:	4619      	mov	r1, r3
 801429c:	6878      	ldr	r0, [r7, #4]
 801429e:	f7f7 ff4d 	bl	800c13c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	7a5b      	ldrb	r3, [r3, #9]
 80142a6:	2b11      	cmp	r3, #17
 80142a8:	d006      	beq.n	80142b8 <ip4_input+0x1b8>
 80142aa:	2b11      	cmp	r3, #17
 80142ac:	dc13      	bgt.n	80142d6 <ip4_input+0x1d6>
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d00c      	beq.n	80142cc <ip4_input+0x1cc>
 80142b2:	2b06      	cmp	r3, #6
 80142b4:	d005      	beq.n	80142c2 <ip4_input+0x1c2>
 80142b6:	e00e      	b.n	80142d6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80142b8:	6839      	ldr	r1, [r7, #0]
 80142ba:	6878      	ldr	r0, [r7, #4]
 80142bc:	f7fe fc68 	bl	8012b90 <udp_input>
        break;
 80142c0:	e026      	b.n	8014310 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80142c2:	6839      	ldr	r1, [r7, #0]
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f7fa f88d 	bl	800e3e4 <tcp_input>
        break;
 80142ca:	e021      	b.n	8014310 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80142cc:	6839      	ldr	r1, [r7, #0]
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f7ff fcee 	bl	8013cb0 <icmp_input>
        break;
 80142d4:	e01c      	b.n	8014310 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80142d6:	4b1a      	ldr	r3, [pc, #104]	; (8014340 <ip4_input+0x240>)
 80142d8:	695b      	ldr	r3, [r3, #20]
 80142da:	6939      	ldr	r1, [r7, #16]
 80142dc:	4618      	mov	r0, r3
 80142de:	f000 f90b 	bl	80144f8 <ip4_addr_isbroadcast_u32>
 80142e2:	4603      	mov	r3, r0
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d10f      	bne.n	8014308 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80142e8:	4b15      	ldr	r3, [pc, #84]	; (8014340 <ip4_input+0x240>)
 80142ea:	695b      	ldr	r3, [r3, #20]
 80142ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80142f0:	2be0      	cmp	r3, #224	; 0xe0
 80142f2:	d009      	beq.n	8014308 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80142f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80142f8:	4619      	mov	r1, r3
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f7f7 ff91 	bl	800c222 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014300:	2102      	movs	r1, #2
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f7ff fdd8 	bl	8013eb8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f7f7 ff9d 	bl	800c248 <pbuf_free>
        break;
 801430e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014310:	4b0b      	ldr	r3, [pc, #44]	; (8014340 <ip4_input+0x240>)
 8014312:	2200      	movs	r2, #0
 8014314:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014316:	4b0a      	ldr	r3, [pc, #40]	; (8014340 <ip4_input+0x240>)
 8014318:	2200      	movs	r2, #0
 801431a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801431c:	4b08      	ldr	r3, [pc, #32]	; (8014340 <ip4_input+0x240>)
 801431e:	2200      	movs	r2, #0
 8014320:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014322:	4b07      	ldr	r3, [pc, #28]	; (8014340 <ip4_input+0x240>)
 8014324:	2200      	movs	r2, #0
 8014326:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014328:	4b05      	ldr	r3, [pc, #20]	; (8014340 <ip4_input+0x240>)
 801432a:	2200      	movs	r2, #0
 801432c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801432e:	4b04      	ldr	r3, [pc, #16]	; (8014340 <ip4_input+0x240>)
 8014330:	2200      	movs	r2, #0
 8014332:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014334:	2300      	movs	r3, #0
}
 8014336:	4618      	mov	r0, r3
 8014338:	3718      	adds	r7, #24
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}
 801433e:	bf00      	nop
 8014340:	2000a7b4 	.word	0x2000a7b4
 8014344:	2000dff4 	.word	0x2000dff4

08014348 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b08a      	sub	sp, #40	; 0x28
 801434c:	af04      	add	r7, sp, #16
 801434e:	60f8      	str	r0, [r7, #12]
 8014350:	60b9      	str	r1, [r7, #8]
 8014352:	607a      	str	r2, [r7, #4]
 8014354:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d009      	beq.n	8014374 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d003      	beq.n	801436e <ip4_output_if+0x26>
 8014366:	68bb      	ldr	r3, [r7, #8]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d102      	bne.n	8014374 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014370:	3304      	adds	r3, #4
 8014372:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014374:	78fa      	ldrb	r2, [r7, #3]
 8014376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014378:	9302      	str	r3, [sp, #8]
 801437a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801437e:	9301      	str	r3, [sp, #4]
 8014380:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014384:	9300      	str	r3, [sp, #0]
 8014386:	4613      	mov	r3, r2
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	6979      	ldr	r1, [r7, #20]
 801438c:	68f8      	ldr	r0, [r7, #12]
 801438e:	f000 f805 	bl	801439c <ip4_output_if_src>
 8014392:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014394:	4618      	mov	r0, r3
 8014396:	3718      	adds	r7, #24
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b088      	sub	sp, #32
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	60f8      	str	r0, [r7, #12]
 80143a4:	60b9      	str	r1, [r7, #8]
 80143a6:	607a      	str	r2, [r7, #4]
 80143a8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	7b9b      	ldrb	r3, [r3, #14]
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	d006      	beq.n	80143c0 <ip4_output_if_src+0x24>
 80143b2:	4b4b      	ldr	r3, [pc, #300]	; (80144e0 <ip4_output_if_src+0x144>)
 80143b4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80143b8:	494a      	ldr	r1, [pc, #296]	; (80144e4 <ip4_output_if_src+0x148>)
 80143ba:	484b      	ldr	r0, [pc, #300]	; (80144e8 <ip4_output_if_src+0x14c>)
 80143bc:	f001 f852 	bl	8015464 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d060      	beq.n	8014488 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80143c6:	2314      	movs	r3, #20
 80143c8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80143ca:	2114      	movs	r1, #20
 80143cc:	68f8      	ldr	r0, [r7, #12]
 80143ce:	f7f7 fea5 	bl	800c11c <pbuf_add_header>
 80143d2:	4603      	mov	r3, r0
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d002      	beq.n	80143de <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80143d8:	f06f 0301 	mvn.w	r3, #1
 80143dc:	e07c      	b.n	80144d8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	685b      	ldr	r3, [r3, #4]
 80143e2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	895b      	ldrh	r3, [r3, #10]
 80143e8:	2b13      	cmp	r3, #19
 80143ea:	d806      	bhi.n	80143fa <ip4_output_if_src+0x5e>
 80143ec:	4b3c      	ldr	r3, [pc, #240]	; (80144e0 <ip4_output_if_src+0x144>)
 80143ee:	f44f 7262 	mov.w	r2, #904	; 0x388
 80143f2:	493e      	ldr	r1, [pc, #248]	; (80144ec <ip4_output_if_src+0x150>)
 80143f4:	483c      	ldr	r0, [pc, #240]	; (80144e8 <ip4_output_if_src+0x14c>)
 80143f6:	f001 f835 	bl	8015464 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80143fa:	69fb      	ldr	r3, [r7, #28]
 80143fc:	78fa      	ldrb	r2, [r7, #3]
 80143fe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014400:	69fb      	ldr	r3, [r7, #28]
 8014402:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014406:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	681a      	ldr	r2, [r3, #0]
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014410:	8b7b      	ldrh	r3, [r7, #26]
 8014412:	089b      	lsrs	r3, r3, #2
 8014414:	b29b      	uxth	r3, r3
 8014416:	b2db      	uxtb	r3, r3
 8014418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801441c:	b2da      	uxtb	r2, r3
 801441e:	69fb      	ldr	r3, [r7, #28]
 8014420:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014422:	69fb      	ldr	r3, [r7, #28]
 8014424:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014428:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	891b      	ldrh	r3, [r3, #8]
 801442e:	4618      	mov	r0, r3
 8014430:	f7f6 fb78 	bl	800ab24 <lwip_htons>
 8014434:	4603      	mov	r3, r0
 8014436:	461a      	mov	r2, r3
 8014438:	69fb      	ldr	r3, [r7, #28]
 801443a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801443c:	69fb      	ldr	r3, [r7, #28]
 801443e:	2200      	movs	r2, #0
 8014440:	719a      	strb	r2, [r3, #6]
 8014442:	2200      	movs	r2, #0
 8014444:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014446:	4b2a      	ldr	r3, [pc, #168]	; (80144f0 <ip4_output_if_src+0x154>)
 8014448:	881b      	ldrh	r3, [r3, #0]
 801444a:	4618      	mov	r0, r3
 801444c:	f7f6 fb6a 	bl	800ab24 <lwip_htons>
 8014450:	4603      	mov	r3, r0
 8014452:	461a      	mov	r2, r3
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014458:	4b25      	ldr	r3, [pc, #148]	; (80144f0 <ip4_output_if_src+0x154>)
 801445a:	881b      	ldrh	r3, [r3, #0]
 801445c:	3301      	adds	r3, #1
 801445e:	b29a      	uxth	r2, r3
 8014460:	4b23      	ldr	r3, [pc, #140]	; (80144f0 <ip4_output_if_src+0x154>)
 8014462:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d104      	bne.n	8014474 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801446a:	4b22      	ldr	r3, [pc, #136]	; (80144f4 <ip4_output_if_src+0x158>)
 801446c:	681a      	ldr	r2, [r3, #0]
 801446e:	69fb      	ldr	r3, [r7, #28]
 8014470:	60da      	str	r2, [r3, #12]
 8014472:	e003      	b.n	801447c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	681a      	ldr	r2, [r3, #0]
 8014478:	69fb      	ldr	r3, [r7, #28]
 801447a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801447c:	69fb      	ldr	r3, [r7, #28]
 801447e:	2200      	movs	r2, #0
 8014480:	729a      	strb	r2, [r3, #10]
 8014482:	2200      	movs	r2, #0
 8014484:	72da      	strb	r2, [r3, #11]
 8014486:	e00f      	b.n	80144a8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	895b      	ldrh	r3, [r3, #10]
 801448c:	2b13      	cmp	r3, #19
 801448e:	d802      	bhi.n	8014496 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014490:	f06f 0301 	mvn.w	r3, #1
 8014494:	e020      	b.n	80144d8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	685b      	ldr	r3, [r3, #4]
 801449a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801449c:	69fb      	ldr	r3, [r7, #28]
 801449e:	691b      	ldr	r3, [r3, #16]
 80144a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80144a2:	f107 0314 	add.w	r3, r7, #20
 80144a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80144a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d00c      	beq.n	80144ca <ip4_output_if_src+0x12e>
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	891a      	ldrh	r2, [r3, #8]
 80144b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d906      	bls.n	80144ca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80144c0:	68f8      	ldr	r0, [r7, #12]
 80144c2:	f000 fd4d 	bl	8014f60 <ip4_frag>
 80144c6:	4603      	mov	r3, r0
 80144c8:	e006      	b.n	80144d8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80144ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144cc:	695b      	ldr	r3, [r3, #20]
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	68f9      	ldr	r1, [r7, #12]
 80144d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80144d4:	4798      	blx	r3
 80144d6:	4603      	mov	r3, r0
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3720      	adds	r7, #32
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd80      	pop	{r7, pc}
 80144e0:	0801a21c 	.word	0x0801a21c
 80144e4:	0801a250 	.word	0x0801a250
 80144e8:	0801a25c 	.word	0x0801a25c
 80144ec:	0801a284 	.word	0x0801a284
 80144f0:	20000b4a 	.word	0x20000b4a
 80144f4:	08021630 	.word	0x08021630

080144f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80144f8:	b480      	push	{r7}
 80144fa:	b085      	sub	sp, #20
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
 8014500:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801450c:	d002      	beq.n	8014514 <ip4_addr_isbroadcast_u32+0x1c>
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d101      	bne.n	8014518 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014514:	2301      	movs	r3, #1
 8014516:	e02a      	b.n	801456e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801451e:	f003 0302 	and.w	r3, r3, #2
 8014522:	2b00      	cmp	r3, #0
 8014524:	d101      	bne.n	801452a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014526:	2300      	movs	r3, #0
 8014528:	e021      	b.n	801456e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	3304      	adds	r3, #4
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	687a      	ldr	r2, [r7, #4]
 8014532:	429a      	cmp	r2, r3
 8014534:	d101      	bne.n	801453a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014536:	2300      	movs	r3, #0
 8014538:	e019      	b.n	801456e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801453a:	68fa      	ldr	r2, [r7, #12]
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	3304      	adds	r3, #4
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	405a      	eors	r2, r3
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	3308      	adds	r3, #8
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	4013      	ands	r3, r2
 801454c:	2b00      	cmp	r3, #0
 801454e:	d10d      	bne.n	801456c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014550:	683b      	ldr	r3, [r7, #0]
 8014552:	3308      	adds	r3, #8
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	43da      	mvns	r2, r3
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	3308      	adds	r3, #8
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014564:	429a      	cmp	r2, r3
 8014566:	d101      	bne.n	801456c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014568:	2301      	movs	r3, #1
 801456a:	e000      	b.n	801456e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801456c:	2300      	movs	r3, #0
  }
}
 801456e:	4618      	mov	r0, r3
 8014570:	3714      	adds	r7, #20
 8014572:	46bd      	mov	sp, r7
 8014574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014578:	4770      	bx	lr
	...

0801457c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b084      	sub	sp, #16
 8014580:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014582:	2300      	movs	r3, #0
 8014584:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014586:	4b12      	ldr	r3, [pc, #72]	; (80145d0 <ip_reass_tmr+0x54>)
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801458c:	e018      	b.n	80145c0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	7fdb      	ldrb	r3, [r3, #31]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d00b      	beq.n	80145ae <ip_reass_tmr+0x32>
      r->timer--;
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	7fdb      	ldrb	r3, [r3, #31]
 801459a:	3b01      	subs	r3, #1
 801459c:	b2da      	uxtb	r2, r3
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	60fb      	str	r3, [r7, #12]
 80145ac:	e008      	b.n	80145c0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80145b8:	68b9      	ldr	r1, [r7, #8]
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	f000 f80a 	bl	80145d4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d1e3      	bne.n	801458e <ip_reass_tmr+0x12>
    }
  }
}
 80145c6:	bf00      	nop
 80145c8:	bf00      	nop
 80145ca:	3710      	adds	r7, #16
 80145cc:	46bd      	mov	sp, r7
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	20000b4c 	.word	0x20000b4c

080145d4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b088      	sub	sp, #32
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
 80145dc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80145de:	2300      	movs	r3, #0
 80145e0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80145e2:	683a      	ldr	r2, [r7, #0]
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d105      	bne.n	80145f6 <ip_reass_free_complete_datagram+0x22>
 80145ea:	4b45      	ldr	r3, [pc, #276]	; (8014700 <ip_reass_free_complete_datagram+0x12c>)
 80145ec:	22ab      	movs	r2, #171	; 0xab
 80145ee:	4945      	ldr	r1, [pc, #276]	; (8014704 <ip_reass_free_complete_datagram+0x130>)
 80145f0:	4845      	ldr	r0, [pc, #276]	; (8014708 <ip_reass_free_complete_datagram+0x134>)
 80145f2:	f000 ff37 	bl	8015464 <iprintf>
  if (prev != NULL) {
 80145f6:	683b      	ldr	r3, [r7, #0]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d00a      	beq.n	8014612 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	687a      	ldr	r2, [r7, #4]
 8014602:	429a      	cmp	r2, r3
 8014604:	d005      	beq.n	8014612 <ip_reass_free_complete_datagram+0x3e>
 8014606:	4b3e      	ldr	r3, [pc, #248]	; (8014700 <ip_reass_free_complete_datagram+0x12c>)
 8014608:	22ad      	movs	r2, #173	; 0xad
 801460a:	4940      	ldr	r1, [pc, #256]	; (801470c <ip_reass_free_complete_datagram+0x138>)
 801460c:	483e      	ldr	r0, [pc, #248]	; (8014708 <ip_reass_free_complete_datagram+0x134>)
 801460e:	f000 ff29 	bl	8015464 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	685b      	ldr	r3, [r3, #4]
 8014616:	685b      	ldr	r3, [r3, #4]
 8014618:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801461a:	697b      	ldr	r3, [r7, #20]
 801461c:	889b      	ldrh	r3, [r3, #4]
 801461e:	b29b      	uxth	r3, r3
 8014620:	2b00      	cmp	r3, #0
 8014622:	d12a      	bne.n	801467a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	685b      	ldr	r3, [r3, #4]
 8014628:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801462a:	697b      	ldr	r3, [r7, #20]
 801462c:	681a      	ldr	r2, [r3, #0]
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014632:	69bb      	ldr	r3, [r7, #24]
 8014634:	6858      	ldr	r0, [r3, #4]
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	3308      	adds	r3, #8
 801463a:	2214      	movs	r2, #20
 801463c:	4619      	mov	r1, r3
 801463e:	f000 fee1 	bl	8015404 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014642:	2101      	movs	r1, #1
 8014644:	69b8      	ldr	r0, [r7, #24]
 8014646:	f7ff fc47 	bl	8013ed8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801464a:	69b8      	ldr	r0, [r7, #24]
 801464c:	f7f7 fe84 	bl	800c358 <pbuf_clen>
 8014650:	4603      	mov	r3, r0
 8014652:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014654:	8bfa      	ldrh	r2, [r7, #30]
 8014656:	8a7b      	ldrh	r3, [r7, #18]
 8014658:	4413      	add	r3, r2
 801465a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801465e:	db05      	blt.n	801466c <ip_reass_free_complete_datagram+0x98>
 8014660:	4b27      	ldr	r3, [pc, #156]	; (8014700 <ip_reass_free_complete_datagram+0x12c>)
 8014662:	22bc      	movs	r2, #188	; 0xbc
 8014664:	492a      	ldr	r1, [pc, #168]	; (8014710 <ip_reass_free_complete_datagram+0x13c>)
 8014666:	4828      	ldr	r0, [pc, #160]	; (8014708 <ip_reass_free_complete_datagram+0x134>)
 8014668:	f000 fefc 	bl	8015464 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801466c:	8bfa      	ldrh	r2, [r7, #30]
 801466e:	8a7b      	ldrh	r3, [r7, #18]
 8014670:	4413      	add	r3, r2
 8014672:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014674:	69b8      	ldr	r0, [r7, #24]
 8014676:	f7f7 fde7 	bl	800c248 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	685b      	ldr	r3, [r3, #4]
 801467e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014680:	e01f      	b.n	80146c2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014682:	69bb      	ldr	r3, [r7, #24]
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014688:	69bb      	ldr	r3, [r7, #24]
 801468a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014692:	68f8      	ldr	r0, [r7, #12]
 8014694:	f7f7 fe60 	bl	800c358 <pbuf_clen>
 8014698:	4603      	mov	r3, r0
 801469a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801469c:	8bfa      	ldrh	r2, [r7, #30]
 801469e:	8a7b      	ldrh	r3, [r7, #18]
 80146a0:	4413      	add	r3, r2
 80146a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80146a6:	db05      	blt.n	80146b4 <ip_reass_free_complete_datagram+0xe0>
 80146a8:	4b15      	ldr	r3, [pc, #84]	; (8014700 <ip_reass_free_complete_datagram+0x12c>)
 80146aa:	22cc      	movs	r2, #204	; 0xcc
 80146ac:	4918      	ldr	r1, [pc, #96]	; (8014710 <ip_reass_free_complete_datagram+0x13c>)
 80146ae:	4816      	ldr	r0, [pc, #88]	; (8014708 <ip_reass_free_complete_datagram+0x134>)
 80146b0:	f000 fed8 	bl	8015464 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80146b4:	8bfa      	ldrh	r2, [r7, #30]
 80146b6:	8a7b      	ldrh	r3, [r7, #18]
 80146b8:	4413      	add	r3, r2
 80146ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80146bc:	68f8      	ldr	r0, [r7, #12]
 80146be:	f7f7 fdc3 	bl	800c248 <pbuf_free>
  while (p != NULL) {
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d1dc      	bne.n	8014682 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80146c8:	6839      	ldr	r1, [r7, #0]
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f000 f8c2 	bl	8014854 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80146d0:	4b10      	ldr	r3, [pc, #64]	; (8014714 <ip_reass_free_complete_datagram+0x140>)
 80146d2:	881b      	ldrh	r3, [r3, #0]
 80146d4:	8bfa      	ldrh	r2, [r7, #30]
 80146d6:	429a      	cmp	r2, r3
 80146d8:	d905      	bls.n	80146e6 <ip_reass_free_complete_datagram+0x112>
 80146da:	4b09      	ldr	r3, [pc, #36]	; (8014700 <ip_reass_free_complete_datagram+0x12c>)
 80146dc:	22d2      	movs	r2, #210	; 0xd2
 80146de:	490e      	ldr	r1, [pc, #56]	; (8014718 <ip_reass_free_complete_datagram+0x144>)
 80146e0:	4809      	ldr	r0, [pc, #36]	; (8014708 <ip_reass_free_complete_datagram+0x134>)
 80146e2:	f000 febf 	bl	8015464 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80146e6:	4b0b      	ldr	r3, [pc, #44]	; (8014714 <ip_reass_free_complete_datagram+0x140>)
 80146e8:	881a      	ldrh	r2, [r3, #0]
 80146ea:	8bfb      	ldrh	r3, [r7, #30]
 80146ec:	1ad3      	subs	r3, r2, r3
 80146ee:	b29a      	uxth	r2, r3
 80146f0:	4b08      	ldr	r3, [pc, #32]	; (8014714 <ip_reass_free_complete_datagram+0x140>)
 80146f2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80146f4:	8bfb      	ldrh	r3, [r7, #30]
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3720      	adds	r7, #32
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	0801a2b4 	.word	0x0801a2b4
 8014704:	0801a2f0 	.word	0x0801a2f0
 8014708:	0801a2fc 	.word	0x0801a2fc
 801470c:	0801a324 	.word	0x0801a324
 8014710:	0801a338 	.word	0x0801a338
 8014714:	20000b50 	.word	0x20000b50
 8014718:	0801a358 	.word	0x0801a358

0801471c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b08a      	sub	sp, #40	; 0x28
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
 8014724:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014726:	2300      	movs	r3, #0
 8014728:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801472a:	2300      	movs	r3, #0
 801472c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801472e:	2300      	movs	r3, #0
 8014730:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014732:	2300      	movs	r3, #0
 8014734:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014736:	2300      	movs	r3, #0
 8014738:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801473a:	4b28      	ldr	r3, [pc, #160]	; (80147dc <ip_reass_remove_oldest_datagram+0xc0>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014740:	e030      	b.n	80147a4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014744:	695a      	ldr	r2, [r3, #20]
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	68db      	ldr	r3, [r3, #12]
 801474a:	429a      	cmp	r2, r3
 801474c:	d10c      	bne.n	8014768 <ip_reass_remove_oldest_datagram+0x4c>
 801474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014750:	699a      	ldr	r2, [r3, #24]
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	691b      	ldr	r3, [r3, #16]
 8014756:	429a      	cmp	r2, r3
 8014758:	d106      	bne.n	8014768 <ip_reass_remove_oldest_datagram+0x4c>
 801475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801475c:	899a      	ldrh	r2, [r3, #12]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	889b      	ldrh	r3, [r3, #4]
 8014762:	b29b      	uxth	r3, r3
 8014764:	429a      	cmp	r2, r3
 8014766:	d014      	beq.n	8014792 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014768:	693b      	ldr	r3, [r7, #16]
 801476a:	3301      	adds	r3, #1
 801476c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801476e:	6a3b      	ldr	r3, [r7, #32]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d104      	bne.n	801477e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014776:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014778:	69fb      	ldr	r3, [r7, #28]
 801477a:	61bb      	str	r3, [r7, #24]
 801477c:	e009      	b.n	8014792 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014780:	7fda      	ldrb	r2, [r3, #31]
 8014782:	6a3b      	ldr	r3, [r7, #32]
 8014784:	7fdb      	ldrb	r3, [r3, #31]
 8014786:	429a      	cmp	r2, r3
 8014788:	d803      	bhi.n	8014792 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801478e:	69fb      	ldr	r3, [r7, #28]
 8014790:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d001      	beq.n	801479e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801479c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80147a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d1cb      	bne.n	8014742 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80147aa:	6a3b      	ldr	r3, [r7, #32]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d008      	beq.n	80147c2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80147b0:	69b9      	ldr	r1, [r7, #24]
 80147b2:	6a38      	ldr	r0, [r7, #32]
 80147b4:	f7ff ff0e 	bl	80145d4 <ip_reass_free_complete_datagram>
 80147b8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80147ba:	697a      	ldr	r2, [r7, #20]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	4413      	add	r3, r2
 80147c0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80147c2:	697a      	ldr	r2, [r7, #20]
 80147c4:	683b      	ldr	r3, [r7, #0]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	da02      	bge.n	80147d0 <ip_reass_remove_oldest_datagram+0xb4>
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	2b01      	cmp	r3, #1
 80147ce:	dcac      	bgt.n	801472a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80147d0:	697b      	ldr	r3, [r7, #20]
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3728      	adds	r7, #40	; 0x28
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}
 80147da:	bf00      	nop
 80147dc:	20000b4c 	.word	0x20000b4c

080147e0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b084      	sub	sp, #16
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80147ea:	2004      	movs	r0, #4
 80147ec:	f7f6 fece 	bl	800b58c <memp_malloc>
 80147f0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d110      	bne.n	801481a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80147f8:	6839      	ldr	r1, [r7, #0]
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f7ff ff8e 	bl	801471c <ip_reass_remove_oldest_datagram>
 8014800:	4602      	mov	r2, r0
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	4293      	cmp	r3, r2
 8014806:	dc03      	bgt.n	8014810 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014808:	2004      	movs	r0, #4
 801480a:	f7f6 febf 	bl	800b58c <memp_malloc>
 801480e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d101      	bne.n	801481a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014816:	2300      	movs	r3, #0
 8014818:	e016      	b.n	8014848 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801481a:	2220      	movs	r2, #32
 801481c:	2100      	movs	r1, #0
 801481e:	68f8      	ldr	r0, [r7, #12]
 8014820:	f000 fe18 	bl	8015454 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	220f      	movs	r2, #15
 8014828:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801482a:	4b09      	ldr	r3, [pc, #36]	; (8014850 <ip_reass_enqueue_new_datagram+0x70>)
 801482c:	681a      	ldr	r2, [r3, #0]
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014832:	4a07      	ldr	r2, [pc, #28]	; (8014850 <ip_reass_enqueue_new_datagram+0x70>)
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	3308      	adds	r3, #8
 801483c:	2214      	movs	r2, #20
 801483e:	6879      	ldr	r1, [r7, #4]
 8014840:	4618      	mov	r0, r3
 8014842:	f000 fddf 	bl	8015404 <memcpy>
  return ipr;
 8014846:	68fb      	ldr	r3, [r7, #12]
}
 8014848:	4618      	mov	r0, r3
 801484a:	3710      	adds	r7, #16
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	20000b4c 	.word	0x20000b4c

08014854 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801485e:	4b10      	ldr	r3, [pc, #64]	; (80148a0 <ip_reass_dequeue_datagram+0x4c>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	429a      	cmp	r2, r3
 8014866:	d104      	bne.n	8014872 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	681b      	ldr	r3, [r3, #0]
 801486c:	4a0c      	ldr	r2, [pc, #48]	; (80148a0 <ip_reass_dequeue_datagram+0x4c>)
 801486e:	6013      	str	r3, [r2, #0]
 8014870:	e00d      	b.n	801488e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d106      	bne.n	8014886 <ip_reass_dequeue_datagram+0x32>
 8014878:	4b0a      	ldr	r3, [pc, #40]	; (80148a4 <ip_reass_dequeue_datagram+0x50>)
 801487a:	f240 1245 	movw	r2, #325	; 0x145
 801487e:	490a      	ldr	r1, [pc, #40]	; (80148a8 <ip_reass_dequeue_datagram+0x54>)
 8014880:	480a      	ldr	r0, [pc, #40]	; (80148ac <ip_reass_dequeue_datagram+0x58>)
 8014882:	f000 fdef 	bl	8015464 <iprintf>
    prev->next = ipr->next;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	681a      	ldr	r2, [r3, #0]
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801488e:	6879      	ldr	r1, [r7, #4]
 8014890:	2004      	movs	r0, #4
 8014892:	f7f6 fec7 	bl	800b624 <memp_free>
}
 8014896:	bf00      	nop
 8014898:	3708      	adds	r7, #8
 801489a:	46bd      	mov	sp, r7
 801489c:	bd80      	pop	{r7, pc}
 801489e:	bf00      	nop
 80148a0:	20000b4c 	.word	0x20000b4c
 80148a4:	0801a2b4 	.word	0x0801a2b4
 80148a8:	0801a37c 	.word	0x0801a37c
 80148ac:	0801a2fc 	.word	0x0801a2fc

080148b0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b08c      	sub	sp, #48	; 0x30
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	60f8      	str	r0, [r7, #12]
 80148b8:	60b9      	str	r1, [r7, #8]
 80148ba:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80148bc:	2300      	movs	r3, #0
 80148be:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80148c0:	2301      	movs	r3, #1
 80148c2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	685b      	ldr	r3, [r3, #4]
 80148c8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80148ca:	69fb      	ldr	r3, [r7, #28]
 80148cc:	885b      	ldrh	r3, [r3, #2]
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7f6 f927 	bl	800ab24 <lwip_htons>
 80148d6:	4603      	mov	r3, r0
 80148d8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	f003 030f 	and.w	r3, r3, #15
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	009b      	lsls	r3, r3, #2
 80148e6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80148e8:	7e7b      	ldrb	r3, [r7, #25]
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	8b7a      	ldrh	r2, [r7, #26]
 80148ee:	429a      	cmp	r2, r3
 80148f0:	d202      	bcs.n	80148f8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80148f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80148f6:	e135      	b.n	8014b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80148f8:	7e7b      	ldrb	r3, [r7, #25]
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	8b7a      	ldrh	r2, [r7, #26]
 80148fe:	1ad3      	subs	r3, r2, r3
 8014900:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014902:	69fb      	ldr	r3, [r7, #28]
 8014904:	88db      	ldrh	r3, [r3, #6]
 8014906:	b29b      	uxth	r3, r3
 8014908:	4618      	mov	r0, r3
 801490a:	f7f6 f90b 	bl	800ab24 <lwip_htons>
 801490e:	4603      	mov	r3, r0
 8014910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014914:	b29b      	uxth	r3, r3
 8014916:	00db      	lsls	r3, r3, #3
 8014918:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014922:	2200      	movs	r2, #0
 8014924:	701a      	strb	r2, [r3, #0]
 8014926:	2200      	movs	r2, #0
 8014928:	705a      	strb	r2, [r3, #1]
 801492a:	2200      	movs	r2, #0
 801492c:	709a      	strb	r2, [r3, #2]
 801492e:	2200      	movs	r2, #0
 8014930:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014934:	8afa      	ldrh	r2, [r7, #22]
 8014936:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014938:	8afa      	ldrh	r2, [r7, #22]
 801493a:	8b7b      	ldrh	r3, [r7, #26]
 801493c:	4413      	add	r3, r2
 801493e:	b29a      	uxth	r2, r3
 8014940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014942:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014946:	88db      	ldrh	r3, [r3, #6]
 8014948:	b29b      	uxth	r3, r3
 801494a:	8afa      	ldrh	r2, [r7, #22]
 801494c:	429a      	cmp	r2, r3
 801494e:	d902      	bls.n	8014956 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014954:	e106      	b.n	8014b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	627b      	str	r3, [r7, #36]	; 0x24
 801495c:	e068      	b.n	8014a30 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014960:	685b      	ldr	r3, [r3, #4]
 8014962:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014966:	889b      	ldrh	r3, [r3, #4]
 8014968:	b29a      	uxth	r2, r3
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	889b      	ldrh	r3, [r3, #4]
 801496e:	b29b      	uxth	r3, r3
 8014970:	429a      	cmp	r2, r3
 8014972:	d235      	bcs.n	80149e0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014978:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801497a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801497c:	2b00      	cmp	r3, #0
 801497e:	d020      	beq.n	80149c2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014982:	889b      	ldrh	r3, [r3, #4]
 8014984:	b29a      	uxth	r2, r3
 8014986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014988:	88db      	ldrh	r3, [r3, #6]
 801498a:	b29b      	uxth	r3, r3
 801498c:	429a      	cmp	r2, r3
 801498e:	d307      	bcc.n	80149a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014992:	88db      	ldrh	r3, [r3, #6]
 8014994:	b29a      	uxth	r2, r3
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	889b      	ldrh	r3, [r3, #4]
 801499a:	b29b      	uxth	r3, r3
 801499c:	429a      	cmp	r2, r3
 801499e:	d902      	bls.n	80149a6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80149a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149a4:	e0de      	b.n	8014b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80149a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149a8:	68ba      	ldr	r2, [r7, #8]
 80149aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80149ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ae:	88db      	ldrh	r3, [r3, #6]
 80149b0:	b29a      	uxth	r2, r3
 80149b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b4:	889b      	ldrh	r3, [r3, #4]
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d03d      	beq.n	8014a38 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80149bc:	2300      	movs	r3, #0
 80149be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80149c0:	e03a      	b.n	8014a38 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80149c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c4:	88db      	ldrh	r3, [r3, #6]
 80149c6:	b29a      	uxth	r2, r3
 80149c8:	693b      	ldr	r3, [r7, #16]
 80149ca:	889b      	ldrh	r3, [r3, #4]
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d902      	bls.n	80149d8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80149d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149d6:	e0c5      	b.n	8014b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	68ba      	ldr	r2, [r7, #8]
 80149dc:	605a      	str	r2, [r3, #4]
      break;
 80149de:	e02b      	b.n	8014a38 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80149e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e2:	889b      	ldrh	r3, [r3, #4]
 80149e4:	b29a      	uxth	r2, r3
 80149e6:	693b      	ldr	r3, [r7, #16]
 80149e8:	889b      	ldrh	r3, [r3, #4]
 80149ea:	b29b      	uxth	r3, r3
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d102      	bne.n	80149f6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80149f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149f4:	e0b6      	b.n	8014b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80149f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149f8:	889b      	ldrh	r3, [r3, #4]
 80149fa:	b29a      	uxth	r2, r3
 80149fc:	693b      	ldr	r3, [r7, #16]
 80149fe:	88db      	ldrh	r3, [r3, #6]
 8014a00:	b29b      	uxth	r3, r3
 8014a02:	429a      	cmp	r2, r3
 8014a04:	d202      	bcs.n	8014a0c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a0a:	e0ab      	b.n	8014b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d009      	beq.n	8014a26 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a14:	88db      	ldrh	r3, [r3, #6]
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	693b      	ldr	r3, [r7, #16]
 8014a1a:	889b      	ldrh	r3, [r3, #4]
 8014a1c:	b29b      	uxth	r3, r3
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d001      	beq.n	8014a26 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014a22:	2300      	movs	r3, #0
 8014a24:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014a2c:	693b      	ldr	r3, [r7, #16]
 8014a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d193      	bne.n	801495e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014a36:	e000      	b.n	8014a3a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014a38:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d12d      	bne.n	8014a9c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d01c      	beq.n	8014a80 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a48:	88db      	ldrh	r3, [r3, #6]
 8014a4a:	b29a      	uxth	r2, r3
 8014a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a4e:	889b      	ldrh	r3, [r3, #4]
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d906      	bls.n	8014a64 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014a56:	4b45      	ldr	r3, [pc, #276]	; (8014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a58:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014a5c:	4944      	ldr	r1, [pc, #272]	; (8014b70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014a5e:	4845      	ldr	r0, [pc, #276]	; (8014b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a60:	f000 fd00 	bl	8015464 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a66:	68ba      	ldr	r2, [r7, #8]
 8014a68:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a6c:	88db      	ldrh	r3, [r3, #6]
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a72:	889b      	ldrh	r3, [r3, #4]
 8014a74:	b29b      	uxth	r3, r3
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d010      	beq.n	8014a9c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014a7a:	2300      	movs	r3, #0
 8014a7c:	623b      	str	r3, [r7, #32]
 8014a7e:	e00d      	b.n	8014a9c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	685b      	ldr	r3, [r3, #4]
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d006      	beq.n	8014a96 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014a88:	4b38      	ldr	r3, [pc, #224]	; (8014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014a8a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8014a8e:	493a      	ldr	r1, [pc, #232]	; (8014b78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014a90:	4838      	ldr	r0, [pc, #224]	; (8014b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014a92:	f000 fce7 	bl	8015464 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	68ba      	ldr	r2, [r7, #8]
 8014a9a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d105      	bne.n	8014aae <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	7f9b      	ldrb	r3, [r3, #30]
 8014aa6:	f003 0301 	and.w	r3, r3, #1
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d059      	beq.n	8014b62 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8014aae:	6a3b      	ldr	r3, [r7, #32]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d04f      	beq.n	8014b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	685b      	ldr	r3, [r3, #4]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d006      	beq.n	8014aca <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	685b      	ldr	r3, [r3, #4]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	889b      	ldrh	r3, [r3, #4]
 8014ac4:	b29b      	uxth	r3, r3
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d002      	beq.n	8014ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014aca:	2300      	movs	r3, #0
 8014acc:	623b      	str	r3, [r7, #32]
 8014ace:	e041      	b.n	8014b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8014ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014ada:	e012      	b.n	8014b02 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ade:	685b      	ldr	r3, [r3, #4]
 8014ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8014ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae4:	88db      	ldrh	r3, [r3, #6]
 8014ae6:	b29a      	uxth	r2, r3
 8014ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aea:	889b      	ldrh	r3, [r3, #4]
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	429a      	cmp	r2, r3
 8014af0:	d002      	beq.n	8014af8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8014af2:	2300      	movs	r3, #0
 8014af4:	623b      	str	r3, [r7, #32]
            break;
 8014af6:	e007      	b.n	8014b08 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d1e9      	bne.n	8014adc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014b08:	6a3b      	ldr	r3, [r7, #32]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d022      	beq.n	8014b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	685b      	ldr	r3, [r3, #4]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d106      	bne.n	8014b24 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014b16:	4b15      	ldr	r3, [pc, #84]	; (8014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b18:	f240 12df 	movw	r2, #479	; 0x1df
 8014b1c:	4917      	ldr	r1, [pc, #92]	; (8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014b1e:	4815      	ldr	r0, [pc, #84]	; (8014b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b20:	f000 fca0 	bl	8015464 <iprintf>
          LWIP_ASSERT("sanity check",
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	685b      	ldr	r3, [r3, #4]
 8014b28:	685b      	ldr	r3, [r3, #4]
 8014b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b2c:	429a      	cmp	r2, r3
 8014b2e:	d106      	bne.n	8014b3e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014b30:	4b0e      	ldr	r3, [pc, #56]	; (8014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b32:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8014b36:	4911      	ldr	r1, [pc, #68]	; (8014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014b38:	480e      	ldr	r0, [pc, #56]	; (8014b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b3a:	f000 fc93 	bl	8015464 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d006      	beq.n	8014b54 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014b46:	4b09      	ldr	r3, [pc, #36]	; (8014b6c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014b48:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8014b4c:	490c      	ldr	r1, [pc, #48]	; (8014b80 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014b4e:	4809      	ldr	r0, [pc, #36]	; (8014b74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014b50:	f000 fc88 	bl	8015464 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014b54:	6a3b      	ldr	r3, [r7, #32]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	bf14      	ite	ne
 8014b5a:	2301      	movne	r3, #1
 8014b5c:	2300      	moveq	r3, #0
 8014b5e:	b2db      	uxtb	r3, r3
 8014b60:	e000      	b.n	8014b64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014b62:	2300      	movs	r3, #0
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	3730      	adds	r7, #48	; 0x30
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd80      	pop	{r7, pc}
 8014b6c:	0801a2b4 	.word	0x0801a2b4
 8014b70:	0801a398 	.word	0x0801a398
 8014b74:	0801a2fc 	.word	0x0801a2fc
 8014b78:	0801a3b8 	.word	0x0801a3b8
 8014b7c:	0801a3f0 	.word	0x0801a3f0
 8014b80:	0801a400 	.word	0x0801a400

08014b84 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b08e      	sub	sp, #56	; 0x38
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b94:	781b      	ldrb	r3, [r3, #0]
 8014b96:	f003 030f 	and.w	r3, r3, #15
 8014b9a:	b2db      	uxtb	r3, r3
 8014b9c:	009b      	lsls	r3, r3, #2
 8014b9e:	b2db      	uxtb	r3, r3
 8014ba0:	2b14      	cmp	r3, #20
 8014ba2:	f040 8167 	bne.w	8014e74 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ba8:	88db      	ldrh	r3, [r3, #6]
 8014baa:	b29b      	uxth	r3, r3
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7f5 ffb9 	bl	800ab24 <lwip_htons>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	00db      	lsls	r3, r3, #3
 8014bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bc0:	885b      	ldrh	r3, [r3, #2]
 8014bc2:	b29b      	uxth	r3, r3
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7f5 ffad 	bl	800ab24 <lwip_htons>
 8014bca:	4603      	mov	r3, r0
 8014bcc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8014bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	f003 030f 	and.w	r3, r3, #15
 8014bd6:	b2db      	uxtb	r3, r3
 8014bd8:	009b      	lsls	r3, r3, #2
 8014bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8014bde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014be2:	b29b      	uxth	r3, r3
 8014be4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014be6:	429a      	cmp	r2, r3
 8014be8:	f0c0 8146 	bcc.w	8014e78 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014bf0:	b29b      	uxth	r3, r3
 8014bf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014bf4:	1ad3      	subs	r3, r2, r3
 8014bf6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f7f7 fbad 	bl	800c358 <pbuf_clen>
 8014bfe:	4603      	mov	r3, r0
 8014c00:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8014c02:	4b9f      	ldr	r3, [pc, #636]	; (8014e80 <ip4_reass+0x2fc>)
 8014c04:	881b      	ldrh	r3, [r3, #0]
 8014c06:	461a      	mov	r2, r3
 8014c08:	8c3b      	ldrh	r3, [r7, #32]
 8014c0a:	4413      	add	r3, r2
 8014c0c:	2b0a      	cmp	r3, #10
 8014c0e:	dd10      	ble.n	8014c32 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014c10:	8c3b      	ldrh	r3, [r7, #32]
 8014c12:	4619      	mov	r1, r3
 8014c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c16:	f7ff fd81 	bl	801471c <ip_reass_remove_oldest_datagram>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	f000 812d 	beq.w	8014e7c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014c22:	4b97      	ldr	r3, [pc, #604]	; (8014e80 <ip4_reass+0x2fc>)
 8014c24:	881b      	ldrh	r3, [r3, #0]
 8014c26:	461a      	mov	r2, r3
 8014c28:	8c3b      	ldrh	r3, [r7, #32]
 8014c2a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014c2c:	2b0a      	cmp	r3, #10
 8014c2e:	f300 8125 	bgt.w	8014e7c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014c32:	4b94      	ldr	r3, [pc, #592]	; (8014e84 <ip4_reass+0x300>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	633b      	str	r3, [r7, #48]	; 0x30
 8014c38:	e015      	b.n	8014c66 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c3c:	695a      	ldr	r2, [r3, #20]
 8014c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c40:	68db      	ldr	r3, [r3, #12]
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d10c      	bne.n	8014c60 <ip4_reass+0xdc>
 8014c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c48:	699a      	ldr	r2, [r3, #24]
 8014c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c4c:	691b      	ldr	r3, [r3, #16]
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d106      	bne.n	8014c60 <ip4_reass+0xdc>
 8014c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c54:	899a      	ldrh	r2, [r3, #12]
 8014c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c58:	889b      	ldrh	r3, [r3, #4]
 8014c5a:	b29b      	uxth	r3, r3
 8014c5c:	429a      	cmp	r2, r3
 8014c5e:	d006      	beq.n	8014c6e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	633b      	str	r3, [r7, #48]	; 0x30
 8014c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d1e6      	bne.n	8014c3a <ip4_reass+0xb6>
 8014c6c:	e000      	b.n	8014c70 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014c6e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d109      	bne.n	8014c8a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014c76:	8c3b      	ldrh	r3, [r7, #32]
 8014c78:	4619      	mov	r1, r3
 8014c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c7c:	f7ff fdb0 	bl	80147e0 <ip_reass_enqueue_new_datagram>
 8014c80:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d11c      	bne.n	8014cc2 <ip4_reass+0x13e>
      goto nullreturn;
 8014c88:	e109      	b.n	8014e9e <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c8c:	88db      	ldrh	r3, [r3, #6]
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7f5 ff47 	bl	800ab24 <lwip_htons>
 8014c96:	4603      	mov	r3, r0
 8014c98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d110      	bne.n	8014cc2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca2:	89db      	ldrh	r3, [r3, #14]
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7f5 ff3d 	bl	800ab24 <lwip_htons>
 8014caa:	4603      	mov	r3, r0
 8014cac:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d006      	beq.n	8014cc2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb6:	3308      	adds	r3, #8
 8014cb8:	2214      	movs	r2, #20
 8014cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	f000 fba1 	bl	8015404 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8014cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cc4:	88db      	ldrh	r3, [r3, #6]
 8014cc6:	b29b      	uxth	r3, r3
 8014cc8:	f003 0320 	and.w	r3, r3, #32
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	bf0c      	ite	eq
 8014cd0:	2301      	moveq	r3, #1
 8014cd2:	2300      	movne	r3, #0
 8014cd4:	b2db      	uxtb	r3, r3
 8014cd6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014cd8:	69fb      	ldr	r3, [r7, #28]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d00e      	beq.n	8014cfc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8014cde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014ce0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ce2:	4413      	add	r3, r2
 8014ce4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014ce6:	8b7a      	ldrh	r2, [r7, #26]
 8014ce8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014cea:	429a      	cmp	r2, r3
 8014cec:	f0c0 80a0 	bcc.w	8014e30 <ip4_reass+0x2ac>
 8014cf0:	8b7b      	ldrh	r3, [r7, #26]
 8014cf2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014cf6:	4293      	cmp	r3, r2
 8014cf8:	f200 809a 	bhi.w	8014e30 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014cfc:	69fa      	ldr	r2, [r7, #28]
 8014cfe:	6879      	ldr	r1, [r7, #4]
 8014d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d02:	f7ff fdd5 	bl	80148b0 <ip_reass_chain_frag_into_datagram_and_validate>
 8014d06:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014d0e:	f000 8091 	beq.w	8014e34 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014d12:	4b5b      	ldr	r3, [pc, #364]	; (8014e80 <ip4_reass+0x2fc>)
 8014d14:	881a      	ldrh	r2, [r3, #0]
 8014d16:	8c3b      	ldrh	r3, [r7, #32]
 8014d18:	4413      	add	r3, r2
 8014d1a:	b29a      	uxth	r2, r3
 8014d1c:	4b58      	ldr	r3, [pc, #352]	; (8014e80 <ip4_reass+0x2fc>)
 8014d1e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014d20:	69fb      	ldr	r3, [r7, #28]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d00d      	beq.n	8014d42 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014d26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d2a:	4413      	add	r3, r2
 8014d2c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d30:	8a7a      	ldrh	r2, [r7, #18]
 8014d32:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d36:	7f9b      	ldrb	r3, [r3, #30]
 8014d38:	f043 0301 	orr.w	r3, r3, #1
 8014d3c:	b2da      	uxtb	r2, r3
 8014d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d40:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014d42:	697b      	ldr	r3, [r7, #20]
 8014d44:	2b01      	cmp	r3, #1
 8014d46:	d171      	bne.n	8014e2c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d4a:	8b9b      	ldrh	r3, [r3, #28]
 8014d4c:	3314      	adds	r3, #20
 8014d4e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d52:	685b      	ldr	r3, [r3, #4]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	685b      	ldr	r3, [r3, #4]
 8014d60:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d64:	3308      	adds	r3, #8
 8014d66:	2214      	movs	r2, #20
 8014d68:	4619      	mov	r1, r3
 8014d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d6c:	f000 fb4a 	bl	8015404 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014d70:	8a3b      	ldrh	r3, [r7, #16]
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7f5 fed6 	bl	800ab24 <lwip_htons>
 8014d78:	4603      	mov	r3, r0
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d7e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d82:	2200      	movs	r2, #0
 8014d84:	719a      	strb	r2, [r3, #6]
 8014d86:	2200      	movs	r2, #0
 8014d88:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	729a      	strb	r2, [r3, #10]
 8014d90:	2200      	movs	r2, #0
 8014d92:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d96:	685b      	ldr	r3, [r3, #4]
 8014d98:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014d9a:	e00d      	b.n	8014db8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014da2:	2114      	movs	r1, #20
 8014da4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014da6:	f7f7 f9c9 	bl	800c13c <pbuf_remove_header>
      pbuf_cat(p, r);
 8014daa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014dac:	6878      	ldr	r0, [r7, #4]
 8014dae:	f7f7 fb0d 	bl	800c3cc <pbuf_cat>
      r = iprh->next_pbuf;
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d1ee      	bne.n	8014d9c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8014dbe:	4b31      	ldr	r3, [pc, #196]	; (8014e84 <ip4_reass+0x300>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dc4:	429a      	cmp	r2, r3
 8014dc6:	d102      	bne.n	8014dce <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014dc8:	2300      	movs	r3, #0
 8014dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014dcc:	e010      	b.n	8014df0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014dce:	4b2d      	ldr	r3, [pc, #180]	; (8014e84 <ip4_reass+0x300>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014dd4:	e007      	b.n	8014de6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d006      	beq.n	8014dee <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8014de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d1f4      	bne.n	8014dd6 <ip4_reass+0x252>
 8014dec:	e000      	b.n	8014df0 <ip4_reass+0x26c>
          break;
 8014dee:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8014df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014df2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014df4:	f7ff fd2e 	bl	8014854 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f7f7 faad 	bl	800c358 <pbuf_clen>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8014e02:	4b1f      	ldr	r3, [pc, #124]	; (8014e80 <ip4_reass+0x2fc>)
 8014e04:	881b      	ldrh	r3, [r3, #0]
 8014e06:	8c3a      	ldrh	r2, [r7, #32]
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d906      	bls.n	8014e1a <ip4_reass+0x296>
 8014e0c:	4b1e      	ldr	r3, [pc, #120]	; (8014e88 <ip4_reass+0x304>)
 8014e0e:	f240 229b 	movw	r2, #667	; 0x29b
 8014e12:	491e      	ldr	r1, [pc, #120]	; (8014e8c <ip4_reass+0x308>)
 8014e14:	481e      	ldr	r0, [pc, #120]	; (8014e90 <ip4_reass+0x30c>)
 8014e16:	f000 fb25 	bl	8015464 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014e1a:	4b19      	ldr	r3, [pc, #100]	; (8014e80 <ip4_reass+0x2fc>)
 8014e1c:	881a      	ldrh	r2, [r3, #0]
 8014e1e:	8c3b      	ldrh	r3, [r7, #32]
 8014e20:	1ad3      	subs	r3, r2, r3
 8014e22:	b29a      	uxth	r2, r3
 8014e24:	4b16      	ldr	r3, [pc, #88]	; (8014e80 <ip4_reass+0x2fc>)
 8014e26:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	e03c      	b.n	8014ea6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	e03a      	b.n	8014ea6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8014e30:	bf00      	nop
 8014e32:	e000      	b.n	8014e36 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014e34:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d106      	bne.n	8014e4a <ip4_reass+0x2c6>
 8014e3c:	4b12      	ldr	r3, [pc, #72]	; (8014e88 <ip4_reass+0x304>)
 8014e3e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014e42:	4914      	ldr	r1, [pc, #80]	; (8014e94 <ip4_reass+0x310>)
 8014e44:	4812      	ldr	r0, [pc, #72]	; (8014e90 <ip4_reass+0x30c>)
 8014e46:	f000 fb0d 	bl	8015464 <iprintf>
  if (ipr->p == NULL) {
 8014e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4c:	685b      	ldr	r3, [r3, #4]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d124      	bne.n	8014e9c <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014e52:	4b0c      	ldr	r3, [pc, #48]	; (8014e84 <ip4_reass+0x300>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e58:	429a      	cmp	r2, r3
 8014e5a:	d006      	beq.n	8014e6a <ip4_reass+0x2e6>
 8014e5c:	4b0a      	ldr	r3, [pc, #40]	; (8014e88 <ip4_reass+0x304>)
 8014e5e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014e62:	490d      	ldr	r1, [pc, #52]	; (8014e98 <ip4_reass+0x314>)
 8014e64:	480a      	ldr	r0, [pc, #40]	; (8014e90 <ip4_reass+0x30c>)
 8014e66:	f000 fafd 	bl	8015464 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014e6a:	2100      	movs	r1, #0
 8014e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e6e:	f7ff fcf1 	bl	8014854 <ip_reass_dequeue_datagram>
 8014e72:	e014      	b.n	8014e9e <ip4_reass+0x31a>
    goto nullreturn;
 8014e74:	bf00      	nop
 8014e76:	e012      	b.n	8014e9e <ip4_reass+0x31a>
    goto nullreturn;
 8014e78:	bf00      	nop
 8014e7a:	e010      	b.n	8014e9e <ip4_reass+0x31a>
      goto nullreturn;
 8014e7c:	bf00      	nop
 8014e7e:	e00e      	b.n	8014e9e <ip4_reass+0x31a>
 8014e80:	20000b50 	.word	0x20000b50
 8014e84:	20000b4c 	.word	0x20000b4c
 8014e88:	0801a2b4 	.word	0x0801a2b4
 8014e8c:	0801a424 	.word	0x0801a424
 8014e90:	0801a2fc 	.word	0x0801a2fc
 8014e94:	0801a440 	.word	0x0801a440
 8014e98:	0801a44c 	.word	0x0801a44c
  }

nullreturn:
 8014e9c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	f7f7 f9d2 	bl	800c248 <pbuf_free>
  return NULL;
 8014ea4:	2300      	movs	r3, #0
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3738      	adds	r7, #56	; 0x38
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}
 8014eae:	bf00      	nop

08014eb0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014eb4:	2005      	movs	r0, #5
 8014eb6:	f7f6 fb69 	bl	800b58c <memp_malloc>
 8014eba:	4603      	mov	r3, r0
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	bd80      	pop	{r7, pc}

08014ec0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d106      	bne.n	8014edc <ip_frag_free_pbuf_custom_ref+0x1c>
 8014ece:	4b07      	ldr	r3, [pc, #28]	; (8014eec <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014ed0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014ed4:	4906      	ldr	r1, [pc, #24]	; (8014ef0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014ed6:	4807      	ldr	r0, [pc, #28]	; (8014ef4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014ed8:	f000 fac4 	bl	8015464 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014edc:	6879      	ldr	r1, [r7, #4]
 8014ede:	2005      	movs	r0, #5
 8014ee0:	f7f6 fba0 	bl	800b624 <memp_free>
}
 8014ee4:	bf00      	nop
 8014ee6:	3708      	adds	r7, #8
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	bd80      	pop	{r7, pc}
 8014eec:	0801a2b4 	.word	0x0801a2b4
 8014ef0:	0801a46c 	.word	0x0801a46c
 8014ef4:	0801a2fc 	.word	0x0801a2fc

08014ef8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b084      	sub	sp, #16
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d106      	bne.n	8014f18 <ipfrag_free_pbuf_custom+0x20>
 8014f0a:	4b11      	ldr	r3, [pc, #68]	; (8014f50 <ipfrag_free_pbuf_custom+0x58>)
 8014f0c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014f10:	4910      	ldr	r1, [pc, #64]	; (8014f54 <ipfrag_free_pbuf_custom+0x5c>)
 8014f12:	4811      	ldr	r0, [pc, #68]	; (8014f58 <ipfrag_free_pbuf_custom+0x60>)
 8014f14:	f000 faa6 	bl	8015464 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014f18:	68fa      	ldr	r2, [r7, #12]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d006      	beq.n	8014f2e <ipfrag_free_pbuf_custom+0x36>
 8014f20:	4b0b      	ldr	r3, [pc, #44]	; (8014f50 <ipfrag_free_pbuf_custom+0x58>)
 8014f22:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014f26:	490d      	ldr	r1, [pc, #52]	; (8014f5c <ipfrag_free_pbuf_custom+0x64>)
 8014f28:	480b      	ldr	r0, [pc, #44]	; (8014f58 <ipfrag_free_pbuf_custom+0x60>)
 8014f2a:	f000 fa9b 	bl	8015464 <iprintf>
  if (pcr->original != NULL) {
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	695b      	ldr	r3, [r3, #20]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d004      	beq.n	8014f40 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	695b      	ldr	r3, [r3, #20]
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7f7 f984 	bl	800c248 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014f40:	68f8      	ldr	r0, [r7, #12]
 8014f42:	f7ff ffbd 	bl	8014ec0 <ip_frag_free_pbuf_custom_ref>
}
 8014f46:	bf00      	nop
 8014f48:	3710      	adds	r7, #16
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	0801a2b4 	.word	0x0801a2b4
 8014f54:	0801a478 	.word	0x0801a478
 8014f58:	0801a2fc 	.word	0x0801a2fc
 8014f5c:	0801a484 	.word	0x0801a484

08014f60 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b094      	sub	sp, #80	; 0x50
 8014f64:	af02      	add	r7, sp, #8
 8014f66:	60f8      	str	r0, [r7, #12]
 8014f68:	60b9      	str	r1, [r7, #8]
 8014f6a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014f76:	3b14      	subs	r3, #20
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	da00      	bge.n	8014f7e <ip4_frag+0x1e>
 8014f7c:	3307      	adds	r3, #7
 8014f7e:	10db      	asrs	r3, r3, #3
 8014f80:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014f82:	2314      	movs	r3, #20
 8014f84:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	685b      	ldr	r3, [r3, #4]
 8014f8a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f8e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f92:	781b      	ldrb	r3, [r3, #0]
 8014f94:	f003 030f 	and.w	r3, r3, #15
 8014f98:	b2db      	uxtb	r3, r3
 8014f9a:	009b      	lsls	r3, r3, #2
 8014f9c:	b2db      	uxtb	r3, r3
 8014f9e:	2b14      	cmp	r3, #20
 8014fa0:	d002      	beq.n	8014fa8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014fa2:	f06f 0305 	mvn.w	r3, #5
 8014fa6:	e110      	b.n	80151ca <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	895b      	ldrh	r3, [r3, #10]
 8014fac:	2b13      	cmp	r3, #19
 8014fae:	d809      	bhi.n	8014fc4 <ip4_frag+0x64>
 8014fb0:	4b88      	ldr	r3, [pc, #544]	; (80151d4 <ip4_frag+0x274>)
 8014fb2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014fb6:	4988      	ldr	r1, [pc, #544]	; (80151d8 <ip4_frag+0x278>)
 8014fb8:	4888      	ldr	r0, [pc, #544]	; (80151dc <ip4_frag+0x27c>)
 8014fba:	f000 fa53 	bl	8015464 <iprintf>
 8014fbe:	f06f 0305 	mvn.w	r3, #5
 8014fc2:	e102      	b.n	80151ca <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc6:	88db      	ldrh	r3, [r3, #6]
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7f5 fdaa 	bl	800ab24 <lwip_htons>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014fd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014fd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014fda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014fde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014fe4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	891b      	ldrh	r3, [r3, #8]
 8014fea:	3b14      	subs	r3, #20
 8014fec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014ff0:	e0e1      	b.n	80151b6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014ff2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014ff4:	00db      	lsls	r3, r3, #3
 8014ff6:	b29b      	uxth	r3, r3
 8014ff8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014ffc:	4293      	cmp	r3, r2
 8014ffe:	bf28      	it	cs
 8015000:	4613      	movcs	r3, r2
 8015002:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015004:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015008:	2114      	movs	r1, #20
 801500a:	200e      	movs	r0, #14
 801500c:	f7f6 fe38 	bl	800bc80 <pbuf_alloc>
 8015010:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015014:	2b00      	cmp	r3, #0
 8015016:	f000 80d5 	beq.w	80151c4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501c:	895b      	ldrh	r3, [r3, #10]
 801501e:	2b13      	cmp	r3, #19
 8015020:	d806      	bhi.n	8015030 <ip4_frag+0xd0>
 8015022:	4b6c      	ldr	r3, [pc, #432]	; (80151d4 <ip4_frag+0x274>)
 8015024:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015028:	496d      	ldr	r1, [pc, #436]	; (80151e0 <ip4_frag+0x280>)
 801502a:	486c      	ldr	r0, [pc, #432]	; (80151dc <ip4_frag+0x27c>)
 801502c:	f000 fa1a 	bl	8015464 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	2214      	movs	r2, #20
 8015036:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015038:	4618      	mov	r0, r3
 801503a:	f000 f9e3 	bl	8015404 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015040:	685b      	ldr	r3, [r3, #4]
 8015042:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015044:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015046:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801504a:	e064      	b.n	8015116 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	895a      	ldrh	r2, [r3, #10]
 8015050:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015052:	1ad3      	subs	r3, r2, r3
 8015054:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	895b      	ldrh	r3, [r3, #10]
 801505a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801505c:	429a      	cmp	r2, r3
 801505e:	d906      	bls.n	801506e <ip4_frag+0x10e>
 8015060:	4b5c      	ldr	r3, [pc, #368]	; (80151d4 <ip4_frag+0x274>)
 8015062:	f240 322d 	movw	r2, #813	; 0x32d
 8015066:	495f      	ldr	r1, [pc, #380]	; (80151e4 <ip4_frag+0x284>)
 8015068:	485c      	ldr	r0, [pc, #368]	; (80151dc <ip4_frag+0x27c>)
 801506a:	f000 f9fb 	bl	8015464 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801506e:	8bfa      	ldrh	r2, [r7, #30]
 8015070:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015074:	4293      	cmp	r3, r2
 8015076:	bf28      	it	cs
 8015078:	4613      	movcs	r3, r2
 801507a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801507e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015082:	2b00      	cmp	r3, #0
 8015084:	d105      	bne.n	8015092 <ip4_frag+0x132>
        poff = 0;
 8015086:	2300      	movs	r3, #0
 8015088:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	60fb      	str	r3, [r7, #12]
        continue;
 8015090:	e041      	b.n	8015116 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015092:	f7ff ff0d 	bl	8014eb0 <ip_frag_alloc_pbuf_custom_ref>
 8015096:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015098:	69bb      	ldr	r3, [r7, #24]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d103      	bne.n	80150a6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801509e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150a0:	f7f7 f8d2 	bl	800c248 <pbuf_free>
        goto memerr;
 80150a4:	e08f      	b.n	80151c6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80150a6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80150ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80150ae:	4413      	add	r3, r2
 80150b0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80150b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80150b8:	9201      	str	r2, [sp, #4]
 80150ba:	9300      	str	r3, [sp, #0]
 80150bc:	4603      	mov	r3, r0
 80150be:	2241      	movs	r2, #65	; 0x41
 80150c0:	2000      	movs	r0, #0
 80150c2:	f7f6 ff07 	bl	800bed4 <pbuf_alloced_custom>
 80150c6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d106      	bne.n	80150dc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80150ce:	69b8      	ldr	r0, [r7, #24]
 80150d0:	f7ff fef6 	bl	8014ec0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80150d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150d6:	f7f7 f8b7 	bl	800c248 <pbuf_free>
        goto memerr;
 80150da:	e074      	b.n	80151c6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80150dc:	68f8      	ldr	r0, [r7, #12]
 80150de:	f7f7 f953 	bl	800c388 <pbuf_ref>
      pcr->original = p;
 80150e2:	69bb      	ldr	r3, [r7, #24]
 80150e4:	68fa      	ldr	r2, [r7, #12]
 80150e6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80150e8:	69bb      	ldr	r3, [r7, #24]
 80150ea:	4a3f      	ldr	r2, [pc, #252]	; (80151e8 <ip4_frag+0x288>)
 80150ec:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80150ee:	6979      	ldr	r1, [r7, #20]
 80150f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80150f2:	f7f7 f96b 	bl	800c3cc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80150f6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80150fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80150fe:	1ad3      	subs	r3, r2, r3
 8015100:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015104:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015108:	2b00      	cmp	r3, #0
 801510a:	d004      	beq.n	8015116 <ip4_frag+0x1b6>
        poff = 0;
 801510c:	2300      	movs	r3, #0
 801510e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015110:	68fb      	ldr	r3, [r7, #12]
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015116:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801511a:	2b00      	cmp	r3, #0
 801511c:	d196      	bne.n	801504c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801511e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015120:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015124:	4413      	add	r3, r2
 8015126:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801512c:	f1a3 0213 	sub.w	r2, r3, #19
 8015130:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015134:	429a      	cmp	r2, r3
 8015136:	bfcc      	ite	gt
 8015138:	2301      	movgt	r3, #1
 801513a:	2300      	movle	r3, #0
 801513c:	b2db      	uxtb	r3, r3
 801513e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015140:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015144:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015148:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801514a:	6a3b      	ldr	r3, [r7, #32]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d002      	beq.n	8015156 <ip4_frag+0x1f6>
 8015150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015152:	2b00      	cmp	r3, #0
 8015154:	d003      	beq.n	801515e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015156:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801515c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801515e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015160:	4618      	mov	r0, r3
 8015162:	f7f5 fcdf 	bl	800ab24 <lwip_htons>
 8015166:	4603      	mov	r3, r0
 8015168:	461a      	mov	r2, r3
 801516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801516c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801516e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015170:	3314      	adds	r3, #20
 8015172:	b29b      	uxth	r3, r3
 8015174:	4618      	mov	r0, r3
 8015176:	f7f5 fcd5 	bl	800ab24 <lwip_htons>
 801517a:	4603      	mov	r3, r0
 801517c:	461a      	mov	r2, r3
 801517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015180:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015184:	2200      	movs	r2, #0
 8015186:	729a      	strb	r2, [r3, #10]
 8015188:	2200      	movs	r2, #0
 801518a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	695b      	ldr	r3, [r3, #20]
 8015190:	687a      	ldr	r2, [r7, #4]
 8015192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015194:	68b8      	ldr	r0, [r7, #8]
 8015196:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801519a:	f7f7 f855 	bl	800c248 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801519e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80151a4:	1ad3      	subs	r3, r2, r3
 80151a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80151aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80151ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151b0:	4413      	add	r3, r2
 80151b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80151b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	f47f af19 	bne.w	8014ff2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80151c0:	2300      	movs	r3, #0
 80151c2:	e002      	b.n	80151ca <ip4_frag+0x26a>
      goto memerr;
 80151c4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80151c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3748      	adds	r7, #72	; 0x48
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	0801a2b4 	.word	0x0801a2b4
 80151d8:	0801a490 	.word	0x0801a490
 80151dc:	0801a2fc 	.word	0x0801a2fc
 80151e0:	0801a4ac 	.word	0x0801a4ac
 80151e4:	0801a4cc 	.word	0x0801a4cc
 80151e8:	08014ef9 	.word	0x08014ef9

080151ec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b086      	sub	sp, #24
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
 80151f4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80151f6:	230e      	movs	r3, #14
 80151f8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	895b      	ldrh	r3, [r3, #10]
 80151fe:	2b0e      	cmp	r3, #14
 8015200:	d96e      	bls.n	80152e0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	7bdb      	ldrb	r3, [r3, #15]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d106      	bne.n	8015218 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015210:	3301      	adds	r3, #1
 8015212:	b2da      	uxtb	r2, r3
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	685b      	ldr	r3, [r3, #4]
 801521c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	7b1a      	ldrb	r2, [r3, #12]
 8015222:	7b5b      	ldrb	r3, [r3, #13]
 8015224:	021b      	lsls	r3, r3, #8
 8015226:	4313      	orrs	r3, r2
 8015228:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	781b      	ldrb	r3, [r3, #0]
 801522e:	f003 0301 	and.w	r3, r3, #1
 8015232:	2b00      	cmp	r3, #0
 8015234:	d023      	beq.n	801527e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015236:	693b      	ldr	r3, [r7, #16]
 8015238:	781b      	ldrb	r3, [r3, #0]
 801523a:	2b01      	cmp	r3, #1
 801523c:	d10f      	bne.n	801525e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801523e:	693b      	ldr	r3, [r7, #16]
 8015240:	785b      	ldrb	r3, [r3, #1]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d11b      	bne.n	801527e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015246:	693b      	ldr	r3, [r7, #16]
 8015248:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801524a:	2b5e      	cmp	r3, #94	; 0x5e
 801524c:	d117      	bne.n	801527e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	7b5b      	ldrb	r3, [r3, #13]
 8015252:	f043 0310 	orr.w	r3, r3, #16
 8015256:	b2da      	uxtb	r2, r3
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	735a      	strb	r2, [r3, #13]
 801525c:	e00f      	b.n	801527e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	2206      	movs	r2, #6
 8015262:	4928      	ldr	r1, [pc, #160]	; (8015304 <ethernet_input+0x118>)
 8015264:	4618      	mov	r0, r3
 8015266:	f000 f8bf 	bl	80153e8 <memcmp>
 801526a:	4603      	mov	r3, r0
 801526c:	2b00      	cmp	r3, #0
 801526e:	d106      	bne.n	801527e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	7b5b      	ldrb	r3, [r3, #13]
 8015274:	f043 0308 	orr.w	r3, r3, #8
 8015278:	b2da      	uxtb	r2, r3
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801527e:	89fb      	ldrh	r3, [r7, #14]
 8015280:	2b08      	cmp	r3, #8
 8015282:	d003      	beq.n	801528c <ethernet_input+0xa0>
 8015284:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015288:	d014      	beq.n	80152b4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801528a:	e032      	b.n	80152f2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015292:	f003 0308 	and.w	r3, r3, #8
 8015296:	2b00      	cmp	r3, #0
 8015298:	d024      	beq.n	80152e4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801529a:	8afb      	ldrh	r3, [r7, #22]
 801529c:	4619      	mov	r1, r3
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f7f6 ff4c 	bl	800c13c <pbuf_remove_header>
 80152a4:	4603      	mov	r3, r0
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d11e      	bne.n	80152e8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80152aa:	6839      	ldr	r1, [r7, #0]
 80152ac:	6878      	ldr	r0, [r7, #4]
 80152ae:	f7fe ff27 	bl	8014100 <ip4_input>
      break;
 80152b2:	e013      	b.n	80152dc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80152b4:	683b      	ldr	r3, [r7, #0]
 80152b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152ba:	f003 0308 	and.w	r3, r3, #8
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d014      	beq.n	80152ec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80152c2:	8afb      	ldrh	r3, [r7, #22]
 80152c4:	4619      	mov	r1, r3
 80152c6:	6878      	ldr	r0, [r7, #4]
 80152c8:	f7f6 ff38 	bl	800c13c <pbuf_remove_header>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d10e      	bne.n	80152f0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80152d2:	6839      	ldr	r1, [r7, #0]
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	f7fe f8c7 	bl	8013468 <etharp_input>
      break;
 80152da:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80152dc:	2300      	movs	r3, #0
 80152de:	e00c      	b.n	80152fa <ethernet_input+0x10e>
    goto free_and_return;
 80152e0:	bf00      	nop
 80152e2:	e006      	b.n	80152f2 <ethernet_input+0x106>
        goto free_and_return;
 80152e4:	bf00      	nop
 80152e6:	e004      	b.n	80152f2 <ethernet_input+0x106>
        goto free_and_return;
 80152e8:	bf00      	nop
 80152ea:	e002      	b.n	80152f2 <ethernet_input+0x106>
        goto free_and_return;
 80152ec:	bf00      	nop
 80152ee:	e000      	b.n	80152f2 <ethernet_input+0x106>
        goto free_and_return;
 80152f0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80152f2:	6878      	ldr	r0, [r7, #4]
 80152f4:	f7f6 ffa8 	bl	800c248 <pbuf_free>
  return ERR_OK;
 80152f8:	2300      	movs	r3, #0
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3718      	adds	r7, #24
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}
 8015302:	bf00      	nop
 8015304:	08021634 	.word	0x08021634

08015308 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015308:	b580      	push	{r7, lr}
 801530a:	b086      	sub	sp, #24
 801530c:	af00      	add	r7, sp, #0
 801530e:	60f8      	str	r0, [r7, #12]
 8015310:	60b9      	str	r1, [r7, #8]
 8015312:	607a      	str	r2, [r7, #4]
 8015314:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015316:	8c3b      	ldrh	r3, [r7, #32]
 8015318:	4618      	mov	r0, r3
 801531a:	f7f5 fc03 	bl	800ab24 <lwip_htons>
 801531e:	4603      	mov	r3, r0
 8015320:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015322:	210e      	movs	r1, #14
 8015324:	68b8      	ldr	r0, [r7, #8]
 8015326:	f7f6 fef9 	bl	800c11c <pbuf_add_header>
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d125      	bne.n	801537c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	685b      	ldr	r3, [r3, #4]
 8015334:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015336:	693b      	ldr	r3, [r7, #16]
 8015338:	8afa      	ldrh	r2, [r7, #22]
 801533a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	2206      	movs	r2, #6
 8015340:	6839      	ldr	r1, [r7, #0]
 8015342:	4618      	mov	r0, r3
 8015344:	f000 f85e 	bl	8015404 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015348:	693b      	ldr	r3, [r7, #16]
 801534a:	3306      	adds	r3, #6
 801534c:	2206      	movs	r2, #6
 801534e:	6879      	ldr	r1, [r7, #4]
 8015350:	4618      	mov	r0, r3
 8015352:	f000 f857 	bl	8015404 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801535c:	2b06      	cmp	r3, #6
 801535e:	d006      	beq.n	801536e <ethernet_output+0x66>
 8015360:	4b0a      	ldr	r3, [pc, #40]	; (801538c <ethernet_output+0x84>)
 8015362:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015366:	490a      	ldr	r1, [pc, #40]	; (8015390 <ethernet_output+0x88>)
 8015368:	480a      	ldr	r0, [pc, #40]	; (8015394 <ethernet_output+0x8c>)
 801536a:	f000 f87b 	bl	8015464 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	699b      	ldr	r3, [r3, #24]
 8015372:	68b9      	ldr	r1, [r7, #8]
 8015374:	68f8      	ldr	r0, [r7, #12]
 8015376:	4798      	blx	r3
 8015378:	4603      	mov	r3, r0
 801537a:	e002      	b.n	8015382 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801537c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801537e:	f06f 0301 	mvn.w	r3, #1
}
 8015382:	4618      	mov	r0, r3
 8015384:	3718      	adds	r7, #24
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}
 801538a:	bf00      	nop
 801538c:	0801a4dc 	.word	0x0801a4dc
 8015390:	0801a514 	.word	0x0801a514
 8015394:	0801a548 	.word	0x0801a548

08015398 <atoi>:
 8015398:	220a      	movs	r2, #10
 801539a:	2100      	movs	r1, #0
 801539c:	f000 ba94 	b.w	80158c8 <strtol>

080153a0 <__libc_init_array>:
 80153a0:	b570      	push	{r4, r5, r6, lr}
 80153a2:	4d0d      	ldr	r5, [pc, #52]	; (80153d8 <__libc_init_array+0x38>)
 80153a4:	4c0d      	ldr	r4, [pc, #52]	; (80153dc <__libc_init_array+0x3c>)
 80153a6:	1b64      	subs	r4, r4, r5
 80153a8:	10a4      	asrs	r4, r4, #2
 80153aa:	2600      	movs	r6, #0
 80153ac:	42a6      	cmp	r6, r4
 80153ae:	d109      	bne.n	80153c4 <__libc_init_array+0x24>
 80153b0:	4d0b      	ldr	r5, [pc, #44]	; (80153e0 <__libc_init_array+0x40>)
 80153b2:	4c0c      	ldr	r4, [pc, #48]	; (80153e4 <__libc_init_array+0x44>)
 80153b4:	f001 fbe4 	bl	8016b80 <_init>
 80153b8:	1b64      	subs	r4, r4, r5
 80153ba:	10a4      	asrs	r4, r4, #2
 80153bc:	2600      	movs	r6, #0
 80153be:	42a6      	cmp	r6, r4
 80153c0:	d105      	bne.n	80153ce <__libc_init_array+0x2e>
 80153c2:	bd70      	pop	{r4, r5, r6, pc}
 80153c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80153c8:	4798      	blx	r3
 80153ca:	3601      	adds	r6, #1
 80153cc:	e7ee      	b.n	80153ac <__libc_init_array+0xc>
 80153ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80153d2:	4798      	blx	r3
 80153d4:	3601      	adds	r6, #1
 80153d6:	e7f2      	b.n	80153be <__libc_init_array+0x1e>
 80153d8:	08021898 	.word	0x08021898
 80153dc:	08021898 	.word	0x08021898
 80153e0:	08021898 	.word	0x08021898
 80153e4:	0802189c 	.word	0x0802189c

080153e8 <memcmp>:
 80153e8:	b530      	push	{r4, r5, lr}
 80153ea:	3901      	subs	r1, #1
 80153ec:	2400      	movs	r4, #0
 80153ee:	42a2      	cmp	r2, r4
 80153f0:	d101      	bne.n	80153f6 <memcmp+0xe>
 80153f2:	2000      	movs	r0, #0
 80153f4:	e005      	b.n	8015402 <memcmp+0x1a>
 80153f6:	5d03      	ldrb	r3, [r0, r4]
 80153f8:	3401      	adds	r4, #1
 80153fa:	5d0d      	ldrb	r5, [r1, r4]
 80153fc:	42ab      	cmp	r3, r5
 80153fe:	d0f6      	beq.n	80153ee <memcmp+0x6>
 8015400:	1b58      	subs	r0, r3, r5
 8015402:	bd30      	pop	{r4, r5, pc}

08015404 <memcpy>:
 8015404:	440a      	add	r2, r1
 8015406:	4291      	cmp	r1, r2
 8015408:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801540c:	d100      	bne.n	8015410 <memcpy+0xc>
 801540e:	4770      	bx	lr
 8015410:	b510      	push	{r4, lr}
 8015412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015416:	f803 4f01 	strb.w	r4, [r3, #1]!
 801541a:	4291      	cmp	r1, r2
 801541c:	d1f9      	bne.n	8015412 <memcpy+0xe>
 801541e:	bd10      	pop	{r4, pc}

08015420 <memmove>:
 8015420:	4288      	cmp	r0, r1
 8015422:	b510      	push	{r4, lr}
 8015424:	eb01 0402 	add.w	r4, r1, r2
 8015428:	d902      	bls.n	8015430 <memmove+0x10>
 801542a:	4284      	cmp	r4, r0
 801542c:	4623      	mov	r3, r4
 801542e:	d807      	bhi.n	8015440 <memmove+0x20>
 8015430:	1e43      	subs	r3, r0, #1
 8015432:	42a1      	cmp	r1, r4
 8015434:	d008      	beq.n	8015448 <memmove+0x28>
 8015436:	f811 2b01 	ldrb.w	r2, [r1], #1
 801543a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801543e:	e7f8      	b.n	8015432 <memmove+0x12>
 8015440:	4402      	add	r2, r0
 8015442:	4601      	mov	r1, r0
 8015444:	428a      	cmp	r2, r1
 8015446:	d100      	bne.n	801544a <memmove+0x2a>
 8015448:	bd10      	pop	{r4, pc}
 801544a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801544e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015452:	e7f7      	b.n	8015444 <memmove+0x24>

08015454 <memset>:
 8015454:	4402      	add	r2, r0
 8015456:	4603      	mov	r3, r0
 8015458:	4293      	cmp	r3, r2
 801545a:	d100      	bne.n	801545e <memset+0xa>
 801545c:	4770      	bx	lr
 801545e:	f803 1b01 	strb.w	r1, [r3], #1
 8015462:	e7f9      	b.n	8015458 <memset+0x4>

08015464 <iprintf>:
 8015464:	b40f      	push	{r0, r1, r2, r3}
 8015466:	4b0a      	ldr	r3, [pc, #40]	; (8015490 <iprintf+0x2c>)
 8015468:	b513      	push	{r0, r1, r4, lr}
 801546a:	681c      	ldr	r4, [r3, #0]
 801546c:	b124      	cbz	r4, 8015478 <iprintf+0x14>
 801546e:	69a3      	ldr	r3, [r4, #24]
 8015470:	b913      	cbnz	r3, 8015478 <iprintf+0x14>
 8015472:	4620      	mov	r0, r4
 8015474:	f000 fc30 	bl	8015cd8 <__sinit>
 8015478:	ab05      	add	r3, sp, #20
 801547a:	9a04      	ldr	r2, [sp, #16]
 801547c:	68a1      	ldr	r1, [r4, #8]
 801547e:	9301      	str	r3, [sp, #4]
 8015480:	4620      	mov	r0, r4
 8015482:	f000 ff77 	bl	8016374 <_vfiprintf_r>
 8015486:	b002      	add	sp, #8
 8015488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801548c:	b004      	add	sp, #16
 801548e:	4770      	bx	lr
 8015490:	200004bc 	.word	0x200004bc

08015494 <_puts_r>:
 8015494:	b570      	push	{r4, r5, r6, lr}
 8015496:	460e      	mov	r6, r1
 8015498:	4605      	mov	r5, r0
 801549a:	b118      	cbz	r0, 80154a4 <_puts_r+0x10>
 801549c:	6983      	ldr	r3, [r0, #24]
 801549e:	b90b      	cbnz	r3, 80154a4 <_puts_r+0x10>
 80154a0:	f000 fc1a 	bl	8015cd8 <__sinit>
 80154a4:	69ab      	ldr	r3, [r5, #24]
 80154a6:	68ac      	ldr	r4, [r5, #8]
 80154a8:	b913      	cbnz	r3, 80154b0 <_puts_r+0x1c>
 80154aa:	4628      	mov	r0, r5
 80154ac:	f000 fc14 	bl	8015cd8 <__sinit>
 80154b0:	4b2c      	ldr	r3, [pc, #176]	; (8015564 <_puts_r+0xd0>)
 80154b2:	429c      	cmp	r4, r3
 80154b4:	d120      	bne.n	80154f8 <_puts_r+0x64>
 80154b6:	686c      	ldr	r4, [r5, #4]
 80154b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154ba:	07db      	lsls	r3, r3, #31
 80154bc:	d405      	bmi.n	80154ca <_puts_r+0x36>
 80154be:	89a3      	ldrh	r3, [r4, #12]
 80154c0:	0598      	lsls	r0, r3, #22
 80154c2:	d402      	bmi.n	80154ca <_puts_r+0x36>
 80154c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154c6:	f000 fcb7 	bl	8015e38 <__retarget_lock_acquire_recursive>
 80154ca:	89a3      	ldrh	r3, [r4, #12]
 80154cc:	0719      	lsls	r1, r3, #28
 80154ce:	d51d      	bpl.n	801550c <_puts_r+0x78>
 80154d0:	6923      	ldr	r3, [r4, #16]
 80154d2:	b1db      	cbz	r3, 801550c <_puts_r+0x78>
 80154d4:	3e01      	subs	r6, #1
 80154d6:	68a3      	ldr	r3, [r4, #8]
 80154d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80154dc:	3b01      	subs	r3, #1
 80154de:	60a3      	str	r3, [r4, #8]
 80154e0:	bb39      	cbnz	r1, 8015532 <_puts_r+0x9e>
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	da38      	bge.n	8015558 <_puts_r+0xc4>
 80154e6:	4622      	mov	r2, r4
 80154e8:	210a      	movs	r1, #10
 80154ea:	4628      	mov	r0, r5
 80154ec:	f000 f9f6 	bl	80158dc <__swbuf_r>
 80154f0:	3001      	adds	r0, #1
 80154f2:	d011      	beq.n	8015518 <_puts_r+0x84>
 80154f4:	250a      	movs	r5, #10
 80154f6:	e011      	b.n	801551c <_puts_r+0x88>
 80154f8:	4b1b      	ldr	r3, [pc, #108]	; (8015568 <_puts_r+0xd4>)
 80154fa:	429c      	cmp	r4, r3
 80154fc:	d101      	bne.n	8015502 <_puts_r+0x6e>
 80154fe:	68ac      	ldr	r4, [r5, #8]
 8015500:	e7da      	b.n	80154b8 <_puts_r+0x24>
 8015502:	4b1a      	ldr	r3, [pc, #104]	; (801556c <_puts_r+0xd8>)
 8015504:	429c      	cmp	r4, r3
 8015506:	bf08      	it	eq
 8015508:	68ec      	ldreq	r4, [r5, #12]
 801550a:	e7d5      	b.n	80154b8 <_puts_r+0x24>
 801550c:	4621      	mov	r1, r4
 801550e:	4628      	mov	r0, r5
 8015510:	f000 fa36 	bl	8015980 <__swsetup_r>
 8015514:	2800      	cmp	r0, #0
 8015516:	d0dd      	beq.n	80154d4 <_puts_r+0x40>
 8015518:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801551c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801551e:	07da      	lsls	r2, r3, #31
 8015520:	d405      	bmi.n	801552e <_puts_r+0x9a>
 8015522:	89a3      	ldrh	r3, [r4, #12]
 8015524:	059b      	lsls	r3, r3, #22
 8015526:	d402      	bmi.n	801552e <_puts_r+0x9a>
 8015528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801552a:	f000 fc86 	bl	8015e3a <__retarget_lock_release_recursive>
 801552e:	4628      	mov	r0, r5
 8015530:	bd70      	pop	{r4, r5, r6, pc}
 8015532:	2b00      	cmp	r3, #0
 8015534:	da04      	bge.n	8015540 <_puts_r+0xac>
 8015536:	69a2      	ldr	r2, [r4, #24]
 8015538:	429a      	cmp	r2, r3
 801553a:	dc06      	bgt.n	801554a <_puts_r+0xb6>
 801553c:	290a      	cmp	r1, #10
 801553e:	d004      	beq.n	801554a <_puts_r+0xb6>
 8015540:	6823      	ldr	r3, [r4, #0]
 8015542:	1c5a      	adds	r2, r3, #1
 8015544:	6022      	str	r2, [r4, #0]
 8015546:	7019      	strb	r1, [r3, #0]
 8015548:	e7c5      	b.n	80154d6 <_puts_r+0x42>
 801554a:	4622      	mov	r2, r4
 801554c:	4628      	mov	r0, r5
 801554e:	f000 f9c5 	bl	80158dc <__swbuf_r>
 8015552:	3001      	adds	r0, #1
 8015554:	d1bf      	bne.n	80154d6 <_puts_r+0x42>
 8015556:	e7df      	b.n	8015518 <_puts_r+0x84>
 8015558:	6823      	ldr	r3, [r4, #0]
 801555a:	250a      	movs	r5, #10
 801555c:	1c5a      	adds	r2, r3, #1
 801555e:	6022      	str	r2, [r4, #0]
 8015560:	701d      	strb	r5, [r3, #0]
 8015562:	e7db      	b.n	801551c <_puts_r+0x88>
 8015564:	0802181c 	.word	0x0802181c
 8015568:	0802183c 	.word	0x0802183c
 801556c:	080217fc 	.word	0x080217fc

08015570 <puts>:
 8015570:	4b02      	ldr	r3, [pc, #8]	; (801557c <puts+0xc>)
 8015572:	4601      	mov	r1, r0
 8015574:	6818      	ldr	r0, [r3, #0]
 8015576:	f7ff bf8d 	b.w	8015494 <_puts_r>
 801557a:	bf00      	nop
 801557c:	200004bc 	.word	0x200004bc

08015580 <rand>:
 8015580:	4b17      	ldr	r3, [pc, #92]	; (80155e0 <rand+0x60>)
 8015582:	b510      	push	{r4, lr}
 8015584:	681c      	ldr	r4, [r3, #0]
 8015586:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015588:	b9b3      	cbnz	r3, 80155b8 <rand+0x38>
 801558a:	2018      	movs	r0, #24
 801558c:	f000 fcba 	bl	8015f04 <malloc>
 8015590:	63a0      	str	r0, [r4, #56]	; 0x38
 8015592:	b928      	cbnz	r0, 80155a0 <rand+0x20>
 8015594:	4602      	mov	r2, r0
 8015596:	4b13      	ldr	r3, [pc, #76]	; (80155e4 <rand+0x64>)
 8015598:	4813      	ldr	r0, [pc, #76]	; (80155e8 <rand+0x68>)
 801559a:	214e      	movs	r1, #78	; 0x4e
 801559c:	f000 fa5e 	bl	8015a5c <__assert_func>
 80155a0:	4a12      	ldr	r2, [pc, #72]	; (80155ec <rand+0x6c>)
 80155a2:	4b13      	ldr	r3, [pc, #76]	; (80155f0 <rand+0x70>)
 80155a4:	e9c0 2300 	strd	r2, r3, [r0]
 80155a8:	4b12      	ldr	r3, [pc, #72]	; (80155f4 <rand+0x74>)
 80155aa:	6083      	str	r3, [r0, #8]
 80155ac:	230b      	movs	r3, #11
 80155ae:	8183      	strh	r3, [r0, #12]
 80155b0:	2201      	movs	r2, #1
 80155b2:	2300      	movs	r3, #0
 80155b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80155b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80155ba:	480f      	ldr	r0, [pc, #60]	; (80155f8 <rand+0x78>)
 80155bc:	690a      	ldr	r2, [r1, #16]
 80155be:	694b      	ldr	r3, [r1, #20]
 80155c0:	4c0e      	ldr	r4, [pc, #56]	; (80155fc <rand+0x7c>)
 80155c2:	4350      	muls	r0, r2
 80155c4:	fb04 0003 	mla	r0, r4, r3, r0
 80155c8:	fba2 3404 	umull	r3, r4, r2, r4
 80155cc:	1c5a      	adds	r2, r3, #1
 80155ce:	4404      	add	r4, r0
 80155d0:	f144 0000 	adc.w	r0, r4, #0
 80155d4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80155d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80155dc:	bd10      	pop	{r4, pc}
 80155de:	bf00      	nop
 80155e0:	200004bc 	.word	0x200004bc
 80155e4:	08021748 	.word	0x08021748
 80155e8:	0802175f 	.word	0x0802175f
 80155ec:	abcd330e 	.word	0xabcd330e
 80155f0:	e66d1234 	.word	0xe66d1234
 80155f4:	0005deec 	.word	0x0005deec
 80155f8:	5851f42d 	.word	0x5851f42d
 80155fc:	4c957f2d 	.word	0x4c957f2d

08015600 <sniprintf>:
 8015600:	b40c      	push	{r2, r3}
 8015602:	b530      	push	{r4, r5, lr}
 8015604:	4b17      	ldr	r3, [pc, #92]	; (8015664 <sniprintf+0x64>)
 8015606:	1e0c      	subs	r4, r1, #0
 8015608:	681d      	ldr	r5, [r3, #0]
 801560a:	b09d      	sub	sp, #116	; 0x74
 801560c:	da08      	bge.n	8015620 <sniprintf+0x20>
 801560e:	238b      	movs	r3, #139	; 0x8b
 8015610:	602b      	str	r3, [r5, #0]
 8015612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015616:	b01d      	add	sp, #116	; 0x74
 8015618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801561c:	b002      	add	sp, #8
 801561e:	4770      	bx	lr
 8015620:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015624:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015628:	bf14      	ite	ne
 801562a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801562e:	4623      	moveq	r3, r4
 8015630:	9304      	str	r3, [sp, #16]
 8015632:	9307      	str	r3, [sp, #28]
 8015634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015638:	9002      	str	r0, [sp, #8]
 801563a:	9006      	str	r0, [sp, #24]
 801563c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015640:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015642:	ab21      	add	r3, sp, #132	; 0x84
 8015644:	a902      	add	r1, sp, #8
 8015646:	4628      	mov	r0, r5
 8015648:	9301      	str	r3, [sp, #4]
 801564a:	f000 fd69 	bl	8016120 <_svfiprintf_r>
 801564e:	1c43      	adds	r3, r0, #1
 8015650:	bfbc      	itt	lt
 8015652:	238b      	movlt	r3, #139	; 0x8b
 8015654:	602b      	strlt	r3, [r5, #0]
 8015656:	2c00      	cmp	r4, #0
 8015658:	d0dd      	beq.n	8015616 <sniprintf+0x16>
 801565a:	9b02      	ldr	r3, [sp, #8]
 801565c:	2200      	movs	r2, #0
 801565e:	701a      	strb	r2, [r3, #0]
 8015660:	e7d9      	b.n	8015616 <sniprintf+0x16>
 8015662:	bf00      	nop
 8015664:	200004bc 	.word	0x200004bc

08015668 <siprintf>:
 8015668:	b40e      	push	{r1, r2, r3}
 801566a:	b500      	push	{lr}
 801566c:	b09c      	sub	sp, #112	; 0x70
 801566e:	ab1d      	add	r3, sp, #116	; 0x74
 8015670:	9002      	str	r0, [sp, #8]
 8015672:	9006      	str	r0, [sp, #24]
 8015674:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015678:	4809      	ldr	r0, [pc, #36]	; (80156a0 <siprintf+0x38>)
 801567a:	9107      	str	r1, [sp, #28]
 801567c:	9104      	str	r1, [sp, #16]
 801567e:	4909      	ldr	r1, [pc, #36]	; (80156a4 <siprintf+0x3c>)
 8015680:	f853 2b04 	ldr.w	r2, [r3], #4
 8015684:	9105      	str	r1, [sp, #20]
 8015686:	6800      	ldr	r0, [r0, #0]
 8015688:	9301      	str	r3, [sp, #4]
 801568a:	a902      	add	r1, sp, #8
 801568c:	f000 fd48 	bl	8016120 <_svfiprintf_r>
 8015690:	9b02      	ldr	r3, [sp, #8]
 8015692:	2200      	movs	r2, #0
 8015694:	701a      	strb	r2, [r3, #0]
 8015696:	b01c      	add	sp, #112	; 0x70
 8015698:	f85d eb04 	ldr.w	lr, [sp], #4
 801569c:	b003      	add	sp, #12
 801569e:	4770      	bx	lr
 80156a0:	200004bc 	.word	0x200004bc
 80156a4:	ffff0208 	.word	0xffff0208

080156a8 <strcat>:
 80156a8:	b510      	push	{r4, lr}
 80156aa:	4602      	mov	r2, r0
 80156ac:	7814      	ldrb	r4, [r2, #0]
 80156ae:	4613      	mov	r3, r2
 80156b0:	3201      	adds	r2, #1
 80156b2:	2c00      	cmp	r4, #0
 80156b4:	d1fa      	bne.n	80156ac <strcat+0x4>
 80156b6:	3b01      	subs	r3, #1
 80156b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156bc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80156c0:	2a00      	cmp	r2, #0
 80156c2:	d1f9      	bne.n	80156b8 <strcat+0x10>
 80156c4:	bd10      	pop	{r4, pc}

080156c6 <strchr>:
 80156c6:	b2c9      	uxtb	r1, r1
 80156c8:	4603      	mov	r3, r0
 80156ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156ce:	b11a      	cbz	r2, 80156d8 <strchr+0x12>
 80156d0:	428a      	cmp	r2, r1
 80156d2:	d1f9      	bne.n	80156c8 <strchr+0x2>
 80156d4:	4618      	mov	r0, r3
 80156d6:	4770      	bx	lr
 80156d8:	2900      	cmp	r1, #0
 80156da:	bf18      	it	ne
 80156dc:	2300      	movne	r3, #0
 80156de:	e7f9      	b.n	80156d4 <strchr+0xe>

080156e0 <strcpy>:
 80156e0:	4603      	mov	r3, r0
 80156e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80156e6:	f803 2b01 	strb.w	r2, [r3], #1
 80156ea:	2a00      	cmp	r2, #0
 80156ec:	d1f9      	bne.n	80156e2 <strcpy+0x2>
 80156ee:	4770      	bx	lr

080156f0 <strncmp>:
 80156f0:	b510      	push	{r4, lr}
 80156f2:	b16a      	cbz	r2, 8015710 <strncmp+0x20>
 80156f4:	3901      	subs	r1, #1
 80156f6:	1884      	adds	r4, r0, r2
 80156f8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80156fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015700:	4293      	cmp	r3, r2
 8015702:	d103      	bne.n	801570c <strncmp+0x1c>
 8015704:	42a0      	cmp	r0, r4
 8015706:	d001      	beq.n	801570c <strncmp+0x1c>
 8015708:	2b00      	cmp	r3, #0
 801570a:	d1f5      	bne.n	80156f8 <strncmp+0x8>
 801570c:	1a98      	subs	r0, r3, r2
 801570e:	bd10      	pop	{r4, pc}
 8015710:	4610      	mov	r0, r2
 8015712:	e7fc      	b.n	801570e <strncmp+0x1e>

08015714 <strncpy>:
 8015714:	b510      	push	{r4, lr}
 8015716:	3901      	subs	r1, #1
 8015718:	4603      	mov	r3, r0
 801571a:	b132      	cbz	r2, 801572a <strncpy+0x16>
 801571c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015720:	f803 4b01 	strb.w	r4, [r3], #1
 8015724:	3a01      	subs	r2, #1
 8015726:	2c00      	cmp	r4, #0
 8015728:	d1f7      	bne.n	801571a <strncpy+0x6>
 801572a:	441a      	add	r2, r3
 801572c:	2100      	movs	r1, #0
 801572e:	4293      	cmp	r3, r2
 8015730:	d100      	bne.n	8015734 <strncpy+0x20>
 8015732:	bd10      	pop	{r4, pc}
 8015734:	f803 1b01 	strb.w	r1, [r3], #1
 8015738:	e7f9      	b.n	801572e <strncpy+0x1a>

0801573a <strstr>:
 801573a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801573c:	780c      	ldrb	r4, [r1, #0]
 801573e:	b164      	cbz	r4, 801575a <strstr+0x20>
 8015740:	4603      	mov	r3, r0
 8015742:	781a      	ldrb	r2, [r3, #0]
 8015744:	4618      	mov	r0, r3
 8015746:	1c5e      	adds	r6, r3, #1
 8015748:	b90a      	cbnz	r2, 801574e <strstr+0x14>
 801574a:	4610      	mov	r0, r2
 801574c:	e005      	b.n	801575a <strstr+0x20>
 801574e:	4294      	cmp	r4, r2
 8015750:	d108      	bne.n	8015764 <strstr+0x2a>
 8015752:	460d      	mov	r5, r1
 8015754:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8015758:	b902      	cbnz	r2, 801575c <strstr+0x22>
 801575a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801575c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8015760:	4297      	cmp	r7, r2
 8015762:	d0f7      	beq.n	8015754 <strstr+0x1a>
 8015764:	4633      	mov	r3, r6
 8015766:	e7ec      	b.n	8015742 <strstr+0x8>

08015768 <__strtok_r>:
 8015768:	b5f0      	push	{r4, r5, r6, r7, lr}
 801576a:	b908      	cbnz	r0, 8015770 <__strtok_r+0x8>
 801576c:	6810      	ldr	r0, [r2, #0]
 801576e:	b188      	cbz	r0, 8015794 <__strtok_r+0x2c>
 8015770:	4604      	mov	r4, r0
 8015772:	4620      	mov	r0, r4
 8015774:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015778:	460f      	mov	r7, r1
 801577a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801577e:	b91e      	cbnz	r6, 8015788 <__strtok_r+0x20>
 8015780:	b965      	cbnz	r5, 801579c <__strtok_r+0x34>
 8015782:	6015      	str	r5, [r2, #0]
 8015784:	4628      	mov	r0, r5
 8015786:	e005      	b.n	8015794 <__strtok_r+0x2c>
 8015788:	42b5      	cmp	r5, r6
 801578a:	d1f6      	bne.n	801577a <__strtok_r+0x12>
 801578c:	2b00      	cmp	r3, #0
 801578e:	d1f0      	bne.n	8015772 <__strtok_r+0xa>
 8015790:	6014      	str	r4, [r2, #0]
 8015792:	7003      	strb	r3, [r0, #0]
 8015794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015796:	461c      	mov	r4, r3
 8015798:	e00c      	b.n	80157b4 <__strtok_r+0x4c>
 801579a:	b915      	cbnz	r5, 80157a2 <__strtok_r+0x3a>
 801579c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80157a0:	460e      	mov	r6, r1
 80157a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80157a6:	42ab      	cmp	r3, r5
 80157a8:	d1f7      	bne.n	801579a <__strtok_r+0x32>
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d0f3      	beq.n	8015796 <__strtok_r+0x2e>
 80157ae:	2300      	movs	r3, #0
 80157b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80157b4:	6014      	str	r4, [r2, #0]
 80157b6:	e7ed      	b.n	8015794 <__strtok_r+0x2c>

080157b8 <strtok_r>:
 80157b8:	2301      	movs	r3, #1
 80157ba:	f7ff bfd5 	b.w	8015768 <__strtok_r>
	...

080157c0 <_strtol_l.isra.0>:
 80157c0:	2b01      	cmp	r3, #1
 80157c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157c6:	d001      	beq.n	80157cc <_strtol_l.isra.0+0xc>
 80157c8:	2b24      	cmp	r3, #36	; 0x24
 80157ca:	d906      	bls.n	80157da <_strtol_l.isra.0+0x1a>
 80157cc:	f000 f964 	bl	8015a98 <__errno>
 80157d0:	2316      	movs	r3, #22
 80157d2:	6003      	str	r3, [r0, #0]
 80157d4:	2000      	movs	r0, #0
 80157d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80157da:	4f3a      	ldr	r7, [pc, #232]	; (80158c4 <_strtol_l.isra.0+0x104>)
 80157dc:	468e      	mov	lr, r1
 80157de:	4676      	mov	r6, lr
 80157e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80157e4:	5de5      	ldrb	r5, [r4, r7]
 80157e6:	f015 0508 	ands.w	r5, r5, #8
 80157ea:	d1f8      	bne.n	80157de <_strtol_l.isra.0+0x1e>
 80157ec:	2c2d      	cmp	r4, #45	; 0x2d
 80157ee:	d134      	bne.n	801585a <_strtol_l.isra.0+0x9a>
 80157f0:	f89e 4000 	ldrb.w	r4, [lr]
 80157f4:	f04f 0801 	mov.w	r8, #1
 80157f8:	f106 0e02 	add.w	lr, r6, #2
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d05c      	beq.n	80158ba <_strtol_l.isra.0+0xfa>
 8015800:	2b10      	cmp	r3, #16
 8015802:	d10c      	bne.n	801581e <_strtol_l.isra.0+0x5e>
 8015804:	2c30      	cmp	r4, #48	; 0x30
 8015806:	d10a      	bne.n	801581e <_strtol_l.isra.0+0x5e>
 8015808:	f89e 4000 	ldrb.w	r4, [lr]
 801580c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8015810:	2c58      	cmp	r4, #88	; 0x58
 8015812:	d14d      	bne.n	80158b0 <_strtol_l.isra.0+0xf0>
 8015814:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8015818:	2310      	movs	r3, #16
 801581a:	f10e 0e02 	add.w	lr, lr, #2
 801581e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8015822:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8015826:	2600      	movs	r6, #0
 8015828:	fbbc f9f3 	udiv	r9, ip, r3
 801582c:	4635      	mov	r5, r6
 801582e:	fb03 ca19 	mls	sl, r3, r9, ip
 8015832:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8015836:	2f09      	cmp	r7, #9
 8015838:	d818      	bhi.n	801586c <_strtol_l.isra.0+0xac>
 801583a:	463c      	mov	r4, r7
 801583c:	42a3      	cmp	r3, r4
 801583e:	dd24      	ble.n	801588a <_strtol_l.isra.0+0xca>
 8015840:	2e00      	cmp	r6, #0
 8015842:	db1f      	blt.n	8015884 <_strtol_l.isra.0+0xc4>
 8015844:	45a9      	cmp	r9, r5
 8015846:	d31d      	bcc.n	8015884 <_strtol_l.isra.0+0xc4>
 8015848:	d101      	bne.n	801584e <_strtol_l.isra.0+0x8e>
 801584a:	45a2      	cmp	sl, r4
 801584c:	db1a      	blt.n	8015884 <_strtol_l.isra.0+0xc4>
 801584e:	fb05 4503 	mla	r5, r5, r3, r4
 8015852:	2601      	movs	r6, #1
 8015854:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8015858:	e7eb      	b.n	8015832 <_strtol_l.isra.0+0x72>
 801585a:	2c2b      	cmp	r4, #43	; 0x2b
 801585c:	bf08      	it	eq
 801585e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8015862:	46a8      	mov	r8, r5
 8015864:	bf08      	it	eq
 8015866:	f106 0e02 	addeq.w	lr, r6, #2
 801586a:	e7c7      	b.n	80157fc <_strtol_l.isra.0+0x3c>
 801586c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8015870:	2f19      	cmp	r7, #25
 8015872:	d801      	bhi.n	8015878 <_strtol_l.isra.0+0xb8>
 8015874:	3c37      	subs	r4, #55	; 0x37
 8015876:	e7e1      	b.n	801583c <_strtol_l.isra.0+0x7c>
 8015878:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801587c:	2f19      	cmp	r7, #25
 801587e:	d804      	bhi.n	801588a <_strtol_l.isra.0+0xca>
 8015880:	3c57      	subs	r4, #87	; 0x57
 8015882:	e7db      	b.n	801583c <_strtol_l.isra.0+0x7c>
 8015884:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8015888:	e7e4      	b.n	8015854 <_strtol_l.isra.0+0x94>
 801588a:	2e00      	cmp	r6, #0
 801588c:	da05      	bge.n	801589a <_strtol_l.isra.0+0xda>
 801588e:	2322      	movs	r3, #34	; 0x22
 8015890:	6003      	str	r3, [r0, #0]
 8015892:	4665      	mov	r5, ip
 8015894:	b942      	cbnz	r2, 80158a8 <_strtol_l.isra.0+0xe8>
 8015896:	4628      	mov	r0, r5
 8015898:	e79d      	b.n	80157d6 <_strtol_l.isra.0+0x16>
 801589a:	f1b8 0f00 	cmp.w	r8, #0
 801589e:	d000      	beq.n	80158a2 <_strtol_l.isra.0+0xe2>
 80158a0:	426d      	negs	r5, r5
 80158a2:	2a00      	cmp	r2, #0
 80158a4:	d0f7      	beq.n	8015896 <_strtol_l.isra.0+0xd6>
 80158a6:	b10e      	cbz	r6, 80158ac <_strtol_l.isra.0+0xec>
 80158a8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80158ac:	6011      	str	r1, [r2, #0]
 80158ae:	e7f2      	b.n	8015896 <_strtol_l.isra.0+0xd6>
 80158b0:	2430      	movs	r4, #48	; 0x30
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d1b3      	bne.n	801581e <_strtol_l.isra.0+0x5e>
 80158b6:	2308      	movs	r3, #8
 80158b8:	e7b1      	b.n	801581e <_strtol_l.isra.0+0x5e>
 80158ba:	2c30      	cmp	r4, #48	; 0x30
 80158bc:	d0a4      	beq.n	8015808 <_strtol_l.isra.0+0x48>
 80158be:	230a      	movs	r3, #10
 80158c0:	e7ad      	b.n	801581e <_strtol_l.isra.0+0x5e>
 80158c2:	bf00      	nop
 80158c4:	08021643 	.word	0x08021643

080158c8 <strtol>:
 80158c8:	4613      	mov	r3, r2
 80158ca:	460a      	mov	r2, r1
 80158cc:	4601      	mov	r1, r0
 80158ce:	4802      	ldr	r0, [pc, #8]	; (80158d8 <strtol+0x10>)
 80158d0:	6800      	ldr	r0, [r0, #0]
 80158d2:	f7ff bf75 	b.w	80157c0 <_strtol_l.isra.0>
 80158d6:	bf00      	nop
 80158d8:	200004bc 	.word	0x200004bc

080158dc <__swbuf_r>:
 80158dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158de:	460e      	mov	r6, r1
 80158e0:	4614      	mov	r4, r2
 80158e2:	4605      	mov	r5, r0
 80158e4:	b118      	cbz	r0, 80158ee <__swbuf_r+0x12>
 80158e6:	6983      	ldr	r3, [r0, #24]
 80158e8:	b90b      	cbnz	r3, 80158ee <__swbuf_r+0x12>
 80158ea:	f000 f9f5 	bl	8015cd8 <__sinit>
 80158ee:	4b21      	ldr	r3, [pc, #132]	; (8015974 <__swbuf_r+0x98>)
 80158f0:	429c      	cmp	r4, r3
 80158f2:	d12b      	bne.n	801594c <__swbuf_r+0x70>
 80158f4:	686c      	ldr	r4, [r5, #4]
 80158f6:	69a3      	ldr	r3, [r4, #24]
 80158f8:	60a3      	str	r3, [r4, #8]
 80158fa:	89a3      	ldrh	r3, [r4, #12]
 80158fc:	071a      	lsls	r2, r3, #28
 80158fe:	d52f      	bpl.n	8015960 <__swbuf_r+0x84>
 8015900:	6923      	ldr	r3, [r4, #16]
 8015902:	b36b      	cbz	r3, 8015960 <__swbuf_r+0x84>
 8015904:	6923      	ldr	r3, [r4, #16]
 8015906:	6820      	ldr	r0, [r4, #0]
 8015908:	1ac0      	subs	r0, r0, r3
 801590a:	6963      	ldr	r3, [r4, #20]
 801590c:	b2f6      	uxtb	r6, r6
 801590e:	4283      	cmp	r3, r0
 8015910:	4637      	mov	r7, r6
 8015912:	dc04      	bgt.n	801591e <__swbuf_r+0x42>
 8015914:	4621      	mov	r1, r4
 8015916:	4628      	mov	r0, r5
 8015918:	f000 f94a 	bl	8015bb0 <_fflush_r>
 801591c:	bb30      	cbnz	r0, 801596c <__swbuf_r+0x90>
 801591e:	68a3      	ldr	r3, [r4, #8]
 8015920:	3b01      	subs	r3, #1
 8015922:	60a3      	str	r3, [r4, #8]
 8015924:	6823      	ldr	r3, [r4, #0]
 8015926:	1c5a      	adds	r2, r3, #1
 8015928:	6022      	str	r2, [r4, #0]
 801592a:	701e      	strb	r6, [r3, #0]
 801592c:	6963      	ldr	r3, [r4, #20]
 801592e:	3001      	adds	r0, #1
 8015930:	4283      	cmp	r3, r0
 8015932:	d004      	beq.n	801593e <__swbuf_r+0x62>
 8015934:	89a3      	ldrh	r3, [r4, #12]
 8015936:	07db      	lsls	r3, r3, #31
 8015938:	d506      	bpl.n	8015948 <__swbuf_r+0x6c>
 801593a:	2e0a      	cmp	r6, #10
 801593c:	d104      	bne.n	8015948 <__swbuf_r+0x6c>
 801593e:	4621      	mov	r1, r4
 8015940:	4628      	mov	r0, r5
 8015942:	f000 f935 	bl	8015bb0 <_fflush_r>
 8015946:	b988      	cbnz	r0, 801596c <__swbuf_r+0x90>
 8015948:	4638      	mov	r0, r7
 801594a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801594c:	4b0a      	ldr	r3, [pc, #40]	; (8015978 <__swbuf_r+0x9c>)
 801594e:	429c      	cmp	r4, r3
 8015950:	d101      	bne.n	8015956 <__swbuf_r+0x7a>
 8015952:	68ac      	ldr	r4, [r5, #8]
 8015954:	e7cf      	b.n	80158f6 <__swbuf_r+0x1a>
 8015956:	4b09      	ldr	r3, [pc, #36]	; (801597c <__swbuf_r+0xa0>)
 8015958:	429c      	cmp	r4, r3
 801595a:	bf08      	it	eq
 801595c:	68ec      	ldreq	r4, [r5, #12]
 801595e:	e7ca      	b.n	80158f6 <__swbuf_r+0x1a>
 8015960:	4621      	mov	r1, r4
 8015962:	4628      	mov	r0, r5
 8015964:	f000 f80c 	bl	8015980 <__swsetup_r>
 8015968:	2800      	cmp	r0, #0
 801596a:	d0cb      	beq.n	8015904 <__swbuf_r+0x28>
 801596c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015970:	e7ea      	b.n	8015948 <__swbuf_r+0x6c>
 8015972:	bf00      	nop
 8015974:	0802181c 	.word	0x0802181c
 8015978:	0802183c 	.word	0x0802183c
 801597c:	080217fc 	.word	0x080217fc

08015980 <__swsetup_r>:
 8015980:	4b32      	ldr	r3, [pc, #200]	; (8015a4c <__swsetup_r+0xcc>)
 8015982:	b570      	push	{r4, r5, r6, lr}
 8015984:	681d      	ldr	r5, [r3, #0]
 8015986:	4606      	mov	r6, r0
 8015988:	460c      	mov	r4, r1
 801598a:	b125      	cbz	r5, 8015996 <__swsetup_r+0x16>
 801598c:	69ab      	ldr	r3, [r5, #24]
 801598e:	b913      	cbnz	r3, 8015996 <__swsetup_r+0x16>
 8015990:	4628      	mov	r0, r5
 8015992:	f000 f9a1 	bl	8015cd8 <__sinit>
 8015996:	4b2e      	ldr	r3, [pc, #184]	; (8015a50 <__swsetup_r+0xd0>)
 8015998:	429c      	cmp	r4, r3
 801599a:	d10f      	bne.n	80159bc <__swsetup_r+0x3c>
 801599c:	686c      	ldr	r4, [r5, #4]
 801599e:	89a3      	ldrh	r3, [r4, #12]
 80159a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80159a4:	0719      	lsls	r1, r3, #28
 80159a6:	d42c      	bmi.n	8015a02 <__swsetup_r+0x82>
 80159a8:	06dd      	lsls	r5, r3, #27
 80159aa:	d411      	bmi.n	80159d0 <__swsetup_r+0x50>
 80159ac:	2309      	movs	r3, #9
 80159ae:	6033      	str	r3, [r6, #0]
 80159b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80159b4:	81a3      	strh	r3, [r4, #12]
 80159b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80159ba:	e03e      	b.n	8015a3a <__swsetup_r+0xba>
 80159bc:	4b25      	ldr	r3, [pc, #148]	; (8015a54 <__swsetup_r+0xd4>)
 80159be:	429c      	cmp	r4, r3
 80159c0:	d101      	bne.n	80159c6 <__swsetup_r+0x46>
 80159c2:	68ac      	ldr	r4, [r5, #8]
 80159c4:	e7eb      	b.n	801599e <__swsetup_r+0x1e>
 80159c6:	4b24      	ldr	r3, [pc, #144]	; (8015a58 <__swsetup_r+0xd8>)
 80159c8:	429c      	cmp	r4, r3
 80159ca:	bf08      	it	eq
 80159cc:	68ec      	ldreq	r4, [r5, #12]
 80159ce:	e7e6      	b.n	801599e <__swsetup_r+0x1e>
 80159d0:	0758      	lsls	r0, r3, #29
 80159d2:	d512      	bpl.n	80159fa <__swsetup_r+0x7a>
 80159d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80159d6:	b141      	cbz	r1, 80159ea <__swsetup_r+0x6a>
 80159d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80159dc:	4299      	cmp	r1, r3
 80159de:	d002      	beq.n	80159e6 <__swsetup_r+0x66>
 80159e0:	4630      	mov	r0, r6
 80159e2:	f000 fa97 	bl	8015f14 <_free_r>
 80159e6:	2300      	movs	r3, #0
 80159e8:	6363      	str	r3, [r4, #52]	; 0x34
 80159ea:	89a3      	ldrh	r3, [r4, #12]
 80159ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80159f0:	81a3      	strh	r3, [r4, #12]
 80159f2:	2300      	movs	r3, #0
 80159f4:	6063      	str	r3, [r4, #4]
 80159f6:	6923      	ldr	r3, [r4, #16]
 80159f8:	6023      	str	r3, [r4, #0]
 80159fa:	89a3      	ldrh	r3, [r4, #12]
 80159fc:	f043 0308 	orr.w	r3, r3, #8
 8015a00:	81a3      	strh	r3, [r4, #12]
 8015a02:	6923      	ldr	r3, [r4, #16]
 8015a04:	b94b      	cbnz	r3, 8015a1a <__swsetup_r+0x9a>
 8015a06:	89a3      	ldrh	r3, [r4, #12]
 8015a08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a10:	d003      	beq.n	8015a1a <__swsetup_r+0x9a>
 8015a12:	4621      	mov	r1, r4
 8015a14:	4630      	mov	r0, r6
 8015a16:	f000 fa35 	bl	8015e84 <__smakebuf_r>
 8015a1a:	89a0      	ldrh	r0, [r4, #12]
 8015a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015a20:	f010 0301 	ands.w	r3, r0, #1
 8015a24:	d00a      	beq.n	8015a3c <__swsetup_r+0xbc>
 8015a26:	2300      	movs	r3, #0
 8015a28:	60a3      	str	r3, [r4, #8]
 8015a2a:	6963      	ldr	r3, [r4, #20]
 8015a2c:	425b      	negs	r3, r3
 8015a2e:	61a3      	str	r3, [r4, #24]
 8015a30:	6923      	ldr	r3, [r4, #16]
 8015a32:	b943      	cbnz	r3, 8015a46 <__swsetup_r+0xc6>
 8015a34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015a38:	d1ba      	bne.n	80159b0 <__swsetup_r+0x30>
 8015a3a:	bd70      	pop	{r4, r5, r6, pc}
 8015a3c:	0781      	lsls	r1, r0, #30
 8015a3e:	bf58      	it	pl
 8015a40:	6963      	ldrpl	r3, [r4, #20]
 8015a42:	60a3      	str	r3, [r4, #8]
 8015a44:	e7f4      	b.n	8015a30 <__swsetup_r+0xb0>
 8015a46:	2000      	movs	r0, #0
 8015a48:	e7f7      	b.n	8015a3a <__swsetup_r+0xba>
 8015a4a:	bf00      	nop
 8015a4c:	200004bc 	.word	0x200004bc
 8015a50:	0802181c 	.word	0x0802181c
 8015a54:	0802183c 	.word	0x0802183c
 8015a58:	080217fc 	.word	0x080217fc

08015a5c <__assert_func>:
 8015a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015a5e:	4614      	mov	r4, r2
 8015a60:	461a      	mov	r2, r3
 8015a62:	4b09      	ldr	r3, [pc, #36]	; (8015a88 <__assert_func+0x2c>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	4605      	mov	r5, r0
 8015a68:	68d8      	ldr	r0, [r3, #12]
 8015a6a:	b14c      	cbz	r4, 8015a80 <__assert_func+0x24>
 8015a6c:	4b07      	ldr	r3, [pc, #28]	; (8015a8c <__assert_func+0x30>)
 8015a6e:	9100      	str	r1, [sp, #0]
 8015a70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a74:	4906      	ldr	r1, [pc, #24]	; (8015a90 <__assert_func+0x34>)
 8015a76:	462b      	mov	r3, r5
 8015a78:	f000 f9ac 	bl	8015dd4 <fiprintf>
 8015a7c:	f000 ffa4 	bl	80169c8 <abort>
 8015a80:	4b04      	ldr	r3, [pc, #16]	; (8015a94 <__assert_func+0x38>)
 8015a82:	461c      	mov	r4, r3
 8015a84:	e7f3      	b.n	8015a6e <__assert_func+0x12>
 8015a86:	bf00      	nop
 8015a88:	200004bc 	.word	0x200004bc
 8015a8c:	080217be 	.word	0x080217be
 8015a90:	080217cb 	.word	0x080217cb
 8015a94:	080217f9 	.word	0x080217f9

08015a98 <__errno>:
 8015a98:	4b01      	ldr	r3, [pc, #4]	; (8015aa0 <__errno+0x8>)
 8015a9a:	6818      	ldr	r0, [r3, #0]
 8015a9c:	4770      	bx	lr
 8015a9e:	bf00      	nop
 8015aa0:	200004bc 	.word	0x200004bc

08015aa4 <__sflush_r>:
 8015aa4:	898a      	ldrh	r2, [r1, #12]
 8015aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015aaa:	4605      	mov	r5, r0
 8015aac:	0710      	lsls	r0, r2, #28
 8015aae:	460c      	mov	r4, r1
 8015ab0:	d458      	bmi.n	8015b64 <__sflush_r+0xc0>
 8015ab2:	684b      	ldr	r3, [r1, #4]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	dc05      	bgt.n	8015ac4 <__sflush_r+0x20>
 8015ab8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	dc02      	bgt.n	8015ac4 <__sflush_r+0x20>
 8015abe:	2000      	movs	r0, #0
 8015ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ac6:	2e00      	cmp	r6, #0
 8015ac8:	d0f9      	beq.n	8015abe <__sflush_r+0x1a>
 8015aca:	2300      	movs	r3, #0
 8015acc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015ad0:	682f      	ldr	r7, [r5, #0]
 8015ad2:	602b      	str	r3, [r5, #0]
 8015ad4:	d032      	beq.n	8015b3c <__sflush_r+0x98>
 8015ad6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015ad8:	89a3      	ldrh	r3, [r4, #12]
 8015ada:	075a      	lsls	r2, r3, #29
 8015adc:	d505      	bpl.n	8015aea <__sflush_r+0x46>
 8015ade:	6863      	ldr	r3, [r4, #4]
 8015ae0:	1ac0      	subs	r0, r0, r3
 8015ae2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ae4:	b10b      	cbz	r3, 8015aea <__sflush_r+0x46>
 8015ae6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ae8:	1ac0      	subs	r0, r0, r3
 8015aea:	2300      	movs	r3, #0
 8015aec:	4602      	mov	r2, r0
 8015aee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015af0:	6a21      	ldr	r1, [r4, #32]
 8015af2:	4628      	mov	r0, r5
 8015af4:	47b0      	blx	r6
 8015af6:	1c43      	adds	r3, r0, #1
 8015af8:	89a3      	ldrh	r3, [r4, #12]
 8015afa:	d106      	bne.n	8015b0a <__sflush_r+0x66>
 8015afc:	6829      	ldr	r1, [r5, #0]
 8015afe:	291d      	cmp	r1, #29
 8015b00:	d82c      	bhi.n	8015b5c <__sflush_r+0xb8>
 8015b02:	4a2a      	ldr	r2, [pc, #168]	; (8015bac <__sflush_r+0x108>)
 8015b04:	40ca      	lsrs	r2, r1
 8015b06:	07d6      	lsls	r6, r2, #31
 8015b08:	d528      	bpl.n	8015b5c <__sflush_r+0xb8>
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	6062      	str	r2, [r4, #4]
 8015b0e:	04d9      	lsls	r1, r3, #19
 8015b10:	6922      	ldr	r2, [r4, #16]
 8015b12:	6022      	str	r2, [r4, #0]
 8015b14:	d504      	bpl.n	8015b20 <__sflush_r+0x7c>
 8015b16:	1c42      	adds	r2, r0, #1
 8015b18:	d101      	bne.n	8015b1e <__sflush_r+0x7a>
 8015b1a:	682b      	ldr	r3, [r5, #0]
 8015b1c:	b903      	cbnz	r3, 8015b20 <__sflush_r+0x7c>
 8015b1e:	6560      	str	r0, [r4, #84]	; 0x54
 8015b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015b22:	602f      	str	r7, [r5, #0]
 8015b24:	2900      	cmp	r1, #0
 8015b26:	d0ca      	beq.n	8015abe <__sflush_r+0x1a>
 8015b28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015b2c:	4299      	cmp	r1, r3
 8015b2e:	d002      	beq.n	8015b36 <__sflush_r+0x92>
 8015b30:	4628      	mov	r0, r5
 8015b32:	f000 f9ef 	bl	8015f14 <_free_r>
 8015b36:	2000      	movs	r0, #0
 8015b38:	6360      	str	r0, [r4, #52]	; 0x34
 8015b3a:	e7c1      	b.n	8015ac0 <__sflush_r+0x1c>
 8015b3c:	6a21      	ldr	r1, [r4, #32]
 8015b3e:	2301      	movs	r3, #1
 8015b40:	4628      	mov	r0, r5
 8015b42:	47b0      	blx	r6
 8015b44:	1c41      	adds	r1, r0, #1
 8015b46:	d1c7      	bne.n	8015ad8 <__sflush_r+0x34>
 8015b48:	682b      	ldr	r3, [r5, #0]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d0c4      	beq.n	8015ad8 <__sflush_r+0x34>
 8015b4e:	2b1d      	cmp	r3, #29
 8015b50:	d001      	beq.n	8015b56 <__sflush_r+0xb2>
 8015b52:	2b16      	cmp	r3, #22
 8015b54:	d101      	bne.n	8015b5a <__sflush_r+0xb6>
 8015b56:	602f      	str	r7, [r5, #0]
 8015b58:	e7b1      	b.n	8015abe <__sflush_r+0x1a>
 8015b5a:	89a3      	ldrh	r3, [r4, #12]
 8015b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b60:	81a3      	strh	r3, [r4, #12]
 8015b62:	e7ad      	b.n	8015ac0 <__sflush_r+0x1c>
 8015b64:	690f      	ldr	r7, [r1, #16]
 8015b66:	2f00      	cmp	r7, #0
 8015b68:	d0a9      	beq.n	8015abe <__sflush_r+0x1a>
 8015b6a:	0793      	lsls	r3, r2, #30
 8015b6c:	680e      	ldr	r6, [r1, #0]
 8015b6e:	bf08      	it	eq
 8015b70:	694b      	ldreq	r3, [r1, #20]
 8015b72:	600f      	str	r7, [r1, #0]
 8015b74:	bf18      	it	ne
 8015b76:	2300      	movne	r3, #0
 8015b78:	eba6 0807 	sub.w	r8, r6, r7
 8015b7c:	608b      	str	r3, [r1, #8]
 8015b7e:	f1b8 0f00 	cmp.w	r8, #0
 8015b82:	dd9c      	ble.n	8015abe <__sflush_r+0x1a>
 8015b84:	6a21      	ldr	r1, [r4, #32]
 8015b86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015b88:	4643      	mov	r3, r8
 8015b8a:	463a      	mov	r2, r7
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	47b0      	blx	r6
 8015b90:	2800      	cmp	r0, #0
 8015b92:	dc06      	bgt.n	8015ba2 <__sflush_r+0xfe>
 8015b94:	89a3      	ldrh	r3, [r4, #12]
 8015b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b9a:	81a3      	strh	r3, [r4, #12]
 8015b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015ba0:	e78e      	b.n	8015ac0 <__sflush_r+0x1c>
 8015ba2:	4407      	add	r7, r0
 8015ba4:	eba8 0800 	sub.w	r8, r8, r0
 8015ba8:	e7e9      	b.n	8015b7e <__sflush_r+0xda>
 8015baa:	bf00      	nop
 8015bac:	20400001 	.word	0x20400001

08015bb0 <_fflush_r>:
 8015bb0:	b538      	push	{r3, r4, r5, lr}
 8015bb2:	690b      	ldr	r3, [r1, #16]
 8015bb4:	4605      	mov	r5, r0
 8015bb6:	460c      	mov	r4, r1
 8015bb8:	b913      	cbnz	r3, 8015bc0 <_fflush_r+0x10>
 8015bba:	2500      	movs	r5, #0
 8015bbc:	4628      	mov	r0, r5
 8015bbe:	bd38      	pop	{r3, r4, r5, pc}
 8015bc0:	b118      	cbz	r0, 8015bca <_fflush_r+0x1a>
 8015bc2:	6983      	ldr	r3, [r0, #24]
 8015bc4:	b90b      	cbnz	r3, 8015bca <_fflush_r+0x1a>
 8015bc6:	f000 f887 	bl	8015cd8 <__sinit>
 8015bca:	4b14      	ldr	r3, [pc, #80]	; (8015c1c <_fflush_r+0x6c>)
 8015bcc:	429c      	cmp	r4, r3
 8015bce:	d11b      	bne.n	8015c08 <_fflush_r+0x58>
 8015bd0:	686c      	ldr	r4, [r5, #4]
 8015bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d0ef      	beq.n	8015bba <_fflush_r+0xa>
 8015bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015bdc:	07d0      	lsls	r0, r2, #31
 8015bde:	d404      	bmi.n	8015bea <_fflush_r+0x3a>
 8015be0:	0599      	lsls	r1, r3, #22
 8015be2:	d402      	bmi.n	8015bea <_fflush_r+0x3a>
 8015be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015be6:	f000 f927 	bl	8015e38 <__retarget_lock_acquire_recursive>
 8015bea:	4628      	mov	r0, r5
 8015bec:	4621      	mov	r1, r4
 8015bee:	f7ff ff59 	bl	8015aa4 <__sflush_r>
 8015bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015bf4:	07da      	lsls	r2, r3, #31
 8015bf6:	4605      	mov	r5, r0
 8015bf8:	d4e0      	bmi.n	8015bbc <_fflush_r+0xc>
 8015bfa:	89a3      	ldrh	r3, [r4, #12]
 8015bfc:	059b      	lsls	r3, r3, #22
 8015bfe:	d4dd      	bmi.n	8015bbc <_fflush_r+0xc>
 8015c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015c02:	f000 f91a 	bl	8015e3a <__retarget_lock_release_recursive>
 8015c06:	e7d9      	b.n	8015bbc <_fflush_r+0xc>
 8015c08:	4b05      	ldr	r3, [pc, #20]	; (8015c20 <_fflush_r+0x70>)
 8015c0a:	429c      	cmp	r4, r3
 8015c0c:	d101      	bne.n	8015c12 <_fflush_r+0x62>
 8015c0e:	68ac      	ldr	r4, [r5, #8]
 8015c10:	e7df      	b.n	8015bd2 <_fflush_r+0x22>
 8015c12:	4b04      	ldr	r3, [pc, #16]	; (8015c24 <_fflush_r+0x74>)
 8015c14:	429c      	cmp	r4, r3
 8015c16:	bf08      	it	eq
 8015c18:	68ec      	ldreq	r4, [r5, #12]
 8015c1a:	e7da      	b.n	8015bd2 <_fflush_r+0x22>
 8015c1c:	0802181c 	.word	0x0802181c
 8015c20:	0802183c 	.word	0x0802183c
 8015c24:	080217fc 	.word	0x080217fc

08015c28 <std>:
 8015c28:	2300      	movs	r3, #0
 8015c2a:	b510      	push	{r4, lr}
 8015c2c:	4604      	mov	r4, r0
 8015c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8015c32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015c36:	6083      	str	r3, [r0, #8]
 8015c38:	8181      	strh	r1, [r0, #12]
 8015c3a:	6643      	str	r3, [r0, #100]	; 0x64
 8015c3c:	81c2      	strh	r2, [r0, #14]
 8015c3e:	6183      	str	r3, [r0, #24]
 8015c40:	4619      	mov	r1, r3
 8015c42:	2208      	movs	r2, #8
 8015c44:	305c      	adds	r0, #92	; 0x5c
 8015c46:	f7ff fc05 	bl	8015454 <memset>
 8015c4a:	4b05      	ldr	r3, [pc, #20]	; (8015c60 <std+0x38>)
 8015c4c:	6263      	str	r3, [r4, #36]	; 0x24
 8015c4e:	4b05      	ldr	r3, [pc, #20]	; (8015c64 <std+0x3c>)
 8015c50:	62a3      	str	r3, [r4, #40]	; 0x28
 8015c52:	4b05      	ldr	r3, [pc, #20]	; (8015c68 <std+0x40>)
 8015c54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015c56:	4b05      	ldr	r3, [pc, #20]	; (8015c6c <std+0x44>)
 8015c58:	6224      	str	r4, [r4, #32]
 8015c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8015c5c:	bd10      	pop	{r4, pc}
 8015c5e:	bf00      	nop
 8015c60:	0801691d 	.word	0x0801691d
 8015c64:	0801693f 	.word	0x0801693f
 8015c68:	08016977 	.word	0x08016977
 8015c6c:	0801699b 	.word	0x0801699b

08015c70 <_cleanup_r>:
 8015c70:	4901      	ldr	r1, [pc, #4]	; (8015c78 <_cleanup_r+0x8>)
 8015c72:	f000 b8c1 	b.w	8015df8 <_fwalk_reent>
 8015c76:	bf00      	nop
 8015c78:	08015bb1 	.word	0x08015bb1

08015c7c <__sfmoreglue>:
 8015c7c:	b570      	push	{r4, r5, r6, lr}
 8015c7e:	1e4a      	subs	r2, r1, #1
 8015c80:	2568      	movs	r5, #104	; 0x68
 8015c82:	4355      	muls	r5, r2
 8015c84:	460e      	mov	r6, r1
 8015c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015c8a:	f000 f993 	bl	8015fb4 <_malloc_r>
 8015c8e:	4604      	mov	r4, r0
 8015c90:	b140      	cbz	r0, 8015ca4 <__sfmoreglue+0x28>
 8015c92:	2100      	movs	r1, #0
 8015c94:	e9c0 1600 	strd	r1, r6, [r0]
 8015c98:	300c      	adds	r0, #12
 8015c9a:	60a0      	str	r0, [r4, #8]
 8015c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015ca0:	f7ff fbd8 	bl	8015454 <memset>
 8015ca4:	4620      	mov	r0, r4
 8015ca6:	bd70      	pop	{r4, r5, r6, pc}

08015ca8 <__sfp_lock_acquire>:
 8015ca8:	4801      	ldr	r0, [pc, #4]	; (8015cb0 <__sfp_lock_acquire+0x8>)
 8015caa:	f000 b8c5 	b.w	8015e38 <__retarget_lock_acquire_recursive>
 8015cae:	bf00      	nop
 8015cb0:	2000e02c 	.word	0x2000e02c

08015cb4 <__sfp_lock_release>:
 8015cb4:	4801      	ldr	r0, [pc, #4]	; (8015cbc <__sfp_lock_release+0x8>)
 8015cb6:	f000 b8c0 	b.w	8015e3a <__retarget_lock_release_recursive>
 8015cba:	bf00      	nop
 8015cbc:	2000e02c 	.word	0x2000e02c

08015cc0 <__sinit_lock_acquire>:
 8015cc0:	4801      	ldr	r0, [pc, #4]	; (8015cc8 <__sinit_lock_acquire+0x8>)
 8015cc2:	f000 b8b9 	b.w	8015e38 <__retarget_lock_acquire_recursive>
 8015cc6:	bf00      	nop
 8015cc8:	2000e027 	.word	0x2000e027

08015ccc <__sinit_lock_release>:
 8015ccc:	4801      	ldr	r0, [pc, #4]	; (8015cd4 <__sinit_lock_release+0x8>)
 8015cce:	f000 b8b4 	b.w	8015e3a <__retarget_lock_release_recursive>
 8015cd2:	bf00      	nop
 8015cd4:	2000e027 	.word	0x2000e027

08015cd8 <__sinit>:
 8015cd8:	b510      	push	{r4, lr}
 8015cda:	4604      	mov	r4, r0
 8015cdc:	f7ff fff0 	bl	8015cc0 <__sinit_lock_acquire>
 8015ce0:	69a3      	ldr	r3, [r4, #24]
 8015ce2:	b11b      	cbz	r3, 8015cec <__sinit+0x14>
 8015ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ce8:	f7ff bff0 	b.w	8015ccc <__sinit_lock_release>
 8015cec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015cf0:	6523      	str	r3, [r4, #80]	; 0x50
 8015cf2:	4b13      	ldr	r3, [pc, #76]	; (8015d40 <__sinit+0x68>)
 8015cf4:	4a13      	ldr	r2, [pc, #76]	; (8015d44 <__sinit+0x6c>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	62a2      	str	r2, [r4, #40]	; 0x28
 8015cfa:	42a3      	cmp	r3, r4
 8015cfc:	bf04      	itt	eq
 8015cfe:	2301      	moveq	r3, #1
 8015d00:	61a3      	streq	r3, [r4, #24]
 8015d02:	4620      	mov	r0, r4
 8015d04:	f000 f820 	bl	8015d48 <__sfp>
 8015d08:	6060      	str	r0, [r4, #4]
 8015d0a:	4620      	mov	r0, r4
 8015d0c:	f000 f81c 	bl	8015d48 <__sfp>
 8015d10:	60a0      	str	r0, [r4, #8]
 8015d12:	4620      	mov	r0, r4
 8015d14:	f000 f818 	bl	8015d48 <__sfp>
 8015d18:	2200      	movs	r2, #0
 8015d1a:	60e0      	str	r0, [r4, #12]
 8015d1c:	2104      	movs	r1, #4
 8015d1e:	6860      	ldr	r0, [r4, #4]
 8015d20:	f7ff ff82 	bl	8015c28 <std>
 8015d24:	68a0      	ldr	r0, [r4, #8]
 8015d26:	2201      	movs	r2, #1
 8015d28:	2109      	movs	r1, #9
 8015d2a:	f7ff ff7d 	bl	8015c28 <std>
 8015d2e:	68e0      	ldr	r0, [r4, #12]
 8015d30:	2202      	movs	r2, #2
 8015d32:	2112      	movs	r1, #18
 8015d34:	f7ff ff78 	bl	8015c28 <std>
 8015d38:	2301      	movs	r3, #1
 8015d3a:	61a3      	str	r3, [r4, #24]
 8015d3c:	e7d2      	b.n	8015ce4 <__sinit+0xc>
 8015d3e:	bf00      	nop
 8015d40:	08021744 	.word	0x08021744
 8015d44:	08015c71 	.word	0x08015c71

08015d48 <__sfp>:
 8015d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d4a:	4607      	mov	r7, r0
 8015d4c:	f7ff ffac 	bl	8015ca8 <__sfp_lock_acquire>
 8015d50:	4b1e      	ldr	r3, [pc, #120]	; (8015dcc <__sfp+0x84>)
 8015d52:	681e      	ldr	r6, [r3, #0]
 8015d54:	69b3      	ldr	r3, [r6, #24]
 8015d56:	b913      	cbnz	r3, 8015d5e <__sfp+0x16>
 8015d58:	4630      	mov	r0, r6
 8015d5a:	f7ff ffbd 	bl	8015cd8 <__sinit>
 8015d5e:	3648      	adds	r6, #72	; 0x48
 8015d60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015d64:	3b01      	subs	r3, #1
 8015d66:	d503      	bpl.n	8015d70 <__sfp+0x28>
 8015d68:	6833      	ldr	r3, [r6, #0]
 8015d6a:	b30b      	cbz	r3, 8015db0 <__sfp+0x68>
 8015d6c:	6836      	ldr	r6, [r6, #0]
 8015d6e:	e7f7      	b.n	8015d60 <__sfp+0x18>
 8015d70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015d74:	b9d5      	cbnz	r5, 8015dac <__sfp+0x64>
 8015d76:	4b16      	ldr	r3, [pc, #88]	; (8015dd0 <__sfp+0x88>)
 8015d78:	60e3      	str	r3, [r4, #12]
 8015d7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015d7e:	6665      	str	r5, [r4, #100]	; 0x64
 8015d80:	f000 f859 	bl	8015e36 <__retarget_lock_init_recursive>
 8015d84:	f7ff ff96 	bl	8015cb4 <__sfp_lock_release>
 8015d88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8015d8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8015d90:	6025      	str	r5, [r4, #0]
 8015d92:	61a5      	str	r5, [r4, #24]
 8015d94:	2208      	movs	r2, #8
 8015d96:	4629      	mov	r1, r5
 8015d98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015d9c:	f7ff fb5a 	bl	8015454 <memset>
 8015da0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015da4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015da8:	4620      	mov	r0, r4
 8015daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015dac:	3468      	adds	r4, #104	; 0x68
 8015dae:	e7d9      	b.n	8015d64 <__sfp+0x1c>
 8015db0:	2104      	movs	r1, #4
 8015db2:	4638      	mov	r0, r7
 8015db4:	f7ff ff62 	bl	8015c7c <__sfmoreglue>
 8015db8:	4604      	mov	r4, r0
 8015dba:	6030      	str	r0, [r6, #0]
 8015dbc:	2800      	cmp	r0, #0
 8015dbe:	d1d5      	bne.n	8015d6c <__sfp+0x24>
 8015dc0:	f7ff ff78 	bl	8015cb4 <__sfp_lock_release>
 8015dc4:	230c      	movs	r3, #12
 8015dc6:	603b      	str	r3, [r7, #0]
 8015dc8:	e7ee      	b.n	8015da8 <__sfp+0x60>
 8015dca:	bf00      	nop
 8015dcc:	08021744 	.word	0x08021744
 8015dd0:	ffff0001 	.word	0xffff0001

08015dd4 <fiprintf>:
 8015dd4:	b40e      	push	{r1, r2, r3}
 8015dd6:	b503      	push	{r0, r1, lr}
 8015dd8:	4601      	mov	r1, r0
 8015dda:	ab03      	add	r3, sp, #12
 8015ddc:	4805      	ldr	r0, [pc, #20]	; (8015df4 <fiprintf+0x20>)
 8015dde:	f853 2b04 	ldr.w	r2, [r3], #4
 8015de2:	6800      	ldr	r0, [r0, #0]
 8015de4:	9301      	str	r3, [sp, #4]
 8015de6:	f000 fac5 	bl	8016374 <_vfiprintf_r>
 8015dea:	b002      	add	sp, #8
 8015dec:	f85d eb04 	ldr.w	lr, [sp], #4
 8015df0:	b003      	add	sp, #12
 8015df2:	4770      	bx	lr
 8015df4:	200004bc 	.word	0x200004bc

08015df8 <_fwalk_reent>:
 8015df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015dfc:	4606      	mov	r6, r0
 8015dfe:	4688      	mov	r8, r1
 8015e00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015e04:	2700      	movs	r7, #0
 8015e06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015e0a:	f1b9 0901 	subs.w	r9, r9, #1
 8015e0e:	d505      	bpl.n	8015e1c <_fwalk_reent+0x24>
 8015e10:	6824      	ldr	r4, [r4, #0]
 8015e12:	2c00      	cmp	r4, #0
 8015e14:	d1f7      	bne.n	8015e06 <_fwalk_reent+0xe>
 8015e16:	4638      	mov	r0, r7
 8015e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e1c:	89ab      	ldrh	r3, [r5, #12]
 8015e1e:	2b01      	cmp	r3, #1
 8015e20:	d907      	bls.n	8015e32 <_fwalk_reent+0x3a>
 8015e22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015e26:	3301      	adds	r3, #1
 8015e28:	d003      	beq.n	8015e32 <_fwalk_reent+0x3a>
 8015e2a:	4629      	mov	r1, r5
 8015e2c:	4630      	mov	r0, r6
 8015e2e:	47c0      	blx	r8
 8015e30:	4307      	orrs	r7, r0
 8015e32:	3568      	adds	r5, #104	; 0x68
 8015e34:	e7e9      	b.n	8015e0a <_fwalk_reent+0x12>

08015e36 <__retarget_lock_init_recursive>:
 8015e36:	4770      	bx	lr

08015e38 <__retarget_lock_acquire_recursive>:
 8015e38:	4770      	bx	lr

08015e3a <__retarget_lock_release_recursive>:
 8015e3a:	4770      	bx	lr

08015e3c <__swhatbuf_r>:
 8015e3c:	b570      	push	{r4, r5, r6, lr}
 8015e3e:	460e      	mov	r6, r1
 8015e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e44:	2900      	cmp	r1, #0
 8015e46:	b096      	sub	sp, #88	; 0x58
 8015e48:	4614      	mov	r4, r2
 8015e4a:	461d      	mov	r5, r3
 8015e4c:	da07      	bge.n	8015e5e <__swhatbuf_r+0x22>
 8015e4e:	2300      	movs	r3, #0
 8015e50:	602b      	str	r3, [r5, #0]
 8015e52:	89b3      	ldrh	r3, [r6, #12]
 8015e54:	061a      	lsls	r2, r3, #24
 8015e56:	d410      	bmi.n	8015e7a <__swhatbuf_r+0x3e>
 8015e58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015e5c:	e00e      	b.n	8015e7c <__swhatbuf_r+0x40>
 8015e5e:	466a      	mov	r2, sp
 8015e60:	f000 fdca 	bl	80169f8 <_fstat_r>
 8015e64:	2800      	cmp	r0, #0
 8015e66:	dbf2      	blt.n	8015e4e <__swhatbuf_r+0x12>
 8015e68:	9a01      	ldr	r2, [sp, #4]
 8015e6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015e6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015e72:	425a      	negs	r2, r3
 8015e74:	415a      	adcs	r2, r3
 8015e76:	602a      	str	r2, [r5, #0]
 8015e78:	e7ee      	b.n	8015e58 <__swhatbuf_r+0x1c>
 8015e7a:	2340      	movs	r3, #64	; 0x40
 8015e7c:	2000      	movs	r0, #0
 8015e7e:	6023      	str	r3, [r4, #0]
 8015e80:	b016      	add	sp, #88	; 0x58
 8015e82:	bd70      	pop	{r4, r5, r6, pc}

08015e84 <__smakebuf_r>:
 8015e84:	898b      	ldrh	r3, [r1, #12]
 8015e86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015e88:	079d      	lsls	r5, r3, #30
 8015e8a:	4606      	mov	r6, r0
 8015e8c:	460c      	mov	r4, r1
 8015e8e:	d507      	bpl.n	8015ea0 <__smakebuf_r+0x1c>
 8015e90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015e94:	6023      	str	r3, [r4, #0]
 8015e96:	6123      	str	r3, [r4, #16]
 8015e98:	2301      	movs	r3, #1
 8015e9a:	6163      	str	r3, [r4, #20]
 8015e9c:	b002      	add	sp, #8
 8015e9e:	bd70      	pop	{r4, r5, r6, pc}
 8015ea0:	ab01      	add	r3, sp, #4
 8015ea2:	466a      	mov	r2, sp
 8015ea4:	f7ff ffca 	bl	8015e3c <__swhatbuf_r>
 8015ea8:	9900      	ldr	r1, [sp, #0]
 8015eaa:	4605      	mov	r5, r0
 8015eac:	4630      	mov	r0, r6
 8015eae:	f000 f881 	bl	8015fb4 <_malloc_r>
 8015eb2:	b948      	cbnz	r0, 8015ec8 <__smakebuf_r+0x44>
 8015eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015eb8:	059a      	lsls	r2, r3, #22
 8015eba:	d4ef      	bmi.n	8015e9c <__smakebuf_r+0x18>
 8015ebc:	f023 0303 	bic.w	r3, r3, #3
 8015ec0:	f043 0302 	orr.w	r3, r3, #2
 8015ec4:	81a3      	strh	r3, [r4, #12]
 8015ec6:	e7e3      	b.n	8015e90 <__smakebuf_r+0xc>
 8015ec8:	4b0d      	ldr	r3, [pc, #52]	; (8015f00 <__smakebuf_r+0x7c>)
 8015eca:	62b3      	str	r3, [r6, #40]	; 0x28
 8015ecc:	89a3      	ldrh	r3, [r4, #12]
 8015ece:	6020      	str	r0, [r4, #0]
 8015ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ed4:	81a3      	strh	r3, [r4, #12]
 8015ed6:	9b00      	ldr	r3, [sp, #0]
 8015ed8:	6163      	str	r3, [r4, #20]
 8015eda:	9b01      	ldr	r3, [sp, #4]
 8015edc:	6120      	str	r0, [r4, #16]
 8015ede:	b15b      	cbz	r3, 8015ef8 <__smakebuf_r+0x74>
 8015ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ee4:	4630      	mov	r0, r6
 8015ee6:	f000 fd99 	bl	8016a1c <_isatty_r>
 8015eea:	b128      	cbz	r0, 8015ef8 <__smakebuf_r+0x74>
 8015eec:	89a3      	ldrh	r3, [r4, #12]
 8015eee:	f023 0303 	bic.w	r3, r3, #3
 8015ef2:	f043 0301 	orr.w	r3, r3, #1
 8015ef6:	81a3      	strh	r3, [r4, #12]
 8015ef8:	89a0      	ldrh	r0, [r4, #12]
 8015efa:	4305      	orrs	r5, r0
 8015efc:	81a5      	strh	r5, [r4, #12]
 8015efe:	e7cd      	b.n	8015e9c <__smakebuf_r+0x18>
 8015f00:	08015c71 	.word	0x08015c71

08015f04 <malloc>:
 8015f04:	4b02      	ldr	r3, [pc, #8]	; (8015f10 <malloc+0xc>)
 8015f06:	4601      	mov	r1, r0
 8015f08:	6818      	ldr	r0, [r3, #0]
 8015f0a:	f000 b853 	b.w	8015fb4 <_malloc_r>
 8015f0e:	bf00      	nop
 8015f10:	200004bc 	.word	0x200004bc

08015f14 <_free_r>:
 8015f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015f16:	2900      	cmp	r1, #0
 8015f18:	d048      	beq.n	8015fac <_free_r+0x98>
 8015f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f1e:	9001      	str	r0, [sp, #4]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	f1a1 0404 	sub.w	r4, r1, #4
 8015f26:	bfb8      	it	lt
 8015f28:	18e4      	addlt	r4, r4, r3
 8015f2a:	f000 fd99 	bl	8016a60 <__malloc_lock>
 8015f2e:	4a20      	ldr	r2, [pc, #128]	; (8015fb0 <_free_r+0x9c>)
 8015f30:	9801      	ldr	r0, [sp, #4]
 8015f32:	6813      	ldr	r3, [r2, #0]
 8015f34:	4615      	mov	r5, r2
 8015f36:	b933      	cbnz	r3, 8015f46 <_free_r+0x32>
 8015f38:	6063      	str	r3, [r4, #4]
 8015f3a:	6014      	str	r4, [r2, #0]
 8015f3c:	b003      	add	sp, #12
 8015f3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f42:	f000 bd93 	b.w	8016a6c <__malloc_unlock>
 8015f46:	42a3      	cmp	r3, r4
 8015f48:	d90b      	bls.n	8015f62 <_free_r+0x4e>
 8015f4a:	6821      	ldr	r1, [r4, #0]
 8015f4c:	1862      	adds	r2, r4, r1
 8015f4e:	4293      	cmp	r3, r2
 8015f50:	bf04      	itt	eq
 8015f52:	681a      	ldreq	r2, [r3, #0]
 8015f54:	685b      	ldreq	r3, [r3, #4]
 8015f56:	6063      	str	r3, [r4, #4]
 8015f58:	bf04      	itt	eq
 8015f5a:	1852      	addeq	r2, r2, r1
 8015f5c:	6022      	streq	r2, [r4, #0]
 8015f5e:	602c      	str	r4, [r5, #0]
 8015f60:	e7ec      	b.n	8015f3c <_free_r+0x28>
 8015f62:	461a      	mov	r2, r3
 8015f64:	685b      	ldr	r3, [r3, #4]
 8015f66:	b10b      	cbz	r3, 8015f6c <_free_r+0x58>
 8015f68:	42a3      	cmp	r3, r4
 8015f6a:	d9fa      	bls.n	8015f62 <_free_r+0x4e>
 8015f6c:	6811      	ldr	r1, [r2, #0]
 8015f6e:	1855      	adds	r5, r2, r1
 8015f70:	42a5      	cmp	r5, r4
 8015f72:	d10b      	bne.n	8015f8c <_free_r+0x78>
 8015f74:	6824      	ldr	r4, [r4, #0]
 8015f76:	4421      	add	r1, r4
 8015f78:	1854      	adds	r4, r2, r1
 8015f7a:	42a3      	cmp	r3, r4
 8015f7c:	6011      	str	r1, [r2, #0]
 8015f7e:	d1dd      	bne.n	8015f3c <_free_r+0x28>
 8015f80:	681c      	ldr	r4, [r3, #0]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	6053      	str	r3, [r2, #4]
 8015f86:	4421      	add	r1, r4
 8015f88:	6011      	str	r1, [r2, #0]
 8015f8a:	e7d7      	b.n	8015f3c <_free_r+0x28>
 8015f8c:	d902      	bls.n	8015f94 <_free_r+0x80>
 8015f8e:	230c      	movs	r3, #12
 8015f90:	6003      	str	r3, [r0, #0]
 8015f92:	e7d3      	b.n	8015f3c <_free_r+0x28>
 8015f94:	6825      	ldr	r5, [r4, #0]
 8015f96:	1961      	adds	r1, r4, r5
 8015f98:	428b      	cmp	r3, r1
 8015f9a:	bf04      	itt	eq
 8015f9c:	6819      	ldreq	r1, [r3, #0]
 8015f9e:	685b      	ldreq	r3, [r3, #4]
 8015fa0:	6063      	str	r3, [r4, #4]
 8015fa2:	bf04      	itt	eq
 8015fa4:	1949      	addeq	r1, r1, r5
 8015fa6:	6021      	streq	r1, [r4, #0]
 8015fa8:	6054      	str	r4, [r2, #4]
 8015faa:	e7c7      	b.n	8015f3c <_free_r+0x28>
 8015fac:	b003      	add	sp, #12
 8015fae:	bd30      	pop	{r4, r5, pc}
 8015fb0:	20000b54 	.word	0x20000b54

08015fb4 <_malloc_r>:
 8015fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fb6:	1ccd      	adds	r5, r1, #3
 8015fb8:	f025 0503 	bic.w	r5, r5, #3
 8015fbc:	3508      	adds	r5, #8
 8015fbe:	2d0c      	cmp	r5, #12
 8015fc0:	bf38      	it	cc
 8015fc2:	250c      	movcc	r5, #12
 8015fc4:	2d00      	cmp	r5, #0
 8015fc6:	4606      	mov	r6, r0
 8015fc8:	db01      	blt.n	8015fce <_malloc_r+0x1a>
 8015fca:	42a9      	cmp	r1, r5
 8015fcc:	d903      	bls.n	8015fd6 <_malloc_r+0x22>
 8015fce:	230c      	movs	r3, #12
 8015fd0:	6033      	str	r3, [r6, #0]
 8015fd2:	2000      	movs	r0, #0
 8015fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fd6:	f000 fd43 	bl	8016a60 <__malloc_lock>
 8015fda:	4921      	ldr	r1, [pc, #132]	; (8016060 <_malloc_r+0xac>)
 8015fdc:	680a      	ldr	r2, [r1, #0]
 8015fde:	4614      	mov	r4, r2
 8015fe0:	b99c      	cbnz	r4, 801600a <_malloc_r+0x56>
 8015fe2:	4f20      	ldr	r7, [pc, #128]	; (8016064 <_malloc_r+0xb0>)
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	b923      	cbnz	r3, 8015ff2 <_malloc_r+0x3e>
 8015fe8:	4621      	mov	r1, r4
 8015fea:	4630      	mov	r0, r6
 8015fec:	f000 fc86 	bl	80168fc <_sbrk_r>
 8015ff0:	6038      	str	r0, [r7, #0]
 8015ff2:	4629      	mov	r1, r5
 8015ff4:	4630      	mov	r0, r6
 8015ff6:	f000 fc81 	bl	80168fc <_sbrk_r>
 8015ffa:	1c43      	adds	r3, r0, #1
 8015ffc:	d123      	bne.n	8016046 <_malloc_r+0x92>
 8015ffe:	230c      	movs	r3, #12
 8016000:	6033      	str	r3, [r6, #0]
 8016002:	4630      	mov	r0, r6
 8016004:	f000 fd32 	bl	8016a6c <__malloc_unlock>
 8016008:	e7e3      	b.n	8015fd2 <_malloc_r+0x1e>
 801600a:	6823      	ldr	r3, [r4, #0]
 801600c:	1b5b      	subs	r3, r3, r5
 801600e:	d417      	bmi.n	8016040 <_malloc_r+0x8c>
 8016010:	2b0b      	cmp	r3, #11
 8016012:	d903      	bls.n	801601c <_malloc_r+0x68>
 8016014:	6023      	str	r3, [r4, #0]
 8016016:	441c      	add	r4, r3
 8016018:	6025      	str	r5, [r4, #0]
 801601a:	e004      	b.n	8016026 <_malloc_r+0x72>
 801601c:	6863      	ldr	r3, [r4, #4]
 801601e:	42a2      	cmp	r2, r4
 8016020:	bf0c      	ite	eq
 8016022:	600b      	streq	r3, [r1, #0]
 8016024:	6053      	strne	r3, [r2, #4]
 8016026:	4630      	mov	r0, r6
 8016028:	f000 fd20 	bl	8016a6c <__malloc_unlock>
 801602c:	f104 000b 	add.w	r0, r4, #11
 8016030:	1d23      	adds	r3, r4, #4
 8016032:	f020 0007 	bic.w	r0, r0, #7
 8016036:	1ac2      	subs	r2, r0, r3
 8016038:	d0cc      	beq.n	8015fd4 <_malloc_r+0x20>
 801603a:	1a1b      	subs	r3, r3, r0
 801603c:	50a3      	str	r3, [r4, r2]
 801603e:	e7c9      	b.n	8015fd4 <_malloc_r+0x20>
 8016040:	4622      	mov	r2, r4
 8016042:	6864      	ldr	r4, [r4, #4]
 8016044:	e7cc      	b.n	8015fe0 <_malloc_r+0x2c>
 8016046:	1cc4      	adds	r4, r0, #3
 8016048:	f024 0403 	bic.w	r4, r4, #3
 801604c:	42a0      	cmp	r0, r4
 801604e:	d0e3      	beq.n	8016018 <_malloc_r+0x64>
 8016050:	1a21      	subs	r1, r4, r0
 8016052:	4630      	mov	r0, r6
 8016054:	f000 fc52 	bl	80168fc <_sbrk_r>
 8016058:	3001      	adds	r0, #1
 801605a:	d1dd      	bne.n	8016018 <_malloc_r+0x64>
 801605c:	e7cf      	b.n	8015ffe <_malloc_r+0x4a>
 801605e:	bf00      	nop
 8016060:	20000b54 	.word	0x20000b54
 8016064:	20000b58 	.word	0x20000b58

08016068 <__ssputs_r>:
 8016068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801606c:	688e      	ldr	r6, [r1, #8]
 801606e:	429e      	cmp	r6, r3
 8016070:	4682      	mov	sl, r0
 8016072:	460c      	mov	r4, r1
 8016074:	4690      	mov	r8, r2
 8016076:	461f      	mov	r7, r3
 8016078:	d838      	bhi.n	80160ec <__ssputs_r+0x84>
 801607a:	898a      	ldrh	r2, [r1, #12]
 801607c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016080:	d032      	beq.n	80160e8 <__ssputs_r+0x80>
 8016082:	6825      	ldr	r5, [r4, #0]
 8016084:	6909      	ldr	r1, [r1, #16]
 8016086:	eba5 0901 	sub.w	r9, r5, r1
 801608a:	6965      	ldr	r5, [r4, #20]
 801608c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016090:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016094:	3301      	adds	r3, #1
 8016096:	444b      	add	r3, r9
 8016098:	106d      	asrs	r5, r5, #1
 801609a:	429d      	cmp	r5, r3
 801609c:	bf38      	it	cc
 801609e:	461d      	movcc	r5, r3
 80160a0:	0553      	lsls	r3, r2, #21
 80160a2:	d531      	bpl.n	8016108 <__ssputs_r+0xa0>
 80160a4:	4629      	mov	r1, r5
 80160a6:	f7ff ff85 	bl	8015fb4 <_malloc_r>
 80160aa:	4606      	mov	r6, r0
 80160ac:	b950      	cbnz	r0, 80160c4 <__ssputs_r+0x5c>
 80160ae:	230c      	movs	r3, #12
 80160b0:	f8ca 3000 	str.w	r3, [sl]
 80160b4:	89a3      	ldrh	r3, [r4, #12]
 80160b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160ba:	81a3      	strh	r3, [r4, #12]
 80160bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80160c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160c4:	6921      	ldr	r1, [r4, #16]
 80160c6:	464a      	mov	r2, r9
 80160c8:	f7ff f99c 	bl	8015404 <memcpy>
 80160cc:	89a3      	ldrh	r3, [r4, #12]
 80160ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80160d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160d6:	81a3      	strh	r3, [r4, #12]
 80160d8:	6126      	str	r6, [r4, #16]
 80160da:	6165      	str	r5, [r4, #20]
 80160dc:	444e      	add	r6, r9
 80160de:	eba5 0509 	sub.w	r5, r5, r9
 80160e2:	6026      	str	r6, [r4, #0]
 80160e4:	60a5      	str	r5, [r4, #8]
 80160e6:	463e      	mov	r6, r7
 80160e8:	42be      	cmp	r6, r7
 80160ea:	d900      	bls.n	80160ee <__ssputs_r+0x86>
 80160ec:	463e      	mov	r6, r7
 80160ee:	4632      	mov	r2, r6
 80160f0:	6820      	ldr	r0, [r4, #0]
 80160f2:	4641      	mov	r1, r8
 80160f4:	f7ff f994 	bl	8015420 <memmove>
 80160f8:	68a3      	ldr	r3, [r4, #8]
 80160fa:	6822      	ldr	r2, [r4, #0]
 80160fc:	1b9b      	subs	r3, r3, r6
 80160fe:	4432      	add	r2, r6
 8016100:	60a3      	str	r3, [r4, #8]
 8016102:	6022      	str	r2, [r4, #0]
 8016104:	2000      	movs	r0, #0
 8016106:	e7db      	b.n	80160c0 <__ssputs_r+0x58>
 8016108:	462a      	mov	r2, r5
 801610a:	f000 fcb5 	bl	8016a78 <_realloc_r>
 801610e:	4606      	mov	r6, r0
 8016110:	2800      	cmp	r0, #0
 8016112:	d1e1      	bne.n	80160d8 <__ssputs_r+0x70>
 8016114:	6921      	ldr	r1, [r4, #16]
 8016116:	4650      	mov	r0, sl
 8016118:	f7ff fefc 	bl	8015f14 <_free_r>
 801611c:	e7c7      	b.n	80160ae <__ssputs_r+0x46>
	...

08016120 <_svfiprintf_r>:
 8016120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016124:	4698      	mov	r8, r3
 8016126:	898b      	ldrh	r3, [r1, #12]
 8016128:	061b      	lsls	r3, r3, #24
 801612a:	b09d      	sub	sp, #116	; 0x74
 801612c:	4607      	mov	r7, r0
 801612e:	460d      	mov	r5, r1
 8016130:	4614      	mov	r4, r2
 8016132:	d50e      	bpl.n	8016152 <_svfiprintf_r+0x32>
 8016134:	690b      	ldr	r3, [r1, #16]
 8016136:	b963      	cbnz	r3, 8016152 <_svfiprintf_r+0x32>
 8016138:	2140      	movs	r1, #64	; 0x40
 801613a:	f7ff ff3b 	bl	8015fb4 <_malloc_r>
 801613e:	6028      	str	r0, [r5, #0]
 8016140:	6128      	str	r0, [r5, #16]
 8016142:	b920      	cbnz	r0, 801614e <_svfiprintf_r+0x2e>
 8016144:	230c      	movs	r3, #12
 8016146:	603b      	str	r3, [r7, #0]
 8016148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801614c:	e0d1      	b.n	80162f2 <_svfiprintf_r+0x1d2>
 801614e:	2340      	movs	r3, #64	; 0x40
 8016150:	616b      	str	r3, [r5, #20]
 8016152:	2300      	movs	r3, #0
 8016154:	9309      	str	r3, [sp, #36]	; 0x24
 8016156:	2320      	movs	r3, #32
 8016158:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801615c:	f8cd 800c 	str.w	r8, [sp, #12]
 8016160:	2330      	movs	r3, #48	; 0x30
 8016162:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801630c <_svfiprintf_r+0x1ec>
 8016166:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801616a:	f04f 0901 	mov.w	r9, #1
 801616e:	4623      	mov	r3, r4
 8016170:	469a      	mov	sl, r3
 8016172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016176:	b10a      	cbz	r2, 801617c <_svfiprintf_r+0x5c>
 8016178:	2a25      	cmp	r2, #37	; 0x25
 801617a:	d1f9      	bne.n	8016170 <_svfiprintf_r+0x50>
 801617c:	ebba 0b04 	subs.w	fp, sl, r4
 8016180:	d00b      	beq.n	801619a <_svfiprintf_r+0x7a>
 8016182:	465b      	mov	r3, fp
 8016184:	4622      	mov	r2, r4
 8016186:	4629      	mov	r1, r5
 8016188:	4638      	mov	r0, r7
 801618a:	f7ff ff6d 	bl	8016068 <__ssputs_r>
 801618e:	3001      	adds	r0, #1
 8016190:	f000 80aa 	beq.w	80162e8 <_svfiprintf_r+0x1c8>
 8016194:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016196:	445a      	add	r2, fp
 8016198:	9209      	str	r2, [sp, #36]	; 0x24
 801619a:	f89a 3000 	ldrb.w	r3, [sl]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	f000 80a2 	beq.w	80162e8 <_svfiprintf_r+0x1c8>
 80161a4:	2300      	movs	r3, #0
 80161a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80161aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80161ae:	f10a 0a01 	add.w	sl, sl, #1
 80161b2:	9304      	str	r3, [sp, #16]
 80161b4:	9307      	str	r3, [sp, #28]
 80161b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80161ba:	931a      	str	r3, [sp, #104]	; 0x68
 80161bc:	4654      	mov	r4, sl
 80161be:	2205      	movs	r2, #5
 80161c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161c4:	4851      	ldr	r0, [pc, #324]	; (801630c <_svfiprintf_r+0x1ec>)
 80161c6:	f7ea f81b 	bl	8000200 <memchr>
 80161ca:	9a04      	ldr	r2, [sp, #16]
 80161cc:	b9d8      	cbnz	r0, 8016206 <_svfiprintf_r+0xe6>
 80161ce:	06d0      	lsls	r0, r2, #27
 80161d0:	bf44      	itt	mi
 80161d2:	2320      	movmi	r3, #32
 80161d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161d8:	0711      	lsls	r1, r2, #28
 80161da:	bf44      	itt	mi
 80161dc:	232b      	movmi	r3, #43	; 0x2b
 80161de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161e2:	f89a 3000 	ldrb.w	r3, [sl]
 80161e6:	2b2a      	cmp	r3, #42	; 0x2a
 80161e8:	d015      	beq.n	8016216 <_svfiprintf_r+0xf6>
 80161ea:	9a07      	ldr	r2, [sp, #28]
 80161ec:	4654      	mov	r4, sl
 80161ee:	2000      	movs	r0, #0
 80161f0:	f04f 0c0a 	mov.w	ip, #10
 80161f4:	4621      	mov	r1, r4
 80161f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80161fa:	3b30      	subs	r3, #48	; 0x30
 80161fc:	2b09      	cmp	r3, #9
 80161fe:	d94e      	bls.n	801629e <_svfiprintf_r+0x17e>
 8016200:	b1b0      	cbz	r0, 8016230 <_svfiprintf_r+0x110>
 8016202:	9207      	str	r2, [sp, #28]
 8016204:	e014      	b.n	8016230 <_svfiprintf_r+0x110>
 8016206:	eba0 0308 	sub.w	r3, r0, r8
 801620a:	fa09 f303 	lsl.w	r3, r9, r3
 801620e:	4313      	orrs	r3, r2
 8016210:	9304      	str	r3, [sp, #16]
 8016212:	46a2      	mov	sl, r4
 8016214:	e7d2      	b.n	80161bc <_svfiprintf_r+0x9c>
 8016216:	9b03      	ldr	r3, [sp, #12]
 8016218:	1d19      	adds	r1, r3, #4
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	9103      	str	r1, [sp, #12]
 801621e:	2b00      	cmp	r3, #0
 8016220:	bfbb      	ittet	lt
 8016222:	425b      	neglt	r3, r3
 8016224:	f042 0202 	orrlt.w	r2, r2, #2
 8016228:	9307      	strge	r3, [sp, #28]
 801622a:	9307      	strlt	r3, [sp, #28]
 801622c:	bfb8      	it	lt
 801622e:	9204      	strlt	r2, [sp, #16]
 8016230:	7823      	ldrb	r3, [r4, #0]
 8016232:	2b2e      	cmp	r3, #46	; 0x2e
 8016234:	d10c      	bne.n	8016250 <_svfiprintf_r+0x130>
 8016236:	7863      	ldrb	r3, [r4, #1]
 8016238:	2b2a      	cmp	r3, #42	; 0x2a
 801623a:	d135      	bne.n	80162a8 <_svfiprintf_r+0x188>
 801623c:	9b03      	ldr	r3, [sp, #12]
 801623e:	1d1a      	adds	r2, r3, #4
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	9203      	str	r2, [sp, #12]
 8016244:	2b00      	cmp	r3, #0
 8016246:	bfb8      	it	lt
 8016248:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801624c:	3402      	adds	r4, #2
 801624e:	9305      	str	r3, [sp, #20]
 8016250:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801631c <_svfiprintf_r+0x1fc>
 8016254:	7821      	ldrb	r1, [r4, #0]
 8016256:	2203      	movs	r2, #3
 8016258:	4650      	mov	r0, sl
 801625a:	f7e9 ffd1 	bl	8000200 <memchr>
 801625e:	b140      	cbz	r0, 8016272 <_svfiprintf_r+0x152>
 8016260:	2340      	movs	r3, #64	; 0x40
 8016262:	eba0 000a 	sub.w	r0, r0, sl
 8016266:	fa03 f000 	lsl.w	r0, r3, r0
 801626a:	9b04      	ldr	r3, [sp, #16]
 801626c:	4303      	orrs	r3, r0
 801626e:	3401      	adds	r4, #1
 8016270:	9304      	str	r3, [sp, #16]
 8016272:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016276:	4826      	ldr	r0, [pc, #152]	; (8016310 <_svfiprintf_r+0x1f0>)
 8016278:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801627c:	2206      	movs	r2, #6
 801627e:	f7e9 ffbf 	bl	8000200 <memchr>
 8016282:	2800      	cmp	r0, #0
 8016284:	d038      	beq.n	80162f8 <_svfiprintf_r+0x1d8>
 8016286:	4b23      	ldr	r3, [pc, #140]	; (8016314 <_svfiprintf_r+0x1f4>)
 8016288:	bb1b      	cbnz	r3, 80162d2 <_svfiprintf_r+0x1b2>
 801628a:	9b03      	ldr	r3, [sp, #12]
 801628c:	3307      	adds	r3, #7
 801628e:	f023 0307 	bic.w	r3, r3, #7
 8016292:	3308      	adds	r3, #8
 8016294:	9303      	str	r3, [sp, #12]
 8016296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016298:	4433      	add	r3, r6
 801629a:	9309      	str	r3, [sp, #36]	; 0x24
 801629c:	e767      	b.n	801616e <_svfiprintf_r+0x4e>
 801629e:	fb0c 3202 	mla	r2, ip, r2, r3
 80162a2:	460c      	mov	r4, r1
 80162a4:	2001      	movs	r0, #1
 80162a6:	e7a5      	b.n	80161f4 <_svfiprintf_r+0xd4>
 80162a8:	2300      	movs	r3, #0
 80162aa:	3401      	adds	r4, #1
 80162ac:	9305      	str	r3, [sp, #20]
 80162ae:	4619      	mov	r1, r3
 80162b0:	f04f 0c0a 	mov.w	ip, #10
 80162b4:	4620      	mov	r0, r4
 80162b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162ba:	3a30      	subs	r2, #48	; 0x30
 80162bc:	2a09      	cmp	r2, #9
 80162be:	d903      	bls.n	80162c8 <_svfiprintf_r+0x1a8>
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d0c5      	beq.n	8016250 <_svfiprintf_r+0x130>
 80162c4:	9105      	str	r1, [sp, #20]
 80162c6:	e7c3      	b.n	8016250 <_svfiprintf_r+0x130>
 80162c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80162cc:	4604      	mov	r4, r0
 80162ce:	2301      	movs	r3, #1
 80162d0:	e7f0      	b.n	80162b4 <_svfiprintf_r+0x194>
 80162d2:	ab03      	add	r3, sp, #12
 80162d4:	9300      	str	r3, [sp, #0]
 80162d6:	462a      	mov	r2, r5
 80162d8:	4b0f      	ldr	r3, [pc, #60]	; (8016318 <_svfiprintf_r+0x1f8>)
 80162da:	a904      	add	r1, sp, #16
 80162dc:	4638      	mov	r0, r7
 80162de:	f3af 8000 	nop.w
 80162e2:	1c42      	adds	r2, r0, #1
 80162e4:	4606      	mov	r6, r0
 80162e6:	d1d6      	bne.n	8016296 <_svfiprintf_r+0x176>
 80162e8:	89ab      	ldrh	r3, [r5, #12]
 80162ea:	065b      	lsls	r3, r3, #25
 80162ec:	f53f af2c 	bmi.w	8016148 <_svfiprintf_r+0x28>
 80162f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80162f2:	b01d      	add	sp, #116	; 0x74
 80162f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f8:	ab03      	add	r3, sp, #12
 80162fa:	9300      	str	r3, [sp, #0]
 80162fc:	462a      	mov	r2, r5
 80162fe:	4b06      	ldr	r3, [pc, #24]	; (8016318 <_svfiprintf_r+0x1f8>)
 8016300:	a904      	add	r1, sp, #16
 8016302:	4638      	mov	r0, r7
 8016304:	f000 f9d4 	bl	80166b0 <_printf_i>
 8016308:	e7eb      	b.n	80162e2 <_svfiprintf_r+0x1c2>
 801630a:	bf00      	nop
 801630c:	0802185c 	.word	0x0802185c
 8016310:	08021866 	.word	0x08021866
 8016314:	00000000 	.word	0x00000000
 8016318:	08016069 	.word	0x08016069
 801631c:	08021862 	.word	0x08021862

08016320 <__sfputc_r>:
 8016320:	6893      	ldr	r3, [r2, #8]
 8016322:	3b01      	subs	r3, #1
 8016324:	2b00      	cmp	r3, #0
 8016326:	b410      	push	{r4}
 8016328:	6093      	str	r3, [r2, #8]
 801632a:	da08      	bge.n	801633e <__sfputc_r+0x1e>
 801632c:	6994      	ldr	r4, [r2, #24]
 801632e:	42a3      	cmp	r3, r4
 8016330:	db01      	blt.n	8016336 <__sfputc_r+0x16>
 8016332:	290a      	cmp	r1, #10
 8016334:	d103      	bne.n	801633e <__sfputc_r+0x1e>
 8016336:	f85d 4b04 	ldr.w	r4, [sp], #4
 801633a:	f7ff bacf 	b.w	80158dc <__swbuf_r>
 801633e:	6813      	ldr	r3, [r2, #0]
 8016340:	1c58      	adds	r0, r3, #1
 8016342:	6010      	str	r0, [r2, #0]
 8016344:	7019      	strb	r1, [r3, #0]
 8016346:	4608      	mov	r0, r1
 8016348:	f85d 4b04 	ldr.w	r4, [sp], #4
 801634c:	4770      	bx	lr

0801634e <__sfputs_r>:
 801634e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016350:	4606      	mov	r6, r0
 8016352:	460f      	mov	r7, r1
 8016354:	4614      	mov	r4, r2
 8016356:	18d5      	adds	r5, r2, r3
 8016358:	42ac      	cmp	r4, r5
 801635a:	d101      	bne.n	8016360 <__sfputs_r+0x12>
 801635c:	2000      	movs	r0, #0
 801635e:	e007      	b.n	8016370 <__sfputs_r+0x22>
 8016360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016364:	463a      	mov	r2, r7
 8016366:	4630      	mov	r0, r6
 8016368:	f7ff ffda 	bl	8016320 <__sfputc_r>
 801636c:	1c43      	adds	r3, r0, #1
 801636e:	d1f3      	bne.n	8016358 <__sfputs_r+0xa>
 8016370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016374 <_vfiprintf_r>:
 8016374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016378:	460d      	mov	r5, r1
 801637a:	b09d      	sub	sp, #116	; 0x74
 801637c:	4614      	mov	r4, r2
 801637e:	4698      	mov	r8, r3
 8016380:	4606      	mov	r6, r0
 8016382:	b118      	cbz	r0, 801638c <_vfiprintf_r+0x18>
 8016384:	6983      	ldr	r3, [r0, #24]
 8016386:	b90b      	cbnz	r3, 801638c <_vfiprintf_r+0x18>
 8016388:	f7ff fca6 	bl	8015cd8 <__sinit>
 801638c:	4b89      	ldr	r3, [pc, #548]	; (80165b4 <_vfiprintf_r+0x240>)
 801638e:	429d      	cmp	r5, r3
 8016390:	d11b      	bne.n	80163ca <_vfiprintf_r+0x56>
 8016392:	6875      	ldr	r5, [r6, #4]
 8016394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016396:	07d9      	lsls	r1, r3, #31
 8016398:	d405      	bmi.n	80163a6 <_vfiprintf_r+0x32>
 801639a:	89ab      	ldrh	r3, [r5, #12]
 801639c:	059a      	lsls	r2, r3, #22
 801639e:	d402      	bmi.n	80163a6 <_vfiprintf_r+0x32>
 80163a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163a2:	f7ff fd49 	bl	8015e38 <__retarget_lock_acquire_recursive>
 80163a6:	89ab      	ldrh	r3, [r5, #12]
 80163a8:	071b      	lsls	r3, r3, #28
 80163aa:	d501      	bpl.n	80163b0 <_vfiprintf_r+0x3c>
 80163ac:	692b      	ldr	r3, [r5, #16]
 80163ae:	b9eb      	cbnz	r3, 80163ec <_vfiprintf_r+0x78>
 80163b0:	4629      	mov	r1, r5
 80163b2:	4630      	mov	r0, r6
 80163b4:	f7ff fae4 	bl	8015980 <__swsetup_r>
 80163b8:	b1c0      	cbz	r0, 80163ec <_vfiprintf_r+0x78>
 80163ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80163bc:	07dc      	lsls	r4, r3, #31
 80163be:	d50e      	bpl.n	80163de <_vfiprintf_r+0x6a>
 80163c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80163c4:	b01d      	add	sp, #116	; 0x74
 80163c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163ca:	4b7b      	ldr	r3, [pc, #492]	; (80165b8 <_vfiprintf_r+0x244>)
 80163cc:	429d      	cmp	r5, r3
 80163ce:	d101      	bne.n	80163d4 <_vfiprintf_r+0x60>
 80163d0:	68b5      	ldr	r5, [r6, #8]
 80163d2:	e7df      	b.n	8016394 <_vfiprintf_r+0x20>
 80163d4:	4b79      	ldr	r3, [pc, #484]	; (80165bc <_vfiprintf_r+0x248>)
 80163d6:	429d      	cmp	r5, r3
 80163d8:	bf08      	it	eq
 80163da:	68f5      	ldreq	r5, [r6, #12]
 80163dc:	e7da      	b.n	8016394 <_vfiprintf_r+0x20>
 80163de:	89ab      	ldrh	r3, [r5, #12]
 80163e0:	0598      	lsls	r0, r3, #22
 80163e2:	d4ed      	bmi.n	80163c0 <_vfiprintf_r+0x4c>
 80163e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80163e6:	f7ff fd28 	bl	8015e3a <__retarget_lock_release_recursive>
 80163ea:	e7e9      	b.n	80163c0 <_vfiprintf_r+0x4c>
 80163ec:	2300      	movs	r3, #0
 80163ee:	9309      	str	r3, [sp, #36]	; 0x24
 80163f0:	2320      	movs	r3, #32
 80163f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80163fa:	2330      	movs	r3, #48	; 0x30
 80163fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80165c0 <_vfiprintf_r+0x24c>
 8016400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016404:	f04f 0901 	mov.w	r9, #1
 8016408:	4623      	mov	r3, r4
 801640a:	469a      	mov	sl, r3
 801640c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016410:	b10a      	cbz	r2, 8016416 <_vfiprintf_r+0xa2>
 8016412:	2a25      	cmp	r2, #37	; 0x25
 8016414:	d1f9      	bne.n	801640a <_vfiprintf_r+0x96>
 8016416:	ebba 0b04 	subs.w	fp, sl, r4
 801641a:	d00b      	beq.n	8016434 <_vfiprintf_r+0xc0>
 801641c:	465b      	mov	r3, fp
 801641e:	4622      	mov	r2, r4
 8016420:	4629      	mov	r1, r5
 8016422:	4630      	mov	r0, r6
 8016424:	f7ff ff93 	bl	801634e <__sfputs_r>
 8016428:	3001      	adds	r0, #1
 801642a:	f000 80aa 	beq.w	8016582 <_vfiprintf_r+0x20e>
 801642e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016430:	445a      	add	r2, fp
 8016432:	9209      	str	r2, [sp, #36]	; 0x24
 8016434:	f89a 3000 	ldrb.w	r3, [sl]
 8016438:	2b00      	cmp	r3, #0
 801643a:	f000 80a2 	beq.w	8016582 <_vfiprintf_r+0x20e>
 801643e:	2300      	movs	r3, #0
 8016440:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016448:	f10a 0a01 	add.w	sl, sl, #1
 801644c:	9304      	str	r3, [sp, #16]
 801644e:	9307      	str	r3, [sp, #28]
 8016450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016454:	931a      	str	r3, [sp, #104]	; 0x68
 8016456:	4654      	mov	r4, sl
 8016458:	2205      	movs	r2, #5
 801645a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801645e:	4858      	ldr	r0, [pc, #352]	; (80165c0 <_vfiprintf_r+0x24c>)
 8016460:	f7e9 fece 	bl	8000200 <memchr>
 8016464:	9a04      	ldr	r2, [sp, #16]
 8016466:	b9d8      	cbnz	r0, 80164a0 <_vfiprintf_r+0x12c>
 8016468:	06d1      	lsls	r1, r2, #27
 801646a:	bf44      	itt	mi
 801646c:	2320      	movmi	r3, #32
 801646e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016472:	0713      	lsls	r3, r2, #28
 8016474:	bf44      	itt	mi
 8016476:	232b      	movmi	r3, #43	; 0x2b
 8016478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801647c:	f89a 3000 	ldrb.w	r3, [sl]
 8016480:	2b2a      	cmp	r3, #42	; 0x2a
 8016482:	d015      	beq.n	80164b0 <_vfiprintf_r+0x13c>
 8016484:	9a07      	ldr	r2, [sp, #28]
 8016486:	4654      	mov	r4, sl
 8016488:	2000      	movs	r0, #0
 801648a:	f04f 0c0a 	mov.w	ip, #10
 801648e:	4621      	mov	r1, r4
 8016490:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016494:	3b30      	subs	r3, #48	; 0x30
 8016496:	2b09      	cmp	r3, #9
 8016498:	d94e      	bls.n	8016538 <_vfiprintf_r+0x1c4>
 801649a:	b1b0      	cbz	r0, 80164ca <_vfiprintf_r+0x156>
 801649c:	9207      	str	r2, [sp, #28]
 801649e:	e014      	b.n	80164ca <_vfiprintf_r+0x156>
 80164a0:	eba0 0308 	sub.w	r3, r0, r8
 80164a4:	fa09 f303 	lsl.w	r3, r9, r3
 80164a8:	4313      	orrs	r3, r2
 80164aa:	9304      	str	r3, [sp, #16]
 80164ac:	46a2      	mov	sl, r4
 80164ae:	e7d2      	b.n	8016456 <_vfiprintf_r+0xe2>
 80164b0:	9b03      	ldr	r3, [sp, #12]
 80164b2:	1d19      	adds	r1, r3, #4
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	9103      	str	r1, [sp, #12]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	bfbb      	ittet	lt
 80164bc:	425b      	neglt	r3, r3
 80164be:	f042 0202 	orrlt.w	r2, r2, #2
 80164c2:	9307      	strge	r3, [sp, #28]
 80164c4:	9307      	strlt	r3, [sp, #28]
 80164c6:	bfb8      	it	lt
 80164c8:	9204      	strlt	r2, [sp, #16]
 80164ca:	7823      	ldrb	r3, [r4, #0]
 80164cc:	2b2e      	cmp	r3, #46	; 0x2e
 80164ce:	d10c      	bne.n	80164ea <_vfiprintf_r+0x176>
 80164d0:	7863      	ldrb	r3, [r4, #1]
 80164d2:	2b2a      	cmp	r3, #42	; 0x2a
 80164d4:	d135      	bne.n	8016542 <_vfiprintf_r+0x1ce>
 80164d6:	9b03      	ldr	r3, [sp, #12]
 80164d8:	1d1a      	adds	r2, r3, #4
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	9203      	str	r2, [sp, #12]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	bfb8      	it	lt
 80164e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80164e6:	3402      	adds	r4, #2
 80164e8:	9305      	str	r3, [sp, #20]
 80164ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80165d0 <_vfiprintf_r+0x25c>
 80164ee:	7821      	ldrb	r1, [r4, #0]
 80164f0:	2203      	movs	r2, #3
 80164f2:	4650      	mov	r0, sl
 80164f4:	f7e9 fe84 	bl	8000200 <memchr>
 80164f8:	b140      	cbz	r0, 801650c <_vfiprintf_r+0x198>
 80164fa:	2340      	movs	r3, #64	; 0x40
 80164fc:	eba0 000a 	sub.w	r0, r0, sl
 8016500:	fa03 f000 	lsl.w	r0, r3, r0
 8016504:	9b04      	ldr	r3, [sp, #16]
 8016506:	4303      	orrs	r3, r0
 8016508:	3401      	adds	r4, #1
 801650a:	9304      	str	r3, [sp, #16]
 801650c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016510:	482c      	ldr	r0, [pc, #176]	; (80165c4 <_vfiprintf_r+0x250>)
 8016512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016516:	2206      	movs	r2, #6
 8016518:	f7e9 fe72 	bl	8000200 <memchr>
 801651c:	2800      	cmp	r0, #0
 801651e:	d03f      	beq.n	80165a0 <_vfiprintf_r+0x22c>
 8016520:	4b29      	ldr	r3, [pc, #164]	; (80165c8 <_vfiprintf_r+0x254>)
 8016522:	bb1b      	cbnz	r3, 801656c <_vfiprintf_r+0x1f8>
 8016524:	9b03      	ldr	r3, [sp, #12]
 8016526:	3307      	adds	r3, #7
 8016528:	f023 0307 	bic.w	r3, r3, #7
 801652c:	3308      	adds	r3, #8
 801652e:	9303      	str	r3, [sp, #12]
 8016530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016532:	443b      	add	r3, r7
 8016534:	9309      	str	r3, [sp, #36]	; 0x24
 8016536:	e767      	b.n	8016408 <_vfiprintf_r+0x94>
 8016538:	fb0c 3202 	mla	r2, ip, r2, r3
 801653c:	460c      	mov	r4, r1
 801653e:	2001      	movs	r0, #1
 8016540:	e7a5      	b.n	801648e <_vfiprintf_r+0x11a>
 8016542:	2300      	movs	r3, #0
 8016544:	3401      	adds	r4, #1
 8016546:	9305      	str	r3, [sp, #20]
 8016548:	4619      	mov	r1, r3
 801654a:	f04f 0c0a 	mov.w	ip, #10
 801654e:	4620      	mov	r0, r4
 8016550:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016554:	3a30      	subs	r2, #48	; 0x30
 8016556:	2a09      	cmp	r2, #9
 8016558:	d903      	bls.n	8016562 <_vfiprintf_r+0x1ee>
 801655a:	2b00      	cmp	r3, #0
 801655c:	d0c5      	beq.n	80164ea <_vfiprintf_r+0x176>
 801655e:	9105      	str	r1, [sp, #20]
 8016560:	e7c3      	b.n	80164ea <_vfiprintf_r+0x176>
 8016562:	fb0c 2101 	mla	r1, ip, r1, r2
 8016566:	4604      	mov	r4, r0
 8016568:	2301      	movs	r3, #1
 801656a:	e7f0      	b.n	801654e <_vfiprintf_r+0x1da>
 801656c:	ab03      	add	r3, sp, #12
 801656e:	9300      	str	r3, [sp, #0]
 8016570:	462a      	mov	r2, r5
 8016572:	4b16      	ldr	r3, [pc, #88]	; (80165cc <_vfiprintf_r+0x258>)
 8016574:	a904      	add	r1, sp, #16
 8016576:	4630      	mov	r0, r6
 8016578:	f3af 8000 	nop.w
 801657c:	4607      	mov	r7, r0
 801657e:	1c78      	adds	r0, r7, #1
 8016580:	d1d6      	bne.n	8016530 <_vfiprintf_r+0x1bc>
 8016582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016584:	07d9      	lsls	r1, r3, #31
 8016586:	d405      	bmi.n	8016594 <_vfiprintf_r+0x220>
 8016588:	89ab      	ldrh	r3, [r5, #12]
 801658a:	059a      	lsls	r2, r3, #22
 801658c:	d402      	bmi.n	8016594 <_vfiprintf_r+0x220>
 801658e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016590:	f7ff fc53 	bl	8015e3a <__retarget_lock_release_recursive>
 8016594:	89ab      	ldrh	r3, [r5, #12]
 8016596:	065b      	lsls	r3, r3, #25
 8016598:	f53f af12 	bmi.w	80163c0 <_vfiprintf_r+0x4c>
 801659c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801659e:	e711      	b.n	80163c4 <_vfiprintf_r+0x50>
 80165a0:	ab03      	add	r3, sp, #12
 80165a2:	9300      	str	r3, [sp, #0]
 80165a4:	462a      	mov	r2, r5
 80165a6:	4b09      	ldr	r3, [pc, #36]	; (80165cc <_vfiprintf_r+0x258>)
 80165a8:	a904      	add	r1, sp, #16
 80165aa:	4630      	mov	r0, r6
 80165ac:	f000 f880 	bl	80166b0 <_printf_i>
 80165b0:	e7e4      	b.n	801657c <_vfiprintf_r+0x208>
 80165b2:	bf00      	nop
 80165b4:	0802181c 	.word	0x0802181c
 80165b8:	0802183c 	.word	0x0802183c
 80165bc:	080217fc 	.word	0x080217fc
 80165c0:	0802185c 	.word	0x0802185c
 80165c4:	08021866 	.word	0x08021866
 80165c8:	00000000 	.word	0x00000000
 80165cc:	0801634f 	.word	0x0801634f
 80165d0:	08021862 	.word	0x08021862

080165d4 <_printf_common>:
 80165d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165d8:	4616      	mov	r6, r2
 80165da:	4699      	mov	r9, r3
 80165dc:	688a      	ldr	r2, [r1, #8]
 80165de:	690b      	ldr	r3, [r1, #16]
 80165e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80165e4:	4293      	cmp	r3, r2
 80165e6:	bfb8      	it	lt
 80165e8:	4613      	movlt	r3, r2
 80165ea:	6033      	str	r3, [r6, #0]
 80165ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80165f0:	4607      	mov	r7, r0
 80165f2:	460c      	mov	r4, r1
 80165f4:	b10a      	cbz	r2, 80165fa <_printf_common+0x26>
 80165f6:	3301      	adds	r3, #1
 80165f8:	6033      	str	r3, [r6, #0]
 80165fa:	6823      	ldr	r3, [r4, #0]
 80165fc:	0699      	lsls	r1, r3, #26
 80165fe:	bf42      	ittt	mi
 8016600:	6833      	ldrmi	r3, [r6, #0]
 8016602:	3302      	addmi	r3, #2
 8016604:	6033      	strmi	r3, [r6, #0]
 8016606:	6825      	ldr	r5, [r4, #0]
 8016608:	f015 0506 	ands.w	r5, r5, #6
 801660c:	d106      	bne.n	801661c <_printf_common+0x48>
 801660e:	f104 0a19 	add.w	sl, r4, #25
 8016612:	68e3      	ldr	r3, [r4, #12]
 8016614:	6832      	ldr	r2, [r6, #0]
 8016616:	1a9b      	subs	r3, r3, r2
 8016618:	42ab      	cmp	r3, r5
 801661a:	dc26      	bgt.n	801666a <_printf_common+0x96>
 801661c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016620:	1e13      	subs	r3, r2, #0
 8016622:	6822      	ldr	r2, [r4, #0]
 8016624:	bf18      	it	ne
 8016626:	2301      	movne	r3, #1
 8016628:	0692      	lsls	r2, r2, #26
 801662a:	d42b      	bmi.n	8016684 <_printf_common+0xb0>
 801662c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016630:	4649      	mov	r1, r9
 8016632:	4638      	mov	r0, r7
 8016634:	47c0      	blx	r8
 8016636:	3001      	adds	r0, #1
 8016638:	d01e      	beq.n	8016678 <_printf_common+0xa4>
 801663a:	6823      	ldr	r3, [r4, #0]
 801663c:	68e5      	ldr	r5, [r4, #12]
 801663e:	6832      	ldr	r2, [r6, #0]
 8016640:	f003 0306 	and.w	r3, r3, #6
 8016644:	2b04      	cmp	r3, #4
 8016646:	bf08      	it	eq
 8016648:	1aad      	subeq	r5, r5, r2
 801664a:	68a3      	ldr	r3, [r4, #8]
 801664c:	6922      	ldr	r2, [r4, #16]
 801664e:	bf0c      	ite	eq
 8016650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016654:	2500      	movne	r5, #0
 8016656:	4293      	cmp	r3, r2
 8016658:	bfc4      	itt	gt
 801665a:	1a9b      	subgt	r3, r3, r2
 801665c:	18ed      	addgt	r5, r5, r3
 801665e:	2600      	movs	r6, #0
 8016660:	341a      	adds	r4, #26
 8016662:	42b5      	cmp	r5, r6
 8016664:	d11a      	bne.n	801669c <_printf_common+0xc8>
 8016666:	2000      	movs	r0, #0
 8016668:	e008      	b.n	801667c <_printf_common+0xa8>
 801666a:	2301      	movs	r3, #1
 801666c:	4652      	mov	r2, sl
 801666e:	4649      	mov	r1, r9
 8016670:	4638      	mov	r0, r7
 8016672:	47c0      	blx	r8
 8016674:	3001      	adds	r0, #1
 8016676:	d103      	bne.n	8016680 <_printf_common+0xac>
 8016678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801667c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016680:	3501      	adds	r5, #1
 8016682:	e7c6      	b.n	8016612 <_printf_common+0x3e>
 8016684:	18e1      	adds	r1, r4, r3
 8016686:	1c5a      	adds	r2, r3, #1
 8016688:	2030      	movs	r0, #48	; 0x30
 801668a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801668e:	4422      	add	r2, r4
 8016690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016698:	3302      	adds	r3, #2
 801669a:	e7c7      	b.n	801662c <_printf_common+0x58>
 801669c:	2301      	movs	r3, #1
 801669e:	4622      	mov	r2, r4
 80166a0:	4649      	mov	r1, r9
 80166a2:	4638      	mov	r0, r7
 80166a4:	47c0      	blx	r8
 80166a6:	3001      	adds	r0, #1
 80166a8:	d0e6      	beq.n	8016678 <_printf_common+0xa4>
 80166aa:	3601      	adds	r6, #1
 80166ac:	e7d9      	b.n	8016662 <_printf_common+0x8e>
	...

080166b0 <_printf_i>:
 80166b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80166b4:	460c      	mov	r4, r1
 80166b6:	4691      	mov	r9, r2
 80166b8:	7e27      	ldrb	r7, [r4, #24]
 80166ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80166bc:	2f78      	cmp	r7, #120	; 0x78
 80166be:	4680      	mov	r8, r0
 80166c0:	469a      	mov	sl, r3
 80166c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80166c6:	d807      	bhi.n	80166d8 <_printf_i+0x28>
 80166c8:	2f62      	cmp	r7, #98	; 0x62
 80166ca:	d80a      	bhi.n	80166e2 <_printf_i+0x32>
 80166cc:	2f00      	cmp	r7, #0
 80166ce:	f000 80d8 	beq.w	8016882 <_printf_i+0x1d2>
 80166d2:	2f58      	cmp	r7, #88	; 0x58
 80166d4:	f000 80a3 	beq.w	801681e <_printf_i+0x16e>
 80166d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80166dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80166e0:	e03a      	b.n	8016758 <_printf_i+0xa8>
 80166e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80166e6:	2b15      	cmp	r3, #21
 80166e8:	d8f6      	bhi.n	80166d8 <_printf_i+0x28>
 80166ea:	a001      	add	r0, pc, #4	; (adr r0, 80166f0 <_printf_i+0x40>)
 80166ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80166f0:	08016749 	.word	0x08016749
 80166f4:	0801675d 	.word	0x0801675d
 80166f8:	080166d9 	.word	0x080166d9
 80166fc:	080166d9 	.word	0x080166d9
 8016700:	080166d9 	.word	0x080166d9
 8016704:	080166d9 	.word	0x080166d9
 8016708:	0801675d 	.word	0x0801675d
 801670c:	080166d9 	.word	0x080166d9
 8016710:	080166d9 	.word	0x080166d9
 8016714:	080166d9 	.word	0x080166d9
 8016718:	080166d9 	.word	0x080166d9
 801671c:	08016869 	.word	0x08016869
 8016720:	0801678d 	.word	0x0801678d
 8016724:	0801684b 	.word	0x0801684b
 8016728:	080166d9 	.word	0x080166d9
 801672c:	080166d9 	.word	0x080166d9
 8016730:	0801688b 	.word	0x0801688b
 8016734:	080166d9 	.word	0x080166d9
 8016738:	0801678d 	.word	0x0801678d
 801673c:	080166d9 	.word	0x080166d9
 8016740:	080166d9 	.word	0x080166d9
 8016744:	08016853 	.word	0x08016853
 8016748:	680b      	ldr	r3, [r1, #0]
 801674a:	1d1a      	adds	r2, r3, #4
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	600a      	str	r2, [r1, #0]
 8016750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016758:	2301      	movs	r3, #1
 801675a:	e0a3      	b.n	80168a4 <_printf_i+0x1f4>
 801675c:	6825      	ldr	r5, [r4, #0]
 801675e:	6808      	ldr	r0, [r1, #0]
 8016760:	062e      	lsls	r6, r5, #24
 8016762:	f100 0304 	add.w	r3, r0, #4
 8016766:	d50a      	bpl.n	801677e <_printf_i+0xce>
 8016768:	6805      	ldr	r5, [r0, #0]
 801676a:	600b      	str	r3, [r1, #0]
 801676c:	2d00      	cmp	r5, #0
 801676e:	da03      	bge.n	8016778 <_printf_i+0xc8>
 8016770:	232d      	movs	r3, #45	; 0x2d
 8016772:	426d      	negs	r5, r5
 8016774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016778:	485e      	ldr	r0, [pc, #376]	; (80168f4 <_printf_i+0x244>)
 801677a:	230a      	movs	r3, #10
 801677c:	e019      	b.n	80167b2 <_printf_i+0x102>
 801677e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016782:	6805      	ldr	r5, [r0, #0]
 8016784:	600b      	str	r3, [r1, #0]
 8016786:	bf18      	it	ne
 8016788:	b22d      	sxthne	r5, r5
 801678a:	e7ef      	b.n	801676c <_printf_i+0xbc>
 801678c:	680b      	ldr	r3, [r1, #0]
 801678e:	6825      	ldr	r5, [r4, #0]
 8016790:	1d18      	adds	r0, r3, #4
 8016792:	6008      	str	r0, [r1, #0]
 8016794:	0628      	lsls	r0, r5, #24
 8016796:	d501      	bpl.n	801679c <_printf_i+0xec>
 8016798:	681d      	ldr	r5, [r3, #0]
 801679a:	e002      	b.n	80167a2 <_printf_i+0xf2>
 801679c:	0669      	lsls	r1, r5, #25
 801679e:	d5fb      	bpl.n	8016798 <_printf_i+0xe8>
 80167a0:	881d      	ldrh	r5, [r3, #0]
 80167a2:	4854      	ldr	r0, [pc, #336]	; (80168f4 <_printf_i+0x244>)
 80167a4:	2f6f      	cmp	r7, #111	; 0x6f
 80167a6:	bf0c      	ite	eq
 80167a8:	2308      	moveq	r3, #8
 80167aa:	230a      	movne	r3, #10
 80167ac:	2100      	movs	r1, #0
 80167ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80167b2:	6866      	ldr	r6, [r4, #4]
 80167b4:	60a6      	str	r6, [r4, #8]
 80167b6:	2e00      	cmp	r6, #0
 80167b8:	bfa2      	ittt	ge
 80167ba:	6821      	ldrge	r1, [r4, #0]
 80167bc:	f021 0104 	bicge.w	r1, r1, #4
 80167c0:	6021      	strge	r1, [r4, #0]
 80167c2:	b90d      	cbnz	r5, 80167c8 <_printf_i+0x118>
 80167c4:	2e00      	cmp	r6, #0
 80167c6:	d04d      	beq.n	8016864 <_printf_i+0x1b4>
 80167c8:	4616      	mov	r6, r2
 80167ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80167ce:	fb03 5711 	mls	r7, r3, r1, r5
 80167d2:	5dc7      	ldrb	r7, [r0, r7]
 80167d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80167d8:	462f      	mov	r7, r5
 80167da:	42bb      	cmp	r3, r7
 80167dc:	460d      	mov	r5, r1
 80167de:	d9f4      	bls.n	80167ca <_printf_i+0x11a>
 80167e0:	2b08      	cmp	r3, #8
 80167e2:	d10b      	bne.n	80167fc <_printf_i+0x14c>
 80167e4:	6823      	ldr	r3, [r4, #0]
 80167e6:	07df      	lsls	r7, r3, #31
 80167e8:	d508      	bpl.n	80167fc <_printf_i+0x14c>
 80167ea:	6923      	ldr	r3, [r4, #16]
 80167ec:	6861      	ldr	r1, [r4, #4]
 80167ee:	4299      	cmp	r1, r3
 80167f0:	bfde      	ittt	le
 80167f2:	2330      	movle	r3, #48	; 0x30
 80167f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80167f8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80167fc:	1b92      	subs	r2, r2, r6
 80167fe:	6122      	str	r2, [r4, #16]
 8016800:	f8cd a000 	str.w	sl, [sp]
 8016804:	464b      	mov	r3, r9
 8016806:	aa03      	add	r2, sp, #12
 8016808:	4621      	mov	r1, r4
 801680a:	4640      	mov	r0, r8
 801680c:	f7ff fee2 	bl	80165d4 <_printf_common>
 8016810:	3001      	adds	r0, #1
 8016812:	d14c      	bne.n	80168ae <_printf_i+0x1fe>
 8016814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016818:	b004      	add	sp, #16
 801681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801681e:	4835      	ldr	r0, [pc, #212]	; (80168f4 <_printf_i+0x244>)
 8016820:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016824:	6823      	ldr	r3, [r4, #0]
 8016826:	680e      	ldr	r6, [r1, #0]
 8016828:	061f      	lsls	r7, r3, #24
 801682a:	f856 5b04 	ldr.w	r5, [r6], #4
 801682e:	600e      	str	r6, [r1, #0]
 8016830:	d514      	bpl.n	801685c <_printf_i+0x1ac>
 8016832:	07d9      	lsls	r1, r3, #31
 8016834:	bf44      	itt	mi
 8016836:	f043 0320 	orrmi.w	r3, r3, #32
 801683a:	6023      	strmi	r3, [r4, #0]
 801683c:	b91d      	cbnz	r5, 8016846 <_printf_i+0x196>
 801683e:	6823      	ldr	r3, [r4, #0]
 8016840:	f023 0320 	bic.w	r3, r3, #32
 8016844:	6023      	str	r3, [r4, #0]
 8016846:	2310      	movs	r3, #16
 8016848:	e7b0      	b.n	80167ac <_printf_i+0xfc>
 801684a:	6823      	ldr	r3, [r4, #0]
 801684c:	f043 0320 	orr.w	r3, r3, #32
 8016850:	6023      	str	r3, [r4, #0]
 8016852:	2378      	movs	r3, #120	; 0x78
 8016854:	4828      	ldr	r0, [pc, #160]	; (80168f8 <_printf_i+0x248>)
 8016856:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801685a:	e7e3      	b.n	8016824 <_printf_i+0x174>
 801685c:	065e      	lsls	r6, r3, #25
 801685e:	bf48      	it	mi
 8016860:	b2ad      	uxthmi	r5, r5
 8016862:	e7e6      	b.n	8016832 <_printf_i+0x182>
 8016864:	4616      	mov	r6, r2
 8016866:	e7bb      	b.n	80167e0 <_printf_i+0x130>
 8016868:	680b      	ldr	r3, [r1, #0]
 801686a:	6826      	ldr	r6, [r4, #0]
 801686c:	6960      	ldr	r0, [r4, #20]
 801686e:	1d1d      	adds	r5, r3, #4
 8016870:	600d      	str	r5, [r1, #0]
 8016872:	0635      	lsls	r5, r6, #24
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	d501      	bpl.n	801687c <_printf_i+0x1cc>
 8016878:	6018      	str	r0, [r3, #0]
 801687a:	e002      	b.n	8016882 <_printf_i+0x1d2>
 801687c:	0671      	lsls	r1, r6, #25
 801687e:	d5fb      	bpl.n	8016878 <_printf_i+0x1c8>
 8016880:	8018      	strh	r0, [r3, #0]
 8016882:	2300      	movs	r3, #0
 8016884:	6123      	str	r3, [r4, #16]
 8016886:	4616      	mov	r6, r2
 8016888:	e7ba      	b.n	8016800 <_printf_i+0x150>
 801688a:	680b      	ldr	r3, [r1, #0]
 801688c:	1d1a      	adds	r2, r3, #4
 801688e:	600a      	str	r2, [r1, #0]
 8016890:	681e      	ldr	r6, [r3, #0]
 8016892:	6862      	ldr	r2, [r4, #4]
 8016894:	2100      	movs	r1, #0
 8016896:	4630      	mov	r0, r6
 8016898:	f7e9 fcb2 	bl	8000200 <memchr>
 801689c:	b108      	cbz	r0, 80168a2 <_printf_i+0x1f2>
 801689e:	1b80      	subs	r0, r0, r6
 80168a0:	6060      	str	r0, [r4, #4]
 80168a2:	6863      	ldr	r3, [r4, #4]
 80168a4:	6123      	str	r3, [r4, #16]
 80168a6:	2300      	movs	r3, #0
 80168a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80168ac:	e7a8      	b.n	8016800 <_printf_i+0x150>
 80168ae:	6923      	ldr	r3, [r4, #16]
 80168b0:	4632      	mov	r2, r6
 80168b2:	4649      	mov	r1, r9
 80168b4:	4640      	mov	r0, r8
 80168b6:	47d0      	blx	sl
 80168b8:	3001      	adds	r0, #1
 80168ba:	d0ab      	beq.n	8016814 <_printf_i+0x164>
 80168bc:	6823      	ldr	r3, [r4, #0]
 80168be:	079b      	lsls	r3, r3, #30
 80168c0:	d413      	bmi.n	80168ea <_printf_i+0x23a>
 80168c2:	68e0      	ldr	r0, [r4, #12]
 80168c4:	9b03      	ldr	r3, [sp, #12]
 80168c6:	4298      	cmp	r0, r3
 80168c8:	bfb8      	it	lt
 80168ca:	4618      	movlt	r0, r3
 80168cc:	e7a4      	b.n	8016818 <_printf_i+0x168>
 80168ce:	2301      	movs	r3, #1
 80168d0:	4632      	mov	r2, r6
 80168d2:	4649      	mov	r1, r9
 80168d4:	4640      	mov	r0, r8
 80168d6:	47d0      	blx	sl
 80168d8:	3001      	adds	r0, #1
 80168da:	d09b      	beq.n	8016814 <_printf_i+0x164>
 80168dc:	3501      	adds	r5, #1
 80168de:	68e3      	ldr	r3, [r4, #12]
 80168e0:	9903      	ldr	r1, [sp, #12]
 80168e2:	1a5b      	subs	r3, r3, r1
 80168e4:	42ab      	cmp	r3, r5
 80168e6:	dcf2      	bgt.n	80168ce <_printf_i+0x21e>
 80168e8:	e7eb      	b.n	80168c2 <_printf_i+0x212>
 80168ea:	2500      	movs	r5, #0
 80168ec:	f104 0619 	add.w	r6, r4, #25
 80168f0:	e7f5      	b.n	80168de <_printf_i+0x22e>
 80168f2:	bf00      	nop
 80168f4:	0802186d 	.word	0x0802186d
 80168f8:	0802187e 	.word	0x0802187e

080168fc <_sbrk_r>:
 80168fc:	b538      	push	{r3, r4, r5, lr}
 80168fe:	4d06      	ldr	r5, [pc, #24]	; (8016918 <_sbrk_r+0x1c>)
 8016900:	2300      	movs	r3, #0
 8016902:	4604      	mov	r4, r0
 8016904:	4608      	mov	r0, r1
 8016906:	602b      	str	r3, [r5, #0]
 8016908:	f7eb feb8 	bl	800267c <_sbrk>
 801690c:	1c43      	adds	r3, r0, #1
 801690e:	d102      	bne.n	8016916 <_sbrk_r+0x1a>
 8016910:	682b      	ldr	r3, [r5, #0]
 8016912:	b103      	cbz	r3, 8016916 <_sbrk_r+0x1a>
 8016914:	6023      	str	r3, [r4, #0]
 8016916:	bd38      	pop	{r3, r4, r5, pc}
 8016918:	2000e020 	.word	0x2000e020

0801691c <__sread>:
 801691c:	b510      	push	{r4, lr}
 801691e:	460c      	mov	r4, r1
 8016920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016924:	f000 f8ce 	bl	8016ac4 <_read_r>
 8016928:	2800      	cmp	r0, #0
 801692a:	bfab      	itete	ge
 801692c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801692e:	89a3      	ldrhlt	r3, [r4, #12]
 8016930:	181b      	addge	r3, r3, r0
 8016932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016936:	bfac      	ite	ge
 8016938:	6563      	strge	r3, [r4, #84]	; 0x54
 801693a:	81a3      	strhlt	r3, [r4, #12]
 801693c:	bd10      	pop	{r4, pc}

0801693e <__swrite>:
 801693e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016942:	461f      	mov	r7, r3
 8016944:	898b      	ldrh	r3, [r1, #12]
 8016946:	05db      	lsls	r3, r3, #23
 8016948:	4605      	mov	r5, r0
 801694a:	460c      	mov	r4, r1
 801694c:	4616      	mov	r6, r2
 801694e:	d505      	bpl.n	801695c <__swrite+0x1e>
 8016950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016954:	2302      	movs	r3, #2
 8016956:	2200      	movs	r2, #0
 8016958:	f000 f870 	bl	8016a3c <_lseek_r>
 801695c:	89a3      	ldrh	r3, [r4, #12]
 801695e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016966:	81a3      	strh	r3, [r4, #12]
 8016968:	4632      	mov	r2, r6
 801696a:	463b      	mov	r3, r7
 801696c:	4628      	mov	r0, r5
 801696e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016972:	f000 b817 	b.w	80169a4 <_write_r>

08016976 <__sseek>:
 8016976:	b510      	push	{r4, lr}
 8016978:	460c      	mov	r4, r1
 801697a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801697e:	f000 f85d 	bl	8016a3c <_lseek_r>
 8016982:	1c43      	adds	r3, r0, #1
 8016984:	89a3      	ldrh	r3, [r4, #12]
 8016986:	bf15      	itete	ne
 8016988:	6560      	strne	r0, [r4, #84]	; 0x54
 801698a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801698e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016992:	81a3      	strheq	r3, [r4, #12]
 8016994:	bf18      	it	ne
 8016996:	81a3      	strhne	r3, [r4, #12]
 8016998:	bd10      	pop	{r4, pc}

0801699a <__sclose>:
 801699a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801699e:	f000 b81b 	b.w	80169d8 <_close_r>
	...

080169a4 <_write_r>:
 80169a4:	b538      	push	{r3, r4, r5, lr}
 80169a6:	4d07      	ldr	r5, [pc, #28]	; (80169c4 <_write_r+0x20>)
 80169a8:	4604      	mov	r4, r0
 80169aa:	4608      	mov	r0, r1
 80169ac:	4611      	mov	r1, r2
 80169ae:	2200      	movs	r2, #0
 80169b0:	602a      	str	r2, [r5, #0]
 80169b2:	461a      	mov	r2, r3
 80169b4:	f7eb fa2c 	bl	8001e10 <_write>
 80169b8:	1c43      	adds	r3, r0, #1
 80169ba:	d102      	bne.n	80169c2 <_write_r+0x1e>
 80169bc:	682b      	ldr	r3, [r5, #0]
 80169be:	b103      	cbz	r3, 80169c2 <_write_r+0x1e>
 80169c0:	6023      	str	r3, [r4, #0]
 80169c2:	bd38      	pop	{r3, r4, r5, pc}
 80169c4:	2000e020 	.word	0x2000e020

080169c8 <abort>:
 80169c8:	b508      	push	{r3, lr}
 80169ca:	2006      	movs	r0, #6
 80169cc:	f000 f8b4 	bl	8016b38 <raise>
 80169d0:	2001      	movs	r0, #1
 80169d2:	f7eb fdf7 	bl	80025c4 <_exit>
	...

080169d8 <_close_r>:
 80169d8:	b538      	push	{r3, r4, r5, lr}
 80169da:	4d06      	ldr	r5, [pc, #24]	; (80169f4 <_close_r+0x1c>)
 80169dc:	2300      	movs	r3, #0
 80169de:	4604      	mov	r4, r0
 80169e0:	4608      	mov	r0, r1
 80169e2:	602b      	str	r3, [r5, #0]
 80169e4:	f7eb fe15 	bl	8002612 <_close>
 80169e8:	1c43      	adds	r3, r0, #1
 80169ea:	d102      	bne.n	80169f2 <_close_r+0x1a>
 80169ec:	682b      	ldr	r3, [r5, #0]
 80169ee:	b103      	cbz	r3, 80169f2 <_close_r+0x1a>
 80169f0:	6023      	str	r3, [r4, #0]
 80169f2:	bd38      	pop	{r3, r4, r5, pc}
 80169f4:	2000e020 	.word	0x2000e020

080169f8 <_fstat_r>:
 80169f8:	b538      	push	{r3, r4, r5, lr}
 80169fa:	4d07      	ldr	r5, [pc, #28]	; (8016a18 <_fstat_r+0x20>)
 80169fc:	2300      	movs	r3, #0
 80169fe:	4604      	mov	r4, r0
 8016a00:	4608      	mov	r0, r1
 8016a02:	4611      	mov	r1, r2
 8016a04:	602b      	str	r3, [r5, #0]
 8016a06:	f7eb fe10 	bl	800262a <_fstat>
 8016a0a:	1c43      	adds	r3, r0, #1
 8016a0c:	d102      	bne.n	8016a14 <_fstat_r+0x1c>
 8016a0e:	682b      	ldr	r3, [r5, #0]
 8016a10:	b103      	cbz	r3, 8016a14 <_fstat_r+0x1c>
 8016a12:	6023      	str	r3, [r4, #0]
 8016a14:	bd38      	pop	{r3, r4, r5, pc}
 8016a16:	bf00      	nop
 8016a18:	2000e020 	.word	0x2000e020

08016a1c <_isatty_r>:
 8016a1c:	b538      	push	{r3, r4, r5, lr}
 8016a1e:	4d06      	ldr	r5, [pc, #24]	; (8016a38 <_isatty_r+0x1c>)
 8016a20:	2300      	movs	r3, #0
 8016a22:	4604      	mov	r4, r0
 8016a24:	4608      	mov	r0, r1
 8016a26:	602b      	str	r3, [r5, #0]
 8016a28:	f7eb fe0f 	bl	800264a <_isatty>
 8016a2c:	1c43      	adds	r3, r0, #1
 8016a2e:	d102      	bne.n	8016a36 <_isatty_r+0x1a>
 8016a30:	682b      	ldr	r3, [r5, #0]
 8016a32:	b103      	cbz	r3, 8016a36 <_isatty_r+0x1a>
 8016a34:	6023      	str	r3, [r4, #0]
 8016a36:	bd38      	pop	{r3, r4, r5, pc}
 8016a38:	2000e020 	.word	0x2000e020

08016a3c <_lseek_r>:
 8016a3c:	b538      	push	{r3, r4, r5, lr}
 8016a3e:	4d07      	ldr	r5, [pc, #28]	; (8016a5c <_lseek_r+0x20>)
 8016a40:	4604      	mov	r4, r0
 8016a42:	4608      	mov	r0, r1
 8016a44:	4611      	mov	r1, r2
 8016a46:	2200      	movs	r2, #0
 8016a48:	602a      	str	r2, [r5, #0]
 8016a4a:	461a      	mov	r2, r3
 8016a4c:	f7eb fe08 	bl	8002660 <_lseek>
 8016a50:	1c43      	adds	r3, r0, #1
 8016a52:	d102      	bne.n	8016a5a <_lseek_r+0x1e>
 8016a54:	682b      	ldr	r3, [r5, #0]
 8016a56:	b103      	cbz	r3, 8016a5a <_lseek_r+0x1e>
 8016a58:	6023      	str	r3, [r4, #0]
 8016a5a:	bd38      	pop	{r3, r4, r5, pc}
 8016a5c:	2000e020 	.word	0x2000e020

08016a60 <__malloc_lock>:
 8016a60:	4801      	ldr	r0, [pc, #4]	; (8016a68 <__malloc_lock+0x8>)
 8016a62:	f7ff b9e9 	b.w	8015e38 <__retarget_lock_acquire_recursive>
 8016a66:	bf00      	nop
 8016a68:	2000e028 	.word	0x2000e028

08016a6c <__malloc_unlock>:
 8016a6c:	4801      	ldr	r0, [pc, #4]	; (8016a74 <__malloc_unlock+0x8>)
 8016a6e:	f7ff b9e4 	b.w	8015e3a <__retarget_lock_release_recursive>
 8016a72:	bf00      	nop
 8016a74:	2000e028 	.word	0x2000e028

08016a78 <_realloc_r>:
 8016a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a7a:	4607      	mov	r7, r0
 8016a7c:	4614      	mov	r4, r2
 8016a7e:	460e      	mov	r6, r1
 8016a80:	b921      	cbnz	r1, 8016a8c <_realloc_r+0x14>
 8016a82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016a86:	4611      	mov	r1, r2
 8016a88:	f7ff ba94 	b.w	8015fb4 <_malloc_r>
 8016a8c:	b922      	cbnz	r2, 8016a98 <_realloc_r+0x20>
 8016a8e:	f7ff fa41 	bl	8015f14 <_free_r>
 8016a92:	4625      	mov	r5, r4
 8016a94:	4628      	mov	r0, r5
 8016a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a98:	f000 f86a 	bl	8016b70 <_malloc_usable_size_r>
 8016a9c:	42a0      	cmp	r0, r4
 8016a9e:	d20f      	bcs.n	8016ac0 <_realloc_r+0x48>
 8016aa0:	4621      	mov	r1, r4
 8016aa2:	4638      	mov	r0, r7
 8016aa4:	f7ff fa86 	bl	8015fb4 <_malloc_r>
 8016aa8:	4605      	mov	r5, r0
 8016aaa:	2800      	cmp	r0, #0
 8016aac:	d0f2      	beq.n	8016a94 <_realloc_r+0x1c>
 8016aae:	4631      	mov	r1, r6
 8016ab0:	4622      	mov	r2, r4
 8016ab2:	f7fe fca7 	bl	8015404 <memcpy>
 8016ab6:	4631      	mov	r1, r6
 8016ab8:	4638      	mov	r0, r7
 8016aba:	f7ff fa2b 	bl	8015f14 <_free_r>
 8016abe:	e7e9      	b.n	8016a94 <_realloc_r+0x1c>
 8016ac0:	4635      	mov	r5, r6
 8016ac2:	e7e7      	b.n	8016a94 <_realloc_r+0x1c>

08016ac4 <_read_r>:
 8016ac4:	b538      	push	{r3, r4, r5, lr}
 8016ac6:	4d07      	ldr	r5, [pc, #28]	; (8016ae4 <_read_r+0x20>)
 8016ac8:	4604      	mov	r4, r0
 8016aca:	4608      	mov	r0, r1
 8016acc:	4611      	mov	r1, r2
 8016ace:	2200      	movs	r2, #0
 8016ad0:	602a      	str	r2, [r5, #0]
 8016ad2:	461a      	mov	r2, r3
 8016ad4:	f7eb fd80 	bl	80025d8 <_read>
 8016ad8:	1c43      	adds	r3, r0, #1
 8016ada:	d102      	bne.n	8016ae2 <_read_r+0x1e>
 8016adc:	682b      	ldr	r3, [r5, #0]
 8016ade:	b103      	cbz	r3, 8016ae2 <_read_r+0x1e>
 8016ae0:	6023      	str	r3, [r4, #0]
 8016ae2:	bd38      	pop	{r3, r4, r5, pc}
 8016ae4:	2000e020 	.word	0x2000e020

08016ae8 <_raise_r>:
 8016ae8:	291f      	cmp	r1, #31
 8016aea:	b538      	push	{r3, r4, r5, lr}
 8016aec:	4604      	mov	r4, r0
 8016aee:	460d      	mov	r5, r1
 8016af0:	d904      	bls.n	8016afc <_raise_r+0x14>
 8016af2:	2316      	movs	r3, #22
 8016af4:	6003      	str	r3, [r0, #0]
 8016af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016afa:	bd38      	pop	{r3, r4, r5, pc}
 8016afc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016afe:	b112      	cbz	r2, 8016b06 <_raise_r+0x1e>
 8016b00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016b04:	b94b      	cbnz	r3, 8016b1a <_raise_r+0x32>
 8016b06:	4620      	mov	r0, r4
 8016b08:	f000 f830 	bl	8016b6c <_getpid_r>
 8016b0c:	462a      	mov	r2, r5
 8016b0e:	4601      	mov	r1, r0
 8016b10:	4620      	mov	r0, r4
 8016b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b16:	f000 b817 	b.w	8016b48 <_kill_r>
 8016b1a:	2b01      	cmp	r3, #1
 8016b1c:	d00a      	beq.n	8016b34 <_raise_r+0x4c>
 8016b1e:	1c59      	adds	r1, r3, #1
 8016b20:	d103      	bne.n	8016b2a <_raise_r+0x42>
 8016b22:	2316      	movs	r3, #22
 8016b24:	6003      	str	r3, [r0, #0]
 8016b26:	2001      	movs	r0, #1
 8016b28:	e7e7      	b.n	8016afa <_raise_r+0x12>
 8016b2a:	2400      	movs	r4, #0
 8016b2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016b30:	4628      	mov	r0, r5
 8016b32:	4798      	blx	r3
 8016b34:	2000      	movs	r0, #0
 8016b36:	e7e0      	b.n	8016afa <_raise_r+0x12>

08016b38 <raise>:
 8016b38:	4b02      	ldr	r3, [pc, #8]	; (8016b44 <raise+0xc>)
 8016b3a:	4601      	mov	r1, r0
 8016b3c:	6818      	ldr	r0, [r3, #0]
 8016b3e:	f7ff bfd3 	b.w	8016ae8 <_raise_r>
 8016b42:	bf00      	nop
 8016b44:	200004bc 	.word	0x200004bc

08016b48 <_kill_r>:
 8016b48:	b538      	push	{r3, r4, r5, lr}
 8016b4a:	4d07      	ldr	r5, [pc, #28]	; (8016b68 <_kill_r+0x20>)
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	4604      	mov	r4, r0
 8016b50:	4608      	mov	r0, r1
 8016b52:	4611      	mov	r1, r2
 8016b54:	602b      	str	r3, [r5, #0]
 8016b56:	f7eb fd23 	bl	80025a0 <_kill>
 8016b5a:	1c43      	adds	r3, r0, #1
 8016b5c:	d102      	bne.n	8016b64 <_kill_r+0x1c>
 8016b5e:	682b      	ldr	r3, [r5, #0]
 8016b60:	b103      	cbz	r3, 8016b64 <_kill_r+0x1c>
 8016b62:	6023      	str	r3, [r4, #0]
 8016b64:	bd38      	pop	{r3, r4, r5, pc}
 8016b66:	bf00      	nop
 8016b68:	2000e020 	.word	0x2000e020

08016b6c <_getpid_r>:
 8016b6c:	f7eb bd10 	b.w	8002590 <_getpid>

08016b70 <_malloc_usable_size_r>:
 8016b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b74:	1f18      	subs	r0, r3, #4
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	bfbc      	itt	lt
 8016b7a:	580b      	ldrlt	r3, [r1, r0]
 8016b7c:	18c0      	addlt	r0, r0, r3
 8016b7e:	4770      	bx	lr

08016b80 <_init>:
 8016b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b82:	bf00      	nop
 8016b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b86:	bc08      	pop	{r3}
 8016b88:	469e      	mov	lr, r3
 8016b8a:	4770      	bx	lr

08016b8c <_fini>:
 8016b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b8e:	bf00      	nop
 8016b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b92:	bc08      	pop	{r3}
 8016b94:	469e      	mov	lr, r3
 8016b96:	4770      	bx	lr
