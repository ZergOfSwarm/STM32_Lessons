
LAN_zagotovka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aecc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017868  0801b060  0801b060  0002b060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080328c8  080328c8  0005079c  2**0
                  CONTENTS
  4 .ARM          00000008  080328c8  080328c8  000428c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080328d0  080328d0  0005079c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080328d0  080328d0  000428d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080328d4  080328d4  000428d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000079c  20000000  080328d8  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0005079c  2**0
                  CONTENTS
 10 .bss          0000cef0  2000079c  2000079c  0005079c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000d68c  2000d68c  0005079c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0005079c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a0da  00000000  00000000  000507cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067f4  00000000  00000000  0008a8a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001aa0  00000000  00000000  000910a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a18  00000000  00000000  00092b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f38e  00000000  00000000  00094558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ce5c  00000000  00000000  000c38e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6fc9  00000000  00000000  000f0742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001d770b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084d4  00000000  00000000  001d7760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000079c 	.word	0x2000079c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b044 	.word	0x0801b044

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200007a0 	.word	0x200007a0
 80001cc:	0801b044 	.word	0x0801b044

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c1c:	f000 b9a4 	b.w	8000f68 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f83c 	bl	8000ca4 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2lz>:
 8000c38:	b538      	push	{r3, r4, r5, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	4604      	mov	r4, r0
 8000c40:	460d      	mov	r5, r1
 8000c42:	f7ff ff5b 	bl	8000afc <__aeabi_dcmplt>
 8000c46:	b928      	cbnz	r0, 8000c54 <__aeabi_d2lz+0x1c>
 8000c48:	4620      	mov	r0, r4
 8000c4a:	4629      	mov	r1, r5
 8000c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c50:	f000 b80a 	b.w	8000c68 <__aeabi_d2ulz>
 8000c54:	4620      	mov	r0, r4
 8000c56:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c5a:	f000 f805 	bl	8000c68 <__aeabi_d2ulz>
 8000c5e:	4240      	negs	r0, r0
 8000c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c64:	bd38      	pop	{r3, r4, r5, pc}
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2ulz>:
 8000c68:	b5d0      	push	{r4, r6, r7, lr}
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__aeabi_d2ulz+0x34>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4606      	mov	r6, r0
 8000c70:	460f      	mov	r7, r1
 8000c72:	f7ff fcd1 	bl	8000618 <__aeabi_dmul>
 8000c76:	f7ff ffa7 	bl	8000bc8 <__aeabi_d2uiz>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	f7ff fc52 	bl	8000524 <__aeabi_ui2d>
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <__aeabi_d2ulz+0x38>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f7ff fcc8 	bl	8000618 <__aeabi_dmul>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	4630      	mov	r0, r6
 8000c8e:	4639      	mov	r1, r7
 8000c90:	f7ff fb0a 	bl	80002a8 <__aeabi_dsub>
 8000c94:	f7ff ff98 	bl	8000bc8 <__aeabi_d2uiz>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c9c:	3df00000 	.word	0x3df00000
 8000ca0:	41f00000 	.word	0x41f00000

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	4604      	mov	r4, r0
 8000cac:	468c      	mov	ip, r1
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f040 8083 	bne.w	8000dba <__udivmoddi4+0x116>
 8000cb4:	428a      	cmp	r2, r1
 8000cb6:	4617      	mov	r7, r2
 8000cb8:	d947      	bls.n	8000d4a <__udivmoddi4+0xa6>
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	b142      	cbz	r2, 8000cd2 <__udivmoddi4+0x2e>
 8000cc0:	f1c2 0020 	rsb	r0, r2, #32
 8000cc4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	4097      	lsls	r7, r2
 8000ccc:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd6:	0c23      	lsrs	r3, r4, #16
 8000cd8:	fbbc f6f8 	udiv	r6, ip, r8
 8000cdc:	fa1f fe87 	uxth.w	lr, r7
 8000ce0:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb06 f10e 	mul.w	r1, r6, lr
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x60>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cf6:	f080 8119 	bcs.w	8000f2c <__udivmoddi4+0x288>
 8000cfa:	4299      	cmp	r1, r3
 8000cfc:	f240 8116 	bls.w	8000f2c <__udivmoddi4+0x288>
 8000d00:	3e02      	subs	r6, #2
 8000d02:	443b      	add	r3, r7
 8000d04:	1a5b      	subs	r3, r3, r1
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d909      	bls.n	8000d30 <__udivmoddi4+0x8c>
 8000d1c:	193c      	adds	r4, r7, r4
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d22:	f080 8105 	bcs.w	8000f30 <__udivmoddi4+0x28c>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f240 8102 	bls.w	8000f30 <__udivmoddi4+0x28c>
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	443c      	add	r4, r7
 8000d30:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d34:	eba4 040e 	sub.w	r4, r4, lr
 8000d38:	2600      	movs	r6, #0
 8000d3a:	b11d      	cbz	r5, 8000d44 <__udivmoddi4+0xa0>
 8000d3c:	40d4      	lsrs	r4, r2
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e9c5 4300 	strd	r4, r3, [r5]
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xaa>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f282 	clz	r2, r2
 8000d52:	2a00      	cmp	r2, #0
 8000d54:	d150      	bne.n	8000df8 <__udivmoddi4+0x154>
 8000d56:	1bcb      	subs	r3, r1, r7
 8000d58:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d5c:	fa1f f887 	uxth.w	r8, r7
 8000d60:	2601      	movs	r6, #1
 8000d62:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d66:	0c21      	lsrs	r1, r4, #16
 8000d68:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d6c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d70:	fb08 f30c 	mul.w	r3, r8, ip
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xe4>
 8000d78:	1879      	adds	r1, r7, r1
 8000d7a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0xe2>
 8000d80:	428b      	cmp	r3, r1
 8000d82:	f200 80e9 	bhi.w	8000f58 <__udivmoddi4+0x2b4>
 8000d86:	4684      	mov	ip, r0
 8000d88:	1ac9      	subs	r1, r1, r3
 8000d8a:	b2a3      	uxth	r3, r4
 8000d8c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d90:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d94:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d98:	fb08 f800 	mul.w	r8, r8, r0
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x10c>
 8000da0:	193c      	adds	r4, r7, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x10a>
 8000da8:	45a0      	cmp	r8, r4
 8000daa:	f200 80d9 	bhi.w	8000f60 <__udivmoddi4+0x2bc>
 8000dae:	4618      	mov	r0, r3
 8000db0:	eba4 0408 	sub.w	r4, r4, r8
 8000db4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000db8:	e7bf      	b.n	8000d3a <__udivmoddi4+0x96>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x12e>
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	f000 80b1 	beq.w	8000f26 <__udivmoddi4+0x282>
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dca:	4630      	mov	r0, r6
 8000dcc:	4631      	mov	r1, r6
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	fab3 f683 	clz	r6, r3
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d14a      	bne.n	8000e70 <__udivmoddi4+0x1cc>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0x140>
 8000dde:	4282      	cmp	r2, r0
 8000de0:	f200 80b8 	bhi.w	8000f54 <__udivmoddi4+0x2b0>
 8000de4:	1a84      	subs	r4, r0, r2
 8000de6:	eb61 0103 	sbc.w	r1, r1, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	468c      	mov	ip, r1
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	d0a8      	beq.n	8000d44 <__udivmoddi4+0xa0>
 8000df2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f603 	lsr.w	r6, r0, r3
 8000e00:	4097      	lsls	r7, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0a:	40d9      	lsrs	r1, r3
 8000e0c:	4330      	orrs	r0, r6
 8000e0e:	0c03      	lsrs	r3, r0, #16
 8000e10:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e14:	fa1f f887 	uxth.w	r8, r7
 8000e18:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e20:	fb06 f108 	mul.w	r1, r6, r8
 8000e24:	4299      	cmp	r1, r3
 8000e26:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2a:	d909      	bls.n	8000e40 <__udivmoddi4+0x19c>
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e32:	f080 808d 	bcs.w	8000f50 <__udivmoddi4+0x2ac>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 808a 	bls.w	8000f50 <__udivmoddi4+0x2ac>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	443b      	add	r3, r7
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b281      	uxth	r1, r0
 8000e44:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e48:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e50:	fb00 f308 	mul.w	r3, r0, r8
 8000e54:	428b      	cmp	r3, r1
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x1c4>
 8000e58:	1879      	adds	r1, r7, r1
 8000e5a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5e:	d273      	bcs.n	8000f48 <__udivmoddi4+0x2a4>
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d971      	bls.n	8000f48 <__udivmoddi4+0x2a4>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4439      	add	r1, r7
 8000e68:	1acb      	subs	r3, r1, r3
 8000e6a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e6e:	e778      	b.n	8000d62 <__udivmoddi4+0xbe>
 8000e70:	f1c6 0c20 	rsb	ip, r6, #32
 8000e74:	fa03 f406 	lsl.w	r4, r3, r6
 8000e78:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e7c:	431c      	orrs	r4, r3
 8000e7e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e82:	fa01 f306 	lsl.w	r3, r1, r6
 8000e86:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	0c3b      	lsrs	r3, r7, #16
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fa1f f884 	uxth.w	r8, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ea6:	458a      	cmp	sl, r1
 8000ea8:	fa02 f206 	lsl.w	r2, r2, r6
 8000eac:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x220>
 8000eb2:	1861      	adds	r1, r4, r1
 8000eb4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000eb8:	d248      	bcs.n	8000f4c <__udivmoddi4+0x2a8>
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	d946      	bls.n	8000f4c <__udivmoddi4+0x2a8>
 8000ebe:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec2:	4421      	add	r1, r4
 8000ec4:	eba1 010a 	sub.w	r1, r1, sl
 8000ec8:	b2bf      	uxth	r7, r7
 8000eca:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ece:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ed6:	fb00 f808 	mul.w	r8, r0, r8
 8000eda:	45b8      	cmp	r8, r7
 8000edc:	d907      	bls.n	8000eee <__udivmoddi4+0x24a>
 8000ede:	19e7      	adds	r7, r4, r7
 8000ee0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ee4:	d22e      	bcs.n	8000f44 <__udivmoddi4+0x2a0>
 8000ee6:	45b8      	cmp	r8, r7
 8000ee8:	d92c      	bls.n	8000f44 <__udivmoddi4+0x2a0>
 8000eea:	3802      	subs	r0, #2
 8000eec:	4427      	add	r7, r4
 8000eee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef2:	eba7 0708 	sub.w	r7, r7, r8
 8000ef6:	fba0 8902 	umull	r8, r9, r0, r2
 8000efa:	454f      	cmp	r7, r9
 8000efc:	46c6      	mov	lr, r8
 8000efe:	4649      	mov	r1, r9
 8000f00:	d31a      	bcc.n	8000f38 <__udivmoddi4+0x294>
 8000f02:	d017      	beq.n	8000f34 <__udivmoddi4+0x290>
 8000f04:	b15d      	cbz	r5, 8000f1e <__udivmoddi4+0x27a>
 8000f06:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f0e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f12:	40f2      	lsrs	r2, r6
 8000f14:	ea4c 0202 	orr.w	r2, ip, r2
 8000f18:	40f7      	lsrs	r7, r6
 8000f1a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f1e:	2600      	movs	r6, #0
 8000f20:	4631      	mov	r1, r6
 8000f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f26:	462e      	mov	r6, r5
 8000f28:	4628      	mov	r0, r5
 8000f2a:	e70b      	b.n	8000d44 <__udivmoddi4+0xa0>
 8000f2c:	4606      	mov	r6, r0
 8000f2e:	e6e9      	b.n	8000d04 <__udivmoddi4+0x60>
 8000f30:	4618      	mov	r0, r3
 8000f32:	e6fd      	b.n	8000d30 <__udivmoddi4+0x8c>
 8000f34:	4543      	cmp	r3, r8
 8000f36:	d2e5      	bcs.n	8000f04 <__udivmoddi4+0x260>
 8000f38:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f40:	3801      	subs	r0, #1
 8000f42:	e7df      	b.n	8000f04 <__udivmoddi4+0x260>
 8000f44:	4608      	mov	r0, r1
 8000f46:	e7d2      	b.n	8000eee <__udivmoddi4+0x24a>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	e78d      	b.n	8000e68 <__udivmoddi4+0x1c4>
 8000f4c:	4681      	mov	r9, r0
 8000f4e:	e7b9      	b.n	8000ec4 <__udivmoddi4+0x220>
 8000f50:	4666      	mov	r6, ip
 8000f52:	e775      	b.n	8000e40 <__udivmoddi4+0x19c>
 8000f54:	4630      	mov	r0, r6
 8000f56:	e74a      	b.n	8000dee <__udivmoddi4+0x14a>
 8000f58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f5c:	4439      	add	r1, r7
 8000f5e:	e713      	b.n	8000d88 <__udivmoddi4+0xe4>
 8000f60:	3802      	subs	r0, #2
 8000f62:	443c      	add	r4, r7
 8000f64:	e724      	b.n	8000db0 <__udivmoddi4+0x10c>
 8000f66:	bf00      	nop

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <ssi_handler>:

//printf("Longitude: %.20f\n\r", Settings.lon_de);
//printf("Latitude: %.20f\n\r",Settings.lat_de);

uint16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 8000f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6e:	b097      	sub	sp, #92	; 0x5c
 8000f70:	af0c      	add	r7, sp, #48	; 0x30
 8000f72:	6278      	str	r0, [r7, #36]	; 0x24
 8000f74:	6239      	str	r1, [r7, #32]
 8000f76:	61fa      	str	r2, [r7, #28]
 8000f78:	837b      	strh	r3, [r7, #26]
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	2b28      	cmp	r3, #40	; 0x28
 8000f7e:	f201 8445 	bhi.w	800280c <ssi_handler+0x18a0>
 8000f82:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <ssi_handler+0x1c>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	0800102d 	.word	0x0800102d
 8000f8c:	080018d5 	.word	0x080018d5
 8000f90:	08001bc5 	.word	0x08001bc5
 8000f94:	0800280d 	.word	0x0800280d
 8000f98:	08001bdb 	.word	0x08001bdb
 8000f9c:	08001bf7 	.word	0x08001bf7
 8000fa0:	08001c13 	.word	0x08001c13
 8000fa4:	08001c2f 	.word	0x08001c2f
 8000fa8:	08001c47 	.word	0x08001c47
 8000fac:	08001c5f 	.word	0x08001c5f
 8000fb0:	08001c77 	.word	0x08001c77
 8000fb4:	08001c8f 	.word	0x08001c8f
 8000fb8:	08001ca7 	.word	0x08001ca7
 8000fbc:	08001cc5 	.word	0x08001cc5
 8000fc0:	08001ce3 	.word	0x08001ce3
 8000fc4:	08001d01 	.word	0x08001d01
 8000fc8:	08001d1f 	.word	0x08001d1f
 8000fcc:	08001d3d 	.word	0x08001d3d
 8000fd0:	08001d5b 	.word	0x08001d5b
 8000fd4:	08001d79 	.word	0x08001d79
 8000fd8:	08001d97 	.word	0x08001d97
 8000fdc:	08001db5 	.word	0x08001db5
 8000fe0:	08001e21 	.word	0x08001e21
 8000fe4:	08001e3f 	.word	0x08001e3f
 8000fe8:	08001e5d 	.word	0x08001e5d
 8000fec:	08001e7b 	.word	0x08001e7b
 8000ff0:	08001e99 	.word	0x08001e99
 8000ff4:	08001eb7 	.word	0x08001eb7
 8000ff8:	08001ed5 	.word	0x08001ed5
 8000ffc:	08001f05 	.word	0x08001f05
 8001000:	08001f35 	.word	0x08001f35
 8001004:	08001f53 	.word	0x08001f53
 8001008:	08001f6b 	.word	0x08001f6b
 800100c:	08001f9b 	.word	0x08001f9b
 8001010:	08001fcd 	.word	0x08001fcd
 8001014:	080024e9 	.word	0x080024e9
 8001018:	080026b9 	.word	0x080026b9
 800101c:	080026f9 	.word	0x080026f9
 8001020:	08002773 	.word	0x08002773
 8001024:	080027b1 	.word	0x080027b1
 8001028:	080027df 	.word	0x080027df
	//printf("%d \n", jsongo);
	switch (iIndex) {
	case 0:
#if LWIP_HTTPD_SSI_MULTIPART

		if (variable == numpin) {
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <ssi_handler+0xe0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b3a      	cmp	r3, #58	; 0x3a
 8001032:	d104      	bne.n	800103e <ssi_handler+0xd2>
			//default:
			variable = 0;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <ssi_handler+0xe0>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
			//return strlen(pcInsert);
			break;
 800103a:	f001 bbe8 	b.w	800280e <ssi_handler+0x18a2>
		} else {
			// json pin to pin (to buttoms json)
			if (jsongo == 1) {
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <ssi_handler+0xe4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	f040 8084 	bne.w	8001150 <ssi_handler+0x1e4>
				while (variable3 <= numpintopin - 1) {
 8001048:	e076      	b.n	8001138 <ssi_handler+0x1cc>
 800104a:	bf00      	nop
 800104c:	200007c0 	.word	0x200007c0
 8001050:	200007c4 	.word	0x200007c4
					if (variable3 == 0) {
 8001054:	4bab      	ldr	r3, [pc, #684]	; (8001304 <ssi_handler+0x398>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10b      	bne.n	8001074 <ssi_handler+0x108>
						strcat(listaction, "{");
 800105c:	48aa      	ldr	r0, [pc, #680]	; (8001308 <ssi_handler+0x39c>)
 800105e:	f7ff f8c1 	bl	80001e4 <strlen>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4ba8      	ldr	r3, [pc, #672]	; (8001308 <ssi_handler+0x39c>)
 8001068:	4413      	add	r3, r2
 800106a:	49a8      	ldr	r1, [pc, #672]	; (800130c <ssi_handler+0x3a0>)
 800106c:	461a      	mov	r2, r3
 800106e:	460b      	mov	r3, r1
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	8013      	strh	r3, [r2, #0]
					}
					if (variable == TO[variable3].idin
 8001074:	4ba3      	ldr	r3, [pc, #652]	; (8001304 <ssi_handler+0x398>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	49a5      	ldr	r1, [pc, #660]	; (8001310 <ssi_handler+0x3a4>)
 800107a:	4613      	mov	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	4413      	add	r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4ba3      	ldr	r3, [pc, #652]	; (8001314 <ssi_handler+0x3a8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	429a      	cmp	r2, r3
 800108c:	d125      	bne.n	80010da <ssi_handler+0x16e>
							&& TO[variable3].flag == 1) {
 800108e:	4b9d      	ldr	r3, [pc, #628]	; (8001304 <ssi_handler+0x398>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	499f      	ldr	r1, [pc, #636]	; (8001310 <ssi_handler+0x3a4>)
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	440b      	add	r3, r1
 800109e:	3308      	adds	r3, #8
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d119      	bne.n	80010da <ssi_handler+0x16e>
						//sprintf(name3, "\"%s\":[%d,%d],",tp[TO[variable3].idout].pins, TO[variable3].idout, variable3);
						sprintf(name3, "\"%s\":%d,",
								tp[TO[variable3].idout].pins, variable3);
 80010a6:	4b97      	ldr	r3, [pc, #604]	; (8001304 <ssi_handler+0x398>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4999      	ldr	r1, [pc, #612]	; (8001310 <ssi_handler+0x3a4>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	3304      	adds	r3, #4
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	4613      	mov	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4a95      	ldr	r2, [pc, #596]	; (8001318 <ssi_handler+0x3ac>)
 80010c4:	441a      	add	r2, r3
						sprintf(name3, "\"%s\":%d,",
 80010c6:	4b8f      	ldr	r3, [pc, #572]	; (8001304 <ssi_handler+0x398>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4994      	ldr	r1, [pc, #592]	; (800131c <ssi_handler+0x3b0>)
 80010cc:	4894      	ldr	r0, [pc, #592]	; (8001320 <ssi_handler+0x3b4>)
 80010ce:	f016 f97b 	bl	80173c8 <siprintf>
						strcat(listaction, name3);// {"PA5":0,"PA6":1, в поле "Relay connection"
 80010d2:	4993      	ldr	r1, [pc, #588]	; (8001320 <ssi_handler+0x3b4>)
 80010d4:	488c      	ldr	r0, [pc, #560]	; (8001308 <ssi_handler+0x39c>)
 80010d6:	f016 f997 	bl	8017408 <strcat>
//					int code = (listaction[strlen(listaction) - 1]);
//					//printf("tmp_x %d\r\n",tmp_x ); // 123 -	{ левая фигурная скобка
//					if (variable3 == numpintopin - 1 && strcmp((char*)code, "123") > 0) {
//						listaction[strlen(listaction) - 1] = '\0';
//					}
					if (variable3 == numpintopin - 1 && strcmp(listaction[strlen(listaction) - 1], (char*)'{') > 0) {
 80010da:	4b8a      	ldr	r3, [pc, #552]	; (8001304 <ssi_handler+0x398>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b45      	cmp	r3, #69	; 0x45
 80010e0:	d115      	bne.n	800110e <ssi_handler+0x1a2>
 80010e2:	4889      	ldr	r0, [pc, #548]	; (8001308 <ssi_handler+0x39c>)
 80010e4:	f7ff f87e 	bl	80001e4 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	3b01      	subs	r3, #1
 80010ec:	4a86      	ldr	r2, [pc, #536]	; (8001308 <ssi_handler+0x39c>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	217b      	movs	r1, #123	; 0x7b
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff f86c 	bl	80001d0 <strcmp>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dd07      	ble.n	800110e <ssi_handler+0x1a2>
						listaction[strlen(listaction) - 1] = '\0';
 80010fe:	4882      	ldr	r0, [pc, #520]	; (8001308 <ssi_handler+0x39c>)
 8001100:	f7ff f870 	bl	80001e4 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	3b01      	subs	r3, #1
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <ssi_handler+0x39c>)
 800110a:	2100      	movs	r1, #0
 800110c:	54d1      	strb	r1, [r2, r3]
					}
					if (variable3 == numpintopin - 1) {
 800110e:	4b7d      	ldr	r3, [pc, #500]	; (8001304 <ssi_handler+0x398>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2b45      	cmp	r3, #69	; 0x45
 8001114:	d10b      	bne.n	800112e <ssi_handler+0x1c2>
						strcat(listaction, "}");
 8001116:	487c      	ldr	r0, [pc, #496]	; (8001308 <ssi_handler+0x39c>)
 8001118:	f7ff f864 	bl	80001e4 <strlen>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b79      	ldr	r3, [pc, #484]	; (8001308 <ssi_handler+0x39c>)
 8001122:	4413      	add	r3, r2
 8001124:	497f      	ldr	r1, [pc, #508]	; (8001324 <ssi_handler+0x3b8>)
 8001126:	461a      	mov	r2, r3
 8001128:	460b      	mov	r3, r1
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	8013      	strh	r3, [r2, #0]
					}
					variable3++;
 800112e:	4b75      	ldr	r3, [pc, #468]	; (8001304 <ssi_handler+0x398>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3301      	adds	r3, #1
 8001134:	4a73      	ldr	r2, [pc, #460]	; (8001304 <ssi_handler+0x398>)
 8001136:	6013      	str	r3, [r2, #0]
				while (variable3 <= numpintopin - 1) {
 8001138:	4b72      	ldr	r3, [pc, #456]	; (8001304 <ssi_handler+0x398>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b45      	cmp	r3, #69	; 0x45
 800113e:	dd89      	ble.n	8001054 <ssi_handler+0xe8>
				}
				memset(name3, '\0', sizeof(name3));
 8001140:	220a      	movs	r2, #10
 8001142:	2100      	movs	r1, #0
 8001144:	4876      	ldr	r0, [pc, #472]	; (8001320 <ssi_handler+0x3b4>)
 8001146:	f015 fbcb 	bl	80168e0 <memset>
				variable3 = 0;
 800114a:	4b6e      	ldr	r3, [pc, #440]	; (8001304 <ssi_handler+0x398>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
			}

			if (variable == 0) {
 8001150:	4b70      	ldr	r3, [pc, #448]	; (8001314 <ssi_handler+0x3a8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	f040 8145 	bne.w	80013e4 <ssi_handler+0x478>
				if (jsongo == 1) {
 800115a:	4b73      	ldr	r3, [pc, #460]	; (8001328 <ssi_handler+0x3bc>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d17e      	bne.n	8001260 <ssi_handler+0x2f4>
					// buttoms json
					sprintf(pcInsert,
 8001162:	4b6c      	ldr	r3, [pc, #432]	; (8001314 <ssi_handler+0x3a8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a71      	ldr	r2, [pc, #452]	; (800132c <ssi_handler+0x3c0>)
 8001168:	2168      	movs	r1, #104	; 0x68
 800116a:	fb01 f303 	mul.w	r3, r1, r3
 800116e:	4413      	add	r3, r2
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	4b67      	ldr	r3, [pc, #412]	; (8001314 <ssi_handler+0x3a8>)
 8001176:	6819      	ldr	r1, [r3, #0]
 8001178:	6139      	str	r1, [r7, #16]
							"[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 800117a:	4b66      	ldr	r3, [pc, #408]	; (8001314 <ssi_handler+0x3a8>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4a64      	ldr	r2, [pc, #400]	; (8001318 <ssi_handler+0x3ac>)
 8001188:	1899      	adds	r1, r3, r2
 800118a:	60f9      	str	r1, [r7, #12]
							T[variable].ptype, T[variable].binter,
 800118c:	4b61      	ldr	r3, [pc, #388]	; (8001314 <ssi_handler+0x3a8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2268      	movs	r2, #104	; 0x68
 8001192:	fb02 f303 	mul.w	r3, r2, r3
 8001196:	3318      	adds	r3, #24
 8001198:	4a64      	ldr	r2, [pc, #400]	; (800132c <ssi_handler+0x3c0>)
 800119a:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 800119c:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <ssi_handler+0x3a8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a62      	ldr	r2, [pc, #392]	; (800132c <ssi_handler+0x3c0>)
 80011a2:	2168      	movs	r1, #104	; 0x68
 80011a4:	fb01 f303 	mul.w	r3, r1, r3
 80011a8:	4413      	add	r3, r2
 80011aa:	332c      	adds	r3, #44	; 0x2c
 80011ac:	681d      	ldr	r5, [r3, #0]
 80011ae:	4b59      	ldr	r3, [pc, #356]	; (8001314 <ssi_handler+0x3a8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a5e      	ldr	r2, [pc, #376]	; (800132c <ssi_handler+0x3c0>)
 80011b4:	2168      	movs	r1, #104	; 0x68
 80011b6:	fb01 f303 	mul.w	r3, r1, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	3330      	adds	r3, #48	; 0x30
 80011be:	681e      	ldr	r6, [r3, #0]
 80011c0:	4b54      	ldr	r3, [pc, #336]	; (8001314 <ssi_handler+0x3a8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a59      	ldr	r2, [pc, #356]	; (800132c <ssi_handler+0x3c0>)
 80011c6:	2168      	movs	r1, #104	; 0x68
 80011c8:	fb01 f303 	mul.w	r3, r1, r3
 80011cc:	4413      	add	r3, r2
 80011ce:	3334      	adds	r3, #52	; 0x34
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	60ba      	str	r2, [r7, #8]
 80011d4:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <ssi_handler+0x3a8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a54      	ldr	r2, [pc, #336]	; (800132c <ssi_handler+0x3c0>)
 80011da:	2168      	movs	r1, #104	; 0x68
 80011dc:	fb01 f303 	mul.w	r3, r1, r3
 80011e0:	4413      	add	r3, r2
 80011e2:	3338      	adds	r3, #56	; 0x38
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	6079      	str	r1, [r7, #4]
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <ssi_handler+0x3a8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <ssi_handler+0x3c0>)
 80011ee:	2168      	movs	r1, #104	; 0x68
 80011f0:	fb01 f303 	mul.w	r3, r1, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	333c      	adds	r3, #60	; 0x3c
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4b45      	ldr	r3, [pc, #276]	; (8001314 <ssi_handler+0x3a8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a4a      	ldr	r2, [pc, #296]	; (800132c <ssi_handler+0x3c0>)
 8001202:	2168      	movs	r1, #104	; 0x68
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	3340      	adds	r3, #64	; 0x40
 800120c:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat,
							T[variable].rinter, T[variable].dcinter,
							T[variable].pclick, listaction, T[variable].info,
 800120e:	4b41      	ldr	r3, [pc, #260]	; (8001314 <ssi_handler+0x3a8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2268      	movs	r2, #104	; 0x68
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	3340      	adds	r3, #64	; 0x40
 800121a:	4a44      	ldr	r2, [pc, #272]	; (800132c <ssi_handler+0x3c0>)
 800121c:	4413      	add	r3, r2
 800121e:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <ssi_handler+0x3a8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4841      	ldr	r0, [pc, #260]	; (800132c <ssi_handler+0x3c0>)
 8001226:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800122a:	fb0c f303 	mul.w	r3, ip, r3
 800122e:	4403      	add	r3, r0
 8001230:	3364      	adds	r3, #100	; 0x64
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	930a      	str	r3, [sp, #40]	; 0x28
 8001236:	9209      	str	r2, [sp, #36]	; 0x24
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <ssi_handler+0x39c>)
 800123a:	9308      	str	r3, [sp, #32]
 800123c:	9107      	str	r1, [sp, #28]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	9306      	str	r3, [sp, #24]
 8001242:	6879      	ldr	r1, [r7, #4]
 8001244:	9105      	str	r1, [sp, #20]
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	9204      	str	r2, [sp, #16]
 800124a:	9603      	str	r6, [sp, #12]
 800124c:	9502      	str	r5, [sp, #8]
 800124e:	9401      	str	r4, [sp, #4]
 8001250:	68f9      	ldr	r1, [r7, #12]
 8001252:	9100      	str	r1, [sp, #0]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4935      	ldr	r1, [pc, #212]	; (8001330 <ssi_handler+0x3c4>)
 800125a:	6a38      	ldr	r0, [r7, #32]
 800125c:	f016 f8b4 	bl	80173c8 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 2) {
 8001260:	4b31      	ldr	r3, [pc, #196]	; (8001328 <ssi_handler+0x3bc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b02      	cmp	r3, #2
 8001266:	f040 8091 	bne.w	800138c <ssi_handler+0x420>
					// relay json
					sprintf(pcInsert,
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <ssi_handler+0x3a8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a2f      	ldr	r2, [pc, #188]	; (800132c <ssi_handler+0x3c0>)
 8001270:	2168      	movs	r1, #104	; 0x68
 8001272:	fb01 f303 	mul.w	r3, r1, r3
 8001276:	4413      	add	r3, r2
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <ssi_handler+0x3a8>)
 800127e:	6819      	ldr	r1, [r3, #0]
 8001280:	6139      	str	r1, [r7, #16]
							"[{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <ssi_handler+0x3a8>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4a22      	ldr	r2, [pc, #136]	; (8001318 <ssi_handler+0x3ac>)
 8001290:	4413      	add	r3, r2
							T[variable].ptype, T[variable].pwm, T[variable].on,
 8001292:	4a20      	ldr	r2, [pc, #128]	; (8001314 <ssi_handler+0x3a8>)
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	2168      	movs	r1, #104	; 0x68
 8001298:	fb01 f202 	mul.w	r2, r1, r2
 800129c:	3218      	adds	r2, #24
 800129e:	4923      	ldr	r1, [pc, #140]	; (800132c <ssi_handler+0x3c0>)
 80012a0:	440a      	add	r2, r1
					sprintf(pcInsert,
 80012a2:	491c      	ldr	r1, [pc, #112]	; (8001314 <ssi_handler+0x3a8>)
 80012a4:	6809      	ldr	r1, [r1, #0]
 80012a6:	4821      	ldr	r0, [pc, #132]	; (800132c <ssi_handler+0x3c0>)
 80012a8:	2468      	movs	r4, #104	; 0x68
 80012aa:	fb04 f101 	mul.w	r1, r4, r1
 80012ae:	4401      	add	r1, r0
 80012b0:	3104      	adds	r1, #4
 80012b2:	6809      	ldr	r1, [r1, #0]
 80012b4:	4817      	ldr	r0, [pc, #92]	; (8001314 <ssi_handler+0x3a8>)
 80012b6:	6800      	ldr	r0, [r0, #0]
 80012b8:	4c1c      	ldr	r4, [pc, #112]	; (800132c <ssi_handler+0x3c0>)
 80012ba:	2568      	movs	r5, #104	; 0x68
 80012bc:	fb05 f000 	mul.w	r0, r5, r0
 80012c0:	4420      	add	r0, r4
 80012c2:	3008      	adds	r0, #8
 80012c4:	6800      	ldr	r0, [r0, #0]
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	4c12      	ldr	r4, [pc, #72]	; (8001314 <ssi_handler+0x3a8>)
 80012ca:	6824      	ldr	r4, [r4, #0]
 80012cc:	4d17      	ldr	r5, [pc, #92]	; (800132c <ssi_handler+0x3c0>)
 80012ce:	2668      	movs	r6, #104	; 0x68
 80012d0:	fb06 f404 	mul.w	r4, r6, r4
 80012d4:	442c      	add	r4, r5
 80012d6:	340c      	adds	r4, #12
 80012d8:	6820      	ldr	r0, [r4, #0]
 80012da:	60b8      	str	r0, [r7, #8]
 80012dc:	4d0d      	ldr	r5, [pc, #52]	; (8001314 <ssi_handler+0x3a8>)
 80012de:	682d      	ldr	r5, [r5, #0]
 80012e0:	4e12      	ldr	r6, [pc, #72]	; (800132c <ssi_handler+0x3c0>)
 80012e2:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80012e6:	fb0c f505 	mul.w	r5, ip, r5
 80012ea:	4435      	add	r5, r6
 80012ec:	3510      	adds	r5, #16
 80012ee:	682d      	ldr	r5, [r5, #0]
 80012f0:	4e08      	ldr	r6, [pc, #32]	; (8001314 <ssi_handler+0x3a8>)
 80012f2:	6836      	ldr	r6, [r6, #0]
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <ssi_handler+0x3c0>)
 80012f6:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80012fa:	fb0c f606 	mul.w	r6, ip, r6
 80012fe:	4406      	add	r6, r0
 8001300:	3614      	adds	r6, #20
 8001302:	e017      	b.n	8001334 <ssi_handler+0x3c8>
 8001304:	200007bc 	.word	0x200007bc
 8001308:	20006880 	.word	0x20006880
 800130c:	0801b208 	.word	0x0801b208
 8001310:	20002498 	.word	0x20002498
 8001314:	200007c0 	.word	0x200007c0
 8001318:	20000008 	.word	0x20000008
 800131c:	0801b20c 	.word	0x0801b20c
 8001320:	200027e0 	.word	0x200027e0
 8001324:	0801b218 	.word	0x0801b218
 8001328:	200007c4 	.word	0x200007c4
 800132c:	200027ec 	.word	0x200027ec
 8001330:	0801b21c 	.word	0x0801b21c
 8001334:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue,
							T[variable].ponr, T[variable].info,
 8001336:	4825      	ldr	r0, [pc, #148]	; (80013cc <ssi_handler+0x460>)
 8001338:	6800      	ldr	r0, [r0, #0]
 800133a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800133e:	fb0c fc00 	mul.w	ip, ip, r0
 8001342:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001346:	4822      	ldr	r0, [pc, #136]	; (80013d0 <ssi_handler+0x464>)
 8001348:	4484      	add	ip, r0
 800134a:	f10c 0004 	add.w	r0, ip, #4
 800134e:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 8001350:	481e      	ldr	r0, [pc, #120]	; (80013cc <ssi_handler+0x460>)
 8001352:	6800      	ldr	r0, [r0, #0]
 8001354:	4c1e      	ldr	r4, [pc, #120]	; (80013d0 <ssi_handler+0x464>)
 8001356:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800135a:	fb0c fc00 	mul.w	ip, ip, r0
 800135e:	44a4      	add	ip, r4
 8001360:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001364:	f8dc 0000 	ldr.w	r0, [ip]
 8001368:	9008      	str	r0, [sp, #32]
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	9007      	str	r0, [sp, #28]
 800136e:	9606      	str	r6, [sp, #24]
 8001370:	9505      	str	r5, [sp, #20]
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	9004      	str	r0, [sp, #16]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	9003      	str	r0, [sp, #12]
 800137a:	9102      	str	r1, [sp, #8]
 800137c:	9201      	str	r2, [sp, #4]
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	4913      	ldr	r1, [pc, #76]	; (80013d4 <ssi_handler+0x468>)
 8001386:	6a38      	ldr	r0, [r7, #32]
 8001388:	f016 f81e 	bl	80173c8 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 3) {
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <ssi_handler+0x46c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b03      	cmp	r3, #3
 8001392:	f040 8277 	bne.w	8001884 <ssi_handler+0x918>
					// select json
					sprintf(pcInsert,
 8001396:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <ssi_handler+0x460>)
 8001398:	6819      	ldr	r1, [r3, #0]
							"[{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
							variable, tp[variable].pins, T[variable].topin);
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <ssi_handler+0x460>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <ssi_handler+0x470>)
 80013a8:	441a      	add	r2, r3
					sprintf(pcInsert,
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <ssi_handler+0x460>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <ssi_handler+0x464>)
 80013b0:	2468      	movs	r4, #104	; 0x68
 80013b2:	fb04 f303 	mul.w	r3, r4, r3
 80013b6:	4403      	add	r3, r0
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	460a      	mov	r2, r1
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <ssi_handler+0x474>)
 80013c2:	6a38      	ldr	r0, [r7, #32]
 80013c4:	f016 f800 	bl	80173c8 <siprintf>
 80013c8:	e25c      	b.n	8001884 <ssi_handler+0x918>
 80013ca:	bf00      	nop
 80013cc:	200007c0 	.word	0x200007c0
 80013d0:	200027ec 	.word	0x200027ec
 80013d4:	0801b2b8 	.word	0x0801b2b8
 80013d8:	200007c4 	.word	0x200007c4
 80013dc:	20000008 	.word	0x20000008
 80013e0:	0801b334 	.word	0x0801b334

				}
			} else if (variable == numpin - 1) {
 80013e4:	4b91      	ldr	r3, [pc, #580]	; (800162c <ssi_handler+0x6c0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b39      	cmp	r3, #57	; 0x39
 80013ea:	f040 812f 	bne.w	800164c <ssi_handler+0x6e0>
				if (jsongo == 1) {
 80013ee:	4b90      	ldr	r3, [pc, #576]	; (8001630 <ssi_handler+0x6c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d17e      	bne.n	80014f4 <ssi_handler+0x588>
					// buttoms json
					sprintf(pcInsert,
 80013f6:	4b8d      	ldr	r3, [pc, #564]	; (800162c <ssi_handler+0x6c0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a8e      	ldr	r2, [pc, #568]	; (8001634 <ssi_handler+0x6c8>)
 80013fc:	2168      	movs	r1, #104	; 0x68
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	4413      	add	r3, r2
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	4b88      	ldr	r3, [pc, #544]	; (800162c <ssi_handler+0x6c0>)
 800140a:	6819      	ldr	r1, [r3, #0]
 800140c:	6139      	str	r1, [r7, #16]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d}]",
							T[variable].topin, variable, tp[variable].pins,
 800140e:	4b87      	ldr	r3, [pc, #540]	; (800162c <ssi_handler+0x6c0>)
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	4613      	mov	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4a87      	ldr	r2, [pc, #540]	; (8001638 <ssi_handler+0x6cc>)
 800141c:	1899      	adds	r1, r3, r2
 800141e:	60f9      	str	r1, [r7, #12]
							T[variable].ptype, T[variable].binter,
 8001420:	4b82      	ldr	r3, [pc, #520]	; (800162c <ssi_handler+0x6c0>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2268      	movs	r2, #104	; 0x68
 8001426:	fb02 f303 	mul.w	r3, r2, r3
 800142a:	3318      	adds	r3, #24
 800142c:	4a81      	ldr	r2, [pc, #516]	; (8001634 <ssi_handler+0x6c8>)
 800142e:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 8001430:	4b7e      	ldr	r3, [pc, #504]	; (800162c <ssi_handler+0x6c0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a7f      	ldr	r2, [pc, #508]	; (8001634 <ssi_handler+0x6c8>)
 8001436:	2168      	movs	r1, #104	; 0x68
 8001438:	fb01 f303 	mul.w	r3, r1, r3
 800143c:	4413      	add	r3, r2
 800143e:	332c      	adds	r3, #44	; 0x2c
 8001440:	681d      	ldr	r5, [r3, #0]
 8001442:	4b7a      	ldr	r3, [pc, #488]	; (800162c <ssi_handler+0x6c0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7b      	ldr	r2, [pc, #492]	; (8001634 <ssi_handler+0x6c8>)
 8001448:	2168      	movs	r1, #104	; 0x68
 800144a:	fb01 f303 	mul.w	r3, r1, r3
 800144e:	4413      	add	r3, r2
 8001450:	3330      	adds	r3, #48	; 0x30
 8001452:	681e      	ldr	r6, [r3, #0]
 8001454:	4b75      	ldr	r3, [pc, #468]	; (800162c <ssi_handler+0x6c0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a76      	ldr	r2, [pc, #472]	; (8001634 <ssi_handler+0x6c8>)
 800145a:	2168      	movs	r1, #104	; 0x68
 800145c:	fb01 f303 	mul.w	r3, r1, r3
 8001460:	4413      	add	r3, r2
 8001462:	3334      	adds	r3, #52	; 0x34
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	60ba      	str	r2, [r7, #8]
 8001468:	4b70      	ldr	r3, [pc, #448]	; (800162c <ssi_handler+0x6c0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a71      	ldr	r2, [pc, #452]	; (8001634 <ssi_handler+0x6c8>)
 800146e:	2168      	movs	r1, #104	; 0x68
 8001470:	fb01 f303 	mul.w	r3, r1, r3
 8001474:	4413      	add	r3, r2
 8001476:	3338      	adds	r3, #56	; 0x38
 8001478:	6819      	ldr	r1, [r3, #0]
 800147a:	6079      	str	r1, [r7, #4]
 800147c:	4b6b      	ldr	r3, [pc, #428]	; (800162c <ssi_handler+0x6c0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a6c      	ldr	r2, [pc, #432]	; (8001634 <ssi_handler+0x6c8>)
 8001482:	2168      	movs	r1, #104	; 0x68
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	4413      	add	r3, r2
 800148a:	333c      	adds	r3, #60	; 0x3c
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	4b66      	ldr	r3, [pc, #408]	; (800162c <ssi_handler+0x6c0>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a67      	ldr	r2, [pc, #412]	; (8001634 <ssi_handler+0x6c8>)
 8001496:	2168      	movs	r1, #104	; 0x68
 8001498:	fb01 f303 	mul.w	r3, r1, r3
 800149c:	4413      	add	r3, r2
 800149e:	3340      	adds	r3, #64	; 0x40
 80014a0:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat,
							T[variable].rinter, T[variable].dcinter,
							T[variable].pclick, listaction, T[variable].info,
 80014a2:	4b62      	ldr	r3, [pc, #392]	; (800162c <ssi_handler+0x6c0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2268      	movs	r2, #104	; 0x68
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	3340      	adds	r3, #64	; 0x40
 80014ae:	4a61      	ldr	r2, [pc, #388]	; (8001634 <ssi_handler+0x6c8>)
 80014b0:	4413      	add	r3, r2
 80014b2:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 80014b4:	4b5d      	ldr	r3, [pc, #372]	; (800162c <ssi_handler+0x6c0>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	485e      	ldr	r0, [pc, #376]	; (8001634 <ssi_handler+0x6c8>)
 80014ba:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80014be:	fb0c f303 	mul.w	r3, ip, r3
 80014c2:	4403      	add	r3, r0
 80014c4:	3364      	adds	r3, #100	; 0x64
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	930a      	str	r3, [sp, #40]	; 0x28
 80014ca:	9209      	str	r2, [sp, #36]	; 0x24
 80014cc:	4b5b      	ldr	r3, [pc, #364]	; (800163c <ssi_handler+0x6d0>)
 80014ce:	9308      	str	r3, [sp, #32]
 80014d0:	9107      	str	r1, [sp, #28]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	9306      	str	r3, [sp, #24]
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	9105      	str	r1, [sp, #20]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	9204      	str	r2, [sp, #16]
 80014de:	9603      	str	r6, [sp, #12]
 80014e0:	9502      	str	r5, [sp, #8]
 80014e2:	9401      	str	r4, [sp, #4]
 80014e4:	68f9      	ldr	r1, [r7, #12]
 80014e6:	9100      	str	r1, [sp, #0]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4954      	ldr	r1, [pc, #336]	; (8001640 <ssi_handler+0x6d4>)
 80014ee:	6a38      	ldr	r0, [r7, #32]
 80014f0:	f015 ff6a 	bl	80173c8 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 2) {
 80014f4:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <ssi_handler+0x6c4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d177      	bne.n	80015ec <ssi_handler+0x680>
					// relay json
					sprintf(pcInsert,
 80014fc:	4b4b      	ldr	r3, [pc, #300]	; (800162c <ssi_handler+0x6c0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a4c      	ldr	r2, [pc, #304]	; (8001634 <ssi_handler+0x6c8>)
 8001502:	2168      	movs	r1, #104	; 0x68
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	4413      	add	r3, r2
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	4b47      	ldr	r3, [pc, #284]	; (800162c <ssi_handler+0x6c0>)
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	6139      	str	r1, [r7, #16]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}]",
							T[variable].topin, variable, tp[variable].pins,
 8001514:	4b45      	ldr	r3, [pc, #276]	; (800162c <ssi_handler+0x6c0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4a45      	ldr	r2, [pc, #276]	; (8001638 <ssi_handler+0x6cc>)
 8001522:	4413      	add	r3, r2
							T[variable].ptype, T[variable].pwm, T[variable].on,
 8001524:	4a41      	ldr	r2, [pc, #260]	; (800162c <ssi_handler+0x6c0>)
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	2168      	movs	r1, #104	; 0x68
 800152a:	fb01 f202 	mul.w	r2, r1, r2
 800152e:	3218      	adds	r2, #24
 8001530:	4940      	ldr	r1, [pc, #256]	; (8001634 <ssi_handler+0x6c8>)
 8001532:	440a      	add	r2, r1
					sprintf(pcInsert,
 8001534:	493d      	ldr	r1, [pc, #244]	; (800162c <ssi_handler+0x6c0>)
 8001536:	6809      	ldr	r1, [r1, #0]
 8001538:	483e      	ldr	r0, [pc, #248]	; (8001634 <ssi_handler+0x6c8>)
 800153a:	2468      	movs	r4, #104	; 0x68
 800153c:	fb04 f101 	mul.w	r1, r4, r1
 8001540:	4401      	add	r1, r0
 8001542:	3104      	adds	r1, #4
 8001544:	6809      	ldr	r1, [r1, #0]
 8001546:	4839      	ldr	r0, [pc, #228]	; (800162c <ssi_handler+0x6c0>)
 8001548:	6800      	ldr	r0, [r0, #0]
 800154a:	4c3a      	ldr	r4, [pc, #232]	; (8001634 <ssi_handler+0x6c8>)
 800154c:	2568      	movs	r5, #104	; 0x68
 800154e:	fb05 f000 	mul.w	r0, r5, r0
 8001552:	4420      	add	r0, r4
 8001554:	3008      	adds	r0, #8
 8001556:	6800      	ldr	r0, [r0, #0]
 8001558:	60f8      	str	r0, [r7, #12]
 800155a:	4c34      	ldr	r4, [pc, #208]	; (800162c <ssi_handler+0x6c0>)
 800155c:	6824      	ldr	r4, [r4, #0]
 800155e:	4d35      	ldr	r5, [pc, #212]	; (8001634 <ssi_handler+0x6c8>)
 8001560:	2668      	movs	r6, #104	; 0x68
 8001562:	fb06 f404 	mul.w	r4, r6, r4
 8001566:	442c      	add	r4, r5
 8001568:	340c      	adds	r4, #12
 800156a:	6820      	ldr	r0, [r4, #0]
 800156c:	60b8      	str	r0, [r7, #8]
 800156e:	4d2f      	ldr	r5, [pc, #188]	; (800162c <ssi_handler+0x6c0>)
 8001570:	682d      	ldr	r5, [r5, #0]
 8001572:	4e30      	ldr	r6, [pc, #192]	; (8001634 <ssi_handler+0x6c8>)
 8001574:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001578:	fb0c f505 	mul.w	r5, ip, r5
 800157c:	4435      	add	r5, r6
 800157e:	3510      	adds	r5, #16
 8001580:	682d      	ldr	r5, [r5, #0]
 8001582:	4e2a      	ldr	r6, [pc, #168]	; (800162c <ssi_handler+0x6c0>)
 8001584:	6836      	ldr	r6, [r6, #0]
 8001586:	482b      	ldr	r0, [pc, #172]	; (8001634 <ssi_handler+0x6c8>)
 8001588:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800158c:	fb0c f606 	mul.w	r6, ip, r6
 8001590:	4406      	add	r6, r0
 8001592:	3614      	adds	r6, #20
 8001594:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue,
							T[variable].ponr, T[variable].info,
 8001596:	4825      	ldr	r0, [pc, #148]	; (800162c <ssi_handler+0x6c0>)
 8001598:	6800      	ldr	r0, [r0, #0]
 800159a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800159e:	fb0c fc00 	mul.w	ip, ip, r0
 80015a2:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80015a6:	4823      	ldr	r0, [pc, #140]	; (8001634 <ssi_handler+0x6c8>)
 80015a8:	4484      	add	ip, r0
 80015aa:	f10c 0004 	add.w	r0, ip, #4
 80015ae:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 80015b0:	481e      	ldr	r0, [pc, #120]	; (800162c <ssi_handler+0x6c0>)
 80015b2:	6800      	ldr	r0, [r0, #0]
 80015b4:	4c1f      	ldr	r4, [pc, #124]	; (8001634 <ssi_handler+0x6c8>)
 80015b6:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80015ba:	fb0c fc00 	mul.w	ip, ip, r0
 80015be:	44a4      	add	ip, r4
 80015c0:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 80015c4:	f8dc 0000 	ldr.w	r0, [ip]
 80015c8:	9008      	str	r0, [sp, #32]
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	9007      	str	r0, [sp, #28]
 80015ce:	9606      	str	r6, [sp, #24]
 80015d0:	9505      	str	r5, [sp, #20]
 80015d2:	68b8      	ldr	r0, [r7, #8]
 80015d4:	9004      	str	r0, [sp, #16]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	9003      	str	r0, [sp, #12]
 80015da:	9102      	str	r1, [sp, #8]
 80015dc:	9201      	str	r2, [sp, #4]
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4917      	ldr	r1, [pc, #92]	; (8001644 <ssi_handler+0x6d8>)
 80015e6:	6a38      	ldr	r0, [r7, #32]
 80015e8:	f015 feee 	bl	80173c8 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 3) {
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <ssi_handler+0x6c4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	f040 8147 	bne.w	8001884 <ssi_handler+0x918>
					// select json
					sprintf(pcInsert,
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <ssi_handler+0x6c0>)
 80015f8:	6819      	ldr	r1, [r3, #0]
							"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d}]",
							variable, tp[variable].pins, T[variable].topin);
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <ssi_handler+0x6c0>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4a0c      	ldr	r2, [pc, #48]	; (8001638 <ssi_handler+0x6cc>)
 8001608:	441a      	add	r2, r3
					sprintf(pcInsert,
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <ssi_handler+0x6c0>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <ssi_handler+0x6c8>)
 8001610:	2468      	movs	r4, #104	; 0x68
 8001612:	fb04 f303 	mul.w	r3, r4, r3
 8001616:	4403      	add	r3, r0
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	460a      	mov	r2, r1
 8001620:	4909      	ldr	r1, [pc, #36]	; (8001648 <ssi_handler+0x6dc>)
 8001622:	6a38      	ldr	r0, [r7, #32]
 8001624:	f015 fed0 	bl	80173c8 <siprintf>
 8001628:	e12c      	b.n	8001884 <ssi_handler+0x918>
 800162a:	bf00      	nop
 800162c:	200007c0 	.word	0x200007c0
 8001630:	200007c4 	.word	0x200007c4
 8001634:	200027ec 	.word	0x200027ec
 8001638:	20000008 	.word	0x20000008
 800163c:	20006880 	.word	0x20006880
 8001640:	0801b358 	.word	0x0801b358
 8001644:	0801b3f4 	.word	0x0801b3f4
 8001648:	0801b470 	.word	0x0801b470
				}
			} else {
				if (jsongo == 1) {
 800164c:	4b99      	ldr	r3, [pc, #612]	; (80018b4 <ssi_handler+0x948>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d17e      	bne.n	8001752 <ssi_handler+0x7e6>
					// buttoms json
					sprintf(pcInsert,
 8001654:	4b98      	ldr	r3, [pc, #608]	; (80018b8 <ssi_handler+0x94c>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a98      	ldr	r2, [pc, #608]	; (80018bc <ssi_handler+0x950>)
 800165a:	2168      	movs	r1, #104	; 0x68
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	4b94      	ldr	r3, [pc, #592]	; (80018b8 <ssi_handler+0x94c>)
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	6139      	str	r1, [r7, #16]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 800166c:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <ssi_handler+0x94c>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4a91      	ldr	r2, [pc, #580]	; (80018c0 <ssi_handler+0x954>)
 800167a:	1899      	adds	r1, r3, r2
 800167c:	60f9      	str	r1, [r7, #12]
							T[variable].ptype, T[variable].binter,
 800167e:	4b8e      	ldr	r3, [pc, #568]	; (80018b8 <ssi_handler+0x94c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2268      	movs	r2, #104	; 0x68
 8001684:	fb02 f303 	mul.w	r3, r2, r3
 8001688:	3318      	adds	r3, #24
 800168a:	4a8c      	ldr	r2, [pc, #560]	; (80018bc <ssi_handler+0x950>)
 800168c:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 800168e:	4b8a      	ldr	r3, [pc, #552]	; (80018b8 <ssi_handler+0x94c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a8a      	ldr	r2, [pc, #552]	; (80018bc <ssi_handler+0x950>)
 8001694:	2168      	movs	r1, #104	; 0x68
 8001696:	fb01 f303 	mul.w	r3, r1, r3
 800169a:	4413      	add	r3, r2
 800169c:	332c      	adds	r3, #44	; 0x2c
 800169e:	681d      	ldr	r5, [r3, #0]
 80016a0:	4b85      	ldr	r3, [pc, #532]	; (80018b8 <ssi_handler+0x94c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a85      	ldr	r2, [pc, #532]	; (80018bc <ssi_handler+0x950>)
 80016a6:	2168      	movs	r1, #104	; 0x68
 80016a8:	fb01 f303 	mul.w	r3, r1, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	3330      	adds	r3, #48	; 0x30
 80016b0:	681e      	ldr	r6, [r3, #0]
 80016b2:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <ssi_handler+0x94c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a81      	ldr	r2, [pc, #516]	; (80018bc <ssi_handler+0x950>)
 80016b8:	2168      	movs	r1, #104	; 0x68
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	4413      	add	r3, r2
 80016c0:	3334      	adds	r3, #52	; 0x34
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	60ba      	str	r2, [r7, #8]
 80016c6:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <ssi_handler+0x94c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a7c      	ldr	r2, [pc, #496]	; (80018bc <ssi_handler+0x950>)
 80016cc:	2168      	movs	r1, #104	; 0x68
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	4413      	add	r3, r2
 80016d4:	3338      	adds	r3, #56	; 0x38
 80016d6:	6819      	ldr	r1, [r3, #0]
 80016d8:	6079      	str	r1, [r7, #4]
 80016da:	4b77      	ldr	r3, [pc, #476]	; (80018b8 <ssi_handler+0x94c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a77      	ldr	r2, [pc, #476]	; (80018bc <ssi_handler+0x950>)
 80016e0:	2168      	movs	r1, #104	; 0x68
 80016e2:	fb01 f303 	mul.w	r3, r1, r3
 80016e6:	4413      	add	r3, r2
 80016e8:	333c      	adds	r3, #60	; 0x3c
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b72      	ldr	r3, [pc, #456]	; (80018b8 <ssi_handler+0x94c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a72      	ldr	r2, [pc, #456]	; (80018bc <ssi_handler+0x950>)
 80016f4:	2168      	movs	r1, #104	; 0x68
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	3340      	adds	r3, #64	; 0x40
 80016fe:	6819      	ldr	r1, [r3, #0]
							T[variable].hinter, T[variable].repeat,
							T[variable].rinter, T[variable].dcinter,
							T[variable].pclick, listaction, T[variable].info,
 8001700:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <ssi_handler+0x94c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2268      	movs	r2, #104	; 0x68
 8001706:	fb02 f303 	mul.w	r3, r2, r3
 800170a:	3340      	adds	r3, #64	; 0x40
 800170c:	4a6b      	ldr	r2, [pc, #428]	; (80018bc <ssi_handler+0x950>)
 800170e:	4413      	add	r3, r2
 8001710:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 8001712:	4b69      	ldr	r3, [pc, #420]	; (80018b8 <ssi_handler+0x94c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4869      	ldr	r0, [pc, #420]	; (80018bc <ssi_handler+0x950>)
 8001718:	f04f 0c68 	mov.w	ip, #104	; 0x68
 800171c:	fb0c f303 	mul.w	r3, ip, r3
 8001720:	4403      	add	r3, r0
 8001722:	3364      	adds	r3, #100	; 0x64
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	930a      	str	r3, [sp, #40]	; 0x28
 8001728:	9209      	str	r2, [sp, #36]	; 0x24
 800172a:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <ssi_handler+0x958>)
 800172c:	9308      	str	r3, [sp, #32]
 800172e:	9107      	str	r1, [sp, #28]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	9306      	str	r3, [sp, #24]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	9105      	str	r1, [sp, #20]
 8001738:	68ba      	ldr	r2, [r7, #8]
 800173a:	9204      	str	r2, [sp, #16]
 800173c:	9603      	str	r6, [sp, #12]
 800173e:	9502      	str	r5, [sp, #8]
 8001740:	9401      	str	r4, [sp, #4]
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	9100      	str	r1, [sp, #0]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	495f      	ldr	r1, [pc, #380]	; (80018c8 <ssi_handler+0x95c>)
 800174c:	6a38      	ldr	r0, [r7, #32]
 800174e:	f015 fe3b 	bl	80173c8 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 2) {
 8001752:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <ssi_handler+0x948>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d177      	bne.n	800184a <ssi_handler+0x8de>
					// relay json
					sprintf(pcInsert,
 800175a:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <ssi_handler+0x94c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a57      	ldr	r2, [pc, #348]	; (80018bc <ssi_handler+0x950>)
 8001760:	2168      	movs	r1, #104	; 0x68
 8001762:	fb01 f303 	mul.w	r3, r1, r3
 8001766:	4413      	add	r3, r2
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	4b52      	ldr	r3, [pc, #328]	; (80018b8 <ssi_handler+0x94c>)
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	6139      	str	r1, [r7, #16]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},",
							T[variable].topin, variable, tp[variable].pins,
 8001772:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <ssi_handler+0x94c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4a50      	ldr	r2, [pc, #320]	; (80018c0 <ssi_handler+0x954>)
 8001780:	4413      	add	r3, r2
							T[variable].ptype, T[variable].pwm, T[variable].on,
 8001782:	4a4d      	ldr	r2, [pc, #308]	; (80018b8 <ssi_handler+0x94c>)
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	2168      	movs	r1, #104	; 0x68
 8001788:	fb01 f202 	mul.w	r2, r1, r2
 800178c:	3218      	adds	r2, #24
 800178e:	494b      	ldr	r1, [pc, #300]	; (80018bc <ssi_handler+0x950>)
 8001790:	440a      	add	r2, r1
					sprintf(pcInsert,
 8001792:	4949      	ldr	r1, [pc, #292]	; (80018b8 <ssi_handler+0x94c>)
 8001794:	6809      	ldr	r1, [r1, #0]
 8001796:	4849      	ldr	r0, [pc, #292]	; (80018bc <ssi_handler+0x950>)
 8001798:	2468      	movs	r4, #104	; 0x68
 800179a:	fb04 f101 	mul.w	r1, r4, r1
 800179e:	4401      	add	r1, r0
 80017a0:	3104      	adds	r1, #4
 80017a2:	6809      	ldr	r1, [r1, #0]
 80017a4:	4844      	ldr	r0, [pc, #272]	; (80018b8 <ssi_handler+0x94c>)
 80017a6:	6800      	ldr	r0, [r0, #0]
 80017a8:	4c44      	ldr	r4, [pc, #272]	; (80018bc <ssi_handler+0x950>)
 80017aa:	2568      	movs	r5, #104	; 0x68
 80017ac:	fb05 f000 	mul.w	r0, r5, r0
 80017b0:	4420      	add	r0, r4
 80017b2:	3008      	adds	r0, #8
 80017b4:	6800      	ldr	r0, [r0, #0]
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	4c3f      	ldr	r4, [pc, #252]	; (80018b8 <ssi_handler+0x94c>)
 80017ba:	6824      	ldr	r4, [r4, #0]
 80017bc:	4d3f      	ldr	r5, [pc, #252]	; (80018bc <ssi_handler+0x950>)
 80017be:	2668      	movs	r6, #104	; 0x68
 80017c0:	fb06 f404 	mul.w	r4, r6, r4
 80017c4:	442c      	add	r4, r5
 80017c6:	340c      	adds	r4, #12
 80017c8:	6820      	ldr	r0, [r4, #0]
 80017ca:	60b8      	str	r0, [r7, #8]
 80017cc:	4d3a      	ldr	r5, [pc, #232]	; (80018b8 <ssi_handler+0x94c>)
 80017ce:	682d      	ldr	r5, [r5, #0]
 80017d0:	4e3a      	ldr	r6, [pc, #232]	; (80018bc <ssi_handler+0x950>)
 80017d2:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80017d6:	fb0c f505 	mul.w	r5, ip, r5
 80017da:	4435      	add	r5, r6
 80017dc:	3510      	adds	r5, #16
 80017de:	682d      	ldr	r5, [r5, #0]
 80017e0:	4e35      	ldr	r6, [pc, #212]	; (80018b8 <ssi_handler+0x94c>)
 80017e2:	6836      	ldr	r6, [r6, #0]
 80017e4:	4835      	ldr	r0, [pc, #212]	; (80018bc <ssi_handler+0x950>)
 80017e6:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80017ea:	fb0c f606 	mul.w	r6, ip, r6
 80017ee:	4406      	add	r6, r0
 80017f0:	3614      	adds	r6, #20
 80017f2:	6836      	ldr	r6, [r6, #0]
							T[variable].istate, T[variable].dvalue,
							T[variable].ponr, T[variable].info,
 80017f4:	4830      	ldr	r0, [pc, #192]	; (80018b8 <ssi_handler+0x94c>)
 80017f6:	6800      	ldr	r0, [r0, #0]
 80017f8:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80017fc:	fb0c fc00 	mul.w	ip, ip, r0
 8001800:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001804:	482d      	ldr	r0, [pc, #180]	; (80018bc <ssi_handler+0x950>)
 8001806:	4484      	add	ip, r0
 8001808:	f10c 0004 	add.w	r0, ip, #4
 800180c:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 800180e:	482a      	ldr	r0, [pc, #168]	; (80018b8 <ssi_handler+0x94c>)
 8001810:	6800      	ldr	r0, [r0, #0]
 8001812:	4c2a      	ldr	r4, [pc, #168]	; (80018bc <ssi_handler+0x950>)
 8001814:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001818:	fb0c fc00 	mul.w	ip, ip, r0
 800181c:	44a4      	add	ip, r4
 800181e:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001822:	f8dc 0000 	ldr.w	r0, [ip]
 8001826:	9008      	str	r0, [sp, #32]
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	9007      	str	r0, [sp, #28]
 800182c:	9606      	str	r6, [sp, #24]
 800182e:	9505      	str	r5, [sp, #20]
 8001830:	68b8      	ldr	r0, [r7, #8]
 8001832:	9004      	str	r0, [sp, #16]
 8001834:	68f8      	ldr	r0, [r7, #12]
 8001836:	9003      	str	r0, [sp, #12]
 8001838:	9102      	str	r1, [sp, #8]
 800183a:	9201      	str	r2, [sp, #4]
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	4922      	ldr	r1, [pc, #136]	; (80018cc <ssi_handler+0x960>)
 8001844:	6a38      	ldr	r0, [r7, #32]
 8001846:	f015 fdbf 	bl	80173c8 <siprintf>
							T[variable].onoff);
				}
				if (jsongo == 3) {
 800184a:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <ssi_handler+0x948>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d118      	bne.n	8001884 <ssi_handler+0x918>
					// select json
					sprintf(pcInsert,
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <ssi_handler+0x94c>)
 8001854:	6819      	ldr	r1, [r3, #0]
							"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
							variable, tp[variable].pins, T[variable].topin);
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <ssi_handler+0x94c>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4613      	mov	r3, r2
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4a17      	ldr	r2, [pc, #92]	; (80018c0 <ssi_handler+0x954>)
 8001864:	441a      	add	r2, r3
					sprintf(pcInsert,
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <ssi_handler+0x94c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4814      	ldr	r0, [pc, #80]	; (80018bc <ssi_handler+0x950>)
 800186c:	2468      	movs	r4, #104	; 0x68
 800186e:	fb04 f303 	mul.w	r3, r4, r3
 8001872:	4403      	add	r3, r0
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	460a      	mov	r2, r1
 800187c:	4914      	ldr	r1, [pc, #80]	; (80018d0 <ssi_handler+0x964>)
 800187e:	6a38      	ldr	r0, [r7, #32]
 8001880:	f015 fda2 	bl	80173c8 <siprintf>
				}
			}
			/***********************************************************************/
			memset(listaction, '\0', sizeof(listaction));
 8001884:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001888:	2100      	movs	r1, #0
 800188a:	480e      	ldr	r0, [pc, #56]	; (80018c4 <ssi_handler+0x958>)
 800188c:	f015 f828 	bl	80168e0 <memset>
			*next_tag_part = variable;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <ssi_handler+0x94c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29a      	uxth	r2, r3
 8001896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001898:	801a      	strh	r2, [r3, #0]
			//printf("*next_tag_part = %d\n",*next_tag_part);
			variable++;
 800189a:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <ssi_handler+0x94c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <ssi_handler+0x94c>)
 80018a2:	6013      	str	r3, [r2, #0]

			//strcat(pcInsert, "]");
			return strlen(pcInsert);
 80018a4:	6a38      	ldr	r0, [r7, #32]
 80018a6:	f7fe fc9d 	bl	80001e4 <strlen>
 80018aa:	4603      	mov	r3, r0
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	f000 bfaf 	b.w	8002810 <ssi_handler+0x18a4>
 80018b2:	bf00      	nop
 80018b4:	200007c4 	.word	0x200007c4
 80018b8:	200007c0 	.word	0x200007c0
 80018bc:	200027ec 	.word	0x200027ec
 80018c0:	20000008 	.word	0x20000008
 80018c4:	20006880 	.word	0x20006880
 80018c8:	0801b494 	.word	0x0801b494
 80018cc:	0801b530 	.word	0x0801b530
 80018d0:	0801b5ac 	.word	0x0801b5ac
#else
		printf("LWIP_HTTPD_SSI_MULTIPART disabled /n");
#endif
		break;
	case 1:
		if (idtab == 1) {
 80018d4:	4b84      	ldr	r3, [pc, #528]	; (8001ae8 <ssi_handler+0xb7c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d17c      	bne.n	80019d6 <ssi_handler+0xa6a>
			// buttoms
			sprintf(pcInsert,
 80018dc:	4b83      	ldr	r3, [pc, #524]	; (8001aec <ssi_handler+0xb80>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a83      	ldr	r2, [pc, #524]	; (8001af0 <ssi_handler+0xb84>)
 80018e2:	2168      	movs	r1, #104	; 0x68
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	4b7f      	ldr	r3, [pc, #508]	; (8001aec <ssi_handler+0xb80>)
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	6139      	str	r1, [r7, #16]
					"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"info\":\"%s\",\"onoff\":%d}",
					T[id].topin, id, tp[id].pins, T[id].ptype, T[id].binter,
 80018f4:	4b7d      	ldr	r3, [pc, #500]	; (8001aec <ssi_handler+0xb80>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4a7c      	ldr	r2, [pc, #496]	; (8001af4 <ssi_handler+0xb88>)
 8001902:	1899      	adds	r1, r3, r2
 8001904:	60f9      	str	r1, [r7, #12]
 8001906:	4b79      	ldr	r3, [pc, #484]	; (8001aec <ssi_handler+0xb80>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2268      	movs	r2, #104	; 0x68
 800190c:	fb02 f303 	mul.w	r3, r2, r3
 8001910:	3318      	adds	r3, #24
 8001912:	4a77      	ldr	r2, [pc, #476]	; (8001af0 <ssi_handler+0xb84>)
 8001914:	189c      	adds	r4, r3, r2
			sprintf(pcInsert,
 8001916:	4b75      	ldr	r3, [pc, #468]	; (8001aec <ssi_handler+0xb80>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a75      	ldr	r2, [pc, #468]	; (8001af0 <ssi_handler+0xb84>)
 800191c:	2168      	movs	r1, #104	; 0x68
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	332c      	adds	r3, #44	; 0x2c
 8001926:	681d      	ldr	r5, [r3, #0]
 8001928:	4b70      	ldr	r3, [pc, #448]	; (8001aec <ssi_handler+0xb80>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a70      	ldr	r2, [pc, #448]	; (8001af0 <ssi_handler+0xb84>)
 800192e:	2168      	movs	r1, #104	; 0x68
 8001930:	fb01 f303 	mul.w	r3, r1, r3
 8001934:	4413      	add	r3, r2
 8001936:	3330      	adds	r3, #48	; 0x30
 8001938:	681e      	ldr	r6, [r3, #0]
 800193a:	4b6c      	ldr	r3, [pc, #432]	; (8001aec <ssi_handler+0xb80>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6c      	ldr	r2, [pc, #432]	; (8001af0 <ssi_handler+0xb84>)
 8001940:	2168      	movs	r1, #104	; 0x68
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3334      	adds	r3, #52	; 0x34
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	60ba      	str	r2, [r7, #8]
 800194e:	4b67      	ldr	r3, [pc, #412]	; (8001aec <ssi_handler+0xb80>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a67      	ldr	r2, [pc, #412]	; (8001af0 <ssi_handler+0xb84>)
 8001954:	2168      	movs	r1, #104	; 0x68
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3338      	adds	r3, #56	; 0x38
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	6079      	str	r1, [r7, #4]
 8001962:	4b62      	ldr	r3, [pc, #392]	; (8001aec <ssi_handler+0xb80>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a62      	ldr	r2, [pc, #392]	; (8001af0 <ssi_handler+0xb84>)
 8001968:	2168      	movs	r1, #104	; 0x68
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	333c      	adds	r3, #60	; 0x3c
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <ssi_handler+0xb80>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a5d      	ldr	r2, [pc, #372]	; (8001af0 <ssi_handler+0xb84>)
 800197c:	2168      	movs	r1, #104	; 0x68
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	3340      	adds	r3, #64	; 0x40
 8001986:	6819      	ldr	r1, [r3, #0]
					T[id].hinter, T[id].repeat, T[id].rinter, T[id].dcinter,
					T[id].pclick, T[id].info, T[id].onoff);
 8001988:	4b58      	ldr	r3, [pc, #352]	; (8001aec <ssi_handler+0xb80>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2268      	movs	r2, #104	; 0x68
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	3340      	adds	r3, #64	; 0x40
 8001994:	4a56      	ldr	r2, [pc, #344]	; (8001af0 <ssi_handler+0xb84>)
 8001996:	4413      	add	r3, r2
 8001998:	1d1a      	adds	r2, r3, #4
			sprintf(pcInsert,
 800199a:	4b54      	ldr	r3, [pc, #336]	; (8001aec <ssi_handler+0xb80>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4854      	ldr	r0, [pc, #336]	; (8001af0 <ssi_handler+0xb84>)
 80019a0:	f04f 0c68 	mov.w	ip, #104	; 0x68
 80019a4:	fb0c f303 	mul.w	r3, ip, r3
 80019a8:	4403      	add	r3, r0
 80019aa:	3364      	adds	r3, #100	; 0x64
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	9309      	str	r3, [sp, #36]	; 0x24
 80019b0:	9208      	str	r2, [sp, #32]
 80019b2:	9107      	str	r1, [sp, #28]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	9306      	str	r3, [sp, #24]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	9105      	str	r1, [sp, #20]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	9204      	str	r2, [sp, #16]
 80019c0:	9603      	str	r6, [sp, #12]
 80019c2:	9502      	str	r5, [sp, #8]
 80019c4:	9401      	str	r4, [sp, #4]
 80019c6:	68f9      	ldr	r1, [r7, #12]
 80019c8:	9100      	str	r1, [sp, #0]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	494a      	ldr	r1, [pc, #296]	; (8001af8 <ssi_handler+0xb8c>)
 80019d0:	6a38      	ldr	r0, [r7, #32]
 80019d2:	f015 fcf9 	bl	80173c8 <siprintf>
		}
		if (idtab == 2) {
 80019d6:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <ssi_handler+0xb7c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d177      	bne.n	8001ace <ssi_handler+0xb62>
			// relay
			sprintf(pcInsert,
 80019de:	4b43      	ldr	r3, [pc, #268]	; (8001aec <ssi_handler+0xb80>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a43      	ldr	r2, [pc, #268]	; (8001af0 <ssi_handler+0xb84>)
 80019e4:	2168      	movs	r1, #104	; 0x68
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	4b3e      	ldr	r3, [pc, #248]	; (8001aec <ssi_handler+0xb80>)
 80019f2:	6819      	ldr	r1, [r3, #0]
 80019f4:	6139      	str	r1, [r7, #16]
					"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d}",
					T[id].topin, id, tp[id].pins, T[id].ptype, T[id].pwm,
 80019f6:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <ssi_handler+0xb80>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4a3c      	ldr	r2, [pc, #240]	; (8001af4 <ssi_handler+0xb88>)
 8001a04:	4413      	add	r3, r2
 8001a06:	4a39      	ldr	r2, [pc, #228]	; (8001aec <ssi_handler+0xb80>)
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	2168      	movs	r1, #104	; 0x68
 8001a0c:	fb01 f202 	mul.w	r2, r1, r2
 8001a10:	3218      	adds	r2, #24
 8001a12:	4937      	ldr	r1, [pc, #220]	; (8001af0 <ssi_handler+0xb84>)
 8001a14:	440a      	add	r2, r1
			sprintf(pcInsert,
 8001a16:	4935      	ldr	r1, [pc, #212]	; (8001aec <ssi_handler+0xb80>)
 8001a18:	6809      	ldr	r1, [r1, #0]
 8001a1a:	4835      	ldr	r0, [pc, #212]	; (8001af0 <ssi_handler+0xb84>)
 8001a1c:	2468      	movs	r4, #104	; 0x68
 8001a1e:	fb04 f101 	mul.w	r1, r4, r1
 8001a22:	4401      	add	r1, r0
 8001a24:	3104      	adds	r1, #4
 8001a26:	6809      	ldr	r1, [r1, #0]
 8001a28:	4830      	ldr	r0, [pc, #192]	; (8001aec <ssi_handler+0xb80>)
 8001a2a:	6800      	ldr	r0, [r0, #0]
 8001a2c:	4c30      	ldr	r4, [pc, #192]	; (8001af0 <ssi_handler+0xb84>)
 8001a2e:	2568      	movs	r5, #104	; 0x68
 8001a30:	fb05 f000 	mul.w	r0, r5, r0
 8001a34:	4420      	add	r0, r4
 8001a36:	3008      	adds	r0, #8
 8001a38:	6800      	ldr	r0, [r0, #0]
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	4c2b      	ldr	r4, [pc, #172]	; (8001aec <ssi_handler+0xb80>)
 8001a3e:	6824      	ldr	r4, [r4, #0]
 8001a40:	4d2b      	ldr	r5, [pc, #172]	; (8001af0 <ssi_handler+0xb84>)
 8001a42:	2668      	movs	r6, #104	; 0x68
 8001a44:	fb06 f404 	mul.w	r4, r6, r4
 8001a48:	442c      	add	r4, r5
 8001a4a:	340c      	adds	r4, #12
 8001a4c:	6820      	ldr	r0, [r4, #0]
 8001a4e:	60b8      	str	r0, [r7, #8]
 8001a50:	4d26      	ldr	r5, [pc, #152]	; (8001aec <ssi_handler+0xb80>)
 8001a52:	682d      	ldr	r5, [r5, #0]
 8001a54:	4e26      	ldr	r6, [pc, #152]	; (8001af0 <ssi_handler+0xb84>)
 8001a56:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001a5a:	fb0c f505 	mul.w	r5, ip, r5
 8001a5e:	4435      	add	r5, r6
 8001a60:	3510      	adds	r5, #16
 8001a62:	682d      	ldr	r5, [r5, #0]
 8001a64:	4e21      	ldr	r6, [pc, #132]	; (8001aec <ssi_handler+0xb80>)
 8001a66:	6836      	ldr	r6, [r6, #0]
 8001a68:	4821      	ldr	r0, [pc, #132]	; (8001af0 <ssi_handler+0xb84>)
 8001a6a:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001a6e:	fb0c f606 	mul.w	r6, ip, r6
 8001a72:	4406      	add	r6, r0
 8001a74:	3614      	adds	r6, #20
 8001a76:	6836      	ldr	r6, [r6, #0]
					T[id].on, T[id].istate, T[id].dvalue, T[id].ponr,
					T[id].info, T[id].onoff);
 8001a78:	481c      	ldr	r0, [pc, #112]	; (8001aec <ssi_handler+0xb80>)
 8001a7a:	6800      	ldr	r0, [r0, #0]
 8001a7c:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001a80:	fb0c fc00 	mul.w	ip, ip, r0
 8001a84:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8001a88:	4819      	ldr	r0, [pc, #100]	; (8001af0 <ssi_handler+0xb84>)
 8001a8a:	4484      	add	ip, r0
 8001a8c:	f10c 0004 	add.w	r0, ip, #4
 8001a90:	6078      	str	r0, [r7, #4]
			sprintf(pcInsert,
 8001a92:	4816      	ldr	r0, [pc, #88]	; (8001aec <ssi_handler+0xb80>)
 8001a94:	6800      	ldr	r0, [r0, #0]
 8001a96:	4c16      	ldr	r4, [pc, #88]	; (8001af0 <ssi_handler+0xb84>)
 8001a98:	f04f 0c68 	mov.w	ip, #104	; 0x68
 8001a9c:	fb0c fc00 	mul.w	ip, ip, r0
 8001aa0:	44a4      	add	ip, r4
 8001aa2:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8001aa6:	f8dc 0000 	ldr.w	r0, [ip]
 8001aaa:	9008      	str	r0, [sp, #32]
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	9007      	str	r0, [sp, #28]
 8001ab0:	9606      	str	r6, [sp, #24]
 8001ab2:	9505      	str	r5, [sp, #20]
 8001ab4:	68b8      	ldr	r0, [r7, #8]
 8001ab6:	9004      	str	r0, [sp, #16]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	9003      	str	r0, [sp, #12]
 8001abc:	9102      	str	r1, [sp, #8]
 8001abe:	9201      	str	r2, [sp, #4]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	490d      	ldr	r1, [pc, #52]	; (8001afc <ssi_handler+0xb90>)
 8001ac8:	6a38      	ldr	r0, [r7, #32]
 8001aca:	f015 fc7d 	bl	80173c8 <siprintf>
		}
		if (idtab == 3) {
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <ssi_handler+0xb7c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d163      	bne.n	8001b9e <ssi_handler+0xc32>
			// connection
			sprintf(jsonrp, "{");
 8001ad6:	490a      	ldr	r1, [pc, #40]	; (8001b00 <ssi_handler+0xb94>)
 8001ad8:	480a      	ldr	r0, [pc, #40]	; (8001b04 <ssi_handler+0xb98>)
 8001ada:	f015 fc75 	bl	80173c8 <siprintf>
			strcat(bufervar, jsonrp);
 8001ade:	4909      	ldr	r1, [pc, #36]	; (8001b04 <ssi_handler+0xb98>)
 8001ae0:	4809      	ldr	r0, [pc, #36]	; (8001b08 <ssi_handler+0xb9c>)
 8001ae2:	f015 fc91 	bl	8017408 <strcat>
			while (variable <= numpin - 1) {
 8001ae6:	e032      	b.n	8001b4e <ssi_handler+0xbe2>
 8001ae8:	200007cc 	.word	0x200007cc
 8001aec:	200007c8 	.word	0x200007c8
 8001af0:	200027ec 	.word	0x200027ec
 8001af4:	20000008 	.word	0x20000008
 8001af8:	0801b5d0 	.word	0x0801b5d0
 8001afc:	0801b660 	.word	0x0801b660
 8001b00:	0801b208 	.word	0x0801b208
 8001b04:	20006a14 	.word	0x20006a14
 8001b08:	20003f7c 	.word	0x20003f7c
				if (T[variable].topin == 2) {
 8001b0c:	4bb1      	ldr	r3, [pc, #708]	; (8001dd4 <ssi_handler+0xe68>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4ab1      	ldr	r2, [pc, #708]	; (8001dd8 <ssi_handler+0xe6c>)
 8001b12:	2168      	movs	r1, #104	; 0x68
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d111      	bne.n	8001b44 <ssi_handler+0xbd8>
					sprintf(jsonrp, "\"%s\":%d,", tp[variable].pins, variable);
 8001b20:	4bac      	ldr	r3, [pc, #688]	; (8001dd4 <ssi_handler+0xe68>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4aab      	ldr	r2, [pc, #684]	; (8001ddc <ssi_handler+0xe70>)
 8001b2e:	441a      	add	r2, r3
 8001b30:	4ba8      	ldr	r3, [pc, #672]	; (8001dd4 <ssi_handler+0xe68>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	49aa      	ldr	r1, [pc, #680]	; (8001de0 <ssi_handler+0xe74>)
 8001b36:	48ab      	ldr	r0, [pc, #684]	; (8001de4 <ssi_handler+0xe78>)
 8001b38:	f015 fc46 	bl	80173c8 <siprintf>
					strcat(bufervar, jsonrp);
 8001b3c:	49a9      	ldr	r1, [pc, #676]	; (8001de4 <ssi_handler+0xe78>)
 8001b3e:	48aa      	ldr	r0, [pc, #680]	; (8001de8 <ssi_handler+0xe7c>)
 8001b40:	f015 fc62 	bl	8017408 <strcat>
					//printf("%s \r\n",  jsonrp);
				}
				variable++;
 8001b44:	4ba3      	ldr	r3, [pc, #652]	; (8001dd4 <ssi_handler+0xe68>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	4aa2      	ldr	r2, [pc, #648]	; (8001dd4 <ssi_handler+0xe68>)
 8001b4c:	6013      	str	r3, [r2, #0]
			while (variable <= numpin - 1) {
 8001b4e:	4ba1      	ldr	r3, [pc, #644]	; (8001dd4 <ssi_handler+0xe68>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b39      	cmp	r3, #57	; 0x39
 8001b54:	ddda      	ble.n	8001b0c <ssi_handler+0xba0>
			}
			bufervar[strlen(bufervar) - 1] = '\0';
 8001b56:	48a4      	ldr	r0, [pc, #656]	; (8001de8 <ssi_handler+0xe7c>)
 8001b58:	f7fe fb44 	bl	80001e4 <strlen>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	4aa1      	ldr	r2, [pc, #644]	; (8001de8 <ssi_handler+0xe7c>)
 8001b62:	2100      	movs	r1, #0
 8001b64:	54d1      	strb	r1, [r2, r3]
			sprintf(jsonrp, "}");
 8001b66:	49a1      	ldr	r1, [pc, #644]	; (8001dec <ssi_handler+0xe80>)
 8001b68:	489e      	ldr	r0, [pc, #632]	; (8001de4 <ssi_handler+0xe78>)
 8001b6a:	f015 fc2d 	bl	80173c8 <siprintf>
			strcat(bufervar, jsonrp);
 8001b6e:	499d      	ldr	r1, [pc, #628]	; (8001de4 <ssi_handler+0xe78>)
 8001b70:	489d      	ldr	r0, [pc, #628]	; (8001de8 <ssi_handler+0xe7c>)
 8001b72:	f015 fc49 	bl	8017408 <strcat>
			variable = 0;
 8001b76:	4b97      	ldr	r3, [pc, #604]	; (8001dd4 <ssi_handler+0xe68>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
			sprintf(pcInsert, "{\"id\":%d,\"pins\":\"%s\",\"rpins\":%s}", id,
 8001b7c:	4b9c      	ldr	r3, [pc, #624]	; (8001df0 <ssi_handler+0xe84>)
 8001b7e:	6819      	ldr	r1, [r3, #0]
					tp[id].pins, bufervar);
 8001b80:	4b9b      	ldr	r3, [pc, #620]	; (8001df0 <ssi_handler+0xe84>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4a93      	ldr	r2, [pc, #588]	; (8001ddc <ssi_handler+0xe70>)
 8001b8e:	4413      	add	r3, r2
			sprintf(pcInsert, "{\"id\":%d,\"pins\":\"%s\",\"rpins\":%s}", id,
 8001b90:	4a95      	ldr	r2, [pc, #596]	; (8001de8 <ssi_handler+0xe7c>)
 8001b92:	9200      	str	r2, [sp, #0]
 8001b94:	460a      	mov	r2, r1
 8001b96:	4997      	ldr	r1, [pc, #604]	; (8001df4 <ssi_handler+0xe88>)
 8001b98:	6a38      	ldr	r0, [r7, #32]
 8001b9a:	f015 fc15 	bl	80173c8 <siprintf>
		}
		memset(jsonrp, '\0', sizeof(jsonrp));
 8001b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	488f      	ldr	r0, [pc, #572]	; (8001de4 <ssi_handler+0xe78>)
 8001ba6:	f014 fe9b 	bl	80168e0 <memset>
		memset(bufervar, '\0', sizeof(bufervar));
 8001baa:	f642 1204 	movw	r2, #10500	; 0x2904
 8001bae:	2100      	movs	r1, #0
 8001bb0:	488d      	ldr	r0, [pc, #564]	; (8001de8 <ssi_handler+0xe7c>)
 8001bb2:	f014 fe95 	bl	80168e0 <memset>
		return strlen(pcInsert);
 8001bb6:	6a38      	ldr	r0, [r7, #32]
 8001bb8:	f7fe fb14 	bl	80001e4 <strlen>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	f000 be26 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 2:
		sprintf(pcInsert,
 8001bc4:	498c      	ldr	r1, [pc, #560]	; (8001df8 <ssi_handler+0xe8c>)
 8001bc6:	6a38      	ldr	r0, [r7, #32]
 8001bc8:	f015 fbfe 	bl	80173c8 <siprintf>
				"<a href=\"index.shtml\">Home</a> | <a href=\"select.shtml\">Select pin</a> | <a href=\"tab1.shtml\">Buttom pin</a> | <a href=\"tab2.shtml\">Relay pin</a> | <a href=\"timers.shtml\">Timers</a> | <a href=\"settings.shtml\">Settings</a>");
		return strlen(pcInsert);
 8001bcc:	6a38      	ldr	r0, [r7, #32]
 8001bce:	f7fe fb09 	bl	80001e4 <strlen>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f000 be1b 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 4: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%.6f", Settings.lon_de);
 8001bda:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <ssi_handler+0xe90>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	4987      	ldr	r1, [pc, #540]	; (8001e00 <ssi_handler+0xe94>)
 8001be2:	6a38      	ldr	r0, [r7, #32]
 8001be4:	f015 fbf0 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001be8:	6a38      	ldr	r0, [r7, #32]
 8001bea:	f7fe fafb 	bl	80001e4 <strlen>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	f000 be0d 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 5: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%.6f", Settings.lat_de);
 8001bf6:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <ssi_handler+0xe90>)
 8001bf8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bfc:	4980      	ldr	r1, [pc, #512]	; (8001e00 <ssi_handler+0xe94>)
 8001bfe:	6a38      	ldr	r0, [r7, #32]
 8001c00:	f015 fbe2 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001c04:	6a38      	ldr	r0, [r7, #32]
 8001c06:	f7fe faed 	bl	80001e4 <strlen>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f000 bdff 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 6: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqtt_prt);
 8001c12:	4b7a      	ldr	r3, [pc, #488]	; (8001dfc <ssi_handler+0xe90>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	461a      	mov	r2, r3
 8001c18:	497a      	ldr	r1, [pc, #488]	; (8001e04 <ssi_handler+0xe98>)
 8001c1a:	6a38      	ldr	r0, [r7, #32]
 8001c1c:	f015 fbd4 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001c20:	6a38      	ldr	r0, [r7, #32]
 8001c22:	f7fe fadf 	bl	80001e4 <strlen>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f000 bdf1 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 7: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqtt_clt);
 8001c2e:	4a76      	ldr	r2, [pc, #472]	; (8001e08 <ssi_handler+0xe9c>)
 8001c30:	4976      	ldr	r1, [pc, #472]	; (8001e0c <ssi_handler+0xea0>)
 8001c32:	6a38      	ldr	r0, [r7, #32]
 8001c34:	f015 fbc8 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001c38:	6a38      	ldr	r0, [r7, #32]
 8001c3a:	f7fe fad3 	bl	80001e4 <strlen>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f000 bde5 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 8: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqtt_usr);
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <ssi_handler+0xea4>)
 8001c48:	4970      	ldr	r1, [pc, #448]	; (8001e0c <ssi_handler+0xea0>)
 8001c4a:	6a38      	ldr	r0, [r7, #32]
 8001c4c:	f015 fbbc 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001c50:	6a38      	ldr	r0, [r7, #32]
 8001c52:	f7fe fac7 	bl	80001e4 <strlen>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f000 bdd9 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 9: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqt_pswd);
 8001c5e:	4a6d      	ldr	r2, [pc, #436]	; (8001e14 <ssi_handler+0xea8>)
 8001c60:	496a      	ldr	r1, [pc, #424]	; (8001e0c <ssi_handler+0xea0>)
 8001c62:	6a38      	ldr	r0, [r7, #32]
 8001c64:	f015 fbb0 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001c68:	6a38      	ldr	r0, [r7, #32]
 8001c6a:	f7fe fabb 	bl	80001e4 <strlen>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	f000 bdcd 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 10: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqtt_tpc);
 8001c76:	4a68      	ldr	r2, [pc, #416]	; (8001e18 <ssi_handler+0xeac>)
 8001c78:	4964      	ldr	r1, [pc, #400]	; (8001e0c <ssi_handler+0xea0>)
 8001c7a:	6a38      	ldr	r0, [r7, #32]
 8001c7c:	f015 fba4 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001c80:	6a38      	ldr	r0, [r7, #32]
 8001c82:	f7fe faaf 	bl	80001e4 <strlen>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f000 bdc1 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 11: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Settings.mqt_ftpc);
 8001c8e:	4a63      	ldr	r2, [pc, #396]	; (8001e1c <ssi_handler+0xeb0>)
 8001c90:	495e      	ldr	r1, [pc, #376]	; (8001e0c <ssi_handler+0xea0>)
 8001c92:	6a38      	ldr	r0, [r7, #32]
 8001c94:	f015 fb98 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001c98:	6a38      	ldr	r0, [r7, #32]
 8001c9a:	f7fe faa3 	bl	80001e4 <strlen>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f000 bdb5 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 12: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr0);
 8001ca6:	4b55      	ldr	r3, [pc, #340]	; (8001dfc <ssi_handler+0xe90>)
 8001ca8:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8001cac:	461a      	mov	r2, r3
 8001cae:	4955      	ldr	r1, [pc, #340]	; (8001e04 <ssi_handler+0xe98>)
 8001cb0:	6a38      	ldr	r0, [r7, #32]
 8001cb2:	f015 fb89 	bl	80173c8 <siprintf>
		//printf("ip_addr0 = \%d\n",Settings.ip_addr0);
		return strlen(pcInsert);
 8001cb6:	6a38      	ldr	r0, [r7, #32]
 8001cb8:	f7fe fa94 	bl	80001e4 <strlen>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f000 bda6 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 13: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr1);
 8001cc4:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <ssi_handler+0xe90>)
 8001cc6:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8001cca:	461a      	mov	r2, r3
 8001ccc:	494d      	ldr	r1, [pc, #308]	; (8001e04 <ssi_handler+0xe98>)
 8001cce:	6a38      	ldr	r0, [r7, #32]
 8001cd0:	f015 fb7a 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001cd4:	6a38      	ldr	r0, [r7, #32]
 8001cd6:	f7fe fa85 	bl	80001e4 <strlen>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	f000 bd97 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 14: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr2);
 8001ce2:	4b46      	ldr	r3, [pc, #280]	; (8001dfc <ssi_handler+0xe90>)
 8001ce4:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4946      	ldr	r1, [pc, #280]	; (8001e04 <ssi_handler+0xe98>)
 8001cec:	6a38      	ldr	r0, [r7, #32]
 8001cee:	f015 fb6b 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001cf2:	6a38      	ldr	r0, [r7, #32]
 8001cf4:	f7fe fa76 	bl	80001e4 <strlen>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	f000 bd88 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 15: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.ip_addr3);
 8001d00:	4b3e      	ldr	r3, [pc, #248]	; (8001dfc <ssi_handler+0xe90>)
 8001d02:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8001d06:	461a      	mov	r2, r3
 8001d08:	493e      	ldr	r1, [pc, #248]	; (8001e04 <ssi_handler+0xe98>)
 8001d0a:	6a38      	ldr	r0, [r7, #32]
 8001d0c:	f015 fb5c 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001d10:	6a38      	ldr	r0, [r7, #32]
 8001d12:	f7fe fa67 	bl	80001e4 <strlen>
 8001d16:	4603      	mov	r3, r0
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f000 bd79 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 16: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask0);
 8001d1e:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <ssi_handler+0xe90>)
 8001d20:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8001d24:	461a      	mov	r2, r3
 8001d26:	4937      	ldr	r1, [pc, #220]	; (8001e04 <ssi_handler+0xe98>)
 8001d28:	6a38      	ldr	r0, [r7, #32]
 8001d2a:	f015 fb4d 	bl	80173c8 <siprintf>
		//printf("sb_mask0 = \%d\n",Settings.sb_mask0);
		return strlen(pcInsert);
 8001d2e:	6a38      	ldr	r0, [r7, #32]
 8001d30:	f7fe fa58 	bl	80001e4 <strlen>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	f000 bd6a 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 17: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask1);
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <ssi_handler+0xe90>)
 8001d3e:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 8001d42:	461a      	mov	r2, r3
 8001d44:	492f      	ldr	r1, [pc, #188]	; (8001e04 <ssi_handler+0xe98>)
 8001d46:	6a38      	ldr	r0, [r7, #32]
 8001d48:	f015 fb3e 	bl	80173c8 <siprintf>
		//printf("sb_mask1 = \%d\n",Settings.sb_mask1);
		return strlen(pcInsert);
 8001d4c:	6a38      	ldr	r0, [r7, #32]
 8001d4e:	f7fe fa49 	bl	80001e4 <strlen>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	f000 bd5b 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 18: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask2);
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <ssi_handler+0xe90>)
 8001d5c:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8001d60:	461a      	mov	r2, r3
 8001d62:	4928      	ldr	r1, [pc, #160]	; (8001e04 <ssi_handler+0xe98>)
 8001d64:	6a38      	ldr	r0, [r7, #32]
 8001d66:	f015 fb2f 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001d6a:	6a38      	ldr	r0, [r7, #32]
 8001d6c:	f7fe fa3a 	bl	80001e4 <strlen>
 8001d70:	4603      	mov	r3, r0
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f000 bd4c 	b.w	8002810 <ssi_handler+0x18a4>
		//printf("sb_mask2 = \%d\n",Settings.sb_mask2);
		break;
	case 19: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.sb_mask3);
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <ssi_handler+0xe90>)
 8001d7a:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4920      	ldr	r1, [pc, #128]	; (8001e04 <ssi_handler+0xe98>)
 8001d82:	6a38      	ldr	r0, [r7, #32]
 8001d84:	f015 fb20 	bl	80173c8 <siprintf>
		//printf("sb_mask3 = \%d\n",Settings.sb_mask3);
		return strlen(pcInsert);
 8001d88:	6a38      	ldr	r0, [r7, #32]
 8001d8a:	f7fe fa2b 	bl	80001e4 <strlen>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f000 bd3d 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 20: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway0);
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <ssi_handler+0xe90>)
 8001d98:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4919      	ldr	r1, [pc, #100]	; (8001e04 <ssi_handler+0xe98>)
 8001da0:	6a38      	ldr	r0, [r7, #32]
 8001da2:	f015 fb11 	bl	80173c8 <siprintf>
		//printf("gateway0 = \%d\n",Settings.gateway0);
		return strlen(pcInsert);
 8001da6:	6a38      	ldr	r0, [r7, #32]
 8001da8:	f7fe fa1c 	bl	80001e4 <strlen>
 8001dac:	4603      	mov	r3, r0
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	f000 bd2e 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 21: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway1);
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <ssi_handler+0xe90>)
 8001db6:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4911      	ldr	r1, [pc, #68]	; (8001e04 <ssi_handler+0xe98>)
 8001dbe:	6a38      	ldr	r0, [r7, #32]
 8001dc0:	f015 fb02 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001dc4:	6a38      	ldr	r0, [r7, #32]
 8001dc6:	f7fe fa0d 	bl	80001e4 <strlen>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	f000 bd1f 	b.w	8002810 <ssi_handler+0x18a4>
 8001dd2:	bf00      	nop
 8001dd4:	200007c0 	.word	0x200007c0
 8001dd8:	200027ec 	.word	0x200027ec
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	0801b20c 	.word	0x0801b20c
 8001de4:	20006a14 	.word	0x20006a14
 8001de8:	20003f7c 	.word	0x20003f7c
 8001dec:	0801b218 	.word	0x0801b218
 8001df0:	200007c8 	.word	0x200007c8
 8001df4:	0801b6d8 	.word	0x0801b6d8
 8001df8:	0801b6fc 	.word	0x0801b6fc
 8001dfc:	20000490 	.word	0x20000490
 8001e00:	0801b7dc 	.word	0x0801b7dc
 8001e04:	0801b7e4 	.word	0x0801b7e4
 8001e08:	200004a4 	.word	0x200004a4
 8001e0c:	0801b7e8 	.word	0x0801b7e8
 8001e10:	200004ae 	.word	0x200004ae
 8001e14:	200004b8 	.word	0x200004b8
 8001e18:	200004c7 	.word	0x200004c7
 8001e1c:	200004d6 	.word	0x200004d6
		break;
	case 22: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway2);
 8001e20:	4ba3      	ldr	r3, [pc, #652]	; (80020b0 <ssi_handler+0x1144>)
 8001e22:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 8001e26:	461a      	mov	r2, r3
 8001e28:	49a2      	ldr	r1, [pc, #648]	; (80020b4 <ssi_handler+0x1148>)
 8001e2a:	6a38      	ldr	r0, [r7, #32]
 8001e2c:	f015 facc 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001e30:	6a38      	ldr	r0, [r7, #32]
 8001e32:	f7fe f9d7 	bl	80001e4 <strlen>
 8001e36:	4603      	mov	r3, r0
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	f000 bce9 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 23: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.gateway3);
 8001e3e:	4b9c      	ldr	r3, [pc, #624]	; (80020b0 <ssi_handler+0x1144>)
 8001e40:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 8001e44:	461a      	mov	r2, r3
 8001e46:	499b      	ldr	r1, [pc, #620]	; (80020b4 <ssi_handler+0x1148>)
 8001e48:	6a38      	ldr	r0, [r7, #32]
 8001e4a:	f015 fabd 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001e4e:	6a38      	ldr	r0, [r7, #32]
 8001e50:	f7fe f9c8 	bl	80001e4 <strlen>
 8001e54:	4603      	mov	r3, r0
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	f000 bcda 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 24: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst0);
 8001e5c:	4b94      	ldr	r3, [pc, #592]	; (80020b0 <ssi_handler+0x1144>)
 8001e5e:	f9b3 306e 	ldrsh.w	r3, [r3, #110]	; 0x6e
 8001e62:	461a      	mov	r2, r3
 8001e64:	4993      	ldr	r1, [pc, #588]	; (80020b4 <ssi_handler+0x1148>)
 8001e66:	6a38      	ldr	r0, [r7, #32]
 8001e68:	f015 faae 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001e6c:	6a38      	ldr	r0, [r7, #32]
 8001e6e:	f7fe f9b9 	bl	80001e4 <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	f000 bccb 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 25: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst1);
 8001e7a:	4b8d      	ldr	r3, [pc, #564]	; (80020b0 <ssi_handler+0x1144>)
 8001e7c:	f9b3 3070 	ldrsh.w	r3, [r3, #112]	; 0x70
 8001e80:	461a      	mov	r2, r3
 8001e82:	498c      	ldr	r1, [pc, #560]	; (80020b4 <ssi_handler+0x1148>)
 8001e84:	6a38      	ldr	r0, [r7, #32]
 8001e86:	f015 fa9f 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001e8a:	6a38      	ldr	r0, [r7, #32]
 8001e8c:	f7fe f9aa 	bl	80001e4 <strlen>
 8001e90:	4603      	mov	r3, r0
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	f000 bcbc 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 26: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst2);
 8001e98:	4b85      	ldr	r3, [pc, #532]	; (80020b0 <ssi_handler+0x1144>)
 8001e9a:	f9b3 3072 	ldrsh.w	r3, [r3, #114]	; 0x72
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4984      	ldr	r1, [pc, #528]	; (80020b4 <ssi_handler+0x1148>)
 8001ea2:	6a38      	ldr	r0, [r7, #32]
 8001ea4:	f015 fa90 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001ea8:	6a38      	ldr	r0, [r7, #32]
 8001eaa:	f7fe f99b 	bl	80001e4 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	f000 bcad 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 27: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%d", Settings.mqt_hst3);
 8001eb6:	4b7e      	ldr	r3, [pc, #504]	; (80020b0 <ssi_handler+0x1144>)
 8001eb8:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	; 0x74
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	497d      	ldr	r1, [pc, #500]	; (80020b4 <ssi_handler+0x1148>)
 8001ec0:	6a38      	ldr	r0, [r7, #32]
 8001ec2:	f015 fa81 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001ec6:	6a38      	ldr	r0, [r7, #32]
 8001ec8:	f7fe f98c 	bl	80001e4 <strlen>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	f000 bc9e 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 28: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%d", Tt[tmp_id].s_dt);
 8001ed4:	4b78      	ldr	r3, [pc, #480]	; (80020b8 <ssi_handler+0x114c>)
 8001ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4a77      	ldr	r2, [pc, #476]	; (80020bc <ssi_handler+0x1150>)
 8001ede:	460b      	mov	r3, r1
 8001ee0:	011b      	lsls	r3, r3, #4
 8001ee2:	440b      	add	r3, r1
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	330c      	adds	r3, #12
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4971      	ldr	r1, [pc, #452]	; (80020b4 <ssi_handler+0x1148>)
 8001ef0:	6a38      	ldr	r0, [r7, #32]
 8001ef2:	f015 fa69 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001ef6:	6a38      	ldr	r0, [r7, #32]
 8001ef8:	f7fe f974 	bl	80001e4 <strlen>
 8001efc:	4603      	mov	r3, r0
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	f000 bc86 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 29: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%d", Tt[tmp_id].e_dt);
 8001f04:	4b6c      	ldr	r3, [pc, #432]	; (80020b8 <ssi_handler+0x114c>)
 8001f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4a6b      	ldr	r2, [pc, #428]	; (80020bc <ssi_handler+0x1150>)
 8001f0e:	460b      	mov	r3, r1
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	440b      	add	r3, r1
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3310      	adds	r3, #16
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4965      	ldr	r1, [pc, #404]	; (80020b4 <ssi_handler+0x1148>)
 8001f20:	6a38      	ldr	r0, [r7, #32]
 8001f22:	f015 fa51 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001f26:	6a38      	ldr	r0, [r7, #32]
 8001f28:	f7fe f95c 	bl	80001e4 <strlen>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	f000 bc6e 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 30: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%d", t_id);
 8001f34:	4b62      	ldr	r3, [pc, #392]	; (80020c0 <ssi_handler+0x1154>)
 8001f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	495d      	ldr	r1, [pc, #372]	; (80020b4 <ssi_handler+0x1148>)
 8001f3e:	6a38      	ldr	r0, [r7, #32]
 8001f40:	f015 fa42 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001f44:	6a38      	ldr	r0, [r7, #32]
 8001f46:	f7fe f94d 	bl	80001e4 <strlen>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f000 bc5f 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 31: // "SSI" для странички "edit_timers.shtml"
		sprintf(pcInsert, "%s", pins);
 8001f52:	4a5c      	ldr	r2, [pc, #368]	; (80020c4 <ssi_handler+0x1158>)
 8001f54:	495c      	ldr	r1, [pc, #368]	; (80020c8 <ssi_handler+0x115c>)
 8001f56:	6a38      	ldr	r0, [r7, #32]
 8001f58:	f015 fa36 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001f5c:	6a38      	ldr	r0, [r7, #32]
 8001f5e:	f7fe f941 	bl	80001e4 <strlen>
 8001f62:	4603      	mov	r3, r0
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	f000 bc53 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 32: // "SSI" для странички "edit_timers.shtml"
		//printf("Tt[tmp_id].t_repeat = \%d\n",Tt[tmp_id].t_repeat);
		sprintf(pcInsert, "%d", Tt[tmp_id].t_repeat);
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <ssi_handler+0x114c>)
 8001f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f70:	4619      	mov	r1, r3
 8001f72:	4a52      	ldr	r2, [pc, #328]	; (80020bc <ssi_handler+0x1150>)
 8001f74:	460b      	mov	r3, r1
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	440b      	add	r3, r1
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3314      	adds	r3, #20
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	494b      	ldr	r1, [pc, #300]	; (80020b4 <ssi_handler+0x1148>)
 8001f86:	6a38      	ldr	r0, [r7, #32]
 8001f88:	f015 fa1e 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8001f8c:	6a38      	ldr	r0, [r7, #32]
 8001f8e:	f7fe f929 	bl	80001e4 <strlen>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f000 bc3b 	b.w	8002810 <ssi_handler+0x18a4>
		break;

	case 33: // Для странички "edit_timers.shtml"
		sprintf(pcInsert,"%d",Tt[tmp_id].t_rept1);
 8001f9a:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <ssi_handler+0x114c>)
 8001f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4a46      	ldr	r2, [pc, #280]	; (80020bc <ssi_handler+0x1150>)
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	440b      	add	r3, r1
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	333e      	adds	r3, #62	; 0x3e
 8001fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	493f      	ldr	r1, [pc, #252]	; (80020b4 <ssi_handler+0x1148>)
 8001fb8:	6a38      	ldr	r0, [r7, #32]
 8001fba:	f015 fa05 	bl	80173c8 <siprintf>
    	return strlen(pcInsert);
 8001fbe:	6a38      	ldr	r0, [r7, #32]
 8001fc0:	f7fe f910 	bl	80001e4 <strlen>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f000 bc22 	b.w	8002810 <ssi_handler+0x18a4>
		break;
	case 34: // Для странички "edit_timers.shtml"
		if(Tt[tmp_id].t_rept2 == 0){
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <ssi_handler+0x114c>)
 8001fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4a39      	ldr	r2, [pc, #228]	; (80020bc <ssi_handler+0x1150>)
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	440b      	add	r3, r1
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	3340      	adds	r3, #64	; 0x40
 8001fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d11f      	bne.n	800202a <ssi_handler+0x10be>
			strcat(listaction, "<option value=\"0\" selected>NONE</option>"); // Блок "option" генерируем для HTML
 8001fea:	4838      	ldr	r0, [pc, #224]	; (80020cc <ssi_handler+0x1160>)
 8001fec:	f7fe f8fa 	bl	80001e4 <strlen>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4b35      	ldr	r3, [pc, #212]	; (80020cc <ssi_handler+0x1160>)
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a35      	ldr	r2, [pc, #212]	; (80020d0 <ssi_handler+0x1164>)
 8001ffa:	4614      	mov	r4, r2
 8001ffc:	469c      	mov	ip, r3
 8001ffe:	f104 0e20 	add.w	lr, r4, #32
 8002002:	4665      	mov	r5, ip
 8002004:	4626      	mov	r6, r4
 8002006:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002008:	6028      	str	r0, [r5, #0]
 800200a:	6069      	str	r1, [r5, #4]
 800200c:	60aa      	str	r2, [r5, #8]
 800200e:	60eb      	str	r3, [r5, #12]
 8002010:	3410      	adds	r4, #16
 8002012:	f10c 0c10 	add.w	ip, ip, #16
 8002016:	4574      	cmp	r4, lr
 8002018:	d1f3      	bne.n	8002002 <ssi_handler+0x1096>
 800201a:	4662      	mov	r2, ip
 800201c:	4623      	mov	r3, r4
 800201e:	cb03      	ldmia	r3!, {r0, r1}
 8002020:	6010      	str	r0, [r2, #0]
 8002022:	6051      	str	r1, [r2, #4]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	7213      	strb	r3, [r2, #8]
 8002028:	e013      	b.n	8002052 <ssi_handler+0x10e6>
		}
		else{
			strcat(listaction, "<option value=\"0\">NONE</option>");
 800202a:	4828      	ldr	r0, [pc, #160]	; (80020cc <ssi_handler+0x1160>)
 800202c:	f7fe f8da 	bl	80001e4 <strlen>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b25      	ldr	r3, [pc, #148]	; (80020cc <ssi_handler+0x1160>)
 8002036:	4413      	add	r3, r2
 8002038:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <ssi_handler+0x1168>)
 800203a:	461c      	mov	r4, r3
 800203c:	4615      	mov	r5, r2
 800203e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002040:	6020      	str	r0, [r4, #0]
 8002042:	6061      	str	r1, [r4, #4]
 8002044:	60a2      	str	r2, [r4, #8]
 8002046:	60e3      	str	r3, [r4, #12]
 8002048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204a:	6120      	str	r0, [r4, #16]
 800204c:	6161      	str	r1, [r4, #20]
 800204e:	61a2      	str	r2, [r4, #24]
 8002050:	61e3      	str	r3, [r4, #28]
		}
		if (Tt[tmp_id].t_rept2 == 1) {
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <ssi_handler+0x114c>)
 8002054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002058:	4619      	mov	r1, r3
 800205a:	4a18      	ldr	r2, [pc, #96]	; (80020bc <ssi_handler+0x1150>)
 800205c:	460b      	mov	r3, r1
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	440b      	add	r3, r1
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	3340      	adds	r3, #64	; 0x40
 8002068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d135      	bne.n	80020dc <ssi_handler+0x1170>
			strcat(listaction, "<option value=\"1\" selected>Seconds</option>");
 8002070:	4816      	ldr	r0, [pc, #88]	; (80020cc <ssi_handler+0x1160>)
 8002072:	f7fe f8b7 	bl	80001e4 <strlen>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <ssi_handler+0x1160>)
 800207c:	4413      	add	r3, r2
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <ssi_handler+0x116c>)
 8002080:	4614      	mov	r4, r2
 8002082:	469c      	mov	ip, r3
 8002084:	f104 0e20 	add.w	lr, r4, #32
 8002088:	4665      	mov	r5, ip
 800208a:	4626      	mov	r6, r4
 800208c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800208e:	6028      	str	r0, [r5, #0]
 8002090:	6069      	str	r1, [r5, #4]
 8002092:	60aa      	str	r2, [r5, #8]
 8002094:	60eb      	str	r3, [r5, #12]
 8002096:	3410      	adds	r4, #16
 8002098:	f10c 0c10 	add.w	ip, ip, #16
 800209c:	4574      	cmp	r4, lr
 800209e:	d1f3      	bne.n	8002088 <ssi_handler+0x111c>
 80020a0:	4665      	mov	r5, ip
 80020a2:	4623      	mov	r3, r4
 80020a4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020a6:	6028      	str	r0, [r5, #0]
 80020a8:	6069      	str	r1, [r5, #4]
 80020aa:	60aa      	str	r2, [r5, #8]
 80020ac:	e034      	b.n	8002118 <ssi_handler+0x11ac>
 80020ae:	bf00      	nop
 80020b0:	20000490 	.word	0x20000490
 80020b4:	0801b7e4 	.word	0x0801b7e4
 80020b8:	200007ba 	.word	0x200007ba
 80020bc:	2000174c 	.word	0x2000174c
 80020c0:	200007b8 	.word	0x200007b8
 80020c4:	20000000 	.word	0x20000000
 80020c8:	0801b7e8 	.word	0x0801b7e8
 80020cc:	20006880 	.word	0x20006880
 80020d0:	0801b7ec 	.word	0x0801b7ec
 80020d4:	0801b818 	.word	0x0801b818
 80020d8:	0801b838 	.word	0x0801b838
		}
		else {
			strcat(listaction, "<option value=\"1\">Seconds</option>");
 80020dc:	48b9      	ldr	r0, [pc, #740]	; (80023c4 <ssi_handler+0x1458>)
 80020de:	f7fe f881 	bl	80001e4 <strlen>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461a      	mov	r2, r3
 80020e6:	4bb7      	ldr	r3, [pc, #732]	; (80023c4 <ssi_handler+0x1458>)
 80020e8:	4413      	add	r3, r2
 80020ea:	4ab7      	ldr	r2, [pc, #732]	; (80023c8 <ssi_handler+0x145c>)
 80020ec:	4614      	mov	r4, r2
 80020ee:	469c      	mov	ip, r3
 80020f0:	f104 0e20 	add.w	lr, r4, #32
 80020f4:	4665      	mov	r5, ip
 80020f6:	4626      	mov	r6, r4
 80020f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80020fa:	6028      	str	r0, [r5, #0]
 80020fc:	6069      	str	r1, [r5, #4]
 80020fe:	60aa      	str	r2, [r5, #8]
 8002100:	60eb      	str	r3, [r5, #12]
 8002102:	3410      	adds	r4, #16
 8002104:	f10c 0c10 	add.w	ip, ip, #16
 8002108:	4574      	cmp	r4, lr
 800210a:	d1f3      	bne.n	80020f4 <ssi_handler+0x1188>
 800210c:	4663      	mov	r3, ip
 800210e:	4622      	mov	r2, r4
 8002110:	8811      	ldrh	r1, [r2, #0]
 8002112:	7892      	ldrb	r2, [r2, #2]
 8002114:	8019      	strh	r1, [r3, #0]
 8002116:	709a      	strb	r2, [r3, #2]
		}

		if (Tt[tmp_id].t_rept2 == 2) {
 8002118:	4bac      	ldr	r3, [pc, #688]	; (80023cc <ssi_handler+0x1460>)
 800211a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800211e:	4619      	mov	r1, r3
 8002120:	4aab      	ldr	r2, [pc, #684]	; (80023d0 <ssi_handler+0x1464>)
 8002122:	460b      	mov	r3, r1
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	440b      	add	r3, r1
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	3340      	adds	r3, #64	; 0x40
 800212e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002132:	2b02      	cmp	r3, #2
 8002134:	d11e      	bne.n	8002174 <ssi_handler+0x1208>
			strcat(listaction, "<option value=\"2\" selected>Minutes</option>");
 8002136:	48a3      	ldr	r0, [pc, #652]	; (80023c4 <ssi_handler+0x1458>)
 8002138:	f7fe f854 	bl	80001e4 <strlen>
 800213c:	4603      	mov	r3, r0
 800213e:	461a      	mov	r2, r3
 8002140:	4ba0      	ldr	r3, [pc, #640]	; (80023c4 <ssi_handler+0x1458>)
 8002142:	4413      	add	r3, r2
 8002144:	4aa3      	ldr	r2, [pc, #652]	; (80023d4 <ssi_handler+0x1468>)
 8002146:	4614      	mov	r4, r2
 8002148:	469c      	mov	ip, r3
 800214a:	f104 0e20 	add.w	lr, r4, #32
 800214e:	4665      	mov	r5, ip
 8002150:	4626      	mov	r6, r4
 8002152:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002154:	6028      	str	r0, [r5, #0]
 8002156:	6069      	str	r1, [r5, #4]
 8002158:	60aa      	str	r2, [r5, #8]
 800215a:	60eb      	str	r3, [r5, #12]
 800215c:	3410      	adds	r4, #16
 800215e:	f10c 0c10 	add.w	ip, ip, #16
 8002162:	4574      	cmp	r4, lr
 8002164:	d1f3      	bne.n	800214e <ssi_handler+0x11e2>
 8002166:	4665      	mov	r5, ip
 8002168:	4623      	mov	r3, r4
 800216a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800216c:	6028      	str	r0, [r5, #0]
 800216e:	6069      	str	r1, [r5, #4]
 8002170:	60aa      	str	r2, [r5, #8]
 8002172:	e01d      	b.n	80021b0 <ssi_handler+0x1244>
		}
		else {
			strcat(listaction, "<option value=\"2\">Minutes</option>");
 8002174:	4893      	ldr	r0, [pc, #588]	; (80023c4 <ssi_handler+0x1458>)
 8002176:	f7fe f835 	bl	80001e4 <strlen>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	4b91      	ldr	r3, [pc, #580]	; (80023c4 <ssi_handler+0x1458>)
 8002180:	4413      	add	r3, r2
 8002182:	4a95      	ldr	r2, [pc, #596]	; (80023d8 <ssi_handler+0x146c>)
 8002184:	4614      	mov	r4, r2
 8002186:	469c      	mov	ip, r3
 8002188:	f104 0e20 	add.w	lr, r4, #32
 800218c:	4665      	mov	r5, ip
 800218e:	4626      	mov	r6, r4
 8002190:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002192:	6028      	str	r0, [r5, #0]
 8002194:	6069      	str	r1, [r5, #4]
 8002196:	60aa      	str	r2, [r5, #8]
 8002198:	60eb      	str	r3, [r5, #12]
 800219a:	3410      	adds	r4, #16
 800219c:	f10c 0c10 	add.w	ip, ip, #16
 80021a0:	4574      	cmp	r4, lr
 80021a2:	d1f3      	bne.n	800218c <ssi_handler+0x1220>
 80021a4:	4663      	mov	r3, ip
 80021a6:	4622      	mov	r2, r4
 80021a8:	8811      	ldrh	r1, [r2, #0]
 80021aa:	7892      	ldrb	r2, [r2, #2]
 80021ac:	8019      	strh	r1, [r3, #0]
 80021ae:	709a      	strb	r2, [r3, #2]
		}
		if (Tt[tmp_id].t_rept2 == 3) {
 80021b0:	4b86      	ldr	r3, [pc, #536]	; (80023cc <ssi_handler+0x1460>)
 80021b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b6:	4619      	mov	r1, r3
 80021b8:	4a85      	ldr	r2, [pc, #532]	; (80023d0 <ssi_handler+0x1464>)
 80021ba:	460b      	mov	r3, r1
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	440b      	add	r3, r1
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3340      	adds	r3, #64	; 0x40
 80021c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d11f      	bne.n	800220e <ssi_handler+0x12a2>
			strcat(listaction, "<option value=\"3\" selected>Hours</option>");
 80021ce:	487d      	ldr	r0, [pc, #500]	; (80023c4 <ssi_handler+0x1458>)
 80021d0:	f7fe f808 	bl	80001e4 <strlen>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b7a      	ldr	r3, [pc, #488]	; (80023c4 <ssi_handler+0x1458>)
 80021da:	4413      	add	r3, r2
 80021dc:	4a7f      	ldr	r2, [pc, #508]	; (80023dc <ssi_handler+0x1470>)
 80021de:	4614      	mov	r4, r2
 80021e0:	469c      	mov	ip, r3
 80021e2:	f104 0e20 	add.w	lr, r4, #32
 80021e6:	4665      	mov	r5, ip
 80021e8:	4626      	mov	r6, r4
 80021ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80021ec:	6028      	str	r0, [r5, #0]
 80021ee:	6069      	str	r1, [r5, #4]
 80021f0:	60aa      	str	r2, [r5, #8]
 80021f2:	60eb      	str	r3, [r5, #12]
 80021f4:	3410      	adds	r4, #16
 80021f6:	f10c 0c10 	add.w	ip, ip, #16
 80021fa:	4574      	cmp	r4, lr
 80021fc:	d1f3      	bne.n	80021e6 <ssi_handler+0x127a>
 80021fe:	4662      	mov	r2, ip
 8002200:	4623      	mov	r3, r4
 8002202:	cb03      	ldmia	r3!, {r0, r1}
 8002204:	6010      	str	r0, [r2, #0]
 8002206:	6051      	str	r1, [r2, #4]
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	8113      	strh	r3, [r2, #8]
 800220c:	e01b      	b.n	8002246 <ssi_handler+0x12da>
		}
		else {
			strcat(listaction, "<option value=\"3\">Hours</option>");
 800220e:	486d      	ldr	r0, [pc, #436]	; (80023c4 <ssi_handler+0x1458>)
 8002210:	f7fd ffe8 	bl	80001e4 <strlen>
 8002214:	4603      	mov	r3, r0
 8002216:	461a      	mov	r2, r3
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <ssi_handler+0x1458>)
 800221a:	4413      	add	r3, r2
 800221c:	4a70      	ldr	r2, [pc, #448]	; (80023e0 <ssi_handler+0x1474>)
 800221e:	4614      	mov	r4, r2
 8002220:	469c      	mov	ip, r3
 8002222:	f104 0e20 	add.w	lr, r4, #32
 8002226:	4665      	mov	r5, ip
 8002228:	4626      	mov	r6, r4
 800222a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800222c:	6028      	str	r0, [r5, #0]
 800222e:	6069      	str	r1, [r5, #4]
 8002230:	60aa      	str	r2, [r5, #8]
 8002232:	60eb      	str	r3, [r5, #12]
 8002234:	3410      	adds	r4, #16
 8002236:	f10c 0c10 	add.w	ip, ip, #16
 800223a:	4574      	cmp	r4, lr
 800223c:	d1f3      	bne.n	8002226 <ssi_handler+0x12ba>
 800223e:	4663      	mov	r3, ip
 8002240:	4622      	mov	r2, r4
 8002242:	7812      	ldrb	r2, [r2, #0]
 8002244:	701a      	strb	r2, [r3, #0]
		}
		if (Tt[tmp_id].t_rept2 == 4) {
 8002246:	4b61      	ldr	r3, [pc, #388]	; (80023cc <ssi_handler+0x1460>)
 8002248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224c:	4619      	mov	r1, r3
 800224e:	4a60      	ldr	r2, [pc, #384]	; (80023d0 <ssi_handler+0x1464>)
 8002250:	460b      	mov	r3, r1
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	440b      	add	r3, r1
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	3340      	adds	r3, #64	; 0x40
 800225c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002260:	2b04      	cmp	r3, #4
 8002262:	d11f      	bne.n	80022a4 <ssi_handler+0x1338>
			strcat(listaction, "<option value=\"4\" selected>Days</option>");
 8002264:	4857      	ldr	r0, [pc, #348]	; (80023c4 <ssi_handler+0x1458>)
 8002266:	f7fd ffbd 	bl	80001e4 <strlen>
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	4b55      	ldr	r3, [pc, #340]	; (80023c4 <ssi_handler+0x1458>)
 8002270:	4413      	add	r3, r2
 8002272:	4a5c      	ldr	r2, [pc, #368]	; (80023e4 <ssi_handler+0x1478>)
 8002274:	4614      	mov	r4, r2
 8002276:	469c      	mov	ip, r3
 8002278:	f104 0e20 	add.w	lr, r4, #32
 800227c:	4665      	mov	r5, ip
 800227e:	4626      	mov	r6, r4
 8002280:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002282:	6028      	str	r0, [r5, #0]
 8002284:	6069      	str	r1, [r5, #4]
 8002286:	60aa      	str	r2, [r5, #8]
 8002288:	60eb      	str	r3, [r5, #12]
 800228a:	3410      	adds	r4, #16
 800228c:	f10c 0c10 	add.w	ip, ip, #16
 8002290:	4574      	cmp	r4, lr
 8002292:	d1f3      	bne.n	800227c <ssi_handler+0x1310>
 8002294:	4662      	mov	r2, ip
 8002296:	4623      	mov	r3, r4
 8002298:	cb03      	ldmia	r3!, {r0, r1}
 800229a:	6010      	str	r0, [r2, #0]
 800229c:	6051      	str	r1, [r2, #4]
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	7213      	strb	r3, [r2, #8]
 80022a2:	e013      	b.n	80022cc <ssi_handler+0x1360>
		}
		else {
			strcat(listaction, "<option value=\"4\">Days</option>");
 80022a4:	4847      	ldr	r0, [pc, #284]	; (80023c4 <ssi_handler+0x1458>)
 80022a6:	f7fd ff9d 	bl	80001e4 <strlen>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b45      	ldr	r3, [pc, #276]	; (80023c4 <ssi_handler+0x1458>)
 80022b0:	4413      	add	r3, r2
 80022b2:	4a4d      	ldr	r2, [pc, #308]	; (80023e8 <ssi_handler+0x147c>)
 80022b4:	461c      	mov	r4, r3
 80022b6:	4615      	mov	r5, r2
 80022b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ba:	6020      	str	r0, [r4, #0]
 80022bc:	6061      	str	r1, [r4, #4]
 80022be:	60a2      	str	r2, [r4, #8]
 80022c0:	60e3      	str	r3, [r4, #12]
 80022c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c4:	6120      	str	r0, [r4, #16]
 80022c6:	6161      	str	r1, [r4, #20]
 80022c8:	61a2      	str	r2, [r4, #24]
 80022ca:	61e3      	str	r3, [r4, #28]
		}
		if (Tt[tmp_id].t_rept2 == 5) {
 80022cc:	4b3f      	ldr	r3, [pc, #252]	; (80023cc <ssi_handler+0x1460>)
 80022ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d2:	4619      	mov	r1, r3
 80022d4:	4a3e      	ldr	r2, [pc, #248]	; (80023d0 <ssi_handler+0x1464>)
 80022d6:	460b      	mov	r3, r1
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	440b      	add	r3, r1
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	3340      	adds	r3, #64	; 0x40
 80022e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e6:	2b05      	cmp	r3, #5
 80022e8:	d11f      	bne.n	800232a <ssi_handler+0x13be>
			strcat(listaction, "<option value=\"5\" selected>Weeks</option>");
 80022ea:	4836      	ldr	r0, [pc, #216]	; (80023c4 <ssi_handler+0x1458>)
 80022ec:	f7fd ff7a 	bl	80001e4 <strlen>
 80022f0:	4603      	mov	r3, r0
 80022f2:	461a      	mov	r2, r3
 80022f4:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <ssi_handler+0x1458>)
 80022f6:	4413      	add	r3, r2
 80022f8:	4a3c      	ldr	r2, [pc, #240]	; (80023ec <ssi_handler+0x1480>)
 80022fa:	4614      	mov	r4, r2
 80022fc:	469c      	mov	ip, r3
 80022fe:	f104 0e20 	add.w	lr, r4, #32
 8002302:	4665      	mov	r5, ip
 8002304:	4626      	mov	r6, r4
 8002306:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002308:	6028      	str	r0, [r5, #0]
 800230a:	6069      	str	r1, [r5, #4]
 800230c:	60aa      	str	r2, [r5, #8]
 800230e:	60eb      	str	r3, [r5, #12]
 8002310:	3410      	adds	r4, #16
 8002312:	f10c 0c10 	add.w	ip, ip, #16
 8002316:	4574      	cmp	r4, lr
 8002318:	d1f3      	bne.n	8002302 <ssi_handler+0x1396>
 800231a:	4662      	mov	r2, ip
 800231c:	4623      	mov	r3, r4
 800231e:	cb03      	ldmia	r3!, {r0, r1}
 8002320:	6010      	str	r0, [r2, #0]
 8002322:	6051      	str	r1, [r2, #4]
 8002324:	881b      	ldrh	r3, [r3, #0]
 8002326:	8113      	strh	r3, [r2, #8]
 8002328:	e01b      	b.n	8002362 <ssi_handler+0x13f6>
		}
		else {
			strcat(listaction, "<option value=\"5\">Weeks</option>");
 800232a:	4826      	ldr	r0, [pc, #152]	; (80023c4 <ssi_handler+0x1458>)
 800232c:	f7fd ff5a 	bl	80001e4 <strlen>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <ssi_handler+0x1458>)
 8002336:	4413      	add	r3, r2
 8002338:	4a2d      	ldr	r2, [pc, #180]	; (80023f0 <ssi_handler+0x1484>)
 800233a:	4614      	mov	r4, r2
 800233c:	469c      	mov	ip, r3
 800233e:	f104 0e20 	add.w	lr, r4, #32
 8002342:	4665      	mov	r5, ip
 8002344:	4626      	mov	r6, r4
 8002346:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002348:	6028      	str	r0, [r5, #0]
 800234a:	6069      	str	r1, [r5, #4]
 800234c:	60aa      	str	r2, [r5, #8]
 800234e:	60eb      	str	r3, [r5, #12]
 8002350:	3410      	adds	r4, #16
 8002352:	f10c 0c10 	add.w	ip, ip, #16
 8002356:	4574      	cmp	r4, lr
 8002358:	d1f3      	bne.n	8002342 <ssi_handler+0x13d6>
 800235a:	4663      	mov	r3, ip
 800235c:	4622      	mov	r2, r4
 800235e:	7812      	ldrb	r2, [r2, #0]
 8002360:	701a      	strb	r2, [r3, #0]
		}
		if (Tt[tmp_id].t_rept2 == 6) {
 8002362:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <ssi_handler+0x1460>)
 8002364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002368:	4619      	mov	r1, r3
 800236a:	4a19      	ldr	r2, [pc, #100]	; (80023d0 <ssi_handler+0x1464>)
 800236c:	460b      	mov	r3, r1
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	440b      	add	r3, r1
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	3340      	adds	r3, #64	; 0x40
 8002378:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237c:	2b06      	cmp	r3, #6
 800237e:	d13b      	bne.n	80023f8 <ssi_handler+0x148c>
			strcat(listaction, "<option value=\"6\" selected>Months</option>");
 8002380:	4810      	ldr	r0, [pc, #64]	; (80023c4 <ssi_handler+0x1458>)
 8002382:	f7fd ff2f 	bl	80001e4 <strlen>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <ssi_handler+0x1458>)
 800238c:	4413      	add	r3, r2
 800238e:	4a19      	ldr	r2, [pc, #100]	; (80023f4 <ssi_handler+0x1488>)
 8002390:	4614      	mov	r4, r2
 8002392:	469c      	mov	ip, r3
 8002394:	f104 0e20 	add.w	lr, r4, #32
 8002398:	4665      	mov	r5, ip
 800239a:	4626      	mov	r6, r4
 800239c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800239e:	6028      	str	r0, [r5, #0]
 80023a0:	6069      	str	r1, [r5, #4]
 80023a2:	60aa      	str	r2, [r5, #8]
 80023a4:	60eb      	str	r3, [r5, #12]
 80023a6:	3410      	adds	r4, #16
 80023a8:	f10c 0c10 	add.w	ip, ip, #16
 80023ac:	4574      	cmp	r4, lr
 80023ae:	d1f3      	bne.n	8002398 <ssi_handler+0x142c>
 80023b0:	4662      	mov	r2, ip
 80023b2:	4623      	mov	r3, r4
 80023b4:	cb03      	ldmia	r3!, {r0, r1}
 80023b6:	6010      	str	r0, [r2, #0]
 80023b8:	6051      	str	r1, [r2, #4]
 80023ba:	8819      	ldrh	r1, [r3, #0]
 80023bc:	789b      	ldrb	r3, [r3, #2]
 80023be:	8111      	strh	r1, [r2, #8]
 80023c0:	7293      	strb	r3, [r2, #10]
 80023c2:	e035      	b.n	8002430 <ssi_handler+0x14c4>
 80023c4:	20006880 	.word	0x20006880
 80023c8:	0801b864 	.word	0x0801b864
 80023cc:	200007ba 	.word	0x200007ba
 80023d0:	2000174c 	.word	0x2000174c
 80023d4:	0801b888 	.word	0x0801b888
 80023d8:	0801b8b4 	.word	0x0801b8b4
 80023dc:	0801b8d8 	.word	0x0801b8d8
 80023e0:	0801b904 	.word	0x0801b904
 80023e4:	0801b928 	.word	0x0801b928
 80023e8:	0801b954 	.word	0x0801b954
 80023ec:	0801b974 	.word	0x0801b974
 80023f0:	0801b9a0 	.word	0x0801b9a0
 80023f4:	0801b9c4 	.word	0x0801b9c4
		}
		else {
			strcat(listaction, "<option value=\"6\">Months</option>");
 80023f8:	48c9      	ldr	r0, [pc, #804]	; (8002720 <ssi_handler+0x17b4>)
 80023fa:	f7fd fef3 	bl	80001e4 <strlen>
 80023fe:	4603      	mov	r3, r0
 8002400:	461a      	mov	r2, r3
 8002402:	4bc7      	ldr	r3, [pc, #796]	; (8002720 <ssi_handler+0x17b4>)
 8002404:	4413      	add	r3, r2
 8002406:	4ac7      	ldr	r2, [pc, #796]	; (8002724 <ssi_handler+0x17b8>)
 8002408:	4614      	mov	r4, r2
 800240a:	469c      	mov	ip, r3
 800240c:	f104 0e20 	add.w	lr, r4, #32
 8002410:	4665      	mov	r5, ip
 8002412:	4626      	mov	r6, r4
 8002414:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002416:	6028      	str	r0, [r5, #0]
 8002418:	6069      	str	r1, [r5, #4]
 800241a:	60aa      	str	r2, [r5, #8]
 800241c:	60eb      	str	r3, [r5, #12]
 800241e:	3410      	adds	r4, #16
 8002420:	f10c 0c10 	add.w	ip, ip, #16
 8002424:	4574      	cmp	r4, lr
 8002426:	d1f3      	bne.n	8002410 <ssi_handler+0x14a4>
 8002428:	4662      	mov	r2, ip
 800242a:	4623      	mov	r3, r4
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	8013      	strh	r3, [r2, #0]
		}
		if(Tt[tmp_id].t_rept2 == 7) {
 8002430:	4bbd      	ldr	r3, [pc, #756]	; (8002728 <ssi_handler+0x17bc>)
 8002432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002436:	4619      	mov	r1, r3
 8002438:	4abc      	ldr	r2, [pc, #752]	; (800272c <ssi_handler+0x17c0>)
 800243a:	460b      	mov	r3, r1
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	440b      	add	r3, r1
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	3340      	adds	r3, #64	; 0x40
 8002446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244a:	2b07      	cmp	r3, #7
 800244c:	d11f      	bne.n	800248e <ssi_handler+0x1522>
			strcat(listaction, "<option value=\"7\" selected>Years</option>");
 800244e:	48b4      	ldr	r0, [pc, #720]	; (8002720 <ssi_handler+0x17b4>)
 8002450:	f7fd fec8 	bl	80001e4 <strlen>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	4bb1      	ldr	r3, [pc, #708]	; (8002720 <ssi_handler+0x17b4>)
 800245a:	4413      	add	r3, r2
 800245c:	4ab4      	ldr	r2, [pc, #720]	; (8002730 <ssi_handler+0x17c4>)
 800245e:	4614      	mov	r4, r2
 8002460:	469c      	mov	ip, r3
 8002462:	f104 0e20 	add.w	lr, r4, #32
 8002466:	4665      	mov	r5, ip
 8002468:	4626      	mov	r6, r4
 800246a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800246c:	6028      	str	r0, [r5, #0]
 800246e:	6069      	str	r1, [r5, #4]
 8002470:	60aa      	str	r2, [r5, #8]
 8002472:	60eb      	str	r3, [r5, #12]
 8002474:	3410      	adds	r4, #16
 8002476:	f10c 0c10 	add.w	ip, ip, #16
 800247a:	4574      	cmp	r4, lr
 800247c:	d1f3      	bne.n	8002466 <ssi_handler+0x14fa>
 800247e:	4662      	mov	r2, ip
 8002480:	4623      	mov	r3, r4
 8002482:	cb03      	ldmia	r3!, {r0, r1}
 8002484:	6010      	str	r0, [r2, #0]
 8002486:	6051      	str	r1, [r2, #4]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	8113      	strh	r3, [r2, #8]
 800248c:	e01b      	b.n	80024c6 <ssi_handler+0x155a>
		}
		else {
			strcat(listaction, "<option value=\"7\">Years</option>");
 800248e:	48a4      	ldr	r0, [pc, #656]	; (8002720 <ssi_handler+0x17b4>)
 8002490:	f7fd fea8 	bl	80001e4 <strlen>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	4ba1      	ldr	r3, [pc, #644]	; (8002720 <ssi_handler+0x17b4>)
 800249a:	4413      	add	r3, r2
 800249c:	4aa5      	ldr	r2, [pc, #660]	; (8002734 <ssi_handler+0x17c8>)
 800249e:	4614      	mov	r4, r2
 80024a0:	469c      	mov	ip, r3
 80024a2:	f104 0e20 	add.w	lr, r4, #32
 80024a6:	4665      	mov	r5, ip
 80024a8:	4626      	mov	r6, r4
 80024aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80024ac:	6028      	str	r0, [r5, #0]
 80024ae:	6069      	str	r1, [r5, #4]
 80024b0:	60aa      	str	r2, [r5, #8]
 80024b2:	60eb      	str	r3, [r5, #12]
 80024b4:	3410      	adds	r4, #16
 80024b6:	f10c 0c10 	add.w	ip, ip, #16
 80024ba:	4574      	cmp	r4, lr
 80024bc:	d1f3      	bne.n	80024a6 <ssi_handler+0x153a>
 80024be:	4663      	mov	r3, ip
 80024c0:	4622      	mov	r2, r4
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	701a      	strb	r2, [r3, #0]
		}
		sprintf(pcInsert,"%s",listaction);
 80024c6:	4a96      	ldr	r2, [pc, #600]	; (8002720 <ssi_handler+0x17b4>)
 80024c8:	499b      	ldr	r1, [pc, #620]	; (8002738 <ssi_handler+0x17cc>)
 80024ca:	6a38      	ldr	r0, [r7, #32]
 80024cc:	f014 ff7c 	bl	80173c8 <siprintf>
		memset(listaction, '\0', sizeof(listaction)); // Обнулим istaction
 80024d0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80024d4:	2100      	movs	r1, #0
 80024d6:	4892      	ldr	r0, [pc, #584]	; (8002720 <ssi_handler+0x17b4>)
 80024d8:	f014 fa02 	bl	80168e0 <memset>
    	return strlen(pcInsert);
 80024dc:	6a38      	ldr	r0, [r7, #32]
 80024de:	f7fd fe81 	bl	80001e4 <strlen>
 80024e2:	4603      	mov	r3, r0
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	e193      	b.n	8002810 <ssi_handler+0x18a4>
		break;
	case 35: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].t_action == 0){
 80024e8:	4b8f      	ldr	r3, [pc, #572]	; (8002728 <ssi_handler+0x17bc>)
 80024ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ee:	4619      	mov	r1, r3
 80024f0:	4a8e      	ldr	r2, [pc, #568]	; (800272c <ssi_handler+0x17c0>)
 80024f2:	460b      	mov	r3, r1
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	440b      	add	r3, r1
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3318      	adds	r3, #24
 80024fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11d      	bne.n	8002542 <ssi_handler+0x15d6>
			strcat(listaction, "<option value=\"0\" selected>OFF</option>"); // Блок "option" генерируем для HTML
 8002506:	4886      	ldr	r0, [pc, #536]	; (8002720 <ssi_handler+0x17b4>)
 8002508:	f7fd fe6c 	bl	80001e4 <strlen>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	4b83      	ldr	r3, [pc, #524]	; (8002720 <ssi_handler+0x17b4>)
 8002512:	4413      	add	r3, r2
 8002514:	4a89      	ldr	r2, [pc, #548]	; (800273c <ssi_handler+0x17d0>)
 8002516:	4614      	mov	r4, r2
 8002518:	469c      	mov	ip, r3
 800251a:	f104 0e20 	add.w	lr, r4, #32
 800251e:	4665      	mov	r5, ip
 8002520:	4626      	mov	r6, r4
 8002522:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002524:	6028      	str	r0, [r5, #0]
 8002526:	6069      	str	r1, [r5, #4]
 8002528:	60aa      	str	r2, [r5, #8]
 800252a:	60eb      	str	r3, [r5, #12]
 800252c:	3410      	adds	r4, #16
 800252e:	f10c 0c10 	add.w	ip, ip, #16
 8002532:	4574      	cmp	r4, lr
 8002534:	d1f3      	bne.n	800251e <ssi_handler+0x15b2>
 8002536:	4662      	mov	r2, ip
 8002538:	4623      	mov	r3, r4
 800253a:	cb03      	ldmia	r3!, {r0, r1}
 800253c:	6010      	str	r0, [r2, #0]
 800253e:	6051      	str	r1, [r2, #4]
 8002540:	e017      	b.n	8002572 <ssi_handler+0x1606>
		}
		else{
			strcat(listaction, "<option value=\"0\">OFF</option>");
 8002542:	4877      	ldr	r0, [pc, #476]	; (8002720 <ssi_handler+0x17b4>)
 8002544:	f7fd fe4e 	bl	80001e4 <strlen>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	4b74      	ldr	r3, [pc, #464]	; (8002720 <ssi_handler+0x17b4>)
 800254e:	4413      	add	r3, r2
 8002550:	4a7b      	ldr	r2, [pc, #492]	; (8002740 <ssi_handler+0x17d4>)
 8002552:	461d      	mov	r5, r3
 8002554:	4614      	mov	r4, r2
 8002556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002558:	6028      	str	r0, [r5, #0]
 800255a:	6069      	str	r1, [r5, #4]
 800255c:	60aa      	str	r2, [r5, #8]
 800255e:	60eb      	str	r3, [r5, #12]
 8002560:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002562:	6128      	str	r0, [r5, #16]
 8002564:	6169      	str	r1, [r5, #20]
 8002566:	61aa      	str	r2, [r5, #24]
 8002568:	8823      	ldrh	r3, [r4, #0]
 800256a:	78a2      	ldrb	r2, [r4, #2]
 800256c:	83ab      	strh	r3, [r5, #28]
 800256e:	4613      	mov	r3, r2
 8002570:	77ab      	strb	r3, [r5, #30]
		}
		if (Tt[tmp_id].t_action == 1) {
 8002572:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <ssi_handler+0x17bc>)
 8002574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002578:	4619      	mov	r1, r3
 800257a:	4a6c      	ldr	r2, [pc, #432]	; (800272c <ssi_handler+0x17c0>)
 800257c:	460b      	mov	r3, r1
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	440b      	add	r3, r1
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3318      	adds	r3, #24
 8002588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d120      	bne.n	80025d2 <ssi_handler+0x1666>
			strcat(listaction, "<option value=\"1\" selected>ON</option>");
 8002590:	4863      	ldr	r0, [pc, #396]	; (8002720 <ssi_handler+0x17b4>)
 8002592:	f7fd fe27 	bl	80001e4 <strlen>
 8002596:	4603      	mov	r3, r0
 8002598:	461a      	mov	r2, r3
 800259a:	4b61      	ldr	r3, [pc, #388]	; (8002720 <ssi_handler+0x17b4>)
 800259c:	4413      	add	r3, r2
 800259e:	4a69      	ldr	r2, [pc, #420]	; (8002744 <ssi_handler+0x17d8>)
 80025a0:	4614      	mov	r4, r2
 80025a2:	469c      	mov	ip, r3
 80025a4:	f104 0e20 	add.w	lr, r4, #32
 80025a8:	4665      	mov	r5, ip
 80025aa:	4626      	mov	r6, r4
 80025ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80025ae:	6028      	str	r0, [r5, #0]
 80025b0:	6069      	str	r1, [r5, #4]
 80025b2:	60aa      	str	r2, [r5, #8]
 80025b4:	60eb      	str	r3, [r5, #12]
 80025b6:	3410      	adds	r4, #16
 80025b8:	f10c 0c10 	add.w	ip, ip, #16
 80025bc:	4574      	cmp	r4, lr
 80025be:	d1f3      	bne.n	80025a8 <ssi_handler+0x163c>
 80025c0:	4663      	mov	r3, ip
 80025c2:	4622      	mov	r2, r4
 80025c4:	6810      	ldr	r0, [r2, #0]
 80025c6:	6018      	str	r0, [r3, #0]
 80025c8:	8891      	ldrh	r1, [r2, #4]
 80025ca:	7992      	ldrb	r2, [r2, #6]
 80025cc:	8099      	strh	r1, [r3, #4]
 80025ce:	719a      	strb	r2, [r3, #6]
 80025d0:	e014      	b.n	80025fc <ssi_handler+0x1690>
		}
		else {
			strcat(listaction, "<option value=\"1\">ON</option>");
 80025d2:	4853      	ldr	r0, [pc, #332]	; (8002720 <ssi_handler+0x17b4>)
 80025d4:	f7fd fe06 	bl	80001e4 <strlen>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	4b50      	ldr	r3, [pc, #320]	; (8002720 <ssi_handler+0x17b4>)
 80025de:	4413      	add	r3, r2
 80025e0:	4a59      	ldr	r2, [pc, #356]	; (8002748 <ssi_handler+0x17dc>)
 80025e2:	461d      	mov	r5, r3
 80025e4:	4614      	mov	r4, r2
 80025e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e8:	6028      	str	r0, [r5, #0]
 80025ea:	6069      	str	r1, [r5, #4]
 80025ec:	60aa      	str	r2, [r5, #8]
 80025ee:	60eb      	str	r3, [r5, #12]
 80025f0:	cc07      	ldmia	r4!, {r0, r1, r2}
 80025f2:	6128      	str	r0, [r5, #16]
 80025f4:	6169      	str	r1, [r5, #20]
 80025f6:	61aa      	str	r2, [r5, #24]
 80025f8:	8823      	ldrh	r3, [r4, #0]
 80025fa:	83ab      	strh	r3, [r5, #28]
		}

		if (Tt[tmp_id].t_action == 2) {
 80025fc:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <ssi_handler+0x17bc>)
 80025fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002602:	4619      	mov	r1, r3
 8002604:	4a49      	ldr	r2, [pc, #292]	; (800272c <ssi_handler+0x17c0>)
 8002606:	460b      	mov	r3, r1
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	440b      	add	r3, r1
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	3318      	adds	r3, #24
 8002612:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d121      	bne.n	800265e <ssi_handler+0x16f2>
			strcat(listaction, "<option value=\"2\" selected>TOGGLE</option>");
 800261a:	4841      	ldr	r0, [pc, #260]	; (8002720 <ssi_handler+0x17b4>)
 800261c:	f7fd fde2 	bl	80001e4 <strlen>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	4b3e      	ldr	r3, [pc, #248]	; (8002720 <ssi_handler+0x17b4>)
 8002626:	4413      	add	r3, r2
 8002628:	4a48      	ldr	r2, [pc, #288]	; (800274c <ssi_handler+0x17e0>)
 800262a:	4614      	mov	r4, r2
 800262c:	469c      	mov	ip, r3
 800262e:	f104 0e20 	add.w	lr, r4, #32
 8002632:	4665      	mov	r5, ip
 8002634:	4626      	mov	r6, r4
 8002636:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002638:	6028      	str	r0, [r5, #0]
 800263a:	6069      	str	r1, [r5, #4]
 800263c:	60aa      	str	r2, [r5, #8]
 800263e:	60eb      	str	r3, [r5, #12]
 8002640:	3410      	adds	r4, #16
 8002642:	f10c 0c10 	add.w	ip, ip, #16
 8002646:	4574      	cmp	r4, lr
 8002648:	d1f3      	bne.n	8002632 <ssi_handler+0x16c6>
 800264a:	4662      	mov	r2, ip
 800264c:	4623      	mov	r3, r4
 800264e:	cb03      	ldmia	r3!, {r0, r1}
 8002650:	6010      	str	r0, [r2, #0]
 8002652:	6051      	str	r1, [r2, #4]
 8002654:	8819      	ldrh	r1, [r3, #0]
 8002656:	789b      	ldrb	r3, [r3, #2]
 8002658:	8111      	strh	r1, [r2, #8]
 800265a:	7293      	strb	r3, [r2, #10]
 800265c:	e01b      	b.n	8002696 <ssi_handler+0x172a>
		}
		else {
			strcat(listaction, "<option value=\"2\">TOGGLE</option>");
 800265e:	4830      	ldr	r0, [pc, #192]	; (8002720 <ssi_handler+0x17b4>)
 8002660:	f7fd fdc0 	bl	80001e4 <strlen>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <ssi_handler+0x17b4>)
 800266a:	4413      	add	r3, r2
 800266c:	4a38      	ldr	r2, [pc, #224]	; (8002750 <ssi_handler+0x17e4>)
 800266e:	4614      	mov	r4, r2
 8002670:	469c      	mov	ip, r3
 8002672:	f104 0e20 	add.w	lr, r4, #32
 8002676:	4665      	mov	r5, ip
 8002678:	4626      	mov	r6, r4
 800267a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800267c:	6028      	str	r0, [r5, #0]
 800267e:	6069      	str	r1, [r5, #4]
 8002680:	60aa      	str	r2, [r5, #8]
 8002682:	60eb      	str	r3, [r5, #12]
 8002684:	3410      	adds	r4, #16
 8002686:	f10c 0c10 	add.w	ip, ip, #16
 800268a:	4574      	cmp	r4, lr
 800268c:	d1f3      	bne.n	8002676 <ssi_handler+0x170a>
 800268e:	4662      	mov	r2, ip
 8002690:	4623      	mov	r3, r4
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	8013      	strh	r3, [r2, #0]
		}
		sprintf(pcInsert,"%s",listaction);
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <ssi_handler+0x17b4>)
 8002698:	4927      	ldr	r1, [pc, #156]	; (8002738 <ssi_handler+0x17cc>)
 800269a:	6a38      	ldr	r0, [r7, #32]
 800269c:	f014 fe94 	bl	80173c8 <siprintf>
		memset(listaction, '\0', sizeof(listaction)); // Обнулим istaction
 80026a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80026a4:	2100      	movs	r1, #0
 80026a6:	481e      	ldr	r0, [pc, #120]	; (8002720 <ssi_handler+0x17b4>)
 80026a8:	f014 f91a 	bl	80168e0 <memset>
    	return strlen(pcInsert);
 80026ac:	6a38      	ldr	r0, [r7, #32]
 80026ae:	f7fd fd99 	bl	80001e4 <strlen>
 80026b2:	4603      	mov	r3, r0
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	e0ab      	b.n	8002810 <ssi_handler+0x18a4>
		break;

	case 36: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].imm_ly == 1){
 80026b8:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <ssi_handler+0x17bc>)
 80026ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026be:	4619      	mov	r1, r3
 80026c0:	4a1a      	ldr	r2, [pc, #104]	; (800272c <ssi_handler+0x17c0>)
 80026c2:	460b      	mov	r3, r1
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	440b      	add	r3, r1
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	3308      	adds	r3, #8
 80026ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d105      	bne.n	80026e2 <ssi_handler+0x1776>
		sprintf(pcInsert, "%s", "checked");
 80026d6:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <ssi_handler+0x17e8>)
 80026d8:	4917      	ldr	r1, [pc, #92]	; (8002738 <ssi_handler+0x17cc>)
 80026da:	6a38      	ldr	r0, [r7, #32]
 80026dc:	f014 fe74 	bl	80173c8 <siprintf>
 80026e0:	e004      	b.n	80026ec <ssi_handler+0x1780>
		}
		else{
			sprintf(pcInsert, "%s", " ");
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <ssi_handler+0x17ec>)
 80026e4:	4914      	ldr	r1, [pc, #80]	; (8002738 <ssi_handler+0x17cc>)
 80026e6:	6a38      	ldr	r0, [r7, #32]
 80026e8:	f014 fe6e 	bl	80173c8 <siprintf>
		}
		return strlen(pcInsert);
 80026ec:	6a38      	ldr	r0, [r7, #32]
 80026ee:	f7fd fd79 	bl	80001e4 <strlen>
 80026f2:	4603      	mov	r3, r0
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	e08b      	b.n	8002810 <ssi_handler+0x18a4>
		break;

	case 37: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].sunrise == 1){
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <ssi_handler+0x17bc>)
 80026fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026fe:	4619      	mov	r1, r3
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <ssi_handler+0x17c0>)
 8002702:	460b      	mov	r3, r1
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	440b      	add	r3, r1
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	3324      	adds	r3, #36	; 0x24
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d123      	bne.n	800275c <ssi_handler+0x17f0>
		sprintf(pcInsert, "%s", "checked");
 8002714:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <ssi_handler+0x17e8>)
 8002716:	4908      	ldr	r1, [pc, #32]	; (8002738 <ssi_handler+0x17cc>)
 8002718:	6a38      	ldr	r0, [r7, #32]
 800271a:	f014 fe55 	bl	80173c8 <siprintf>
 800271e:	e022      	b.n	8002766 <ssi_handler+0x17fa>
 8002720:	20006880 	.word	0x20006880
 8002724:	0801b9f0 	.word	0x0801b9f0
 8002728:	200007ba 	.word	0x200007ba
 800272c:	2000174c 	.word	0x2000174c
 8002730:	0801ba14 	.word	0x0801ba14
 8002734:	0801ba40 	.word	0x0801ba40
 8002738:	0801b7e8 	.word	0x0801b7e8
 800273c:	0801ba64 	.word	0x0801ba64
 8002740:	0801ba8c 	.word	0x0801ba8c
 8002744:	0801baac 	.word	0x0801baac
 8002748:	0801bad4 	.word	0x0801bad4
 800274c:	0801baf4 	.word	0x0801baf4
 8002750:	0801bb20 	.word	0x0801bb20
 8002754:	0801bb44 	.word	0x0801bb44
 8002758:	0801bb4c 	.word	0x0801bb4c
		}
		else{
			sprintf(pcInsert, "%s", " ");
 800275c:	4a2e      	ldr	r2, [pc, #184]	; (8002818 <ssi_handler+0x18ac>)
 800275e:	492f      	ldr	r1, [pc, #188]	; (800281c <ssi_handler+0x18b0>)
 8002760:	6a38      	ldr	r0, [r7, #32]
 8002762:	f014 fe31 	bl	80173c8 <siprintf>
		}
		return strlen(pcInsert);
 8002766:	6a38      	ldr	r0, [r7, #32]
 8002768:	f7fd fd3c 	bl	80001e4 <strlen>
 800276c:	4603      	mov	r3, r0
 800276e:	b29b      	uxth	r3, r3
 8002770:	e04e      	b.n	8002810 <ssi_handler+0x18a4>
		break;
	case 38: // "SSI" для странички "edit_timers.shtml"
		if(Tt[tmp_id].sunset == 1){
 8002772:	4b2b      	ldr	r3, [pc, #172]	; (8002820 <ssi_handler+0x18b4>)
 8002774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002778:	4619      	mov	r1, r3
 800277a:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <ssi_handler+0x18b8>)
 800277c:	460b      	mov	r3, r1
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	440b      	add	r3, r1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	3328      	adds	r3, #40	; 0x28
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <ssi_handler+0x182e>
		sprintf(pcInsert, "%s", "checked");
 800278e:	4a26      	ldr	r2, [pc, #152]	; (8002828 <ssi_handler+0x18bc>)
 8002790:	4922      	ldr	r1, [pc, #136]	; (800281c <ssi_handler+0x18b0>)
 8002792:	6a38      	ldr	r0, [r7, #32]
 8002794:	f014 fe18 	bl	80173c8 <siprintf>
 8002798:	e004      	b.n	80027a4 <ssi_handler+0x1838>
		}
		else{
			sprintf(pcInsert, "%s", " ");
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <ssi_handler+0x18ac>)
 800279c:	491f      	ldr	r1, [pc, #124]	; (800281c <ssi_handler+0x18b0>)
 800279e:	6a38      	ldr	r0, [r7, #32]
 80027a0:	f014 fe12 	bl	80173c8 <siprintf>
		}
		return strlen(pcInsert);
 80027a4:	6a38      	ldr	r0, [r7, #32]
 80027a6:	f7fd fd1d 	bl	80001e4 <strlen>
 80027aa:	4603      	mov	r3, r0
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	e02f      	b.n	8002810 <ssi_handler+0x18a4>
		break;
	case 39: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Tt[tmp_id].t_group);
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <ssi_handler+0x18b4>)
 80027b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b6:	461a      	mov	r2, r3
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	4413      	add	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	3318      	adds	r3, #24
 80027c2:	4a18      	ldr	r2, [pc, #96]	; (8002824 <ssi_handler+0x18b8>)
 80027c4:	4413      	add	r3, r2
 80027c6:	3302      	adds	r3, #2
 80027c8:	461a      	mov	r2, r3
 80027ca:	4914      	ldr	r1, [pc, #80]	; (800281c <ssi_handler+0x18b0>)
 80027cc:	6a38      	ldr	r0, [r7, #32]
 80027ce:	f014 fdfb 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 80027d2:	6a38      	ldr	r0, [r7, #32]
 80027d4:	f7fd fd06 	bl	80001e4 <strlen>
 80027d8:	4603      	mov	r3, r0
 80027da:	b29b      	uxth	r3, r3
 80027dc:	e018      	b.n	8002810 <ssi_handler+0x18a4>
		break;
	case 40: // "SSI" для странички "Settings"
		sprintf(pcInsert, "%s", Tt[tmp_id].t_info);
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <ssi_handler+0x18b4>)
 80027e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4613      	mov	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	3328      	adds	r3, #40	; 0x28
 80027f0:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <ssi_handler+0x18b8>)
 80027f2:	4413      	add	r3, r2
 80027f4:	3304      	adds	r3, #4
 80027f6:	461a      	mov	r2, r3
 80027f8:	4908      	ldr	r1, [pc, #32]	; (800281c <ssi_handler+0x18b0>)
 80027fa:	6a38      	ldr	r0, [r7, #32]
 80027fc:	f014 fde4 	bl	80173c8 <siprintf>
		return strlen(pcInsert);
 8002800:	6a38      	ldr	r0, [r7, #32]
 8002802:	f7fd fcef 	bl	80001e4 <strlen>
 8002806:	4603      	mov	r3, r0
 8002808:	b29b      	uxth	r3, r3
 800280a:	e001      	b.n	8002810 <ssi_handler+0x18a4>
		break;

	default:
		break;
 800280c:	bf00      	nop
	}
	return 0;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	372c      	adds	r7, #44	; 0x2c
 8002814:	46bd      	mov	sp, r7
 8002816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002818:	0801bb4c 	.word	0x0801bb4c
 800281c:	0801b7e8 	.word	0x0801b7e8
 8002820:	200007ba 	.word	0x200007ba
 8002824:	2000174c 	.word	0x2000174c
 8002828:	0801bb44 	.word	0x0801bb44

0800282c <CGIForm_Handler>:
const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));

//tCGI CGI_TAB[3]; // 3. For LED создадим массив для LED CGI

const char* CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
	//printf("GET OK 1 \n");
	if (iIndex == 0) {
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d120      	bne.n	8002882 <CGIForm_Handler+0x56>
		for (int i = 0; i < iNumParams; i++) {
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	e019      	b.n	800287a <CGIForm_Handler+0x4e>
			if (strcmp(pcParam[i], "jsongo") == 0) // if the fname string is found
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <CGIForm_Handler+0x60>)
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fcbc 	bl	80001d0 <strcmp>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10a      	bne.n	8002874 <CGIForm_Handler+0x48>
					{
				//memset(name, '\0', 30);  // Очищаем массив перед записью новых данных.
				//strcpy(name, pcValue[i]); // Сохраняем значение в переменную.
				jsongo = atoi(pcValue[i]);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	4413      	add	r3, r2
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f013 ffda 	bl	8016822 <atoi>
 800286e:	4603      	mov	r3, r0
 8002870:	4a07      	ldr	r2, [pc, #28]	; (8002890 <CGIForm_Handler+0x64>)
 8002872:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3301      	adds	r3, #1
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	429a      	cmp	r2, r3
 8002880:	dbe1      	blt.n	8002846 <CGIForm_Handler+0x1a>
			}
		}
	}
	return "/json.shtml"; //
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <CGIForm_Handler+0x68>)
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	0801bbbc 	.word	0x0801bbbc
 8002890:	200007c4 	.word	0x200007c4
 8002894:	0801bb50 	.word	0x0801bb50

08002898 <CGIForm_Handler1>:

const char* CGIForm_Handler1(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
	//printf("GET 1 OK  \n");
	if (iIndex == 1 || iIndex == 2 || iIndex == 3) {
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d005      	beq.n	80028b8 <CGIForm_Handler1+0x20>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d002      	beq.n	80028b8 <CGIForm_Handler1+0x20>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d137      	bne.n	8002928 <CGIForm_Handler1+0x90>
		for (int i = 0; i < iNumParams; i++) {
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e030      	b.n	8002920 <CGIForm_Handler1+0x88>
			if (strcmp(pcParam[i], "id") == 0)  // if the fname string is found
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4921      	ldr	r1, [pc, #132]	; (8002950 <CGIForm_Handler1+0xb8>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fc80 	bl	80001d0 <strcmp>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10a      	bne.n	80028ec <CGIForm_Handler1+0x54>
					{
				id = atoi(pcValue[i]);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4413      	add	r3, r2
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f013 ff9e 	bl	8016822 <atoi>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a1a      	ldr	r2, [pc, #104]	; (8002954 <CGIForm_Handler1+0xbc>)
 80028ea:	6013      	str	r3, [r2, #0]
				//printf("+++++++++ %d \n", id);
			}
			if (strcmp(pcParam[i], "tab") == 0)  // if the fname string is found
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4918      	ldr	r1, [pc, #96]	; (8002958 <CGIForm_Handler1+0xc0>)
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fc69 	bl	80001d0 <strcmp>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <CGIForm_Handler1+0x82>
					{
				idtab = atoi(pcValue[i]);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	4413      	add	r3, r2
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f013 ff87 	bl	8016822 <atoi>
 8002914:	4603      	mov	r3, r0
 8002916:	4a11      	ldr	r2, [pc, #68]	; (800295c <CGIForm_Handler1+0xc4>)
 8002918:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < iNumParams; i++) {
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	3301      	adds	r3, #1
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	429a      	cmp	r2, r3
 8002926:	dbca      	blt.n	80028be <CGIForm_Handler1+0x26>
				//printf("+++++++++ %d \n", idtab);
			}
		}
	}
	if (iIndex == 1) {
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <CGIForm_Handler1+0x9a>
		return "/form1.shtml"; //
 800292e:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <CGIForm_Handler1+0xc8>)
 8002930:	e00a      	b.n	8002948 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 2) {
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d101      	bne.n	800293c <CGIForm_Handler1+0xa4>
		return "/form2.shtml";
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <CGIForm_Handler1+0xcc>)
 800293a:	e005      	b.n	8002948 <CGIForm_Handler1+0xb0>
	} else if (iIndex == 3) {
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b03      	cmp	r3, #3
 8002940:	d101      	bne.n	8002946 <CGIForm_Handler1+0xae>
		return "/form3.shtml";
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <CGIForm_Handler1+0xd0>)
 8002944:	e000      	b.n	8002948 <CGIForm_Handler1+0xb0>
	} else {
		return "/404.html";
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <CGIForm_Handler1+0xd4>)
	}
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	0801b1ac 	.word	0x0801b1ac
 8002954:	200007c8 	.word	0x200007c8
 8002958:	0801bbc4 	.word	0x0801bbc4
 800295c:	200007cc 	.word	0x200007cc
 8002960:	0801bb5c 	.word	0x0801bb5c
 8002964:	0801bb6c 	.word	0x0801bb6c
 8002968:	0801bb7c 	.word	0x0801bb7c
 800296c:	0801bbc8 	.word	0x0801bbc8

08002970 <CGIForm_Handler2>:

const char* CGIForm_Handler2(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
	//printf("GET OK 1 \n");
	if (iIndex == 4) {
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d140      	bne.n	8002a06 <CGIForm_Handler2+0x96>
		for (int i = 0; i < iNumParams; i++) {
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	e039      	b.n	80029fe <CGIForm_Handler2+0x8e>
			if (strcmp(pcParam[i], "del") == 0)  // if the fname string is found
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	491e      	ldr	r1, [pc, #120]	; (8002a10 <CGIForm_Handler2+0xa0>)
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fc1a 	bl	80001d0 <strcmp>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d12a      	bne.n	80029f8 <CGIForm_Handler2+0x88>
					{
				id = atoi(pcValue[i]);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f013 ff38 	bl	8016822 <atoi>
 80029b2:	4603      	mov	r3, r0
 80029b4:	4a17      	ldr	r2, [pc, #92]	; (8002a14 <CGIForm_Handler2+0xa4>)
 80029b6:	6013      	str	r3, [r2, #0]
				TO[id].idout = 0;
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <CGIForm_Handler2+0xa4>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4916      	ldr	r1, [pc, #88]	; (8002a18 <CGIForm_Handler2+0xa8>)
 80029be:	4613      	mov	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4413      	add	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3304      	adds	r3, #4
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]
				TO[id].idin = 0;
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <CGIForm_Handler2+0xa4>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4911      	ldr	r1, [pc, #68]	; (8002a18 <CGIForm_Handler2+0xa8>)
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
				TO[id].flag = 0;
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <CGIForm_Handler2+0xa4>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	490c      	ldr	r1, [pc, #48]	; (8002a18 <CGIForm_Handler2+0xa8>)
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3308      	adds	r3, #8
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3301      	adds	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	dbc1      	blt.n	800298a <CGIForm_Handler2+0x1a>
			}
		}
	}
	return "/tab1.shtml"; // Здесь пропишем имя файла из которого берем переменные.
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <CGIForm_Handler2+0xac>)
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	0801bbd4 	.word	0x0801bbd4
 8002a14:	200007c8 	.word	0x200007c8
 8002a18:	20002498 	.word	0x20002498
 8002a1c:	0801bb8c 	.word	0x0801bb8c

08002a20 <CGIForm_Handler3>:

const char* CGIForm_Handler3(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b092      	sub	sp, #72	; 0x48
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
	if (iIndex == 5) // для странички settings
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	f040 832c 	bne.w	800308e <CGIForm_Handler3+0x66e>
			//printf("GET CGI_Handler 5 \n");
			{
		for (int i = 0; i < iNumParams; i++) {
 8002a36:	2300      	movs	r3, #0
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3a:	e323      	b.n	8003084 <CGIForm_Handler3+0x664>
			if (strcmp(pcParam[i], "tlon_de") == 0) // if the "tlat_de" string is found
 8002a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4974      	ldr	r1, [pc, #464]	; (8002c18 <CGIForm_Handler3+0x1f8>)
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fbc1 	bl	80001d0 <strcmp>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d115      	bne.n	8002a80 <CGIForm_Handler3+0x60>
					{
				//memset(&(Settings.lon_de), 0, sizeof(Settings.lon_de));  // Очищаем элимент структуры перед перед записью новых данных.
				//pcValue[i][8] = 0; // Ограничем переменую количеством символов!

				//printf("pcValue[i] is - %s\n\r", pcValue[i]);
				Settings.lon_de = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002a54:	4971      	ldr	r1, [pc, #452]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	e9c1 2300 	strd	r2, r3, [r1]
				Settings.lon_de = atof(pcValue[i]); // Сохраняем значение в переменную.
 8002a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	4413      	add	r3, r2
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f013 fed5 	bl	801681c <atof>
 8002a72:	eeb0 7a40 	vmov.f32	s14, s0
 8002a76:	eef0 7a60 	vmov.f32	s15, s1
 8002a7a:	4b68      	ldr	r3, [pc, #416]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002a7c:	ed83 7b00 	vstr	d7, [r3]
				//printf("Length of line is - %d\n\r", strlen(pcValue[i]));
				//printf("Longitude - %.6F\n\r",Settings.lon_de);
			}
			if (strcmp(pcParam[i], "tlat_de") == 0) // if the "tlat_de" string is found
 8002a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	4413      	add	r3, r2
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4965      	ldr	r1, [pc, #404]	; (8002c20 <CGIForm_Handler3+0x200>)
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fd fb9f 	bl	80001d0 <strcmp>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d115      	bne.n	8002ac4 <CGIForm_Handler3+0xa4>
					{
				//memset(&(Settings.lat_de), 0, sizeof(Settings.lat_de));  // Очищаем элимент структуры перед перед записью новых данных.
				//pcValue[i][8] = 0; // Ограничем переменую количеством символов!

				//printf("pcValue[i] is - %s\n\r", pcValue[i]);
				Settings.lat_de = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002a98:	4960      	ldr	r1, [pc, #384]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9c1 2302 	strd	r2, r3, [r1, #8]
				Settings.lat_de = atof(pcValue[i]); // Сохраняем значение в переменную.
 8002aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f013 feb3 	bl	801681c <atof>
 8002ab6:	eeb0 7a40 	vmov.f32	s14, s0
 8002aba:	eef0 7a60 	vmov.f32	s15, s1
 8002abe:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002ac0:	ed83 7b02 	vstr	d7, [r3, #8]
				//printf("Length of line is - %d\n\r", strlen(pcValue[i]));
				//printf("Latitude - %.6F\n\r",Settings.lat_de);
			}
			if (strcmp(pcParam[i], "mqtt_prt") == 0)  // if the string is found
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4955      	ldr	r1, [pc, #340]	; (8002c24 <CGIForm_Handler3+0x204>)
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fb7d 	bl	80001d0 <strcmp>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10d      	bne.n	8002af8 <CGIForm_Handler3+0xd8>
					{
				Settings.mqtt_prt = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002adc:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
				Settings.mqtt_prt = atoi(pcValue[i]); // Сохраняем значение в переменную.
 8002ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f013 fe98 	bl	8016822 <atoi>
 8002af2:	4603      	mov	r3, r0
 8002af4:	4a49      	ldr	r2, [pc, #292]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002af6:	6113      	str	r3, [r2, #16]
			}
			if (strcmp(pcParam[i], "mqtt_clt") == 0)  // if the string is found
 8002af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4949      	ldr	r1, [pc, #292]	; (8002c28 <CGIForm_Handler3+0x208>)
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fb63 	bl	80001d0 <strcmp>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <CGIForm_Handler3+0xf6>
					{
				//printf("pcParam[i] = '%s'\n", pcParam[i]);
				//printf("pcValue[i] = '%s'\n", pcValue[i]);
				Settings.mqtt_clt[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002b10:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	751a      	strb	r2, [r3, #20]
				//printf("Settings.mqtt_clt = %s\n", Settings.mqtt_clt);
				//Settings.mqtt_clt = pcValue[i]; // Сохраняем значение в переменную.
				//strcpy(Settings.mqtt_clt, pcValue[i]);
				//printf("Settings.mqtt_clt = %s\n", Settings.mqtt_clt);
			}
			if (strcmp(pcParam[i], "mqtt_usr") == 0)  // if the string is found
 8002b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4942      	ldr	r1, [pc, #264]	; (8002c2c <CGIForm_Handler3+0x20c>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fb54 	bl	80001d0 <strcmp>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <CGIForm_Handler3+0x126>
					{
				Settings.mqtt_usr[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	779a      	strb	r2, [r3, #30]
				//Settings.mqtt_usr[10] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqtt_usr, pcValue[i]);
 8002b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	483b      	ldr	r0, [pc, #236]	; (8002c30 <CGIForm_Handler3+0x210>)
 8002b42:	f014 fc7d 	bl	8017440 <strcpy>
			}
			if (strcmp(pcParam[i], "mqt_pswd") == 0)  // if the string is found
 8002b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4938      	ldr	r1, [pc, #224]	; (8002c34 <CGIForm_Handler3+0x214>)
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fb3c 	bl	80001d0 <strcmp>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <CGIForm_Handler3+0x158>
					{
				Settings.mqt_pswd[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002b5e:	4b2f      	ldr	r3, [pc, #188]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				//Settings.mqt_pswd[15] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqt_pswd, pcValue[i]);
 8002b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	4831      	ldr	r0, [pc, #196]	; (8002c38 <CGIForm_Handler3+0x218>)
 8002b74:	f014 fc64 	bl	8017440 <strcpy>
			}
			if (strcmp(pcParam[i], "mqtt_tpc") == 0)  // if the string is found
 8002b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4413      	add	r3, r2
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	492e      	ldr	r1, [pc, #184]	; (8002c3c <CGIForm_Handler3+0x21c>)
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7fd fb23 	bl	80001d0 <strcmp>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10c      	bne.n	8002baa <CGIForm_Handler3+0x18a>
					{
				Settings.mqtt_tpc[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002b90:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
				//Settings.mqtt_tpc[15] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqtt_tpc, pcValue[i]);
 8002b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4826      	ldr	r0, [pc, #152]	; (8002c40 <CGIForm_Handler3+0x220>)
 8002ba6:	f014 fc4b 	bl	8017440 <strcpy>
			}
			if (strcmp(pcParam[i], "mqt_ftpc") == 0)  // if the string is found
 8002baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4923      	ldr	r1, [pc, #140]	; (8002c44 <CGIForm_Handler3+0x224>)
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fd fb0a 	bl	80001d0 <strcmp>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10c      	bne.n	8002bdc <CGIForm_Handler3+0x1bc>
					{
				Settings.mqt_ftpc[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <CGIForm_Handler3+0x1fc>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
				//Settings.mqt_ftpc[15] = pcValue[i]; // Сохраняем значение в переменную.
				strcpy(Settings.mqt_ftpc, pcValue[i]);
 8002bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	481c      	ldr	r0, [pc, #112]	; (8002c48 <CGIForm_Handler3+0x228>)
 8002bd8:	f014 fc32 	bl	8017440 <strcpy>
			}
			if (strcmp(pcParam[i], "ip_addr") == 0)  // if the string is found
 8002bdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4413      	add	r3, r2
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4919      	ldr	r1, [pc, #100]	; (8002c4c <CGIForm_Handler3+0x22c>)
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd faf1 	bl	80001d0 <strcmp>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 809b 	bne.w	8002d2c <CGIForm_Handler3+0x30c>
					{
				//printf("pcParam[i] = '%s'\n", pcParam[i]);
				//printf("pcValue[i] = '%s'\n", pcValue[i]);
				char delim[] = ".";
 8002bf6:	232e      	movs	r3, #46	; 0x2e
 8002bf8:	843b      	strh	r3, [r7, #32]
				int k = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	643b      	str	r3, [r7, #64]	; 0x40
				char *ptr = strtok(pcValue[i], delim);
 8002bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	4413      	add	r3, r2
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f107 0220 	add.w	r2, r7, #32
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f015 fa8c 	bl	801812c <strtok>
 8002c14:	63f8      	str	r0, [r7, #60]	; 0x3c
				while (ptr != NULL) {
 8002c16:	e086      	b.n	8002d26 <CGIForm_Handler3+0x306>
 8002c18:	0801b084 	.word	0x0801b084
 8002c1c:	20000490 	.word	0x20000490
 8002c20:	0801b08c 	.word	0x0801b08c
 8002c24:	0801b094 	.word	0x0801b094
 8002c28:	0801b0a0 	.word	0x0801b0a0
 8002c2c:	0801b0ac 	.word	0x0801b0ac
 8002c30:	200004ae 	.word	0x200004ae
 8002c34:	0801b0b8 	.word	0x0801b0b8
 8002c38:	200004b8 	.word	0x200004b8
 8002c3c:	0801b0c4 	.word	0x0801b0c4
 8002c40:	200004c7 	.word	0x200004c7
 8002c44:	0801b0d0 	.word	0x0801b0d0
 8002c48:	200004d6 	.word	0x200004d6
 8002c4c:	0801bbd8 	.word	0x0801bbd8
					if (k == 0) {
 8002c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d115      	bne.n	8002c82 <CGIForm_Handler3+0x262>
						//printf("k0 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr0 = 0;// Очищаем элимент структуры перед перед записью новых данных.
 8002c56:	4b8a      	ldr	r3, [pc, #552]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
						Settings.ip_addr0 = atoi(ptr);	// Сохраняю в переменную
 8002c5e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c60:	f013 fddf 	bl	8016822 <atoi>
 8002c64:	4603      	mov	r3, r0
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	4b85      	ldr	r3, [pc, #532]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002c6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
						//printf("Settings.ip_addr0 = %d\n", Settings.ip_addr0);
						ptr = strtok(NULL, delim);
 8002c6e:	f107 0320 	add.w	r3, r7, #32
 8002c72:	4619      	mov	r1, r3
 8002c74:	2000      	movs	r0, #0
 8002c76:	f015 fa59 	bl	801812c <strtok>
 8002c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 8002c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7e:	3301      	adds	r3, #1
 8002c80:	643b      	str	r3, [r7, #64]	; 0x40
					}
					if (k == 1) {
 8002c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d115      	bne.n	8002cb4 <CGIForm_Handler3+0x294>
						//printf("k1 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002c88:	4b7d      	ldr	r3, [pc, #500]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						Settings.ip_addr1 = atoi(ptr); // Сохраняю в переменную
 8002c90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c92:	f013 fdc6 	bl	8016822 <atoi>
 8002c96:	4603      	mov	r3, r0
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	4b79      	ldr	r3, [pc, #484]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002c9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						//printf("Settings.ip_addr1 = %d\n", Settings.ip_addr1);
						ptr = strtok(NULL, delim);
 8002ca0:	f107 0320 	add.w	r3, r7, #32
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f015 fa40 	bl	801812c <strtok>
 8002cac:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 8002cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	643b      	str	r3, [r7, #64]	; 0x40
					}
					if (k == 2) {
 8002cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d115      	bne.n	8002ce6 <CGIForm_Handler3+0x2c6>
						//printf("k2 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002cba:	4b71      	ldr	r3, [pc, #452]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
						Settings.ip_addr2 = atoi(ptr); // Сохраняю в переменную
 8002cc2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002cc4:	f013 fdad 	bl	8016822 <atoi>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	4b6c      	ldr	r3, [pc, #432]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002cce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
						//printf("Settings.ip_addr2 = %d\n", Settings.ip_addr2);
						ptr = strtok(NULL, delim);
 8002cd2:	f107 0320 	add.w	r3, r7, #32
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f015 fa27 	bl	801812c <strtok>
 8002cde:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 8002ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	643b      	str	r3, [r7, #64]	; 0x40
					}
					if (k == 3) {
 8002ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d115      	bne.n	8002d18 <CGIForm_Handler3+0x2f8>
						//printf("k3 - %d\n", k);
						//printf("ptr - %s\n", ptr);
						Settings.ip_addr3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002cec:	4b64      	ldr	r3, [pc, #400]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
						Settings.ip_addr3 = atoi(ptr); // Сохраняю в переменную
 8002cf4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002cf6:	f013 fd94 	bl	8016822 <atoi>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	b21a      	sxth	r2, r3
 8002cfe:	4b60      	ldr	r3, [pc, #384]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002d00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
						//printf("Settings.ip_addr3 = %d\n", Settings.ip_addr3);
						ptr = strtok(NULL, delim);
 8002d04:	f107 0320 	add.w	r3, r7, #32
 8002d08:	4619      	mov	r1, r3
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f015 fa0e 	bl	801812c <strtok>
 8002d10:	63f8      	str	r0, [r7, #60]	; 0x3c
						k++;
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	3301      	adds	r3, #1
 8002d16:	643b      	str	r3, [r7, #64]	; 0x40
					}
					ptr = strtok(NULL, delim);
 8002d18:	f107 0320 	add.w	r3, r7, #32
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f015 fa04 	bl	801812c <strtok>
 8002d24:	63f8      	str	r0, [r7, #60]	; 0x3c
				while (ptr != NULL) {
 8002d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d191      	bne.n	8002c50 <CGIForm_Handler3+0x230>
				}
			}
			if (strcmp(pcParam[i], "sb_mask") == 0)  // if the string is found
 8002d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	4413      	add	r3, r2
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4953      	ldr	r1, [pc, #332]	; (8002e84 <CGIForm_Handler3+0x464>)
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fa49 	bl	80001d0 <strcmp>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d17e      	bne.n	8002e42 <CGIForm_Handler3+0x422>
					{
				char delim[] = ".";
 8002d44:	232e      	movs	r3, #46	; 0x2e
 8002d46:	83bb      	strh	r3, [r7, #28]
				int k = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	63bb      	str	r3, [r7, #56]	; 0x38
				char *ptr = strtok(pcValue[i], delim);
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	4413      	add	r3, r2
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f107 021c 	add.w	r2, r7, #28
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f015 f9e5 	bl	801812c <strtok>
 8002d62:	6378      	str	r0, [r7, #52]	; 0x34

				while (ptr != NULL) {
 8002d64:	e06a      	b.n	8002e3c <CGIForm_Handler3+0x41c>
					if (k == 0) {
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d115      	bne.n	8002d98 <CGIForm_Handler3+0x378>
						Settings.sb_mask0 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002d6c:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
						Settings.sb_mask0 = atoi(ptr);  // Сохраняю в переменную
 8002d74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d76:	f013 fd54 	bl	8016822 <atoi>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	b21a      	sxth	r2, r3
 8002d7e:	4b40      	ldr	r3, [pc, #256]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002d80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
						ptr = strtok(NULL, delim);
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	4619      	mov	r1, r3
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f015 f9ce 	bl	801812c <strtok>
 8002d90:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	3301      	adds	r3, #1
 8002d96:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					if (k == 1) {
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d115      	bne.n	8002dca <CGIForm_Handler3+0x3aa>
						Settings.sb_mask1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002d9e:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
						Settings.sb_mask1 = atoi(ptr); // Сохраняю в переменную
 8002da6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002da8:	f013 fd3b 	bl	8016822 <atoi>
 8002dac:	4603      	mov	r3, r0
 8002dae:	b21a      	sxth	r2, r3
 8002db0:	4b33      	ldr	r3, [pc, #204]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002db2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
						ptr = strtok(NULL, delim);
 8002db6:	f107 031c 	add.w	r3, r7, #28
 8002dba:	4619      	mov	r1, r3
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f015 f9b5 	bl	801812c <strtok>
 8002dc2:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					if (k == 2) {
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d115      	bne.n	8002dfc <CGIForm_Handler3+0x3dc>
						Settings.sb_mask2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
						Settings.sb_mask2 = atoi(ptr); // Сохраняю в переменную
 8002dd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dda:	f013 fd22 	bl	8016822 <atoi>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b21a      	sxth	r2, r3
 8002de2:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002de4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
						ptr = strtok(NULL, delim);
 8002de8:	f107 031c 	add.w	r3, r7, #28
 8002dec:	4619      	mov	r1, r3
 8002dee:	2000      	movs	r0, #0
 8002df0:	f015 f99c 	bl	801812c <strtok>
 8002df4:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	3301      	adds	r3, #1
 8002dfa:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					if (k == 3) {
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d115      	bne.n	8002e2e <CGIForm_Handler3+0x40e>
						Settings.sb_mask3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002e02:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
						Settings.sb_mask3 = atoi(ptr); // Сохраняю в переменную
 8002e0a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e0c:	f013 fd09 	bl	8016822 <atoi>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <CGIForm_Handler3+0x460>)
 8002e16:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
						ptr = strtok(NULL, delim);
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	2000      	movs	r0, #0
 8002e22:	f015 f983 	bl	801812c <strtok>
 8002e26:	6378      	str	r0, [r7, #52]	; 0x34
						k++;
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
					}
					ptr = strtok(NULL, delim);
 8002e2e:	f107 031c 	add.w	r3, r7, #28
 8002e32:	4619      	mov	r1, r3
 8002e34:	2000      	movs	r0, #0
 8002e36:	f015 f979 	bl	801812c <strtok>
 8002e3a:	6378      	str	r0, [r7, #52]	; 0x34
				while (ptr != NULL) {
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d191      	bne.n	8002d66 <CGIForm_Handler3+0x346>
				}
			}
			if (strcmp(pcParam[i], "gateway") == 0)  // if the string is found
 8002e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	490e      	ldr	r1, [pc, #56]	; (8002e88 <CGIForm_Handler3+0x468>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fd f9be 	bl	80001d0 <strcmp>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	f040 8086 	bne.w	8002f68 <CGIForm_Handler3+0x548>
					{
				char delim[] = ".";
 8002e5c:	232e      	movs	r3, #46	; 0x2e
 8002e5e:	833b      	strh	r3, [r7, #24]
				int k = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	633b      	str	r3, [r7, #48]	; 0x30
				char *ptr = strtok(pcValue[i], delim);
 8002e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f107 0218 	add.w	r2, r7, #24
 8002e72:	4611      	mov	r1, r2
 8002e74:	4618      	mov	r0, r3
 8002e76:	f015 f959 	bl	801812c <strtok>
 8002e7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (ptr != NULL) {
 8002e7c:	e071      	b.n	8002f62 <CGIForm_Handler3+0x542>
 8002e7e:	bf00      	nop
 8002e80:	20000490 	.word	0x20000490
 8002e84:	0801bbe0 	.word	0x0801bbe0
 8002e88:	0801bbe8 	.word	0x0801bbe8
					if (k == 0) {
 8002e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d115      	bne.n	8002ebe <CGIForm_Handler3+0x49e>
						Settings.gateway0 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002e92:	4b81      	ldr	r3, [pc, #516]	; (8003098 <CGIForm_Handler3+0x678>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
						Settings.gateway0 = atoi(ptr);  // Сохраняю в переменную
 8002e9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e9c:	f013 fcc1 	bl	8016822 <atoi>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	b21a      	sxth	r2, r3
 8002ea4:	4b7c      	ldr	r3, [pc, #496]	; (8003098 <CGIForm_Handler3+0x678>)
 8002ea6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
						ptr = strtok(NULL, delim);
 8002eaa:	f107 0318 	add.w	r3, r7, #24
 8002eae:	4619      	mov	r1, r3
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f015 f93b 	bl	801812c <strtok>
 8002eb6:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eba:	3301      	adds	r3, #1
 8002ebc:	633b      	str	r3, [r7, #48]	; 0x30
					}
					if (k == 1) {
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d115      	bne.n	8002ef0 <CGIForm_Handler3+0x4d0>
						Settings.gateway1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002ec4:	4b74      	ldr	r3, [pc, #464]	; (8003098 <CGIForm_Handler3+0x678>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						Settings.gateway1 = atoi(ptr); // Сохраняю в переменную
 8002ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ece:	f013 fca8 	bl	8016822 <atoi>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	b21a      	sxth	r2, r3
 8002ed6:	4b70      	ldr	r3, [pc, #448]	; (8003098 <CGIForm_Handler3+0x678>)
 8002ed8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
						ptr = strtok(NULL, delim);
 8002edc:	f107 0318 	add.w	r3, r7, #24
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f015 f922 	bl	801812c <strtok>
 8002ee8:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eec:	3301      	adds	r3, #1
 8002eee:	633b      	str	r3, [r7, #48]	; 0x30
					}
					if (k == 2) {
 8002ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d115      	bne.n	8002f22 <CGIForm_Handler3+0x502>
						Settings.gateway2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002ef6:	4b68      	ldr	r3, [pc, #416]	; (8003098 <CGIForm_Handler3+0x678>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						Settings.gateway2 = atoi(ptr); // Сохраняю в переменную
 8002efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f00:	f013 fc8f 	bl	8016822 <atoi>
 8002f04:	4603      	mov	r3, r0
 8002f06:	b21a      	sxth	r2, r3
 8002f08:	4b63      	ldr	r3, [pc, #396]	; (8003098 <CGIForm_Handler3+0x678>)
 8002f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
						ptr = strtok(NULL, delim);
 8002f0e:	f107 0318 	add.w	r3, r7, #24
 8002f12:	4619      	mov	r1, r3
 8002f14:	2000      	movs	r0, #0
 8002f16:	f015 f909 	bl	801812c <strtok>
 8002f1a:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1e:	3301      	adds	r3, #1
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
					}
					if (k == 3) {
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d115      	bne.n	8002f54 <CGIForm_Handler3+0x534>
						Settings.gateway3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002f28:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <CGIForm_Handler3+0x678>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
						Settings.gateway3 = atoi(ptr); // Сохраняю в переменную
 8002f30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f32:	f013 fc76 	bl	8016822 <atoi>
 8002f36:	4603      	mov	r3, r0
 8002f38:	b21a      	sxth	r2, r3
 8002f3a:	4b57      	ldr	r3, [pc, #348]	; (8003098 <CGIForm_Handler3+0x678>)
 8002f3c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
						ptr = strtok(NULL, delim);
 8002f40:	f107 0318 	add.w	r3, r7, #24
 8002f44:	4619      	mov	r1, r3
 8002f46:	2000      	movs	r0, #0
 8002f48:	f015 f8f0 	bl	801812c <strtok>
 8002f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
						k++;
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	3301      	adds	r3, #1
 8002f52:	633b      	str	r3, [r7, #48]	; 0x30
					}
					ptr = strtok(NULL, delim);
 8002f54:	f107 0318 	add.w	r3, r7, #24
 8002f58:	4619      	mov	r1, r3
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f015 f8e6 	bl	801812c <strtok>
 8002f60:	62f8      	str	r0, [r7, #44]	; 0x2c
				while (ptr != NULL) {
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d191      	bne.n	8002e8c <CGIForm_Handler3+0x46c>
				}
			}
			if (strcmp(pcParam[i], "mqt_hst") == 0)  // if the string is found
 8002f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	494a      	ldr	r1, [pc, #296]	; (800309c <CGIForm_Handler3+0x67c>)
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd f92b 	bl	80001d0 <strcmp>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d17e      	bne.n	800307e <CGIForm_Handler3+0x65e>
					{
				char delim[] = ".";
 8002f80:	232e      	movs	r3, #46	; 0x2e
 8002f82:	82bb      	strh	r3, [r7, #20]
				int k = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28
				char *ptr = strtok(pcValue[i], delim);
 8002f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	4413      	add	r3, r2
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f107 0214 	add.w	r2, r7, #20
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f015 f8c7 	bl	801812c <strtok>
 8002f9e:	6278      	str	r0, [r7, #36]	; 0x24
				while (ptr != NULL) {
 8002fa0:	e06a      	b.n	8003078 <CGIForm_Handler3+0x658>
					if (k == 0) {
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d115      	bne.n	8002fd4 <CGIForm_Handler3+0x5b4>
						Settings.mqt_hst0 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002fa8:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <CGIForm_Handler3+0x678>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
						Settings.mqt_hst0 = atoi(ptr);  // Сохраняю в переменную
 8002fb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fb2:	f013 fc36 	bl	8016822 <atoi>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	b21a      	sxth	r2, r3
 8002fba:	4b37      	ldr	r3, [pc, #220]	; (8003098 <CGIForm_Handler3+0x678>)
 8002fbc:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
						ptr = strtok(NULL, delim);
 8002fc0:	f107 0314 	add.w	r3, r7, #20
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f015 f8b0 	bl	801812c <strtok>
 8002fcc:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					if (k == 1) {
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d115      	bne.n	8003006 <CGIForm_Handler3+0x5e6>
						Settings.mqt_hst1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8002fda:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <CGIForm_Handler3+0x678>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
						Settings.mqt_hst1 = atoi(ptr); // Сохраняю в переменную
 8002fe2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fe4:	f013 fc1d 	bl	8016822 <atoi>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	b21a      	sxth	r2, r3
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <CGIForm_Handler3+0x678>)
 8002fee:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
						ptr = strtok(NULL, delim);
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f015 f897 	bl	801812c <strtok>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	3301      	adds	r3, #1
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					if (k == 2) {
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	2b02      	cmp	r3, #2
 800300a:	d115      	bne.n	8003038 <CGIForm_Handler3+0x618>
						Settings.mqt_hst2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <CGIForm_Handler3+0x678>)
 800300e:	2200      	movs	r2, #0
 8003010:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
						Settings.mqt_hst2 = atoi(ptr); // Сохраняю в переменную
 8003014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003016:	f013 fc04 	bl	8016822 <atoi>
 800301a:	4603      	mov	r3, r0
 800301c:	b21a      	sxth	r2, r3
 800301e:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <CGIForm_Handler3+0x678>)
 8003020:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
						ptr = strtok(NULL, delim);
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4619      	mov	r1, r3
 800302a:	2000      	movs	r0, #0
 800302c:	f015 f87e 	bl	801812c <strtok>
 8003030:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	3301      	adds	r3, #1
 8003036:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					if (k == 3) {
 8003038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303a:	2b03      	cmp	r3, #3
 800303c:	d115      	bne.n	800306a <CGIForm_Handler3+0x64a>
						Settings.mqt_hst3 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800303e:	4b16      	ldr	r3, [pc, #88]	; (8003098 <CGIForm_Handler3+0x678>)
 8003040:	2200      	movs	r2, #0
 8003042:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
						Settings.mqt_hst3 = atoi(ptr); // Сохраняю в переменную
 8003046:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003048:	f013 fbeb 	bl	8016822 <atoi>
 800304c:	4603      	mov	r3, r0
 800304e:	b21a      	sxth	r2, r3
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <CGIForm_Handler3+0x678>)
 8003052:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
						ptr = strtok(NULL, delim);
 8003056:	f107 0314 	add.w	r3, r7, #20
 800305a:	4619      	mov	r1, r3
 800305c:	2000      	movs	r0, #0
 800305e:	f015 f865 	bl	801812c <strtok>
 8003062:	6278      	str	r0, [r7, #36]	; 0x24
						k++;
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	3301      	adds	r3, #1
 8003068:	62bb      	str	r3, [r7, #40]	; 0x28
					}
					ptr = strtok(NULL, delim);
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	4619      	mov	r1, r3
 8003070:	2000      	movs	r0, #0
 8003072:	f015 f85b 	bl	801812c <strtok>
 8003076:	6278      	str	r0, [r7, #36]	; 0x24
				while (ptr != NULL) {
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	2b00      	cmp	r3, #0
 800307c:	d191      	bne.n	8002fa2 <CGIForm_Handler3+0x582>
		for (int i = 0; i < iNumParams; i++) {
 800307e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003080:	3301      	adds	r3, #1
 8003082:	647b      	str	r3, [r7, #68]	; 0x44
 8003084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	429a      	cmp	r2, r3
 800308a:	f6ff acd7 	blt.w	8002a3c <CGIForm_Handler3+0x1c>
				}
			}
		}
	}
	return "/settings.shtml"; //
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <CGIForm_Handler3+0x680>)
}
 8003090:	4618      	mov	r0, r3
 8003092:	3748      	adds	r7, #72	; 0x48
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	20000490 	.word	0x20000490
 800309c:	0801bbf0 	.word	0x0801bbf0
 80030a0:	0801bb98 	.word	0x0801bb98

080030a4 <CGIForm_Handler4>:

const char* CGIForm_Handler4(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) // Для странички Edit Timers
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
	//printf("iIndex %d\n", iIndex);
	if (iIndex == 6) // Для странички Edit Timers
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b06      	cmp	r3, #6
 80030b6:	f040 8310 	bne.w	80036da <CGIForm_Handler4+0x636>
			//printf("GET CGI_Handler 6 \n");
			{
		//printf("iNumParams %d\n",iNumParams);
		for (int i = 0; i < iNumParams; i++) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	e307      	b.n	80036d0 <CGIForm_Handler4+0x62c>

			//printf("tmp_id %d\n",tmp_id);
			//printf("pcParam[i] = %s pcValue[i] %s\n", pcParam[i], pcValue[i]); // смотрим, что прилитело.
			// От формы GET запрос1
			if (strcmp(pcParam[i], "id_id") == 0) // if the "pins" string is found
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	49bb      	ldr	r1, [pc, #748]	; (80033b8 <CGIForm_Handler4+0x314>)
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd f87f 	bl	80001d0 <strcmp>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d12d      	bne.n	8003134 <CGIForm_Handler4+0x90>
					{
				tmp_id = atoi(pcValue[i]);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f013 fb9d 	bl	8016822 <atoi>
 80030e8:	4603      	mov	r3, r0
 80030ea:	b21a      	sxth	r2, r3
 80030ec:	4bb3      	ldr	r3, [pc, #716]	; (80033bc <CGIForm_Handler4+0x318>)
 80030ee:	801a      	strh	r2, [r3, #0]
				//printf("tmp_id = %d\n", tmp_id);
				Tt[tmp_id].id = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80030f0:	4bb2      	ldr	r3, [pc, #712]	; (80033bc <CGIForm_Handler4+0x318>)
 80030f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4ab1      	ldr	r2, [pc, #708]	; (80033c0 <CGIForm_Handler4+0x31c>)
 80030fa:	460b      	mov	r3, r1
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	440b      	add	r3, r1
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	2200      	movs	r2, #0
 8003106:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].id = atoi(pcValue[i]); // Сохраняю в переменную
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4413      	add	r3, r2
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f013 fb85 	bl	8016822 <atoi>
 8003118:	4602      	mov	r2, r0
 800311a:	4ba8      	ldr	r3, [pc, #672]	; (80033bc <CGIForm_Handler4+0x318>)
 800311c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003120:	4619      	mov	r1, r3
 8003122:	b210      	sxth	r0, r2
 8003124:	4aa6      	ldr	r2, [pc, #664]	; (80033c0 <CGIForm_Handler4+0x31c>)
 8003126:	460b      	mov	r3, r1
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	440b      	add	r3, r1
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	4602      	mov	r2, r0
 8003132:	801a      	strh	r2, [r3, #0]
				//printf("ID = %d\n", Tt[tmp_id].id);
			}
			// От формы GET запрос2
			if (strcmp(pcParam[i], "id") == 0)  // if the "id" string is found
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	49a1      	ldr	r1, [pc, #644]	; (80033c4 <CGIForm_Handler4+0x320>)
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd f845 	bl	80001d0 <strcmp>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d11a      	bne.n	8003182 <CGIForm_Handler4+0xde>
					{
				tmp_id = atoi(pcValue[i]);
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	4413      	add	r3, r2
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f013 fb63 	bl	8016822 <atoi>
 800315c:	4603      	mov	r3, r0
 800315e:	b21a      	sxth	r2, r3
 8003160:	4b96      	ldr	r3, [pc, #600]	; (80033bc <CGIForm_Handler4+0x318>)
 8003162:	801a      	strh	r2, [r3, #0]
				t_id = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003164:	4b98      	ldr	r3, [pc, #608]	; (80033c8 <CGIForm_Handler4+0x324>)
 8003166:	2200      	movs	r2, #0
 8003168:	801a      	strh	r2, [r3, #0]
				t_id = atoi(pcValue[i]); // Сохраняю в переменную
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4413      	add	r3, r2
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f013 fb54 	bl	8016822 <atoi>
 800317a:	4603      	mov	r3, r0
 800317c:	b21a      	sxth	r2, r3
 800317e:	4b92      	ldr	r3, [pc, #584]	; (80033c8 <CGIForm_Handler4+0x324>)
 8003180:	801a      	strh	r2, [r3, #0]
				//printf("id ID = %d\n", Tt[tmp_id].id);
				//printf("id = %d\n", t_id);
			}
			if (strcmp(pcParam[i], "s_dt") == 0 && tmp_id != 0) // if the "s_dt" string is found
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	498f      	ldr	r1, [pc, #572]	; (80033cc <CGIForm_Handler4+0x328>)
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd f81e 	bl	80001d0 <strcmp>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d126      	bne.n	80031e8 <CGIForm_Handler4+0x144>
 800319a:	4b88      	ldr	r3, [pc, #544]	; (80033bc <CGIForm_Handler4+0x318>)
 800319c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d021      	beq.n	80031e8 <CGIForm_Handler4+0x144>
					{
				Tt[tmp_id].s_dt = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80031a4:	4b85      	ldr	r3, [pc, #532]	; (80033bc <CGIForm_Handler4+0x318>)
 80031a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031aa:	4619      	mov	r1, r3
 80031ac:	4a84      	ldr	r2, [pc, #528]	; (80033c0 <CGIForm_Handler4+0x31c>)
 80031ae:	460b      	mov	r3, r1
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	440b      	add	r3, r1
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	330c      	adds	r3, #12
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].s_dt = atoi(pcValue[i]); // Сохраняю в переменную
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	4413      	add	r3, r2
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a7c      	ldr	r2, [pc, #496]	; (80033bc <CGIForm_Handler4+0x318>)
 80031ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 80031ce:	4614      	mov	r4, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f013 fb26 	bl	8016822 <atoi>
 80031d6:	4602      	mov	r2, r0
 80031d8:	4979      	ldr	r1, [pc, #484]	; (80033c0 <CGIForm_Handler4+0x31c>)
 80031da:	4623      	mov	r3, r4
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	4423      	add	r3, r4
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	330c      	adds	r3, #12
 80031e6:	601a      	str	r2, [r3, #0]
				//printf("s_dt ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].s_dt = %d\n", Tt[tmp_id].s_dt);
			}
			if (strcmp(pcParam[i], "e_dt") == 0 && tmp_id != 0) // if the "e_dt" string is found
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4977      	ldr	r1, [pc, #476]	; (80033d0 <CGIForm_Handler4+0x32c>)
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fc ffeb 	bl	80001d0 <strcmp>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d126      	bne.n	800324e <CGIForm_Handler4+0x1aa>
 8003200:	4b6e      	ldr	r3, [pc, #440]	; (80033bc <CGIForm_Handler4+0x318>)
 8003202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d021      	beq.n	800324e <CGIForm_Handler4+0x1aa>
					{
				Tt[tmp_id].e_dt = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800320a:	4b6c      	ldr	r3, [pc, #432]	; (80033bc <CGIForm_Handler4+0x318>)
 800320c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003210:	4619      	mov	r1, r3
 8003212:	4a6b      	ldr	r2, [pc, #428]	; (80033c0 <CGIForm_Handler4+0x31c>)
 8003214:	460b      	mov	r3, r1
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	440b      	add	r3, r1
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	3310      	adds	r3, #16
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].e_dt = atoi(pcValue[i]); // Сохраняю в переменную
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	4413      	add	r3, r2
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a63      	ldr	r2, [pc, #396]	; (80033bc <CGIForm_Handler4+0x318>)
 8003230:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003234:	4614      	mov	r4, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f013 faf3 	bl	8016822 <atoi>
 800323c:	4602      	mov	r2, r0
 800323e:	4960      	ldr	r1, [pc, #384]	; (80033c0 <CGIForm_Handler4+0x31c>)
 8003240:	4623      	mov	r3, r4
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	4423      	add	r3, r4
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	3310      	adds	r3, #16
 800324c:	601a      	str	r2, [r3, #0]
				//printf("e_dt ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].e_dt = %d\n", Tt[tmp_id].e_dt);
			}
			if (strcmp(pcParam[i], "pin_pin") == 0 && tmp_id != 0) // Переход от таблиц к форме
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	495e      	ldr	r1, [pc, #376]	; (80033d4 <CGIForm_Handler4+0x330>)
 800325a:	4618      	mov	r0, r3
 800325c:	f7fc ffb8 	bl	80001d0 <strcmp>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d124      	bne.n	80032b0 <CGIForm_Handler4+0x20c>
 8003266:	4b55      	ldr	r3, [pc, #340]	; (80033bc <CGIForm_Handler4+0x318>)
 8003268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01f      	beq.n	80032b0 <CGIForm_Handler4+0x20c>
					{
				Tt[tmp_id].pins[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
 8003270:	4b52      	ldr	r3, [pc, #328]	; (80033bc <CGIForm_Handler4+0x318>)
 8003272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003276:	4619      	mov	r1, r3
 8003278:	4a51      	ldr	r2, [pc, #324]	; (80033c0 <CGIForm_Handler4+0x31c>)
 800327a:	460b      	mov	r3, r1
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	440b      	add	r3, r1
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	3302      	adds	r3, #2
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
				strcpy(Tt[tmp_id].pins, pcValue[i]); // Сохраняю в переменную
 800328a:	4b4c      	ldr	r3, [pc, #304]	; (80033bc <CGIForm_Handler4+0x318>)
 800328c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003290:	461a      	mov	r2, r3
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4a49      	ldr	r2, [pc, #292]	; (80033c0 <CGIForm_Handler4+0x31c>)
 800329c:	4413      	add	r3, r2
 800329e:	1c98      	adds	r0, r3, #2
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	4413      	add	r3, r2
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4619      	mov	r1, r3
 80032ac:	f014 f8c8 	bl	8017440 <strcpy>
				//printf("pin_pin ID = %d\n", Tt[tmp_id].id);
				//printf("PINS = %s\n", Tt[tmp_id].pins);
			}
			// От таблицы к форме GET запрос

			if (strcmp(pcParam[i], "pin") == 0) {
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4947      	ldr	r1, [pc, #284]	; (80033d8 <CGIForm_Handler4+0x334>)
 80032bc:	4618      	mov	r0, r3
 80032be:	f7fc ff87 	bl	80001d0 <strcmp>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10d      	bne.n	80032e4 <CGIForm_Handler4+0x240>
				//pins[0] = 0; // Очищаем элимент структуры перед перед записью новых данных.
				memset(&pins, '\0', sizeof(pins));
 80032c8:	2205      	movs	r2, #5
 80032ca:	2100      	movs	r1, #0
 80032cc:	4843      	ldr	r0, [pc, #268]	; (80033dc <CGIForm_Handler4+0x338>)
 80032ce:	f013 fb07 	bl	80168e0 <memset>
				strcpy(pins, pcValue[i]); // Сохраняю в переменную
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	483f      	ldr	r0, [pc, #252]	; (80033dc <CGIForm_Handler4+0x338>)
 80032e0:	f014 f8ae 	bl	8017440 <strcpy>
				//printf("pin ID = %d\n", Tt[tmp_id].id);
				//printf("pin = %s\n", pins);
			}
			if (strcmp(pcParam[i], "h_repeat") == 0 && tmp_id != 0) // if the "t_repeat" string is found
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4413      	add	r3, r2
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	493c      	ldr	r1, [pc, #240]	; (80033e0 <CGIForm_Handler4+0x33c>)
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fc ff6d 	bl	80001d0 <strcmp>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d126      	bne.n	800334a <CGIForm_Handler4+0x2a6>
 80032fc:	4b2f      	ldr	r3, [pc, #188]	; (80033bc <CGIForm_Handler4+0x318>)
 80032fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d021      	beq.n	800334a <CGIForm_Handler4+0x2a6>
					{
				Tt[tmp_id].t_repeat = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003306:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <CGIForm_Handler4+0x318>)
 8003308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800330c:	4619      	mov	r1, r3
 800330e:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <CGIForm_Handler4+0x31c>)
 8003310:	460b      	mov	r3, r1
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	440b      	add	r3, r1
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	3314      	adds	r3, #20
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].t_repeat = atoi(pcValue[i]); // Сохраняю в переменную
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	4413      	add	r3, r2
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a24      	ldr	r2, [pc, #144]	; (80033bc <CGIForm_Handler4+0x318>)
 800332c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003330:	4614      	mov	r4, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f013 fa75 	bl	8016822 <atoi>
 8003338:	4602      	mov	r2, r0
 800333a:	4921      	ldr	r1, [pc, #132]	; (80033c0 <CGIForm_Handler4+0x31c>)
 800333c:	4623      	mov	r3, r4
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	4423      	add	r3, r4
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3314      	adds	r3, #20
 8003348:	601a      	str	r2, [r3, #0]
//				printf("t_repeat ID = %d\n", Tt[tmp_id].id);
//				printf("Tt[tmp_id].t_repeat = %d\n", Tt[tmp_id].t_repeat);
			}
			if (strcmp(pcParam[i], "set_num") == 0 && tmp_id != 0) // if the "e_dt" string is found
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4923      	ldr	r1, [pc, #140]	; (80033e4 <CGIForm_Handler4+0x340>)
 8003356:	4618      	mov	r0, r3
 8003358:	f7fc ff3a 	bl	80001d0 <strcmp>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d142      	bne.n	80033e8 <CGIForm_Handler4+0x344>
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <CGIForm_Handler4+0x318>)
 8003364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d03d      	beq.n	80033e8 <CGIForm_Handler4+0x344>
					{
				Tt[tmp_id].t_rept1 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800336c:	4b13      	ldr	r3, [pc, #76]	; (80033bc <CGIForm_Handler4+0x318>)
 800336e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003372:	4619      	mov	r1, r3
 8003374:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <CGIForm_Handler4+0x31c>)
 8003376:	460b      	mov	r3, r1
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	440b      	add	r3, r1
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	333e      	adds	r3, #62	; 0x3e
 8003382:	2200      	movs	r2, #0
 8003384:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].t_rept1 = atoi(pcValue[i]); // Сохраняю в переменную
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	4413      	add	r3, r2
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f013 fa46 	bl	8016822 <atoi>
 8003396:	4602      	mov	r2, r0
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <CGIForm_Handler4+0x318>)
 800339a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339e:	4619      	mov	r1, r3
 80033a0:	b210      	sxth	r0, r2
 80033a2:	4a07      	ldr	r2, [pc, #28]	; (80033c0 <CGIForm_Handler4+0x31c>)
 80033a4:	460b      	mov	r3, r1
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	440b      	add	r3, r1
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	333e      	adds	r3, #62	; 0x3e
 80033b0:	4602      	mov	r2, r0
 80033b2:	801a      	strh	r2, [r3, #0]
 80033b4:	e018      	b.n	80033e8 <CGIForm_Handler4+0x344>
 80033b6:	bf00      	nop
 80033b8:	0801bbf8 	.word	0x0801bbf8
 80033bc:	200007ba 	.word	0x200007ba
 80033c0:	2000174c 	.word	0x2000174c
 80033c4:	0801b1ac 	.word	0x0801b1ac
 80033c8:	200007b8 	.word	0x200007b8
 80033cc:	0801b19c 	.word	0x0801b19c
 80033d0:	0801b1a4 	.word	0x0801b1a4
 80033d4:	0801bc00 	.word	0x0801bc00
 80033d8:	0801bc08 	.word	0x0801bc08
 80033dc:	20000000 	.word	0x20000000
 80033e0:	0801bc0c 	.word	0x0801bc0c
 80033e4:	0801bc18 	.word	0x0801bc18
				//printf("t_rept1 ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].t_rept1 = %d\n", Tt[tmp_id].t_rept1);
			}
			if (strcmp(pcParam[i], "repeat") == 0 && tmp_id != 0) // if the "e_dt" string is found
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4413      	add	r3, r2
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	49bc      	ldr	r1, [pc, #752]	; (80036e4 <CGIForm_Handler4+0x640>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fc feeb 	bl	80001d0 <strcmp>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d128      	bne.n	8003452 <CGIForm_Handler4+0x3ae>
 8003400:	4bb9      	ldr	r3, [pc, #740]	; (80036e8 <CGIForm_Handler4+0x644>)
 8003402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d023      	beq.n	8003452 <CGIForm_Handler4+0x3ae>
					{
				Tt[tmp_id].t_rept2 = 0; // Очищаем элимент структуры перед перед записью новых данных.
 800340a:	4bb7      	ldr	r3, [pc, #732]	; (80036e8 <CGIForm_Handler4+0x644>)
 800340c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003410:	4619      	mov	r1, r3
 8003412:	4ab6      	ldr	r2, [pc, #728]	; (80036ec <CGIForm_Handler4+0x648>)
 8003414:	460b      	mov	r3, r1
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	440b      	add	r3, r1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	3340      	adds	r3, #64	; 0x40
 8003420:	2200      	movs	r2, #0
 8003422:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].t_rept2 = atoi(pcValue[i]); // Сохраняю в переменную
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	4413      	add	r3, r2
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f013 f9f7 	bl	8016822 <atoi>
 8003434:	4602      	mov	r2, r0
 8003436:	4bac      	ldr	r3, [pc, #688]	; (80036e8 <CGIForm_Handler4+0x644>)
 8003438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800343c:	4619      	mov	r1, r3
 800343e:	b210      	sxth	r0, r2
 8003440:	4aaa      	ldr	r2, [pc, #680]	; (80036ec <CGIForm_Handler4+0x648>)
 8003442:	460b      	mov	r3, r1
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	440b      	add	r3, r1
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	3340      	adds	r3, #64	; 0x40
 800344e:	4602      	mov	r2, r0
 8003450:	801a      	strh	r2, [r3, #0]
				//printf("t_rept2 ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].t_rept2 = %d\n", Tt[tmp_id].t_rept2);
			}
			if (strcmp(pcParam[i], "action") == 0 && tmp_id != 0) // if the "e_dt" string is found
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	49a4      	ldr	r1, [pc, #656]	; (80036f0 <CGIForm_Handler4+0x64c>)
 800345e:	4618      	mov	r0, r3
 8003460:	f7fc feb6 	bl	80001d0 <strcmp>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d128      	bne.n	80034bc <CGIForm_Handler4+0x418>
 800346a:	4b9f      	ldr	r3, [pc, #636]	; (80036e8 <CGIForm_Handler4+0x644>)
 800346c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d023      	beq.n	80034bc <CGIForm_Handler4+0x418>
					{
				Tt[tmp_id].t_action = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003474:	4b9c      	ldr	r3, [pc, #624]	; (80036e8 <CGIForm_Handler4+0x644>)
 8003476:	f9b3 3000 	ldrsh.w	r3, [r3]
 800347a:	4619      	mov	r1, r3
 800347c:	4a9b      	ldr	r2, [pc, #620]	; (80036ec <CGIForm_Handler4+0x648>)
 800347e:	460b      	mov	r3, r1
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	440b      	add	r3, r1
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	3318      	adds	r3, #24
 800348a:	2200      	movs	r2, #0
 800348c:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].t_action = atoi(pcValue[i]); // Сохраняю в переменную
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4413      	add	r3, r2
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f013 f9c2 	bl	8016822 <atoi>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b91      	ldr	r3, [pc, #580]	; (80036e8 <CGIForm_Handler4+0x644>)
 80034a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034a6:	4619      	mov	r1, r3
 80034a8:	b210      	sxth	r0, r2
 80034aa:	4a90      	ldr	r2, [pc, #576]	; (80036ec <CGIForm_Handler4+0x648>)
 80034ac:	460b      	mov	r3, r1
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	440b      	add	r3, r1
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	3318      	adds	r3, #24
 80034b8:	4602      	mov	r2, r0
 80034ba:	801a      	strh	r2, [r3, #0]
				//printf("t_action ID = %d\n", Tt[tmp_id].id);
				//printf("Tt[tmp_id].t_action = %d\n", Tt[tmp_id].t_action);
			}
			if (strcmp(pcParam[i], "immediately") == 0 && tmp_id != 0)  // if the "id" string is found
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	498b      	ldr	r1, [pc, #556]	; (80036f4 <CGIForm_Handler4+0x650>)
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fc fe81 	bl	80001d0 <strcmp>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d128      	bne.n	8003526 <CGIForm_Handler4+0x482>
 80034d4:	4b84      	ldr	r3, [pc, #528]	; (80036e8 <CGIForm_Handler4+0x644>)
 80034d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d023      	beq.n	8003526 <CGIForm_Handler4+0x482>
					{
				Tt[tmp_id].imm_ly = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80034de:	4b82      	ldr	r3, [pc, #520]	; (80036e8 <CGIForm_Handler4+0x644>)
 80034e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034e4:	4619      	mov	r1, r3
 80034e6:	4a81      	ldr	r2, [pc, #516]	; (80036ec <CGIForm_Handler4+0x648>)
 80034e8:	460b      	mov	r3, r1
 80034ea:	011b      	lsls	r3, r3, #4
 80034ec:	440b      	add	r3, r1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3308      	adds	r3, #8
 80034f4:	2200      	movs	r2, #0
 80034f6:	801a      	strh	r2, [r3, #0]
				Tt[tmp_id].imm_ly = atoi(pcValue[i]); // Сохраняю в переменную
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	4413      	add	r3, r2
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f013 f98d 	bl	8016822 <atoi>
 8003508:	4602      	mov	r2, r0
 800350a:	4b77      	ldr	r3, [pc, #476]	; (80036e8 <CGIForm_Handler4+0x644>)
 800350c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003510:	4619      	mov	r1, r3
 8003512:	b210      	sxth	r0, r2
 8003514:	4a75      	ldr	r2, [pc, #468]	; (80036ec <CGIForm_Handler4+0x648>)
 8003516:	460b      	mov	r3, r1
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	440b      	add	r3, r1
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	3308      	adds	r3, #8
 8003522:	4602      	mov	r2, r0
 8003524:	801a      	strh	r2, [r3, #0]
				//printf("imm_ly ID = %d\n", Tt[tmp_id].id);
				//printf("imm_ly = %d\n", Tt[tmp_id].imm_ly);
			}
			if (strcmp(pcParam[i], "sunrise") == 0 && tmp_id != 0)  // if the "sunrise" string is found
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4413      	add	r3, r2
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4971      	ldr	r1, [pc, #452]	; (80036f8 <CGIForm_Handler4+0x654>)
 8003532:	4618      	mov	r0, r3
 8003534:	f7fc fe4c 	bl	80001d0 <strcmp>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d126      	bne.n	800358c <CGIForm_Handler4+0x4e8>
 800353e:	4b6a      	ldr	r3, [pc, #424]	; (80036e8 <CGIForm_Handler4+0x644>)
 8003540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d021      	beq.n	800358c <CGIForm_Handler4+0x4e8>
					{
				Tt[tmp_id].sunrise = 0; // Очищаем элимент структуры перед перед записью новых данных.
 8003548:	4b67      	ldr	r3, [pc, #412]	; (80036e8 <CGIForm_Handler4+0x644>)
 800354a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800354e:	4619      	mov	r1, r3
 8003550:	4a66      	ldr	r2, [pc, #408]	; (80036ec <CGIForm_Handler4+0x648>)
 8003552:	460b      	mov	r3, r1
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	440b      	add	r3, r1
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	3324      	adds	r3, #36	; 0x24
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].sunrise = atoi(pcValue[i]); // Сохраняю в переменную
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	4413      	add	r3, r2
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a5e      	ldr	r2, [pc, #376]	; (80036e8 <CGIForm_Handler4+0x644>)
 800356e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8003572:	4614      	mov	r4, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f013 f954 	bl	8016822 <atoi>
 800357a:	4602      	mov	r2, r0
 800357c:	495b      	ldr	r1, [pc, #364]	; (80036ec <CGIForm_Handler4+0x648>)
 800357e:	4623      	mov	r3, r4
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	4423      	add	r3, r4
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3324      	adds	r3, #36	; 0x24
 800358a:	601a      	str	r2, [r3, #0]
				//printf("imm_ly ID = %d\n", Tt[tmp_id].id);
				//printf("sunrise = %d\n", Tt[tmp_id].sunrise);
			}
			if (strcmp(pcParam[i], "sunset") == 0 && tmp_id != 0)  // if the "sunset" string is found
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4413      	add	r3, r2
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4959      	ldr	r1, [pc, #356]	; (80036fc <CGIForm_Handler4+0x658>)
 8003598:	4618      	mov	r0, r3
 800359a:	f7fc fe19 	bl	80001d0 <strcmp>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d126      	bne.n	80035f2 <CGIForm_Handler4+0x54e>
 80035a4:	4b50      	ldr	r3, [pc, #320]	; (80036e8 <CGIForm_Handler4+0x644>)
 80035a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d021      	beq.n	80035f2 <CGIForm_Handler4+0x54e>
					{
				Tt[tmp_id].sunset = 0; // Очищаем элимент структуры перед перед записью новых данных.
 80035ae:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <CGIForm_Handler4+0x644>)
 80035b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035b4:	4619      	mov	r1, r3
 80035b6:	4a4d      	ldr	r2, [pc, #308]	; (80036ec <CGIForm_Handler4+0x648>)
 80035b8:	460b      	mov	r3, r1
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	440b      	add	r3, r1
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	3328      	adds	r3, #40	; 0x28
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
				Tt[tmp_id].sunset = atoi(pcValue[i]); // Сохраняю в переменную
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a45      	ldr	r2, [pc, #276]	; (80036e8 <CGIForm_Handler4+0x644>)
 80035d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80035d8:	4614      	mov	r4, r2
 80035da:	4618      	mov	r0, r3
 80035dc:	f013 f921 	bl	8016822 <atoi>
 80035e0:	4602      	mov	r2, r0
 80035e2:	4942      	ldr	r1, [pc, #264]	; (80036ec <CGIForm_Handler4+0x648>)
 80035e4:	4623      	mov	r3, r4
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	4423      	add	r3, r4
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3328      	adds	r3, #40	; 0x28
 80035f0:	601a      	str	r2, [r3, #0]
				//printf("sunset ID = %d\n", Tt[tmp_id].id);
				//printf("sunset = %d\n", Tt[tmp_id].sunset);
			}


			if (strcmp(pcParam[i], "t_group") == 0 && tmp_id != 0)  // if the string is found
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4940      	ldr	r1, [pc, #256]	; (8003700 <CGIForm_Handler4+0x65c>)
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fc fde6 	bl	80001d0 <strcmp>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d129      	bne.n	800365e <CGIForm_Handler4+0x5ba>
 800360a:	4b37      	ldr	r3, [pc, #220]	; (80036e8 <CGIForm_Handler4+0x644>)
 800360c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d024      	beq.n	800365e <CGIForm_Handler4+0x5ba>
					{
				//Tt[tmp_id].t_group[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
				memset(&Tt[tmp_id].t_group , '\0', sizeof(Tt[tmp_id].t_group ));
 8003614:	4b34      	ldr	r3, [pc, #208]	; (80036e8 <CGIForm_Handler4+0x644>)
 8003616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800361a:	461a      	mov	r2, r3
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	3318      	adds	r3, #24
 8003626:	4a31      	ldr	r2, [pc, #196]	; (80036ec <CGIForm_Handler4+0x648>)
 8003628:	4413      	add	r3, r2
 800362a:	3302      	adds	r3, #2
 800362c:	220a      	movs	r2, #10
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f013 f955 	bl	80168e0 <memset>
				strcpy(Tt[tmp_id].t_group, pcValue[i]);// Сохраняем значение в переменную.
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <CGIForm_Handler4+0x644>)
 8003638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800363c:	461a      	mov	r2, r3
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	3318      	adds	r3, #24
 8003648:	4a28      	ldr	r2, [pc, #160]	; (80036ec <CGIForm_Handler4+0x648>)
 800364a:	4413      	add	r3, r2
 800364c:	1c98      	adds	r0, r3, #2
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	4413      	add	r3, r2
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4619      	mov	r1, r3
 800365a:	f013 fef1 	bl	8017440 <strcpy>
			}
			if (strcmp(pcParam[i], "t_info") == 0 && tmp_id != 0)  // if the string is found
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4413      	add	r3, r2
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4926      	ldr	r1, [pc, #152]	; (8003704 <CGIForm_Handler4+0x660>)
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc fdb0 	bl	80001d0 <strcmp>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d129      	bne.n	80036ca <CGIForm_Handler4+0x626>
 8003676:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <CGIForm_Handler4+0x644>)
 8003678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d024      	beq.n	80036ca <CGIForm_Handler4+0x626>
					{
				//Tt[tmp_id].t_info[0] = '\0'; // Очищаем элимент структуры перед перед записью новых данных.
				memset(&Tt[tmp_id].t_info , '\0', sizeof(Tt[tmp_id].t_info ));
 8003680:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <CGIForm_Handler4+0x644>)
 8003682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003686:	461a      	mov	r2, r3
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	3328      	adds	r3, #40	; 0x28
 8003692:	4a16      	ldr	r2, [pc, #88]	; (80036ec <CGIForm_Handler4+0x648>)
 8003694:	4413      	add	r3, r2
 8003696:	3304      	adds	r3, #4
 8003698:	220f      	movs	r2, #15
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f013 f91f 	bl	80168e0 <memset>
				strcpy(Tt[tmp_id].t_info, pcValue[i]);// Сохраняем значение в переменную.
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <CGIForm_Handler4+0x644>)
 80036a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036a8:	461a      	mov	r2, r3
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	3328      	adds	r3, #40	; 0x28
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <CGIForm_Handler4+0x648>)
 80036b6:	4413      	add	r3, r2
 80036b8:	1d18      	adds	r0, r3, #4
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	4413      	add	r3, r2
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4619      	mov	r1, r3
 80036c6:	f013 febb 	bl	8017440 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	3301      	adds	r3, #1
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	f6ff acf3 	blt.w	80030c0 <CGIForm_Handler4+0x1c>
				//printf("Tt[tmp_id].t_info[15] = %s\n", Tt[tmp_id].t_info);
			}
		}
	}
	return "/edit_timers.shtml"; //
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <CGIForm_Handler4+0x664>)
}
 80036dc:	4618      	mov	r0, r3
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd90      	pop	{r4, r7, pc}
 80036e4:	0801bc20 	.word	0x0801bc20
 80036e8:	200007ba 	.word	0x200007ba
 80036ec:	2000174c 	.word	0x2000174c
 80036f0:	0801bc28 	.word	0x0801bc28
 80036f4:	0801bc30 	.word	0x0801bc30
 80036f8:	0801b1e8 	.word	0x0801b1e8
 80036fc:	0801b1f0 	.word	0x0801b1f0
 8003700:	0801b1f8 	.word	0x0801b1f8
 8003704:	0801b200 	.word	0x0801b200
 8003708:	0801bba8 	.word	0x0801bba8

0800370c <httpd_post_begin>:
int http_post_content_len;
char urls[30] = { 0 };

err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	807b      	strh	r3, [r7, #2]

	http_post_content_len = content_len;
 800371a:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <httpd_post_begin+0x44>)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	6013      	str	r3, [r2, #0]
	strncpy(urls, uri, 15);
 8003720:	220f      	movs	r2, #15
 8003722:	68b9      	ldr	r1, [r7, #8]
 8003724:	480b      	ldr	r0, [pc, #44]	; (8003754 <httpd_post_begin+0x48>)
 8003726:	f013 fea5 	bl	8017474 <strncpy>

	//printf("uri %s\r\n", uri);//////////////////////////////////

	if (current_connection != connection) {
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <httpd_post_begin+0x4c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d007      	beq.n	8003744 <httpd_post_begin+0x38>
		current_connection = connection;
 8003734:	4a08      	ldr	r2, [pc, #32]	; (8003758 <httpd_post_begin+0x4c>)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6013      	str	r3, [r2, #0]
		valid_connection = NULL;
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <httpd_post_begin+0x50>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
		//snprintf(response_uri, response_uri_len, "/cgi_leds.html");
		/* e.g. for large uploads to slow flash over a fast connection, you should
		 manually update the rx window. That way, a sender can only send a full
		 tcp window at a time. If this is required, set 'post_aut_wnd' to 0.
		 We do not need to throttle upload speed here, so: */
		return ERR_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e001      	b.n	8003748 <httpd_post_begin+0x3c>
	}
	return ERR_VAL;
 8003744:	f06f 0305 	mvn.w	r3, #5
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20002494 	.word	0x20002494
 8003754:	200007d8 	.word	0x200007d8
 8003758:	200007d0 	.word	0x200007d0
 800375c:	200007d4 	.word	0x200007d4

08003760 <httpd_post_receive_data>:

err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
	//printf("OK POST 2 \r\n");
	//char data;
	if (current_connection == connection && p != NULL) {
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <httpd_post_receive_data+0x54>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	429a      	cmp	r2, r3
 8003772:	d113      	bne.n	800379c <httpd_post_receive_data+0x3c>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d010      	beq.n	800379c <httpd_post_receive_data+0x3c>
		//data = p->payload;
		//printf("DATA %s \r\n", data);
		//strcat(bufervar, p->payload);
		//strncpy(readvar, p->payload, p->tot_len);
		strncpy(readvar, p->payload, p->len);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	895b      	ldrh	r3, [r3, #10]
 8003782:	461a      	mov	r2, r3
 8003784:	480c      	ldr	r0, [pc, #48]	; (80037b8 <httpd_post_receive_data+0x58>)
 8003786:	f013 fe75 	bl	8017474 <strncpy>
		//strcpy(readvar, p->payload);
		//printf("DATA %s \r\n", readvar);
		//printf("num %d \r\n", p->len);
		strcat(bufervar, readvar);
 800378a:	490b      	ldr	r1, [pc, #44]	; (80037b8 <httpd_post_receive_data+0x58>)
 800378c:	480b      	ldr	r0, [pc, #44]	; (80037bc <httpd_post_receive_data+0x5c>)
 800378e:	f013 fe3b 	bl	8017408 <strcat>
		pbuf_free(p);
 8003792:	6838      	ldr	r0, [r7, #0]
 8003794:	f007 fd1e 	bl	800b1d4 <pbuf_free>
		//memset(data, '\0', sizeof(data));
		return ERR_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	e007      	b.n	80037ac <httpd_post_receive_data+0x4c>
	}

	if (p != NULL) {
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <httpd_post_receive_data+0x48>
		//printf("Очищаем полученные данные! \r\n");
		pbuf_free(p);
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	f007 fd16 	bl	800b1d4 <pbuf_free>
	}
	return ERR_VAL;
 80037a8:	f06f 0305 	mvn.w	r3, #5
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	200007d0 	.word	0x200007d0
 80037b8:	20001364 	.word	0x20001364
 80037bc:	20003f7c 	.word	0x20003f7c

080037c0 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri,
		u16_t response_uri_len) {
 80037c0:	b580      	push	{r7, lr}
 80037c2:	f5ad 6d92 	sub.w	sp, sp, #1168	; 0x490
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	f107 030c 	add.w	r3, r7, #12
 80037cc:	6018      	str	r0, [r3, #0]
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	6019      	str	r1, [r3, #0]
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	801a      	strh	r2, [r3, #0]

	char *token; // "&"
	char *token1;// "="
	char *token2;// "_"
	char *name1; // Для сравнения полученных тегов из uri
	int z = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	int id;
	int variable1 = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
	int variable2;
	//char urlline[http_post_content_len];
	char urlline[1000] = { 0 };
 80037e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	3304      	adds	r3, #4
 80037ee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80037f2:	2100      	movs	r1, #0
 80037f4:	4618      	mov	r0, r3
 80037f6:	f013 f873 	bl	80168e0 <memset>
	char name0[50] = { 0 };
 80037fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	3304      	adds	r3, #4
 8003804:	222e      	movs	r2, #46	; 0x2e
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f013 f869 	bl	80168e0 <memset>
	char nametoken[50] = { 0 };
 800380e:	f107 0320 	add.w	r3, r7, #32
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	3304      	adds	r3, #4
 8003818:	222e      	movs	r2, #46	; 0x2e
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f013 f85f 	bl	80168e0 <memset>

	memset(name0, '\0', sizeof(name0));
 8003822:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003826:	2232      	movs	r2, #50	; 0x32
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f013 f858 	bl	80168e0 <memset>
	//memset(urlline, '\0', sizeof(urlline));
	strncpy(urlline, bufervar, http_post_content_len);
 8003830:	4bcb      	ldr	r3, [pc, #812]	; (8003b60 <httpd_post_finished+0x3a0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800383a:	49ca      	ldr	r1, [pc, #808]	; (8003b64 <httpd_post_finished+0x3a4>)
 800383c:	4618      	mov	r0, r3
 800383e:	f013 fe19 	bl	8017474 <strncpy>
	//printf("%s \r\n", urlline);
//	printf("COUNT %d \r\n", http_post_content_len);

	char *rest = urlline;
 8003842:	f107 031c 	add.w	r3, r7, #28
 8003846:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800384a:	601a      	str	r2, [r3, #0]
	while ((token = strtok_r(rest, "&", &rest))) {
 800384c:	e26a      	b.n	8003d24 <httpd_post_finished+0x564>
		//printf("%s\n", token);
		char *rest1 = token;
 800384e:	f107 0318 	add.w	r3, r7, #24
 8003852:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8003856:	601a      	str	r2, [r3, #0]
		strcat(name0, token); // решение с пустой строкой
 8003858:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800385c:	f8d7 1478 	ldr.w	r1, [r7, #1144]	; 0x478
 8003860:	4618      	mov	r0, r3
 8003862:	f013 fdd1 	bl	8017408 <strcat>
		y = 0;
 8003866:	4bc0      	ldr	r3, [pc, #768]	; (8003b68 <httpd_post_finished+0x3a8>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 800386c:	e216      	b.n	8003c9c <httpd_post_finished+0x4dc>
			z = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
			if (y == 0) {
 8003874:	4bbc      	ldr	r3, [pc, #752]	; (8003b68 <httpd_post_finished+0x3a8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d12b      	bne.n	80038d4 <httpd_post_finished+0x114>
				//printf("NAME %s\n", token1);
				// получение id
				char *rest2 = token1;
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8003884:	601a      	str	r2, [r3, #0]
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 8003886:	e016      	b.n	80038b6 <httpd_post_finished+0xf6>
					if (z == 0) {
 8003888:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <httpd_post_finished+0xd8>
						name1 = token2;
 8003890:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8003894:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
					}
					if (z == 1) {
 8003898:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <httpd_post_finished+0xec>
						id = atoi(token2);
 80038a0:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 80038a4:	f012 ffbd 	bl	8016822 <atoi>
 80038a8:	f8c7 0484 	str.w	r0, [r7, #1156]	; 0x484
						//printf("ID %d\n", id);
					}
					z++;
 80038ac:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 80038b0:	3301      	adds	r3, #1
 80038b2:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
				while ((token2 = strtok_r(rest2, "_", &rest2))) {
 80038b6:	f107 0314 	add.w	r3, r7, #20
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f107 0214 	add.w	r2, r7, #20
 80038c0:	49aa      	ldr	r1, [pc, #680]	; (8003b6c <httpd_post_finished+0x3ac>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	f014 fc8e 	bl	80181e4 <strtok_r>
 80038c8:	f8c7 0470 	str.w	r0, [r7, #1136]	; 0x470
 80038cc:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1d9      	bne.n	8003888 <httpd_post_finished+0xc8>
				}
			}
			if (y == 1) {
 80038d4:	4ba4      	ldr	r3, [pc, #656]	; (8003b68 <httpd_post_finished+0x3a8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f040 81da 	bne.w	8003c92 <httpd_post_finished+0x4d2>
				// значение переменной
				//printf("VAL %s\n", token1);
				// пишем в структуру
				if (strcmp(name1, "ptype") == 0) {
 80038de:	49a4      	ldr	r1, [pc, #656]	; (8003b70 <httpd_post_finished+0x3b0>)
 80038e0:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80038e4:	f7fc fc74 	bl	80001d0 <strcmp>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <httpd_post_finished+0x14a>
					strcpy(T[id].ptype, token1);
 80038ee:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80038f2:	2268      	movs	r2, #104	; 0x68
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	3318      	adds	r3, #24
 80038fa:	4a9e      	ldr	r2, [pc, #632]	; (8003b74 <httpd_post_finished+0x3b4>)
 80038fc:	4413      	add	r3, r2
 80038fe:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8003902:	4618      	mov	r0, r3
 8003904:	f013 fd9c 	bl	8017440 <strcpy>
 8003908:	e1c3      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "topin") == 0) {
 800390a:	499b      	ldr	r1, [pc, #620]	; (8003b78 <httpd_post_finished+0x3b8>)
 800390c:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003910:	f7fc fc5e 	bl	80001d0 <strcmp>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <httpd_post_finished+0x176>
					T[id].topin = atoi(token1);
 800391a:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800391e:	f012 ff80 	bl	8016822 <atoi>
 8003922:	4602      	mov	r2, r0
 8003924:	4993      	ldr	r1, [pc, #588]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003926:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 800392a:	2068      	movs	r0, #104	; 0x68
 800392c:	fb00 f303 	mul.w	r3, r0, r3
 8003930:	440b      	add	r3, r1
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	e1ad      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "binter") == 0) {
 8003936:	4991      	ldr	r1, [pc, #580]	; (8003b7c <httpd_post_finished+0x3bc>)
 8003938:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800393c:	f7fc fc48 	bl	80001d0 <strcmp>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10e      	bne.n	8003964 <httpd_post_finished+0x1a4>
					T[id].binter = atoi(token1);
 8003946:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800394a:	f012 ff6a 	bl	8016822 <atoi>
 800394e:	4602      	mov	r2, r0
 8003950:	4988      	ldr	r1, [pc, #544]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003952:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003956:	2068      	movs	r0, #104	; 0x68
 8003958:	fb00 f303 	mul.w	r3, r0, r3
 800395c:	440b      	add	r3, r1
 800395e:	332c      	adds	r3, #44	; 0x2c
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e196      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "hinter") == 0) {
 8003964:	4986      	ldr	r1, [pc, #536]	; (8003b80 <httpd_post_finished+0x3c0>)
 8003966:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 800396a:	f7fc fc31 	bl	80001d0 <strcmp>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10e      	bne.n	8003992 <httpd_post_finished+0x1d2>
					T[id].hinter = atoi(token1);
 8003974:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003978:	f012 ff53 	bl	8016822 <atoi>
 800397c:	4602      	mov	r2, r0
 800397e:	497d      	ldr	r1, [pc, #500]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003980:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003984:	2068      	movs	r0, #104	; 0x68
 8003986:	fb00 f303 	mul.w	r3, r0, r3
 800398a:	440b      	add	r3, r1
 800398c:	3330      	adds	r3, #48	; 0x30
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	e17f      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "repeat") == 0) {
 8003992:	497c      	ldr	r1, [pc, #496]	; (8003b84 <httpd_post_finished+0x3c4>)
 8003994:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003998:	f7fc fc1a 	bl	80001d0 <strcmp>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10e      	bne.n	80039c0 <httpd_post_finished+0x200>
					T[id].repeat = atoi(token1);
 80039a2:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80039a6:	f012 ff3c 	bl	8016822 <atoi>
 80039aa:	4602      	mov	r2, r0
 80039ac:	4971      	ldr	r1, [pc, #452]	; (8003b74 <httpd_post_finished+0x3b4>)
 80039ae:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80039b2:	2068      	movs	r0, #104	; 0x68
 80039b4:	fb00 f303 	mul.w	r3, r0, r3
 80039b8:	440b      	add	r3, r1
 80039ba:	3334      	adds	r3, #52	; 0x34
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	e168      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "rinter") == 0) {
 80039c0:	4971      	ldr	r1, [pc, #452]	; (8003b88 <httpd_post_finished+0x3c8>)
 80039c2:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80039c6:	f7fc fc03 	bl	80001d0 <strcmp>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10e      	bne.n	80039ee <httpd_post_finished+0x22e>
					T[id].rinter = atoi(token1);
 80039d0:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80039d4:	f012 ff25 	bl	8016822 <atoi>
 80039d8:	4602      	mov	r2, r0
 80039da:	4966      	ldr	r1, [pc, #408]	; (8003b74 <httpd_post_finished+0x3b4>)
 80039dc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 80039e0:	2068      	movs	r0, #104	; 0x68
 80039e2:	fb00 f303 	mul.w	r3, r0, r3
 80039e6:	440b      	add	r3, r1
 80039e8:	3338      	adds	r3, #56	; 0x38
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e151      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "dcinter") == 0) {
 80039ee:	4967      	ldr	r1, [pc, #412]	; (8003b8c <httpd_post_finished+0x3cc>)
 80039f0:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 80039f4:	f7fc fbec 	bl	80001d0 <strcmp>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10e      	bne.n	8003a1c <httpd_post_finished+0x25c>
					T[id].dcinter = atoi(token1);
 80039fe:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003a02:	f012 ff0e 	bl	8016822 <atoi>
 8003a06:	4602      	mov	r2, r0
 8003a08:	495a      	ldr	r1, [pc, #360]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003a0a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003a0e:	2068      	movs	r0, #104	; 0x68
 8003a10:	fb00 f303 	mul.w	r3, r0, r3
 8003a14:	440b      	add	r3, r1
 8003a16:	333c      	adds	r3, #60	; 0x3c
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e13a      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "pclick") == 0) {
 8003a1c:	495c      	ldr	r1, [pc, #368]	; (8003b90 <httpd_post_finished+0x3d0>)
 8003a1e:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003a22:	f7fc fbd5 	bl	80001d0 <strcmp>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10e      	bne.n	8003a4a <httpd_post_finished+0x28a>
					T[id].pclick = atoi(token1);
 8003a2c:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003a30:	f012 fef7 	bl	8016822 <atoi>
 8003a34:	4602      	mov	r2, r0
 8003a36:	494f      	ldr	r1, [pc, #316]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003a38:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003a3c:	2068      	movs	r0, #104	; 0x68
 8003a3e:	fb00 f303 	mul.w	r3, r0, r3
 8003a42:	440b      	add	r3, r1
 8003a44:	3340      	adds	r3, #64	; 0x40
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	e123      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "info") == 0) {
 8003a4a:	4952      	ldr	r1, [pc, #328]	; (8003b94 <httpd_post_finished+0x3d4>)
 8003a4c:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003a50:	f7fc fbbe 	bl	80001d0 <strcmp>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10e      	bne.n	8003a78 <httpd_post_finished+0x2b8>
					//memset(T[id].info, '\0', sizeof(T[id].info));
					strcpy(T[id].info, token1);
 8003a5a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003a5e:	2268      	movs	r2, #104	; 0x68
 8003a60:	fb02 f303 	mul.w	r3, r2, r3
 8003a64:	3340      	adds	r3, #64	; 0x40
 8003a66:	4a43      	ldr	r2, [pc, #268]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003a68:	4413      	add	r3, r2
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	f8d7 1474 	ldr.w	r1, [r7, #1140]	; 0x474
 8003a70:	4618      	mov	r0, r3
 8003a72:	f013 fce5 	bl	8017440 <strcpy>
 8003a76:	e10c      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "onoff") == 0) {
 8003a78:	4947      	ldr	r1, [pc, #284]	; (8003b98 <httpd_post_finished+0x3d8>)
 8003a7a:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003a7e:	f7fc fba7 	bl	80001d0 <strcmp>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10e      	bne.n	8003aa6 <httpd_post_finished+0x2e6>
					T[id].onoff = atoi(token1);
 8003a88:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003a8c:	f012 fec9 	bl	8016822 <atoi>
 8003a90:	4602      	mov	r2, r0
 8003a92:	4938      	ldr	r1, [pc, #224]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003a94:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003a98:	2068      	movs	r0, #104	; 0x68
 8003a9a:	fb00 f303 	mul.w	r3, r0, r3
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3364      	adds	r3, #100	; 0x64
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e0f5      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "pwm") == 0) {
 8003aa6:	493d      	ldr	r1, [pc, #244]	; (8003b9c <httpd_post_finished+0x3dc>)
 8003aa8:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003aac:	f7fc fb90 	bl	80001d0 <strcmp>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10e      	bne.n	8003ad4 <httpd_post_finished+0x314>
					T[id].pwm = atoi(token1);
 8003ab6:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003aba:	f012 feb2 	bl	8016822 <atoi>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	492c      	ldr	r1, [pc, #176]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003ac2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003ac6:	2068      	movs	r0, #104	; 0x68
 8003ac8:	fb00 f303 	mul.w	r3, r0, r3
 8003acc:	440b      	add	r3, r1
 8003ace:	3304      	adds	r3, #4
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e0de      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "on") == 0) {
 8003ad4:	4932      	ldr	r1, [pc, #200]	; (8003ba0 <httpd_post_finished+0x3e0>)
 8003ad6:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003ada:	f7fc fb79 	bl	80001d0 <strcmp>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10e      	bne.n	8003b02 <httpd_post_finished+0x342>
					T[id].on = atoi(token1);
 8003ae4:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003ae8:	f012 fe9b 	bl	8016822 <atoi>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4921      	ldr	r1, [pc, #132]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003af0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003af4:	2068      	movs	r0, #104	; 0x68
 8003af6:	fb00 f303 	mul.w	r3, r0, r3
 8003afa:	440b      	add	r3, r1
 8003afc:	3308      	adds	r3, #8
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e0c7      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "istate") == 0) {
 8003b02:	4928      	ldr	r1, [pc, #160]	; (8003ba4 <httpd_post_finished+0x3e4>)
 8003b04:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003b08:	f7fc fb62 	bl	80001d0 <strcmp>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10e      	bne.n	8003b30 <httpd_post_finished+0x370>
					T[id].istate = atoi(token1);
 8003b12:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003b16:	f012 fe84 	bl	8016822 <atoi>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	4915      	ldr	r1, [pc, #84]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003b1e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003b22:	2068      	movs	r0, #104	; 0x68
 8003b24:	fb00 f303 	mul.w	r3, r0, r3
 8003b28:	440b      	add	r3, r1
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	e0b0      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "dvalue") == 0) {
 8003b30:	491d      	ldr	r1, [pc, #116]	; (8003ba8 <httpd_post_finished+0x3e8>)
 8003b32:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003b36:	f7fc fb4b 	bl	80001d0 <strcmp>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d135      	bne.n	8003bac <httpd_post_finished+0x3ec>
					T[id].dvalue = atoi(token1);
 8003b40:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003b44:	f012 fe6d 	bl	8016822 <atoi>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	490a      	ldr	r1, [pc, #40]	; (8003b74 <httpd_post_finished+0x3b4>)
 8003b4c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003b50:	2068      	movs	r0, #104	; 0x68
 8003b52:	fb00 f303 	mul.w	r3, r0, r3
 8003b56:	440b      	add	r3, r1
 8003b58:	3310      	adds	r3, #16
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e099      	b.n	8003c92 <httpd_post_finished+0x4d2>
 8003b5e:	bf00      	nop
 8003b60:	20002494 	.word	0x20002494
 8003b64:	20003f7c 	.word	0x20003f7c
 8003b68:	20006a10 	.word	0x20006a10
 8003b6c:	0801bc3c 	.word	0x0801bc3c
 8003b70:	0801bc40 	.word	0x0801bc40
 8003b74:	200027ec 	.word	0x200027ec
 8003b78:	0801bc48 	.word	0x0801bc48
 8003b7c:	0801bc50 	.word	0x0801bc50
 8003b80:	0801bc58 	.word	0x0801bc58
 8003b84:	0801bc20 	.word	0x0801bc20
 8003b88:	0801bc60 	.word	0x0801bc60
 8003b8c:	0801bc68 	.word	0x0801bc68
 8003b90:	0801bc70 	.word	0x0801bc70
 8003b94:	0801bc78 	.word	0x0801bc78
 8003b98:	0801bc80 	.word	0x0801bc80
 8003b9c:	0801bc88 	.word	0x0801bc88
 8003ba0:	0801bc8c 	.word	0x0801bc8c
 8003ba4:	0801bc90 	.word	0x0801bc90
 8003ba8:	0801bc98 	.word	0x0801bc98
				} else if (strcmp(name1, "ponr") == 0) {
 8003bac:	4983      	ldr	r1, [pc, #524]	; (8003dbc <httpd_post_finished+0x5fc>)
 8003bae:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003bb2:	f7fc fb0d 	bl	80001d0 <strcmp>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10e      	bne.n	8003bda <httpd_post_finished+0x41a>
					T[id].ponr = atoi(token1);
 8003bbc:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003bc0:	f012 fe2f 	bl	8016822 <atoi>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	497e      	ldr	r1, [pc, #504]	; (8003dc0 <httpd_post_finished+0x600>)
 8003bc8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003bcc:	2068      	movs	r0, #104	; 0x68
 8003bce:	fb00 f303 	mul.w	r3, r0, r3
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	e05b      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "idin") == 0) {
 8003bda:	497a      	ldr	r1, [pc, #488]	; (8003dc4 <httpd_post_finished+0x604>)
 8003bdc:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003be0:	f7fc faf6 	bl	80001d0 <strcmp>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d139      	bne.n	8003c5e <httpd_post_finished+0x49e>
					//printf("idin------- %d \r\n", atoi(token1));
					while (variable1 <= numpintopin - 1) {
 8003bea:	e030      	b.n	8003c4e <httpd_post_finished+0x48e>
						if (TO[variable1].flag == 0) {
 8003bec:	4976      	ldr	r1, [pc, #472]	; (8003dc8 <httpd_post_finished+0x608>)
 8003bee:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3308      	adds	r3, #8
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d11f      	bne.n	8003c44 <httpd_post_finished+0x484>
							TO[variable1].idin = atoi(token1);
 8003c04:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003c08:	f012 fe0b 	bl	8016822 <atoi>
 8003c0c:	4601      	mov	r1, r0
 8003c0e:	486e      	ldr	r0, [pc, #440]	; (8003dc8 <httpd_post_finished+0x608>)
 8003c10:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8003c14:	4613      	mov	r3, r2
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4403      	add	r3, r0
 8003c1e:	6019      	str	r1, [r3, #0]
							variable2 = variable1;
 8003c20:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8003c24:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
							TO[variable1].flag = 1;
 8003c28:	4967      	ldr	r1, [pc, #412]	; (8003dc8 <httpd_post_finished+0x608>)
 8003c2a:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3308      	adds	r3, #8
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
							variable1 = numpintopin;
 8003c3e:	2346      	movs	r3, #70	; 0x46
 8003c40:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
						}
						variable1++;
 8003c44:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
					while (variable1 <= numpintopin - 1) {
 8003c4e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 8003c52:	2b45      	cmp	r3, #69	; 0x45
 8003c54:	ddca      	ble.n	8003bec <httpd_post_finished+0x42c>
					}
					variable1 = 0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
 8003c5c:	e019      	b.n	8003c92 <httpd_post_finished+0x4d2>
				} else if (strcmp(name1, "idout") == 0) {
 8003c5e:	495b      	ldr	r1, [pc, #364]	; (8003dcc <httpd_post_finished+0x60c>)
 8003c60:	f8d7 048c 	ldr.w	r0, [r7, #1164]	; 0x48c
 8003c64:	f7fc fab4 	bl	80001d0 <strcmp>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d111      	bne.n	8003c92 <httpd_post_finished+0x4d2>
					TO[variable2].idout = atoi(token1);
 8003c6e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8003c72:	f012 fdd6 	bl	8016822 <atoi>
 8003c76:	4601      	mov	r1, r0
 8003c78:	4853      	ldr	r0, [pc, #332]	; (8003dc8 <httpd_post_finished+0x608>)
 8003c7a:	f8d7 247c 	ldr.w	r2, [r7, #1148]	; 0x47c
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4403      	add	r3, r0
 8003c88:	3304      	adds	r3, #4
 8003c8a:	6019      	str	r1, [r3, #0]
					variable2 = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
//							}
//							variable1 = 0;
					//////////////
				}
			}
			y++;
 8003c92:	4b4f      	ldr	r3, [pc, #316]	; (8003dd0 <httpd_post_finished+0x610>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3301      	adds	r3, #1
 8003c98:	4a4d      	ldr	r2, [pc, #308]	; (8003dd0 <httpd_post_finished+0x610>)
 8003c9a:	6013      	str	r3, [r2, #0]
		while ((token1 = strtok_r(rest1, "=", &rest1))) {
 8003c9c:	f107 0318 	add.w	r3, r7, #24
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f107 0218 	add.w	r2, r7, #24
 8003ca6:	494b      	ldr	r1, [pc, #300]	; (8003dd4 <httpd_post_finished+0x614>)
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f014 fa9b 	bl	80181e4 <strtok_r>
 8003cae:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
 8003cb2:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f47f add9 	bne.w	800386e <httpd_post_finished+0xae>
		}
		// решение с пустой строкой
		sprintf(nametoken, "infofield_%d=", id); // Если поле пустое то его заполняем "null".
 8003cbc:	f107 0320 	add.w	r3, r7, #32
 8003cc0:	f8d7 2484 	ldr.w	r2, [r7, #1156]	; 0x484
 8003cc4:	4944      	ldr	r1, [pc, #272]	; (8003dd8 <httpd_post_finished+0x618>)
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f013 fb7e 	bl	80173c8 <siprintf>
		if (strcmp(name0, nametoken) == 0) {
 8003ccc:	f107 0220 	add.w	r2, r7, #32
 8003cd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fc fa7a 	bl	80001d0 <strcmp>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10d      	bne.n	8003cfe <httpd_post_finished+0x53e>
			strcpy(T[id].info, "null");
 8003ce2:	f8d7 3484 	ldr.w	r3, [r7, #1156]	; 0x484
 8003ce6:	2268      	movs	r2, #104	; 0x68
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	3340      	adds	r3, #64	; 0x40
 8003cee:	4a34      	ldr	r2, [pc, #208]	; (8003dc0 <httpd_post_finished+0x600>)
 8003cf0:	4413      	add	r3, r2
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4a39      	ldr	r2, [pc, #228]	; (8003ddc <httpd_post_finished+0x61c>)
 8003cf6:	6810      	ldr	r0, [r2, #0]
 8003cf8:	6018      	str	r0, [r3, #0]
 8003cfa:	7912      	ldrb	r2, [r2, #4]
 8003cfc:	711a      	strb	r2, [r3, #4]
			//printf("Yes \n");
		}
		memset(name0, '\0', sizeof(name0));
 8003cfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003d02:	2232      	movs	r2, #50	; 0x32
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f012 fdea 	bl	80168e0 <memset>
		memset(nametoken, '\0', sizeof(nametoken));
 8003d0c:	f107 0320 	add.w	r3, r7, #32
 8003d10:	2232      	movs	r2, #50	; 0x32
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f012 fde3 	bl	80168e0 <memset>
		z++;
 8003d1a:	f8d7 3488 	ldr.w	r3, [r7, #1160]	; 0x488
 8003d1e:	3301      	adds	r3, #1
 8003d20:	f8c7 3488 	str.w	r3, [r7, #1160]	; 0x488
	while ((token = strtok_r(rest, "&", &rest))) {
 8003d24:	f107 031c 	add.w	r3, r7, #28
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f107 021c 	add.w	r2, r7, #28
 8003d2e:	492c      	ldr	r1, [pc, #176]	; (8003de0 <httpd_post_finished+0x620>)
 8003d30:	4618      	mov	r0, r3
 8003d32:	f014 fa57 	bl	80181e4 <strtok_r>
 8003d36:	f8c7 0478 	str.w	r0, [r7, #1144]	; 0x478
 8003d3a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f47f ad85 	bne.w	800384e <httpd_post_finished+0x8e>
	}

	memset(urlline, '\0', sizeof(urlline));   // Очищаем urlline
 8003d44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003d48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f012 fdc6 	bl	80168e0 <memset>
	memset(bufervar, '\0', sizeof(bufervar)); // Очищаем bufervar
 8003d54:	f642 1204 	movw	r2, #10500	; 0x2904
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4822      	ldr	r0, [pc, #136]	; (8003de4 <httpd_post_finished+0x624>)
 8003d5c:	f012 fdc0 	bl	80168e0 <memset>
	//memset(json, '\0', sizeof(json));
	//printf("httpd_post_finished! \r\n");
	/* default page is "login failed" */
	//snprintf(response_uri, response_uri_len, "/tab.shtml");
	snprintf(response_uri, response_uri_len, urls);
 8003d60:	1dbb      	adds	r3, r7, #6
 8003d62:	8819      	ldrh	r1, [r3, #0]
 8003d64:	f107 0308 	add.w	r3, r7, #8
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <httpd_post_finished+0x628>)
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	f013 faf8 	bl	8017360 <sniprintf>
	if (current_connection == connection) {
 8003d70:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <httpd_post_finished+0x62c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f107 020c 	add.w	r2, r7, #12
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d114      	bne.n	8003da8 <httpd_post_finished+0x5e8>
		if (valid_connection == connection) {
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <httpd_post_finished+0x630>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f107 020c 	add.w	r2, r7, #12
 8003d86:	6812      	ldr	r2, [r2, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d107      	bne.n	8003d9c <httpd_post_finished+0x5dc>
			/* login succeeded */
			//snprintf(response_uri, response_uri_len, "/tab.shtml");
			snprintf(response_uri, response_uri_len, urls);
 8003d8c:	1dbb      	adds	r3, r7, #6
 8003d8e:	8819      	ldrh	r1, [r3, #0]
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <httpd_post_finished+0x628>)
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	f013 fae2 	bl	8017360 <sniprintf>
		}
		current_connection = NULL;
 8003d9c:	4b13      	ldr	r3, [pc, #76]	; (8003dec <httpd_post_finished+0x62c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
		valid_connection = NULL;
 8003da2:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <httpd_post_finished+0x630>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
	}
	connection = NULL;
 8003da8:	f107 030c 	add.w	r3, r7, #12
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
}
 8003db0:	bf00      	nop
 8003db2:	f507 6792 	add.w	r7, r7, #1168	; 0x490
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	0801bca0 	.word	0x0801bca0
 8003dc0:	200027ec 	.word	0x200027ec
 8003dc4:	0801bca8 	.word	0x0801bca8
 8003dc8:	20002498 	.word	0x20002498
 8003dcc:	0801bcb0 	.word	0x0801bcb0
 8003dd0:	20006a10 	.word	0x20006a10
 8003dd4:	0801bcb8 	.word	0x0801bcb8
 8003dd8:	0801bcbc 	.word	0x0801bcbc
 8003ddc:	0801bccc 	.word	0x0801bccc
 8003de0:	0801bcd4 	.word	0x0801bcd4
 8003de4:	20003f7c 	.word	0x20003f7c
 8003de8:	200007d8 	.word	0x200007d8
 8003dec:	200007d0 	.word	0x200007d0
 8003df0:	200007d4 	.word	0x200007d4

08003df4 <http_server_init>:

//////////////////// POST  END ////////////////////////

void http_server_init(void) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
	httpd_init();
 8003df8:	f005 fdc0 	bl	800997c <httpd_init>
	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 41); // 2. Указал точное количество тегов.
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <http_server_init+0x24>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2229      	movs	r2, #41	; 0x29
 8003e02:	4619      	mov	r1, r3
 8003e04:	4805      	ldr	r0, [pc, #20]	; (8003e1c <http_server_init+0x28>)
 8003e06:	f005 fdd9 	bl	80099bc <http_set_ssi_handler>
	// 4. For LED Перед созданиме CGI_handle нам нужно назначить
	//CGI_TAB[0] = FORM_CGI; // CGI структуру
	//http_set_cgi_handlers (&FORM_CGI, 1); // Это пример когда у нас всего один "Handler" пример из видео.
	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); // 5. И теперь мы передадим структуру массива в CGI_handle!
 8003e0a:	2307      	movs	r3, #7
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4804      	ldr	r0, [pc, #16]	; (8003e20 <http_server_init+0x2c>)
 8003e10:	f005 fe16 	bl	8009a40 <http_set_cgi_handlers>
}
 8003e14:	bf00      	nop
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	200005ac 	.word	0x200005ac
 8003e1c:	08000f6d 	.word	0x08000f6d
 8003e20:	0801f2f8 	.word	0x0801f2f8

08003e24 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003e2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003e30:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d013      	beq.n	8003e64 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003e3c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003e40:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003e44:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003e4c:	e000      	b.n	8003e50 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003e4e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003e50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f9      	beq.n	8003e4e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003e5a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003e64:	687b      	ldr	r3, [r7, #4]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
	...

08003e74 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART6_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
	int i;
	HAL_UART_Transmit(&huart6, (uint8_t*) ptr, len, 50);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	2332      	movs	r3, #50	; 0x32
 8003e86:	68b9      	ldr	r1, [r7, #8]
 8003e88:	480c      	ldr	r0, [pc, #48]	; (8003ebc <_write+0x48>)
 8003e8a:	f002 feba 	bl	8006c02 <HAL_UART_Transmit>
	for (i = 0; i < len; i++) {
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
 8003e92:	e009      	b.n	8003ea8 <_write+0x34>
		ITM_SendChar(*ptr++);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	60ba      	str	r2, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ffc1 	bl	8003e24 <ITM_SendChar>
	for (i = 0; i < len; i++) {
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	dbf1      	blt.n	8003e94 <_write+0x20>
	}
	return len;
 8003eb0:	687b      	ldr	r3, [r7, #4]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20006b40 	.word	0x20006b40

08003ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ec4:	f000 faf2 	bl	80044ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ec8:	f000 f816 	bl	8003ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ecc:	f000 f8a8 	bl	8004020 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8003ed0:	f000 f87c 	bl	8003fcc <MX_USART6_UART_Init>
  MX_LWIP_Init();
 8003ed4:	f003 f95e 	bl	8007194 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  http_server_init();
 8003ed8:	f7ff ff8c 	bl	8003df4 <http_server_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Hello world! \r\n");
 8003edc:	4804      	ldr	r0, [pc, #16]	; (8003ef0 <main+0x30>)
 8003ede:	f013 f9f7 	bl	80172d0 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8003ee2:	4804      	ldr	r0, [pc, #16]	; (8003ef4 <main+0x34>)
 8003ee4:	f003 fd2e 	bl	8007944 <ethernetif_input>
	  sys_check_timeouts();
 8003ee8:	f00d fe3e 	bl	8011b68 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8003eec:	e7f9      	b.n	8003ee2 <main+0x22>
 8003eee:	bf00      	nop
 8003ef0:	0801bcd8 	.word	0x0801bcd8
 8003ef4:	20006bd4 	.word	0x20006bd4

08003ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b094      	sub	sp, #80	; 0x50
 8003efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003efe:	f107 0320 	add.w	r3, r7, #32
 8003f02:	2230      	movs	r2, #48	; 0x30
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f012 fcea 	bl	80168e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f0c:	f107 030c 	add.w	r3, r7, #12
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <SystemClock_Config+0xcc>)
 8003f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f24:	4a27      	ldr	r2, [pc, #156]	; (8003fc4 <SystemClock_Config+0xcc>)
 8003f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <SystemClock_Config+0xcc>)
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f38:	2300      	movs	r3, #0
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <SystemClock_Config+0xd0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a21      	ldr	r2, [pc, #132]	; (8003fc8 <SystemClock_Config+0xd0>)
 8003f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <SystemClock_Config+0xd0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f54:	2301      	movs	r3, #1
 8003f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f68:	2304      	movs	r3, #4
 8003f6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003f6c:	23a8      	movs	r3, #168	; 0xa8
 8003f6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f70:	2302      	movs	r3, #2
 8003f72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003f74:	2304      	movs	r3, #4
 8003f76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f78:	f107 0320 	add.w	r3, r7, #32
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f001 fe9f 	bl	8005cc0 <HAL_RCC_OscConfig>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003f88:	f000 f8a0 	bl	80040cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f8c:	230f      	movs	r3, #15
 8003f8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f90:	2302      	movs	r3, #2
 8003f92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fa2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003fa4:	f107 030c 	add.w	r3, r7, #12
 8003fa8:	2105      	movs	r1, #5
 8003faa:	4618      	mov	r0, r3
 8003fac:	f002 f900 	bl	80061b0 <HAL_RCC_ClockConfig>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003fb6:	f000 f889 	bl	80040cc <Error_Handler>
  }
}
 8003fba:	bf00      	nop
 8003fbc:	3750      	adds	r7, #80	; 0x50
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40007000 	.word	0x40007000

08003fcc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003fd0:	4b11      	ldr	r3, [pc, #68]	; (8004018 <MX_USART6_UART_Init+0x4c>)
 8003fd2:	4a12      	ldr	r2, [pc, #72]	; (800401c <MX_USART6_UART_Init+0x50>)
 8003fd4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003fd6:	4b10      	ldr	r3, [pc, #64]	; (8004018 <MX_USART6_UART_Init+0x4c>)
 8003fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fdc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003fde:	4b0e      	ldr	r3, [pc, #56]	; (8004018 <MX_USART6_UART_Init+0x4c>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <MX_USART6_UART_Init+0x4c>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <MX_USART6_UART_Init+0x4c>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <MX_USART6_UART_Init+0x4c>)
 8003ff2:	220c      	movs	r2, #12
 8003ff4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <MX_USART6_UART_Init+0x4c>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <MX_USART6_UART_Init+0x4c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004002:	4805      	ldr	r0, [pc, #20]	; (8004018 <MX_USART6_UART_Init+0x4c>)
 8004004:	f002 fdb0 	bl	8006b68 <HAL_UART_Init>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800400e:	f000 f85d 	bl	80040cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20006b40 	.word	0x20006b40
 800401c:	40011400 	.word	0x40011400

08004020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4b1e      	ldr	r3, [pc, #120]	; (80040a4 <MX_GPIO_Init+0x84>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <MX_GPIO_Init+0x84>)
 8004030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004034:	6313      	str	r3, [r2, #48]	; 0x30
 8004036:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <MX_GPIO_Init+0x84>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004042:	2300      	movs	r3, #0
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <MX_GPIO_Init+0x84>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <MX_GPIO_Init+0x84>)
 800404c:	f043 0304 	orr.w	r3, r3, #4
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <MX_GPIO_Init+0x84>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	60bb      	str	r3, [r7, #8]
 800405c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <MX_GPIO_Init+0x84>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <MX_GPIO_Init+0x84>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6313      	str	r3, [r2, #48]	; 0x30
 800406e:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <MX_GPIO_Init+0x84>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <MX_GPIO_Init+0x84>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <MX_GPIO_Init+0x84>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	6313      	str	r3, [r2, #48]	; 0x30
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <MX_GPIO_Init+0x84>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	683b      	ldr	r3, [r7, #0]

}
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800

080040a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a04      	ldr	r2, [pc, #16]	; (80040c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80040ba:	f000 fa19 	bl	80044f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	40002000 	.word	0x40002000

080040cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040d0:	b672      	cpsid	i
}
 80040d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040d4:	e7fe      	b.n	80040d4 <Error_Handler+0x8>
	...

080040d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	4b10      	ldr	r3, [pc, #64]	; (8004124 <HAL_MspInit+0x4c>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	4a0f      	ldr	r2, [pc, #60]	; (8004124 <HAL_MspInit+0x4c>)
 80040e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040ec:	6453      	str	r3, [r2, #68]	; 0x44
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_MspInit+0x4c>)
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f6:	607b      	str	r3, [r7, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4b09      	ldr	r3, [pc, #36]	; (8004124 <HAL_MspInit+0x4c>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a08      	ldr	r2, [pc, #32]	; (8004124 <HAL_MspInit+0x4c>)
 8004104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_MspInit+0x4c>)
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800

08004128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	; 0x28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004130:	f107 0314 	add.w	r3, r7, #20
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	605a      	str	r2, [r3, #4]
 800413a:	609a      	str	r2, [r3, #8]
 800413c:	60da      	str	r2, [r3, #12]
 800413e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <HAL_UART_MspInit+0x84>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d12b      	bne.n	80041a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	4b18      	ldr	r3, [pc, #96]	; (80041b0 <HAL_UART_MspInit+0x88>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <HAL_UART_MspInit+0x88>)
 8004154:	f043 0320 	orr.w	r3, r3, #32
 8004158:	6453      	str	r3, [r2, #68]	; 0x44
 800415a:	4b15      	ldr	r3, [pc, #84]	; (80041b0 <HAL_UART_MspInit+0x88>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <HAL_UART_MspInit+0x88>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	4a10      	ldr	r2, [pc, #64]	; (80041b0 <HAL_UART_MspInit+0x88>)
 8004170:	f043 0304 	orr.w	r3, r3, #4
 8004174:	6313      	str	r3, [r2, #48]	; 0x30
 8004176:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <HAL_UART_MspInit+0x88>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004182:	23c0      	movs	r3, #192	; 0xc0
 8004184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004186:	2302      	movs	r3, #2
 8004188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418e:	2303      	movs	r3, #3
 8004190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004192:	2308      	movs	r3, #8
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	4619      	mov	r1, r3
 800419c:	4805      	ldr	r0, [pc, #20]	; (80041b4 <HAL_UART_MspInit+0x8c>)
 800419e:	f001 fbf3 	bl	8005988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80041a2:	bf00      	nop
 80041a4:	3728      	adds	r7, #40	; 0x28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40011400 	.word	0x40011400
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40020800 	.word	0x40020800

080041b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08c      	sub	sp, #48	; 0x30
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 80041c8:	2200      	movs	r2, #0
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	202d      	movs	r0, #45	; 0x2d
 80041ce:	f000 fa8b 	bl	80046e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80041d2:	202d      	movs	r0, #45	; 0x2d
 80041d4:	f000 faa4 	bl	8004720 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	4b1f      	ldr	r3, [pc, #124]	; (800425c <HAL_InitTick+0xa4>)
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	4a1e      	ldr	r2, [pc, #120]	; (800425c <HAL_InitTick+0xa4>)
 80041e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e6:	6413      	str	r3, [r2, #64]	; 0x40
 80041e8:	4b1c      	ldr	r3, [pc, #112]	; (800425c <HAL_InitTick+0xa4>)
 80041ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80041f4:	f107 0210 	add.w	r2, r7, #16
 80041f8:	f107 0314 	add.w	r3, r7, #20
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f002 f9d2 	bl	80065a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004204:	f002 f9a8 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 8004208:	4603      	mov	r3, r0
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800420e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004210:	4a13      	ldr	r2, [pc, #76]	; (8004260 <HAL_InitTick+0xa8>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0c9b      	lsrs	r3, r3, #18
 8004218:	3b01      	subs	r3, #1
 800421a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800421c:	4b11      	ldr	r3, [pc, #68]	; (8004264 <HAL_InitTick+0xac>)
 800421e:	4a12      	ldr	r2, [pc, #72]	; (8004268 <HAL_InitTick+0xb0>)
 8004220:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_InitTick+0xac>)
 8004224:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004228:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800422a:	4a0e      	ldr	r2, [pc, #56]	; (8004264 <HAL_InitTick+0xac>)
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_InitTick+0xac>)
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004236:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <HAL_InitTick+0xac>)
 8004238:	2200      	movs	r2, #0
 800423a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800423c:	4809      	ldr	r0, [pc, #36]	; (8004264 <HAL_InitTick+0xac>)
 800423e:	f002 f9e5 	bl	800660c <HAL_TIM_Base_Init>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d104      	bne.n	8004252 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004248:	4806      	ldr	r0, [pc, #24]	; (8004264 <HAL_InitTick+0xac>)
 800424a:	f002 fa39 	bl	80066c0 <HAL_TIM_Base_Start_IT>
 800424e:	4603      	mov	r3, r0
 8004250:	e000      	b.n	8004254 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
}
 8004254:	4618      	mov	r0, r3
 8004256:	3730      	adds	r7, #48	; 0x30
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40023800 	.word	0x40023800
 8004260:	431bde83 	.word	0x431bde83
 8004264:	20006b84 	.word	0x20006b84
 8004268:	40002000 	.word	0x40002000

0800426c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004270:	e7fe      	b.n	8004270 <NMI_Handler+0x4>

08004272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004276:	e7fe      	b.n	8004276 <HardFault_Handler+0x4>

08004278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800427c:	e7fe      	b.n	800427c <MemManage_Handler+0x4>

0800427e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800427e:	b480      	push	{r7}
 8004280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004282:	e7fe      	b.n	8004282 <BusFault_Handler+0x4>

08004284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004288:	e7fe      	b.n	8004288 <UsageFault_Handler+0x4>

0800428a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800428e:	bf00      	nop
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80042c8:	4802      	ldr	r0, [pc, #8]	; (80042d4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80042ca:	f002 fa69 	bl	80067a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20006b84 	.word	0x20006b84

080042d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
	return 1;
 80042dc:	2301      	movs	r3, #1
}
 80042de:	4618      	mov	r0, r3
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <_kill>:

int _kill(int pid, int sig)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <_kill+0x20>)
 80042f4:	2216      	movs	r2, #22
 80042f6:	601a      	str	r2, [r3, #0]
	return -1;
 80042f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	2000d67c 	.word	0x2000d67c

0800430c <_exit>:

void _exit (int status)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ffe5 	bl	80042e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800431e:	e7fe      	b.n	800431e <_exit+0x12>

08004320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	e00a      	b.n	8004348 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004332:	f3af 8000 	nop.w
 8004336:	4601      	mov	r1, r0
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	60ba      	str	r2, [r7, #8]
 800433e:	b2ca      	uxtb	r2, r1
 8004340:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	3301      	adds	r3, #1
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	429a      	cmp	r2, r3
 800434e:	dbf0      	blt.n	8004332 <_read+0x12>
	}

return len;
 8004350:	687b      	ldr	r3, [r7, #4]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <_close>:
	}
	return len;
}

int _close(int file)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
	return -1;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004382:	605a      	str	r2, [r3, #4]
	return 0;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <_isatty>:

int _isatty(int file)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
	return 1;
 800439a:	2301      	movs	r3, #1
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
	return 0;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043cc:	4a14      	ldr	r2, [pc, #80]	; (8004420 <_sbrk+0x5c>)
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <_sbrk+0x60>)
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043d8:	4b13      	ldr	r3, [pc, #76]	; (8004428 <_sbrk+0x64>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <_sbrk+0x64>)
 80043e2:	4a12      	ldr	r2, [pc, #72]	; (800442c <_sbrk+0x68>)
 80043e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <_sbrk+0x64>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d205      	bcs.n	8004400 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80043f4:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <_sbrk+0x6c>)
 80043f6:	220c      	movs	r2, #12
 80043f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043fe:	e009      	b.n	8004414 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004400:	4b09      	ldr	r3, [pc, #36]	; (8004428 <_sbrk+0x64>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004406:	4b08      	ldr	r3, [pc, #32]	; (8004428 <_sbrk+0x64>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	4a06      	ldr	r2, [pc, #24]	; (8004428 <_sbrk+0x64>)
 8004410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004412:	68fb      	ldr	r3, [r7, #12]
}
 8004414:	4618      	mov	r0, r3
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	20020000 	.word	0x20020000
 8004424:	00000400 	.word	0x00000400
 8004428:	200007f8 	.word	0x200007f8
 800442c:	2000d690 	.word	0x2000d690
 8004430:	2000d67c 	.word	0x2000d67c

08004434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <SystemInit+0x20>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <SystemInit+0x20>)
 8004440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800445c:	480d      	ldr	r0, [pc, #52]	; (8004494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800445e:	490e      	ldr	r1, [pc, #56]	; (8004498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004460:	4a0e      	ldr	r2, [pc, #56]	; (800449c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004464:	e002      	b.n	800446c <LoopCopyDataInit>

08004466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800446a:	3304      	adds	r3, #4

0800446c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800446c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800446e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004470:	d3f9      	bcc.n	8004466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004472:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004474:	4c0b      	ldr	r4, [pc, #44]	; (80044a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004478:	e001      	b.n	800447e <LoopFillZerobss>

0800447a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800447a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800447c:	3204      	adds	r2, #4

0800447e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800447e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004480:	d3fb      	bcc.n	800447a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004482:	f7ff ffd7 	bl	8004434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004486:	f012 f9d1 	bl	801682c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800448a:	f7ff fd19 	bl	8003ec0 <main>
  bx  lr    
 800448e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004498:	2000079c 	.word	0x2000079c
  ldr r2, =_sidata
 800449c:	080328d8 	.word	0x080328d8
  ldr r2, =_sbss
 80044a0:	2000079c 	.word	0x2000079c
  ldr r4, =_ebss
 80044a4:	2000d68c 	.word	0x2000d68c

080044a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044a8:	e7fe      	b.n	80044a8 <ADC_IRQHandler>
	...

080044ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80044b0:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <HAL_Init+0x40>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <HAL_Init+0x40>)
 80044b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_Init+0x40>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <HAL_Init+0x40>)
 80044c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044c8:	4b08      	ldr	r3, [pc, #32]	; (80044ec <HAL_Init+0x40>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a07      	ldr	r2, [pc, #28]	; (80044ec <HAL_Init+0x40>)
 80044ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044d4:	2003      	movs	r0, #3
 80044d6:	f000 f8fc 	bl	80046d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044da:	200f      	movs	r0, #15
 80044dc:	f7ff fe6c 	bl	80041b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044e0:	f7ff fdfa 	bl	80040d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40023c00 	.word	0x40023c00

080044f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <HAL_IncTick+0x20>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_IncTick+0x24>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4413      	add	r3, r2
 8004500:	4a04      	ldr	r2, [pc, #16]	; (8004514 <HAL_IncTick+0x24>)
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	200005b8 	.word	0x200005b8
 8004514:	20006bcc 	.word	0x20006bcc

08004518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return uwTick;
 800451c:	4b03      	ldr	r3, [pc, #12]	; (800452c <HAL_GetTick+0x14>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20006bcc 	.word	0x20006bcc

08004530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004538:	f7ff ffee 	bl	8004518 <HAL_GetTick>
 800453c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004548:	d005      	beq.n	8004556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <HAL_Delay+0x44>)
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004556:	bf00      	nop
 8004558:	f7ff ffde 	bl	8004518 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	429a      	cmp	r2, r3
 8004566:	d8f7      	bhi.n	8004558 <HAL_Delay+0x28>
  {
  }
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200005b8 	.word	0x200005b8

08004578 <__NVIC_SetPriorityGrouping>:
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <__NVIC_SetPriorityGrouping+0x44>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004594:	4013      	ands	r3, r2
 8004596:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045aa:	4a04      	ldr	r2, [pc, #16]	; (80045bc <__NVIC_SetPriorityGrouping+0x44>)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	60d3      	str	r3, [r2, #12]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <__NVIC_GetPriorityGrouping>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <__NVIC_GetPriorityGrouping+0x18>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	0a1b      	lsrs	r3, r3, #8
 80045ca:	f003 0307 	and.w	r3, r3, #7
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <__NVIC_EnableIRQ>:
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	db0b      	blt.n	8004606 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	f003 021f 	and.w	r2, r3, #31
 80045f4:	4907      	ldr	r1, [pc, #28]	; (8004614 <__NVIC_EnableIRQ+0x38>)
 80045f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	2001      	movs	r0, #1
 80045fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	e000e100 	.word	0xe000e100

08004618 <__NVIC_SetPriority>:
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	6039      	str	r1, [r7, #0]
 8004622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004628:	2b00      	cmp	r3, #0
 800462a:	db0a      	blt.n	8004642 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	490c      	ldr	r1, [pc, #48]	; (8004664 <__NVIC_SetPriority+0x4c>)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	0112      	lsls	r2, r2, #4
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	440b      	add	r3, r1
 800463c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004640:	e00a      	b.n	8004658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	b2da      	uxtb	r2, r3
 8004646:	4908      	ldr	r1, [pc, #32]	; (8004668 <__NVIC_SetPriority+0x50>)
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	3b04      	subs	r3, #4
 8004650:	0112      	lsls	r2, r2, #4
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	440b      	add	r3, r1
 8004656:	761a      	strb	r2, [r3, #24]
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	e000e100 	.word	0xe000e100
 8004668:	e000ed00 	.word	0xe000ed00

0800466c <NVIC_EncodePriority>:
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	; 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f1c3 0307 	rsb	r3, r3, #7
 8004686:	2b04      	cmp	r3, #4
 8004688:	bf28      	it	cs
 800468a:	2304      	movcs	r3, #4
 800468c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	3304      	adds	r3, #4
 8004692:	2b06      	cmp	r3, #6
 8004694:	d902      	bls.n	800469c <NVIC_EncodePriority+0x30>
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	3b03      	subs	r3, #3
 800469a:	e000      	b.n	800469e <NVIC_EncodePriority+0x32>
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43da      	mvns	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	401a      	ands	r2, r3
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	43d9      	mvns	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c4:	4313      	orrs	r3, r2
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3724      	adds	r7, #36	; 0x24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ff4c 	bl	8004578 <__NVIC_SetPriorityGrouping>
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046fa:	f7ff ff61 	bl	80045c0 <__NVIC_GetPriorityGrouping>
 80046fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	6978      	ldr	r0, [r7, #20]
 8004706:	f7ff ffb1 	bl	800466c <NVIC_EncodePriority>
 800470a:	4602      	mov	r2, r0
 800470c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff ff80 	bl	8004618 <__NVIC_SetPriority>
}
 8004718:	bf00      	nop
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800472a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff ff54 	bl	80045dc <__NVIC_EnableIRQ>
}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	61fb      	str	r3, [r7, #28]
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800474c:	4baa      	ldr	r3, [pc, #680]	; (80049f8 <HAL_ETH_Init+0x2bc>)
 800474e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e183      	b.n	8004a6a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f002 fe3e 	bl	80073f8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800477c:	2300      	movs	r3, #0
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	4b9e      	ldr	r3, [pc, #632]	; (80049fc <HAL_ETH_Init+0x2c0>)
 8004782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004784:	4a9d      	ldr	r2, [pc, #628]	; (80049fc <HAL_ETH_Init+0x2c0>)
 8004786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800478a:	6453      	str	r3, [r2, #68]	; 0x44
 800478c:	4b9b      	ldr	r3, [pc, #620]	; (80049fc <HAL_ETH_Init+0x2c0>)
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004798:	4b99      	ldr	r3, [pc, #612]	; (8004a00 <HAL_ETH_Init+0x2c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	4a98      	ldr	r2, [pc, #608]	; (8004a00 <HAL_ETH_Init+0x2c4>)
 800479e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80047a2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80047a4:	4b96      	ldr	r3, [pc, #600]	; (8004a00 <HAL_ETH_Init+0x2c4>)
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	4994      	ldr	r1, [pc, #592]	; (8004a00 <HAL_ETH_Init+0x2c4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80047ca:	f7ff fea5 	bl	8004518 <HAL_GetTick>
 80047ce:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80047d0:	e011      	b.n	80047f6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80047d2:	f7ff fea1 	bl	8004518 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047e0:	d909      	bls.n	80047f6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2203      	movs	r2, #3
 80047e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e139      	b.n	8004a6a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e4      	bne.n	80047d2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f023 031c 	bic.w	r3, r3, #28
 8004816:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004818:	f001 fe92 	bl	8006540 <HAL_RCC_GetHCLKFreq>
 800481c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	4a78      	ldr	r2, [pc, #480]	; (8004a04 <HAL_ETH_Init+0x2c8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d908      	bls.n	8004838 <HAL_ETH_Init+0xfc>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	4a77      	ldr	r2, [pc, #476]	; (8004a08 <HAL_ETH_Init+0x2cc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d804      	bhi.n	8004838 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f043 0308 	orr.w	r3, r3, #8
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	e027      	b.n	8004888 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	4a73      	ldr	r2, [pc, #460]	; (8004a08 <HAL_ETH_Init+0x2cc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d908      	bls.n	8004852 <HAL_ETH_Init+0x116>
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	4a6d      	ldr	r2, [pc, #436]	; (80049f8 <HAL_ETH_Init+0x2bc>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d204      	bcs.n	8004852 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f043 030c 	orr.w	r3, r3, #12
 800484e:	61fb      	str	r3, [r7, #28]
 8004850:	e01a      	b.n	8004888 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	4a68      	ldr	r2, [pc, #416]	; (80049f8 <HAL_ETH_Init+0x2bc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d303      	bcc.n	8004862 <HAL_ETH_Init+0x126>
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	4a6b      	ldr	r2, [pc, #428]	; (8004a0c <HAL_ETH_Init+0x2d0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d911      	bls.n	8004886 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	4a69      	ldr	r2, [pc, #420]	; (8004a0c <HAL_ETH_Init+0x2d0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d908      	bls.n	800487c <HAL_ETH_Init+0x140>
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	4a68      	ldr	r2, [pc, #416]	; (8004a10 <HAL_ETH_Init+0x2d4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d804      	bhi.n	800487c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f043 0304 	orr.w	r3, r3, #4
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	e005      	b.n	8004888 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f043 0310 	orr.w	r3, r3, #16
 8004882:	61fb      	str	r3, [r7, #28]
 8004884:	e000      	b.n	8004888 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004886:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004890:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004894:	2100      	movs	r1, #0
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 fb98 	bl	8004fcc <HAL_ETH_WritePHYRegister>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00b      	beq.n	80048ba <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80048a6:	6939      	ldr	r1, [r7, #16]
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fd4d 	bl	8005348 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e0d7      	b.n	8004a6a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80048ba:	20ff      	movs	r0, #255	; 0xff
 80048bc:	f7ff fe38 	bl	8004530 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80a5 	beq.w	8004a14 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80048ca:	f7ff fe25 	bl	8004518 <HAL_GetTick>
 80048ce:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	461a      	mov	r2, r3
 80048d6:	2101      	movs	r1, #1
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fb0f 	bl	8004efc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80048de:	f7ff fe1b 	bl	8004518 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d90f      	bls.n	8004910 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80048f4:	6939      	ldr	r1, [r7, #16]
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fd26 	bl	8005348 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e0ac      	b.n	8004a6a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0da      	beq.n	80048d0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800491a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800491e:	2100      	movs	r1, #0
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fb53 	bl	8004fcc <HAL_ETH_WritePHYRegister>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00b      	beq.n	8004944 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004930:	6939      	ldr	r1, [r7, #16]
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fd08 	bl	8005348 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004940:	2301      	movs	r3, #1
 8004942:	e092      	b.n	8004a6a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004944:	f7ff fde8 	bl	8004518 <HAL_GetTick>
 8004948:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800494a:	f107 030c 	add.w	r3, r7, #12
 800494e:	461a      	mov	r2, r3
 8004950:	2101      	movs	r1, #1
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fad2 	bl	8004efc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004958:	f7ff fdde 	bl	8004518 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d90f      	bls.n	800498a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800496e:	6939      	ldr	r1, [r7, #16]
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fce9 	bl	8005348 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e06f      	b.n	8004a6a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0da      	beq.n	800494a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004994:	f107 030c 	add.w	r3, r7, #12
 8004998:	461a      	mov	r2, r3
 800499a:	2110      	movs	r1, #16
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 faad 	bl	8004efc <HAL_ETH_ReadPHYRegister>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00b      	beq.n	80049c0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80049ac:	6939      	ldr	r1, [r7, #16]
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fcca 	bl	8005348 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80049bc:	2301      	movs	r3, #1
 80049be:	e054      	b.n	8004a6a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d004      	beq.n	80049d4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	e002      	b.n	80049da <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	e035      	b.n	8004a58 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	e030      	b.n	8004a58 <HAL_ETH_Init+0x31c>
 80049f6:	bf00      	nop
 80049f8:	03938700 	.word	0x03938700
 80049fc:	40023800 	.word	0x40023800
 8004a00:	40013800 	.word	0x40013800
 8004a04:	01312cff 	.word	0x01312cff
 8004a08:	02160ebf 	.word	0x02160ebf
 8004a0c:	05f5e0ff 	.word	0x05f5e0ff
 8004a10:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	08db      	lsrs	r3, r3, #3
 8004a1a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004a24:	4313      	orrs	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 facd 	bl	8004fcc <HAL_ETH_WritePHYRegister>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00b      	beq.n	8004a50 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004a3c:	6939      	ldr	r1, [r7, #16]
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fc82 	bl	8005348 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e00c      	b.n	8004a6a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004a50:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004a54:	f7ff fd6c 	bl	8004530 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004a58:	6939      	ldr	r1, [r7, #16]
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fc74 	bl	8005348 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop

08004a74 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_ETH_DMATxDescListInit+0x20>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e052      	b.n	8004b3a <HAL_ETH_DMATxDescListInit+0xc6>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
 8004aae:	e030      	b.n	8004b12 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	015b      	lsls	r3, r3, #5
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ac0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004ac8:	fb02 f303 	mul.w	r3, r2, r3
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	4413      	add	r3, r2
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d208      	bcs.n	8004b06 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3301      	adds	r3, #1
 8004af8:	015b      	lsls	r3, r3, #5
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	4413      	add	r3, r2
 8004afe:	461a      	mov	r2, r3
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	60da      	str	r2, [r3, #12]
 8004b04:	e002      	b.n	8004b0c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d3ca      	bcc.n	8004ab0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b24:	3310      	adds	r3, #16
 8004b26:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	371c      	adds	r7, #28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b087      	sub	sp, #28
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_ETH_DMARxDescListInit+0x20>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e056      	b.n	8004c14 <HAL_ETH_DMARxDescListInit+0xce>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	e034      	b.n	8004bec <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	015b      	lsls	r3, r3, #5
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	4413      	add	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004b92:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004b9a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	461a      	mov	r2, r3
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d105      	bne.n	8004bc4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d208      	bcs.n	8004be0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	015b      	lsls	r3, r3, #5
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	461a      	mov	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	e002      	b.n	8004be6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	3301      	adds	r3, #1
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d3c6      	bcc.n	8004b82 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfe:	330c      	adds	r3, #12
 8004c00:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_ETH_TransmitFrame+0x24>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e0cd      	b.n	8004de0 <HAL_ETH_TransmitFrame+0x1c0>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0b8      	b.n	8004de0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	da09      	bge.n	8004c8c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2212      	movs	r2, #18
 8004c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0a9      	b.n	8004de0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d915      	bls.n	8004cc2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	4a54      	ldr	r2, [pc, #336]	; (8004dec <HAL_ETH_TransmitFrame+0x1cc>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	0a9b      	lsrs	r3, r3, #10
 8004ca0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	4b51      	ldr	r3, [pc, #324]	; (8004dec <HAL_ETH_TransmitFrame+0x1cc>)
 8004ca6:	fba3 1302 	umull	r1, r3, r3, r2
 8004caa:	0a9b      	lsrs	r3, r3, #10
 8004cac:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004cb0:	fb01 f303 	mul.w	r3, r1, r3
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	e001      	b.n	8004cc6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d11c      	bne.n	8004d06 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004cda:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004ce6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004cf6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d04:	e04b      	b.n	8004d9e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	e044      	b.n	8004d96 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004d1a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d107      	bne.n	8004d32 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004d30:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004d3a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d116      	bne.n	8004d74 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d50:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004d54:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	4a25      	ldr	r2, [pc, #148]	; (8004df0 <HAL_ETH_TransmitFrame+0x1d0>)
 8004d5a:	fb02 f203 	mul.w	r2, r2, r3
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004d66:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004d72:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004d82:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	3301      	adds	r3, #1
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d3b6      	bcc.n	8004d0c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da6:	3314      	adds	r3, #20
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00d      	beq.n	8004dce <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dba:	3314      	adds	r3, #20
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc8:	3304      	adds	r3, #4
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	ac02b00b 	.word	0xac02b00b
 8004df0:	fffffa0c 	.word	0xfffffa0c

08004df4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_ETH_GetReceivedFrame+0x1a>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e070      	b.n	8004ef0 <HAL_ETH_GetReceivedFrame+0xfc>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2202      	movs	r2, #2
 8004e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	db5a      	blt.n	8004ede <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d030      	beq.n	8004e98 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d103      	bne.n	8004e50 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	0c1b      	lsrs	r3, r3, #16
 8004e60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004e64:	3b04      	subs	r3, #4
 8004e66:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	e02b      	b.n	8004ef0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d010      	beq.n	8004ec8 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ec6:	e00a      	b.n	8004ede <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	461a      	mov	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	460b      	mov	r3, r1
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b82      	cmp	r3, #130	; 0x82
 8004f1c:	d101      	bne.n	8004f22 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e050      	b.n	8004fc4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2282      	movs	r2, #130	; 0x82
 8004f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f003 031c 	and.w	r3, r3, #28
 8004f38:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8a1b      	ldrh	r3, [r3, #16]
 8004f3e:	02db      	lsls	r3, r3, #11
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8004f48:	897b      	ldrh	r3, [r7, #10]
 8004f4a:	019b      	lsls	r3, r3, #6
 8004f4c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 0302 	bic.w	r3, r3, #2
 8004f5c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f043 0301 	orr.w	r3, r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004f6e:	f7ff fad3 	bl	8004518 <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004f74:	e015      	b.n	8004fa2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8004f76:	f7ff facf 	bl	8004518 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f84:	d309      	bcc.n	8004f9a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e014      	b.n	8004fc4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e4      	bne.n	8004f76 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b42      	cmp	r3, #66	; 0x42
 8004fec:	d101      	bne.n	8004ff2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8004fee:	2302      	movs	r3, #2
 8004ff0:	e04e      	b.n	8005090 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2242      	movs	r2, #66	; 0x42
 8004ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f003 031c 	and.w	r3, r3, #28
 8005008:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8a1b      	ldrh	r3, [r3, #16]
 800500e:	02db      	lsls	r3, r3, #11
 8005010:	b29b      	uxth	r3, r3
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8005018:	897b      	ldrh	r3, [r7, #10]
 800501a:	019b      	lsls	r3, r3, #6
 800501c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f043 0302 	orr.w	r3, r3, #2
 800502c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f043 0301 	orr.w	r3, r3, #1
 8005034:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005048:	f7ff fa66 	bl	8004518 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800504e:	e015      	b.n	800507c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8005050:	f7ff fa62 	bl	8004518 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505e:	d309      	bcc.n	8005074 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e00d      	b.n	8005090 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e4      	bne.n	8005050 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d101      	bne.n	80050ae <HAL_ETH_Start+0x16>
 80050aa:	2302      	movs	r3, #2
 80050ac:	e01f      	b.n	80050ee <HAL_ETH_Start+0x56>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fb44 	bl	800574c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fb7b 	bl	80057c0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fc12 	bl	80058f4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fbaf 	bl	8005834 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fbdc 	bl	8005894 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_ETH_Stop+0x16>
 8005108:	2302      	movs	r3, #2
 800510a:	e01f      	b.n	800514c <HAL_ETH_Stop+0x56>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fba1 	bl	8005864 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fbce 	bl	80058c4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fb66 	bl	80057fa <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fbe0 	bl	80058f4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fb26 	bl	8005786 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_ETH_ConfigMAC+0x1c>
 800516c:	2302      	movs	r3, #2
 800516e:	e0e4      	b.n	800533a <HAL_ETH_ConfigMAC+0x1e6>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80b1 	beq.w	80052ea <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4b6c      	ldr	r3, [pc, #432]	; (8005344 <HAL_ETH_ConfigMAC+0x1f0>)
 8005194:	4013      	ands	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80051a0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80051a6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80051ac:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80051b2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80051b8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80051be:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80051c4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80051ca:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80051d0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80051d6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80051dc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80051e2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80051fa:	2001      	movs	r0, #1
 80051fc:	f7ff f998 	bl	8004530 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005210:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8005216:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800521c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8005222:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8005228:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800522e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800523a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800523c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005246:	2001      	movs	r0, #1
 8005248:	f7ff f972 	bl	8004530 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800525c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005266:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005276:	4013      	ands	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005284:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800528a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005290:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8005296:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800529c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80052b4:	2001      	movs	r0, #1
 80052b6:	f7ff f93b 	bl	8004530 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80052da:	2001      	movs	r0, #1
 80052dc:	f7ff f928 	bl	8004530 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	61da      	str	r2, [r3, #28]
 80052e8:	e01e      	b.n	8005328 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80052f8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800531a:	2001      	movs	r0, #1
 800531c:	f7ff f908 	bl	8004530 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	ff20810f 	.word	0xff20810f

08005348 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b0b0      	sub	sp, #192	; 0xc0
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005364:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800536c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800536e:	2300      	movs	r3, #0
 8005370:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005372:	2300      	movs	r3, #0
 8005374:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005376:	2300      	movs	r3, #0
 8005378:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800537a:	2300      	movs	r3, #0
 800537c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800537e:	2300      	movs	r3, #0
 8005380:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005382:	2300      	movs	r3, #0
 8005384:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800538e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005392:	663b      	str	r3, [r7, #96]	; 0x60
 8005394:	e001      	b.n	800539a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005396:	2300      	movs	r3, #0
 8005398:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800539a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800539e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80053a4:	2300      	movs	r3, #0
 80053a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80053b0:	2300      	movs	r3, #0
 80053b2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80053b8:	2300      	movs	r3, #0
 80053ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80053be:	2300      	movs	r3, #0
 80053c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80053ca:	2300      	movs	r3, #0
 80053cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80053d0:	2300      	movs	r3, #0
 80053d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80053e8:	2380      	movs	r3, #128	; 0x80
 80053ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8005400:	2300      	movs	r3, #0
 8005402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8005406:	2300      	movs	r3, #0
 8005408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800540c:	2300      	movs	r3, #0
 800540e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800541c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005420:	4bac      	ldr	r3, [pc, #688]	; (80056d4 <ETH_MACDMAConfig+0x38c>)
 8005422:	4013      	ands	r3, r2
 8005424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8005428:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800542a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800542c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800542e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005430:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005434:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800543a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800543c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800543e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005442:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005448:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800544a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800544c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800544e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005450:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005454:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005458:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800545a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800545c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800545e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005470:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800547c:	2001      	movs	r0, #1
 800547e:	f7ff f857 	bl	8004530 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800548a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800548c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800548e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005490:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005492:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005494:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800549a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800549c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80054a0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80054a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80054a6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80054a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80054ac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80054b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80054b8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80054ba:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80054c6:	2001      	movs	r0, #1
 80054c8:	f7ff f832 	bl	8004530 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80054d4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054de:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80054e8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80054f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80054f8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80054fc:	4013      	ands	r3, r2
 80054fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005502:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005506:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005508:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800550c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800550e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005512:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005518:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800551a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800551e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005524:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8005526:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005538:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005544:	2001      	movs	r0, #1
 8005546:	f7fe fff3 	bl	8004530 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005552:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005554:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005558:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800556e:	2001      	movs	r0, #1
 8005570:	f7fe ffde 	bl	8004530 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800557c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800557e:	2300      	movs	r3, #0
 8005580:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005586:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800558c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005590:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005592:	2300      	movs	r3, #0
 8005594:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005596:	2300      	movs	r3, #0
 8005598:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800559a:	2300      	movs	r3, #0
 800559c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800559e:	2300      	movs	r3, #0
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80055a2:	2304      	movs	r3, #4
 80055a4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80055a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80055ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055b0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80055b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80055b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055bc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80055be:	2380      	movs	r3, #128	; 0x80
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80055c6:	2300      	movs	r3, #0
 80055c8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d2:	3318      	adds	r3, #24
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80055da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80055de:	4b3e      	ldr	r3, [pc, #248]	; (80056d8 <ETH_MACDMAConfig+0x390>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80055e6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80055e8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80055ea:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80055ec:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80055ee:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80055f0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80055f2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80055f4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80055f6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80055f8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80055fa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80055fc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80055fe:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005602:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005606:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005608:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561a:	3318      	adds	r3, #24
 800561c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005620:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800562a:	3318      	adds	r3, #24
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005632:	2001      	movs	r0, #1
 8005634:	f7fe ff7c 	bl	8004530 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005640:	3318      	adds	r3, #24
 8005642:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005646:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800564c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800564e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005650:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005654:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005658:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800565a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800565c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800565e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005662:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800566c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005670:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005680:	2001      	movs	r0, #1
 8005682:	f7fe ff55 	bl	8004530 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800568e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005692:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d10f      	bne.n	80056bc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a4:	331c      	adds	r3, #28
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056b8:	331c      	adds	r3, #28
 80056ba:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	461a      	mov	r2, r3
 80056c2:	2100      	movs	r1, #0
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f809 	bl	80056dc <ETH_MACAddressConfig>
}
 80056ca:	bf00      	nop
 80056cc:	37c0      	adds	r7, #192	; 0xc0
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	ff20810f 	.word	0xff20810f
 80056d8:	f8de3f23 	.word	0xf8de3f23

080056dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3305      	adds	r3, #5
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	3204      	adds	r2, #4
 80056f4:	7812      	ldrb	r2, [r2, #0]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4b11      	ldr	r3, [pc, #68]	; (8005744 <ETH_MACAddressConfig+0x68>)
 80056fe:	4413      	add	r3, r2
 8005700:	461a      	mov	r2, r3
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3303      	adds	r3, #3
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	061a      	lsls	r2, r3, #24
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3302      	adds	r3, #2
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3301      	adds	r3, #1
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	4313      	orrs	r3, r2
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	7812      	ldrb	r2, [r2, #0]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	4b06      	ldr	r3, [pc, #24]	; (8005748 <ETH_MACAddressConfig+0x6c>)
 800572e:	4413      	add	r3, r2
 8005730:	461a      	mov	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	6013      	str	r3, [r2, #0]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	40028040 	.word	0x40028040
 8005748:	40028044 	.word	0x40028044

0800574c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005754:	2300      	movs	r3, #0
 8005756:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0208 	orr.w	r2, r2, #8
 8005766:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005770:	2001      	movs	r0, #1
 8005772:	f000 f8e9 	bl	8005948 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	601a      	str	r2, [r3, #0]
}
 800577e:	bf00      	nop
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0208 	bic.w	r2, r2, #8
 80057a0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80057aa:	2001      	movs	r0, #1
 80057ac:	f000 f8cc 	bl	8005948 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	601a      	str	r2, [r3, #0]
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80057c8:	2300      	movs	r3, #0
 80057ca:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0204 	orr.w	r2, r2, #4
 80057da:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80057e4:	2001      	movs	r0, #1
 80057e6:	f000 f8af 	bl	8005948 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	601a      	str	r2, [r3, #0]
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0204 	bic.w	r2, r2, #4
 8005814:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800581e:	2001      	movs	r0, #1
 8005820:	f000 f892 	bl	8005948 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	bf00      	nop
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005844:	3318      	adds	r3, #24
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005854:	3318      	adds	r3, #24
 8005856:	601a      	str	r2, [r3, #0]
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005874:	3318      	adds	r3, #24
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005884:	3318      	adds	r3, #24
 8005886:	601a      	str	r2, [r3, #0]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a4:	3318      	adds	r3, #24
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0202 	orr.w	r2, r2, #2
 80058b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b4:	3318      	adds	r3, #24
 80058b6:	601a      	str	r2, [r3, #0]
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d4:	3318      	adds	r3, #24
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0202 	bic.w	r2, r2, #2
 80058e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e4:	3318      	adds	r3, #24
 80058e6:	601a      	str	r2, [r3, #0]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005908:	3318      	adds	r3, #24
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005918:	3318      	adds	r3, #24
 800591a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005924:	3318      	adds	r3, #24
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800592a:	2001      	movs	r0, #1
 800592c:	f000 f80c 	bl	8005948 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800593a:	3318      	adds	r3, #24
 800593c:	601a      	str	r2, [r3, #0]
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005950:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <ETH_Delay+0x38>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <ETH_Delay+0x3c>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	0a5b      	lsrs	r3, r3, #9
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005964:	bf00      	nop
  } 
  while (Delay --);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1e5a      	subs	r2, r3, #1
 800596a:	60fa      	str	r2, [r7, #12]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f9      	bne.n	8005964 <ETH_Delay+0x1c>
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	200005b0 	.word	0x200005b0
 8005984:	10624dd3 	.word	0x10624dd3

08005988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005988:	b480      	push	{r7}
 800598a:	b089      	sub	sp, #36	; 0x24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005996:	2300      	movs	r3, #0
 8005998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800599a:	2300      	movs	r3, #0
 800599c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800599e:	2300      	movs	r3, #0
 80059a0:	61fb      	str	r3, [r7, #28]
 80059a2:	e16b      	b.n	8005c7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80059a4:	2201      	movs	r2, #1
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	429a      	cmp	r2, r3
 80059be:	f040 815a 	bne.w	8005c76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d005      	beq.n	80059da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d130      	bne.n	8005a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	2203      	movs	r2, #3
 80059e6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ea:	43db      	mvns	r3, r3
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	4013      	ands	r3, r2
 80059f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a10:	2201      	movs	r2, #1
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	f003 0201 	and.w	r2, r3, #1
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d017      	beq.n	8005a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	2203      	movs	r2, #3
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689a      	ldr	r2, [r3, #8]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d123      	bne.n	8005acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	08da      	lsrs	r2, r3, #3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3208      	adds	r2, #8
 8005a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	220f      	movs	r2, #15
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f003 0307 	and.w	r3, r3, #7
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	08da      	lsrs	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3208      	adds	r2, #8
 8005ac6:	69b9      	ldr	r1, [r7, #24]
 8005ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	43db      	mvns	r3, r3
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 0203 	and.w	r2, r3, #3
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80b4 	beq.w	8005c76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	4b60      	ldr	r3, [pc, #384]	; (8005c94 <HAL_GPIO_Init+0x30c>)
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	4a5f      	ldr	r2, [pc, #380]	; (8005c94 <HAL_GPIO_Init+0x30c>)
 8005b18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b1e:	4b5d      	ldr	r3, [pc, #372]	; (8005c94 <HAL_GPIO_Init+0x30c>)
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b2a:	4a5b      	ldr	r2, [pc, #364]	; (8005c98 <HAL_GPIO_Init+0x310>)
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	3302      	adds	r3, #2
 8005b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	220f      	movs	r2, #15
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43db      	mvns	r3, r3
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a52      	ldr	r2, [pc, #328]	; (8005c9c <HAL_GPIO_Init+0x314>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d02b      	beq.n	8005bae <HAL_GPIO_Init+0x226>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a51      	ldr	r2, [pc, #324]	; (8005ca0 <HAL_GPIO_Init+0x318>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d025      	beq.n	8005baa <HAL_GPIO_Init+0x222>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a50      	ldr	r2, [pc, #320]	; (8005ca4 <HAL_GPIO_Init+0x31c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01f      	beq.n	8005ba6 <HAL_GPIO_Init+0x21e>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a4f      	ldr	r2, [pc, #316]	; (8005ca8 <HAL_GPIO_Init+0x320>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d019      	beq.n	8005ba2 <HAL_GPIO_Init+0x21a>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a4e      	ldr	r2, [pc, #312]	; (8005cac <HAL_GPIO_Init+0x324>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <HAL_GPIO_Init+0x216>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a4d      	ldr	r2, [pc, #308]	; (8005cb0 <HAL_GPIO_Init+0x328>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00d      	beq.n	8005b9a <HAL_GPIO_Init+0x212>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a4c      	ldr	r2, [pc, #304]	; (8005cb4 <HAL_GPIO_Init+0x32c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d007      	beq.n	8005b96 <HAL_GPIO_Init+0x20e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a4b      	ldr	r2, [pc, #300]	; (8005cb8 <HAL_GPIO_Init+0x330>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d101      	bne.n	8005b92 <HAL_GPIO_Init+0x20a>
 8005b8e:	2307      	movs	r3, #7
 8005b90:	e00e      	b.n	8005bb0 <HAL_GPIO_Init+0x228>
 8005b92:	2308      	movs	r3, #8
 8005b94:	e00c      	b.n	8005bb0 <HAL_GPIO_Init+0x228>
 8005b96:	2306      	movs	r3, #6
 8005b98:	e00a      	b.n	8005bb0 <HAL_GPIO_Init+0x228>
 8005b9a:	2305      	movs	r3, #5
 8005b9c:	e008      	b.n	8005bb0 <HAL_GPIO_Init+0x228>
 8005b9e:	2304      	movs	r3, #4
 8005ba0:	e006      	b.n	8005bb0 <HAL_GPIO_Init+0x228>
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e004      	b.n	8005bb0 <HAL_GPIO_Init+0x228>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e002      	b.n	8005bb0 <HAL_GPIO_Init+0x228>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_GPIO_Init+0x228>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	f002 0203 	and.w	r2, r2, #3
 8005bb6:	0092      	lsls	r2, r2, #2
 8005bb8:	4093      	lsls	r3, r2
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bc0:	4935      	ldr	r1, [pc, #212]	; (8005c98 <HAL_GPIO_Init+0x310>)
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	089b      	lsrs	r3, r3, #2
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bce:	4b3b      	ldr	r3, [pc, #236]	; (8005cbc <HAL_GPIO_Init+0x334>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bf2:	4a32      	ldr	r2, [pc, #200]	; (8005cbc <HAL_GPIO_Init+0x334>)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005bf8:	4b30      	ldr	r3, [pc, #192]	; (8005cbc <HAL_GPIO_Init+0x334>)
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	43db      	mvns	r3, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4013      	ands	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c1c:	4a27      	ldr	r2, [pc, #156]	; (8005cbc <HAL_GPIO_Init+0x334>)
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c22:	4b26      	ldr	r3, [pc, #152]	; (8005cbc <HAL_GPIO_Init+0x334>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	43db      	mvns	r3, r3
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c46:	4a1d      	ldr	r2, [pc, #116]	; (8005cbc <HAL_GPIO_Init+0x334>)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	; (8005cbc <HAL_GPIO_Init+0x334>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	43db      	mvns	r3, r3
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c70:	4a12      	ldr	r2, [pc, #72]	; (8005cbc <HAL_GPIO_Init+0x334>)
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	f67f ae90 	bls.w	80059a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	3724      	adds	r7, #36	; 0x24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40013800 	.word	0x40013800
 8005c9c:	40020000 	.word	0x40020000
 8005ca0:	40020400 	.word	0x40020400
 8005ca4:	40020800 	.word	0x40020800
 8005ca8:	40020c00 	.word	0x40020c00
 8005cac:	40021000 	.word	0x40021000
 8005cb0:	40021400 	.word	0x40021400
 8005cb4:	40021800 	.word	0x40021800
 8005cb8:	40021c00 	.word	0x40021c00
 8005cbc:	40013c00 	.word	0x40013c00

08005cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e264      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d075      	beq.n	8005dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cde:	4ba3      	ldr	r3, [pc, #652]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d00c      	beq.n	8005d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cea:	4ba0      	ldr	r3, [pc, #640]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d112      	bne.n	8005d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cf6:	4b9d      	ldr	r3, [pc, #628]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d02:	d10b      	bne.n	8005d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d04:	4b99      	ldr	r3, [pc, #612]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d05b      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x108>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d157      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e23f      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d24:	d106      	bne.n	8005d34 <HAL_RCC_OscConfig+0x74>
 8005d26:	4b91      	ldr	r3, [pc, #580]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a90      	ldr	r2, [pc, #576]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	e01d      	b.n	8005d70 <HAL_RCC_OscConfig+0xb0>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d3c:	d10c      	bne.n	8005d58 <HAL_RCC_OscConfig+0x98>
 8005d3e:	4b8b      	ldr	r3, [pc, #556]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a8a      	ldr	r2, [pc, #552]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	4b88      	ldr	r3, [pc, #544]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a87      	ldr	r2, [pc, #540]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	e00b      	b.n	8005d70 <HAL_RCC_OscConfig+0xb0>
 8005d58:	4b84      	ldr	r3, [pc, #528]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a83      	ldr	r2, [pc, #524]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	4b81      	ldr	r3, [pc, #516]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a80      	ldr	r2, [pc, #512]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d013      	beq.n	8005da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7fe fbce 	bl	8004518 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d80:	f7fe fbca 	bl	8004518 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b64      	cmp	r3, #100	; 0x64
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e204      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d92:	4b76      	ldr	r3, [pc, #472]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0f0      	beq.n	8005d80 <HAL_RCC_OscConfig+0xc0>
 8005d9e:	e014      	b.n	8005dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da0:	f7fe fbba 	bl	8004518 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005da8:	f7fe fbb6 	bl	8004518 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b64      	cmp	r3, #100	; 0x64
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e1f0      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dba:	4b6c      	ldr	r3, [pc, #432]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f0      	bne.n	8005da8 <HAL_RCC_OscConfig+0xe8>
 8005dc6:	e000      	b.n	8005dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d063      	beq.n	8005e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dd6:	4b65      	ldr	r3, [pc, #404]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 030c 	and.w	r3, r3, #12
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00b      	beq.n	8005dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005de2:	4b62      	ldr	r3, [pc, #392]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d11c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dee:	4b5f      	ldr	r3, [pc, #380]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d116      	bne.n	8005e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dfa:	4b5c      	ldr	r3, [pc, #368]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_RCC_OscConfig+0x152>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d001      	beq.n	8005e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e1c4      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e12:	4b56      	ldr	r3, [pc, #344]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4952      	ldr	r1, [pc, #328]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e26:	e03a      	b.n	8005e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d020      	beq.n	8005e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e30:	4b4f      	ldr	r3, [pc, #316]	; (8005f70 <HAL_RCC_OscConfig+0x2b0>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e36:	f7fe fb6f 	bl	8004518 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e3e:	f7fe fb6b 	bl	8004518 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e1a5      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e50:	4b46      	ldr	r3, [pc, #280]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f0      	beq.n	8005e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5c:	4b43      	ldr	r3, [pc, #268]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4940      	ldr	r1, [pc, #256]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]
 8005e70:	e015      	b.n	8005e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e72:	4b3f      	ldr	r3, [pc, #252]	; (8005f70 <HAL_RCC_OscConfig+0x2b0>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fe fb4e 	bl	8004518 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e80:	f7fe fb4a 	bl	8004518 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e184      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e92:	4b36      	ldr	r3, [pc, #216]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d030      	beq.n	8005f0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d016      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eb2:	4b30      	ldr	r3, [pc, #192]	; (8005f74 <HAL_RCC_OscConfig+0x2b4>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb8:	f7fe fb2e 	bl	8004518 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec0:	f7fe fb2a 	bl	8004518 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e164      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ed2:	4b26      	ldr	r3, [pc, #152]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x200>
 8005ede:	e015      	b.n	8005f0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee0:	4b24      	ldr	r3, [pc, #144]	; (8005f74 <HAL_RCC_OscConfig+0x2b4>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee6:	f7fe fb17 	bl	8004518 <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eee:	f7fe fb13 	bl	8004518 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e14d      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f00:	4b1a      	ldr	r3, [pc, #104]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f04:	f003 0302 	and.w	r3, r3, #2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1f0      	bne.n	8005eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0304 	and.w	r3, r3, #4
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 80a0 	beq.w	800605a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10f      	bne.n	8005f4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	4a0e      	ldr	r2, [pc, #56]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f38:	6413      	str	r3, [r2, #64]	; 0x40
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f42:	60bb      	str	r3, [r7, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f46:	2301      	movs	r3, #1
 8005f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <HAL_RCC_OscConfig+0x2b8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d121      	bne.n	8005f9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f56:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <HAL_RCC_OscConfig+0x2b8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a07      	ldr	r2, [pc, #28]	; (8005f78 <HAL_RCC_OscConfig+0x2b8>)
 8005f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f62:	f7fe fad9 	bl	8004518 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f68:	e011      	b.n	8005f8e <HAL_RCC_OscConfig+0x2ce>
 8005f6a:	bf00      	nop
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	42470000 	.word	0x42470000
 8005f74:	42470e80 	.word	0x42470e80
 8005f78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f7c:	f7fe facc 	bl	8004518 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e106      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f8e:	4b85      	ldr	r3, [pc, #532]	; (80061a4 <HAL_RCC_OscConfig+0x4e4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0f0      	beq.n	8005f7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d106      	bne.n	8005fb0 <HAL_RCC_OscConfig+0x2f0>
 8005fa2:	4b81      	ldr	r3, [pc, #516]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa6:	4a80      	ldr	r2, [pc, #512]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fa8:	f043 0301 	orr.w	r3, r3, #1
 8005fac:	6713      	str	r3, [r2, #112]	; 0x70
 8005fae:	e01c      	b.n	8005fea <HAL_RCC_OscConfig+0x32a>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	2b05      	cmp	r3, #5
 8005fb6:	d10c      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x312>
 8005fb8:	4b7b      	ldr	r3, [pc, #492]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbc:	4a7a      	ldr	r2, [pc, #488]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fbe:	f043 0304 	orr.w	r3, r3, #4
 8005fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc4:	4b78      	ldr	r3, [pc, #480]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	4a77      	ldr	r2, [pc, #476]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fca:	f043 0301 	orr.w	r3, r3, #1
 8005fce:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd0:	e00b      	b.n	8005fea <HAL_RCC_OscConfig+0x32a>
 8005fd2:	4b75      	ldr	r3, [pc, #468]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	4a74      	ldr	r2, [pc, #464]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fd8:	f023 0301 	bic.w	r3, r3, #1
 8005fdc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fde:	4b72      	ldr	r3, [pc, #456]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe2:	4a71      	ldr	r2, [pc, #452]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8005fe4:	f023 0304 	bic.w	r3, r3, #4
 8005fe8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d015      	beq.n	800601e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff2:	f7fe fa91 	bl	8004518 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff8:	e00a      	b.n	8006010 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ffa:	f7fe fa8d 	bl	8004518 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	f241 3288 	movw	r2, #5000	; 0x1388
 8006008:	4293      	cmp	r3, r2
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e0c5      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006010:	4b65      	ldr	r3, [pc, #404]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ee      	beq.n	8005ffa <HAL_RCC_OscConfig+0x33a>
 800601c:	e014      	b.n	8006048 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800601e:	f7fe fa7b 	bl	8004518 <HAL_GetTick>
 8006022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006024:	e00a      	b.n	800603c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006026:	f7fe fa77 	bl	8004518 <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	f241 3288 	movw	r2, #5000	; 0x1388
 8006034:	4293      	cmp	r3, r2
 8006036:	d901      	bls.n	800603c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006038:	2303      	movs	r3, #3
 800603a:	e0af      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800603c:	4b5a      	ldr	r3, [pc, #360]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	f003 0302 	and.w	r3, r3, #2
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1ee      	bne.n	8006026 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d105      	bne.n	800605a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800604e:	4b56      	ldr	r3, [pc, #344]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	4a55      	ldr	r2, [pc, #340]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8006054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006058:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 809b 	beq.w	800619a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006064:	4b50      	ldr	r3, [pc, #320]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 030c 	and.w	r3, r3, #12
 800606c:	2b08      	cmp	r3, #8
 800606e:	d05c      	beq.n	800612a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d141      	bne.n	80060fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006078:	4b4c      	ldr	r3, [pc, #304]	; (80061ac <HAL_RCC_OscConfig+0x4ec>)
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800607e:	f7fe fa4b 	bl	8004518 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006086:	f7fe fa47 	bl	8004518 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e081      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006098:	4b43      	ldr	r3, [pc, #268]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f0      	bne.n	8006086 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	431a      	orrs	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	019b      	lsls	r3, r3, #6
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	3b01      	subs	r3, #1
 80060be:	041b      	lsls	r3, r3, #16
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c6:	061b      	lsls	r3, r3, #24
 80060c8:	4937      	ldr	r1, [pc, #220]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060ce:	4b37      	ldr	r3, [pc, #220]	; (80061ac <HAL_RCC_OscConfig+0x4ec>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fe fa20 	bl	8004518 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060dc:	f7fe fa1c 	bl	8004518 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e056      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ee:	4b2e      	ldr	r3, [pc, #184]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d0f0      	beq.n	80060dc <HAL_RCC_OscConfig+0x41c>
 80060fa:	e04e      	b.n	800619a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060fc:	4b2b      	ldr	r3, [pc, #172]	; (80061ac <HAL_RCC_OscConfig+0x4ec>)
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006102:	f7fe fa09 	bl	8004518 <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800610a:	f7fe fa05 	bl	8004518 <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e03f      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611c:	4b22      	ldr	r3, [pc, #136]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1f0      	bne.n	800610a <HAL_RCC_OscConfig+0x44a>
 8006128:	e037      	b.n	800619a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e032      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006136:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <HAL_RCC_OscConfig+0x4e8>)
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d028      	beq.n	8006196 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800614e:	429a      	cmp	r2, r3
 8006150:	d121      	bne.n	8006196 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615c:	429a      	cmp	r2, r3
 800615e:	d11a      	bne.n	8006196 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006166:	4013      	ands	r3, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800616c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800616e:	4293      	cmp	r3, r2
 8006170:	d111      	bne.n	8006196 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	085b      	lsrs	r3, r3, #1
 800617e:	3b01      	subs	r3, #1
 8006180:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d107      	bne.n	8006196 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d001      	beq.n	800619a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	40007000 	.word	0x40007000
 80061a8:	40023800 	.word	0x40023800
 80061ac:	42470060 	.word	0x42470060

080061b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0cc      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061c4:	4b68      	ldr	r3, [pc, #416]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d90c      	bls.n	80061ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061d2:	4b65      	ldr	r3, [pc, #404]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061da:	4b63      	ldr	r3, [pc, #396]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d001      	beq.n	80061ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e0b8      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d020      	beq.n	800623a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006204:	4b59      	ldr	r3, [pc, #356]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	4a58      	ldr	r2, [pc, #352]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800620e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800621c:	4b53      	ldr	r3, [pc, #332]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	4a52      	ldr	r2, [pc, #328]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006228:	4b50      	ldr	r3, [pc, #320]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	494d      	ldr	r1, [pc, #308]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	4313      	orrs	r3, r2
 8006238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	d044      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d107      	bne.n	800625e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800624e:	4b47      	ldr	r3, [pc, #284]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d119      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e07f      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d003      	beq.n	800626e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800626a:	2b03      	cmp	r3, #3
 800626c:	d107      	bne.n	800627e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626e:	4b3f      	ldr	r3, [pc, #252]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e06f      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800627e:	4b3b      	ldr	r3, [pc, #236]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e067      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800628e:	4b37      	ldr	r3, [pc, #220]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f023 0203 	bic.w	r2, r3, #3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4934      	ldr	r1, [pc, #208]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800629c:	4313      	orrs	r3, r2
 800629e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062a0:	f7fe f93a 	bl	8004518 <HAL_GetTick>
 80062a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a6:	e00a      	b.n	80062be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a8:	f7fe f936 	bl	8004518 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e04f      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062be:	4b2b      	ldr	r3, [pc, #172]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 020c 	and.w	r2, r3, #12
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d1eb      	bne.n	80062a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062d0:	4b25      	ldr	r3, [pc, #148]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d20c      	bcs.n	80062f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062de:	4b22      	ldr	r3, [pc, #136]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e6:	4b20      	ldr	r3, [pc, #128]	; (8006368 <HAL_RCC_ClockConfig+0x1b8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e032      	b.n	800635e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006304:	4b19      	ldr	r3, [pc, #100]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	4916      	ldr	r1, [pc, #88]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	4313      	orrs	r3, r2
 8006314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006322:	4b12      	ldr	r3, [pc, #72]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	490e      	ldr	r1, [pc, #56]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	4313      	orrs	r3, r2
 8006334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006336:	f000 f821 	bl	800637c <HAL_RCC_GetSysClockFreq>
 800633a:	4602      	mov	r2, r0
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	091b      	lsrs	r3, r3, #4
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	490a      	ldr	r1, [pc, #40]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 8006348:	5ccb      	ldrb	r3, [r1, r3]
 800634a:	fa22 f303 	lsr.w	r3, r2, r3
 800634e:	4a09      	ldr	r2, [pc, #36]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <HAL_RCC_ClockConfig+0x1c8>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f7fd ff2e 	bl	80041b8 <HAL_InitTick>

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	40023c00 	.word	0x40023c00
 800636c:	40023800 	.word	0x40023800
 8006370:	0801f330 	.word	0x0801f330
 8006374:	200005b0 	.word	0x200005b0
 8006378:	200005b4 	.word	0x200005b4

0800637c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800637c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	607b      	str	r3, [r7, #4]
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	2300      	movs	r3, #0
 800638e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006394:	4b67      	ldr	r3, [pc, #412]	; (8006534 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 030c 	and.w	r3, r3, #12
 800639c:	2b08      	cmp	r3, #8
 800639e:	d00d      	beq.n	80063bc <HAL_RCC_GetSysClockFreq+0x40>
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	f200 80bd 	bhi.w	8006520 <HAL_RCC_GetSysClockFreq+0x1a4>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_RCC_GetSysClockFreq+0x34>
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d003      	beq.n	80063b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80063ae:	e0b7      	b.n	8006520 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063b0:	4b61      	ldr	r3, [pc, #388]	; (8006538 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063b2:	60bb      	str	r3, [r7, #8]
       break;
 80063b4:	e0b7      	b.n	8006526 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063b6:	4b61      	ldr	r3, [pc, #388]	; (800653c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80063b8:	60bb      	str	r3, [r7, #8]
      break;
 80063ba:	e0b4      	b.n	8006526 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063bc:	4b5d      	ldr	r3, [pc, #372]	; (8006534 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063c6:	4b5b      	ldr	r3, [pc, #364]	; (8006534 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d04d      	beq.n	800646e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063d2:	4b58      	ldr	r3, [pc, #352]	; (8006534 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	099b      	lsrs	r3, r3, #6
 80063d8:	461a      	mov	r2, r3
 80063da:	f04f 0300 	mov.w	r3, #0
 80063de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063e2:	f04f 0100 	mov.w	r1, #0
 80063e6:	ea02 0800 	and.w	r8, r2, r0
 80063ea:	ea03 0901 	and.w	r9, r3, r1
 80063ee:	4640      	mov	r0, r8
 80063f0:	4649      	mov	r1, r9
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	014b      	lsls	r3, r1, #5
 80063fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006400:	0142      	lsls	r2, r0, #5
 8006402:	4610      	mov	r0, r2
 8006404:	4619      	mov	r1, r3
 8006406:	ebb0 0008 	subs.w	r0, r0, r8
 800640a:	eb61 0109 	sbc.w	r1, r1, r9
 800640e:	f04f 0200 	mov.w	r2, #0
 8006412:	f04f 0300 	mov.w	r3, #0
 8006416:	018b      	lsls	r3, r1, #6
 8006418:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800641c:	0182      	lsls	r2, r0, #6
 800641e:	1a12      	subs	r2, r2, r0
 8006420:	eb63 0301 	sbc.w	r3, r3, r1
 8006424:	f04f 0000 	mov.w	r0, #0
 8006428:	f04f 0100 	mov.w	r1, #0
 800642c:	00d9      	lsls	r1, r3, #3
 800642e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006432:	00d0      	lsls	r0, r2, #3
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	eb12 0208 	adds.w	r2, r2, r8
 800643c:	eb43 0309 	adc.w	r3, r3, r9
 8006440:	f04f 0000 	mov.w	r0, #0
 8006444:	f04f 0100 	mov.w	r1, #0
 8006448:	0259      	lsls	r1, r3, #9
 800644a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800644e:	0250      	lsls	r0, r2, #9
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4610      	mov	r0, r2
 8006456:	4619      	mov	r1, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	461a      	mov	r2, r3
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	f7fa fbd2 	bl	8000c08 <__aeabi_uldivmod>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4613      	mov	r3, r2
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	e04a      	b.n	8006504 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800646e:	4b31      	ldr	r3, [pc, #196]	; (8006534 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	099b      	lsrs	r3, r3, #6
 8006474:	461a      	mov	r2, r3
 8006476:	f04f 0300 	mov.w	r3, #0
 800647a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800647e:	f04f 0100 	mov.w	r1, #0
 8006482:	ea02 0400 	and.w	r4, r2, r0
 8006486:	ea03 0501 	and.w	r5, r3, r1
 800648a:	4620      	mov	r0, r4
 800648c:	4629      	mov	r1, r5
 800648e:	f04f 0200 	mov.w	r2, #0
 8006492:	f04f 0300 	mov.w	r3, #0
 8006496:	014b      	lsls	r3, r1, #5
 8006498:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800649c:	0142      	lsls	r2, r0, #5
 800649e:	4610      	mov	r0, r2
 80064a0:	4619      	mov	r1, r3
 80064a2:	1b00      	subs	r0, r0, r4
 80064a4:	eb61 0105 	sbc.w	r1, r1, r5
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	018b      	lsls	r3, r1, #6
 80064b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064b6:	0182      	lsls	r2, r0, #6
 80064b8:	1a12      	subs	r2, r2, r0
 80064ba:	eb63 0301 	sbc.w	r3, r3, r1
 80064be:	f04f 0000 	mov.w	r0, #0
 80064c2:	f04f 0100 	mov.w	r1, #0
 80064c6:	00d9      	lsls	r1, r3, #3
 80064c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064cc:	00d0      	lsls	r0, r2, #3
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	1912      	adds	r2, r2, r4
 80064d4:	eb45 0303 	adc.w	r3, r5, r3
 80064d8:	f04f 0000 	mov.w	r0, #0
 80064dc:	f04f 0100 	mov.w	r1, #0
 80064e0:	0299      	lsls	r1, r3, #10
 80064e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80064e6:	0290      	lsls	r0, r2, #10
 80064e8:	4602      	mov	r2, r0
 80064ea:	460b      	mov	r3, r1
 80064ec:	4610      	mov	r0, r2
 80064ee:	4619      	mov	r1, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	461a      	mov	r2, r3
 80064f4:	f04f 0300 	mov.w	r3, #0
 80064f8:	f7fa fb86 	bl	8000c08 <__aeabi_uldivmod>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4613      	mov	r3, r2
 8006502:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006504:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	0c1b      	lsrs	r3, r3, #16
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	3301      	adds	r3, #1
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	60bb      	str	r3, [r7, #8]
      break;
 800651e:	e002      	b.n	8006526 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006522:	60bb      	str	r3, [r7, #8]
      break;
 8006524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006526:	68bb      	ldr	r3, [r7, #8]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006532:	bf00      	nop
 8006534:	40023800 	.word	0x40023800
 8006538:	00f42400 	.word	0x00f42400
 800653c:	007a1200 	.word	0x007a1200

08006540 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006544:	4b03      	ldr	r3, [pc, #12]	; (8006554 <HAL_RCC_GetHCLKFreq+0x14>)
 8006546:	681b      	ldr	r3, [r3, #0]
}
 8006548:	4618      	mov	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	200005b0 	.word	0x200005b0

08006558 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800655c:	f7ff fff0 	bl	8006540 <HAL_RCC_GetHCLKFreq>
 8006560:	4602      	mov	r2, r0
 8006562:	4b05      	ldr	r3, [pc, #20]	; (8006578 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	0a9b      	lsrs	r3, r3, #10
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	4903      	ldr	r1, [pc, #12]	; (800657c <HAL_RCC_GetPCLK1Freq+0x24>)
 800656e:	5ccb      	ldrb	r3, [r1, r3]
 8006570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006574:	4618      	mov	r0, r3
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40023800 	.word	0x40023800
 800657c:	0801f340 	.word	0x0801f340

08006580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006584:	f7ff ffdc 	bl	8006540 <HAL_RCC_GetHCLKFreq>
 8006588:	4602      	mov	r2, r0
 800658a:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	0b5b      	lsrs	r3, r3, #13
 8006590:	f003 0307 	and.w	r3, r3, #7
 8006594:	4903      	ldr	r1, [pc, #12]	; (80065a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006596:	5ccb      	ldrb	r3, [r1, r3]
 8006598:	fa22 f303 	lsr.w	r3, r2, r3
}
 800659c:	4618      	mov	r0, r3
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40023800 	.word	0x40023800
 80065a4:	0801f340 	.word	0x0801f340

080065a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	220f      	movs	r2, #15
 80065b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80065b8:	4b12      	ldr	r3, [pc, #72]	; (8006604 <HAL_RCC_GetClockConfig+0x5c>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f003 0203 	and.w	r2, r3, #3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80065c4:	4b0f      	ldr	r3, [pc, #60]	; (8006604 <HAL_RCC_GetClockConfig+0x5c>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80065d0:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <HAL_RCC_GetClockConfig+0x5c>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <HAL_RCC_GetClockConfig+0x5c>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	08db      	lsrs	r3, r3, #3
 80065e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80065ea:	4b07      	ldr	r3, [pc, #28]	; (8006608 <HAL_RCC_GetClockConfig+0x60>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0207 	and.w	r2, r3, #7
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	601a      	str	r2, [r3, #0]
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40023800 	.word	0x40023800
 8006608:	40023c00 	.word	0x40023c00

0800660c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e041      	b.n	80066a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f839 	bl	80066aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3304      	adds	r3, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f000 f9d8 	bl	8006a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
	...

080066c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d001      	beq.n	80066d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e04e      	b.n	8006776 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0201 	orr.w	r2, r2, #1
 80066ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a23      	ldr	r2, [pc, #140]	; (8006784 <HAL_TIM_Base_Start_IT+0xc4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d022      	beq.n	8006740 <HAL_TIM_Base_Start_IT+0x80>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006702:	d01d      	beq.n	8006740 <HAL_TIM_Base_Start_IT+0x80>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1f      	ldr	r2, [pc, #124]	; (8006788 <HAL_TIM_Base_Start_IT+0xc8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d018      	beq.n	8006740 <HAL_TIM_Base_Start_IT+0x80>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1e      	ldr	r2, [pc, #120]	; (800678c <HAL_TIM_Base_Start_IT+0xcc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d013      	beq.n	8006740 <HAL_TIM_Base_Start_IT+0x80>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1c      	ldr	r2, [pc, #112]	; (8006790 <HAL_TIM_Base_Start_IT+0xd0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00e      	beq.n	8006740 <HAL_TIM_Base_Start_IT+0x80>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <HAL_TIM_Base_Start_IT+0xd4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d009      	beq.n	8006740 <HAL_TIM_Base_Start_IT+0x80>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a19      	ldr	r2, [pc, #100]	; (8006798 <HAL_TIM_Base_Start_IT+0xd8>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d004      	beq.n	8006740 <HAL_TIM_Base_Start_IT+0x80>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a18      	ldr	r2, [pc, #96]	; (800679c <HAL_TIM_Base_Start_IT+0xdc>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d111      	bne.n	8006764 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b06      	cmp	r3, #6
 8006750:	d010      	beq.n	8006774 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f042 0201 	orr.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006762:	e007      	b.n	8006774 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	40010000 	.word	0x40010000
 8006788:	40000400 	.word	0x40000400
 800678c:	40000800 	.word	0x40000800
 8006790:	40000c00 	.word	0x40000c00
 8006794:	40010400 	.word	0x40010400
 8006798:	40014000 	.word	0x40014000
 800679c:	40001800 	.word	0x40001800

080067a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d122      	bne.n	80067fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d11b      	bne.n	80067fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0202 	mvn.w	r2, #2
 80067cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2201      	movs	r2, #1
 80067d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f8ee 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 80067e8:	e005      	b.n	80067f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f8e0 	bl	80069b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f8f1 	bl	80069d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b04      	cmp	r3, #4
 8006808:	d122      	bne.n	8006850 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b04      	cmp	r3, #4
 8006816:	d11b      	bne.n	8006850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0204 	mvn.w	r2, #4
 8006820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2202      	movs	r2, #2
 8006826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 f8c4 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 800683c:	e005      	b.n	800684a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f8b6 	bl	80069b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f8c7 	bl	80069d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b08      	cmp	r3, #8
 800685c:	d122      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b08      	cmp	r3, #8
 800686a:	d11b      	bne.n	80068a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f06f 0208 	mvn.w	r2, #8
 8006874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2204      	movs	r2, #4
 800687a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f89a 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 8006890:	e005      	b.n	800689e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f88c 	bl	80069b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 f89d 	bl	80069d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	f003 0310 	and.w	r3, r3, #16
 80068ae:	2b10      	cmp	r3, #16
 80068b0:	d122      	bne.n	80068f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f003 0310 	and.w	r3, r3, #16
 80068bc:	2b10      	cmp	r3, #16
 80068be:	d11b      	bne.n	80068f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f06f 0210 	mvn.w	r2, #16
 80068c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2208      	movs	r2, #8
 80068ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d003      	beq.n	80068e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f870 	bl	80069c4 <HAL_TIM_IC_CaptureCallback>
 80068e4:	e005      	b.n	80068f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f862 	bl	80069b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f873 	bl	80069d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b01      	cmp	r3, #1
 8006904:	d10e      	bne.n	8006924 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b01      	cmp	r3, #1
 8006912:	d107      	bne.n	8006924 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f06f 0201 	mvn.w	r2, #1
 800691c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fd fbc2 	bl	80040a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692e:	2b80      	cmp	r3, #128	; 0x80
 8006930:	d10e      	bne.n	8006950 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693c:	2b80      	cmp	r3, #128	; 0x80
 800693e:	d107      	bne.n	8006950 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f902 	bl	8006b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d10e      	bne.n	800697c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d107      	bne.n	800697c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f838 	bl	80069ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0320 	and.w	r3, r3, #32
 8006986:	2b20      	cmp	r3, #32
 8006988:	d10e      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0320 	and.w	r3, r3, #32
 8006994:	2b20      	cmp	r3, #32
 8006996:	d107      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0220 	mvn.w	r2, #32
 80069a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f8cc 	bl	8006b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069a8:	bf00      	nop
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a40      	ldr	r2, [pc, #256]	; (8006b14 <TIM_Base_SetConfig+0x114>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d013      	beq.n	8006a40 <TIM_Base_SetConfig+0x40>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1e:	d00f      	beq.n	8006a40 <TIM_Base_SetConfig+0x40>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a3d      	ldr	r2, [pc, #244]	; (8006b18 <TIM_Base_SetConfig+0x118>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d00b      	beq.n	8006a40 <TIM_Base_SetConfig+0x40>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a3c      	ldr	r2, [pc, #240]	; (8006b1c <TIM_Base_SetConfig+0x11c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d007      	beq.n	8006a40 <TIM_Base_SetConfig+0x40>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a3b      	ldr	r2, [pc, #236]	; (8006b20 <TIM_Base_SetConfig+0x120>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_Base_SetConfig+0x40>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a3a      	ldr	r2, [pc, #232]	; (8006b24 <TIM_Base_SetConfig+0x124>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d108      	bne.n	8006a52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a2f      	ldr	r2, [pc, #188]	; (8006b14 <TIM_Base_SetConfig+0x114>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d02b      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a60:	d027      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a2c      	ldr	r2, [pc, #176]	; (8006b18 <TIM_Base_SetConfig+0x118>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d023      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a2b      	ldr	r2, [pc, #172]	; (8006b1c <TIM_Base_SetConfig+0x11c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d01f      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a2a      	ldr	r2, [pc, #168]	; (8006b20 <TIM_Base_SetConfig+0x120>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01b      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <TIM_Base_SetConfig+0x124>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d017      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a28      	ldr	r2, [pc, #160]	; (8006b28 <TIM_Base_SetConfig+0x128>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a27      	ldr	r2, [pc, #156]	; (8006b2c <TIM_Base_SetConfig+0x12c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00f      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a26      	ldr	r2, [pc, #152]	; (8006b30 <TIM_Base_SetConfig+0x130>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00b      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a25      	ldr	r2, [pc, #148]	; (8006b34 <TIM_Base_SetConfig+0x134>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d007      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a24      	ldr	r2, [pc, #144]	; (8006b38 <TIM_Base_SetConfig+0x138>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d003      	beq.n	8006ab2 <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a23      	ldr	r2, [pc, #140]	; (8006b3c <TIM_Base_SetConfig+0x13c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d108      	bne.n	8006ac4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a0a      	ldr	r2, [pc, #40]	; (8006b14 <TIM_Base_SetConfig+0x114>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d003      	beq.n	8006af8 <TIM_Base_SetConfig+0xf8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a0c      	ldr	r2, [pc, #48]	; (8006b24 <TIM_Base_SetConfig+0x124>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d103      	bne.n	8006b00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	615a      	str	r2, [r3, #20]
}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40010000 	.word	0x40010000
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	40010400 	.word	0x40010400
 8006b28:	40014000 	.word	0x40014000
 8006b2c:	40014400 	.word	0x40014400
 8006b30:	40014800 	.word	0x40014800
 8006b34:	40001800 	.word	0x40001800
 8006b38:	40001c00 	.word	0x40001c00
 8006b3c:	40002000 	.word	0x40002000

08006b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e03f      	b.n	8006bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f7fd faca 	bl	8004128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2224      	movs	r2, #36	; 0x24
 8006b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 f929 	bl	8006e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	691a      	ldr	r2, [r3, #16]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	695a      	ldr	r2, [r3, #20]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2220      	movs	r2, #32
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b08a      	sub	sp, #40	; 0x28
 8006c06:	af02      	add	r7, sp, #8
 8006c08:	60f8      	str	r0, [r7, #12]
 8006c0a:	60b9      	str	r1, [r7, #8]
 8006c0c:	603b      	str	r3, [r7, #0]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d17c      	bne.n	8006d1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <HAL_UART_Transmit+0x2c>
 8006c28:	88fb      	ldrh	r3, [r7, #6]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e075      	b.n	8006d1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_UART_Transmit+0x3e>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e06e      	b.n	8006d1e <HAL_UART_Transmit+0x11c>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2221      	movs	r2, #33	; 0x21
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c56:	f7fd fc5f 	bl	8004518 <HAL_GetTick>
 8006c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	88fa      	ldrh	r2, [r7, #6]
 8006c60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	88fa      	ldrh	r2, [r7, #6]
 8006c66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c70:	d108      	bne.n	8006c84 <HAL_UART_Transmit+0x82>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d104      	bne.n	8006c84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	61bb      	str	r3, [r7, #24]
 8006c82:	e003      	b.n	8006c8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c94:	e02a      	b.n	8006cec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2180      	movs	r1, #128	; 0x80
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f840 	bl	8006d26 <UART_WaitOnFlagUntilTimeout>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e036      	b.n	8006d1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	3302      	adds	r3, #2
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	e007      	b.n	8006cde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	781a      	ldrb	r2, [r3, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	b29a      	uxth	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1cf      	bne.n	8006c96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2140      	movs	r1, #64	; 0x40
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f810 	bl	8006d26 <UART_WaitOnFlagUntilTimeout>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e006      	b.n	8006d1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	e000      	b.n	8006d1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d1c:	2302      	movs	r3, #2
  }
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b090      	sub	sp, #64	; 0x40
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d36:	e050      	b.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d3e:	d04c      	beq.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d007      	beq.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d46:	f7fd fbe7 	bl	8004518 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d241      	bcs.n	8006dda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	330c      	adds	r3, #12
 8006d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	330c      	adds	r3, #12
 8006d74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d76:	637a      	str	r2, [r7, #52]	; 0x34
 8006d78:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d7e:	e841 2300 	strex	r3, r2, [r1]
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d1e5      	bne.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3314      	adds	r3, #20
 8006d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	613b      	str	r3, [r7, #16]
   return(result);
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f023 0301 	bic.w	r3, r3, #1
 8006da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3314      	adds	r3, #20
 8006da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006daa:	623a      	str	r2, [r7, #32]
 8006dac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	69f9      	ldr	r1, [r7, #28]
 8006db0:	6a3a      	ldr	r2, [r7, #32]
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e5      	bne.n	8006d8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e00f      	b.n	8006dfa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	bf0c      	ite	eq
 8006dea:	2301      	moveq	r3, #1
 8006dec:	2300      	movne	r3, #0
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	461a      	mov	r2, r3
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d09f      	beq.n	8006d38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3740      	adds	r7, #64	; 0x40
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
	...

08006e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	b09f      	sub	sp, #124	; 0x7c
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1a:	68d9      	ldr	r1, [r3, #12]
 8006e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	ea40 0301 	orr.w	r3, r0, r1
 8006e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e28:	689a      	ldr	r2, [r3, #8]
 8006e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	431a      	orrs	r2, r3
 8006e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e48:	f021 010c 	bic.w	r1, r1, #12
 8006e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e52:	430b      	orrs	r3, r1
 8006e54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e62:	6999      	ldr	r1, [r3, #24]
 8006e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	ea40 0301 	orr.w	r3, r0, r1
 8006e6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4bc5      	ldr	r3, [pc, #788]	; (8007188 <UART_SetConfig+0x384>)
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d004      	beq.n	8006e82 <UART_SetConfig+0x7e>
 8006e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	4bc3      	ldr	r3, [pc, #780]	; (800718c <UART_SetConfig+0x388>)
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d103      	bne.n	8006e8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e82:	f7ff fb7d 	bl	8006580 <HAL_RCC_GetPCLK2Freq>
 8006e86:	6778      	str	r0, [r7, #116]	; 0x74
 8006e88:	e002      	b.n	8006e90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e8a:	f7ff fb65 	bl	8006558 <HAL_RCC_GetPCLK1Freq>
 8006e8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e98:	f040 80b6 	bne.w	8007008 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e9e:	461c      	mov	r4, r3
 8006ea0:	f04f 0500 	mov.w	r5, #0
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	1891      	adds	r1, r2, r2
 8006eaa:	6439      	str	r1, [r7, #64]	; 0x40
 8006eac:	415b      	adcs	r3, r3
 8006eae:	647b      	str	r3, [r7, #68]	; 0x44
 8006eb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006eb4:	1912      	adds	r2, r2, r4
 8006eb6:	eb45 0303 	adc.w	r3, r5, r3
 8006eba:	f04f 0000 	mov.w	r0, #0
 8006ebe:	f04f 0100 	mov.w	r1, #0
 8006ec2:	00d9      	lsls	r1, r3, #3
 8006ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ec8:	00d0      	lsls	r0, r2, #3
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	1911      	adds	r1, r2, r4
 8006ed0:	6639      	str	r1, [r7, #96]	; 0x60
 8006ed2:	416b      	adcs	r3, r5
 8006ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	461a      	mov	r2, r3
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	1891      	adds	r1, r2, r2
 8006ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ee4:	415b      	adcs	r3, r3
 8006ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006eec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006ef0:	f7f9 fe8a 	bl	8000c08 <__aeabi_uldivmod>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4ba5      	ldr	r3, [pc, #660]	; (8007190 <UART_SetConfig+0x38c>)
 8006efa:	fba3 2302 	umull	r2, r3, r3, r2
 8006efe:	095b      	lsrs	r3, r3, #5
 8006f00:	011e      	lsls	r6, r3, #4
 8006f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f04:	461c      	mov	r4, r3
 8006f06:	f04f 0500 	mov.w	r5, #0
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	462b      	mov	r3, r5
 8006f0e:	1891      	adds	r1, r2, r2
 8006f10:	6339      	str	r1, [r7, #48]	; 0x30
 8006f12:	415b      	adcs	r3, r3
 8006f14:	637b      	str	r3, [r7, #52]	; 0x34
 8006f16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f1a:	1912      	adds	r2, r2, r4
 8006f1c:	eb45 0303 	adc.w	r3, r5, r3
 8006f20:	f04f 0000 	mov.w	r0, #0
 8006f24:	f04f 0100 	mov.w	r1, #0
 8006f28:	00d9      	lsls	r1, r3, #3
 8006f2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f2e:	00d0      	lsls	r0, r2, #3
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	1911      	adds	r1, r2, r4
 8006f36:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f38:	416b      	adcs	r3, r5
 8006f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	461a      	mov	r2, r3
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	1891      	adds	r1, r2, r2
 8006f48:	62b9      	str	r1, [r7, #40]	; 0x28
 8006f4a:	415b      	adcs	r3, r3
 8006f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006f56:	f7f9 fe57 	bl	8000c08 <__aeabi_uldivmod>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4b8c      	ldr	r3, [pc, #560]	; (8007190 <UART_SetConfig+0x38c>)
 8006f60:	fba3 1302 	umull	r1, r3, r3, r2
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	2164      	movs	r1, #100	; 0x64
 8006f68:	fb01 f303 	mul.w	r3, r1, r3
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	3332      	adds	r3, #50	; 0x32
 8006f72:	4a87      	ldr	r2, [pc, #540]	; (8007190 <UART_SetConfig+0x38c>)
 8006f74:	fba2 2303 	umull	r2, r3, r2, r3
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f80:	441e      	add	r6, r3
 8006f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f84:	4618      	mov	r0, r3
 8006f86:	f04f 0100 	mov.w	r1, #0
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	1894      	adds	r4, r2, r2
 8006f90:	623c      	str	r4, [r7, #32]
 8006f92:	415b      	adcs	r3, r3
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
 8006f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f9a:	1812      	adds	r2, r2, r0
 8006f9c:	eb41 0303 	adc.w	r3, r1, r3
 8006fa0:	f04f 0400 	mov.w	r4, #0
 8006fa4:	f04f 0500 	mov.w	r5, #0
 8006fa8:	00dd      	lsls	r5, r3, #3
 8006faa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fae:	00d4      	lsls	r4, r2, #3
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	1814      	adds	r4, r2, r0
 8006fb6:	653c      	str	r4, [r7, #80]	; 0x50
 8006fb8:	414b      	adcs	r3, r1
 8006fba:	657b      	str	r3, [r7, #84]	; 0x54
 8006fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	1891      	adds	r1, r2, r2
 8006fc8:	61b9      	str	r1, [r7, #24]
 8006fca:	415b      	adcs	r3, r3
 8006fcc:	61fb      	str	r3, [r7, #28]
 8006fce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fd2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006fd6:	f7f9 fe17 	bl	8000c08 <__aeabi_uldivmod>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	4b6c      	ldr	r3, [pc, #432]	; (8007190 <UART_SetConfig+0x38c>)
 8006fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe4:	095b      	lsrs	r3, r3, #5
 8006fe6:	2164      	movs	r1, #100	; 0x64
 8006fe8:	fb01 f303 	mul.w	r3, r1, r3
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	3332      	adds	r3, #50	; 0x32
 8006ff2:	4a67      	ldr	r2, [pc, #412]	; (8007190 <UART_SetConfig+0x38c>)
 8006ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff8:	095b      	lsrs	r3, r3, #5
 8006ffa:	f003 0207 	and.w	r2, r3, #7
 8006ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4432      	add	r2, r6
 8007004:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007006:	e0b9      	b.n	800717c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800700a:	461c      	mov	r4, r3
 800700c:	f04f 0500 	mov.w	r5, #0
 8007010:	4622      	mov	r2, r4
 8007012:	462b      	mov	r3, r5
 8007014:	1891      	adds	r1, r2, r2
 8007016:	6139      	str	r1, [r7, #16]
 8007018:	415b      	adcs	r3, r3
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007020:	1912      	adds	r2, r2, r4
 8007022:	eb45 0303 	adc.w	r3, r5, r3
 8007026:	f04f 0000 	mov.w	r0, #0
 800702a:	f04f 0100 	mov.w	r1, #0
 800702e:	00d9      	lsls	r1, r3, #3
 8007030:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007034:	00d0      	lsls	r0, r2, #3
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	eb12 0804 	adds.w	r8, r2, r4
 800703e:	eb43 0905 	adc.w	r9, r3, r5
 8007042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	4618      	mov	r0, r3
 8007048:	f04f 0100 	mov.w	r1, #0
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	008b      	lsls	r3, r1, #2
 8007056:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800705a:	0082      	lsls	r2, r0, #2
 800705c:	4640      	mov	r0, r8
 800705e:	4649      	mov	r1, r9
 8007060:	f7f9 fdd2 	bl	8000c08 <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4b49      	ldr	r3, [pc, #292]	; (8007190 <UART_SetConfig+0x38c>)
 800706a:	fba3 2302 	umull	r2, r3, r3, r2
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	011e      	lsls	r6, r3, #4
 8007072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007074:	4618      	mov	r0, r3
 8007076:	f04f 0100 	mov.w	r1, #0
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	1894      	adds	r4, r2, r2
 8007080:	60bc      	str	r4, [r7, #8]
 8007082:	415b      	adcs	r3, r3
 8007084:	60fb      	str	r3, [r7, #12]
 8007086:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800708a:	1812      	adds	r2, r2, r0
 800708c:	eb41 0303 	adc.w	r3, r1, r3
 8007090:	f04f 0400 	mov.w	r4, #0
 8007094:	f04f 0500 	mov.w	r5, #0
 8007098:	00dd      	lsls	r5, r3, #3
 800709a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800709e:	00d4      	lsls	r4, r2, #3
 80070a0:	4622      	mov	r2, r4
 80070a2:	462b      	mov	r3, r5
 80070a4:	1814      	adds	r4, r2, r0
 80070a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80070a8:	414b      	adcs	r3, r1
 80070aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f04f 0100 	mov.w	r1, #0
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	008b      	lsls	r3, r1, #2
 80070c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070c4:	0082      	lsls	r2, r0, #2
 80070c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80070ca:	f7f9 fd9d 	bl	8000c08 <__aeabi_uldivmod>
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	4b2f      	ldr	r3, [pc, #188]	; (8007190 <UART_SetConfig+0x38c>)
 80070d4:	fba3 1302 	umull	r1, r3, r3, r2
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	2164      	movs	r1, #100	; 0x64
 80070dc:	fb01 f303 	mul.w	r3, r1, r3
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	3332      	adds	r3, #50	; 0x32
 80070e6:	4a2a      	ldr	r2, [pc, #168]	; (8007190 <UART_SetConfig+0x38c>)
 80070e8:	fba2 2303 	umull	r2, r3, r2, r3
 80070ec:	095b      	lsrs	r3, r3, #5
 80070ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070f2:	441e      	add	r6, r3
 80070f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070f6:	4618      	mov	r0, r3
 80070f8:	f04f 0100 	mov.w	r1, #0
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	1894      	adds	r4, r2, r2
 8007102:	603c      	str	r4, [r7, #0]
 8007104:	415b      	adcs	r3, r3
 8007106:	607b      	str	r3, [r7, #4]
 8007108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800710c:	1812      	adds	r2, r2, r0
 800710e:	eb41 0303 	adc.w	r3, r1, r3
 8007112:	f04f 0400 	mov.w	r4, #0
 8007116:	f04f 0500 	mov.w	r5, #0
 800711a:	00dd      	lsls	r5, r3, #3
 800711c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007120:	00d4      	lsls	r4, r2, #3
 8007122:	4622      	mov	r2, r4
 8007124:	462b      	mov	r3, r5
 8007126:	eb12 0a00 	adds.w	sl, r2, r0
 800712a:	eb43 0b01 	adc.w	fp, r3, r1
 800712e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	4618      	mov	r0, r3
 8007134:	f04f 0100 	mov.w	r1, #0
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	f04f 0300 	mov.w	r3, #0
 8007140:	008b      	lsls	r3, r1, #2
 8007142:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007146:	0082      	lsls	r2, r0, #2
 8007148:	4650      	mov	r0, sl
 800714a:	4659      	mov	r1, fp
 800714c:	f7f9 fd5c 	bl	8000c08 <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4b0e      	ldr	r3, [pc, #56]	; (8007190 <UART_SetConfig+0x38c>)
 8007156:	fba3 1302 	umull	r1, r3, r3, r2
 800715a:	095b      	lsrs	r3, r3, #5
 800715c:	2164      	movs	r1, #100	; 0x64
 800715e:	fb01 f303 	mul.w	r3, r1, r3
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	3332      	adds	r3, #50	; 0x32
 8007168:	4a09      	ldr	r2, [pc, #36]	; (8007190 <UART_SetConfig+0x38c>)
 800716a:	fba2 2303 	umull	r2, r3, r2, r3
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	f003 020f 	and.w	r2, r3, #15
 8007174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4432      	add	r2, r6
 800717a:	609a      	str	r2, [r3, #8]
}
 800717c:	bf00      	nop
 800717e:	377c      	adds	r7, #124	; 0x7c
 8007180:	46bd      	mov	sp, r7
 8007182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007186:	bf00      	nop
 8007188:	40011000 	.word	0x40011000
 800718c:	40011400 	.word	0x40011400
 8007190:	51eb851f 	.word	0x51eb851f

08007194 <MX_LWIP_Init>:
  dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */
#else
  void MX_LWIP_Init(void)
  {
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af04      	add	r7, sp, #16
    /* IP addresses initialization */
    IP_ADDRESS[0] = 192;
 800719a:	4b8d      	ldr	r3, [pc, #564]	; (80073d0 <MX_LWIP_Init+0x23c>)
 800719c:	22c0      	movs	r2, #192	; 0xc0
 800719e:	701a      	strb	r2, [r3, #0]
    IP_ADDRESS[1] = 168;
 80071a0:	4b8b      	ldr	r3, [pc, #556]	; (80073d0 <MX_LWIP_Init+0x23c>)
 80071a2:	22a8      	movs	r2, #168	; 0xa8
 80071a4:	705a      	strb	r2, [r3, #1]
    IP_ADDRESS[2] = 18;
 80071a6:	4b8a      	ldr	r3, [pc, #552]	; (80073d0 <MX_LWIP_Init+0x23c>)
 80071a8:	2212      	movs	r2, #18
 80071aa:	709a      	strb	r2, [r3, #2]
    IP_ADDRESS[3] = 111;
 80071ac:	4b88      	ldr	r3, [pc, #544]	; (80073d0 <MX_LWIP_Init+0x23c>)
 80071ae:	226f      	movs	r2, #111	; 0x6f
 80071b0:	70da      	strb	r2, [r3, #3]
    NETMASK_ADDRESS[0] = 255;
 80071b2:	4b88      	ldr	r3, [pc, #544]	; (80073d4 <MX_LWIP_Init+0x240>)
 80071b4:	22ff      	movs	r2, #255	; 0xff
 80071b6:	701a      	strb	r2, [r3, #0]
    NETMASK_ADDRESS[1] = 255;
 80071b8:	4b86      	ldr	r3, [pc, #536]	; (80073d4 <MX_LWIP_Init+0x240>)
 80071ba:	22ff      	movs	r2, #255	; 0xff
 80071bc:	705a      	strb	r2, [r3, #1]
    NETMASK_ADDRESS[2] = 255;
 80071be:	4b85      	ldr	r3, [pc, #532]	; (80073d4 <MX_LWIP_Init+0x240>)
 80071c0:	22ff      	movs	r2, #255	; 0xff
 80071c2:	709a      	strb	r2, [r3, #2]
    NETMASK_ADDRESS[3] = 0;
 80071c4:	4b83      	ldr	r3, [pc, #524]	; (80073d4 <MX_LWIP_Init+0x240>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	70da      	strb	r2, [r3, #3]
    GATEWAY_ADDRESS[0] = 192;
 80071ca:	4b83      	ldr	r3, [pc, #524]	; (80073d8 <MX_LWIP_Init+0x244>)
 80071cc:	22c0      	movs	r2, #192	; 0xc0
 80071ce:	701a      	strb	r2, [r3, #0]
    GATEWAY_ADDRESS[1] = 168;
 80071d0:	4b81      	ldr	r3, [pc, #516]	; (80073d8 <MX_LWIP_Init+0x244>)
 80071d2:	22a8      	movs	r2, #168	; 0xa8
 80071d4:	705a      	strb	r2, [r3, #1]
    GATEWAY_ADDRESS[2] = 18;
 80071d6:	4b80      	ldr	r3, [pc, #512]	; (80073d8 <MX_LWIP_Init+0x244>)
 80071d8:	2212      	movs	r2, #18
 80071da:	709a      	strb	r2, [r3, #2]
    GATEWAY_ADDRESS[3] = 1;
 80071dc:	4b7e      	ldr	r3, [pc, #504]	; (80073d8 <MX_LWIP_Init+0x244>)
 80071de:	2201      	movs	r2, #1
 80071e0:	70da      	strb	r2, [r3, #3]

  /* USER CODE BEGIN IP_ADDRESSES */
  /* USER CODE END IP_ADDRESSES */

    /* Initilialize the LwIP stack without RTOS */
    lwip_init();
 80071e2:	f002 fd69 	bl	8009cb8 <lwip_init>

    /* IP addresses initialization without DHCP (IPv4) */
    IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);IP4_ADDR(
 80071e6:	4b7a      	ldr	r3, [pc, #488]	; (80073d0 <MX_LWIP_Init+0x23c>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	061a      	lsls	r2, r3, #24
 80071ec:	4b78      	ldr	r3, [pc, #480]	; (80073d0 <MX_LWIP_Init+0x23c>)
 80071ee:	785b      	ldrb	r3, [r3, #1]
 80071f0:	041b      	lsls	r3, r3, #16
 80071f2:	431a      	orrs	r2, r3
 80071f4:	4b76      	ldr	r3, [pc, #472]	; (80073d0 <MX_LWIP_Init+0x23c>)
 80071f6:	789b      	ldrb	r3, [r3, #2]
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	4313      	orrs	r3, r2
 80071fc:	4a74      	ldr	r2, [pc, #464]	; (80073d0 <MX_LWIP_Init+0x23c>)
 80071fe:	78d2      	ldrb	r2, [r2, #3]
 8007200:	4313      	orrs	r3, r2
 8007202:	061a      	lsls	r2, r3, #24
 8007204:	4b72      	ldr	r3, [pc, #456]	; (80073d0 <MX_LWIP_Init+0x23c>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	0619      	lsls	r1, r3, #24
 800720a:	4b71      	ldr	r3, [pc, #452]	; (80073d0 <MX_LWIP_Init+0x23c>)
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	4319      	orrs	r1, r3
 8007212:	4b6f      	ldr	r3, [pc, #444]	; (80073d0 <MX_LWIP_Init+0x23c>)
 8007214:	789b      	ldrb	r3, [r3, #2]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	430b      	orrs	r3, r1
 800721a:	496d      	ldr	r1, [pc, #436]	; (80073d0 <MX_LWIP_Init+0x23c>)
 800721c:	78c9      	ldrb	r1, [r1, #3]
 800721e:	430b      	orrs	r3, r1
 8007220:	021b      	lsls	r3, r3, #8
 8007222:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007226:	431a      	orrs	r2, r3
 8007228:	4b69      	ldr	r3, [pc, #420]	; (80073d0 <MX_LWIP_Init+0x23c>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	0619      	lsls	r1, r3, #24
 800722e:	4b68      	ldr	r3, [pc, #416]	; (80073d0 <MX_LWIP_Init+0x23c>)
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	041b      	lsls	r3, r3, #16
 8007234:	4319      	orrs	r1, r3
 8007236:	4b66      	ldr	r3, [pc, #408]	; (80073d0 <MX_LWIP_Init+0x23c>)
 8007238:	789b      	ldrb	r3, [r3, #2]
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	430b      	orrs	r3, r1
 800723e:	4964      	ldr	r1, [pc, #400]	; (80073d0 <MX_LWIP_Init+0x23c>)
 8007240:	78c9      	ldrb	r1, [r1, #3]
 8007242:	430b      	orrs	r3, r1
 8007244:	0a1b      	lsrs	r3, r3, #8
 8007246:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800724a:	431a      	orrs	r2, r3
 800724c:	4b60      	ldr	r3, [pc, #384]	; (80073d0 <MX_LWIP_Init+0x23c>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	0619      	lsls	r1, r3, #24
 8007252:	4b5f      	ldr	r3, [pc, #380]	; (80073d0 <MX_LWIP_Init+0x23c>)
 8007254:	785b      	ldrb	r3, [r3, #1]
 8007256:	041b      	lsls	r3, r3, #16
 8007258:	4319      	orrs	r1, r3
 800725a:	4b5d      	ldr	r3, [pc, #372]	; (80073d0 <MX_LWIP_Init+0x23c>)
 800725c:	789b      	ldrb	r3, [r3, #2]
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	430b      	orrs	r3, r1
 8007262:	495b      	ldr	r1, [pc, #364]	; (80073d0 <MX_LWIP_Init+0x23c>)
 8007264:	78c9      	ldrb	r1, [r1, #3]
 8007266:	430b      	orrs	r3, r1
 8007268:	0e1b      	lsrs	r3, r3, #24
 800726a:	4313      	orrs	r3, r2
 800726c:	4a5b      	ldr	r2, [pc, #364]	; (80073dc <MX_LWIP_Init+0x248>)
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	4b58      	ldr	r3, [pc, #352]	; (80073d4 <MX_LWIP_Init+0x240>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	061a      	lsls	r2, r3, #24
 8007276:	4b57      	ldr	r3, [pc, #348]	; (80073d4 <MX_LWIP_Init+0x240>)
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	041b      	lsls	r3, r3, #16
 800727c:	431a      	orrs	r2, r3
 800727e:	4b55      	ldr	r3, [pc, #340]	; (80073d4 <MX_LWIP_Init+0x240>)
 8007280:	789b      	ldrb	r3, [r3, #2]
 8007282:	021b      	lsls	r3, r3, #8
 8007284:	4313      	orrs	r3, r2
 8007286:	4a53      	ldr	r2, [pc, #332]	; (80073d4 <MX_LWIP_Init+0x240>)
 8007288:	78d2      	ldrb	r2, [r2, #3]
 800728a:	4313      	orrs	r3, r2
 800728c:	061a      	lsls	r2, r3, #24
 800728e:	4b51      	ldr	r3, [pc, #324]	; (80073d4 <MX_LWIP_Init+0x240>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	0619      	lsls	r1, r3, #24
 8007294:	4b4f      	ldr	r3, [pc, #316]	; (80073d4 <MX_LWIP_Init+0x240>)
 8007296:	785b      	ldrb	r3, [r3, #1]
 8007298:	041b      	lsls	r3, r3, #16
 800729a:	4319      	orrs	r1, r3
 800729c:	4b4d      	ldr	r3, [pc, #308]	; (80073d4 <MX_LWIP_Init+0x240>)
 800729e:	789b      	ldrb	r3, [r3, #2]
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	430b      	orrs	r3, r1
 80072a4:	494b      	ldr	r1, [pc, #300]	; (80073d4 <MX_LWIP_Init+0x240>)
 80072a6:	78c9      	ldrb	r1, [r1, #3]
 80072a8:	430b      	orrs	r3, r1
 80072aa:	021b      	lsls	r3, r3, #8
 80072ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072b0:	431a      	orrs	r2, r3
 80072b2:	4b48      	ldr	r3, [pc, #288]	; (80073d4 <MX_LWIP_Init+0x240>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	0619      	lsls	r1, r3, #24
 80072b8:	4b46      	ldr	r3, [pc, #280]	; (80073d4 <MX_LWIP_Init+0x240>)
 80072ba:	785b      	ldrb	r3, [r3, #1]
 80072bc:	041b      	lsls	r3, r3, #16
 80072be:	4319      	orrs	r1, r3
 80072c0:	4b44      	ldr	r3, [pc, #272]	; (80073d4 <MX_LWIP_Init+0x240>)
 80072c2:	789b      	ldrb	r3, [r3, #2]
 80072c4:	021b      	lsls	r3, r3, #8
 80072c6:	430b      	orrs	r3, r1
 80072c8:	4942      	ldr	r1, [pc, #264]	; (80073d4 <MX_LWIP_Init+0x240>)
 80072ca:	78c9      	ldrb	r1, [r1, #3]
 80072cc:	430b      	orrs	r3, r1
 80072ce:	0a1b      	lsrs	r3, r3, #8
 80072d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80072d4:	431a      	orrs	r2, r3
 80072d6:	4b3f      	ldr	r3, [pc, #252]	; (80073d4 <MX_LWIP_Init+0x240>)
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	0619      	lsls	r1, r3, #24
 80072dc:	4b3d      	ldr	r3, [pc, #244]	; (80073d4 <MX_LWIP_Init+0x240>)
 80072de:	785b      	ldrb	r3, [r3, #1]
 80072e0:	041b      	lsls	r3, r3, #16
 80072e2:	4319      	orrs	r1, r3
 80072e4:	4b3b      	ldr	r3, [pc, #236]	; (80073d4 <MX_LWIP_Init+0x240>)
 80072e6:	789b      	ldrb	r3, [r3, #2]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	430b      	orrs	r3, r1
 80072ec:	4939      	ldr	r1, [pc, #228]	; (80073d4 <MX_LWIP_Init+0x240>)
 80072ee:	78c9      	ldrb	r1, [r1, #3]
 80072f0:	430b      	orrs	r3, r1
 80072f2:	0e1b      	lsrs	r3, r3, #24
 80072f4:	4313      	orrs	r3, r2
 80072f6:	4a3a      	ldr	r2, [pc, #232]	; (80073e0 <MX_LWIP_Init+0x24c>)
 80072f8:	6013      	str	r3, [r2, #0]
  		&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1], NETMASK_ADDRESS[2],
  		NETMASK_ADDRESS[3]);IP4_ADDR(&gw, GATEWAY_ADDRESS[0],
 80072fa:	4b37      	ldr	r3, [pc, #220]	; (80073d8 <MX_LWIP_Init+0x244>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	061a      	lsls	r2, r3, #24
 8007300:	4b35      	ldr	r3, [pc, #212]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007302:	785b      	ldrb	r3, [r3, #1]
 8007304:	041b      	lsls	r3, r3, #16
 8007306:	431a      	orrs	r2, r3
 8007308:	4b33      	ldr	r3, [pc, #204]	; (80073d8 <MX_LWIP_Init+0x244>)
 800730a:	789b      	ldrb	r3, [r3, #2]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	4313      	orrs	r3, r2
 8007310:	4a31      	ldr	r2, [pc, #196]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007312:	78d2      	ldrb	r2, [r2, #3]
 8007314:	4313      	orrs	r3, r2
 8007316:	061a      	lsls	r2, r3, #24
 8007318:	4b2f      	ldr	r3, [pc, #188]	; (80073d8 <MX_LWIP_Init+0x244>)
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	0619      	lsls	r1, r3, #24
 800731e:	4b2e      	ldr	r3, [pc, #184]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007320:	785b      	ldrb	r3, [r3, #1]
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	4319      	orrs	r1, r3
 8007326:	4b2c      	ldr	r3, [pc, #176]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007328:	789b      	ldrb	r3, [r3, #2]
 800732a:	021b      	lsls	r3, r3, #8
 800732c:	430b      	orrs	r3, r1
 800732e:	492a      	ldr	r1, [pc, #168]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007330:	78c9      	ldrb	r1, [r1, #3]
 8007332:	430b      	orrs	r3, r1
 8007334:	021b      	lsls	r3, r3, #8
 8007336:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800733a:	431a      	orrs	r2, r3
 800733c:	4b26      	ldr	r3, [pc, #152]	; (80073d8 <MX_LWIP_Init+0x244>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	0619      	lsls	r1, r3, #24
 8007342:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	4319      	orrs	r1, r3
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <MX_LWIP_Init+0x244>)
 800734c:	789b      	ldrb	r3, [r3, #2]
 800734e:	021b      	lsls	r3, r3, #8
 8007350:	430b      	orrs	r3, r1
 8007352:	4921      	ldr	r1, [pc, #132]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007354:	78c9      	ldrb	r1, [r1, #3]
 8007356:	430b      	orrs	r3, r1
 8007358:	0a1b      	lsrs	r3, r3, #8
 800735a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800735e:	431a      	orrs	r2, r3
 8007360:	4b1d      	ldr	r3, [pc, #116]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	0619      	lsls	r1, r3, #24
 8007366:	4b1c      	ldr	r3, [pc, #112]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	041b      	lsls	r3, r3, #16
 800736c:	4319      	orrs	r1, r3
 800736e:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007370:	789b      	ldrb	r3, [r3, #2]
 8007372:	021b      	lsls	r3, r3, #8
 8007374:	430b      	orrs	r3, r1
 8007376:	4918      	ldr	r1, [pc, #96]	; (80073d8 <MX_LWIP_Init+0x244>)
 8007378:	78c9      	ldrb	r1, [r1, #3]
 800737a:	430b      	orrs	r3, r1
 800737c:	0e1b      	lsrs	r3, r3, #24
 800737e:	4313      	orrs	r3, r2
 8007380:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <MX_LWIP_Init+0x250>)
 8007382:	6013      	str	r3, [r2, #0]
  		GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007384:	4b18      	ldr	r3, [pc, #96]	; (80073e8 <MX_LWIP_Init+0x254>)
 8007386:	9302      	str	r3, [sp, #8]
 8007388:	4b18      	ldr	r3, [pc, #96]	; (80073ec <MX_LWIP_Init+0x258>)
 800738a:	9301      	str	r3, [sp, #4]
 800738c:	2300      	movs	r3, #0
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	4b14      	ldr	r3, [pc, #80]	; (80073e4 <MX_LWIP_Init+0x250>)
 8007392:	4a13      	ldr	r2, [pc, #76]	; (80073e0 <MX_LWIP_Init+0x24c>)
 8007394:	4911      	ldr	r1, [pc, #68]	; (80073dc <MX_LWIP_Init+0x248>)
 8007396:	4816      	ldr	r0, [pc, #88]	; (80073f0 <MX_LWIP_Init+0x25c>)
 8007398:	f003 f934 	bl	800a604 <netif_add>

    /* Registers the default network interface */
    netif_set_default(&gnetif);
 800739c:	4814      	ldr	r0, [pc, #80]	; (80073f0 <MX_LWIP_Init+0x25c>)
 800739e:	f003 faeb 	bl	800a978 <netif_set_default>

    if (netif_is_link_up(&gnetif)
 80073a2:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <MX_LWIP_Init+0x25c>)
 80073a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80073a8:	089b      	lsrs	r3, r3, #2
 80073aa:	f003 0301 	and.w	r3, r3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <MX_LWIP_Init+0x228>
  )
    {
      /* When the netif is fully configured this function must be called */
      netif_set_up(&gnetif);
 80073b4:	480e      	ldr	r0, [pc, #56]	; (80073f0 <MX_LWIP_Init+0x25c>)
 80073b6:	f003 faef 	bl	800a998 <netif_set_up>
 80073ba:	e002      	b.n	80073c2 <MX_LWIP_Init+0x22e>
    }
    else
    {
      /* When the netif link is down this function must be called */
      netif_set_down(&gnetif);
 80073bc:	480c      	ldr	r0, [pc, #48]	; (80073f0 <MX_LWIP_Init+0x25c>)
 80073be:	f003 fb57 	bl	800aa70 <netif_set_down>
    }

    /* Set the link callback function, this function is called on change of link status*/
    netif_set_link_callback(&gnetif, ethernetif_update_config);
 80073c2:	490c      	ldr	r1, [pc, #48]	; (80073f4 <MX_LWIP_Init+0x260>)
 80073c4:	480a      	ldr	r0, [pc, #40]	; (80073f0 <MX_LWIP_Init+0x25c>)
 80073c6:	f003 fb85 	bl	800aad4 <netif_set_link_callback>

    /* Create the Ethernet link handler thread */
  }
 80073ca:	bf00      	nop
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	20006c14 	.word	0x20006c14
 80073d4:	20006c10 	.word	0x20006c10
 80073d8:	20006bd0 	.word	0x20006bd0
 80073dc:	20006c0c 	.word	0x20006c0c
 80073e0:	20006c18 	.word	0x20006c18
 80073e4:	20006c1c 	.word	0x20006c1c
 80073e8:	08016671 	.word	0x08016671
 80073ec:	08007985 	.word	0x08007985
 80073f0:	20006bd4 	.word	0x20006bd4
 80073f4:	080079f1 	.word	0x080079f1

080073f8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08e      	sub	sp, #56	; 0x38
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007404:	2200      	movs	r2, #0
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	605a      	str	r2, [r3, #4]
 800740a:	609a      	str	r2, [r3, #8]
 800740c:	60da      	str	r2, [r3, #12]
 800740e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a46      	ldr	r2, [pc, #280]	; (8007530 <HAL_ETH_MspInit+0x138>)
 8007416:	4293      	cmp	r3, r2
 8007418:	f040 8085 	bne.w	8007526 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800741c:	2300      	movs	r3, #0
 800741e:	623b      	str	r3, [r7, #32]
 8007420:	4b44      	ldr	r3, [pc, #272]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	4a43      	ldr	r2, [pc, #268]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 8007426:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800742a:	6313      	str	r3, [r2, #48]	; 0x30
 800742c:	4b41      	ldr	r3, [pc, #260]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 800742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007434:	623b      	str	r3, [r7, #32]
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	4b3d      	ldr	r3, [pc, #244]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	4a3c      	ldr	r2, [pc, #240]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 8007442:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007446:	6313      	str	r3, [r2, #48]	; 0x30
 8007448:	4b3a      	ldr	r3, [pc, #232]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007450:	61fb      	str	r3, [r7, #28]
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	2300      	movs	r3, #0
 8007456:	61bb      	str	r3, [r7, #24]
 8007458:	4b36      	ldr	r3, [pc, #216]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	4a35      	ldr	r2, [pc, #212]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 800745e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007462:	6313      	str	r3, [r2, #48]	; 0x30
 8007464:	4b33      	ldr	r3, [pc, #204]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800746c:	61bb      	str	r3, [r7, #24]
 800746e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	4b2f      	ldr	r3, [pc, #188]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 8007476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007478:	4a2e      	ldr	r2, [pc, #184]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 800747a:	f043 0304 	orr.w	r3, r3, #4
 800747e:	6313      	str	r3, [r2, #48]	; 0x30
 8007480:	4b2c      	ldr	r3, [pc, #176]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 8007482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800748c:	2300      	movs	r3, #0
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	4b28      	ldr	r3, [pc, #160]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 8007492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007494:	4a27      	ldr	r2, [pc, #156]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 8007496:	f043 0301 	orr.w	r3, r3, #1
 800749a:	6313      	str	r3, [r2, #48]	; 0x30
 800749c:	4b25      	ldr	r3, [pc, #148]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 800749e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	613b      	str	r3, [r7, #16]
 80074a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074a8:	2300      	movs	r3, #0
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	4b21      	ldr	r3, [pc, #132]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 80074ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b0:	4a20      	ldr	r2, [pc, #128]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 80074b2:	f043 0302 	orr.w	r3, r3, #2
 80074b6:	6313      	str	r3, [r2, #48]	; 0x30
 80074b8:	4b1e      	ldr	r3, [pc, #120]	; (8007534 <HAL_ETH_MspInit+0x13c>)
 80074ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80074c4:	2332      	movs	r3, #50	; 0x32
 80074c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074c8:	2302      	movs	r3, #2
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074d0:	2303      	movs	r3, #3
 80074d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80074d4:	230b      	movs	r3, #11
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074dc:	4619      	mov	r1, r3
 80074de:	4816      	ldr	r0, [pc, #88]	; (8007538 <HAL_ETH_MspInit+0x140>)
 80074e0:	f7fe fa52 	bl	8005988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80074e4:	2386      	movs	r3, #134	; 0x86
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e8:	2302      	movs	r3, #2
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ec:	2300      	movs	r3, #0
 80074ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074f0:	2303      	movs	r3, #3
 80074f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80074f4:	230b      	movs	r3, #11
 80074f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074fc:	4619      	mov	r1, r3
 80074fe:	480f      	ldr	r0, [pc, #60]	; (800753c <HAL_ETH_MspInit+0x144>)
 8007500:	f7fe fa42 	bl	8005988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8007504:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800750a:	2302      	movs	r3, #2
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800750e:	2300      	movs	r3, #0
 8007510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007512:	2303      	movs	r3, #3
 8007514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007516:	230b      	movs	r3, #11
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800751a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800751e:	4619      	mov	r1, r3
 8007520:	4807      	ldr	r0, [pc, #28]	; (8007540 <HAL_ETH_MspInit+0x148>)
 8007522:	f7fe fa31 	bl	8005988 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007526:	bf00      	nop
 8007528:	3738      	adds	r7, #56	; 0x38
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	40028000 	.word	0x40028000
 8007534:	40023800 	.word	0x40023800
 8007538:	40020800 	.word	0x40020800
 800753c:	40020000 	.word	0x40020000
 8007540:	40020400 	.word	0x40020400

08007544 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007550:	4b4d      	ldr	r3, [pc, #308]	; (8007688 <low_level_init+0x144>)
 8007552:	4a4e      	ldr	r2, [pc, #312]	; (800768c <low_level_init+0x148>)
 8007554:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007556:	4b4c      	ldr	r3, [pc, #304]	; (8007688 <low_level_init+0x144>)
 8007558:	2201      	movs	r2, #1
 800755a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800755c:	4b4a      	ldr	r3, [pc, #296]	; (8007688 <low_level_init+0x144>)
 800755e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007562:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007564:	4b48      	ldr	r3, [pc, #288]	; (8007688 <low_level_init+0x144>)
 8007566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800756a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800756c:	4b46      	ldr	r3, [pc, #280]	; (8007688 <low_level_init+0x144>)
 800756e:	2201      	movs	r2, #1
 8007570:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007572:	2300      	movs	r3, #0
 8007574:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007576:	2380      	movs	r3, #128	; 0x80
 8007578:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800757a:	23e1      	movs	r3, #225	; 0xe1
 800757c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800757e:	2300      	movs	r3, #0
 8007580:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007582:	2300      	movs	r3, #0
 8007584:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007586:	2300      	movs	r3, #0
 8007588:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800758a:	4a3f      	ldr	r2, [pc, #252]	; (8007688 <low_level_init+0x144>)
 800758c:	f107 0308 	add.w	r3, r7, #8
 8007590:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007592:	4b3d      	ldr	r3, [pc, #244]	; (8007688 <low_level_init+0x144>)
 8007594:	2200      	movs	r2, #0
 8007596:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007598:	4b3b      	ldr	r3, [pc, #236]	; (8007688 <low_level_init+0x144>)
 800759a:	2200      	movs	r2, #0
 800759c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800759e:	4b3a      	ldr	r3, [pc, #232]	; (8007688 <low_level_init+0x144>)
 80075a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80075a4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80075a6:	4838      	ldr	r0, [pc, #224]	; (8007688 <low_level_init+0x144>)
 80075a8:	f7fd f8c8 	bl	800473c <HAL_ETH_Init>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d108      	bne.n	80075c8 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80075bc:	f043 0304 	orr.w	r3, r3, #4
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80075c8:	2304      	movs	r3, #4
 80075ca:	4a31      	ldr	r2, [pc, #196]	; (8007690 <low_level_init+0x14c>)
 80075cc:	4931      	ldr	r1, [pc, #196]	; (8007694 <low_level_init+0x150>)
 80075ce:	482e      	ldr	r0, [pc, #184]	; (8007688 <low_level_init+0x144>)
 80075d0:	f7fd fa50 	bl	8004a74 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80075d4:	2304      	movs	r3, #4
 80075d6:	4a30      	ldr	r2, [pc, #192]	; (8007698 <low_level_init+0x154>)
 80075d8:	4930      	ldr	r1, [pc, #192]	; (800769c <low_level_init+0x158>)
 80075da:	482b      	ldr	r0, [pc, #172]	; (8007688 <low_level_init+0x144>)
 80075dc:	f7fd fab3 	bl	8004b46 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2206      	movs	r2, #6
 80075e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80075e8:	4b27      	ldr	r3, [pc, #156]	; (8007688 <low_level_init+0x144>)
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	781a      	ldrb	r2, [r3, #0]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80075f4:	4b24      	ldr	r3, [pc, #144]	; (8007688 <low_level_init+0x144>)
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	785a      	ldrb	r2, [r3, #1]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007600:	4b21      	ldr	r3, [pc, #132]	; (8007688 <low_level_init+0x144>)
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	789a      	ldrb	r2, [r3, #2]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800760c:	4b1e      	ldr	r3, [pc, #120]	; (8007688 <low_level_init+0x144>)
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	78da      	ldrb	r2, [r3, #3]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007618:	4b1b      	ldr	r3, [pc, #108]	; (8007688 <low_level_init+0x144>)
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	791a      	ldrb	r2, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007624:	4b18      	ldr	r3, [pc, #96]	; (8007688 <low_level_init+0x144>)
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	795a      	ldrb	r2, [r3, #5]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007636:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800763e:	f043 030a 	orr.w	r3, r3, #10
 8007642:	b2da      	uxtb	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800764a:	480f      	ldr	r0, [pc, #60]	; (8007688 <low_level_init+0x144>)
 800764c:	f7fd fd24 	bl	8005098 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007650:	f107 0310 	add.w	r3, r7, #16
 8007654:	461a      	mov	r2, r3
 8007656:	211d      	movs	r1, #29
 8007658:	480b      	ldr	r0, [pc, #44]	; (8007688 <low_level_init+0x144>)
 800765a:	f7fd fc4f 	bl	8004efc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f043 030b 	orr.w	r3, r3, #11
 8007664:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	461a      	mov	r2, r3
 800766a:	211d      	movs	r1, #29
 800766c:	4806      	ldr	r0, [pc, #24]	; (8007688 <low_level_init+0x144>)
 800766e:	f7fd fcad 	bl	8004fcc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007672:	f107 0310 	add.w	r3, r7, #16
 8007676:	461a      	mov	r2, r3
 8007678:	211d      	movs	r1, #29
 800767a:	4803      	ldr	r0, [pc, #12]	; (8007688 <low_level_init+0x144>)
 800767c:	f7fd fc3e 	bl	8004efc <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007680:	bf00      	nop
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	200084f0 	.word	0x200084f0
 800768c:	40028000 	.word	0x40028000
 8007690:	20008538 	.word	0x20008538
 8007694:	20006c20 	.word	0x20006c20
 8007698:	20006ca0 	.word	0x20006ca0
 800769c:	20008470 	.word	0x20008470

080076a0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b08a      	sub	sp, #40	; 0x28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80076aa:	4b4b      	ldr	r3, [pc, #300]	; (80077d8 <low_level_output+0x138>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80076c2:	4b45      	ldr	r3, [pc, #276]	; (80077d8 <low_level_output+0x138>)
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	623b      	str	r3, [r7, #32]
 80076d0:	e05a      	b.n	8007788 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	da03      	bge.n	80076e2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80076da:	23f8      	movs	r3, #248	; 0xf8
 80076dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80076e0:	e05c      	b.n	800779c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	895b      	ldrh	r3, [r3, #10]
 80076e6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80076ec:	e02f      	b.n	800774e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	18d0      	adds	r0, r2, r3
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	18d1      	adds	r1, r2, r3
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007702:	3304      	adds	r3, #4
 8007704:	461a      	mov	r2, r3
 8007706:	f00f f8c3 	bl	8016890 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	da03      	bge.n	8007720 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007718:	23f8      	movs	r3, #248	; 0xf8
 800771a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800771e:	e03d      	b.n	800779c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007726:	693a      	ldr	r2, [r7, #16]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007730:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800773c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007748:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800774a:	2300      	movs	r3, #0
 800774c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	4413      	add	r3, r2
 8007754:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007758:	4293      	cmp	r3, r2
 800775a:	d8c8      	bhi.n	80076ee <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	18d0      	adds	r0, r2, r3
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	4413      	add	r3, r2
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	4619      	mov	r1, r3
 800776e:	f00f f88f 	bl	8016890 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	623b      	str	r3, [r7, #32]
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1a1      	bne.n	80076d2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800778e:	6979      	ldr	r1, [r7, #20]
 8007790:	4811      	ldr	r0, [pc, #68]	; (80077d8 <low_level_output+0x138>)
 8007792:	f7fd fa45 	bl	8004c20 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800779c:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <low_level_output+0x138>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a4:	3314      	adds	r3, #20
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0320 	and.w	r3, r3, #32
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00d      	beq.n	80077cc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <low_level_output+0x138>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b8:	3314      	adds	r3, #20
 80077ba:	2220      	movs	r2, #32
 80077bc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80077be:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <low_level_output+0x138>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077c6:	3304      	adds	r3, #4
 80077c8:	2200      	movs	r2, #0
 80077ca:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80077cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3728      	adds	r7, #40	; 0x28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200084f0 	.word	0x200084f0

080077dc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08c      	sub	sp, #48	; 0x30
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80077f8:	2300      	movs	r3, #0
 80077fa:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80077fc:	2300      	movs	r3, #0
 80077fe:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8007800:	484f      	ldr	r0, [pc, #316]	; (8007940 <low_level_input+0x164>)
 8007802:	f7fd faf7 	bl	8004df4 <HAL_ETH_GetReceivedFrame>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <low_level_input+0x34>

    return NULL;
 800780c:	2300      	movs	r3, #0
 800780e:	e092      	b.n	8007936 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007810:	4b4b      	ldr	r3, [pc, #300]	; (8007940 <low_level_input+0x164>)
 8007812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007814:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007816:	4b4a      	ldr	r3, [pc, #296]	; (8007940 <low_level_input+0x164>)
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800781c:	89fb      	ldrh	r3, [r7, #14]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d007      	beq.n	8007832 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007822:	89fb      	ldrh	r3, [r7, #14]
 8007824:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007828:	4619      	mov	r1, r3
 800782a:	2000      	movs	r0, #0
 800782c:	f003 f9ee 	bl	800ac0c <pbuf_alloc>
 8007830:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d04b      	beq.n	80078d0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007838:	4b41      	ldr	r3, [pc, #260]	; (8007940 <low_level_input+0x164>)
 800783a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
 8007846:	e040      	b.n	80078ca <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	895b      	ldrh	r3, [r3, #10]
 800784c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800784e:	2300      	movs	r3, #0
 8007850:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007852:	e021      	b.n	8007898 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	18d0      	adds	r0, r2, r3
 800785c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	18d1      	adds	r1, r2, r3
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8007868:	3304      	adds	r3, #4
 800786a:	461a      	mov	r2, r3
 800786c:	f00f f810 	bl	8016890 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	4413      	add	r3, r2
 8007882:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007886:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007888:	69ba      	ldr	r2, [r7, #24]
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007892:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007894:	2300      	movs	r3, #0
 8007896:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d8d6      	bhi.n	8007854 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	18d0      	adds	r0, r2, r3
 80078ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	4413      	add	r3, r2
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	4619      	mov	r1, r3
 80078b8:	f00e ffea 	bl	8016890 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	4413      	add	r3, r2
 80078c2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80078c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1bb      	bne.n	8007848 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80078d0:	4b1b      	ldr	r3, [pc, #108]	; (8007940 <low_level_input+0x164>)
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	e00b      	b.n	80078f4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80078dc:	6a3b      	ldr	r3, [r7, #32]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	3301      	adds	r3, #1
 80078f2:	613b      	str	r3, [r7, #16]
 80078f4:	4b12      	ldr	r3, [pc, #72]	; (8007940 <low_level_input+0x164>)
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d3ee      	bcc.n	80078dc <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80078fe:	4b10      	ldr	r3, [pc, #64]	; (8007940 <low_level_input+0x164>)
 8007900:	2200      	movs	r2, #0
 8007902:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007904:	4b0e      	ldr	r3, [pc, #56]	; (8007940 <low_level_input+0x164>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800790c:	3314      	adds	r3, #20
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00d      	beq.n	8007934 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007918:	4b09      	ldr	r3, [pc, #36]	; (8007940 <low_level_input+0x164>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007920:	3314      	adds	r3, #20
 8007922:	2280      	movs	r2, #128	; 0x80
 8007924:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007926:	4b06      	ldr	r3, [pc, #24]	; (8007940 <low_level_input+0x164>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792e:	3308      	adds	r3, #8
 8007930:	2200      	movs	r2, #0
 8007932:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007936:	4618      	mov	r0, r3
 8007938:	3730      	adds	r7, #48	; 0x30
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	200084f0 	.word	0x200084f0

08007944 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff ff45 	bl	80077dc <low_level_input>
 8007952:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d010      	beq.n	800797c <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	4798      	blx	r3
 8007964:	4603      	mov	r3, r0
 8007966:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8007968:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d006      	beq.n	800797e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f003 fc2f 	bl	800b1d4 <pbuf_free>
    p = NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e000      	b.n	800797e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800797c:	bf00      	nop
  }
}
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <ethernetif_init+0x1c>
 8007992:	4b0e      	ldr	r3, [pc, #56]	; (80079cc <ethernetif_init+0x48>)
 8007994:	f44f 7202 	mov.w	r2, #520	; 0x208
 8007998:	490d      	ldr	r1, [pc, #52]	; (80079d0 <ethernetif_init+0x4c>)
 800799a:	480e      	ldr	r0, [pc, #56]	; (80079d4 <ethernetif_init+0x50>)
 800799c:	f00f fc12 	bl	80171c4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2273      	movs	r2, #115	; 0x73
 80079a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2274      	movs	r2, #116	; 0x74
 80079ac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a09      	ldr	r2, [pc, #36]	; (80079d8 <ethernetif_init+0x54>)
 80079b4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a08      	ldr	r2, [pc, #32]	; (80079dc <ethernetif_init+0x58>)
 80079ba:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f7ff fdc1 	bl	8007544 <low_level_init>

  return ERR_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	0801bce8 	.word	0x0801bce8
 80079d0:	0801bd04 	.word	0x0801bd04
 80079d4:	0801bd14 	.word	0x0801bd14
 80079d8:	08014acd 	.word	0x08014acd
 80079dc:	080076a1 	.word	0x080076a1

080079e0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80079e4:	f7fc fd98 	bl	8004518 <HAL_GetTick>
 80079e8:	4603      	mov	r3, r0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	bd80      	pop	{r7, pc}
	...

080079f0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007a06:	089b      	lsrs	r3, r3, #2
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d05d      	beq.n	8007ace <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007a12:	4b34      	ldr	r3, [pc, #208]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d03f      	beq.n	8007a9a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007a1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4830      	ldr	r0, [pc, #192]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007a22:	f7fd fad3 	bl	8004fcc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007a26:	f7fc fd77 	bl	8004518 <HAL_GetTick>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007a2e:	f107 0308 	add.w	r3, r7, #8
 8007a32:	461a      	mov	r2, r3
 8007a34:	2101      	movs	r1, #1
 8007a36:	482b      	ldr	r0, [pc, #172]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007a38:	f7fd fa60 	bl	8004efc <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007a3c:	f7fc fd6c 	bl	8004518 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a4a:	d828      	bhi.n	8007a9e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d0eb      	beq.n	8007a2e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007a56:	f107 0308 	add.w	r3, r7, #8
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	2110      	movs	r1, #16
 8007a5e:	4821      	ldr	r0, [pc, #132]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007a60:	f7fd fa4c 	bl	8004efc <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 0304 	and.w	r3, r3, #4
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007a6e:	4b1d      	ldr	r3, [pc, #116]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a74:	60da      	str	r2, [r3, #12]
 8007a76:	e002      	b.n	8007a7e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007a78:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007a88:	4b16      	ldr	r3, [pc, #88]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	609a      	str	r2, [r3, #8]
 8007a8e:	e016      	b.n	8007abe <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007a90:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007a92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a96:	609a      	str	r2, [r3, #8]
 8007a98:	e011      	b.n	8007abe <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007a9a:	bf00      	nop
 8007a9c:	e000      	b.n	8007aa0 <ethernetif_update_config+0xb0>
          goto error;
 8007a9e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007aa0:	4b10      	ldr	r3, [pc, #64]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	08db      	lsrs	r3, r3, #3
 8007aa6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007aa8:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	085b      	lsrs	r3, r3, #1
 8007aae:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	2100      	movs	r1, #0
 8007ab8:	480a      	ldr	r0, [pc, #40]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007aba:	f7fd fa87 	bl	8004fcc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007abe:	2100      	movs	r1, #0
 8007ac0:	4808      	ldr	r0, [pc, #32]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007ac2:	f7fd fb47 	bl	8005154 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007ac6:	4807      	ldr	r0, [pc, #28]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007ac8:	f7fd fae6 	bl	8005098 <HAL_ETH_Start>
 8007acc:	e002      	b.n	8007ad4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007ace:	4805      	ldr	r0, [pc, #20]	; (8007ae4 <ethernetif_update_config+0xf4>)
 8007ad0:	f7fd fb11 	bl	80050f6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f807 	bl	8007ae8 <ethernetif_notify_conn_changed>
}
 8007ada:	bf00      	nop
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	200084f0 	.word	0x200084f0

08007ae8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d002      	beq.n	8007b12 <fs_open+0x16>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <fs_open+0x1c>
    return ERR_ARG;
 8007b12:	f06f 030f 	mvn.w	r3, #15
 8007b16:	e028      	b.n	8007b6a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8007b18:	4b16      	ldr	r3, [pc, #88]	; (8007b74 <fs_open+0x78>)
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	e020      	b.n	8007b60 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6838      	ldr	r0, [r7, #0]
 8007b26:	f7f8 fb53 	bl	80001d0 <strcmp>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d114      	bne.n	8007b5a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	7c1a      	ldrb	r2, [r3, #16]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e007      	b.n	8007b6a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	60fb      	str	r3, [r7, #12]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1db      	bne.n	8007b1e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8007b66:	f06f 0305 	mvn.w	r3, #5
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	0803215c 	.word	0x0803215c

08007b78 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8007b80:	bf00      	nop
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	1ad3      	subs	r3, r2, r3
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b082      	sub	sp, #8
 8007bae:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8007bb0:	f44f 7051 	mov.w	r0, #836	; 0x344
 8007bb4:	f002 fb3a 	bl	800a22c <mem_malloc>
 8007bb8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8007bc0:	f44f 7251 	mov.w	r2, #836	; 0x344
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f00e fe8a 	bl	80168e0 <memset>
  }
  return ret;
 8007bcc:	687b      	ldr	r3, [r7, #4]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f002 f9bb 	bl	8009f60 <mem_free>
  }
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8007bfa:	22d8      	movs	r2, #216	; 0xd8
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f00e fe6e 	bl	80168e0 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2205      	movs	r2, #5
 8007c08:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8007c1a:	20d8      	movs	r0, #216	; 0xd8
 8007c1c:	f002 fb06 	bl	800a22c <mem_malloc>
 8007c20:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <http_state_alloc+0x1a>
    http_state_init(ret);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff ffe2 	bl	8007bf2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8007c2e:	687b      	ldr	r3, [r7, #4]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff ff93 	bl	8007b78 <fs_close>
    hs->handle = NULL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff ffb6 	bl	8007bd6 <http_ssi_state_free>
    hs->ssi = NULL;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d007      	beq.n	8007c88 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f003 faa9 	bl	800b1d4 <pbuf_free>
    hs->req = NULL;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d005      	beq.n	8007caa <http_state_free+0x1a>
    http_state_eof(hs);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7ff ffca 	bl	8007c38 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f002 f95b 	bl	8009f60 <mem_free>
  }
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d106      	bne.n	8007cd6 <http_write+0x22>
 8007cc8:	4b2c      	ldr	r3, [pc, #176]	; (8007d7c <http_write+0xc8>)
 8007cca:	f240 2219 	movw	r2, #537	; 0x219
 8007cce:	492c      	ldr	r1, [pc, #176]	; (8007d80 <http_write+0xcc>)
 8007cd0:	482c      	ldr	r0, [pc, #176]	; (8007d84 <http_write+0xd0>)
 8007cd2:	f00f fa77 	bl	80171c4 <iprintf>
  len = *length;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8007cdc:	8afb      	ldrh	r3, [r7, #22]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <http_write+0x32>
    return ERR_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e045      	b.n	8007d72 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007cec:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8007cee:	8aba      	ldrh	r2, [r7, #20]
 8007cf0:	8afb      	ldrh	r3, [r7, #22]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d201      	bcs.n	8007cfa <http_write+0x46>
    len = max_len;
 8007cf6:	8abb      	ldrh	r3, [r7, #20]
 8007cf8:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8007d02:	8afa      	ldrh	r2, [r7, #22]
 8007d04:	8abb      	ldrh	r3, [r7, #20]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d901      	bls.n	8007d0e <http_write+0x5a>
    len = max_len;
 8007d0a:	8abb      	ldrh	r3, [r7, #20]
 8007d0c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8007d0e:	78fb      	ldrb	r3, [r7, #3]
 8007d10:	8afa      	ldrh	r2, [r7, #22]
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f008 f8b9 	bl	800fe8c <tcp_write>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8007d1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d26:	d10f      	bne.n	8007d48 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d004      	beq.n	8007d3c <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d902      	bls.n	8007d42 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	82fb      	strh	r3, [r7, #22]
 8007d40:	e002      	b.n	8007d48 <http_write+0x94>
      } else {
        len /= 2;
 8007d42:	8afb      	ldrh	r3, [r7, #22]
 8007d44:	085b      	lsrs	r3, r3, #1
 8007d46:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8007d48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d50:	d102      	bne.n	8007d58 <http_write+0xa4>
 8007d52:	8afb      	ldrh	r3, [r7, #22]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d8da      	bhi.n	8007d0e <http_write+0x5a>

  if (err == ERR_OK) {
 8007d58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	8afa      	ldrh	r2, [r7, #22]
 8007d64:	801a      	strh	r2, [r3, #0]
 8007d66:	e002      	b.n	8007d6e <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8007d6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	0801c20c 	.word	0x0801c20c
 8007d80:	0801c244 	.word	0x0801c244
 8007d84:	0801c254 	.word	0x0801c254

08007d88 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	4613      	mov	r3, r2
 8007d94:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00d      	beq.n	8007db8 <http_close_or_abort_conn+0x30>
    if ((hs->post_content_len_left != 0)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <http_close_or_abort_conn+0x30>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 8007da6:	4b20      	ldr	r3, [pc, #128]	; (8007e28 <http_close_or_abort_conn+0xa0>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8007dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007db0:	491d      	ldr	r1, [pc, #116]	; (8007e28 <http_close_or_abort_conn+0xa0>)
 8007db2:	68b8      	ldr	r0, [r7, #8]
 8007db4:	f7fb fd04 	bl	80037c0 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8007db8:	2100      	movs	r1, #0
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f005 f866 	bl	800ce8c <tcp_arg>
  altcp_recv(pcb, NULL);
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f005 f874 	bl	800ceb0 <tcp_recv>
  altcp_err(pcb, NULL);
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f005 f8b4 	bl	800cf38 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f005 f8e9 	bl	800cfac <tcp_poll>
  altcp_sent(pcb, NULL);
 8007dda:	2100      	movs	r1, #0
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f005 f889 	bl	800cef4 <tcp_sent>
  if (hs != NULL) {
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <http_close_or_abort_conn+0x66>
    http_state_free(hs);
 8007de8:	68b8      	ldr	r0, [r7, #8]
 8007dea:	f7ff ff51 	bl	8007c90 <http_state_free>
  }

  if (abort_conn) {
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d004      	beq.n	8007dfe <http_close_or_abort_conn+0x76>
    altcp_abort(pcb);
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f003 ff89 	bl	800bd0c <tcp_abort>
    return ERR_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e00f      	b.n	8007e1e <http_close_or_abort_conn+0x96>
  }
  err = altcp_close(pcb);
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f003 fe96 	bl	800bb30 <tcp_close>
 8007e04:	4603      	mov	r3, r0
 8007e06:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8007e08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d004      	beq.n	8007e1a <http_close_or_abort_conn+0x92>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8007e10:	2204      	movs	r2, #4
 8007e12:	4906      	ldr	r1, [pc, #24]	; (8007e2c <http_close_or_abort_conn+0xa4>)
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f005 f8c9 	bl	800cfac <tcp_poll>
  }
  return err;
 8007e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	20000ddc 	.word	0x20000ddc
 8007e2c:	080096b7 	.word	0x080096b7

08007e30 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff ffa2 	bl	8007d88 <http_close_or_abort_conn>
 8007e44:	4603      	mov	r3, r0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7ff ffe8 	bl	8007e30 <http_close_conn>
  }
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <extract_uri_parameters+0x18>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <extract_uri_parameters+0x1c>
    return (0);
 8007e80:	2300      	movs	r3, #0
 8007e82:	e04b      	b.n	8007f1c <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8007e88:	2300      	movs	r3, #0
 8007e8a:	613b      	str	r3, [r7, #16]
 8007e8c:	e03f      	b.n	8007f0e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	693a      	ldr	r2, [r7, #16]
 8007e92:	320c      	adds	r2, #12
 8007e94:	6979      	ldr	r1, [r7, #20]
 8007e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8007e9e:	2126      	movs	r1, #38	; 0x26
 8007ea0:	6978      	ldr	r0, [r7, #20]
 8007ea2:	f00f fac0 	bl	8017426 <strchr>
 8007ea6:	6178      	str	r0, [r7, #20]
    if (pair) {
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d006      	beq.n	8007ebc <extract_uri_parameters+0x54>
      *pair = '\0';
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	701a      	strb	r2, [r3, #0]
      pair++;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	617b      	str	r3, [r7, #20]
 8007eba:	e00c      	b.n	8007ed6 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 8007ebc:	2120      	movs	r1, #32
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f00f fab1 	bl	8017426 <strchr>
 8007ec4:	6178      	str	r0, [r7, #20]
      if (pair) {
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <extract_uri_parameters+0x6a>
        *pair = '\0';
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8007ed6:	213d      	movs	r1, #61	; 0x3d
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f00f faa4 	bl	8017426 <strchr>
 8007ede:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <extract_uri_parameters+0x94>
      *equals = '\0';
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	1c59      	adds	r1, r3, #1
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	321c      	adds	r2, #28
 8007ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007efa:	e005      	b.n	8007f08 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	321c      	adds	r2, #28
 8007f02:	2100      	movs	r1, #0
 8007f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	613b      	str	r3, [r7, #16]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b0f      	cmp	r3, #15
 8007f12:	dc02      	bgt.n	8007f1a <extract_uri_parameters+0xb2>
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1b9      	bne.n	8007e8e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8007f1a:	693b      	ldr	r3, [r7, #16]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 8007f24:	b590      	push	{r4, r7, lr}
 8007f26:	b089      	sub	sp, #36	; 0x24
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <get_tag_insert+0x1c>
 8007f32:	4b5b      	ldr	r3, [pc, #364]	; (80080a0 <get_tag_insert+0x17c>)
 8007f34:	f44f 7241 	mov.w	r2, #772	; 0x304
 8007f38:	495a      	ldr	r1, [pc, #360]	; (80080a4 <get_tag_insert+0x180>)
 8007f3a:	485b      	ldr	r0, [pc, #364]	; (80080a8 <get_tag_insert+0x184>)
 8007f3c:	f00f f942 	bl	80171c4 <iprintf>
  ssi = hs->ssi;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f44:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d106      	bne.n	8007f5a <get_tag_insert+0x36>
 8007f4c:	4b54      	ldr	r3, [pc, #336]	; (80080a0 <get_tag_insert+0x17c>)
 8007f4e:	f240 3206 	movw	r2, #774	; 0x306
 8007f52:	4956      	ldr	r1, [pc, #344]	; (80080ac <get_tag_insert+0x188>)
 8007f54:	4854      	ldr	r0, [pc, #336]	; (80080a8 <get_tag_insert+0x184>)
 8007f56:	f00f f935 	bl	80171c4 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	8a9b      	ldrh	r3, [r3, #20]
 8007f5e:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f66:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8007f68:	4b51      	ldr	r3, [pc, #324]	; (80080b0 <get_tag_insert+0x18c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d034      	beq.n	8007fda <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8007f70:	4b50      	ldr	r3, [pc, #320]	; (80080b4 <get_tag_insert+0x190>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d030      	beq.n	8007fda <get_tag_insert+0xb6>
 8007f78:	4b4f      	ldr	r3, [pc, #316]	; (80080b8 <get_tag_insert+0x194>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d02c      	beq.n	8007fda <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8007f80:	2300      	movs	r3, #0
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	e024      	b.n	8007fd0 <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f103 0018 	add.w	r0, r3, #24
 8007f8c:	4b49      	ldr	r3, [pc, #292]	; (80080b4 <get_tag_insert+0x190>)
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	f7f8 f919 	bl	80001d0 <strcmp>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d112      	bne.n	8007fca <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8007fa4:	4b42      	ldr	r3, [pc, #264]	; (80080b0 <get_tag_insert+0x18c>)
 8007fa6:	681c      	ldr	r4, [r3, #0]
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	3314      	adds	r3, #20
 8007fb2:	89fa      	ldrh	r2, [r7, #14]
 8007fb4:	9300      	str	r3, [sp, #0]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007fbc:	6978      	ldr	r0, [r7, #20]
 8007fbe:	47a0      	blx	r4
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8007fc8:	e066      	b.n	8008098 <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	4b39      	ldr	r3, [pc, #228]	; (80080b8 <get_tag_insert+0x194>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	dbd5      	blt.n	8007f86 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	3318      	adds	r3, #24
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7f8 f900 	bl	80001e4 <strlen>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f240 3206 	movw	r2, #774	; 0x306
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d81b      	bhi.n	8008026 <get_tag_insert+0x102>
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	3318      	adds	r3, #24
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f8 f8f6 	bl	80001e4 <strlen>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b09      	cmp	r3, #9
 8007ffc:	d813      	bhi.n	8008026 <get_tag_insert+0x102>
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3318      	adds	r3, #24
 8008002:	4618      	mov	r0, r3
 8008004:	f7f8 f8ee 	bl	80001e4 <strlen>
 8008008:	4603      	mov	r3, r0
 800800a:	f240 3206 	movw	r2, #774	; 0x306
 800800e:	4293      	cmp	r3, r2
 8008010:	d806      	bhi.n	8008020 <get_tag_insert+0xfc>
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	3318      	adds	r3, #24
 8008016:	4618      	mov	r0, r3
 8008018:	f7f8 f8e4 	bl	80001e4 <strlen>
 800801c:	4603      	mov	r3, r0
 800801e:	e003      	b.n	8008028 <get_tag_insert+0x104>
 8008020:	f240 3307 	movw	r3, #775	; 0x307
 8008024:	e000      	b.n	8008028 <get_tag_insert+0x104>
 8008026:	2309      	movs	r3, #9
 8008028:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	3321      	adds	r3, #33	; 0x21
 800802e:	2212      	movs	r2, #18
 8008030:	4922      	ldr	r1, [pc, #136]	; (80080bc <get_tag_insert+0x198>)
 8008032:	4618      	mov	r0, r3
 8008034:	f00e fc2c 	bl	8016890 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	f103 0033 	add.w	r0, r3, #51	; 0x33
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	3318      	adds	r3, #24
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	4619      	mov	r1, r3
 8008046:	f00e fc23 	bl	8016890 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	3312      	adds	r3, #18
 800804e:	3320      	adds	r3, #32
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4413      	add	r3, r2
 8008054:	3301      	adds	r3, #1
 8008056:	2207      	movs	r2, #7
 8008058:	4919      	ldr	r1, [pc, #100]	; (80080c0 <get_tag_insert+0x19c>)
 800805a:	4618      	mov	r0, r3
 800805c:	f00e fc18 	bl	8016890 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	3319      	adds	r3, #25
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	4413      	add	r3, r2
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3321      	adds	r3, #33	; 0x21
 8008072:	4618      	mov	r0, r3
 8008074:	f7f8 f8b6 	bl	80001e4 <strlen>
 8008078:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008080:	d306      	bcc.n	8008090 <get_tag_insert+0x16c>
 8008082:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <get_tag_insert+0x17c>)
 8008084:	f240 323f 	movw	r2, #831	; 0x33f
 8008088:	490e      	ldr	r1, [pc, #56]	; (80080c4 <get_tag_insert+0x1a0>)
 800808a:	4807      	ldr	r0, [pc, #28]	; (80080a8 <get_tag_insert+0x184>)
 800808c:	f00f f89a 	bl	80171c4 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	b29a      	uxth	r2, r3
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	825a      	strh	r2, [r3, #18]
}
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	bd90      	pop	{r4, r7, pc}
 800809e:	bf00      	nop
 80080a0:	0801c20c 	.word	0x0801c20c
 80080a4:	0801c27c 	.word	0x0801c27c
 80080a8:	0801c254 	.word	0x0801c254
 80080ac:	0801c288 	.word	0x0801c288
 80080b0:	200011c8 	.word	0x200011c8
 80080b4:	200011d0 	.word	0x200011d0
 80080b8:	200011cc 	.word	0x200011cc
 80080bc:	0801c294 	.word	0x0801c294
 80080c0:	0801c2a8 	.word	0x0801c2a8
 80080c4:	0801c2b0 	.word	0x0801c2b0

080080c8 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 80080d2:	4a55      	ldr	r2, [pc, #340]	; (8008228 <get_http_headers+0x160>)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d110      	bne.n	8008112 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80080f0:	4a4e      	ldr	r2, [pc, #312]	; (800822c <get_http_headers+0x164>)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 80080f8:	4a4d      	ldr	r2, [pc, #308]	; (8008230 <get_http_headers+0x168>)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 8008110:	e087      	b.n	8008222 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 8008112:	4948      	ldr	r1, [pc, #288]	; (8008234 <get_http_headers+0x16c>)
 8008114:	6838      	ldr	r0, [r7, #0]
 8008116:	f00f f9c0 	bl	801749a <strstr>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d004      	beq.n	800812a <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 8008120:	4a42      	ldr	r2, [pc, #264]	; (800822c <get_http_headers+0x164>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008128:	e01b      	b.n	8008162 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800812a:	4943      	ldr	r1, [pc, #268]	; (8008238 <get_http_headers+0x170>)
 800812c:	6838      	ldr	r0, [r7, #0]
 800812e:	f00f f9b4 	bl	801749a <strstr>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d004      	beq.n	8008142 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 8008138:	4a40      	ldr	r2, [pc, #256]	; (800823c <get_http_headers+0x174>)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008140:	e00f      	b.n	8008162 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 8008142:	493f      	ldr	r1, [pc, #252]	; (8008240 <get_http_headers+0x178>)
 8008144:	6838      	ldr	r0, [r7, #0]
 8008146:	f00f f9a8 	bl	801749a <strstr>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d004      	beq.n	800815a <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 8008150:	4a3c      	ldr	r2, [pc, #240]	; (8008244 <get_http_headers+0x17c>)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8008158:	e003      	b.n	8008162 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800815a:	4a3b      	ldr	r2, [pc, #236]	; (8008248 <get_http_headers+0x180>)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 8008162:	213f      	movs	r1, #63	; 0x3f
 8008164:	6838      	ldr	r0, [r7, #0]
 8008166:	f00f f95e 	bl	8017426 <strchr>
 800816a:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <get_http_headers+0xb0>
    *vars = '\0';
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	2200      	movs	r2, #0
 8008176:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800817c:	212e      	movs	r1, #46	; 0x2e
 800817e:	6838      	ldr	r0, [r7, #0]
 8008180:	f00f f951 	bl	8017426 <strchr>
 8008184:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8008186:	e007      	b.n	8008198 <get_http_headers+0xd0>
    ext = tmp + 1;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	3301      	adds	r3, #1
 800818c:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800818e:	212e      	movs	r1, #46	; 0x2e
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f00f f948 	bl	8017426 <strchr>
 8008196:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1f4      	bne.n	8008188 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d014      	beq.n	80081ce <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 80081a4:	2300      	movs	r3, #0
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e00d      	b.n	80081c6 <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 80081aa:	4a28      	ldr	r2, [pc, #160]	; (800824c <get_http_headers+0x184>)
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081b2:	68f9      	ldr	r1, [r7, #12]
 80081b4:	4618      	mov	r0, r3
 80081b6:	f001 fcd7 	bl	8009b68 <lwip_stricmp>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	3301      	adds	r3, #1
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	2b13      	cmp	r3, #19
 80081ca:	d9ee      	bls.n	80081aa <get_http_headers+0xe2>
 80081cc:	e003      	b.n	80081d6 <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 80081ce:	2314      	movs	r3, #20
 80081d0:	617b      	str	r3, [r7, #20]
 80081d2:	e000      	b.n	80081d6 <get_http_headers+0x10e>
        break;
 80081d4:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <get_http_headers+0x11a>
    *vars = '?';
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	223f      	movs	r2, #63	; 0x3f
 80081e0:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b13      	cmp	r3, #19
 80081e6:	d808      	bhi.n	80081fa <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 80081e8:	4a18      	ldr	r2, [pc, #96]	; (800824c <get_http_headers+0x184>)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	00db      	lsls	r3, r3, #3
 80081ee:	4413      	add	r3, r2
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80081f8:	e00b      	b.n	8008212 <get_http_headers+0x14a>
  } else if (!ext) {
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a13      	ldr	r2, [pc, #76]	; (8008250 <get_http_headers+0x188>)
 8008204:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8008208:	e003      	b.n	8008212 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a11      	ldr	r2, [pc, #68]	; (8008254 <get_http_headers+0x18c>)
 800820e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	0801be8c 	.word	0x0801be8c
 800822c:	0801bd50 	.word	0x0801bd50
 8008230:	0801becc 	.word	0x0801becc
 8008234:	0801c2c0 	.word	0x0801c2c0
 8008238:	0801c2c4 	.word	0x0801c2c4
 800823c:	0801bd70 	.word	0x0801bd70
 8008240:	0801c2c8 	.word	0x0801c2c8
 8008244:	0801bd8c 	.word	0x0801bd8c
 8008248:	0801bd3c 	.word	0x0801bd3c
 800824c:	08032170 	.word	0x08032170
 8008250:	0801c060 	.word	0x0801c060
 8008254:	0801c2cc 	.word	0x0801c2cc

08008258 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 8008260:	2300      	movs	r3, #0
 8008262:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800826a:	2b00      	cmp	r3, #0
 800826c:	d006      	beq.n	800827c <get_http_content_length+0x24>
 800826e:	4b27      	ldr	r3, [pc, #156]	; (800830c <get_http_content_length+0xb4>)
 8008270:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8008274:	4926      	ldr	r1, [pc, #152]	; (8008310 <get_http_content_length+0xb8>)
 8008276:	4827      	ldr	r0, [pc, #156]	; (8008314 <get_http_content_length+0xbc>)
 8008278:	f00e ffa4 	bl	80171c4 <iprintf>

  add_content_len = 0;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10c      	bne.n	80082a2 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	695b      	ldr	r3, [r3, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d008      	beq.n	80082a2 <get_http_content_length+0x4a>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	695b      	ldr	r3, [r3, #20]
 8008294:	7c1b      	ldrb	r3, [r3, #16]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <get_http_content_length+0x4a>
      add_content_len = 1;
 800829e:	2301      	movs	r3, #1
 80082a0:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d025      	beq.n	80082f4 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	461a      	mov	r2, r3
 80082b6:	210c      	movs	r1, #12
 80082b8:	f001 fc8a 	bl	8009bd0 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	33c4      	adds	r3, #196	; 0xc4
 80082c0:	4618      	mov	r0, r3
 80082c2:	f7f7 ff8f 	bl	80001e4 <strlen>
 80082c6:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2b09      	cmp	r3, #9
 80082cc:	d810      	bhi.n	80082f0 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	33c0      	adds	r3, #192	; 0xc0
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	4413      	add	r3, r2
 80082d6:	3304      	adds	r3, #4
 80082d8:	2203      	movs	r2, #3
 80082da:	490f      	ldr	r1, [pc, #60]	; (8008318 <get_http_content_length+0xc0>)
 80082dc:	4618      	mov	r0, r3
 80082de:	f00e fad7 	bl	8016890 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80082ee:	e001      	b.n	80082f4 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d003      	beq.n	8008302 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 80082fa:	4a08      	ldr	r2, [pc, #32]	; (800831c <get_http_content_length+0xc4>)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 8008302:	bf00      	nop
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	0801c20c 	.word	0x0801c20c
 8008310:	0801c2ec 	.word	0x0801c2ec
 8008314:	0801c254 	.word	0x0801c254
 8008318:	0801c300 	.word	0x0801c300
 800831c:	0801be1c 	.word	0x0801be1c

08008320 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800832a:	2300      	movs	r3, #0
 800832c:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008334:	2b00      	cmp	r3, #0
 8008336:	d102      	bne.n	800833e <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 8008338:	6838      	ldr	r0, [r7, #0]
 800833a:	f7ff ff8d 	bl	8008258 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008344:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 8008346:	8bfb      	ldrh	r3, [r7, #30]
 8008348:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800834a:	e08b      	b.n	8008464 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008352:	461a      	mov	r2, r3
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	322c      	adds	r2, #44	; 0x2c
 8008358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835c:	4618      	mov	r0, r3
 800835e:	f7f7 ff41 	bl	80001e4 <strlen>
 8008362:	4603      	mov	r3, r0
 8008364:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8008366:	8b7b      	ldrh	r3, [r7, #26]
 8008368:	683a      	ldr	r2, [r7, #0]
 800836a:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800836e:	1a9a      	subs	r2, r3, r2
 8008370:	8bfb      	ldrh	r3, [r7, #30]
 8008372:	4293      	cmp	r3, r2
 8008374:	bfa8      	it	ge
 8008376:	4613      	movge	r3, r2
 8008378:	b29b      	uxth	r3, r3
 800837a:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008382:	461a      	mov	r2, r3
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	322c      	adds	r2, #44	; 0x2c
 8008388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 8008392:	4413      	add	r3, r2
 8008394:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 8008396:	89fb      	ldrh	r3, [r7, #14]
 8008398:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800839a:	2300      	movs	r3, #0
 800839c:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d103      	bne.n	80083b0 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 80083a8:	7f3b      	ldrb	r3, [r7, #28]
 80083aa:	f043 0301 	orr.w	r3, r3, #1
 80083ae:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d803      	bhi.n	80083c2 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 80083ba:	7f3b      	ldrb	r3, [r7, #28]
 80083bc:	f043 0302 	orr.w	r3, r3, #2
 80083c0:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 80083c2:	7f3b      	ldrb	r3, [r7, #28]
 80083c4:	f107 020e 	add.w	r2, r7, #14
 80083c8:	6979      	ldr	r1, [r7, #20]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7ff fc72 	bl	8007cb4 <http_write>
 80083d0:	4603      	mov	r3, r0
 80083d2:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 80083d4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d106      	bne.n	80083ea <http_send_headers+0xca>
 80083dc:	89fb      	ldrh	r3, [r7, #14]
 80083de:	8a7a      	ldrh	r2, [r7, #18]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d002      	beq.n	80083ea <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 80083e4:	2301      	movs	r3, #1
 80083e6:	777b      	strb	r3, [r7, #29]
 80083e8:	e005      	b.n	80083f6 <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 80083ea:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80083fc:	89fb      	ldrh	r3, [r7, #14]
 80083fe:	4413      	add	r3, r2
 8008400:	b29a      	uxth	r2, r3
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 8008408:	89fb      	ldrh	r3, [r7, #14]
 800840a:	8bfa      	ldrh	r2, [r7, #30]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 8008416:	8b7a      	ldrh	r2, [r7, #26]
 8008418:	429a      	cmp	r2, r3
 800841a:	d123      	bne.n	8008464 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008422:	3301      	adds	r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800842c:	e007      	b.n	800843e <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008434:	3301      	adds	r3, #1
 8008436:	b29a      	uxth	r2, r3
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008444:	2b04      	cmp	r3, #4
 8008446:	d809      	bhi.n	800845c <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800844e:	461a      	mov	r2, r3
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	322c      	adds	r2, #44	; 0x2c
 8008454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8008458:	2b00      	cmp	r3, #0
 800845a:	d0e8      	beq.n	800842e <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2200      	movs	r2, #0
 8008460:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8008464:	8bfb      	ldrh	r3, [r7, #30]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d008      	beq.n	800847c <http_send_headers+0x15c>
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008470:	2b04      	cmp	r3, #4
 8008472:	d803      	bhi.n	800847c <http_send_headers+0x15c>
 8008474:	89fb      	ldrh	r3, [r7, #14]
 8008476:	2b00      	cmp	r3, #0
 8008478:	f47f af68 	bne.w	800834c <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008482:	2b04      	cmp	r3, #4
 8008484:	d90f      	bls.n	80084a6 <http_send_headers+0x186>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	699b      	ldr	r3, [r3, #24]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10b      	bne.n	80084a6 <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f819 	bl	80084c8 <http_check_eof>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800849c:	2302      	movs	r3, #2
 800849e:	777b      	strb	r3, [r7, #29]
 80084a0:	e001      	b.n	80084a6 <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 80084a2:	2303      	movs	r3, #3
 80084a4:	e00b      	b.n	80084be <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80084ac:	2b04      	cmp	r3, #4
 80084ae:	d903      	bls.n	80084b8 <http_send_headers+0x198>
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 80084b8:	2302      	movs	r3, #2
 80084ba:	e000      	b.n	80084be <http_send_headers+0x19e>
  }
  return data_to_send;
 80084bc:	7f7b      	ldrb	r3, [r7, #29]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3720      	adds	r7, #32
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d105      	bne.n	80084e6 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 80084da:	6839      	ldr	r1, [r7, #0]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff fcb6 	bl	8007e4e <http_eof>
    return 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e016      	b.n	8008514 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7ff fb4e 	bl	8007b8c <fs_bytes_left>
 80084f0:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dc05      	bgt.n	8008504 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80084f8:	6839      	ldr	r1, [r7, #0]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff fca7 	bl	8007e4e <http_eof>
    return 0;
 8008500:	2300      	movs	r3, #0
 8008502:	e007      	b.n	8008514 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <http_check_eof+0x54>)
 8008506:	f240 429d 	movw	r2, #1181	; 0x49d
 800850a:	4905      	ldr	r1, [pc, #20]	; (8008520 <http_check_eof+0x58>)
 800850c:	4805      	ldr	r0, [pc, #20]	; (8008524 <http_check_eof+0x5c>)
 800850e:	f00e fe59 	bl	80171c4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8008512:	2301      	movs	r3, #1
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	0801c20c 	.word	0x0801c20c
 8008520:	0801c304 	.word	0x0801c304
 8008524:	0801c254 	.word	0x0801c254

08008528 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800853e:	4293      	cmp	r3, r2
 8008540:	d803      	bhi.n	800854a <http_send_data_nonssi+0x22>
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	b29b      	uxth	r3, r3
 8008548:	e001      	b.n	800854e <http_send_data_nonssi+0x26>
 800854a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800854e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	6999      	ldr	r1, [r3, #24]
 8008554:	f107 020c 	add.w	r2, r7, #12
 8008558:	2300      	movs	r3, #0
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fbaa 	bl	8007cb4 <http_write>
 8008560:	4603      	mov	r3, r0
 8008562:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8008564:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10d      	bne.n	8008588 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800856c:	2301      	movs	r3, #1
 800856e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	89ba      	ldrh	r2, [r7, #12]
 8008576:	441a      	add	r2, r3
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	89ba      	ldrh	r2, [r7, #12]
 8008582:	1a9a      	subs	r2, r3, r2
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8008588:	7bfb      	ldrb	r3, [r7, #15]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b086      	sub	sp, #24
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <http_send_data_ssi+0x2c>
 80085b2:	4b89      	ldr	r3, [pc, #548]	; (80087d8 <http_send_data_ssi+0x244>)
 80085b4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 80085b8:	4988      	ldr	r1, [pc, #544]	; (80087dc <http_send_data_ssi+0x248>)
 80085ba:	4889      	ldr	r0, [pc, #548]	; (80087e0 <http_send_data_ssi+0x24c>)
 80085bc:	f00e fe02 	bl	80171c4 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80085c6:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	f240 82c5 	bls.w	8008b60 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085e4:	4293      	cmp	r3, r2
 80085e6:	dc06      	bgt.n	80085f6 <http_send_data_ssi+0x62>
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	e001      	b.n	80085fa <http_send_data_ssi+0x66>
 80085f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80085fa:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	6999      	ldr	r1, [r3, #24]
 8008600:	f107 020e 	add.w	r2, r7, #14
 8008604:	2300      	movs	r3, #0
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f7ff fb54 	bl	8007cb4 <http_write>
 800860c:	4603      	mov	r3, r0
 800860e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8008610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10d      	bne.n	8008634 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8008618:	2301      	movs	r3, #1
 800861a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	89fa      	ldrh	r2, [r7, #14]
 8008622:	441a      	add	r2, r3
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800862c:	89fa      	ldrh	r2, [r7, #14]
 800862e:	1a9a      	subs	r2, r3, r2
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 8290 	bne.w	8008b60 <http_send_data_ssi+0x5cc>
      return data_to_send;
 8008640:	7dbb      	ldrb	r3, [r7, #22]
 8008642:	e2d6      	b.n	8008bf2 <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8008644:	89fb      	ldrh	r3, [r7, #14]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <http_send_data_ssi+0xba>
      return data_to_send;
 800864a:	7dbb      	ldrb	r3, [r7, #22]
 800864c:	e2d1      	b.n	8008bf2 <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 8008654:	2b04      	cmp	r3, #4
 8008656:	f200 8282 	bhi.w	8008b5e <http_send_data_ssi+0x5ca>
 800865a:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <http_send_data_ssi+0xcc>)
 800865c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008660:	08008675 	.word	0x08008675
 8008664:	080086cf 	.word	0x080086cf
 8008668:	08008741 	.word	0x08008741
 800866c:	08008889 	.word	0x08008889
 8008670:	080089ff 	.word	0x080089ff
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8008674:	2300      	movs	r3, #0
 8008676:	757b      	strb	r3, [r7, #21]
 8008678:	e01b      	b.n	80086b2 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	781a      	ldrb	r2, [r3, #0]
 8008680:	7d7b      	ldrb	r3, [r7, #21]
 8008682:	4958      	ldr	r1, [pc, #352]	; (80087e4 <http_send_data_ssi+0x250>)
 8008684:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	429a      	cmp	r2, r3
 800868c:	d10e      	bne.n	80086ac <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	7d7a      	ldrb	r2, [r7, #21]
 8008692:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            ssi->tag_index = 1;
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2201      	movs	r2, #1
 80086a0:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 80086aa:	e005      	b.n	80086b8 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80086ac:	7d7b      	ldrb	r3, [r7, #21]
 80086ae:	3301      	adds	r3, #1
 80086b0:	757b      	strb	r3, [r7, #21]
 80086b2:	7d7b      	ldrb	r3, [r7, #21]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d9e0      	bls.n	800867a <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	1e5a      	subs	r2, r3, #1
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	601a      	str	r2, [r3, #0]
        break;
 80086cc:	e248      	b.n	8008b60 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	7d9b      	ldrb	r3, [r3, #22]
 80086d2:	461a      	mov	r2, r3
 80086d4:	4b43      	ldr	r3, [pc, #268]	; (80087e4 <http_send_data_ssi+0x250>)
 80086d6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	8a12      	ldrh	r2, [r2, #16]
 80086de:	4413      	add	r3, r2
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d107      	bne.n	80086f6 <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	2200      	movs	r2, #0
 80086ea:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
 80086f4:	e234      	b.n	8008b60 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	781a      	ldrb	r2, [r3, #0]
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	7d9b      	ldrb	r3, [r3, #22]
 8008700:	4619      	mov	r1, r3
 8008702:	4b38      	ldr	r3, [pc, #224]	; (80087e4 <http_send_data_ssi+0x250>)
 8008704:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8008708:	6939      	ldr	r1, [r7, #16]
 800870a:	8a09      	ldrh	r1, [r1, #16]
 800870c:	440b      	add	r3, r1
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d106      	bne.n	8008722 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	8a1b      	ldrh	r3, [r3, #16]
 8008718:	3301      	adds	r3, #1
 800871a:	b29a      	uxth	r2, r3
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	821a      	strh	r2, [r3, #16]
 8008720:	e003      	b.n	800872a <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	1e5a      	subs	r2, r3, #1
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	1c5a      	adds	r2, r3, #1
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	601a      	str	r2, [r3, #0]
        }
        break;
 800873e:	e20f      	b.n	8008b60 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	8a1b      	ldrh	r3, [r3, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d11e      	bne.n	8008786 <http_send_data_ssi+0x1f2>
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b20      	cmp	r3, #32
 8008750:	d00e      	beq.n	8008770 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008758:	2b09      	cmp	r3, #9
 800875a:	d009      	beq.n	8008770 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	2b0a      	cmp	r3, #10
 8008764:	d004      	beq.n	8008770 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800876c:	2b0d      	cmp	r3, #13
 800876e:	d10a      	bne.n	8008786 <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	1e5a      	subs	r2, r3, #1
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	1c5a      	adds	r2, r3, #1
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	601a      	str	r2, [r3, #0]
          break;
 8008784:	e1ec      	b.n	8008b60 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	781a      	ldrb	r2, [r3, #0]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	7d9b      	ldrb	r3, [r3, #22]
 8008790:	4914      	ldr	r1, [pc, #80]	; (80087e4 <http_send_data_ssi+0x250>)
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	440b      	add	r3, r1
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	429a      	cmp	r2, r3
 800879c:	d013      	beq.n	80087c6 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80087a4:	2b20      	cmp	r3, #32
 80087a6:	d00e      	beq.n	80087c6 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	2b09      	cmp	r3, #9
 80087b0:	d009      	beq.n	80087c6 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80087b8:	2b0a      	cmp	r3, #10
 80087ba:	d004      	beq.n	80087c6 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b0d      	cmp	r3, #13
 80087c4:	d13f      	bne.n	8008846 <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	8a1b      	ldrh	r3, [r3, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d10c      	bne.n	80087e8 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          if (ssi->tag_index == 0) {
 80087d6:	e04c      	b.n	8008872 <http_send_data_ssi+0x2de>
 80087d8:	0801c20c 	.word	0x0801c20c
 80087dc:	0801c288 	.word	0x0801c288
 80087e0:	0801c254 	.word	0x0801c254
 80087e4:	0803224c 	.word	0x0803224c
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2203      	movs	r2, #3
 80087ec:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	8a1b      	ldrh	r3, [r3, #16]
 80087f4:	2bff      	cmp	r3, #255	; 0xff
 80087f6:	d906      	bls.n	8008806 <http_send_data_ssi+0x272>
 80087f8:	4b92      	ldr	r3, [pc, #584]	; (8008a44 <http_send_data_ssi+0x4b0>)
 80087fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80087fe:	4992      	ldr	r1, [pc, #584]	; (8008a48 <http_send_data_ssi+0x4b4>)
 8008800:	4892      	ldr	r0, [pc, #584]	; (8008a4c <http_send_data_ssi+0x4b8>)
 8008802:	f00e fcdf 	bl	80171c4 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	8a1b      	ldrh	r3, [r3, #16]
 800880a:	b2da      	uxtb	r2, r3
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	8a1b      	ldrh	r3, [r3, #16]
 8008814:	461a      	mov	r2, r3
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	4413      	add	r3, r2
 800881a:	2200      	movs	r2, #0
 800881c:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	781a      	ldrb	r2, [r3, #0]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	7d9b      	ldrb	r3, [r3, #22]
 8008828:	4989      	ldr	r1, [pc, #548]	; (8008a50 <http_send_data_ssi+0x4bc>)
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	440b      	add	r3, r1
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d103      	bne.n	800883e <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	2201      	movs	r2, #1
 800883a:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800883c:	e019      	b.n	8008872 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	2200      	movs	r2, #0
 8008842:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8008844:	e015      	b.n	8008872 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	8a1b      	ldrh	r3, [r3, #16]
 800884a:	2b07      	cmp	r3, #7
 800884c:	d80d      	bhi.n	800886a <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	8a1b      	ldrh	r3, [r3, #16]
 8008856:	1c59      	adds	r1, r3, #1
 8008858:	b288      	uxth	r0, r1
 800885a:	6939      	ldr	r1, [r7, #16]
 800885c:	8208      	strh	r0, [r1, #16]
 800885e:	4619      	mov	r1, r3
 8008860:	7812      	ldrb	r2, [r2, #0]
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	440b      	add	r3, r1
 8008866:	761a      	strb	r2, [r3, #24]
 8008868:	e003      	b.n	8008872 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	1e5a      	subs	r2, r3, #1
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	1c5a      	adds	r2, r3, #1
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	601a      	str	r2, [r3, #0]

        break;
 8008886:	e16b      	b.n	8008b60 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	8a1b      	ldrh	r3, [r3, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d11e      	bne.n	80088ce <http_send_data_ssi+0x33a>
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b20      	cmp	r3, #32
 8008898:	d00e      	beq.n	80088b8 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80088a0:	2b09      	cmp	r3, #9
 80088a2:	d009      	beq.n	80088b8 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	2b0a      	cmp	r3, #10
 80088ac:	d004      	beq.n	80088b8 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80088b4:	2b0d      	cmp	r3, #13
 80088b6:	d10a      	bne.n	80088ce <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	1e5a      	subs	r2, r3, #1
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	601a      	str	r2, [r3, #0]
          break;
 80088cc:	e148      	b.n	8008b60 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	7d9b      	ldrb	r3, [r3, #22]
 80088d8:	495d      	ldr	r1, [pc, #372]	; (8008a50 <http_send_data_ssi+0x4bc>)
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	440b      	add	r3, r1
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	6939      	ldr	r1, [r7, #16]
 80088e2:	8a09      	ldrh	r1, [r1, #16]
 80088e4:	440b      	add	r3, r1
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d179      	bne.n	80089e0 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	1e5a      	subs	r2, r3, #1
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	8a1b      	ldrh	r3, [r3, #16]
 8008904:	3301      	adds	r3, #1
 8008906:	b29a      	uxth	r2, r3
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	7d9b      	ldrb	r3, [r3, #22]
 8008910:	4a4f      	ldr	r2, [pc, #316]	; (8008a50 <http_send_data_ssi+0x4bc>)
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	4413      	add	r3, r2
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	8a12      	ldrh	r2, [r2, #16]
 800891c:	4413      	add	r3, r2
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	f040 811d 	bne.w	8008b60 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2200      	movs	r2, #0
 800892a:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800892c:	6838      	ldr	r0, [r7, #0]
 800892e:	f7ff faf9 	bl	8007f24 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2200      	movs	r2, #0
 8008936:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	2204      	movs	r2, #4
 800893c:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
            ssi->tag_end = ssi->parsed;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	429a      	cmp	r2, r3
 800895a:	f240 8101 	bls.w	8008b60 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800896c:	4293      	cmp	r3, r2
 800896e:	dc06      	bgt.n	800897e <http_send_data_ssi+0x3ea>
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	b29b      	uxth	r3, r3
 800897c:	e001      	b.n	8008982 <http_send_data_ssi+0x3ee>
 800897e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008982:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	6999      	ldr	r1, [r3, #24]
 8008988:	f107 020e 	add.w	r2, r7, #14
 800898c:	2300      	movs	r3, #0
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff f990 	bl	8007cb4 <http_write>
 8008994:	4603      	mov	r3, r0
 8008996:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8008998:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800899c:	2b00      	cmp	r3, #0
 800899e:	f040 80df 	bne.w	8008b60 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 80089a2:	2301      	movs	r3, #1
 80089a4:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d809      	bhi.n	80089c6 <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	689a      	ldr	r2, [r3, #8]
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	b29a      	uxth	r2, r3
 80089be:	89fb      	ldrh	r3, [r7, #14]
 80089c0:	4413      	add	r3, r2
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	89fa      	ldrh	r2, [r7, #14]
 80089cc:	441a      	add	r2, r3
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d6:	89fa      	ldrh	r2, [r7, #14]
 80089d8:	1a9a      	subs	r2, r3, r2
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	625a      	str	r2, [r3, #36]	; 0x24
 80089de:	e0bf      	b.n	8008b60 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	1e5a      	subs	r2, r3, #1
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	1c5a      	adds	r2, r3, #1
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
        }
        break;
 80089fc:	e0b0      	b.n	8008b60 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	689a      	ldr	r2, [r3, #8]
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d95c      	bls.n	8008ac4 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d206      	bcs.n	8008a24 <http_send_data_ssi+0x490>
 8008a16:	4b0b      	ldr	r3, [pc, #44]	; (8008a44 <http_send_data_ssi+0x4b0>)
 8008a18:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8008a1c:	490d      	ldr	r1, [pc, #52]	; (8008a54 <http_send_data_ssi+0x4c0>)
 8008a1e:	480b      	ldr	r0, [pc, #44]	; (8008a4c <http_send_data_ssi+0x4b8>)
 8008a20:	f00e fbd0 	bl	80171c4 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008a32:	4293      	cmp	r3, r2
 8008a34:	dc10      	bgt.n	8008a58 <http_send_data_ssi+0x4c4>
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	685a      	ldr	r2, [r3, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	e00b      	b.n	8008a5c <http_send_data_ssi+0x4c8>
 8008a44:	0801c20c 	.word	0x0801c20c
 8008a48:	0801c33c 	.word	0x0801c33c
 8008a4c:	0801c254 	.word	0x0801c254
 8008a50:	0803224c 	.word	0x0803224c
 8008a54:	0801c354 	.word	0x0801c354
 8008a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a5c:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8008a5e:	89fb      	ldrh	r3, [r7, #14]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00a      	beq.n	8008a7a <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	6999      	ldr	r1, [r3, #24]
 8008a68:	f107 020e 	add.w	r2, r7, #14
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff f920 	bl	8007cb4 <http_write>
 8008a74:	4603      	mov	r3, r0
 8008a76:	75fb      	strb	r3, [r7, #23]
 8008a78:	e001      	b.n	8008a7e <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8008a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d16c      	bne.n	8008b60 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 8008a86:	2301      	movs	r3, #1
 8008a88:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d809      	bhi.n	8008aaa <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	689a      	ldr	r2, [r3, #8]
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	89fb      	ldrh	r3, [r7, #14]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	89fa      	ldrh	r2, [r7, #14]
 8008ab0:	441a      	add	r2, r3
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aba:	89fa      	ldrh	r2, [r7, #14]
 8008abc:	1a9a      	subs	r2, r3, r2
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	625a      	str	r2, [r3, #36]	; 0x24
 8008ac2:	e04d      	b.n	8008b60 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	8a1a      	ldrh	r2, [r3, #16]
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	8a5b      	ldrh	r3, [r3, #18]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d30b      	bcc.n	8008ae8 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	8a9b      	ldrh	r3, [r3, #20]
 8008ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d005      	beq.n	8008ae8 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 8008ae2:	6838      	ldr	r0, [r7, #0]
 8008ae4:	f7ff fa1e 	bl	8007f24 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	8a1a      	ldrh	r2, [r3, #16]
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	8a5b      	ldrh	r3, [r3, #18]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d222      	bcs.n	8008b3a <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	8a5a      	ldrh	r2, [r3, #18]
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	8a1b      	ldrh	r3, [r3, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	8a1b      	ldrh	r3, [r3, #16]
 8008b06:	3320      	adds	r3, #32
 8008b08:	693a      	ldr	r2, [r7, #16]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	1c59      	adds	r1, r3, #1
 8008b0e:	f107 020e 	add.w	r2, r7, #14
 8008b12:	2301      	movs	r3, #1
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff f8cd 	bl	8007cb4 <http_write>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8008b1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d11c      	bne.n	8008b60 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 8008b26:	2301      	movs	r3, #1
 8008b28:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	8a1a      	ldrh	r2, [r3, #16]
 8008b2e:	89fb      	ldrh	r3, [r7, #14]
 8008b30:	4413      	add	r3, r2
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	821a      	strh	r2, [r3, #16]
 8008b38:	e012      	b.n	8008b60 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	8a9b      	ldrh	r3, [r3, #20]
 8008b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d10c      	bne.n	8008b60 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	689a      	ldr	r2, [r3, #8]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8008b5c:	e000      	b.n	8008b60 <http_send_data_ssi+0x5cc>
        default:
          break;
 8008b5e:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d003      	beq.n	8008b72 <http_send_data_ssi+0x5de>
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d004      	beq.n	8008b7c <http_send_data_ssi+0x5e8>
 8008b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	f43f ad64 	beq.w	8008644 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f893 3342 	ldrb.w	r3, [r3, #834]	; 0x342
 8008b82:	2b04      	cmp	r3, #4
 8008b84:	d034      	beq.n	8008bf0 <http_send_data_ssi+0x65c>
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d92e      	bls.n	8008bf0 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	dc06      	bgt.n	8008bb2 <http_send_data_ssi+0x61e>
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	e001      	b.n	8008bb6 <http_send_data_ssi+0x622>
 8008bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008bb6:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	6999      	ldr	r1, [r3, #24]
 8008bbc:	f107 020e 	add.w	r2, r7, #14
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7ff f876 	bl	8007cb4 <http_write>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8008bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10d      	bne.n	8008bf0 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	699b      	ldr	r3, [r3, #24]
 8008bdc:	89fa      	ldrh	r2, [r7, #14]
 8008bde:	441a      	add	r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	89fa      	ldrh	r2, [r7, #14]
 8008bea:	1a9a      	subs	r2, r3, r2
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8008bf0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop

08008bfc <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8008c06:	2300      	movs	r3, #0
 8008c08:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <http_send+0x18>
    return 0;
 8008c10:	2300      	movs	r3, #0
 8008c12:	e048      	b.n	8008ca6 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d812      	bhi.n	8008c44 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7ff fb7d 	bl	8008320 <http_send_headers>
 8008c26:	4603      	mov	r3, r0
 8008c28:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	d007      	beq.n	8008c40 <http_send+0x44>
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d006      	beq.n	8008c44 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 8008c3c:	2b04      	cmp	r3, #4
 8008c3e:	d801      	bhi.n	8008c44 <http_send+0x48>
      return data_to_send;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	e030      	b.n	8008ca6 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d108      	bne.n	8008c5e <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7ff fc3a 	bl	80084c8 <http_check_eof>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <http_send+0x62>
      return 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	e023      	b.n	8008ca6 <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d006      	beq.n	8008c74 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 8008c66:	6839      	ldr	r1, [r7, #0]
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff fc93 	bl	8008594 <http_send_data_ssi>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73fb      	strb	r3, [r7, #15]
 8008c72:	e005      	b.n	8008c80 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f7ff fc56 	bl	8008528 <http_send_data_nonssi>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10d      	bne.n	8008ca4 <http_send+0xa8>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7fe ff7d 	bl	8007b8c <fs_bytes_left>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dc05      	bgt.n	8008ca4 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff f8d7 	bl	8007e4e <http_eof>
    return 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	e000      	b.n	8008ca6 <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
	...

08008cb0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	4a1c      	ldr	r2, [pc, #112]	; (8008d30 <http_get_404_file+0x80>)
 8008cbe:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4610      	mov	r0, r2
 8008cca:	f7fe ff17 	bl	8007afc <fs_open>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8008cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d024      	beq.n	8008d24 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	4a15      	ldr	r2, [pc, #84]	; (8008d34 <http_get_404_file+0x84>)
 8008cde:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4610      	mov	r0, r2
 8008cea:	f7fe ff07 	bl	8007afc <fs_open>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8008cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d014      	beq.n	8008d24 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	4a0e      	ldr	r2, [pc, #56]	; (8008d38 <http_get_404_file+0x88>)
 8008cfe:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4619      	mov	r1, r3
 8008d08:	4610      	mov	r0, r2
 8008d0a:	f7fe fef7 	bl	8007afc <fs_open>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8008d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d004      	beq.n	8008d24 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]
        return NULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	e000      	b.n	8008d26 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8008d24:	687b      	ldr	r3, [r7, #4]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	0801c36c 	.word	0x0801c36c
 8008d34:	0801c378 	.word	0x0801c378
 8008d38:	0801c384 	.word	0x0801c384

08008d3c <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 8008d44:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <http_handle_post_finished+0x30>)
 8008d46:	2200      	movs	r2, #0
 8008d48:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8008d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d4e:	4907      	ldr	r1, [pc, #28]	; (8008d6c <http_handle_post_finished+0x30>)
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7fa fd35 	bl	80037c0 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8008d56:	2200      	movs	r2, #0
 8008d58:	4904      	ldr	r1, [pc, #16]	; (8008d6c <http_handle_post_finished+0x30>)
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 faae 	bl	80092bc <http_find_file>
 8008d60:	4603      	mov	r3, r0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	20000ddc 	.word	0x20000ddc

08008d70 <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d014      	beq.n	8008daa <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008d86:	683a      	ldr	r2, [r7, #0]
 8008d88:	8912      	ldrh	r2, [r2, #8]
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d204      	bcs.n	8008d98 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8008d96:	e008      	b.n	8008daa <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	8912      	ldrh	r2, [r2, #8]
 8008da2:	1a9a      	subs	r2, r3, r2
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7fa fcd4 	bl	8003760 <httpd_post_receive_data>
 8008db8:	4603      	mov	r3, r0
 8008dba:	73fb      	strb	r3, [r7, #15]
 8008dbc:	e001      	b.n	8008dc2 <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 8008dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d104      	bne.n	8008de6 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f7ff ffad 	bl	8008d3c <http_handle_post_finished>
 8008de2:	4603      	mov	r3, r0
 8008de4:	e000      	b.n	8008de8 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b092      	sub	sp, #72	; 0x48
 8008df4:	af04      	add	r7, sp, #16
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8008dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e00:	1c58      	adds	r0, r3, #1
 8008e02:	887a      	ldrh	r2, [r7, #2]
 8008e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e06:	1c59      	adds	r1, r3, #1
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	1acb      	subs	r3, r1, r3
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	4966      	ldr	r1, [pc, #408]	; (8008fac <http_post_request+0x1bc>)
 8008e12:	f000 fe73 	bl	8009afc <lwip_strnstr>
 8008e16:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80bf 	beq.w	8008f9e <http_post_request+0x1ae>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8008e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e22:	1c58      	adds	r0, r3, #1
 8008e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e26:	3301      	adds	r3, #1
 8008e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4960      	ldr	r1, [pc, #384]	; (8008fb0 <http_post_request+0x1c0>)
 8008e30:	f000 fe64 	bl	8009afc <lwip_strnstr>
 8008e34:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 80ad 	beq.w	8008f98 <http_post_request+0x1a8>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	3310      	adds	r3, #16
 8008e42:	220a      	movs	r2, #10
 8008e44:	495b      	ldr	r1, [pc, #364]	; (8008fb4 <http_post_request+0x1c4>)
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 fe58 	bl	8009afc <lwip_strnstr>
 8008e4c:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 8008e4e:	6a3b      	ldr	r3, [r7, #32]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 80a1 	beq.w	8008f98 <http_post_request+0x1a8>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8008e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e58:	3310      	adds	r3, #16
 8008e5a:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 8008e5c:	69f8      	ldr	r0, [r7, #28]
 8008e5e:	f00d fce0 	bl	8016822 <atoi>
 8008e62:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8008e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10b      	bne.n	8008e82 <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b30      	cmp	r3, #48	; 0x30
 8008e70:	d104      	bne.n	8008e7c <http_post_request+0x8c>
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	3301      	adds	r3, #1
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	2b0d      	cmp	r3, #13
 8008e7a:	d002      	beq.n	8008e82 <http_post_request+0x92>
            content_len = -1;
 8008e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e80:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 8008e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f2c0 8084 	blt.w	8008f92 <http_post_request+0x1a2>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 8008e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8008e90:	887a      	ldrh	r2, [r7, #2]
 8008e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e94:	1d19      	adds	r1, r3, #4
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	1acb      	subs	r3, r1, r3
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	db05      	blt.n	8008eaa <http_post_request+0xba>
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	1d1a      	adds	r2, r3, #4
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	e000      	b.n	8008eac <http_post_request+0xbc>
 8008eaa:	887b      	ldrh	r3, [r7, #2]
 8008eac:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8008eae:	887a      	ldrh	r2, [r7, #2]
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	1d19      	adds	r1, r3, #4
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	1acb      	subs	r3, r1, r3
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	db05      	blt.n	8008ec8 <http_post_request+0xd8>
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	1d1a      	adds	r2, r3, #4
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	e000      	b.n	8008eca <http_post_request+0xda>
 8008ec8:	887b      	ldrh	r3, [r7, #2]
 8008eca:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 8008ed0:	4b39      	ldr	r3, [pc, #228]	; (8008fb8 <http_post_request+0x1c8>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8008ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed8:	2200      	movs	r2, #0
 8008eda:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8008edc:	8aba      	ldrh	r2, [r7, #20]
 8008ede:	f107 0312 	add.w	r3, r7, #18
 8008ee2:	9303      	str	r3, [sp, #12]
 8008ee4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008ee8:	9302      	str	r3, [sp, #8]
 8008eea:	4b33      	ldr	r3, [pc, #204]	; (8008fb8 <http_post_request+0x1c8>)
 8008eec:	9301      	str	r3, [sp, #4]
 8008eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ef8:	68b8      	ldr	r0, [r7, #8]
 8008efa:	f7fa fc07 	bl	800370c <httpd_post_begin>
 8008efe:	4603      	mov	r3, r0
 8008f00:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 8008f02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d13c      	bne.n	8008f84 <http_post_request+0x194>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 8008f0e:	8afb      	ldrh	r3, [r7, #22]
 8008f10:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 8008f12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 8008f1a:	e007      	b.n	8008f2c <http_post_request+0x13c>
              start_offset -= q->len;
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	895b      	ldrh	r3, [r3, #10]
 8008f20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d004      	beq.n	8008f3c <http_post_request+0x14c>
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	895b      	ldrh	r3, [r3, #10]
 8008f36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d2ef      	bcs.n	8008f1c <http_post_request+0x12c>
            }
            if (q != NULL) {
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00d      	beq.n	8008f5e <http_post_request+0x16e>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 8008f42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f44:	4619      	mov	r1, r3
 8008f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f48:	f002 f8be 	bl	800b0c8 <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 8008f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f4e:	f002 f9e1 	bl	800b314 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8008f52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f54:	68b8      	ldr	r0, [r7, #8]
 8008f56:	f7ff ff0b 	bl	8008d70 <http_post_rxpbuf>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	e021      	b.n	8008fa2 <http_post_request+0x1b2>
            } else if (hs->post_content_len_left == 0) {
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10b      	bne.n	8008f80 <http_post_request+0x190>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8008f68:	2241      	movs	r2, #65	; 0x41
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f001 fe4d 	bl	800ac0c <pbuf_alloc>
 8008f72:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 8008f74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f76:	68b8      	ldr	r0, [r7, #8]
 8008f78:	f7ff fefa 	bl	8008d70 <http_post_rxpbuf>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	e010      	b.n	8008fa2 <http_post_request+0x1b2>
            } else {
              return ERR_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	e00e      	b.n	8008fa2 <http_post_request+0x1b2>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 8008f84:	2200      	movs	r2, #0
 8008f86:	490c      	ldr	r1, [pc, #48]	; (8008fb8 <http_post_request+0x1c8>)
 8008f88:	68b8      	ldr	r0, [r7, #8]
 8008f8a:	f000 f997 	bl	80092bc <http_find_file>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	e007      	b.n	8008fa2 <http_post_request+0x1b2>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 8008f92:	f06f 030f 	mvn.w	r3, #15
 8008f96:	e004      	b.n	8008fa2 <http_post_request+0x1b2>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 8008f98:	f06f 030f 	mvn.w	r3, #15
 8008f9c:	e001      	b.n	8008fa2 <http_post_request+0x1b2>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 8008f9e:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3738      	adds	r7, #56	; 0x38
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	0801c390 	.word	0x0801c390
 8008fb0:	0801be1c 	.word	0x0801be1c
 8008fb4:	0801c300 	.word	0x0801c300
 8008fb8:	20000ddc 	.word	0x20000ddc

08008fbc <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b092      	sub	sp, #72	; 0x48
 8008fc0:	af02      	add	r7, sp, #8
 8008fc2:	60f8      	str	r0, [r7, #12]
 8008fc4:	60b9      	str	r1, [r7, #8]
 8008fc6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d106      	bne.n	8008fe0 <http_parse_request+0x24>
 8008fd2:	4b87      	ldr	r3, [pc, #540]	; (80091f0 <http_parse_request+0x234>)
 8008fd4:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8008fd8:	4986      	ldr	r1, [pc, #536]	; (80091f4 <http_parse_request+0x238>)
 8008fda:	4887      	ldr	r0, [pc, #540]	; (80091f8 <http_parse_request+0x23c>)
 8008fdc:	f00e f8f2 	bl	80171c4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d106      	bne.n	8008ff4 <http_parse_request+0x38>
 8008fe6:	4b82      	ldr	r3, [pc, #520]	; (80091f0 <http_parse_request+0x234>)
 8008fe8:	f240 72af 	movw	r2, #1967	; 0x7af
 8008fec:	4983      	ldr	r1, [pc, #524]	; (80091fc <http_parse_request+0x240>)
 8008fee:	4882      	ldr	r0, [pc, #520]	; (80091f8 <http_parse_request+0x23c>)
 8008ff0:	f00e f8e8 	bl	80171c4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d103      	bne.n	8009004 <http_parse_request+0x48>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8009004:	f06f 0307 	mvn.w	r3, #7
 8009008:	e0ee      	b.n	80091e8 <http_parse_request+0x22c>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d103      	bne.n	800901a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009016:	621a      	str	r2, [r3, #32]
 8009018:	e005      	b.n	8009026 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009020:	4618      	mov	r0, r3
 8009022:	f002 f999 	bl	800b358 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8009026:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009028:	f002 f974 	bl	800b314 <pbuf_ref>

  if (hs->req->next != NULL) {
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d012      	beq.n	800905c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	891b      	ldrh	r3, [r3, #8]
 800903c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009040:	4293      	cmp	r3, r2
 8009042:	bf28      	it	cs
 8009044:	4613      	movcs	r3, r2
 8009046:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	6a18      	ldr	r0, [r3, #32]
 800904c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800904e:	2300      	movs	r3, #0
 8009050:	496b      	ldr	r1, [pc, #428]	; (8009200 <http_parse_request+0x244>)
 8009052:	f002 fab9 	bl	800b5c8 <pbuf_copy_partial>
    data = httpd_req_buf;
 8009056:	4b6a      	ldr	r3, [pc, #424]	; (8009200 <http_parse_request+0x244>)
 8009058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800905a:	e005      	b.n	8009068 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 8009062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009064:	895b      	ldrh	r3, [r3, #10]
 8009066:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8009068:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800906a:	2b06      	cmp	r3, #6
 800906c:	f240 80a1 	bls.w	80091b2 <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8009070:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009072:	461a      	mov	r2, r3
 8009074:	4963      	ldr	r1, [pc, #396]	; (8009204 <http_parse_request+0x248>)
 8009076:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009078:	f000 fd40 	bl	8009afc <lwip_strnstr>
 800907c:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 8096 	beq.w	80091b2 <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 8009086:	2300      	movs	r3, #0
 8009088:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800908a:	2300      	movs	r3, #0
 800908c:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800908e:	2204      	movs	r2, #4
 8009090:	495d      	ldr	r1, [pc, #372]	; (8009208 <http_parse_request+0x24c>)
 8009092:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009094:	f00e f9dc 	bl	8017450 <strncmp>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d103      	bne.n	80090a6 <http_parse_request+0xea>
        sp1 = data + 3;
 800909e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a0:	3303      	adds	r3, #3
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090a4:	e014      	b.n	80090d0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 80090a6:	2205      	movs	r2, #5
 80090a8:	4958      	ldr	r1, [pc, #352]	; (800920c <http_parse_request+0x250>)
 80090aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090ac:	f00e f9d0 	bl	8017450 <strncmp>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 80090b6:	2301      	movs	r3, #1
 80090b8:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 80090ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090bc:	3304      	adds	r3, #4
 80090be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090c0:	e006      	b.n	80090d0 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 80090c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c4:	3304      	adds	r3, #4
 80090c6:	2200      	movs	r2, #0
 80090c8:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 80090ca:	f06f 030f 	mvn.w	r3, #15
 80090ce:	e08b      	b.n	80091e8 <http_parse_request+0x22c>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	1c5a      	adds	r2, r3, #1
 80090d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	b29b      	uxth	r3, r3
 80090da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80090e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e2:	3301      	adds	r3, #1
 80090e4:	8bfa      	ldrh	r2, [r7, #30]
 80090e6:	494a      	ldr	r1, [pc, #296]	; (8009210 <http_parse_request+0x254>)
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 fd07 	bl	8009afc <lwip_strnstr>
 80090ee:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d10c      	bne.n	8009110 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	3301      	adds	r3, #1
 80090fa:	8bfa      	ldrh	r2, [r7, #30]
 80090fc:	4941      	ldr	r1, [pc, #260]	; (8009204 <http_parse_request+0x248>)
 80090fe:	4618      	mov	r0, r3
 8009100:	f000 fcfc 	bl	8009afc <lwip_strnstr>
 8009104:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8009106:	2301      	movs	r3, #1
 8009108:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800910a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910c:	2b00      	cmp	r3, #0
 800910e:	d164      	bne.n	80091da <http_parse_request+0x21e>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8009110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009112:	3301      	adds	r3, #1
 8009114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911c:	2b00      	cmp	r3, #0
 800911e:	d048      	beq.n	80091b2 <http_parse_request+0x1f6>
 8009120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009124:	429a      	cmp	r2, r3
 8009126:	d944      	bls.n	80091b2 <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8009128:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800912a:	461a      	mov	r2, r3
 800912c:	4939      	ldr	r1, [pc, #228]	; (8009214 <http_parse_request+0x258>)
 800912e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009130:	f000 fce4 	bl	8009afc <lwip_strnstr>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d03b      	beq.n	80091b2 <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800913a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913c:	3301      	adds	r3, #1
 800913e:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8009140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8009146:	8bbb      	ldrh	r3, [r7, #28]
 8009148:	69ba      	ldr	r2, [r7, #24]
 800914a:	4413      	add	r3, r2
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 8009150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009152:	2b00      	cmp	r3, #0
 8009154:	d026      	beq.n	80091a4 <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800915c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	9301      	str	r3, [sp, #4]
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	9300      	str	r3, [sp, #0]
 8009166:	4613      	mov	r3, r2
 8009168:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	6978      	ldr	r0, [r7, #20]
 800916e:	f7ff fe3f 	bl	8008df0 <http_post_request>
 8009172:	4603      	mov	r3, r0
 8009174:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 8009176:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800917e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009180:	2220      	movs	r2, #32
 8009182:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	2220      	movs	r2, #32
 8009188:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800918a:	8bbb      	ldrh	r3, [r7, #28]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	4413      	add	r3, r2
 8009190:	2220      	movs	r2, #32
 8009192:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 8009194:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009198:	f113 0f10 	cmn.w	r3, #16
 800919c:	d01f      	beq.n	80091de <http_parse_request+0x222>
              goto badrequest;
            }
            return err;
 800919e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091a2:	e021      	b.n	80091e8 <http_parse_request+0x22c>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80091a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091a6:	69b9      	ldr	r1, [r7, #24]
 80091a8:	68b8      	ldr	r0, [r7, #8]
 80091aa:	f000 f887 	bl	80092bc <http_find_file>
 80091ae:	4603      	mov	r3, r0
 80091b0:	e01a      	b.n	80091e8 <http_parse_request+0x22c>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f002 f894 	bl	800b2e4 <pbuf_clen>
 80091bc:	4603      	mov	r3, r0
 80091be:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	6a1b      	ldr	r3, [r3, #32]
 80091c4:	891b      	ldrh	r3, [r3, #8]
 80091c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d809      	bhi.n	80091e2 <http_parse_request+0x226>
 80091ce:	8a3b      	ldrh	r3, [r7, #16]
 80091d0:	2b05      	cmp	r3, #5
 80091d2:	d806      	bhi.n	80091e2 <http_parse_request+0x226>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80091d4:	f06f 0304 	mvn.w	r3, #4
 80091d8:	e006      	b.n	80091e8 <http_parse_request+0x22c>
          goto badrequest;
 80091da:	bf00      	nop
 80091dc:	e002      	b.n	80091e4 <http_parse_request+0x228>
              goto badrequest;
 80091de:	bf00      	nop
 80091e0:	e000      	b.n	80091e4 <http_parse_request+0x228>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 80091e2:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80091e4:	f06f 030f 	mvn.w	r3, #15
  }
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3740      	adds	r7, #64	; 0x40
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	0801c20c 	.word	0x0801c20c
 80091f4:	0801c398 	.word	0x0801c398
 80091f8:	0801c254 	.word	0x0801c254
 80091fc:	0801c27c 	.word	0x0801c27c
 8009200:	200007fc 	.word	0x200007fc
 8009204:	0801c300 	.word	0x0801c300
 8009208:	0801c3a4 	.word	0x0801c3a4
 800920c:	0801c3ac 	.word	0x0801c3ac
 8009210:	0801c3b4 	.word	0x0801c3b4
 8009214:	0801c390 	.word	0x0801c390

08009218 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b088      	sub	sp, #32
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d040      	beq.n	80092ae <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800922c:	2300      	movs	r3, #0
 800922e:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 8009230:	213f      	movs	r1, #63	; 0x3f
 8009232:	6838      	ldr	r0, [r7, #0]
 8009234:	f00e f8f7 	bl	8017426 <strchr>
 8009238:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	613b      	str	r3, [r7, #16]
    ext = uri;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800924e:	212e      	movs	r1, #46	; 0x2e
 8009250:	6938      	ldr	r0, [r7, #16]
 8009252:	f00e f8e8 	bl	8017426 <strchr>
 8009256:	6138      	str	r0, [r7, #16]
 8009258:	e009      	b.n	800926e <http_uri_is_ssi+0x56>
      ext = sub;
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	617b      	str	r3, [r7, #20]
      sub++;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	3301      	adds	r3, #1
 8009262:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8009264:	212e      	movs	r1, #46	; 0x2e
 8009266:	6938      	ldr	r0, [r7, #16]
 8009268:	f00e f8dd 	bl	8017426 <strchr>
 800926c:	6138      	str	r0, [r7, #16]
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1f2      	bne.n	800925a <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8009274:	2300      	movs	r3, #0
 8009276:	61fb      	str	r3, [r7, #28]
 8009278:	e010      	b.n	800929c <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800927a:	4a0f      	ldr	r2, [pc, #60]	; (80092b8 <http_uri_is_ssi+0xa0>)
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009282:	4619      	mov	r1, r3
 8009284:	6978      	ldr	r0, [r7, #20]
 8009286:	f000 fc6f 	bl	8009b68 <lwip_stricmp>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d102      	bne.n	8009296 <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8009290:	2301      	movs	r3, #1
 8009292:	76fb      	strb	r3, [r7, #27]
        break;
 8009294:	e005      	b.n	80092a2 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	3301      	adds	r3, #1
 800929a:	61fb      	str	r3, [r7, #28]
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	2b04      	cmp	r3, #4
 80092a0:	d9eb      	bls.n	800927a <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d002      	beq.n	80092ae <http_uri_is_ssi+0x96>
      *param = '?';
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	223f      	movs	r2, #63	; 0x3f
 80092ac:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 80092ae:	7efb      	ldrb	r3, [r7, #27]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3720      	adds	r7, #32
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	08032210 	.word	0x08032210

080092bc <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 80092bc:	b590      	push	{r4, r7, lr}
 80092be:	b093      	sub	sp, #76	; 0x4c
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 80092cc:	2300      	movs	r3, #0
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	4618      	mov	r0, r3
 80092da:	f7f6 ff83 	bl	80001e4 <strlen>
 80092de:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d074      	beq.n	80093d0 <http_find_file+0x114>
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ea:	3b01      	subs	r3, #1
 80092ec:	4413      	add	r3, r2
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	2b2f      	cmp	r3, #47	; 0x2f
 80092f2:	d16d      	bne.n	80093d0 <http_find_file+0x114>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80092f4:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80092f6:	4a81      	ldr	r2, [pc, #516]	; (80094fc <http_find_file+0x240>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d102      	bne.n	8009302 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d166      	bne.n	80093d0 <http_find_file+0x114>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	3b01      	subs	r3, #1
 8009306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800930a:	bf28      	it	cs
 800930c:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 8009310:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00a      	beq.n	800932e <http_find_file+0x72>
      MEMCPY(http_uri_buf, uri, copy_len);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	6a3a      	ldr	r2, [r7, #32]
 800931c:	4619      	mov	r1, r3
 800931e:	4877      	ldr	r0, [pc, #476]	; (80094fc <http_find_file+0x240>)
 8009320:	f00d fab6 	bl	8016890 <memcpy>
      http_uri_buf[copy_len] = 0;
 8009324:	4a75      	ldr	r2, [pc, #468]	; (80094fc <http_find_file+0x240>)
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	4413      	add	r3, r2
 800932a:	2200      	movs	r2, #0
 800932c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800932e:	2300      	movs	r3, #0
 8009330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009332:	e04a      	b.n	80093ca <http_find_file+0x10e>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d028      	beq.n	800938c <http_find_file+0xd0>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8009340:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d01e      	beq.n	8009386 <http_find_file+0xca>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8009348:	4a6d      	ldr	r2, [pc, #436]	; (8009500 <http_find_file+0x244>)
 800934a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009350:	4618      	mov	r0, r3
 8009352:	f7f6 ff47 	bl	80001e4 <strlen>
 8009356:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	4293      	cmp	r3, r2
 800935e:	bf28      	it	cs
 8009360:	4613      	movcs	r3, r2
 8009362:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	4a65      	ldr	r2, [pc, #404]	; (80094fc <http_find_file+0x240>)
 8009368:	1898      	adds	r0, r3, r2
 800936a:	4a65      	ldr	r2, [pc, #404]	; (8009500 <http_find_file+0x244>)
 800936c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	4619      	mov	r1, r3
 8009376:	f00d fa8b 	bl	8016890 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800937a:	6a3a      	ldr	r2, [r7, #32]
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	4413      	add	r3, r2
 8009380:	4a5e      	ldr	r2, [pc, #376]	; (80094fc <http_find_file+0x240>)
 8009382:	2100      	movs	r1, #0
 8009384:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8009386:	4b5d      	ldr	r3, [pc, #372]	; (80094fc <http_find_file+0x240>)
 8009388:	62bb      	str	r3, [r7, #40]	; 0x28
 800938a:	e004      	b.n	8009396 <http_find_file+0xda>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800938c:	4a5c      	ldr	r2, [pc, #368]	; (8009500 <http_find_file+0x244>)
 800938e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009390:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009394:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800939a:	4618      	mov	r0, r3
 800939c:	f7fe fbae 	bl	8007afc <fs_open>
 80093a0:	4603      	mov	r3, r0
 80093a2:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 80093a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10b      	bne.n	80093c4 <http_find_file+0x108>
        uri = file_name;
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 80093b4:	4a52      	ldr	r2, [pc, #328]	; (8009500 <http_find_file+0x244>)
 80093b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	4413      	add	r3, r2
 80093bc:	791b      	ldrb	r3, [r3, #4]
 80093be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 80093c2:	e005      	b.n	80093d0 <http_find_file+0x114>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80093c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c6:	3301      	adds	r3, #1
 80093c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093cc:	2b04      	cmp	r3, #4
 80093ce:	d9b1      	bls.n	8009334 <http_find_file+0x78>
      }
    }
  }
  if (file == NULL) {
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d176      	bne.n	80094c4 <http_find_file+0x208>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	213f      	movs	r1, #63	; 0x3f
 80093da:	4618      	mov	r0, r3
 80093dc:	f00e f823 	bl	8017426 <strchr>
 80093e0:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 80093e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <http_find_file+0x138>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 80093e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ea:	2200      	movs	r2, #0
 80093ec:	701a      	strb	r2, [r3, #0]
      params++;
 80093ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f0:	3301      	adds	r3, #1
 80093f2:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 80093f4:	4b43      	ldr	r3, [pc, #268]	; (8009504 <http_find_file+0x248>)
 80093f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093fa:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 80093fc:	4b42      	ldr	r3, [pc, #264]	; (8009508 <http_find_file+0x24c>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d034      	beq.n	800946e <http_find_file+0x1b2>
 8009404:	4b41      	ldr	r3, [pc, #260]	; (800950c <http_find_file+0x250>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d030      	beq.n	800946e <http_find_file+0x1b2>
      for (i = 0; i < httpd_num_cgis; i++) {
 800940c:	2300      	movs	r3, #0
 800940e:	633b      	str	r3, [r7, #48]	; 0x30
 8009410:	e028      	b.n	8009464 <http_find_file+0x1a8>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8009412:	68b8      	ldr	r0, [r7, #8]
 8009414:	4b3d      	ldr	r3, [pc, #244]	; (800950c <http_find_file+0x250>)
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	4413      	add	r3, r2
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4619      	mov	r1, r3
 8009422:	f7f6 fed5 	bl	80001d0 <strcmp>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d118      	bne.n	800945e <http_find_file+0x1a2>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800942c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f7fe fd1a 	bl	8007e68 <extract_uri_parameters>
 8009434:	4603      	mov	r3, r0
 8009436:	4a33      	ldr	r2, [pc, #204]	; (8009504 <http_find_file+0x248>)
 8009438:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800943a:	4b34      	ldr	r3, [pc, #208]	; (800950c <http_find_file+0x250>)
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	4413      	add	r3, r2
 8009444:	685c      	ldr	r4, [r3, #4]
 8009446:	4b2f      	ldr	r3, [pc, #188]	; (8009504 <http_find_file+0x248>)
 8009448:	6819      	ldr	r1, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8009454:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009456:	47a0      	blx	r4
 8009458:	4603      	mov	r3, r0
 800945a:	60bb      	str	r3, [r7, #8]
          break;
 800945c:	e007      	b.n	800946e <http_find_file+0x1b2>
      for (i = 0; i < httpd_num_cgis; i++) {
 800945e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009460:	3301      	adds	r3, #1
 8009462:	633b      	str	r3, [r7, #48]	; 0x30
 8009464:	4b28      	ldr	r3, [pc, #160]	; (8009508 <http_find_file+0x24c>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800946a:	429a      	cmp	r2, r3
 800946c:	dbd1      	blt.n	8009412 <http_find_file+0x156>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f7fe fb41 	bl	8007afc <fs_open>
 800947a:	4603      	mov	r3, r0
 800947c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800947e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d102      	bne.n	800948c <http_find_file+0x1d0>
      file = &hs->file_handle;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	63bb      	str	r3, [r7, #56]	; 0x38
 800948a:	e006      	b.n	800949a <http_find_file+0x1de>
    } else {
      file = http_get_404_file(hs, &uri);
 800948c:	f107 0308 	add.w	r3, r7, #8
 8009490:	4619      	mov	r1, r3
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f7ff fc0c 	bl	8008cb0 <http_get_404_file>
 8009498:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	2b00      	cmp	r3, #0
 800949e:	d011      	beq.n	80094c4 <http_find_file+0x208>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 80094a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a2:	7c1b      	ldrb	r3, [r3, #16]
 80094a4:	f003 0308 	and.w	r3, r3, #8
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d003      	beq.n	80094b4 <http_find_file+0x1f8>
        tag_check = 1;
 80094ac:	2301      	movs	r3, #1
 80094ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80094b2:	e007      	b.n	80094c4 <http_find_file+0x208>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4619      	mov	r1, r3
 80094b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094ba:	f7ff fead 	bl	8009218 <http_uri_is_ssi>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d106      	bne.n	80094d8 <http_find_file+0x21c>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80094ca:	f107 0308 	add.w	r3, r7, #8
 80094ce:	4619      	mov	r1, r3
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f7ff fbed 	bl	8008cb0 <http_get_404_file>
 80094d6:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	4613      	mov	r3, r2
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 f810 	bl	8009510 <http_init_file>
 80094f0:	4603      	mov	r3, r0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3744      	adds	r7, #68	; 0x44
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd90      	pop	{r4, r7, pc}
 80094fa:	bf00      	nop
 80094fc:	20000ddc 	.word	0x20000ddc
 8009500:	08032224 	.word	0x08032224
 8009504:	200011dc 	.word	0x200011dc
 8009508:	200011d8 	.word	0x200011d8
 800950c:	200011d4 	.word	0x200011d4

08009510 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
 800951c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d06f      	beq.n	8009604 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d106      	bne.n	800953a <http_init_file+0x2a>
 800952c:	4b46      	ldr	r3, [pc, #280]	; (8009648 <http_init_file+0x138>)
 800952e:	f640 120b 	movw	r2, #2315	; 0x90b
 8009532:	4946      	ldr	r1, [pc, #280]	; (800964c <http_init_file+0x13c>)
 8009534:	4846      	ldr	r0, [pc, #280]	; (8009650 <http_init_file+0x140>)
 8009536:	f00d fe45 	bl	80171c4 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800953a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800953e:	2b00      	cmp	r3, #0
 8009540:	d01c      	beq.n	800957c <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 8009542:	f7fe fb32 	bl	8007baa <http_ssi_state_alloc>
 8009546:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d016      	beq.n	800957c <http_init_file+0x6c>
        ssi->tag_index = 0;
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	2200      	movs	r2, #0
 8009552:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2342 	strb.w	r2, [r3, #834]	; 0x342
        ssi->parsed = file->data;
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	461a      	mov	r2, r3
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	69fa      	ldr	r2, [r7, #28]
 800957a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	2b00      	cmp	r3, #0
 8009590:	da06      	bge.n	80095a0 <http_init_file+0x90>
 8009592:	4b2d      	ldr	r3, [pc, #180]	; (8009648 <http_init_file+0x138>)
 8009594:	f640 1234 	movw	r2, #2356	; 0x934
 8009598:	492e      	ldr	r1, [pc, #184]	; (8009654 <http_init_file+0x144>)
 800959a:	482d      	ldr	r0, [pc, #180]	; (8009650 <http_init_file+0x140>)
 800959c:	f00d fe12 	bl	80171c4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	461a      	mov	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d032      	beq.n	800961e <http_init_file+0x10e>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	695b      	ldr	r3, [r3, #20]
 80095bc:	7c1b      	ldrb	r3, [r3, #16]
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d02b      	beq.n	800961e <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6998      	ldr	r0, [r3, #24]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	461a      	mov	r2, r3
 80095d0:	4921      	ldr	r1, [pc, #132]	; (8009658 <http_init_file+0x148>)
 80095d2:	f000 fa93 	bl	8009afc <lwip_strnstr>
 80095d6:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d01f      	beq.n	800961e <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	1d1a      	adds	r2, r3, #4
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	441a      	add	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	1ad2      	subs	r2, r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	625a      	str	r2, [r3, #36]	; 0x24
 8009602:	e00c      	b.n	800961e <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d006      	beq.n	8009634 <http_init_file+0x124>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	7c1b      	ldrb	r3, [r3, #16]
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	2b00      	cmp	r3, #0
 8009632:	d103      	bne.n	800963c <http_init_file+0x12c>
    get_http_headers(hs, uri);
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f7fe fd46 	bl	80080c8 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3720      	adds	r7, #32
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	0801c20c 	.word	0x0801c20c
 800964c:	0801c3b8 	.word	0x0801c3b8
 8009650:	0801c254 	.word	0x0801c254
 8009654:	0801c3cc 	.word	0x0801c3cc
 8009658:	0801c390 	.word	0x0801c390

0800965c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d002      	beq.n	8009678 <http_err+0x1c>
    http_state_free(hs);
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f7fe fb0c 	bl	8007c90 <http_state_free>
  }
}
 8009678:	bf00      	nop
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	4613      	mov	r3, r2
 800968c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <http_sent+0x1c>
    return ERR_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	e008      	b.n	80096ae <http_sent+0x2e>
  }

  hs->retries = 0;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 80096a4:	6979      	ldr	r1, [r7, #20]
 80096a6:	68b8      	ldr	r0, [r7, #8]
 80096a8:	f7ff faa8 	bl	8008bfc <http_send>

  return ERR_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3718      	adds	r7, #24
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d107      	bne.n	80096da <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80096ca:	2100      	movs	r1, #0
 80096cc:	6838      	ldr	r0, [r7, #0]
 80096ce:	f7fe fbaf 	bl	8007e30 <http_close_conn>
 80096d2:	4603      	mov	r3, r0
 80096d4:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	e021      	b.n	800971e <http_poll+0x68>
  } else {
    hs->retries++;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096e0:	3301      	adds	r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f0:	2b04      	cmp	r3, #4
 80096f2:	d105      	bne.n	8009700 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80096f4:	68f9      	ldr	r1, [r7, #12]
 80096f6:	6838      	ldr	r0, [r7, #0]
 80096f8:	f7fe fb9a 	bl	8007e30 <http_close_conn>
      return ERR_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	e00e      	b.n	800971e <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	695b      	ldr	r3, [r3, #20]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d009      	beq.n	800971c <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8009708:	68f9      	ldr	r1, [r7, #12]
 800970a:	6838      	ldr	r0, [r7, #0]
 800970c:	f7ff fa76 	bl	8008bfc <http_send>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d002      	beq.n	800971c <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8009716:	6838      	ldr	r0, [r7, #0]
 8009718:	f007 f9a2 	bl	8010a60 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
	...

08009728 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b086      	sub	sp, #24
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
 8009734:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800973a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d105      	bne.n	800974e <http_recv+0x26>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <http_recv+0x26>
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d111      	bne.n	8009772 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d008      	beq.n	8009766 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	891b      	ldrh	r3, [r3, #8]
 8009758:	4619      	mov	r1, r3
 800975a:	68b8      	ldr	r0, [r7, #8]
 800975c:	f002 fcb0 	bl	800c0c0 <tcp_recved>
      pbuf_free(p);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f001 fd37 	bl	800b1d4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8009766:	6979      	ldr	r1, [r7, #20]
 8009768:	68b8      	ldr	r0, [r7, #8]
 800976a:	f7fe fb61 	bl	8007e30 <http_close_conn>
    return ERR_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	e072      	b.n	8009858 <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	891b      	ldrh	r3, [r3, #8]
 8009776:	4619      	mov	r1, r3
 8009778:	68b8      	ldr	r0, [r7, #8]
 800977a:	f002 fca1 	bl	800c0c0 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009784:	2b00      	cmp	r3, #0
 8009786:	d012      	beq.n	80097ae <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	6978      	ldr	r0, [r7, #20]
 8009794:	f7ff faec 	bl	8008d70 <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d103      	bne.n	80097aa <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 80097a2:	6979      	ldr	r1, [r7, #20]
 80097a4:	68b8      	ldr	r0, [r7, #8]
 80097a6:	f7ff fa29 	bl	8008bfc <http_send>
    }
    return ERR_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	e054      	b.n	8009858 <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d14c      	bne.n	8009850 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	6979      	ldr	r1, [r7, #20]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7ff fbfe 	bl	8008fbc <http_parse_request>
 80097c0:	4603      	mov	r3, r0
 80097c2:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80097c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d015      	beq.n	80097f8 <http_recv+0xd0>
 80097cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097d0:	f113 0f05 	cmn.w	r3, #5
 80097d4:	d010      	beq.n	80097f8 <http_recv+0xd0>
 80097d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097da:	f113 0f10 	cmn.w	r3, #16
 80097de:	d00b      	beq.n	80097f8 <http_recv+0xd0>
 80097e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097e4:	f113 0f08 	cmn.w	r3, #8
 80097e8:	d006      	beq.n	80097f8 <http_recv+0xd0>
 80097ea:	4b1d      	ldr	r3, [pc, #116]	; (8009860 <http_recv+0x138>)
 80097ec:	f640 2204 	movw	r2, #2564	; 0xa04
 80097f0:	491c      	ldr	r1, [pc, #112]	; (8009864 <http_recv+0x13c>)
 80097f2:	481d      	ldr	r0, [pc, #116]	; (8009868 <http_recv+0x140>)
 80097f4:	f00d fce6 	bl	80171c4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80097f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097fc:	f113 0f05 	cmn.w	r3, #5
 8009800:	d00b      	beq.n	800981a <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d007      	beq.n	800981a <http_recv+0xf2>
          pbuf_free(hs->req);
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	4618      	mov	r0, r3
 8009810:	f001 fce0 	bl	800b1d4 <pbuf_free>
          hs->req = NULL;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2200      	movs	r2, #0
 8009818:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 fcda 	bl	800b1d4 <pbuf_free>
      if (parsed == ERR_OK) {
 8009820:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d109      	bne.n	800983c <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800982e:	2b00      	cmp	r3, #0
 8009830:	d111      	bne.n	8009856 <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8009832:	6979      	ldr	r1, [r7, #20]
 8009834:	68b8      	ldr	r0, [r7, #8]
 8009836:	f7ff f9e1 	bl	8008bfc <http_send>
 800983a:	e00c      	b.n	8009856 <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800983c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009840:	f113 0f10 	cmn.w	r3, #16
 8009844:	d107      	bne.n	8009856 <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8009846:	6979      	ldr	r1, [r7, #20]
 8009848:	68b8      	ldr	r0, [r7, #8]
 800984a:	f7fe faf1 	bl	8007e30 <http_close_conn>
 800984e:	e002      	b.n	8009856 <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f001 fcbf 	bl	800b1d4 <pbuf_free>
    }
  }
  return ERR_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	0801c20c 	.word	0x0801c20c
 8009864:	0801c3ec 	.word	0x0801c3ec
 8009868:	0801c254 	.word	0x0801c254

0800986c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	4613      	mov	r3, r2
 8009878:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800987a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d102      	bne.n	8009888 <http_accept+0x1c>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d102      	bne.n	800988e <http_accept+0x22>
    return ERR_VAL;
 8009888:	f06f 0305 	mvn.w	r3, #5
 800988c:	e025      	b.n	80098da <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800988e:	2101      	movs	r1, #1
 8009890:	68b8      	ldr	r0, [r7, #8]
 8009892:	f003 f8fb 	bl	800ca8c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8009896:	f7fe f9bd 	bl	8007c14 <http_state_alloc>
 800989a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d102      	bne.n	80098a8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80098a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098a6:	e018      	b.n	80098da <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	68ba      	ldr	r2, [r7, #8]
 80098ac:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80098ae:	6979      	ldr	r1, [r7, #20]
 80098b0:	68b8      	ldr	r0, [r7, #8]
 80098b2:	f003 faeb 	bl	800ce8c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80098b6:	490b      	ldr	r1, [pc, #44]	; (80098e4 <http_accept+0x78>)
 80098b8:	68b8      	ldr	r0, [r7, #8]
 80098ba:	f003 faf9 	bl	800ceb0 <tcp_recv>
  altcp_err(pcb, http_err);
 80098be:	490a      	ldr	r1, [pc, #40]	; (80098e8 <http_accept+0x7c>)
 80098c0:	68b8      	ldr	r0, [r7, #8]
 80098c2:	f003 fb39 	bl	800cf38 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80098c6:	2204      	movs	r2, #4
 80098c8:	4908      	ldr	r1, [pc, #32]	; (80098ec <http_accept+0x80>)
 80098ca:	68b8      	ldr	r0, [r7, #8]
 80098cc:	f003 fb6e 	bl	800cfac <tcp_poll>
  altcp_sent(pcb, http_sent);
 80098d0:	4907      	ldr	r1, [pc, #28]	; (80098f0 <http_accept+0x84>)
 80098d2:	68b8      	ldr	r0, [r7, #8]
 80098d4:	f003 fb0e 	bl	800cef4 <tcp_sent>

  return ERR_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	08009729 	.word	0x08009729
 80098e8:	0800965d 	.word	0x0800965d
 80098ec:	080096b7 	.word	0x080096b7
 80098f0:	08009681 	.word	0x08009681

080098f4 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d029      	beq.n	800995a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009906:	2101      	movs	r1, #1
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f003 f8bf 	bl	800ca8c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800990e:	887b      	ldrh	r3, [r7, #2]
 8009910:	461a      	mov	r2, r3
 8009912:	4914      	ldr	r1, [pc, #80]	; (8009964 <httpd_init_pcb+0x70>)
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f002 fa05 	bl	800bd24 <tcp_bind>
 800991a:	4603      	mov	r3, r0
 800991c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800991e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d006      	beq.n	8009934 <httpd_init_pcb+0x40>
 8009926:	4b10      	ldr	r3, [pc, #64]	; (8009968 <httpd_init_pcb+0x74>)
 8009928:	f640 2257 	movw	r2, #2647	; 0xa57
 800992c:	490f      	ldr	r1, [pc, #60]	; (800996c <httpd_init_pcb+0x78>)
 800992e:	4810      	ldr	r0, [pc, #64]	; (8009970 <httpd_init_pcb+0x7c>)
 8009930:	f00d fc48 	bl	80171c4 <iprintf>
    pcb = altcp_listen(pcb);
 8009934:	21ff      	movs	r1, #255	; 0xff
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f002 faac 	bl	800be94 <tcp_listen_with_backlog>
 800993c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d106      	bne.n	8009952 <httpd_init_pcb+0x5e>
 8009944:	4b08      	ldr	r3, [pc, #32]	; (8009968 <httpd_init_pcb+0x74>)
 8009946:	f640 2259 	movw	r2, #2649	; 0xa59
 800994a:	490a      	ldr	r1, [pc, #40]	; (8009974 <httpd_init_pcb+0x80>)
 800994c:	4808      	ldr	r0, [pc, #32]	; (8009970 <httpd_init_pcb+0x7c>)
 800994e:	f00d fc39 	bl	80171c4 <iprintf>
    altcp_accept(pcb, http_accept);
 8009952:	4909      	ldr	r1, [pc, #36]	; (8009978 <httpd_init_pcb+0x84>)
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f003 fb11 	bl	800cf7c <tcp_accept>
  }
}
 800995a:	bf00      	nop
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	0803233c 	.word	0x0803233c
 8009968:	0801c20c 	.word	0x0801c20c
 800996c:	0801c418 	.word	0x0801c418
 8009970:	0801c254 	.word	0x0801c254
 8009974:	0801c434 	.word	0x0801c434
 8009978:	0800986d 	.word	0x0800986d

0800997c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8009982:	202e      	movs	r0, #46	; 0x2e
 8009984:	f003 fa74 	bl	800ce70 <tcp_new_ip_type>
 8009988:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d106      	bne.n	800999e <httpd_init+0x22>
 8009990:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <httpd_init+0x34>)
 8009992:	f640 2272 	movw	r2, #2674	; 0xa72
 8009996:	4907      	ldr	r1, [pc, #28]	; (80099b4 <httpd_init+0x38>)
 8009998:	4807      	ldr	r0, [pc, #28]	; (80099b8 <httpd_init+0x3c>)
 800999a:	f00d fc13 	bl	80171c4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800999e:	2150      	movs	r1, #80	; 0x50
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f7ff ffa7 	bl	80098f4 <httpd_init_pcb>
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	0801c20c 	.word	0x0801c20c
 80099b4:	0801c454 	.word	0x0801c454
 80099b8:	0801c254 	.word	0x0801c254

080099bc <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d106      	bne.n	80099dc <http_set_ssi_handler+0x20>
 80099ce:	4b14      	ldr	r3, [pc, #80]	; (8009a20 <http_set_ssi_handler+0x64>)
 80099d0:	f640 2297 	movw	r2, #2711	; 0xa97
 80099d4:	4913      	ldr	r1, [pc, #76]	; (8009a24 <http_set_ssi_handler+0x68>)
 80099d6:	4814      	ldr	r0, [pc, #80]	; (8009a28 <http_set_ssi_handler+0x6c>)
 80099d8:	f00d fbf4 	bl	80171c4 <iprintf>
  httpd_ssi_handler = ssi_handler;
 80099dc:	4a13      	ldr	r2, [pc, #76]	; (8009a2c <http_set_ssi_handler+0x70>)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d106      	bne.n	80099f6 <http_set_ssi_handler+0x3a>
 80099e8:	4b0d      	ldr	r3, [pc, #52]	; (8009a20 <http_set_ssi_handler+0x64>)
 80099ea:	f640 229e 	movw	r2, #2718	; 0xa9e
 80099ee:	4910      	ldr	r1, [pc, #64]	; (8009a30 <http_set_ssi_handler+0x74>)
 80099f0:	480d      	ldr	r0, [pc, #52]	; (8009a28 <http_set_ssi_handler+0x6c>)
 80099f2:	f00d fbe7 	bl	80171c4 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	dc06      	bgt.n	8009a0a <http_set_ssi_handler+0x4e>
 80099fc:	4b08      	ldr	r3, [pc, #32]	; (8009a20 <http_set_ssi_handler+0x64>)
 80099fe:	f640 229f 	movw	r2, #2719	; 0xa9f
 8009a02:	490c      	ldr	r1, [pc, #48]	; (8009a34 <http_set_ssi_handler+0x78>)
 8009a04:	4808      	ldr	r0, [pc, #32]	; (8009a28 <http_set_ssi_handler+0x6c>)
 8009a06:	f00d fbdd 	bl	80171c4 <iprintf>

  httpd_tags = tags;
 8009a0a:	4a0b      	ldr	r2, [pc, #44]	; (8009a38 <http_set_ssi_handler+0x7c>)
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8009a10:	4a0a      	ldr	r2, [pc, #40]	; (8009a3c <http_set_ssi_handler+0x80>)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8009a16:	bf00      	nop
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	0801c20c 	.word	0x0801c20c
 8009a24:	0801c470 	.word	0x0801c470
 8009a28:	0801c254 	.word	0x0801c254
 8009a2c:	200011c8 	.word	0x200011c8
 8009a30:	0801c488 	.word	0x0801c488
 8009a34:	0801c498 	.word	0x0801c498
 8009a38:	200011d0 	.word	0x200011d0
 8009a3c:	200011cc 	.word	0x200011cc

08009a40 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d106      	bne.n	8009a5e <http_set_cgi_handlers+0x1e>
 8009a50:	4b0d      	ldr	r3, [pc, #52]	; (8009a88 <http_set_cgi_handlers+0x48>)
 8009a52:	f640 22b2 	movw	r2, #2738	; 0xab2
 8009a56:	490d      	ldr	r1, [pc, #52]	; (8009a8c <http_set_cgi_handlers+0x4c>)
 8009a58:	480d      	ldr	r0, [pc, #52]	; (8009a90 <http_set_cgi_handlers+0x50>)
 8009a5a:	f00d fbb3 	bl	80171c4 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	dc06      	bgt.n	8009a72 <http_set_cgi_handlers+0x32>
 8009a64:	4b08      	ldr	r3, [pc, #32]	; (8009a88 <http_set_cgi_handlers+0x48>)
 8009a66:	f640 22b3 	movw	r2, #2739	; 0xab3
 8009a6a:	490a      	ldr	r1, [pc, #40]	; (8009a94 <http_set_cgi_handlers+0x54>)
 8009a6c:	4808      	ldr	r0, [pc, #32]	; (8009a90 <http_set_cgi_handlers+0x50>)
 8009a6e:	f00d fba9 	bl	80171c4 <iprintf>

  httpd_cgis = cgis;
 8009a72:	4a09      	ldr	r2, [pc, #36]	; (8009a98 <http_set_cgi_handlers+0x58>)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8009a78:	4a08      	ldr	r2, [pc, #32]	; (8009a9c <http_set_cgi_handlers+0x5c>)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	6013      	str	r3, [r2, #0]
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	0801c20c 	.word	0x0801c20c
 8009a8c:	0801c4b0 	.word	0x0801c4b0
 8009a90:	0801c254 	.word	0x0801c254
 8009a94:	0801c4c0 	.word	0x0801c4c0
 8009a98:	200011d4 	.word	0x200011d4
 8009a9c:	200011d8 	.word	0x200011d8

08009aa0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009aaa:	88fb      	ldrh	r3, [r7, #6]
 8009aac:	021b      	lsls	r3, r3, #8
 8009aae:	b21a      	sxth	r2, r3
 8009ab0:	88fb      	ldrh	r3, [r7, #6]
 8009ab2:	0a1b      	lsrs	r3, r3, #8
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	b21b      	sxth	r3, r3
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	b21b      	sxth	r3, r3
 8009abc:	b29b      	uxth	r3, r3
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr

08009aca <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	061a      	lsls	r2, r3, #24
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ade:	431a      	orrs	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	0a1b      	lsrs	r3, r3, #8
 8009ae4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	0e1b      	lsrs	r3, r3, #24
 8009aee:	4313      	orrs	r3, r2
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8009b08:	68b8      	ldr	r0, [r7, #8]
 8009b0a:	f7f6 fb6b 	bl	80001e4 <strlen>
 8009b0e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d101      	bne.n	8009b1a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	e022      	b.n	8009b60 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	e012      	b.n	8009b46 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	781a      	ldrb	r2, [r3, #0]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d109      	bne.n	8009b40 <lwip_strnstr+0x44>
 8009b2c:	693a      	ldr	r2, [r7, #16]
 8009b2e:	68b9      	ldr	r1, [r7, #8]
 8009b30:	6978      	ldr	r0, [r7, #20]
 8009b32:	f00d fc8d 	bl	8017450 <strncmp>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	e00f      	b.n	8009b60 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	3301      	adds	r3, #1
 8009b44:	617b      	str	r3, [r7, #20]
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d007      	beq.n	8009b5e <lwip_strnstr+0x62>
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	441a      	add	r2, r3
 8009b54:	68f9      	ldr	r1, [r7, #12]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	440b      	add	r3, r1
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d9e0      	bls.n	8009b20 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	603a      	str	r2, [r7, #0]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8009b86:	7bfa      	ldrb	r2, [r7, #15]
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d016      	beq.n	8009bbc <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	f043 0320 	orr.w	r3, r3, #32
 8009b94:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8009b96:	7b7b      	ldrb	r3, [r7, #13]
 8009b98:	2b60      	cmp	r3, #96	; 0x60
 8009b9a:	d90c      	bls.n	8009bb6 <lwip_stricmp+0x4e>
 8009b9c:	7b7b      	ldrb	r3, [r7, #13]
 8009b9e:	2b7a      	cmp	r3, #122	; 0x7a
 8009ba0:	d809      	bhi.n	8009bb6 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
 8009ba4:	f043 0320 	orr.w	r3, r3, #32
 8009ba8:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8009baa:	7b7a      	ldrb	r2, [r7, #13]
 8009bac:	7b3b      	ldrb	r3, [r7, #12]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d003      	beq.n	8009bba <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e006      	b.n	8009bc4 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e004      	b.n	8009bc4 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8009bba:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1d7      	bne.n	8009b72 <lwip_stricmp+0xa>
  return 0;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3714      	adds	r7, #20
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b088      	sub	sp, #32
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  char *res = result;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	4413      	add	r3, r2
 8009be8:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	bfb8      	it	lt
 8009bf0:	425b      	neglt	r3, r3
 8009bf2:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d806      	bhi.n	8009c08 <lwip_itoa+0x38>
    if (bufsize == 1) {
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d154      	bne.n	8009caa <lwip_itoa+0xda>
      *result = 0;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	701a      	strb	r2, [r3, #0]
    }
    return;
 8009c06:	e050      	b.n	8009caa <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	da04      	bge.n	8009c18 <lwip_itoa+0x48>
    *res++ = '-';
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	1c5a      	adds	r2, r3, #1
 8009c12:	61fa      	str	r2, [r7, #28]
 8009c14:	222d      	movs	r2, #45	; 0x2d
 8009c16:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 8009c1e:	e01c      	b.n	8009c5a <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	4b24      	ldr	r3, [pc, #144]	; (8009cb4 <lwip_itoa+0xe4>)
 8009c24:	fb83 1302 	smull	r1, r3, r3, r2
 8009c28:	1099      	asrs	r1, r3, #2
 8009c2a:	17d3      	asrs	r3, r2, #31
 8009c2c:	1ac9      	subs	r1, r1, r3
 8009c2e:	460b      	mov	r3, r1
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	440b      	add	r3, r1
 8009c34:	005b      	lsls	r3, r3, #1
 8009c36:	1ad1      	subs	r1, r2, r3
 8009c38:	b2cb      	uxtb	r3, r1
 8009c3a:	3330      	adds	r3, #48	; 0x30
 8009c3c:	74fb      	strb	r3, [r7, #19]
    tmp--;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	7cfa      	ldrb	r2, [r7, #19]
 8009c48:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	4a19      	ldr	r2, [pc, #100]	; (8009cb4 <lwip_itoa+0xe4>)
 8009c4e:	fb82 1203 	smull	r1, r2, r2, r3
 8009c52:	1092      	asrs	r2, r2, #2
 8009c54:	17db      	asrs	r3, r3, #31
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d003      	beq.n	8009c68 <lwip_itoa+0x98>
 8009c60:	69ba      	ldr	r2, [r7, #24]
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d8db      	bhi.n	8009c20 <lwip_itoa+0x50>
  }
  if (n) {
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	701a      	strb	r2, [r3, #0]
    return;
 8009c74:	e01a      	b.n	8009cac <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d10a      	bne.n	8009c94 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	61fa      	str	r2, [r7, #28]
 8009c84:	2230      	movs	r2, #48	; 0x30
 8009c86:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	61fa      	str	r2, [r7, #28]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	701a      	strb	r2, [r3, #0]
    return;
 8009c92:	e00b      	b.n	8009cac <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 8009c94:	68fa      	ldr	r2, [r7, #12]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	441a      	add	r2, r3
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	69b9      	ldr	r1, [r7, #24]
 8009ca2:	69f8      	ldr	r0, [r7, #28]
 8009ca4:	f00c fe02 	bl	80168ac <memmove>
 8009ca8:	e000      	b.n	8009cac <lwip_itoa+0xdc>
    return;
 8009caa:	bf00      	nop
}
 8009cac:	3720      	adds	r7, #32
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	66666667 	.word	0x66666667

08009cb8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009cc2:	f000 f8d5 	bl	8009e70 <mem_init>
  memp_init();
 8009cc6:	f000 fbdb 	bl	800a480 <memp_init>
  pbuf_init();
  netif_init();
 8009cca:	f000 fc93 	bl	800a5f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009cce:	f007 ff8d 	bl	8011bec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009cd2:	f001 fd1d 	bl	800b710 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009cd6:	f007 feff 	bl	8011ad8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009cee:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <ptr_to_mem+0x20>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	88fb      	ldrh	r3, [r7, #6]
 8009cf4:	4413      	add	r3, r2
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	370c      	adds	r7, #12
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	200011e0 	.word	0x200011e0

08009d08 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009d10:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <mem_to_ptr+0x20>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	b29b      	uxth	r3, r3
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr
 8009d26:	bf00      	nop
 8009d28:	200011e0 	.word	0x200011e0

08009d2c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009d2c:	b590      	push	{r4, r7, lr}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009d34:	4b45      	ldr	r3, [pc, #276]	; (8009e4c <plug_holes+0x120>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d206      	bcs.n	8009d4c <plug_holes+0x20>
 8009d3e:	4b44      	ldr	r3, [pc, #272]	; (8009e50 <plug_holes+0x124>)
 8009d40:	f240 12df 	movw	r2, #479	; 0x1df
 8009d44:	4943      	ldr	r1, [pc, #268]	; (8009e54 <plug_holes+0x128>)
 8009d46:	4844      	ldr	r0, [pc, #272]	; (8009e58 <plug_holes+0x12c>)
 8009d48:	f00d fa3c 	bl	80171c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009d4c:	4b43      	ldr	r3, [pc, #268]	; (8009e5c <plug_holes+0x130>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d306      	bcc.n	8009d64 <plug_holes+0x38>
 8009d56:	4b3e      	ldr	r3, [pc, #248]	; (8009e50 <plug_holes+0x124>)
 8009d58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009d5c:	4940      	ldr	r1, [pc, #256]	; (8009e60 <plug_holes+0x134>)
 8009d5e:	483e      	ldr	r0, [pc, #248]	; (8009e58 <plug_holes+0x12c>)
 8009d60:	f00d fa30 	bl	80171c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	791b      	ldrb	r3, [r3, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d006      	beq.n	8009d7a <plug_holes+0x4e>
 8009d6c:	4b38      	ldr	r3, [pc, #224]	; (8009e50 <plug_holes+0x124>)
 8009d6e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009d72:	493c      	ldr	r1, [pc, #240]	; (8009e64 <plug_holes+0x138>)
 8009d74:	4838      	ldr	r0, [pc, #224]	; (8009e58 <plug_holes+0x12c>)
 8009d76:	f00d fa25 	bl	80171c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009d82:	d906      	bls.n	8009d92 <plug_holes+0x66>
 8009d84:	4b32      	ldr	r3, [pc, #200]	; (8009e50 <plug_holes+0x124>)
 8009d86:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009d8a:	4937      	ldr	r1, [pc, #220]	; (8009e68 <plug_holes+0x13c>)
 8009d8c:	4832      	ldr	r0, [pc, #200]	; (8009e58 <plug_holes+0x12c>)
 8009d8e:	f00d fa19 	bl	80171c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	881b      	ldrh	r3, [r3, #0]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff ffa4 	bl	8009ce4 <ptr_to_mem>
 8009d9c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d024      	beq.n	8009df0 <plug_holes+0xc4>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	791b      	ldrb	r3, [r3, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d120      	bne.n	8009df0 <plug_holes+0xc4>
 8009dae:	4b2b      	ldr	r3, [pc, #172]	; (8009e5c <plug_holes+0x130>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d01b      	beq.n	8009df0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009db8:	4b2c      	ldr	r3, [pc, #176]	; (8009e6c <plug_holes+0x140>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d102      	bne.n	8009dc8 <plug_holes+0x9c>
      lfree = mem;
 8009dc2:	4a2a      	ldr	r2, [pc, #168]	; (8009e6c <plug_holes+0x140>)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	881a      	ldrh	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009dd8:	d00a      	beq.n	8009df0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7ff ff80 	bl	8009ce4 <ptr_to_mem>
 8009de4:	4604      	mov	r4, r0
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7ff ff8e 	bl	8009d08 <mem_to_ptr>
 8009dec:	4603      	mov	r3, r0
 8009dee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	885b      	ldrh	r3, [r3, #2]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7ff ff75 	bl	8009ce4 <ptr_to_mem>
 8009dfa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009dfc:	68ba      	ldr	r2, [r7, #8]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d01f      	beq.n	8009e44 <plug_holes+0x118>
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	791b      	ldrb	r3, [r3, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d11b      	bne.n	8009e44 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009e0c:	4b17      	ldr	r3, [pc, #92]	; (8009e6c <plug_holes+0x140>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d102      	bne.n	8009e1c <plug_holes+0xf0>
      lfree = pmem;
 8009e16:	4a15      	ldr	r2, [pc, #84]	; (8009e6c <plug_holes+0x140>)
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	881a      	ldrh	r2, [r3, #0]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	881b      	ldrh	r3, [r3, #0]
 8009e28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e2c:	d00a      	beq.n	8009e44 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7ff ff56 	bl	8009ce4 <ptr_to_mem>
 8009e38:	4604      	mov	r4, r0
 8009e3a:	68b8      	ldr	r0, [r7, #8]
 8009e3c:	f7ff ff64 	bl	8009d08 <mem_to_ptr>
 8009e40:	4603      	mov	r3, r0
 8009e42:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009e44:	bf00      	nop
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd90      	pop	{r4, r7, pc}
 8009e4c:	200011e0 	.word	0x200011e0
 8009e50:	0801c4dc 	.word	0x0801c4dc
 8009e54:	0801c50c 	.word	0x0801c50c
 8009e58:	0801c524 	.word	0x0801c524
 8009e5c:	200011e4 	.word	0x200011e4
 8009e60:	0801c54c 	.word	0x0801c54c
 8009e64:	0801c568 	.word	0x0801c568
 8009e68:	0801c584 	.word	0x0801c584
 8009e6c:	200011e8 	.word	0x200011e8

08009e70 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009e76:	4b18      	ldr	r3, [pc, #96]	; (8009ed8 <mem_init+0x68>)
 8009e78:	3303      	adds	r3, #3
 8009e7a:	f023 0303 	bic.w	r3, r3, #3
 8009e7e:	461a      	mov	r2, r3
 8009e80:	4b16      	ldr	r3, [pc, #88]	; (8009edc <mem_init+0x6c>)
 8009e82:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009e84:	4b15      	ldr	r3, [pc, #84]	; (8009edc <mem_init+0x6c>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009e90:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009e9e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009ea2:	f7ff ff1f 	bl	8009ce4 <ptr_to_mem>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	4a0d      	ldr	r2, [pc, #52]	; (8009ee0 <mem_init+0x70>)
 8009eaa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009eac:	4b0c      	ldr	r3, [pc, #48]	; (8009ee0 <mem_init+0x70>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009eb4:	4b0a      	ldr	r3, [pc, #40]	; (8009ee0 <mem_init+0x70>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009ebc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009ebe:	4b08      	ldr	r3, [pc, #32]	; (8009ee0 <mem_init+0x70>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009ec6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009ec8:	4b04      	ldr	r3, [pc, #16]	; (8009edc <mem_init+0x6c>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a05      	ldr	r2, [pc, #20]	; (8009ee4 <mem_init+0x74>)
 8009ece:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20009d20 	.word	0x20009d20
 8009edc:	200011e0 	.word	0x200011e0
 8009ee0:	200011e4 	.word	0x200011e4
 8009ee4:	200011e8 	.word	0x200011e8

08009ee8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff ff09 	bl	8009d08 <mem_to_ptr>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	881b      	ldrh	r3, [r3, #0]
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7ff fef0 	bl	8009ce4 <ptr_to_mem>
 8009f04:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	885b      	ldrh	r3, [r3, #2]
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7ff feea 	bl	8009ce4 <ptr_to_mem>
 8009f10:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f1a:	d818      	bhi.n	8009f4e <mem_link_valid+0x66>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	885b      	ldrh	r3, [r3, #2]
 8009f20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f24:	d813      	bhi.n	8009f4e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009f2a:	8afa      	ldrh	r2, [r7, #22]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d004      	beq.n	8009f3a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	8afa      	ldrh	r2, [r7, #22]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d109      	bne.n	8009f4e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009f3a:	4b08      	ldr	r3, [pc, #32]	; (8009f5c <mem_link_valid+0x74>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d006      	beq.n	8009f52 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	885b      	ldrh	r3, [r3, #2]
 8009f48:	8afa      	ldrh	r2, [r7, #22]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d001      	beq.n	8009f52 <mem_link_valid+0x6a>
    return 0;
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e000      	b.n	8009f54 <mem_link_valid+0x6c>
  }
  return 1;
 8009f52:	2301      	movs	r3, #1
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	200011e4 	.word	0x200011e4

08009f60 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d04c      	beq.n	800a008 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f003 0303 	and.w	r3, r3, #3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d007      	beq.n	8009f88 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009f78:	4b25      	ldr	r3, [pc, #148]	; (800a010 <mem_free+0xb0>)
 8009f7a:	f240 2273 	movw	r2, #627	; 0x273
 8009f7e:	4925      	ldr	r1, [pc, #148]	; (800a014 <mem_free+0xb4>)
 8009f80:	4825      	ldr	r0, [pc, #148]	; (800a018 <mem_free+0xb8>)
 8009f82:	f00d f91f 	bl	80171c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009f86:	e040      	b.n	800a00a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	3b08      	subs	r3, #8
 8009f8c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009f8e:	4b23      	ldr	r3, [pc, #140]	; (800a01c <mem_free+0xbc>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d306      	bcc.n	8009fa6 <mem_free+0x46>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f103 020c 	add.w	r2, r3, #12
 8009f9e:	4b20      	ldr	r3, [pc, #128]	; (800a020 <mem_free+0xc0>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d907      	bls.n	8009fb6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009fa6:	4b1a      	ldr	r3, [pc, #104]	; (800a010 <mem_free+0xb0>)
 8009fa8:	f240 227f 	movw	r2, #639	; 0x27f
 8009fac:	491d      	ldr	r1, [pc, #116]	; (800a024 <mem_free+0xc4>)
 8009fae:	481a      	ldr	r0, [pc, #104]	; (800a018 <mem_free+0xb8>)
 8009fb0:	f00d f908 	bl	80171c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009fb4:	e029      	b.n	800a00a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	791b      	ldrb	r3, [r3, #4]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d107      	bne.n	8009fce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009fbe:	4b14      	ldr	r3, [pc, #80]	; (800a010 <mem_free+0xb0>)
 8009fc0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009fc4:	4918      	ldr	r1, [pc, #96]	; (800a028 <mem_free+0xc8>)
 8009fc6:	4814      	ldr	r0, [pc, #80]	; (800a018 <mem_free+0xb8>)
 8009fc8:	f00d f8fc 	bl	80171c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009fcc:	e01d      	b.n	800a00a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f7ff ff8a 	bl	8009ee8 <mem_link_valid>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d107      	bne.n	8009fea <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009fda:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <mem_free+0xb0>)
 8009fdc:	f240 2295 	movw	r2, #661	; 0x295
 8009fe0:	4912      	ldr	r1, [pc, #72]	; (800a02c <mem_free+0xcc>)
 8009fe2:	480d      	ldr	r0, [pc, #52]	; (800a018 <mem_free+0xb8>)
 8009fe4:	f00d f8ee 	bl	80171c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8009fe8:	e00f      	b.n	800a00a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009ff0:	4b0f      	ldr	r3, [pc, #60]	; (800a030 <mem_free+0xd0>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d202      	bcs.n	800a000 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009ffa:	4a0d      	ldr	r2, [pc, #52]	; (800a030 <mem_free+0xd0>)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7ff fe93 	bl	8009d2c <plug_holes>
 800a006:	e000      	b.n	800a00a <mem_free+0xaa>
    return;
 800a008:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	0801c4dc 	.word	0x0801c4dc
 800a014:	0801c5b0 	.word	0x0801c5b0
 800a018:	0801c524 	.word	0x0801c524
 800a01c:	200011e0 	.word	0x200011e0
 800a020:	200011e4 	.word	0x200011e4
 800a024:	0801c5d4 	.word	0x0801c5d4
 800a028:	0801c5f0 	.word	0x0801c5f0
 800a02c:	0801c618 	.word	0x0801c618
 800a030:	200011e8 	.word	0x200011e8

0800a034 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b088      	sub	sp, #32
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a040:	887b      	ldrh	r3, [r7, #2]
 800a042:	3303      	adds	r3, #3
 800a044:	b29b      	uxth	r3, r3
 800a046:	f023 0303 	bic.w	r3, r3, #3
 800a04a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a04c:	8bfb      	ldrh	r3, [r7, #30]
 800a04e:	2b0b      	cmp	r3, #11
 800a050:	d801      	bhi.n	800a056 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a052:	230c      	movs	r3, #12
 800a054:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a056:	8bfb      	ldrh	r3, [r7, #30]
 800a058:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a05c:	d803      	bhi.n	800a066 <mem_trim+0x32>
 800a05e:	8bfa      	ldrh	r2, [r7, #30]
 800a060:	887b      	ldrh	r3, [r7, #2]
 800a062:	429a      	cmp	r2, r3
 800a064:	d201      	bcs.n	800a06a <mem_trim+0x36>
    return NULL;
 800a066:	2300      	movs	r3, #0
 800a068:	e0cc      	b.n	800a204 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a06a:	4b68      	ldr	r3, [pc, #416]	; (800a20c <mem_trim+0x1d8>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	429a      	cmp	r2, r3
 800a072:	d304      	bcc.n	800a07e <mem_trim+0x4a>
 800a074:	4b66      	ldr	r3, [pc, #408]	; (800a210 <mem_trim+0x1dc>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d306      	bcc.n	800a08c <mem_trim+0x58>
 800a07e:	4b65      	ldr	r3, [pc, #404]	; (800a214 <mem_trim+0x1e0>)
 800a080:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a084:	4964      	ldr	r1, [pc, #400]	; (800a218 <mem_trim+0x1e4>)
 800a086:	4865      	ldr	r0, [pc, #404]	; (800a21c <mem_trim+0x1e8>)
 800a088:	f00d f89c 	bl	80171c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a08c:	4b5f      	ldr	r3, [pc, #380]	; (800a20c <mem_trim+0x1d8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	429a      	cmp	r2, r3
 800a094:	d304      	bcc.n	800a0a0 <mem_trim+0x6c>
 800a096:	4b5e      	ldr	r3, [pc, #376]	; (800a210 <mem_trim+0x1dc>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d301      	bcc.n	800a0a4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	e0af      	b.n	800a204 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	3b08      	subs	r3, #8
 800a0a8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a0aa:	69b8      	ldr	r0, [r7, #24]
 800a0ac:	f7ff fe2c 	bl	8009d08 <mem_to_ptr>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	881a      	ldrh	r2, [r3, #0]
 800a0b8:	8afb      	ldrh	r3, [r7, #22]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	3b08      	subs	r3, #8
 800a0c0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a0c2:	8bfa      	ldrh	r2, [r7, #30]
 800a0c4:	8abb      	ldrh	r3, [r7, #20]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d906      	bls.n	800a0d8 <mem_trim+0xa4>
 800a0ca:	4b52      	ldr	r3, [pc, #328]	; (800a214 <mem_trim+0x1e0>)
 800a0cc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a0d0:	4953      	ldr	r1, [pc, #332]	; (800a220 <mem_trim+0x1ec>)
 800a0d2:	4852      	ldr	r0, [pc, #328]	; (800a21c <mem_trim+0x1e8>)
 800a0d4:	f00d f876 	bl	80171c4 <iprintf>
  if (newsize > size) {
 800a0d8:	8bfa      	ldrh	r2, [r7, #30]
 800a0da:	8abb      	ldrh	r3, [r7, #20]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d901      	bls.n	800a0e4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	e08f      	b.n	800a204 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a0e4:	8bfa      	ldrh	r2, [r7, #30]
 800a0e6:	8abb      	ldrh	r3, [r7, #20]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d101      	bne.n	800a0f0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	e089      	b.n	800a204 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	881b      	ldrh	r3, [r3, #0]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff fdf5 	bl	8009ce4 <ptr_to_mem>
 800a0fa:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	791b      	ldrb	r3, [r3, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d13f      	bne.n	800a184 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	881b      	ldrh	r3, [r3, #0]
 800a108:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a10c:	d106      	bne.n	800a11c <mem_trim+0xe8>
 800a10e:	4b41      	ldr	r3, [pc, #260]	; (800a214 <mem_trim+0x1e0>)
 800a110:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a114:	4943      	ldr	r1, [pc, #268]	; (800a224 <mem_trim+0x1f0>)
 800a116:	4841      	ldr	r0, [pc, #260]	; (800a21c <mem_trim+0x1e8>)
 800a118:	f00d f854 	bl	80171c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a122:	8afa      	ldrh	r2, [r7, #22]
 800a124:	8bfb      	ldrh	r3, [r7, #30]
 800a126:	4413      	add	r3, r2
 800a128:	b29b      	uxth	r3, r3
 800a12a:	3308      	adds	r3, #8
 800a12c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a12e:	4b3e      	ldr	r3, [pc, #248]	; (800a228 <mem_trim+0x1f4>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	429a      	cmp	r2, r3
 800a136:	d106      	bne.n	800a146 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a138:	89fb      	ldrh	r3, [r7, #14]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7ff fdd2 	bl	8009ce4 <ptr_to_mem>
 800a140:	4603      	mov	r3, r0
 800a142:	4a39      	ldr	r2, [pc, #228]	; (800a228 <mem_trim+0x1f4>)
 800a144:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a146:	89fb      	ldrh	r3, [r7, #14]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff fdcb 	bl	8009ce4 <ptr_to_mem>
 800a14e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	2200      	movs	r2, #0
 800a154:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	89ba      	ldrh	r2, [r7, #12]
 800a15a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a15c:	693b      	ldr	r3, [r7, #16]
 800a15e:	8afa      	ldrh	r2, [r7, #22]
 800a160:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	89fa      	ldrh	r2, [r7, #14]
 800a166:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	881b      	ldrh	r3, [r3, #0]
 800a16c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a170:	d047      	beq.n	800a202 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	881b      	ldrh	r3, [r3, #0]
 800a176:	4618      	mov	r0, r3
 800a178:	f7ff fdb4 	bl	8009ce4 <ptr_to_mem>
 800a17c:	4602      	mov	r2, r0
 800a17e:	89fb      	ldrh	r3, [r7, #14]
 800a180:	8053      	strh	r3, [r2, #2]
 800a182:	e03e      	b.n	800a202 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a184:	8bfb      	ldrh	r3, [r7, #30]
 800a186:	f103 0214 	add.w	r2, r3, #20
 800a18a:	8abb      	ldrh	r3, [r7, #20]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d838      	bhi.n	800a202 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a190:	8afa      	ldrh	r2, [r7, #22]
 800a192:	8bfb      	ldrh	r3, [r7, #30]
 800a194:	4413      	add	r3, r2
 800a196:	b29b      	uxth	r3, r3
 800a198:	3308      	adds	r3, #8
 800a19a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1a4:	d106      	bne.n	800a1b4 <mem_trim+0x180>
 800a1a6:	4b1b      	ldr	r3, [pc, #108]	; (800a214 <mem_trim+0x1e0>)
 800a1a8:	f240 3216 	movw	r2, #790	; 0x316
 800a1ac:	491d      	ldr	r1, [pc, #116]	; (800a224 <mem_trim+0x1f0>)
 800a1ae:	481b      	ldr	r0, [pc, #108]	; (800a21c <mem_trim+0x1e8>)
 800a1b0:	f00d f808 	bl	80171c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a1b4:	89fb      	ldrh	r3, [r7, #14]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff fd94 	bl	8009ce4 <ptr_to_mem>
 800a1bc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a1be:	4b1a      	ldr	r3, [pc, #104]	; (800a228 <mem_trim+0x1f4>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	693a      	ldr	r2, [r7, #16]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d202      	bcs.n	800a1ce <mem_trim+0x19a>
      lfree = mem2;
 800a1c8:	4a17      	ldr	r2, [pc, #92]	; (800a228 <mem_trim+0x1f4>)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	881a      	ldrh	r2, [r3, #0]
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	8afa      	ldrh	r2, [r7, #22]
 800a1e0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	89fa      	ldrh	r2, [r7, #14]
 800a1e6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1f0:	d007      	beq.n	800a202 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff fd74 	bl	8009ce4 <ptr_to_mem>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	89fb      	ldrh	r3, [r7, #14]
 800a200:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a202:	687b      	ldr	r3, [r7, #4]
}
 800a204:	4618      	mov	r0, r3
 800a206:	3720      	adds	r7, #32
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	200011e0 	.word	0x200011e0
 800a210:	200011e4 	.word	0x200011e4
 800a214:	0801c4dc 	.word	0x0801c4dc
 800a218:	0801c64c 	.word	0x0801c64c
 800a21c:	0801c524 	.word	0x0801c524
 800a220:	0801c664 	.word	0x0801c664
 800a224:	0801c684 	.word	0x0801c684
 800a228:	200011e8 	.word	0x200011e8

0800a22c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af00      	add	r7, sp, #0
 800a232:	4603      	mov	r3, r0
 800a234:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a236:	88fb      	ldrh	r3, [r7, #6]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d101      	bne.n	800a240 <mem_malloc+0x14>
    return NULL;
 800a23c:	2300      	movs	r3, #0
 800a23e:	e0d9      	b.n	800a3f4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a240:	88fb      	ldrh	r3, [r7, #6]
 800a242:	3303      	adds	r3, #3
 800a244:	b29b      	uxth	r3, r3
 800a246:	f023 0303 	bic.w	r3, r3, #3
 800a24a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a24c:	8bbb      	ldrh	r3, [r7, #28]
 800a24e:	2b0b      	cmp	r3, #11
 800a250:	d801      	bhi.n	800a256 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a252:	230c      	movs	r3, #12
 800a254:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a256:	8bbb      	ldrh	r3, [r7, #28]
 800a258:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a25c:	d803      	bhi.n	800a266 <mem_malloc+0x3a>
 800a25e:	8bba      	ldrh	r2, [r7, #28]
 800a260:	88fb      	ldrh	r3, [r7, #6]
 800a262:	429a      	cmp	r2, r3
 800a264:	d201      	bcs.n	800a26a <mem_malloc+0x3e>
    return NULL;
 800a266:	2300      	movs	r3, #0
 800a268:	e0c4      	b.n	800a3f4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a26a:	4b64      	ldr	r3, [pc, #400]	; (800a3fc <mem_malloc+0x1d0>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4618      	mov	r0, r3
 800a270:	f7ff fd4a 	bl	8009d08 <mem_to_ptr>
 800a274:	4603      	mov	r3, r0
 800a276:	83fb      	strh	r3, [r7, #30]
 800a278:	e0b4      	b.n	800a3e4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a27a:	8bfb      	ldrh	r3, [r7, #30]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff fd31 	bl	8009ce4 <ptr_to_mem>
 800a282:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	791b      	ldrb	r3, [r3, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f040 80a4 	bne.w	800a3d6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	8bfb      	ldrh	r3, [r7, #30]
 800a296:	1ad3      	subs	r3, r2, r3
 800a298:	f1a3 0208 	sub.w	r2, r3, #8
 800a29c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	f0c0 8099 	bcc.w	800a3d6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	8bfb      	ldrh	r3, [r7, #30]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	f1a3 0208 	sub.w	r2, r3, #8
 800a2b2:	8bbb      	ldrh	r3, [r7, #28]
 800a2b4:	3314      	adds	r3, #20
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d333      	bcc.n	800a322 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a2ba:	8bfa      	ldrh	r2, [r7, #30]
 800a2bc:	8bbb      	ldrh	r3, [r7, #28]
 800a2be:	4413      	add	r3, r2
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a2c6:	8a7b      	ldrh	r3, [r7, #18]
 800a2c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2cc:	d106      	bne.n	800a2dc <mem_malloc+0xb0>
 800a2ce:	4b4c      	ldr	r3, [pc, #304]	; (800a400 <mem_malloc+0x1d4>)
 800a2d0:	f240 3287 	movw	r2, #903	; 0x387
 800a2d4:	494b      	ldr	r1, [pc, #300]	; (800a404 <mem_malloc+0x1d8>)
 800a2d6:	484c      	ldr	r0, [pc, #304]	; (800a408 <mem_malloc+0x1dc>)
 800a2d8:	f00c ff74 	bl	80171c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a2dc:	8a7b      	ldrh	r3, [r7, #18]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7ff fd00 	bl	8009ce4 <ptr_to_mem>
 800a2e4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	881a      	ldrh	r2, [r3, #0]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8bfa      	ldrh	r2, [r7, #30]
 800a2f8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	8a7a      	ldrh	r2, [r7, #18]
 800a2fe:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	2201      	movs	r2, #1
 800a304:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a30e:	d00b      	beq.n	800a328 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff fce5 	bl	8009ce4 <ptr_to_mem>
 800a31a:	4602      	mov	r2, r0
 800a31c:	8a7b      	ldrh	r3, [r7, #18]
 800a31e:	8053      	strh	r3, [r2, #2]
 800a320:	e002      	b.n	800a328 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	2201      	movs	r2, #1
 800a326:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a328:	4b34      	ldr	r3, [pc, #208]	; (800a3fc <mem_malloc+0x1d0>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d127      	bne.n	800a382 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a332:	4b32      	ldr	r3, [pc, #200]	; (800a3fc <mem_malloc+0x1d0>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a338:	e005      	b.n	800a346 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff fcd0 	bl	8009ce4 <ptr_to_mem>
 800a344:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	791b      	ldrb	r3, [r3, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d004      	beq.n	800a358 <mem_malloc+0x12c>
 800a34e:	4b2f      	ldr	r3, [pc, #188]	; (800a40c <mem_malloc+0x1e0>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	69ba      	ldr	r2, [r7, #24]
 800a354:	429a      	cmp	r2, r3
 800a356:	d1f0      	bne.n	800a33a <mem_malloc+0x10e>
          }
          lfree = cur;
 800a358:	4a28      	ldr	r2, [pc, #160]	; (800a3fc <mem_malloc+0x1d0>)
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a35e:	4b27      	ldr	r3, [pc, #156]	; (800a3fc <mem_malloc+0x1d0>)
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	4b2a      	ldr	r3, [pc, #168]	; (800a40c <mem_malloc+0x1e0>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d00b      	beq.n	800a382 <mem_malloc+0x156>
 800a36a:	4b24      	ldr	r3, [pc, #144]	; (800a3fc <mem_malloc+0x1d0>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	791b      	ldrb	r3, [r3, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d006      	beq.n	800a382 <mem_malloc+0x156>
 800a374:	4b22      	ldr	r3, [pc, #136]	; (800a400 <mem_malloc+0x1d4>)
 800a376:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a37a:	4925      	ldr	r1, [pc, #148]	; (800a410 <mem_malloc+0x1e4>)
 800a37c:	4822      	ldr	r0, [pc, #136]	; (800a408 <mem_malloc+0x1dc>)
 800a37e:	f00c ff21 	bl	80171c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a382:	8bba      	ldrh	r2, [r7, #28]
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	4413      	add	r3, r2
 800a388:	3308      	adds	r3, #8
 800a38a:	4a20      	ldr	r2, [pc, #128]	; (800a40c <mem_malloc+0x1e0>)
 800a38c:	6812      	ldr	r2, [r2, #0]
 800a38e:	4293      	cmp	r3, r2
 800a390:	d906      	bls.n	800a3a0 <mem_malloc+0x174>
 800a392:	4b1b      	ldr	r3, [pc, #108]	; (800a400 <mem_malloc+0x1d4>)
 800a394:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a398:	491e      	ldr	r1, [pc, #120]	; (800a414 <mem_malloc+0x1e8>)
 800a39a:	481b      	ldr	r0, [pc, #108]	; (800a408 <mem_malloc+0x1dc>)
 800a39c:	f00c ff12 	bl	80171c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f003 0303 	and.w	r3, r3, #3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d006      	beq.n	800a3b8 <mem_malloc+0x18c>
 800a3aa:	4b15      	ldr	r3, [pc, #84]	; (800a400 <mem_malloc+0x1d4>)
 800a3ac:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a3b0:	4919      	ldr	r1, [pc, #100]	; (800a418 <mem_malloc+0x1ec>)
 800a3b2:	4815      	ldr	r0, [pc, #84]	; (800a408 <mem_malloc+0x1dc>)
 800a3b4:	f00c ff06 	bl	80171c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f003 0303 	and.w	r3, r3, #3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d006      	beq.n	800a3d0 <mem_malloc+0x1a4>
 800a3c2:	4b0f      	ldr	r3, [pc, #60]	; (800a400 <mem_malloc+0x1d4>)
 800a3c4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a3c8:	4914      	ldr	r1, [pc, #80]	; (800a41c <mem_malloc+0x1f0>)
 800a3ca:	480f      	ldr	r0, [pc, #60]	; (800a408 <mem_malloc+0x1dc>)
 800a3cc:	f00c fefa 	bl	80171c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	e00e      	b.n	800a3f4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a3d6:	8bfb      	ldrh	r3, [r7, #30]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7ff fc83 	bl	8009ce4 <ptr_to_mem>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	881b      	ldrh	r3, [r3, #0]
 800a3e2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a3e4:	8bfa      	ldrh	r2, [r7, #30]
 800a3e6:	8bbb      	ldrh	r3, [r7, #28]
 800a3e8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	f4ff af44 	bcc.w	800a27a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3720      	adds	r7, #32
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	200011e8 	.word	0x200011e8
 800a400:	0801c4dc 	.word	0x0801c4dc
 800a404:	0801c684 	.word	0x0801c684
 800a408:	0801c524 	.word	0x0801c524
 800a40c:	200011e4 	.word	0x200011e4
 800a410:	0801c698 	.word	0x0801c698
 800a414:	0801c6b4 	.word	0x0801c6b4
 800a418:	0801c6e4 	.word	0x0801c6e4
 800a41c:	0801c714 	.word	0x0801c714

0800a420 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	2200      	movs	r2, #0
 800a42e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	3303      	adds	r3, #3
 800a436:	f023 0303 	bic.w	r3, r3, #3
 800a43a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a43c:	2300      	movs	r3, #0
 800a43e:	60fb      	str	r3, [r7, #12]
 800a440:	e011      	b.n	800a466 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	461a      	mov	r2, r3
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	4413      	add	r3, r2
 800a45e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3301      	adds	r3, #1
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	885b      	ldrh	r3, [r3, #2]
 800a46a:	461a      	mov	r2, r3
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	4293      	cmp	r3, r2
 800a470:	dbe7      	blt.n	800a442 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a472:	bf00      	nop
 800a474:	bf00      	nop
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a486:	2300      	movs	r3, #0
 800a488:	80fb      	strh	r3, [r7, #6]
 800a48a:	e009      	b.n	800a4a0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a48c:	88fb      	ldrh	r3, [r7, #6]
 800a48e:	4a08      	ldr	r2, [pc, #32]	; (800a4b0 <memp_init+0x30>)
 800a490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff ffc3 	bl	800a420 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a49a:	88fb      	ldrh	r3, [r7, #6]
 800a49c:	3301      	adds	r3, #1
 800a49e:	80fb      	strh	r3, [r7, #6]
 800a4a0:	88fb      	ldrh	r3, [r7, #6]
 800a4a2:	2b08      	cmp	r3, #8
 800a4a4:	d9f2      	bls.n	800a48c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a4a6:	bf00      	nop
 800a4a8:	bf00      	nop
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	080322c8 	.word	0x080322c8

0800a4b4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d012      	beq.n	800a4f0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	6812      	ldr	r2, [r2, #0]
 800a4d2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f003 0303 	and.w	r3, r3, #3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d006      	beq.n	800a4ec <do_memp_malloc_pool+0x38>
 800a4de:	4b07      	ldr	r3, [pc, #28]	; (800a4fc <do_memp_malloc_pool+0x48>)
 800a4e0:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a4e4:	4906      	ldr	r1, [pc, #24]	; (800a500 <do_memp_malloc_pool+0x4c>)
 800a4e6:	4807      	ldr	r0, [pc, #28]	; (800a504 <do_memp_malloc_pool+0x50>)
 800a4e8:	f00c fe6c 	bl	80171c4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	e000      	b.n	800a4f2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	0801c738 	.word	0x0801c738
 800a500:	0801c768 	.word	0x0801c768
 800a504:	0801c78c 	.word	0x0801c78c

0800a508 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	4603      	mov	r3, r0
 800a510:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	2b08      	cmp	r3, #8
 800a516:	d908      	bls.n	800a52a <memp_malloc+0x22>
 800a518:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <memp_malloc+0x3c>)
 800a51a:	f240 1257 	movw	r2, #343	; 0x157
 800a51e:	490a      	ldr	r1, [pc, #40]	; (800a548 <memp_malloc+0x40>)
 800a520:	480a      	ldr	r0, [pc, #40]	; (800a54c <memp_malloc+0x44>)
 800a522:	f00c fe4f 	bl	80171c4 <iprintf>
 800a526:	2300      	movs	r3, #0
 800a528:	e008      	b.n	800a53c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a52a:	79fb      	ldrb	r3, [r7, #7]
 800a52c:	4a08      	ldr	r2, [pc, #32]	; (800a550 <memp_malloc+0x48>)
 800a52e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a532:	4618      	mov	r0, r3
 800a534:	f7ff ffbe 	bl	800a4b4 <do_memp_malloc_pool>
 800a538:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a53a:	68fb      	ldr	r3, [r7, #12]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	0801c738 	.word	0x0801c738
 800a548:	0801c7c8 	.word	0x0801c7c8
 800a54c:	0801c78c 	.word	0x0801c78c
 800a550:	080322c8 	.word	0x080322c8

0800a554 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	f003 0303 	and.w	r3, r3, #3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d006      	beq.n	800a576 <do_memp_free_pool+0x22>
 800a568:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <do_memp_free_pool+0x40>)
 800a56a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a56e:	490a      	ldr	r1, [pc, #40]	; (800a598 <do_memp_free_pool+0x44>)
 800a570:	480a      	ldr	r0, [pc, #40]	; (800a59c <do_memp_free_pool+0x48>)
 800a572:	f00c fe27 	bl	80171c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a58c:	bf00      	nop
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}
 800a594:	0801c738 	.word	0x0801c738
 800a598:	0801c7e8 	.word	0x0801c7e8
 800a59c:	0801c78c 	.word	0x0801c78c

0800a5a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	6039      	str	r1, [r7, #0]
 800a5aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a5ac:	79fb      	ldrb	r3, [r7, #7]
 800a5ae:	2b08      	cmp	r3, #8
 800a5b0:	d907      	bls.n	800a5c2 <memp_free+0x22>
 800a5b2:	4b0c      	ldr	r3, [pc, #48]	; (800a5e4 <memp_free+0x44>)
 800a5b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a5b8:	490b      	ldr	r1, [pc, #44]	; (800a5e8 <memp_free+0x48>)
 800a5ba:	480c      	ldr	r0, [pc, #48]	; (800a5ec <memp_free+0x4c>)
 800a5bc:	f00c fe02 	bl	80171c4 <iprintf>
 800a5c0:	e00c      	b.n	800a5dc <memp_free+0x3c>

  if (mem == NULL) {
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a5c8:	79fb      	ldrb	r3, [r7, #7]
 800a5ca:	4a09      	ldr	r2, [pc, #36]	; (800a5f0 <memp_free+0x50>)
 800a5cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5d0:	6839      	ldr	r1, [r7, #0]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7ff ffbe 	bl	800a554 <do_memp_free_pool>
 800a5d8:	e000      	b.n	800a5dc <memp_free+0x3c>
    return;
 800a5da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	0801c738 	.word	0x0801c738
 800a5e8:	0801c808 	.word	0x0801c808
 800a5ec:	0801c78c 	.word	0x0801c78c
 800a5f0:	080322c8 	.word	0x080322c8

0800a5f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a5f8:	bf00      	nop
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
	...

0800a604 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b086      	sub	sp, #24
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	607a      	str	r2, [r7, #4]
 800a610:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d108      	bne.n	800a62a <netif_add+0x26>
 800a618:	4b5b      	ldr	r3, [pc, #364]	; (800a788 <netif_add+0x184>)
 800a61a:	f240 1227 	movw	r2, #295	; 0x127
 800a61e:	495b      	ldr	r1, [pc, #364]	; (800a78c <netif_add+0x188>)
 800a620:	485b      	ldr	r0, [pc, #364]	; (800a790 <netif_add+0x18c>)
 800a622:	f00c fdcf 	bl	80171c4 <iprintf>
 800a626:	2300      	movs	r3, #0
 800a628:	e0a9      	b.n	800a77e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d108      	bne.n	800a642 <netif_add+0x3e>
 800a630:	4b55      	ldr	r3, [pc, #340]	; (800a788 <netif_add+0x184>)
 800a632:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a636:	4957      	ldr	r1, [pc, #348]	; (800a794 <netif_add+0x190>)
 800a638:	4855      	ldr	r0, [pc, #340]	; (800a790 <netif_add+0x18c>)
 800a63a:	f00c fdc3 	bl	80171c4 <iprintf>
 800a63e:	2300      	movs	r3, #0
 800a640:	e09d      	b.n	800a77e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a648:	4b53      	ldr	r3, [pc, #332]	; (800a798 <netif_add+0x194>)
 800a64a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d101      	bne.n	800a656 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a652:	4b51      	ldr	r3, [pc, #324]	; (800a798 <netif_add+0x194>)
 800a654:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a65c:	4b4e      	ldr	r3, [pc, #312]	; (800a798 <netif_add+0x194>)
 800a65e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2200      	movs	r2, #0
 800a664:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2200      	movs	r2, #0
 800a670:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	4a49      	ldr	r2, [pc, #292]	; (800a79c <netif_add+0x198>)
 800a676:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	2200      	movs	r2, #0
 800a67c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3324      	adds	r3, #36	; 0x24
 800a68a:	2204      	movs	r2, #4
 800a68c:	2100      	movs	r1, #0
 800a68e:	4618      	mov	r0, r3
 800a690:	f00c f926 	bl	80168e0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6a3a      	ldr	r2, [r7, #32]
 800a69e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a6a0:	4b3f      	ldr	r3, [pc, #252]	; (800a7a0 <netif_add+0x19c>)
 800a6a2:	781a      	ldrb	r2, [r3, #0]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ae:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	68b9      	ldr	r1, [r7, #8]
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 f914 	bl	800a8e4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	4798      	blx	r3
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <netif_add+0xc8>
    return NULL;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	e058      	b.n	800a77e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6d2:	2bff      	cmp	r3, #255	; 0xff
 800a6d4:	d103      	bne.n	800a6de <netif_add+0xda>
        netif->num = 0;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a6e2:	4b30      	ldr	r3, [pc, #192]	; (800a7a4 <netif_add+0x1a0>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	617b      	str	r3, [r7, #20]
 800a6e8:	e02b      	b.n	800a742 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d106      	bne.n	800a700 <netif_add+0xfc>
 800a6f2:	4b25      	ldr	r3, [pc, #148]	; (800a788 <netif_add+0x184>)
 800a6f4:	f240 128b 	movw	r2, #395	; 0x18b
 800a6f8:	492b      	ldr	r1, [pc, #172]	; (800a7a8 <netif_add+0x1a4>)
 800a6fa:	4825      	ldr	r0, [pc, #148]	; (800a790 <netif_add+0x18c>)
 800a6fc:	f00c fd62 	bl	80171c4 <iprintf>
        num_netifs++;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	3301      	adds	r3, #1
 800a704:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	2bff      	cmp	r3, #255	; 0xff
 800a70a:	dd06      	ble.n	800a71a <netif_add+0x116>
 800a70c:	4b1e      	ldr	r3, [pc, #120]	; (800a788 <netif_add+0x184>)
 800a70e:	f240 128d 	movw	r2, #397	; 0x18d
 800a712:	4926      	ldr	r1, [pc, #152]	; (800a7ac <netif_add+0x1a8>)
 800a714:	481e      	ldr	r0, [pc, #120]	; (800a790 <netif_add+0x18c>)
 800a716:	f00c fd55 	bl	80171c4 <iprintf>
        if (netif2->num == netif->num) {
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a726:	429a      	cmp	r2, r3
 800a728:	d108      	bne.n	800a73c <netif_add+0x138>
          netif->num++;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a730:	3301      	adds	r3, #1
 800a732:	b2da      	uxtb	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800a73a:	e005      	b.n	800a748 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	617b      	str	r3, [r7, #20]
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1d0      	bne.n	800a6ea <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1be      	bne.n	800a6cc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a754:	2bfe      	cmp	r3, #254	; 0xfe
 800a756:	d103      	bne.n	800a760 <netif_add+0x15c>
    netif_num = 0;
 800a758:	4b11      	ldr	r3, [pc, #68]	; (800a7a0 <netif_add+0x19c>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	e006      	b.n	800a76e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a766:	3301      	adds	r3, #1
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	4b0d      	ldr	r3, [pc, #52]	; (800a7a0 <netif_add+0x19c>)
 800a76c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a76e:	4b0d      	ldr	r3, [pc, #52]	; (800a7a4 <netif_add+0x1a0>)
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a776:	4a0b      	ldr	r2, [pc, #44]	; (800a7a4 <netif_add+0x1a0>)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a77c:	68fb      	ldr	r3, [r7, #12]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	0801c824 	.word	0x0801c824
 800a78c:	0801c8b8 	.word	0x0801c8b8
 800a790:	0801c874 	.word	0x0801c874
 800a794:	0801c8d4 	.word	0x0801c8d4
 800a798:	0803233c 	.word	0x0803233c
 800a79c:	0800aaf7 	.word	0x0800aaf7
 800a7a0:	20001210 	.word	0x20001210
 800a7a4:	2000d628 	.word	0x2000d628
 800a7a8:	0801c8f8 	.word	0x0801c8f8
 800a7ac:	0801c90c 	.word	0x0801c90c

0800a7b0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a7ba:	6839      	ldr	r1, [r7, #0]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f002 fda9 	bl	800d314 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f007 fea1 	bl	801250c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a7ca:	bf00      	nop
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d106      	bne.n	800a7f4 <netif_do_set_ipaddr+0x20>
 800a7e6:	4b1d      	ldr	r3, [pc, #116]	; (800a85c <netif_do_set_ipaddr+0x88>)
 800a7e8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a7ec:	491c      	ldr	r1, [pc, #112]	; (800a860 <netif_do_set_ipaddr+0x8c>)
 800a7ee:	481d      	ldr	r0, [pc, #116]	; (800a864 <netif_do_set_ipaddr+0x90>)
 800a7f0:	f00c fce8 	bl	80171c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d106      	bne.n	800a808 <netif_do_set_ipaddr+0x34>
 800a7fa:	4b18      	ldr	r3, [pc, #96]	; (800a85c <netif_do_set_ipaddr+0x88>)
 800a7fc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a800:	4917      	ldr	r1, [pc, #92]	; (800a860 <netif_do_set_ipaddr+0x8c>)
 800a802:	4818      	ldr	r0, [pc, #96]	; (800a864 <netif_do_set_ipaddr+0x90>)
 800a804:	f00c fcde 	bl	80171c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	3304      	adds	r3, #4
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	429a      	cmp	r2, r3
 800a814:	d01c      	beq.n	800a850 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3304      	adds	r3, #4
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a826:	f107 0314 	add.w	r3, r7, #20
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7ff ffbf 	bl	800a7b0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <netif_do_set_ipaddr+0x6a>
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	e000      	b.n	800a840 <netif_do_set_ipaddr+0x6c>
 800a83e:	2300      	movs	r3, #0
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a844:	2101      	movs	r1, #1
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 f8d2 	bl	800a9f0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a84c:	2301      	movs	r3, #1
 800a84e:	e000      	b.n	800a852 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	0801c824 	.word	0x0801c824
 800a860:	0801c93c 	.word	0x0801c93c
 800a864:	0801c874 	.word	0x0801c874

0800a868 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a868:	b480      	push	{r7}
 800a86a:	b085      	sub	sp, #20
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	3308      	adds	r3, #8
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d00a      	beq.n	800a898 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <netif_do_set_netmask+0x26>
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	e000      	b.n	800a890 <netif_do_set_netmask+0x28>
 800a88e:	2300      	movs	r3, #0
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a894:	2301      	movs	r3, #1
 800a896:	e000      	b.n	800a89a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3714      	adds	r7, #20
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b085      	sub	sp, #20
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	60f8      	str	r0, [r7, #12]
 800a8ae:	60b9      	str	r1, [r7, #8]
 800a8b0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	330c      	adds	r3, #12
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d00a      	beq.n	800a8d6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <netif_do_set_gw+0x26>
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	e000      	b.n	800a8ce <netif_do_set_gw+0x28>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	68fa      	ldr	r2, [r7, #12]
 800a8d0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e000      	b.n	800a8d8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b088      	sub	sp, #32
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a900:	4b1c      	ldr	r3, [pc, #112]	; (800a974 <netif_set_addr+0x90>)
 800a902:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d101      	bne.n	800a90e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a90a:	4b1a      	ldr	r3, [pc, #104]	; (800a974 <netif_set_addr+0x90>)
 800a90c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d101      	bne.n	800a918 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a914:	4b17      	ldr	r3, [pc, #92]	; (800a974 <netif_set_addr+0x90>)
 800a916:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <netif_set_addr+0x42>
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <netif_set_addr+0x46>
 800a926:	2301      	movs	r3, #1
 800a928:	e000      	b.n	800a92c <netif_set_addr+0x48>
 800a92a:	2300      	movs	r3, #0
 800a92c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d006      	beq.n	800a942 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a934:	f107 0310 	add.w	r3, r7, #16
 800a938:	461a      	mov	r2, r3
 800a93a:	68b9      	ldr	r1, [r7, #8]
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff ff49 	bl	800a7d4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a942:	69fa      	ldr	r2, [r7, #28]
 800a944:	6879      	ldr	r1, [r7, #4]
 800a946:	68f8      	ldr	r0, [r7, #12]
 800a948:	f7ff ff8e 	bl	800a868 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f7ff ffa8 	bl	800a8a6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d106      	bne.n	800a96a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a95c:	f107 0310 	add.w	r3, r7, #16
 800a960:	461a      	mov	r2, r3
 800a962:	68b9      	ldr	r1, [r7, #8]
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f7ff ff35 	bl	800a7d4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a96a:	bf00      	nop
 800a96c:	3720      	adds	r7, #32
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	0803233c 	.word	0x0803233c

0800a978 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a980:	4a04      	ldr	r2, [pc, #16]	; (800a994 <netif_set_default+0x1c>)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a986:	bf00      	nop
 800a988:	370c      	adds	r7, #12
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	2000d62c 	.word	0x2000d62c

0800a998 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d107      	bne.n	800a9b6 <netif_set_up+0x1e>
 800a9a6:	4b0f      	ldr	r3, [pc, #60]	; (800a9e4 <netif_set_up+0x4c>)
 800a9a8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a9ac:	490e      	ldr	r1, [pc, #56]	; (800a9e8 <netif_set_up+0x50>)
 800a9ae:	480f      	ldr	r0, [pc, #60]	; (800a9ec <netif_set_up+0x54>)
 800a9b0:	f00c fc08 	bl	80171c4 <iprintf>
 800a9b4:	e013      	b.n	800a9de <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10c      	bne.n	800a9de <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a9ca:	f043 0301 	orr.w	r3, r3, #1
 800a9ce:	b2da      	uxtb	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a9d6:	2103      	movs	r1, #3
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f809 	bl	800a9f0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	0801c824 	.word	0x0801c824
 800a9e8:	0801c9ac 	.word	0x0801c9ac
 800a9ec:	0801c874 	.word	0x0801c874

0800a9f0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d106      	bne.n	800aa10 <netif_issue_reports+0x20>
 800aa02:	4b18      	ldr	r3, [pc, #96]	; (800aa64 <netif_issue_reports+0x74>)
 800aa04:	f240 326d 	movw	r2, #877	; 0x36d
 800aa08:	4917      	ldr	r1, [pc, #92]	; (800aa68 <netif_issue_reports+0x78>)
 800aa0a:	4818      	ldr	r0, [pc, #96]	; (800aa6c <netif_issue_reports+0x7c>)
 800aa0c:	f00c fbda 	bl	80171c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d01e      	beq.n	800aa5c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa24:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d017      	beq.n	800aa5c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aa2c:	78fb      	ldrb	r3, [r7, #3]
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d013      	beq.n	800aa5e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	3304      	adds	r3, #4
 800aa3a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00e      	beq.n	800aa5e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa46:	f003 0308 	and.w	r3, r3, #8
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d007      	beq.n	800aa5e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	3304      	adds	r3, #4
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f00a fb27 	bl	80150a8 <etharp_request>
 800aa5a:	e000      	b.n	800aa5e <netif_issue_reports+0x6e>
    return;
 800aa5c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	0801c824 	.word	0x0801c824
 800aa68:	0801c9c8 	.word	0x0801c9c8
 800aa6c:	0801c874 	.word	0x0801c874

0800aa70 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d107      	bne.n	800aa8e <netif_set_down+0x1e>
 800aa7e:	4b12      	ldr	r3, [pc, #72]	; (800aac8 <netif_set_down+0x58>)
 800aa80:	f240 329b 	movw	r2, #923	; 0x39b
 800aa84:	4911      	ldr	r1, [pc, #68]	; (800aacc <netif_set_down+0x5c>)
 800aa86:	4812      	ldr	r0, [pc, #72]	; (800aad0 <netif_set_down+0x60>)
 800aa88:	f00c fb9c 	bl	80171c4 <iprintf>
 800aa8c:	e019      	b.n	800aac2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aa94:	f003 0301 	and.w	r3, r3, #1
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d012      	beq.n	800aac2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aaa2:	f023 0301 	bic.w	r3, r3, #1
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aab4:	f003 0308 	and.w	r3, r3, #8
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f009 fead 	bl	801481c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800aac2:	3708      	adds	r7, #8
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	0801c824 	.word	0x0801c824
 800aacc:	0801c9ec 	.word	0x0801c9ec
 800aad0:	0801c874 	.word	0x0801c874

0800aad4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d002      	beq.n	800aaea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	61da      	str	r2, [r3, #28]
  }
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800aaf6:	b480      	push	{r7}
 800aaf8:	b085      	sub	sp, #20
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	60b9      	str	r1, [r7, #8]
 800ab00:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ab02:	f06f 030b 	mvn.w	r3, #11
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3714      	adds	r7, #20
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
	...

0800ab14 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ab1e:	79fb      	ldrb	r3, [r7, #7]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d013      	beq.n	800ab4c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ab24:	4b0d      	ldr	r3, [pc, #52]	; (800ab5c <netif_get_by_index+0x48>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	e00c      	b.n	800ab46 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab32:	3301      	adds	r3, #1
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	79fa      	ldrb	r2, [r7, #7]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d101      	bne.n	800ab40 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	e006      	b.n	800ab4e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	60fb      	str	r3, [r7, #12]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1ef      	bne.n	800ab2c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3714      	adds	r7, #20
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	2000d628 	.word	0x2000d628

0800ab60 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <pbuf_free_ooseq+0x38>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ab6c:	4b0b      	ldr	r3, [pc, #44]	; (800ab9c <pbuf_free_ooseq+0x3c>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	607b      	str	r3, [r7, #4]
 800ab72:	e00a      	b.n	800ab8a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f002 fc07 	bl	800d390 <tcp_free_ooseq>
      return;
 800ab82:	e005      	b.n	800ab90 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	607b      	str	r3, [r7, #4]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1f1      	bne.n	800ab74 <pbuf_free_ooseq+0x14>
    }
  }
}
 800ab90:	3708      	adds	r7, #8
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	2000d630 	.word	0x2000d630
 800ab9c:	2000d638 	.word	0x2000d638

0800aba0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800aba0:	b480      	push	{r7}
 800aba2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800aba4:	4b03      	ldr	r3, [pc, #12]	; (800abb4 <pbuf_pool_is_empty+0x14>)
 800aba6:	2201      	movs	r2, #1
 800aba8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800abaa:	bf00      	nop
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr
 800abb4:	2000d630 	.word	0x2000d630

0800abb8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	4611      	mov	r1, r2
 800abc4:	461a      	mov	r2, r3
 800abc6:	460b      	mov	r3, r1
 800abc8:	80fb      	strh	r3, [r7, #6]
 800abca:	4613      	mov	r3, r2
 800abcc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	88fa      	ldrh	r2, [r7, #6]
 800abde:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	88ba      	ldrh	r2, [r7, #4]
 800abe4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800abe6:	8b3b      	ldrh	r3, [r7, #24]
 800abe8:	b2da      	uxtb	r2, r3
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	7f3a      	ldrb	r2, [r7, #28]
 800abf2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2201      	movs	r2, #1
 800abf8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	73da      	strb	r2, [r3, #15]
}
 800ac00:	bf00      	nop
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b08c      	sub	sp, #48	; 0x30
 800ac10:	af02      	add	r7, sp, #8
 800ac12:	4603      	mov	r3, r0
 800ac14:	71fb      	strb	r3, [r7, #7]
 800ac16:	460b      	mov	r3, r1
 800ac18:	80bb      	strh	r3, [r7, #4]
 800ac1a:	4613      	mov	r3, r2
 800ac1c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ac1e:	79fb      	ldrb	r3, [r7, #7]
 800ac20:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ac22:	887b      	ldrh	r3, [r7, #2]
 800ac24:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ac28:	d07f      	beq.n	800ad2a <pbuf_alloc+0x11e>
 800ac2a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ac2e:	f300 80c8 	bgt.w	800adc2 <pbuf_alloc+0x1b6>
 800ac32:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ac36:	d010      	beq.n	800ac5a <pbuf_alloc+0x4e>
 800ac38:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ac3c:	f300 80c1 	bgt.w	800adc2 <pbuf_alloc+0x1b6>
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d002      	beq.n	800ac4a <pbuf_alloc+0x3e>
 800ac44:	2b41      	cmp	r3, #65	; 0x41
 800ac46:	f040 80bc 	bne.w	800adc2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ac4a:	887a      	ldrh	r2, [r7, #2]
 800ac4c:	88bb      	ldrh	r3, [r7, #4]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	2000      	movs	r0, #0
 800ac52:	f000 f8d1 	bl	800adf8 <pbuf_alloc_reference>
 800ac56:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ac58:	e0bd      	b.n	800add6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ac62:	88bb      	ldrh	r3, [r7, #4]
 800ac64:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ac66:	2008      	movs	r0, #8
 800ac68:	f7ff fc4e 	bl	800a508 <memp_malloc>
 800ac6c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d109      	bne.n	800ac88 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ac74:	f7ff ff94 	bl	800aba0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d002      	beq.n	800ac84 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ac7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac80:	f000 faa8 	bl	800b1d4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ac84:	2300      	movs	r3, #0
 800ac86:	e0a7      	b.n	800add8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ac88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac8a:	3303      	adds	r3, #3
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	f023 0303 	bic.w	r3, r3, #3
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	8b7a      	ldrh	r2, [r7, #26]
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	bf28      	it	cs
 800aca0:	4613      	movcs	r3, r2
 800aca2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800aca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aca6:	3310      	adds	r3, #16
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	4413      	add	r3, r2
 800acac:	3303      	adds	r3, #3
 800acae:	f023 0303 	bic.w	r3, r3, #3
 800acb2:	4618      	mov	r0, r3
 800acb4:	89f9      	ldrh	r1, [r7, #14]
 800acb6:	8b7a      	ldrh	r2, [r7, #26]
 800acb8:	2300      	movs	r3, #0
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	887b      	ldrh	r3, [r7, #2]
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	460b      	mov	r3, r1
 800acc2:	4601      	mov	r1, r0
 800acc4:	6938      	ldr	r0, [r7, #16]
 800acc6:	f7ff ff77 	bl	800abb8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f003 0303 	and.w	r3, r3, #3
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d006      	beq.n	800ace4 <pbuf_alloc+0xd8>
 800acd6:	4b42      	ldr	r3, [pc, #264]	; (800ade0 <pbuf_alloc+0x1d4>)
 800acd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acdc:	4941      	ldr	r1, [pc, #260]	; (800ade4 <pbuf_alloc+0x1d8>)
 800acde:	4842      	ldr	r0, [pc, #264]	; (800ade8 <pbuf_alloc+0x1dc>)
 800ace0:	f00c fa70 	bl	80171c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ace4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ace6:	3303      	adds	r3, #3
 800ace8:	f023 0303 	bic.w	r3, r3, #3
 800acec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800acf0:	d106      	bne.n	800ad00 <pbuf_alloc+0xf4>
 800acf2:	4b3b      	ldr	r3, [pc, #236]	; (800ade0 <pbuf_alloc+0x1d4>)
 800acf4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800acf8:	493c      	ldr	r1, [pc, #240]	; (800adec <pbuf_alloc+0x1e0>)
 800acfa:	483b      	ldr	r0, [pc, #236]	; (800ade8 <pbuf_alloc+0x1dc>)
 800acfc:	f00c fa62 	bl	80171c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ad00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d102      	bne.n	800ad0c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	627b      	str	r3, [r7, #36]	; 0x24
 800ad0a:	e002      	b.n	800ad12 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ad16:	8b7a      	ldrh	r2, [r7, #26]
 800ad18:	89fb      	ldrh	r3, [r7, #14]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ad22:	8b7b      	ldrh	r3, [r7, #26]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d19e      	bne.n	800ac66 <pbuf_alloc+0x5a>
      break;
 800ad28:	e055      	b.n	800add6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ad2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad2c:	3303      	adds	r3, #3
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	f023 0303 	bic.w	r3, r3, #3
 800ad34:	b29a      	uxth	r2, r3
 800ad36:	88bb      	ldrh	r3, [r7, #4]
 800ad38:	3303      	adds	r3, #3
 800ad3a:	b29b      	uxth	r3, r3
 800ad3c:	f023 0303 	bic.w	r3, r3, #3
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	4413      	add	r3, r2
 800ad44:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ad46:	8b3b      	ldrh	r3, [r7, #24]
 800ad48:	3310      	adds	r3, #16
 800ad4a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ad4c:	8b3a      	ldrh	r2, [r7, #24]
 800ad4e:	88bb      	ldrh	r3, [r7, #4]
 800ad50:	3303      	adds	r3, #3
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d306      	bcc.n	800ad68 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ad5a:	8afa      	ldrh	r2, [r7, #22]
 800ad5c:	88bb      	ldrh	r3, [r7, #4]
 800ad5e:	3303      	adds	r3, #3
 800ad60:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d201      	bcs.n	800ad6c <pbuf_alloc+0x160>
        return NULL;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	e035      	b.n	800add8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ad6c:	8afb      	ldrh	r3, [r7, #22]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff fa5c 	bl	800a22c <mem_malloc>
 800ad74:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ad76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <pbuf_alloc+0x174>
        return NULL;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	e02b      	b.n	800add8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ad80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad82:	3310      	adds	r3, #16
 800ad84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad86:	4413      	add	r3, r2
 800ad88:	3303      	adds	r3, #3
 800ad8a:	f023 0303 	bic.w	r3, r3, #3
 800ad8e:	4618      	mov	r0, r3
 800ad90:	88b9      	ldrh	r1, [r7, #4]
 800ad92:	88ba      	ldrh	r2, [r7, #4]
 800ad94:	2300      	movs	r3, #0
 800ad96:	9301      	str	r3, [sp, #4]
 800ad98:	887b      	ldrh	r3, [r7, #2]
 800ad9a:	9300      	str	r3, [sp, #0]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	4601      	mov	r1, r0
 800ada0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ada2:	f7ff ff09 	bl	800abb8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f003 0303 	and.w	r3, r3, #3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d010      	beq.n	800add4 <pbuf_alloc+0x1c8>
 800adb2:	4b0b      	ldr	r3, [pc, #44]	; (800ade0 <pbuf_alloc+0x1d4>)
 800adb4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800adb8:	490d      	ldr	r1, [pc, #52]	; (800adf0 <pbuf_alloc+0x1e4>)
 800adba:	480b      	ldr	r0, [pc, #44]	; (800ade8 <pbuf_alloc+0x1dc>)
 800adbc:	f00c fa02 	bl	80171c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800adc0:	e008      	b.n	800add4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800adc2:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <pbuf_alloc+0x1d4>)
 800adc4:	f240 1227 	movw	r2, #295	; 0x127
 800adc8:	490a      	ldr	r1, [pc, #40]	; (800adf4 <pbuf_alloc+0x1e8>)
 800adca:	4807      	ldr	r0, [pc, #28]	; (800ade8 <pbuf_alloc+0x1dc>)
 800adcc:	f00c f9fa 	bl	80171c4 <iprintf>
      return NULL;
 800add0:	2300      	movs	r3, #0
 800add2:	e001      	b.n	800add8 <pbuf_alloc+0x1cc>
      break;
 800add4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800add8:	4618      	mov	r0, r3
 800adda:	3728      	adds	r7, #40	; 0x28
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	0801ca54 	.word	0x0801ca54
 800ade4:	0801ca84 	.word	0x0801ca84
 800ade8:	0801cab4 	.word	0x0801cab4
 800adec:	0801cadc 	.word	0x0801cadc
 800adf0:	0801cb10 	.word	0x0801cb10
 800adf4:	0801cb3c 	.word	0x0801cb3c

0800adf8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af02      	add	r7, sp, #8
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	460b      	mov	r3, r1
 800ae02:	807b      	strh	r3, [r7, #2]
 800ae04:	4613      	mov	r3, r2
 800ae06:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ae08:	883b      	ldrh	r3, [r7, #0]
 800ae0a:	2b41      	cmp	r3, #65	; 0x41
 800ae0c:	d009      	beq.n	800ae22 <pbuf_alloc_reference+0x2a>
 800ae0e:	883b      	ldrh	r3, [r7, #0]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d006      	beq.n	800ae22 <pbuf_alloc_reference+0x2a>
 800ae14:	4b0f      	ldr	r3, [pc, #60]	; (800ae54 <pbuf_alloc_reference+0x5c>)
 800ae16:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ae1a:	490f      	ldr	r1, [pc, #60]	; (800ae58 <pbuf_alloc_reference+0x60>)
 800ae1c:	480f      	ldr	r0, [pc, #60]	; (800ae5c <pbuf_alloc_reference+0x64>)
 800ae1e:	f00c f9d1 	bl	80171c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ae22:	2007      	movs	r0, #7
 800ae24:	f7ff fb70 	bl	800a508 <memp_malloc>
 800ae28:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ae30:	2300      	movs	r3, #0
 800ae32:	e00b      	b.n	800ae4c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ae34:	8879      	ldrh	r1, [r7, #2]
 800ae36:	887a      	ldrh	r2, [r7, #2]
 800ae38:	2300      	movs	r3, #0
 800ae3a:	9301      	str	r3, [sp, #4]
 800ae3c:	883b      	ldrh	r3, [r7, #0]
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	460b      	mov	r3, r1
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7ff feb7 	bl	800abb8 <pbuf_init_alloced_pbuf>
  return p;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	0801ca54 	.word	0x0801ca54
 800ae58:	0801cb58 	.word	0x0801cb58
 800ae5c:	0801cab4 	.word	0x0801cab4

0800ae60 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af02      	add	r7, sp, #8
 800ae66:	607b      	str	r3, [r7, #4]
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	81bb      	strh	r3, [r7, #12]
 800ae70:	4613      	mov	r3, r2
 800ae72:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
 800ae76:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ae78:	8a7b      	ldrh	r3, [r7, #18]
 800ae7a:	3303      	adds	r3, #3
 800ae7c:	f023 0203 	bic.w	r2, r3, #3
 800ae80:	89bb      	ldrh	r3, [r7, #12]
 800ae82:	441a      	add	r2, r3
 800ae84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d901      	bls.n	800ae8e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	e018      	b.n	800aec0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d007      	beq.n	800aea4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ae94:	8a7b      	ldrh	r3, [r7, #18]
 800ae96:	3303      	adds	r3, #3
 800ae98:	f023 0303 	bic.w	r3, r3, #3
 800ae9c:	6a3a      	ldr	r2, [r7, #32]
 800ae9e:	4413      	add	r3, r2
 800aea0:	617b      	str	r3, [r7, #20]
 800aea2:	e001      	b.n	800aea8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800aea4:	2300      	movs	r3, #0
 800aea6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	89b9      	ldrh	r1, [r7, #12]
 800aeac:	89ba      	ldrh	r2, [r7, #12]
 800aeae:	2302      	movs	r3, #2
 800aeb0:	9301      	str	r3, [sp, #4]
 800aeb2:	897b      	ldrh	r3, [r7, #10]
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	6979      	ldr	r1, [r7, #20]
 800aeba:	f7ff fe7d 	bl	800abb8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800aebe:	687b      	ldr	r3, [r7, #4]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d106      	bne.n	800aee8 <pbuf_realloc+0x20>
 800aeda:	4b3a      	ldr	r3, [pc, #232]	; (800afc4 <pbuf_realloc+0xfc>)
 800aedc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800aee0:	4939      	ldr	r1, [pc, #228]	; (800afc8 <pbuf_realloc+0x100>)
 800aee2:	483a      	ldr	r0, [pc, #232]	; (800afcc <pbuf_realloc+0x104>)
 800aee4:	f00c f96e 	bl	80171c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	891b      	ldrh	r3, [r3, #8]
 800aeec:	887a      	ldrh	r2, [r7, #2]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d263      	bcs.n	800afba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	891a      	ldrh	r2, [r3, #8]
 800aef6:	887b      	ldrh	r3, [r7, #2]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800aefc:	887b      	ldrh	r3, [r7, #2]
 800aefe:	817b      	strh	r3, [r7, #10]
  q = p;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800af04:	e018      	b.n	800af38 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	895b      	ldrh	r3, [r3, #10]
 800af0a:	897a      	ldrh	r2, [r7, #10]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	891a      	ldrh	r2, [r3, #8]
 800af14:	893b      	ldrh	r3, [r7, #8]
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	b29a      	uxth	r2, r3
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d106      	bne.n	800af38 <pbuf_realloc+0x70>
 800af2a:	4b26      	ldr	r3, [pc, #152]	; (800afc4 <pbuf_realloc+0xfc>)
 800af2c:	f240 12af 	movw	r2, #431	; 0x1af
 800af30:	4927      	ldr	r1, [pc, #156]	; (800afd0 <pbuf_realloc+0x108>)
 800af32:	4826      	ldr	r0, [pc, #152]	; (800afcc <pbuf_realloc+0x104>)
 800af34:	f00c f946 	bl	80171c4 <iprintf>
  while (rem_len > q->len) {
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	895b      	ldrh	r3, [r3, #10]
 800af3c:	897a      	ldrh	r2, [r7, #10]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d8e1      	bhi.n	800af06 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	7b1b      	ldrb	r3, [r3, #12]
 800af46:	f003 030f 	and.w	r3, r3, #15
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d121      	bne.n	800af92 <pbuf_realloc+0xca>
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	895b      	ldrh	r3, [r3, #10]
 800af52:	897a      	ldrh	r2, [r7, #10]
 800af54:	429a      	cmp	r2, r3
 800af56:	d01c      	beq.n	800af92 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	7b5b      	ldrb	r3, [r3, #13]
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	2b00      	cmp	r3, #0
 800af62:	d116      	bne.n	800af92 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	685a      	ldr	r2, [r3, #4]
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	897b      	ldrh	r3, [r7, #10]
 800af70:	4413      	add	r3, r2
 800af72:	b29b      	uxth	r3, r3
 800af74:	4619      	mov	r1, r3
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f7ff f85c 	bl	800a034 <mem_trim>
 800af7c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d106      	bne.n	800af92 <pbuf_realloc+0xca>
 800af84:	4b0f      	ldr	r3, [pc, #60]	; (800afc4 <pbuf_realloc+0xfc>)
 800af86:	f240 12bd 	movw	r2, #445	; 0x1bd
 800af8a:	4912      	ldr	r1, [pc, #72]	; (800afd4 <pbuf_realloc+0x10c>)
 800af8c:	480f      	ldr	r0, [pc, #60]	; (800afcc <pbuf_realloc+0x104>)
 800af8e:	f00c f919 	bl	80171c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	897a      	ldrh	r2, [r7, #10]
 800af96:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	895a      	ldrh	r2, [r3, #10]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d004      	beq.n	800afb2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4618      	mov	r0, r3
 800afae:	f000 f911 	bl	800b1d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2200      	movs	r2, #0
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	e000      	b.n	800afbc <pbuf_realloc+0xf4>
    return;
 800afba:	bf00      	nop

}
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	0801ca54 	.word	0x0801ca54
 800afc8:	0801cb6c 	.word	0x0801cb6c
 800afcc:	0801cab4 	.word	0x0801cab4
 800afd0:	0801cb84 	.word	0x0801cb84
 800afd4:	0801cb9c 	.word	0x0801cb9c

0800afd8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	4613      	mov	r3, r2
 800afe4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d106      	bne.n	800affa <pbuf_add_header_impl+0x22>
 800afec:	4b2b      	ldr	r3, [pc, #172]	; (800b09c <pbuf_add_header_impl+0xc4>)
 800afee:	f240 12df 	movw	r2, #479	; 0x1df
 800aff2:	492b      	ldr	r1, [pc, #172]	; (800b0a0 <pbuf_add_header_impl+0xc8>)
 800aff4:	482b      	ldr	r0, [pc, #172]	; (800b0a4 <pbuf_add_header_impl+0xcc>)
 800aff6:	f00c f8e5 	bl	80171c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d003      	beq.n	800b008 <pbuf_add_header_impl+0x30>
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b006:	d301      	bcc.n	800b00c <pbuf_add_header_impl+0x34>
    return 1;
 800b008:	2301      	movs	r3, #1
 800b00a:	e043      	b.n	800b094 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <pbuf_add_header_impl+0x3e>
    return 0;
 800b012:	2300      	movs	r3, #0
 800b014:	e03e      	b.n	800b094 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	891a      	ldrh	r2, [r3, #8]
 800b01e:	8a7b      	ldrh	r3, [r7, #18]
 800b020:	4413      	add	r3, r2
 800b022:	b29b      	uxth	r3, r3
 800b024:	8a7a      	ldrh	r2, [r7, #18]
 800b026:	429a      	cmp	r2, r3
 800b028:	d901      	bls.n	800b02e <pbuf_add_header_impl+0x56>
    return 1;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e032      	b.n	800b094 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	7b1b      	ldrb	r3, [r3, #12]
 800b032:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b034:	8a3b      	ldrh	r3, [r7, #16]
 800b036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00c      	beq.n	800b058 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	685a      	ldr	r2, [r3, #4]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	425b      	negs	r3, r3
 800b046:	4413      	add	r3, r2
 800b048:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3310      	adds	r3, #16
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	429a      	cmp	r2, r3
 800b052:	d20d      	bcs.n	800b070 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b054:	2301      	movs	r3, #1
 800b056:	e01d      	b.n	800b094 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b058:	79fb      	ldrb	r3, [r7, #7]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d006      	beq.n	800b06c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	685a      	ldr	r2, [r3, #4]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	425b      	negs	r3, r3
 800b066:	4413      	add	r3, r2
 800b068:	617b      	str	r3, [r7, #20]
 800b06a:	e001      	b.n	800b070 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e011      	b.n	800b094 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	895a      	ldrh	r2, [r3, #10]
 800b07a:	8a7b      	ldrh	r3, [r7, #18]
 800b07c:	4413      	add	r3, r2
 800b07e:	b29a      	uxth	r2, r3
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	891a      	ldrh	r2, [r3, #8]
 800b088:	8a7b      	ldrh	r3, [r7, #18]
 800b08a:	4413      	add	r3, r2
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	811a      	strh	r2, [r3, #8]


  return 0;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3718      	adds	r7, #24
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	0801ca54 	.word	0x0801ca54
 800b0a0:	0801cbb8 	.word	0x0801cbb8
 800b0a4:	0801cab4 	.word	0x0801cab4

0800b0a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b082      	sub	sp, #8
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff ff8e 	bl	800afd8 <pbuf_add_header_impl>
 800b0bc:	4603      	mov	r3, r0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
	...

0800b0c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d106      	bne.n	800b0e6 <pbuf_remove_header+0x1e>
 800b0d8:	4b20      	ldr	r3, [pc, #128]	; (800b15c <pbuf_remove_header+0x94>)
 800b0da:	f240 224b 	movw	r2, #587	; 0x24b
 800b0de:	4920      	ldr	r1, [pc, #128]	; (800b160 <pbuf_remove_header+0x98>)
 800b0e0:	4820      	ldr	r0, [pc, #128]	; (800b164 <pbuf_remove_header+0x9c>)
 800b0e2:	f00c f86f 	bl	80171c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d003      	beq.n	800b0f4 <pbuf_remove_header+0x2c>
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0f2:	d301      	bcc.n	800b0f8 <pbuf_remove_header+0x30>
    return 1;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	e02c      	b.n	800b152 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <pbuf_remove_header+0x3a>
    return 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	e027      	b.n	800b152 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	895b      	ldrh	r3, [r3, #10]
 800b10a:	89fa      	ldrh	r2, [r7, #14]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d908      	bls.n	800b122 <pbuf_remove_header+0x5a>
 800b110:	4b12      	ldr	r3, [pc, #72]	; (800b15c <pbuf_remove_header+0x94>)
 800b112:	f240 2255 	movw	r2, #597	; 0x255
 800b116:	4914      	ldr	r1, [pc, #80]	; (800b168 <pbuf_remove_header+0xa0>)
 800b118:	4812      	ldr	r0, [pc, #72]	; (800b164 <pbuf_remove_header+0x9c>)
 800b11a:	f00c f853 	bl	80171c4 <iprintf>
 800b11e:	2301      	movs	r3, #1
 800b120:	e017      	b.n	800b152 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	441a      	add	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	895a      	ldrh	r2, [r3, #10]
 800b138:	89fb      	ldrh	r3, [r7, #14]
 800b13a:	1ad3      	subs	r3, r2, r3
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	891a      	ldrh	r2, [r3, #8]
 800b146:	89fb      	ldrh	r3, [r7, #14]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	0801ca54 	.word	0x0801ca54
 800b160:	0801cbb8 	.word	0x0801cbb8
 800b164:	0801cab4 	.word	0x0801cab4
 800b168:	0801cbc4 	.word	0x0801cbc4

0800b16c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	807b      	strh	r3, [r7, #2]
 800b178:	4613      	mov	r3, r2
 800b17a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b17c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b180:	2b00      	cmp	r3, #0
 800b182:	da08      	bge.n	800b196 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b184:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b188:	425b      	negs	r3, r3
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff ff9b 	bl	800b0c8 <pbuf_remove_header>
 800b192:	4603      	mov	r3, r0
 800b194:	e007      	b.n	800b1a6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b196:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b19a:	787a      	ldrb	r2, [r7, #1]
 800b19c:	4619      	mov	r1, r3
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f7ff ff1a 	bl	800afd8 <pbuf_add_header_impl>
 800b1a4:	4603      	mov	r3, r0
  }
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b082      	sub	sp, #8
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b1ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff ffd2 	bl	800b16c <pbuf_header_impl>
 800b1c8:	4603      	mov	r3, r0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3708      	adds	r7, #8
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}
	...

0800b1d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10b      	bne.n	800b1fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d106      	bne.n	800b1f6 <pbuf_free+0x22>
 800b1e8:	4b38      	ldr	r3, [pc, #224]	; (800b2cc <pbuf_free+0xf8>)
 800b1ea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b1ee:	4938      	ldr	r1, [pc, #224]	; (800b2d0 <pbuf_free+0xfc>)
 800b1f0:	4838      	ldr	r0, [pc, #224]	; (800b2d4 <pbuf_free+0x100>)
 800b1f2:	f00b ffe7 	bl	80171c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e063      	b.n	800b2c2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b1fe:	e05c      	b.n	800b2ba <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	7b9b      	ldrb	r3, [r3, #14]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d106      	bne.n	800b216 <pbuf_free+0x42>
 800b208:	4b30      	ldr	r3, [pc, #192]	; (800b2cc <pbuf_free+0xf8>)
 800b20a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b20e:	4932      	ldr	r1, [pc, #200]	; (800b2d8 <pbuf_free+0x104>)
 800b210:	4830      	ldr	r0, [pc, #192]	; (800b2d4 <pbuf_free+0x100>)
 800b212:	f00b ffd7 	bl	80171c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	7b9b      	ldrb	r3, [r3, #14]
 800b21a:	3b01      	subs	r3, #1
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	739a      	strb	r2, [r3, #14]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	7b9b      	ldrb	r3, [r3, #14]
 800b226:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b228:	7dbb      	ldrb	r3, [r7, #22]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d143      	bne.n	800b2b6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	7b1b      	ldrb	r3, [r3, #12]
 800b238:	f003 030f 	and.w	r3, r3, #15
 800b23c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	7b5b      	ldrb	r3, [r3, #13]
 800b242:	f003 0302 	and.w	r3, r3, #2
 800b246:	2b00      	cmp	r3, #0
 800b248:	d011      	beq.n	800b26e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d106      	bne.n	800b264 <pbuf_free+0x90>
 800b256:	4b1d      	ldr	r3, [pc, #116]	; (800b2cc <pbuf_free+0xf8>)
 800b258:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b25c:	491f      	ldr	r1, [pc, #124]	; (800b2dc <pbuf_free+0x108>)
 800b25e:	481d      	ldr	r0, [pc, #116]	; (800b2d4 <pbuf_free+0x100>)
 800b260:	f00b ffb0 	bl	80171c4 <iprintf>
        pc->custom_free_function(p);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	4798      	blx	r3
 800b26c:	e01d      	b.n	800b2aa <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
 800b270:	2b02      	cmp	r3, #2
 800b272:	d104      	bne.n	800b27e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b274:	6879      	ldr	r1, [r7, #4]
 800b276:	2008      	movs	r0, #8
 800b278:	f7ff f992 	bl	800a5a0 <memp_free>
 800b27c:	e015      	b.n	800b2aa <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d104      	bne.n	800b28e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b284:	6879      	ldr	r1, [r7, #4]
 800b286:	2007      	movs	r0, #7
 800b288:	f7ff f98a 	bl	800a5a0 <memp_free>
 800b28c:	e00d      	b.n	800b2aa <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b28e:	7bfb      	ldrb	r3, [r7, #15]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d103      	bne.n	800b29c <pbuf_free+0xc8>
          mem_free(p);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7fe fe63 	bl	8009f60 <mem_free>
 800b29a:	e006      	b.n	800b2aa <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b29c:	4b0b      	ldr	r3, [pc, #44]	; (800b2cc <pbuf_free+0xf8>)
 800b29e:	f240 320f 	movw	r2, #783	; 0x30f
 800b2a2:	490f      	ldr	r1, [pc, #60]	; (800b2e0 <pbuf_free+0x10c>)
 800b2a4:	480b      	ldr	r0, [pc, #44]	; (800b2d4 <pbuf_free+0x100>)
 800b2a6:	f00b ff8d 	bl	80171c4 <iprintf>
        }
      }
      count++;
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	607b      	str	r3, [r7, #4]
 800b2b4:	e001      	b.n	800b2ba <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d19f      	bne.n	800b200 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	0801ca54 	.word	0x0801ca54
 800b2d0:	0801cbb8 	.word	0x0801cbb8
 800b2d4:	0801cab4 	.word	0x0801cab4
 800b2d8:	0801cbe4 	.word	0x0801cbe4
 800b2dc:	0801cbfc 	.word	0x0801cbfc
 800b2e0:	0801cc20 	.word	0x0801cc20

0800b2e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b085      	sub	sp, #20
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b2f0:	e005      	b.n	800b2fe <pbuf_clen+0x1a>
    ++len;
 800b2f2:	89fb      	ldrh	r3, [r7, #14]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1f6      	bne.n	800b2f2 <pbuf_clen+0xe>
  }
  return len;
 800b304:	89fb      	ldrh	r3, [r7, #14]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr
	...

0800b314 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b082      	sub	sp, #8
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d010      	beq.n	800b344 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	7b9b      	ldrb	r3, [r3, #14]
 800b326:	3301      	adds	r3, #1
 800b328:	b2da      	uxtb	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	7b9b      	ldrb	r3, [r3, #14]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d106      	bne.n	800b344 <pbuf_ref+0x30>
 800b336:	4b05      	ldr	r3, [pc, #20]	; (800b34c <pbuf_ref+0x38>)
 800b338:	f240 3242 	movw	r2, #834	; 0x342
 800b33c:	4904      	ldr	r1, [pc, #16]	; (800b350 <pbuf_ref+0x3c>)
 800b33e:	4805      	ldr	r0, [pc, #20]	; (800b354 <pbuf_ref+0x40>)
 800b340:	f00b ff40 	bl	80171c4 <iprintf>
  }
}
 800b344:	bf00      	nop
 800b346:	3708      	adds	r7, #8
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	0801ca54 	.word	0x0801ca54
 800b350:	0801cc34 	.word	0x0801cc34
 800b354:	0801cab4 	.word	0x0801cab4

0800b358 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d002      	beq.n	800b36e <pbuf_cat+0x16>
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d107      	bne.n	800b37e <pbuf_cat+0x26>
 800b36e:	4b20      	ldr	r3, [pc, #128]	; (800b3f0 <pbuf_cat+0x98>)
 800b370:	f240 3259 	movw	r2, #857	; 0x359
 800b374:	491f      	ldr	r1, [pc, #124]	; (800b3f4 <pbuf_cat+0x9c>)
 800b376:	4820      	ldr	r0, [pc, #128]	; (800b3f8 <pbuf_cat+0xa0>)
 800b378:	f00b ff24 	bl	80171c4 <iprintf>
 800b37c:	e034      	b.n	800b3e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	60fb      	str	r3, [r7, #12]
 800b382:	e00a      	b.n	800b39a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	891a      	ldrh	r2, [r3, #8]
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	891b      	ldrh	r3, [r3, #8]
 800b38c:	4413      	add	r3, r2
 800b38e:	b29a      	uxth	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	60fb      	str	r3, [r7, #12]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1f0      	bne.n	800b384 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	891a      	ldrh	r2, [r3, #8]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	895b      	ldrh	r3, [r3, #10]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d006      	beq.n	800b3bc <pbuf_cat+0x64>
 800b3ae:	4b10      	ldr	r3, [pc, #64]	; (800b3f0 <pbuf_cat+0x98>)
 800b3b0:	f240 3262 	movw	r2, #866	; 0x362
 800b3b4:	4911      	ldr	r1, [pc, #68]	; (800b3fc <pbuf_cat+0xa4>)
 800b3b6:	4810      	ldr	r0, [pc, #64]	; (800b3f8 <pbuf_cat+0xa0>)
 800b3b8:	f00b ff04 	bl	80171c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d006      	beq.n	800b3d2 <pbuf_cat+0x7a>
 800b3c4:	4b0a      	ldr	r3, [pc, #40]	; (800b3f0 <pbuf_cat+0x98>)
 800b3c6:	f240 3263 	movw	r2, #867	; 0x363
 800b3ca:	490d      	ldr	r1, [pc, #52]	; (800b400 <pbuf_cat+0xa8>)
 800b3cc:	480a      	ldr	r0, [pc, #40]	; (800b3f8 <pbuf_cat+0xa0>)
 800b3ce:	f00b fef9 	bl	80171c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	891a      	ldrh	r2, [r3, #8]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	891b      	ldrh	r3, [r3, #8]
 800b3da:	4413      	add	r3, r2
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	683a      	ldr	r2, [r7, #0]
 800b3e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	0801ca54 	.word	0x0801ca54
 800b3f4:	0801cc48 	.word	0x0801cc48
 800b3f8:	0801cab4 	.word	0x0801cab4
 800b3fc:	0801cc80 	.word	0x0801cc80
 800b400:	0801ccb0 	.word	0x0801ccb0

0800b404 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7ff ffa1 	bl	800b358 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b416:	6838      	ldr	r0, [r7, #0]
 800b418:	f7ff ff7c 	bl	800b314 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b41c:	bf00      	nop
 800b41e:	3708      	adds	r7, #8
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b42e:	2300      	movs	r3, #0
 800b430:	617b      	str	r3, [r7, #20]
 800b432:	2300      	movs	r3, #0
 800b434:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d008      	beq.n	800b44e <pbuf_copy+0x2a>
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d005      	beq.n	800b44e <pbuf_copy+0x2a>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	891a      	ldrh	r2, [r3, #8]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	891b      	ldrh	r3, [r3, #8]
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d209      	bcs.n	800b462 <pbuf_copy+0x3e>
 800b44e:	4b57      	ldr	r3, [pc, #348]	; (800b5ac <pbuf_copy+0x188>)
 800b450:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b454:	4956      	ldr	r1, [pc, #344]	; (800b5b0 <pbuf_copy+0x18c>)
 800b456:	4857      	ldr	r0, [pc, #348]	; (800b5b4 <pbuf_copy+0x190>)
 800b458:	f00b feb4 	bl	80171c4 <iprintf>
 800b45c:	f06f 030f 	mvn.w	r3, #15
 800b460:	e09f      	b.n	800b5a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	895b      	ldrh	r3, [r3, #10]
 800b466:	461a      	mov	r2, r3
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	1ad2      	subs	r2, r2, r3
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	895b      	ldrh	r3, [r3, #10]
 800b470:	4619      	mov	r1, r3
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	1acb      	subs	r3, r1, r3
 800b476:	429a      	cmp	r2, r3
 800b478:	d306      	bcc.n	800b488 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	895b      	ldrh	r3, [r3, #10]
 800b47e:	461a      	mov	r2, r3
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	60fb      	str	r3, [r7, #12]
 800b486:	e005      	b.n	800b494 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	895b      	ldrh	r3, [r3, #10]
 800b48c:	461a      	mov	r2, r3
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	1ad3      	subs	r3, r2, r3
 800b492:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	18d0      	adds	r0, r2, r3
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	685a      	ldr	r2, [r3, #4]
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	f00b f9f2 	bl	8016890 <memcpy>
    offset_to += len;
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	895b      	ldrh	r3, [r3, #10]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d906      	bls.n	800b4d6 <pbuf_copy+0xb2>
 800b4c8:	4b38      	ldr	r3, [pc, #224]	; (800b5ac <pbuf_copy+0x188>)
 800b4ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b4ce:	493a      	ldr	r1, [pc, #232]	; (800b5b8 <pbuf_copy+0x194>)
 800b4d0:	4838      	ldr	r0, [pc, #224]	; (800b5b4 <pbuf_copy+0x190>)
 800b4d2:	f00b fe77 	bl	80171c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	895b      	ldrh	r3, [r3, #10]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d906      	bls.n	800b4f0 <pbuf_copy+0xcc>
 800b4e2:	4b32      	ldr	r3, [pc, #200]	; (800b5ac <pbuf_copy+0x188>)
 800b4e4:	f240 32da 	movw	r2, #986	; 0x3da
 800b4e8:	4934      	ldr	r1, [pc, #208]	; (800b5bc <pbuf_copy+0x198>)
 800b4ea:	4832      	ldr	r0, [pc, #200]	; (800b5b4 <pbuf_copy+0x190>)
 800b4ec:	f00b fe6a 	bl	80171c4 <iprintf>
    if (offset_from >= p_from->len) {
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	895b      	ldrh	r3, [r3, #10]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d304      	bcc.n	800b506 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	895b      	ldrh	r3, [r3, #10]
 800b50a:	461a      	mov	r2, r3
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	4293      	cmp	r3, r2
 800b510:	d114      	bne.n	800b53c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d10c      	bne.n	800b53c <pbuf_copy+0x118>
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d009      	beq.n	800b53c <pbuf_copy+0x118>
 800b528:	4b20      	ldr	r3, [pc, #128]	; (800b5ac <pbuf_copy+0x188>)
 800b52a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b52e:	4924      	ldr	r1, [pc, #144]	; (800b5c0 <pbuf_copy+0x19c>)
 800b530:	4820      	ldr	r0, [pc, #128]	; (800b5b4 <pbuf_copy+0x190>)
 800b532:	f00b fe47 	bl	80171c4 <iprintf>
 800b536:	f06f 030f 	mvn.w	r3, #15
 800b53a:	e032      	b.n	800b5a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d013      	beq.n	800b56a <pbuf_copy+0x146>
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	895a      	ldrh	r2, [r3, #10]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	891b      	ldrh	r3, [r3, #8]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d10d      	bne.n	800b56a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d009      	beq.n	800b56a <pbuf_copy+0x146>
 800b556:	4b15      	ldr	r3, [pc, #84]	; (800b5ac <pbuf_copy+0x188>)
 800b558:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b55c:	4919      	ldr	r1, [pc, #100]	; (800b5c4 <pbuf_copy+0x1a0>)
 800b55e:	4815      	ldr	r0, [pc, #84]	; (800b5b4 <pbuf_copy+0x190>)
 800b560:	f00b fe30 	bl	80171c4 <iprintf>
 800b564:	f06f 0305 	mvn.w	r3, #5
 800b568:	e01b      	b.n	800b5a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d013      	beq.n	800b598 <pbuf_copy+0x174>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	895a      	ldrh	r2, [r3, #10]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	891b      	ldrh	r3, [r3, #8]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d10d      	bne.n	800b598 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d009      	beq.n	800b598 <pbuf_copy+0x174>
 800b584:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <pbuf_copy+0x188>)
 800b586:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b58a:	490e      	ldr	r1, [pc, #56]	; (800b5c4 <pbuf_copy+0x1a0>)
 800b58c:	4809      	ldr	r0, [pc, #36]	; (800b5b4 <pbuf_copy+0x190>)
 800b58e:	f00b fe19 	bl	80171c4 <iprintf>
 800b592:	f06f 0305 	mvn.w	r3, #5
 800b596:	e004      	b.n	800b5a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f47f af61 	bne.w	800b462 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	0801ca54 	.word	0x0801ca54
 800b5b0:	0801ccfc 	.word	0x0801ccfc
 800b5b4:	0801cab4 	.word	0x0801cab4
 800b5b8:	0801cd2c 	.word	0x0801cd2c
 800b5bc:	0801cd44 	.word	0x0801cd44
 800b5c0:	0801cd60 	.word	0x0801cd60
 800b5c4:	0801cd70 	.word	0x0801cd70

0800b5c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b088      	sub	sp, #32
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	80fb      	strh	r3, [r7, #6]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d108      	bne.n	800b5fe <pbuf_copy_partial+0x36>
 800b5ec:	4b2b      	ldr	r3, [pc, #172]	; (800b69c <pbuf_copy_partial+0xd4>)
 800b5ee:	f240 420a 	movw	r2, #1034	; 0x40a
 800b5f2:	492b      	ldr	r1, [pc, #172]	; (800b6a0 <pbuf_copy_partial+0xd8>)
 800b5f4:	482b      	ldr	r0, [pc, #172]	; (800b6a4 <pbuf_copy_partial+0xdc>)
 800b5f6:	f00b fde5 	bl	80171c4 <iprintf>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e04a      	b.n	800b694 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d108      	bne.n	800b616 <pbuf_copy_partial+0x4e>
 800b604:	4b25      	ldr	r3, [pc, #148]	; (800b69c <pbuf_copy_partial+0xd4>)
 800b606:	f240 420b 	movw	r2, #1035	; 0x40b
 800b60a:	4927      	ldr	r1, [pc, #156]	; (800b6a8 <pbuf_copy_partial+0xe0>)
 800b60c:	4825      	ldr	r0, [pc, #148]	; (800b6a4 <pbuf_copy_partial+0xdc>)
 800b60e:	f00b fdd9 	bl	80171c4 <iprintf>
 800b612:	2300      	movs	r3, #0
 800b614:	e03e      	b.n	800b694 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	61fb      	str	r3, [r7, #28]
 800b61a:	e034      	b.n	800b686 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b61c:	88bb      	ldrh	r3, [r7, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00a      	beq.n	800b638 <pbuf_copy_partial+0x70>
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	895b      	ldrh	r3, [r3, #10]
 800b626:	88ba      	ldrh	r2, [r7, #4]
 800b628:	429a      	cmp	r2, r3
 800b62a:	d305      	bcc.n	800b638 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	895b      	ldrh	r3, [r3, #10]
 800b630:	88ba      	ldrh	r2, [r7, #4]
 800b632:	1ad3      	subs	r3, r2, r3
 800b634:	80bb      	strh	r3, [r7, #4]
 800b636:	e023      	b.n	800b680 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	895a      	ldrh	r2, [r3, #10]
 800b63c:	88bb      	ldrh	r3, [r7, #4]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b642:	8b3a      	ldrh	r2, [r7, #24]
 800b644:	88fb      	ldrh	r3, [r7, #6]
 800b646:	429a      	cmp	r2, r3
 800b648:	d901      	bls.n	800b64e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b64a:	88fb      	ldrh	r3, [r7, #6]
 800b64c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b64e:	8b7b      	ldrh	r3, [r7, #26]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	18d0      	adds	r0, r2, r3
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	88bb      	ldrh	r3, [r7, #4]
 800b65a:	4413      	add	r3, r2
 800b65c:	8b3a      	ldrh	r2, [r7, #24]
 800b65e:	4619      	mov	r1, r3
 800b660:	f00b f916 	bl	8016890 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b664:	8afa      	ldrh	r2, [r7, #22]
 800b666:	8b3b      	ldrh	r3, [r7, #24]
 800b668:	4413      	add	r3, r2
 800b66a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b66c:	8b7a      	ldrh	r2, [r7, #26]
 800b66e:	8b3b      	ldrh	r3, [r7, #24]
 800b670:	4413      	add	r3, r2
 800b672:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b674:	88fa      	ldrh	r2, [r7, #6]
 800b676:	8b3b      	ldrh	r3, [r7, #24]
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b67c:	2300      	movs	r3, #0
 800b67e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	61fb      	str	r3, [r7, #28]
 800b686:	88fb      	ldrh	r3, [r7, #6]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <pbuf_copy_partial+0xca>
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1c4      	bne.n	800b61c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b692:	8afb      	ldrh	r3, [r7, #22]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3720      	adds	r7, #32
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	0801ca54 	.word	0x0801ca54
 800b6a0:	0801cd9c 	.word	0x0801cd9c
 800b6a4:	0801cab4 	.word	0x0801cab4
 800b6a8:	0801cdbc 	.word	0x0801cdbc

0800b6ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	603a      	str	r2, [r7, #0]
 800b6b6:	71fb      	strb	r3, [r7, #7]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	8919      	ldrh	r1, [r3, #8]
 800b6c0:	88ba      	ldrh	r2, [r7, #4]
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7ff faa1 	bl	800ac0c <pbuf_alloc>
 800b6ca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d101      	bne.n	800b6d6 <pbuf_clone+0x2a>
    return NULL;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e011      	b.n	800b6fa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b6d6:	6839      	ldr	r1, [r7, #0]
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f7ff fea3 	bl	800b424 <pbuf_copy>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b6e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d006      	beq.n	800b6f8 <pbuf_clone+0x4c>
 800b6ea:	4b06      	ldr	r3, [pc, #24]	; (800b704 <pbuf_clone+0x58>)
 800b6ec:	f240 5224 	movw	r2, #1316	; 0x524
 800b6f0:	4905      	ldr	r1, [pc, #20]	; (800b708 <pbuf_clone+0x5c>)
 800b6f2:	4806      	ldr	r0, [pc, #24]	; (800b70c <pbuf_clone+0x60>)
 800b6f4:	f00b fd66 	bl	80171c4 <iprintf>
  return q;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	0801ca54 	.word	0x0801ca54
 800b708:	0801cec8 	.word	0x0801cec8
 800b70c:	0801cab4 	.word	0x0801cab4

0800b710 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b714:	f00b fde4 	bl	80172e0 <rand>
 800b718:	4603      	mov	r3, r0
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b720:	b29b      	uxth	r3, r3
 800b722:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b726:	b29a      	uxth	r2, r3
 800b728:	4b01      	ldr	r3, [pc, #4]	; (800b730 <tcp_init+0x20>)
 800b72a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b72c:	bf00      	nop
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	200005ba 	.word	0x200005ba

0800b734 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	7d1b      	ldrb	r3, [r3, #20]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d105      	bne.n	800b750 <tcp_free+0x1c>
 800b744:	4b06      	ldr	r3, [pc, #24]	; (800b760 <tcp_free+0x2c>)
 800b746:	22d4      	movs	r2, #212	; 0xd4
 800b748:	4906      	ldr	r1, [pc, #24]	; (800b764 <tcp_free+0x30>)
 800b74a:	4807      	ldr	r0, [pc, #28]	; (800b768 <tcp_free+0x34>)
 800b74c:	f00b fd3a 	bl	80171c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b750:	6879      	ldr	r1, [r7, #4]
 800b752:	2001      	movs	r0, #1
 800b754:	f7fe ff24 	bl	800a5a0 <memp_free>
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	0801cf54 	.word	0x0801cf54
 800b764:	0801cf84 	.word	0x0801cf84
 800b768:	0801cf98 	.word	0x0801cf98

0800b76c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	7d1b      	ldrb	r3, [r3, #20]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d105      	bne.n	800b788 <tcp_free_listen+0x1c>
 800b77c:	4b06      	ldr	r3, [pc, #24]	; (800b798 <tcp_free_listen+0x2c>)
 800b77e:	22df      	movs	r2, #223	; 0xdf
 800b780:	4906      	ldr	r1, [pc, #24]	; (800b79c <tcp_free_listen+0x30>)
 800b782:	4807      	ldr	r0, [pc, #28]	; (800b7a0 <tcp_free_listen+0x34>)
 800b784:	f00b fd1e 	bl	80171c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b788:	6879      	ldr	r1, [r7, #4]
 800b78a:	2002      	movs	r0, #2
 800b78c:	f7fe ff08 	bl	800a5a0 <memp_free>
}
 800b790:	bf00      	nop
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	0801cf54 	.word	0x0801cf54
 800b79c:	0801cfc0 	.word	0x0801cfc0
 800b7a0:	0801cf98 	.word	0x0801cf98

0800b7a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b7a8:	f001 f860 	bl	800c86c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b7ac:	4b07      	ldr	r3, [pc, #28]	; (800b7cc <tcp_tmr+0x28>)
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	4b05      	ldr	r3, [pc, #20]	; (800b7cc <tcp_tmr+0x28>)
 800b7b6:	701a      	strb	r2, [r3, #0]
 800b7b8:	4b04      	ldr	r3, [pc, #16]	; (800b7cc <tcp_tmr+0x28>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	f003 0301 	and.w	r3, r3, #1
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d001      	beq.n	800b7c8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b7c4:	f000 fd12 	bl	800c1ec <tcp_slowtmr>
  }
}
 800b7c8:	bf00      	nop
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	20001211 	.word	0x20001211

0800b7d0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d105      	bne.n	800b7ec <tcp_remove_listener+0x1c>
 800b7e0:	4b0d      	ldr	r3, [pc, #52]	; (800b818 <tcp_remove_listener+0x48>)
 800b7e2:	22ff      	movs	r2, #255	; 0xff
 800b7e4:	490d      	ldr	r1, [pc, #52]	; (800b81c <tcp_remove_listener+0x4c>)
 800b7e6:	480e      	ldr	r0, [pc, #56]	; (800b820 <tcp_remove_listener+0x50>)
 800b7e8:	f00b fcec 	bl	80171c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	60fb      	str	r3, [r7, #12]
 800b7f0:	e00a      	b.n	800b808 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d102      	bne.n	800b802 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d1f1      	bne.n	800b7f2 <tcp_remove_listener+0x22>
    }
  }
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	0801cf54 	.word	0x0801cf54
 800b81c:	0801cfdc 	.word	0x0801cfdc
 800b820:	0801cf98 	.word	0x0801cf98

0800b824 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d106      	bne.n	800b840 <tcp_listen_closed+0x1c>
 800b832:	4b14      	ldr	r3, [pc, #80]	; (800b884 <tcp_listen_closed+0x60>)
 800b834:	f240 1211 	movw	r2, #273	; 0x111
 800b838:	4913      	ldr	r1, [pc, #76]	; (800b888 <tcp_listen_closed+0x64>)
 800b83a:	4814      	ldr	r0, [pc, #80]	; (800b88c <tcp_listen_closed+0x68>)
 800b83c:	f00b fcc2 	bl	80171c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	7d1b      	ldrb	r3, [r3, #20]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d006      	beq.n	800b856 <tcp_listen_closed+0x32>
 800b848:	4b0e      	ldr	r3, [pc, #56]	; (800b884 <tcp_listen_closed+0x60>)
 800b84a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b84e:	4910      	ldr	r1, [pc, #64]	; (800b890 <tcp_listen_closed+0x6c>)
 800b850:	480e      	ldr	r0, [pc, #56]	; (800b88c <tcp_listen_closed+0x68>)
 800b852:	f00b fcb7 	bl	80171c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b856:	2301      	movs	r3, #1
 800b858:	60fb      	str	r3, [r7, #12]
 800b85a:	e00b      	b.n	800b874 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b85c:	4a0d      	ldr	r2, [pc, #52]	; (800b894 <tcp_listen_closed+0x70>)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6879      	ldr	r1, [r7, #4]
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff ffb1 	bl	800b7d0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	60fb      	str	r3, [r7, #12]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2b03      	cmp	r3, #3
 800b878:	d9f0      	bls.n	800b85c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b87a:	bf00      	nop
 800b87c:	bf00      	nop
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	0801cf54 	.word	0x0801cf54
 800b888:	0801d004 	.word	0x0801d004
 800b88c:	0801cf98 	.word	0x0801cf98
 800b890:	0801d010 	.word	0x0801d010
 800b894:	08032304 	.word	0x08032304

0800b898 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b898:	b5b0      	push	{r4, r5, r7, lr}
 800b89a:	b088      	sub	sp, #32
 800b89c:	af04      	add	r7, sp, #16
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d106      	bne.n	800b8b8 <tcp_close_shutdown+0x20>
 800b8aa:	4b63      	ldr	r3, [pc, #396]	; (800ba38 <tcp_close_shutdown+0x1a0>)
 800b8ac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b8b0:	4962      	ldr	r1, [pc, #392]	; (800ba3c <tcp_close_shutdown+0x1a4>)
 800b8b2:	4863      	ldr	r0, [pc, #396]	; (800ba40 <tcp_close_shutdown+0x1a8>)
 800b8b4:	f00b fc86 	bl	80171c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b8b8:	78fb      	ldrb	r3, [r7, #3]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d066      	beq.n	800b98c <tcp_close_shutdown+0xf4>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	7d1b      	ldrb	r3, [r3, #20]
 800b8c2:	2b04      	cmp	r3, #4
 800b8c4:	d003      	beq.n	800b8ce <tcp_close_shutdown+0x36>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	7d1b      	ldrb	r3, [r3, #20]
 800b8ca:	2b07      	cmp	r3, #7
 800b8cc:	d15e      	bne.n	800b98c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d104      	bne.n	800b8e0 <tcp_close_shutdown+0x48>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b8de:	d055      	beq.n	800b98c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	8b5b      	ldrh	r3, [r3, #26]
 800b8e4:	f003 0310 	and.w	r3, r3, #16
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d106      	bne.n	800b8fa <tcp_close_shutdown+0x62>
 800b8ec:	4b52      	ldr	r3, [pc, #328]	; (800ba38 <tcp_close_shutdown+0x1a0>)
 800b8ee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b8f2:	4954      	ldr	r1, [pc, #336]	; (800ba44 <tcp_close_shutdown+0x1ac>)
 800b8f4:	4852      	ldr	r0, [pc, #328]	; (800ba40 <tcp_close_shutdown+0x1a8>)
 800b8f6:	f00b fc65 	bl	80171c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b902:	687d      	ldr	r5, [r7, #4]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	3304      	adds	r3, #4
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	8ad2      	ldrh	r2, [r2, #22]
 800b90c:	6879      	ldr	r1, [r7, #4]
 800b90e:	8b09      	ldrh	r1, [r1, #24]
 800b910:	9102      	str	r1, [sp, #8]
 800b912:	9201      	str	r2, [sp, #4]
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	462b      	mov	r3, r5
 800b918:	4622      	mov	r2, r4
 800b91a:	4601      	mov	r1, r0
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f005 fe59 	bl	80115d4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f001 fb72 	bl	800d00c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b928:	4b47      	ldr	r3, [pc, #284]	; (800ba48 <tcp_close_shutdown+0x1b0>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	687a      	ldr	r2, [r7, #4]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d105      	bne.n	800b93e <tcp_close_shutdown+0xa6>
 800b932:	4b45      	ldr	r3, [pc, #276]	; (800ba48 <tcp_close_shutdown+0x1b0>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	4a43      	ldr	r2, [pc, #268]	; (800ba48 <tcp_close_shutdown+0x1b0>)
 800b93a:	6013      	str	r3, [r2, #0]
 800b93c:	e013      	b.n	800b966 <tcp_close_shutdown+0xce>
 800b93e:	4b42      	ldr	r3, [pc, #264]	; (800ba48 <tcp_close_shutdown+0x1b0>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	e00c      	b.n	800b960 <tcp_close_shutdown+0xc8>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d104      	bne.n	800b95a <tcp_close_shutdown+0xc2>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68da      	ldr	r2, [r3, #12]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	60da      	str	r2, [r3, #12]
 800b958:	e005      	b.n	800b966 <tcp_close_shutdown+0xce>
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	60fb      	str	r3, [r7, #12]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1ef      	bne.n	800b946 <tcp_close_shutdown+0xae>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	60da      	str	r2, [r3, #12]
 800b96c:	4b37      	ldr	r3, [pc, #220]	; (800ba4c <tcp_close_shutdown+0x1b4>)
 800b96e:	2201      	movs	r2, #1
 800b970:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b972:	4b37      	ldr	r3, [pc, #220]	; (800ba50 <tcp_close_shutdown+0x1b8>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d102      	bne.n	800b982 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b97c:	f004 f8c8 	bl	800fb10 <tcp_trigger_input_pcb_close>
 800b980:	e002      	b.n	800b988 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff fed6 	bl	800b734 <tcp_free>
      }
      return ERR_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	e050      	b.n	800ba2e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	7d1b      	ldrb	r3, [r3, #20]
 800b990:	2b02      	cmp	r3, #2
 800b992:	d03b      	beq.n	800ba0c <tcp_close_shutdown+0x174>
 800b994:	2b02      	cmp	r3, #2
 800b996:	dc44      	bgt.n	800ba22 <tcp_close_shutdown+0x18a>
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <tcp_close_shutdown+0x10a>
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d02a      	beq.n	800b9f6 <tcp_close_shutdown+0x15e>
 800b9a0:	e03f      	b.n	800ba22 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	8adb      	ldrh	r3, [r3, #22]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d021      	beq.n	800b9ee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b9aa:	4b2a      	ldr	r3, [pc, #168]	; (800ba54 <tcp_close_shutdown+0x1bc>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d105      	bne.n	800b9c0 <tcp_close_shutdown+0x128>
 800b9b4:	4b27      	ldr	r3, [pc, #156]	; (800ba54 <tcp_close_shutdown+0x1bc>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	4a26      	ldr	r2, [pc, #152]	; (800ba54 <tcp_close_shutdown+0x1bc>)
 800b9bc:	6013      	str	r3, [r2, #0]
 800b9be:	e013      	b.n	800b9e8 <tcp_close_shutdown+0x150>
 800b9c0:	4b24      	ldr	r3, [pc, #144]	; (800ba54 <tcp_close_shutdown+0x1bc>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	60bb      	str	r3, [r7, #8]
 800b9c6:	e00c      	b.n	800b9e2 <tcp_close_shutdown+0x14a>
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	687a      	ldr	r2, [r7, #4]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d104      	bne.n	800b9dc <tcp_close_shutdown+0x144>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68da      	ldr	r2, [r3, #12]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	60da      	str	r2, [r3, #12]
 800b9da:	e005      	b.n	800b9e8 <tcp_close_shutdown+0x150>
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	60bb      	str	r3, [r7, #8]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d1ef      	bne.n	800b9c8 <tcp_close_shutdown+0x130>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f7ff fea0 	bl	800b734 <tcp_free>
      break;
 800b9f4:	e01a      	b.n	800ba2c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff ff14 	bl	800b824 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b9fc:	6879      	ldr	r1, [r7, #4]
 800b9fe:	4816      	ldr	r0, [pc, #88]	; (800ba58 <tcp_close_shutdown+0x1c0>)
 800ba00:	f001 fb54 	bl	800d0ac <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f7ff feb1 	bl	800b76c <tcp_free_listen>
      break;
 800ba0a:	e00f      	b.n	800ba2c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ba0c:	6879      	ldr	r1, [r7, #4]
 800ba0e:	480e      	ldr	r0, [pc, #56]	; (800ba48 <tcp_close_shutdown+0x1b0>)
 800ba10:	f001 fb4c 	bl	800d0ac <tcp_pcb_remove>
 800ba14:	4b0d      	ldr	r3, [pc, #52]	; (800ba4c <tcp_close_shutdown+0x1b4>)
 800ba16:	2201      	movs	r2, #1
 800ba18:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7ff fe8a 	bl	800b734 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ba20:	e004      	b.n	800ba2c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f81a 	bl	800ba5c <tcp_close_shutdown_fin>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	e000      	b.n	800ba2e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bdb0      	pop	{r4, r5, r7, pc}
 800ba36:	bf00      	nop
 800ba38:	0801cf54 	.word	0x0801cf54
 800ba3c:	0801d028 	.word	0x0801d028
 800ba40:	0801cf98 	.word	0x0801cf98
 800ba44:	0801d048 	.word	0x0801d048
 800ba48:	2000d638 	.word	0x2000d638
 800ba4c:	2000d634 	.word	0x2000d634
 800ba50:	2000d64c 	.word	0x2000d64c
 800ba54:	2000d644 	.word	0x2000d644
 800ba58:	2000d640 	.word	0x2000d640

0800ba5c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d106      	bne.n	800ba78 <tcp_close_shutdown_fin+0x1c>
 800ba6a:	4b2e      	ldr	r3, [pc, #184]	; (800bb24 <tcp_close_shutdown_fin+0xc8>)
 800ba6c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ba70:	492d      	ldr	r1, [pc, #180]	; (800bb28 <tcp_close_shutdown_fin+0xcc>)
 800ba72:	482e      	ldr	r0, [pc, #184]	; (800bb2c <tcp_close_shutdown_fin+0xd0>)
 800ba74:	f00b fba6 	bl	80171c4 <iprintf>

  switch (pcb->state) {
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	7d1b      	ldrb	r3, [r3, #20]
 800ba7c:	2b07      	cmp	r3, #7
 800ba7e:	d020      	beq.n	800bac2 <tcp_close_shutdown_fin+0x66>
 800ba80:	2b07      	cmp	r3, #7
 800ba82:	dc2b      	bgt.n	800badc <tcp_close_shutdown_fin+0x80>
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d002      	beq.n	800ba8e <tcp_close_shutdown_fin+0x32>
 800ba88:	2b04      	cmp	r3, #4
 800ba8a:	d00d      	beq.n	800baa8 <tcp_close_shutdown_fin+0x4c>
 800ba8c:	e026      	b.n	800badc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f004 fea8 	bl	80107e4 <tcp_send_fin>
 800ba94:	4603      	mov	r3, r0
 800ba96:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ba98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d11f      	bne.n	800bae0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2205      	movs	r2, #5
 800baa4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800baa6:	e01b      	b.n	800bae0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f004 fe9b 	bl	80107e4 <tcp_send_fin>
 800baae:	4603      	mov	r3, r0
 800bab0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d114      	bne.n	800bae4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2205      	movs	r2, #5
 800babe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bac0:	e010      	b.n	800bae4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f004 fe8e 	bl	80107e4 <tcp_send_fin>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bacc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d109      	bne.n	800bae8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2209      	movs	r2, #9
 800bad8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bada:	e005      	b.n	800bae8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	e01c      	b.n	800bb1a <tcp_close_shutdown_fin+0xbe>
      break;
 800bae0:	bf00      	nop
 800bae2:	e002      	b.n	800baea <tcp_close_shutdown_fin+0x8e>
      break;
 800bae4:	bf00      	nop
 800bae6:	e000      	b.n	800baea <tcp_close_shutdown_fin+0x8e>
      break;
 800bae8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800baea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d103      	bne.n	800bafa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f004 ffb4 	bl	8010a60 <tcp_output>
 800baf8:	e00d      	b.n	800bb16 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bafe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb02:	d108      	bne.n	800bb16 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	8b5b      	ldrh	r3, [r3, #26]
 800bb08:	f043 0308 	orr.w	r3, r3, #8
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	e001      	b.n	800bb1a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bb16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	0801cf54 	.word	0x0801cf54
 800bb28:	0801d004 	.word	0x0801d004
 800bb2c:	0801cf98 	.word	0x0801cf98

0800bb30 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b082      	sub	sp, #8
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d109      	bne.n	800bb52 <tcp_close+0x22>
 800bb3e:	4b11      	ldr	r3, [pc, #68]	; (800bb84 <tcp_close+0x54>)
 800bb40:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bb44:	4910      	ldr	r1, [pc, #64]	; (800bb88 <tcp_close+0x58>)
 800bb46:	4811      	ldr	r0, [pc, #68]	; (800bb8c <tcp_close+0x5c>)
 800bb48:	f00b fb3c 	bl	80171c4 <iprintf>
 800bb4c:	f06f 030f 	mvn.w	r3, #15
 800bb50:	e014      	b.n	800bb7c <tcp_close+0x4c>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	7d1b      	ldrb	r3, [r3, #20]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f001 fc44 	bl	800d3e4 <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	7d1b      	ldrb	r3, [r3, #20]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d006      	beq.n	800bb72 <tcp_close+0x42>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	8b5b      	ldrh	r3, [r3, #26]
 800bb68:	f043 0310 	orr.w	r3, r3, #16
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bb72:	2101      	movs	r1, #1
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f7ff fe8f 	bl	800b898 <tcp_close_shutdown>
 800bb7a:	4603      	mov	r3, r0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	0801cf54 	.word	0x0801cf54
 800bb88:	0801d064 	.word	0x0801d064
 800bb8c:	0801cf98 	.word	0x0801cf98

0800bb90 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08e      	sub	sp, #56	; 0x38
 800bb94:	af04      	add	r7, sp, #16
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d107      	bne.n	800bbb0 <tcp_abandon+0x20>
 800bba0:	4b52      	ldr	r3, [pc, #328]	; (800bcec <tcp_abandon+0x15c>)
 800bba2:	f240 223d 	movw	r2, #573	; 0x23d
 800bba6:	4952      	ldr	r1, [pc, #328]	; (800bcf0 <tcp_abandon+0x160>)
 800bba8:	4852      	ldr	r0, [pc, #328]	; (800bcf4 <tcp_abandon+0x164>)
 800bbaa:	f00b fb0b 	bl	80171c4 <iprintf>
 800bbae:	e099      	b.n	800bce4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	7d1b      	ldrb	r3, [r3, #20]
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d106      	bne.n	800bbc6 <tcp_abandon+0x36>
 800bbb8:	4b4c      	ldr	r3, [pc, #304]	; (800bcec <tcp_abandon+0x15c>)
 800bbba:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bbbe:	494e      	ldr	r1, [pc, #312]	; (800bcf8 <tcp_abandon+0x168>)
 800bbc0:	484c      	ldr	r0, [pc, #304]	; (800bcf4 <tcp_abandon+0x164>)
 800bbc2:	f00b faff 	bl	80171c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	7d1b      	ldrb	r3, [r3, #20]
 800bbca:	2b0a      	cmp	r3, #10
 800bbcc:	d107      	bne.n	800bbde <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bbce:	6879      	ldr	r1, [r7, #4]
 800bbd0:	484a      	ldr	r0, [pc, #296]	; (800bcfc <tcp_abandon+0x16c>)
 800bbd2:	f001 fa6b 	bl	800d0ac <tcp_pcb_remove>
    tcp_free(pcb);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f7ff fdac 	bl	800b734 <tcp_free>
 800bbdc:	e082      	b.n	800bce4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7d1b      	ldrb	r3, [r3, #20]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d126      	bne.n	800bc56 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	8adb      	ldrh	r3, [r3, #22]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d02e      	beq.n	800bc6e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bc10:	4b3b      	ldr	r3, [pc, #236]	; (800bd00 <tcp_abandon+0x170>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d105      	bne.n	800bc26 <tcp_abandon+0x96>
 800bc1a:	4b39      	ldr	r3, [pc, #228]	; (800bd00 <tcp_abandon+0x170>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	4a37      	ldr	r2, [pc, #220]	; (800bd00 <tcp_abandon+0x170>)
 800bc22:	6013      	str	r3, [r2, #0]
 800bc24:	e013      	b.n	800bc4e <tcp_abandon+0xbe>
 800bc26:	4b36      	ldr	r3, [pc, #216]	; (800bd00 <tcp_abandon+0x170>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	61fb      	str	r3, [r7, #28]
 800bc2c:	e00c      	b.n	800bc48 <tcp_abandon+0xb8>
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d104      	bne.n	800bc42 <tcp_abandon+0xb2>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68da      	ldr	r2, [r3, #12]
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	60da      	str	r2, [r3, #12]
 800bc40:	e005      	b.n	800bc4e <tcp_abandon+0xbe>
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	61fb      	str	r3, [r7, #28]
 800bc48:	69fb      	ldr	r3, [r7, #28]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1ef      	bne.n	800bc2e <tcp_abandon+0x9e>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	60da      	str	r2, [r3, #12]
 800bc54:	e00b      	b.n	800bc6e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	8adb      	ldrh	r3, [r3, #22]
 800bc5e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bc60:	6879      	ldr	r1, [r7, #4]
 800bc62:	4828      	ldr	r0, [pc, #160]	; (800bd04 <tcp_abandon+0x174>)
 800bc64:	f001 fa22 	bl	800d0ac <tcp_pcb_remove>
 800bc68:	4b27      	ldr	r3, [pc, #156]	; (800bd08 <tcp_abandon+0x178>)
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d004      	beq.n	800bc80 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f000 fed6 	bl	800ca2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d004      	beq.n	800bc92 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f000 fecd 	bl	800ca2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d004      	beq.n	800bca4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 fec4 	bl	800ca2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00e      	beq.n	800bcc8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bcaa:	6879      	ldr	r1, [r7, #4]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	8b12      	ldrh	r2, [r2, #24]
 800bcb4:	9202      	str	r2, [sp, #8]
 800bcb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bcb8:	9201      	str	r2, [sp, #4]
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	69b9      	ldr	r1, [r7, #24]
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f005 fc86 	bl	80115d4 <tcp_rst>
    }
    last_state = pcb->state;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	7d1b      	ldrb	r3, [r3, #20]
 800bccc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7ff fd30 	bl	800b734 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d004      	beq.n	800bce4 <tcp_abandon+0x154>
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f06f 010c 	mvn.w	r1, #12
 800bce0:	68f8      	ldr	r0, [r7, #12]
 800bce2:	4798      	blx	r3
  }
}
 800bce4:	3728      	adds	r7, #40	; 0x28
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
 800bcea:	bf00      	nop
 800bcec:	0801cf54 	.word	0x0801cf54
 800bcf0:	0801d098 	.word	0x0801d098
 800bcf4:	0801cf98 	.word	0x0801cf98
 800bcf8:	0801d0b4 	.word	0x0801d0b4
 800bcfc:	2000d648 	.word	0x2000d648
 800bd00:	2000d644 	.word	0x2000d644
 800bd04:	2000d638 	.word	0x2000d638
 800bd08:	2000d634 	.word	0x2000d634

0800bd0c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bd14:	2101      	movs	r1, #1
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7ff ff3a 	bl	800bb90 <tcp_abandon>
}
 800bd1c:	bf00      	nop
 800bd1e:	3708      	adds	r7, #8
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b088      	sub	sp, #32
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800bd32:	2304      	movs	r3, #4
 800bd34:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800bd3c:	4b3e      	ldr	r3, [pc, #248]	; (800be38 <tcp_bind+0x114>)
 800bd3e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d109      	bne.n	800bd5a <tcp_bind+0x36>
 800bd46:	4b3d      	ldr	r3, [pc, #244]	; (800be3c <tcp_bind+0x118>)
 800bd48:	f240 22a9 	movw	r2, #681	; 0x2a9
 800bd4c:	493c      	ldr	r1, [pc, #240]	; (800be40 <tcp_bind+0x11c>)
 800bd4e:	483d      	ldr	r0, [pc, #244]	; (800be44 <tcp_bind+0x120>)
 800bd50:	f00b fa38 	bl	80171c4 <iprintf>
 800bd54:	f06f 030f 	mvn.w	r3, #15
 800bd58:	e06a      	b.n	800be30 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	7d1b      	ldrb	r3, [r3, #20]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d009      	beq.n	800bd76 <tcp_bind+0x52>
 800bd62:	4b36      	ldr	r3, [pc, #216]	; (800be3c <tcp_bind+0x118>)
 800bd64:	f240 22ab 	movw	r2, #683	; 0x2ab
 800bd68:	4937      	ldr	r1, [pc, #220]	; (800be48 <tcp_bind+0x124>)
 800bd6a:	4836      	ldr	r0, [pc, #216]	; (800be44 <tcp_bind+0x120>)
 800bd6c:	f00b fa2a 	bl	80171c4 <iprintf>
 800bd70:	f06f 0305 	mvn.w	r3, #5
 800bd74:	e05c      	b.n	800be30 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800bd76:	88fb      	ldrh	r3, [r7, #6]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d109      	bne.n	800bd90 <tcp_bind+0x6c>
    port = tcp_new_port();
 800bd7c:	f000 f9f0 	bl	800c160 <tcp_new_port>
 800bd80:	4603      	mov	r3, r0
 800bd82:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800bd84:	88fb      	ldrh	r3, [r7, #6]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d135      	bne.n	800bdf6 <tcp_bind+0xd2>
      return ERR_BUF;
 800bd8a:	f06f 0301 	mvn.w	r3, #1
 800bd8e:	e04f      	b.n	800be30 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800bd90:	2300      	movs	r3, #0
 800bd92:	61fb      	str	r3, [r7, #28]
 800bd94:	e02b      	b.n	800bdee <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800bd96:	4a2d      	ldr	r2, [pc, #180]	; (800be4c <tcp_bind+0x128>)
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	61bb      	str	r3, [r7, #24]
 800bda2:	e01e      	b.n	800bde2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800bda4:	69bb      	ldr	r3, [r7, #24]
 800bda6:	8adb      	ldrh	r3, [r3, #22]
 800bda8:	88fa      	ldrh	r2, [r7, #6]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d116      	bne.n	800bddc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800bdae:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d010      	beq.n	800bdd6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00c      	beq.n	800bdd6 <tcp_bind+0xb2>
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d009      	beq.n	800bdd6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d102      	bne.n	800bddc <tcp_bind+0xb8>
              return ERR_USE;
 800bdd6:	f06f 0307 	mvn.w	r3, #7
 800bdda:	e029      	b.n	800be30 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	61bb      	str	r3, [r7, #24]
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d1dd      	bne.n	800bda4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	3301      	adds	r3, #1
 800bdec:	61fb      	str	r3, [r7, #28]
 800bdee:	69fa      	ldr	r2, [r7, #28]
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	dbcf      	blt.n	800bd96 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00c      	beq.n	800be16 <tcp_bind+0xf2>
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d008      	beq.n	800be16 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <tcp_bind+0xec>
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	e000      	b.n	800be12 <tcp_bind+0xee>
 800be10:	2300      	movs	r3, #0
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	88fa      	ldrh	r2, [r7, #6]
 800be1a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800be1c:	4b0c      	ldr	r3, [pc, #48]	; (800be50 <tcp_bind+0x12c>)
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	60da      	str	r2, [r3, #12]
 800be24:	4a0a      	ldr	r2, [pc, #40]	; (800be50 <tcp_bind+0x12c>)
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	f005 fd95 	bl	8011958 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	3720      	adds	r7, #32
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}
 800be38:	0803233c 	.word	0x0803233c
 800be3c:	0801cf54 	.word	0x0801cf54
 800be40:	0801d0e8 	.word	0x0801d0e8
 800be44:	0801cf98 	.word	0x0801cf98
 800be48:	0801d100 	.word	0x0801d100
 800be4c:	08032304 	.word	0x08032304
 800be50:	2000d644 	.word	0x2000d644

0800be54 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	4613      	mov	r3, r2
 800be60:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d106      	bne.n	800be76 <tcp_accept_null+0x22>
 800be68:	4b07      	ldr	r3, [pc, #28]	; (800be88 <tcp_accept_null+0x34>)
 800be6a:	f240 320f 	movw	r2, #783	; 0x30f
 800be6e:	4907      	ldr	r1, [pc, #28]	; (800be8c <tcp_accept_null+0x38>)
 800be70:	4807      	ldr	r0, [pc, #28]	; (800be90 <tcp_accept_null+0x3c>)
 800be72:	f00b f9a7 	bl	80171c4 <iprintf>

  tcp_abort(pcb);
 800be76:	68b8      	ldr	r0, [r7, #8]
 800be78:	f7ff ff48 	bl	800bd0c <tcp_abort>

  return ERR_ABRT;
 800be7c:	f06f 030c 	mvn.w	r3, #12
}
 800be80:	4618      	mov	r0, r3
 800be82:	3710      	adds	r7, #16
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	0801cf54 	.word	0x0801cf54
 800be8c:	0801d128 	.word	0x0801d128
 800be90:	0801cf98 	.word	0x0801cf98

0800be94 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	460b      	mov	r3, r1
 800be9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800bea0:	78fb      	ldrb	r3, [r7, #3]
 800bea2:	2200      	movs	r2, #0
 800bea4:	4619      	mov	r1, r3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 f806 	bl	800beb8 <tcp_listen_with_backlog_and_err>
 800beac:	4603      	mov	r3, r0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3708      	adds	r7, #8
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	460b      	mov	r3, r1
 800bec2:	607a      	str	r2, [r7, #4]
 800bec4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d109      	bne.n	800bee4 <tcp_listen_with_backlog_and_err+0x2c>
 800bed0:	4b47      	ldr	r3, [pc, #284]	; (800bff0 <tcp_listen_with_backlog_and_err+0x138>)
 800bed2:	f240 3259 	movw	r2, #857	; 0x359
 800bed6:	4947      	ldr	r1, [pc, #284]	; (800bff4 <tcp_listen_with_backlog_and_err+0x13c>)
 800bed8:	4847      	ldr	r0, [pc, #284]	; (800bff8 <tcp_listen_with_backlog_and_err+0x140>)
 800beda:	f00b f973 	bl	80171c4 <iprintf>
 800bede:	23f0      	movs	r3, #240	; 0xf0
 800bee0:	76fb      	strb	r3, [r7, #27]
 800bee2:	e079      	b.n	800bfd8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	7d1b      	ldrb	r3, [r3, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d009      	beq.n	800bf00 <tcp_listen_with_backlog_and_err+0x48>
 800beec:	4b40      	ldr	r3, [pc, #256]	; (800bff0 <tcp_listen_with_backlog_and_err+0x138>)
 800beee:	f240 325a 	movw	r2, #858	; 0x35a
 800bef2:	4942      	ldr	r1, [pc, #264]	; (800bffc <tcp_listen_with_backlog_and_err+0x144>)
 800bef4:	4840      	ldr	r0, [pc, #256]	; (800bff8 <tcp_listen_with_backlog_and_err+0x140>)
 800bef6:	f00b f965 	bl	80171c4 <iprintf>
 800befa:	23f1      	movs	r3, #241	; 0xf1
 800befc:	76fb      	strb	r3, [r7, #27]
 800befe:	e06b      	b.n	800bfd8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	7d1b      	ldrb	r3, [r3, #20]
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d104      	bne.n	800bf12 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800bf0c:	23f7      	movs	r3, #247	; 0xf7
 800bf0e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800bf10:	e062      	b.n	800bfd8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800bf12:	2002      	movs	r0, #2
 800bf14:	f7fe faf8 	bl	800a508 <memp_malloc>
 800bf18:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d102      	bne.n	800bf26 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800bf20:	23ff      	movs	r3, #255	; 0xff
 800bf22:	76fb      	strb	r3, [r7, #27]
    goto done;
 800bf24:	e058      	b.n	800bfd8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	691a      	ldr	r2, [r3, #16]
 800bf2a:	69fb      	ldr	r3, [r7, #28]
 800bf2c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	8ada      	ldrh	r2, [r3, #22]
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	7d5a      	ldrb	r2, [r3, #21]
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	7a5a      	ldrb	r2, [r3, #9]
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	7ada      	ldrb	r2, [r3, #11]
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	7a9a      	ldrb	r2, [r3, #10]
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	8adb      	ldrh	r3, [r3, #22]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d021      	beq.n	800bfb6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800bf72:	4b23      	ldr	r3, [pc, #140]	; (800c000 <tcp_listen_with_backlog_and_err+0x148>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d105      	bne.n	800bf88 <tcp_listen_with_backlog_and_err+0xd0>
 800bf7c:	4b20      	ldr	r3, [pc, #128]	; (800c000 <tcp_listen_with_backlog_and_err+0x148>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	4a1f      	ldr	r2, [pc, #124]	; (800c000 <tcp_listen_with_backlog_and_err+0x148>)
 800bf84:	6013      	str	r3, [r2, #0]
 800bf86:	e013      	b.n	800bfb0 <tcp_listen_with_backlog_and_err+0xf8>
 800bf88:	4b1d      	ldr	r3, [pc, #116]	; (800c000 <tcp_listen_with_backlog_and_err+0x148>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	617b      	str	r3, [r7, #20]
 800bf8e:	e00c      	b.n	800bfaa <tcp_listen_with_backlog_and_err+0xf2>
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d104      	bne.n	800bfa4 <tcp_listen_with_backlog_and_err+0xec>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	68da      	ldr	r2, [r3, #12]
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	60da      	str	r2, [r3, #12]
 800bfa2:	e005      	b.n	800bfb0 <tcp_listen_with_backlog_and_err+0xf8>
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	617b      	str	r3, [r7, #20]
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1ef      	bne.n	800bf90 <tcp_listen_with_backlog_and_err+0xd8>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800bfb6:	68f8      	ldr	r0, [r7, #12]
 800bfb8:	f7ff fbbc 	bl	800b734 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	4a11      	ldr	r2, [pc, #68]	; (800c004 <tcp_listen_with_backlog_and_err+0x14c>)
 800bfc0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800bfc2:	4b11      	ldr	r3, [pc, #68]	; (800c008 <tcp_listen_with_backlog_and_err+0x150>)
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	60da      	str	r2, [r3, #12]
 800bfca:	4a0f      	ldr	r2, [pc, #60]	; (800c008 <tcp_listen_with_backlog_and_err+0x150>)
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	f005 fcc2 	bl	8011958 <tcp_timer_needed>
  res = ERR_OK;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d002      	beq.n	800bfe4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	7efa      	ldrb	r2, [r7, #27]
 800bfe2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800bfe4:	69fb      	ldr	r3, [r7, #28]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3720      	adds	r7, #32
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	0801cf54 	.word	0x0801cf54
 800bff4:	0801d148 	.word	0x0801d148
 800bff8:	0801cf98 	.word	0x0801cf98
 800bffc:	0801d178 	.word	0x0801d178
 800c000:	2000d644 	.word	0x2000d644
 800c004:	0800be55 	.word	0x0800be55
 800c008:	2000d640 	.word	0x2000d640

0800c00c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d106      	bne.n	800c028 <tcp_update_rcv_ann_wnd+0x1c>
 800c01a:	4b25      	ldr	r3, [pc, #148]	; (800c0b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800c01c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c020:	4924      	ldr	r1, [pc, #144]	; (800c0b4 <tcp_update_rcv_ann_wnd+0xa8>)
 800c022:	4825      	ldr	r0, [pc, #148]	; (800c0b8 <tcp_update_rcv_ann_wnd+0xac>)
 800c024:	f00b f8ce 	bl	80171c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c030:	4413      	add	r3, r2
 800c032:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c03c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c040:	bf28      	it	cs
 800c042:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c046:	b292      	uxth	r2, r2
 800c048:	4413      	add	r3, r2
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	2b00      	cmp	r3, #0
 800c050:	db08      	blt.n	800c064 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	e020      	b.n	800c0a6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	2b00      	cmp	r3, #0
 800c070:	dd03      	ble.n	800c07a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c078:	e014      	b.n	800c0a4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c08c:	d306      	bcc.n	800c09c <tcp_update_rcv_ann_wnd+0x90>
 800c08e:	4b08      	ldr	r3, [pc, #32]	; (800c0b0 <tcp_update_rcv_ann_wnd+0xa4>)
 800c090:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c094:	4909      	ldr	r1, [pc, #36]	; (800c0bc <tcp_update_rcv_ann_wnd+0xb0>)
 800c096:	4808      	ldr	r0, [pc, #32]	; (800c0b8 <tcp_update_rcv_ann_wnd+0xac>)
 800c098:	f00b f894 	bl	80171c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	b29a      	uxth	r2, r3
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c0a4:	2300      	movs	r3, #0
  }
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	0801cf54 	.word	0x0801cf54
 800c0b4:	0801d1b0 	.word	0x0801d1b0
 800c0b8:	0801cf98 	.word	0x0801cf98
 800c0bc:	0801d1d4 	.word	0x0801d1d4

0800c0c0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d107      	bne.n	800c0e2 <tcp_recved+0x22>
 800c0d2:	4b1f      	ldr	r3, [pc, #124]	; (800c150 <tcp_recved+0x90>)
 800c0d4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c0d8:	491e      	ldr	r1, [pc, #120]	; (800c154 <tcp_recved+0x94>)
 800c0da:	481f      	ldr	r0, [pc, #124]	; (800c158 <tcp_recved+0x98>)
 800c0dc:	f00b f872 	bl	80171c4 <iprintf>
 800c0e0:	e032      	b.n	800c148 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	7d1b      	ldrb	r3, [r3, #20]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d106      	bne.n	800c0f8 <tcp_recved+0x38>
 800c0ea:	4b19      	ldr	r3, [pc, #100]	; (800c150 <tcp_recved+0x90>)
 800c0ec:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c0f0:	491a      	ldr	r1, [pc, #104]	; (800c15c <tcp_recved+0x9c>)
 800c0f2:	4819      	ldr	r0, [pc, #100]	; (800c158 <tcp_recved+0x98>)
 800c0f4:	f00b f866 	bl	80171c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c0fc:	887b      	ldrh	r3, [r7, #2]
 800c0fe:	4413      	add	r3, r2
 800c100:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c102:	89fb      	ldrh	r3, [r7, #14]
 800c104:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c108:	d804      	bhi.n	800c114 <tcp_recved+0x54>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c10e:	89fa      	ldrh	r2, [r7, #14]
 800c110:	429a      	cmp	r2, r3
 800c112:	d204      	bcs.n	800c11e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c11a:	851a      	strh	r2, [r3, #40]	; 0x28
 800c11c:	e002      	b.n	800c124 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	89fa      	ldrh	r2, [r7, #14]
 800c122:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f7ff ff71 	bl	800c00c <tcp_update_rcv_ann_wnd>
 800c12a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c132:	d309      	bcc.n	800c148 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	8b5b      	ldrh	r3, [r3, #26]
 800c138:	f043 0302 	orr.w	r3, r3, #2
 800c13c:	b29a      	uxth	r2, r3
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f004 fc8c 	bl	8010a60 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	0801cf54 	.word	0x0801cf54
 800c154:	0801d1f0 	.word	0x0801d1f0
 800c158:	0801cf98 	.word	0x0801cf98
 800c15c:	0801d208 	.word	0x0801d208

0800c160 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c166:	2300      	movs	r3, #0
 800c168:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c16a:	4b1e      	ldr	r3, [pc, #120]	; (800c1e4 <tcp_new_port+0x84>)
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	3301      	adds	r3, #1
 800c170:	b29a      	uxth	r2, r3
 800c172:	4b1c      	ldr	r3, [pc, #112]	; (800c1e4 <tcp_new_port+0x84>)
 800c174:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c176:	4b1b      	ldr	r3, [pc, #108]	; (800c1e4 <tcp_new_port+0x84>)
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c17e:	4293      	cmp	r3, r2
 800c180:	d103      	bne.n	800c18a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c182:	4b18      	ldr	r3, [pc, #96]	; (800c1e4 <tcp_new_port+0x84>)
 800c184:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c188:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c18a:	2300      	movs	r3, #0
 800c18c:	71fb      	strb	r3, [r7, #7]
 800c18e:	e01e      	b.n	800c1ce <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c190:	79fb      	ldrb	r3, [r7, #7]
 800c192:	4a15      	ldr	r2, [pc, #84]	; (800c1e8 <tcp_new_port+0x88>)
 800c194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	603b      	str	r3, [r7, #0]
 800c19c:	e011      	b.n	800c1c2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	8ada      	ldrh	r2, [r3, #22]
 800c1a2:	4b10      	ldr	r3, [pc, #64]	; (800c1e4 <tcp_new_port+0x84>)
 800c1a4:	881b      	ldrh	r3, [r3, #0]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d108      	bne.n	800c1bc <tcp_new_port+0x5c>
        n++;
 800c1aa:	88bb      	ldrh	r3, [r7, #4]
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c1b0:	88bb      	ldrh	r3, [r7, #4]
 800c1b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1b6:	d3d8      	bcc.n	800c16a <tcp_new_port+0xa>
          return 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e00d      	b.n	800c1d8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	68db      	ldr	r3, [r3, #12]
 800c1c0:	603b      	str	r3, [r7, #0]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1ea      	bne.n	800c19e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c1c8:	79fb      	ldrb	r3, [r7, #7]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	71fb      	strb	r3, [r7, #7]
 800c1ce:	79fb      	ldrb	r3, [r7, #7]
 800c1d0:	2b03      	cmp	r3, #3
 800c1d2:	d9dd      	bls.n	800c190 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c1d4:	4b03      	ldr	r3, [pc, #12]	; (800c1e4 <tcp_new_port+0x84>)
 800c1d6:	881b      	ldrh	r3, [r3, #0]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	200005ba 	.word	0x200005ba
 800c1e8:	08032304 	.word	0x08032304

0800c1ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c1ec:	b5b0      	push	{r4, r5, r7, lr}
 800c1ee:	b090      	sub	sp, #64	; 0x40
 800c1f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c1f8:	4b94      	ldr	r3, [pc, #592]	; (800c44c <tcp_slowtmr+0x260>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	4a93      	ldr	r2, [pc, #588]	; (800c44c <tcp_slowtmr+0x260>)
 800c200:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c202:	4b93      	ldr	r3, [pc, #588]	; (800c450 <tcp_slowtmr+0x264>)
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	3301      	adds	r3, #1
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	4b91      	ldr	r3, [pc, #580]	; (800c450 <tcp_slowtmr+0x264>)
 800c20c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c20e:	2300      	movs	r3, #0
 800c210:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c212:	4b90      	ldr	r3, [pc, #576]	; (800c454 <tcp_slowtmr+0x268>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c218:	e29f      	b.n	800c75a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	7d1b      	ldrb	r3, [r3, #20]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <tcp_slowtmr+0x44>
 800c222:	4b8d      	ldr	r3, [pc, #564]	; (800c458 <tcp_slowtmr+0x26c>)
 800c224:	f240 42be 	movw	r2, #1214	; 0x4be
 800c228:	498c      	ldr	r1, [pc, #560]	; (800c45c <tcp_slowtmr+0x270>)
 800c22a:	488d      	ldr	r0, [pc, #564]	; (800c460 <tcp_slowtmr+0x274>)
 800c22c:	f00a ffca 	bl	80171c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c232:	7d1b      	ldrb	r3, [r3, #20]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d106      	bne.n	800c246 <tcp_slowtmr+0x5a>
 800c238:	4b87      	ldr	r3, [pc, #540]	; (800c458 <tcp_slowtmr+0x26c>)
 800c23a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c23e:	4989      	ldr	r1, [pc, #548]	; (800c464 <tcp_slowtmr+0x278>)
 800c240:	4887      	ldr	r0, [pc, #540]	; (800c460 <tcp_slowtmr+0x274>)
 800c242:	f00a ffbf 	bl	80171c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c248:	7d1b      	ldrb	r3, [r3, #20]
 800c24a:	2b0a      	cmp	r3, #10
 800c24c:	d106      	bne.n	800c25c <tcp_slowtmr+0x70>
 800c24e:	4b82      	ldr	r3, [pc, #520]	; (800c458 <tcp_slowtmr+0x26c>)
 800c250:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c254:	4984      	ldr	r1, [pc, #528]	; (800c468 <tcp_slowtmr+0x27c>)
 800c256:	4882      	ldr	r0, [pc, #520]	; (800c460 <tcp_slowtmr+0x274>)
 800c258:	f00a ffb4 	bl	80171c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25e:	7f9a      	ldrb	r2, [r3, #30]
 800c260:	4b7b      	ldr	r3, [pc, #492]	; (800c450 <tcp_slowtmr+0x264>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	429a      	cmp	r2, r3
 800c266:	d105      	bne.n	800c274 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c272:	e272      	b.n	800c75a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c274:	4b76      	ldr	r3, [pc, #472]	; (800c450 <tcp_slowtmr+0x264>)
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c282:	2300      	movs	r3, #0
 800c284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28a:	7d1b      	ldrb	r3, [r3, #20]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d10a      	bne.n	800c2a6 <tcp_slowtmr+0xba>
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c296:	2b05      	cmp	r3, #5
 800c298:	d905      	bls.n	800c2a6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c29e:	3301      	adds	r3, #1
 800c2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2a4:	e11e      	b.n	800c4e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2ac:	2b0b      	cmp	r3, #11
 800c2ae:	d905      	bls.n	800c2bc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2ba:	e113      	b.n	800c4e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d075      	beq.n	800c3b2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d006      	beq.n	800c2dc <tcp_slowtmr+0xf0>
 800c2ce:	4b62      	ldr	r3, [pc, #392]	; (800c458 <tcp_slowtmr+0x26c>)
 800c2d0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c2d4:	4965      	ldr	r1, [pc, #404]	; (800c46c <tcp_slowtmr+0x280>)
 800c2d6:	4862      	ldr	r0, [pc, #392]	; (800c460 <tcp_slowtmr+0x274>)
 800c2d8:	f00a ff74 	bl	80171c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <tcp_slowtmr+0x106>
 800c2e4:	4b5c      	ldr	r3, [pc, #368]	; (800c458 <tcp_slowtmr+0x26c>)
 800c2e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c2ea:	4961      	ldr	r1, [pc, #388]	; (800c470 <tcp_slowtmr+0x284>)
 800c2ec:	485c      	ldr	r0, [pc, #368]	; (800c460 <tcp_slowtmr+0x274>)
 800c2ee:	f00a ff69 	bl	80171c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c2f8:	2b0b      	cmp	r3, #11
 800c2fa:	d905      	bls.n	800c308 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c300:	3301      	adds	r3, #1
 800c302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c306:	e0ed      	b.n	800c4e4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c30e:	3b01      	subs	r3, #1
 800c310:	4a58      	ldr	r2, [pc, #352]	; (800c474 <tcp_slowtmr+0x288>)
 800c312:	5cd3      	ldrb	r3, [r2, r3]
 800c314:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c31c:	7c7a      	ldrb	r2, [r7, #17]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d907      	bls.n	800c332 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c324:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c328:	3301      	adds	r3, #1
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c334:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c338:	7c7a      	ldrb	r2, [r7, #17]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	f200 80d2 	bhi.w	800c4e4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c340:	2301      	movs	r3, #1
 800c342:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d108      	bne.n	800c360 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c350:	f005 fa34 	bl	80117bc <tcp_zero_window_probe>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d014      	beq.n	800c384 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c35a:	2300      	movs	r3, #0
 800c35c:	623b      	str	r3, [r7, #32]
 800c35e:	e011      	b.n	800c384 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c366:	4619      	mov	r1, r3
 800c368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c36a:	f004 f8f3 	bl	8010554 <tcp_split_unsent_seg>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d107      	bne.n	800c384 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c376:	f004 fb73 	bl	8010a60 <tcp_output>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c384:	6a3b      	ldr	r3, [r7, #32]
 800c386:	2b00      	cmp	r3, #0
 800c388:	f000 80ac 	beq.w	800c4e4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c39a:	2b06      	cmp	r3, #6
 800c39c:	f200 80a2 	bhi.w	800c4e4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c3b0:	e098      	b.n	800c4e4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	db0f      	blt.n	800c3dc <tcp_slowtmr+0x1f0>
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d008      	beq.n	800c3dc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	b21a      	sxth	r2, r3
 800c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3da:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	db7b      	blt.n	800c4e4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c3ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3ee:	f004 fe2f 	bl	8011050 <tcp_rexmit_rto_prepare>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d007      	beq.n	800c408 <tcp_slowtmr+0x21c>
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d171      	bne.n	800c4e4 <tcp_slowtmr+0x2f8>
 800c400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c404:	2b00      	cmp	r3, #0
 800c406:	d06d      	beq.n	800c4e4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	7d1b      	ldrb	r3, [r3, #20]
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d03a      	beq.n	800c486 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c416:	2b0c      	cmp	r3, #12
 800c418:	bf28      	it	cs
 800c41a:	230c      	movcs	r3, #12
 800c41c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c420:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c424:	10db      	asrs	r3, r3, #3
 800c426:	b21b      	sxth	r3, r3
 800c428:	461a      	mov	r2, r3
 800c42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c430:	4413      	add	r3, r2
 800c432:	7efa      	ldrb	r2, [r7, #27]
 800c434:	4910      	ldr	r1, [pc, #64]	; (800c478 <tcp_slowtmr+0x28c>)
 800c436:	5c8a      	ldrb	r2, [r1, r2]
 800c438:	4093      	lsls	r3, r2
 800c43a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c442:	4293      	cmp	r3, r2
 800c444:	dc1a      	bgt.n	800c47c <tcp_slowtmr+0x290>
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	b21a      	sxth	r2, r3
 800c44a:	e019      	b.n	800c480 <tcp_slowtmr+0x294>
 800c44c:	2000d63c 	.word	0x2000d63c
 800c450:	20001212 	.word	0x20001212
 800c454:	2000d638 	.word	0x2000d638
 800c458:	0801cf54 	.word	0x0801cf54
 800c45c:	0801d298 	.word	0x0801d298
 800c460:	0801cf98 	.word	0x0801cf98
 800c464:	0801d2c4 	.word	0x0801d2c4
 800c468:	0801d2f0 	.word	0x0801d2f0
 800c46c:	0801d320 	.word	0x0801d320
 800c470:	0801d354 	.word	0x0801d354
 800c474:	080322fc 	.word	0x080322fc
 800c478:	080322ec 	.word	0x080322ec
 800c47c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c482:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	2200      	movs	r2, #0
 800c48a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c494:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c498:	4293      	cmp	r3, r2
 800c49a:	bf28      	it	cs
 800c49c:	4613      	movcs	r3, r2
 800c49e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c4a0:	8a7b      	ldrh	r3, [r7, #18]
 800c4a2:	085b      	lsrs	r3, r3, #1
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4b6:	005b      	lsls	r3, r3, #1
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d206      	bcs.n	800c4cc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c4de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4e0:	f004 fe26 	bl	8011130 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	7d1b      	ldrb	r3, [r3, #20]
 800c4e8:	2b06      	cmp	r3, #6
 800c4ea:	d111      	bne.n	800c510 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ee:	8b5b      	ldrh	r3, [r3, #26]
 800c4f0:	f003 0310 	and.w	r3, r3, #16
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00b      	beq.n	800c510 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c4f8:	4b9d      	ldr	r3, [pc, #628]	; (800c770 <tcp_slowtmr+0x584>)
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	2b28      	cmp	r3, #40	; 0x28
 800c504:	d904      	bls.n	800c510 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c50a:	3301      	adds	r3, #1
 800c50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c512:	7a5b      	ldrb	r3, [r3, #9]
 800c514:	f003 0308 	and.w	r3, r3, #8
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d04c      	beq.n	800c5b6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c520:	2b04      	cmp	r3, #4
 800c522:	d003      	beq.n	800c52c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c526:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c528:	2b07      	cmp	r3, #7
 800c52a:	d144      	bne.n	800c5b6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c52c:	4b90      	ldr	r3, [pc, #576]	; (800c770 <tcp_slowtmr+0x584>)
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c532:	6a1b      	ldr	r3, [r3, #32]
 800c534:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c53c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c540:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c544:	498b      	ldr	r1, [pc, #556]	; (800c774 <tcp_slowtmr+0x588>)
 800c546:	fba1 1303 	umull	r1, r3, r1, r3
 800c54a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d90a      	bls.n	800c566 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c554:	3301      	adds	r3, #1
 800c556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c55a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c55e:	3301      	adds	r3, #1
 800c560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c564:	e027      	b.n	800c5b6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c566:	4b82      	ldr	r3, [pc, #520]	; (800c770 <tcp_slowtmr+0x584>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c572:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c578:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c57c:	4618      	mov	r0, r3
 800c57e:	4b7e      	ldr	r3, [pc, #504]	; (800c778 <tcp_slowtmr+0x58c>)
 800c580:	fb03 f300 	mul.w	r3, r3, r0
 800c584:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c586:	497b      	ldr	r1, [pc, #492]	; (800c774 <tcp_slowtmr+0x588>)
 800c588:	fba1 1303 	umull	r1, r3, r1, r3
 800c58c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c58e:	429a      	cmp	r2, r3
 800c590:	d911      	bls.n	800c5b6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c594:	f005 f8d2 	bl	801173c <tcp_keepalive>
 800c598:	4603      	mov	r3, r0
 800c59a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c59e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d107      	bne.n	800c5b6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d011      	beq.n	800c5e2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c5be:	4b6c      	ldr	r3, [pc, #432]	; (800c770 <tcp_slowtmr+0x584>)
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c4:	6a1b      	ldr	r3, [r3, #32]
 800c5c6:	1ad2      	subs	r2, r2, r3
 800c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	005b      	lsls	r3, r3, #1
 800c5d4:	440b      	add	r3, r1
 800c5d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d302      	bcc.n	800c5e2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c5dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5de:	f000 fed7 	bl	800d390 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	7d1b      	ldrb	r3, [r3, #20]
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d10b      	bne.n	800c602 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5ea:	4b61      	ldr	r3, [pc, #388]	; (800c770 <tcp_slowtmr+0x584>)
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f0:	6a1b      	ldr	r3, [r3, #32]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	2b28      	cmp	r3, #40	; 0x28
 800c5f6:	d904      	bls.n	800c602 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	7d1b      	ldrb	r3, [r3, #20]
 800c606:	2b09      	cmp	r3, #9
 800c608:	d10b      	bne.n	800c622 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c60a:	4b59      	ldr	r3, [pc, #356]	; (800c770 <tcp_slowtmr+0x584>)
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	1ad3      	subs	r3, r2, r3
 800c614:	2bf0      	cmp	r3, #240	; 0xf0
 800c616:	d904      	bls.n	800c622 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c61c:	3301      	adds	r3, #1
 800c61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c626:	2b00      	cmp	r3, #0
 800c628:	d060      	beq.n	800c6ec <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c630:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c634:	f000 fcea 	bl	800d00c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d010      	beq.n	800c660 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c63e:	4b4f      	ldr	r3, [pc, #316]	; (800c77c <tcp_slowtmr+0x590>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c644:	429a      	cmp	r2, r3
 800c646:	d106      	bne.n	800c656 <tcp_slowtmr+0x46a>
 800c648:	4b4d      	ldr	r3, [pc, #308]	; (800c780 <tcp_slowtmr+0x594>)
 800c64a:	f240 526d 	movw	r2, #1389	; 0x56d
 800c64e:	494d      	ldr	r1, [pc, #308]	; (800c784 <tcp_slowtmr+0x598>)
 800c650:	484d      	ldr	r0, [pc, #308]	; (800c788 <tcp_slowtmr+0x59c>)
 800c652:	f00a fdb7 	bl	80171c4 <iprintf>
        prev->next = pcb->next;
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	60da      	str	r2, [r3, #12]
 800c65e:	e00f      	b.n	800c680 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c660:	4b46      	ldr	r3, [pc, #280]	; (800c77c <tcp_slowtmr+0x590>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c666:	429a      	cmp	r2, r3
 800c668:	d006      	beq.n	800c678 <tcp_slowtmr+0x48c>
 800c66a:	4b45      	ldr	r3, [pc, #276]	; (800c780 <tcp_slowtmr+0x594>)
 800c66c:	f240 5271 	movw	r2, #1393	; 0x571
 800c670:	4946      	ldr	r1, [pc, #280]	; (800c78c <tcp_slowtmr+0x5a0>)
 800c672:	4845      	ldr	r0, [pc, #276]	; (800c788 <tcp_slowtmr+0x59c>)
 800c674:	f00a fda6 	bl	80171c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	4a3f      	ldr	r2, [pc, #252]	; (800c77c <tcp_slowtmr+0x590>)
 800c67e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c684:	2b00      	cmp	r3, #0
 800c686:	d013      	beq.n	800c6b0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c690:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c694:	3304      	adds	r3, #4
 800c696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c698:	8ad2      	ldrh	r2, [r2, #22]
 800c69a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c69c:	8b09      	ldrh	r1, [r1, #24]
 800c69e:	9102      	str	r1, [sp, #8]
 800c6a0:	9201      	str	r2, [sp, #4]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	462b      	mov	r3, r5
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	4601      	mov	r1, r0
 800c6aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6ac:	f004 ff92 	bl	80115d4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b2:	691b      	ldr	r3, [r3, #16]
 800c6b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c6c6:	6838      	ldr	r0, [r7, #0]
 800c6c8:	f7ff f834 	bl	800b734 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c6cc:	4b30      	ldr	r3, [pc, #192]	; (800c790 <tcp_slowtmr+0x5a4>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <tcp_slowtmr+0x4f6>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f06f 010c 	mvn.w	r1, #12
 800c6de:	68b8      	ldr	r0, [r7, #8]
 800c6e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c6e2:	4b2b      	ldr	r3, [pc, #172]	; (800c790 <tcp_slowtmr+0x5a4>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d037      	beq.n	800c75a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c6ea:	e590      	b.n	800c20e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	7f1b      	ldrb	r3, [r3, #28]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c700:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	7f1a      	ldrb	r2, [r3, #28]
 800c706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c708:	7f5b      	ldrb	r3, [r3, #29]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d325      	bcc.n	800c75a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	2200      	movs	r2, #0
 800c712:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c714:	4b1e      	ldr	r3, [pc, #120]	; (800c790 <tcp_slowtmr+0x5a4>)
 800c716:	2200      	movs	r2, #0
 800c718:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <tcp_slowtmr+0x550>
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c72a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c72c:	6912      	ldr	r2, [r2, #16]
 800c72e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c730:	4610      	mov	r0, r2
 800c732:	4798      	blx	r3
 800c734:	4603      	mov	r3, r0
 800c736:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c73a:	e002      	b.n	800c742 <tcp_slowtmr+0x556>
 800c73c:	2300      	movs	r3, #0
 800c73e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c742:	4b13      	ldr	r3, [pc, #76]	; (800c790 <tcp_slowtmr+0x5a4>)
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d000      	beq.n	800c74c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c74a:	e560      	b.n	800c20e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c74c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c750:	2b00      	cmp	r3, #0
 800c752:	d102      	bne.n	800c75a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c756:	f004 f983 	bl	8010a60 <tcp_output>
  while (pcb != NULL) {
 800c75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f47f ad5c 	bne.w	800c21a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c762:	2300      	movs	r3, #0
 800c764:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c766:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <tcp_slowtmr+0x5a8>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c76c:	e067      	b.n	800c83e <tcp_slowtmr+0x652>
 800c76e:	bf00      	nop
 800c770:	2000d63c 	.word	0x2000d63c
 800c774:	10624dd3 	.word	0x10624dd3
 800c778:	000124f8 	.word	0x000124f8
 800c77c:	2000d638 	.word	0x2000d638
 800c780:	0801cf54 	.word	0x0801cf54
 800c784:	0801d38c 	.word	0x0801d38c
 800c788:	0801cf98 	.word	0x0801cf98
 800c78c:	0801d3b8 	.word	0x0801d3b8
 800c790:	2000d634 	.word	0x2000d634
 800c794:	2000d648 	.word	0x2000d648
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	7d1b      	ldrb	r3, [r3, #20]
 800c79c:	2b0a      	cmp	r3, #10
 800c79e:	d006      	beq.n	800c7ae <tcp_slowtmr+0x5c2>
 800c7a0:	4b2b      	ldr	r3, [pc, #172]	; (800c850 <tcp_slowtmr+0x664>)
 800c7a2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c7a6:	492b      	ldr	r1, [pc, #172]	; (800c854 <tcp_slowtmr+0x668>)
 800c7a8:	482b      	ldr	r0, [pc, #172]	; (800c858 <tcp_slowtmr+0x66c>)
 800c7aa:	f00a fd0b 	bl	80171c4 <iprintf>
    pcb_remove = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c7b4:	4b29      	ldr	r3, [pc, #164]	; (800c85c <tcp_slowtmr+0x670>)
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	6a1b      	ldr	r3, [r3, #32]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	2bf0      	cmp	r3, #240	; 0xf0
 800c7c0:	d904      	bls.n	800c7cc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d02f      	beq.n	800c834 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c7d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7d6:	f000 fc19 	bl	800d00c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d010      	beq.n	800c802 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c7e0:	4b1f      	ldr	r3, [pc, #124]	; (800c860 <tcp_slowtmr+0x674>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d106      	bne.n	800c7f8 <tcp_slowtmr+0x60c>
 800c7ea:	4b19      	ldr	r3, [pc, #100]	; (800c850 <tcp_slowtmr+0x664>)
 800c7ec:	f240 52af 	movw	r2, #1455	; 0x5af
 800c7f0:	491c      	ldr	r1, [pc, #112]	; (800c864 <tcp_slowtmr+0x678>)
 800c7f2:	4819      	ldr	r0, [pc, #100]	; (800c858 <tcp_slowtmr+0x66c>)
 800c7f4:	f00a fce6 	bl	80171c4 <iprintf>
        prev->next = pcb->next;
 800c7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fa:	68da      	ldr	r2, [r3, #12]
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	60da      	str	r2, [r3, #12]
 800c800:	e00f      	b.n	800c822 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c802:	4b17      	ldr	r3, [pc, #92]	; (800c860 <tcp_slowtmr+0x674>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c808:	429a      	cmp	r2, r3
 800c80a:	d006      	beq.n	800c81a <tcp_slowtmr+0x62e>
 800c80c:	4b10      	ldr	r3, [pc, #64]	; (800c850 <tcp_slowtmr+0x664>)
 800c80e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c812:	4915      	ldr	r1, [pc, #84]	; (800c868 <tcp_slowtmr+0x67c>)
 800c814:	4810      	ldr	r0, [pc, #64]	; (800c858 <tcp_slowtmr+0x66c>)
 800c816:	f00a fcd5 	bl	80171c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	4a10      	ldr	r2, [pc, #64]	; (800c860 <tcp_slowtmr+0x674>)
 800c820:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c82c:	69f8      	ldr	r0, [r7, #28]
 800c82e:	f7fe ff81 	bl	800b734 <tcp_free>
 800c832:	e004      	b.n	800c83e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c836:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1a9      	bne.n	800c798 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop
 800c848:	3730      	adds	r7, #48	; 0x30
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bdb0      	pop	{r4, r5, r7, pc}
 800c84e:	bf00      	nop
 800c850:	0801cf54 	.word	0x0801cf54
 800c854:	0801d3e4 	.word	0x0801d3e4
 800c858:	0801cf98 	.word	0x0801cf98
 800c85c:	2000d63c 	.word	0x2000d63c
 800c860:	2000d648 	.word	0x2000d648
 800c864:	0801d414 	.word	0x0801d414
 800c868:	0801d43c 	.word	0x0801d43c

0800c86c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c872:	4b2d      	ldr	r3, [pc, #180]	; (800c928 <tcp_fasttmr+0xbc>)
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	3301      	adds	r3, #1
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	4b2b      	ldr	r3, [pc, #172]	; (800c928 <tcp_fasttmr+0xbc>)
 800c87c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c87e:	4b2b      	ldr	r3, [pc, #172]	; (800c92c <tcp_fasttmr+0xc0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c884:	e048      	b.n	800c918 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	7f9a      	ldrb	r2, [r3, #30]
 800c88a:	4b27      	ldr	r3, [pc, #156]	; (800c928 <tcp_fasttmr+0xbc>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d03f      	beq.n	800c912 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c892:	4b25      	ldr	r3, [pc, #148]	; (800c928 <tcp_fasttmr+0xbc>)
 800c894:	781a      	ldrb	r2, [r3, #0]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	8b5b      	ldrh	r3, [r3, #26]
 800c89e:	f003 0301 	and.w	r3, r3, #1
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d010      	beq.n	800c8c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	8b5b      	ldrh	r3, [r3, #26]
 800c8aa:	f043 0302 	orr.w	r3, r3, #2
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f004 f8d3 	bl	8010a60 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	8b5b      	ldrh	r3, [r3, #26]
 800c8be:	f023 0303 	bic.w	r3, r3, #3
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	8b5b      	ldrh	r3, [r3, #26]
 800c8cc:	f003 0308 	and.w	r3, r3, #8
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d009      	beq.n	800c8e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	8b5b      	ldrh	r3, [r3, #26]
 800c8d8:	f023 0308 	bic.w	r3, r3, #8
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7ff f8ba 	bl	800ba5c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00a      	beq.n	800c90c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c8f6:	4b0e      	ldr	r3, [pc, #56]	; (800c930 <tcp_fasttmr+0xc4>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f819 	bl	800c934 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c902:	4b0b      	ldr	r3, [pc, #44]	; (800c930 <tcp_fasttmr+0xc4>)
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d000      	beq.n	800c90c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c90a:	e7b8      	b.n	800c87e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	607b      	str	r3, [r7, #4]
 800c910:	e002      	b.n	800c918 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1b3      	bne.n	800c886 <tcp_fasttmr+0x1a>
    }
  }
}
 800c91e:	bf00      	nop
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	20001212 	.word	0x20001212
 800c92c:	2000d638 	.word	0x2000d638
 800c930:	2000d634 	.word	0x2000d634

0800c934 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c934:	b590      	push	{r4, r7, lr}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d109      	bne.n	800c956 <tcp_process_refused_data+0x22>
 800c942:	4b37      	ldr	r3, [pc, #220]	; (800ca20 <tcp_process_refused_data+0xec>)
 800c944:	f240 6209 	movw	r2, #1545	; 0x609
 800c948:	4936      	ldr	r1, [pc, #216]	; (800ca24 <tcp_process_refused_data+0xf0>)
 800c94a:	4837      	ldr	r0, [pc, #220]	; (800ca28 <tcp_process_refused_data+0xf4>)
 800c94c:	f00a fc3a 	bl	80171c4 <iprintf>
 800c950:	f06f 030f 	mvn.w	r3, #15
 800c954:	e060      	b.n	800ca18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c95a:	7b5b      	ldrb	r3, [r3, #13]
 800c95c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c962:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00b      	beq.n	800c98c <tcp_process_refused_data+0x58>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6918      	ldr	r0, [r3, #16]
 800c97e:	2300      	movs	r3, #0
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	6879      	ldr	r1, [r7, #4]
 800c984:	47a0      	blx	r4
 800c986:	4603      	mov	r3, r0
 800c988:	73fb      	strb	r3, [r7, #15]
 800c98a:	e007      	b.n	800c99c <tcp_process_refused_data+0x68>
 800c98c:	2300      	movs	r3, #0
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	6879      	ldr	r1, [r7, #4]
 800c992:	2000      	movs	r0, #0
 800c994:	f000 f8c4 	bl	800cb20 <tcp_recv_null>
 800c998:	4603      	mov	r3, r0
 800c99a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c99c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d12a      	bne.n	800c9fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c9a4:	7bbb      	ldrb	r3, [r7, #14]
 800c9a6:	f003 0320 	and.w	r3, r3, #32
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d033      	beq.n	800ca16 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c9b6:	d005      	beq.n	800c9c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9bc:	3301      	adds	r3, #1
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00b      	beq.n	800c9e6 <tcp_process_refused_data+0xb2>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6918      	ldr	r0, [r3, #16]
 800c9d8:	2300      	movs	r3, #0
 800c9da:	2200      	movs	r2, #0
 800c9dc:	6879      	ldr	r1, [r7, #4]
 800c9de:	47a0      	blx	r4
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	73fb      	strb	r3, [r7, #15]
 800c9e4:	e001      	b.n	800c9ea <tcp_process_refused_data+0xb6>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ee:	f113 0f0d 	cmn.w	r3, #13
 800c9f2:	d110      	bne.n	800ca16 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c9f4:	f06f 030c 	mvn.w	r3, #12
 800c9f8:	e00e      	b.n	800ca18 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9fe:	f113 0f0d 	cmn.w	r3, #13
 800ca02:	d102      	bne.n	800ca0a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ca04:	f06f 030c 	mvn.w	r3, #12
 800ca08:	e006      	b.n	800ca18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ca10:	f06f 0304 	mvn.w	r3, #4
 800ca14:	e000      	b.n	800ca18 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd90      	pop	{r4, r7, pc}
 800ca20:	0801cf54 	.word	0x0801cf54
 800ca24:	0801d464 	.word	0x0801d464
 800ca28:	0801cf98 	.word	0x0801cf98

0800ca2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ca34:	e007      	b.n	800ca46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f80a 	bl	800ca56 <tcp_seg_free>
    seg = next;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1f4      	bne.n	800ca36 <tcp_segs_free+0xa>
  }
}
 800ca4c:	bf00      	nop
 800ca4e:	bf00      	nop
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b082      	sub	sp, #8
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00f      	beq.n	800ca84 <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d007      	beq.n	800ca7c <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fe fbaf 	bl	800b1d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ca7c:	6879      	ldr	r1, [r7, #4]
 800ca7e:	2003      	movs	r0, #3
 800ca80:	f7fd fd8e 	bl	800a5a0 <memp_free>
  }
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
 800ca94:	460b      	mov	r3, r1
 800ca96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d107      	bne.n	800caae <tcp_setprio+0x22>
 800ca9e:	4b07      	ldr	r3, [pc, #28]	; (800cabc <tcp_setprio+0x30>)
 800caa0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800caa4:	4906      	ldr	r1, [pc, #24]	; (800cac0 <tcp_setprio+0x34>)
 800caa6:	4807      	ldr	r0, [pc, #28]	; (800cac4 <tcp_setprio+0x38>)
 800caa8:	f00a fb8c 	bl	80171c4 <iprintf>
 800caac:	e002      	b.n	800cab4 <tcp_setprio+0x28>

  pcb->prio = prio;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	78fa      	ldrb	r2, [r7, #3]
 800cab2:	755a      	strb	r2, [r3, #21]
}
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop
 800cabc:	0801cf54 	.word	0x0801cf54
 800cac0:	0801d48c 	.word	0x0801d48c
 800cac4:	0801cf98 	.word	0x0801cf98

0800cac8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d106      	bne.n	800cae4 <tcp_seg_copy+0x1c>
 800cad6:	4b0f      	ldr	r3, [pc, #60]	; (800cb14 <tcp_seg_copy+0x4c>)
 800cad8:	f240 6282 	movw	r2, #1666	; 0x682
 800cadc:	490e      	ldr	r1, [pc, #56]	; (800cb18 <tcp_seg_copy+0x50>)
 800cade:	480f      	ldr	r0, [pc, #60]	; (800cb1c <tcp_seg_copy+0x54>)
 800cae0:	f00a fb70 	bl	80171c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cae4:	2003      	movs	r0, #3
 800cae6:	f7fd fd0f 	bl	800a508 <memp_malloc>
 800caea:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d101      	bne.n	800caf6 <tcp_seg_copy+0x2e>
    return NULL;
 800caf2:	2300      	movs	r3, #0
 800caf4:	e00a      	b.n	800cb0c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800caf6:	2210      	movs	r2, #16
 800caf8:	6879      	ldr	r1, [r7, #4]
 800cafa:	68f8      	ldr	r0, [r7, #12]
 800cafc:	f009 fec8 	bl	8016890 <memcpy>
  pbuf_ref(cseg->p);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7fe fc05 	bl	800b314 <pbuf_ref>
  return cseg;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	0801cf54 	.word	0x0801cf54
 800cb18:	0801d4a8 	.word	0x0801d4a8
 800cb1c:	0801cf98 	.word	0x0801cf98

0800cb20 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d109      	bne.n	800cb48 <tcp_recv_null+0x28>
 800cb34:	4b12      	ldr	r3, [pc, #72]	; (800cb80 <tcp_recv_null+0x60>)
 800cb36:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cb3a:	4912      	ldr	r1, [pc, #72]	; (800cb84 <tcp_recv_null+0x64>)
 800cb3c:	4812      	ldr	r0, [pc, #72]	; (800cb88 <tcp_recv_null+0x68>)
 800cb3e:	f00a fb41 	bl	80171c4 <iprintf>
 800cb42:	f06f 030f 	mvn.w	r3, #15
 800cb46:	e016      	b.n	800cb76 <tcp_recv_null+0x56>

  if (p != NULL) {
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d009      	beq.n	800cb62 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	891b      	ldrh	r3, [r3, #8]
 800cb52:	4619      	mov	r1, r3
 800cb54:	68b8      	ldr	r0, [r7, #8]
 800cb56:	f7ff fab3 	bl	800c0c0 <tcp_recved>
    pbuf_free(p);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7fe fb3a 	bl	800b1d4 <pbuf_free>
 800cb60:	e008      	b.n	800cb74 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cb62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d104      	bne.n	800cb74 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cb6a:	68b8      	ldr	r0, [r7, #8]
 800cb6c:	f7fe ffe0 	bl	800bb30 <tcp_close>
 800cb70:	4603      	mov	r3, r0
 800cb72:	e000      	b.n	800cb76 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3710      	adds	r7, #16
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	0801cf54 	.word	0x0801cf54
 800cb84:	0801d4c4 	.word	0x0801d4c4
 800cb88:	0801cf98 	.word	0x0801cf98

0800cb8c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	4603      	mov	r3, r0
 800cb94:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cb96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	db01      	blt.n	800cba2 <tcp_kill_prio+0x16>
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	e000      	b.n	800cba4 <tcp_kill_prio+0x18>
 800cba2:	237f      	movs	r3, #127	; 0x7f
 800cba4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cba6:	7afb      	ldrb	r3, [r7, #11]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d034      	beq.n	800cc16 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cbac:	7afb      	ldrb	r3, [r7, #11]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbba:	4b19      	ldr	r3, [pc, #100]	; (800cc20 <tcp_kill_prio+0x94>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	617b      	str	r3, [r7, #20]
 800cbc0:	e01f      	b.n	800cc02 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	7d5b      	ldrb	r3, [r3, #21]
 800cbc6:	7afa      	ldrb	r2, [r7, #11]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d80c      	bhi.n	800cbe6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cbd0:	7afa      	ldrb	r2, [r7, #11]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d112      	bne.n	800cbfc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cbd6:	4b13      	ldr	r3, [pc, #76]	; (800cc24 <tcp_kill_prio+0x98>)
 800cbd8:	681a      	ldr	r2, [r3, #0]
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	6a1b      	ldr	r3, [r3, #32]
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d80a      	bhi.n	800cbfc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cbe6:	4b0f      	ldr	r3, [pc, #60]	; (800cc24 <tcp_kill_prio+0x98>)
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	6a1b      	ldr	r3, [r3, #32]
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	7d5b      	ldrb	r3, [r3, #21]
 800cbfa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	617b      	str	r3, [r7, #20]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d1dc      	bne.n	800cbc2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d004      	beq.n	800cc18 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cc0e:	6938      	ldr	r0, [r7, #16]
 800cc10:	f7ff f87c 	bl	800bd0c <tcp_abort>
 800cc14:	e000      	b.n	800cc18 <tcp_kill_prio+0x8c>
    return;
 800cc16:	bf00      	nop
  }
}
 800cc18:	3718      	adds	r7, #24
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	2000d638 	.word	0x2000d638
 800cc24:	2000d63c 	.word	0x2000d63c

0800cc28 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b086      	sub	sp, #24
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	4603      	mov	r3, r0
 800cc30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cc32:	79fb      	ldrb	r3, [r7, #7]
 800cc34:	2b08      	cmp	r3, #8
 800cc36:	d009      	beq.n	800cc4c <tcp_kill_state+0x24>
 800cc38:	79fb      	ldrb	r3, [r7, #7]
 800cc3a:	2b09      	cmp	r3, #9
 800cc3c:	d006      	beq.n	800cc4c <tcp_kill_state+0x24>
 800cc3e:	4b1a      	ldr	r3, [pc, #104]	; (800cca8 <tcp_kill_state+0x80>)
 800cc40:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cc44:	4919      	ldr	r1, [pc, #100]	; (800ccac <tcp_kill_state+0x84>)
 800cc46:	481a      	ldr	r0, [pc, #104]	; (800ccb0 <tcp_kill_state+0x88>)
 800cc48:	f00a fabc 	bl	80171c4 <iprintf>

  inactivity = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cc50:	2300      	movs	r3, #0
 800cc52:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc54:	4b17      	ldr	r3, [pc, #92]	; (800ccb4 <tcp_kill_state+0x8c>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	617b      	str	r3, [r7, #20]
 800cc5a:	e017      	b.n	800cc8c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	7d1b      	ldrb	r3, [r3, #20]
 800cc60:	79fa      	ldrb	r2, [r7, #7]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d10f      	bne.n	800cc86 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cc66:	4b14      	ldr	r3, [pc, #80]	; (800ccb8 <tcp_kill_state+0x90>)
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	6a1b      	ldr	r3, [r3, #32]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d807      	bhi.n	800cc86 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cc76:	4b10      	ldr	r3, [pc, #64]	; (800ccb8 <tcp_kill_state+0x90>)
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	6a1b      	ldr	r3, [r3, #32]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	617b      	str	r3, [r7, #20]
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1e4      	bne.n	800cc5c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d003      	beq.n	800cca0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cc98:	2100      	movs	r1, #0
 800cc9a:	6938      	ldr	r0, [r7, #16]
 800cc9c:	f7fe ff78 	bl	800bb90 <tcp_abandon>
  }
}
 800cca0:	bf00      	nop
 800cca2:	3718      	adds	r7, #24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	0801cf54 	.word	0x0801cf54
 800ccac:	0801d4e0 	.word	0x0801d4e0
 800ccb0:	0801cf98 	.word	0x0801cf98
 800ccb4:	2000d638 	.word	0x2000d638
 800ccb8:	2000d63c 	.word	0x2000d63c

0800ccbc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccca:	4b12      	ldr	r3, [pc, #72]	; (800cd14 <tcp_kill_timewait+0x58>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	60fb      	str	r3, [r7, #12]
 800ccd0:	e012      	b.n	800ccf8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ccd2:	4b11      	ldr	r3, [pc, #68]	; (800cd18 <tcp_kill_timewait+0x5c>)
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d807      	bhi.n	800ccf2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cce2:	4b0d      	ldr	r3, [pc, #52]	; (800cd18 <tcp_kill_timewait+0x5c>)
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6a1b      	ldr	r3, [r3, #32]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	60fb      	str	r3, [r7, #12]
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1e9      	bne.n	800ccd2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d002      	beq.n	800cd0a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cd04:	68b8      	ldr	r0, [r7, #8]
 800cd06:	f7ff f801 	bl	800bd0c <tcp_abort>
  }
}
 800cd0a:	bf00      	nop
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	2000d648 	.word	0x2000d648
 800cd18:	2000d63c 	.word	0x2000d63c

0800cd1c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b082      	sub	sp, #8
 800cd20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cd22:	4b10      	ldr	r3, [pc, #64]	; (800cd64 <tcp_handle_closepend+0x48>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cd28:	e014      	b.n	800cd54 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	68db      	ldr	r3, [r3, #12]
 800cd2e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	8b5b      	ldrh	r3, [r3, #26]
 800cd34:	f003 0308 	and.w	r3, r3, #8
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d009      	beq.n	800cd50 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	8b5b      	ldrh	r3, [r3, #26]
 800cd40:	f023 0308 	bic.w	r3, r3, #8
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7fe fe86 	bl	800ba5c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1e7      	bne.n	800cd2a <tcp_handle_closepend+0xe>
  }
}
 800cd5a:	bf00      	nop
 800cd5c:	bf00      	nop
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	2000d638 	.word	0x2000d638

0800cd68 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	4603      	mov	r3, r0
 800cd70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd72:	2001      	movs	r0, #1
 800cd74:	f7fd fbc8 	bl	800a508 <memp_malloc>
 800cd78:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d126      	bne.n	800cdce <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cd80:	f7ff ffcc 	bl	800cd1c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cd84:	f7ff ff9a 	bl	800ccbc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd88:	2001      	movs	r0, #1
 800cd8a:	f7fd fbbd 	bl	800a508 <memp_malloc>
 800cd8e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d11b      	bne.n	800cdce <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cd96:	2009      	movs	r0, #9
 800cd98:	f7ff ff46 	bl	800cc28 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd9c:	2001      	movs	r0, #1
 800cd9e:	f7fd fbb3 	bl	800a508 <memp_malloc>
 800cda2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d111      	bne.n	800cdce <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cdaa:	2008      	movs	r0, #8
 800cdac:	f7ff ff3c 	bl	800cc28 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdb0:	2001      	movs	r0, #1
 800cdb2:	f7fd fba9 	bl	800a508 <memp_malloc>
 800cdb6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d107      	bne.n	800cdce <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cdbe:	79fb      	ldrb	r3, [r7, #7]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff fee3 	bl	800cb8c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	f7fd fb9e 	bl	800a508 <memp_malloc>
 800cdcc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d03f      	beq.n	800ce54 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cdd4:	229c      	movs	r2, #156	; 0x9c
 800cdd6:	2100      	movs	r1, #0
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f009 fd81 	bl	80168e0 <memset>
    pcb->prio = prio;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	79fa      	ldrb	r2, [r7, #7]
 800cde2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cdea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cdf4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	22ff      	movs	r2, #255	; 0xff
 800ce02:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ce0a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2206      	movs	r2, #6
 800ce10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2206      	movs	r2, #6
 800ce18:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce20:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2201      	movs	r2, #1
 800ce26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <tcp_alloc+0xf8>)
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ce32:	4b0c      	ldr	r3, [pc, #48]	; (800ce64 <tcp_alloc+0xfc>)
 800ce34:	781a      	ldrb	r2, [r3, #0]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ce40:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	4a08      	ldr	r2, [pc, #32]	; (800ce68 <tcp_alloc+0x100>)
 800ce48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	4a07      	ldr	r2, [pc, #28]	; (800ce6c <tcp_alloc+0x104>)
 800ce50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ce54:	68fb      	ldr	r3, [r7, #12]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	2000d63c 	.word	0x2000d63c
 800ce64:	20001212 	.word	0x20001212
 800ce68:	0800cb21 	.word	0x0800cb21
 800ce6c:	006ddd00 	.word	0x006ddd00

0800ce70 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4603      	mov	r3, r0
 800ce78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ce7a:	2040      	movs	r0, #64	; 0x40
 800ce7c:	f7ff ff74 	bl	800cd68 <tcp_alloc>
 800ce80:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ce82:	68fb      	ldr	r3, [r7, #12]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}

0800ce8c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b083      	sub	sp, #12
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	611a      	str	r2, [r3, #16]
  }
}
 800cea2:	bf00      	nop
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
	...

0800ceb0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d00e      	beq.n	800cede <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7d1b      	ldrb	r3, [r3, #20]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d106      	bne.n	800ced6 <tcp_recv+0x26>
 800cec8:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <tcp_recv+0x38>)
 800ceca:	f240 72df 	movw	r2, #2015	; 0x7df
 800cece:	4907      	ldr	r1, [pc, #28]	; (800ceec <tcp_recv+0x3c>)
 800ced0:	4807      	ldr	r0, [pc, #28]	; (800cef0 <tcp_recv+0x40>)
 800ced2:	f00a f977 	bl	80171c4 <iprintf>
    pcb->recv = recv;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800cede:	bf00      	nop
 800cee0:	3708      	adds	r7, #8
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	0801cf54 	.word	0x0801cf54
 800ceec:	0801d4f0 	.word	0x0801d4f0
 800cef0:	0801cf98 	.word	0x0801cf98

0800cef4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00e      	beq.n	800cf22 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	7d1b      	ldrb	r3, [r3, #20]
 800cf08:	2b01      	cmp	r3, #1
 800cf0a:	d106      	bne.n	800cf1a <tcp_sent+0x26>
 800cf0c:	4b07      	ldr	r3, [pc, #28]	; (800cf2c <tcp_sent+0x38>)
 800cf0e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800cf12:	4907      	ldr	r1, [pc, #28]	; (800cf30 <tcp_sent+0x3c>)
 800cf14:	4807      	ldr	r0, [pc, #28]	; (800cf34 <tcp_sent+0x40>)
 800cf16:	f00a f955 	bl	80171c4 <iprintf>
    pcb->sent = sent;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800cf22:	bf00      	nop
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	0801cf54 	.word	0x0801cf54
 800cf30:	0801d518 	.word	0x0801d518
 800cf34:	0801cf98 	.word	0x0801cf98

0800cf38 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00e      	beq.n	800cf66 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	7d1b      	ldrb	r3, [r3, #20]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d106      	bne.n	800cf5e <tcp_err+0x26>
 800cf50:	4b07      	ldr	r3, [pc, #28]	; (800cf70 <tcp_err+0x38>)
 800cf52:	f640 020d 	movw	r2, #2061	; 0x80d
 800cf56:	4907      	ldr	r1, [pc, #28]	; (800cf74 <tcp_err+0x3c>)
 800cf58:	4807      	ldr	r0, [pc, #28]	; (800cf78 <tcp_err+0x40>)
 800cf5a:	f00a f933 	bl	80171c4 <iprintf>
    pcb->errf = err;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	683a      	ldr	r2, [r7, #0]
 800cf62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800cf66:	bf00      	nop
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	0801cf54 	.word	0x0801cf54
 800cf74:	0801d540 	.word	0x0801d540
 800cf78:	0801cf98 	.word	0x0801cf98

0800cf7c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d008      	beq.n	800cf9e <tcp_accept+0x22>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	7d1b      	ldrb	r3, [r3, #20]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d104      	bne.n	800cf9e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	683a      	ldr	r2, [r7, #0]
 800cf9c:	619a      	str	r2, [r3, #24]
  }
}
 800cf9e:	bf00      	nop
 800cfa0:	3714      	adds	r7, #20
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
	...

0800cfac <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d107      	bne.n	800cfd0 <tcp_poll+0x24>
 800cfc0:	4b0e      	ldr	r3, [pc, #56]	; (800cffc <tcp_poll+0x50>)
 800cfc2:	f640 023d 	movw	r2, #2109	; 0x83d
 800cfc6:	490e      	ldr	r1, [pc, #56]	; (800d000 <tcp_poll+0x54>)
 800cfc8:	480e      	ldr	r0, [pc, #56]	; (800d004 <tcp_poll+0x58>)
 800cfca:	f00a f8fb 	bl	80171c4 <iprintf>
 800cfce:	e011      	b.n	800cff4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	7d1b      	ldrb	r3, [r3, #20]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d106      	bne.n	800cfe6 <tcp_poll+0x3a>
 800cfd8:	4b08      	ldr	r3, [pc, #32]	; (800cffc <tcp_poll+0x50>)
 800cfda:	f640 023e 	movw	r2, #2110	; 0x83e
 800cfde:	490a      	ldr	r1, [pc, #40]	; (800d008 <tcp_poll+0x5c>)
 800cfe0:	4808      	ldr	r0, [pc, #32]	; (800d004 <tcp_poll+0x58>)
 800cfe2:	f00a f8ef 	bl	80171c4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	68ba      	ldr	r2, [r7, #8]
 800cfea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	79fa      	ldrb	r2, [r7, #7]
 800cff2:	775a      	strb	r2, [r3, #29]
}
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	0801cf54 	.word	0x0801cf54
 800d000:	0801d568 	.word	0x0801d568
 800d004:	0801cf98 	.word	0x0801cf98
 800d008:	0801d580 	.word	0x0801d580

0800d00c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d107      	bne.n	800d02a <tcp_pcb_purge+0x1e>
 800d01a:	4b21      	ldr	r3, [pc, #132]	; (800d0a0 <tcp_pcb_purge+0x94>)
 800d01c:	f640 0251 	movw	r2, #2129	; 0x851
 800d020:	4920      	ldr	r1, [pc, #128]	; (800d0a4 <tcp_pcb_purge+0x98>)
 800d022:	4821      	ldr	r0, [pc, #132]	; (800d0a8 <tcp_pcb_purge+0x9c>)
 800d024:	f00a f8ce 	bl	80171c4 <iprintf>
 800d028:	e037      	b.n	800d09a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	7d1b      	ldrb	r3, [r3, #20]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d033      	beq.n	800d09a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d036:	2b0a      	cmp	r3, #10
 800d038:	d02f      	beq.n	800d09a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d02b      	beq.n	800d09a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d046:	2b00      	cmp	r3, #0
 800d048:	d007      	beq.n	800d05a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d04e:	4618      	mov	r0, r3
 800d050:	f7fe f8c0 	bl	800b1d4 <pbuf_free>
      pcb->refused_data = NULL;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d002      	beq.n	800d068 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f994 	bl	800d390 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d06e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d074:	4618      	mov	r0, r3
 800d076:	f7ff fcd9 	bl	800ca2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d07e:	4618      	mov	r0, r3
 800d080:	f7ff fcd4 	bl	800ca2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	66da      	str	r2, [r3, #108]	; 0x6c
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	0801cf54 	.word	0x0801cf54
 800d0a4:	0801d5a0 	.word	0x0801d5a0
 800d0a8:	0801cf98 	.word	0x0801cf98

0800d0ac <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d106      	bne.n	800d0ca <tcp_pcb_remove+0x1e>
 800d0bc:	4b44      	ldr	r3, [pc, #272]	; (800d1d0 <tcp_pcb_remove+0x124>)
 800d0be:	f640 0283 	movw	r2, #2179	; 0x883
 800d0c2:	4944      	ldr	r1, [pc, #272]	; (800d1d4 <tcp_pcb_remove+0x128>)
 800d0c4:	4844      	ldr	r0, [pc, #272]	; (800d1d8 <tcp_pcb_remove+0x12c>)
 800d0c6:	f00a f87d 	bl	80171c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d106      	bne.n	800d0de <tcp_pcb_remove+0x32>
 800d0d0:	4b3f      	ldr	r3, [pc, #252]	; (800d1d0 <tcp_pcb_remove+0x124>)
 800d0d2:	f640 0284 	movw	r2, #2180	; 0x884
 800d0d6:	4941      	ldr	r1, [pc, #260]	; (800d1dc <tcp_pcb_remove+0x130>)
 800d0d8:	483f      	ldr	r0, [pc, #252]	; (800d1d8 <tcp_pcb_remove+0x12c>)
 800d0da:	f00a f873 	bl	80171c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d105      	bne.n	800d0f4 <tcp_pcb_remove+0x48>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	68da      	ldr	r2, [r3, #12]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	601a      	str	r2, [r3, #0]
 800d0f2:	e013      	b.n	800d11c <tcp_pcb_remove+0x70>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	60fb      	str	r3, [r7, #12]
 800d0fa:	e00c      	b.n	800d116 <tcp_pcb_remove+0x6a>
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	429a      	cmp	r2, r3
 800d104:	d104      	bne.n	800d110 <tcp_pcb_remove+0x64>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	68da      	ldr	r2, [r3, #12]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	60da      	str	r2, [r3, #12]
 800d10e:	e005      	b.n	800d11c <tcp_pcb_remove+0x70>
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	60fb      	str	r3, [r7, #12]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d1ef      	bne.n	800d0fc <tcp_pcb_remove+0x50>
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	2200      	movs	r2, #0
 800d120:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d122:	6838      	ldr	r0, [r7, #0]
 800d124:	f7ff ff72 	bl	800d00c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	7d1b      	ldrb	r3, [r3, #20]
 800d12c:	2b0a      	cmp	r3, #10
 800d12e:	d013      	beq.n	800d158 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d134:	2b01      	cmp	r3, #1
 800d136:	d00f      	beq.n	800d158 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	8b5b      	ldrh	r3, [r3, #26]
 800d13c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d140:	2b00      	cmp	r3, #0
 800d142:	d009      	beq.n	800d158 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	8b5b      	ldrh	r3, [r3, #26]
 800d148:	f043 0302 	orr.w	r3, r3, #2
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d152:	6838      	ldr	r0, [r7, #0]
 800d154:	f003 fc84 	bl	8010a60 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	7d1b      	ldrb	r3, [r3, #20]
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d020      	beq.n	800d1a2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d164:	2b00      	cmp	r3, #0
 800d166:	d006      	beq.n	800d176 <tcp_pcb_remove+0xca>
 800d168:	4b19      	ldr	r3, [pc, #100]	; (800d1d0 <tcp_pcb_remove+0x124>)
 800d16a:	f640 0293 	movw	r2, #2195	; 0x893
 800d16e:	491c      	ldr	r1, [pc, #112]	; (800d1e0 <tcp_pcb_remove+0x134>)
 800d170:	4819      	ldr	r0, [pc, #100]	; (800d1d8 <tcp_pcb_remove+0x12c>)
 800d172:	f00a f827 	bl	80171c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d006      	beq.n	800d18c <tcp_pcb_remove+0xe0>
 800d17e:	4b14      	ldr	r3, [pc, #80]	; (800d1d0 <tcp_pcb_remove+0x124>)
 800d180:	f640 0294 	movw	r2, #2196	; 0x894
 800d184:	4917      	ldr	r1, [pc, #92]	; (800d1e4 <tcp_pcb_remove+0x138>)
 800d186:	4814      	ldr	r0, [pc, #80]	; (800d1d8 <tcp_pcb_remove+0x12c>)
 800d188:	f00a f81c 	bl	80171c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d190:	2b00      	cmp	r3, #0
 800d192:	d006      	beq.n	800d1a2 <tcp_pcb_remove+0xf6>
 800d194:	4b0e      	ldr	r3, [pc, #56]	; (800d1d0 <tcp_pcb_remove+0x124>)
 800d196:	f640 0296 	movw	r2, #2198	; 0x896
 800d19a:	4913      	ldr	r1, [pc, #76]	; (800d1e8 <tcp_pcb_remove+0x13c>)
 800d19c:	480e      	ldr	r0, [pc, #56]	; (800d1d8 <tcp_pcb_remove+0x12c>)
 800d19e:	f00a f811 	bl	80171c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 800d1ae:	f000 f92f 	bl	800d410 <tcp_pcbs_sane>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d106      	bne.n	800d1c6 <tcp_pcb_remove+0x11a>
 800d1b8:	4b05      	ldr	r3, [pc, #20]	; (800d1d0 <tcp_pcb_remove+0x124>)
 800d1ba:	f640 029e 	movw	r2, #2206	; 0x89e
 800d1be:	490b      	ldr	r1, [pc, #44]	; (800d1ec <tcp_pcb_remove+0x140>)
 800d1c0:	4805      	ldr	r0, [pc, #20]	; (800d1d8 <tcp_pcb_remove+0x12c>)
 800d1c2:	f009 ffff 	bl	80171c4 <iprintf>
}
 800d1c6:	bf00      	nop
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	0801cf54 	.word	0x0801cf54
 800d1d4:	0801d5bc 	.word	0x0801d5bc
 800d1d8:	0801cf98 	.word	0x0801cf98
 800d1dc:	0801d5d8 	.word	0x0801d5d8
 800d1e0:	0801d5f8 	.word	0x0801d5f8
 800d1e4:	0801d610 	.word	0x0801d610
 800d1e8:	0801d62c 	.word	0x0801d62c
 800d1ec:	0801d644 	.word	0x0801d644

0800d1f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d106      	bne.n	800d20c <tcp_next_iss+0x1c>
 800d1fe:	4b0a      	ldr	r3, [pc, #40]	; (800d228 <tcp_next_iss+0x38>)
 800d200:	f640 02af 	movw	r2, #2223	; 0x8af
 800d204:	4909      	ldr	r1, [pc, #36]	; (800d22c <tcp_next_iss+0x3c>)
 800d206:	480a      	ldr	r0, [pc, #40]	; (800d230 <tcp_next_iss+0x40>)
 800d208:	f009 ffdc 	bl	80171c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d20c:	4b09      	ldr	r3, [pc, #36]	; (800d234 <tcp_next_iss+0x44>)
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	4b09      	ldr	r3, [pc, #36]	; (800d238 <tcp_next_iss+0x48>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4413      	add	r3, r2
 800d216:	4a07      	ldr	r2, [pc, #28]	; (800d234 <tcp_next_iss+0x44>)
 800d218:	6013      	str	r3, [r2, #0]
  return iss;
 800d21a:	4b06      	ldr	r3, [pc, #24]	; (800d234 <tcp_next_iss+0x44>)
 800d21c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	0801cf54 	.word	0x0801cf54
 800d22c:	0801d664 	.word	0x0801d664
 800d230:	0801cf98 	.word	0x0801cf98
 800d234:	200005bc 	.word	0x200005bc
 800d238:	2000d63c 	.word	0x2000d63c

0800d23c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	4603      	mov	r3, r0
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d106      	bne.n	800d25e <tcp_eff_send_mss_netif+0x22>
 800d250:	4b14      	ldr	r3, [pc, #80]	; (800d2a4 <tcp_eff_send_mss_netif+0x68>)
 800d252:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d256:	4914      	ldr	r1, [pc, #80]	; (800d2a8 <tcp_eff_send_mss_netif+0x6c>)
 800d258:	4814      	ldr	r0, [pc, #80]	; (800d2ac <tcp_eff_send_mss_netif+0x70>)
 800d25a:	f009 ffb3 	bl	80171c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d101      	bne.n	800d268 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d264:	89fb      	ldrh	r3, [r7, #14]
 800d266:	e019      	b.n	800d29c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d26c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d26e:	8afb      	ldrh	r3, [r7, #22]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d012      	beq.n	800d29a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d274:	2328      	movs	r3, #40	; 0x28
 800d276:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d278:	8afa      	ldrh	r2, [r7, #22]
 800d27a:	8abb      	ldrh	r3, [r7, #20]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d904      	bls.n	800d28a <tcp_eff_send_mss_netif+0x4e>
 800d280:	8afa      	ldrh	r2, [r7, #22]
 800d282:	8abb      	ldrh	r3, [r7, #20]
 800d284:	1ad3      	subs	r3, r2, r3
 800d286:	b29b      	uxth	r3, r3
 800d288:	e000      	b.n	800d28c <tcp_eff_send_mss_netif+0x50>
 800d28a:	2300      	movs	r3, #0
 800d28c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d28e:	8a7a      	ldrh	r2, [r7, #18]
 800d290:	89fb      	ldrh	r3, [r7, #14]
 800d292:	4293      	cmp	r3, r2
 800d294:	bf28      	it	cs
 800d296:	4613      	movcs	r3, r2
 800d298:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d29a:	89fb      	ldrh	r3, [r7, #14]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	0801cf54 	.word	0x0801cf54
 800d2a8:	0801d680 	.word	0x0801d680
 800d2ac:	0801cf98 	.word	0x0801cf98

0800d2b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d119      	bne.n	800d2f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d2c4:	4b10      	ldr	r3, [pc, #64]	; (800d308 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d2c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d2ca:	4910      	ldr	r1, [pc, #64]	; (800d30c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d2cc:	4810      	ldr	r0, [pc, #64]	; (800d310 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d2ce:	f009 ff79 	bl	80171c4 <iprintf>

  while (pcb != NULL) {
 800d2d2:	e011      	b.n	800d2f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d108      	bne.n	800d2f2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	f7fe fd10 	bl	800bd0c <tcp_abort>
      pcb = next;
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	60fb      	str	r3, [r7, #12]
 800d2f0:	e002      	b.n	800d2f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1ea      	bne.n	800d2d4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d2fe:	bf00      	nop
 800d300:	bf00      	nop
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	0801cf54 	.word	0x0801cf54
 800d30c:	0801d6a8 	.word	0x0801d6a8
 800d310:	0801cf98 	.word	0x0801cf98

0800d314 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d02a      	beq.n	800d37a <tcp_netif_ip_addr_changed+0x66>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d026      	beq.n	800d37a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d32c:	4b15      	ldr	r3, [pc, #84]	; (800d384 <tcp_netif_ip_addr_changed+0x70>)
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff ffbc 	bl	800d2b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d338:	4b13      	ldr	r3, [pc, #76]	; (800d388 <tcp_netif_ip_addr_changed+0x74>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4619      	mov	r1, r3
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff ffb6 	bl	800d2b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d017      	beq.n	800d37a <tcp_netif_ip_addr_changed+0x66>
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d013      	beq.n	800d37a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d352:	4b0e      	ldr	r3, [pc, #56]	; (800d38c <tcp_netif_ip_addr_changed+0x78>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	60fb      	str	r3, [r7, #12]
 800d358:	e00c      	b.n	800d374 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	681a      	ldr	r2, [r3, #0]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	429a      	cmp	r2, r3
 800d364:	d103      	bne.n	800d36e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	60fb      	str	r3, [r7, #12]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1ef      	bne.n	800d35a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d37a:	bf00      	nop
 800d37c:	3710      	adds	r7, #16
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	2000d638 	.word	0x2000d638
 800d388:	2000d644 	.word	0x2000d644
 800d38c:	2000d640 	.word	0x2000d640

0800d390 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d007      	beq.n	800d3b0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7ff fb41 	bl	800ca2c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <tcp_debug_print>:
 *
 * @param tcphdr pointer to a struct tcp_hdr
 */
void
tcp_debug_print(struct tcp_hdr *tcphdr)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 3 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 2 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 1 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr)      & 1),
                          lwip_ntohs(tcphdr->wnd)));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	899b      	ldrh	r3, [r3, #12]
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fc fb6a 	bl	8009aa0 <lwip_htons>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 f80f 	bl	800d3fa <tcp_debug_print_flags>
  LWIP_DEBUGF(TCP_DEBUG, ("), win)\n"));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
  LWIP_DEBUGF(TCP_DEBUG, ("|    0x%04"X16_F"     |     %5"U16_F"     | (chksum, urgp)\n",
                          lwip_ntohs(tcphdr->chksum), lwip_ntohs(tcphdr->urgp)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
}
 800d3dc:	bf00      	nop
 800d3de:	3708      	adds	r7, #8
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}

0800d3e4 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
}
 800d3ee:	bf00      	nop
 800d3f0:	370c      	adds	r7, #12
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr

0800d3fa <tcp_debug_print_flags>:
 *
 * @param flags tcp flags, all active flags are printed
 */
void
tcp_debug_print_flags(u8_t flags)
{
 800d3fa:	b480      	push	{r7}
 800d3fc:	b083      	sub	sp, #12
 800d3fe:	af00      	add	r7, sp, #0
 800d400:	4603      	mov	r3, r0
 800d402:	71fb      	strb	r3, [r7, #7]
  }
  if (flags & TCP_CWR) {
    LWIP_DEBUGF(TCP_DEBUG, ("CWR "));
  }
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
}
 800d404:	bf00      	nop
 800d406:	370c      	adds	r7, #12
 800d408:	46bd      	mov	sp, r7
 800d40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40e:	4770      	bx	lr

0800d410 <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d416:	4b22      	ldr	r3, [pc, #136]	; (800d4a0 <tcp_pcbs_sane+0x90>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	607b      	str	r3, [r7, #4]
 800d41c:	e023      	b.n	800d466 <tcp_pcbs_sane+0x56>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	7d1b      	ldrb	r3, [r3, #20]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d106      	bne.n	800d434 <tcp_pcbs_sane+0x24>
 800d426:	4b1f      	ldr	r3, [pc, #124]	; (800d4a4 <tcp_pcbs_sane+0x94>)
 800d428:	f640 12d9 	movw	r2, #2521	; 0x9d9
 800d42c:	491e      	ldr	r1, [pc, #120]	; (800d4a8 <tcp_pcbs_sane+0x98>)
 800d42e:	481f      	ldr	r0, [pc, #124]	; (800d4ac <tcp_pcbs_sane+0x9c>)
 800d430:	f009 fec8 	bl	80171c4 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7d1b      	ldrb	r3, [r3, #20]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d106      	bne.n	800d44a <tcp_pcbs_sane+0x3a>
 800d43c:	4b19      	ldr	r3, [pc, #100]	; (800d4a4 <tcp_pcbs_sane+0x94>)
 800d43e:	f640 12da 	movw	r2, #2522	; 0x9da
 800d442:	491b      	ldr	r1, [pc, #108]	; (800d4b0 <tcp_pcbs_sane+0xa0>)
 800d444:	4819      	ldr	r0, [pc, #100]	; (800d4ac <tcp_pcbs_sane+0x9c>)
 800d446:	f009 febd 	bl	80171c4 <iprintf>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	7d1b      	ldrb	r3, [r3, #20]
 800d44e:	2b0a      	cmp	r3, #10
 800d450:	d106      	bne.n	800d460 <tcp_pcbs_sane+0x50>
 800d452:	4b14      	ldr	r3, [pc, #80]	; (800d4a4 <tcp_pcbs_sane+0x94>)
 800d454:	f640 12db 	movw	r2, #2523	; 0x9db
 800d458:	4916      	ldr	r1, [pc, #88]	; (800d4b4 <tcp_pcbs_sane+0xa4>)
 800d45a:	4814      	ldr	r0, [pc, #80]	; (800d4ac <tcp_pcbs_sane+0x9c>)
 800d45c:	f009 feb2 	bl	80171c4 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	607b      	str	r3, [r7, #4]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1d8      	bne.n	800d41e <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d46c:	4b12      	ldr	r3, [pc, #72]	; (800d4b8 <tcp_pcbs_sane+0xa8>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	607b      	str	r3, [r7, #4]
 800d472:	e00d      	b.n	800d490 <tcp_pcbs_sane+0x80>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	7d1b      	ldrb	r3, [r3, #20]
 800d478:	2b0a      	cmp	r3, #10
 800d47a:	d006      	beq.n	800d48a <tcp_pcbs_sane+0x7a>
 800d47c:	4b09      	ldr	r3, [pc, #36]	; (800d4a4 <tcp_pcbs_sane+0x94>)
 800d47e:	f640 12de 	movw	r2, #2526	; 0x9de
 800d482:	490e      	ldr	r1, [pc, #56]	; (800d4bc <tcp_pcbs_sane+0xac>)
 800d484:	4809      	ldr	r0, [pc, #36]	; (800d4ac <tcp_pcbs_sane+0x9c>)
 800d486:	f009 fe9d 	bl	80171c4 <iprintf>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	607b      	str	r3, [r7, #4]
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d1ee      	bne.n	800d474 <tcp_pcbs_sane+0x64>
  }
  return 1;
 800d496:	2301      	movs	r3, #1
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	2000d638 	.word	0x2000d638
 800d4a4:	0801cf54 	.word	0x0801cf54
 800d4a8:	0801d6dc 	.word	0x0801d6dc
 800d4ac:	0801cf98 	.word	0x0801cf98
 800d4b0:	0801d708 	.word	0x0801d708
 800d4b4:	0801d734 	.word	0x0801d734
 800d4b8:	2000d648 	.word	0x2000d648
 800d4bc:	0801d764 	.word	0x0801d764

0800d4c0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d4c0:	b590      	push	{r4, r7, lr}
 800d4c2:	b08d      	sub	sp, #52	; 0x34
 800d4c4:	af04      	add	r7, sp, #16
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d105      	bne.n	800d4dc <tcp_input+0x1c>
 800d4d0:	4b9d      	ldr	r3, [pc, #628]	; (800d748 <tcp_input+0x288>)
 800d4d2:	2283      	movs	r2, #131	; 0x83
 800d4d4:	499d      	ldr	r1, [pc, #628]	; (800d74c <tcp_input+0x28c>)
 800d4d6:	489e      	ldr	r0, [pc, #632]	; (800d750 <tcp_input+0x290>)
 800d4d8:	f009 fe74 	bl	80171c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	4a9c      	ldr	r2, [pc, #624]	; (800d754 <tcp_input+0x294>)
 800d4e2:	6013      	str	r3, [r2, #0]

#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
 800d4e4:	4b9b      	ldr	r3, [pc, #620]	; (800d754 <tcp_input+0x294>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff ff65 	bl	800d3b8 <tcp_debug_print>
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	895b      	ldrh	r3, [r3, #10]
 800d4f2:	2b13      	cmp	r3, #19
 800d4f4:	f240 83f4 	bls.w	800dce0 <tcp_input+0x820>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d4f8:	4b97      	ldr	r3, [pc, #604]	; (800d758 <tcp_input+0x298>)
 800d4fa:	695b      	ldr	r3, [r3, #20]
 800d4fc:	4a96      	ldr	r2, [pc, #600]	; (800d758 <tcp_input+0x298>)
 800d4fe:	6812      	ldr	r2, [r2, #0]
 800d500:	4611      	mov	r1, r2
 800d502:	4618      	mov	r0, r3
 800d504:	f008 fa3b 	bl	801597e <ip4_addr_isbroadcast_u32>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f040 83ea 	bne.w	800dce4 <tcp_input+0x824>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d510:	4b91      	ldr	r3, [pc, #580]	; (800d758 <tcp_input+0x298>)
 800d512:	695b      	ldr	r3, [r3, #20]
 800d514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d518:	2be0      	cmp	r3, #224	; 0xe0
 800d51a:	f000 83e3 	beq.w	800dce4 <tcp_input+0x824>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d51e:	4b8d      	ldr	r3, [pc, #564]	; (800d754 <tcp_input+0x294>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	899b      	ldrh	r3, [r3, #12]
 800d524:	b29b      	uxth	r3, r3
 800d526:	4618      	mov	r0, r3
 800d528:	f7fc faba 	bl	8009aa0 <lwip_htons>
 800d52c:	4603      	mov	r3, r0
 800d52e:	0b1b      	lsrs	r3, r3, #12
 800d530:	b29b      	uxth	r3, r3
 800d532:	b2db      	uxtb	r3, r3
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d538:	7cbb      	ldrb	r3, [r7, #18]
 800d53a:	2b13      	cmp	r3, #19
 800d53c:	f240 83d4 	bls.w	800dce8 <tcp_input+0x828>
 800d540:	7cbb      	ldrb	r3, [r7, #18]
 800d542:	b29a      	uxth	r2, r3
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	891b      	ldrh	r3, [r3, #8]
 800d548:	429a      	cmp	r2, r3
 800d54a:	f200 83cd 	bhi.w	800dce8 <tcp_input+0x828>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d54e:	7cbb      	ldrb	r3, [r7, #18]
 800d550:	b29b      	uxth	r3, r3
 800d552:	3b14      	subs	r3, #20
 800d554:	b29a      	uxth	r2, r3
 800d556:	4b81      	ldr	r3, [pc, #516]	; (800d75c <tcp_input+0x29c>)
 800d558:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d55a:	4b81      	ldr	r3, [pc, #516]	; (800d760 <tcp_input+0x2a0>)
 800d55c:	2200      	movs	r2, #0
 800d55e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	895a      	ldrh	r2, [r3, #10]
 800d564:	7cbb      	ldrb	r3, [r7, #18]
 800d566:	b29b      	uxth	r3, r3
 800d568:	429a      	cmp	r2, r3
 800d56a:	d309      	bcc.n	800d580 <tcp_input+0xc0>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d56c:	4b7b      	ldr	r3, [pc, #492]	; (800d75c <tcp_input+0x29c>)
 800d56e:	881a      	ldrh	r2, [r3, #0]
 800d570:	4b7c      	ldr	r3, [pc, #496]	; (800d764 <tcp_input+0x2a4>)
 800d572:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d574:	7cbb      	ldrb	r3, [r7, #18]
 800d576:	4619      	mov	r1, r3
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f7fd fda5 	bl	800b0c8 <pbuf_remove_header>
 800d57e:	e04e      	b.n	800d61e <tcp_input+0x15e>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d105      	bne.n	800d594 <tcp_input+0xd4>
 800d588:	4b6f      	ldr	r3, [pc, #444]	; (800d748 <tcp_input+0x288>)
 800d58a:	22c2      	movs	r2, #194	; 0xc2
 800d58c:	4976      	ldr	r1, [pc, #472]	; (800d768 <tcp_input+0x2a8>)
 800d58e:	4870      	ldr	r0, [pc, #448]	; (800d750 <tcp_input+0x290>)
 800d590:	f009 fe18 	bl	80171c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d594:	2114      	movs	r1, #20
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f7fd fd96 	bl	800b0c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	895a      	ldrh	r2, [r3, #10]
 800d5a0:	4b70      	ldr	r3, [pc, #448]	; (800d764 <tcp_input+0x2a4>)
 800d5a2:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d5a4:	4b6d      	ldr	r3, [pc, #436]	; (800d75c <tcp_input+0x29c>)
 800d5a6:	881a      	ldrh	r2, [r3, #0]
 800d5a8:	4b6e      	ldr	r3, [pc, #440]	; (800d764 <tcp_input+0x2a4>)
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	1ad3      	subs	r3, r2, r3
 800d5ae:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d5b0:	4b6c      	ldr	r3, [pc, #432]	; (800d764 <tcp_input+0x2a4>)
 800d5b2:	881b      	ldrh	r3, [r3, #0]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7fd fd86 	bl	800b0c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	895b      	ldrh	r3, [r3, #10]
 800d5c2:	8a3a      	ldrh	r2, [r7, #16]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	f200 8391 	bhi.w	800dcec <tcp_input+0x82c>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	4a63      	ldr	r2, [pc, #396]	; (800d760 <tcp_input+0x2a0>)
 800d5d2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	8a3a      	ldrh	r2, [r7, #16]
 800d5da:	4611      	mov	r1, r2
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fd fd73 	bl	800b0c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	891a      	ldrh	r2, [r3, #8]
 800d5e6:	8a3b      	ldrh	r3, [r7, #16]
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	b29a      	uxth	r2, r3
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	895b      	ldrh	r3, [r3, #10]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d005      	beq.n	800d604 <tcp_input+0x144>
 800d5f8:	4b53      	ldr	r3, [pc, #332]	; (800d748 <tcp_input+0x288>)
 800d5fa:	22df      	movs	r2, #223	; 0xdf
 800d5fc:	495b      	ldr	r1, [pc, #364]	; (800d76c <tcp_input+0x2ac>)
 800d5fe:	4854      	ldr	r0, [pc, #336]	; (800d750 <tcp_input+0x290>)
 800d600:	f009 fde0 	bl	80171c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	891a      	ldrh	r2, [r3, #8]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	891b      	ldrh	r3, [r3, #8]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d005      	beq.n	800d61e <tcp_input+0x15e>
 800d612:	4b4d      	ldr	r3, [pc, #308]	; (800d748 <tcp_input+0x288>)
 800d614:	22e0      	movs	r2, #224	; 0xe0
 800d616:	4956      	ldr	r1, [pc, #344]	; (800d770 <tcp_input+0x2b0>)
 800d618:	484d      	ldr	r0, [pc, #308]	; (800d750 <tcp_input+0x290>)
 800d61a:	f009 fdd3 	bl	80171c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d61e:	4b4d      	ldr	r3, [pc, #308]	; (800d754 <tcp_input+0x294>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	881b      	ldrh	r3, [r3, #0]
 800d624:	b29b      	uxth	r3, r3
 800d626:	4a4b      	ldr	r2, [pc, #300]	; (800d754 <tcp_input+0x294>)
 800d628:	6814      	ldr	r4, [r2, #0]
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fc fa38 	bl	8009aa0 <lwip_htons>
 800d630:	4603      	mov	r3, r0
 800d632:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d634:	4b47      	ldr	r3, [pc, #284]	; (800d754 <tcp_input+0x294>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	885b      	ldrh	r3, [r3, #2]
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	4a45      	ldr	r2, [pc, #276]	; (800d754 <tcp_input+0x294>)
 800d63e:	6814      	ldr	r4, [r2, #0]
 800d640:	4618      	mov	r0, r3
 800d642:	f7fc fa2d 	bl	8009aa0 <lwip_htons>
 800d646:	4603      	mov	r3, r0
 800d648:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d64a:	4b42      	ldr	r3, [pc, #264]	; (800d754 <tcp_input+0x294>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	4a40      	ldr	r2, [pc, #256]	; (800d754 <tcp_input+0x294>)
 800d652:	6814      	ldr	r4, [r2, #0]
 800d654:	4618      	mov	r0, r3
 800d656:	f7fc fa38 	bl	8009aca <lwip_htonl>
 800d65a:	4603      	mov	r3, r0
 800d65c:	6063      	str	r3, [r4, #4]
 800d65e:	6863      	ldr	r3, [r4, #4]
 800d660:	4a44      	ldr	r2, [pc, #272]	; (800d774 <tcp_input+0x2b4>)
 800d662:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d664:	4b3b      	ldr	r3, [pc, #236]	; (800d754 <tcp_input+0x294>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	4a3a      	ldr	r2, [pc, #232]	; (800d754 <tcp_input+0x294>)
 800d66c:	6814      	ldr	r4, [r2, #0]
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fc fa2b 	bl	8009aca <lwip_htonl>
 800d674:	4603      	mov	r3, r0
 800d676:	60a3      	str	r3, [r4, #8]
 800d678:	68a3      	ldr	r3, [r4, #8]
 800d67a:	4a3f      	ldr	r2, [pc, #252]	; (800d778 <tcp_input+0x2b8>)
 800d67c:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d67e:	4b35      	ldr	r3, [pc, #212]	; (800d754 <tcp_input+0x294>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	89db      	ldrh	r3, [r3, #14]
 800d684:	b29b      	uxth	r3, r3
 800d686:	4a33      	ldr	r2, [pc, #204]	; (800d754 <tcp_input+0x294>)
 800d688:	6814      	ldr	r4, [r2, #0]
 800d68a:	4618      	mov	r0, r3
 800d68c:	f7fc fa08 	bl	8009aa0 <lwip_htons>
 800d690:	4603      	mov	r3, r0
 800d692:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d694:	4b2f      	ldr	r3, [pc, #188]	; (800d754 <tcp_input+0x294>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	899b      	ldrh	r3, [r3, #12]
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fc f9ff 	bl	8009aa0 <lwip_htons>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	4b33      	ldr	r3, [pc, #204]	; (800d77c <tcp_input+0x2bc>)
 800d6ae:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	891a      	ldrh	r2, [r3, #8]
 800d6b4:	4b32      	ldr	r3, [pc, #200]	; (800d780 <tcp_input+0x2c0>)
 800d6b6:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d6b8:	4b30      	ldr	r3, [pc, #192]	; (800d77c <tcp_input+0x2bc>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	f003 0303 	and.w	r3, r3, #3
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d00c      	beq.n	800d6de <tcp_input+0x21e>
    tcplen++;
 800d6c4:	4b2e      	ldr	r3, [pc, #184]	; (800d780 <tcp_input+0x2c0>)
 800d6c6:	881b      	ldrh	r3, [r3, #0]
 800d6c8:	3301      	adds	r3, #1
 800d6ca:	b29a      	uxth	r2, r3
 800d6cc:	4b2c      	ldr	r3, [pc, #176]	; (800d780 <tcp_input+0x2c0>)
 800d6ce:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	891a      	ldrh	r2, [r3, #8]
 800d6d4:	4b2a      	ldr	r3, [pc, #168]	; (800d780 <tcp_input+0x2c0>)
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	f200 8309 	bhi.w	800dcf0 <tcp_input+0x830>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6e2:	4b28      	ldr	r3, [pc, #160]	; (800d784 <tcp_input+0x2c4>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	61fb      	str	r3, [r7, #28]
 800d6e8:	e09c      	b.n	800d824 <tcp_input+0x364>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	7d1b      	ldrb	r3, [r3, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d105      	bne.n	800d6fe <tcp_input+0x23e>
 800d6f2:	4b15      	ldr	r3, [pc, #84]	; (800d748 <tcp_input+0x288>)
 800d6f4:	22fb      	movs	r2, #251	; 0xfb
 800d6f6:	4924      	ldr	r1, [pc, #144]	; (800d788 <tcp_input+0x2c8>)
 800d6f8:	4815      	ldr	r0, [pc, #84]	; (800d750 <tcp_input+0x290>)
 800d6fa:	f009 fd63 	bl	80171c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	7d1b      	ldrb	r3, [r3, #20]
 800d702:	2b0a      	cmp	r3, #10
 800d704:	d105      	bne.n	800d712 <tcp_input+0x252>
 800d706:	4b10      	ldr	r3, [pc, #64]	; (800d748 <tcp_input+0x288>)
 800d708:	22fc      	movs	r2, #252	; 0xfc
 800d70a:	4920      	ldr	r1, [pc, #128]	; (800d78c <tcp_input+0x2cc>)
 800d70c:	4810      	ldr	r0, [pc, #64]	; (800d750 <tcp_input+0x290>)
 800d70e:	f009 fd59 	bl	80171c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	7d1b      	ldrb	r3, [r3, #20]
 800d716:	2b01      	cmp	r3, #1
 800d718:	d105      	bne.n	800d726 <tcp_input+0x266>
 800d71a:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <tcp_input+0x288>)
 800d71c:	22fd      	movs	r2, #253	; 0xfd
 800d71e:	491c      	ldr	r1, [pc, #112]	; (800d790 <tcp_input+0x2d0>)
 800d720:	480b      	ldr	r0, [pc, #44]	; (800d750 <tcp_input+0x290>)
 800d722:	f009 fd4f 	bl	80171c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	7a1b      	ldrb	r3, [r3, #8]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d032      	beq.n	800d794 <tcp_input+0x2d4>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	7a1a      	ldrb	r2, [r3, #8]
 800d732:	4b09      	ldr	r3, [pc, #36]	; (800d758 <tcp_input+0x298>)
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d73a:	3301      	adds	r3, #1
 800d73c:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d73e:	429a      	cmp	r2, r3
 800d740:	d028      	beq.n	800d794 <tcp_input+0x2d4>
      prev = pcb;
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	61bb      	str	r3, [r7, #24]
      continue;
 800d746:	e06a      	b.n	800d81e <tcp_input+0x35e>
 800d748:	0801d790 	.word	0x0801d790
 800d74c:	0801d7c4 	.word	0x0801d7c4
 800d750:	0801d7dc 	.word	0x0801d7dc
 800d754:	20001224 	.word	0x20001224
 800d758:	20009d08 	.word	0x20009d08
 800d75c:	20001228 	.word	0x20001228
 800d760:	2000122c 	.word	0x2000122c
 800d764:	2000122a 	.word	0x2000122a
 800d768:	0801d804 	.word	0x0801d804
 800d76c:	0801d814 	.word	0x0801d814
 800d770:	0801d820 	.word	0x0801d820
 800d774:	20001234 	.word	0x20001234
 800d778:	20001238 	.word	0x20001238
 800d77c:	20001240 	.word	0x20001240
 800d780:	2000123e 	.word	0x2000123e
 800d784:	2000d638 	.word	0x2000d638
 800d788:	0801d840 	.word	0x0801d840
 800d78c:	0801d868 	.word	0x0801d868
 800d790:	0801d894 	.word	0x0801d894
    }

    if (pcb->remote_port == tcphdr->src &&
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	8b1a      	ldrh	r2, [r3, #24]
 800d798:	4b72      	ldr	r3, [pc, #456]	; (800d964 <tcp_input+0x4a4>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	881b      	ldrh	r3, [r3, #0]
 800d79e:	b29b      	uxth	r3, r3
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d13a      	bne.n	800d81a <tcp_input+0x35a>
        pcb->local_port == tcphdr->dest &&
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	8ada      	ldrh	r2, [r3, #22]
 800d7a8:	4b6e      	ldr	r3, [pc, #440]	; (800d964 <tcp_input+0x4a4>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	885b      	ldrh	r3, [r3, #2]
 800d7ae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d132      	bne.n	800d81a <tcp_input+0x35a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	685a      	ldr	r2, [r3, #4]
 800d7b8:	4b6b      	ldr	r3, [pc, #428]	; (800d968 <tcp_input+0x4a8>)
 800d7ba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d12c      	bne.n	800d81a <tcp_input+0x35a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	4b68      	ldr	r3, [pc, #416]	; (800d968 <tcp_input+0x4a8>)
 800d7c6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d126      	bne.n	800d81a <tcp_input+0x35a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	69fa      	ldr	r2, [r7, #28]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d106      	bne.n	800d7e4 <tcp_input+0x324>
 800d7d6:	4b65      	ldr	r3, [pc, #404]	; (800d96c <tcp_input+0x4ac>)
 800d7d8:	f240 120d 	movw	r2, #269	; 0x10d
 800d7dc:	4964      	ldr	r1, [pc, #400]	; (800d970 <tcp_input+0x4b0>)
 800d7de:	4865      	ldr	r0, [pc, #404]	; (800d974 <tcp_input+0x4b4>)
 800d7e0:	f009 fcf0 	bl	80171c4 <iprintf>
      if (prev != NULL) {
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <tcp_input+0x340>
        prev->next = pcb->next;
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	68da      	ldr	r2, [r3, #12]
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d7f2:	4b61      	ldr	r3, [pc, #388]	; (800d978 <tcp_input+0x4b8>)
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d7fa:	4a5f      	ldr	r2, [pc, #380]	; (800d978 <tcp_input+0x4b8>)
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	69fa      	ldr	r2, [r7, #28]
 800d806:	429a      	cmp	r2, r3
 800d808:	d111      	bne.n	800d82e <tcp_input+0x36e>
 800d80a:	4b58      	ldr	r3, [pc, #352]	; (800d96c <tcp_input+0x4ac>)
 800d80c:	f240 1215 	movw	r2, #277	; 0x115
 800d810:	495a      	ldr	r1, [pc, #360]	; (800d97c <tcp_input+0x4bc>)
 800d812:	4858      	ldr	r0, [pc, #352]	; (800d974 <tcp_input+0x4b4>)
 800d814:	f009 fcd6 	bl	80171c4 <iprintf>
      break;
 800d818:	e009      	b.n	800d82e <tcp_input+0x36e>
    }
    prev = pcb;
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	61fb      	str	r3, [r7, #28]
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	2b00      	cmp	r3, #0
 800d828:	f47f af5f 	bne.w	800d6ea <tcp_input+0x22a>
 800d82c:	e000      	b.n	800d830 <tcp_input+0x370>
      break;
 800d82e:	bf00      	nop
  }

  if (pcb == NULL) {
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	2b00      	cmp	r3, #0
 800d834:	f040 80aa 	bne.w	800d98c <tcp_input+0x4cc>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d838:	4b51      	ldr	r3, [pc, #324]	; (800d980 <tcp_input+0x4c0>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	61fb      	str	r3, [r7, #28]
 800d83e:	e03f      	b.n	800d8c0 <tcp_input+0x400>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d840:	69fb      	ldr	r3, [r7, #28]
 800d842:	7d1b      	ldrb	r3, [r3, #20]
 800d844:	2b0a      	cmp	r3, #10
 800d846:	d006      	beq.n	800d856 <tcp_input+0x396>
 800d848:	4b48      	ldr	r3, [pc, #288]	; (800d96c <tcp_input+0x4ac>)
 800d84a:	f240 121f 	movw	r2, #287	; 0x11f
 800d84e:	494d      	ldr	r1, [pc, #308]	; (800d984 <tcp_input+0x4c4>)
 800d850:	4848      	ldr	r0, [pc, #288]	; (800d974 <tcp_input+0x4b4>)
 800d852:	f009 fcb7 	bl	80171c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	7a1b      	ldrb	r3, [r3, #8]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d009      	beq.n	800d872 <tcp_input+0x3b2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	7a1a      	ldrb	r2, [r3, #8]
 800d862:	4b41      	ldr	r3, [pc, #260]	; (800d968 <tcp_input+0x4a8>)
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d86a:	3301      	adds	r3, #1
 800d86c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d86e:	429a      	cmp	r2, r3
 800d870:	d122      	bne.n	800d8b8 <tcp_input+0x3f8>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	8b1a      	ldrh	r2, [r3, #24]
 800d876:	4b3b      	ldr	r3, [pc, #236]	; (800d964 <tcp_input+0x4a4>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	881b      	ldrh	r3, [r3, #0]
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	429a      	cmp	r2, r3
 800d880:	d11b      	bne.n	800d8ba <tcp_input+0x3fa>
          pcb->local_port == tcphdr->dest &&
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	8ada      	ldrh	r2, [r3, #22]
 800d886:	4b37      	ldr	r3, [pc, #220]	; (800d964 <tcp_input+0x4a4>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	885b      	ldrh	r3, [r3, #2]
 800d88c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d88e:	429a      	cmp	r2, r3
 800d890:	d113      	bne.n	800d8ba <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	685a      	ldr	r2, [r3, #4]
 800d896:	4b34      	ldr	r3, [pc, #208]	; (800d968 <tcp_input+0x4a8>)
 800d898:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d10d      	bne.n	800d8ba <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d89e:	69fb      	ldr	r3, [r7, #28]
 800d8a0:	681a      	ldr	r2, [r3, #0]
 800d8a2:	4b31      	ldr	r3, [pc, #196]	; (800d968 <tcp_input+0x4a8>)
 800d8a4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d107      	bne.n	800d8ba <tcp_input+0x3fa>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d8aa:	69f8      	ldr	r0, [r7, #28]
 800d8ac:	f000 fb80 	bl	800dfb0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7fd fc8f 	bl	800b1d4 <pbuf_free>
        return;
 800d8b6:	e221      	b.n	800dcfc <tcp_input+0x83c>
        continue;
 800d8b8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8ba:	69fb      	ldr	r3, [r7, #28]
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	61fb      	str	r3, [r7, #28]
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1bc      	bne.n	800d840 <tcp_input+0x380>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d8ca:	4b2f      	ldr	r3, [pc, #188]	; (800d988 <tcp_input+0x4c8>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	e02a      	b.n	800d928 <tcp_input+0x468>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	7a1b      	ldrb	r3, [r3, #8]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00c      	beq.n	800d8f4 <tcp_input+0x434>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	7a1a      	ldrb	r2, [r3, #8]
 800d8de:	4b22      	ldr	r3, [pc, #136]	; (800d968 <tcp_input+0x4a8>)
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d002      	beq.n	800d8f4 <tcp_input+0x434>
        prev = (struct tcp_pcb *)lpcb;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	61bb      	str	r3, [r7, #24]
        continue;
 800d8f2:	e016      	b.n	800d922 <tcp_input+0x462>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	8ada      	ldrh	r2, [r3, #22]
 800d8f8:	4b1a      	ldr	r3, [pc, #104]	; (800d964 <tcp_input+0x4a4>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	885b      	ldrh	r3, [r3, #2]
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	429a      	cmp	r2, r3
 800d902:	d10c      	bne.n	800d91e <tcp_input+0x45e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	4b17      	ldr	r3, [pc, #92]	; (800d968 <tcp_input+0x4a8>)
 800d90a:	695b      	ldr	r3, [r3, #20]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d00f      	beq.n	800d930 <tcp_input+0x470>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00d      	beq.n	800d932 <tcp_input+0x472>
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d009      	beq.n	800d932 <tcp_input+0x472>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	617b      	str	r3, [r7, #20]
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1d1      	bne.n	800d8d2 <tcp_input+0x412>
 800d92e:	e000      	b.n	800d932 <tcp_input+0x472>
            break;
 800d930:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d029      	beq.n	800d98c <tcp_input+0x4cc>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d938:	69bb      	ldr	r3, [r7, #24]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d00a      	beq.n	800d954 <tcp_input+0x494>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	68da      	ldr	r2, [r3, #12]
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d946:	4b10      	ldr	r3, [pc, #64]	; (800d988 <tcp_input+0x4c8>)
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d94e:	4a0e      	ldr	r2, [pc, #56]	; (800d988 <tcp_input+0x4c8>)
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d954:	6978      	ldr	r0, [r7, #20]
 800d956:	f000 fa2d 	bl	800ddb4 <tcp_listen_input>
      }
      pbuf_free(p);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7fd fc3a 	bl	800b1d4 <pbuf_free>
      return;
 800d960:	e1cc      	b.n	800dcfc <tcp_input+0x83c>
 800d962:	bf00      	nop
 800d964:	20001224 	.word	0x20001224
 800d968:	20009d08 	.word	0x20009d08
 800d96c:	0801d790 	.word	0x0801d790
 800d970:	0801d8bc 	.word	0x0801d8bc
 800d974:	0801d7dc 	.word	0x0801d7dc
 800d978:	2000d638 	.word	0x2000d638
 800d97c:	0801d8e8 	.word	0x0801d8e8
 800d980:	2000d648 	.word	0x2000d648
 800d984:	0801d914 	.word	0x0801d914
 800d988:	2000d640 	.word	0x2000d640
    }
  }

#if TCP_INPUT_DEBUG
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags "));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 800d98c:	4ba3      	ldr	r3, [pc, #652]	; (800dc1c <tcp_input+0x75c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	899b      	ldrh	r3, [r3, #12]
 800d992:	b29b      	uxth	r3, r3
 800d994:	4618      	mov	r0, r3
 800d996:	f7fc f883 	bl	8009aa0 <lwip_htons>
 800d99a:	4603      	mov	r3, r0
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff fd28 	bl	800d3fa <tcp_debug_print_flags>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f000 8161 	beq.w	800dc74 <tcp_input+0x7b4>
    /* The incoming segment belongs to a connection. */
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	7d1b      	ldrb	r3, [r3, #20]
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7ff fd14 	bl	800d3e4 <tcp_debug_print_state>
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d9bc:	4b98      	ldr	r3, [pc, #608]	; (800dc20 <tcp_input+0x760>)
 800d9be:	2200      	movs	r2, #0
 800d9c0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	891a      	ldrh	r2, [r3, #8]
 800d9c6:	4b96      	ldr	r3, [pc, #600]	; (800dc20 <tcp_input+0x760>)
 800d9c8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d9ca:	4a95      	ldr	r2, [pc, #596]	; (800dc20 <tcp_input+0x760>)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d9d0:	4b92      	ldr	r3, [pc, #584]	; (800dc1c <tcp_input+0x75c>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a92      	ldr	r2, [pc, #584]	; (800dc20 <tcp_input+0x760>)
 800d9d6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d9d8:	4b92      	ldr	r3, [pc, #584]	; (800dc24 <tcp_input+0x764>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d9de:	4b92      	ldr	r3, [pc, #584]	; (800dc28 <tcp_input+0x768>)
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d9e4:	4b91      	ldr	r3, [pc, #580]	; (800dc2c <tcp_input+0x76c>)
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d9ea:	4b91      	ldr	r3, [pc, #580]	; (800dc30 <tcp_input+0x770>)
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	f003 0308 	and.w	r3, r3, #8
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d006      	beq.n	800da04 <tcp_input+0x544>
      p->flags |= PBUF_FLAG_PUSH;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	7b5b      	ldrb	r3, [r3, #13]
 800d9fa:	f043 0301 	orr.w	r3, r3, #1
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d017      	beq.n	800da3c <tcp_input+0x57c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800da0c:	69f8      	ldr	r0, [r7, #28]
 800da0e:	f7fe ff91 	bl	800c934 <tcp_process_refused_data>
 800da12:	4603      	mov	r3, r0
 800da14:	f113 0f0d 	cmn.w	r3, #13
 800da18:	d007      	beq.n	800da2a <tcp_input+0x56a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d00c      	beq.n	800da3c <tcp_input+0x57c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800da22:	4b84      	ldr	r3, [pc, #528]	; (800dc34 <tcp_input+0x774>)
 800da24:	881b      	ldrh	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d008      	beq.n	800da3c <tcp_input+0x57c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800da2e:	2b00      	cmp	r3, #0
 800da30:	f040 80e8 	bne.w	800dc04 <tcp_input+0x744>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800da34:	69f8      	ldr	r0, [r7, #28]
 800da36:	f003 fe1f 	bl	8011678 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800da3a:	e0e3      	b.n	800dc04 <tcp_input+0x744>
      }
    }
    tcp_input_pcb = pcb;
 800da3c:	4a7e      	ldr	r2, [pc, #504]	; (800dc38 <tcp_input+0x778>)
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800da42:	69f8      	ldr	r0, [r7, #28]
 800da44:	f000 fb2e 	bl	800e0a4 <tcp_process>
 800da48:	4603      	mov	r3, r0
 800da4a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800da4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800da50:	f113 0f0d 	cmn.w	r3, #13
 800da54:	f000 80d8 	beq.w	800dc08 <tcp_input+0x748>
      if (recv_flags & TF_RESET) {
 800da58:	4b73      	ldr	r3, [pc, #460]	; (800dc28 <tcp_input+0x768>)
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	f003 0308 	and.w	r3, r3, #8
 800da60:	2b00      	cmp	r3, #0
 800da62:	d015      	beq.n	800da90 <tcp_input+0x5d0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d008      	beq.n	800da80 <tcp_input+0x5c0>
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da74:	69fa      	ldr	r2, [r7, #28]
 800da76:	6912      	ldr	r2, [r2, #16]
 800da78:	f06f 010d 	mvn.w	r1, #13
 800da7c:	4610      	mov	r0, r2
 800da7e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800da80:	69f9      	ldr	r1, [r7, #28]
 800da82:	486e      	ldr	r0, [pc, #440]	; (800dc3c <tcp_input+0x77c>)
 800da84:	f7ff fb12 	bl	800d0ac <tcp_pcb_remove>
        tcp_free(pcb);
 800da88:	69f8      	ldr	r0, [r7, #28]
 800da8a:	f7fd fe53 	bl	800b734 <tcp_free>
 800da8e:	e0de      	b.n	800dc4e <tcp_input+0x78e>
      } else {
        err = ERR_OK;
 800da90:	2300      	movs	r3, #0
 800da92:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800da94:	4b65      	ldr	r3, [pc, #404]	; (800dc2c <tcp_input+0x76c>)
 800da96:	881b      	ldrh	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d01d      	beq.n	800dad8 <tcp_input+0x618>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800da9c:	4b63      	ldr	r3, [pc, #396]	; (800dc2c <tcp_input+0x76c>)
 800da9e:	881b      	ldrh	r3, [r3, #0]
 800daa0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00a      	beq.n	800dac2 <tcp_input+0x602>
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dab2:	69fa      	ldr	r2, [r7, #28]
 800dab4:	6910      	ldr	r0, [r2, #16]
 800dab6:	89fa      	ldrh	r2, [r7, #14]
 800dab8:	69f9      	ldr	r1, [r7, #28]
 800daba:	4798      	blx	r3
 800dabc:	4603      	mov	r3, r0
 800dabe:	74fb      	strb	r3, [r7, #19]
 800dac0:	e001      	b.n	800dac6 <tcp_input+0x606>
 800dac2:	2300      	movs	r3, #0
 800dac4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dac6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800daca:	f113 0f0d 	cmn.w	r3, #13
 800dace:	f000 809d 	beq.w	800dc0c <tcp_input+0x74c>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dad2:	4b56      	ldr	r3, [pc, #344]	; (800dc2c <tcp_input+0x76c>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dad8:	69f8      	ldr	r0, [r7, #28]
 800dada:	f000 f92b 	bl	800dd34 <tcp_input_delayed_close>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	f040 8095 	bne.w	800dc10 <tcp_input+0x750>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dae6:	4b4f      	ldr	r3, [pc, #316]	; (800dc24 <tcp_input+0x764>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d041      	beq.n	800db72 <tcp_input+0x6b2>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d006      	beq.n	800db04 <tcp_input+0x644>
 800daf6:	4b52      	ldr	r3, [pc, #328]	; (800dc40 <tcp_input+0x780>)
 800daf8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dafc:	4951      	ldr	r1, [pc, #324]	; (800dc44 <tcp_input+0x784>)
 800dafe:	4852      	ldr	r0, [pc, #328]	; (800dc48 <tcp_input+0x788>)
 800db00:	f009 fb60 	bl	80171c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800db04:	69fb      	ldr	r3, [r7, #28]
 800db06:	8b5b      	ldrh	r3, [r3, #26]
 800db08:	f003 0310 	and.w	r3, r3, #16
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d008      	beq.n	800db22 <tcp_input+0x662>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800db10:	4b44      	ldr	r3, [pc, #272]	; (800dc24 <tcp_input+0x764>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4618      	mov	r0, r3
 800db16:	f7fd fb5d 	bl	800b1d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800db1a:	69f8      	ldr	r0, [r7, #28]
 800db1c:	f7fe f8f6 	bl	800bd0c <tcp_abort>
            goto aborted;
 800db20:	e095      	b.n	800dc4e <tcp_input+0x78e>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d00c      	beq.n	800db46 <tcp_input+0x686>
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	6918      	ldr	r0, [r3, #16]
 800db36:	4b3b      	ldr	r3, [pc, #236]	; (800dc24 <tcp_input+0x764>)
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	2300      	movs	r3, #0
 800db3c:	69f9      	ldr	r1, [r7, #28]
 800db3e:	47a0      	blx	r4
 800db40:	4603      	mov	r3, r0
 800db42:	74fb      	strb	r3, [r7, #19]
 800db44:	e008      	b.n	800db58 <tcp_input+0x698>
 800db46:	4b37      	ldr	r3, [pc, #220]	; (800dc24 <tcp_input+0x764>)
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	2300      	movs	r3, #0
 800db4c:	69f9      	ldr	r1, [r7, #28]
 800db4e:	2000      	movs	r0, #0
 800db50:	f7fe ffe6 	bl	800cb20 <tcp_recv_null>
 800db54:	4603      	mov	r3, r0
 800db56:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800db58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db5c:	f113 0f0d 	cmn.w	r3, #13
 800db60:	d058      	beq.n	800dc14 <tcp_input+0x754>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800db62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d003      	beq.n	800db72 <tcp_input+0x6b2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800db6a:	4b2e      	ldr	r3, [pc, #184]	; (800dc24 <tcp_input+0x764>)
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800db72:	4b2d      	ldr	r3, [pc, #180]	; (800dc28 <tcp_input+0x768>)
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	f003 0320 	and.w	r3, r3, #32
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d030      	beq.n	800dbe0 <tcp_input+0x720>
          if (pcb->refused_data != NULL) {
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db82:	2b00      	cmp	r3, #0
 800db84:	d009      	beq.n	800db9a <tcp_input+0x6da>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db8a:	7b5a      	ldrb	r2, [r3, #13]
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db90:	f042 0220 	orr.w	r2, r2, #32
 800db94:	b2d2      	uxtb	r2, r2
 800db96:	735a      	strb	r2, [r3, #13]
 800db98:	e022      	b.n	800dbe0 <tcp_input+0x720>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dba2:	d005      	beq.n	800dbb0 <tcp_input+0x6f0>
              pcb->rcv_wnd++;
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dba8:	3301      	adds	r3, #1
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	69fb      	ldr	r3, [r7, #28]
 800dbae:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dbb0:	69fb      	ldr	r3, [r7, #28]
 800dbb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00b      	beq.n	800dbd2 <tcp_input+0x712>
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	6918      	ldr	r0, [r3, #16]
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	69f9      	ldr	r1, [r7, #28]
 800dbca:	47a0      	blx	r4
 800dbcc:	4603      	mov	r3, r0
 800dbce:	74fb      	strb	r3, [r7, #19]
 800dbd0:	e001      	b.n	800dbd6 <tcp_input+0x716>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dbd6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbda:	f113 0f0d 	cmn.w	r3, #13
 800dbde:	d01b      	beq.n	800dc18 <tcp_input+0x758>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dbe0:	4b15      	ldr	r3, [pc, #84]	; (800dc38 <tcp_input+0x778>)
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dbe6:	69f8      	ldr	r0, [r7, #28]
 800dbe8:	f000 f8a4 	bl	800dd34 <tcp_input_delayed_close>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d12c      	bne.n	800dc4c <tcp_input+0x78c>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dbf2:	69f8      	ldr	r0, [r7, #28]
 800dbf4:	f002 ff34 	bl	8010a60 <tcp_output>
#if TCP_INPUT_DEBUG
#if TCP_DEBUG
        tcp_debug_print_state(pcb->state);
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	7d1b      	ldrb	r3, [r3, #20]
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7ff fbf1 	bl	800d3e4 <tcp_debug_print_state>
 800dc02:	e024      	b.n	800dc4e <tcp_input+0x78e>
        goto aborted;
 800dc04:	bf00      	nop
 800dc06:	e022      	b.n	800dc4e <tcp_input+0x78e>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dc08:	bf00      	nop
 800dc0a:	e020      	b.n	800dc4e <tcp_input+0x78e>
              goto aborted;
 800dc0c:	bf00      	nop
 800dc0e:	e01e      	b.n	800dc4e <tcp_input+0x78e>
          goto aborted;
 800dc10:	bf00      	nop
 800dc12:	e01c      	b.n	800dc4e <tcp_input+0x78e>
            goto aborted;
 800dc14:	bf00      	nop
 800dc16:	e01a      	b.n	800dc4e <tcp_input+0x78e>
              goto aborted;
 800dc18:	bf00      	nop
 800dc1a:	e018      	b.n	800dc4e <tcp_input+0x78e>
 800dc1c:	20001224 	.word	0x20001224
 800dc20:	20001214 	.word	0x20001214
 800dc24:	20001244 	.word	0x20001244
 800dc28:	20001241 	.word	0x20001241
 800dc2c:	2000123c 	.word	0x2000123c
 800dc30:	20001240 	.word	0x20001240
 800dc34:	2000123e 	.word	0x2000123e
 800dc38:	2000d64c 	.word	0x2000d64c
 800dc3c:	2000d638 	.word	0x2000d638
 800dc40:	0801d790 	.word	0x0801d790
 800dc44:	0801d944 	.word	0x0801d944
 800dc48:	0801d7dc 	.word	0x0801d7dc
          goto aborted;
 800dc4c:	bf00      	nop
    tcp_input_pcb = NULL;
 800dc4e:	4b2d      	ldr	r3, [pc, #180]	; (800dd04 <tcp_input+0x844>)
 800dc50:	2200      	movs	r2, #0
 800dc52:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dc54:	4b2c      	ldr	r3, [pc, #176]	; (800dd08 <tcp_input+0x848>)
 800dc56:	2200      	movs	r2, #0
 800dc58:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dc5a:	4b2c      	ldr	r3, [pc, #176]	; (800dd0c <tcp_input+0x84c>)
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d031      	beq.n	800dcc6 <tcp_input+0x806>
      pbuf_free(inseg.p);
 800dc62:	4b2a      	ldr	r3, [pc, #168]	; (800dd0c <tcp_input+0x84c>)
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fd fab4 	bl	800b1d4 <pbuf_free>
      inseg.p = NULL;
 800dc6c:	4b27      	ldr	r3, [pc, #156]	; (800dd0c <tcp_input+0x84c>)
 800dc6e:	2200      	movs	r2, #0
 800dc70:	605a      	str	r2, [r3, #4]
 800dc72:	e028      	b.n	800dcc6 <tcp_input+0x806>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800dc74:	4b26      	ldr	r3, [pc, #152]	; (800dd10 <tcp_input+0x850>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	899b      	ldrh	r3, [r3, #12]
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fb ff0f 	bl	8009aa0 <lwip_htons>
 800dc82:	4603      	mov	r3, r0
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	f003 0304 	and.w	r3, r3, #4
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d118      	bne.n	800dcc0 <tcp_input+0x800>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc8e:	4b21      	ldr	r3, [pc, #132]	; (800dd14 <tcp_input+0x854>)
 800dc90:	6819      	ldr	r1, [r3, #0]
 800dc92:	4b21      	ldr	r3, [pc, #132]	; (800dd18 <tcp_input+0x858>)
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	461a      	mov	r2, r3
 800dc98:	4b20      	ldr	r3, [pc, #128]	; (800dd1c <tcp_input+0x85c>)
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc9e:	4b1c      	ldr	r3, [pc, #112]	; (800dd10 <tcp_input+0x850>)
 800dca0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dca2:	885b      	ldrh	r3, [r3, #2]
 800dca4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dca6:	4a1a      	ldr	r2, [pc, #104]	; (800dd10 <tcp_input+0x850>)
 800dca8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcaa:	8812      	ldrh	r2, [r2, #0]
 800dcac:	b292      	uxth	r2, r2
 800dcae:	9202      	str	r2, [sp, #8]
 800dcb0:	9301      	str	r3, [sp, #4]
 800dcb2:	4b1b      	ldr	r3, [pc, #108]	; (800dd20 <tcp_input+0x860>)
 800dcb4:	9300      	str	r3, [sp, #0]
 800dcb6:	4b1b      	ldr	r3, [pc, #108]	; (800dd24 <tcp_input+0x864>)
 800dcb8:	4602      	mov	r2, r0
 800dcba:	2000      	movs	r0, #0
 800dcbc:	f003 fc8a 	bl	80115d4 <tcp_rst>
    }
    pbuf_free(p);
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7fd fa87 	bl	800b1d4 <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 800dcc6:	f7ff fba3 	bl	800d410 <tcp_pcbs_sane>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d114      	bne.n	800dcfa <tcp_input+0x83a>
 800dcd0:	4b15      	ldr	r3, [pc, #84]	; (800dd28 <tcp_input+0x868>)
 800dcd2:	f240 2249 	movw	r2, #585	; 0x249
 800dcd6:	4915      	ldr	r1, [pc, #84]	; (800dd2c <tcp_input+0x86c>)
 800dcd8:	4815      	ldr	r0, [pc, #84]	; (800dd30 <tcp_input+0x870>)
 800dcda:	f009 fa73 	bl	80171c4 <iprintf>
  PERF_STOP("tcp_input");
  return;
 800dcde:	e00c      	b.n	800dcfa <tcp_input+0x83a>
    goto dropped;
 800dce0:	bf00      	nop
 800dce2:	e006      	b.n	800dcf2 <tcp_input+0x832>
    goto dropped;
 800dce4:	bf00      	nop
 800dce6:	e004      	b.n	800dcf2 <tcp_input+0x832>
    goto dropped;
 800dce8:	bf00      	nop
 800dcea:	e002      	b.n	800dcf2 <tcp_input+0x832>
      goto dropped;
 800dcec:	bf00      	nop
 800dcee:	e000      	b.n	800dcf2 <tcp_input+0x832>
      goto dropped;
 800dcf0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7fd fa6e 	bl	800b1d4 <pbuf_free>
 800dcf8:	e000      	b.n	800dcfc <tcp_input+0x83c>
  return;
 800dcfa:	bf00      	nop
}
 800dcfc:	3724      	adds	r7, #36	; 0x24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd90      	pop	{r4, r7, pc}
 800dd02:	bf00      	nop
 800dd04:	2000d64c 	.word	0x2000d64c
 800dd08:	20001244 	.word	0x20001244
 800dd0c:	20001214 	.word	0x20001214
 800dd10:	20001224 	.word	0x20001224
 800dd14:	20001238 	.word	0x20001238
 800dd18:	2000123e 	.word	0x2000123e
 800dd1c:	20001234 	.word	0x20001234
 800dd20:	20009d18 	.word	0x20009d18
 800dd24:	20009d1c 	.word	0x20009d1c
 800dd28:	0801d790 	.word	0x0801d790
 800dd2c:	0801d960 	.word	0x0801d960
 800dd30:	0801d7dc 	.word	0x0801d7dc

0800dd34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d106      	bne.n	800dd50 <tcp_input_delayed_close+0x1c>
 800dd42:	4b17      	ldr	r3, [pc, #92]	; (800dda0 <tcp_input_delayed_close+0x6c>)
 800dd44:	f240 225a 	movw	r2, #602	; 0x25a
 800dd48:	4916      	ldr	r1, [pc, #88]	; (800dda4 <tcp_input_delayed_close+0x70>)
 800dd4a:	4817      	ldr	r0, [pc, #92]	; (800dda8 <tcp_input_delayed_close+0x74>)
 800dd4c:	f009 fa3a 	bl	80171c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dd50:	4b16      	ldr	r3, [pc, #88]	; (800ddac <tcp_input_delayed_close+0x78>)
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	f003 0310 	and.w	r3, r3, #16
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d01c      	beq.n	800dd96 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	8b5b      	ldrh	r3, [r3, #26]
 800dd60:	f003 0310 	and.w	r3, r3, #16
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d10d      	bne.n	800dd84 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d008      	beq.n	800dd84 <tcp_input_delayed_close+0x50>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	6912      	ldr	r2, [r2, #16]
 800dd7c:	f06f 010e 	mvn.w	r1, #14
 800dd80:	4610      	mov	r0, r2
 800dd82:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd84:	6879      	ldr	r1, [r7, #4]
 800dd86:	480a      	ldr	r0, [pc, #40]	; (800ddb0 <tcp_input_delayed_close+0x7c>)
 800dd88:	f7ff f990 	bl	800d0ac <tcp_pcb_remove>
    tcp_free(pcb);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7fd fcd1 	bl	800b734 <tcp_free>
    return 1;
 800dd92:	2301      	movs	r3, #1
 800dd94:	e000      	b.n	800dd98 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}
 800dda0:	0801d790 	.word	0x0801d790
 800dda4:	0801d97c 	.word	0x0801d97c
 800dda8:	0801d7dc 	.word	0x0801d7dc
 800ddac:	20001241 	.word	0x20001241
 800ddb0:	2000d638 	.word	0x2000d638

0800ddb4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ddb4:	b590      	push	{r4, r7, lr}
 800ddb6:	b08b      	sub	sp, #44	; 0x2c
 800ddb8:	af04      	add	r7, sp, #16
 800ddba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ddbc:	4b6f      	ldr	r3, [pc, #444]	; (800df7c <tcp_listen_input+0x1c8>)
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	f003 0304 	and.w	r3, r3, #4
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f040 80d2 	bne.w	800df6e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d106      	bne.n	800ddde <tcp_listen_input+0x2a>
 800ddd0:	4b6b      	ldr	r3, [pc, #428]	; (800df80 <tcp_listen_input+0x1cc>)
 800ddd2:	f240 2281 	movw	r2, #641	; 0x281
 800ddd6:	496b      	ldr	r1, [pc, #428]	; (800df84 <tcp_listen_input+0x1d0>)
 800ddd8:	486b      	ldr	r0, [pc, #428]	; (800df88 <tcp_listen_input+0x1d4>)
 800ddda:	f009 f9f3 	bl	80171c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ddde:	4b67      	ldr	r3, [pc, #412]	; (800df7c <tcp_listen_input+0x1c8>)
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	f003 0310 	and.w	r3, r3, #16
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d019      	beq.n	800de1e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddea:	4b68      	ldr	r3, [pc, #416]	; (800df8c <tcp_listen_input+0x1d8>)
 800ddec:	6819      	ldr	r1, [r3, #0]
 800ddee:	4b68      	ldr	r3, [pc, #416]	; (800df90 <tcp_listen_input+0x1dc>)
 800ddf0:	881b      	ldrh	r3, [r3, #0]
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	4b67      	ldr	r3, [pc, #412]	; (800df94 <tcp_listen_input+0x1e0>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ddfa:	4b67      	ldr	r3, [pc, #412]	; (800df98 <tcp_listen_input+0x1e4>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddfe:	885b      	ldrh	r3, [r3, #2]
 800de00:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de02:	4a65      	ldr	r2, [pc, #404]	; (800df98 <tcp_listen_input+0x1e4>)
 800de04:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de06:	8812      	ldrh	r2, [r2, #0]
 800de08:	b292      	uxth	r2, r2
 800de0a:	9202      	str	r2, [sp, #8]
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	4b63      	ldr	r3, [pc, #396]	; (800df9c <tcp_listen_input+0x1e8>)
 800de10:	9300      	str	r3, [sp, #0]
 800de12:	4b63      	ldr	r3, [pc, #396]	; (800dfa0 <tcp_listen_input+0x1ec>)
 800de14:	4602      	mov	r2, r0
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f003 fbdc 	bl	80115d4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800de1c:	e0a9      	b.n	800df72 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800de1e:	4b57      	ldr	r3, [pc, #348]	; (800df7c <tcp_listen_input+0x1c8>)
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	f003 0302 	and.w	r3, r3, #2
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 80a3 	beq.w	800df72 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	7d5b      	ldrb	r3, [r3, #21]
 800de30:	4618      	mov	r0, r3
 800de32:	f7fe ff99 	bl	800cd68 <tcp_alloc>
 800de36:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d111      	bne.n	800de62 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	699b      	ldr	r3, [r3, #24]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00a      	beq.n	800de5c <tcp_listen_input+0xa8>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	699b      	ldr	r3, [r3, #24]
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	6910      	ldr	r0, [r2, #16]
 800de4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de52:	2100      	movs	r1, #0
 800de54:	4798      	blx	r3
 800de56:	4603      	mov	r3, r0
 800de58:	73bb      	strb	r3, [r7, #14]
      return;
 800de5a:	e08b      	b.n	800df74 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800de5c:	23f0      	movs	r3, #240	; 0xf0
 800de5e:	73bb      	strb	r3, [r7, #14]
      return;
 800de60:	e088      	b.n	800df74 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800de62:	4b50      	ldr	r3, [pc, #320]	; (800dfa4 <tcp_listen_input+0x1f0>)
 800de64:	695a      	ldr	r2, [r3, #20]
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800de6a:	4b4e      	ldr	r3, [pc, #312]	; (800dfa4 <tcp_listen_input+0x1f0>)
 800de6c:	691a      	ldr	r2, [r3, #16]
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	8ada      	ldrh	r2, [r3, #22]
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800de7a:	4b47      	ldr	r3, [pc, #284]	; (800df98 <tcp_listen_input+0x1e4>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	881b      	ldrh	r3, [r3, #0]
 800de80:	b29a      	uxth	r2, r3
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	2203      	movs	r2, #3
 800de8a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800de8c:	4b41      	ldr	r3, [pc, #260]	; (800df94 <tcp_listen_input+0x1e0>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	1c5a      	adds	r2, r3, #1
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800de9e:	6978      	ldr	r0, [r7, #20]
 800dea0:	f7ff f9a6 	bl	800d1f0 <tcp_next_iss>
 800dea4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	693a      	ldr	r2, [r7, #16]
 800deaa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	693a      	ldr	r2, [r7, #16]
 800deb0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	693a      	ldr	r2, [r7, #16]
 800deb6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	693a      	ldr	r2, [r7, #16]
 800debc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800debe:	4b35      	ldr	r3, [pc, #212]	; (800df94 <tcp_listen_input+0x1e0>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	1e5a      	subs	r2, r3, #1
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	691a      	ldr	r2, [r3, #16]
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	687a      	ldr	r2, [r7, #4]
 800ded4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	7a5b      	ldrb	r3, [r3, #9]
 800deda:	f003 030c 	and.w	r3, r3, #12
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	7a1a      	ldrb	r2, [r3, #8]
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800deec:	4b2e      	ldr	r3, [pc, #184]	; (800dfa8 <tcp_listen_input+0x1f4>)
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	60da      	str	r2, [r3, #12]
 800def4:	4a2c      	ldr	r2, [pc, #176]	; (800dfa8 <tcp_listen_input+0x1f4>)
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	6013      	str	r3, [r2, #0]
 800defa:	f003 fd2d 	bl	8011958 <tcp_timer_needed>
 800defe:	4b2b      	ldr	r3, [pc, #172]	; (800dfac <tcp_listen_input+0x1f8>)
 800df00:	2201      	movs	r2, #1
 800df02:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800df04:	6978      	ldr	r0, [r7, #20]
 800df06:	f001 fd8d 	bl	800fa24 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800df0a:	4b23      	ldr	r3, [pc, #140]	; (800df98 <tcp_listen_input+0x1e4>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	89db      	ldrh	r3, [r3, #14]
 800df10:	b29a      	uxth	r2, r3
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800df24:	697b      	ldr	r3, [r7, #20]
 800df26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	3304      	adds	r3, #4
 800df2c:	4618      	mov	r0, r3
 800df2e:	f007 fa5b 	bl	80153e8 <ip4_route>
 800df32:	4601      	mov	r1, r0
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	3304      	adds	r3, #4
 800df38:	461a      	mov	r2, r3
 800df3a:	4620      	mov	r0, r4
 800df3c:	f7ff f97e 	bl	800d23c <tcp_eff_send_mss_netif>
 800df40:	4603      	mov	r3, r0
 800df42:	461a      	mov	r2, r3
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800df48:	2112      	movs	r1, #18
 800df4a:	6978      	ldr	r0, [r7, #20]
 800df4c:	f002 fc9a 	bl	8010884 <tcp_enqueue_flags>
 800df50:	4603      	mov	r3, r0
 800df52:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800df54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d004      	beq.n	800df66 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800df5c:	2100      	movs	r1, #0
 800df5e:	6978      	ldr	r0, [r7, #20]
 800df60:	f7fd fe16 	bl	800bb90 <tcp_abandon>
      return;
 800df64:	e006      	b.n	800df74 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800df66:	6978      	ldr	r0, [r7, #20]
 800df68:	f002 fd7a 	bl	8010a60 <tcp_output>
  return;
 800df6c:	e001      	b.n	800df72 <tcp_listen_input+0x1be>
    return;
 800df6e:	bf00      	nop
 800df70:	e000      	b.n	800df74 <tcp_listen_input+0x1c0>
  return;
 800df72:	bf00      	nop
}
 800df74:	371c      	adds	r7, #28
 800df76:	46bd      	mov	sp, r7
 800df78:	bd90      	pop	{r4, r7, pc}
 800df7a:	bf00      	nop
 800df7c:	20001240 	.word	0x20001240
 800df80:	0801d790 	.word	0x0801d790
 800df84:	0801d9a4 	.word	0x0801d9a4
 800df88:	0801d7dc 	.word	0x0801d7dc
 800df8c:	20001238 	.word	0x20001238
 800df90:	2000123e 	.word	0x2000123e
 800df94:	20001234 	.word	0x20001234
 800df98:	20001224 	.word	0x20001224
 800df9c:	20009d18 	.word	0x20009d18
 800dfa0:	20009d1c 	.word	0x20009d1c
 800dfa4:	20009d08 	.word	0x20009d08
 800dfa8:	2000d638 	.word	0x2000d638
 800dfac:	2000d634 	.word	0x2000d634

0800dfb0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b086      	sub	sp, #24
 800dfb4:	af04      	add	r7, sp, #16
 800dfb6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dfb8:	4b2f      	ldr	r3, [pc, #188]	; (800e078 <tcp_timewait_input+0xc8>)
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	f003 0304 	and.w	r3, r3, #4
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d153      	bne.n	800e06c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d106      	bne.n	800dfd8 <tcp_timewait_input+0x28>
 800dfca:	4b2c      	ldr	r3, [pc, #176]	; (800e07c <tcp_timewait_input+0xcc>)
 800dfcc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dfd0:	492b      	ldr	r1, [pc, #172]	; (800e080 <tcp_timewait_input+0xd0>)
 800dfd2:	482c      	ldr	r0, [pc, #176]	; (800e084 <tcp_timewait_input+0xd4>)
 800dfd4:	f009 f8f6 	bl	80171c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dfd8:	4b27      	ldr	r3, [pc, #156]	; (800e078 <tcp_timewait_input+0xc8>)
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	f003 0302 	and.w	r3, r3, #2
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d02a      	beq.n	800e03a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dfe4:	4b28      	ldr	r3, [pc, #160]	; (800e088 <tcp_timewait_input+0xd8>)
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	db2d      	blt.n	800e04e <tcp_timewait_input+0x9e>
 800dff2:	4b25      	ldr	r3, [pc, #148]	; (800e088 <tcp_timewait_input+0xd8>)
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dffe:	440b      	add	r3, r1
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	2b00      	cmp	r3, #0
 800e004:	dc23      	bgt.n	800e04e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e006:	4b21      	ldr	r3, [pc, #132]	; (800e08c <tcp_timewait_input+0xdc>)
 800e008:	6819      	ldr	r1, [r3, #0]
 800e00a:	4b21      	ldr	r3, [pc, #132]	; (800e090 <tcp_timewait_input+0xe0>)
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	461a      	mov	r2, r3
 800e010:	4b1d      	ldr	r3, [pc, #116]	; (800e088 <tcp_timewait_input+0xd8>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e016:	4b1f      	ldr	r3, [pc, #124]	; (800e094 <tcp_timewait_input+0xe4>)
 800e018:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e01a:	885b      	ldrh	r3, [r3, #2]
 800e01c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e01e:	4a1d      	ldr	r2, [pc, #116]	; (800e094 <tcp_timewait_input+0xe4>)
 800e020:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e022:	8812      	ldrh	r2, [r2, #0]
 800e024:	b292      	uxth	r2, r2
 800e026:	9202      	str	r2, [sp, #8]
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	4b1b      	ldr	r3, [pc, #108]	; (800e098 <tcp_timewait_input+0xe8>)
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	4b1b      	ldr	r3, [pc, #108]	; (800e09c <tcp_timewait_input+0xec>)
 800e030:	4602      	mov	r2, r0
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f003 face 	bl	80115d4 <tcp_rst>
      return;
 800e038:	e01b      	b.n	800e072 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e03a:	4b0f      	ldr	r3, [pc, #60]	; (800e078 <tcp_timewait_input+0xc8>)
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	f003 0301 	and.w	r3, r3, #1
 800e042:	2b00      	cmp	r3, #0
 800e044:	d003      	beq.n	800e04e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e046:	4b16      	ldr	r3, [pc, #88]	; (800e0a0 <tcp_timewait_input+0xf0>)
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e04e:	4b10      	ldr	r3, [pc, #64]	; (800e090 <tcp_timewait_input+0xe0>)
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d00c      	beq.n	800e070 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	8b5b      	ldrh	r3, [r3, #26]
 800e05a:	f043 0302 	orr.w	r3, r3, #2
 800e05e:	b29a      	uxth	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f002 fcfb 	bl	8010a60 <tcp_output>
  }
  return;
 800e06a:	e001      	b.n	800e070 <tcp_timewait_input+0xc0>
    return;
 800e06c:	bf00      	nop
 800e06e:	e000      	b.n	800e072 <tcp_timewait_input+0xc2>
  return;
 800e070:	bf00      	nop
}
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	20001240 	.word	0x20001240
 800e07c:	0801d790 	.word	0x0801d790
 800e080:	0801d9c4 	.word	0x0801d9c4
 800e084:	0801d7dc 	.word	0x0801d7dc
 800e088:	20001234 	.word	0x20001234
 800e08c:	20001238 	.word	0x20001238
 800e090:	2000123e 	.word	0x2000123e
 800e094:	20001224 	.word	0x20001224
 800e098:	20009d18 	.word	0x20009d18
 800e09c:	20009d1c 	.word	0x20009d1c
 800e0a0:	2000d63c 	.word	0x2000d63c

0800e0a4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e0a4:	b590      	push	{r4, r7, lr}
 800e0a6:	b08d      	sub	sp, #52	; 0x34
 800e0a8:	af04      	add	r7, sp, #16
 800e0aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d106      	bne.n	800e0c8 <tcp_process+0x24>
 800e0ba:	4ba5      	ldr	r3, [pc, #660]	; (800e350 <tcp_process+0x2ac>)
 800e0bc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e0c0:	49a4      	ldr	r1, [pc, #656]	; (800e354 <tcp_process+0x2b0>)
 800e0c2:	48a5      	ldr	r0, [pc, #660]	; (800e358 <tcp_process+0x2b4>)
 800e0c4:	f009 f87e 	bl	80171c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e0c8:	4ba4      	ldr	r3, [pc, #656]	; (800e35c <tcp_process+0x2b8>)
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	f003 0304 	and.w	r3, r3, #4
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d04e      	beq.n	800e172 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	7d1b      	ldrb	r3, [r3, #20]
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	d108      	bne.n	800e0ee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0e0:	4b9f      	ldr	r3, [pc, #636]	; (800e360 <tcp_process+0x2bc>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d123      	bne.n	800e130 <tcp_process+0x8c>
        acceptable = 1;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	76fb      	strb	r3, [r7, #27]
 800e0ec:	e020      	b.n	800e130 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0f2:	4b9c      	ldr	r3, [pc, #624]	; (800e364 <tcp_process+0x2c0>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d102      	bne.n	800e100 <tcp_process+0x5c>
        acceptable = 1;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	76fb      	strb	r3, [r7, #27]
 800e0fe:	e017      	b.n	800e130 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e100:	4b98      	ldr	r3, [pc, #608]	; (800e364 <tcp_process+0x2c0>)
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	db10      	blt.n	800e130 <tcp_process+0x8c>
 800e10e:	4b95      	ldr	r3, [pc, #596]	; (800e364 <tcp_process+0x2c0>)
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e116:	6879      	ldr	r1, [r7, #4]
 800e118:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e11a:	440b      	add	r3, r1
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	dc06      	bgt.n	800e130 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	8b5b      	ldrh	r3, [r3, #26]
 800e126:	f043 0302 	orr.w	r3, r3, #2
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e130:	7efb      	ldrb	r3, [r7, #27]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d01b      	beq.n	800e16e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	7d1b      	ldrb	r3, [r3, #20]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d106      	bne.n	800e14c <tcp_process+0xa8>
 800e13e:	4b84      	ldr	r3, [pc, #528]	; (800e350 <tcp_process+0x2ac>)
 800e140:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e144:	4988      	ldr	r1, [pc, #544]	; (800e368 <tcp_process+0x2c4>)
 800e146:	4884      	ldr	r0, [pc, #528]	; (800e358 <tcp_process+0x2b4>)
 800e148:	f009 f83c 	bl	80171c4 <iprintf>
      recv_flags |= TF_RESET;
 800e14c:	4b87      	ldr	r3, [pc, #540]	; (800e36c <tcp_process+0x2c8>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	f043 0308 	orr.w	r3, r3, #8
 800e154:	b2da      	uxtb	r2, r3
 800e156:	4b85      	ldr	r3, [pc, #532]	; (800e36c <tcp_process+0x2c8>)
 800e158:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	8b5b      	ldrh	r3, [r3, #26]
 800e15e:	f023 0301 	bic.w	r3, r3, #1
 800e162:	b29a      	uxth	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e168:	f06f 030d 	mvn.w	r3, #13
 800e16c:	e37a      	b.n	800e864 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e16e:	2300      	movs	r3, #0
 800e170:	e378      	b.n	800e864 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e172:	4b7a      	ldr	r3, [pc, #488]	; (800e35c <tcp_process+0x2b8>)
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	f003 0302 	and.w	r3, r3, #2
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d010      	beq.n	800e1a0 <tcp_process+0xfc>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	7d1b      	ldrb	r3, [r3, #20]
 800e182:	2b02      	cmp	r3, #2
 800e184:	d00c      	beq.n	800e1a0 <tcp_process+0xfc>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	7d1b      	ldrb	r3, [r3, #20]
 800e18a:	2b03      	cmp	r3, #3
 800e18c:	d008      	beq.n	800e1a0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	8b5b      	ldrh	r3, [r3, #26]
 800e192:	f043 0302 	orr.w	r3, r3, #2
 800e196:	b29a      	uxth	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e19c:	2300      	movs	r3, #0
 800e19e:	e361      	b.n	800e864 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	8b5b      	ldrh	r3, [r3, #26]
 800e1a4:	f003 0310 	and.w	r3, r3, #16
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d103      	bne.n	800e1b4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e1ac:	4b70      	ldr	r3, [pc, #448]	; (800e370 <tcp_process+0x2cc>)
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f001 fc2d 	bl	800fa24 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	7d1b      	ldrb	r3, [r3, #20]
 800e1ce:	3b02      	subs	r3, #2
 800e1d0:	2b07      	cmp	r3, #7
 800e1d2:	f200 8337 	bhi.w	800e844 <tcp_process+0x7a0>
 800e1d6:	a201      	add	r2, pc, #4	; (adr r2, 800e1dc <tcp_process+0x138>)
 800e1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1dc:	0800e1fd 	.word	0x0800e1fd
 800e1e0:	0800e42d 	.word	0x0800e42d
 800e1e4:	0800e5a5 	.word	0x0800e5a5
 800e1e8:	0800e5cf 	.word	0x0800e5cf
 800e1ec:	0800e6f3 	.word	0x0800e6f3
 800e1f0:	0800e5a5 	.word	0x0800e5a5
 800e1f4:	0800e77f 	.word	0x0800e77f
 800e1f8:	0800e80f 	.word	0x0800e80f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e1fc:	4b57      	ldr	r3, [pc, #348]	; (800e35c <tcp_process+0x2b8>)
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	f003 0310 	and.w	r3, r3, #16
 800e204:	2b00      	cmp	r3, #0
 800e206:	f000 80e4 	beq.w	800e3d2 <tcp_process+0x32e>
 800e20a:	4b54      	ldr	r3, [pc, #336]	; (800e35c <tcp_process+0x2b8>)
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	f003 0302 	and.w	r3, r3, #2
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 80dd 	beq.w	800e3d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e21c:	1c5a      	adds	r2, r3, #1
 800e21e:	4b50      	ldr	r3, [pc, #320]	; (800e360 <tcp_process+0x2bc>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	429a      	cmp	r2, r3
 800e224:	f040 80d5 	bne.w	800e3d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e228:	4b4e      	ldr	r3, [pc, #312]	; (800e364 <tcp_process+0x2c0>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	1c5a      	adds	r2, r3, #1
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e23a:	4b49      	ldr	r3, [pc, #292]	; (800e360 <tcp_process+0x2bc>)
 800e23c:	681a      	ldr	r2, [r3, #0]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e242:	4b4c      	ldr	r3, [pc, #304]	; (800e374 <tcp_process+0x2d0>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	89db      	ldrh	r3, [r3, #14]
 800e248:	b29a      	uxth	r2, r3
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e25c:	4b41      	ldr	r3, [pc, #260]	; (800e364 <tcp_process+0x2c0>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	1e5a      	subs	r2, r3, #1
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2204      	movs	r2, #4
 800e26a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	3304      	adds	r3, #4
 800e274:	4618      	mov	r0, r3
 800e276:	f007 f8b7 	bl	80153e8 <ip4_route>
 800e27a:	4601      	mov	r1, r0
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	3304      	adds	r3, #4
 800e280:	461a      	mov	r2, r3
 800e282:	4620      	mov	r0, r4
 800e284:	f7fe ffda 	bl	800d23c <tcp_eff_send_mss_netif>
 800e288:	4603      	mov	r3, r0
 800e28a:	461a      	mov	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e294:	009a      	lsls	r2, r3, #2
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e29a:	005b      	lsls	r3, r3, #1
 800e29c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e2a0:	428b      	cmp	r3, r1
 800e2a2:	bf38      	it	cc
 800e2a4:	460b      	movcc	r3, r1
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d204      	bcs.n	800e2b4 <tcp_process+0x210>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	e00d      	b.n	800e2d0 <tcp_process+0x22c>
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	f241 121c 	movw	r2, #4380	; 0x111c
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d904      	bls.n	800e2cc <tcp_process+0x228>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e2c6:	005b      	lsls	r3, r3, #1
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	e001      	b.n	800e2d0 <tcp_process+0x22c>
 800e2cc:	f241 131c 	movw	r3, #4380	; 0x111c
 800e2d0:	687a      	ldr	r2, [r7, #4]
 800e2d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d106      	bne.n	800e2ee <tcp_process+0x24a>
 800e2e0:	4b1b      	ldr	r3, [pc, #108]	; (800e350 <tcp_process+0x2ac>)
 800e2e2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e2e6:	4924      	ldr	r1, [pc, #144]	; (800e378 <tcp_process+0x2d4>)
 800e2e8:	481b      	ldr	r0, [pc, #108]	; (800e358 <tcp_process+0x2b4>)
 800e2ea:	f008 ff6b 	bl	80171c4 <iprintf>
        --pcb->snd_queuelen;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e2f4:	3b01      	subs	r3, #1
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e302:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d111      	bne.n	800e32e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e30e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d106      	bne.n	800e324 <tcp_process+0x280>
 800e316:	4b0e      	ldr	r3, [pc, #56]	; (800e350 <tcp_process+0x2ac>)
 800e318:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e31c:	4917      	ldr	r1, [pc, #92]	; (800e37c <tcp_process+0x2d8>)
 800e31e:	480e      	ldr	r0, [pc, #56]	; (800e358 <tcp_process+0x2b4>)
 800e320:	f008 ff50 	bl	80171c4 <iprintf>
          pcb->unsent = rseg->next;
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	66da      	str	r2, [r3, #108]	; 0x6c
 800e32c:	e003      	b.n	800e336 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	681a      	ldr	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e336:	69f8      	ldr	r0, [r7, #28]
 800e338:	f7fe fb8d 	bl	800ca56 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e340:	2b00      	cmp	r3, #0
 800e342:	d11d      	bne.n	800e380 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e34a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e34c:	e01f      	b.n	800e38e <tcp_process+0x2ea>
 800e34e:	bf00      	nop
 800e350:	0801d790 	.word	0x0801d790
 800e354:	0801d9e4 	.word	0x0801d9e4
 800e358:	0801d7dc 	.word	0x0801d7dc
 800e35c:	20001240 	.word	0x20001240
 800e360:	20001238 	.word	0x20001238
 800e364:	20001234 	.word	0x20001234
 800e368:	0801da00 	.word	0x0801da00
 800e36c:	20001241 	.word	0x20001241
 800e370:	2000d63c 	.word	0x2000d63c
 800e374:	20001224 	.word	0x20001224
 800e378:	0801da20 	.word	0x0801da20
 800e37c:	0801da38 	.word	0x0801da38
        } else {
          pcb->rtime = 0;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2200      	movs	r2, #0
 800e38a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00a      	beq.n	800e3ae <tcp_process+0x30a>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	6910      	ldr	r0, [r2, #16]
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	6879      	ldr	r1, [r7, #4]
 800e3a6:	4798      	blx	r3
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	76bb      	strb	r3, [r7, #26]
 800e3ac:	e001      	b.n	800e3b2 <tcp_process+0x30e>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e3b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e3b6:	f113 0f0d 	cmn.w	r3, #13
 800e3ba:	d102      	bne.n	800e3c2 <tcp_process+0x31e>
          return ERR_ABRT;
 800e3bc:	f06f 030c 	mvn.w	r3, #12
 800e3c0:	e250      	b.n	800e864 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	8b5b      	ldrh	r3, [r3, #26]
 800e3c6:	f043 0302 	orr.w	r3, r3, #2
 800e3ca:	b29a      	uxth	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e3d0:	e23a      	b.n	800e848 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e3d2:	4b9d      	ldr	r3, [pc, #628]	; (800e648 <tcp_process+0x5a4>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	f003 0310 	and.w	r3, r3, #16
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f000 8234 	beq.w	800e848 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3e0:	4b9a      	ldr	r3, [pc, #616]	; (800e64c <tcp_process+0x5a8>)
 800e3e2:	6819      	ldr	r1, [r3, #0]
 800e3e4:	4b9a      	ldr	r3, [pc, #616]	; (800e650 <tcp_process+0x5ac>)
 800e3e6:	881b      	ldrh	r3, [r3, #0]
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	4b9a      	ldr	r3, [pc, #616]	; (800e654 <tcp_process+0x5b0>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3f0:	4b99      	ldr	r3, [pc, #612]	; (800e658 <tcp_process+0x5b4>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3f4:	885b      	ldrh	r3, [r3, #2]
 800e3f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e3f8:	4a97      	ldr	r2, [pc, #604]	; (800e658 <tcp_process+0x5b4>)
 800e3fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e3fc:	8812      	ldrh	r2, [r2, #0]
 800e3fe:	b292      	uxth	r2, r2
 800e400:	9202      	str	r2, [sp, #8]
 800e402:	9301      	str	r3, [sp, #4]
 800e404:	4b95      	ldr	r3, [pc, #596]	; (800e65c <tcp_process+0x5b8>)
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	4b95      	ldr	r3, [pc, #596]	; (800e660 <tcp_process+0x5bc>)
 800e40a:	4602      	mov	r2, r0
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f003 f8e1 	bl	80115d4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e418:	2b05      	cmp	r3, #5
 800e41a:	f200 8215 	bhi.w	800e848 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2200      	movs	r2, #0
 800e422:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f002 feab 	bl	8011180 <tcp_rexmit_rto>
      break;
 800e42a:	e20d      	b.n	800e848 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e42c:	4b86      	ldr	r3, [pc, #536]	; (800e648 <tcp_process+0x5a4>)
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	f003 0310 	and.w	r3, r3, #16
 800e434:	2b00      	cmp	r3, #0
 800e436:	f000 80a1 	beq.w	800e57c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e43a:	4b84      	ldr	r3, [pc, #528]	; (800e64c <tcp_process+0x5a8>)
 800e43c:	681a      	ldr	r2, [r3, #0]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	3b01      	subs	r3, #1
 800e446:	2b00      	cmp	r3, #0
 800e448:	db7e      	blt.n	800e548 <tcp_process+0x4a4>
 800e44a:	4b80      	ldr	r3, [pc, #512]	; (800e64c <tcp_process+0x5a8>)
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e452:	1ad3      	subs	r3, r2, r3
 800e454:	2b00      	cmp	r3, #0
 800e456:	dc77      	bgt.n	800e548 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2204      	movs	r2, #4
 800e45c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e462:	2b00      	cmp	r3, #0
 800e464:	d102      	bne.n	800e46c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e466:	23fa      	movs	r3, #250	; 0xfa
 800e468:	76bb      	strb	r3, [r7, #26]
 800e46a:	e01d      	b.n	800e4a8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e470:	699b      	ldr	r3, [r3, #24]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d106      	bne.n	800e484 <tcp_process+0x3e0>
 800e476:	4b7b      	ldr	r3, [pc, #492]	; (800e664 <tcp_process+0x5c0>)
 800e478:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e47c:	497a      	ldr	r1, [pc, #488]	; (800e668 <tcp_process+0x5c4>)
 800e47e:	487b      	ldr	r0, [pc, #492]	; (800e66c <tcp_process+0x5c8>)
 800e480:	f008 fea0 	bl	80171c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e488:	699b      	ldr	r3, [r3, #24]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d00a      	beq.n	800e4a4 <tcp_process+0x400>
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e492:	699b      	ldr	r3, [r3, #24]
 800e494:	687a      	ldr	r2, [r7, #4]
 800e496:	6910      	ldr	r0, [r2, #16]
 800e498:	2200      	movs	r2, #0
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	4798      	blx	r3
 800e49e:	4603      	mov	r3, r0
 800e4a0:	76bb      	strb	r3, [r7, #26]
 800e4a2:	e001      	b.n	800e4a8 <tcp_process+0x404>
 800e4a4:	23f0      	movs	r3, #240	; 0xf0
 800e4a6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e4a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00a      	beq.n	800e4c6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e4b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e4b4:	f113 0f0d 	cmn.w	r3, #13
 800e4b8:	d002      	beq.n	800e4c0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f7fd fc26 	bl	800bd0c <tcp_abort>
            }
            return ERR_ABRT;
 800e4c0:	f06f 030c 	mvn.w	r3, #12
 800e4c4:	e1ce      	b.n	800e864 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 fae0 	bl	800ea8c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e4cc:	4b68      	ldr	r3, [pc, #416]	; (800e670 <tcp_process+0x5cc>)
 800e4ce:	881b      	ldrh	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d005      	beq.n	800e4e0 <tcp_process+0x43c>
            recv_acked--;
 800e4d4:	4b66      	ldr	r3, [pc, #408]	; (800e670 <tcp_process+0x5cc>)
 800e4d6:	881b      	ldrh	r3, [r3, #0]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	b29a      	uxth	r2, r3
 800e4dc:	4b64      	ldr	r3, [pc, #400]	; (800e670 <tcp_process+0x5cc>)
 800e4de:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4e4:	009a      	lsls	r2, r3, #2
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4ea:	005b      	lsls	r3, r3, #1
 800e4ec:	f241 111c 	movw	r1, #4380	; 0x111c
 800e4f0:	428b      	cmp	r3, r1
 800e4f2:	bf38      	it	cc
 800e4f4:	460b      	movcc	r3, r1
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d204      	bcs.n	800e504 <tcp_process+0x460>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	b29b      	uxth	r3, r3
 800e502:	e00d      	b.n	800e520 <tcp_process+0x47c>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e508:	005b      	lsls	r3, r3, #1
 800e50a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e50e:	4293      	cmp	r3, r2
 800e510:	d904      	bls.n	800e51c <tcp_process+0x478>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e516:	005b      	lsls	r3, r3, #1
 800e518:	b29b      	uxth	r3, r3
 800e51a:	e001      	b.n	800e520 <tcp_process+0x47c>
 800e51c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e526:	4b53      	ldr	r3, [pc, #332]	; (800e674 <tcp_process+0x5d0>)
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	f003 0320 	and.w	r3, r3, #32
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d037      	beq.n	800e5a2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	8b5b      	ldrh	r3, [r3, #26]
 800e536:	f043 0302 	orr.w	r3, r3, #2
 800e53a:	b29a      	uxth	r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2207      	movs	r2, #7
 800e544:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e546:	e02c      	b.n	800e5a2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e548:	4b40      	ldr	r3, [pc, #256]	; (800e64c <tcp_process+0x5a8>)
 800e54a:	6819      	ldr	r1, [r3, #0]
 800e54c:	4b40      	ldr	r3, [pc, #256]	; (800e650 <tcp_process+0x5ac>)
 800e54e:	881b      	ldrh	r3, [r3, #0]
 800e550:	461a      	mov	r2, r3
 800e552:	4b40      	ldr	r3, [pc, #256]	; (800e654 <tcp_process+0x5b0>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e558:	4b3f      	ldr	r3, [pc, #252]	; (800e658 <tcp_process+0x5b4>)
 800e55a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e55c:	885b      	ldrh	r3, [r3, #2]
 800e55e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e560:	4a3d      	ldr	r2, [pc, #244]	; (800e658 <tcp_process+0x5b4>)
 800e562:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e564:	8812      	ldrh	r2, [r2, #0]
 800e566:	b292      	uxth	r2, r2
 800e568:	9202      	str	r2, [sp, #8]
 800e56a:	9301      	str	r3, [sp, #4]
 800e56c:	4b3b      	ldr	r3, [pc, #236]	; (800e65c <tcp_process+0x5b8>)
 800e56e:	9300      	str	r3, [sp, #0]
 800e570:	4b3b      	ldr	r3, [pc, #236]	; (800e660 <tcp_process+0x5bc>)
 800e572:	4602      	mov	r2, r0
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f003 f82d 	bl	80115d4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e57a:	e167      	b.n	800e84c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e57c:	4b32      	ldr	r3, [pc, #200]	; (800e648 <tcp_process+0x5a4>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	f003 0302 	and.w	r3, r3, #2
 800e584:	2b00      	cmp	r3, #0
 800e586:	f000 8161 	beq.w	800e84c <tcp_process+0x7a8>
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e58e:	1e5a      	subs	r2, r3, #1
 800e590:	4b30      	ldr	r3, [pc, #192]	; (800e654 <tcp_process+0x5b0>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	429a      	cmp	r2, r3
 800e596:	f040 8159 	bne.w	800e84c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f002 fe12 	bl	80111c4 <tcp_rexmit>
      break;
 800e5a0:	e154      	b.n	800e84c <tcp_process+0x7a8>
 800e5a2:	e153      	b.n	800e84c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 fa71 	bl	800ea8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e5aa:	4b32      	ldr	r3, [pc, #200]	; (800e674 <tcp_process+0x5d0>)
 800e5ac:	781b      	ldrb	r3, [r3, #0]
 800e5ae:	f003 0320 	and.w	r3, r3, #32
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f000 814c 	beq.w	800e850 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	8b5b      	ldrh	r3, [r3, #26]
 800e5bc:	f043 0302 	orr.w	r3, r3, #2
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2207      	movs	r2, #7
 800e5ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e5cc:	e140      	b.n	800e850 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 fa5c 	bl	800ea8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e5d4:	4b27      	ldr	r3, [pc, #156]	; (800e674 <tcp_process+0x5d0>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	f003 0320 	and.w	r3, r3, #32
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d071      	beq.n	800e6c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e5e0:	4b19      	ldr	r3, [pc, #100]	; (800e648 <tcp_process+0x5a4>)
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	f003 0310 	and.w	r3, r3, #16
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d060      	beq.n	800e6ae <tcp_process+0x60a>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e5f0:	4b16      	ldr	r3, [pc, #88]	; (800e64c <tcp_process+0x5a8>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d15a      	bne.n	800e6ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d156      	bne.n	800e6ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	8b5b      	ldrh	r3, [r3, #26]
 800e604:	f043 0302 	orr.w	r3, r3, #2
 800e608:	b29a      	uxth	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7fe fcfc 	bl	800d00c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e614:	4b18      	ldr	r3, [pc, #96]	; (800e678 <tcp_process+0x5d4>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d105      	bne.n	800e62a <tcp_process+0x586>
 800e61e:	4b16      	ldr	r3, [pc, #88]	; (800e678 <tcp_process+0x5d4>)
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	4a14      	ldr	r2, [pc, #80]	; (800e678 <tcp_process+0x5d4>)
 800e626:	6013      	str	r3, [r2, #0]
 800e628:	e02e      	b.n	800e688 <tcp_process+0x5e4>
 800e62a:	4b13      	ldr	r3, [pc, #76]	; (800e678 <tcp_process+0x5d4>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	617b      	str	r3, [r7, #20]
 800e630:	e027      	b.n	800e682 <tcp_process+0x5de>
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	68db      	ldr	r3, [r3, #12]
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d11f      	bne.n	800e67c <tcp_process+0x5d8>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	68da      	ldr	r2, [r3, #12]
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	60da      	str	r2, [r3, #12]
 800e644:	e020      	b.n	800e688 <tcp_process+0x5e4>
 800e646:	bf00      	nop
 800e648:	20001240 	.word	0x20001240
 800e64c:	20001238 	.word	0x20001238
 800e650:	2000123e 	.word	0x2000123e
 800e654:	20001234 	.word	0x20001234
 800e658:	20001224 	.word	0x20001224
 800e65c:	20009d18 	.word	0x20009d18
 800e660:	20009d1c 	.word	0x20009d1c
 800e664:	0801d790 	.word	0x0801d790
 800e668:	0801da4c 	.word	0x0801da4c
 800e66c:	0801d7dc 	.word	0x0801d7dc
 800e670:	2000123c 	.word	0x2000123c
 800e674:	20001241 	.word	0x20001241
 800e678:	2000d638 	.word	0x2000d638
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	617b      	str	r3, [r7, #20]
 800e682:	697b      	ldr	r3, [r7, #20]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d1d4      	bne.n	800e632 <tcp_process+0x58e>
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	60da      	str	r2, [r3, #12]
 800e68e:	4b77      	ldr	r3, [pc, #476]	; (800e86c <tcp_process+0x7c8>)
 800e690:	2201      	movs	r2, #1
 800e692:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	220a      	movs	r2, #10
 800e698:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e69a:	4b75      	ldr	r3, [pc, #468]	; (800e870 <tcp_process+0x7cc>)
 800e69c:	681a      	ldr	r2, [r3, #0]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	60da      	str	r2, [r3, #12]
 800e6a2:	4a73      	ldr	r2, [pc, #460]	; (800e870 <tcp_process+0x7cc>)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6013      	str	r3, [r2, #0]
 800e6a8:	f003 f956 	bl	8011958 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e6ac:	e0d2      	b.n	800e854 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	8b5b      	ldrh	r3, [r3, #26]
 800e6b2:	f043 0302 	orr.w	r3, r3, #2
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2208      	movs	r2, #8
 800e6c0:	751a      	strb	r2, [r3, #20]
      break;
 800e6c2:	e0c7      	b.n	800e854 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e6c4:	4b6b      	ldr	r3, [pc, #428]	; (800e874 <tcp_process+0x7d0>)
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	f003 0310 	and.w	r3, r3, #16
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f000 80c1 	beq.w	800e854 <tcp_process+0x7b0>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e6d6:	4b68      	ldr	r3, [pc, #416]	; (800e878 <tcp_process+0x7d4>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	429a      	cmp	r2, r3
 800e6dc:	f040 80ba 	bne.w	800e854 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	f040 80b5 	bne.w	800e854 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2206      	movs	r2, #6
 800e6ee:	751a      	strb	r2, [r3, #20]
      break;
 800e6f0:	e0b0      	b.n	800e854 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 f9ca 	bl	800ea8c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e6f8:	4b60      	ldr	r3, [pc, #384]	; (800e87c <tcp_process+0x7d8>)
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	f003 0320 	and.w	r3, r3, #32
 800e700:	2b00      	cmp	r3, #0
 800e702:	f000 80a9 	beq.w	800e858 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	8b5b      	ldrh	r3, [r3, #26]
 800e70a:	f043 0302 	orr.w	r3, r3, #2
 800e70e:	b29a      	uxth	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f7fe fc79 	bl	800d00c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e71a:	4b59      	ldr	r3, [pc, #356]	; (800e880 <tcp_process+0x7dc>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	429a      	cmp	r2, r3
 800e722:	d105      	bne.n	800e730 <tcp_process+0x68c>
 800e724:	4b56      	ldr	r3, [pc, #344]	; (800e880 <tcp_process+0x7dc>)
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	4a55      	ldr	r2, [pc, #340]	; (800e880 <tcp_process+0x7dc>)
 800e72c:	6013      	str	r3, [r2, #0]
 800e72e:	e013      	b.n	800e758 <tcp_process+0x6b4>
 800e730:	4b53      	ldr	r3, [pc, #332]	; (800e880 <tcp_process+0x7dc>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	613b      	str	r3, [r7, #16]
 800e736:	e00c      	b.n	800e752 <tcp_process+0x6ae>
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	68db      	ldr	r3, [r3, #12]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d104      	bne.n	800e74c <tcp_process+0x6a8>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	68da      	ldr	r2, [r3, #12]
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	60da      	str	r2, [r3, #12]
 800e74a:	e005      	b.n	800e758 <tcp_process+0x6b4>
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	613b      	str	r3, [r7, #16]
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d1ef      	bne.n	800e738 <tcp_process+0x694>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	60da      	str	r2, [r3, #12]
 800e75e:	4b43      	ldr	r3, [pc, #268]	; (800e86c <tcp_process+0x7c8>)
 800e760:	2201      	movs	r2, #1
 800e762:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	220a      	movs	r2, #10
 800e768:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e76a:	4b41      	ldr	r3, [pc, #260]	; (800e870 <tcp_process+0x7cc>)
 800e76c:	681a      	ldr	r2, [r3, #0]
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	60da      	str	r2, [r3, #12]
 800e772:	4a3f      	ldr	r2, [pc, #252]	; (800e870 <tcp_process+0x7cc>)
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6013      	str	r3, [r2, #0]
 800e778:	f003 f8ee 	bl	8011958 <tcp_timer_needed>
      }
      break;
 800e77c:	e06c      	b.n	800e858 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 f984 	bl	800ea8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e784:	4b3b      	ldr	r3, [pc, #236]	; (800e874 <tcp_process+0x7d0>)
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	f003 0310 	and.w	r3, r3, #16
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d065      	beq.n	800e85c <tcp_process+0x7b8>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e794:	4b38      	ldr	r3, [pc, #224]	; (800e878 <tcp_process+0x7d4>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d15f      	bne.n	800e85c <tcp_process+0x7b8>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d15b      	bne.n	800e85c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e7a4:	6878      	ldr	r0, [r7, #4]
 800e7a6:	f7fe fc31 	bl	800d00c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e7aa:	4b35      	ldr	r3, [pc, #212]	; (800e880 <tcp_process+0x7dc>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d105      	bne.n	800e7c0 <tcp_process+0x71c>
 800e7b4:	4b32      	ldr	r3, [pc, #200]	; (800e880 <tcp_process+0x7dc>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	4a31      	ldr	r2, [pc, #196]	; (800e880 <tcp_process+0x7dc>)
 800e7bc:	6013      	str	r3, [r2, #0]
 800e7be:	e013      	b.n	800e7e8 <tcp_process+0x744>
 800e7c0:	4b2f      	ldr	r3, [pc, #188]	; (800e880 <tcp_process+0x7dc>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	60fb      	str	r3, [r7, #12]
 800e7c6:	e00c      	b.n	800e7e2 <tcp_process+0x73e>
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d104      	bne.n	800e7dc <tcp_process+0x738>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	68da      	ldr	r2, [r3, #12]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	60da      	str	r2, [r3, #12]
 800e7da:	e005      	b.n	800e7e8 <tcp_process+0x744>
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	68db      	ldr	r3, [r3, #12]
 800e7e0:	60fb      	str	r3, [r7, #12]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d1ef      	bne.n	800e7c8 <tcp_process+0x724>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	60da      	str	r2, [r3, #12]
 800e7ee:	4b1f      	ldr	r3, [pc, #124]	; (800e86c <tcp_process+0x7c8>)
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	220a      	movs	r2, #10
 800e7f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e7fa:	4b1d      	ldr	r3, [pc, #116]	; (800e870 <tcp_process+0x7cc>)
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	60da      	str	r2, [r3, #12]
 800e802:	4a1b      	ldr	r2, [pc, #108]	; (800e870 <tcp_process+0x7cc>)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6013      	str	r3, [r2, #0]
 800e808:	f003 f8a6 	bl	8011958 <tcp_timer_needed>
      }
      break;
 800e80c:	e026      	b.n	800e85c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f000 f93c 	bl	800ea8c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e814:	4b17      	ldr	r3, [pc, #92]	; (800e874 <tcp_process+0x7d0>)
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	f003 0310 	and.w	r3, r3, #16
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d01f      	beq.n	800e860 <tcp_process+0x7bc>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e824:	4b14      	ldr	r3, [pc, #80]	; (800e878 <tcp_process+0x7d4>)
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d119      	bne.n	800e860 <tcp_process+0x7bc>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e830:	2b00      	cmp	r3, #0
 800e832:	d115      	bne.n	800e860 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e834:	4b11      	ldr	r3, [pc, #68]	; (800e87c <tcp_process+0x7d8>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	f043 0310 	orr.w	r3, r3, #16
 800e83c:	b2da      	uxtb	r2, r3
 800e83e:	4b0f      	ldr	r3, [pc, #60]	; (800e87c <tcp_process+0x7d8>)
 800e840:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e842:	e00d      	b.n	800e860 <tcp_process+0x7bc>
    default:
      break;
 800e844:	bf00      	nop
 800e846:	e00c      	b.n	800e862 <tcp_process+0x7be>
      break;
 800e848:	bf00      	nop
 800e84a:	e00a      	b.n	800e862 <tcp_process+0x7be>
      break;
 800e84c:	bf00      	nop
 800e84e:	e008      	b.n	800e862 <tcp_process+0x7be>
      break;
 800e850:	bf00      	nop
 800e852:	e006      	b.n	800e862 <tcp_process+0x7be>
      break;
 800e854:	bf00      	nop
 800e856:	e004      	b.n	800e862 <tcp_process+0x7be>
      break;
 800e858:	bf00      	nop
 800e85a:	e002      	b.n	800e862 <tcp_process+0x7be>
      break;
 800e85c:	bf00      	nop
 800e85e:	e000      	b.n	800e862 <tcp_process+0x7be>
      break;
 800e860:	bf00      	nop
  }
  return ERR_OK;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3724      	adds	r7, #36	; 0x24
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd90      	pop	{r4, r7, pc}
 800e86c:	2000d634 	.word	0x2000d634
 800e870:	2000d648 	.word	0x2000d648
 800e874:	20001240 	.word	0x20001240
 800e878:	20001238 	.word	0x20001238
 800e87c:	20001241 	.word	0x20001241
 800e880:	2000d638 	.word	0x2000d638

0800e884 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e884:	b590      	push	{r4, r7, lr}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d106      	bne.n	800e8a2 <tcp_oos_insert_segment+0x1e>
 800e894:	4b3b      	ldr	r3, [pc, #236]	; (800e984 <tcp_oos_insert_segment+0x100>)
 800e896:	f240 421f 	movw	r2, #1055	; 0x41f
 800e89a:	493b      	ldr	r1, [pc, #236]	; (800e988 <tcp_oos_insert_segment+0x104>)
 800e89c:	483b      	ldr	r0, [pc, #236]	; (800e98c <tcp_oos_insert_segment+0x108>)
 800e89e:	f008 fc91 	bl	80171c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	899b      	ldrh	r3, [r3, #12]
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f7fb f8f8 	bl	8009aa0 <lwip_htons>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	f003 0301 	and.w	r3, r3, #1
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d028      	beq.n	800e90e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e8bc:	6838      	ldr	r0, [r7, #0]
 800e8be:	f7fe f8b5 	bl	800ca2c <tcp_segs_free>
    next = NULL;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	603b      	str	r3, [r7, #0]
 800e8c6:	e056      	b.n	800e976 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	899b      	ldrh	r3, [r3, #12]
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fb f8e5 	bl	8009aa0 <lwip_htons>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	b2db      	uxtb	r3, r3
 800e8da:	f003 0301 	and.w	r3, r3, #1
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00d      	beq.n	800e8fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	899b      	ldrh	r3, [r3, #12]
 800e8e8:	b29c      	uxth	r4, r3
 800e8ea:	2001      	movs	r0, #1
 800e8ec:	f7fb f8d8 	bl	8009aa0 <lwip_htons>
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	4322      	orrs	r2, r4
 800e8fa:	b292      	uxth	r2, r2
 800e8fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e908:	68f8      	ldr	r0, [r7, #12]
 800e90a:	f7fe f8a4 	bl	800ca56 <tcp_seg_free>
    while (next &&
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d00e      	beq.n	800e932 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	891b      	ldrh	r3, [r3, #8]
 800e918:	461a      	mov	r2, r3
 800e91a:	4b1d      	ldr	r3, [pc, #116]	; (800e990 <tcp_oos_insert_segment+0x10c>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	441a      	add	r2, r3
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	68db      	ldr	r3, [r3, #12]
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	6839      	ldr	r1, [r7, #0]
 800e928:	8909      	ldrh	r1, [r1, #8]
 800e92a:	440b      	add	r3, r1
 800e92c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e92e:	2b00      	cmp	r3, #0
 800e930:	daca      	bge.n	800e8c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d01e      	beq.n	800e976 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	891b      	ldrh	r3, [r3, #8]
 800e93c:	461a      	mov	r2, r3
 800e93e:	4b14      	ldr	r3, [pc, #80]	; (800e990 <tcp_oos_insert_segment+0x10c>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	441a      	add	r2, r3
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	dd12      	ble.n	800e976 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	b29a      	uxth	r2, r3
 800e958:	4b0d      	ldr	r3, [pc, #52]	; (800e990 <tcp_oos_insert_segment+0x10c>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	b29b      	uxth	r3, r3
 800e95e:	1ad3      	subs	r3, r2, r3
 800e960:	b29a      	uxth	r2, r3
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	685a      	ldr	r2, [r3, #4]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	891b      	ldrh	r3, [r3, #8]
 800e96e:	4619      	mov	r1, r3
 800e970:	4610      	mov	r0, r2
 800e972:	f7fc faa9 	bl	800aec8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	683a      	ldr	r2, [r7, #0]
 800e97a:	601a      	str	r2, [r3, #0]
}
 800e97c:	bf00      	nop
 800e97e:	3714      	adds	r7, #20
 800e980:	46bd      	mov	sp, r7
 800e982:	bd90      	pop	{r4, r7, pc}
 800e984:	0801d790 	.word	0x0801d790
 800e988:	0801da6c 	.word	0x0801da6c
 800e98c:	0801d7dc 	.word	0x0801d7dc
 800e990:	20001234 	.word	0x20001234

0800e994 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e994:	b5b0      	push	{r4, r5, r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	607a      	str	r2, [r7, #4]
 800e9a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e9a2:	e03e      	b.n	800ea22 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fc fc96 	bl	800b2e4 <pbuf_clen>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e9c2:	8a7a      	ldrh	r2, [r7, #18]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d906      	bls.n	800e9d6 <tcp_free_acked_segments+0x42>
 800e9c8:	4b2a      	ldr	r3, [pc, #168]	; (800ea74 <tcp_free_acked_segments+0xe0>)
 800e9ca:	f240 4257 	movw	r2, #1111	; 0x457
 800e9ce:	492a      	ldr	r1, [pc, #168]	; (800ea78 <tcp_free_acked_segments+0xe4>)
 800e9d0:	482a      	ldr	r0, [pc, #168]	; (800ea7c <tcp_free_acked_segments+0xe8>)
 800e9d2:	f008 fbf7 	bl	80171c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e9dc:	8a7b      	ldrh	r3, [r7, #18]
 800e9de:	1ad3      	subs	r3, r2, r3
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	891a      	ldrh	r2, [r3, #8]
 800e9ec:	4b24      	ldr	r3, [pc, #144]	; (800ea80 <tcp_free_acked_segments+0xec>)
 800e9ee:	881b      	ldrh	r3, [r3, #0]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	b29a      	uxth	r2, r3
 800e9f4:	4b22      	ldr	r3, [pc, #136]	; (800ea80 <tcp_free_acked_segments+0xec>)
 800e9f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e9f8:	6978      	ldr	r0, [r7, #20]
 800e9fa:	f7fe f82c 	bl	800ca56 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00c      	beq.n	800ea22 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ea08:	68bb      	ldr	r3, [r7, #8]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d109      	bne.n	800ea22 <tcp_free_acked_segments+0x8e>
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d106      	bne.n	800ea22 <tcp_free_acked_segments+0x8e>
 800ea14:	4b17      	ldr	r3, [pc, #92]	; (800ea74 <tcp_free_acked_segments+0xe0>)
 800ea16:	f240 4261 	movw	r2, #1121	; 0x461
 800ea1a:	491a      	ldr	r1, [pc, #104]	; (800ea84 <tcp_free_acked_segments+0xf0>)
 800ea1c:	4817      	ldr	r0, [pc, #92]	; (800ea7c <tcp_free_acked_segments+0xe8>)
 800ea1e:	f008 fbd1 	bl	80171c4 <iprintf>
  while (seg_list != NULL &&
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d020      	beq.n	800ea6a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fb f84b 	bl	8009aca <lwip_htonl>
 800ea34:	4604      	mov	r4, r0
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	891b      	ldrh	r3, [r3, #8]
 800ea3a:	461d      	mov	r5, r3
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	899b      	ldrh	r3, [r3, #12]
 800ea42:	b29b      	uxth	r3, r3
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fb f82b 	bl	8009aa0 <lwip_htons>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	f003 0303 	and.w	r3, r3, #3
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d001      	beq.n	800ea5a <tcp_free_acked_segments+0xc6>
 800ea56:	2301      	movs	r3, #1
 800ea58:	e000      	b.n	800ea5c <tcp_free_acked_segments+0xc8>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	442b      	add	r3, r5
 800ea5e:	18e2      	adds	r2, r4, r3
 800ea60:	4b09      	ldr	r3, [pc, #36]	; (800ea88 <tcp_free_acked_segments+0xf4>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	dd9c      	ble.n	800e9a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ea6a:	68bb      	ldr	r3, [r7, #8]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3718      	adds	r7, #24
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bdb0      	pop	{r4, r5, r7, pc}
 800ea74:	0801d790 	.word	0x0801d790
 800ea78:	0801da94 	.word	0x0801da94
 800ea7c:	0801d7dc 	.word	0x0801d7dc
 800ea80:	2000123c 	.word	0x2000123c
 800ea84:	0801dabc 	.word	0x0801dabc
 800ea88:	20001238 	.word	0x20001238

0800ea8c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ea8c:	b5b0      	push	{r4, r5, r7, lr}
 800ea8e:	b094      	sub	sp, #80	; 0x50
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ea94:	2300      	movs	r3, #0
 800ea96:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d106      	bne.n	800eaac <tcp_receive+0x20>
 800ea9e:	4ba6      	ldr	r3, [pc, #664]	; (800ed38 <tcp_receive+0x2ac>)
 800eaa0:	f240 427b 	movw	r2, #1147	; 0x47b
 800eaa4:	49a5      	ldr	r1, [pc, #660]	; (800ed3c <tcp_receive+0x2b0>)
 800eaa6:	48a6      	ldr	r0, [pc, #664]	; (800ed40 <tcp_receive+0x2b4>)
 800eaa8:	f008 fb8c 	bl	80171c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	7d1b      	ldrb	r3, [r3, #20]
 800eab0:	2b03      	cmp	r3, #3
 800eab2:	d806      	bhi.n	800eac2 <tcp_receive+0x36>
 800eab4:	4ba0      	ldr	r3, [pc, #640]	; (800ed38 <tcp_receive+0x2ac>)
 800eab6:	f240 427c 	movw	r2, #1148	; 0x47c
 800eaba:	49a2      	ldr	r1, [pc, #648]	; (800ed44 <tcp_receive+0x2b8>)
 800eabc:	48a0      	ldr	r0, [pc, #640]	; (800ed40 <tcp_receive+0x2b4>)
 800eabe:	f008 fb81 	bl	80171c4 <iprintf>

  if (flags & TCP_ACK) {
 800eac2:	4ba1      	ldr	r3, [pc, #644]	; (800ed48 <tcp_receive+0x2bc>)
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	f003 0310 	and.w	r3, r3, #16
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	f000 8263 	beq.w	800ef96 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ead6:	461a      	mov	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eadc:	4413      	add	r3, r2
 800eade:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eae4:	4b99      	ldr	r3, [pc, #612]	; (800ed4c <tcp_receive+0x2c0>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	db1b      	blt.n	800eb26 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eaf2:	4b96      	ldr	r3, [pc, #600]	; (800ed4c <tcp_receive+0x2c0>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d106      	bne.n	800eb08 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eafe:	4b94      	ldr	r3, [pc, #592]	; (800ed50 <tcp_receive+0x2c4>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	1ad3      	subs	r3, r2, r3
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	db0e      	blt.n	800eb26 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eb0c:	4b90      	ldr	r3, [pc, #576]	; (800ed50 <tcp_receive+0x2c4>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d125      	bne.n	800eb60 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800eb14:	4b8f      	ldr	r3, [pc, #572]	; (800ed54 <tcp_receive+0x2c8>)
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	89db      	ldrh	r3, [r3, #14]
 800eb1a:	b29a      	uxth	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d91c      	bls.n	800eb60 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800eb26:	4b8b      	ldr	r3, [pc, #556]	; (800ed54 <tcp_receive+0x2c8>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	89db      	ldrh	r3, [r3, #14]
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d205      	bcs.n	800eb50 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800eb50:	4b7e      	ldr	r3, [pc, #504]	; (800ed4c <tcp_receive+0x2c0>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800eb58:	4b7d      	ldr	r3, [pc, #500]	; (800ed50 <tcp_receive+0x2c4>)
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800eb60:	4b7b      	ldr	r3, [pc, #492]	; (800ed50 <tcp_receive+0x2c4>)
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	dc58      	bgt.n	800ec20 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800eb6e:	4b7a      	ldr	r3, [pc, #488]	; (800ed58 <tcp_receive+0x2cc>)
 800eb70:	881b      	ldrh	r3, [r3, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d14b      	bne.n	800ec0e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800eb80:	4413      	add	r3, r2
 800eb82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d142      	bne.n	800ec0e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	db3d      	blt.n	800ec0e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb96:	4b6e      	ldr	r3, [pc, #440]	; (800ed50 <tcp_receive+0x2c4>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d137      	bne.n	800ec0e <tcp_receive+0x182>
              found_dupack = 1;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eba8:	2bff      	cmp	r3, #255	; 0xff
 800ebaa:	d007      	beq.n	800ebbc <tcp_receive+0x130>
                ++pcb->dupacks;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	b2da      	uxtb	r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ebc2:	2b03      	cmp	r3, #3
 800ebc4:	d91b      	bls.n	800ebfe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebd0:	4413      	add	r3, r2
 800ebd2:	b29a      	uxth	r2, r3
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d30a      	bcc.n	800ebf4 <tcp_receive+0x168>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ebe8:	4413      	add	r3, r2
 800ebea:	b29a      	uxth	r2, r3
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ebf2:	e004      	b.n	800ebfe <tcp_receive+0x172>
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d902      	bls.n	800ec0e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f002 fb47 	bl	801129c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ec0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	f040 8160 	bne.w	800eed6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec1e:	e15a      	b.n	800eed6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec20:	4b4b      	ldr	r3, [pc, #300]	; (800ed50 <tcp_receive+0x2c4>)
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	f2c0 814d 	blt.w	800eecc <tcp_receive+0x440>
 800ec32:	4b47      	ldr	r3, [pc, #284]	; (800ed50 <tcp_receive+0x2c4>)
 800ec34:	681a      	ldr	r2, [r3, #0]
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec3a:	1ad3      	subs	r3, r2, r3
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	f300 8145 	bgt.w	800eecc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	8b5b      	ldrh	r3, [r3, #26]
 800ec46:	f003 0304 	and.w	r3, r3, #4
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d010      	beq.n	800ec70 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	8b5b      	ldrh	r3, [r3, #26]
 800ec52:	f023 0304 	bic.w	r3, r3, #4
 800ec56:	b29a      	uxth	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec7e:	10db      	asrs	r3, r3, #3
 800ec80:	b21b      	sxth	r3, r3
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	4413      	add	r3, r2
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	b21a      	sxth	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ec98:	4b2d      	ldr	r3, [pc, #180]	; (800ed50 <tcp_receive+0x2c4>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	1ad3      	subs	r3, r2, r3
 800eca6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ecb0:	4b27      	ldr	r3, [pc, #156]	; (800ed50 <tcp_receive+0x2c4>)
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	7d1b      	ldrb	r3, [r3, #20]
 800ecbc:	2b03      	cmp	r3, #3
 800ecbe:	f240 8096 	bls.w	800edee <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d244      	bcs.n	800ed5c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	8b5b      	ldrh	r3, [r3, #26]
 800ecd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d001      	beq.n	800ece2 <tcp_receive+0x256>
 800ecde:	2301      	movs	r3, #1
 800ece0:	e000      	b.n	800ece4 <tcp_receive+0x258>
 800ece2:	2302      	movs	r3, #2
 800ece4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ece8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecf2:	fb12 f303 	smulbb	r3, r2, r3
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	bf28      	it	cs
 800ecfe:	4613      	movcs	r3, r2
 800ed00:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed0a:	4413      	add	r3, r2
 800ed0c:	b29a      	uxth	r2, r3
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d309      	bcc.n	800ed2c <tcp_receive+0x2a0>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed20:	4413      	add	r3, r2
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed2a:	e060      	b.n	800edee <tcp_receive+0x362>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed36:	e05a      	b.n	800edee <tcp_receive+0x362>
 800ed38:	0801d790 	.word	0x0801d790
 800ed3c:	0801dadc 	.word	0x0801dadc
 800ed40:	0801d7dc 	.word	0x0801d7dc
 800ed44:	0801daf8 	.word	0x0801daf8
 800ed48:	20001240 	.word	0x20001240
 800ed4c:	20001234 	.word	0x20001234
 800ed50:	20001238 	.word	0x20001238
 800ed54:	20001224 	.word	0x20001224
 800ed58:	2000123e 	.word	0x2000123e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed64:	4413      	add	r3, r2
 800ed66:	b29a      	uxth	r2, r3
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d309      	bcc.n	800ed86 <tcp_receive+0x2fa>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed7a:	4413      	add	r3, r2
 800ed7c:	b29a      	uxth	r2, r3
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ed84:	e004      	b.n	800ed90 <tcp_receive+0x304>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d326      	bcc.n	800edee <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800edac:	1ad3      	subs	r3, r2, r3
 800edae:	b29a      	uxth	r2, r3
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edc0:	4413      	add	r3, r2
 800edc2:	b29a      	uxth	r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800edca:	429a      	cmp	r2, r3
 800edcc:	d30a      	bcc.n	800ede4 <tcp_receive+0x358>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edd8:	4413      	add	r3, r2
 800edda:	b29a      	uxth	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ede2:	e004      	b.n	800edee <tcp_receive+0x362>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edf6:	4a98      	ldr	r2, [pc, #608]	; (800f058 <tcp_receive+0x5cc>)
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f7ff fdcb 	bl	800e994 <tcp_free_acked_segments>
 800edfe:	4602      	mov	r2, r0
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee0c:	4a93      	ldr	r2, [pc, #588]	; (800f05c <tcp_receive+0x5d0>)
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7ff fdc0 	bl	800e994 <tcp_free_acked_segments>
 800ee14:	4602      	mov	r2, r0
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d104      	bne.n	800ee2c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee28:	861a      	strh	r2, [r3, #48]	; 0x30
 800ee2a:	e002      	b.n	800ee32 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d103      	bne.n	800ee48 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ee4e:	4b84      	ldr	r3, [pc, #528]	; (800f060 <tcp_receive+0x5d4>)
 800ee50:	881b      	ldrh	r3, [r3, #0]
 800ee52:	4413      	add	r3, r2
 800ee54:	b29a      	uxth	r2, r3
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	8b5b      	ldrh	r3, [r3, #26]
 800ee60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d035      	beq.n	800eed4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d118      	bne.n	800eea2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d00c      	beq.n	800ee92 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	685b      	ldr	r3, [r3, #4]
 800ee84:	4618      	mov	r0, r3
 800ee86:	f7fa fe20 	bl	8009aca <lwip_htonl>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	dc20      	bgt.n	800eed4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	8b5b      	ldrh	r3, [r3, #26]
 800ee96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eea0:	e018      	b.n	800eed4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	685b      	ldr	r3, [r3, #4]
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fa fe0b 	bl	8009aca <lwip_htonl>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	1ae3      	subs	r3, r4, r3
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	dc0b      	bgt.n	800eed4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	8b5b      	ldrh	r3, [r3, #26]
 800eec0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eec4:	b29a      	uxth	r2, r3
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eeca:	e003      	b.n	800eed4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f002 fbd3 	bl	8011678 <tcp_send_empty_ack>
 800eed2:	e000      	b.n	800eed6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eed4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d05b      	beq.n	800ef96 <tcp_receive+0x50a>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eee2:	4b60      	ldr	r3, [pc, #384]	; (800f064 <tcp_receive+0x5d8>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	1ad3      	subs	r3, r2, r3
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	da54      	bge.n	800ef96 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800eeec:	4b5e      	ldr	r3, [pc, #376]	; (800f068 <tcp_receive+0x5dc>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	b29a      	uxth	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ef00:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ef0a:	10db      	asrs	r3, r3, #3
 800ef0c:	b21b      	sxth	r3, r3
 800ef0e:	b29b      	uxth	r3, r3
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	b29b      	uxth	r3, r3
 800ef14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ef1e:	b29a      	uxth	r2, r3
 800ef20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef24:	4413      	add	r3, r2
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	b21a      	sxth	r2, r3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ef2e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	da05      	bge.n	800ef42 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ef36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef3a:	425b      	negs	r3, r3
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ef42:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef4c:	109b      	asrs	r3, r3, #2
 800ef4e:	b21b      	sxth	r3, r3
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	1ad3      	subs	r3, r2, r3
 800ef54:	b29b      	uxth	r3, r3
 800ef56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef60:	b29a      	uxth	r2, r3
 800ef62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef66:	4413      	add	r3, r2
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	b21a      	sxth	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ef76:	10db      	asrs	r3, r3, #3
 800ef78:	b21b      	sxth	r3, r3
 800ef7a:	b29a      	uxth	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef82:	b29b      	uxth	r3, r3
 800ef84:	4413      	add	r3, r2
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	b21a      	sxth	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2200      	movs	r2, #0
 800ef94:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ef96:	4b35      	ldr	r3, [pc, #212]	; (800f06c <tcp_receive+0x5e0>)
 800ef98:	881b      	ldrh	r3, [r3, #0]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	f000 84e1 	beq.w	800f962 <tcp_receive+0xed6>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	7d1b      	ldrb	r3, [r3, #20]
 800efa4:	2b06      	cmp	r3, #6
 800efa6:	f200 84dc 	bhi.w	800f962 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efae:	4b30      	ldr	r3, [pc, #192]	; (800f070 <tcp_receive+0x5e4>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	3b01      	subs	r3, #1
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f2c0 808e 	blt.w	800f0d8 <tcp_receive+0x64c>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efc0:	4b2a      	ldr	r3, [pc, #168]	; (800f06c <tcp_receive+0x5e0>)
 800efc2:	881b      	ldrh	r3, [r3, #0]
 800efc4:	4619      	mov	r1, r3
 800efc6:	4b2a      	ldr	r3, [pc, #168]	; (800f070 <tcp_receive+0x5e4>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	440b      	add	r3, r1
 800efcc:	1ad3      	subs	r3, r2, r3
 800efce:	3301      	adds	r3, #1
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	f300 8081 	bgt.w	800f0d8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800efd6:	4b27      	ldr	r3, [pc, #156]	; (800f074 <tcp_receive+0x5e8>)
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efe0:	4b23      	ldr	r3, [pc, #140]	; (800f070 <tcp_receive+0x5e4>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	1ad3      	subs	r3, r2, r3
 800efe6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800efe8:	4b22      	ldr	r3, [pc, #136]	; (800f074 <tcp_receive+0x5e8>)
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d106      	bne.n	800effe <tcp_receive+0x572>
 800eff0:	4b21      	ldr	r3, [pc, #132]	; (800f078 <tcp_receive+0x5ec>)
 800eff2:	f240 5294 	movw	r2, #1428	; 0x594
 800eff6:	4921      	ldr	r1, [pc, #132]	; (800f07c <tcp_receive+0x5f0>)
 800eff8:	4821      	ldr	r0, [pc, #132]	; (800f080 <tcp_receive+0x5f4>)
 800effa:	f008 f8e3 	bl	80171c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800effe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f000:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f004:	4293      	cmp	r3, r2
 800f006:	d906      	bls.n	800f016 <tcp_receive+0x58a>
 800f008:	4b1b      	ldr	r3, [pc, #108]	; (800f078 <tcp_receive+0x5ec>)
 800f00a:	f240 5295 	movw	r2, #1429	; 0x595
 800f00e:	491d      	ldr	r1, [pc, #116]	; (800f084 <tcp_receive+0x5f8>)
 800f010:	481b      	ldr	r0, [pc, #108]	; (800f080 <tcp_receive+0x5f4>)
 800f012:	f008 f8d7 	bl	80171c4 <iprintf>
      off = (u16_t)off32;
 800f016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f018:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f01c:	4b15      	ldr	r3, [pc, #84]	; (800f074 <tcp_receive+0x5e8>)
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	891b      	ldrh	r3, [r3, #8]
 800f022:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f026:	429a      	cmp	r2, r3
 800f028:	d906      	bls.n	800f038 <tcp_receive+0x5ac>
 800f02a:	4b13      	ldr	r3, [pc, #76]	; (800f078 <tcp_receive+0x5ec>)
 800f02c:	f240 5297 	movw	r2, #1431	; 0x597
 800f030:	4915      	ldr	r1, [pc, #84]	; (800f088 <tcp_receive+0x5fc>)
 800f032:	4813      	ldr	r0, [pc, #76]	; (800f080 <tcp_receive+0x5f4>)
 800f034:	f008 f8c6 	bl	80171c4 <iprintf>
      inseg.len -= off;
 800f038:	4b0e      	ldr	r3, [pc, #56]	; (800f074 <tcp_receive+0x5e8>)
 800f03a:	891a      	ldrh	r2, [r3, #8]
 800f03c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	b29a      	uxth	r2, r3
 800f044:	4b0b      	ldr	r3, [pc, #44]	; (800f074 <tcp_receive+0x5e8>)
 800f046:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f048:	4b0a      	ldr	r3, [pc, #40]	; (800f074 <tcp_receive+0x5e8>)
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	891a      	ldrh	r2, [r3, #8]
 800f04e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f052:	1ad3      	subs	r3, r2, r3
 800f054:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f056:	e029      	b.n	800f0ac <tcp_receive+0x620>
 800f058:	0801db14 	.word	0x0801db14
 800f05c:	0801db1c 	.word	0x0801db1c
 800f060:	2000123c 	.word	0x2000123c
 800f064:	20001238 	.word	0x20001238
 800f068:	2000d63c 	.word	0x2000d63c
 800f06c:	2000123e 	.word	0x2000123e
 800f070:	20001234 	.word	0x20001234
 800f074:	20001214 	.word	0x20001214
 800f078:	0801d790 	.word	0x0801d790
 800f07c:	0801db24 	.word	0x0801db24
 800f080:	0801d7dc 	.word	0x0801d7dc
 800f084:	0801db34 	.word	0x0801db34
 800f088:	0801db44 	.word	0x0801db44
        off -= p->len;
 800f08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f08e:	895b      	ldrh	r3, [r3, #10]
 800f090:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f094:	1ad3      	subs	r3, r2, r3
 800f096:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f09c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f09e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f0a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f0a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ae:	895b      	ldrh	r3, [r3, #10]
 800f0b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d8e9      	bhi.n	800f08c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f0b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f0bc:	4619      	mov	r1, r3
 800f0be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f0c0:	f7fc f802 	bl	800b0c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c8:	4a91      	ldr	r2, [pc, #580]	; (800f310 <tcp_receive+0x884>)
 800f0ca:	6013      	str	r3, [r2, #0]
 800f0cc:	4b91      	ldr	r3, [pc, #580]	; (800f314 <tcp_receive+0x888>)
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	4a8f      	ldr	r2, [pc, #572]	; (800f310 <tcp_receive+0x884>)
 800f0d2:	6812      	ldr	r2, [r2, #0]
 800f0d4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f0d6:	e00d      	b.n	800f0f4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f0d8:	4b8d      	ldr	r3, [pc, #564]	; (800f310 <tcp_receive+0x884>)
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e0:	1ad3      	subs	r3, r2, r3
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	da06      	bge.n	800f0f4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	8b5b      	ldrh	r3, [r3, #26]
 800f0ea:	f043 0302 	orr.w	r3, r3, #2
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f0f4:	4b86      	ldr	r3, [pc, #536]	; (800f310 <tcp_receive+0x884>)
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0fc:	1ad3      	subs	r3, r2, r3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	f2c0 842a 	blt.w	800f958 <tcp_receive+0xecc>
 800f104:	4b82      	ldr	r3, [pc, #520]	; (800f310 <tcp_receive+0x884>)
 800f106:	681a      	ldr	r2, [r3, #0]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10c:	6879      	ldr	r1, [r7, #4]
 800f10e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f110:	440b      	add	r3, r1
 800f112:	1ad3      	subs	r3, r2, r3
 800f114:	3301      	adds	r3, #1
 800f116:	2b00      	cmp	r3, #0
 800f118:	f300 841e 	bgt.w	800f958 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f120:	4b7b      	ldr	r3, [pc, #492]	; (800f310 <tcp_receive+0x884>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	429a      	cmp	r2, r3
 800f126:	f040 829a 	bne.w	800f65e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f12a:	4b7a      	ldr	r3, [pc, #488]	; (800f314 <tcp_receive+0x888>)
 800f12c:	891c      	ldrh	r4, [r3, #8]
 800f12e:	4b79      	ldr	r3, [pc, #484]	; (800f314 <tcp_receive+0x888>)
 800f130:	68db      	ldr	r3, [r3, #12]
 800f132:	899b      	ldrh	r3, [r3, #12]
 800f134:	b29b      	uxth	r3, r3
 800f136:	4618      	mov	r0, r3
 800f138:	f7fa fcb2 	bl	8009aa0 <lwip_htons>
 800f13c:	4603      	mov	r3, r0
 800f13e:	b2db      	uxtb	r3, r3
 800f140:	f003 0303 	and.w	r3, r3, #3
 800f144:	2b00      	cmp	r3, #0
 800f146:	d001      	beq.n	800f14c <tcp_receive+0x6c0>
 800f148:	2301      	movs	r3, #1
 800f14a:	e000      	b.n	800f14e <tcp_receive+0x6c2>
 800f14c:	2300      	movs	r3, #0
 800f14e:	4423      	add	r3, r4
 800f150:	b29a      	uxth	r2, r3
 800f152:	4b71      	ldr	r3, [pc, #452]	; (800f318 <tcp_receive+0x88c>)
 800f154:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f15a:	4b6f      	ldr	r3, [pc, #444]	; (800f318 <tcp_receive+0x88c>)
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	429a      	cmp	r2, r3
 800f160:	d275      	bcs.n	800f24e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f162:	4b6c      	ldr	r3, [pc, #432]	; (800f314 <tcp_receive+0x888>)
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	899b      	ldrh	r3, [r3, #12]
 800f168:	b29b      	uxth	r3, r3
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7fa fc98 	bl	8009aa0 <lwip_htons>
 800f170:	4603      	mov	r3, r0
 800f172:	b2db      	uxtb	r3, r3
 800f174:	f003 0301 	and.w	r3, r3, #1
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d01f      	beq.n	800f1bc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f17c:	4b65      	ldr	r3, [pc, #404]	; (800f314 <tcp_receive+0x888>)
 800f17e:	68db      	ldr	r3, [r3, #12]
 800f180:	899b      	ldrh	r3, [r3, #12]
 800f182:	b29b      	uxth	r3, r3
 800f184:	b21b      	sxth	r3, r3
 800f186:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f18a:	b21c      	sxth	r4, r3
 800f18c:	4b61      	ldr	r3, [pc, #388]	; (800f314 <tcp_receive+0x888>)
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	899b      	ldrh	r3, [r3, #12]
 800f192:	b29b      	uxth	r3, r3
 800f194:	4618      	mov	r0, r3
 800f196:	f7fa fc83 	bl	8009aa0 <lwip_htons>
 800f19a:	4603      	mov	r3, r0
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7fa fc7a 	bl	8009aa0 <lwip_htons>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	b21b      	sxth	r3, r3
 800f1b0:	4323      	orrs	r3, r4
 800f1b2:	b21a      	sxth	r2, r3
 800f1b4:	4b57      	ldr	r3, [pc, #348]	; (800f314 <tcp_receive+0x888>)
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	b292      	uxth	r2, r2
 800f1ba:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1c0:	4b54      	ldr	r3, [pc, #336]	; (800f314 <tcp_receive+0x888>)
 800f1c2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f1c4:	4b53      	ldr	r3, [pc, #332]	; (800f314 <tcp_receive+0x888>)
 800f1c6:	68db      	ldr	r3, [r3, #12]
 800f1c8:	899b      	ldrh	r3, [r3, #12]
 800f1ca:	b29b      	uxth	r3, r3
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fa fc67 	bl	8009aa0 <lwip_htons>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	f003 0302 	and.w	r3, r3, #2
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d005      	beq.n	800f1ea <tcp_receive+0x75e>
            inseg.len -= 1;
 800f1de:	4b4d      	ldr	r3, [pc, #308]	; (800f314 <tcp_receive+0x888>)
 800f1e0:	891b      	ldrh	r3, [r3, #8]
 800f1e2:	3b01      	subs	r3, #1
 800f1e4:	b29a      	uxth	r2, r3
 800f1e6:	4b4b      	ldr	r3, [pc, #300]	; (800f314 <tcp_receive+0x888>)
 800f1e8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f1ea:	4b4a      	ldr	r3, [pc, #296]	; (800f314 <tcp_receive+0x888>)
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	4a49      	ldr	r2, [pc, #292]	; (800f314 <tcp_receive+0x888>)
 800f1f0:	8912      	ldrh	r2, [r2, #8]
 800f1f2:	4611      	mov	r1, r2
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7fb fe67 	bl	800aec8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f1fa:	4b46      	ldr	r3, [pc, #280]	; (800f314 <tcp_receive+0x888>)
 800f1fc:	891c      	ldrh	r4, [r3, #8]
 800f1fe:	4b45      	ldr	r3, [pc, #276]	; (800f314 <tcp_receive+0x888>)
 800f200:	68db      	ldr	r3, [r3, #12]
 800f202:	899b      	ldrh	r3, [r3, #12]
 800f204:	b29b      	uxth	r3, r3
 800f206:	4618      	mov	r0, r3
 800f208:	f7fa fc4a 	bl	8009aa0 <lwip_htons>
 800f20c:	4603      	mov	r3, r0
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	f003 0303 	and.w	r3, r3, #3
 800f214:	2b00      	cmp	r3, #0
 800f216:	d001      	beq.n	800f21c <tcp_receive+0x790>
 800f218:	2301      	movs	r3, #1
 800f21a:	e000      	b.n	800f21e <tcp_receive+0x792>
 800f21c:	2300      	movs	r3, #0
 800f21e:	4423      	add	r3, r4
 800f220:	b29a      	uxth	r2, r3
 800f222:	4b3d      	ldr	r3, [pc, #244]	; (800f318 <tcp_receive+0x88c>)
 800f224:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f226:	4b3c      	ldr	r3, [pc, #240]	; (800f318 <tcp_receive+0x88c>)
 800f228:	881b      	ldrh	r3, [r3, #0]
 800f22a:	461a      	mov	r2, r3
 800f22c:	4b38      	ldr	r3, [pc, #224]	; (800f310 <tcp_receive+0x884>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	441a      	add	r2, r3
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f236:	6879      	ldr	r1, [r7, #4]
 800f238:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f23a:	440b      	add	r3, r1
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d006      	beq.n	800f24e <tcp_receive+0x7c2>
 800f240:	4b36      	ldr	r3, [pc, #216]	; (800f31c <tcp_receive+0x890>)
 800f242:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f246:	4936      	ldr	r1, [pc, #216]	; (800f320 <tcp_receive+0x894>)
 800f248:	4836      	ldr	r0, [pc, #216]	; (800f324 <tcp_receive+0x898>)
 800f24a:	f007 ffbb 	bl	80171c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f252:	2b00      	cmp	r3, #0
 800f254:	f000 80e7 	beq.w	800f426 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f258:	4b2e      	ldr	r3, [pc, #184]	; (800f314 <tcp_receive+0x888>)
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	899b      	ldrh	r3, [r3, #12]
 800f25e:	b29b      	uxth	r3, r3
 800f260:	4618      	mov	r0, r3
 800f262:	f7fa fc1d 	bl	8009aa0 <lwip_htons>
 800f266:	4603      	mov	r3, r0
 800f268:	b2db      	uxtb	r3, r3
 800f26a:	f003 0301 	and.w	r3, r3, #1
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d010      	beq.n	800f294 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f272:	e00a      	b.n	800f28a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f278:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f27e:	681a      	ldr	r2, [r3, #0]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f284:	68f8      	ldr	r0, [r7, #12]
 800f286:	f7fd fbe6 	bl	800ca56 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1f0      	bne.n	800f274 <tcp_receive+0x7e8>
 800f292:	e0c8      	b.n	800f426 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f298:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f29a:	e052      	b.n	800f342 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	899b      	ldrh	r3, [r3, #12]
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7fa fbfb 	bl	8009aa0 <lwip_htons>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	f003 0301 	and.w	r3, r3, #1
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d03d      	beq.n	800f332 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f2b6:	4b17      	ldr	r3, [pc, #92]	; (800f314 <tcp_receive+0x888>)
 800f2b8:	68db      	ldr	r3, [r3, #12]
 800f2ba:	899b      	ldrh	r3, [r3, #12]
 800f2bc:	b29b      	uxth	r3, r3
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7fa fbee 	bl	8009aa0 <lwip_htons>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d130      	bne.n	800f332 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f2d0:	4b10      	ldr	r3, [pc, #64]	; (800f314 <tcp_receive+0x888>)
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	899b      	ldrh	r3, [r3, #12]
 800f2d6:	b29c      	uxth	r4, r3
 800f2d8:	2001      	movs	r0, #1
 800f2da:	f7fa fbe1 	bl	8009aa0 <lwip_htons>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	4b0c      	ldr	r3, [pc, #48]	; (800f314 <tcp_receive+0x888>)
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	4322      	orrs	r2, r4
 800f2e8:	b292      	uxth	r2, r2
 800f2ea:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f2ec:	4b09      	ldr	r3, [pc, #36]	; (800f314 <tcp_receive+0x888>)
 800f2ee:	891c      	ldrh	r4, [r3, #8]
 800f2f0:	4b08      	ldr	r3, [pc, #32]	; (800f314 <tcp_receive+0x888>)
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	899b      	ldrh	r3, [r3, #12]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7fa fbd1 	bl	8009aa0 <lwip_htons>
 800f2fe:	4603      	mov	r3, r0
 800f300:	b2db      	uxtb	r3, r3
 800f302:	f003 0303 	and.w	r3, r3, #3
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00e      	beq.n	800f328 <tcp_receive+0x89c>
 800f30a:	2301      	movs	r3, #1
 800f30c:	e00d      	b.n	800f32a <tcp_receive+0x89e>
 800f30e:	bf00      	nop
 800f310:	20001234 	.word	0x20001234
 800f314:	20001214 	.word	0x20001214
 800f318:	2000123e 	.word	0x2000123e
 800f31c:	0801d790 	.word	0x0801d790
 800f320:	0801db54 	.word	0x0801db54
 800f324:	0801d7dc 	.word	0x0801d7dc
 800f328:	2300      	movs	r3, #0
 800f32a:	4423      	add	r3, r4
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	4b98      	ldr	r3, [pc, #608]	; (800f590 <tcp_receive+0xb04>)
 800f330:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f334:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f33c:	6938      	ldr	r0, [r7, #16]
 800f33e:	f7fd fb8a 	bl	800ca56 <tcp_seg_free>
            while (next &&
 800f342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f344:	2b00      	cmp	r3, #0
 800f346:	d00e      	beq.n	800f366 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f348:	4b91      	ldr	r3, [pc, #580]	; (800f590 <tcp_receive+0xb04>)
 800f34a:	881b      	ldrh	r3, [r3, #0]
 800f34c:	461a      	mov	r2, r3
 800f34e:	4b91      	ldr	r3, [pc, #580]	; (800f594 <tcp_receive+0xb08>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	441a      	add	r2, r3
 800f354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	685b      	ldr	r3, [r3, #4]
 800f35a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f35c:	8909      	ldrh	r1, [r1, #8]
 800f35e:	440b      	add	r3, r1
 800f360:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f362:	2b00      	cmp	r3, #0
 800f364:	da9a      	bge.n	800f29c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d059      	beq.n	800f420 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f36c:	4b88      	ldr	r3, [pc, #544]	; (800f590 <tcp_receive+0xb04>)
 800f36e:	881b      	ldrh	r3, [r3, #0]
 800f370:	461a      	mov	r2, r3
 800f372:	4b88      	ldr	r3, [pc, #544]	; (800f594 <tcp_receive+0xb08>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	441a      	add	r2, r3
 800f378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f380:	2b00      	cmp	r3, #0
 800f382:	dd4d      	ble.n	800f420 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f386:	68db      	ldr	r3, [r3, #12]
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	b29a      	uxth	r2, r3
 800f38c:	4b81      	ldr	r3, [pc, #516]	; (800f594 <tcp_receive+0xb08>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	b29b      	uxth	r3, r3
 800f392:	1ad3      	subs	r3, r2, r3
 800f394:	b29a      	uxth	r2, r3
 800f396:	4b80      	ldr	r3, [pc, #512]	; (800f598 <tcp_receive+0xb0c>)
 800f398:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f39a:	4b7f      	ldr	r3, [pc, #508]	; (800f598 <tcp_receive+0xb0c>)
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	899b      	ldrh	r3, [r3, #12]
 800f3a0:	b29b      	uxth	r3, r3
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fa fb7c 	bl	8009aa0 <lwip_htons>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	f003 0302 	and.w	r3, r3, #2
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d005      	beq.n	800f3c0 <tcp_receive+0x934>
                inseg.len -= 1;
 800f3b4:	4b78      	ldr	r3, [pc, #480]	; (800f598 <tcp_receive+0xb0c>)
 800f3b6:	891b      	ldrh	r3, [r3, #8]
 800f3b8:	3b01      	subs	r3, #1
 800f3ba:	b29a      	uxth	r2, r3
 800f3bc:	4b76      	ldr	r3, [pc, #472]	; (800f598 <tcp_receive+0xb0c>)
 800f3be:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f3c0:	4b75      	ldr	r3, [pc, #468]	; (800f598 <tcp_receive+0xb0c>)
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	4a74      	ldr	r2, [pc, #464]	; (800f598 <tcp_receive+0xb0c>)
 800f3c6:	8912      	ldrh	r2, [r2, #8]
 800f3c8:	4611      	mov	r1, r2
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7fb fd7c 	bl	800aec8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f3d0:	4b71      	ldr	r3, [pc, #452]	; (800f598 <tcp_receive+0xb0c>)
 800f3d2:	891c      	ldrh	r4, [r3, #8]
 800f3d4:	4b70      	ldr	r3, [pc, #448]	; (800f598 <tcp_receive+0xb0c>)
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	899b      	ldrh	r3, [r3, #12]
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fa fb5f 	bl	8009aa0 <lwip_htons>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	f003 0303 	and.w	r3, r3, #3
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d001      	beq.n	800f3f2 <tcp_receive+0x966>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e000      	b.n	800f3f4 <tcp_receive+0x968>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	4423      	add	r3, r4
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	4b65      	ldr	r3, [pc, #404]	; (800f590 <tcp_receive+0xb04>)
 800f3fa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f3fc:	4b64      	ldr	r3, [pc, #400]	; (800f590 <tcp_receive+0xb04>)
 800f3fe:	881b      	ldrh	r3, [r3, #0]
 800f400:	461a      	mov	r2, r3
 800f402:	4b64      	ldr	r3, [pc, #400]	; (800f594 <tcp_receive+0xb08>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	441a      	add	r2, r3
 800f408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f40a:	68db      	ldr	r3, [r3, #12]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	429a      	cmp	r2, r3
 800f410:	d006      	beq.n	800f420 <tcp_receive+0x994>
 800f412:	4b62      	ldr	r3, [pc, #392]	; (800f59c <tcp_receive+0xb10>)
 800f414:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f418:	4961      	ldr	r1, [pc, #388]	; (800f5a0 <tcp_receive+0xb14>)
 800f41a:	4862      	ldr	r0, [pc, #392]	; (800f5a4 <tcp_receive+0xb18>)
 800f41c:	f007 fed2 	bl	80171c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f424:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f426:	4b5a      	ldr	r3, [pc, #360]	; (800f590 <tcp_receive+0xb04>)
 800f428:	881b      	ldrh	r3, [r3, #0]
 800f42a:	461a      	mov	r2, r3
 800f42c:	4b59      	ldr	r3, [pc, #356]	; (800f594 <tcp_receive+0xb08>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	441a      	add	r2, r3
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f43a:	4b55      	ldr	r3, [pc, #340]	; (800f590 <tcp_receive+0xb04>)
 800f43c:	881b      	ldrh	r3, [r3, #0]
 800f43e:	429a      	cmp	r2, r3
 800f440:	d206      	bcs.n	800f450 <tcp_receive+0x9c4>
 800f442:	4b56      	ldr	r3, [pc, #344]	; (800f59c <tcp_receive+0xb10>)
 800f444:	f240 6207 	movw	r2, #1543	; 0x607
 800f448:	4957      	ldr	r1, [pc, #348]	; (800f5a8 <tcp_receive+0xb1c>)
 800f44a:	4856      	ldr	r0, [pc, #344]	; (800f5a4 <tcp_receive+0xb18>)
 800f44c:	f007 feba 	bl	80171c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f454:	4b4e      	ldr	r3, [pc, #312]	; (800f590 <tcp_receive+0xb04>)
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	b29a      	uxth	r2, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f7fc fdd3 	bl	800c00c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f466:	4b4c      	ldr	r3, [pc, #304]	; (800f598 <tcp_receive+0xb0c>)
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	891b      	ldrh	r3, [r3, #8]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d006      	beq.n	800f47e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f470:	4b49      	ldr	r3, [pc, #292]	; (800f598 <tcp_receive+0xb0c>)
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	4a4d      	ldr	r2, [pc, #308]	; (800f5ac <tcp_receive+0xb20>)
 800f476:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f478:	4b47      	ldr	r3, [pc, #284]	; (800f598 <tcp_receive+0xb0c>)
 800f47a:	2200      	movs	r2, #0
 800f47c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f47e:	4b46      	ldr	r3, [pc, #280]	; (800f598 <tcp_receive+0xb0c>)
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	899b      	ldrh	r3, [r3, #12]
 800f484:	b29b      	uxth	r3, r3
 800f486:	4618      	mov	r0, r3
 800f488:	f7fa fb0a 	bl	8009aa0 <lwip_htons>
 800f48c:	4603      	mov	r3, r0
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	f003 0301 	and.w	r3, r3, #1
 800f494:	2b00      	cmp	r3, #0
 800f496:	f000 80b8 	beq.w	800f60a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f49a:	4b45      	ldr	r3, [pc, #276]	; (800f5b0 <tcp_receive+0xb24>)
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	f043 0320 	orr.w	r3, r3, #32
 800f4a2:	b2da      	uxtb	r2, r3
 800f4a4:	4b42      	ldr	r3, [pc, #264]	; (800f5b0 <tcp_receive+0xb24>)
 800f4a6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f4a8:	e0af      	b.n	800f60a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4ae:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4b4:	68db      	ldr	r3, [r3, #12]
 800f4b6:	685b      	ldr	r3, [r3, #4]
 800f4b8:	4a36      	ldr	r2, [pc, #216]	; (800f594 <tcp_receive+0xb08>)
 800f4ba:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	891b      	ldrh	r3, [r3, #8]
 800f4c0:	461c      	mov	r4, r3
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	899b      	ldrh	r3, [r3, #12]
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fa fae8 	bl	8009aa0 <lwip_htons>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	b2db      	uxtb	r3, r3
 800f4d4:	f003 0303 	and.w	r3, r3, #3
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d001      	beq.n	800f4e0 <tcp_receive+0xa54>
 800f4dc:	2301      	movs	r3, #1
 800f4de:	e000      	b.n	800f4e2 <tcp_receive+0xa56>
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	191a      	adds	r2, r3, r4
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	441a      	add	r2, r3
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4f2:	461c      	mov	r4, r3
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	891b      	ldrh	r3, [r3, #8]
 800f4f8:	461d      	mov	r5, r3
 800f4fa:	68bb      	ldr	r3, [r7, #8]
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	899b      	ldrh	r3, [r3, #12]
 800f500:	b29b      	uxth	r3, r3
 800f502:	4618      	mov	r0, r3
 800f504:	f7fa facc 	bl	8009aa0 <lwip_htons>
 800f508:	4603      	mov	r3, r0
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	f003 0303 	and.w	r3, r3, #3
 800f510:	2b00      	cmp	r3, #0
 800f512:	d001      	beq.n	800f518 <tcp_receive+0xa8c>
 800f514:	2301      	movs	r3, #1
 800f516:	e000      	b.n	800f51a <tcp_receive+0xa8e>
 800f518:	2300      	movs	r3, #0
 800f51a:	442b      	add	r3, r5
 800f51c:	429c      	cmp	r4, r3
 800f51e:	d206      	bcs.n	800f52e <tcp_receive+0xaa2>
 800f520:	4b1e      	ldr	r3, [pc, #120]	; (800f59c <tcp_receive+0xb10>)
 800f522:	f240 622b 	movw	r2, #1579	; 0x62b
 800f526:	4923      	ldr	r1, [pc, #140]	; (800f5b4 <tcp_receive+0xb28>)
 800f528:	481e      	ldr	r0, [pc, #120]	; (800f5a4 <tcp_receive+0xb18>)
 800f52a:	f007 fe4b 	bl	80171c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	891b      	ldrh	r3, [r3, #8]
 800f532:	461c      	mov	r4, r3
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	899b      	ldrh	r3, [r3, #12]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7fa faaf 	bl	8009aa0 <lwip_htons>
 800f542:	4603      	mov	r3, r0
 800f544:	b2db      	uxtb	r3, r3
 800f546:	f003 0303 	and.w	r3, r3, #3
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d001      	beq.n	800f552 <tcp_receive+0xac6>
 800f54e:	2301      	movs	r3, #1
 800f550:	e000      	b.n	800f554 <tcp_receive+0xac8>
 800f552:	2300      	movs	r3, #0
 800f554:	1919      	adds	r1, r3, r4
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f55a:	b28b      	uxth	r3, r1
 800f55c:	1ad3      	subs	r3, r2, r3
 800f55e:	b29a      	uxth	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f7fc fd51 	bl	800c00c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	685b      	ldr	r3, [r3, #4]
 800f56e:	891b      	ldrh	r3, [r3, #8]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d028      	beq.n	800f5c6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f574:	4b0d      	ldr	r3, [pc, #52]	; (800f5ac <tcp_receive+0xb20>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d01d      	beq.n	800f5b8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f57c:	4b0b      	ldr	r3, [pc, #44]	; (800f5ac <tcp_receive+0xb20>)
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	4619      	mov	r1, r3
 800f586:	4610      	mov	r0, r2
 800f588:	f7fb fee6 	bl	800b358 <pbuf_cat>
 800f58c:	e018      	b.n	800f5c0 <tcp_receive+0xb34>
 800f58e:	bf00      	nop
 800f590:	2000123e 	.word	0x2000123e
 800f594:	20001234 	.word	0x20001234
 800f598:	20001214 	.word	0x20001214
 800f59c:	0801d790 	.word	0x0801d790
 800f5a0:	0801db8c 	.word	0x0801db8c
 800f5a4:	0801d7dc 	.word	0x0801d7dc
 800f5a8:	0801dbc8 	.word	0x0801dbc8
 800f5ac:	20001244 	.word	0x20001244
 800f5b0:	20001241 	.word	0x20001241
 800f5b4:	0801dbe8 	.word	0x0801dbe8
            } else {
              recv_data = cseg->p;
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	4a70      	ldr	r2, [pc, #448]	; (800f780 <tcp_receive+0xcf4>)
 800f5be:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	68db      	ldr	r3, [r3, #12]
 800f5ca:	899b      	ldrh	r3, [r3, #12]
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fa fa66 	bl	8009aa0 <lwip_htons>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	f003 0301 	and.w	r3, r3, #1
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00d      	beq.n	800f5fc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f5e0:	4b68      	ldr	r3, [pc, #416]	; (800f784 <tcp_receive+0xcf8>)
 800f5e2:	781b      	ldrb	r3, [r3, #0]
 800f5e4:	f043 0320 	orr.w	r3, r3, #32
 800f5e8:	b2da      	uxtb	r2, r3
 800f5ea:	4b66      	ldr	r3, [pc, #408]	; (800f784 <tcp_receive+0xcf8>)
 800f5ec:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	7d1b      	ldrb	r3, [r3, #20]
 800f5f2:	2b04      	cmp	r3, #4
 800f5f4:	d102      	bne.n	800f5fc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2207      	movs	r2, #7
 800f5fa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f604:	68b8      	ldr	r0, [r7, #8]
 800f606:	f7fd fa26 	bl	800ca56 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d008      	beq.n	800f624 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	685a      	ldr	r2, [r3, #4]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f61e:	429a      	cmp	r2, r3
 800f620:	f43f af43 	beq.w	800f4aa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	8b5b      	ldrh	r3, [r3, #26]
 800f628:	f003 0301 	and.w	r3, r3, #1
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d00e      	beq.n	800f64e <tcp_receive+0xbc2>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	8b5b      	ldrh	r3, [r3, #26]
 800f634:	f023 0301 	bic.w	r3, r3, #1
 800f638:	b29a      	uxth	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	835a      	strh	r2, [r3, #26]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	8b5b      	ldrh	r3, [r3, #26]
 800f642:	f043 0302 	orr.w	r3, r3, #2
 800f646:	b29a      	uxth	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f64c:	e188      	b.n	800f960 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	8b5b      	ldrh	r3, [r3, #26]
 800f652:	f043 0301 	orr.w	r3, r3, #1
 800f656:	b29a      	uxth	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f65c:	e180      	b.n	800f960 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f662:	2b00      	cmp	r3, #0
 800f664:	d106      	bne.n	800f674 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f666:	4848      	ldr	r0, [pc, #288]	; (800f788 <tcp_receive+0xcfc>)
 800f668:	f7fd fa2e 	bl	800cac8 <tcp_seg_copy>
 800f66c:	4602      	mov	r2, r0
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	675a      	str	r2, [r3, #116]	; 0x74
 800f672:	e16d      	b.n	800f950 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f674:	2300      	movs	r3, #0
 800f676:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f67c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f67e:	e157      	b.n	800f930 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	685a      	ldr	r2, [r3, #4]
 800f686:	4b41      	ldr	r3, [pc, #260]	; (800f78c <tcp_receive+0xd00>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d11d      	bne.n	800f6ca <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f68e:	4b3e      	ldr	r3, [pc, #248]	; (800f788 <tcp_receive+0xcfc>)
 800f690:	891a      	ldrh	r2, [r3, #8]
 800f692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f694:	891b      	ldrh	r3, [r3, #8]
 800f696:	429a      	cmp	r2, r3
 800f698:	f240 814f 	bls.w	800f93a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f69c:	483a      	ldr	r0, [pc, #232]	; (800f788 <tcp_receive+0xcfc>)
 800f69e:	f7fd fa13 	bl	800cac8 <tcp_seg_copy>
 800f6a2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f000 8149 	beq.w	800f93e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d003      	beq.n	800f6ba <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b4:	697a      	ldr	r2, [r7, #20]
 800f6b6:	601a      	str	r2, [r3, #0]
 800f6b8:	e002      	b.n	800f6c0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	697a      	ldr	r2, [r7, #20]
 800f6be:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f6c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6c2:	6978      	ldr	r0, [r7, #20]
 800f6c4:	f7ff f8de 	bl	800e884 <tcp_oos_insert_segment>
                }
                break;
 800f6c8:	e139      	b.n	800f93e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d117      	bne.n	800f700 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f6d0:	4b2e      	ldr	r3, [pc, #184]	; (800f78c <tcp_receive+0xd00>)
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	da57      	bge.n	800f790 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f6e0:	4829      	ldr	r0, [pc, #164]	; (800f788 <tcp_receive+0xcfc>)
 800f6e2:	f7fd f9f1 	bl	800cac8 <tcp_seg_copy>
 800f6e6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f000 8129 	beq.w	800f942 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	69ba      	ldr	r2, [r7, #24]
 800f6f4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f6f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f6f8:	69b8      	ldr	r0, [r7, #24]
 800f6fa:	f7ff f8c3 	bl	800e884 <tcp_oos_insert_segment>
                  }
                  break;
 800f6fe:	e120      	b.n	800f942 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f700:	4b22      	ldr	r3, [pc, #136]	; (800f78c <tcp_receive+0xd00>)
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f706:	68db      	ldr	r3, [r3, #12]
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	1ad3      	subs	r3, r2, r3
 800f70c:	3b01      	subs	r3, #1
 800f70e:	2b00      	cmp	r3, #0
 800f710:	db3e      	blt.n	800f790 <tcp_receive+0xd04>
 800f712:	4b1e      	ldr	r3, [pc, #120]	; (800f78c <tcp_receive+0xd00>)
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	1ad3      	subs	r3, r2, r3
 800f71e:	3301      	adds	r3, #1
 800f720:	2b00      	cmp	r3, #0
 800f722:	dc35      	bgt.n	800f790 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f724:	4818      	ldr	r0, [pc, #96]	; (800f788 <tcp_receive+0xcfc>)
 800f726:	f7fd f9cf 	bl	800cac8 <tcp_seg_copy>
 800f72a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f000 8109 	beq.w	800f946 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f73c:	8912      	ldrh	r2, [r2, #8]
 800f73e:	441a      	add	r2, r3
 800f740:	4b12      	ldr	r3, [pc, #72]	; (800f78c <tcp_receive+0xd00>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	1ad3      	subs	r3, r2, r3
 800f746:	2b00      	cmp	r3, #0
 800f748:	dd12      	ble.n	800f770 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f74a:	4b10      	ldr	r3, [pc, #64]	; (800f78c <tcp_receive+0xd00>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	b29a      	uxth	r2, r3
 800f750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	b29b      	uxth	r3, r3
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	b29a      	uxth	r2, r3
 800f75c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f75e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f762:	685a      	ldr	r2, [r3, #4]
 800f764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f766:	891b      	ldrh	r3, [r3, #8]
 800f768:	4619      	mov	r1, r3
 800f76a:	4610      	mov	r0, r2
 800f76c:	f7fb fbac 	bl	800aec8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f772:	69fa      	ldr	r2, [r7, #28]
 800f774:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f776:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f778:	69f8      	ldr	r0, [r7, #28]
 800f77a:	f7ff f883 	bl	800e884 <tcp_oos_insert_segment>
                  }
                  break;
 800f77e:	e0e2      	b.n	800f946 <tcp_receive+0xeba>
 800f780:	20001244 	.word	0x20001244
 800f784:	20001241 	.word	0x20001241
 800f788:	20001214 	.word	0x20001214
 800f78c:	20001234 	.word	0x20001234
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f792:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f040 80c6 	bne.w	800f92a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f79e:	4b80      	ldr	r3, [pc, #512]	; (800f9a0 <tcp_receive+0xf14>)
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	f340 80bd 	ble.w	800f92a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	899b      	ldrh	r3, [r3, #12]
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fa f971 	bl	8009aa0 <lwip_htons>
 800f7be:	4603      	mov	r3, r0
 800f7c0:	b2db      	uxtb	r3, r3
 800f7c2:	f003 0301 	and.w	r3, r3, #1
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	f040 80bf 	bne.w	800f94a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f7cc:	4875      	ldr	r0, [pc, #468]	; (800f9a4 <tcp_receive+0xf18>)
 800f7ce:	f7fd f97b 	bl	800cac8 <tcp_seg_copy>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	f000 80b6 	beq.w	800f94e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f7ea:	8912      	ldrh	r2, [r2, #8]
 800f7ec:	441a      	add	r2, r3
 800f7ee:	4b6c      	ldr	r3, [pc, #432]	; (800f9a0 <tcp_receive+0xf14>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	1ad3      	subs	r3, r2, r3
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	dd12      	ble.n	800f81e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f7f8:	4b69      	ldr	r3, [pc, #420]	; (800f9a0 <tcp_receive+0xf14>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	b29b      	uxth	r3, r3
 800f806:	1ad3      	subs	r3, r2, r3
 800f808:	b29a      	uxth	r2, r3
 800f80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f810:	685a      	ldr	r2, [r3, #4]
 800f812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f814:	891b      	ldrh	r3, [r3, #8]
 800f816:	4619      	mov	r1, r3
 800f818:	4610      	mov	r0, r2
 800f81a:	f7fb fb55 	bl	800aec8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f81e:	4b62      	ldr	r3, [pc, #392]	; (800f9a8 <tcp_receive+0xf1c>)
 800f820:	881b      	ldrh	r3, [r3, #0]
 800f822:	461a      	mov	r2, r3
 800f824:	4b5e      	ldr	r3, [pc, #376]	; (800f9a0 <tcp_receive+0xf14>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	441a      	add	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f82e:	6879      	ldr	r1, [r7, #4]
 800f830:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f832:	440b      	add	r3, r1
 800f834:	1ad3      	subs	r3, r2, r3
 800f836:	2b00      	cmp	r3, #0
 800f838:	f340 8089 	ble.w	800f94e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	899b      	ldrh	r3, [r3, #12]
 800f844:	b29b      	uxth	r3, r3
 800f846:	4618      	mov	r0, r3
 800f848:	f7fa f92a 	bl	8009aa0 <lwip_htons>
 800f84c:	4603      	mov	r3, r0
 800f84e:	b2db      	uxtb	r3, r3
 800f850:	f003 0301 	and.w	r3, r3, #1
 800f854:	2b00      	cmp	r3, #0
 800f856:	d022      	beq.n	800f89e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	899b      	ldrh	r3, [r3, #12]
 800f860:	b29b      	uxth	r3, r3
 800f862:	b21b      	sxth	r3, r3
 800f864:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f868:	b21c      	sxth	r4, r3
 800f86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	68db      	ldr	r3, [r3, #12]
 800f870:	899b      	ldrh	r3, [r3, #12]
 800f872:	b29b      	uxth	r3, r3
 800f874:	4618      	mov	r0, r3
 800f876:	f7fa f913 	bl	8009aa0 <lwip_htons>
 800f87a:	4603      	mov	r3, r0
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	b29b      	uxth	r3, r3
 800f880:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f884:	b29b      	uxth	r3, r3
 800f886:	4618      	mov	r0, r3
 800f888:	f7fa f90a 	bl	8009aa0 <lwip_htons>
 800f88c:	4603      	mov	r3, r0
 800f88e:	b21b      	sxth	r3, r3
 800f890:	4323      	orrs	r3, r4
 800f892:	b21a      	sxth	r2, r3
 800f894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	b292      	uxth	r2, r2
 800f89c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a2:	b29a      	uxth	r2, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8a8:	4413      	add	r3, r2
 800f8aa:	b299      	uxth	r1, r3
 800f8ac:	4b3c      	ldr	r3, [pc, #240]	; (800f9a0 <tcp_receive+0xf14>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	b29a      	uxth	r2, r3
 800f8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	1a8a      	subs	r2, r1, r2
 800f8b8:	b292      	uxth	r2, r2
 800f8ba:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	685a      	ldr	r2, [r3, #4]
 800f8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	891b      	ldrh	r3, [r3, #8]
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	4610      	mov	r0, r2
 800f8cc:	f7fb fafc 	bl	800aec8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	891c      	ldrh	r4, [r3, #8]
 800f8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	899b      	ldrh	r3, [r3, #12]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f7fa f8dd 	bl	8009aa0 <lwip_htons>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	f003 0303 	and.w	r3, r3, #3
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d001      	beq.n	800f8f6 <tcp_receive+0xe6a>
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	e000      	b.n	800f8f8 <tcp_receive+0xe6c>
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	4423      	add	r3, r4
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	4b2a      	ldr	r3, [pc, #168]	; (800f9a8 <tcp_receive+0xf1c>)
 800f8fe:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f900:	4b29      	ldr	r3, [pc, #164]	; (800f9a8 <tcp_receive+0xf1c>)
 800f902:	881b      	ldrh	r3, [r3, #0]
 800f904:	461a      	mov	r2, r3
 800f906:	4b26      	ldr	r3, [pc, #152]	; (800f9a0 <tcp_receive+0xf14>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	441a      	add	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f910:	6879      	ldr	r1, [r7, #4]
 800f912:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f914:	440b      	add	r3, r1
 800f916:	429a      	cmp	r2, r3
 800f918:	d019      	beq.n	800f94e <tcp_receive+0xec2>
 800f91a:	4b24      	ldr	r3, [pc, #144]	; (800f9ac <tcp_receive+0xf20>)
 800f91c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f920:	4923      	ldr	r1, [pc, #140]	; (800f9b0 <tcp_receive+0xf24>)
 800f922:	4824      	ldr	r0, [pc, #144]	; (800f9b4 <tcp_receive+0xf28>)
 800f924:	f007 fc4e 	bl	80171c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f928:	e011      	b.n	800f94e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f932:	2b00      	cmp	r3, #0
 800f934:	f47f aea4 	bne.w	800f680 <tcp_receive+0xbf4>
 800f938:	e00a      	b.n	800f950 <tcp_receive+0xec4>
                break;
 800f93a:	bf00      	nop
 800f93c:	e008      	b.n	800f950 <tcp_receive+0xec4>
                break;
 800f93e:	bf00      	nop
 800f940:	e006      	b.n	800f950 <tcp_receive+0xec4>
                  break;
 800f942:	bf00      	nop
 800f944:	e004      	b.n	800f950 <tcp_receive+0xec4>
                  break;
 800f946:	bf00      	nop
 800f948:	e002      	b.n	800f950 <tcp_receive+0xec4>
                  break;
 800f94a:	bf00      	nop
 800f94c:	e000      	b.n	800f950 <tcp_receive+0xec4>
                break;
 800f94e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f001 fe91 	bl	8011678 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f956:	e003      	b.n	800f960 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f001 fe8d 	bl	8011678 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f95e:	e01a      	b.n	800f996 <tcp_receive+0xf0a>
 800f960:	e019      	b.n	800f996 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f962:	4b0f      	ldr	r3, [pc, #60]	; (800f9a0 <tcp_receive+0xf14>)
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f96a:	1ad3      	subs	r3, r2, r3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	db0a      	blt.n	800f986 <tcp_receive+0xefa>
 800f970:	4b0b      	ldr	r3, [pc, #44]	; (800f9a0 <tcp_receive+0xf14>)
 800f972:	681a      	ldr	r2, [r3, #0]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f978:	6879      	ldr	r1, [r7, #4]
 800f97a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f97c:	440b      	add	r3, r1
 800f97e:	1ad3      	subs	r3, r2, r3
 800f980:	3301      	adds	r3, #1
 800f982:	2b00      	cmp	r3, #0
 800f984:	dd07      	ble.n	800f996 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	8b5b      	ldrh	r3, [r3, #26]
 800f98a:	f043 0302 	orr.w	r3, r3, #2
 800f98e:	b29a      	uxth	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f994:	e7ff      	b.n	800f996 <tcp_receive+0xf0a>
 800f996:	bf00      	nop
 800f998:	3750      	adds	r7, #80	; 0x50
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bdb0      	pop	{r4, r5, r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	20001234 	.word	0x20001234
 800f9a4:	20001214 	.word	0x20001214
 800f9a8:	2000123e 	.word	0x2000123e
 800f9ac:	0801d790 	.word	0x0801d790
 800f9b0:	0801db54 	.word	0x0801db54
 800f9b4:	0801d7dc 	.word	0x0801d7dc

0800f9b8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f9be:	4b15      	ldr	r3, [pc, #84]	; (800fa14 <tcp_get_next_optbyte+0x5c>)
 800f9c0:	881b      	ldrh	r3, [r3, #0]
 800f9c2:	1c5a      	adds	r2, r3, #1
 800f9c4:	b291      	uxth	r1, r2
 800f9c6:	4a13      	ldr	r2, [pc, #76]	; (800fa14 <tcp_get_next_optbyte+0x5c>)
 800f9c8:	8011      	strh	r1, [r2, #0]
 800f9ca:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f9cc:	4b12      	ldr	r3, [pc, #72]	; (800fa18 <tcp_get_next_optbyte+0x60>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d004      	beq.n	800f9de <tcp_get_next_optbyte+0x26>
 800f9d4:	4b11      	ldr	r3, [pc, #68]	; (800fa1c <tcp_get_next_optbyte+0x64>)
 800f9d6:	881b      	ldrh	r3, [r3, #0]
 800f9d8:	88fa      	ldrh	r2, [r7, #6]
 800f9da:	429a      	cmp	r2, r3
 800f9dc:	d208      	bcs.n	800f9f0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f9de:	4b10      	ldr	r3, [pc, #64]	; (800fa20 <tcp_get_next_optbyte+0x68>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	3314      	adds	r3, #20
 800f9e4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f9e6:	88fb      	ldrh	r3, [r7, #6]
 800f9e8:	683a      	ldr	r2, [r7, #0]
 800f9ea:	4413      	add	r3, r2
 800f9ec:	781b      	ldrb	r3, [r3, #0]
 800f9ee:	e00b      	b.n	800fa08 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f9f0:	88fb      	ldrh	r3, [r7, #6]
 800f9f2:	b2da      	uxtb	r2, r3
 800f9f4:	4b09      	ldr	r3, [pc, #36]	; (800fa1c <tcp_get_next_optbyte+0x64>)
 800f9f6:	881b      	ldrh	r3, [r3, #0]
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f9fe:	4b06      	ldr	r3, [pc, #24]	; (800fa18 <tcp_get_next_optbyte+0x60>)
 800fa00:	681a      	ldr	r2, [r3, #0]
 800fa02:	797b      	ldrb	r3, [r7, #5]
 800fa04:	4413      	add	r3, r2
 800fa06:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	370c      	adds	r7, #12
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa12:	4770      	bx	lr
 800fa14:	20001230 	.word	0x20001230
 800fa18:	2000122c 	.word	0x2000122c
 800fa1c:	2000122a 	.word	0x2000122a
 800fa20:	20001224 	.word	0x20001224

0800fa24 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d106      	bne.n	800fa40 <tcp_parseopt+0x1c>
 800fa32:	4b32      	ldr	r3, [pc, #200]	; (800fafc <tcp_parseopt+0xd8>)
 800fa34:	f240 727d 	movw	r2, #1917	; 0x77d
 800fa38:	4931      	ldr	r1, [pc, #196]	; (800fb00 <tcp_parseopt+0xdc>)
 800fa3a:	4832      	ldr	r0, [pc, #200]	; (800fb04 <tcp_parseopt+0xe0>)
 800fa3c:	f007 fbc2 	bl	80171c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fa40:	4b31      	ldr	r3, [pc, #196]	; (800fb08 <tcp_parseopt+0xe4>)
 800fa42:	881b      	ldrh	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d055      	beq.n	800faf4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fa48:	4b30      	ldr	r3, [pc, #192]	; (800fb0c <tcp_parseopt+0xe8>)
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	801a      	strh	r2, [r3, #0]
 800fa4e:	e045      	b.n	800fadc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fa50:	f7ff ffb2 	bl	800f9b8 <tcp_get_next_optbyte>
 800fa54:	4603      	mov	r3, r0
 800fa56:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fa58:	7bfb      	ldrb	r3, [r7, #15]
 800fa5a:	2b02      	cmp	r3, #2
 800fa5c:	d006      	beq.n	800fa6c <tcp_parseopt+0x48>
 800fa5e:	2b02      	cmp	r3, #2
 800fa60:	dc2b      	bgt.n	800faba <tcp_parseopt+0x96>
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d041      	beq.n	800faea <tcp_parseopt+0xc6>
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d127      	bne.n	800faba <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fa6a:	e037      	b.n	800fadc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fa6c:	f7ff ffa4 	bl	800f9b8 <tcp_get_next_optbyte>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b04      	cmp	r3, #4
 800fa74:	d13b      	bne.n	800faee <tcp_parseopt+0xca>
 800fa76:	4b25      	ldr	r3, [pc, #148]	; (800fb0c <tcp_parseopt+0xe8>)
 800fa78:	881b      	ldrh	r3, [r3, #0]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	4a22      	ldr	r2, [pc, #136]	; (800fb08 <tcp_parseopt+0xe4>)
 800fa7e:	8812      	ldrh	r2, [r2, #0]
 800fa80:	4293      	cmp	r3, r2
 800fa82:	da34      	bge.n	800faee <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fa84:	f7ff ff98 	bl	800f9b8 <tcp_get_next_optbyte>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	b29b      	uxth	r3, r3
 800fa8c:	021b      	lsls	r3, r3, #8
 800fa8e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fa90:	f7ff ff92 	bl	800f9b8 <tcp_get_next_optbyte>
 800fa94:	4603      	mov	r3, r0
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	89bb      	ldrh	r3, [r7, #12]
 800fa9a:	4313      	orrs	r3, r2
 800fa9c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fa9e:	89bb      	ldrh	r3, [r7, #12]
 800faa0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800faa4:	d804      	bhi.n	800fab0 <tcp_parseopt+0x8c>
 800faa6:	89bb      	ldrh	r3, [r7, #12]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d001      	beq.n	800fab0 <tcp_parseopt+0x8c>
 800faac:	89ba      	ldrh	r2, [r7, #12]
 800faae:	e001      	b.n	800fab4 <tcp_parseopt+0x90>
 800fab0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fab8:	e010      	b.n	800fadc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800faba:	f7ff ff7d 	bl	800f9b8 <tcp_get_next_optbyte>
 800fabe:	4603      	mov	r3, r0
 800fac0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fac2:	7afb      	ldrb	r3, [r7, #11]
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d914      	bls.n	800faf2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fac8:	7afb      	ldrb	r3, [r7, #11]
 800faca:	b29a      	uxth	r2, r3
 800facc:	4b0f      	ldr	r3, [pc, #60]	; (800fb0c <tcp_parseopt+0xe8>)
 800face:	881b      	ldrh	r3, [r3, #0]
 800fad0:	4413      	add	r3, r2
 800fad2:	b29b      	uxth	r3, r3
 800fad4:	3b02      	subs	r3, #2
 800fad6:	b29a      	uxth	r2, r3
 800fad8:	4b0c      	ldr	r3, [pc, #48]	; (800fb0c <tcp_parseopt+0xe8>)
 800fada:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fadc:	4b0b      	ldr	r3, [pc, #44]	; (800fb0c <tcp_parseopt+0xe8>)
 800fade:	881a      	ldrh	r2, [r3, #0]
 800fae0:	4b09      	ldr	r3, [pc, #36]	; (800fb08 <tcp_parseopt+0xe4>)
 800fae2:	881b      	ldrh	r3, [r3, #0]
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d3b3      	bcc.n	800fa50 <tcp_parseopt+0x2c>
 800fae8:	e004      	b.n	800faf4 <tcp_parseopt+0xd0>
          return;
 800faea:	bf00      	nop
 800faec:	e002      	b.n	800faf4 <tcp_parseopt+0xd0>
            return;
 800faee:	bf00      	nop
 800faf0:	e000      	b.n	800faf4 <tcp_parseopt+0xd0>
            return;
 800faf2:	bf00      	nop
      }
    }
  }
}
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	0801d790 	.word	0x0801d790
 800fb00:	0801dc10 	.word	0x0801dc10
 800fb04:	0801d7dc 	.word	0x0801d7dc
 800fb08:	20001228 	.word	0x20001228
 800fb0c:	20001230 	.word	0x20001230

0800fb10 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fb10:	b480      	push	{r7}
 800fb12:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fb14:	4b05      	ldr	r3, [pc, #20]	; (800fb2c <tcp_trigger_input_pcb_close+0x1c>)
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	f043 0310 	orr.w	r3, r3, #16
 800fb1c:	b2da      	uxtb	r2, r3
 800fb1e:	4b03      	ldr	r3, [pc, #12]	; (800fb2c <tcp_trigger_input_pcb_close+0x1c>)
 800fb20:	701a      	strb	r2, [r3, #0]
}
 800fb22:	bf00      	nop
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr
 800fb2c:	20001241 	.word	0x20001241

0800fb30 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	60f8      	str	r0, [r7, #12]
 800fb38:	60b9      	str	r1, [r7, #8]
 800fb3a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d00a      	beq.n	800fb58 <tcp_route+0x28>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	7a1b      	ldrb	r3, [r3, #8]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d006      	beq.n	800fb58 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	7a1b      	ldrb	r3, [r3, #8]
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fa ffe0 	bl	800ab14 <netif_get_by_index>
 800fb54:	4603      	mov	r3, r0
 800fb56:	e003      	b.n	800fb60 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f005 fc45 	bl	80153e8 <ip4_route>
 800fb5e:	4603      	mov	r3, r0
  }
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3710      	adds	r7, #16
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}

0800fb68 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fb68:	b590      	push	{r4, r7, lr}
 800fb6a:	b087      	sub	sp, #28
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	60f8      	str	r0, [r7, #12]
 800fb70:	60b9      	str	r1, [r7, #8]
 800fb72:	603b      	str	r3, [r7, #0]
 800fb74:	4613      	mov	r3, r2
 800fb76:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d105      	bne.n	800fb8a <tcp_create_segment+0x22>
 800fb7e:	4b44      	ldr	r3, [pc, #272]	; (800fc90 <tcp_create_segment+0x128>)
 800fb80:	22a3      	movs	r2, #163	; 0xa3
 800fb82:	4944      	ldr	r1, [pc, #272]	; (800fc94 <tcp_create_segment+0x12c>)
 800fb84:	4844      	ldr	r0, [pc, #272]	; (800fc98 <tcp_create_segment+0x130>)
 800fb86:	f007 fb1d 	bl	80171c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d105      	bne.n	800fb9c <tcp_create_segment+0x34>
 800fb90:	4b3f      	ldr	r3, [pc, #252]	; (800fc90 <tcp_create_segment+0x128>)
 800fb92:	22a4      	movs	r2, #164	; 0xa4
 800fb94:	4941      	ldr	r1, [pc, #260]	; (800fc9c <tcp_create_segment+0x134>)
 800fb96:	4840      	ldr	r0, [pc, #256]	; (800fc98 <tcp_create_segment+0x130>)
 800fb98:	f007 fb14 	bl	80171c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fb9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	f003 0304 	and.w	r3, r3, #4
 800fba8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fbaa:	2003      	movs	r0, #3
 800fbac:	f7fa fcac 	bl	800a508 <memp_malloc>
 800fbb0:	6138      	str	r0, [r7, #16]
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d104      	bne.n	800fbc2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fbb8:	68b8      	ldr	r0, [r7, #8]
 800fbba:	f7fb fb0b 	bl	800b1d4 <pbuf_free>
    return NULL;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	e061      	b.n	800fc86 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fbc8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fbca:	693b      	ldr	r3, [r7, #16]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	68ba      	ldr	r2, [r7, #8]
 800fbd4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	891a      	ldrh	r2, [r3, #8]
 800fbda:	7dfb      	ldrb	r3, [r7, #23]
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	d205      	bcs.n	800fbee <tcp_create_segment+0x86>
 800fbe2:	4b2b      	ldr	r3, [pc, #172]	; (800fc90 <tcp_create_segment+0x128>)
 800fbe4:	22b0      	movs	r2, #176	; 0xb0
 800fbe6:	492e      	ldr	r1, [pc, #184]	; (800fca0 <tcp_create_segment+0x138>)
 800fbe8:	482b      	ldr	r0, [pc, #172]	; (800fc98 <tcp_create_segment+0x130>)
 800fbea:	f007 faeb 	bl	80171c4 <iprintf>
  seg->len = p->tot_len - optlen;
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	891a      	ldrh	r2, [r3, #8]
 800fbf2:	7dfb      	ldrb	r3, [r7, #23]
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	1ad3      	subs	r3, r2, r3
 800fbf8:	b29a      	uxth	r2, r3
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fbfe:	2114      	movs	r1, #20
 800fc00:	68b8      	ldr	r0, [r7, #8]
 800fc02:	f7fb fa51 	bl	800b0a8 <pbuf_add_header>
 800fc06:	4603      	mov	r3, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d004      	beq.n	800fc16 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fc0c:	6938      	ldr	r0, [r7, #16]
 800fc0e:	f7fc ff22 	bl	800ca56 <tcp_seg_free>
    return NULL;
 800fc12:	2300      	movs	r3, #0
 800fc14:	e037      	b.n	800fc86 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	685a      	ldr	r2, [r3, #4]
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	8ada      	ldrh	r2, [r3, #22]
 800fc24:	693b      	ldr	r3, [r7, #16]
 800fc26:	68dc      	ldr	r4, [r3, #12]
 800fc28:	4610      	mov	r0, r2
 800fc2a:	f7f9 ff39 	bl	8009aa0 <lwip_htons>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	8b1a      	ldrh	r2, [r3, #24]
 800fc36:	693b      	ldr	r3, [r7, #16]
 800fc38:	68dc      	ldr	r4, [r3, #12]
 800fc3a:	4610      	mov	r0, r2
 800fc3c:	f7f9 ff30 	bl	8009aa0 <lwip_htons>
 800fc40:	4603      	mov	r3, r0
 800fc42:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	68dc      	ldr	r4, [r3, #12]
 800fc48:	6838      	ldr	r0, [r7, #0]
 800fc4a:	f7f9 ff3e 	bl	8009aca <lwip_htonl>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fc52:	7dfb      	ldrb	r3, [r7, #23]
 800fc54:	089b      	lsrs	r3, r3, #2
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	3305      	adds	r3, #5
 800fc5c:	b29b      	uxth	r3, r3
 800fc5e:	031b      	lsls	r3, r3, #12
 800fc60:	b29a      	uxth	r2, r3
 800fc62:	79fb      	ldrb	r3, [r7, #7]
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	4313      	orrs	r3, r2
 800fc68:	b29a      	uxth	r2, r3
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	68dc      	ldr	r4, [r3, #12]
 800fc6e:	4610      	mov	r0, r2
 800fc70:	f7f9 ff16 	bl	8009aa0 <lwip_htons>
 800fc74:	4603      	mov	r3, r0
 800fc76:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	68db      	ldr	r3, [r3, #12]
 800fc7c:	2200      	movs	r2, #0
 800fc7e:	749a      	strb	r2, [r3, #18]
 800fc80:	2200      	movs	r2, #0
 800fc82:	74da      	strb	r2, [r3, #19]
  return seg;
 800fc84:	693b      	ldr	r3, [r7, #16]
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	371c      	adds	r7, #28
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd90      	pop	{r4, r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	0801dc2c 	.word	0x0801dc2c
 800fc94:	0801dc60 	.word	0x0801dc60
 800fc98:	0801dc80 	.word	0x0801dc80
 800fc9c:	0801dca8 	.word	0x0801dca8
 800fca0:	0801dccc 	.word	0x0801dccc

0800fca4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	607b      	str	r3, [r7, #4]
 800fcac:	4603      	mov	r3, r0
 800fcae:	73fb      	strb	r3, [r7, #15]
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	81bb      	strh	r3, [r7, #12]
 800fcb4:	4613      	mov	r3, r2
 800fcb6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800fcb8:	89bb      	ldrh	r3, [r7, #12]
 800fcba:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d105      	bne.n	800fcce <tcp_pbuf_prealloc+0x2a>
 800fcc2:	4b30      	ldr	r3, [pc, #192]	; (800fd84 <tcp_pbuf_prealloc+0xe0>)
 800fcc4:	22e8      	movs	r2, #232	; 0xe8
 800fcc6:	4930      	ldr	r1, [pc, #192]	; (800fd88 <tcp_pbuf_prealloc+0xe4>)
 800fcc8:	4830      	ldr	r0, [pc, #192]	; (800fd8c <tcp_pbuf_prealloc+0xe8>)
 800fcca:	f007 fa7b 	bl	80171c4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800fcce:	6a3b      	ldr	r3, [r7, #32]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d105      	bne.n	800fce0 <tcp_pbuf_prealloc+0x3c>
 800fcd4:	4b2b      	ldr	r3, [pc, #172]	; (800fd84 <tcp_pbuf_prealloc+0xe0>)
 800fcd6:	22e9      	movs	r2, #233	; 0xe9
 800fcd8:	492d      	ldr	r1, [pc, #180]	; (800fd90 <tcp_pbuf_prealloc+0xec>)
 800fcda:	482c      	ldr	r0, [pc, #176]	; (800fd8c <tcp_pbuf_prealloc+0xe8>)
 800fcdc:	f007 fa72 	bl	80171c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800fce0:	89ba      	ldrh	r2, [r7, #12]
 800fce2:	897b      	ldrh	r3, [r7, #10]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d221      	bcs.n	800fd2c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fce8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fcec:	f003 0302 	and.w	r3, r3, #2
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d111      	bne.n	800fd18 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800fcf4:	6a3b      	ldr	r3, [r7, #32]
 800fcf6:	8b5b      	ldrh	r3, [r3, #26]
 800fcf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d115      	bne.n	800fd2c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800fd00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d007      	beq.n	800fd18 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800fd08:	6a3b      	ldr	r3, [r7, #32]
 800fd0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d103      	bne.n	800fd18 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800fd10:	6a3b      	ldr	r3, [r7, #32]
 800fd12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d009      	beq.n	800fd2c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800fd18:	89bb      	ldrh	r3, [r7, #12]
 800fd1a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800fd1e:	f023 0203 	bic.w	r2, r3, #3
 800fd22:	897b      	ldrh	r3, [r7, #10]
 800fd24:	4293      	cmp	r3, r2
 800fd26:	bf28      	it	cs
 800fd28:	4613      	movcs	r3, r2
 800fd2a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800fd2c:	8af9      	ldrh	r1, [r7, #22]
 800fd2e:	7bfb      	ldrb	r3, [r7, #15]
 800fd30:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fa ff69 	bl	800ac0c <pbuf_alloc>
 800fd3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d101      	bne.n	800fd46 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	e019      	b.n	800fd7a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d006      	beq.n	800fd5c <tcp_pbuf_prealloc+0xb8>
 800fd4e:	4b0d      	ldr	r3, [pc, #52]	; (800fd84 <tcp_pbuf_prealloc+0xe0>)
 800fd50:	f240 120b 	movw	r2, #267	; 0x10b
 800fd54:	490f      	ldr	r1, [pc, #60]	; (800fd94 <tcp_pbuf_prealloc+0xf0>)
 800fd56:	480d      	ldr	r0, [pc, #52]	; (800fd8c <tcp_pbuf_prealloc+0xe8>)
 800fd58:	f007 fa34 	bl	80171c4 <iprintf>
  *oversize = p->len - length;
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	895a      	ldrh	r2, [r3, #10]
 800fd60:	89bb      	ldrh	r3, [r7, #12]
 800fd62:	1ad3      	subs	r3, r2, r3
 800fd64:	b29a      	uxth	r2, r3
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	89ba      	ldrh	r2, [r7, #12]
 800fd6e:	811a      	strh	r2, [r3, #8]
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	891a      	ldrh	r2, [r3, #8]
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	815a      	strh	r2, [r3, #10]
  return p;
 800fd78:	693b      	ldr	r3, [r7, #16]
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3718      	adds	r7, #24
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}
 800fd82:	bf00      	nop
 800fd84:	0801dc2c 	.word	0x0801dc2c
 800fd88:	0801dce4 	.word	0x0801dce4
 800fd8c:	0801dc80 	.word	0x0801dc80
 800fd90:	0801dd08 	.word	0x0801dd08
 800fd94:	0801dd28 	.word	0x0801dd28

0800fd98 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
 800fda0:	460b      	mov	r3, r1
 800fda2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d106      	bne.n	800fdb8 <tcp_write_checks+0x20>
 800fdaa:	4b33      	ldr	r3, [pc, #204]	; (800fe78 <tcp_write_checks+0xe0>)
 800fdac:	f240 1233 	movw	r2, #307	; 0x133
 800fdb0:	4932      	ldr	r1, [pc, #200]	; (800fe7c <tcp_write_checks+0xe4>)
 800fdb2:	4833      	ldr	r0, [pc, #204]	; (800fe80 <tcp_write_checks+0xe8>)
 800fdb4:	f007 fa06 	bl	80171c4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	7d1b      	ldrb	r3, [r3, #20]
 800fdbc:	2b04      	cmp	r3, #4
 800fdbe:	d00e      	beq.n	800fdde <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800fdc4:	2b07      	cmp	r3, #7
 800fdc6:	d00a      	beq.n	800fdde <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	d006      	beq.n	800fdde <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800fdd4:	2b03      	cmp	r3, #3
 800fdd6:	d002      	beq.n	800fdde <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800fdd8:	f06f 030a 	mvn.w	r3, #10
 800fddc:	e048      	b.n	800fe70 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800fdde:	887b      	ldrh	r3, [r7, #2]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d101      	bne.n	800fde8 <tcp_write_checks+0x50>
    return ERR_OK;
 800fde4:	2300      	movs	r3, #0
 800fde6:	e043      	b.n	800fe70 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fdee:	887a      	ldrh	r2, [r7, #2]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d909      	bls.n	800fe08 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	8b5b      	ldrh	r3, [r3, #26]
 800fdf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800fe02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe06:	e033      	b.n	800fe70 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe0e:	2b08      	cmp	r3, #8
 800fe10:	d909      	bls.n	800fe26 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	8b5b      	ldrh	r3, [r3, #26]
 800fe16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe1a:	b29a      	uxth	r2, r3
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800fe20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe24:	e024      	b.n	800fe70 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d00f      	beq.n	800fe50 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d11a      	bne.n	800fe6e <tcp_write_checks+0xd6>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d116      	bne.n	800fe6e <tcp_write_checks+0xd6>
 800fe40:	4b0d      	ldr	r3, [pc, #52]	; (800fe78 <tcp_write_checks+0xe0>)
 800fe42:	f240 1255 	movw	r2, #341	; 0x155
 800fe46:	490f      	ldr	r1, [pc, #60]	; (800fe84 <tcp_write_checks+0xec>)
 800fe48:	480d      	ldr	r0, [pc, #52]	; (800fe80 <tcp_write_checks+0xe8>)
 800fe4a:	f007 f9bb 	bl	80171c4 <iprintf>
 800fe4e:	e00e      	b.n	800fe6e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d103      	bne.n	800fe60 <tcp_write_checks+0xc8>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d006      	beq.n	800fe6e <tcp_write_checks+0xd6>
 800fe60:	4b05      	ldr	r3, [pc, #20]	; (800fe78 <tcp_write_checks+0xe0>)
 800fe62:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800fe66:	4908      	ldr	r1, [pc, #32]	; (800fe88 <tcp_write_checks+0xf0>)
 800fe68:	4805      	ldr	r0, [pc, #20]	; (800fe80 <tcp_write_checks+0xe8>)
 800fe6a:	f007 f9ab 	bl	80171c4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800fe6e:	2300      	movs	r3, #0
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	0801dc2c 	.word	0x0801dc2c
 800fe7c:	0801dd3c 	.word	0x0801dd3c
 800fe80:	0801dc80 	.word	0x0801dc80
 800fe84:	0801dd5c 	.word	0x0801dd5c
 800fe88:	0801dd98 	.word	0x0801dd98

0800fe8c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800fe8c:	b590      	push	{r4, r7, lr}
 800fe8e:	b09b      	sub	sp, #108	; 0x6c
 800fe90:	af04      	add	r7, sp, #16
 800fe92:	60f8      	str	r0, [r7, #12]
 800fe94:	60b9      	str	r1, [r7, #8]
 800fe96:	4611      	mov	r1, r2
 800fe98:	461a      	mov	r2, r3
 800fe9a:	460b      	mov	r3, r1
 800fe9c:	80fb      	strh	r3, [r7, #6]
 800fe9e:	4613      	mov	r3, r2
 800fea0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800fea2:	2300      	movs	r3, #0
 800fea4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800fea6:	2300      	movs	r3, #0
 800fea8:	653b      	str	r3, [r7, #80]	; 0x50
 800feaa:	2300      	movs	r3, #0
 800feac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800feae:	2300      	movs	r3, #0
 800feb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800feb2:	2300      	movs	r3, #0
 800feb4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800feb6:	2300      	movs	r3, #0
 800feb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800febc:	2300      	movs	r3, #0
 800febe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800fec2:	2300      	movs	r3, #0
 800fec4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800fec6:	2300      	movs	r3, #0
 800fec8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800feca:	2300      	movs	r3, #0
 800fecc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d109      	bne.n	800fee8 <tcp_write+0x5c>
 800fed4:	4ba4      	ldr	r3, [pc, #656]	; (8010168 <tcp_write+0x2dc>)
 800fed6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800feda:	49a4      	ldr	r1, [pc, #656]	; (801016c <tcp_write+0x2e0>)
 800fedc:	48a4      	ldr	r0, [pc, #656]	; (8010170 <tcp_write+0x2e4>)
 800fede:	f007 f971 	bl	80171c4 <iprintf>
 800fee2:	f06f 030f 	mvn.w	r3, #15
 800fee6:	e32a      	b.n	801053e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800feee:	085b      	lsrs	r3, r3, #1
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fef6:	4293      	cmp	r3, r2
 800fef8:	bf28      	it	cs
 800fefa:	4613      	movcs	r3, r2
 800fefc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800fefe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d102      	bne.n	800ff0a <tcp_write+0x7e>
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff08:	e000      	b.n	800ff0c <tcp_write+0x80>
 800ff0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d109      	bne.n	800ff28 <tcp_write+0x9c>
 800ff14:	4b94      	ldr	r3, [pc, #592]	; (8010168 <tcp_write+0x2dc>)
 800ff16:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ff1a:	4996      	ldr	r1, [pc, #600]	; (8010174 <tcp_write+0x2e8>)
 800ff1c:	4894      	ldr	r0, [pc, #592]	; (8010170 <tcp_write+0x2e4>)
 800ff1e:	f007 f951 	bl	80171c4 <iprintf>
 800ff22:	f06f 030f 	mvn.w	r3, #15
 800ff26:	e30a      	b.n	801053e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800ff28:	88fb      	ldrh	r3, [r7, #6]
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f7ff ff33 	bl	800fd98 <tcp_write_checks>
 800ff32:	4603      	mov	r3, r0
 800ff34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800ff38:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d002      	beq.n	800ff46 <tcp_write+0xba>
    return err;
 800ff40:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800ff44:	e2fb      	b.n	801053e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ff50:	2300      	movs	r3, #0
 800ff52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	f000 80f6 	beq.w	801014c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff64:	653b      	str	r3, [r7, #80]	; 0x50
 800ff66:	e002      	b.n	800ff6e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800ff68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ff6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d1f8      	bne.n	800ff68 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800ff76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff78:	7a9b      	ldrb	r3, [r3, #10]
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	f003 0304 	and.w	r3, r3, #4
 800ff82:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800ff84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ff86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff88:	891b      	ldrh	r3, [r3, #8]
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	8c3b      	ldrh	r3, [r7, #32]
 800ff8e:	440b      	add	r3, r1
 800ff90:	429a      	cmp	r2, r3
 800ff92:	da06      	bge.n	800ffa2 <tcp_write+0x116>
 800ff94:	4b74      	ldr	r3, [pc, #464]	; (8010168 <tcp_write+0x2dc>)
 800ff96:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ff9a:	4977      	ldr	r1, [pc, #476]	; (8010178 <tcp_write+0x2ec>)
 800ff9c:	4874      	ldr	r0, [pc, #464]	; (8010170 <tcp_write+0x2e4>)
 800ff9e:	f007 f911 	bl	80171c4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800ffa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffa4:	891a      	ldrh	r2, [r3, #8]
 800ffa6:	8c3b      	ldrh	r3, [r7, #32]
 800ffa8:	4413      	add	r3, r2
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ffb8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800ffba:	8a7b      	ldrh	r3, [r7, #18]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d026      	beq.n	801000e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800ffc0:	8a7b      	ldrh	r3, [r7, #18]
 800ffc2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d206      	bcs.n	800ffd6 <tcp_write+0x14a>
 800ffc8:	4b67      	ldr	r3, [pc, #412]	; (8010168 <tcp_write+0x2dc>)
 800ffca:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800ffce:	496b      	ldr	r1, [pc, #428]	; (801017c <tcp_write+0x2f0>)
 800ffd0:	4867      	ldr	r0, [pc, #412]	; (8010170 <tcp_write+0x2e4>)
 800ffd2:	f007 f8f7 	bl	80171c4 <iprintf>
      seg = last_unsent;
 800ffd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffd8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800ffda:	8a7b      	ldrh	r3, [r7, #18]
 800ffdc:	88fa      	ldrh	r2, [r7, #6]
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	bf28      	it	cs
 800ffe2:	4613      	movcs	r3, r2
 800ffe4:	b29b      	uxth	r3, r3
 800ffe6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ffe8:	4293      	cmp	r3, r2
 800ffea:	bf28      	it	cs
 800ffec:	4613      	movcs	r3, r2
 800ffee:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800fff0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fff4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fff6:	4413      	add	r3, r2
 800fff8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800fffc:	8a7a      	ldrh	r2, [r7, #18]
 800fffe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	b29b      	uxth	r3, r3
 8010004:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010006:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010008:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801000a:	1ad3      	subs	r3, r2, r3
 801000c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801000e:	8a7b      	ldrh	r3, [r7, #18]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d00b      	beq.n	801002c <tcp_write+0x1a0>
 8010014:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010018:	88fb      	ldrh	r3, [r7, #6]
 801001a:	429a      	cmp	r2, r3
 801001c:	d006      	beq.n	801002c <tcp_write+0x1a0>
 801001e:	4b52      	ldr	r3, [pc, #328]	; (8010168 <tcp_write+0x2dc>)
 8010020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010024:	4956      	ldr	r1, [pc, #344]	; (8010180 <tcp_write+0x2f4>)
 8010026:	4852      	ldr	r0, [pc, #328]	; (8010170 <tcp_write+0x2e4>)
 8010028:	f007 f8cc 	bl	80171c4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801002c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010030:	88fb      	ldrh	r3, [r7, #6]
 8010032:	429a      	cmp	r2, r3
 8010034:	f080 8167 	bcs.w	8010306 <tcp_write+0x47a>
 8010038:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801003a:	2b00      	cmp	r3, #0
 801003c:	f000 8163 	beq.w	8010306 <tcp_write+0x47a>
 8010040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010042:	891b      	ldrh	r3, [r3, #8]
 8010044:	2b00      	cmp	r3, #0
 8010046:	f000 815e 	beq.w	8010306 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801004a:	88fa      	ldrh	r2, [r7, #6]
 801004c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010050:	1ad2      	subs	r2, r2, r3
 8010052:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010054:	4293      	cmp	r3, r2
 8010056:	bfa8      	it	ge
 8010058:	4613      	movge	r3, r2
 801005a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801005c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801005e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010060:	797b      	ldrb	r3, [r7, #5]
 8010062:	f003 0301 	and.w	r3, r3, #1
 8010066:	2b00      	cmp	r3, #0
 8010068:	d027      	beq.n	80100ba <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801006a:	f107 0012 	add.w	r0, r7, #18
 801006e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010070:	8bf9      	ldrh	r1, [r7, #30]
 8010072:	2301      	movs	r3, #1
 8010074:	9302      	str	r3, [sp, #8]
 8010076:	797b      	ldrb	r3, [r7, #5]
 8010078:	9301      	str	r3, [sp, #4]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	9300      	str	r3, [sp, #0]
 801007e:	4603      	mov	r3, r0
 8010080:	2000      	movs	r0, #0
 8010082:	f7ff fe0f 	bl	800fca4 <tcp_pbuf_prealloc>
 8010086:	6578      	str	r0, [r7, #84]	; 0x54
 8010088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801008a:	2b00      	cmp	r3, #0
 801008c:	f000 8225 	beq.w	80104da <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010092:	6858      	ldr	r0, [r3, #4]
 8010094:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010098:	68ba      	ldr	r2, [r7, #8]
 801009a:	4413      	add	r3, r2
 801009c:	8bfa      	ldrh	r2, [r7, #30]
 801009e:	4619      	mov	r1, r3
 80100a0:	f006 fbf6 	bl	8016890 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80100a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80100a6:	f7fb f91d 	bl	800b2e4 <pbuf_clen>
 80100aa:	4603      	mov	r3, r0
 80100ac:	461a      	mov	r2, r3
 80100ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80100b2:	4413      	add	r3, r2
 80100b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80100b8:	e041      	b.n	801013e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80100ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	637b      	str	r3, [r7, #52]	; 0x34
 80100c0:	e002      	b.n	80100c8 <tcp_write+0x23c>
 80100c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	637b      	str	r3, [r7, #52]	; 0x34
 80100c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d1f8      	bne.n	80100c2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80100d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d2:	7b1b      	ldrb	r3, [r3, #12]
 80100d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d115      	bne.n	8010108 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80100dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100e2:	8952      	ldrh	r2, [r2, #10]
 80100e4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80100e6:	68ba      	ldr	r2, [r7, #8]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d10d      	bne.n	8010108 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80100ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d006      	beq.n	8010102 <tcp_write+0x276>
 80100f4:	4b1c      	ldr	r3, [pc, #112]	; (8010168 <tcp_write+0x2dc>)
 80100f6:	f240 2231 	movw	r2, #561	; 0x231
 80100fa:	4922      	ldr	r1, [pc, #136]	; (8010184 <tcp_write+0x2f8>)
 80100fc:	481c      	ldr	r0, [pc, #112]	; (8010170 <tcp_write+0x2e4>)
 80100fe:	f007 f861 	bl	80171c4 <iprintf>
          extendlen = seglen;
 8010102:	8bfb      	ldrh	r3, [r7, #30]
 8010104:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010106:	e01a      	b.n	801013e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010108:	8bfb      	ldrh	r3, [r7, #30]
 801010a:	2201      	movs	r2, #1
 801010c:	4619      	mov	r1, r3
 801010e:	2000      	movs	r0, #0
 8010110:	f7fa fd7c 	bl	800ac0c <pbuf_alloc>
 8010114:	6578      	str	r0, [r7, #84]	; 0x54
 8010116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010118:	2b00      	cmp	r3, #0
 801011a:	f000 81e0 	beq.w	80104de <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801011e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010122:	68ba      	ldr	r2, [r7, #8]
 8010124:	441a      	add	r2, r3
 8010126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010128:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801012a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801012c:	f7fb f8da 	bl	800b2e4 <pbuf_clen>
 8010130:	4603      	mov	r3, r0
 8010132:	461a      	mov	r2, r3
 8010134:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010138:	4413      	add	r3, r2
 801013a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801013e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010142:	8bfb      	ldrh	r3, [r7, #30]
 8010144:	4413      	add	r3, r2
 8010146:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801014a:	e0dc      	b.n	8010306 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010152:	2b00      	cmp	r3, #0
 8010154:	f000 80d7 	beq.w	8010306 <tcp_write+0x47a>
 8010158:	4b03      	ldr	r3, [pc, #12]	; (8010168 <tcp_write+0x2dc>)
 801015a:	f240 224a 	movw	r2, #586	; 0x24a
 801015e:	490a      	ldr	r1, [pc, #40]	; (8010188 <tcp_write+0x2fc>)
 8010160:	4803      	ldr	r0, [pc, #12]	; (8010170 <tcp_write+0x2e4>)
 8010162:	f007 f82f 	bl	80171c4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010166:	e0ce      	b.n	8010306 <tcp_write+0x47a>
 8010168:	0801dc2c 	.word	0x0801dc2c
 801016c:	0801ddcc 	.word	0x0801ddcc
 8010170:	0801dc80 	.word	0x0801dc80
 8010174:	0801dde4 	.word	0x0801dde4
 8010178:	0801de18 	.word	0x0801de18
 801017c:	0801de30 	.word	0x0801de30
 8010180:	0801de50 	.word	0x0801de50
 8010184:	0801de70 	.word	0x0801de70
 8010188:	0801de9c 	.word	0x0801de9c
    struct pbuf *p;
    u16_t left = len - pos;
 801018c:	88fa      	ldrh	r2, [r7, #6]
 801018e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010192:	1ad3      	subs	r3, r2, r3
 8010194:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010196:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801019a:	b29b      	uxth	r3, r3
 801019c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801019e:	1ad3      	subs	r3, r2, r3
 80101a0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80101a2:	8b7a      	ldrh	r2, [r7, #26]
 80101a4:	8bbb      	ldrh	r3, [r7, #28]
 80101a6:	4293      	cmp	r3, r2
 80101a8:	bf28      	it	cs
 80101aa:	4613      	movcs	r3, r2
 80101ac:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80101ae:	797b      	ldrb	r3, [r7, #5]
 80101b0:	f003 0301 	and.w	r3, r3, #1
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d036      	beq.n	8010226 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80101b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80101bc:	b29a      	uxth	r2, r3
 80101be:	8b3b      	ldrh	r3, [r7, #24]
 80101c0:	4413      	add	r3, r2
 80101c2:	b299      	uxth	r1, r3
 80101c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	bf0c      	ite	eq
 80101ca:	2301      	moveq	r3, #1
 80101cc:	2300      	movne	r3, #0
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	f107 0012 	add.w	r0, r7, #18
 80101d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80101d6:	9302      	str	r3, [sp, #8]
 80101d8:	797b      	ldrb	r3, [r7, #5]
 80101da:	9301      	str	r3, [sp, #4]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	9300      	str	r3, [sp, #0]
 80101e0:	4603      	mov	r3, r0
 80101e2:	2036      	movs	r0, #54	; 0x36
 80101e4:	f7ff fd5e 	bl	800fca4 <tcp_pbuf_prealloc>
 80101e8:	6338      	str	r0, [r7, #48]	; 0x30
 80101ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f000 8178 	beq.w	80104e2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80101f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f4:	895b      	ldrh	r3, [r3, #10]
 80101f6:	8b3a      	ldrh	r2, [r7, #24]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d906      	bls.n	801020a <tcp_write+0x37e>
 80101fc:	4b8c      	ldr	r3, [pc, #560]	; (8010430 <tcp_write+0x5a4>)
 80101fe:	f240 2266 	movw	r2, #614	; 0x266
 8010202:	498c      	ldr	r1, [pc, #560]	; (8010434 <tcp_write+0x5a8>)
 8010204:	488c      	ldr	r0, [pc, #560]	; (8010438 <tcp_write+0x5ac>)
 8010206:	f006 ffdd 	bl	80171c4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801020a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801020c:	685a      	ldr	r2, [r3, #4]
 801020e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010212:	18d0      	adds	r0, r2, r3
 8010214:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010218:	68ba      	ldr	r2, [r7, #8]
 801021a:	4413      	add	r3, r2
 801021c:	8b3a      	ldrh	r2, [r7, #24]
 801021e:	4619      	mov	r1, r3
 8010220:	f006 fb36 	bl	8016890 <memcpy>
 8010224:	e02f      	b.n	8010286 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010226:	8a7b      	ldrh	r3, [r7, #18]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d006      	beq.n	801023a <tcp_write+0x3ae>
 801022c:	4b80      	ldr	r3, [pc, #512]	; (8010430 <tcp_write+0x5a4>)
 801022e:	f240 2271 	movw	r2, #625	; 0x271
 8010232:	4982      	ldr	r1, [pc, #520]	; (801043c <tcp_write+0x5b0>)
 8010234:	4880      	ldr	r0, [pc, #512]	; (8010438 <tcp_write+0x5ac>)
 8010236:	f006 ffc5 	bl	80171c4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801023a:	8b3b      	ldrh	r3, [r7, #24]
 801023c:	2201      	movs	r2, #1
 801023e:	4619      	mov	r1, r3
 8010240:	2036      	movs	r0, #54	; 0x36
 8010242:	f7fa fce3 	bl	800ac0c <pbuf_alloc>
 8010246:	6178      	str	r0, [r7, #20]
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	2b00      	cmp	r3, #0
 801024c:	f000 814b 	beq.w	80104e6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010250:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010254:	68ba      	ldr	r2, [r7, #8]
 8010256:	441a      	add	r2, r3
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801025c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010260:	b29b      	uxth	r3, r3
 8010262:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010266:	4619      	mov	r1, r3
 8010268:	2036      	movs	r0, #54	; 0x36
 801026a:	f7fa fccf 	bl	800ac0c <pbuf_alloc>
 801026e:	6338      	str	r0, [r7, #48]	; 0x30
 8010270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010272:	2b00      	cmp	r3, #0
 8010274:	d103      	bne.n	801027e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010276:	6978      	ldr	r0, [r7, #20]
 8010278:	f7fa ffac 	bl	800b1d4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801027c:	e136      	b.n	80104ec <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801027e:	6979      	ldr	r1, [r7, #20]
 8010280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010282:	f7fb f869 	bl	800b358 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010288:	f7fb f82c 	bl	800b2e4 <pbuf_clen>
 801028c:	4603      	mov	r3, r0
 801028e:	461a      	mov	r2, r3
 8010290:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010294:	4413      	add	r3, r2
 8010296:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801029a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801029e:	2b09      	cmp	r3, #9
 80102a0:	d903      	bls.n	80102aa <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80102a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102a4:	f7fa ff96 	bl	800b1d4 <pbuf_free>
      goto memerr;
 80102a8:	e120      	b.n	80104ec <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80102ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102b2:	441a      	add	r2, r3
 80102b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102b8:	9300      	str	r3, [sp, #0]
 80102ba:	4613      	mov	r3, r2
 80102bc:	2200      	movs	r2, #0
 80102be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f7ff fc51 	bl	800fb68 <tcp_create_segment>
 80102c6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80102c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	f000 810d 	beq.w	80104ea <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80102d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d102      	bne.n	80102dc <tcp_write+0x450>
      queue = seg;
 80102d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102d8:	647b      	str	r3, [r7, #68]	; 0x44
 80102da:	e00c      	b.n	80102f6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80102dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d106      	bne.n	80102f0 <tcp_write+0x464>
 80102e2:	4b53      	ldr	r3, [pc, #332]	; (8010430 <tcp_write+0x5a4>)
 80102e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80102e8:	4955      	ldr	r1, [pc, #340]	; (8010440 <tcp_write+0x5b4>)
 80102ea:	4853      	ldr	r0, [pc, #332]	; (8010438 <tcp_write+0x5ac>)
 80102ec:	f006 ff6a 	bl	80171c4 <iprintf>
      prev_seg->next = seg;
 80102f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80102f4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80102f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102f8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80102fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80102fe:	8b3b      	ldrh	r3, [r7, #24]
 8010300:	4413      	add	r3, r2
 8010302:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010306:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801030a:	88fb      	ldrh	r3, [r7, #6]
 801030c:	429a      	cmp	r2, r3
 801030e:	f4ff af3d 	bcc.w	801018c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010312:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010314:	2b00      	cmp	r3, #0
 8010316:	d02c      	beq.n	8010372 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801031a:	685b      	ldr	r3, [r3, #4]
 801031c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801031e:	e01e      	b.n	801035e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010322:	891a      	ldrh	r2, [r3, #8]
 8010324:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010326:	4413      	add	r3, r2
 8010328:	b29a      	uxth	r2, r3
 801032a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801032e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d110      	bne.n	8010358 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010338:	685b      	ldr	r3, [r3, #4]
 801033a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801033c:	8952      	ldrh	r2, [r2, #10]
 801033e:	4413      	add	r3, r2
 8010340:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010342:	68b9      	ldr	r1, [r7, #8]
 8010344:	4618      	mov	r0, r3
 8010346:	f006 faa3 	bl	8016890 <memcpy>
        p->len += oversize_used;
 801034a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034c:	895a      	ldrh	r2, [r3, #10]
 801034e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010350:	4413      	add	r3, r2
 8010352:	b29a      	uxth	r2, r3
 8010354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010356:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801035e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010360:	2b00      	cmp	r3, #0
 8010362:	d1dd      	bne.n	8010320 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010366:	891a      	ldrh	r2, [r3, #8]
 8010368:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801036a:	4413      	add	r3, r2
 801036c:	b29a      	uxth	r2, r3
 801036e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010370:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010372:	8a7a      	ldrh	r2, [r7, #18]
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801037a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801037c:	2b00      	cmp	r3, #0
 801037e:	d018      	beq.n	80103b2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010382:	2b00      	cmp	r3, #0
 8010384:	d106      	bne.n	8010394 <tcp_write+0x508>
 8010386:	4b2a      	ldr	r3, [pc, #168]	; (8010430 <tcp_write+0x5a4>)
 8010388:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801038c:	492d      	ldr	r1, [pc, #180]	; (8010444 <tcp_write+0x5b8>)
 801038e:	482a      	ldr	r0, [pc, #168]	; (8010438 <tcp_write+0x5ac>)
 8010390:	f006 ff18 	bl	80171c4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801039a:	4618      	mov	r0, r3
 801039c:	f7fa ffdc 	bl	800b358 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80103a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103a2:	891a      	ldrh	r2, [r3, #8]
 80103a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103a6:	891b      	ldrh	r3, [r3, #8]
 80103a8:	4413      	add	r3, r2
 80103aa:	b29a      	uxth	r2, r3
 80103ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ae:	811a      	strh	r2, [r3, #8]
 80103b0:	e037      	b.n	8010422 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80103b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d034      	beq.n	8010422 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80103b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d003      	beq.n	80103c6 <tcp_write+0x53a>
 80103be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d106      	bne.n	80103d4 <tcp_write+0x548>
 80103c6:	4b1a      	ldr	r3, [pc, #104]	; (8010430 <tcp_write+0x5a4>)
 80103c8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80103cc:	491e      	ldr	r1, [pc, #120]	; (8010448 <tcp_write+0x5bc>)
 80103ce:	481a      	ldr	r0, [pc, #104]	; (8010438 <tcp_write+0x5ac>)
 80103d0:	f006 fef8 	bl	80171c4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80103d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80103da:	e009      	b.n	80103f0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80103dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103de:	891a      	ldrh	r2, [r3, #8]
 80103e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80103e2:	4413      	add	r3, r2
 80103e4:	b29a      	uxth	r2, r3
 80103e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80103ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80103f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d1f1      	bne.n	80103dc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80103f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103fa:	891a      	ldrh	r2, [r3, #8]
 80103fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80103fe:	4413      	add	r3, r2
 8010400:	b29a      	uxth	r2, r3
 8010402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010404:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010408:	895a      	ldrh	r2, [r3, #10]
 801040a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801040c:	4413      	add	r3, r2
 801040e:	b29a      	uxth	r2, r3
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010416:	891a      	ldrh	r2, [r3, #8]
 8010418:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801041a:	4413      	add	r3, r2
 801041c:	b29a      	uxth	r2, r3
 801041e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010420:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010424:	2b00      	cmp	r3, #0
 8010426:	d111      	bne.n	801044c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801042c:	66da      	str	r2, [r3, #108]	; 0x6c
 801042e:	e010      	b.n	8010452 <tcp_write+0x5c6>
 8010430:	0801dc2c 	.word	0x0801dc2c
 8010434:	0801decc 	.word	0x0801decc
 8010438:	0801dc80 	.word	0x0801dc80
 801043c:	0801df0c 	.word	0x0801df0c
 8010440:	0801df1c 	.word	0x0801df1c
 8010444:	0801df30 	.word	0x0801df30
 8010448:	0801df68 	.word	0x0801df68
  } else {
    last_unsent->next = queue;
 801044c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801044e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010450:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010456:	88fb      	ldrh	r3, [r7, #6]
 8010458:	441a      	add	r2, r3
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010464:	88fb      	ldrh	r3, [r7, #6]
 8010466:	1ad3      	subs	r3, r2, r3
 8010468:	b29a      	uxth	r2, r3
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010476:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010480:	2b00      	cmp	r3, #0
 8010482:	d00e      	beq.n	80104a2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010488:	2b00      	cmp	r3, #0
 801048a:	d10a      	bne.n	80104a2 <tcp_write+0x616>
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010490:	2b00      	cmp	r3, #0
 8010492:	d106      	bne.n	80104a2 <tcp_write+0x616>
 8010494:	4b2c      	ldr	r3, [pc, #176]	; (8010548 <tcp_write+0x6bc>)
 8010496:	f240 3212 	movw	r2, #786	; 0x312
 801049a:	492c      	ldr	r1, [pc, #176]	; (801054c <tcp_write+0x6c0>)
 801049c:	482c      	ldr	r0, [pc, #176]	; (8010550 <tcp_write+0x6c4>)
 801049e:	f006 fe91 	bl	80171c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80104a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d016      	beq.n	80104d6 <tcp_write+0x64a>
 80104a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d012      	beq.n	80104d6 <tcp_write+0x64a>
 80104b0:	797b      	ldrb	r3, [r7, #5]
 80104b2:	f003 0302 	and.w	r3, r3, #2
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10d      	bne.n	80104d6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80104ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	899b      	ldrh	r3, [r3, #12]
 80104c0:	b29c      	uxth	r4, r3
 80104c2:	2008      	movs	r0, #8
 80104c4:	f7f9 faec 	bl	8009aa0 <lwip_htons>
 80104c8:	4603      	mov	r3, r0
 80104ca:	461a      	mov	r2, r3
 80104cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	4322      	orrs	r2, r4
 80104d2:	b292      	uxth	r2, r2
 80104d4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80104d6:	2300      	movs	r3, #0
 80104d8:	e031      	b.n	801053e <tcp_write+0x6b2>
          goto memerr;
 80104da:	bf00      	nop
 80104dc:	e006      	b.n	80104ec <tcp_write+0x660>
            goto memerr;
 80104de:	bf00      	nop
 80104e0:	e004      	b.n	80104ec <tcp_write+0x660>
        goto memerr;
 80104e2:	bf00      	nop
 80104e4:	e002      	b.n	80104ec <tcp_write+0x660>
        goto memerr;
 80104e6:	bf00      	nop
 80104e8:	e000      	b.n	80104ec <tcp_write+0x660>
      goto memerr;
 80104ea:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	8b5b      	ldrh	r3, [r3, #26]
 80104f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104f4:	b29a      	uxth	r2, r3
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80104fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d002      	beq.n	8010506 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010500:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010502:	f7fa fe67 	bl	800b1d4 <pbuf_free>
  }
  if (queue != NULL) {
 8010506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010508:	2b00      	cmp	r3, #0
 801050a:	d002      	beq.n	8010512 <tcp_write+0x686>
    tcp_segs_free(queue);
 801050c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801050e:	f7fc fa8d 	bl	800ca2c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010518:	2b00      	cmp	r3, #0
 801051a:	d00e      	beq.n	801053a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10a      	bne.n	801053a <tcp_write+0x6ae>
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010528:	2b00      	cmp	r3, #0
 801052a:	d106      	bne.n	801053a <tcp_write+0x6ae>
 801052c:	4b06      	ldr	r3, [pc, #24]	; (8010548 <tcp_write+0x6bc>)
 801052e:	f240 3227 	movw	r2, #807	; 0x327
 8010532:	4906      	ldr	r1, [pc, #24]	; (801054c <tcp_write+0x6c0>)
 8010534:	4806      	ldr	r0, [pc, #24]	; (8010550 <tcp_write+0x6c4>)
 8010536:	f006 fe45 	bl	80171c4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801053a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801053e:	4618      	mov	r0, r3
 8010540:	375c      	adds	r7, #92	; 0x5c
 8010542:	46bd      	mov	sp, r7
 8010544:	bd90      	pop	{r4, r7, pc}
 8010546:	bf00      	nop
 8010548:	0801dc2c 	.word	0x0801dc2c
 801054c:	0801dfa0 	.word	0x0801dfa0
 8010550:	0801dc80 	.word	0x0801dc80

08010554 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010554:	b590      	push	{r4, r7, lr}
 8010556:	b08b      	sub	sp, #44	; 0x2c
 8010558:	af02      	add	r7, sp, #8
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	460b      	mov	r3, r1
 801055e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010560:	2300      	movs	r3, #0
 8010562:	61fb      	str	r3, [r7, #28]
 8010564:	2300      	movs	r3, #0
 8010566:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010568:	2300      	movs	r3, #0
 801056a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d106      	bne.n	8010580 <tcp_split_unsent_seg+0x2c>
 8010572:	4b95      	ldr	r3, [pc, #596]	; (80107c8 <tcp_split_unsent_seg+0x274>)
 8010574:	f240 324b 	movw	r2, #843	; 0x34b
 8010578:	4994      	ldr	r1, [pc, #592]	; (80107cc <tcp_split_unsent_seg+0x278>)
 801057a:	4895      	ldr	r0, [pc, #596]	; (80107d0 <tcp_split_unsent_seg+0x27c>)
 801057c:	f006 fe22 	bl	80171c4 <iprintf>

  useg = pcb->unsent;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010584:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d102      	bne.n	8010592 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801058c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010590:	e116      	b.n	80107c0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010592:	887b      	ldrh	r3, [r7, #2]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d109      	bne.n	80105ac <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010598:	4b8b      	ldr	r3, [pc, #556]	; (80107c8 <tcp_split_unsent_seg+0x274>)
 801059a:	f240 3253 	movw	r2, #851	; 0x353
 801059e:	498d      	ldr	r1, [pc, #564]	; (80107d4 <tcp_split_unsent_seg+0x280>)
 80105a0:	488b      	ldr	r0, [pc, #556]	; (80107d0 <tcp_split_unsent_seg+0x27c>)
 80105a2:	f006 fe0f 	bl	80171c4 <iprintf>
    return ERR_VAL;
 80105a6:	f06f 0305 	mvn.w	r3, #5
 80105aa:	e109      	b.n	80107c0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	891b      	ldrh	r3, [r3, #8]
 80105b0:	887a      	ldrh	r2, [r7, #2]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d301      	bcc.n	80105ba <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80105b6:	2300      	movs	r3, #0
 80105b8:	e102      	b.n	80107c0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105be:	887a      	ldrh	r2, [r7, #2]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d906      	bls.n	80105d2 <tcp_split_unsent_seg+0x7e>
 80105c4:	4b80      	ldr	r3, [pc, #512]	; (80107c8 <tcp_split_unsent_seg+0x274>)
 80105c6:	f240 325b 	movw	r2, #859	; 0x35b
 80105ca:	4983      	ldr	r1, [pc, #524]	; (80107d8 <tcp_split_unsent_seg+0x284>)
 80105cc:	4880      	ldr	r0, [pc, #512]	; (80107d0 <tcp_split_unsent_seg+0x27c>)
 80105ce:	f006 fdf9 	bl	80171c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	891b      	ldrh	r3, [r3, #8]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d106      	bne.n	80105e8 <tcp_split_unsent_seg+0x94>
 80105da:	4b7b      	ldr	r3, [pc, #492]	; (80107c8 <tcp_split_unsent_seg+0x274>)
 80105dc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80105e0:	497e      	ldr	r1, [pc, #504]	; (80107dc <tcp_split_unsent_seg+0x288>)
 80105e2:	487b      	ldr	r0, [pc, #492]	; (80107d0 <tcp_split_unsent_seg+0x27c>)
 80105e4:	f006 fdee 	bl	80171c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	7a9b      	ldrb	r3, [r3, #10]
 80105ec:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80105ee:	7bfb      	ldrb	r3, [r7, #15]
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	b2db      	uxtb	r3, r3
 80105f4:	f003 0304 	and.w	r3, r3, #4
 80105f8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80105fa:	697b      	ldr	r3, [r7, #20]
 80105fc:	891a      	ldrh	r2, [r3, #8]
 80105fe:	887b      	ldrh	r3, [r7, #2]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010604:	7bbb      	ldrb	r3, [r7, #14]
 8010606:	b29a      	uxth	r2, r3
 8010608:	89bb      	ldrh	r3, [r7, #12]
 801060a:	4413      	add	r3, r2
 801060c:	b29b      	uxth	r3, r3
 801060e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010612:	4619      	mov	r1, r3
 8010614:	2036      	movs	r0, #54	; 0x36
 8010616:	f7fa faf9 	bl	800ac0c <pbuf_alloc>
 801061a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	2b00      	cmp	r3, #0
 8010620:	f000 80b7 	beq.w	8010792 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	891a      	ldrh	r2, [r3, #8]
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	891b      	ldrh	r3, [r3, #8]
 801062e:	1ad3      	subs	r3, r2, r3
 8010630:	b29a      	uxth	r2, r3
 8010632:	887b      	ldrh	r3, [r7, #2]
 8010634:	4413      	add	r3, r2
 8010636:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	6858      	ldr	r0, [r3, #4]
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	685a      	ldr	r2, [r3, #4]
 8010640:	7bbb      	ldrb	r3, [r7, #14]
 8010642:	18d1      	adds	r1, r2, r3
 8010644:	897b      	ldrh	r3, [r7, #10]
 8010646:	89ba      	ldrh	r2, [r7, #12]
 8010648:	f7fa ffbe 	bl	800b5c8 <pbuf_copy_partial>
 801064c:	4603      	mov	r3, r0
 801064e:	461a      	mov	r2, r3
 8010650:	89bb      	ldrh	r3, [r7, #12]
 8010652:	4293      	cmp	r3, r2
 8010654:	f040 809f 	bne.w	8010796 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	899b      	ldrh	r3, [r3, #12]
 801065e:	b29b      	uxth	r3, r3
 8010660:	4618      	mov	r0, r3
 8010662:	f7f9 fa1d 	bl	8009aa0 <lwip_htons>
 8010666:	4603      	mov	r3, r0
 8010668:	b2db      	uxtb	r3, r3
 801066a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801066e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010670:	2300      	movs	r3, #0
 8010672:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010674:	7efb      	ldrb	r3, [r7, #27]
 8010676:	f003 0308 	and.w	r3, r3, #8
 801067a:	2b00      	cmp	r3, #0
 801067c:	d007      	beq.n	801068e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801067e:	7efb      	ldrb	r3, [r7, #27]
 8010680:	f023 0308 	bic.w	r3, r3, #8
 8010684:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010686:	7ebb      	ldrb	r3, [r7, #26]
 8010688:	f043 0308 	orr.w	r3, r3, #8
 801068c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801068e:	7efb      	ldrb	r3, [r7, #27]
 8010690:	f003 0301 	and.w	r3, r3, #1
 8010694:	2b00      	cmp	r3, #0
 8010696:	d007      	beq.n	80106a8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010698:	7efb      	ldrb	r3, [r7, #27]
 801069a:	f023 0301 	bic.w	r3, r3, #1
 801069e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80106a0:	7ebb      	ldrb	r3, [r7, #26]
 80106a2:	f043 0301 	orr.w	r3, r3, #1
 80106a6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	68db      	ldr	r3, [r3, #12]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	4618      	mov	r0, r3
 80106b0:	f7f9 fa0b 	bl	8009aca <lwip_htonl>
 80106b4:	4602      	mov	r2, r0
 80106b6:	887b      	ldrh	r3, [r7, #2]
 80106b8:	18d1      	adds	r1, r2, r3
 80106ba:	7eba      	ldrb	r2, [r7, #26]
 80106bc:	7bfb      	ldrb	r3, [r7, #15]
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	460b      	mov	r3, r1
 80106c2:	6939      	ldr	r1, [r7, #16]
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7ff fa4f 	bl	800fb68 <tcp_create_segment>
 80106ca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80106cc:	69fb      	ldr	r3, [r7, #28]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d063      	beq.n	801079a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	685b      	ldr	r3, [r3, #4]
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7fa fe04 	bl	800b2e4 <pbuf_clen>
 80106dc:	4603      	mov	r3, r0
 80106de:	461a      	mov	r2, r3
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80106e6:	1a9b      	subs	r3, r3, r2
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	6858      	ldr	r0, [r3, #4]
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	891a      	ldrh	r2, [r3, #8]
 80106fa:	89bb      	ldrh	r3, [r7, #12]
 80106fc:	1ad3      	subs	r3, r2, r3
 80106fe:	b29b      	uxth	r3, r3
 8010700:	4619      	mov	r1, r3
 8010702:	f7fa fbe1 	bl	800aec8 <pbuf_realloc>
  useg->len -= remainder;
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	891a      	ldrh	r2, [r3, #8]
 801070a:	89bb      	ldrh	r3, [r7, #12]
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	b29a      	uxth	r2, r3
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	68db      	ldr	r3, [r3, #12]
 8010718:	899b      	ldrh	r3, [r3, #12]
 801071a:	b29c      	uxth	r4, r3
 801071c:	7efb      	ldrb	r3, [r7, #27]
 801071e:	b29b      	uxth	r3, r3
 8010720:	4618      	mov	r0, r3
 8010722:	f7f9 f9bd 	bl	8009aa0 <lwip_htons>
 8010726:	4603      	mov	r3, r0
 8010728:	461a      	mov	r2, r3
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	4322      	orrs	r2, r4
 8010730:	b292      	uxth	r2, r2
 8010732:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	4618      	mov	r0, r3
 801073a:	f7fa fdd3 	bl	800b2e4 <pbuf_clen>
 801073e:	4603      	mov	r3, r0
 8010740:	461a      	mov	r2, r3
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010748:	4413      	add	r3, r2
 801074a:	b29a      	uxth	r2, r3
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010752:	69fb      	ldr	r3, [r7, #28]
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	4618      	mov	r0, r3
 8010758:	f7fa fdc4 	bl	800b2e4 <pbuf_clen>
 801075c:	4603      	mov	r3, r0
 801075e:	461a      	mov	r2, r3
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010766:	4413      	add	r3, r2
 8010768:	b29a      	uxth	r2, r3
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	681a      	ldr	r2, [r3, #0]
 8010774:	69fb      	ldr	r3, [r7, #28]
 8010776:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	69fa      	ldr	r2, [r7, #28]
 801077c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d103      	bne.n	801078e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2200      	movs	r2, #0
 801078a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801078e:	2300      	movs	r3, #0
 8010790:	e016      	b.n	80107c0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010792:	bf00      	nop
 8010794:	e002      	b.n	801079c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010796:	bf00      	nop
 8010798:	e000      	b.n	801079c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801079a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801079c:	69fb      	ldr	r3, [r7, #28]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d006      	beq.n	80107b0 <tcp_split_unsent_seg+0x25c>
 80107a2:	4b09      	ldr	r3, [pc, #36]	; (80107c8 <tcp_split_unsent_seg+0x274>)
 80107a4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80107a8:	490d      	ldr	r1, [pc, #52]	; (80107e0 <tcp_split_unsent_seg+0x28c>)
 80107aa:	4809      	ldr	r0, [pc, #36]	; (80107d0 <tcp_split_unsent_seg+0x27c>)
 80107ac:	f006 fd0a 	bl	80171c4 <iprintf>
  if (p != NULL) {
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d002      	beq.n	80107bc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80107b6:	6938      	ldr	r0, [r7, #16]
 80107b8:	f7fa fd0c 	bl	800b1d4 <pbuf_free>
  }

  return ERR_MEM;
 80107bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3724      	adds	r7, #36	; 0x24
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd90      	pop	{r4, r7, pc}
 80107c8:	0801dc2c 	.word	0x0801dc2c
 80107cc:	0801dfc0 	.word	0x0801dfc0
 80107d0:	0801dc80 	.word	0x0801dc80
 80107d4:	0801dfe4 	.word	0x0801dfe4
 80107d8:	0801e008 	.word	0x0801e008
 80107dc:	0801e018 	.word	0x0801e018
 80107e0:	0801e028 	.word	0x0801e028

080107e4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80107e4:	b590      	push	{r4, r7, lr}
 80107e6:	b085      	sub	sp, #20
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d106      	bne.n	8010800 <tcp_send_fin+0x1c>
 80107f2:	4b21      	ldr	r3, [pc, #132]	; (8010878 <tcp_send_fin+0x94>)
 80107f4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80107f8:	4920      	ldr	r1, [pc, #128]	; (801087c <tcp_send_fin+0x98>)
 80107fa:	4821      	ldr	r0, [pc, #132]	; (8010880 <tcp_send_fin+0x9c>)
 80107fc:	f006 fce2 	bl	80171c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010804:	2b00      	cmp	r3, #0
 8010806:	d02e      	beq.n	8010866 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801080c:	60fb      	str	r3, [r7, #12]
 801080e:	e002      	b.n	8010816 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d1f8      	bne.n	8010810 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	68db      	ldr	r3, [r3, #12]
 8010822:	899b      	ldrh	r3, [r3, #12]
 8010824:	b29b      	uxth	r3, r3
 8010826:	4618      	mov	r0, r3
 8010828:	f7f9 f93a 	bl	8009aa0 <lwip_htons>
 801082c:	4603      	mov	r3, r0
 801082e:	b2db      	uxtb	r3, r3
 8010830:	f003 0307 	and.w	r3, r3, #7
 8010834:	2b00      	cmp	r3, #0
 8010836:	d116      	bne.n	8010866 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	899b      	ldrh	r3, [r3, #12]
 801083e:	b29c      	uxth	r4, r3
 8010840:	2001      	movs	r0, #1
 8010842:	f7f9 f92d 	bl	8009aa0 <lwip_htons>
 8010846:	4603      	mov	r3, r0
 8010848:	461a      	mov	r2, r3
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	68db      	ldr	r3, [r3, #12]
 801084e:	4322      	orrs	r2, r4
 8010850:	b292      	uxth	r2, r2
 8010852:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	8b5b      	ldrh	r3, [r3, #26]
 8010858:	f043 0320 	orr.w	r3, r3, #32
 801085c:	b29a      	uxth	r2, r3
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010862:	2300      	movs	r3, #0
 8010864:	e004      	b.n	8010870 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010866:	2101      	movs	r1, #1
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 f80b 	bl	8010884 <tcp_enqueue_flags>
 801086e:	4603      	mov	r3, r0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3714      	adds	r7, #20
 8010874:	46bd      	mov	sp, r7
 8010876:	bd90      	pop	{r4, r7, pc}
 8010878:	0801dc2c 	.word	0x0801dc2c
 801087c:	0801e034 	.word	0x0801e034
 8010880:	0801dc80 	.word	0x0801dc80

08010884 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b08a      	sub	sp, #40	; 0x28
 8010888:	af02      	add	r7, sp, #8
 801088a:	6078      	str	r0, [r7, #4]
 801088c:	460b      	mov	r3, r1
 801088e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010890:	2300      	movs	r3, #0
 8010892:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010894:	2300      	movs	r3, #0
 8010896:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010898:	78fb      	ldrb	r3, [r7, #3]
 801089a:	f003 0303 	and.w	r3, r3, #3
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d106      	bne.n	80108b0 <tcp_enqueue_flags+0x2c>
 80108a2:	4b67      	ldr	r3, [pc, #412]	; (8010a40 <tcp_enqueue_flags+0x1bc>)
 80108a4:	f240 4211 	movw	r2, #1041	; 0x411
 80108a8:	4966      	ldr	r1, [pc, #408]	; (8010a44 <tcp_enqueue_flags+0x1c0>)
 80108aa:	4867      	ldr	r0, [pc, #412]	; (8010a48 <tcp_enqueue_flags+0x1c4>)
 80108ac:	f006 fc8a 	bl	80171c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d106      	bne.n	80108c4 <tcp_enqueue_flags+0x40>
 80108b6:	4b62      	ldr	r3, [pc, #392]	; (8010a40 <tcp_enqueue_flags+0x1bc>)
 80108b8:	f240 4213 	movw	r2, #1043	; 0x413
 80108bc:	4963      	ldr	r1, [pc, #396]	; (8010a4c <tcp_enqueue_flags+0x1c8>)
 80108be:	4862      	ldr	r0, [pc, #392]	; (8010a48 <tcp_enqueue_flags+0x1c4>)
 80108c0:	f006 fc80 	bl	80171c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80108c4:	78fb      	ldrb	r3, [r7, #3]
 80108c6:	f003 0302 	and.w	r3, r3, #2
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d001      	beq.n	80108d2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80108ce:	2301      	movs	r3, #1
 80108d0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80108d2:	7ffb      	ldrb	r3, [r7, #31]
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	f003 0304 	and.w	r3, r3, #4
 80108dc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80108de:	7dfb      	ldrb	r3, [r7, #23]
 80108e0:	b29b      	uxth	r3, r3
 80108e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80108e6:	4619      	mov	r1, r3
 80108e8:	2036      	movs	r0, #54	; 0x36
 80108ea:	f7fa f98f 	bl	800ac0c <pbuf_alloc>
 80108ee:	6138      	str	r0, [r7, #16]
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d109      	bne.n	801090a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	8b5b      	ldrh	r3, [r3, #26]
 80108fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108fe:	b29a      	uxth	r2, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010908:	e095      	b.n	8010a36 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	895a      	ldrh	r2, [r3, #10]
 801090e:	7dfb      	ldrb	r3, [r7, #23]
 8010910:	b29b      	uxth	r3, r3
 8010912:	429a      	cmp	r2, r3
 8010914:	d206      	bcs.n	8010924 <tcp_enqueue_flags+0xa0>
 8010916:	4b4a      	ldr	r3, [pc, #296]	; (8010a40 <tcp_enqueue_flags+0x1bc>)
 8010918:	f240 4239 	movw	r2, #1081	; 0x439
 801091c:	494c      	ldr	r1, [pc, #304]	; (8010a50 <tcp_enqueue_flags+0x1cc>)
 801091e:	484a      	ldr	r0, [pc, #296]	; (8010a48 <tcp_enqueue_flags+0x1c4>)
 8010920:	f006 fc50 	bl	80171c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010928:	78fa      	ldrb	r2, [r7, #3]
 801092a:	7ffb      	ldrb	r3, [r7, #31]
 801092c:	9300      	str	r3, [sp, #0]
 801092e:	460b      	mov	r3, r1
 8010930:	6939      	ldr	r1, [r7, #16]
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f7ff f918 	bl	800fb68 <tcp_create_segment>
 8010938:	60f8      	str	r0, [r7, #12]
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d109      	bne.n	8010954 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	8b5b      	ldrh	r3, [r3, #26]
 8010944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010948:	b29a      	uxth	r2, r3
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801094e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010952:	e070      	b.n	8010a36 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	f003 0303 	and.w	r3, r3, #3
 801095c:	2b00      	cmp	r3, #0
 801095e:	d006      	beq.n	801096e <tcp_enqueue_flags+0xea>
 8010960:	4b37      	ldr	r3, [pc, #220]	; (8010a40 <tcp_enqueue_flags+0x1bc>)
 8010962:	f240 4242 	movw	r2, #1090	; 0x442
 8010966:	493b      	ldr	r1, [pc, #236]	; (8010a54 <tcp_enqueue_flags+0x1d0>)
 8010968:	4837      	ldr	r0, [pc, #220]	; (8010a48 <tcp_enqueue_flags+0x1c4>)
 801096a:	f006 fc2b 	bl	80171c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	891b      	ldrh	r3, [r3, #8]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d006      	beq.n	8010984 <tcp_enqueue_flags+0x100>
 8010976:	4b32      	ldr	r3, [pc, #200]	; (8010a40 <tcp_enqueue_flags+0x1bc>)
 8010978:	f240 4243 	movw	r2, #1091	; 0x443
 801097c:	4936      	ldr	r1, [pc, #216]	; (8010a58 <tcp_enqueue_flags+0x1d4>)
 801097e:	4832      	ldr	r0, [pc, #200]	; (8010a48 <tcp_enqueue_flags+0x1c4>)
 8010980:	f006 fc20 	bl	80171c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010988:	2b00      	cmp	r3, #0
 801098a:	d103      	bne.n	8010994 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	68fa      	ldr	r2, [r7, #12]
 8010990:	66da      	str	r2, [r3, #108]	; 0x6c
 8010992:	e00d      	b.n	80109b0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010998:	61bb      	str	r3, [r7, #24]
 801099a:	e002      	b.n	80109a2 <tcp_enqueue_flags+0x11e>
 801099c:	69bb      	ldr	r3, [r7, #24]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	61bb      	str	r3, [r7, #24]
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d1f8      	bne.n	801099c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	68fa      	ldr	r2, [r7, #12]
 80109ae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2200      	movs	r2, #0
 80109b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80109b8:	78fb      	ldrb	r3, [r7, #3]
 80109ba:	f003 0302 	and.w	r3, r3, #2
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d104      	bne.n	80109cc <tcp_enqueue_flags+0x148>
 80109c2:	78fb      	ldrb	r3, [r7, #3]
 80109c4:	f003 0301 	and.w	r3, r3, #1
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d004      	beq.n	80109d6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109d0:	1c5a      	adds	r2, r3, #1
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80109d6:	78fb      	ldrb	r3, [r7, #3]
 80109d8:	f003 0301 	and.w	r3, r3, #1
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d006      	beq.n	80109ee <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	8b5b      	ldrh	r3, [r3, #26]
 80109e4:	f043 0320 	orr.w	r3, r3, #32
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7fa fc76 	bl	800b2e4 <pbuf_clen>
 80109f8:	4603      	mov	r3, r0
 80109fa:	461a      	mov	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a02:	4413      	add	r3, r2
 8010a04:	b29a      	uxth	r2, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00e      	beq.n	8010a34 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d10a      	bne.n	8010a34 <tcp_enqueue_flags+0x1b0>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d106      	bne.n	8010a34 <tcp_enqueue_flags+0x1b0>
 8010a26:	4b06      	ldr	r3, [pc, #24]	; (8010a40 <tcp_enqueue_flags+0x1bc>)
 8010a28:	f240 4265 	movw	r2, #1125	; 0x465
 8010a2c:	490b      	ldr	r1, [pc, #44]	; (8010a5c <tcp_enqueue_flags+0x1d8>)
 8010a2e:	4806      	ldr	r0, [pc, #24]	; (8010a48 <tcp_enqueue_flags+0x1c4>)
 8010a30:	f006 fbc8 	bl	80171c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3720      	adds	r7, #32
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}
 8010a3e:	bf00      	nop
 8010a40:	0801dc2c 	.word	0x0801dc2c
 8010a44:	0801e050 	.word	0x0801e050
 8010a48:	0801dc80 	.word	0x0801dc80
 8010a4c:	0801e0a8 	.word	0x0801e0a8
 8010a50:	0801e0c8 	.word	0x0801e0c8
 8010a54:	0801e104 	.word	0x0801e104
 8010a58:	0801e11c 	.word	0x0801e11c
 8010a5c:	0801e148 	.word	0x0801e148

08010a60 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010a60:	b5b0      	push	{r4, r5, r7, lr}
 8010a62:	b08c      	sub	sp, #48	; 0x30
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg, *useg;
  u32_t wnd, snd_nxt;
  err_t err;
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <tcp_output+0x20>
 8010a72:	4ba0      	ldr	r3, [pc, #640]	; (8010cf4 <tcp_output+0x294>)
 8010a74:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010a78:	499f      	ldr	r1, [pc, #636]	; (8010cf8 <tcp_output+0x298>)
 8010a7a:	48a0      	ldr	r0, [pc, #640]	; (8010cfc <tcp_output+0x29c>)
 8010a7c:	f006 fba2 	bl	80171c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	7d1b      	ldrb	r3, [r3, #20]
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	d106      	bne.n	8010a96 <tcp_output+0x36>
 8010a88:	4b9a      	ldr	r3, [pc, #616]	; (8010cf4 <tcp_output+0x294>)
 8010a8a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010a8e:	499c      	ldr	r1, [pc, #624]	; (8010d00 <tcp_output+0x2a0>)
 8010a90:	489a      	ldr	r0, [pc, #616]	; (8010cfc <tcp_output+0x29c>)
 8010a92:	f006 fb97 	bl	80171c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010a96:	4b9b      	ldr	r3, [pc, #620]	; (8010d04 <tcp_output+0x2a4>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	687a      	ldr	r2, [r7, #4]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d101      	bne.n	8010aa4 <tcp_output+0x44>
    return ERR_OK;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	e1d2      	b.n	8010e4a <tcp_output+0x3ea>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ab0:	4293      	cmp	r3, r2
 8010ab2:	bf28      	it	cs
 8010ab4:	4613      	movcs	r3, r2
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	61fb      	str	r3, [r7, #28]

  seg = pcb->unsent;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010abe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (seg == NULL) {
 8010ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d10b      	bne.n	8010ade <tcp_output+0x7e>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	8b5b      	ldrh	r3, [r3, #26]
 8010aca:	f003 0302 	and.w	r3, r3, #2
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f000 81ae 	beq.w	8010e30 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 fdcf 	bl	8011678 <tcp_send_empty_ack>
 8010ada:	4603      	mov	r3, r0
 8010adc:	e1b5      	b.n	8010e4a <tcp_output+0x3ea>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010ade:	6879      	ldr	r1, [r7, #4]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	3304      	adds	r3, #4
 8010ae4:	461a      	mov	r2, r3
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f7ff f822 	bl	800fb30 <tcp_route>
 8010aec:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8010aee:	69bb      	ldr	r3, [r7, #24]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d102      	bne.n	8010afa <tcp_output+0x9a>
    return ERR_RTE;
 8010af4:	f06f 0303 	mvn.w	r3, #3
 8010af8:	e1a7      	b.n	8010e4a <tcp_output+0x3ea>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d003      	beq.n	8010b08 <tcp_output+0xa8>
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d111      	bne.n	8010b2c <tcp_output+0xcc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010b08:	69bb      	ldr	r3, [r7, #24]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d002      	beq.n	8010b14 <tcp_output+0xb4>
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	3304      	adds	r3, #4
 8010b12:	e000      	b.n	8010b16 <tcp_output+0xb6>
 8010b14:	2300      	movs	r3, #0
 8010b16:	617b      	str	r3, [r7, #20]
    if (local_ip == NULL) {
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d102      	bne.n	8010b24 <tcp_output+0xc4>
      return ERR_RTE;
 8010b1e:	f06f 0303 	mvn.w	r3, #3
 8010b22:	e192      	b.n	8010e4a <tcp_output+0x3ea>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b2e:	68db      	ldr	r3, [r3, #12]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7f8 ffc9 	bl	8009aca <lwip_htonl>
 8010b38:	4602      	mov	r2, r0
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b3e:	1ad3      	subs	r3, r2, r3
 8010b40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b42:	8912      	ldrh	r2, [r2, #8]
 8010b44:	4413      	add	r3, r2
 8010b46:	69fa      	ldr	r2, [r7, #28]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d227      	bcs.n	8010b9c <tcp_output+0x13c>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b52:	461a      	mov	r2, r3
 8010b54:	69fb      	ldr	r3, [r7, #28]
 8010b56:	4293      	cmp	r3, r2
 8010b58:	d114      	bne.n	8010b84 <tcp_output+0x124>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d110      	bne.n	8010b84 <tcp_output+0x124>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d10b      	bne.n	8010b84 <tcp_output+0x124>
      pcb->persist_cnt = 0;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2201      	movs	r2, #1
 8010b78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2200      	movs	r2, #0
 8010b80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	8b5b      	ldrh	r3, [r3, #26]
 8010b88:	f003 0302 	and.w	r3, r3, #2
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	f000 8151 	beq.w	8010e34 <tcp_output+0x3d4>
      return tcp_send_empty_ack(pcb);
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f000 fd70 	bl	8011678 <tcp_send_empty_ack>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	e156      	b.n	8010e4a <tcp_output+0x3ea>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (useg != NULL) {
 8010baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f000 8120 	beq.w	8010df2 <tcp_output+0x392>
    for (; useg->next != NULL; useg = useg->next);
 8010bb2:	e002      	b.n	8010bba <tcp_output+0x15a>
 8010bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1f8      	bne.n	8010bb4 <tcp_output+0x154>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010bc2:	e116      	b.n	8010df2 <tcp_output+0x392>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc6:	68db      	ldr	r3, [r3, #12]
 8010bc8:	899b      	ldrh	r3, [r3, #12]
 8010bca:	b29b      	uxth	r3, r3
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7f8 ff67 	bl	8009aa0 <lwip_htons>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	b2db      	uxtb	r3, r3
 8010bd6:	f003 0304 	and.w	r3, r3, #4
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d006      	beq.n	8010bec <tcp_output+0x18c>
 8010bde:	4b45      	ldr	r3, [pc, #276]	; (8010cf4 <tcp_output+0x294>)
 8010be0:	f240 5236 	movw	r2, #1334	; 0x536
 8010be4:	4948      	ldr	r1, [pc, #288]	; (8010d08 <tcp_output+0x2a8>)
 8010be6:	4845      	ldr	r0, [pc, #276]	; (8010cfc <tcp_output+0x29c>)
 8010be8:	f006 faec 	bl	80171c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d01f      	beq.n	8010c34 <tcp_output+0x1d4>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	8b5b      	ldrh	r3, [r3, #26]
 8010bf8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d119      	bne.n	8010c34 <tcp_output+0x1d4>
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d00b      	beq.n	8010c20 <tcp_output+0x1c0>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d110      	bne.n	8010c34 <tcp_output+0x1d4>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c16:	891a      	ldrh	r2, [r3, #8]
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d209      	bcs.n	8010c34 <tcp_output+0x1d4>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d004      	beq.n	8010c34 <tcp_output+0x1d4>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c30:	2b08      	cmp	r3, #8
 8010c32:	d901      	bls.n	8010c38 <tcp_output+0x1d8>
 8010c34:	2301      	movs	r3, #1
 8010c36:	e000      	b.n	8010c3a <tcp_output+0x1da>
 8010c38:	2300      	movs	r3, #0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d106      	bne.n	8010c4c <tcp_output+0x1ec>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	8b5b      	ldrh	r3, [r3, #26]
 8010c42:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	f000 80e8 	beq.w	8010e1c <tcp_output+0x3bc>
    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"TCPWNDSIZE_F", cwnd %"TCPWNDSIZE_F", wnd %"U32_F", effwnd %"U32_F", seq %"U32_F", ack %"U32_F", i %"S16_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd,
                                 lwip_ntohl(seg->tcphdr->seqno) + seg->len -
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
 8010c4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010c4e:	3301      	adds	r3, #1
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	7d1b      	ldrb	r3, [r3, #20]
 8010c58:	2b02      	cmp	r3, #2
 8010c5a:	d00d      	beq.n	8010c78 <tcp_output+0x218>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	899b      	ldrh	r3, [r3, #12]
 8010c62:	b29c      	uxth	r4, r3
 8010c64:	2010      	movs	r0, #16
 8010c66:	f7f8 ff1b 	bl	8009aa0 <lwip_htons>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	4322      	orrs	r2, r4
 8010c74:	b292      	uxth	r2, r2
 8010c76:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010c78:	69ba      	ldr	r2, [r7, #24]
 8010c7a:	6879      	ldr	r1, [r7, #4]
 8010c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c7e:	f000 f909 	bl	8010e94 <tcp_output_segment>
 8010c82:	4603      	mov	r3, r0
 8010c84:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010c86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d009      	beq.n	8010ca2 <tcp_output+0x242>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	8b5b      	ldrh	r3, [r3, #26]
 8010c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c96:	b29a      	uxth	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	835a      	strh	r2, [r3, #26]
      return err;
 8010c9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ca0:	e0d3      	b.n	8010e4a <tcp_output+0x3ea>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca4:	681a      	ldr	r2, [r3, #0]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	7d1b      	ldrb	r3, [r3, #20]
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	d006      	beq.n	8010cc0 <tcp_output+0x260>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	8b5b      	ldrh	r3, [r3, #26]
 8010cb6:	f023 0303 	bic.w	r3, r3, #3
 8010cba:	b29a      	uxth	r2, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7f8 feff 	bl	8009aca <lwip_htonl>
 8010ccc:	4604      	mov	r4, r0
 8010cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd0:	891b      	ldrh	r3, [r3, #8]
 8010cd2:	461d      	mov	r5, r3
 8010cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	899b      	ldrh	r3, [r3, #12]
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7f8 fedf 	bl	8009aa0 <lwip_htons>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	b2db      	uxtb	r3, r3
 8010ce6:	f003 0303 	and.w	r3, r3, #3
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d00e      	beq.n	8010d0c <tcp_output+0x2ac>
 8010cee:	2301      	movs	r3, #1
 8010cf0:	e00d      	b.n	8010d0e <tcp_output+0x2ae>
 8010cf2:	bf00      	nop
 8010cf4:	0801dc2c 	.word	0x0801dc2c
 8010cf8:	0801e170 	.word	0x0801e170
 8010cfc:	0801dc80 	.word	0x0801dc80
 8010d00:	0801e188 	.word	0x0801e188
 8010d04:	2000d64c 	.word	0x2000d64c
 8010d08:	0801e1b0 	.word	0x0801e1b0
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	442b      	add	r3, r5
 8010d10:	4423      	add	r3, r4
 8010d12:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	1ad3      	subs	r3, r2, r3
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	da02      	bge.n	8010d26 <tcp_output+0x2c6>
      pcb->snd_nxt = snd_nxt;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	68fa      	ldr	r2, [r7, #12]
 8010d24:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d28:	891b      	ldrh	r3, [r3, #8]
 8010d2a:	461c      	mov	r4, r3
 8010d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2e:	68db      	ldr	r3, [r3, #12]
 8010d30:	899b      	ldrh	r3, [r3, #12]
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7f8 feb3 	bl	8009aa0 <lwip_htons>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	f003 0303 	and.w	r3, r3, #3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d001      	beq.n	8010d4a <tcp_output+0x2ea>
 8010d46:	2301      	movs	r3, #1
 8010d48:	e000      	b.n	8010d4c <tcp_output+0x2ec>
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	4423      	add	r3, r4
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d049      	beq.n	8010de6 <tcp_output+0x386>
      seg->next = NULL;
 8010d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d54:	2200      	movs	r2, #0
 8010d56:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d105      	bne.n	8010d6c <tcp_output+0x30c>
        pcb->unacked = seg;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d64:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d6a:	e03f      	b.n	8010dec <tcp_output+0x38c>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6e:	68db      	ldr	r3, [r3, #12]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7f8 fea9 	bl	8009aca <lwip_htonl>
 8010d78:	4604      	mov	r4, r0
 8010d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7c:	68db      	ldr	r3, [r3, #12]
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	4618      	mov	r0, r3
 8010d82:	f7f8 fea2 	bl	8009aca <lwip_htonl>
 8010d86:	4603      	mov	r3, r0
 8010d88:	1ae3      	subs	r3, r4, r3
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	da24      	bge.n	8010dd8 <tcp_output+0x378>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	3370      	adds	r3, #112	; 0x70
 8010d92:	623b      	str	r3, [r7, #32]
          while (*cur_seg &&
 8010d94:	e002      	b.n	8010d9c <tcp_output+0x33c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010d96:	6a3b      	ldr	r3, [r7, #32]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	623b      	str	r3, [r7, #32]
          while (*cur_seg &&
 8010d9c:	6a3b      	ldr	r3, [r7, #32]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d011      	beq.n	8010dc8 <tcp_output+0x368>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010da4:	6a3b      	ldr	r3, [r7, #32]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	68db      	ldr	r3, [r3, #12]
 8010daa:	685b      	ldr	r3, [r3, #4]
 8010dac:	4618      	mov	r0, r3
 8010dae:	f7f8 fe8c 	bl	8009aca <lwip_htonl>
 8010db2:	4604      	mov	r4, r0
 8010db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db6:	68db      	ldr	r3, [r3, #12]
 8010db8:	685b      	ldr	r3, [r3, #4]
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7f8 fe85 	bl	8009aca <lwip_htonl>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	dbe6      	blt.n	8010d96 <tcp_output+0x336>
          }
          seg->next = (*cur_seg);
 8010dc8:	6a3b      	ldr	r3, [r7, #32]
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010dd0:	6a3b      	ldr	r3, [r7, #32]
 8010dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dd4:	601a      	str	r2, [r3, #0]
 8010dd6:	e009      	b.n	8010dec <tcp_output+0x38c>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ddc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010de4:	e002      	b.n	8010dec <tcp_output+0x38c>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010de8:	f7fb fe35 	bl	800ca56 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (seg != NULL &&
 8010df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d012      	beq.n	8010e1e <tcp_output+0x3be>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	4618      	mov	r0, r3
 8010e00:	f7f8 fe63 	bl	8009aca <lwip_htonl>
 8010e04:	4602      	mov	r2, r0
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e0e:	8912      	ldrh	r2, [r2, #8]
 8010e10:	4413      	add	r3, r2
  while (seg != NULL &&
 8010e12:	69fa      	ldr	r2, [r7, #28]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	f4bf aed5 	bcs.w	8010bc4 <tcp_output+0x164>
 8010e1a:	e000      	b.n	8010e1e <tcp_output+0x3be>
      break;
 8010e1c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d108      	bne.n	8010e38 <tcp_output+0x3d8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010e2e:	e004      	b.n	8010e3a <tcp_output+0x3da>
    goto output_done;
 8010e30:	bf00      	nop
 8010e32:	e002      	b.n	8010e3a <tcp_output+0x3da>
    goto output_done;
 8010e34:	bf00      	nop
 8010e36:	e000      	b.n	8010e3a <tcp_output+0x3da>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010e38:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	8b5b      	ldrh	r3, [r3, #26]
 8010e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e42:	b29a      	uxth	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010e48:	2300      	movs	r3, #0
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3730      	adds	r7, #48	; 0x30
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bdb0      	pop	{r4, r5, r7, pc}
 8010e52:	bf00      	nop

08010e54 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d106      	bne.n	8010e70 <tcp_output_segment_busy+0x1c>
 8010e62:	4b09      	ldr	r3, [pc, #36]	; (8010e88 <tcp_output_segment_busy+0x34>)
 8010e64:	f240 529a 	movw	r2, #1434	; 0x59a
 8010e68:	4908      	ldr	r1, [pc, #32]	; (8010e8c <tcp_output_segment_busy+0x38>)
 8010e6a:	4809      	ldr	r0, [pc, #36]	; (8010e90 <tcp_output_segment_busy+0x3c>)
 8010e6c:	f006 f9aa 	bl	80171c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	7b9b      	ldrb	r3, [r3, #14]
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d001      	beq.n	8010e7e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e000      	b.n	8010e80 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010e7e:	2300      	movs	r3, #0
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3708      	adds	r7, #8
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	0801dc2c 	.word	0x0801dc2c
 8010e8c:	0801e1c8 	.word	0x0801e1c8
 8010e90:	0801dc80 	.word	0x0801dc80

08010e94 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010e94:	b5b0      	push	{r4, r5, r7, lr}
 8010e96:	b08c      	sub	sp, #48	; 0x30
 8010e98:	af04      	add	r7, sp, #16
 8010e9a:	60f8      	str	r0, [r7, #12]
 8010e9c:	60b9      	str	r1, [r7, #8]
 8010e9e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d106      	bne.n	8010eb4 <tcp_output_segment+0x20>
 8010ea6:	4b63      	ldr	r3, [pc, #396]	; (8011034 <tcp_output_segment+0x1a0>)
 8010ea8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010eac:	4962      	ldr	r1, [pc, #392]	; (8011038 <tcp_output_segment+0x1a4>)
 8010eae:	4863      	ldr	r0, [pc, #396]	; (801103c <tcp_output_segment+0x1a8>)
 8010eb0:	f006 f988 	bl	80171c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d106      	bne.n	8010ec8 <tcp_output_segment+0x34>
 8010eba:	4b5e      	ldr	r3, [pc, #376]	; (8011034 <tcp_output_segment+0x1a0>)
 8010ebc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010ec0:	495f      	ldr	r1, [pc, #380]	; (8011040 <tcp_output_segment+0x1ac>)
 8010ec2:	485e      	ldr	r0, [pc, #376]	; (801103c <tcp_output_segment+0x1a8>)
 8010ec4:	f006 f97e 	bl	80171c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d106      	bne.n	8010edc <tcp_output_segment+0x48>
 8010ece:	4b59      	ldr	r3, [pc, #356]	; (8011034 <tcp_output_segment+0x1a0>)
 8010ed0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010ed4:	495b      	ldr	r1, [pc, #364]	; (8011044 <tcp_output_segment+0x1b0>)
 8010ed6:	4859      	ldr	r0, [pc, #356]	; (801103c <tcp_output_segment+0x1a8>)
 8010ed8:	f006 f974 	bl	80171c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	f7ff ffb9 	bl	8010e54 <tcp_output_segment_busy>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d001      	beq.n	8010eec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	e09f      	b.n	801102c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	68dc      	ldr	r4, [r3, #12]
 8010ef4:	4610      	mov	r0, r2
 8010ef6:	f7f8 fde8 	bl	8009aca <lwip_htonl>
 8010efa:	4603      	mov	r3, r0
 8010efc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010efe:	68bb      	ldr	r3, [r7, #8]
 8010f00:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	68dc      	ldr	r4, [r3, #12]
 8010f06:	4610      	mov	r0, r2
 8010f08:	f7f8 fdca 	bl	8009aa0 <lwip_htons>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f14:	68ba      	ldr	r2, [r7, #8]
 8010f16:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010f18:	441a      	add	r2, r3
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	68db      	ldr	r3, [r3, #12]
 8010f22:	3314      	adds	r3, #20
 8010f24:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	7a9b      	ldrb	r3, [r3, #10]
 8010f2a:	f003 0301 	and.w	r3, r3, #1
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d015      	beq.n	8010f5e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	3304      	adds	r3, #4
 8010f36:	461a      	mov	r2, r3
 8010f38:	6879      	ldr	r1, [r7, #4]
 8010f3a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010f3e:	f7fc f97d 	bl	800d23c <tcp_eff_send_mss_netif>
 8010f42:	4603      	mov	r3, r0
 8010f44:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010f46:	8b7b      	ldrh	r3, [r7, #26]
 8010f48:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7f8 fdbc 	bl	8009aca <lwip_htonl>
 8010f52:	4602      	mov	r2, r0
 8010f54:	69fb      	ldr	r3, [r7, #28]
 8010f56:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	3304      	adds	r3, #4
 8010f5c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	da02      	bge.n	8010f6e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d10c      	bne.n	8010f90 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010f76:	4b34      	ldr	r3, [pc, #208]	; (8011048 <tcp_output_segment+0x1b4>)
 8010f78:	681a      	ldr	r2, [r3, #0]
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	68db      	ldr	r3, [r3, #12]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7f8 fda0 	bl	8009aca <lwip_htonl>
 8010f8a:	4602      	mov	r2, r0
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	68da      	ldr	r2, [r3, #12]
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	1ad3      	subs	r3, r2, r3
 8010f9c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	685b      	ldr	r3, [r3, #4]
 8010fa2:	8959      	ldrh	r1, [r3, #10]
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	685b      	ldr	r3, [r3, #4]
 8010fa8:	8b3a      	ldrh	r2, [r7, #24]
 8010faa:	1a8a      	subs	r2, r1, r2
 8010fac:	b292      	uxth	r2, r2
 8010fae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	685b      	ldr	r3, [r3, #4]
 8010fb4:	8919      	ldrh	r1, [r3, #8]
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	8b3a      	ldrh	r2, [r7, #24]
 8010fbc:	1a8a      	subs	r2, r1, r2
 8010fbe:	b292      	uxth	r2, r2
 8010fc0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	68fa      	ldr	r2, [r7, #12]
 8010fc8:	68d2      	ldr	r2, [r2, #12]
 8010fca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	68db      	ldr	r3, [r3, #12]
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	741a      	strb	r2, [r3, #16]
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	f103 0214 	add.w	r2, r3, #20
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	7a9b      	ldrb	r3, [r3, #10]
 8010fe4:	009b      	lsls	r3, r3, #2
 8010fe6:	f003 0304 	and.w	r3, r3, #4
 8010fea:	4413      	add	r3, r2
 8010fec:	69fa      	ldr	r2, [r7, #28]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d006      	beq.n	8011000 <tcp_output_segment+0x16c>
 8010ff2:	4b10      	ldr	r3, [pc, #64]	; (8011034 <tcp_output_segment+0x1a0>)
 8010ff4:	f240 621c 	movw	r2, #1564	; 0x61c
 8010ff8:	4914      	ldr	r1, [pc, #80]	; (801104c <tcp_output_segment+0x1b8>)
 8010ffa:	4810      	ldr	r0, [pc, #64]	; (801103c <tcp_output_segment+0x1a8>)
 8010ffc:	f006 f8e2 	bl	80171c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	6858      	ldr	r0, [r3, #4]
 8011004:	68b9      	ldr	r1, [r7, #8]
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	1d1c      	adds	r4, r3, #4
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	7add      	ldrb	r5, [r3, #11]
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	7a9b      	ldrb	r3, [r3, #10]
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	9202      	str	r2, [sp, #8]
 8011016:	2206      	movs	r2, #6
 8011018:	9201      	str	r2, [sp, #4]
 801101a:	9300      	str	r3, [sp, #0]
 801101c:	462b      	mov	r3, r5
 801101e:	4622      	mov	r2, r4
 8011020:	f004 fbc4 	bl	80157ac <ip4_output_if>
 8011024:	4603      	mov	r3, r0
 8011026:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011028:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801102c:	4618      	mov	r0, r3
 801102e:	3720      	adds	r7, #32
 8011030:	46bd      	mov	sp, r7
 8011032:	bdb0      	pop	{r4, r5, r7, pc}
 8011034:	0801dc2c 	.word	0x0801dc2c
 8011038:	0801e1f0 	.word	0x0801e1f0
 801103c:	0801dc80 	.word	0x0801dc80
 8011040:	0801e210 	.word	0x0801e210
 8011044:	0801e230 	.word	0x0801e230
 8011048:	2000d63c 	.word	0x2000d63c
 801104c:	0801e254 	.word	0x0801e254

08011050 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011050:	b5b0      	push	{r4, r5, r7, lr}
 8011052:	b084      	sub	sp, #16
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d106      	bne.n	801106c <tcp_rexmit_rto_prepare+0x1c>
 801105e:	4b31      	ldr	r3, [pc, #196]	; (8011124 <tcp_rexmit_rto_prepare+0xd4>)
 8011060:	f240 6263 	movw	r2, #1635	; 0x663
 8011064:	4930      	ldr	r1, [pc, #192]	; (8011128 <tcp_rexmit_rto_prepare+0xd8>)
 8011066:	4831      	ldr	r0, [pc, #196]	; (801112c <tcp_rexmit_rto_prepare+0xdc>)
 8011068:	f006 f8ac 	bl	80171c4 <iprintf>

  if (pcb->unacked == NULL) {
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011070:	2b00      	cmp	r3, #0
 8011072:	d102      	bne.n	801107a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011074:	f06f 0305 	mvn.w	r3, #5
 8011078:	e050      	b.n	801111c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801107e:	60fb      	str	r3, [r7, #12]
 8011080:	e00b      	b.n	801109a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	f7ff fee6 	bl	8010e54 <tcp_output_segment_busy>
 8011088:	4603      	mov	r3, r0
 801108a:	2b00      	cmp	r3, #0
 801108c:	d002      	beq.n	8011094 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801108e:	f06f 0305 	mvn.w	r3, #5
 8011092:	e043      	b.n	801111c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	60fb      	str	r3, [r7, #12]
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d1ef      	bne.n	8011082 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80110a2:	68f8      	ldr	r0, [r7, #12]
 80110a4:	f7ff fed6 	bl	8010e54 <tcp_output_segment_busy>
 80110a8:	4603      	mov	r3, r0
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d002      	beq.n	80110b4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80110ae:	f06f 0305 	mvn.w	r3, #5
 80110b2:	e033      	b.n	801111c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2200      	movs	r2, #0
 80110c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	8b5b      	ldrh	r3, [r3, #26]
 80110ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	4618      	mov	r0, r3
 80110e0:	f7f8 fcf3 	bl	8009aca <lwip_htonl>
 80110e4:	4604      	mov	r4, r0
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	891b      	ldrh	r3, [r3, #8]
 80110ea:	461d      	mov	r5, r3
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	68db      	ldr	r3, [r3, #12]
 80110f0:	899b      	ldrh	r3, [r3, #12]
 80110f2:	b29b      	uxth	r3, r3
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7f8 fcd3 	bl	8009aa0 <lwip_htons>
 80110fa:	4603      	mov	r3, r0
 80110fc:	b2db      	uxtb	r3, r3
 80110fe:	f003 0303 	and.w	r3, r3, #3
 8011102:	2b00      	cmp	r3, #0
 8011104:	d001      	beq.n	801110a <tcp_rexmit_rto_prepare+0xba>
 8011106:	2301      	movs	r3, #1
 8011108:	e000      	b.n	801110c <tcp_rexmit_rto_prepare+0xbc>
 801110a:	2300      	movs	r3, #0
 801110c:	442b      	add	r3, r5
 801110e:	18e2      	adds	r2, r4, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2200      	movs	r2, #0
 8011118:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801111a:	2300      	movs	r3, #0
}
 801111c:	4618      	mov	r0, r3
 801111e:	3710      	adds	r7, #16
 8011120:	46bd      	mov	sp, r7
 8011122:	bdb0      	pop	{r4, r5, r7, pc}
 8011124:	0801dc2c 	.word	0x0801dc2c
 8011128:	0801e268 	.word	0x0801e268
 801112c:	0801dc80 	.word	0x0801dc80

08011130 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d106      	bne.n	801114c <tcp_rexmit_rto_commit+0x1c>
 801113e:	4b0d      	ldr	r3, [pc, #52]	; (8011174 <tcp_rexmit_rto_commit+0x44>)
 8011140:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011144:	490c      	ldr	r1, [pc, #48]	; (8011178 <tcp_rexmit_rto_commit+0x48>)
 8011146:	480d      	ldr	r0, [pc, #52]	; (801117c <tcp_rexmit_rto_commit+0x4c>)
 8011148:	f006 f83c 	bl	80171c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011152:	2bff      	cmp	r3, #255	; 0xff
 8011154:	d007      	beq.n	8011166 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801115c:	3301      	adds	r3, #1
 801115e:	b2da      	uxtb	r2, r3
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f7ff fc7a 	bl	8010a60 <tcp_output>
}
 801116c:	bf00      	nop
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	0801dc2c 	.word	0x0801dc2c
 8011178:	0801e28c 	.word	0x0801e28c
 801117c:	0801dc80 	.word	0x0801dc80

08011180 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b082      	sub	sp, #8
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d106      	bne.n	801119c <tcp_rexmit_rto+0x1c>
 801118e:	4b0a      	ldr	r3, [pc, #40]	; (80111b8 <tcp_rexmit_rto+0x38>)
 8011190:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011194:	4909      	ldr	r1, [pc, #36]	; (80111bc <tcp_rexmit_rto+0x3c>)
 8011196:	480a      	ldr	r0, [pc, #40]	; (80111c0 <tcp_rexmit_rto+0x40>)
 8011198:	f006 f814 	bl	80171c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f7ff ff57 	bl	8011050 <tcp_rexmit_rto_prepare>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d102      	bne.n	80111ae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f7ff ffc1 	bl	8011130 <tcp_rexmit_rto_commit>
  }
}
 80111ae:	bf00      	nop
 80111b0:	3708      	adds	r7, #8
 80111b2:	46bd      	mov	sp, r7
 80111b4:	bd80      	pop	{r7, pc}
 80111b6:	bf00      	nop
 80111b8:	0801dc2c 	.word	0x0801dc2c
 80111bc:	0801e2b0 	.word	0x0801e2b0
 80111c0:	0801dc80 	.word	0x0801dc80

080111c4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80111c4:	b590      	push	{r4, r7, lr}
 80111c6:	b085      	sub	sp, #20
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d106      	bne.n	80111e0 <tcp_rexmit+0x1c>
 80111d2:	4b2f      	ldr	r3, [pc, #188]	; (8011290 <tcp_rexmit+0xcc>)
 80111d4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80111d8:	492e      	ldr	r1, [pc, #184]	; (8011294 <tcp_rexmit+0xd0>)
 80111da:	482f      	ldr	r0, [pc, #188]	; (8011298 <tcp_rexmit+0xd4>)
 80111dc:	f005 fff2 	bl	80171c4 <iprintf>

  if (pcb->unacked == NULL) {
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d102      	bne.n	80111ee <tcp_rexmit+0x2a>
    return ERR_VAL;
 80111e8:	f06f 0305 	mvn.w	r3, #5
 80111ec:	e04c      	b.n	8011288 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111f2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80111f4:	68b8      	ldr	r0, [r7, #8]
 80111f6:	f7ff fe2d 	bl	8010e54 <tcp_output_segment_busy>
 80111fa:	4603      	mov	r3, r0
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d002      	beq.n	8011206 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011200:	f06f 0305 	mvn.w	r3, #5
 8011204:	e040      	b.n	8011288 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	681a      	ldr	r2, [r3, #0]
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	336c      	adds	r3, #108	; 0x6c
 8011212:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011214:	e002      	b.n	801121c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d011      	beq.n	8011248 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	4618      	mov	r0, r3
 801122e:	f7f8 fc4c 	bl	8009aca <lwip_htonl>
 8011232:	4604      	mov	r4, r0
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	4618      	mov	r0, r3
 801123c:	f7f8 fc45 	bl	8009aca <lwip_htonl>
 8011240:	4603      	mov	r3, r0
 8011242:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011244:	2b00      	cmp	r3, #0
 8011246:	dbe6      	blt.n	8011216 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	681a      	ldr	r2, [r3, #0]
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	68ba      	ldr	r2, [r7, #8]
 8011254:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d103      	bne.n	8011266 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	2200      	movs	r2, #0
 8011262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801126c:	2bff      	cmp	r3, #255	; 0xff
 801126e:	d007      	beq.n	8011280 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011276:	3301      	adds	r3, #1
 8011278:	b2da      	uxtb	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2200      	movs	r2, #0
 8011284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011286:	2300      	movs	r3, #0
}
 8011288:	4618      	mov	r0, r3
 801128a:	3714      	adds	r7, #20
 801128c:	46bd      	mov	sp, r7
 801128e:	bd90      	pop	{r4, r7, pc}
 8011290:	0801dc2c 	.word	0x0801dc2c
 8011294:	0801e2cc 	.word	0x0801e2cc
 8011298:	0801dc80 	.word	0x0801dc80

0801129c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d106      	bne.n	80112b8 <tcp_rexmit_fast+0x1c>
 80112aa:	4b2a      	ldr	r3, [pc, #168]	; (8011354 <tcp_rexmit_fast+0xb8>)
 80112ac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80112b0:	4929      	ldr	r1, [pc, #164]	; (8011358 <tcp_rexmit_fast+0xbc>)
 80112b2:	482a      	ldr	r0, [pc, #168]	; (801135c <tcp_rexmit_fast+0xc0>)
 80112b4:	f005 ff86 	bl	80171c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d044      	beq.n	801134a <tcp_rexmit_fast+0xae>
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	8b5b      	ldrh	r3, [r3, #26]
 80112c4:	f003 0304 	and.w	r3, r3, #4
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d13e      	bne.n	801134a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7ff ff79 	bl	80111c4 <tcp_rexmit>
 80112d2:	4603      	mov	r3, r0
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d138      	bne.n	801134a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80112e4:	4293      	cmp	r3, r2
 80112e6:	bf28      	it	cs
 80112e8:	4613      	movcs	r3, r2
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	0fda      	lsrs	r2, r3, #31
 80112ee:	4413      	add	r3, r2
 80112f0:	105b      	asrs	r3, r3, #1
 80112f2:	b29a      	uxth	r2, r3
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011300:	461a      	mov	r2, r3
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011306:	005b      	lsls	r3, r3, #1
 8011308:	429a      	cmp	r2, r3
 801130a:	d206      	bcs.n	801131a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011310:	005b      	lsls	r3, r3, #1
 8011312:	b29a      	uxth	r2, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011324:	4619      	mov	r1, r3
 8011326:	0049      	lsls	r1, r1, #1
 8011328:	440b      	add	r3, r1
 801132a:	b29b      	uxth	r3, r3
 801132c:	4413      	add	r3, r2
 801132e:	b29a      	uxth	r2, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	8b5b      	ldrh	r3, [r3, #26]
 801133a:	f043 0304 	orr.w	r3, r3, #4
 801133e:	b29a      	uxth	r2, r3
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2200      	movs	r2, #0
 8011348:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801134a:	bf00      	nop
 801134c:	3708      	adds	r7, #8
 801134e:	46bd      	mov	sp, r7
 8011350:	bd80      	pop	{r7, pc}
 8011352:	bf00      	nop
 8011354:	0801dc2c 	.word	0x0801dc2c
 8011358:	0801e2e4 	.word	0x0801e2e4
 801135c:	0801dc80 	.word	0x0801dc80

08011360 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b086      	sub	sp, #24
 8011364:	af00      	add	r7, sp, #0
 8011366:	60f8      	str	r0, [r7, #12]
 8011368:	607b      	str	r3, [r7, #4]
 801136a:	460b      	mov	r3, r1
 801136c:	817b      	strh	r3, [r7, #10]
 801136e:	4613      	mov	r3, r2
 8011370:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011372:	897a      	ldrh	r2, [r7, #10]
 8011374:	893b      	ldrh	r3, [r7, #8]
 8011376:	4413      	add	r3, r2
 8011378:	b29b      	uxth	r3, r3
 801137a:	3314      	adds	r3, #20
 801137c:	b29b      	uxth	r3, r3
 801137e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011382:	4619      	mov	r1, r3
 8011384:	2022      	movs	r0, #34	; 0x22
 8011386:	f7f9 fc41 	bl	800ac0c <pbuf_alloc>
 801138a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d04d      	beq.n	801142e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011392:	897b      	ldrh	r3, [r7, #10]
 8011394:	3313      	adds	r3, #19
 8011396:	697a      	ldr	r2, [r7, #20]
 8011398:	8952      	ldrh	r2, [r2, #10]
 801139a:	4293      	cmp	r3, r2
 801139c:	db06      	blt.n	80113ac <tcp_output_alloc_header_common+0x4c>
 801139e:	4b26      	ldr	r3, [pc, #152]	; (8011438 <tcp_output_alloc_header_common+0xd8>)
 80113a0:	f240 7223 	movw	r2, #1827	; 0x723
 80113a4:	4925      	ldr	r1, [pc, #148]	; (801143c <tcp_output_alloc_header_common+0xdc>)
 80113a6:	4826      	ldr	r0, [pc, #152]	; (8011440 <tcp_output_alloc_header_common+0xe0>)
 80113a8:	f005 ff0c 	bl	80171c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80113ac:	697b      	ldr	r3, [r7, #20]
 80113ae:	685b      	ldr	r3, [r3, #4]
 80113b0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80113b2:	8c3b      	ldrh	r3, [r7, #32]
 80113b4:	4618      	mov	r0, r3
 80113b6:	f7f8 fb73 	bl	8009aa0 <lwip_htons>
 80113ba:	4603      	mov	r3, r0
 80113bc:	461a      	mov	r2, r3
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80113c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7f8 fb6b 	bl	8009aa0 <lwip_htons>
 80113ca:	4603      	mov	r3, r0
 80113cc:	461a      	mov	r2, r3
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80113d8:	68f8      	ldr	r0, [r7, #12]
 80113da:	f7f8 fb76 	bl	8009aca <lwip_htonl>
 80113de:	4602      	mov	r2, r0
 80113e0:	693b      	ldr	r3, [r7, #16]
 80113e2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80113e4:	897b      	ldrh	r3, [r7, #10]
 80113e6:	089b      	lsrs	r3, r3, #2
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	3305      	adds	r3, #5
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	031b      	lsls	r3, r3, #12
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	4313      	orrs	r3, r2
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7f8 fb4f 	bl	8009aa0 <lwip_htons>
 8011402:	4603      	mov	r3, r0
 8011404:	461a      	mov	r2, r3
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801140a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801140c:	4618      	mov	r0, r3
 801140e:	f7f8 fb47 	bl	8009aa0 <lwip_htons>
 8011412:	4603      	mov	r3, r0
 8011414:	461a      	mov	r2, r3
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	2200      	movs	r2, #0
 801141e:	741a      	strb	r2, [r3, #16]
 8011420:	2200      	movs	r2, #0
 8011422:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011424:	693b      	ldr	r3, [r7, #16]
 8011426:	2200      	movs	r2, #0
 8011428:	749a      	strb	r2, [r3, #18]
 801142a:	2200      	movs	r2, #0
 801142c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801142e:	697b      	ldr	r3, [r7, #20]
}
 8011430:	4618      	mov	r0, r3
 8011432:	3718      	adds	r7, #24
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}
 8011438:	0801dc2c 	.word	0x0801dc2c
 801143c:	0801e304 	.word	0x0801e304
 8011440:	0801dc80 	.word	0x0801dc80

08011444 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011444:	b5b0      	push	{r4, r5, r7, lr}
 8011446:	b08a      	sub	sp, #40	; 0x28
 8011448:	af04      	add	r7, sp, #16
 801144a:	60f8      	str	r0, [r7, #12]
 801144c:	607b      	str	r3, [r7, #4]
 801144e:	460b      	mov	r3, r1
 8011450:	817b      	strh	r3, [r7, #10]
 8011452:	4613      	mov	r3, r2
 8011454:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d106      	bne.n	801146a <tcp_output_alloc_header+0x26>
 801145c:	4b15      	ldr	r3, [pc, #84]	; (80114b4 <tcp_output_alloc_header+0x70>)
 801145e:	f240 7242 	movw	r2, #1858	; 0x742
 8011462:	4915      	ldr	r1, [pc, #84]	; (80114b8 <tcp_output_alloc_header+0x74>)
 8011464:	4815      	ldr	r0, [pc, #84]	; (80114bc <tcp_output_alloc_header+0x78>)
 8011466:	f005 fead 	bl	80171c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	8adb      	ldrh	r3, [r3, #22]
 8011472:	68fa      	ldr	r2, [r7, #12]
 8011474:	8b12      	ldrh	r2, [r2, #24]
 8011476:	68f9      	ldr	r1, [r7, #12]
 8011478:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801147a:	893d      	ldrh	r5, [r7, #8]
 801147c:	897c      	ldrh	r4, [r7, #10]
 801147e:	9103      	str	r1, [sp, #12]
 8011480:	2110      	movs	r1, #16
 8011482:	9102      	str	r1, [sp, #8]
 8011484:	9201      	str	r2, [sp, #4]
 8011486:	9300      	str	r3, [sp, #0]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	462a      	mov	r2, r5
 801148c:	4621      	mov	r1, r4
 801148e:	f7ff ff67 	bl	8011360 <tcp_output_alloc_header_common>
 8011492:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d006      	beq.n	80114a8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801149e:	68fa      	ldr	r2, [r7, #12]
 80114a0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80114a2:	441a      	add	r2, r3
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80114a8:	697b      	ldr	r3, [r7, #20]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3718      	adds	r7, #24
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bdb0      	pop	{r4, r5, r7, pc}
 80114b2:	bf00      	nop
 80114b4:	0801dc2c 	.word	0x0801dc2c
 80114b8:	0801e334 	.word	0x0801e334
 80114bc:	0801dc80 	.word	0x0801dc80

080114c0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b088      	sub	sp, #32
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60f8      	str	r0, [r7, #12]
 80114c8:	60b9      	str	r1, [r7, #8]
 80114ca:	4611      	mov	r1, r2
 80114cc:	461a      	mov	r2, r3
 80114ce:	460b      	mov	r3, r1
 80114d0:	71fb      	strb	r3, [r7, #7]
 80114d2:	4613      	mov	r3, r2
 80114d4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80114d6:	2300      	movs	r3, #0
 80114d8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d106      	bne.n	80114ee <tcp_output_fill_options+0x2e>
 80114e0:	4b13      	ldr	r3, [pc, #76]	; (8011530 <tcp_output_fill_options+0x70>)
 80114e2:	f240 7256 	movw	r2, #1878	; 0x756
 80114e6:	4913      	ldr	r1, [pc, #76]	; (8011534 <tcp_output_fill_options+0x74>)
 80114e8:	4813      	ldr	r0, [pc, #76]	; (8011538 <tcp_output_fill_options+0x78>)
 80114ea:	f005 fe6b 	bl	80171c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	3314      	adds	r3, #20
 80114f8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	f103 0214 	add.w	r2, r3, #20
 8011500:	8bfb      	ldrh	r3, [r7, #30]
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	4619      	mov	r1, r3
 8011506:	79fb      	ldrb	r3, [r7, #7]
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	f003 0304 	and.w	r3, r3, #4
 801150e:	440b      	add	r3, r1
 8011510:	4413      	add	r3, r2
 8011512:	697a      	ldr	r2, [r7, #20]
 8011514:	429a      	cmp	r2, r3
 8011516:	d006      	beq.n	8011526 <tcp_output_fill_options+0x66>
 8011518:	4b05      	ldr	r3, [pc, #20]	; (8011530 <tcp_output_fill_options+0x70>)
 801151a:	f240 7275 	movw	r2, #1909	; 0x775
 801151e:	4907      	ldr	r1, [pc, #28]	; (801153c <tcp_output_fill_options+0x7c>)
 8011520:	4805      	ldr	r0, [pc, #20]	; (8011538 <tcp_output_fill_options+0x78>)
 8011522:	f005 fe4f 	bl	80171c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011526:	bf00      	nop
 8011528:	3720      	adds	r7, #32
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	0801dc2c 	.word	0x0801dc2c
 8011534:	0801e35c 	.word	0x0801e35c
 8011538:	0801dc80 	.word	0x0801dc80
 801153c:	0801e254 	.word	0x0801e254

08011540 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b08a      	sub	sp, #40	; 0x28
 8011544:	af04      	add	r7, sp, #16
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
 801154c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d106      	bne.n	8011562 <tcp_output_control_segment+0x22>
 8011554:	4b1c      	ldr	r3, [pc, #112]	; (80115c8 <tcp_output_control_segment+0x88>)
 8011556:	f240 7287 	movw	r2, #1927	; 0x787
 801155a:	491c      	ldr	r1, [pc, #112]	; (80115cc <tcp_output_control_segment+0x8c>)
 801155c:	481c      	ldr	r0, [pc, #112]	; (80115d0 <tcp_output_control_segment+0x90>)
 801155e:	f005 fe31 	bl	80171c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011562:	683a      	ldr	r2, [r7, #0]
 8011564:	6879      	ldr	r1, [r7, #4]
 8011566:	68f8      	ldr	r0, [r7, #12]
 8011568:	f7fe fae2 	bl	800fb30 <tcp_route>
 801156c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d102      	bne.n	801157a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011574:	23fc      	movs	r3, #252	; 0xfc
 8011576:	75fb      	strb	r3, [r7, #23]
 8011578:	e01c      	b.n	80115b4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d006      	beq.n	801158e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	7adb      	ldrb	r3, [r3, #11]
 8011584:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	7a9b      	ldrb	r3, [r3, #10]
 801158a:	757b      	strb	r3, [r7, #21]
 801158c:	e003      	b.n	8011596 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801158e:	23ff      	movs	r3, #255	; 0xff
 8011590:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011592:	2300      	movs	r3, #0
 8011594:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011596:	7dba      	ldrb	r2, [r7, #22]
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	9302      	str	r3, [sp, #8]
 801159c:	2306      	movs	r3, #6
 801159e:	9301      	str	r3, [sp, #4]
 80115a0:	7d7b      	ldrb	r3, [r7, #21]
 80115a2:	9300      	str	r3, [sp, #0]
 80115a4:	4613      	mov	r3, r2
 80115a6:	683a      	ldr	r2, [r7, #0]
 80115a8:	6879      	ldr	r1, [r7, #4]
 80115aa:	68b8      	ldr	r0, [r7, #8]
 80115ac:	f004 f8fe 	bl	80157ac <ip4_output_if>
 80115b0:	4603      	mov	r3, r0
 80115b2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80115b4:	68b8      	ldr	r0, [r7, #8]
 80115b6:	f7f9 fe0d 	bl	800b1d4 <pbuf_free>
  return err;
 80115ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3718      	adds	r7, #24
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
 80115c6:	bf00      	nop
 80115c8:	0801dc2c 	.word	0x0801dc2c
 80115cc:	0801e384 	.word	0x0801e384
 80115d0:	0801dc80 	.word	0x0801dc80

080115d4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80115d4:	b590      	push	{r4, r7, lr}
 80115d6:	b08b      	sub	sp, #44	; 0x2c
 80115d8:	af04      	add	r7, sp, #16
 80115da:	60f8      	str	r0, [r7, #12]
 80115dc:	60b9      	str	r1, [r7, #8]
 80115de:	607a      	str	r2, [r7, #4]
 80115e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d106      	bne.n	80115f6 <tcp_rst+0x22>
 80115e8:	4b1f      	ldr	r3, [pc, #124]	; (8011668 <tcp_rst+0x94>)
 80115ea:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80115ee:	491f      	ldr	r1, [pc, #124]	; (801166c <tcp_rst+0x98>)
 80115f0:	481f      	ldr	r0, [pc, #124]	; (8011670 <tcp_rst+0x9c>)
 80115f2:	f005 fde7 	bl	80171c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80115f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d106      	bne.n	801160a <tcp_rst+0x36>
 80115fc:	4b1a      	ldr	r3, [pc, #104]	; (8011668 <tcp_rst+0x94>)
 80115fe:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011602:	491c      	ldr	r1, [pc, #112]	; (8011674 <tcp_rst+0xa0>)
 8011604:	481a      	ldr	r0, [pc, #104]	; (8011670 <tcp_rst+0x9c>)
 8011606:	f005 fddd 	bl	80171c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801160a:	2300      	movs	r3, #0
 801160c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801160e:	f246 0308 	movw	r3, #24584	; 0x6008
 8011612:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011614:	7dfb      	ldrb	r3, [r7, #23]
 8011616:	b29c      	uxth	r4, r3
 8011618:	68b8      	ldr	r0, [r7, #8]
 801161a:	f7f8 fa56 	bl	8009aca <lwip_htonl>
 801161e:	4602      	mov	r2, r0
 8011620:	8abb      	ldrh	r3, [r7, #20]
 8011622:	9303      	str	r3, [sp, #12]
 8011624:	2314      	movs	r3, #20
 8011626:	9302      	str	r3, [sp, #8]
 8011628:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801162a:	9301      	str	r3, [sp, #4]
 801162c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801162e:	9300      	str	r3, [sp, #0]
 8011630:	4613      	mov	r3, r2
 8011632:	2200      	movs	r2, #0
 8011634:	4621      	mov	r1, r4
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7ff fe92 	bl	8011360 <tcp_output_alloc_header_common>
 801163c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d00c      	beq.n	801165e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011644:	7dfb      	ldrb	r3, [r7, #23]
 8011646:	2200      	movs	r2, #0
 8011648:	6939      	ldr	r1, [r7, #16]
 801164a:	68f8      	ldr	r0, [r7, #12]
 801164c:	f7ff ff38 	bl	80114c0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011652:	683a      	ldr	r2, [r7, #0]
 8011654:	6939      	ldr	r1, [r7, #16]
 8011656:	68f8      	ldr	r0, [r7, #12]
 8011658:	f7ff ff72 	bl	8011540 <tcp_output_control_segment>
 801165c:	e000      	b.n	8011660 <tcp_rst+0x8c>
    return;
 801165e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011660:	371c      	adds	r7, #28
 8011662:	46bd      	mov	sp, r7
 8011664:	bd90      	pop	{r4, r7, pc}
 8011666:	bf00      	nop
 8011668:	0801dc2c 	.word	0x0801dc2c
 801166c:	0801e3b0 	.word	0x0801e3b0
 8011670:	0801dc80 	.word	0x0801dc80
 8011674:	0801e3cc 	.word	0x0801e3cc

08011678 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011678:	b590      	push	{r4, r7, lr}
 801167a:	b087      	sub	sp, #28
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011680:	2300      	movs	r3, #0
 8011682:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011684:	2300      	movs	r3, #0
 8011686:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d106      	bne.n	801169c <tcp_send_empty_ack+0x24>
 801168e:	4b28      	ldr	r3, [pc, #160]	; (8011730 <tcp_send_empty_ack+0xb8>)
 8011690:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011694:	4927      	ldr	r1, [pc, #156]	; (8011734 <tcp_send_empty_ack+0xbc>)
 8011696:	4828      	ldr	r0, [pc, #160]	; (8011738 <tcp_send_empty_ack+0xc0>)
 8011698:	f005 fd94 	bl	80171c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801169c:	7dfb      	ldrb	r3, [r7, #23]
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	b2db      	uxtb	r3, r3
 80116a2:	f003 0304 	and.w	r3, r3, #4
 80116a6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80116a8:	7d7b      	ldrb	r3, [r7, #21]
 80116aa:	b29c      	uxth	r4, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7f8 fa0a 	bl	8009aca <lwip_htonl>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2200      	movs	r2, #0
 80116ba:	4621      	mov	r1, r4
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	f7ff fec1 	bl	8011444 <tcp_output_alloc_header>
 80116c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d109      	bne.n	80116de <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	8b5b      	ldrh	r3, [r3, #26]
 80116ce:	f043 0303 	orr.w	r3, r3, #3
 80116d2:	b29a      	uxth	r2, r3
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80116d8:	f06f 0301 	mvn.w	r3, #1
 80116dc:	e023      	b.n	8011726 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80116de:	7dbb      	ldrb	r3, [r7, #22]
 80116e0:	7dfa      	ldrb	r2, [r7, #23]
 80116e2:	6939      	ldr	r1, [r7, #16]
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f7ff feeb 	bl	80114c0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80116ea:	687a      	ldr	r2, [r7, #4]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	3304      	adds	r3, #4
 80116f0:	6939      	ldr	r1, [r7, #16]
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7ff ff24 	bl	8011540 <tcp_output_control_segment>
 80116f8:	4603      	mov	r3, r0
 80116fa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80116fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d007      	beq.n	8011714 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	8b5b      	ldrh	r3, [r3, #26]
 8011708:	f043 0303 	orr.w	r3, r3, #3
 801170c:	b29a      	uxth	r2, r3
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	835a      	strh	r2, [r3, #26]
 8011712:	e006      	b.n	8011722 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	8b5b      	ldrh	r3, [r3, #26]
 8011718:	f023 0303 	bic.w	r3, r3, #3
 801171c:	b29a      	uxth	r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011722:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011726:	4618      	mov	r0, r3
 8011728:	371c      	adds	r7, #28
 801172a:	46bd      	mov	sp, r7
 801172c:	bd90      	pop	{r4, r7, pc}
 801172e:	bf00      	nop
 8011730:	0801dc2c 	.word	0x0801dc2c
 8011734:	0801e3e8 	.word	0x0801e3e8
 8011738:	0801dc80 	.word	0x0801dc80

0801173c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801173c:	b590      	push	{r4, r7, lr}
 801173e:	b087      	sub	sp, #28
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011744:	2300      	movs	r3, #0
 8011746:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d106      	bne.n	801175c <tcp_keepalive+0x20>
 801174e:	4b18      	ldr	r3, [pc, #96]	; (80117b0 <tcp_keepalive+0x74>)
 8011750:	f640 0224 	movw	r2, #2084	; 0x824
 8011754:	4917      	ldr	r1, [pc, #92]	; (80117b4 <tcp_keepalive+0x78>)
 8011756:	4818      	ldr	r0, [pc, #96]	; (80117b8 <tcp_keepalive+0x7c>)
 8011758:	f005 fd34 	bl	80171c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801175c:	7dfb      	ldrb	r3, [r7, #23]
 801175e:	b29c      	uxth	r4, r3
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011764:	3b01      	subs	r3, #1
 8011766:	4618      	mov	r0, r3
 8011768:	f7f8 f9af 	bl	8009aca <lwip_htonl>
 801176c:	4603      	mov	r3, r0
 801176e:	2200      	movs	r2, #0
 8011770:	4621      	mov	r1, r4
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f7ff fe66 	bl	8011444 <tcp_output_alloc_header>
 8011778:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d102      	bne.n	8011786 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011784:	e010      	b.n	80117a8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011786:	7dfb      	ldrb	r3, [r7, #23]
 8011788:	2200      	movs	r2, #0
 801178a:	6939      	ldr	r1, [r7, #16]
 801178c:	6878      	ldr	r0, [r7, #4]
 801178e:	f7ff fe97 	bl	80114c0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011792:	687a      	ldr	r2, [r7, #4]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	3304      	adds	r3, #4
 8011798:	6939      	ldr	r1, [r7, #16]
 801179a:	6878      	ldr	r0, [r7, #4]
 801179c:	f7ff fed0 	bl	8011540 <tcp_output_control_segment>
 80117a0:	4603      	mov	r3, r0
 80117a2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80117a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80117a8:	4618      	mov	r0, r3
 80117aa:	371c      	adds	r7, #28
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd90      	pop	{r4, r7, pc}
 80117b0:	0801dc2c 	.word	0x0801dc2c
 80117b4:	0801e408 	.word	0x0801e408
 80117b8:	0801dc80 	.word	0x0801dc80

080117bc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80117bc:	b590      	push	{r4, r7, lr}
 80117be:	b08b      	sub	sp, #44	; 0x2c
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80117c4:	2300      	movs	r3, #0
 80117c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d106      	bne.n	80117de <tcp_zero_window_probe+0x22>
 80117d0:	4b4c      	ldr	r3, [pc, #304]	; (8011904 <tcp_zero_window_probe+0x148>)
 80117d2:	f640 024f 	movw	r2, #2127	; 0x84f
 80117d6:	494c      	ldr	r1, [pc, #304]	; (8011908 <tcp_zero_window_probe+0x14c>)
 80117d8:	484c      	ldr	r0, [pc, #304]	; (801190c <tcp_zero_window_probe+0x150>)
 80117da:	f005 fcf3 	bl	80171c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80117e4:	6a3b      	ldr	r3, [r7, #32]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d101      	bne.n	80117ee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80117ea:	2300      	movs	r3, #0
 80117ec:	e086      	b.n	80118fc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80117f4:	2bff      	cmp	r3, #255	; 0xff
 80117f6:	d007      	beq.n	8011808 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80117fe:	3301      	adds	r3, #1
 8011800:	b2da      	uxtb	r2, r3
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011808:	6a3b      	ldr	r3, [r7, #32]
 801180a:	68db      	ldr	r3, [r3, #12]
 801180c:	899b      	ldrh	r3, [r3, #12]
 801180e:	b29b      	uxth	r3, r3
 8011810:	4618      	mov	r0, r3
 8011812:	f7f8 f945 	bl	8009aa0 <lwip_htons>
 8011816:	4603      	mov	r3, r0
 8011818:	b2db      	uxtb	r3, r3
 801181a:	f003 0301 	and.w	r3, r3, #1
 801181e:	2b00      	cmp	r3, #0
 8011820:	d005      	beq.n	801182e <tcp_zero_window_probe+0x72>
 8011822:	6a3b      	ldr	r3, [r7, #32]
 8011824:	891b      	ldrh	r3, [r3, #8]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d101      	bne.n	801182e <tcp_zero_window_probe+0x72>
 801182a:	2301      	movs	r3, #1
 801182c:	e000      	b.n	8011830 <tcp_zero_window_probe+0x74>
 801182e:	2300      	movs	r3, #0
 8011830:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011832:	7ffb      	ldrb	r3, [r7, #31]
 8011834:	2b00      	cmp	r3, #0
 8011836:	bf0c      	ite	eq
 8011838:	2301      	moveq	r3, #1
 801183a:	2300      	movne	r3, #0
 801183c:	b2db      	uxtb	r3, r3
 801183e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011844:	b299      	uxth	r1, r3
 8011846:	6a3b      	ldr	r3, [r7, #32]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	8bba      	ldrh	r2, [r7, #28]
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f7ff fdf8 	bl	8011444 <tcp_output_alloc_header>
 8011854:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d102      	bne.n	8011862 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801185c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011860:	e04c      	b.n	80118fc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011862:	69bb      	ldr	r3, [r7, #24]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011868:	7ffb      	ldrb	r3, [r7, #31]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d011      	beq.n	8011892 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	899b      	ldrh	r3, [r3, #12]
 8011872:	b29b      	uxth	r3, r3
 8011874:	b21b      	sxth	r3, r3
 8011876:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801187a:	b21c      	sxth	r4, r3
 801187c:	2011      	movs	r0, #17
 801187e:	f7f8 f90f 	bl	8009aa0 <lwip_htons>
 8011882:	4603      	mov	r3, r0
 8011884:	b21b      	sxth	r3, r3
 8011886:	4323      	orrs	r3, r4
 8011888:	b21b      	sxth	r3, r3
 801188a:	b29a      	uxth	r2, r3
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	819a      	strh	r2, [r3, #12]
 8011890:	e010      	b.n	80118b4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	3314      	adds	r3, #20
 8011898:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801189a:	6a3b      	ldr	r3, [r7, #32]
 801189c:	6858      	ldr	r0, [r3, #4]
 801189e:	6a3b      	ldr	r3, [r7, #32]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	891a      	ldrh	r2, [r3, #8]
 80118a4:	6a3b      	ldr	r3, [r7, #32]
 80118a6:	891b      	ldrh	r3, [r3, #8]
 80118a8:	1ad3      	subs	r3, r2, r3
 80118aa:	b29b      	uxth	r3, r3
 80118ac:	2201      	movs	r2, #1
 80118ae:	6939      	ldr	r1, [r7, #16]
 80118b0:	f7f9 fe8a 	bl	800b5c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80118b4:	6a3b      	ldr	r3, [r7, #32]
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7f8 f905 	bl	8009aca <lwip_htonl>
 80118c0:	4603      	mov	r3, r0
 80118c2:	3301      	adds	r3, #1
 80118c4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	da02      	bge.n	80118d8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	68fa      	ldr	r2, [r7, #12]
 80118d6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80118d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118dc:	2200      	movs	r2, #0
 80118de:	69b9      	ldr	r1, [r7, #24]
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f7ff fded 	bl	80114c0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80118e6:	687a      	ldr	r2, [r7, #4]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	3304      	adds	r3, #4
 80118ec:	69b9      	ldr	r1, [r7, #24]
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f7ff fe26 	bl	8011540 <tcp_output_control_segment>
 80118f4:	4603      	mov	r3, r0
 80118f6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80118f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	372c      	adds	r7, #44	; 0x2c
 8011900:	46bd      	mov	sp, r7
 8011902:	bd90      	pop	{r4, r7, pc}
 8011904:	0801dc2c 	.word	0x0801dc2c
 8011908:	0801e424 	.word	0x0801e424
 801190c:	0801dc80 	.word	0x0801dc80

08011910 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011918:	f7f9 ff44 	bl	800b7a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801191c:	4b0a      	ldr	r3, [pc, #40]	; (8011948 <tcpip_tcp_timer+0x38>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d103      	bne.n	801192c <tcpip_tcp_timer+0x1c>
 8011924:	4b09      	ldr	r3, [pc, #36]	; (801194c <tcpip_tcp_timer+0x3c>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d005      	beq.n	8011938 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801192c:	2200      	movs	r2, #0
 801192e:	4908      	ldr	r1, [pc, #32]	; (8011950 <tcpip_tcp_timer+0x40>)
 8011930:	20fa      	movs	r0, #250	; 0xfa
 8011932:	f000 f8f3 	bl	8011b1c <sys_timeout>
 8011936:	e003      	b.n	8011940 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011938:	4b06      	ldr	r3, [pc, #24]	; (8011954 <tcpip_tcp_timer+0x44>)
 801193a:	2200      	movs	r2, #0
 801193c:	601a      	str	r2, [r3, #0]
  }
}
 801193e:	bf00      	nop
 8011940:	bf00      	nop
 8011942:	3708      	adds	r7, #8
 8011944:	46bd      	mov	sp, r7
 8011946:	bd80      	pop	{r7, pc}
 8011948:	2000d638 	.word	0x2000d638
 801194c:	2000d648 	.word	0x2000d648
 8011950:	08011911 	.word	0x08011911
 8011954:	20001250 	.word	0x20001250

08011958 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801195c:	4b0a      	ldr	r3, [pc, #40]	; (8011988 <tcp_timer_needed+0x30>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d10f      	bne.n	8011984 <tcp_timer_needed+0x2c>
 8011964:	4b09      	ldr	r3, [pc, #36]	; (801198c <tcp_timer_needed+0x34>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d103      	bne.n	8011974 <tcp_timer_needed+0x1c>
 801196c:	4b08      	ldr	r3, [pc, #32]	; (8011990 <tcp_timer_needed+0x38>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d007      	beq.n	8011984 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011974:	4b04      	ldr	r3, [pc, #16]	; (8011988 <tcp_timer_needed+0x30>)
 8011976:	2201      	movs	r2, #1
 8011978:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801197a:	2200      	movs	r2, #0
 801197c:	4905      	ldr	r1, [pc, #20]	; (8011994 <tcp_timer_needed+0x3c>)
 801197e:	20fa      	movs	r0, #250	; 0xfa
 8011980:	f000 f8cc 	bl	8011b1c <sys_timeout>
  }
}
 8011984:	bf00      	nop
 8011986:	bd80      	pop	{r7, pc}
 8011988:	20001250 	.word	0x20001250
 801198c:	2000d638 	.word	0x2000d638
 8011990:	2000d648 	.word	0x2000d648
 8011994:	08011911 	.word	0x08011911

08011998 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b086      	sub	sp, #24
 801199c:	af00      	add	r7, sp, #0
 801199e:	60f8      	str	r0, [r7, #12]
 80119a0:	60b9      	str	r1, [r7, #8]
 80119a2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80119a4:	2006      	movs	r0, #6
 80119a6:	f7f8 fdaf 	bl	800a508 <memp_malloc>
 80119aa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d109      	bne.n	80119c6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d151      	bne.n	8011a5c <sys_timeout_abs+0xc4>
 80119b8:	4b2a      	ldr	r3, [pc, #168]	; (8011a64 <sys_timeout_abs+0xcc>)
 80119ba:	22be      	movs	r2, #190	; 0xbe
 80119bc:	492a      	ldr	r1, [pc, #168]	; (8011a68 <sys_timeout_abs+0xd0>)
 80119be:	482b      	ldr	r0, [pc, #172]	; (8011a6c <sys_timeout_abs+0xd4>)
 80119c0:	f005 fc00 	bl	80171c4 <iprintf>
    return;
 80119c4:	e04a      	b.n	8011a5c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	2200      	movs	r2, #0
 80119ca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	68ba      	ldr	r2, [r7, #8]
 80119d0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	68fa      	ldr	r2, [r7, #12]
 80119dc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80119de:	4b24      	ldr	r3, [pc, #144]	; (8011a70 <sys_timeout_abs+0xd8>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d103      	bne.n	80119ee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80119e6:	4a22      	ldr	r2, [pc, #136]	; (8011a70 <sys_timeout_abs+0xd8>)
 80119e8:	693b      	ldr	r3, [r7, #16]
 80119ea:	6013      	str	r3, [r2, #0]
    return;
 80119ec:	e037      	b.n	8011a5e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	685a      	ldr	r2, [r3, #4]
 80119f2:	4b1f      	ldr	r3, [pc, #124]	; (8011a70 <sys_timeout_abs+0xd8>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	685b      	ldr	r3, [r3, #4]
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	0fdb      	lsrs	r3, r3, #31
 80119fc:	f003 0301 	and.w	r3, r3, #1
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d007      	beq.n	8011a16 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011a06:	4b1a      	ldr	r3, [pc, #104]	; (8011a70 <sys_timeout_abs+0xd8>)
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011a0e:	4a18      	ldr	r2, [pc, #96]	; (8011a70 <sys_timeout_abs+0xd8>)
 8011a10:	693b      	ldr	r3, [r7, #16]
 8011a12:	6013      	str	r3, [r2, #0]
 8011a14:	e023      	b.n	8011a5e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a16:	4b16      	ldr	r3, [pc, #88]	; (8011a70 <sys_timeout_abs+0xd8>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	617b      	str	r3, [r7, #20]
 8011a1c:	e01a      	b.n	8011a54 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011a1e:	697b      	ldr	r3, [r7, #20]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00b      	beq.n	8011a3e <sys_timeout_abs+0xa6>
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	685a      	ldr	r2, [r3, #4]
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	685b      	ldr	r3, [r3, #4]
 8011a30:	1ad3      	subs	r3, r2, r3
 8011a32:	0fdb      	lsrs	r3, r3, #31
 8011a34:	f003 0301 	and.w	r3, r3, #1
 8011a38:	b2db      	uxtb	r3, r3
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d007      	beq.n	8011a4e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	693a      	ldr	r2, [r7, #16]
 8011a4a:	601a      	str	r2, [r3, #0]
        break;
 8011a4c:	e007      	b.n	8011a5e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	617b      	str	r3, [r7, #20]
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d1e1      	bne.n	8011a1e <sys_timeout_abs+0x86>
 8011a5a:	e000      	b.n	8011a5e <sys_timeout_abs+0xc6>
    return;
 8011a5c:	bf00      	nop
      }
    }
  }
}
 8011a5e:	3718      	adds	r7, #24
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}
 8011a64:	0801e448 	.word	0x0801e448
 8011a68:	0801e47c 	.word	0x0801e47c
 8011a6c:	0801e4bc 	.word	0x0801e4bc
 8011a70:	20001248 	.word	0x20001248

08011a74 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	b086      	sub	sp, #24
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	685b      	ldr	r3, [r3, #4]
 8011a84:	4798      	blx	r3

  now = sys_now();
 8011a86:	f7f5 ffab 	bl	80079e0 <sys_now>
 8011a8a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	681a      	ldr	r2, [r3, #0]
 8011a90:	4b0f      	ldr	r3, [pc, #60]	; (8011ad0 <lwip_cyclic_timer+0x5c>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	4413      	add	r3, r2
 8011a96:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011a98:	68fa      	ldr	r2, [r7, #12]
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	1ad3      	subs	r3, r2, r3
 8011a9e:	0fdb      	lsrs	r3, r3, #31
 8011aa0:	f003 0301 	and.w	r3, r3, #1
 8011aa4:	b2db      	uxtb	r3, r3
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d009      	beq.n	8011abe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	681a      	ldr	r2, [r3, #0]
 8011aae:	693b      	ldr	r3, [r7, #16]
 8011ab0:	4413      	add	r3, r2
 8011ab2:	687a      	ldr	r2, [r7, #4]
 8011ab4:	4907      	ldr	r1, [pc, #28]	; (8011ad4 <lwip_cyclic_timer+0x60>)
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7ff ff6e 	bl	8011998 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011abc:	e004      	b.n	8011ac8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011abe:	687a      	ldr	r2, [r7, #4]
 8011ac0:	4904      	ldr	r1, [pc, #16]	; (8011ad4 <lwip_cyclic_timer+0x60>)
 8011ac2:	68f8      	ldr	r0, [r7, #12]
 8011ac4:	f7ff ff68 	bl	8011998 <sys_timeout_abs>
}
 8011ac8:	bf00      	nop
 8011aca:	3718      	adds	r7, #24
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}
 8011ad0:	2000124c 	.word	0x2000124c
 8011ad4:	08011a75 	.word	0x08011a75

08011ad8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011ade:	2301      	movs	r3, #1
 8011ae0:	607b      	str	r3, [r7, #4]
 8011ae2:	e00e      	b.n	8011b02 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011ae4:	4a0b      	ldr	r2, [pc, #44]	; (8011b14 <sys_timeouts_init+0x3c>)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	00db      	lsls	r3, r3, #3
 8011af0:	4a08      	ldr	r2, [pc, #32]	; (8011b14 <sys_timeouts_init+0x3c>)
 8011af2:	4413      	add	r3, r2
 8011af4:	461a      	mov	r2, r3
 8011af6:	4908      	ldr	r1, [pc, #32]	; (8011b18 <sys_timeouts_init+0x40>)
 8011af8:	f000 f810 	bl	8011b1c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	3301      	adds	r3, #1
 8011b00:	607b      	str	r3, [r7, #4]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2b04      	cmp	r3, #4
 8011b06:	d9ed      	bls.n	8011ae4 <sys_timeouts_init+0xc>
  }
}
 8011b08:	bf00      	nop
 8011b0a:	bf00      	nop
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	08032314 	.word	0x08032314
 8011b18:	08011a75 	.word	0x08011a75

08011b1c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b086      	sub	sp, #24
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	60b9      	str	r1, [r7, #8]
 8011b26:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011b2e:	d306      	bcc.n	8011b3e <sys_timeout+0x22>
 8011b30:	4b0a      	ldr	r3, [pc, #40]	; (8011b5c <sys_timeout+0x40>)
 8011b32:	f240 1229 	movw	r2, #297	; 0x129
 8011b36:	490a      	ldr	r1, [pc, #40]	; (8011b60 <sys_timeout+0x44>)
 8011b38:	480a      	ldr	r0, [pc, #40]	; (8011b64 <sys_timeout+0x48>)
 8011b3a:	f005 fb43 	bl	80171c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011b3e:	f7f5 ff4f 	bl	80079e0 <sys_now>
 8011b42:	4602      	mov	r2, r0
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	4413      	add	r3, r2
 8011b48:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	68b9      	ldr	r1, [r7, #8]
 8011b4e:	6978      	ldr	r0, [r7, #20]
 8011b50:	f7ff ff22 	bl	8011998 <sys_timeout_abs>
#endif
}
 8011b54:	bf00      	nop
 8011b56:	3718      	adds	r7, #24
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	bd80      	pop	{r7, pc}
 8011b5c:	0801e448 	.word	0x0801e448
 8011b60:	0801e4e4 	.word	0x0801e4e4
 8011b64:	0801e4bc 	.word	0x0801e4bc

08011b68 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011b6e:	f7f5 ff37 	bl	80079e0 <sys_now>
 8011b72:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011b74:	4b1a      	ldr	r3, [pc, #104]	; (8011be0 <sys_check_timeouts+0x78>)
 8011b76:	781b      	ldrb	r3, [r3, #0]
 8011b78:	b2db      	uxtb	r3, r3
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d001      	beq.n	8011b82 <sys_check_timeouts+0x1a>
 8011b7e:	f7f8 ffef 	bl	800ab60 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011b82:	4b18      	ldr	r3, [pc, #96]	; (8011be4 <sys_check_timeouts+0x7c>)
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d022      	beq.n	8011bd4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	68fa      	ldr	r2, [r7, #12]
 8011b94:	1ad3      	subs	r3, r2, r3
 8011b96:	0fdb      	lsrs	r3, r3, #31
 8011b98:	f003 0301 	and.w	r3, r3, #1
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d11a      	bne.n	8011bd8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4a0f      	ldr	r2, [pc, #60]	; (8011be4 <sys_check_timeouts+0x7c>)
 8011ba8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011baa:	68bb      	ldr	r3, [r7, #8]
 8011bac:	689b      	ldr	r3, [r3, #8]
 8011bae:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	68db      	ldr	r3, [r3, #12]
 8011bb4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	4a0b      	ldr	r2, [pc, #44]	; (8011be8 <sys_check_timeouts+0x80>)
 8011bbc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011bbe:	68b9      	ldr	r1, [r7, #8]
 8011bc0:	2006      	movs	r0, #6
 8011bc2:	f7f8 fced 	bl	800a5a0 <memp_free>
    if (handler != NULL) {
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d0d3      	beq.n	8011b74 <sys_check_timeouts+0xc>
      handler(arg);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	6838      	ldr	r0, [r7, #0]
 8011bd0:	4798      	blx	r3
  do {
 8011bd2:	e7cf      	b.n	8011b74 <sys_check_timeouts+0xc>
      return;
 8011bd4:	bf00      	nop
 8011bd6:	e000      	b.n	8011bda <sys_check_timeouts+0x72>
      return;
 8011bd8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011bda:	3710      	adds	r7, #16
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}
 8011be0:	2000d630 	.word	0x2000d630
 8011be4:	20001248 	.word	0x20001248
 8011be8:	2000124c 	.word	0x2000124c

08011bec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011bf0:	f005 fb76 	bl	80172e0 <rand>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	b29b      	uxth	r3, r3
 8011bf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011bfc:	b29b      	uxth	r3, r3
 8011bfe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011c02:	b29a      	uxth	r2, r3
 8011c04:	4b01      	ldr	r3, [pc, #4]	; (8011c0c <udp_init+0x20>)
 8011c06:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011c08:	bf00      	nop
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	200005c0 	.word	0x200005c0

08011c10 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011c16:	2300      	movs	r3, #0
 8011c18:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011c1a:	4b17      	ldr	r3, [pc, #92]	; (8011c78 <udp_new_port+0x68>)
 8011c1c:	881b      	ldrh	r3, [r3, #0]
 8011c1e:	1c5a      	adds	r2, r3, #1
 8011c20:	b291      	uxth	r1, r2
 8011c22:	4a15      	ldr	r2, [pc, #84]	; (8011c78 <udp_new_port+0x68>)
 8011c24:	8011      	strh	r1, [r2, #0]
 8011c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c2a:	4293      	cmp	r3, r2
 8011c2c:	d103      	bne.n	8011c36 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011c2e:	4b12      	ldr	r3, [pc, #72]	; (8011c78 <udp_new_port+0x68>)
 8011c30:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011c34:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c36:	4b11      	ldr	r3, [pc, #68]	; (8011c7c <udp_new_port+0x6c>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	603b      	str	r3, [r7, #0]
 8011c3c:	e011      	b.n	8011c62 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	8a5a      	ldrh	r2, [r3, #18]
 8011c42:	4b0d      	ldr	r3, [pc, #52]	; (8011c78 <udp_new_port+0x68>)
 8011c44:	881b      	ldrh	r3, [r3, #0]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	d108      	bne.n	8011c5c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011c4a:	88fb      	ldrh	r3, [r7, #6]
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	80fb      	strh	r3, [r7, #6]
 8011c50:	88fb      	ldrh	r3, [r7, #6]
 8011c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011c56:	d3e0      	bcc.n	8011c1a <udp_new_port+0xa>
        return 0;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	e007      	b.n	8011c6c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	68db      	ldr	r3, [r3, #12]
 8011c60:	603b      	str	r3, [r7, #0]
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d1ea      	bne.n	8011c3e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011c68:	4b03      	ldr	r3, [pc, #12]	; (8011c78 <udp_new_port+0x68>)
 8011c6a:	881b      	ldrh	r3, [r3, #0]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	370c      	adds	r7, #12
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr
 8011c78:	200005c0 	.word	0x200005c0
 8011c7c:	2000d650 	.word	0x2000d650

08011c80 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b084      	sub	sp, #16
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	60f8      	str	r0, [r7, #12]
 8011c88:	60b9      	str	r1, [r7, #8]
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d105      	bne.n	8011ca0 <udp_input_local_match+0x20>
 8011c94:	4b27      	ldr	r3, [pc, #156]	; (8011d34 <udp_input_local_match+0xb4>)
 8011c96:	2287      	movs	r2, #135	; 0x87
 8011c98:	4927      	ldr	r1, [pc, #156]	; (8011d38 <udp_input_local_match+0xb8>)
 8011c9a:	4828      	ldr	r0, [pc, #160]	; (8011d3c <udp_input_local_match+0xbc>)
 8011c9c:	f005 fa92 	bl	80171c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d105      	bne.n	8011cb2 <udp_input_local_match+0x32>
 8011ca6:	4b23      	ldr	r3, [pc, #140]	; (8011d34 <udp_input_local_match+0xb4>)
 8011ca8:	2288      	movs	r2, #136	; 0x88
 8011caa:	4925      	ldr	r1, [pc, #148]	; (8011d40 <udp_input_local_match+0xc0>)
 8011cac:	4823      	ldr	r0, [pc, #140]	; (8011d3c <udp_input_local_match+0xbc>)
 8011cae:	f005 fa89 	bl	80171c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	7a1b      	ldrb	r3, [r3, #8]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d00b      	beq.n	8011cd2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	7a1a      	ldrb	r2, [r3, #8]
 8011cbe:	4b21      	ldr	r3, [pc, #132]	; (8011d44 <udp_input_local_match+0xc4>)
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d001      	beq.n	8011cd2 <udp_input_local_match+0x52>
    return 0;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	e02b      	b.n	8011d2a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011cd2:	79fb      	ldrb	r3, [r7, #7]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d018      	beq.n	8011d0a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d013      	beq.n	8011d06 <udp_input_local_match+0x86>
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d00f      	beq.n	8011d06 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011ce6:	4b17      	ldr	r3, [pc, #92]	; (8011d44 <udp_input_local_match+0xc4>)
 8011ce8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011cee:	d00a      	beq.n	8011d06 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	681a      	ldr	r2, [r3, #0]
 8011cf4:	4b13      	ldr	r3, [pc, #76]	; (8011d44 <udp_input_local_match+0xc4>)
 8011cf6:	695b      	ldr	r3, [r3, #20]
 8011cf8:	405a      	eors	r2, r3
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	3308      	adds	r3, #8
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d110      	bne.n	8011d28 <udp_input_local_match+0xa8>
          return 1;
 8011d06:	2301      	movs	r3, #1
 8011d08:	e00f      	b.n	8011d2a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d009      	beq.n	8011d24 <udp_input_local_match+0xa4>
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d005      	beq.n	8011d24 <udp_input_local_match+0xa4>
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	4b09      	ldr	r3, [pc, #36]	; (8011d44 <udp_input_local_match+0xc4>)
 8011d1e:	695b      	ldr	r3, [r3, #20]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d101      	bne.n	8011d28 <udp_input_local_match+0xa8>
        return 1;
 8011d24:	2301      	movs	r3, #1
 8011d26:	e000      	b.n	8011d2a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011d28:	2300      	movs	r3, #0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3710      	adds	r7, #16
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
 8011d32:	bf00      	nop
 8011d34:	0801e530 	.word	0x0801e530
 8011d38:	0801e560 	.word	0x0801e560
 8011d3c:	0801e584 	.word	0x0801e584
 8011d40:	0801e5ac 	.word	0x0801e5ac
 8011d44:	20009d08 	.word	0x20009d08

08011d48 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011d48:	b590      	push	{r4, r7, lr}
 8011d4a:	b08d      	sub	sp, #52	; 0x34
 8011d4c:	af02      	add	r7, sp, #8
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011d52:	2300      	movs	r3, #0
 8011d54:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d105      	bne.n	8011d68 <udp_input+0x20>
 8011d5c:	4b7e      	ldr	r3, [pc, #504]	; (8011f58 <udp_input+0x210>)
 8011d5e:	22cf      	movs	r2, #207	; 0xcf
 8011d60:	497e      	ldr	r1, [pc, #504]	; (8011f5c <udp_input+0x214>)
 8011d62:	487f      	ldr	r0, [pc, #508]	; (8011f60 <udp_input+0x218>)
 8011d64:	f005 fa2e 	bl	80171c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d105      	bne.n	8011d7a <udp_input+0x32>
 8011d6e:	4b7a      	ldr	r3, [pc, #488]	; (8011f58 <udp_input+0x210>)
 8011d70:	22d0      	movs	r2, #208	; 0xd0
 8011d72:	497c      	ldr	r1, [pc, #496]	; (8011f64 <udp_input+0x21c>)
 8011d74:	487a      	ldr	r0, [pc, #488]	; (8011f60 <udp_input+0x218>)
 8011d76:	f005 fa25 	bl	80171c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	895b      	ldrh	r3, [r3, #10]
 8011d7e:	2b07      	cmp	r3, #7
 8011d80:	d803      	bhi.n	8011d8a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f7f9 fa26 	bl	800b1d4 <pbuf_free>
    goto end;
 8011d88:	e0e1      	b.n	8011f4e <udp_input+0x206>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	685b      	ldr	r3, [r3, #4]
 8011d8e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011d90:	4b75      	ldr	r3, [pc, #468]	; (8011f68 <udp_input+0x220>)
 8011d92:	695b      	ldr	r3, [r3, #20]
 8011d94:	4a74      	ldr	r2, [pc, #464]	; (8011f68 <udp_input+0x220>)
 8011d96:	6812      	ldr	r2, [r2, #0]
 8011d98:	4611      	mov	r1, r2
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f003 fdef 	bl	801597e <ip4_addr_isbroadcast_u32>
 8011da0:	4603      	mov	r3, r0
 8011da2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	881b      	ldrh	r3, [r3, #0]
 8011da8:	b29b      	uxth	r3, r3
 8011daa:	4618      	mov	r0, r3
 8011dac:	f7f7 fe78 	bl	8009aa0 <lwip_htons>
 8011db0:	4603      	mov	r3, r0
 8011db2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	885b      	ldrh	r3, [r3, #2]
 8011db8:	b29b      	uxth	r3, r3
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7f7 fe70 	bl	8009aa0 <lwip_htons>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8011dc4:	6978      	ldr	r0, [r7, #20]
 8011dc6:	f000 fbd1 	bl	801256c <udp_debug_print>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011dd6:	4b65      	ldr	r3, [pc, #404]	; (8011f6c <udp_input+0x224>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	627b      	str	r3, [r7, #36]	; 0x24
 8011ddc:	e054      	b.n	8011e88 <udp_input+0x140>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de0:	8a5b      	ldrh	r3, [r3, #18]
 8011de2:	89fa      	ldrh	r2, [r7, #14]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d14a      	bne.n	8011e7e <udp_input+0x136>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011de8:	7cfb      	ldrb	r3, [r7, #19]
 8011dea:	461a      	mov	r2, r3
 8011dec:	6839      	ldr	r1, [r7, #0]
 8011dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011df0:	f7ff ff46 	bl	8011c80 <udp_input_local_match>
 8011df4:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d041      	beq.n	8011e7e <udp_input+0x136>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dfc:	7c1b      	ldrb	r3, [r3, #16]
 8011dfe:	f003 0304 	and.w	r3, r3, #4
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d11d      	bne.n	8011e42 <udp_input+0xfa>
        if (uncon_pcb == NULL) {
 8011e06:	69fb      	ldr	r3, [r7, #28]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d102      	bne.n	8011e12 <udp_input+0xca>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0e:	61fb      	str	r3, [r7, #28]
 8011e10:	e017      	b.n	8011e42 <udp_input+0xfa>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011e12:	7cfb      	ldrb	r3, [r7, #19]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d014      	beq.n	8011e42 <udp_input+0xfa>
 8011e18:	4b53      	ldr	r3, [pc, #332]	; (8011f68 <udp_input+0x220>)
 8011e1a:	695b      	ldr	r3, [r3, #20]
 8011e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e20:	d10f      	bne.n	8011e42 <udp_input+0xfa>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011e22:	69fb      	ldr	r3, [r7, #28]
 8011e24:	681a      	ldr	r2, [r3, #0]
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	3304      	adds	r3, #4
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d008      	beq.n	8011e42 <udp_input+0xfa>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	3304      	adds	r3, #4
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d101      	bne.n	8011e42 <udp_input+0xfa>
              /* better match */
              uncon_pcb = pcb;
 8011e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e40:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e44:	8a9b      	ldrh	r3, [r3, #20]
 8011e46:	8a3a      	ldrh	r2, [r7, #16]
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d118      	bne.n	8011e7e <udp_input+0x136>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d005      	beq.n	8011e60 <udp_input+0x118>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e56:	685a      	ldr	r2, [r3, #4]
 8011e58:	4b43      	ldr	r3, [pc, #268]	; (8011f68 <udp_input+0x220>)
 8011e5a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d10e      	bne.n	8011e7e <udp_input+0x136>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011e60:	6a3b      	ldr	r3, [r7, #32]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d014      	beq.n	8011e90 <udp_input+0x148>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e68:	68da      	ldr	r2, [r3, #12]
 8011e6a:	6a3b      	ldr	r3, [r7, #32]
 8011e6c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011e6e:	4b3f      	ldr	r3, [pc, #252]	; (8011f6c <udp_input+0x224>)
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e74:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011e76:	4a3d      	ldr	r2, [pc, #244]	; (8011f6c <udp_input+0x224>)
 8011e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011e7c:	e008      	b.n	8011e90 <udp_input+0x148>
      }
    }

    prev = pcb;
 8011e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e80:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e84:	68db      	ldr	r3, [r3, #12]
 8011e86:	627b      	str	r3, [r7, #36]	; 0x24
 8011e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d1a7      	bne.n	8011dde <udp_input+0x96>
 8011e8e:	e000      	b.n	8011e92 <udp_input+0x14a>
        break;
 8011e90:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d101      	bne.n	8011e9c <udp_input+0x154>
    pcb = uncon_pcb;
 8011e98:	69fb      	ldr	r3, [r7, #28]
 8011e9a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d002      	beq.n	8011ea8 <udp_input+0x160>
    for_us = 1;
 8011ea2:	2301      	movs	r3, #1
 8011ea4:	76fb      	strb	r3, [r7, #27]
 8011ea6:	e00a      	b.n	8011ebe <udp_input+0x176>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	3304      	adds	r3, #4
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	4b2e      	ldr	r3, [pc, #184]	; (8011f68 <udp_input+0x220>)
 8011eb0:	695b      	ldr	r3, [r3, #20]
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	bf0c      	ite	eq
 8011eb6:	2301      	moveq	r3, #1
 8011eb8:	2300      	movne	r3, #0
 8011eba:	b2db      	uxtb	r3, r3
 8011ebc:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011ebe:	7efb      	ldrb	r3, [r7, #27]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d041      	beq.n	8011f48 <udp_input+0x200>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011ec4:	2108      	movs	r1, #8
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7f9 f8fe 	bl	800b0c8 <pbuf_remove_header>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00a      	beq.n	8011ee8 <udp_input+0x1a0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011ed2:	4b21      	ldr	r3, [pc, #132]	; (8011f58 <udp_input+0x210>)
 8011ed4:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011ed8:	4925      	ldr	r1, [pc, #148]	; (8011f70 <udp_input+0x228>)
 8011eda:	4821      	ldr	r0, [pc, #132]	; (8011f60 <udp_input+0x218>)
 8011edc:	f005 f972 	bl	80171c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7f9 f977 	bl	800b1d4 <pbuf_free>
      goto end;
 8011ee6:	e032      	b.n	8011f4e <udp_input+0x206>
    }

    if (pcb != NULL) {
 8011ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d012      	beq.n	8011f14 <udp_input+0x1cc>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef0:	699b      	ldr	r3, [r3, #24]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d00a      	beq.n	8011f0c <udp_input+0x1c4>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef8:	699c      	ldr	r4, [r3, #24]
 8011efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011efc:	69d8      	ldr	r0, [r3, #28]
 8011efe:	8a3b      	ldrh	r3, [r7, #16]
 8011f00:	9300      	str	r3, [sp, #0]
 8011f02:	4b1c      	ldr	r3, [pc, #112]	; (8011f74 <udp_input+0x22c>)
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011f08:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011f0a:	e021      	b.n	8011f50 <udp_input+0x208>
        pbuf_free(p);
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7f9 f961 	bl	800b1d4 <pbuf_free>
        goto end;
 8011f12:	e01c      	b.n	8011f4e <udp_input+0x206>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011f14:	7cfb      	ldrb	r3, [r7, #19]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d112      	bne.n	8011f40 <udp_input+0x1f8>
 8011f1a:	4b13      	ldr	r3, [pc, #76]	; (8011f68 <udp_input+0x220>)
 8011f1c:	695b      	ldr	r3, [r3, #20]
 8011f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f22:	2be0      	cmp	r3, #224	; 0xe0
 8011f24:	d00c      	beq.n	8011f40 <udp_input+0x1f8>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011f26:	4b10      	ldr	r3, [pc, #64]	; (8011f68 <udp_input+0x220>)
 8011f28:	899b      	ldrh	r3, [r3, #12]
 8011f2a:	3308      	adds	r3, #8
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	b21b      	sxth	r3, r3
 8011f30:	4619      	mov	r1, r3
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f7f9 f93b 	bl	800b1ae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011f38:	2103      	movs	r1, #3
 8011f3a:	6878      	ldr	r0, [r7, #4]
 8011f3c:	f003 f9ca 	bl	80152d4 <icmp_dest_unreach>
      pbuf_free(p);
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7f9 f947 	bl	800b1d4 <pbuf_free>
  return;
 8011f46:	e003      	b.n	8011f50 <udp_input+0x208>
    pbuf_free(p);
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f7f9 f943 	bl	800b1d4 <pbuf_free>
  return;
 8011f4e:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011f50:	372c      	adds	r7, #44	; 0x2c
 8011f52:	46bd      	mov	sp, r7
 8011f54:	bd90      	pop	{r4, r7, pc}
 8011f56:	bf00      	nop
 8011f58:	0801e530 	.word	0x0801e530
 8011f5c:	0801e5d4 	.word	0x0801e5d4
 8011f60:	0801e584 	.word	0x0801e584
 8011f64:	0801e5ec 	.word	0x0801e5ec
 8011f68:	20009d08 	.word	0x20009d08
 8011f6c:	2000d650 	.word	0x2000d650
 8011f70:	0801e608 	.word	0x0801e608
 8011f74:	20009d18 	.word	0x20009d18

08011f78 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b088      	sub	sp, #32
 8011f7c:	af02      	add	r7, sp, #8
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	60b9      	str	r1, [r7, #8]
 8011f82:	607a      	str	r2, [r7, #4]
 8011f84:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d109      	bne.n	8011fa0 <udp_sendto_if+0x28>
 8011f8c:	4b2e      	ldr	r3, [pc, #184]	; (8012048 <udp_sendto_if+0xd0>)
 8011f8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f92:	492e      	ldr	r1, [pc, #184]	; (801204c <udp_sendto_if+0xd4>)
 8011f94:	482e      	ldr	r0, [pc, #184]	; (8012050 <udp_sendto_if+0xd8>)
 8011f96:	f005 f915 	bl	80171c4 <iprintf>
 8011f9a:	f06f 030f 	mvn.w	r3, #15
 8011f9e:	e04f      	b.n	8012040 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d109      	bne.n	8011fba <udp_sendto_if+0x42>
 8011fa6:	4b28      	ldr	r3, [pc, #160]	; (8012048 <udp_sendto_if+0xd0>)
 8011fa8:	f240 2281 	movw	r2, #641	; 0x281
 8011fac:	4929      	ldr	r1, [pc, #164]	; (8012054 <udp_sendto_if+0xdc>)
 8011fae:	4828      	ldr	r0, [pc, #160]	; (8012050 <udp_sendto_if+0xd8>)
 8011fb0:	f005 f908 	bl	80171c4 <iprintf>
 8011fb4:	f06f 030f 	mvn.w	r3, #15
 8011fb8:	e042      	b.n	8012040 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d109      	bne.n	8011fd4 <udp_sendto_if+0x5c>
 8011fc0:	4b21      	ldr	r3, [pc, #132]	; (8012048 <udp_sendto_if+0xd0>)
 8011fc2:	f240 2282 	movw	r2, #642	; 0x282
 8011fc6:	4924      	ldr	r1, [pc, #144]	; (8012058 <udp_sendto_if+0xe0>)
 8011fc8:	4821      	ldr	r0, [pc, #132]	; (8012050 <udp_sendto_if+0xd8>)
 8011fca:	f005 f8fb 	bl	80171c4 <iprintf>
 8011fce:	f06f 030f 	mvn.w	r3, #15
 8011fd2:	e035      	b.n	8012040 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011fd4:	6a3b      	ldr	r3, [r7, #32]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d109      	bne.n	8011fee <udp_sendto_if+0x76>
 8011fda:	4b1b      	ldr	r3, [pc, #108]	; (8012048 <udp_sendto_if+0xd0>)
 8011fdc:	f240 2283 	movw	r2, #643	; 0x283
 8011fe0:	491e      	ldr	r1, [pc, #120]	; (801205c <udp_sendto_if+0xe4>)
 8011fe2:	481b      	ldr	r0, [pc, #108]	; (8012050 <udp_sendto_if+0xd8>)
 8011fe4:	f005 f8ee 	bl	80171c4 <iprintf>
 8011fe8:	f06f 030f 	mvn.w	r3, #15
 8011fec:	e028      	b.n	8012040 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d009      	beq.n	8012008 <udp_sendto_if+0x90>
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d005      	beq.n	8012008 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012004:	2be0      	cmp	r3, #224	; 0xe0
 8012006:	d103      	bne.n	8012010 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012008:	6a3b      	ldr	r3, [r7, #32]
 801200a:	3304      	adds	r3, #4
 801200c:	617b      	str	r3, [r7, #20]
 801200e:	e00b      	b.n	8012028 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	681a      	ldr	r2, [r3, #0]
 8012014:	6a3b      	ldr	r3, [r7, #32]
 8012016:	3304      	adds	r3, #4
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	429a      	cmp	r2, r3
 801201c:	d002      	beq.n	8012024 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801201e:	f06f 0303 	mvn.w	r3, #3
 8012022:	e00d      	b.n	8012040 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012028:	887a      	ldrh	r2, [r7, #2]
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	9301      	str	r3, [sp, #4]
 801202e:	6a3b      	ldr	r3, [r7, #32]
 8012030:	9300      	str	r3, [sp, #0]
 8012032:	4613      	mov	r3, r2
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	68b9      	ldr	r1, [r7, #8]
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f000 f811 	bl	8012060 <udp_sendto_if_src>
 801203e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012040:	4618      	mov	r0, r3
 8012042:	3718      	adds	r7, #24
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}
 8012048:	0801e530 	.word	0x0801e530
 801204c:	0801e6a4 	.word	0x0801e6a4
 8012050:	0801e584 	.word	0x0801e584
 8012054:	0801e6c0 	.word	0x0801e6c0
 8012058:	0801e6dc 	.word	0x0801e6dc
 801205c:	0801e6fc 	.word	0x0801e6fc

08012060 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b08c      	sub	sp, #48	; 0x30
 8012064:	af04      	add	r7, sp, #16
 8012066:	60f8      	str	r0, [r7, #12]
 8012068:	60b9      	str	r1, [r7, #8]
 801206a:	607a      	str	r2, [r7, #4]
 801206c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d109      	bne.n	8012088 <udp_sendto_if_src+0x28>
 8012074:	4b65      	ldr	r3, [pc, #404]	; (801220c <udp_sendto_if_src+0x1ac>)
 8012076:	f240 22d1 	movw	r2, #721	; 0x2d1
 801207a:	4965      	ldr	r1, [pc, #404]	; (8012210 <udp_sendto_if_src+0x1b0>)
 801207c:	4865      	ldr	r0, [pc, #404]	; (8012214 <udp_sendto_if_src+0x1b4>)
 801207e:	f005 f8a1 	bl	80171c4 <iprintf>
 8012082:	f06f 030f 	mvn.w	r3, #15
 8012086:	e0bc      	b.n	8012202 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d109      	bne.n	80120a2 <udp_sendto_if_src+0x42>
 801208e:	4b5f      	ldr	r3, [pc, #380]	; (801220c <udp_sendto_if_src+0x1ac>)
 8012090:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012094:	4960      	ldr	r1, [pc, #384]	; (8012218 <udp_sendto_if_src+0x1b8>)
 8012096:	485f      	ldr	r0, [pc, #380]	; (8012214 <udp_sendto_if_src+0x1b4>)
 8012098:	f005 f894 	bl	80171c4 <iprintf>
 801209c:	f06f 030f 	mvn.w	r3, #15
 80120a0:	e0af      	b.n	8012202 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d109      	bne.n	80120bc <udp_sendto_if_src+0x5c>
 80120a8:	4b58      	ldr	r3, [pc, #352]	; (801220c <udp_sendto_if_src+0x1ac>)
 80120aa:	f240 22d3 	movw	r2, #723	; 0x2d3
 80120ae:	495b      	ldr	r1, [pc, #364]	; (801221c <udp_sendto_if_src+0x1bc>)
 80120b0:	4858      	ldr	r0, [pc, #352]	; (8012214 <udp_sendto_if_src+0x1b4>)
 80120b2:	f005 f887 	bl	80171c4 <iprintf>
 80120b6:	f06f 030f 	mvn.w	r3, #15
 80120ba:	e0a2      	b.n	8012202 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80120bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d109      	bne.n	80120d6 <udp_sendto_if_src+0x76>
 80120c2:	4b52      	ldr	r3, [pc, #328]	; (801220c <udp_sendto_if_src+0x1ac>)
 80120c4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80120c8:	4955      	ldr	r1, [pc, #340]	; (8012220 <udp_sendto_if_src+0x1c0>)
 80120ca:	4852      	ldr	r0, [pc, #328]	; (8012214 <udp_sendto_if_src+0x1b4>)
 80120cc:	f005 f87a 	bl	80171c4 <iprintf>
 80120d0:	f06f 030f 	mvn.w	r3, #15
 80120d4:	e095      	b.n	8012202 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80120d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d109      	bne.n	80120f0 <udp_sendto_if_src+0x90>
 80120dc:	4b4b      	ldr	r3, [pc, #300]	; (801220c <udp_sendto_if_src+0x1ac>)
 80120de:	f240 22d5 	movw	r2, #725	; 0x2d5
 80120e2:	4950      	ldr	r1, [pc, #320]	; (8012224 <udp_sendto_if_src+0x1c4>)
 80120e4:	484b      	ldr	r0, [pc, #300]	; (8012214 <udp_sendto_if_src+0x1b4>)
 80120e6:	f005 f86d 	bl	80171c4 <iprintf>
 80120ea:	f06f 030f 	mvn.w	r3, #15
 80120ee:	e088      	b.n	8012202 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	8a5b      	ldrh	r3, [r3, #18]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d10f      	bne.n	8012118 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80120f8:	68f9      	ldr	r1, [r7, #12]
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	8a5b      	ldrh	r3, [r3, #18]
 80120fe:	461a      	mov	r2, r3
 8012100:	68f8      	ldr	r0, [r7, #12]
 8012102:	f000 f893 	bl	801222c <udp_bind>
 8012106:	4603      	mov	r3, r0
 8012108:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801210a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d002      	beq.n	8012118 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8012112:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012116:	e074      	b.n	8012202 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	891b      	ldrh	r3, [r3, #8]
 801211c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8012120:	4293      	cmp	r3, r2
 8012122:	d902      	bls.n	801212a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8012124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012128:	e06b      	b.n	8012202 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801212a:	2108      	movs	r1, #8
 801212c:	68b8      	ldr	r0, [r7, #8]
 801212e:	f7f8 ffbb 	bl	800b0a8 <pbuf_add_header>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d015      	beq.n	8012164 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012138:	f44f 7220 	mov.w	r2, #640	; 0x280
 801213c:	2108      	movs	r1, #8
 801213e:	2022      	movs	r0, #34	; 0x22
 8012140:	f7f8 fd64 	bl	800ac0c <pbuf_alloc>
 8012144:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012146:	69fb      	ldr	r3, [r7, #28]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d102      	bne.n	8012152 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801214c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012150:	e057      	b.n	8012202 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	891b      	ldrh	r3, [r3, #8]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d006      	beq.n	8012168 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801215a:	68b9      	ldr	r1, [r7, #8]
 801215c:	69f8      	ldr	r0, [r7, #28]
 801215e:	f7f9 f951 	bl	800b404 <pbuf_chain>
 8012162:	e001      	b.n	8012168 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012168:	69fb      	ldr	r3, [r7, #28]
 801216a:	895b      	ldrh	r3, [r3, #10]
 801216c:	2b07      	cmp	r3, #7
 801216e:	d806      	bhi.n	801217e <udp_sendto_if_src+0x11e>
 8012170:	4b26      	ldr	r3, [pc, #152]	; (801220c <udp_sendto_if_src+0x1ac>)
 8012172:	f240 320d 	movw	r2, #781	; 0x30d
 8012176:	492c      	ldr	r1, [pc, #176]	; (8012228 <udp_sendto_if_src+0x1c8>)
 8012178:	4826      	ldr	r0, [pc, #152]	; (8012214 <udp_sendto_if_src+0x1b4>)
 801217a:	f005 f823 	bl	80171c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801217e:	69fb      	ldr	r3, [r7, #28]
 8012180:	685b      	ldr	r3, [r3, #4]
 8012182:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	8a5b      	ldrh	r3, [r3, #18]
 8012188:	4618      	mov	r0, r3
 801218a:	f7f7 fc89 	bl	8009aa0 <lwip_htons>
 801218e:	4603      	mov	r3, r0
 8012190:	461a      	mov	r2, r3
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012196:	887b      	ldrh	r3, [r7, #2]
 8012198:	4618      	mov	r0, r3
 801219a:	f7f7 fc81 	bl	8009aa0 <lwip_htons>
 801219e:	4603      	mov	r3, r0
 80121a0:	461a      	mov	r2, r3
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	2200      	movs	r2, #0
 80121aa:	719a      	strb	r2, [r3, #6]
 80121ac:	2200      	movs	r2, #0
 80121ae:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	891b      	ldrh	r3, [r3, #8]
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7f7 fc73 	bl	8009aa0 <lwip_htons>
 80121ba:	4603      	mov	r3, r0
 80121bc:	461a      	mov	r2, r3
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80121c2:	2311      	movs	r3, #17
 80121c4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	7adb      	ldrb	r3, [r3, #11]
 80121ca:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	7a9b      	ldrb	r3, [r3, #10]
 80121d0:	7cb9      	ldrb	r1, [r7, #18]
 80121d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121d4:	9202      	str	r2, [sp, #8]
 80121d6:	7cfa      	ldrb	r2, [r7, #19]
 80121d8:	9201      	str	r2, [sp, #4]
 80121da:	9300      	str	r3, [sp, #0]
 80121dc:	460b      	mov	r3, r1
 80121de:	687a      	ldr	r2, [r7, #4]
 80121e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121e2:	69f8      	ldr	r0, [r7, #28]
 80121e4:	f003 fb0c 	bl	8015800 <ip4_output_if_src>
 80121e8:	4603      	mov	r3, r0
 80121ea:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80121ec:	69fa      	ldr	r2, [r7, #28]
 80121ee:	68bb      	ldr	r3, [r7, #8]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d004      	beq.n	80121fe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80121f4:	69f8      	ldr	r0, [r7, #28]
 80121f6:	f7f8 ffed 	bl	800b1d4 <pbuf_free>
    q = NULL;
 80121fa:	2300      	movs	r3, #0
 80121fc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80121fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012202:	4618      	mov	r0, r3
 8012204:	3720      	adds	r7, #32
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	0801e530 	.word	0x0801e530
 8012210:	0801e71c 	.word	0x0801e71c
 8012214:	0801e584 	.word	0x0801e584
 8012218:	0801e73c 	.word	0x0801e73c
 801221c:	0801e75c 	.word	0x0801e75c
 8012220:	0801e780 	.word	0x0801e780
 8012224:	0801e7a4 	.word	0x0801e7a4
 8012228:	0801e7c8 	.word	0x0801e7c8

0801222c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b086      	sub	sp, #24
 8012230:	af00      	add	r7, sp, #0
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	60b9      	str	r1, [r7, #8]
 8012236:	4613      	mov	r3, r2
 8012238:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d101      	bne.n	8012244 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012240:	4b39      	ldr	r3, [pc, #228]	; (8012328 <udp_bind+0xfc>)
 8012242:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d109      	bne.n	801225e <udp_bind+0x32>
 801224a:	4b38      	ldr	r3, [pc, #224]	; (801232c <udp_bind+0x100>)
 801224c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012250:	4937      	ldr	r1, [pc, #220]	; (8012330 <udp_bind+0x104>)
 8012252:	4838      	ldr	r0, [pc, #224]	; (8012334 <udp_bind+0x108>)
 8012254:	f004 ffb6 	bl	80171c4 <iprintf>
 8012258:	f06f 030f 	mvn.w	r3, #15
 801225c:	e060      	b.n	8012320 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801225e:	2300      	movs	r3, #0
 8012260:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012262:	4b35      	ldr	r3, [pc, #212]	; (8012338 <udp_bind+0x10c>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	617b      	str	r3, [r7, #20]
 8012268:	e009      	b.n	801227e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801226a:	68fa      	ldr	r2, [r7, #12]
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	429a      	cmp	r2, r3
 8012270:	d102      	bne.n	8012278 <udp_bind+0x4c>
      rebind = 1;
 8012272:	2301      	movs	r3, #1
 8012274:	74fb      	strb	r3, [r7, #19]
      break;
 8012276:	e005      	b.n	8012284 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	617b      	str	r3, [r7, #20]
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d1f2      	bne.n	801226a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012284:	88fb      	ldrh	r3, [r7, #6]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d109      	bne.n	801229e <udp_bind+0x72>
    port = udp_new_port();
 801228a:	f7ff fcc1 	bl	8011c10 <udp_new_port>
 801228e:	4603      	mov	r3, r0
 8012290:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012292:	88fb      	ldrh	r3, [r7, #6]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d12c      	bne.n	80122f2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012298:	f06f 0307 	mvn.w	r3, #7
 801229c:	e040      	b.n	8012320 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801229e:	4b26      	ldr	r3, [pc, #152]	; (8012338 <udp_bind+0x10c>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	617b      	str	r3, [r7, #20]
 80122a4:	e022      	b.n	80122ec <udp_bind+0xc0>
      if (pcb != ipcb) {
 80122a6:	68fa      	ldr	r2, [r7, #12]
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d01b      	beq.n	80122e6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	8a5b      	ldrh	r3, [r3, #18]
 80122b2:	88fa      	ldrh	r2, [r7, #6]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d116      	bne.n	80122e6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	681a      	ldr	r2, [r3, #0]
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d00d      	beq.n	80122e0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80122c4:	68bb      	ldr	r3, [r7, #8]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d00a      	beq.n	80122e0 <udp_bind+0xb4>
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d006      	beq.n	80122e0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80122d2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d003      	beq.n	80122e0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d102      	bne.n	80122e6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80122e0:	f06f 0307 	mvn.w	r3, #7
 80122e4:	e01c      	b.n	8012320 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	68db      	ldr	r3, [r3, #12]
 80122ea:	617b      	str	r3, [r7, #20]
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d1d9      	bne.n	80122a6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d002      	beq.n	80122fe <udp_bind+0xd2>
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	e000      	b.n	8012300 <udp_bind+0xd4>
 80122fe:	2300      	movs	r3, #0
 8012300:	68fa      	ldr	r2, [r7, #12]
 8012302:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	88fa      	ldrh	r2, [r7, #6]
 8012308:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801230a:	7cfb      	ldrb	r3, [r7, #19]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d106      	bne.n	801231e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012310:	4b09      	ldr	r3, [pc, #36]	; (8012338 <udp_bind+0x10c>)
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012318:	4a07      	ldr	r2, [pc, #28]	; (8012338 <udp_bind+0x10c>)
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801231e:	2300      	movs	r3, #0
}
 8012320:	4618      	mov	r0, r3
 8012322:	3718      	adds	r7, #24
 8012324:	46bd      	mov	sp, r7
 8012326:	bd80      	pop	{r7, pc}
 8012328:	0803233c 	.word	0x0803233c
 801232c:	0801e530 	.word	0x0801e530
 8012330:	0801e7f8 	.word	0x0801e7f8
 8012334:	0801e584 	.word	0x0801e584
 8012338:	2000d650 	.word	0x2000d650

0801233c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b086      	sub	sp, #24
 8012340:	af00      	add	r7, sp, #0
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	4613      	mov	r3, r2
 8012348:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d109      	bne.n	8012364 <udp_connect+0x28>
 8012350:	4b2c      	ldr	r3, [pc, #176]	; (8012404 <udp_connect+0xc8>)
 8012352:	f240 4235 	movw	r2, #1077	; 0x435
 8012356:	492c      	ldr	r1, [pc, #176]	; (8012408 <udp_connect+0xcc>)
 8012358:	482c      	ldr	r0, [pc, #176]	; (801240c <udp_connect+0xd0>)
 801235a:	f004 ff33 	bl	80171c4 <iprintf>
 801235e:	f06f 030f 	mvn.w	r3, #15
 8012362:	e04b      	b.n	80123fc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d109      	bne.n	801237e <udp_connect+0x42>
 801236a:	4b26      	ldr	r3, [pc, #152]	; (8012404 <udp_connect+0xc8>)
 801236c:	f240 4236 	movw	r2, #1078	; 0x436
 8012370:	4927      	ldr	r1, [pc, #156]	; (8012410 <udp_connect+0xd4>)
 8012372:	4826      	ldr	r0, [pc, #152]	; (801240c <udp_connect+0xd0>)
 8012374:	f004 ff26 	bl	80171c4 <iprintf>
 8012378:	f06f 030f 	mvn.w	r3, #15
 801237c:	e03e      	b.n	80123fc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	8a5b      	ldrh	r3, [r3, #18]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d10f      	bne.n	80123a6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012386:	68f9      	ldr	r1, [r7, #12]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	8a5b      	ldrh	r3, [r3, #18]
 801238c:	461a      	mov	r2, r3
 801238e:	68f8      	ldr	r0, [r7, #12]
 8012390:	f7ff ff4c 	bl	801222c <udp_bind>
 8012394:	4603      	mov	r3, r0
 8012396:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012398:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d002      	beq.n	80123a6 <udp_connect+0x6a>
      return err;
 80123a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80123a4:	e02a      	b.n	80123fc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <udp_connect+0x76>
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	e000      	b.n	80123b4 <udp_connect+0x78>
 80123b2:	2300      	movs	r3, #0
 80123b4:	68fa      	ldr	r2, [r7, #12]
 80123b6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	88fa      	ldrh	r2, [r7, #6]
 80123bc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	7c1b      	ldrb	r3, [r3, #16]
 80123c2:	f043 0304 	orr.w	r3, r3, #4
 80123c6:	b2da      	uxtb	r2, r3
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123cc:	4b11      	ldr	r3, [pc, #68]	; (8012414 <udp_connect+0xd8>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	617b      	str	r3, [r7, #20]
 80123d2:	e008      	b.n	80123e6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80123d4:	68fa      	ldr	r2, [r7, #12]
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d101      	bne.n	80123e0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80123dc:	2300      	movs	r3, #0
 80123de:	e00d      	b.n	80123fc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	68db      	ldr	r3, [r3, #12]
 80123e4:	617b      	str	r3, [r7, #20]
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d1f3      	bne.n	80123d4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80123ec:	4b09      	ldr	r3, [pc, #36]	; (8012414 <udp_connect+0xd8>)
 80123ee:	681a      	ldr	r2, [r3, #0]
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80123f4:	4a07      	ldr	r2, [pc, #28]	; (8012414 <udp_connect+0xd8>)
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80123fa:	2300      	movs	r3, #0
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3718      	adds	r7, #24
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	0801e530 	.word	0x0801e530
 8012408:	0801e810 	.word	0x0801e810
 801240c:	0801e584 	.word	0x0801e584
 8012410:	0801e82c 	.word	0x0801e82c
 8012414:	2000d650 	.word	0x2000d650

08012418 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b084      	sub	sp, #16
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d107      	bne.n	801243a <udp_recv+0x22>
 801242a:	4b08      	ldr	r3, [pc, #32]	; (801244c <udp_recv+0x34>)
 801242c:	f240 428a 	movw	r2, #1162	; 0x48a
 8012430:	4907      	ldr	r1, [pc, #28]	; (8012450 <udp_recv+0x38>)
 8012432:	4808      	ldr	r0, [pc, #32]	; (8012454 <udp_recv+0x3c>)
 8012434:	f004 fec6 	bl	80171c4 <iprintf>
 8012438:	e005      	b.n	8012446 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	68ba      	ldr	r2, [r7, #8]
 801243e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	687a      	ldr	r2, [r7, #4]
 8012444:	61da      	str	r2, [r3, #28]
}
 8012446:	3710      	adds	r7, #16
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}
 801244c:	0801e530 	.word	0x0801e530
 8012450:	0801e864 	.word	0x0801e864
 8012454:	0801e584 	.word	0x0801e584

08012458 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d107      	bne.n	8012476 <udp_remove+0x1e>
 8012466:	4b19      	ldr	r3, [pc, #100]	; (80124cc <udp_remove+0x74>)
 8012468:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801246c:	4918      	ldr	r1, [pc, #96]	; (80124d0 <udp_remove+0x78>)
 801246e:	4819      	ldr	r0, [pc, #100]	; (80124d4 <udp_remove+0x7c>)
 8012470:	f004 fea8 	bl	80171c4 <iprintf>
 8012474:	e026      	b.n	80124c4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012476:	4b18      	ldr	r3, [pc, #96]	; (80124d8 <udp_remove+0x80>)
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	429a      	cmp	r2, r3
 801247e:	d105      	bne.n	801248c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012480:	4b15      	ldr	r3, [pc, #84]	; (80124d8 <udp_remove+0x80>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	68db      	ldr	r3, [r3, #12]
 8012486:	4a14      	ldr	r2, [pc, #80]	; (80124d8 <udp_remove+0x80>)
 8012488:	6013      	str	r3, [r2, #0]
 801248a:	e017      	b.n	80124bc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801248c:	4b12      	ldr	r3, [pc, #72]	; (80124d8 <udp_remove+0x80>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	60fb      	str	r3, [r7, #12]
 8012492:	e010      	b.n	80124b6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d009      	beq.n	80124b0 <udp_remove+0x58>
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	68db      	ldr	r3, [r3, #12]
 80124a0:	687a      	ldr	r2, [r7, #4]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d104      	bne.n	80124b0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	68da      	ldr	r2, [r3, #12]
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	60da      	str	r2, [r3, #12]
        break;
 80124ae:	e005      	b.n	80124bc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	60fb      	str	r3, [r7, #12]
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d1eb      	bne.n	8012494 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80124bc:	6879      	ldr	r1, [r7, #4]
 80124be:	2000      	movs	r0, #0
 80124c0:	f7f8 f86e 	bl	800a5a0 <memp_free>
}
 80124c4:	3710      	adds	r7, #16
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	bf00      	nop
 80124cc:	0801e530 	.word	0x0801e530
 80124d0:	0801e87c 	.word	0x0801e87c
 80124d4:	0801e584 	.word	0x0801e584
 80124d8:	2000d650 	.word	0x2000d650

080124dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80124e2:	2000      	movs	r0, #0
 80124e4:	f7f8 f810 	bl	800a508 <memp_malloc>
 80124e8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d007      	beq.n	8012500 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80124f0:	2220      	movs	r2, #32
 80124f2:	2100      	movs	r1, #0
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f004 f9f3 	bl	80168e0 <memset>
    pcb->ttl = UDP_TTL;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	22ff      	movs	r2, #255	; 0xff
 80124fe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012500:	687b      	ldr	r3, [r7, #4]
}
 8012502:	4618      	mov	r0, r3
 8012504:	3708      	adds	r7, #8
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}
	...

0801250c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801250c:	b480      	push	{r7}
 801250e:	b085      	sub	sp, #20
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
 8012514:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d01e      	beq.n	801255a <udp_netif_ip_addr_changed+0x4e>
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d01a      	beq.n	801255a <udp_netif_ip_addr_changed+0x4e>
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d017      	beq.n	801255a <udp_netif_ip_addr_changed+0x4e>
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	2b00      	cmp	r3, #0
 8012530:	d013      	beq.n	801255a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012532:	4b0d      	ldr	r3, [pc, #52]	; (8012568 <udp_netif_ip_addr_changed+0x5c>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	60fb      	str	r3, [r7, #12]
 8012538:	e00c      	b.n	8012554 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	681a      	ldr	r2, [r3, #0]
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	429a      	cmp	r2, r3
 8012544:	d103      	bne.n	801254e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	681a      	ldr	r2, [r3, #0]
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	68db      	ldr	r3, [r3, #12]
 8012552:	60fb      	str	r3, [r7, #12]
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d1ef      	bne.n	801253a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801255a:	bf00      	nop
 801255c:	3714      	adds	r7, #20
 801255e:	46bd      	mov	sp, r7
 8012560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012564:	4770      	bx	lr
 8012566:	bf00      	nop
 8012568:	2000d650 	.word	0x2000d650

0801256c <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801256c:	b480      	push	{r7}
 801256e:	b083      	sub	sp, #12
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
}
 8012574:	bf00      	nop
 8012576:	370c      	adds	r7, #12
 8012578:	46bd      	mov	sp, r7
 801257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257e:	4770      	bx	lr

08012580 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012580:	b580      	push	{r7, lr}
 8012582:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012584:	4b20      	ldr	r3, [pc, #128]	; (8012608 <dhcp_inc_pcb_refcount+0x88>)
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d133      	bne.n	80125f4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801258c:	4b1f      	ldr	r3, [pc, #124]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d005      	beq.n	80125a0 <dhcp_inc_pcb_refcount+0x20>
 8012594:	4b1e      	ldr	r3, [pc, #120]	; (8012610 <dhcp_inc_pcb_refcount+0x90>)
 8012596:	22e5      	movs	r2, #229	; 0xe5
 8012598:	491e      	ldr	r1, [pc, #120]	; (8012614 <dhcp_inc_pcb_refcount+0x94>)
 801259a:	481f      	ldr	r0, [pc, #124]	; (8012618 <dhcp_inc_pcb_refcount+0x98>)
 801259c:	f004 fe12 	bl	80171c4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80125a0:	f7ff ff9c 	bl	80124dc <udp_new>
 80125a4:	4603      	mov	r3, r0
 80125a6:	4a19      	ldr	r2, [pc, #100]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125a8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80125aa:	4b18      	ldr	r3, [pc, #96]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d102      	bne.n	80125b8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80125b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125b6:	e024      	b.n	8012602 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80125b8:	4b14      	ldr	r3, [pc, #80]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	7a5a      	ldrb	r2, [r3, #9]
 80125be:	4b13      	ldr	r3, [pc, #76]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	f042 0220 	orr.w	r2, r2, #32
 80125c6:	b2d2      	uxtb	r2, r2
 80125c8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80125ca:	4b10      	ldr	r3, [pc, #64]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2244      	movs	r2, #68	; 0x44
 80125d0:	4912      	ldr	r1, [pc, #72]	; (801261c <dhcp_inc_pcb_refcount+0x9c>)
 80125d2:	4618      	mov	r0, r3
 80125d4:	f7ff fe2a 	bl	801222c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80125d8:	4b0c      	ldr	r3, [pc, #48]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	2243      	movs	r2, #67	; 0x43
 80125de:	490f      	ldr	r1, [pc, #60]	; (801261c <dhcp_inc_pcb_refcount+0x9c>)
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7ff feab 	bl	801233c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80125e6:	4b09      	ldr	r3, [pc, #36]	; (801260c <dhcp_inc_pcb_refcount+0x8c>)
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	2200      	movs	r2, #0
 80125ec:	490c      	ldr	r1, [pc, #48]	; (8012620 <dhcp_inc_pcb_refcount+0xa0>)
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7ff ff12 	bl	8012418 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80125f4:	4b04      	ldr	r3, [pc, #16]	; (8012608 <dhcp_inc_pcb_refcount+0x88>)
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	3301      	adds	r3, #1
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	4b02      	ldr	r3, [pc, #8]	; (8012608 <dhcp_inc_pcb_refcount+0x88>)
 80125fe:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012600:	2300      	movs	r3, #0
}
 8012602:	4618      	mov	r0, r3
 8012604:	bd80      	pop	{r7, pc}
 8012606:	bf00      	nop
 8012608:	20001258 	.word	0x20001258
 801260c:	20001254 	.word	0x20001254
 8012610:	0801e894 	.word	0x0801e894
 8012614:	0801e8cc 	.word	0x0801e8cc
 8012618:	0801e8f4 	.word	0x0801e8f4
 801261c:	0803233c 	.word	0x0803233c
 8012620:	08013e3d 	.word	0x08013e3d

08012624 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012628:	4b0e      	ldr	r3, [pc, #56]	; (8012664 <dhcp_dec_pcb_refcount+0x40>)
 801262a:	781b      	ldrb	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d105      	bne.n	801263c <dhcp_dec_pcb_refcount+0x18>
 8012630:	4b0d      	ldr	r3, [pc, #52]	; (8012668 <dhcp_dec_pcb_refcount+0x44>)
 8012632:	22ff      	movs	r2, #255	; 0xff
 8012634:	490d      	ldr	r1, [pc, #52]	; (801266c <dhcp_dec_pcb_refcount+0x48>)
 8012636:	480e      	ldr	r0, [pc, #56]	; (8012670 <dhcp_dec_pcb_refcount+0x4c>)
 8012638:	f004 fdc4 	bl	80171c4 <iprintf>
  dhcp_pcb_refcount--;
 801263c:	4b09      	ldr	r3, [pc, #36]	; (8012664 <dhcp_dec_pcb_refcount+0x40>)
 801263e:	781b      	ldrb	r3, [r3, #0]
 8012640:	3b01      	subs	r3, #1
 8012642:	b2da      	uxtb	r2, r3
 8012644:	4b07      	ldr	r3, [pc, #28]	; (8012664 <dhcp_dec_pcb_refcount+0x40>)
 8012646:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012648:	4b06      	ldr	r3, [pc, #24]	; (8012664 <dhcp_dec_pcb_refcount+0x40>)
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d107      	bne.n	8012660 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012650:	4b08      	ldr	r3, [pc, #32]	; (8012674 <dhcp_dec_pcb_refcount+0x50>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4618      	mov	r0, r3
 8012656:	f7ff feff 	bl	8012458 <udp_remove>
    dhcp_pcb = NULL;
 801265a:	4b06      	ldr	r3, [pc, #24]	; (8012674 <dhcp_dec_pcb_refcount+0x50>)
 801265c:	2200      	movs	r2, #0
 801265e:	601a      	str	r2, [r3, #0]
  }
}
 8012660:	bf00      	nop
 8012662:	bd80      	pop	{r7, pc}
 8012664:	20001258 	.word	0x20001258
 8012668:	0801e894 	.word	0x0801e894
 801266c:	0801e91c 	.word	0x0801e91c
 8012670:	0801e8f4 	.word	0x0801e8f4
 8012674:	20001254 	.word	0x20001254

08012678 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012684:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012686:	210c      	movs	r1, #12
 8012688:	68f8      	ldr	r0, [r7, #12]
 801268a:	f001 f819 	bl	80136c0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801268e:	4b06      	ldr	r3, [pc, #24]	; (80126a8 <dhcp_handle_nak+0x30>)
 8012690:	4a05      	ldr	r2, [pc, #20]	; (80126a8 <dhcp_handle_nak+0x30>)
 8012692:	4905      	ldr	r1, [pc, #20]	; (80126a8 <dhcp_handle_nak+0x30>)
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7f8 f925 	bl	800a8e4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f000 fc0c 	bl	8012eb8 <dhcp_discover>
}
 80126a0:	bf00      	nop
 80126a2:	3710      	adds	r7, #16
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	0803233c 	.word	0x0803233c

080126ac <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b084      	sub	sp, #16
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126b8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80126ba:	2108      	movs	r1, #8
 80126bc:	68f8      	ldr	r0, [r7, #12]
 80126be:	f000 ffff 	bl	80136c0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	331c      	adds	r3, #28
 80126c6:	2200      	movs	r2, #0
 80126c8:	4619      	mov	r1, r3
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f002 fb00 	bl	8014cd0 <etharp_query>
 80126d0:	4603      	mov	r3, r0
 80126d2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	799b      	ldrb	r3, [r3, #6]
 80126d8:	2bff      	cmp	r3, #255	; 0xff
 80126da:	d005      	beq.n	80126e8 <dhcp_check+0x3c>
    dhcp->tries++;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	799b      	ldrb	r3, [r3, #6]
 80126e0:	3301      	adds	r3, #1
 80126e2:	b2da      	uxtb	r2, r3
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80126e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80126ec:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80126ee:	893b      	ldrh	r3, [r7, #8]
 80126f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80126f4:	4a06      	ldr	r2, [pc, #24]	; (8012710 <dhcp_check+0x64>)
 80126f6:	fb82 1203 	smull	r1, r2, r2, r3
 80126fa:	1152      	asrs	r2, r2, #5
 80126fc:	17db      	asrs	r3, r3, #31
 80126fe:	1ad3      	subs	r3, r2, r3
 8012700:	b29a      	uxth	r2, r3
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012706:	bf00      	nop
 8012708:	3710      	adds	r7, #16
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}
 801270e:	bf00      	nop
 8012710:	10624dd3 	.word	0x10624dd3

08012714 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b084      	sub	sp, #16
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
 801271c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012722:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012724:	4b0c      	ldr	r3, [pc, #48]	; (8012758 <dhcp_handle_offer+0x44>)
 8012726:	789b      	ldrb	r3, [r3, #2]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d011      	beq.n	8012750 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2200      	movs	r2, #0
 8012730:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012732:	4b0a      	ldr	r3, [pc, #40]	; (801275c <dhcp_handle_offer+0x48>)
 8012734:	689b      	ldr	r3, [r3, #8]
 8012736:	4618      	mov	r0, r3
 8012738:	f7f7 f9c7 	bl	8009aca <lwip_htonl>
 801273c:	4602      	mov	r2, r0
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	691a      	ldr	r2, [r3, #16]
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 f808 	bl	8012760 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012750:	bf00      	nop
 8012752:	3710      	adds	r7, #16
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	2000d654 	.word	0x2000d654
 801275c:	2000d65c 	.word	0x2000d65c

08012760 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012760:	b5b0      	push	{r4, r5, r7, lr}
 8012762:	b08a      	sub	sp, #40	; 0x28
 8012764:	af02      	add	r7, sp, #8
 8012766:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d109      	bne.n	8012782 <dhcp_select+0x22>
 801276e:	4b71      	ldr	r3, [pc, #452]	; (8012934 <dhcp_select+0x1d4>)
 8012770:	f240 1277 	movw	r2, #375	; 0x177
 8012774:	4970      	ldr	r1, [pc, #448]	; (8012938 <dhcp_select+0x1d8>)
 8012776:	4871      	ldr	r0, [pc, #452]	; (801293c <dhcp_select+0x1dc>)
 8012778:	f004 fd24 	bl	80171c4 <iprintf>
 801277c:	f06f 030f 	mvn.w	r3, #15
 8012780:	e0d3      	b.n	801292a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012786:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012788:	69bb      	ldr	r3, [r7, #24]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d109      	bne.n	80127a2 <dhcp_select+0x42>
 801278e:	4b69      	ldr	r3, [pc, #420]	; (8012934 <dhcp_select+0x1d4>)
 8012790:	f240 1279 	movw	r2, #377	; 0x179
 8012794:	496a      	ldr	r1, [pc, #424]	; (8012940 <dhcp_select+0x1e0>)
 8012796:	4869      	ldr	r0, [pc, #420]	; (801293c <dhcp_select+0x1dc>)
 8012798:	f004 fd14 	bl	80171c4 <iprintf>
 801279c:	f06f 0305 	mvn.w	r3, #5
 80127a0:	e0c3      	b.n	801292a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80127a2:	2101      	movs	r1, #1
 80127a4:	69b8      	ldr	r0, [r7, #24]
 80127a6:	f000 ff8b 	bl	80136c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80127aa:	f107 030c 	add.w	r3, r7, #12
 80127ae:	2203      	movs	r2, #3
 80127b0:	69b9      	ldr	r1, [r7, #24]
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f001 fc10 	bl	8013fd8 <dhcp_create_msg>
 80127b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80127ba:	697b      	ldr	r3, [r7, #20]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f000 8085 	beq.w	80128cc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80127c2:	697b      	ldr	r3, [r7, #20]
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80127c8:	89b8      	ldrh	r0, [r7, #12]
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80127d0:	2302      	movs	r3, #2
 80127d2:	2239      	movs	r2, #57	; 0x39
 80127d4:	f000 ff8e 	bl	80136f4 <dhcp_option>
 80127d8:	4603      	mov	r3, r0
 80127da:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80127dc:	89b8      	ldrh	r0, [r7, #12]
 80127de:	693b      	ldr	r3, [r7, #16]
 80127e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80127e8:	461a      	mov	r2, r3
 80127ea:	f000 ffdd 	bl	80137a8 <dhcp_option_short>
 80127ee:	4603      	mov	r3, r0
 80127f0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80127f2:	89b8      	ldrh	r0, [r7, #12]
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80127fa:	2304      	movs	r3, #4
 80127fc:	2232      	movs	r2, #50	; 0x32
 80127fe:	f000 ff79 	bl	80136f4 <dhcp_option>
 8012802:	4603      	mov	r3, r0
 8012804:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012806:	89bc      	ldrh	r4, [r7, #12]
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801280e:	69bb      	ldr	r3, [r7, #24]
 8012810:	69db      	ldr	r3, [r3, #28]
 8012812:	4618      	mov	r0, r3
 8012814:	f7f7 f959 	bl	8009aca <lwip_htonl>
 8012818:	4603      	mov	r3, r0
 801281a:	461a      	mov	r2, r3
 801281c:	4629      	mov	r1, r5
 801281e:	4620      	mov	r0, r4
 8012820:	f000 fff4 	bl	801380c <dhcp_option_long>
 8012824:	4603      	mov	r3, r0
 8012826:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012828:	89b8      	ldrh	r0, [r7, #12]
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012830:	2304      	movs	r3, #4
 8012832:	2236      	movs	r2, #54	; 0x36
 8012834:	f000 ff5e 	bl	80136f4 <dhcp_option>
 8012838:	4603      	mov	r3, r0
 801283a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801283c:	89bc      	ldrh	r4, [r7, #12]
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012844:	69bb      	ldr	r3, [r7, #24]
 8012846:	699b      	ldr	r3, [r3, #24]
 8012848:	4618      	mov	r0, r3
 801284a:	f7f7 f93e 	bl	8009aca <lwip_htonl>
 801284e:	4603      	mov	r3, r0
 8012850:	461a      	mov	r2, r3
 8012852:	4629      	mov	r1, r5
 8012854:	4620      	mov	r0, r4
 8012856:	f000 ffd9 	bl	801380c <dhcp_option_long>
 801285a:	4603      	mov	r3, r0
 801285c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801285e:	89b8      	ldrh	r0, [r7, #12]
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012866:	2303      	movs	r3, #3
 8012868:	2237      	movs	r2, #55	; 0x37
 801286a:	f000 ff43 	bl	80136f4 <dhcp_option>
 801286e:	4603      	mov	r3, r0
 8012870:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012872:	2300      	movs	r3, #0
 8012874:	77bb      	strb	r3, [r7, #30]
 8012876:	e00e      	b.n	8012896 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012878:	89b8      	ldrh	r0, [r7, #12]
 801287a:	693b      	ldr	r3, [r7, #16]
 801287c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012880:	7fbb      	ldrb	r3, [r7, #30]
 8012882:	4a30      	ldr	r2, [pc, #192]	; (8012944 <dhcp_select+0x1e4>)
 8012884:	5cd3      	ldrb	r3, [r2, r3]
 8012886:	461a      	mov	r2, r3
 8012888:	f000 ff68 	bl	801375c <dhcp_option_byte>
 801288c:	4603      	mov	r3, r0
 801288e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012890:	7fbb      	ldrb	r3, [r7, #30]
 8012892:	3301      	adds	r3, #1
 8012894:	77bb      	strb	r3, [r7, #30]
 8012896:	7fbb      	ldrb	r3, [r7, #30]
 8012898:	2b02      	cmp	r3, #2
 801289a:	d9ed      	bls.n	8012878 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801289c:	89b8      	ldrh	r0, [r7, #12]
 801289e:	693b      	ldr	r3, [r7, #16]
 80128a0:	33f0      	adds	r3, #240	; 0xf0
 80128a2:	697a      	ldr	r2, [r7, #20]
 80128a4:	4619      	mov	r1, r3
 80128a6:	f001 fc6d 	bl	8014184 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80128aa:	4b27      	ldr	r3, [pc, #156]	; (8012948 <dhcp_select+0x1e8>)
 80128ac:	6818      	ldr	r0, [r3, #0]
 80128ae:	4b27      	ldr	r3, [pc, #156]	; (801294c <dhcp_select+0x1ec>)
 80128b0:	9301      	str	r3, [sp, #4]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	2343      	movs	r3, #67	; 0x43
 80128b8:	4a25      	ldr	r2, [pc, #148]	; (8012950 <dhcp_select+0x1f0>)
 80128ba:	6979      	ldr	r1, [r7, #20]
 80128bc:	f7ff fbd0 	bl	8012060 <udp_sendto_if_src>
 80128c0:	4603      	mov	r3, r0
 80128c2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80128c4:	6978      	ldr	r0, [r7, #20]
 80128c6:	f7f8 fc85 	bl	800b1d4 <pbuf_free>
 80128ca:	e001      	b.n	80128d0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80128cc:	23ff      	movs	r3, #255	; 0xff
 80128ce:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80128d0:	69bb      	ldr	r3, [r7, #24]
 80128d2:	799b      	ldrb	r3, [r3, #6]
 80128d4:	2bff      	cmp	r3, #255	; 0xff
 80128d6:	d005      	beq.n	80128e4 <dhcp_select+0x184>
    dhcp->tries++;
 80128d8:	69bb      	ldr	r3, [r7, #24]
 80128da:	799b      	ldrb	r3, [r3, #6]
 80128dc:	3301      	adds	r3, #1
 80128de:	b2da      	uxtb	r2, r3
 80128e0:	69bb      	ldr	r3, [r7, #24]
 80128e2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80128e4:	69bb      	ldr	r3, [r7, #24]
 80128e6:	799b      	ldrb	r3, [r3, #6]
 80128e8:	2b05      	cmp	r3, #5
 80128ea:	d80d      	bhi.n	8012908 <dhcp_select+0x1a8>
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	799b      	ldrb	r3, [r3, #6]
 80128f0:	461a      	mov	r2, r3
 80128f2:	2301      	movs	r3, #1
 80128f4:	4093      	lsls	r3, r2
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	461a      	mov	r2, r3
 80128fa:	0152      	lsls	r2, r2, #5
 80128fc:	1ad2      	subs	r2, r2, r3
 80128fe:	0092      	lsls	r2, r2, #2
 8012900:	4413      	add	r3, r2
 8012902:	00db      	lsls	r3, r3, #3
 8012904:	b29b      	uxth	r3, r3
 8012906:	e001      	b.n	801290c <dhcp_select+0x1ac>
 8012908:	f64e 2360 	movw	r3, #60000	; 0xea60
 801290c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801290e:	89fb      	ldrh	r3, [r7, #14]
 8012910:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012914:	4a0f      	ldr	r2, [pc, #60]	; (8012954 <dhcp_select+0x1f4>)
 8012916:	fb82 1203 	smull	r1, r2, r2, r3
 801291a:	1152      	asrs	r2, r2, #5
 801291c:	17db      	asrs	r3, r3, #31
 801291e:	1ad3      	subs	r3, r2, r3
 8012920:	b29a      	uxth	r2, r3
 8012922:	69bb      	ldr	r3, [r7, #24]
 8012924:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012926:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801292a:	4618      	mov	r0, r3
 801292c:	3720      	adds	r7, #32
 801292e:	46bd      	mov	sp, r7
 8012930:	bdb0      	pop	{r4, r5, r7, pc}
 8012932:	bf00      	nop
 8012934:	0801e894 	.word	0x0801e894
 8012938:	0801e940 	.word	0x0801e940
 801293c:	0801e8f4 	.word	0x0801e8f4
 8012940:	0801e95c 	.word	0x0801e95c
 8012944:	200005c4 	.word	0x200005c4
 8012948:	20001254 	.word	0x20001254
 801294c:	0803233c 	.word	0x0803233c
 8012950:	08032340 	.word	0x08032340
 8012954:	10624dd3 	.word	0x10624dd3

08012958 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012958:	b580      	push	{r7, lr}
 801295a:	b082      	sub	sp, #8
 801295c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801295e:	4b27      	ldr	r3, [pc, #156]	; (80129fc <dhcp_coarse_tmr+0xa4>)
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	607b      	str	r3, [r7, #4]
 8012964:	e042      	b.n	80129ec <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801296a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d039      	beq.n	80129e6 <dhcp_coarse_tmr+0x8e>
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	795b      	ldrb	r3, [r3, #5]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d035      	beq.n	80129e6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	8a9b      	ldrh	r3, [r3, #20]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d012      	beq.n	80129a8 <dhcp_coarse_tmr+0x50>
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	8a5b      	ldrh	r3, [r3, #18]
 8012986:	3301      	adds	r3, #1
 8012988:	b29a      	uxth	r2, r3
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	825a      	strh	r2, [r3, #18]
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	8a5a      	ldrh	r2, [r3, #18]
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	8a9b      	ldrh	r3, [r3, #20]
 8012996:	429a      	cmp	r2, r3
 8012998:	d106      	bne.n	80129a8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f000 fdf6 	bl	801358c <dhcp_release_and_stop>
        dhcp_start(netif);
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f000 f969 	bl	8012c78 <dhcp_start>
 80129a6:	e01e      	b.n	80129e6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	8a1b      	ldrh	r3, [r3, #16]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d00b      	beq.n	80129c8 <dhcp_coarse_tmr+0x70>
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	8a1b      	ldrh	r3, [r3, #16]
 80129b4:	1e5a      	subs	r2, r3, #1
 80129b6:	b291      	uxth	r1, r2
 80129b8:	683a      	ldr	r2, [r7, #0]
 80129ba:	8211      	strh	r1, [r2, #16]
 80129bc:	2b01      	cmp	r3, #1
 80129be:	d103      	bne.n	80129c8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80129c0:	6878      	ldr	r0, [r7, #4]
 80129c2:	f000 f8c6 	bl	8012b52 <dhcp_t2_timeout>
 80129c6:	e00e      	b.n	80129e6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	89db      	ldrh	r3, [r3, #14]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d00a      	beq.n	80129e6 <dhcp_coarse_tmr+0x8e>
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	89db      	ldrh	r3, [r3, #14]
 80129d4:	1e5a      	subs	r2, r3, #1
 80129d6:	b291      	uxth	r1, r2
 80129d8:	683a      	ldr	r2, [r7, #0]
 80129da:	81d1      	strh	r1, [r2, #14]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d102      	bne.n	80129e6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f000 f888 	bl	8012af6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	607b      	str	r3, [r7, #4]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1b9      	bne.n	8012966 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80129f2:	bf00      	nop
 80129f4:	bf00      	nop
 80129f6:	3708      	adds	r7, #8
 80129f8:	46bd      	mov	sp, r7
 80129fa:	bd80      	pop	{r7, pc}
 80129fc:	2000d628 	.word	0x2000d628

08012a00 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b082      	sub	sp, #8
 8012a04:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012a06:	4b16      	ldr	r3, [pc, #88]	; (8012a60 <dhcp_fine_tmr+0x60>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	607b      	str	r3, [r7, #4]
 8012a0c:	e020      	b.n	8012a50 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a12:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d017      	beq.n	8012a4a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	891b      	ldrh	r3, [r3, #8]
 8012a1e:	2b01      	cmp	r3, #1
 8012a20:	d906      	bls.n	8012a30 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	891b      	ldrh	r3, [r3, #8]
 8012a26:	3b01      	subs	r3, #1
 8012a28:	b29a      	uxth	r2, r3
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	811a      	strh	r2, [r3, #8]
 8012a2e:	e00c      	b.n	8012a4a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	891b      	ldrh	r3, [r3, #8]
 8012a34:	2b01      	cmp	r3, #1
 8012a36:	d108      	bne.n	8012a4a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	891b      	ldrh	r3, [r3, #8]
 8012a3c:	3b01      	subs	r3, #1
 8012a3e:	b29a      	uxth	r2, r3
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f000 f80d 	bl	8012a64 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	607b      	str	r3, [r7, #4]
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d1db      	bne.n	8012a0e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012a56:	bf00      	nop
 8012a58:	bf00      	nop
 8012a5a:	3708      	adds	r7, #8
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}
 8012a60:	2000d628 	.word	0x2000d628

08012a64 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a70:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	795b      	ldrb	r3, [r3, #5]
 8012a76:	2b0c      	cmp	r3, #12
 8012a78:	d003      	beq.n	8012a82 <dhcp_timeout+0x1e>
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	795b      	ldrb	r3, [r3, #5]
 8012a7e:	2b06      	cmp	r3, #6
 8012a80:	d103      	bne.n	8012a8a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f000 fa18 	bl	8012eb8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012a88:	e031      	b.n	8012aee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	795b      	ldrb	r3, [r3, #5]
 8012a8e:	2b01      	cmp	r3, #1
 8012a90:	d10e      	bne.n	8012ab0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	799b      	ldrb	r3, [r3, #6]
 8012a96:	2b05      	cmp	r3, #5
 8012a98:	d803      	bhi.n	8012aa2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7ff fe60 	bl	8012760 <dhcp_select>
}
 8012aa0:	e025      	b.n	8012aee <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f000 fd72 	bl	801358c <dhcp_release_and_stop>
      dhcp_start(netif);
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f000 f8e5 	bl	8012c78 <dhcp_start>
}
 8012aae:	e01e      	b.n	8012aee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	795b      	ldrb	r3, [r3, #5]
 8012ab4:	2b08      	cmp	r3, #8
 8012ab6:	d10b      	bne.n	8012ad0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	799b      	ldrb	r3, [r3, #6]
 8012abc:	2b01      	cmp	r3, #1
 8012abe:	d803      	bhi.n	8012ac8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7ff fdf3 	bl	80126ac <dhcp_check>
}
 8012ac6:	e012      	b.n	8012aee <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f000 fa97 	bl	8012ffc <dhcp_bind>
}
 8012ace:	e00e      	b.n	8012aee <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	795b      	ldrb	r3, [r3, #5]
 8012ad4:	2b03      	cmp	r3, #3
 8012ad6:	d10a      	bne.n	8012aee <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	799b      	ldrb	r3, [r3, #6]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d803      	bhi.n	8012ae8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f000 fc9d 	bl	8013420 <dhcp_reboot>
}
 8012ae6:	e002      	b.n	8012aee <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f000 f9e5 	bl	8012eb8 <dhcp_discover>
}
 8012aee:	bf00      	nop
 8012af0:	3710      	adds	r7, #16
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012af6:	b580      	push	{r7, lr}
 8012af8:	b084      	sub	sp, #16
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b02:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	795b      	ldrb	r3, [r3, #5]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d007      	beq.n	8012b1c <dhcp_t1_timeout+0x26>
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	795b      	ldrb	r3, [r3, #5]
 8012b10:	2b0a      	cmp	r3, #10
 8012b12:	d003      	beq.n	8012b1c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012b18:	2b05      	cmp	r3, #5
 8012b1a:	d116      	bne.n	8012b4a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f000 fb47 	bl	80131b0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	899b      	ldrh	r3, [r3, #12]
 8012b26:	461a      	mov	r2, r3
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	8a5b      	ldrh	r3, [r3, #18]
 8012b2c:	1ad3      	subs	r3, r2, r3
 8012b2e:	2b01      	cmp	r3, #1
 8012b30:	dd0b      	ble.n	8012b4a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	899b      	ldrh	r3, [r3, #12]
 8012b36:	461a      	mov	r2, r3
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	8a5b      	ldrh	r3, [r3, #18]
 8012b3c:	1ad3      	subs	r3, r2, r3
 8012b3e:	0fda      	lsrs	r2, r3, #31
 8012b40:	4413      	add	r3, r2
 8012b42:	105b      	asrs	r3, r3, #1
 8012b44:	b29a      	uxth	r2, r3
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012b4a:	bf00      	nop
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}

08012b52 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012b52:	b580      	push	{r7, lr}
 8012b54:	b084      	sub	sp, #16
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b5e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	795b      	ldrb	r3, [r3, #5]
 8012b64:	2b01      	cmp	r3, #1
 8012b66:	d00b      	beq.n	8012b80 <dhcp_t2_timeout+0x2e>
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	795b      	ldrb	r3, [r3, #5]
 8012b6c:	2b0a      	cmp	r3, #10
 8012b6e:	d007      	beq.n	8012b80 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012b74:	2b05      	cmp	r3, #5
 8012b76:	d003      	beq.n	8012b80 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	795b      	ldrb	r3, [r3, #5]
 8012b7c:	2b04      	cmp	r3, #4
 8012b7e:	d116      	bne.n	8012bae <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f000 fbb1 	bl	80132e8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	8a9b      	ldrh	r3, [r3, #20]
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	8a5b      	ldrh	r3, [r3, #18]
 8012b90:	1ad3      	subs	r3, r2, r3
 8012b92:	2b01      	cmp	r3, #1
 8012b94:	dd0b      	ble.n	8012bae <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	8a9b      	ldrh	r3, [r3, #20]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	8a5b      	ldrh	r3, [r3, #18]
 8012ba0:	1ad3      	subs	r3, r2, r3
 8012ba2:	0fda      	lsrs	r2, r3, #31
 8012ba4:	4413      	add	r3, r2
 8012ba6:	105b      	asrs	r3, r3, #1
 8012ba8:	b29a      	uxth	r2, r3
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8012bae:	bf00      	nop
 8012bb0:	3710      	adds	r7, #16
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}
	...

08012bb8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b084      	sub	sp, #16
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
 8012bc0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012bd4:	4b26      	ldr	r3, [pc, #152]	; (8012c70 <dhcp_handle_ack+0xb8>)
 8012bd6:	78db      	ldrb	r3, [r3, #3]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d003      	beq.n	8012be4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012bdc:	4b25      	ldr	r3, [pc, #148]	; (8012c74 <dhcp_handle_ack+0xbc>)
 8012bde:	68da      	ldr	r2, [r3, #12]
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012be4:	4b22      	ldr	r3, [pc, #136]	; (8012c70 <dhcp_handle_ack+0xb8>)
 8012be6:	791b      	ldrb	r3, [r3, #4]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d004      	beq.n	8012bf6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012bec:	4b21      	ldr	r3, [pc, #132]	; (8012c74 <dhcp_handle_ack+0xbc>)
 8012bee:	691a      	ldr	r2, [r3, #16]
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	62da      	str	r2, [r3, #44]	; 0x2c
 8012bf4:	e004      	b.n	8012c00 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bfa:	085a      	lsrs	r2, r3, #1
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012c00:	4b1b      	ldr	r3, [pc, #108]	; (8012c70 <dhcp_handle_ack+0xb8>)
 8012c02:	795b      	ldrb	r3, [r3, #5]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d004      	beq.n	8012c12 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012c08:	4b1a      	ldr	r3, [pc, #104]	; (8012c74 <dhcp_handle_ack+0xbc>)
 8012c0a:	695a      	ldr	r2, [r3, #20]
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8012c10:	e007      	b.n	8012c22 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012c16:	4613      	mov	r3, r2
 8012c18:	00db      	lsls	r3, r3, #3
 8012c1a:	1a9b      	subs	r3, r3, r2
 8012c1c:	08da      	lsrs	r2, r3, #3
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	691a      	ldr	r2, [r3, #16]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012c2a:	4b11      	ldr	r3, [pc, #68]	; (8012c70 <dhcp_handle_ack+0xb8>)
 8012c2c:	799b      	ldrb	r3, [r3, #6]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d00b      	beq.n	8012c4a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012c32:	4b10      	ldr	r3, [pc, #64]	; (8012c74 <dhcp_handle_ack+0xbc>)
 8012c34:	699b      	ldr	r3, [r3, #24]
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7f6 ff47 	bl	8009aca <lwip_htonl>
 8012c3c:	4602      	mov	r2, r0
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	2201      	movs	r2, #1
 8012c46:	71da      	strb	r2, [r3, #7]
 8012c48:	e002      	b.n	8012c50 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012c50:	4b07      	ldr	r3, [pc, #28]	; (8012c70 <dhcp_handle_ack+0xb8>)
 8012c52:	79db      	ldrb	r3, [r3, #7]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d007      	beq.n	8012c68 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012c58:	4b06      	ldr	r3, [pc, #24]	; (8012c74 <dhcp_handle_ack+0xbc>)
 8012c5a:	69db      	ldr	r3, [r3, #28]
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	f7f6 ff34 	bl	8009aca <lwip_htonl>
 8012c62:	4602      	mov	r2, r0
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012c68:	bf00      	nop
 8012c6a:	3710      	adds	r7, #16
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}
 8012c70:	2000d654 	.word	0x2000d654
 8012c74:	2000d65c 	.word	0x2000d65c

08012c78 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b084      	sub	sp, #16
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d109      	bne.n	8012c9a <dhcp_start+0x22>
 8012c86:	4b37      	ldr	r3, [pc, #220]	; (8012d64 <dhcp_start+0xec>)
 8012c88:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012c8c:	4936      	ldr	r1, [pc, #216]	; (8012d68 <dhcp_start+0xf0>)
 8012c8e:	4837      	ldr	r0, [pc, #220]	; (8012d6c <dhcp_start+0xf4>)
 8012c90:	f004 fa98 	bl	80171c4 <iprintf>
 8012c94:	f06f 030f 	mvn.w	r3, #15
 8012c98:	e060      	b.n	8012d5c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012ca0:	f003 0301 	and.w	r3, r3, #1
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d109      	bne.n	8012cbc <dhcp_start+0x44>
 8012ca8:	4b2e      	ldr	r3, [pc, #184]	; (8012d64 <dhcp_start+0xec>)
 8012caa:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012cae:	4930      	ldr	r1, [pc, #192]	; (8012d70 <dhcp_start+0xf8>)
 8012cb0:	482e      	ldr	r0, [pc, #184]	; (8012d6c <dhcp_start+0xf4>)
 8012cb2:	f004 fa87 	bl	80171c4 <iprintf>
 8012cb6:	f06f 030f 	mvn.w	r3, #15
 8012cba:	e04f      	b.n	8012d5c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cc0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cc6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012cca:	d202      	bcs.n	8012cd2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cd0:	e044      	b.n	8012d5c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d10d      	bne.n	8012cf4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012cd8:	2034      	movs	r0, #52	; 0x34
 8012cda:	f7f7 faa7 	bl	800a22c <mem_malloc>
 8012cde:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d102      	bne.n	8012cec <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cea:	e037      	b.n	8012d5c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	68fa      	ldr	r2, [r7, #12]
 8012cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8012cf2:	e005      	b.n	8012d00 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	791b      	ldrb	r3, [r3, #4]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d001      	beq.n	8012d00 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012cfc:	f7ff fc92 	bl	8012624 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012d00:	2234      	movs	r2, #52	; 0x34
 8012d02:	2100      	movs	r1, #0
 8012d04:	68f8      	ldr	r0, [r7, #12]
 8012d06:	f003 fdeb 	bl	80168e0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012d0a:	f7ff fc39 	bl	8012580 <dhcp_inc_pcb_refcount>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d002      	beq.n	8012d1a <dhcp_start+0xa2>
    return ERR_MEM;
 8012d14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d18:	e020      	b.n	8012d5c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	2201      	movs	r2, #1
 8012d1e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012d26:	f003 0304 	and.w	r3, r3, #4
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d105      	bne.n	8012d3a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012d2e:	2102      	movs	r1, #2
 8012d30:	68f8      	ldr	r0, [r7, #12]
 8012d32:	f000 fcc5 	bl	80136c0 <dhcp_set_state>
    return ERR_OK;
 8012d36:	2300      	movs	r3, #0
 8012d38:	e010      	b.n	8012d5c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f000 f8bc 	bl	8012eb8 <dhcp_discover>
 8012d40:	4603      	mov	r3, r0
 8012d42:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012d44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d005      	beq.n	8012d58 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f000 fc1d 	bl	801358c <dhcp_release_and_stop>
    return ERR_MEM;
 8012d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d56:	e001      	b.n	8012d5c <dhcp_start+0xe4>
  }
  return result;
 8012d58:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3710      	adds	r7, #16
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}
 8012d64:	0801e894 	.word	0x0801e894
 8012d68:	0801e978 	.word	0x0801e978
 8012d6c:	0801e8f4 	.word	0x0801e8f4
 8012d70:	0801e9bc 	.word	0x0801e9bc

08012d74 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b084      	sub	sp, #16
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d107      	bne.n	8012d94 <dhcp_arp_reply+0x20>
 8012d84:	4b0e      	ldr	r3, [pc, #56]	; (8012dc0 <dhcp_arp_reply+0x4c>)
 8012d86:	f240 328b 	movw	r2, #907	; 0x38b
 8012d8a:	490e      	ldr	r1, [pc, #56]	; (8012dc4 <dhcp_arp_reply+0x50>)
 8012d8c:	480e      	ldr	r0, [pc, #56]	; (8012dc8 <dhcp_arp_reply+0x54>)
 8012d8e:	f004 fa19 	bl	80171c4 <iprintf>
 8012d92:	e012      	b.n	8012dba <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d98:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d00c      	beq.n	8012dba <dhcp_arp_reply+0x46>
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	795b      	ldrb	r3, [r3, #5]
 8012da4:	2b08      	cmp	r3, #8
 8012da6:	d108      	bne.n	8012dba <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	681a      	ldr	r2, [r3, #0]
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	69db      	ldr	r3, [r3, #28]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d102      	bne.n	8012dba <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f000 f809 	bl	8012dcc <dhcp_decline>
    }
  }
}
 8012dba:	3710      	adds	r7, #16
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	bd80      	pop	{r7, pc}
 8012dc0:	0801e894 	.word	0x0801e894
 8012dc4:	0801e978 	.word	0x0801e978
 8012dc8:	0801e8f4 	.word	0x0801e8f4

08012dcc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012dcc:	b5b0      	push	{r4, r5, r7, lr}
 8012dce:	b08a      	sub	sp, #40	; 0x28
 8012dd0:	af02      	add	r7, sp, #8
 8012dd2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dd8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012dda:	210c      	movs	r1, #12
 8012ddc:	69b8      	ldr	r0, [r7, #24]
 8012dde:	f000 fc6f 	bl	80136c0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8012de2:	f107 030c 	add.w	r3, r7, #12
 8012de6:	2204      	movs	r2, #4
 8012de8:	69b9      	ldr	r1, [r7, #24]
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f001 f8f4 	bl	8013fd8 <dhcp_create_msg>
 8012df0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d035      	beq.n	8012e64 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	685b      	ldr	r3, [r3, #4]
 8012dfc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012dfe:	89b8      	ldrh	r0, [r7, #12]
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e06:	2304      	movs	r3, #4
 8012e08:	2232      	movs	r2, #50	; 0x32
 8012e0a:	f000 fc73 	bl	80136f4 <dhcp_option>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012e12:	89bc      	ldrh	r4, [r7, #12]
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012e1a:	69bb      	ldr	r3, [r7, #24]
 8012e1c:	69db      	ldr	r3, [r3, #28]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7f6 fe53 	bl	8009aca <lwip_htonl>
 8012e24:	4603      	mov	r3, r0
 8012e26:	461a      	mov	r2, r3
 8012e28:	4629      	mov	r1, r5
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	f000 fcee 	bl	801380c <dhcp_option_long>
 8012e30:	4603      	mov	r3, r0
 8012e32:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012e34:	89b8      	ldrh	r0, [r7, #12]
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	33f0      	adds	r3, #240	; 0xf0
 8012e3a:	697a      	ldr	r2, [r7, #20]
 8012e3c:	4619      	mov	r1, r3
 8012e3e:	f001 f9a1 	bl	8014184 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012e42:	4b19      	ldr	r3, [pc, #100]	; (8012ea8 <dhcp_decline+0xdc>)
 8012e44:	6818      	ldr	r0, [r3, #0]
 8012e46:	4b19      	ldr	r3, [pc, #100]	; (8012eac <dhcp_decline+0xe0>)
 8012e48:	9301      	str	r3, [sp, #4]
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	9300      	str	r3, [sp, #0]
 8012e4e:	2343      	movs	r3, #67	; 0x43
 8012e50:	4a17      	ldr	r2, [pc, #92]	; (8012eb0 <dhcp_decline+0xe4>)
 8012e52:	6979      	ldr	r1, [r7, #20]
 8012e54:	f7ff f904 	bl	8012060 <udp_sendto_if_src>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012e5c:	6978      	ldr	r0, [r7, #20]
 8012e5e:	f7f8 f9b9 	bl	800b1d4 <pbuf_free>
 8012e62:	e001      	b.n	8012e68 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012e64:	23ff      	movs	r3, #255	; 0xff
 8012e66:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012e68:	69bb      	ldr	r3, [r7, #24]
 8012e6a:	799b      	ldrb	r3, [r3, #6]
 8012e6c:	2bff      	cmp	r3, #255	; 0xff
 8012e6e:	d005      	beq.n	8012e7c <dhcp_decline+0xb0>
    dhcp->tries++;
 8012e70:	69bb      	ldr	r3, [r7, #24]
 8012e72:	799b      	ldrb	r3, [r3, #6]
 8012e74:	3301      	adds	r3, #1
 8012e76:	b2da      	uxtb	r2, r3
 8012e78:	69bb      	ldr	r3, [r7, #24]
 8012e7a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8012e7c:	f242 7310 	movw	r3, #10000	; 0x2710
 8012e80:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012e82:	89fb      	ldrh	r3, [r7, #14]
 8012e84:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012e88:	4a0a      	ldr	r2, [pc, #40]	; (8012eb4 <dhcp_decline+0xe8>)
 8012e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8012e8e:	1152      	asrs	r2, r2, #5
 8012e90:	17db      	asrs	r3, r3, #31
 8012e92:	1ad3      	subs	r3, r2, r3
 8012e94:	b29a      	uxth	r2, r3
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012e9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3720      	adds	r7, #32
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	20001254 	.word	0x20001254
 8012eac:	0803233c 	.word	0x0803233c
 8012eb0:	08032340 	.word	0x08032340
 8012eb4:	10624dd3 	.word	0x10624dd3

08012eb8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b08a      	sub	sp, #40	; 0x28
 8012ebc:	af02      	add	r7, sp, #8
 8012ebe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012ed0:	2106      	movs	r1, #6
 8012ed2:	69b8      	ldr	r0, [r7, #24]
 8012ed4:	f000 fbf4 	bl	80136c0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012ed8:	f107 0308 	add.w	r3, r7, #8
 8012edc:	2201      	movs	r2, #1
 8012ede:	69b9      	ldr	r1, [r7, #24]
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f001 f879 	bl	8013fd8 <dhcp_create_msg>
 8012ee6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d04b      	beq.n	8012f86 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012eee:	693b      	ldr	r3, [r7, #16]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012ef4:	8938      	ldrh	r0, [r7, #8]
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012efc:	2302      	movs	r3, #2
 8012efe:	2239      	movs	r2, #57	; 0x39
 8012f00:	f000 fbf8 	bl	80136f4 <dhcp_option>
 8012f04:	4603      	mov	r3, r0
 8012f06:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012f08:	8938      	ldrh	r0, [r7, #8]
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f14:	461a      	mov	r2, r3
 8012f16:	f000 fc47 	bl	80137a8 <dhcp_option_short>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012f1e:	8938      	ldrh	r0, [r7, #8]
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f26:	2303      	movs	r3, #3
 8012f28:	2237      	movs	r2, #55	; 0x37
 8012f2a:	f000 fbe3 	bl	80136f4 <dhcp_option>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f32:	2300      	movs	r3, #0
 8012f34:	77fb      	strb	r3, [r7, #31]
 8012f36:	e00e      	b.n	8012f56 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012f38:	8938      	ldrh	r0, [r7, #8]
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f40:	7ffb      	ldrb	r3, [r7, #31]
 8012f42:	4a29      	ldr	r2, [pc, #164]	; (8012fe8 <dhcp_discover+0x130>)
 8012f44:	5cd3      	ldrb	r3, [r2, r3]
 8012f46:	461a      	mov	r2, r3
 8012f48:	f000 fc08 	bl	801375c <dhcp_option_byte>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f50:	7ffb      	ldrb	r3, [r7, #31]
 8012f52:	3301      	adds	r3, #1
 8012f54:	77fb      	strb	r3, [r7, #31]
 8012f56:	7ffb      	ldrb	r3, [r7, #31]
 8012f58:	2b02      	cmp	r3, #2
 8012f5a:	d9ed      	bls.n	8012f38 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012f5c:	8938      	ldrh	r0, [r7, #8]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	33f0      	adds	r3, #240	; 0xf0
 8012f62:	693a      	ldr	r2, [r7, #16]
 8012f64:	4619      	mov	r1, r3
 8012f66:	f001 f90d 	bl	8014184 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012f6a:	4b20      	ldr	r3, [pc, #128]	; (8012fec <dhcp_discover+0x134>)
 8012f6c:	6818      	ldr	r0, [r3, #0]
 8012f6e:	4b20      	ldr	r3, [pc, #128]	; (8012ff0 <dhcp_discover+0x138>)
 8012f70:	9301      	str	r3, [sp, #4]
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	9300      	str	r3, [sp, #0]
 8012f76:	2343      	movs	r3, #67	; 0x43
 8012f78:	4a1e      	ldr	r2, [pc, #120]	; (8012ff4 <dhcp_discover+0x13c>)
 8012f7a:	6939      	ldr	r1, [r7, #16]
 8012f7c:	f7ff f870 	bl	8012060 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8012f80:	6938      	ldr	r0, [r7, #16]
 8012f82:	f7f8 f927 	bl	800b1d4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012f86:	69bb      	ldr	r3, [r7, #24]
 8012f88:	799b      	ldrb	r3, [r3, #6]
 8012f8a:	2bff      	cmp	r3, #255	; 0xff
 8012f8c:	d005      	beq.n	8012f9a <dhcp_discover+0xe2>
    dhcp->tries++;
 8012f8e:	69bb      	ldr	r3, [r7, #24]
 8012f90:	799b      	ldrb	r3, [r3, #6]
 8012f92:	3301      	adds	r3, #1
 8012f94:	b2da      	uxtb	r2, r3
 8012f96:	69bb      	ldr	r3, [r7, #24]
 8012f98:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	799b      	ldrb	r3, [r3, #6]
 8012f9e:	2b05      	cmp	r3, #5
 8012fa0:	d80d      	bhi.n	8012fbe <dhcp_discover+0x106>
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	799b      	ldrb	r3, [r3, #6]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	2301      	movs	r3, #1
 8012faa:	4093      	lsls	r3, r2
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	461a      	mov	r2, r3
 8012fb0:	0152      	lsls	r2, r2, #5
 8012fb2:	1ad2      	subs	r2, r2, r3
 8012fb4:	0092      	lsls	r2, r2, #2
 8012fb6:	4413      	add	r3, r2
 8012fb8:	00db      	lsls	r3, r3, #3
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	e001      	b.n	8012fc2 <dhcp_discover+0x10a>
 8012fbe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012fc2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012fc4:	897b      	ldrh	r3, [r7, #10]
 8012fc6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012fca:	4a0b      	ldr	r2, [pc, #44]	; (8012ff8 <dhcp_discover+0x140>)
 8012fcc:	fb82 1203 	smull	r1, r2, r2, r3
 8012fd0:	1152      	asrs	r2, r2, #5
 8012fd2:	17db      	asrs	r3, r3, #31
 8012fd4:	1ad3      	subs	r3, r2, r3
 8012fd6:	b29a      	uxth	r2, r3
 8012fd8:	69bb      	ldr	r3, [r7, #24]
 8012fda:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	3720      	adds	r7, #32
 8012fe4:	46bd      	mov	sp, r7
 8012fe6:	bd80      	pop	{r7, pc}
 8012fe8:	200005c4 	.word	0x200005c4
 8012fec:	20001254 	.word	0x20001254
 8012ff0:	0803233c 	.word	0x0803233c
 8012ff4:	08032340 	.word	0x08032340
 8012ff8:	10624dd3 	.word	0x10624dd3

08012ffc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b088      	sub	sp, #32
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d107      	bne.n	801301a <dhcp_bind+0x1e>
 801300a:	4b64      	ldr	r3, [pc, #400]	; (801319c <dhcp_bind+0x1a0>)
 801300c:	f240 4215 	movw	r2, #1045	; 0x415
 8013010:	4963      	ldr	r1, [pc, #396]	; (80131a0 <dhcp_bind+0x1a4>)
 8013012:	4864      	ldr	r0, [pc, #400]	; (80131a4 <dhcp_bind+0x1a8>)
 8013014:	f004 f8d6 	bl	80171c4 <iprintf>
 8013018:	e0bc      	b.n	8013194 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801301e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013020:	69bb      	ldr	r3, [r7, #24]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d107      	bne.n	8013036 <dhcp_bind+0x3a>
 8013026:	4b5d      	ldr	r3, [pc, #372]	; (801319c <dhcp_bind+0x1a0>)
 8013028:	f240 4217 	movw	r2, #1047	; 0x417
 801302c:	495e      	ldr	r1, [pc, #376]	; (80131a8 <dhcp_bind+0x1ac>)
 801302e:	485d      	ldr	r0, [pc, #372]	; (80131a4 <dhcp_bind+0x1a8>)
 8013030:	f004 f8c8 	bl	80171c4 <iprintf>
 8013034:	e0ae      	b.n	8013194 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8013036:	69bb      	ldr	r3, [r7, #24]
 8013038:	2200      	movs	r2, #0
 801303a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801303c:	69bb      	ldr	r3, [r7, #24]
 801303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013044:	d019      	beq.n	801307a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013046:	69bb      	ldr	r3, [r7, #24]
 8013048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801304a:	331e      	adds	r3, #30
 801304c:	4a57      	ldr	r2, [pc, #348]	; (80131ac <dhcp_bind+0x1b0>)
 801304e:	fba2 2303 	umull	r2, r3, r2, r3
 8013052:	095b      	lsrs	r3, r3, #5
 8013054:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013056:	69fb      	ldr	r3, [r7, #28]
 8013058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801305c:	d302      	bcc.n	8013064 <dhcp_bind+0x68>
      timeout = 0xffff;
 801305e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013062:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013064:	69fb      	ldr	r3, [r7, #28]
 8013066:	b29a      	uxth	r2, r3
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801306c:	69bb      	ldr	r3, [r7, #24]
 801306e:	8a9b      	ldrh	r3, [r3, #20]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d102      	bne.n	801307a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	2201      	movs	r2, #1
 8013078:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801307a:	69bb      	ldr	r3, [r7, #24]
 801307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801307e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013082:	d01d      	beq.n	80130c0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013084:	69bb      	ldr	r3, [r7, #24]
 8013086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013088:	331e      	adds	r3, #30
 801308a:	4a48      	ldr	r2, [pc, #288]	; (80131ac <dhcp_bind+0x1b0>)
 801308c:	fba2 2303 	umull	r2, r3, r2, r3
 8013090:	095b      	lsrs	r3, r3, #5
 8013092:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801309a:	d302      	bcc.n	80130a2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801309c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130a0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80130a2:	69fb      	ldr	r3, [r7, #28]
 80130a4:	b29a      	uxth	r2, r3
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80130aa:	69bb      	ldr	r3, [r7, #24]
 80130ac:	895b      	ldrh	r3, [r3, #10]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d102      	bne.n	80130b8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80130b2:	69bb      	ldr	r3, [r7, #24]
 80130b4:	2201      	movs	r2, #1
 80130b6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80130b8:	69bb      	ldr	r3, [r7, #24]
 80130ba:	895a      	ldrh	r2, [r3, #10]
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80130c0:	69bb      	ldr	r3, [r7, #24]
 80130c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130c8:	d01d      	beq.n	8013106 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130ce:	331e      	adds	r3, #30
 80130d0:	4a36      	ldr	r2, [pc, #216]	; (80131ac <dhcp_bind+0x1b0>)
 80130d2:	fba2 2303 	umull	r2, r3, r2, r3
 80130d6:	095b      	lsrs	r3, r3, #5
 80130d8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80130da:	69fb      	ldr	r3, [r7, #28]
 80130dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80130e0:	d302      	bcc.n	80130e8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80130e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130e6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	b29a      	uxth	r2, r3
 80130ec:	69bb      	ldr	r3, [r7, #24]
 80130ee:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80130f0:	69bb      	ldr	r3, [r7, #24]
 80130f2:	899b      	ldrh	r3, [r3, #12]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d102      	bne.n	80130fe <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80130f8:	69bb      	ldr	r3, [r7, #24]
 80130fa:	2201      	movs	r2, #1
 80130fc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80130fe:	69bb      	ldr	r3, [r7, #24]
 8013100:	899a      	ldrh	r2, [r3, #12]
 8013102:	69bb      	ldr	r3, [r7, #24]
 8013104:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8013106:	69bb      	ldr	r3, [r7, #24]
 8013108:	895a      	ldrh	r2, [r3, #10]
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	899b      	ldrh	r3, [r3, #12]
 801310e:	429a      	cmp	r2, r3
 8013110:	d306      	bcc.n	8013120 <dhcp_bind+0x124>
 8013112:	69bb      	ldr	r3, [r7, #24]
 8013114:	899b      	ldrh	r3, [r3, #12]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d002      	beq.n	8013120 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801311a:	69bb      	ldr	r3, [r7, #24]
 801311c:	2200      	movs	r2, #0
 801311e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013120:	69bb      	ldr	r3, [r7, #24]
 8013122:	79db      	ldrb	r3, [r3, #7]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d003      	beq.n	8013130 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013128:	69bb      	ldr	r3, [r7, #24]
 801312a:	6a1b      	ldr	r3, [r3, #32]
 801312c:	613b      	str	r3, [r7, #16]
 801312e:	e014      	b.n	801315a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013130:	69bb      	ldr	r3, [r7, #24]
 8013132:	331c      	adds	r3, #28
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013138:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801313c:	2b00      	cmp	r3, #0
 801313e:	db02      	blt.n	8013146 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013140:	23ff      	movs	r3, #255	; 0xff
 8013142:	613b      	str	r3, [r7, #16]
 8013144:	e009      	b.n	801315a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8013146:	7dfb      	ldrb	r3, [r7, #23]
 8013148:	2bbf      	cmp	r3, #191	; 0xbf
 801314a:	d903      	bls.n	8013154 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801314c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013150:	613b      	str	r3, [r7, #16]
 8013152:	e002      	b.n	801315a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013158:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801315a:	69bb      	ldr	r3, [r7, #24]
 801315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801315e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d108      	bne.n	8013178 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8013166:	69bb      	ldr	r3, [r7, #24]
 8013168:	69da      	ldr	r2, [r3, #28]
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	4013      	ands	r3, r2
 801316e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013176:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013178:	210a      	movs	r1, #10
 801317a:	69b8      	ldr	r0, [r7, #24]
 801317c:	f000 faa0 	bl	80136c0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013180:	69bb      	ldr	r3, [r7, #24]
 8013182:	f103 011c 	add.w	r1, r3, #28
 8013186:	f107 030c 	add.w	r3, r7, #12
 801318a:	f107 0210 	add.w	r2, r7, #16
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f7f7 fba8 	bl	800a8e4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8013194:	3720      	adds	r7, #32
 8013196:	46bd      	mov	sp, r7
 8013198:	bd80      	pop	{r7, pc}
 801319a:	bf00      	nop
 801319c:	0801e894 	.word	0x0801e894
 80131a0:	0801e9f4 	.word	0x0801e9f4
 80131a4:	0801e8f4 	.word	0x0801e8f4
 80131a8:	0801ea10 	.word	0x0801ea10
 80131ac:	88888889 	.word	0x88888889

080131b0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b08a      	sub	sp, #40	; 0x28
 80131b4:	af02      	add	r7, sp, #8
 80131b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131bc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80131be:	2105      	movs	r1, #5
 80131c0:	69b8      	ldr	r0, [r7, #24]
 80131c2:	f000 fa7d 	bl	80136c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80131c6:	f107 030c 	add.w	r3, r7, #12
 80131ca:	2203      	movs	r2, #3
 80131cc:	69b9      	ldr	r1, [r7, #24]
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f000 ff02 	bl	8013fd8 <dhcp_create_msg>
 80131d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d04e      	beq.n	801327a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80131e2:	89b8      	ldrh	r0, [r7, #12]
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131ea:	2302      	movs	r3, #2
 80131ec:	2239      	movs	r2, #57	; 0x39
 80131ee:	f000 fa81 	bl	80136f4 <dhcp_option>
 80131f2:	4603      	mov	r3, r0
 80131f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80131f6:	89b8      	ldrh	r0, [r7, #12]
 80131f8:	693b      	ldr	r3, [r7, #16]
 80131fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013202:	461a      	mov	r2, r3
 8013204:	f000 fad0 	bl	80137a8 <dhcp_option_short>
 8013208:	4603      	mov	r3, r0
 801320a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801320c:	89b8      	ldrh	r0, [r7, #12]
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013214:	2303      	movs	r3, #3
 8013216:	2237      	movs	r2, #55	; 0x37
 8013218:	f000 fa6c 	bl	80136f4 <dhcp_option>
 801321c:	4603      	mov	r3, r0
 801321e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013220:	2300      	movs	r3, #0
 8013222:	77bb      	strb	r3, [r7, #30]
 8013224:	e00e      	b.n	8013244 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013226:	89b8      	ldrh	r0, [r7, #12]
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801322e:	7fbb      	ldrb	r3, [r7, #30]
 8013230:	4a2a      	ldr	r2, [pc, #168]	; (80132dc <dhcp_renew+0x12c>)
 8013232:	5cd3      	ldrb	r3, [r2, r3]
 8013234:	461a      	mov	r2, r3
 8013236:	f000 fa91 	bl	801375c <dhcp_option_byte>
 801323a:	4603      	mov	r3, r0
 801323c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801323e:	7fbb      	ldrb	r3, [r7, #30]
 8013240:	3301      	adds	r3, #1
 8013242:	77bb      	strb	r3, [r7, #30]
 8013244:	7fbb      	ldrb	r3, [r7, #30]
 8013246:	2b02      	cmp	r3, #2
 8013248:	d9ed      	bls.n	8013226 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801324a:	89b8      	ldrh	r0, [r7, #12]
 801324c:	693b      	ldr	r3, [r7, #16]
 801324e:	33f0      	adds	r3, #240	; 0xf0
 8013250:	697a      	ldr	r2, [r7, #20]
 8013252:	4619      	mov	r1, r3
 8013254:	f000 ff96 	bl	8014184 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013258:	4b21      	ldr	r3, [pc, #132]	; (80132e0 <dhcp_renew+0x130>)
 801325a:	6818      	ldr	r0, [r3, #0]
 801325c:	69bb      	ldr	r3, [r7, #24]
 801325e:	f103 0218 	add.w	r2, r3, #24
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	9300      	str	r3, [sp, #0]
 8013266:	2343      	movs	r3, #67	; 0x43
 8013268:	6979      	ldr	r1, [r7, #20]
 801326a:	f7fe fe85 	bl	8011f78 <udp_sendto_if>
 801326e:	4603      	mov	r3, r0
 8013270:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013272:	6978      	ldr	r0, [r7, #20]
 8013274:	f7f7 ffae 	bl	800b1d4 <pbuf_free>
 8013278:	e001      	b.n	801327e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801327a:	23ff      	movs	r3, #255	; 0xff
 801327c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801327e:	69bb      	ldr	r3, [r7, #24]
 8013280:	799b      	ldrb	r3, [r3, #6]
 8013282:	2bff      	cmp	r3, #255	; 0xff
 8013284:	d005      	beq.n	8013292 <dhcp_renew+0xe2>
    dhcp->tries++;
 8013286:	69bb      	ldr	r3, [r7, #24]
 8013288:	799b      	ldrb	r3, [r3, #6]
 801328a:	3301      	adds	r3, #1
 801328c:	b2da      	uxtb	r2, r3
 801328e:	69bb      	ldr	r3, [r7, #24]
 8013290:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	799b      	ldrb	r3, [r3, #6]
 8013296:	2b09      	cmp	r3, #9
 8013298:	d80a      	bhi.n	80132b0 <dhcp_renew+0x100>
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	799b      	ldrb	r3, [r3, #6]
 801329e:	b29b      	uxth	r3, r3
 80132a0:	461a      	mov	r2, r3
 80132a2:	0152      	lsls	r2, r2, #5
 80132a4:	1ad2      	subs	r2, r2, r3
 80132a6:	0092      	lsls	r2, r2, #2
 80132a8:	4413      	add	r3, r2
 80132aa:	011b      	lsls	r3, r3, #4
 80132ac:	b29b      	uxth	r3, r3
 80132ae:	e001      	b.n	80132b4 <dhcp_renew+0x104>
 80132b0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80132b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80132b6:	89fb      	ldrh	r3, [r7, #14]
 80132b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80132bc:	4a09      	ldr	r2, [pc, #36]	; (80132e4 <dhcp_renew+0x134>)
 80132be:	fb82 1203 	smull	r1, r2, r2, r3
 80132c2:	1152      	asrs	r2, r2, #5
 80132c4:	17db      	asrs	r3, r3, #31
 80132c6:	1ad3      	subs	r3, r2, r3
 80132c8:	b29a      	uxth	r2, r3
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80132ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3720      	adds	r7, #32
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
 80132da:	bf00      	nop
 80132dc:	200005c4 	.word	0x200005c4
 80132e0:	20001254 	.word	0x20001254
 80132e4:	10624dd3 	.word	0x10624dd3

080132e8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b08a      	sub	sp, #40	; 0x28
 80132ec:	af02      	add	r7, sp, #8
 80132ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132f4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80132f6:	2104      	movs	r1, #4
 80132f8:	69b8      	ldr	r0, [r7, #24]
 80132fa:	f000 f9e1 	bl	80136c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80132fe:	f107 030c 	add.w	r3, r7, #12
 8013302:	2203      	movs	r2, #3
 8013304:	69b9      	ldr	r1, [r7, #24]
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f000 fe66 	bl	8013fd8 <dhcp_create_msg>
 801330c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d04c      	beq.n	80133ae <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	685b      	ldr	r3, [r3, #4]
 8013318:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801331a:	89b8      	ldrh	r0, [r7, #12]
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013322:	2302      	movs	r3, #2
 8013324:	2239      	movs	r2, #57	; 0x39
 8013326:	f000 f9e5 	bl	80136f4 <dhcp_option>
 801332a:	4603      	mov	r3, r0
 801332c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801332e:	89b8      	ldrh	r0, [r7, #12]
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801333a:	461a      	mov	r2, r3
 801333c:	f000 fa34 	bl	80137a8 <dhcp_option_short>
 8013340:	4603      	mov	r3, r0
 8013342:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013344:	89b8      	ldrh	r0, [r7, #12]
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801334c:	2303      	movs	r3, #3
 801334e:	2237      	movs	r2, #55	; 0x37
 8013350:	f000 f9d0 	bl	80136f4 <dhcp_option>
 8013354:	4603      	mov	r3, r0
 8013356:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013358:	2300      	movs	r3, #0
 801335a:	77bb      	strb	r3, [r7, #30]
 801335c:	e00e      	b.n	801337c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801335e:	89b8      	ldrh	r0, [r7, #12]
 8013360:	693b      	ldr	r3, [r7, #16]
 8013362:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013366:	7fbb      	ldrb	r3, [r7, #30]
 8013368:	4a29      	ldr	r2, [pc, #164]	; (8013410 <dhcp_rebind+0x128>)
 801336a:	5cd3      	ldrb	r3, [r2, r3]
 801336c:	461a      	mov	r2, r3
 801336e:	f000 f9f5 	bl	801375c <dhcp_option_byte>
 8013372:	4603      	mov	r3, r0
 8013374:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013376:	7fbb      	ldrb	r3, [r7, #30]
 8013378:	3301      	adds	r3, #1
 801337a:	77bb      	strb	r3, [r7, #30]
 801337c:	7fbb      	ldrb	r3, [r7, #30]
 801337e:	2b02      	cmp	r3, #2
 8013380:	d9ed      	bls.n	801335e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013382:	89b8      	ldrh	r0, [r7, #12]
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	33f0      	adds	r3, #240	; 0xf0
 8013388:	697a      	ldr	r2, [r7, #20]
 801338a:	4619      	mov	r1, r3
 801338c:	f000 fefa 	bl	8014184 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013390:	4b20      	ldr	r3, [pc, #128]	; (8013414 <dhcp_rebind+0x12c>)
 8013392:	6818      	ldr	r0, [r3, #0]
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	9300      	str	r3, [sp, #0]
 8013398:	2343      	movs	r3, #67	; 0x43
 801339a:	4a1f      	ldr	r2, [pc, #124]	; (8013418 <dhcp_rebind+0x130>)
 801339c:	6979      	ldr	r1, [r7, #20]
 801339e:	f7fe fdeb 	bl	8011f78 <udp_sendto_if>
 80133a2:	4603      	mov	r3, r0
 80133a4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80133a6:	6978      	ldr	r0, [r7, #20]
 80133a8:	f7f7 ff14 	bl	800b1d4 <pbuf_free>
 80133ac:	e001      	b.n	80133b2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80133ae:	23ff      	movs	r3, #255	; 0xff
 80133b0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80133b2:	69bb      	ldr	r3, [r7, #24]
 80133b4:	799b      	ldrb	r3, [r3, #6]
 80133b6:	2bff      	cmp	r3, #255	; 0xff
 80133b8:	d005      	beq.n	80133c6 <dhcp_rebind+0xde>
    dhcp->tries++;
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	799b      	ldrb	r3, [r3, #6]
 80133be:	3301      	adds	r3, #1
 80133c0:	b2da      	uxtb	r2, r3
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80133c6:	69bb      	ldr	r3, [r7, #24]
 80133c8:	799b      	ldrb	r3, [r3, #6]
 80133ca:	2b09      	cmp	r3, #9
 80133cc:	d80a      	bhi.n	80133e4 <dhcp_rebind+0xfc>
 80133ce:	69bb      	ldr	r3, [r7, #24]
 80133d0:	799b      	ldrb	r3, [r3, #6]
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	461a      	mov	r2, r3
 80133d6:	0152      	lsls	r2, r2, #5
 80133d8:	1ad2      	subs	r2, r2, r3
 80133da:	0092      	lsls	r2, r2, #2
 80133dc:	4413      	add	r3, r2
 80133de:	00db      	lsls	r3, r3, #3
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	e001      	b.n	80133e8 <dhcp_rebind+0x100>
 80133e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80133e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80133ea:	89fb      	ldrh	r3, [r7, #14]
 80133ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80133f0:	4a0a      	ldr	r2, [pc, #40]	; (801341c <dhcp_rebind+0x134>)
 80133f2:	fb82 1203 	smull	r1, r2, r2, r3
 80133f6:	1152      	asrs	r2, r2, #5
 80133f8:	17db      	asrs	r3, r3, #31
 80133fa:	1ad3      	subs	r3, r2, r3
 80133fc:	b29a      	uxth	r2, r3
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013402:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013406:	4618      	mov	r0, r3
 8013408:	3720      	adds	r7, #32
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}
 801340e:	bf00      	nop
 8013410:	200005c4 	.word	0x200005c4
 8013414:	20001254 	.word	0x20001254
 8013418:	08032340 	.word	0x08032340
 801341c:	10624dd3 	.word	0x10624dd3

08013420 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013420:	b5b0      	push	{r4, r5, r7, lr}
 8013422:	b08a      	sub	sp, #40	; 0x28
 8013424:	af02      	add	r7, sp, #8
 8013426:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801342c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801342e:	2103      	movs	r1, #3
 8013430:	69b8      	ldr	r0, [r7, #24]
 8013432:	f000 f945 	bl	80136c0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013436:	f107 030c 	add.w	r3, r7, #12
 801343a:	2203      	movs	r2, #3
 801343c:	69b9      	ldr	r1, [r7, #24]
 801343e:	6878      	ldr	r0, [r7, #4]
 8013440:	f000 fdca 	bl	8013fd8 <dhcp_create_msg>
 8013444:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d066      	beq.n	801351a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013452:	89b8      	ldrh	r0, [r7, #12]
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801345a:	2302      	movs	r3, #2
 801345c:	2239      	movs	r2, #57	; 0x39
 801345e:	f000 f949 	bl	80136f4 <dhcp_option>
 8013462:	4603      	mov	r3, r0
 8013464:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013466:	89b8      	ldrh	r0, [r7, #12]
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	33f0      	adds	r3, #240	; 0xf0
 801346c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013470:	4619      	mov	r1, r3
 8013472:	f000 f999 	bl	80137a8 <dhcp_option_short>
 8013476:	4603      	mov	r3, r0
 8013478:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801347a:	89b8      	ldrh	r0, [r7, #12]
 801347c:	693b      	ldr	r3, [r7, #16]
 801347e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013482:	2304      	movs	r3, #4
 8013484:	2232      	movs	r2, #50	; 0x32
 8013486:	f000 f935 	bl	80136f4 <dhcp_option>
 801348a:	4603      	mov	r3, r0
 801348c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801348e:	89bc      	ldrh	r4, [r7, #12]
 8013490:	693b      	ldr	r3, [r7, #16]
 8013492:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013496:	69bb      	ldr	r3, [r7, #24]
 8013498:	69db      	ldr	r3, [r3, #28]
 801349a:	4618      	mov	r0, r3
 801349c:	f7f6 fb15 	bl	8009aca <lwip_htonl>
 80134a0:	4603      	mov	r3, r0
 80134a2:	461a      	mov	r2, r3
 80134a4:	4629      	mov	r1, r5
 80134a6:	4620      	mov	r0, r4
 80134a8:	f000 f9b0 	bl	801380c <dhcp_option_long>
 80134ac:	4603      	mov	r3, r0
 80134ae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80134b0:	89b8      	ldrh	r0, [r7, #12]
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134b8:	2303      	movs	r3, #3
 80134ba:	2237      	movs	r2, #55	; 0x37
 80134bc:	f000 f91a 	bl	80136f4 <dhcp_option>
 80134c0:	4603      	mov	r3, r0
 80134c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134c4:	2300      	movs	r3, #0
 80134c6:	77bb      	strb	r3, [r7, #30]
 80134c8:	e00e      	b.n	80134e8 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80134ca:	89b8      	ldrh	r0, [r7, #12]
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80134d2:	7fbb      	ldrb	r3, [r7, #30]
 80134d4:	4a29      	ldr	r2, [pc, #164]	; (801357c <dhcp_reboot+0x15c>)
 80134d6:	5cd3      	ldrb	r3, [r2, r3]
 80134d8:	461a      	mov	r2, r3
 80134da:	f000 f93f 	bl	801375c <dhcp_option_byte>
 80134de:	4603      	mov	r3, r0
 80134e0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80134e2:	7fbb      	ldrb	r3, [r7, #30]
 80134e4:	3301      	adds	r3, #1
 80134e6:	77bb      	strb	r3, [r7, #30]
 80134e8:	7fbb      	ldrb	r3, [r7, #30]
 80134ea:	2b02      	cmp	r3, #2
 80134ec:	d9ed      	bls.n	80134ca <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80134ee:	89b8      	ldrh	r0, [r7, #12]
 80134f0:	693b      	ldr	r3, [r7, #16]
 80134f2:	33f0      	adds	r3, #240	; 0xf0
 80134f4:	697a      	ldr	r2, [r7, #20]
 80134f6:	4619      	mov	r1, r3
 80134f8:	f000 fe44 	bl	8014184 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80134fc:	4b20      	ldr	r3, [pc, #128]	; (8013580 <dhcp_reboot+0x160>)
 80134fe:	6818      	ldr	r0, [r3, #0]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	9300      	str	r3, [sp, #0]
 8013504:	2343      	movs	r3, #67	; 0x43
 8013506:	4a1f      	ldr	r2, [pc, #124]	; (8013584 <dhcp_reboot+0x164>)
 8013508:	6979      	ldr	r1, [r7, #20]
 801350a:	f7fe fd35 	bl	8011f78 <udp_sendto_if>
 801350e:	4603      	mov	r3, r0
 8013510:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013512:	6978      	ldr	r0, [r7, #20]
 8013514:	f7f7 fe5e 	bl	800b1d4 <pbuf_free>
 8013518:	e001      	b.n	801351e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801351a:	23ff      	movs	r3, #255	; 0xff
 801351c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801351e:	69bb      	ldr	r3, [r7, #24]
 8013520:	799b      	ldrb	r3, [r3, #6]
 8013522:	2bff      	cmp	r3, #255	; 0xff
 8013524:	d005      	beq.n	8013532 <dhcp_reboot+0x112>
    dhcp->tries++;
 8013526:	69bb      	ldr	r3, [r7, #24]
 8013528:	799b      	ldrb	r3, [r3, #6]
 801352a:	3301      	adds	r3, #1
 801352c:	b2da      	uxtb	r2, r3
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013532:	69bb      	ldr	r3, [r7, #24]
 8013534:	799b      	ldrb	r3, [r3, #6]
 8013536:	2b09      	cmp	r3, #9
 8013538:	d80a      	bhi.n	8013550 <dhcp_reboot+0x130>
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	799b      	ldrb	r3, [r3, #6]
 801353e:	b29b      	uxth	r3, r3
 8013540:	461a      	mov	r2, r3
 8013542:	0152      	lsls	r2, r2, #5
 8013544:	1ad2      	subs	r2, r2, r3
 8013546:	0092      	lsls	r2, r2, #2
 8013548:	4413      	add	r3, r2
 801354a:	00db      	lsls	r3, r3, #3
 801354c:	b29b      	uxth	r3, r3
 801354e:	e001      	b.n	8013554 <dhcp_reboot+0x134>
 8013550:	f242 7310 	movw	r3, #10000	; 0x2710
 8013554:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013556:	89fb      	ldrh	r3, [r7, #14]
 8013558:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801355c:	4a0a      	ldr	r2, [pc, #40]	; (8013588 <dhcp_reboot+0x168>)
 801355e:	fb82 1203 	smull	r1, r2, r2, r3
 8013562:	1152      	asrs	r2, r2, #5
 8013564:	17db      	asrs	r3, r3, #31
 8013566:	1ad3      	subs	r3, r2, r3
 8013568:	b29a      	uxth	r2, r3
 801356a:	69bb      	ldr	r3, [r7, #24]
 801356c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801356e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013572:	4618      	mov	r0, r3
 8013574:	3720      	adds	r7, #32
 8013576:	46bd      	mov	sp, r7
 8013578:	bdb0      	pop	{r4, r5, r7, pc}
 801357a:	bf00      	nop
 801357c:	200005c4 	.word	0x200005c4
 8013580:	20001254 	.word	0x20001254
 8013584:	08032340 	.word	0x08032340
 8013588:	10624dd3 	.word	0x10624dd3

0801358c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801358c:	b5b0      	push	{r4, r5, r7, lr}
 801358e:	b08a      	sub	sp, #40	; 0x28
 8013590:	af02      	add	r7, sp, #8
 8013592:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013598:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801359a:	69fb      	ldr	r3, [r7, #28]
 801359c:	2b00      	cmp	r3, #0
 801359e:	f000 8084 	beq.w	80136aa <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80135a2:	69fb      	ldr	r3, [r7, #28]
 80135a4:	795b      	ldrb	r3, [r3, #5]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	f000 8081 	beq.w	80136ae <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80135ac:	69fb      	ldr	r3, [r7, #28]
 80135ae:	699b      	ldr	r3, [r3, #24]
 80135b0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80135b2:	69fb      	ldr	r3, [r7, #28]
 80135b4:	2200      	movs	r2, #0
 80135b6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	2200      	movs	r2, #0
 80135bc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80135be:	69fb      	ldr	r3, [r7, #28]
 80135c0:	2200      	movs	r2, #0
 80135c2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80135c4:	69fb      	ldr	r3, [r7, #28]
 80135c6:	2200      	movs	r2, #0
 80135c8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	2200      	movs	r2, #0
 80135ce:	631a      	str	r2, [r3, #48]	; 0x30
 80135d0:	69fb      	ldr	r3, [r7, #28]
 80135d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135d4:	69fb      	ldr	r3, [r7, #28]
 80135d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80135d8:	69fb      	ldr	r3, [r7, #28]
 80135da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135dc:	69fb      	ldr	r3, [r7, #28]
 80135de:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80135e0:	69fb      	ldr	r3, [r7, #28]
 80135e2:	2200      	movs	r2, #0
 80135e4:	829a      	strh	r2, [r3, #20]
 80135e6:	69fb      	ldr	r3, [r7, #28]
 80135e8:	8a9a      	ldrh	r2, [r3, #20]
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	825a      	strh	r2, [r3, #18]
 80135ee:	69fb      	ldr	r3, [r7, #28]
 80135f0:	8a5a      	ldrh	r2, [r3, #18]
 80135f2:	69fb      	ldr	r3, [r7, #28]
 80135f4:	821a      	strh	r2, [r3, #16]
 80135f6:	69fb      	ldr	r3, [r7, #28]
 80135f8:	8a1a      	ldrh	r2, [r3, #16]
 80135fa:	69fb      	ldr	r3, [r7, #28]
 80135fc:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	f000 fdee 	bl	80141e0 <dhcp_supplied_address>
 8013604:	4603      	mov	r3, r0
 8013606:	2b00      	cmp	r3, #0
 8013608:	d03b      	beq.n	8013682 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801360a:	f107 030e 	add.w	r3, r7, #14
 801360e:	2207      	movs	r2, #7
 8013610:	69f9      	ldr	r1, [r7, #28]
 8013612:	6878      	ldr	r0, [r7, #4]
 8013614:	f000 fce0 	bl	8013fd8 <dhcp_create_msg>
 8013618:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801361a:	69bb      	ldr	r3, [r7, #24]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d030      	beq.n	8013682 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013620:	69bb      	ldr	r3, [r7, #24]
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013626:	89f8      	ldrh	r0, [r7, #14]
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801362e:	2304      	movs	r3, #4
 8013630:	2236      	movs	r2, #54	; 0x36
 8013632:	f000 f85f 	bl	80136f4 <dhcp_option>
 8013636:	4603      	mov	r3, r0
 8013638:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801363a:	89fc      	ldrh	r4, [r7, #14]
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	4618      	mov	r0, r3
 8013646:	f7f6 fa40 	bl	8009aca <lwip_htonl>
 801364a:	4603      	mov	r3, r0
 801364c:	461a      	mov	r2, r3
 801364e:	4629      	mov	r1, r5
 8013650:	4620      	mov	r0, r4
 8013652:	f000 f8db 	bl	801380c <dhcp_option_long>
 8013656:	4603      	mov	r3, r0
 8013658:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801365a:	89f8      	ldrh	r0, [r7, #14]
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	33f0      	adds	r3, #240	; 0xf0
 8013660:	69ba      	ldr	r2, [r7, #24]
 8013662:	4619      	mov	r1, r3
 8013664:	f000 fd8e 	bl	8014184 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013668:	4b13      	ldr	r3, [pc, #76]	; (80136b8 <dhcp_release_and_stop+0x12c>)
 801366a:	6818      	ldr	r0, [r3, #0]
 801366c:	f107 0210 	add.w	r2, r7, #16
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	9300      	str	r3, [sp, #0]
 8013674:	2343      	movs	r3, #67	; 0x43
 8013676:	69b9      	ldr	r1, [r7, #24]
 8013678:	f7fe fc7e 	bl	8011f78 <udp_sendto_if>
      pbuf_free(p_out);
 801367c:	69b8      	ldr	r0, [r7, #24]
 801367e:	f7f7 fda9 	bl	800b1d4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013682:	4b0e      	ldr	r3, [pc, #56]	; (80136bc <dhcp_release_and_stop+0x130>)
 8013684:	4a0d      	ldr	r2, [pc, #52]	; (80136bc <dhcp_release_and_stop+0x130>)
 8013686:	490d      	ldr	r1, [pc, #52]	; (80136bc <dhcp_release_and_stop+0x130>)
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f7f7 f92b 	bl	800a8e4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801368e:	2100      	movs	r1, #0
 8013690:	69f8      	ldr	r0, [r7, #28]
 8013692:	f000 f815 	bl	80136c0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013696:	69fb      	ldr	r3, [r7, #28]
 8013698:	791b      	ldrb	r3, [r3, #4]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d008      	beq.n	80136b0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801369e:	f7fe ffc1 	bl	8012624 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80136a2:	69fb      	ldr	r3, [r7, #28]
 80136a4:	2200      	movs	r2, #0
 80136a6:	711a      	strb	r2, [r3, #4]
 80136a8:	e002      	b.n	80136b0 <dhcp_release_and_stop+0x124>
    return;
 80136aa:	bf00      	nop
 80136ac:	e000      	b.n	80136b0 <dhcp_release_and_stop+0x124>
    return;
 80136ae:	bf00      	nop
  }
}
 80136b0:	3720      	adds	r7, #32
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bdb0      	pop	{r4, r5, r7, pc}
 80136b6:	bf00      	nop
 80136b8:	20001254 	.word	0x20001254
 80136bc:	0803233c 	.word	0x0803233c

080136c0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80136c0:	b480      	push	{r7}
 80136c2:	b083      	sub	sp, #12
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	460b      	mov	r3, r1
 80136ca:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	795b      	ldrb	r3, [r3, #5]
 80136d0:	78fa      	ldrb	r2, [r7, #3]
 80136d2:	429a      	cmp	r2, r3
 80136d4:	d008      	beq.n	80136e8 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	78fa      	ldrb	r2, [r7, #3]
 80136da:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2200      	movs	r2, #0
 80136e0:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2200      	movs	r2, #0
 80136e6:	811a      	strh	r2, [r3, #8]
  }
}
 80136e8:	bf00      	nop
 80136ea:	370c      	adds	r7, #12
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr

080136f4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6039      	str	r1, [r7, #0]
 80136fc:	4611      	mov	r1, r2
 80136fe:	461a      	mov	r2, r3
 8013700:	4603      	mov	r3, r0
 8013702:	80fb      	strh	r3, [r7, #6]
 8013704:	460b      	mov	r3, r1
 8013706:	717b      	strb	r3, [r7, #5]
 8013708:	4613      	mov	r3, r2
 801370a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801370c:	88fa      	ldrh	r2, [r7, #6]
 801370e:	793b      	ldrb	r3, [r7, #4]
 8013710:	4413      	add	r3, r2
 8013712:	3302      	adds	r3, #2
 8013714:	2b44      	cmp	r3, #68	; 0x44
 8013716:	d906      	bls.n	8013726 <dhcp_option+0x32>
 8013718:	4b0d      	ldr	r3, [pc, #52]	; (8013750 <dhcp_option+0x5c>)
 801371a:	f240 529a 	movw	r2, #1434	; 0x59a
 801371e:	490d      	ldr	r1, [pc, #52]	; (8013754 <dhcp_option+0x60>)
 8013720:	480d      	ldr	r0, [pc, #52]	; (8013758 <dhcp_option+0x64>)
 8013722:	f003 fd4f 	bl	80171c4 <iprintf>
  options[options_out_len++] = option_type;
 8013726:	88fb      	ldrh	r3, [r7, #6]
 8013728:	1c5a      	adds	r2, r3, #1
 801372a:	80fa      	strh	r2, [r7, #6]
 801372c:	461a      	mov	r2, r3
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	4413      	add	r3, r2
 8013732:	797a      	ldrb	r2, [r7, #5]
 8013734:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013736:	88fb      	ldrh	r3, [r7, #6]
 8013738:	1c5a      	adds	r2, r3, #1
 801373a:	80fa      	strh	r2, [r7, #6]
 801373c:	461a      	mov	r2, r3
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	4413      	add	r3, r2
 8013742:	793a      	ldrb	r2, [r7, #4]
 8013744:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013746:	88fb      	ldrh	r3, [r7, #6]
}
 8013748:	4618      	mov	r0, r3
 801374a:	3708      	adds	r7, #8
 801374c:	46bd      	mov	sp, r7
 801374e:	bd80      	pop	{r7, pc}
 8013750:	0801e894 	.word	0x0801e894
 8013754:	0801ea28 	.word	0x0801ea28
 8013758:	0801e8f4 	.word	0x0801e8f4

0801375c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b082      	sub	sp, #8
 8013760:	af00      	add	r7, sp, #0
 8013762:	4603      	mov	r3, r0
 8013764:	6039      	str	r1, [r7, #0]
 8013766:	80fb      	strh	r3, [r7, #6]
 8013768:	4613      	mov	r3, r2
 801376a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801376c:	88fb      	ldrh	r3, [r7, #6]
 801376e:	2b43      	cmp	r3, #67	; 0x43
 8013770:	d906      	bls.n	8013780 <dhcp_option_byte+0x24>
 8013772:	4b0a      	ldr	r3, [pc, #40]	; (801379c <dhcp_option_byte+0x40>)
 8013774:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013778:	4909      	ldr	r1, [pc, #36]	; (80137a0 <dhcp_option_byte+0x44>)
 801377a:	480a      	ldr	r0, [pc, #40]	; (80137a4 <dhcp_option_byte+0x48>)
 801377c:	f003 fd22 	bl	80171c4 <iprintf>
  options[options_out_len++] = value;
 8013780:	88fb      	ldrh	r3, [r7, #6]
 8013782:	1c5a      	adds	r2, r3, #1
 8013784:	80fa      	strh	r2, [r7, #6]
 8013786:	461a      	mov	r2, r3
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	4413      	add	r3, r2
 801378c:	797a      	ldrb	r2, [r7, #5]
 801378e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013790:	88fb      	ldrh	r3, [r7, #6]
}
 8013792:	4618      	mov	r0, r3
 8013794:	3708      	adds	r7, #8
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	0801e894 	.word	0x0801e894
 80137a0:	0801ea6c 	.word	0x0801ea6c
 80137a4:	0801e8f4 	.word	0x0801e8f4

080137a8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b082      	sub	sp, #8
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	4603      	mov	r3, r0
 80137b0:	6039      	str	r1, [r7, #0]
 80137b2:	80fb      	strh	r3, [r7, #6]
 80137b4:	4613      	mov	r3, r2
 80137b6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80137b8:	88fb      	ldrh	r3, [r7, #6]
 80137ba:	3302      	adds	r3, #2
 80137bc:	2b44      	cmp	r3, #68	; 0x44
 80137be:	d906      	bls.n	80137ce <dhcp_option_short+0x26>
 80137c0:	4b0f      	ldr	r3, [pc, #60]	; (8013800 <dhcp_option_short+0x58>)
 80137c2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80137c6:	490f      	ldr	r1, [pc, #60]	; (8013804 <dhcp_option_short+0x5c>)
 80137c8:	480f      	ldr	r0, [pc, #60]	; (8013808 <dhcp_option_short+0x60>)
 80137ca:	f003 fcfb 	bl	80171c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80137ce:	88bb      	ldrh	r3, [r7, #4]
 80137d0:	0a1b      	lsrs	r3, r3, #8
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	88fb      	ldrh	r3, [r7, #6]
 80137d6:	1c59      	adds	r1, r3, #1
 80137d8:	80f9      	strh	r1, [r7, #6]
 80137da:	4619      	mov	r1, r3
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	440b      	add	r3, r1
 80137e0:	b2d2      	uxtb	r2, r2
 80137e2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80137e4:	88fb      	ldrh	r3, [r7, #6]
 80137e6:	1c5a      	adds	r2, r3, #1
 80137e8:	80fa      	strh	r2, [r7, #6]
 80137ea:	461a      	mov	r2, r3
 80137ec:	683b      	ldr	r3, [r7, #0]
 80137ee:	4413      	add	r3, r2
 80137f0:	88ba      	ldrh	r2, [r7, #4]
 80137f2:	b2d2      	uxtb	r2, r2
 80137f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80137f6:	88fb      	ldrh	r3, [r7, #6]
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3708      	adds	r7, #8
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	0801e894 	.word	0x0801e894
 8013804:	0801eaa4 	.word	0x0801eaa4
 8013808:	0801e8f4 	.word	0x0801e8f4

0801380c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801380c:	b580      	push	{r7, lr}
 801380e:	b084      	sub	sp, #16
 8013810:	af00      	add	r7, sp, #0
 8013812:	4603      	mov	r3, r0
 8013814:	60b9      	str	r1, [r7, #8]
 8013816:	607a      	str	r2, [r7, #4]
 8013818:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801381a:	89fb      	ldrh	r3, [r7, #14]
 801381c:	3304      	adds	r3, #4
 801381e:	2b44      	cmp	r3, #68	; 0x44
 8013820:	d906      	bls.n	8013830 <dhcp_option_long+0x24>
 8013822:	4b19      	ldr	r3, [pc, #100]	; (8013888 <dhcp_option_long+0x7c>)
 8013824:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013828:	4918      	ldr	r1, [pc, #96]	; (801388c <dhcp_option_long+0x80>)
 801382a:	4819      	ldr	r0, [pc, #100]	; (8013890 <dhcp_option_long+0x84>)
 801382c:	f003 fcca 	bl	80171c4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	0e1a      	lsrs	r2, r3, #24
 8013834:	89fb      	ldrh	r3, [r7, #14]
 8013836:	1c59      	adds	r1, r3, #1
 8013838:	81f9      	strh	r1, [r7, #14]
 801383a:	4619      	mov	r1, r3
 801383c:	68bb      	ldr	r3, [r7, #8]
 801383e:	440b      	add	r3, r1
 8013840:	b2d2      	uxtb	r2, r2
 8013842:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	0c1a      	lsrs	r2, r3, #16
 8013848:	89fb      	ldrh	r3, [r7, #14]
 801384a:	1c59      	adds	r1, r3, #1
 801384c:	81f9      	strh	r1, [r7, #14]
 801384e:	4619      	mov	r1, r3
 8013850:	68bb      	ldr	r3, [r7, #8]
 8013852:	440b      	add	r3, r1
 8013854:	b2d2      	uxtb	r2, r2
 8013856:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	0a1a      	lsrs	r2, r3, #8
 801385c:	89fb      	ldrh	r3, [r7, #14]
 801385e:	1c59      	adds	r1, r3, #1
 8013860:	81f9      	strh	r1, [r7, #14]
 8013862:	4619      	mov	r1, r3
 8013864:	68bb      	ldr	r3, [r7, #8]
 8013866:	440b      	add	r3, r1
 8013868:	b2d2      	uxtb	r2, r2
 801386a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801386c:	89fb      	ldrh	r3, [r7, #14]
 801386e:	1c5a      	adds	r2, r3, #1
 8013870:	81fa      	strh	r2, [r7, #14]
 8013872:	461a      	mov	r2, r3
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	4413      	add	r3, r2
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	b2d2      	uxtb	r2, r2
 801387c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801387e:	89fb      	ldrh	r3, [r7, #14]
}
 8013880:	4618      	mov	r0, r3
 8013882:	3710      	adds	r7, #16
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}
 8013888:	0801e894 	.word	0x0801e894
 801388c:	0801eae0 	.word	0x0801eae0
 8013890:	0801e8f4 	.word	0x0801e8f4

08013894 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b090      	sub	sp, #64	; 0x40
 8013898:	af00      	add	r7, sp, #0
 801389a:	6078      	str	r0, [r7, #4]
 801389c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801389e:	2300      	movs	r3, #0
 80138a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80138a2:	2300      	movs	r3, #0
 80138a4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80138a6:	2208      	movs	r2, #8
 80138a8:	2100      	movs	r1, #0
 80138aa:	48be      	ldr	r0, [pc, #760]	; (8013ba4 <dhcp_parse_reply+0x310>)
 80138ac:	f003 f818 	bl	80168e0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	895b      	ldrh	r3, [r3, #10]
 80138b4:	2b2b      	cmp	r3, #43	; 0x2b
 80138b6:	d802      	bhi.n	80138be <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80138b8:	f06f 0301 	mvn.w	r3, #1
 80138bc:	e2a8      	b.n	8013e10 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80138c4:	23f0      	movs	r3, #240	; 0xf0
 80138c6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	891b      	ldrh	r3, [r3, #8]
 80138cc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80138d2:	e00c      	b.n	80138ee <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80138d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d6:	895b      	ldrh	r3, [r3, #10]
 80138d8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80138da:	1ad3      	subs	r3, r2, r3
 80138dc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80138de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e0:	895b      	ldrh	r3, [r3, #10]
 80138e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80138e4:	1ad3      	subs	r3, r2, r3
 80138e6:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80138e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80138ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d004      	beq.n	80138fe <dhcp_parse_reply+0x6a>
 80138f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f6:	895b      	ldrh	r3, [r3, #10]
 80138f8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d2ea      	bcs.n	80138d4 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80138fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013900:	2b00      	cmp	r3, #0
 8013902:	d102      	bne.n	801390a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013904:	f06f 0301 	mvn.w	r3, #1
 8013908:	e282      	b.n	8013e10 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801390a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801390c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801390e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013910:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013918:	e23a      	b.n	8013d90 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801391a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801391c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801391e:	4413      	add	r3, r2
 8013920:	781b      	ldrb	r3, [r3, #0]
 8013922:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013924:	2300      	movs	r3, #0
 8013926:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801392a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801392e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013930:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013932:	3302      	adds	r3, #2
 8013934:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013936:	8bfa      	ldrh	r2, [r7, #30]
 8013938:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801393a:	429a      	cmp	r2, r3
 801393c:	d202      	bcs.n	8013944 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801393e:	f06f 0301 	mvn.w	r3, #1
 8013942:	e265      	b.n	8013e10 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013944:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013946:	3301      	adds	r3, #1
 8013948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801394a:	8952      	ldrh	r2, [r2, #10]
 801394c:	4293      	cmp	r3, r2
 801394e:	da07      	bge.n	8013960 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013950:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013952:	3301      	adds	r3, #1
 8013954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013956:	4413      	add	r3, r2
 8013958:	781b      	ldrb	r3, [r3, #0]
 801395a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801395e:	e00b      	b.n	8013978 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d004      	beq.n	8013972 <dhcp_parse_reply+0xde>
 8013968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	685b      	ldr	r3, [r3, #4]
 801396e:	781b      	ldrb	r3, [r3, #0]
 8013970:	e000      	b.n	8013974 <dhcp_parse_reply+0xe0>
 8013972:	2300      	movs	r3, #0
 8013974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801397c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013980:	7dfb      	ldrb	r3, [r7, #23]
 8013982:	2b3b      	cmp	r3, #59	; 0x3b
 8013984:	f200 812d 	bhi.w	8013be2 <dhcp_parse_reply+0x34e>
 8013988:	a201      	add	r2, pc, #4	; (adr r2, 8013990 <dhcp_parse_reply+0xfc>)
 801398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801398e:	bf00      	nop
 8013990:	08013a81 	.word	0x08013a81
 8013994:	08013a91 	.word	0x08013a91
 8013998:	08013be3 	.word	0x08013be3
 801399c:	08013ab3 	.word	0x08013ab3
 80139a0:	08013be3 	.word	0x08013be3
 80139a4:	08013be3 	.word	0x08013be3
 80139a8:	08013be3 	.word	0x08013be3
 80139ac:	08013be3 	.word	0x08013be3
 80139b0:	08013be3 	.word	0x08013be3
 80139b4:	08013be3 	.word	0x08013be3
 80139b8:	08013be3 	.word	0x08013be3
 80139bc:	08013be3 	.word	0x08013be3
 80139c0:	08013be3 	.word	0x08013be3
 80139c4:	08013be3 	.word	0x08013be3
 80139c8:	08013be3 	.word	0x08013be3
 80139cc:	08013be3 	.word	0x08013be3
 80139d0:	08013be3 	.word	0x08013be3
 80139d4:	08013be3 	.word	0x08013be3
 80139d8:	08013be3 	.word	0x08013be3
 80139dc:	08013be3 	.word	0x08013be3
 80139e0:	08013be3 	.word	0x08013be3
 80139e4:	08013be3 	.word	0x08013be3
 80139e8:	08013be3 	.word	0x08013be3
 80139ec:	08013be3 	.word	0x08013be3
 80139f0:	08013be3 	.word	0x08013be3
 80139f4:	08013be3 	.word	0x08013be3
 80139f8:	08013be3 	.word	0x08013be3
 80139fc:	08013be3 	.word	0x08013be3
 8013a00:	08013be3 	.word	0x08013be3
 8013a04:	08013be3 	.word	0x08013be3
 8013a08:	08013be3 	.word	0x08013be3
 8013a0c:	08013be3 	.word	0x08013be3
 8013a10:	08013be3 	.word	0x08013be3
 8013a14:	08013be3 	.word	0x08013be3
 8013a18:	08013be3 	.word	0x08013be3
 8013a1c:	08013be3 	.word	0x08013be3
 8013a20:	08013be3 	.word	0x08013be3
 8013a24:	08013be3 	.word	0x08013be3
 8013a28:	08013be3 	.word	0x08013be3
 8013a2c:	08013be3 	.word	0x08013be3
 8013a30:	08013be3 	.word	0x08013be3
 8013a34:	08013be3 	.word	0x08013be3
 8013a38:	08013be3 	.word	0x08013be3
 8013a3c:	08013be3 	.word	0x08013be3
 8013a40:	08013be3 	.word	0x08013be3
 8013a44:	08013be3 	.word	0x08013be3
 8013a48:	08013be3 	.word	0x08013be3
 8013a4c:	08013be3 	.word	0x08013be3
 8013a50:	08013be3 	.word	0x08013be3
 8013a54:	08013be3 	.word	0x08013be3
 8013a58:	08013be3 	.word	0x08013be3
 8013a5c:	08013adf 	.word	0x08013adf
 8013a60:	08013b01 	.word	0x08013b01
 8013a64:	08013b3d 	.word	0x08013b3d
 8013a68:	08013b5f 	.word	0x08013b5f
 8013a6c:	08013be3 	.word	0x08013be3
 8013a70:	08013be3 	.word	0x08013be3
 8013a74:	08013be3 	.word	0x08013be3
 8013a78:	08013b81 	.word	0x08013b81
 8013a7c:	08013bc1 	.word	0x08013bc1
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013a80:	2300      	movs	r3, #0
 8013a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013a8e:	e0ac      	b.n	8013bea <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a94:	2b04      	cmp	r3, #4
 8013a96:	d009      	beq.n	8013aac <dhcp_parse_reply+0x218>
 8013a98:	4b43      	ldr	r3, [pc, #268]	; (8013ba8 <dhcp_parse_reply+0x314>)
 8013a9a:	f240 622e 	movw	r2, #1582	; 0x62e
 8013a9e:	4943      	ldr	r1, [pc, #268]	; (8013bac <dhcp_parse_reply+0x318>)
 8013aa0:	4843      	ldr	r0, [pc, #268]	; (8013bb0 <dhcp_parse_reply+0x31c>)
 8013aa2:	f003 fb8f 	bl	80171c4 <iprintf>
 8013aa6:	f06f 0305 	mvn.w	r3, #5
 8013aaa:	e1b1      	b.n	8013e10 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013aac:	2306      	movs	r3, #6
 8013aae:	623b      	str	r3, [r7, #32]
        break;
 8013ab0:	e09b      	b.n	8013bea <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013ab2:	2304      	movs	r3, #4
 8013ab4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013ab8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013abc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d209      	bcs.n	8013ad8 <dhcp_parse_reply+0x244>
 8013ac4:	4b38      	ldr	r3, [pc, #224]	; (8013ba8 <dhcp_parse_reply+0x314>)
 8013ac6:	f240 6233 	movw	r2, #1587	; 0x633
 8013aca:	493a      	ldr	r1, [pc, #232]	; (8013bb4 <dhcp_parse_reply+0x320>)
 8013acc:	4838      	ldr	r0, [pc, #224]	; (8013bb0 <dhcp_parse_reply+0x31c>)
 8013ace:	f003 fb79 	bl	80171c4 <iprintf>
 8013ad2:	f06f 0305 	mvn.w	r3, #5
 8013ad6:	e19b      	b.n	8013e10 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013ad8:	2307      	movs	r3, #7
 8013ada:	623b      	str	r3, [r7, #32]
        break;
 8013adc:	e085      	b.n	8013bea <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ae2:	2b04      	cmp	r3, #4
 8013ae4:	d009      	beq.n	8013afa <dhcp_parse_reply+0x266>
 8013ae6:	4b30      	ldr	r3, [pc, #192]	; (8013ba8 <dhcp_parse_reply+0x314>)
 8013ae8:	f240 6241 	movw	r2, #1601	; 0x641
 8013aec:	492f      	ldr	r1, [pc, #188]	; (8013bac <dhcp_parse_reply+0x318>)
 8013aee:	4830      	ldr	r0, [pc, #192]	; (8013bb0 <dhcp_parse_reply+0x31c>)
 8013af0:	f003 fb68 	bl	80171c4 <iprintf>
 8013af4:	f06f 0305 	mvn.w	r3, #5
 8013af8:	e18a      	b.n	8013e10 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013afa:	2303      	movs	r3, #3
 8013afc:	623b      	str	r3, [r7, #32]
        break;
 8013afe:	e074      	b.n	8013bea <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013b00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d009      	beq.n	8013b1c <dhcp_parse_reply+0x288>
 8013b08:	4b27      	ldr	r3, [pc, #156]	; (8013ba8 <dhcp_parse_reply+0x314>)
 8013b0a:	f240 624f 	movw	r2, #1615	; 0x64f
 8013b0e:	492a      	ldr	r1, [pc, #168]	; (8013bb8 <dhcp_parse_reply+0x324>)
 8013b10:	4827      	ldr	r0, [pc, #156]	; (8013bb0 <dhcp_parse_reply+0x31c>)
 8013b12:	f003 fb57 	bl	80171c4 <iprintf>
 8013b16:	f06f 0305 	mvn.w	r3, #5
 8013b1a:	e179      	b.n	8013e10 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013b1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013b1e:	2bf0      	cmp	r3, #240	; 0xf0
 8013b20:	d009      	beq.n	8013b36 <dhcp_parse_reply+0x2a2>
 8013b22:	4b21      	ldr	r3, [pc, #132]	; (8013ba8 <dhcp_parse_reply+0x314>)
 8013b24:	f240 6251 	movw	r2, #1617	; 0x651
 8013b28:	4924      	ldr	r1, [pc, #144]	; (8013bbc <dhcp_parse_reply+0x328>)
 8013b2a:	4821      	ldr	r0, [pc, #132]	; (8013bb0 <dhcp_parse_reply+0x31c>)
 8013b2c:	f003 fb4a 	bl	80171c4 <iprintf>
 8013b30:	f06f 0305 	mvn.w	r3, #5
 8013b34:	e16c      	b.n	8013e10 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013b36:	2300      	movs	r3, #0
 8013b38:	623b      	str	r3, [r7, #32]
        break;
 8013b3a:	e056      	b.n	8013bea <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b40:	2b01      	cmp	r3, #1
 8013b42:	d009      	beq.n	8013b58 <dhcp_parse_reply+0x2c4>
 8013b44:	4b18      	ldr	r3, [pc, #96]	; (8013ba8 <dhcp_parse_reply+0x314>)
 8013b46:	f240 6255 	movw	r2, #1621	; 0x655
 8013b4a:	491b      	ldr	r1, [pc, #108]	; (8013bb8 <dhcp_parse_reply+0x324>)
 8013b4c:	4818      	ldr	r0, [pc, #96]	; (8013bb0 <dhcp_parse_reply+0x31c>)
 8013b4e:	f003 fb39 	bl	80171c4 <iprintf>
 8013b52:	f06f 0305 	mvn.w	r3, #5
 8013b56:	e15b      	b.n	8013e10 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013b58:	2301      	movs	r3, #1
 8013b5a:	623b      	str	r3, [r7, #32]
        break;
 8013b5c:	e045      	b.n	8013bea <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b62:	2b04      	cmp	r3, #4
 8013b64:	d009      	beq.n	8013b7a <dhcp_parse_reply+0x2e6>
 8013b66:	4b10      	ldr	r3, [pc, #64]	; (8013ba8 <dhcp_parse_reply+0x314>)
 8013b68:	f240 6259 	movw	r2, #1625	; 0x659
 8013b6c:	490f      	ldr	r1, [pc, #60]	; (8013bac <dhcp_parse_reply+0x318>)
 8013b6e:	4810      	ldr	r0, [pc, #64]	; (8013bb0 <dhcp_parse_reply+0x31c>)
 8013b70:	f003 fb28 	bl	80171c4 <iprintf>
 8013b74:	f06f 0305 	mvn.w	r3, #5
 8013b78:	e14a      	b.n	8013e10 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013b7a:	2302      	movs	r3, #2
 8013b7c:	623b      	str	r3, [r7, #32]
        break;
 8013b7e:	e034      	b.n	8013bea <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b84:	2b04      	cmp	r3, #4
 8013b86:	d009      	beq.n	8013b9c <dhcp_parse_reply+0x308>
 8013b88:	4b07      	ldr	r3, [pc, #28]	; (8013ba8 <dhcp_parse_reply+0x314>)
 8013b8a:	f240 625d 	movw	r2, #1629	; 0x65d
 8013b8e:	4907      	ldr	r1, [pc, #28]	; (8013bac <dhcp_parse_reply+0x318>)
 8013b90:	4807      	ldr	r0, [pc, #28]	; (8013bb0 <dhcp_parse_reply+0x31c>)
 8013b92:	f003 fb17 	bl	80171c4 <iprintf>
 8013b96:	f06f 0305 	mvn.w	r3, #5
 8013b9a:	e139      	b.n	8013e10 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013b9c:	2304      	movs	r3, #4
 8013b9e:	623b      	str	r3, [r7, #32]
        break;
 8013ba0:	e023      	b.n	8013bea <dhcp_parse_reply+0x356>
 8013ba2:	bf00      	nop
 8013ba4:	2000d654 	.word	0x2000d654
 8013ba8:	0801e894 	.word	0x0801e894
 8013bac:	0801eb1c 	.word	0x0801eb1c
 8013bb0:	0801e8f4 	.word	0x0801e8f4
 8013bb4:	0801eb28 	.word	0x0801eb28
 8013bb8:	0801eb3c 	.word	0x0801eb3c
 8013bbc:	0801eb48 	.word	0x0801eb48
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bc4:	2b04      	cmp	r3, #4
 8013bc6:	d009      	beq.n	8013bdc <dhcp_parse_reply+0x348>
 8013bc8:	4b93      	ldr	r3, [pc, #588]	; (8013e18 <dhcp_parse_reply+0x584>)
 8013bca:	f240 6261 	movw	r2, #1633	; 0x661
 8013bce:	4993      	ldr	r1, [pc, #588]	; (8013e1c <dhcp_parse_reply+0x588>)
 8013bd0:	4893      	ldr	r0, [pc, #588]	; (8013e20 <dhcp_parse_reply+0x58c>)
 8013bd2:	f003 faf7 	bl	80171c4 <iprintf>
 8013bd6:	f06f 0305 	mvn.w	r3, #5
 8013bda:	e119      	b.n	8013e10 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013bdc:	2305      	movs	r3, #5
 8013bde:	623b      	str	r3, [r7, #32]
        break;
 8013be0:	e003      	b.n	8013bea <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8013be2:	2300      	movs	r3, #0
 8013be4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013be8:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013bea:	7dfb      	ldrb	r3, [r7, #23]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d103      	bne.n	8013bf8 <dhcp_parse_reply+0x364>
      offset++;
 8013bf0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013bf6:	e0a1      	b.n	8013d3c <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013bf8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bfe:	4413      	add	r3, r2
 8013c00:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013c04:	4293      	cmp	r3, r2
 8013c06:	dd02      	ble.n	8013c0e <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013c08:	f06f 0301 	mvn.w	r3, #1
 8013c0c:	e100      	b.n	8013e10 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8013c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c16:	4413      	add	r3, r2
 8013c18:	b29b      	uxth	r3, r3
 8013c1a:	3302      	adds	r3, #2
 8013c1c:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013c1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	f000 808a 	beq.w	8013d3c <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013c2c:	6a3b      	ldr	r3, [r7, #32]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	db02      	blt.n	8013c38 <dhcp_parse_reply+0x3a4>
 8013c32:	6a3b      	ldr	r3, [r7, #32]
 8013c34:	2b07      	cmp	r3, #7
 8013c36:	dd06      	ble.n	8013c46 <dhcp_parse_reply+0x3b2>
 8013c38:	4b77      	ldr	r3, [pc, #476]	; (8013e18 <dhcp_parse_reply+0x584>)
 8013c3a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8013c3e:	4979      	ldr	r1, [pc, #484]	; (8013e24 <dhcp_parse_reply+0x590>)
 8013c40:	4877      	ldr	r0, [pc, #476]	; (8013e20 <dhcp_parse_reply+0x58c>)
 8013c42:	f003 fabf 	bl	80171c4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013c46:	4a78      	ldr	r2, [pc, #480]	; (8013e28 <dhcp_parse_reply+0x594>)
 8013c48:	6a3b      	ldr	r3, [r7, #32]
 8013c4a:	4413      	add	r3, r2
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d174      	bne.n	8013d3c <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8013c52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c56:	2b04      	cmp	r3, #4
 8013c58:	bf28      	it	cs
 8013c5a:	2304      	movcs	r3, #4
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013c60:	8bfb      	ldrh	r3, [r7, #30]
 8013c62:	8aba      	ldrh	r2, [r7, #20]
 8013c64:	f107 0108 	add.w	r1, r7, #8
 8013c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c6a:	f7f7 fcad 	bl	800b5c8 <pbuf_copy_partial>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	461a      	mov	r2, r3
 8013c72:	8abb      	ldrh	r3, [r7, #20]
 8013c74:	4293      	cmp	r3, r2
 8013c76:	d002      	beq.n	8013c7e <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8013c78:	f06f 0301 	mvn.w	r3, #1
 8013c7c:	e0c8      	b.n	8013e10 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8013c7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c82:	2b04      	cmp	r3, #4
 8013c84:	d933      	bls.n	8013cee <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013c86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c8a:	f003 0303 	and.w	r3, r3, #3
 8013c8e:	b2db      	uxtb	r3, r3
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d009      	beq.n	8013ca8 <dhcp_parse_reply+0x414>
 8013c94:	4b60      	ldr	r3, [pc, #384]	; (8013e18 <dhcp_parse_reply+0x584>)
 8013c96:	f240 6281 	movw	r2, #1665	; 0x681
 8013c9a:	4964      	ldr	r1, [pc, #400]	; (8013e2c <dhcp_parse_reply+0x598>)
 8013c9c:	4860      	ldr	r0, [pc, #384]	; (8013e20 <dhcp_parse_reply+0x58c>)
 8013c9e:	f003 fa91 	bl	80171c4 <iprintf>
 8013ca2:	f06f 0305 	mvn.w	r3, #5
 8013ca6:	e0b3      	b.n	8013e10 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8013ca8:	4a5f      	ldr	r2, [pc, #380]	; (8013e28 <dhcp_parse_reply+0x594>)
 8013caa:	6a3b      	ldr	r3, [r7, #32]
 8013cac:	4413      	add	r3, r2
 8013cae:	2201      	movs	r2, #1
 8013cb0:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	f7f5 ff08 	bl	8009aca <lwip_htonl>
 8013cba:	4602      	mov	r2, r0
 8013cbc:	495c      	ldr	r1, [pc, #368]	; (8013e30 <dhcp_parse_reply+0x59c>)
 8013cbe:	6a3b      	ldr	r3, [r7, #32]
 8013cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013cc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013cc8:	3b04      	subs	r3, #4
 8013cca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8013cce:	8bfb      	ldrh	r3, [r7, #30]
 8013cd0:	3304      	adds	r3, #4
 8013cd2:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013cd4:	8a7a      	ldrh	r2, [r7, #18]
 8013cd6:	8bfb      	ldrh	r3, [r7, #30]
 8013cd8:	429a      	cmp	r2, r3
 8013cda:	d202      	bcs.n	8013ce2 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8013cdc:	f06f 0301 	mvn.w	r3, #1
 8013ce0:	e096      	b.n	8013e10 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8013ce2:	8a7b      	ldrh	r3, [r7, #18]
 8013ce4:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013ce6:	6a3b      	ldr	r3, [r7, #32]
 8013ce8:	3301      	adds	r3, #1
 8013cea:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013cec:	e79e      	b.n	8013c2c <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8013cee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013cf2:	2b04      	cmp	r3, #4
 8013cf4:	d106      	bne.n	8013d04 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7f5 fee6 	bl	8009aca <lwip_htonl>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	60bb      	str	r3, [r7, #8]
 8013d02:	e011      	b.n	8013d28 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013d04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013d08:	2b01      	cmp	r3, #1
 8013d0a:	d009      	beq.n	8013d20 <dhcp_parse_reply+0x48c>
 8013d0c:	4b42      	ldr	r3, [pc, #264]	; (8013e18 <dhcp_parse_reply+0x584>)
 8013d0e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013d12:	4948      	ldr	r1, [pc, #288]	; (8013e34 <dhcp_parse_reply+0x5a0>)
 8013d14:	4842      	ldr	r0, [pc, #264]	; (8013e20 <dhcp_parse_reply+0x58c>)
 8013d16:	f003 fa55 	bl	80171c4 <iprintf>
 8013d1a:	f06f 0305 	mvn.w	r3, #5
 8013d1e:	e077      	b.n	8013e10 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8013d20:	f107 0308 	add.w	r3, r7, #8
 8013d24:	781b      	ldrb	r3, [r3, #0]
 8013d26:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013d28:	4a3f      	ldr	r2, [pc, #252]	; (8013e28 <dhcp_parse_reply+0x594>)
 8013d2a:	6a3b      	ldr	r3, [r7, #32]
 8013d2c:	4413      	add	r3, r2
 8013d2e:	2201      	movs	r2, #1
 8013d30:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013d32:	68ba      	ldr	r2, [r7, #8]
 8013d34:	493e      	ldr	r1, [pc, #248]	; (8013e30 <dhcp_parse_reply+0x59c>)
 8013d36:	6a3b      	ldr	r3, [r7, #32]
 8013d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3e:	895b      	ldrh	r3, [r3, #10]
 8013d40:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d324      	bcc.n	8013d90 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8013d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d48:	895b      	ldrh	r3, [r3, #10]
 8013d4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013d4c:	1ad3      	subs	r3, r2, r3
 8013d4e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d52:	895b      	ldrh	r3, [r3, #10]
 8013d54:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013d56:	1ad3      	subs	r3, r2, r3
 8013d58:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8013d5a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013d5c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013d5e:	429a      	cmp	r2, r3
 8013d60:	d213      	bcs.n	8013d8a <dhcp_parse_reply+0x4f6>
        q = q->next;
 8013d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d109      	bne.n	8013d82 <dhcp_parse_reply+0x4ee>
 8013d6e:	4b2a      	ldr	r3, [pc, #168]	; (8013e18 <dhcp_parse_reply+0x584>)
 8013d70:	f240 629d 	movw	r2, #1693	; 0x69d
 8013d74:	4930      	ldr	r1, [pc, #192]	; (8013e38 <dhcp_parse_reply+0x5a4>)
 8013d76:	482a      	ldr	r0, [pc, #168]	; (8013e20 <dhcp_parse_reply+0x58c>)
 8013d78:	f003 fa24 	bl	80171c4 <iprintf>
 8013d7c:	f06f 0305 	mvn.w	r3, #5
 8013d80:	e046      	b.n	8013e10 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8013d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d84:	685b      	ldr	r3, [r3, #4]
 8013d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013d88:	e002      	b.n	8013d90 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8013d8a:	f06f 0301 	mvn.w	r3, #1
 8013d8e:	e03f      	b.n	8013e10 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d00a      	beq.n	8013dac <dhcp_parse_reply+0x518>
 8013d96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013d98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d206      	bcs.n	8013dac <dhcp_parse_reply+0x518>
 8013d9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013da2:	4413      	add	r3, r2
 8013da4:	781b      	ldrb	r3, [r3, #0]
 8013da6:	2bff      	cmp	r3, #255	; 0xff
 8013da8:	f47f adb7 	bne.w	801391a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8013dac:	4b1e      	ldr	r3, [pc, #120]	; (8013e28 <dhcp_parse_reply+0x594>)
 8013dae:	781b      	ldrb	r3, [r3, #0]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d018      	beq.n	8013de6 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013db4:	4b1e      	ldr	r3, [pc, #120]	; (8013e30 <dhcp_parse_reply+0x59c>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013dba:	4b1b      	ldr	r3, [pc, #108]	; (8013e28 <dhcp_parse_reply+0x594>)
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d102      	bne.n	8013dcc <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013dca:	e00c      	b.n	8013de6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2b02      	cmp	r3, #2
 8013dd0:	d102      	bne.n	8013dd8 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8013dd6:	e006      	b.n	8013de6 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	2b03      	cmp	r3, #3
 8013ddc:	d103      	bne.n	8013de6 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8013dde:	2301      	movs	r3, #1
 8013de0:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8013de2:	2301      	movs	r3, #1
 8013de4:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8013de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d006      	beq.n	8013dfa <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013dec:	2300      	movs	r3, #0
 8013dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8013df0:	236c      	movs	r3, #108	; 0x6c
 8013df2:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013df4:	23ec      	movs	r3, #236	; 0xec
 8013df6:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013df8:	e569      	b.n	80138ce <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d006      	beq.n	8013e0e <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8013e00:	2300      	movs	r3, #0
 8013e02:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8013e04:	232c      	movs	r3, #44	; 0x2c
 8013e06:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013e08:	236c      	movs	r3, #108	; 0x6c
 8013e0a:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8013e0c:	e55f      	b.n	80138ce <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8013e0e:	2300      	movs	r3, #0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3740      	adds	r7, #64	; 0x40
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	0801e894 	.word	0x0801e894
 8013e1c:	0801eb1c 	.word	0x0801eb1c
 8013e20:	0801e8f4 	.word	0x0801e8f4
 8013e24:	0801eb60 	.word	0x0801eb60
 8013e28:	2000d654 	.word	0x2000d654
 8013e2c:	0801eb74 	.word	0x0801eb74
 8013e30:	2000d65c 	.word	0x2000d65c
 8013e34:	0801eb8c 	.word	0x0801eb8c
 8013e38:	0801eba0 	.word	0x0801eba0

08013e3c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b08a      	sub	sp, #40	; 0x28
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	60f8      	str	r0, [r7, #12]
 8013e44:	60b9      	str	r1, [r7, #8]
 8013e46:	607a      	str	r2, [r7, #4]
 8013e48:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013e4a:	4b60      	ldr	r3, [pc, #384]	; (8013fcc <dhcp_recv+0x190>)
 8013e4c:	685b      	ldr	r3, [r3, #4]
 8013e4e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e50:	6a3b      	ldr	r3, [r7, #32]
 8013e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e54:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	685b      	ldr	r3, [r3, #4]
 8013e5a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013e5c:	69fb      	ldr	r3, [r7, #28]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	f000 809d 	beq.w	8013f9e <dhcp_recv+0x162>
 8013e64:	69fb      	ldr	r3, [r7, #28]
 8013e66:	791b      	ldrb	r3, [r3, #4]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	f000 8098 	beq.w	8013f9e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	895b      	ldrh	r3, [r3, #10]
 8013e72:	2b2b      	cmp	r3, #43	; 0x2b
 8013e74:	f240 8095 	bls.w	8013fa2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013e78:	69bb      	ldr	r3, [r7, #24]
 8013e7a:	781b      	ldrb	r3, [r3, #0]
 8013e7c:	2b02      	cmp	r3, #2
 8013e7e:	f040 8092 	bne.w	8013fa6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013e82:	2300      	movs	r3, #0
 8013e84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013e88:	e012      	b.n	8013eb0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e8e:	6a3a      	ldr	r2, [r7, #32]
 8013e90:	4413      	add	r3, r2
 8013e92:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013e96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e9a:	69b9      	ldr	r1, [r7, #24]
 8013e9c:	440b      	add	r3, r1
 8013e9e:	7f1b      	ldrb	r3, [r3, #28]
 8013ea0:	429a      	cmp	r2, r3
 8013ea2:	f040 8082 	bne.w	8013faa <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013eaa:	3301      	adds	r3, #1
 8013eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013eb0:	6a3b      	ldr	r3, [r7, #32]
 8013eb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013eb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d203      	bcs.n	8013ec6 <dhcp_recv+0x8a>
 8013ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ec2:	2b05      	cmp	r3, #5
 8013ec4:	d9e1      	bls.n	8013e8a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013ec6:	69bb      	ldr	r3, [r7, #24]
 8013ec8:	685b      	ldr	r3, [r3, #4]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7f5 fdfd 	bl	8009aca <lwip_htonl>
 8013ed0:	4602      	mov	r2, r0
 8013ed2:	69fb      	ldr	r3, [r7, #28]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d169      	bne.n	8013fae <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8013eda:	69f9      	ldr	r1, [r7, #28]
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f7ff fcd9 	bl	8013894 <dhcp_parse_reply>
 8013ee2:	4603      	mov	r3, r0
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d164      	bne.n	8013fb2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013ee8:	4b39      	ldr	r3, [pc, #228]	; (8013fd0 <dhcp_recv+0x194>)
 8013eea:	785b      	ldrb	r3, [r3, #1]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d062      	beq.n	8013fb6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	685b      	ldr	r3, [r3, #4]
 8013ef4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013ef6:	4b37      	ldr	r3, [pc, #220]	; (8013fd4 <dhcp_recv+0x198>)
 8013ef8:	685b      	ldr	r3, [r3, #4]
 8013efa:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013efc:	7cfb      	ldrb	r3, [r7, #19]
 8013efe:	2b05      	cmp	r3, #5
 8013f00:	d12a      	bne.n	8013f58 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013f02:	69fb      	ldr	r3, [r7, #28]
 8013f04:	795b      	ldrb	r3, [r3, #5]
 8013f06:	2b01      	cmp	r3, #1
 8013f08:	d112      	bne.n	8013f30 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8013f0a:	6979      	ldr	r1, [r7, #20]
 8013f0c:	6a38      	ldr	r0, [r7, #32]
 8013f0e:	f7fe fe53 	bl	8012bb8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013f12:	6a3b      	ldr	r3, [r7, #32]
 8013f14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013f18:	f003 0308 	and.w	r3, r3, #8
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d003      	beq.n	8013f28 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013f20:	6a38      	ldr	r0, [r7, #32]
 8013f22:	f7fe fbc3 	bl	80126ac <dhcp_check>
 8013f26:	e049      	b.n	8013fbc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013f28:	6a38      	ldr	r0, [r7, #32]
 8013f2a:	f7ff f867 	bl	8012ffc <dhcp_bind>
 8013f2e:	e045      	b.n	8013fbc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013f30:	69fb      	ldr	r3, [r7, #28]
 8013f32:	795b      	ldrb	r3, [r3, #5]
 8013f34:	2b03      	cmp	r3, #3
 8013f36:	d007      	beq.n	8013f48 <dhcp_recv+0x10c>
 8013f38:	69fb      	ldr	r3, [r7, #28]
 8013f3a:	795b      	ldrb	r3, [r3, #5]
 8013f3c:	2b04      	cmp	r3, #4
 8013f3e:	d003      	beq.n	8013f48 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013f40:	69fb      	ldr	r3, [r7, #28]
 8013f42:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013f44:	2b05      	cmp	r3, #5
 8013f46:	d139      	bne.n	8013fbc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8013f48:	6979      	ldr	r1, [r7, #20]
 8013f4a:	6a38      	ldr	r0, [r7, #32]
 8013f4c:	f7fe fe34 	bl	8012bb8 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013f50:	6a38      	ldr	r0, [r7, #32]
 8013f52:	f7ff f853 	bl	8012ffc <dhcp_bind>
 8013f56:	e031      	b.n	8013fbc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013f58:	7cfb      	ldrb	r3, [r7, #19]
 8013f5a:	2b06      	cmp	r3, #6
 8013f5c:	d113      	bne.n	8013f86 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013f5e:	69fb      	ldr	r3, [r7, #28]
 8013f60:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8013f62:	2b03      	cmp	r3, #3
 8013f64:	d00b      	beq.n	8013f7e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013f66:	69fb      	ldr	r3, [r7, #28]
 8013f68:	795b      	ldrb	r3, [r3, #5]
 8013f6a:	2b01      	cmp	r3, #1
 8013f6c:	d007      	beq.n	8013f7e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013f6e:	69fb      	ldr	r3, [r7, #28]
 8013f70:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013f72:	2b04      	cmp	r3, #4
 8013f74:	d003      	beq.n	8013f7e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013f76:	69fb      	ldr	r3, [r7, #28]
 8013f78:	795b      	ldrb	r3, [r3, #5]
 8013f7a:	2b05      	cmp	r3, #5
 8013f7c:	d103      	bne.n	8013f86 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013f7e:	6a38      	ldr	r0, [r7, #32]
 8013f80:	f7fe fb7a 	bl	8012678 <dhcp_handle_nak>
 8013f84:	e01a      	b.n	8013fbc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013f86:	7cfb      	ldrb	r3, [r7, #19]
 8013f88:	2b02      	cmp	r3, #2
 8013f8a:	d116      	bne.n	8013fba <dhcp_recv+0x17e>
 8013f8c:	69fb      	ldr	r3, [r7, #28]
 8013f8e:	795b      	ldrb	r3, [r3, #5]
 8013f90:	2b06      	cmp	r3, #6
 8013f92:	d112      	bne.n	8013fba <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8013f94:	6979      	ldr	r1, [r7, #20]
 8013f96:	6a38      	ldr	r0, [r7, #32]
 8013f98:	f7fe fbbc 	bl	8012714 <dhcp_handle_offer>
 8013f9c:	e00e      	b.n	8013fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013f9e:	bf00      	nop
 8013fa0:	e00c      	b.n	8013fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013fa2:	bf00      	nop
 8013fa4:	e00a      	b.n	8013fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013fa6:	bf00      	nop
 8013fa8:	e008      	b.n	8013fbc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8013faa:	bf00      	nop
 8013fac:	e006      	b.n	8013fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013fae:	bf00      	nop
 8013fb0:	e004      	b.n	8013fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013fb2:	bf00      	nop
 8013fb4:	e002      	b.n	8013fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013fb6:	bf00      	nop
 8013fb8:	e000      	b.n	8013fbc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8013fba:	bf00      	nop
  pbuf_free(p);
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f7f7 f909 	bl	800b1d4 <pbuf_free>
}
 8013fc2:	bf00      	nop
 8013fc4:	3728      	adds	r7, #40	; 0x28
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}
 8013fca:	bf00      	nop
 8013fcc:	20009d08 	.word	0x20009d08
 8013fd0:	2000d654 	.word	0x2000d654
 8013fd4:	2000d65c 	.word	0x2000d65c

08013fd8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b088      	sub	sp, #32
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	60f8      	str	r0, [r7, #12]
 8013fe0:	60b9      	str	r1, [r7, #8]
 8013fe2:	603b      	str	r3, [r7, #0]
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d108      	bne.n	8014000 <dhcp_create_msg+0x28>
 8013fee:	4b5f      	ldr	r3, [pc, #380]	; (801416c <dhcp_create_msg+0x194>)
 8013ff0:	f240 7269 	movw	r2, #1897	; 0x769
 8013ff4:	495e      	ldr	r1, [pc, #376]	; (8014170 <dhcp_create_msg+0x198>)
 8013ff6:	485f      	ldr	r0, [pc, #380]	; (8014174 <dhcp_create_msg+0x19c>)
 8013ff8:	f003 f8e4 	bl	80171c4 <iprintf>
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	e0b1      	b.n	8014164 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014000:	68bb      	ldr	r3, [r7, #8]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d108      	bne.n	8014018 <dhcp_create_msg+0x40>
 8014006:	4b59      	ldr	r3, [pc, #356]	; (801416c <dhcp_create_msg+0x194>)
 8014008:	f240 726a 	movw	r2, #1898	; 0x76a
 801400c:	495a      	ldr	r1, [pc, #360]	; (8014178 <dhcp_create_msg+0x1a0>)
 801400e:	4859      	ldr	r0, [pc, #356]	; (8014174 <dhcp_create_msg+0x19c>)
 8014010:	f003 f8d8 	bl	80171c4 <iprintf>
 8014014:	2300      	movs	r3, #0
 8014016:	e0a5      	b.n	8014164 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014018:	f44f 7220 	mov.w	r2, #640	; 0x280
 801401c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014020:	2036      	movs	r0, #54	; 0x36
 8014022:	f7f6 fdf3 	bl	800ac0c <pbuf_alloc>
 8014026:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8014028:	69bb      	ldr	r3, [r7, #24]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d101      	bne.n	8014032 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801402e:	2300      	movs	r3, #0
 8014030:	e098      	b.n	8014164 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014032:	69bb      	ldr	r3, [r7, #24]
 8014034:	895b      	ldrh	r3, [r3, #10]
 8014036:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801403a:	d206      	bcs.n	801404a <dhcp_create_msg+0x72>
 801403c:	4b4b      	ldr	r3, [pc, #300]	; (801416c <dhcp_create_msg+0x194>)
 801403e:	f240 7271 	movw	r2, #1905	; 0x771
 8014042:	494e      	ldr	r1, [pc, #312]	; (801417c <dhcp_create_msg+0x1a4>)
 8014044:	484b      	ldr	r0, [pc, #300]	; (8014174 <dhcp_create_msg+0x19c>)
 8014046:	f003 f8bd 	bl	80171c4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801404a:	79fb      	ldrb	r3, [r7, #7]
 801404c:	2b03      	cmp	r3, #3
 801404e:	d103      	bne.n	8014058 <dhcp_create_msg+0x80>
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	795b      	ldrb	r3, [r3, #5]
 8014054:	2b03      	cmp	r3, #3
 8014056:	d10d      	bne.n	8014074 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014058:	68bb      	ldr	r3, [r7, #8]
 801405a:	799b      	ldrb	r3, [r3, #6]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d105      	bne.n	801406c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014060:	f003 f93e 	bl	80172e0 <rand>
 8014064:	4603      	mov	r3, r0
 8014066:	461a      	mov	r2, r3
 8014068:	4b45      	ldr	r3, [pc, #276]	; (8014180 <dhcp_create_msg+0x1a8>)
 801406a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801406c:	4b44      	ldr	r3, [pc, #272]	; (8014180 <dhcp_create_msg+0x1a8>)
 801406e:	681a      	ldr	r2, [r3, #0]
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014074:	69bb      	ldr	r3, [r7, #24]
 8014076:	685b      	ldr	r3, [r3, #4]
 8014078:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801407a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801407e:	2100      	movs	r1, #0
 8014080:	6978      	ldr	r0, [r7, #20]
 8014082:	f002 fc2d 	bl	80168e0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	2201      	movs	r2, #1
 801408a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	2201      	movs	r2, #1
 8014090:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014098:	697b      	ldr	r3, [r7, #20]
 801409a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801409c:	68bb      	ldr	r3, [r7, #8]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	4618      	mov	r0, r3
 80140a2:	f7f5 fd12 	bl	8009aca <lwip_htonl>
 80140a6:	4602      	mov	r2, r0
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80140ac:	79fb      	ldrb	r3, [r7, #7]
 80140ae:	2b08      	cmp	r3, #8
 80140b0:	d010      	beq.n	80140d4 <dhcp_create_msg+0xfc>
 80140b2:	79fb      	ldrb	r3, [r7, #7]
 80140b4:	2b04      	cmp	r3, #4
 80140b6:	d00d      	beq.n	80140d4 <dhcp_create_msg+0xfc>
 80140b8:	79fb      	ldrb	r3, [r7, #7]
 80140ba:	2b07      	cmp	r3, #7
 80140bc:	d00a      	beq.n	80140d4 <dhcp_create_msg+0xfc>
 80140be:	79fb      	ldrb	r3, [r7, #7]
 80140c0:	2b03      	cmp	r3, #3
 80140c2:	d10c      	bne.n	80140de <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80140c8:	2b05      	cmp	r3, #5
 80140ca:	d003      	beq.n	80140d4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	795b      	ldrb	r3, [r3, #5]
 80140d0:	2b04      	cmp	r3, #4
 80140d2:	d104      	bne.n	80140de <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	3304      	adds	r3, #4
 80140d8:	681a      	ldr	r2, [r3, #0]
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80140de:	2300      	movs	r3, #0
 80140e0:	83fb      	strh	r3, [r7, #30]
 80140e2:	e00c      	b.n	80140fe <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80140e4:	8bfa      	ldrh	r2, [r7, #30]
 80140e6:	8bfb      	ldrh	r3, [r7, #30]
 80140e8:	68f9      	ldr	r1, [r7, #12]
 80140ea:	440a      	add	r2, r1
 80140ec:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80140f0:	697a      	ldr	r2, [r7, #20]
 80140f2:	4413      	add	r3, r2
 80140f4:	460a      	mov	r2, r1
 80140f6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80140f8:	8bfb      	ldrh	r3, [r7, #30]
 80140fa:	3301      	adds	r3, #1
 80140fc:	83fb      	strh	r3, [r7, #30]
 80140fe:	8bfb      	ldrh	r3, [r7, #30]
 8014100:	2b05      	cmp	r3, #5
 8014102:	d9ef      	bls.n	80140e4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	2200      	movs	r2, #0
 8014108:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801410c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014110:	2200      	movs	r2, #0
 8014112:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8014116:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801411a:	2200      	movs	r2, #0
 801411c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014120:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014124:	2200      	movs	r2, #0
 8014126:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801412a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014134:	2301      	movs	r3, #1
 8014136:	2235      	movs	r2, #53	; 0x35
 8014138:	2000      	movs	r0, #0
 801413a:	f7ff fadb 	bl	80136f4 <dhcp_option>
 801413e:	4603      	mov	r3, r0
 8014140:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014148:	79fa      	ldrb	r2, [r7, #7]
 801414a:	8a7b      	ldrh	r3, [r7, #18]
 801414c:	4618      	mov	r0, r3
 801414e:	f7ff fb05 	bl	801375c <dhcp_option_byte>
 8014152:	4603      	mov	r3, r0
 8014154:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d002      	beq.n	8014162 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	8a7a      	ldrh	r2, [r7, #18]
 8014160:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8014162:	69bb      	ldr	r3, [r7, #24]
}
 8014164:	4618      	mov	r0, r3
 8014166:	3720      	adds	r7, #32
 8014168:	46bd      	mov	sp, r7
 801416a:	bd80      	pop	{r7, pc}
 801416c:	0801e894 	.word	0x0801e894
 8014170:	0801ebb4 	.word	0x0801ebb4
 8014174:	0801e8f4 	.word	0x0801e8f4
 8014178:	0801ebd4 	.word	0x0801ebd4
 801417c:	0801ebf4 	.word	0x0801ebf4
 8014180:	2000125c 	.word	0x2000125c

08014184 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b084      	sub	sp, #16
 8014188:	af00      	add	r7, sp, #0
 801418a:	4603      	mov	r3, r0
 801418c:	60b9      	str	r1, [r7, #8]
 801418e:	607a      	str	r2, [r7, #4]
 8014190:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8014192:	89fb      	ldrh	r3, [r7, #14]
 8014194:	1c5a      	adds	r2, r3, #1
 8014196:	81fa      	strh	r2, [r7, #14]
 8014198:	461a      	mov	r2, r3
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	4413      	add	r3, r2
 801419e:	22ff      	movs	r2, #255	; 0xff
 80141a0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80141a2:	e007      	b.n	80141b4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80141a4:	89fb      	ldrh	r3, [r7, #14]
 80141a6:	1c5a      	adds	r2, r3, #1
 80141a8:	81fa      	strh	r2, [r7, #14]
 80141aa:	461a      	mov	r2, r3
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	4413      	add	r3, r2
 80141b0:	2200      	movs	r2, #0
 80141b2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80141b4:	89fb      	ldrh	r3, [r7, #14]
 80141b6:	2b43      	cmp	r3, #67	; 0x43
 80141b8:	d904      	bls.n	80141c4 <dhcp_option_trailer+0x40>
 80141ba:	89fb      	ldrh	r3, [r7, #14]
 80141bc:	f003 0303 	and.w	r3, r3, #3
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d002      	beq.n	80141ca <dhcp_option_trailer+0x46>
 80141c4:	89fb      	ldrh	r3, [r7, #14]
 80141c6:	2b43      	cmp	r3, #67	; 0x43
 80141c8:	d9ec      	bls.n	80141a4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80141ca:	89fb      	ldrh	r3, [r7, #14]
 80141cc:	33f0      	adds	r3, #240	; 0xf0
 80141ce:	b29b      	uxth	r3, r3
 80141d0:	4619      	mov	r1, r3
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f7f6 fe78 	bl	800aec8 <pbuf_realloc>
}
 80141d8:	bf00      	nop
 80141da:	3710      	adds	r7, #16
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80141e0:	b480      	push	{r7}
 80141e2:	b085      	sub	sp, #20
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d017      	beq.n	801421e <dhcp_supplied_address+0x3e>
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d013      	beq.n	801421e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141fa:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	795b      	ldrb	r3, [r3, #5]
 8014200:	2b0a      	cmp	r3, #10
 8014202:	d007      	beq.n	8014214 <dhcp_supplied_address+0x34>
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	795b      	ldrb	r3, [r3, #5]
 8014208:	2b05      	cmp	r3, #5
 801420a:	d003      	beq.n	8014214 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014210:	2b04      	cmp	r3, #4
 8014212:	d101      	bne.n	8014218 <dhcp_supplied_address+0x38>
 8014214:	2301      	movs	r3, #1
 8014216:	e000      	b.n	801421a <dhcp_supplied_address+0x3a>
 8014218:	2300      	movs	r3, #0
 801421a:	b2db      	uxtb	r3, r3
 801421c:	e000      	b.n	8014220 <dhcp_supplied_address+0x40>
  }
  return 0;
 801421e:	2300      	movs	r3, #0
}
 8014220:	4618      	mov	r0, r3
 8014222:	3714      	adds	r7, #20
 8014224:	46bd      	mov	sp, r7
 8014226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422a:	4770      	bx	lr

0801422c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b082      	sub	sp, #8
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014234:	4915      	ldr	r1, [pc, #84]	; (801428c <etharp_free_entry+0x60>)
 8014236:	687a      	ldr	r2, [r7, #4]
 8014238:	4613      	mov	r3, r2
 801423a:	005b      	lsls	r3, r3, #1
 801423c:	4413      	add	r3, r2
 801423e:	00db      	lsls	r3, r3, #3
 8014240:	440b      	add	r3, r1
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	2b00      	cmp	r3, #0
 8014246:	d013      	beq.n	8014270 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014248:	4910      	ldr	r1, [pc, #64]	; (801428c <etharp_free_entry+0x60>)
 801424a:	687a      	ldr	r2, [r7, #4]
 801424c:	4613      	mov	r3, r2
 801424e:	005b      	lsls	r3, r3, #1
 8014250:	4413      	add	r3, r2
 8014252:	00db      	lsls	r3, r3, #3
 8014254:	440b      	add	r3, r1
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	4618      	mov	r0, r3
 801425a:	f7f6 ffbb 	bl	800b1d4 <pbuf_free>
    arp_table[i].q = NULL;
 801425e:	490b      	ldr	r1, [pc, #44]	; (801428c <etharp_free_entry+0x60>)
 8014260:	687a      	ldr	r2, [r7, #4]
 8014262:	4613      	mov	r3, r2
 8014264:	005b      	lsls	r3, r3, #1
 8014266:	4413      	add	r3, r2
 8014268:	00db      	lsls	r3, r3, #3
 801426a:	440b      	add	r3, r1
 801426c:	2200      	movs	r2, #0
 801426e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014270:	4906      	ldr	r1, [pc, #24]	; (801428c <etharp_free_entry+0x60>)
 8014272:	687a      	ldr	r2, [r7, #4]
 8014274:	4613      	mov	r3, r2
 8014276:	005b      	lsls	r3, r3, #1
 8014278:	4413      	add	r3, r2
 801427a:	00db      	lsls	r3, r3, #3
 801427c:	440b      	add	r3, r1
 801427e:	3314      	adds	r3, #20
 8014280:	2200      	movs	r2, #0
 8014282:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014284:	bf00      	nop
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	20001260 	.word	0x20001260

08014290 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014296:	2300      	movs	r3, #0
 8014298:	607b      	str	r3, [r7, #4]
 801429a:	e096      	b.n	80143ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801429c:	494f      	ldr	r1, [pc, #316]	; (80143dc <etharp_tmr+0x14c>)
 801429e:	687a      	ldr	r2, [r7, #4]
 80142a0:	4613      	mov	r3, r2
 80142a2:	005b      	lsls	r3, r3, #1
 80142a4:	4413      	add	r3, r2
 80142a6:	00db      	lsls	r3, r3, #3
 80142a8:	440b      	add	r3, r1
 80142aa:	3314      	adds	r3, #20
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80142b0:	78fb      	ldrb	r3, [r7, #3]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	f000 8086 	beq.w	80143c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80142b8:	4948      	ldr	r1, [pc, #288]	; (80143dc <etharp_tmr+0x14c>)
 80142ba:	687a      	ldr	r2, [r7, #4]
 80142bc:	4613      	mov	r3, r2
 80142be:	005b      	lsls	r3, r3, #1
 80142c0:	4413      	add	r3, r2
 80142c2:	00db      	lsls	r3, r3, #3
 80142c4:	440b      	add	r3, r1
 80142c6:	3312      	adds	r3, #18
 80142c8:	881b      	ldrh	r3, [r3, #0]
 80142ca:	3301      	adds	r3, #1
 80142cc:	b298      	uxth	r0, r3
 80142ce:	4943      	ldr	r1, [pc, #268]	; (80143dc <etharp_tmr+0x14c>)
 80142d0:	687a      	ldr	r2, [r7, #4]
 80142d2:	4613      	mov	r3, r2
 80142d4:	005b      	lsls	r3, r3, #1
 80142d6:	4413      	add	r3, r2
 80142d8:	00db      	lsls	r3, r3, #3
 80142da:	440b      	add	r3, r1
 80142dc:	3312      	adds	r3, #18
 80142de:	4602      	mov	r2, r0
 80142e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80142e2:	493e      	ldr	r1, [pc, #248]	; (80143dc <etharp_tmr+0x14c>)
 80142e4:	687a      	ldr	r2, [r7, #4]
 80142e6:	4613      	mov	r3, r2
 80142e8:	005b      	lsls	r3, r3, #1
 80142ea:	4413      	add	r3, r2
 80142ec:	00db      	lsls	r3, r3, #3
 80142ee:	440b      	add	r3, r1
 80142f0:	3312      	adds	r3, #18
 80142f2:	881b      	ldrh	r3, [r3, #0]
 80142f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80142f8:	d215      	bcs.n	8014326 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80142fa:	4938      	ldr	r1, [pc, #224]	; (80143dc <etharp_tmr+0x14c>)
 80142fc:	687a      	ldr	r2, [r7, #4]
 80142fe:	4613      	mov	r3, r2
 8014300:	005b      	lsls	r3, r3, #1
 8014302:	4413      	add	r3, r2
 8014304:	00db      	lsls	r3, r3, #3
 8014306:	440b      	add	r3, r1
 8014308:	3314      	adds	r3, #20
 801430a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801430c:	2b01      	cmp	r3, #1
 801430e:	d10e      	bne.n	801432e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014310:	4932      	ldr	r1, [pc, #200]	; (80143dc <etharp_tmr+0x14c>)
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	4613      	mov	r3, r2
 8014316:	005b      	lsls	r3, r3, #1
 8014318:	4413      	add	r3, r2
 801431a:	00db      	lsls	r3, r3, #3
 801431c:	440b      	add	r3, r1
 801431e:	3312      	adds	r3, #18
 8014320:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014322:	2b04      	cmp	r3, #4
 8014324:	d903      	bls.n	801432e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f7ff ff80 	bl	801422c <etharp_free_entry>
 801432c:	e04a      	b.n	80143c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801432e:	492b      	ldr	r1, [pc, #172]	; (80143dc <etharp_tmr+0x14c>)
 8014330:	687a      	ldr	r2, [r7, #4]
 8014332:	4613      	mov	r3, r2
 8014334:	005b      	lsls	r3, r3, #1
 8014336:	4413      	add	r3, r2
 8014338:	00db      	lsls	r3, r3, #3
 801433a:	440b      	add	r3, r1
 801433c:	3314      	adds	r3, #20
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	2b03      	cmp	r3, #3
 8014342:	d10a      	bne.n	801435a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014344:	4925      	ldr	r1, [pc, #148]	; (80143dc <etharp_tmr+0x14c>)
 8014346:	687a      	ldr	r2, [r7, #4]
 8014348:	4613      	mov	r3, r2
 801434a:	005b      	lsls	r3, r3, #1
 801434c:	4413      	add	r3, r2
 801434e:	00db      	lsls	r3, r3, #3
 8014350:	440b      	add	r3, r1
 8014352:	3314      	adds	r3, #20
 8014354:	2204      	movs	r2, #4
 8014356:	701a      	strb	r2, [r3, #0]
 8014358:	e034      	b.n	80143c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801435a:	4920      	ldr	r1, [pc, #128]	; (80143dc <etharp_tmr+0x14c>)
 801435c:	687a      	ldr	r2, [r7, #4]
 801435e:	4613      	mov	r3, r2
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	4413      	add	r3, r2
 8014364:	00db      	lsls	r3, r3, #3
 8014366:	440b      	add	r3, r1
 8014368:	3314      	adds	r3, #20
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	2b04      	cmp	r3, #4
 801436e:	d10a      	bne.n	8014386 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014370:	491a      	ldr	r1, [pc, #104]	; (80143dc <etharp_tmr+0x14c>)
 8014372:	687a      	ldr	r2, [r7, #4]
 8014374:	4613      	mov	r3, r2
 8014376:	005b      	lsls	r3, r3, #1
 8014378:	4413      	add	r3, r2
 801437a:	00db      	lsls	r3, r3, #3
 801437c:	440b      	add	r3, r1
 801437e:	3314      	adds	r3, #20
 8014380:	2202      	movs	r2, #2
 8014382:	701a      	strb	r2, [r3, #0]
 8014384:	e01e      	b.n	80143c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014386:	4915      	ldr	r1, [pc, #84]	; (80143dc <etharp_tmr+0x14c>)
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	4613      	mov	r3, r2
 801438c:	005b      	lsls	r3, r3, #1
 801438e:	4413      	add	r3, r2
 8014390:	00db      	lsls	r3, r3, #3
 8014392:	440b      	add	r3, r1
 8014394:	3314      	adds	r3, #20
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	2b01      	cmp	r3, #1
 801439a:	d113      	bne.n	80143c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801439c:	490f      	ldr	r1, [pc, #60]	; (80143dc <etharp_tmr+0x14c>)
 801439e:	687a      	ldr	r2, [r7, #4]
 80143a0:	4613      	mov	r3, r2
 80143a2:	005b      	lsls	r3, r3, #1
 80143a4:	4413      	add	r3, r2
 80143a6:	00db      	lsls	r3, r3, #3
 80143a8:	440b      	add	r3, r1
 80143aa:	3308      	adds	r3, #8
 80143ac:	6818      	ldr	r0, [r3, #0]
 80143ae:	687a      	ldr	r2, [r7, #4]
 80143b0:	4613      	mov	r3, r2
 80143b2:	005b      	lsls	r3, r3, #1
 80143b4:	4413      	add	r3, r2
 80143b6:	00db      	lsls	r3, r3, #3
 80143b8:	4a08      	ldr	r2, [pc, #32]	; (80143dc <etharp_tmr+0x14c>)
 80143ba:	4413      	add	r3, r2
 80143bc:	3304      	adds	r3, #4
 80143be:	4619      	mov	r1, r3
 80143c0:	f000 fe72 	bl	80150a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	3301      	adds	r3, #1
 80143c8:	607b      	str	r3, [r7, #4]
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	2b09      	cmp	r3, #9
 80143ce:	f77f af65 	ble.w	801429c <etharp_tmr+0xc>
      }
    }
  }
}
 80143d2:	bf00      	nop
 80143d4:	bf00      	nop
 80143d6:	3708      	adds	r7, #8
 80143d8:	46bd      	mov	sp, r7
 80143da:	bd80      	pop	{r7, pc}
 80143dc:	20001260 	.word	0x20001260

080143e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b08a      	sub	sp, #40	; 0x28
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	60f8      	str	r0, [r7, #12]
 80143e8:	460b      	mov	r3, r1
 80143ea:	607a      	str	r2, [r7, #4]
 80143ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80143ee:	230a      	movs	r3, #10
 80143f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80143f2:	230a      	movs	r3, #10
 80143f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80143f6:	230a      	movs	r3, #10
 80143f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80143fa:	2300      	movs	r3, #0
 80143fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80143fe:	230a      	movs	r3, #10
 8014400:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014402:	2300      	movs	r3, #0
 8014404:	83bb      	strh	r3, [r7, #28]
 8014406:	2300      	movs	r3, #0
 8014408:	837b      	strh	r3, [r7, #26]
 801440a:	2300      	movs	r3, #0
 801440c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801440e:	2300      	movs	r3, #0
 8014410:	843b      	strh	r3, [r7, #32]
 8014412:	e0ae      	b.n	8014572 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014418:	49a6      	ldr	r1, [pc, #664]	; (80146b4 <etharp_find_entry+0x2d4>)
 801441a:	4613      	mov	r3, r2
 801441c:	005b      	lsls	r3, r3, #1
 801441e:	4413      	add	r3, r2
 8014420:	00db      	lsls	r3, r3, #3
 8014422:	440b      	add	r3, r1
 8014424:	3314      	adds	r3, #20
 8014426:	781b      	ldrb	r3, [r3, #0]
 8014428:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801442a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801442e:	2b0a      	cmp	r3, #10
 8014430:	d105      	bne.n	801443e <etharp_find_entry+0x5e>
 8014432:	7dfb      	ldrb	r3, [r7, #23]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d102      	bne.n	801443e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014438:	8c3b      	ldrh	r3, [r7, #32]
 801443a:	847b      	strh	r3, [r7, #34]	; 0x22
 801443c:	e095      	b.n	801456a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801443e:	7dfb      	ldrb	r3, [r7, #23]
 8014440:	2b00      	cmp	r3, #0
 8014442:	f000 8092 	beq.w	801456a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014446:	7dfb      	ldrb	r3, [r7, #23]
 8014448:	2b01      	cmp	r3, #1
 801444a:	d009      	beq.n	8014460 <etharp_find_entry+0x80>
 801444c:	7dfb      	ldrb	r3, [r7, #23]
 801444e:	2b01      	cmp	r3, #1
 8014450:	d806      	bhi.n	8014460 <etharp_find_entry+0x80>
 8014452:	4b99      	ldr	r3, [pc, #612]	; (80146b8 <etharp_find_entry+0x2d8>)
 8014454:	f240 1223 	movw	r2, #291	; 0x123
 8014458:	4998      	ldr	r1, [pc, #608]	; (80146bc <etharp_find_entry+0x2dc>)
 801445a:	4899      	ldr	r0, [pc, #612]	; (80146c0 <etharp_find_entry+0x2e0>)
 801445c:	f002 feb2 	bl	80171c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d020      	beq.n	80144a8 <etharp_find_entry+0xc8>
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	6819      	ldr	r1, [r3, #0]
 801446a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801446e:	4891      	ldr	r0, [pc, #580]	; (80146b4 <etharp_find_entry+0x2d4>)
 8014470:	4613      	mov	r3, r2
 8014472:	005b      	lsls	r3, r3, #1
 8014474:	4413      	add	r3, r2
 8014476:	00db      	lsls	r3, r3, #3
 8014478:	4403      	add	r3, r0
 801447a:	3304      	adds	r3, #4
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	4299      	cmp	r1, r3
 8014480:	d112      	bne.n	80144a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d00c      	beq.n	80144a2 <etharp_find_entry+0xc2>
 8014488:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801448c:	4989      	ldr	r1, [pc, #548]	; (80146b4 <etharp_find_entry+0x2d4>)
 801448e:	4613      	mov	r3, r2
 8014490:	005b      	lsls	r3, r3, #1
 8014492:	4413      	add	r3, r2
 8014494:	00db      	lsls	r3, r3, #3
 8014496:	440b      	add	r3, r1
 8014498:	3308      	adds	r3, #8
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	687a      	ldr	r2, [r7, #4]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d102      	bne.n	80144a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80144a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80144a6:	e100      	b.n	80146aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80144a8:	7dfb      	ldrb	r3, [r7, #23]
 80144aa:	2b01      	cmp	r3, #1
 80144ac:	d140      	bne.n	8014530 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80144ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144b2:	4980      	ldr	r1, [pc, #512]	; (80146b4 <etharp_find_entry+0x2d4>)
 80144b4:	4613      	mov	r3, r2
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	4413      	add	r3, r2
 80144ba:	00db      	lsls	r3, r3, #3
 80144bc:	440b      	add	r3, r1
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d01a      	beq.n	80144fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80144c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144c8:	497a      	ldr	r1, [pc, #488]	; (80146b4 <etharp_find_entry+0x2d4>)
 80144ca:	4613      	mov	r3, r2
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	4413      	add	r3, r2
 80144d0:	00db      	lsls	r3, r3, #3
 80144d2:	440b      	add	r3, r1
 80144d4:	3312      	adds	r3, #18
 80144d6:	881b      	ldrh	r3, [r3, #0]
 80144d8:	8bba      	ldrh	r2, [r7, #28]
 80144da:	429a      	cmp	r2, r3
 80144dc:	d845      	bhi.n	801456a <etharp_find_entry+0x18a>
            old_queue = i;
 80144de:	8c3b      	ldrh	r3, [r7, #32]
 80144e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80144e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144e6:	4973      	ldr	r1, [pc, #460]	; (80146b4 <etharp_find_entry+0x2d4>)
 80144e8:	4613      	mov	r3, r2
 80144ea:	005b      	lsls	r3, r3, #1
 80144ec:	4413      	add	r3, r2
 80144ee:	00db      	lsls	r3, r3, #3
 80144f0:	440b      	add	r3, r1
 80144f2:	3312      	adds	r3, #18
 80144f4:	881b      	ldrh	r3, [r3, #0]
 80144f6:	83bb      	strh	r3, [r7, #28]
 80144f8:	e037      	b.n	801456a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80144fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144fe:	496d      	ldr	r1, [pc, #436]	; (80146b4 <etharp_find_entry+0x2d4>)
 8014500:	4613      	mov	r3, r2
 8014502:	005b      	lsls	r3, r3, #1
 8014504:	4413      	add	r3, r2
 8014506:	00db      	lsls	r3, r3, #3
 8014508:	440b      	add	r3, r1
 801450a:	3312      	adds	r3, #18
 801450c:	881b      	ldrh	r3, [r3, #0]
 801450e:	8b7a      	ldrh	r2, [r7, #26]
 8014510:	429a      	cmp	r2, r3
 8014512:	d82a      	bhi.n	801456a <etharp_find_entry+0x18a>
            old_pending = i;
 8014514:	8c3b      	ldrh	r3, [r7, #32]
 8014516:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801451c:	4965      	ldr	r1, [pc, #404]	; (80146b4 <etharp_find_entry+0x2d4>)
 801451e:	4613      	mov	r3, r2
 8014520:	005b      	lsls	r3, r3, #1
 8014522:	4413      	add	r3, r2
 8014524:	00db      	lsls	r3, r3, #3
 8014526:	440b      	add	r3, r1
 8014528:	3312      	adds	r3, #18
 801452a:	881b      	ldrh	r3, [r3, #0]
 801452c:	837b      	strh	r3, [r7, #26]
 801452e:	e01c      	b.n	801456a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014530:	7dfb      	ldrb	r3, [r7, #23]
 8014532:	2b01      	cmp	r3, #1
 8014534:	d919      	bls.n	801456a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801453a:	495e      	ldr	r1, [pc, #376]	; (80146b4 <etharp_find_entry+0x2d4>)
 801453c:	4613      	mov	r3, r2
 801453e:	005b      	lsls	r3, r3, #1
 8014540:	4413      	add	r3, r2
 8014542:	00db      	lsls	r3, r3, #3
 8014544:	440b      	add	r3, r1
 8014546:	3312      	adds	r3, #18
 8014548:	881b      	ldrh	r3, [r3, #0]
 801454a:	8b3a      	ldrh	r2, [r7, #24]
 801454c:	429a      	cmp	r2, r3
 801454e:	d80c      	bhi.n	801456a <etharp_find_entry+0x18a>
            old_stable = i;
 8014550:	8c3b      	ldrh	r3, [r7, #32]
 8014552:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014558:	4956      	ldr	r1, [pc, #344]	; (80146b4 <etharp_find_entry+0x2d4>)
 801455a:	4613      	mov	r3, r2
 801455c:	005b      	lsls	r3, r3, #1
 801455e:	4413      	add	r3, r2
 8014560:	00db      	lsls	r3, r3, #3
 8014562:	440b      	add	r3, r1
 8014564:	3312      	adds	r3, #18
 8014566:	881b      	ldrh	r3, [r3, #0]
 8014568:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801456a:	8c3b      	ldrh	r3, [r7, #32]
 801456c:	3301      	adds	r3, #1
 801456e:	b29b      	uxth	r3, r3
 8014570:	843b      	strh	r3, [r7, #32]
 8014572:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014576:	2b09      	cmp	r3, #9
 8014578:	f77f af4c 	ble.w	8014414 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801457c:	7afb      	ldrb	r3, [r7, #11]
 801457e:	f003 0302 	and.w	r3, r3, #2
 8014582:	2b00      	cmp	r3, #0
 8014584:	d108      	bne.n	8014598 <etharp_find_entry+0x1b8>
 8014586:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801458a:	2b0a      	cmp	r3, #10
 801458c:	d107      	bne.n	801459e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801458e:	7afb      	ldrb	r3, [r7, #11]
 8014590:	f003 0301 	and.w	r3, r3, #1
 8014594:	2b00      	cmp	r3, #0
 8014596:	d102      	bne.n	801459e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801459c:	e085      	b.n	80146aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801459e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80145a2:	2b09      	cmp	r3, #9
 80145a4:	dc02      	bgt.n	80145ac <etharp_find_entry+0x1cc>
    i = empty;
 80145a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80145a8:	843b      	strh	r3, [r7, #32]
 80145aa:	e039      	b.n	8014620 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80145ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80145b0:	2b09      	cmp	r3, #9
 80145b2:	dc14      	bgt.n	80145de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80145b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80145b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80145b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145bc:	493d      	ldr	r1, [pc, #244]	; (80146b4 <etharp_find_entry+0x2d4>)
 80145be:	4613      	mov	r3, r2
 80145c0:	005b      	lsls	r3, r3, #1
 80145c2:	4413      	add	r3, r2
 80145c4:	00db      	lsls	r3, r3, #3
 80145c6:	440b      	add	r3, r1
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d018      	beq.n	8014600 <etharp_find_entry+0x220>
 80145ce:	4b3a      	ldr	r3, [pc, #232]	; (80146b8 <etharp_find_entry+0x2d8>)
 80145d0:	f240 126d 	movw	r2, #365	; 0x16d
 80145d4:	493b      	ldr	r1, [pc, #236]	; (80146c4 <etharp_find_entry+0x2e4>)
 80145d6:	483a      	ldr	r0, [pc, #232]	; (80146c0 <etharp_find_entry+0x2e0>)
 80145d8:	f002 fdf4 	bl	80171c4 <iprintf>
 80145dc:	e010      	b.n	8014600 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80145de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80145e2:	2b09      	cmp	r3, #9
 80145e4:	dc02      	bgt.n	80145ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80145e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80145e8:	843b      	strh	r3, [r7, #32]
 80145ea:	e009      	b.n	8014600 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80145ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80145f0:	2b09      	cmp	r3, #9
 80145f2:	dc02      	bgt.n	80145fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80145f4:	8bfb      	ldrh	r3, [r7, #30]
 80145f6:	843b      	strh	r3, [r7, #32]
 80145f8:	e002      	b.n	8014600 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80145fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145fe:	e054      	b.n	80146aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014600:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014604:	2b09      	cmp	r3, #9
 8014606:	dd06      	ble.n	8014616 <etharp_find_entry+0x236>
 8014608:	4b2b      	ldr	r3, [pc, #172]	; (80146b8 <etharp_find_entry+0x2d8>)
 801460a:	f240 127f 	movw	r2, #383	; 0x17f
 801460e:	492e      	ldr	r1, [pc, #184]	; (80146c8 <etharp_find_entry+0x2e8>)
 8014610:	482b      	ldr	r0, [pc, #172]	; (80146c0 <etharp_find_entry+0x2e0>)
 8014612:	f002 fdd7 	bl	80171c4 <iprintf>
    etharp_free_entry(i);
 8014616:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801461a:	4618      	mov	r0, r3
 801461c:	f7ff fe06 	bl	801422c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014620:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014624:	2b09      	cmp	r3, #9
 8014626:	dd06      	ble.n	8014636 <etharp_find_entry+0x256>
 8014628:	4b23      	ldr	r3, [pc, #140]	; (80146b8 <etharp_find_entry+0x2d8>)
 801462a:	f240 1283 	movw	r2, #387	; 0x183
 801462e:	4926      	ldr	r1, [pc, #152]	; (80146c8 <etharp_find_entry+0x2e8>)
 8014630:	4823      	ldr	r0, [pc, #140]	; (80146c0 <etharp_find_entry+0x2e0>)
 8014632:	f002 fdc7 	bl	80171c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801463a:	491e      	ldr	r1, [pc, #120]	; (80146b4 <etharp_find_entry+0x2d4>)
 801463c:	4613      	mov	r3, r2
 801463e:	005b      	lsls	r3, r3, #1
 8014640:	4413      	add	r3, r2
 8014642:	00db      	lsls	r3, r3, #3
 8014644:	440b      	add	r3, r1
 8014646:	3314      	adds	r3, #20
 8014648:	781b      	ldrb	r3, [r3, #0]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d006      	beq.n	801465c <etharp_find_entry+0x27c>
 801464e:	4b1a      	ldr	r3, [pc, #104]	; (80146b8 <etharp_find_entry+0x2d8>)
 8014650:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014654:	491d      	ldr	r1, [pc, #116]	; (80146cc <etharp_find_entry+0x2ec>)
 8014656:	481a      	ldr	r0, [pc, #104]	; (80146c0 <etharp_find_entry+0x2e0>)
 8014658:	f002 fdb4 	bl	80171c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d00b      	beq.n	801467a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014662:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	6819      	ldr	r1, [r3, #0]
 801466a:	4812      	ldr	r0, [pc, #72]	; (80146b4 <etharp_find_entry+0x2d4>)
 801466c:	4613      	mov	r3, r2
 801466e:	005b      	lsls	r3, r3, #1
 8014670:	4413      	add	r3, r2
 8014672:	00db      	lsls	r3, r3, #3
 8014674:	4403      	add	r3, r0
 8014676:	3304      	adds	r3, #4
 8014678:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801467a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801467e:	490d      	ldr	r1, [pc, #52]	; (80146b4 <etharp_find_entry+0x2d4>)
 8014680:	4613      	mov	r3, r2
 8014682:	005b      	lsls	r3, r3, #1
 8014684:	4413      	add	r3, r2
 8014686:	00db      	lsls	r3, r3, #3
 8014688:	440b      	add	r3, r1
 801468a:	3312      	adds	r3, #18
 801468c:	2200      	movs	r2, #0
 801468e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014694:	4907      	ldr	r1, [pc, #28]	; (80146b4 <etharp_find_entry+0x2d4>)
 8014696:	4613      	mov	r3, r2
 8014698:	005b      	lsls	r3, r3, #1
 801469a:	4413      	add	r3, r2
 801469c:	00db      	lsls	r3, r3, #3
 801469e:	440b      	add	r3, r1
 80146a0:	3308      	adds	r3, #8
 80146a2:	687a      	ldr	r2, [r7, #4]
 80146a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80146a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3728      	adds	r7, #40	; 0x28
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}
 80146b2:	bf00      	nop
 80146b4:	20001260 	.word	0x20001260
 80146b8:	0801ec34 	.word	0x0801ec34
 80146bc:	0801ec6c 	.word	0x0801ec6c
 80146c0:	0801ecac 	.word	0x0801ecac
 80146c4:	0801ecd4 	.word	0x0801ecd4
 80146c8:	0801ecec 	.word	0x0801ecec
 80146cc:	0801ed00 	.word	0x0801ed00

080146d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b088      	sub	sp, #32
 80146d4:	af02      	add	r7, sp, #8
 80146d6:	60f8      	str	r0, [r7, #12]
 80146d8:	60b9      	str	r1, [r7, #8]
 80146da:	607a      	str	r2, [r7, #4]
 80146dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80146e4:	2b06      	cmp	r3, #6
 80146e6:	d006      	beq.n	80146f6 <etharp_update_arp_entry+0x26>
 80146e8:	4b48      	ldr	r3, [pc, #288]	; (801480c <etharp_update_arp_entry+0x13c>)
 80146ea:	f240 12a9 	movw	r2, #425	; 0x1a9
 80146ee:	4948      	ldr	r1, [pc, #288]	; (8014810 <etharp_update_arp_entry+0x140>)
 80146f0:	4848      	ldr	r0, [pc, #288]	; (8014814 <etharp_update_arp_entry+0x144>)
 80146f2:	f002 fd67 	bl	80171c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d012      	beq.n	8014722 <etharp_update_arp_entry+0x52>
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d00e      	beq.n	8014722 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	68f9      	ldr	r1, [r7, #12]
 801470a:	4618      	mov	r0, r3
 801470c:	f001 f937 	bl	801597e <ip4_addr_isbroadcast_u32>
 8014710:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014712:	2b00      	cmp	r3, #0
 8014714:	d105      	bne.n	8014722 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801471e:	2be0      	cmp	r3, #224	; 0xe0
 8014720:	d102      	bne.n	8014728 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014722:	f06f 030f 	mvn.w	r3, #15
 8014726:	e06c      	b.n	8014802 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014728:	78fb      	ldrb	r3, [r7, #3]
 801472a:	68fa      	ldr	r2, [r7, #12]
 801472c:	4619      	mov	r1, r3
 801472e:	68b8      	ldr	r0, [r7, #8]
 8014730:	f7ff fe56 	bl	80143e0 <etharp_find_entry>
 8014734:	4603      	mov	r3, r0
 8014736:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014738:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801473c:	2b00      	cmp	r3, #0
 801473e:	da02      	bge.n	8014746 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014740:	8afb      	ldrh	r3, [r7, #22]
 8014742:	b25b      	sxtb	r3, r3
 8014744:	e05d      	b.n	8014802 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014746:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801474a:	4933      	ldr	r1, [pc, #204]	; (8014818 <etharp_update_arp_entry+0x148>)
 801474c:	4613      	mov	r3, r2
 801474e:	005b      	lsls	r3, r3, #1
 8014750:	4413      	add	r3, r2
 8014752:	00db      	lsls	r3, r3, #3
 8014754:	440b      	add	r3, r1
 8014756:	3314      	adds	r3, #20
 8014758:	2202      	movs	r2, #2
 801475a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801475c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014760:	492d      	ldr	r1, [pc, #180]	; (8014818 <etharp_update_arp_entry+0x148>)
 8014762:	4613      	mov	r3, r2
 8014764:	005b      	lsls	r3, r3, #1
 8014766:	4413      	add	r3, r2
 8014768:	00db      	lsls	r3, r3, #3
 801476a:	440b      	add	r3, r1
 801476c:	3308      	adds	r3, #8
 801476e:	68fa      	ldr	r2, [r7, #12]
 8014770:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014772:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014776:	4613      	mov	r3, r2
 8014778:	005b      	lsls	r3, r3, #1
 801477a:	4413      	add	r3, r2
 801477c:	00db      	lsls	r3, r3, #3
 801477e:	3308      	adds	r3, #8
 8014780:	4a25      	ldr	r2, [pc, #148]	; (8014818 <etharp_update_arp_entry+0x148>)
 8014782:	4413      	add	r3, r2
 8014784:	3304      	adds	r3, #4
 8014786:	2206      	movs	r2, #6
 8014788:	6879      	ldr	r1, [r7, #4]
 801478a:	4618      	mov	r0, r3
 801478c:	f002 f880 	bl	8016890 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014790:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014794:	4920      	ldr	r1, [pc, #128]	; (8014818 <etharp_update_arp_entry+0x148>)
 8014796:	4613      	mov	r3, r2
 8014798:	005b      	lsls	r3, r3, #1
 801479a:	4413      	add	r3, r2
 801479c:	00db      	lsls	r3, r3, #3
 801479e:	440b      	add	r3, r1
 80147a0:	3312      	adds	r3, #18
 80147a2:	2200      	movs	r2, #0
 80147a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80147a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147aa:	491b      	ldr	r1, [pc, #108]	; (8014818 <etharp_update_arp_entry+0x148>)
 80147ac:	4613      	mov	r3, r2
 80147ae:	005b      	lsls	r3, r3, #1
 80147b0:	4413      	add	r3, r2
 80147b2:	00db      	lsls	r3, r3, #3
 80147b4:	440b      	add	r3, r1
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d021      	beq.n	8014800 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80147bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147c0:	4915      	ldr	r1, [pc, #84]	; (8014818 <etharp_update_arp_entry+0x148>)
 80147c2:	4613      	mov	r3, r2
 80147c4:	005b      	lsls	r3, r3, #1
 80147c6:	4413      	add	r3, r2
 80147c8:	00db      	lsls	r3, r3, #3
 80147ca:	440b      	add	r3, r1
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80147d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147d4:	4910      	ldr	r1, [pc, #64]	; (8014818 <etharp_update_arp_entry+0x148>)
 80147d6:	4613      	mov	r3, r2
 80147d8:	005b      	lsls	r3, r3, #1
 80147da:	4413      	add	r3, r2
 80147dc:	00db      	lsls	r3, r3, #3
 80147de:	440b      	add	r3, r1
 80147e0:	2200      	movs	r2, #0
 80147e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80147ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80147ee:	9300      	str	r3, [sp, #0]
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	6939      	ldr	r1, [r7, #16]
 80147f4:	68f8      	ldr	r0, [r7, #12]
 80147f6:	f001 ffc9 	bl	801678c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80147fa:	6938      	ldr	r0, [r7, #16]
 80147fc:	f7f6 fcea 	bl	800b1d4 <pbuf_free>
  }
  return ERR_OK;
 8014800:	2300      	movs	r3, #0
}
 8014802:	4618      	mov	r0, r3
 8014804:	3718      	adds	r7, #24
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}
 801480a:	bf00      	nop
 801480c:	0801ec34 	.word	0x0801ec34
 8014810:	0801ed2c 	.word	0x0801ed2c
 8014814:	0801ecac 	.word	0x0801ecac
 8014818:	20001260 	.word	0x20001260

0801481c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b084      	sub	sp, #16
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014824:	2300      	movs	r3, #0
 8014826:	60fb      	str	r3, [r7, #12]
 8014828:	e01e      	b.n	8014868 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801482a:	4913      	ldr	r1, [pc, #76]	; (8014878 <etharp_cleanup_netif+0x5c>)
 801482c:	68fa      	ldr	r2, [r7, #12]
 801482e:	4613      	mov	r3, r2
 8014830:	005b      	lsls	r3, r3, #1
 8014832:	4413      	add	r3, r2
 8014834:	00db      	lsls	r3, r3, #3
 8014836:	440b      	add	r3, r1
 8014838:	3314      	adds	r3, #20
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801483e:	7afb      	ldrb	r3, [r7, #11]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d00e      	beq.n	8014862 <etharp_cleanup_netif+0x46>
 8014844:	490c      	ldr	r1, [pc, #48]	; (8014878 <etharp_cleanup_netif+0x5c>)
 8014846:	68fa      	ldr	r2, [r7, #12]
 8014848:	4613      	mov	r3, r2
 801484a:	005b      	lsls	r3, r3, #1
 801484c:	4413      	add	r3, r2
 801484e:	00db      	lsls	r3, r3, #3
 8014850:	440b      	add	r3, r1
 8014852:	3308      	adds	r3, #8
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	687a      	ldr	r2, [r7, #4]
 8014858:	429a      	cmp	r2, r3
 801485a:	d102      	bne.n	8014862 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801485c:	68f8      	ldr	r0, [r7, #12]
 801485e:	f7ff fce5 	bl	801422c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	3301      	adds	r3, #1
 8014866:	60fb      	str	r3, [r7, #12]
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	2b09      	cmp	r3, #9
 801486c:	dddd      	ble.n	801482a <etharp_cleanup_netif+0xe>
    }
  }
}
 801486e:	bf00      	nop
 8014870:	bf00      	nop
 8014872:	3710      	adds	r7, #16
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	20001260 	.word	0x20001260

0801487c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801487c:	b5b0      	push	{r4, r5, r7, lr}
 801487e:	b08a      	sub	sp, #40	; 0x28
 8014880:	af04      	add	r7, sp, #16
 8014882:	6078      	str	r0, [r7, #4]
 8014884:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014886:	683b      	ldr	r3, [r7, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d107      	bne.n	801489c <etharp_input+0x20>
 801488c:	4b3f      	ldr	r3, [pc, #252]	; (801498c <etharp_input+0x110>)
 801488e:	f240 228a 	movw	r2, #650	; 0x28a
 8014892:	493f      	ldr	r1, [pc, #252]	; (8014990 <etharp_input+0x114>)
 8014894:	483f      	ldr	r0, [pc, #252]	; (8014994 <etharp_input+0x118>)
 8014896:	f002 fc95 	bl	80171c4 <iprintf>
 801489a:	e074      	b.n	8014986 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	685b      	ldr	r3, [r3, #4]
 80148a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80148a2:	693b      	ldr	r3, [r7, #16]
 80148a4:	881b      	ldrh	r3, [r3, #0]
 80148a6:	b29b      	uxth	r3, r3
 80148a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80148ac:	d10c      	bne.n	80148c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80148ae:	693b      	ldr	r3, [r7, #16]
 80148b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80148b2:	2b06      	cmp	r3, #6
 80148b4:	d108      	bne.n	80148c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80148ba:	2b04      	cmp	r3, #4
 80148bc:	d104      	bne.n	80148c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	885b      	ldrh	r3, [r3, #2]
 80148c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80148c4:	2b08      	cmp	r3, #8
 80148c6:	d003      	beq.n	80148d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f7f6 fc83 	bl	800b1d4 <pbuf_free>
    return;
 80148ce:	e05a      	b.n	8014986 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80148d0:	693b      	ldr	r3, [r7, #16]
 80148d2:	330e      	adds	r3, #14
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	3318      	adds	r3, #24
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	3304      	adds	r3, #4
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d102      	bne.n	80148f0 <etharp_input+0x74>
    for_us = 0;
 80148ea:	2300      	movs	r3, #0
 80148ec:	75fb      	strb	r3, [r7, #23]
 80148ee:	e009      	b.n	8014904 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80148f0:	68ba      	ldr	r2, [r7, #8]
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	3304      	adds	r3, #4
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	429a      	cmp	r2, r3
 80148fa:	bf0c      	ite	eq
 80148fc:	2301      	moveq	r3, #1
 80148fe:	2300      	movne	r3, #0
 8014900:	b2db      	uxtb	r3, r3
 8014902:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	f103 0208 	add.w	r2, r3, #8
 801490a:	7dfb      	ldrb	r3, [r7, #23]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d001      	beq.n	8014914 <etharp_input+0x98>
 8014910:	2301      	movs	r3, #1
 8014912:	e000      	b.n	8014916 <etharp_input+0x9a>
 8014914:	2302      	movs	r3, #2
 8014916:	f107 010c 	add.w	r1, r7, #12
 801491a:	6838      	ldr	r0, [r7, #0]
 801491c:	f7ff fed8 	bl	80146d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	88db      	ldrh	r3, [r3, #6]
 8014924:	b29b      	uxth	r3, r3
 8014926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801492a:	d003      	beq.n	8014934 <etharp_input+0xb8>
 801492c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014930:	d01e      	beq.n	8014970 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014932:	e025      	b.n	8014980 <etharp_input+0x104>
      if (for_us) {
 8014934:	7dfb      	ldrb	r3, [r7, #23]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d021      	beq.n	801497e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014950:	693a      	ldr	r2, [r7, #16]
 8014952:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014954:	2102      	movs	r1, #2
 8014956:	9103      	str	r1, [sp, #12]
 8014958:	f107 010c 	add.w	r1, r7, #12
 801495c:	9102      	str	r1, [sp, #8]
 801495e:	9201      	str	r2, [sp, #4]
 8014960:	9300      	str	r3, [sp, #0]
 8014962:	462b      	mov	r3, r5
 8014964:	4622      	mov	r2, r4
 8014966:	4601      	mov	r1, r0
 8014968:	6838      	ldr	r0, [r7, #0]
 801496a:	f000 faef 	bl	8014f4c <etharp_raw>
      break;
 801496e:	e006      	b.n	801497e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014970:	f107 030c 	add.w	r3, r7, #12
 8014974:	4619      	mov	r1, r3
 8014976:	6838      	ldr	r0, [r7, #0]
 8014978:	f7fe f9fc 	bl	8012d74 <dhcp_arp_reply>
      break;
 801497c:	e000      	b.n	8014980 <etharp_input+0x104>
      break;
 801497e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014980:	6878      	ldr	r0, [r7, #4]
 8014982:	f7f6 fc27 	bl	800b1d4 <pbuf_free>
}
 8014986:	3718      	adds	r7, #24
 8014988:	46bd      	mov	sp, r7
 801498a:	bdb0      	pop	{r4, r5, r7, pc}
 801498c:	0801ec34 	.word	0x0801ec34
 8014990:	0801ed84 	.word	0x0801ed84
 8014994:	0801ecac 	.word	0x0801ecac

08014998 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b086      	sub	sp, #24
 801499c:	af02      	add	r7, sp, #8
 801499e:	60f8      	str	r0, [r7, #12]
 80149a0:	60b9      	str	r1, [r7, #8]
 80149a2:	4613      	mov	r3, r2
 80149a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80149a6:	79fa      	ldrb	r2, [r7, #7]
 80149a8:	4944      	ldr	r1, [pc, #272]	; (8014abc <etharp_output_to_arp_index+0x124>)
 80149aa:	4613      	mov	r3, r2
 80149ac:	005b      	lsls	r3, r3, #1
 80149ae:	4413      	add	r3, r2
 80149b0:	00db      	lsls	r3, r3, #3
 80149b2:	440b      	add	r3, r1
 80149b4:	3314      	adds	r3, #20
 80149b6:	781b      	ldrb	r3, [r3, #0]
 80149b8:	2b01      	cmp	r3, #1
 80149ba:	d806      	bhi.n	80149ca <etharp_output_to_arp_index+0x32>
 80149bc:	4b40      	ldr	r3, [pc, #256]	; (8014ac0 <etharp_output_to_arp_index+0x128>)
 80149be:	f240 22ee 	movw	r2, #750	; 0x2ee
 80149c2:	4940      	ldr	r1, [pc, #256]	; (8014ac4 <etharp_output_to_arp_index+0x12c>)
 80149c4:	4840      	ldr	r0, [pc, #256]	; (8014ac8 <etharp_output_to_arp_index+0x130>)
 80149c6:	f002 fbfd 	bl	80171c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80149ca:	79fa      	ldrb	r2, [r7, #7]
 80149cc:	493b      	ldr	r1, [pc, #236]	; (8014abc <etharp_output_to_arp_index+0x124>)
 80149ce:	4613      	mov	r3, r2
 80149d0:	005b      	lsls	r3, r3, #1
 80149d2:	4413      	add	r3, r2
 80149d4:	00db      	lsls	r3, r3, #3
 80149d6:	440b      	add	r3, r1
 80149d8:	3314      	adds	r3, #20
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	2b02      	cmp	r3, #2
 80149de:	d153      	bne.n	8014a88 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80149e0:	79fa      	ldrb	r2, [r7, #7]
 80149e2:	4936      	ldr	r1, [pc, #216]	; (8014abc <etharp_output_to_arp_index+0x124>)
 80149e4:	4613      	mov	r3, r2
 80149e6:	005b      	lsls	r3, r3, #1
 80149e8:	4413      	add	r3, r2
 80149ea:	00db      	lsls	r3, r3, #3
 80149ec:	440b      	add	r3, r1
 80149ee:	3312      	adds	r3, #18
 80149f0:	881b      	ldrh	r3, [r3, #0]
 80149f2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80149f6:	d919      	bls.n	8014a2c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80149f8:	79fa      	ldrb	r2, [r7, #7]
 80149fa:	4613      	mov	r3, r2
 80149fc:	005b      	lsls	r3, r3, #1
 80149fe:	4413      	add	r3, r2
 8014a00:	00db      	lsls	r3, r3, #3
 8014a02:	4a2e      	ldr	r2, [pc, #184]	; (8014abc <etharp_output_to_arp_index+0x124>)
 8014a04:	4413      	add	r3, r2
 8014a06:	3304      	adds	r3, #4
 8014a08:	4619      	mov	r1, r3
 8014a0a:	68f8      	ldr	r0, [r7, #12]
 8014a0c:	f000 fb4c 	bl	80150a8 <etharp_request>
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d138      	bne.n	8014a88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014a16:	79fa      	ldrb	r2, [r7, #7]
 8014a18:	4928      	ldr	r1, [pc, #160]	; (8014abc <etharp_output_to_arp_index+0x124>)
 8014a1a:	4613      	mov	r3, r2
 8014a1c:	005b      	lsls	r3, r3, #1
 8014a1e:	4413      	add	r3, r2
 8014a20:	00db      	lsls	r3, r3, #3
 8014a22:	440b      	add	r3, r1
 8014a24:	3314      	adds	r3, #20
 8014a26:	2203      	movs	r2, #3
 8014a28:	701a      	strb	r2, [r3, #0]
 8014a2a:	e02d      	b.n	8014a88 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014a2c:	79fa      	ldrb	r2, [r7, #7]
 8014a2e:	4923      	ldr	r1, [pc, #140]	; (8014abc <etharp_output_to_arp_index+0x124>)
 8014a30:	4613      	mov	r3, r2
 8014a32:	005b      	lsls	r3, r3, #1
 8014a34:	4413      	add	r3, r2
 8014a36:	00db      	lsls	r3, r3, #3
 8014a38:	440b      	add	r3, r1
 8014a3a:	3312      	adds	r3, #18
 8014a3c:	881b      	ldrh	r3, [r3, #0]
 8014a3e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014a42:	d321      	bcc.n	8014a88 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014a44:	79fa      	ldrb	r2, [r7, #7]
 8014a46:	4613      	mov	r3, r2
 8014a48:	005b      	lsls	r3, r3, #1
 8014a4a:	4413      	add	r3, r2
 8014a4c:	00db      	lsls	r3, r3, #3
 8014a4e:	4a1b      	ldr	r2, [pc, #108]	; (8014abc <etharp_output_to_arp_index+0x124>)
 8014a50:	4413      	add	r3, r2
 8014a52:	1d19      	adds	r1, r3, #4
 8014a54:	79fa      	ldrb	r2, [r7, #7]
 8014a56:	4613      	mov	r3, r2
 8014a58:	005b      	lsls	r3, r3, #1
 8014a5a:	4413      	add	r3, r2
 8014a5c:	00db      	lsls	r3, r3, #3
 8014a5e:	3308      	adds	r3, #8
 8014a60:	4a16      	ldr	r2, [pc, #88]	; (8014abc <etharp_output_to_arp_index+0x124>)
 8014a62:	4413      	add	r3, r2
 8014a64:	3304      	adds	r3, #4
 8014a66:	461a      	mov	r2, r3
 8014a68:	68f8      	ldr	r0, [r7, #12]
 8014a6a:	f000 fafb 	bl	8015064 <etharp_request_dst>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d109      	bne.n	8014a88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014a74:	79fa      	ldrb	r2, [r7, #7]
 8014a76:	4911      	ldr	r1, [pc, #68]	; (8014abc <etharp_output_to_arp_index+0x124>)
 8014a78:	4613      	mov	r3, r2
 8014a7a:	005b      	lsls	r3, r3, #1
 8014a7c:	4413      	add	r3, r2
 8014a7e:	00db      	lsls	r3, r3, #3
 8014a80:	440b      	add	r3, r1
 8014a82:	3314      	adds	r3, #20
 8014a84:	2203      	movs	r2, #3
 8014a86:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014a8e:	79fa      	ldrb	r2, [r7, #7]
 8014a90:	4613      	mov	r3, r2
 8014a92:	005b      	lsls	r3, r3, #1
 8014a94:	4413      	add	r3, r2
 8014a96:	00db      	lsls	r3, r3, #3
 8014a98:	3308      	adds	r3, #8
 8014a9a:	4a08      	ldr	r2, [pc, #32]	; (8014abc <etharp_output_to_arp_index+0x124>)
 8014a9c:	4413      	add	r3, r2
 8014a9e:	3304      	adds	r3, #4
 8014aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014aa4:	9200      	str	r2, [sp, #0]
 8014aa6:	460a      	mov	r2, r1
 8014aa8:	68b9      	ldr	r1, [r7, #8]
 8014aaa:	68f8      	ldr	r0, [r7, #12]
 8014aac:	f001 fe6e 	bl	801678c <ethernet_output>
 8014ab0:	4603      	mov	r3, r0
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3710      	adds	r7, #16
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	20001260 	.word	0x20001260
 8014ac0:	0801ec34 	.word	0x0801ec34
 8014ac4:	0801eda4 	.word	0x0801eda4
 8014ac8:	0801ecac 	.word	0x0801ecac

08014acc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b08a      	sub	sp, #40	; 0x28
 8014ad0:	af02      	add	r7, sp, #8
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d106      	bne.n	8014af0 <etharp_output+0x24>
 8014ae2:	4b73      	ldr	r3, [pc, #460]	; (8014cb0 <etharp_output+0x1e4>)
 8014ae4:	f240 321e 	movw	r2, #798	; 0x31e
 8014ae8:	4972      	ldr	r1, [pc, #456]	; (8014cb4 <etharp_output+0x1e8>)
 8014aea:	4873      	ldr	r0, [pc, #460]	; (8014cb8 <etharp_output+0x1ec>)
 8014aec:	f002 fb6a 	bl	80171c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d106      	bne.n	8014b04 <etharp_output+0x38>
 8014af6:	4b6e      	ldr	r3, [pc, #440]	; (8014cb0 <etharp_output+0x1e4>)
 8014af8:	f240 321f 	movw	r2, #799	; 0x31f
 8014afc:	496f      	ldr	r1, [pc, #444]	; (8014cbc <etharp_output+0x1f0>)
 8014afe:	486e      	ldr	r0, [pc, #440]	; (8014cb8 <etharp_output+0x1ec>)
 8014b00:	f002 fb60 	bl	80171c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d106      	bne.n	8014b18 <etharp_output+0x4c>
 8014b0a:	4b69      	ldr	r3, [pc, #420]	; (8014cb0 <etharp_output+0x1e4>)
 8014b0c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014b10:	496b      	ldr	r1, [pc, #428]	; (8014cc0 <etharp_output+0x1f4>)
 8014b12:	4869      	ldr	r0, [pc, #420]	; (8014cb8 <etharp_output+0x1ec>)
 8014b14:	f002 fb56 	bl	80171c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	68f9      	ldr	r1, [r7, #12]
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f000 ff2d 	bl	801597e <ip4_addr_isbroadcast_u32>
 8014b24:	4603      	mov	r3, r0
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d002      	beq.n	8014b30 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014b2a:	4b66      	ldr	r3, [pc, #408]	; (8014cc4 <etharp_output+0x1f8>)
 8014b2c:	61fb      	str	r3, [r7, #28]
 8014b2e:	e0af      	b.n	8014c90 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b38:	2be0      	cmp	r3, #224	; 0xe0
 8014b3a:	d118      	bne.n	8014b6e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014b40:	2300      	movs	r3, #0
 8014b42:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014b44:	235e      	movs	r3, #94	; 0x5e
 8014b46:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	3301      	adds	r3, #1
 8014b4c:	781b      	ldrb	r3, [r3, #0]
 8014b4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b52:	b2db      	uxtb	r3, r3
 8014b54:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	3302      	adds	r3, #2
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	3303      	adds	r3, #3
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014b66:	f107 0310 	add.w	r3, r7, #16
 8014b6a:	61fb      	str	r3, [r7, #28]
 8014b6c:	e090      	b.n	8014c90 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681a      	ldr	r2, [r3, #0]
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	3304      	adds	r3, #4
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	405a      	eors	r2, r3
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	3308      	adds	r3, #8
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	4013      	ands	r3, r2
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d012      	beq.n	8014bac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014b8c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014b90:	4293      	cmp	r3, r2
 8014b92:	d00b      	beq.n	8014bac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	330c      	adds	r3, #12
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d003      	beq.n	8014ba6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	330c      	adds	r3, #12
 8014ba2:	61bb      	str	r3, [r7, #24]
 8014ba4:	e002      	b.n	8014bac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014ba6:	f06f 0303 	mvn.w	r3, #3
 8014baa:	e07d      	b.n	8014ca8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014bac:	4b46      	ldr	r3, [pc, #280]	; (8014cc8 <etharp_output+0x1fc>)
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	4619      	mov	r1, r3
 8014bb2:	4a46      	ldr	r2, [pc, #280]	; (8014ccc <etharp_output+0x200>)
 8014bb4:	460b      	mov	r3, r1
 8014bb6:	005b      	lsls	r3, r3, #1
 8014bb8:	440b      	add	r3, r1
 8014bba:	00db      	lsls	r3, r3, #3
 8014bbc:	4413      	add	r3, r2
 8014bbe:	3314      	adds	r3, #20
 8014bc0:	781b      	ldrb	r3, [r3, #0]
 8014bc2:	2b01      	cmp	r3, #1
 8014bc4:	d925      	bls.n	8014c12 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014bc6:	4b40      	ldr	r3, [pc, #256]	; (8014cc8 <etharp_output+0x1fc>)
 8014bc8:	781b      	ldrb	r3, [r3, #0]
 8014bca:	4619      	mov	r1, r3
 8014bcc:	4a3f      	ldr	r2, [pc, #252]	; (8014ccc <etharp_output+0x200>)
 8014bce:	460b      	mov	r3, r1
 8014bd0:	005b      	lsls	r3, r3, #1
 8014bd2:	440b      	add	r3, r1
 8014bd4:	00db      	lsls	r3, r3, #3
 8014bd6:	4413      	add	r3, r2
 8014bd8:	3308      	adds	r3, #8
 8014bda:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014bdc:	68fa      	ldr	r2, [r7, #12]
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d117      	bne.n	8014c12 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014be2:	69bb      	ldr	r3, [r7, #24]
 8014be4:	681a      	ldr	r2, [r3, #0]
 8014be6:	4b38      	ldr	r3, [pc, #224]	; (8014cc8 <etharp_output+0x1fc>)
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	4618      	mov	r0, r3
 8014bec:	4937      	ldr	r1, [pc, #220]	; (8014ccc <etharp_output+0x200>)
 8014bee:	4603      	mov	r3, r0
 8014bf0:	005b      	lsls	r3, r3, #1
 8014bf2:	4403      	add	r3, r0
 8014bf4:	00db      	lsls	r3, r3, #3
 8014bf6:	440b      	add	r3, r1
 8014bf8:	3304      	adds	r3, #4
 8014bfa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014bfc:	429a      	cmp	r2, r3
 8014bfe:	d108      	bne.n	8014c12 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014c00:	4b31      	ldr	r3, [pc, #196]	; (8014cc8 <etharp_output+0x1fc>)
 8014c02:	781b      	ldrb	r3, [r3, #0]
 8014c04:	461a      	mov	r2, r3
 8014c06:	68b9      	ldr	r1, [r7, #8]
 8014c08:	68f8      	ldr	r0, [r7, #12]
 8014c0a:	f7ff fec5 	bl	8014998 <etharp_output_to_arp_index>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	e04a      	b.n	8014ca8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014c12:	2300      	movs	r3, #0
 8014c14:	75fb      	strb	r3, [r7, #23]
 8014c16:	e031      	b.n	8014c7c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014c18:	7dfa      	ldrb	r2, [r7, #23]
 8014c1a:	492c      	ldr	r1, [pc, #176]	; (8014ccc <etharp_output+0x200>)
 8014c1c:	4613      	mov	r3, r2
 8014c1e:	005b      	lsls	r3, r3, #1
 8014c20:	4413      	add	r3, r2
 8014c22:	00db      	lsls	r3, r3, #3
 8014c24:	440b      	add	r3, r1
 8014c26:	3314      	adds	r3, #20
 8014c28:	781b      	ldrb	r3, [r3, #0]
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d923      	bls.n	8014c76 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014c2e:	7dfa      	ldrb	r2, [r7, #23]
 8014c30:	4926      	ldr	r1, [pc, #152]	; (8014ccc <etharp_output+0x200>)
 8014c32:	4613      	mov	r3, r2
 8014c34:	005b      	lsls	r3, r3, #1
 8014c36:	4413      	add	r3, r2
 8014c38:	00db      	lsls	r3, r3, #3
 8014c3a:	440b      	add	r3, r1
 8014c3c:	3308      	adds	r3, #8
 8014c3e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014c40:	68fa      	ldr	r2, [r7, #12]
 8014c42:	429a      	cmp	r2, r3
 8014c44:	d117      	bne.n	8014c76 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014c46:	69bb      	ldr	r3, [r7, #24]
 8014c48:	6819      	ldr	r1, [r3, #0]
 8014c4a:	7dfa      	ldrb	r2, [r7, #23]
 8014c4c:	481f      	ldr	r0, [pc, #124]	; (8014ccc <etharp_output+0x200>)
 8014c4e:	4613      	mov	r3, r2
 8014c50:	005b      	lsls	r3, r3, #1
 8014c52:	4413      	add	r3, r2
 8014c54:	00db      	lsls	r3, r3, #3
 8014c56:	4403      	add	r3, r0
 8014c58:	3304      	adds	r3, #4
 8014c5a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014c5c:	4299      	cmp	r1, r3
 8014c5e:	d10a      	bne.n	8014c76 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014c60:	4a19      	ldr	r2, [pc, #100]	; (8014cc8 <etharp_output+0x1fc>)
 8014c62:	7dfb      	ldrb	r3, [r7, #23]
 8014c64:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014c66:	7dfb      	ldrb	r3, [r7, #23]
 8014c68:	461a      	mov	r2, r3
 8014c6a:	68b9      	ldr	r1, [r7, #8]
 8014c6c:	68f8      	ldr	r0, [r7, #12]
 8014c6e:	f7ff fe93 	bl	8014998 <etharp_output_to_arp_index>
 8014c72:	4603      	mov	r3, r0
 8014c74:	e018      	b.n	8014ca8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014c76:	7dfb      	ldrb	r3, [r7, #23]
 8014c78:	3301      	adds	r3, #1
 8014c7a:	75fb      	strb	r3, [r7, #23]
 8014c7c:	7dfb      	ldrb	r3, [r7, #23]
 8014c7e:	2b09      	cmp	r3, #9
 8014c80:	d9ca      	bls.n	8014c18 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014c82:	68ba      	ldr	r2, [r7, #8]
 8014c84:	69b9      	ldr	r1, [r7, #24]
 8014c86:	68f8      	ldr	r0, [r7, #12]
 8014c88:	f000 f822 	bl	8014cd0 <etharp_query>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	e00b      	b.n	8014ca8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014c96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c9a:	9300      	str	r3, [sp, #0]
 8014c9c:	69fb      	ldr	r3, [r7, #28]
 8014c9e:	68b9      	ldr	r1, [r7, #8]
 8014ca0:	68f8      	ldr	r0, [r7, #12]
 8014ca2:	f001 fd73 	bl	801678c <ethernet_output>
 8014ca6:	4603      	mov	r3, r0
}
 8014ca8:	4618      	mov	r0, r3
 8014caa:	3720      	adds	r7, #32
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}
 8014cb0:	0801ec34 	.word	0x0801ec34
 8014cb4:	0801ed84 	.word	0x0801ed84
 8014cb8:	0801ecac 	.word	0x0801ecac
 8014cbc:	0801edd4 	.word	0x0801edd4
 8014cc0:	0801ed74 	.word	0x0801ed74
 8014cc4:	08032344 	.word	0x08032344
 8014cc8:	20001350 	.word	0x20001350
 8014ccc:	20001260 	.word	0x20001260

08014cd0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014cd0:	b580      	push	{r7, lr}
 8014cd2:	b08c      	sub	sp, #48	; 0x30
 8014cd4:	af02      	add	r7, sp, #8
 8014cd6:	60f8      	str	r0, [r7, #12]
 8014cd8:	60b9      	str	r1, [r7, #8]
 8014cda:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	332a      	adds	r3, #42	; 0x2a
 8014ce0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014ce2:	23ff      	movs	r3, #255	; 0xff
 8014ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014cec:	68bb      	ldr	r3, [r7, #8]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	68f9      	ldr	r1, [r7, #12]
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f000 fe43 	bl	801597e <ip4_addr_isbroadcast_u32>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d10c      	bne.n	8014d18 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014cfe:	68bb      	ldr	r3, [r7, #8]
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d06:	2be0      	cmp	r3, #224	; 0xe0
 8014d08:	d006      	beq.n	8014d18 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d003      	beq.n	8014d18 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d102      	bne.n	8014d1e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014d18:	f06f 030f 	mvn.w	r3, #15
 8014d1c:	e101      	b.n	8014f22 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014d1e:	68fa      	ldr	r2, [r7, #12]
 8014d20:	2101      	movs	r1, #1
 8014d22:	68b8      	ldr	r0, [r7, #8]
 8014d24:	f7ff fb5c 	bl	80143e0 <etharp_find_entry>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014d2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	da02      	bge.n	8014d3a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014d34:	8a7b      	ldrh	r3, [r7, #18]
 8014d36:	b25b      	sxtb	r3, r3
 8014d38:	e0f3      	b.n	8014f22 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014d3a:	8a7b      	ldrh	r3, [r7, #18]
 8014d3c:	2b7e      	cmp	r3, #126	; 0x7e
 8014d3e:	d906      	bls.n	8014d4e <etharp_query+0x7e>
 8014d40:	4b7a      	ldr	r3, [pc, #488]	; (8014f2c <etharp_query+0x25c>)
 8014d42:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014d46:	497a      	ldr	r1, [pc, #488]	; (8014f30 <etharp_query+0x260>)
 8014d48:	487a      	ldr	r0, [pc, #488]	; (8014f34 <etharp_query+0x264>)
 8014d4a:	f002 fa3b 	bl	80171c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014d4e:	8a7b      	ldrh	r3, [r7, #18]
 8014d50:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014d52:	7c7a      	ldrb	r2, [r7, #17]
 8014d54:	4978      	ldr	r1, [pc, #480]	; (8014f38 <etharp_query+0x268>)
 8014d56:	4613      	mov	r3, r2
 8014d58:	005b      	lsls	r3, r3, #1
 8014d5a:	4413      	add	r3, r2
 8014d5c:	00db      	lsls	r3, r3, #3
 8014d5e:	440b      	add	r3, r1
 8014d60:	3314      	adds	r3, #20
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d115      	bne.n	8014d94 <etharp_query+0xc4>
    is_new_entry = 1;
 8014d68:	2301      	movs	r3, #1
 8014d6a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014d6c:	7c7a      	ldrb	r2, [r7, #17]
 8014d6e:	4972      	ldr	r1, [pc, #456]	; (8014f38 <etharp_query+0x268>)
 8014d70:	4613      	mov	r3, r2
 8014d72:	005b      	lsls	r3, r3, #1
 8014d74:	4413      	add	r3, r2
 8014d76:	00db      	lsls	r3, r3, #3
 8014d78:	440b      	add	r3, r1
 8014d7a:	3314      	adds	r3, #20
 8014d7c:	2201      	movs	r2, #1
 8014d7e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014d80:	7c7a      	ldrb	r2, [r7, #17]
 8014d82:	496d      	ldr	r1, [pc, #436]	; (8014f38 <etharp_query+0x268>)
 8014d84:	4613      	mov	r3, r2
 8014d86:	005b      	lsls	r3, r3, #1
 8014d88:	4413      	add	r3, r2
 8014d8a:	00db      	lsls	r3, r3, #3
 8014d8c:	440b      	add	r3, r1
 8014d8e:	3308      	adds	r3, #8
 8014d90:	68fa      	ldr	r2, [r7, #12]
 8014d92:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014d94:	7c7a      	ldrb	r2, [r7, #17]
 8014d96:	4968      	ldr	r1, [pc, #416]	; (8014f38 <etharp_query+0x268>)
 8014d98:	4613      	mov	r3, r2
 8014d9a:	005b      	lsls	r3, r3, #1
 8014d9c:	4413      	add	r3, r2
 8014d9e:	00db      	lsls	r3, r3, #3
 8014da0:	440b      	add	r3, r1
 8014da2:	3314      	adds	r3, #20
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	2b01      	cmp	r3, #1
 8014da8:	d011      	beq.n	8014dce <etharp_query+0xfe>
 8014daa:	7c7a      	ldrb	r2, [r7, #17]
 8014dac:	4962      	ldr	r1, [pc, #392]	; (8014f38 <etharp_query+0x268>)
 8014dae:	4613      	mov	r3, r2
 8014db0:	005b      	lsls	r3, r3, #1
 8014db2:	4413      	add	r3, r2
 8014db4:	00db      	lsls	r3, r3, #3
 8014db6:	440b      	add	r3, r1
 8014db8:	3314      	adds	r3, #20
 8014dba:	781b      	ldrb	r3, [r3, #0]
 8014dbc:	2b01      	cmp	r3, #1
 8014dbe:	d806      	bhi.n	8014dce <etharp_query+0xfe>
 8014dc0:	4b5a      	ldr	r3, [pc, #360]	; (8014f2c <etharp_query+0x25c>)
 8014dc2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014dc6:	495d      	ldr	r1, [pc, #372]	; (8014f3c <etharp_query+0x26c>)
 8014dc8:	485a      	ldr	r0, [pc, #360]	; (8014f34 <etharp_query+0x264>)
 8014dca:	f002 f9fb 	bl	80171c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014dce:	6a3b      	ldr	r3, [r7, #32]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d102      	bne.n	8014dda <etharp_query+0x10a>
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d10c      	bne.n	8014df4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014dda:	68b9      	ldr	r1, [r7, #8]
 8014ddc:	68f8      	ldr	r0, [r7, #12]
 8014dde:	f000 f963 	bl	80150a8 <etharp_request>
 8014de2:	4603      	mov	r3, r0
 8014de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d102      	bne.n	8014df4 <etharp_query+0x124>
      return result;
 8014dee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014df2:	e096      	b.n	8014f22 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d106      	bne.n	8014e08 <etharp_query+0x138>
 8014dfa:	4b4c      	ldr	r3, [pc, #304]	; (8014f2c <etharp_query+0x25c>)
 8014dfc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014e00:	494f      	ldr	r1, [pc, #316]	; (8014f40 <etharp_query+0x270>)
 8014e02:	484c      	ldr	r0, [pc, #304]	; (8014f34 <etharp_query+0x264>)
 8014e04:	f002 f9de 	bl	80171c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014e08:	7c7a      	ldrb	r2, [r7, #17]
 8014e0a:	494b      	ldr	r1, [pc, #300]	; (8014f38 <etharp_query+0x268>)
 8014e0c:	4613      	mov	r3, r2
 8014e0e:	005b      	lsls	r3, r3, #1
 8014e10:	4413      	add	r3, r2
 8014e12:	00db      	lsls	r3, r3, #3
 8014e14:	440b      	add	r3, r1
 8014e16:	3314      	adds	r3, #20
 8014e18:	781b      	ldrb	r3, [r3, #0]
 8014e1a:	2b01      	cmp	r3, #1
 8014e1c:	d917      	bls.n	8014e4e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014e1e:	4a49      	ldr	r2, [pc, #292]	; (8014f44 <etharp_query+0x274>)
 8014e20:	7c7b      	ldrb	r3, [r7, #17]
 8014e22:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014e24:	7c7a      	ldrb	r2, [r7, #17]
 8014e26:	4613      	mov	r3, r2
 8014e28:	005b      	lsls	r3, r3, #1
 8014e2a:	4413      	add	r3, r2
 8014e2c:	00db      	lsls	r3, r3, #3
 8014e2e:	3308      	adds	r3, #8
 8014e30:	4a41      	ldr	r2, [pc, #260]	; (8014f38 <etharp_query+0x268>)
 8014e32:	4413      	add	r3, r2
 8014e34:	3304      	adds	r3, #4
 8014e36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e3a:	9200      	str	r2, [sp, #0]
 8014e3c:	697a      	ldr	r2, [r7, #20]
 8014e3e:	6879      	ldr	r1, [r7, #4]
 8014e40:	68f8      	ldr	r0, [r7, #12]
 8014e42:	f001 fca3 	bl	801678c <ethernet_output>
 8014e46:	4603      	mov	r3, r0
 8014e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e4c:	e067      	b.n	8014f1e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014e4e:	7c7a      	ldrb	r2, [r7, #17]
 8014e50:	4939      	ldr	r1, [pc, #228]	; (8014f38 <etharp_query+0x268>)
 8014e52:	4613      	mov	r3, r2
 8014e54:	005b      	lsls	r3, r3, #1
 8014e56:	4413      	add	r3, r2
 8014e58:	00db      	lsls	r3, r3, #3
 8014e5a:	440b      	add	r3, r1
 8014e5c:	3314      	adds	r3, #20
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	2b01      	cmp	r3, #1
 8014e62:	d15c      	bne.n	8014f1e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014e64:	2300      	movs	r3, #0
 8014e66:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014e6c:	e01c      	b.n	8014ea8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014e6e:	69fb      	ldr	r3, [r7, #28]
 8014e70:	895a      	ldrh	r2, [r3, #10]
 8014e72:	69fb      	ldr	r3, [r7, #28]
 8014e74:	891b      	ldrh	r3, [r3, #8]
 8014e76:	429a      	cmp	r2, r3
 8014e78:	d10a      	bne.n	8014e90 <etharp_query+0x1c0>
 8014e7a:	69fb      	ldr	r3, [r7, #28]
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d006      	beq.n	8014e90 <etharp_query+0x1c0>
 8014e82:	4b2a      	ldr	r3, [pc, #168]	; (8014f2c <etharp_query+0x25c>)
 8014e84:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014e88:	492f      	ldr	r1, [pc, #188]	; (8014f48 <etharp_query+0x278>)
 8014e8a:	482a      	ldr	r0, [pc, #168]	; (8014f34 <etharp_query+0x264>)
 8014e8c:	f002 f99a 	bl	80171c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014e90:	69fb      	ldr	r3, [r7, #28]
 8014e92:	7b1b      	ldrb	r3, [r3, #12]
 8014e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e98:	2b00      	cmp	r3, #0
 8014e9a:	d002      	beq.n	8014ea2 <etharp_query+0x1d2>
        copy_needed = 1;
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	61bb      	str	r3, [r7, #24]
        break;
 8014ea0:	e005      	b.n	8014eae <etharp_query+0x1de>
      }
      p = p->next;
 8014ea2:	69fb      	ldr	r3, [r7, #28]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ea8:	69fb      	ldr	r3, [r7, #28]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d1df      	bne.n	8014e6e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014eae:	69bb      	ldr	r3, [r7, #24]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d007      	beq.n	8014ec4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014eba:	200e      	movs	r0, #14
 8014ebc:	f7f6 fbf6 	bl	800b6ac <pbuf_clone>
 8014ec0:	61f8      	str	r0, [r7, #28]
 8014ec2:	e004      	b.n	8014ece <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014ec8:	69f8      	ldr	r0, [r7, #28]
 8014eca:	f7f6 fa23 	bl	800b314 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014ece:	69fb      	ldr	r3, [r7, #28]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d021      	beq.n	8014f18 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014ed4:	7c7a      	ldrb	r2, [r7, #17]
 8014ed6:	4918      	ldr	r1, [pc, #96]	; (8014f38 <etharp_query+0x268>)
 8014ed8:	4613      	mov	r3, r2
 8014eda:	005b      	lsls	r3, r3, #1
 8014edc:	4413      	add	r3, r2
 8014ede:	00db      	lsls	r3, r3, #3
 8014ee0:	440b      	add	r3, r1
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d00a      	beq.n	8014efe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014ee8:	7c7a      	ldrb	r2, [r7, #17]
 8014eea:	4913      	ldr	r1, [pc, #76]	; (8014f38 <etharp_query+0x268>)
 8014eec:	4613      	mov	r3, r2
 8014eee:	005b      	lsls	r3, r3, #1
 8014ef0:	4413      	add	r3, r2
 8014ef2:	00db      	lsls	r3, r3, #3
 8014ef4:	440b      	add	r3, r1
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7f6 f96b 	bl	800b1d4 <pbuf_free>
      }
      arp_table[i].q = p;
 8014efe:	7c7a      	ldrb	r2, [r7, #17]
 8014f00:	490d      	ldr	r1, [pc, #52]	; (8014f38 <etharp_query+0x268>)
 8014f02:	4613      	mov	r3, r2
 8014f04:	005b      	lsls	r3, r3, #1
 8014f06:	4413      	add	r3, r2
 8014f08:	00db      	lsls	r3, r3, #3
 8014f0a:	440b      	add	r3, r1
 8014f0c:	69fa      	ldr	r2, [r7, #28]
 8014f0e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014f10:	2300      	movs	r3, #0
 8014f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f16:	e002      	b.n	8014f1e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014f18:	23ff      	movs	r3, #255	; 0xff
 8014f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014f1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	3728      	adds	r7, #40	; 0x28
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	0801ec34 	.word	0x0801ec34
 8014f30:	0801ede0 	.word	0x0801ede0
 8014f34:	0801ecac 	.word	0x0801ecac
 8014f38:	20001260 	.word	0x20001260
 8014f3c:	0801edf0 	.word	0x0801edf0
 8014f40:	0801edd4 	.word	0x0801edd4
 8014f44:	20001350 	.word	0x20001350
 8014f48:	0801ee18 	.word	0x0801ee18

08014f4c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b08a      	sub	sp, #40	; 0x28
 8014f50:	af02      	add	r7, sp, #8
 8014f52:	60f8      	str	r0, [r7, #12]
 8014f54:	60b9      	str	r1, [r7, #8]
 8014f56:	607a      	str	r2, [r7, #4]
 8014f58:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d106      	bne.n	8014f72 <etharp_raw+0x26>
 8014f64:	4b3a      	ldr	r3, [pc, #232]	; (8015050 <etharp_raw+0x104>)
 8014f66:	f240 4257 	movw	r2, #1111	; 0x457
 8014f6a:	493a      	ldr	r1, [pc, #232]	; (8015054 <etharp_raw+0x108>)
 8014f6c:	483a      	ldr	r0, [pc, #232]	; (8015058 <etharp_raw+0x10c>)
 8014f6e:	f002 f929 	bl	80171c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014f72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f76:	211c      	movs	r1, #28
 8014f78:	200e      	movs	r0, #14
 8014f7a:	f7f5 fe47 	bl	800ac0c <pbuf_alloc>
 8014f7e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014f80:	69bb      	ldr	r3, [r7, #24]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d102      	bne.n	8014f8c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f8a:	e05d      	b.n	8015048 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014f8c:	69bb      	ldr	r3, [r7, #24]
 8014f8e:	895b      	ldrh	r3, [r3, #10]
 8014f90:	2b1b      	cmp	r3, #27
 8014f92:	d806      	bhi.n	8014fa2 <etharp_raw+0x56>
 8014f94:	4b2e      	ldr	r3, [pc, #184]	; (8015050 <etharp_raw+0x104>)
 8014f96:	f240 4262 	movw	r2, #1122	; 0x462
 8014f9a:	4930      	ldr	r1, [pc, #192]	; (801505c <etharp_raw+0x110>)
 8014f9c:	482e      	ldr	r0, [pc, #184]	; (8015058 <etharp_raw+0x10c>)
 8014f9e:	f002 f911 	bl	80171c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014fa2:	69bb      	ldr	r3, [r7, #24]
 8014fa4:	685b      	ldr	r3, [r3, #4]
 8014fa6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014fa8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014faa:	4618      	mov	r0, r3
 8014fac:	f7f4 fd78 	bl	8009aa0 <lwip_htons>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	461a      	mov	r2, r3
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014fbe:	2b06      	cmp	r3, #6
 8014fc0:	d006      	beq.n	8014fd0 <etharp_raw+0x84>
 8014fc2:	4b23      	ldr	r3, [pc, #140]	; (8015050 <etharp_raw+0x104>)
 8014fc4:	f240 4269 	movw	r2, #1129	; 0x469
 8014fc8:	4925      	ldr	r1, [pc, #148]	; (8015060 <etharp_raw+0x114>)
 8014fca:	4823      	ldr	r0, [pc, #140]	; (8015058 <etharp_raw+0x10c>)
 8014fcc:	f002 f8fa 	bl	80171c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014fd0:	697b      	ldr	r3, [r7, #20]
 8014fd2:	3308      	adds	r3, #8
 8014fd4:	2206      	movs	r2, #6
 8014fd6:	6839      	ldr	r1, [r7, #0]
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f001 fc59 	bl	8016890 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	3312      	adds	r3, #18
 8014fe2:	2206      	movs	r2, #6
 8014fe4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f001 fc52 	bl	8016890 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	330e      	adds	r3, #14
 8014ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ff2:	6812      	ldr	r2, [r2, #0]
 8014ff4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	3318      	adds	r3, #24
 8014ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014ffc:	6812      	ldr	r2, [r2, #0]
 8014ffe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	2200      	movs	r2, #0
 8015004:	701a      	strb	r2, [r3, #0]
 8015006:	2200      	movs	r2, #0
 8015008:	f042 0201 	orr.w	r2, r2, #1
 801500c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	2200      	movs	r2, #0
 8015012:	f042 0208 	orr.w	r2, r2, #8
 8015016:	709a      	strb	r2, [r3, #2]
 8015018:	2200      	movs	r2, #0
 801501a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	2206      	movs	r2, #6
 8015020:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015022:	697b      	ldr	r3, [r7, #20]
 8015024:	2204      	movs	r2, #4
 8015026:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015028:	f640 0306 	movw	r3, #2054	; 0x806
 801502c:	9300      	str	r3, [sp, #0]
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	68ba      	ldr	r2, [r7, #8]
 8015032:	69b9      	ldr	r1, [r7, #24]
 8015034:	68f8      	ldr	r0, [r7, #12]
 8015036:	f001 fba9 	bl	801678c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801503a:	69b8      	ldr	r0, [r7, #24]
 801503c:	f7f6 f8ca 	bl	800b1d4 <pbuf_free>
  p = NULL;
 8015040:	2300      	movs	r3, #0
 8015042:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015044:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015048:	4618      	mov	r0, r3
 801504a:	3720      	adds	r7, #32
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	0801ec34 	.word	0x0801ec34
 8015054:	0801ed84 	.word	0x0801ed84
 8015058:	0801ecac 	.word	0x0801ecac
 801505c:	0801ee34 	.word	0x0801ee34
 8015060:	0801ee68 	.word	0x0801ee68

08015064 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b088      	sub	sp, #32
 8015068:	af04      	add	r7, sp, #16
 801506a:	60f8      	str	r0, [r7, #12]
 801506c:	60b9      	str	r1, [r7, #8]
 801506e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015080:	2201      	movs	r2, #1
 8015082:	9203      	str	r2, [sp, #12]
 8015084:	68ba      	ldr	r2, [r7, #8]
 8015086:	9202      	str	r2, [sp, #8]
 8015088:	4a06      	ldr	r2, [pc, #24]	; (80150a4 <etharp_request_dst+0x40>)
 801508a:	9201      	str	r2, [sp, #4]
 801508c:	9300      	str	r3, [sp, #0]
 801508e:	4603      	mov	r3, r0
 8015090:	687a      	ldr	r2, [r7, #4]
 8015092:	68f8      	ldr	r0, [r7, #12]
 8015094:	f7ff ff5a 	bl	8014f4c <etharp_raw>
 8015098:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801509a:	4618      	mov	r0, r3
 801509c:	3710      	adds	r7, #16
 801509e:	46bd      	mov	sp, r7
 80150a0:	bd80      	pop	{r7, pc}
 80150a2:	bf00      	nop
 80150a4:	0803234c 	.word	0x0803234c

080150a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80150b2:	4a05      	ldr	r2, [pc, #20]	; (80150c8 <etharp_request+0x20>)
 80150b4:	6839      	ldr	r1, [r7, #0]
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f7ff ffd4 	bl	8015064 <etharp_request_dst>
 80150bc:	4603      	mov	r3, r0
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3708      	adds	r7, #8
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	bf00      	nop
 80150c8:	08032344 	.word	0x08032344

080150cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b08e      	sub	sp, #56	; 0x38
 80150d0:	af04      	add	r7, sp, #16
 80150d2:	6078      	str	r0, [r7, #4]
 80150d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80150d6:	4b79      	ldr	r3, [pc, #484]	; (80152bc <icmp_input+0x1f0>)
 80150d8:	689b      	ldr	r3, [r3, #8]
 80150da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80150dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	f003 030f 	and.w	r3, r3, #15
 80150e4:	b2db      	uxtb	r3, r3
 80150e6:	009b      	lsls	r3, r3, #2
 80150e8:	b2db      	uxtb	r3, r3
 80150ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80150ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80150ee:	2b13      	cmp	r3, #19
 80150f0:	f240 80cd 	bls.w	801528e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	895b      	ldrh	r3, [r3, #10]
 80150f8:	2b03      	cmp	r3, #3
 80150fa:	f240 80ca 	bls.w	8015292 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	685b      	ldr	r3, [r3, #4]
 8015102:	781b      	ldrb	r3, [r3, #0]
 8015104:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015108:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801510c:	2b00      	cmp	r3, #0
 801510e:	f000 80b7 	beq.w	8015280 <icmp_input+0x1b4>
 8015112:	2b08      	cmp	r3, #8
 8015114:	f040 80b7 	bne.w	8015286 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015118:	4b69      	ldr	r3, [pc, #420]	; (80152c0 <icmp_input+0x1f4>)
 801511a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801511c:	4b67      	ldr	r3, [pc, #412]	; (80152bc <icmp_input+0x1f0>)
 801511e:	695b      	ldr	r3, [r3, #20]
 8015120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015124:	2be0      	cmp	r3, #224	; 0xe0
 8015126:	f000 80bb 	beq.w	80152a0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801512a:	4b64      	ldr	r3, [pc, #400]	; (80152bc <icmp_input+0x1f0>)
 801512c:	695b      	ldr	r3, [r3, #20]
 801512e:	4a63      	ldr	r2, [pc, #396]	; (80152bc <icmp_input+0x1f0>)
 8015130:	6812      	ldr	r2, [r2, #0]
 8015132:	4611      	mov	r1, r2
 8015134:	4618      	mov	r0, r3
 8015136:	f000 fc22 	bl	801597e <ip4_addr_isbroadcast_u32>
 801513a:	4603      	mov	r3, r0
 801513c:	2b00      	cmp	r3, #0
 801513e:	f040 80b1 	bne.w	80152a4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	891b      	ldrh	r3, [r3, #8]
 8015146:	2b07      	cmp	r3, #7
 8015148:	f240 80a5 	bls.w	8015296 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801514c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801514e:	330e      	adds	r3, #14
 8015150:	4619      	mov	r1, r3
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	f7f5 ffa8 	bl	800b0a8 <pbuf_add_header>
 8015158:	4603      	mov	r3, r0
 801515a:	2b00      	cmp	r3, #0
 801515c:	d04b      	beq.n	80151f6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	891a      	ldrh	r2, [r3, #8]
 8015162:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015164:	4413      	add	r3, r2
 8015166:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	891b      	ldrh	r3, [r3, #8]
 801516c:	8b7a      	ldrh	r2, [r7, #26]
 801516e:	429a      	cmp	r2, r3
 8015170:	f0c0 809a 	bcc.w	80152a8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015174:	8b7b      	ldrh	r3, [r7, #26]
 8015176:	f44f 7220 	mov.w	r2, #640	; 0x280
 801517a:	4619      	mov	r1, r3
 801517c:	200e      	movs	r0, #14
 801517e:	f7f5 fd45 	bl	800ac0c <pbuf_alloc>
 8015182:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015184:	697b      	ldr	r3, [r7, #20]
 8015186:	2b00      	cmp	r3, #0
 8015188:	f000 8090 	beq.w	80152ac <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	895b      	ldrh	r3, [r3, #10]
 8015190:	461a      	mov	r2, r3
 8015192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015194:	3308      	adds	r3, #8
 8015196:	429a      	cmp	r2, r3
 8015198:	d203      	bcs.n	80151a2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801519a:	6978      	ldr	r0, [r7, #20]
 801519c:	f7f6 f81a 	bl	800b1d4 <pbuf_free>
          goto icmperr;
 80151a0:	e085      	b.n	80152ae <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80151a2:	697b      	ldr	r3, [r7, #20]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80151a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80151aa:	4618      	mov	r0, r3
 80151ac:	f001 fb70 	bl	8016890 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80151b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151b2:	4619      	mov	r1, r3
 80151b4:	6978      	ldr	r0, [r7, #20]
 80151b6:	f7f5 ff87 	bl	800b0c8 <pbuf_remove_header>
 80151ba:	4603      	mov	r3, r0
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d009      	beq.n	80151d4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80151c0:	4b40      	ldr	r3, [pc, #256]	; (80152c4 <icmp_input+0x1f8>)
 80151c2:	22b6      	movs	r2, #182	; 0xb6
 80151c4:	4940      	ldr	r1, [pc, #256]	; (80152c8 <icmp_input+0x1fc>)
 80151c6:	4841      	ldr	r0, [pc, #260]	; (80152cc <icmp_input+0x200>)
 80151c8:	f001 fffc 	bl	80171c4 <iprintf>
          pbuf_free(r);
 80151cc:	6978      	ldr	r0, [r7, #20]
 80151ce:	f7f6 f801 	bl	800b1d4 <pbuf_free>
          goto icmperr;
 80151d2:	e06c      	b.n	80152ae <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80151d4:	6879      	ldr	r1, [r7, #4]
 80151d6:	6978      	ldr	r0, [r7, #20]
 80151d8:	f7f6 f924 	bl	800b424 <pbuf_copy>
 80151dc:	4603      	mov	r3, r0
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d003      	beq.n	80151ea <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80151e2:	6978      	ldr	r0, [r7, #20]
 80151e4:	f7f5 fff6 	bl	800b1d4 <pbuf_free>
          goto icmperr;
 80151e8:	e061      	b.n	80152ae <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80151ea:	6878      	ldr	r0, [r7, #4]
 80151ec:	f7f5 fff2 	bl	800b1d4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80151f0:	697b      	ldr	r3, [r7, #20]
 80151f2:	607b      	str	r3, [r7, #4]
 80151f4:	e00f      	b.n	8015216 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80151f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151f8:	330e      	adds	r3, #14
 80151fa:	4619      	mov	r1, r3
 80151fc:	6878      	ldr	r0, [r7, #4]
 80151fe:	f7f5 ff63 	bl	800b0c8 <pbuf_remove_header>
 8015202:	4603      	mov	r3, r0
 8015204:	2b00      	cmp	r3, #0
 8015206:	d006      	beq.n	8015216 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015208:	4b2e      	ldr	r3, [pc, #184]	; (80152c4 <icmp_input+0x1f8>)
 801520a:	22c7      	movs	r2, #199	; 0xc7
 801520c:	4930      	ldr	r1, [pc, #192]	; (80152d0 <icmp_input+0x204>)
 801520e:	482f      	ldr	r0, [pc, #188]	; (80152cc <icmp_input+0x200>)
 8015210:	f001 ffd8 	bl	80171c4 <iprintf>
          goto icmperr;
 8015214:	e04b      	b.n	80152ae <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	685b      	ldr	r3, [r3, #4]
 801521a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801521c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801521e:	4619      	mov	r1, r3
 8015220:	6878      	ldr	r0, [r7, #4]
 8015222:	f7f5 ff41 	bl	800b0a8 <pbuf_add_header>
 8015226:	4603      	mov	r3, r0
 8015228:	2b00      	cmp	r3, #0
 801522a:	d12b      	bne.n	8015284 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015232:	69fb      	ldr	r3, [r7, #28]
 8015234:	681a      	ldr	r2, [r3, #0]
 8015236:	68fb      	ldr	r3, [r7, #12]
 8015238:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801523a:	4b20      	ldr	r3, [pc, #128]	; (80152bc <icmp_input+0x1f0>)
 801523c:	691a      	ldr	r2, [r3, #16]
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015242:	693b      	ldr	r3, [r7, #16]
 8015244:	2200      	movs	r2, #0
 8015246:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	2200      	movs	r2, #0
 801524c:	709a      	strb	r2, [r3, #2]
 801524e:	2200      	movs	r2, #0
 8015250:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	22ff      	movs	r2, #255	; 0xff
 8015256:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	2200      	movs	r2, #0
 801525c:	729a      	strb	r2, [r3, #10]
 801525e:	2200      	movs	r2, #0
 8015260:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015262:	683b      	ldr	r3, [r7, #0]
 8015264:	9302      	str	r3, [sp, #8]
 8015266:	2301      	movs	r3, #1
 8015268:	9301      	str	r3, [sp, #4]
 801526a:	2300      	movs	r3, #0
 801526c:	9300      	str	r3, [sp, #0]
 801526e:	23ff      	movs	r3, #255	; 0xff
 8015270:	2200      	movs	r2, #0
 8015272:	69f9      	ldr	r1, [r7, #28]
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f000 fa99 	bl	80157ac <ip4_output_if>
 801527a:	4603      	mov	r3, r0
 801527c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801527e:	e001      	b.n	8015284 <icmp_input+0x1b8>
      break;
 8015280:	bf00      	nop
 8015282:	e000      	b.n	8015286 <icmp_input+0x1ba>
      break;
 8015284:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015286:	6878      	ldr	r0, [r7, #4]
 8015288:	f7f5 ffa4 	bl	800b1d4 <pbuf_free>
  return;
 801528c:	e013      	b.n	80152b6 <icmp_input+0x1ea>
    goto lenerr;
 801528e:	bf00      	nop
 8015290:	e002      	b.n	8015298 <icmp_input+0x1cc>
    goto lenerr;
 8015292:	bf00      	nop
 8015294:	e000      	b.n	8015298 <icmp_input+0x1cc>
        goto lenerr;
 8015296:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015298:	6878      	ldr	r0, [r7, #4]
 801529a:	f7f5 ff9b 	bl	800b1d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801529e:	e00a      	b.n	80152b6 <icmp_input+0x1ea>
        goto icmperr;
 80152a0:	bf00      	nop
 80152a2:	e004      	b.n	80152ae <icmp_input+0x1e2>
        goto icmperr;
 80152a4:	bf00      	nop
 80152a6:	e002      	b.n	80152ae <icmp_input+0x1e2>
          goto icmperr;
 80152a8:	bf00      	nop
 80152aa:	e000      	b.n	80152ae <icmp_input+0x1e2>
          goto icmperr;
 80152ac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f7f5 ff90 	bl	800b1d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80152b4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80152b6:	3728      	adds	r7, #40	; 0x28
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	20009d08 	.word	0x20009d08
 80152c0:	20009d1c 	.word	0x20009d1c
 80152c4:	0801eeac 	.word	0x0801eeac
 80152c8:	0801eee4 	.word	0x0801eee4
 80152cc:	0801ef1c 	.word	0x0801ef1c
 80152d0:	0801ef44 	.word	0x0801ef44

080152d4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	460b      	mov	r3, r1
 80152de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80152e0:	78fb      	ldrb	r3, [r7, #3]
 80152e2:	461a      	mov	r2, r3
 80152e4:	2103      	movs	r1, #3
 80152e6:	6878      	ldr	r0, [r7, #4]
 80152e8:	f000 f814 	bl	8015314 <icmp_send_response>
}
 80152ec:	bf00      	nop
 80152ee:	3708      	adds	r7, #8
 80152f0:	46bd      	mov	sp, r7
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
 80152fc:	460b      	mov	r3, r1
 80152fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015300:	78fb      	ldrb	r3, [r7, #3]
 8015302:	461a      	mov	r2, r3
 8015304:	210b      	movs	r1, #11
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f000 f804 	bl	8015314 <icmp_send_response>
}
 801530c:	bf00      	nop
 801530e:	3708      	adds	r7, #8
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}

08015314 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015314:	b580      	push	{r7, lr}
 8015316:	b08c      	sub	sp, #48	; 0x30
 8015318:	af04      	add	r7, sp, #16
 801531a:	6078      	str	r0, [r7, #4]
 801531c:	460b      	mov	r3, r1
 801531e:	70fb      	strb	r3, [r7, #3]
 8015320:	4613      	mov	r3, r2
 8015322:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015324:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015328:	2124      	movs	r1, #36	; 0x24
 801532a:	2022      	movs	r0, #34	; 0x22
 801532c:	f7f5 fc6e 	bl	800ac0c <pbuf_alloc>
 8015330:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d04c      	beq.n	80153d2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	895b      	ldrh	r3, [r3, #10]
 801533c:	2b23      	cmp	r3, #35	; 0x23
 801533e:	d806      	bhi.n	801534e <icmp_send_response+0x3a>
 8015340:	4b26      	ldr	r3, [pc, #152]	; (80153dc <icmp_send_response+0xc8>)
 8015342:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8015346:	4926      	ldr	r1, [pc, #152]	; (80153e0 <icmp_send_response+0xcc>)
 8015348:	4826      	ldr	r0, [pc, #152]	; (80153e4 <icmp_send_response+0xd0>)
 801534a:	f001 ff3b 	bl	80171c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	685b      	ldr	r3, [r3, #4]
 8015352:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015354:	69fb      	ldr	r3, [r7, #28]
 8015356:	685b      	ldr	r3, [r3, #4]
 8015358:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	78fa      	ldrb	r2, [r7, #3]
 801535e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	78ba      	ldrb	r2, [r7, #2]
 8015364:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015366:	697b      	ldr	r3, [r7, #20]
 8015368:	2200      	movs	r2, #0
 801536a:	711a      	strb	r2, [r3, #4]
 801536c:	2200      	movs	r2, #0
 801536e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	2200      	movs	r2, #0
 8015374:	719a      	strb	r2, [r3, #6]
 8015376:	2200      	movs	r2, #0
 8015378:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801537a:	69fb      	ldr	r3, [r7, #28]
 801537c:	685b      	ldr	r3, [r3, #4]
 801537e:	f103 0008 	add.w	r0, r3, #8
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	221c      	movs	r2, #28
 8015388:	4619      	mov	r1, r3
 801538a:	f001 fa81 	bl	8016890 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	68db      	ldr	r3, [r3, #12]
 8015392:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015394:	f107 030c 	add.w	r3, r7, #12
 8015398:	4618      	mov	r0, r3
 801539a:	f000 f825 	bl	80153e8 <ip4_route>
 801539e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d011      	beq.n	80153ca <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80153a6:	697b      	ldr	r3, [r7, #20]
 80153a8:	2200      	movs	r2, #0
 80153aa:	709a      	strb	r2, [r3, #2]
 80153ac:	2200      	movs	r2, #0
 80153ae:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80153b0:	f107 020c 	add.w	r2, r7, #12
 80153b4:	693b      	ldr	r3, [r7, #16]
 80153b6:	9302      	str	r3, [sp, #8]
 80153b8:	2301      	movs	r3, #1
 80153ba:	9301      	str	r3, [sp, #4]
 80153bc:	2300      	movs	r3, #0
 80153be:	9300      	str	r3, [sp, #0]
 80153c0:	23ff      	movs	r3, #255	; 0xff
 80153c2:	2100      	movs	r1, #0
 80153c4:	69f8      	ldr	r0, [r7, #28]
 80153c6:	f000 f9f1 	bl	80157ac <ip4_output_if>
  }
  pbuf_free(q);
 80153ca:	69f8      	ldr	r0, [r7, #28]
 80153cc:	f7f5 ff02 	bl	800b1d4 <pbuf_free>
 80153d0:	e000      	b.n	80153d4 <icmp_send_response+0xc0>
    return;
 80153d2:	bf00      	nop
}
 80153d4:	3720      	adds	r7, #32
 80153d6:	46bd      	mov	sp, r7
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	bf00      	nop
 80153dc:	0801eeac 	.word	0x0801eeac
 80153e0:	0801ef78 	.word	0x0801ef78
 80153e4:	0801ef1c 	.word	0x0801ef1c

080153e8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80153e8:	b480      	push	{r7}
 80153ea:	b085      	sub	sp, #20
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80153f0:	4b33      	ldr	r3, [pc, #204]	; (80154c0 <ip4_route+0xd8>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	60fb      	str	r3, [r7, #12]
 80153f6:	e036      	b.n	8015466 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80153fe:	f003 0301 	and.w	r3, r3, #1
 8015402:	b2db      	uxtb	r3, r3
 8015404:	2b00      	cmp	r3, #0
 8015406:	d02b      	beq.n	8015460 <ip4_route+0x78>
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801540e:	089b      	lsrs	r3, r3, #2
 8015410:	f003 0301 	and.w	r3, r3, #1
 8015414:	b2db      	uxtb	r3, r3
 8015416:	2b00      	cmp	r3, #0
 8015418:	d022      	beq.n	8015460 <ip4_route+0x78>
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	3304      	adds	r3, #4
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d01d      	beq.n	8015460 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	681a      	ldr	r2, [r3, #0]
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	3304      	adds	r3, #4
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	405a      	eors	r2, r3
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	3308      	adds	r3, #8
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	4013      	ands	r3, r2
 8015438:	2b00      	cmp	r3, #0
 801543a:	d101      	bne.n	8015440 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	e038      	b.n	80154b2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015446:	f003 0302 	and.w	r3, r3, #2
 801544a:	2b00      	cmp	r3, #0
 801544c:	d108      	bne.n	8015460 <ip4_route+0x78>
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	681a      	ldr	r2, [r3, #0]
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	330c      	adds	r3, #12
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	429a      	cmp	r2, r3
 801545a:	d101      	bne.n	8015460 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	e028      	b.n	80154b2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	60fb      	str	r3, [r7, #12]
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d1c5      	bne.n	80153f8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801546c:	4b15      	ldr	r3, [pc, #84]	; (80154c4 <ip4_route+0xdc>)
 801546e:	681b      	ldr	r3, [r3, #0]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d01a      	beq.n	80154aa <ip4_route+0xc2>
 8015474:	4b13      	ldr	r3, [pc, #76]	; (80154c4 <ip4_route+0xdc>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801547c:	f003 0301 	and.w	r3, r3, #1
 8015480:	2b00      	cmp	r3, #0
 8015482:	d012      	beq.n	80154aa <ip4_route+0xc2>
 8015484:	4b0f      	ldr	r3, [pc, #60]	; (80154c4 <ip4_route+0xdc>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801548c:	f003 0304 	and.w	r3, r3, #4
 8015490:	2b00      	cmp	r3, #0
 8015492:	d00a      	beq.n	80154aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015494:	4b0b      	ldr	r3, [pc, #44]	; (80154c4 <ip4_route+0xdc>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	3304      	adds	r3, #4
 801549a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801549c:	2b00      	cmp	r3, #0
 801549e:	d004      	beq.n	80154aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	2b7f      	cmp	r3, #127	; 0x7f
 80154a8:	d101      	bne.n	80154ae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80154aa:	2300      	movs	r3, #0
 80154ac:	e001      	b.n	80154b2 <ip4_route+0xca>
  }

  return netif_default;
 80154ae:	4b05      	ldr	r3, [pc, #20]	; (80154c4 <ip4_route+0xdc>)
 80154b0:	681b      	ldr	r3, [r3, #0]
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	3714      	adds	r7, #20
 80154b6:	46bd      	mov	sp, r7
 80154b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154bc:	4770      	bx	lr
 80154be:	bf00      	nop
 80154c0:	2000d628 	.word	0x2000d628
 80154c4:	2000d62c 	.word	0x2000d62c

080154c8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b082      	sub	sp, #8
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80154d6:	f003 0301 	and.w	r3, r3, #1
 80154da:	b2db      	uxtb	r3, r3
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d016      	beq.n	801550e <ip4_input_accept+0x46>
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	3304      	adds	r3, #4
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d011      	beq.n	801550e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80154ea:	4b0b      	ldr	r3, [pc, #44]	; (8015518 <ip4_input_accept+0x50>)
 80154ec:	695a      	ldr	r2, [r3, #20]
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	3304      	adds	r3, #4
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	429a      	cmp	r2, r3
 80154f6:	d008      	beq.n	801550a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80154f8:	4b07      	ldr	r3, [pc, #28]	; (8015518 <ip4_input_accept+0x50>)
 80154fa:	695b      	ldr	r3, [r3, #20]
 80154fc:	6879      	ldr	r1, [r7, #4]
 80154fe:	4618      	mov	r0, r3
 8015500:	f000 fa3d 	bl	801597e <ip4_addr_isbroadcast_u32>
 8015504:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015506:	2b00      	cmp	r3, #0
 8015508:	d001      	beq.n	801550e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801550a:	2301      	movs	r3, #1
 801550c:	e000      	b.n	8015510 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801550e:	2300      	movs	r3, #0
}
 8015510:	4618      	mov	r0, r3
 8015512:	3708      	adds	r7, #8
 8015514:	46bd      	mov	sp, r7
 8015516:	bd80      	pop	{r7, pc}
 8015518:	20009d08 	.word	0x20009d08

0801551c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b088      	sub	sp, #32
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
 8015524:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015526:	2301      	movs	r3, #1
 8015528:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015530:	69fb      	ldr	r3, [r7, #28]
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	091b      	lsrs	r3, r3, #4
 8015536:	b2db      	uxtb	r3, r3
 8015538:	2b04      	cmp	r3, #4
 801553a:	d007      	beq.n	801554c <ip4_input+0x30>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f000 fa11 	bl	8015964 <ip4_debug_print>
    pbuf_free(p);
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f7f5 fe46 	bl	800b1d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015548:	2300      	movs	r3, #0
 801554a:	e126      	b.n	801579a <ip4_input+0x27e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	781b      	ldrb	r3, [r3, #0]
 8015550:	f003 030f 	and.w	r3, r3, #15
 8015554:	b2db      	uxtb	r3, r3
 8015556:	009b      	lsls	r3, r3, #2
 8015558:	b2db      	uxtb	r3, r3
 801555a:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	885b      	ldrh	r3, [r3, #2]
 8015560:	b29b      	uxth	r3, r3
 8015562:	4618      	mov	r0, r3
 8015564:	f7f4 fa9c 	bl	8009aa0 <lwip_htons>
 8015568:	4603      	mov	r3, r0
 801556a:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	891b      	ldrh	r3, [r3, #8]
 8015570:	8a3a      	ldrh	r2, [r7, #16]
 8015572:	429a      	cmp	r2, r3
 8015574:	d204      	bcs.n	8015580 <ip4_input+0x64>
    pbuf_realloc(p, iphdr_len);
 8015576:	8a3b      	ldrh	r3, [r7, #16]
 8015578:	4619      	mov	r1, r3
 801557a:	6878      	ldr	r0, [r7, #4]
 801557c:	f7f5 fca4 	bl	800aec8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	895b      	ldrh	r3, [r3, #10]
 8015584:	8a7a      	ldrh	r2, [r7, #18]
 8015586:	429a      	cmp	r2, r3
 8015588:	d807      	bhi.n	801559a <ip4_input+0x7e>
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	891b      	ldrh	r3, [r3, #8]
 801558e:	8a3a      	ldrh	r2, [r7, #16]
 8015590:	429a      	cmp	r2, r3
 8015592:	d802      	bhi.n	801559a <ip4_input+0x7e>
 8015594:	8a7b      	ldrh	r3, [r7, #18]
 8015596:	2b13      	cmp	r3, #19
 8015598:	d804      	bhi.n	80155a4 <ip4_input+0x88>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f7f5 fe1a 	bl	800b1d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80155a0:	2300      	movs	r3, #0
 80155a2:	e0fa      	b.n	801579a <ip4_input+0x27e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80155a4:	69fb      	ldr	r3, [r7, #28]
 80155a6:	691b      	ldr	r3, [r3, #16]
 80155a8:	4a7e      	ldr	r2, [pc, #504]	; (80157a4 <ip4_input+0x288>)
 80155aa:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80155ac:	69fb      	ldr	r3, [r7, #28]
 80155ae:	68db      	ldr	r3, [r3, #12]
 80155b0:	4a7c      	ldr	r2, [pc, #496]	; (80157a4 <ip4_input+0x288>)
 80155b2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80155b4:	4b7b      	ldr	r3, [pc, #492]	; (80157a4 <ip4_input+0x288>)
 80155b6:	695b      	ldr	r3, [r3, #20]
 80155b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80155bc:	2be0      	cmp	r3, #224	; 0xe0
 80155be:	d112      	bne.n	80155e6 <ip4_input+0xca>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80155c6:	f003 0301 	and.w	r3, r3, #1
 80155ca:	b2db      	uxtb	r3, r3
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d007      	beq.n	80155e0 <ip4_input+0xc4>
 80155d0:	683b      	ldr	r3, [r7, #0]
 80155d2:	3304      	adds	r3, #4
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d002      	beq.n	80155e0 <ip4_input+0xc4>
      netif = inp;
 80155da:	683b      	ldr	r3, [r7, #0]
 80155dc:	61bb      	str	r3, [r7, #24]
 80155de:	e02a      	b.n	8015636 <ip4_input+0x11a>
    } else {
      netif = NULL;
 80155e0:	2300      	movs	r3, #0
 80155e2:	61bb      	str	r3, [r7, #24]
 80155e4:	e027      	b.n	8015636 <ip4_input+0x11a>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80155e6:	6838      	ldr	r0, [r7, #0]
 80155e8:	f7ff ff6e 	bl	80154c8 <ip4_input_accept>
 80155ec:	4603      	mov	r3, r0
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d002      	beq.n	80155f8 <ip4_input+0xdc>
      netif = inp;
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	61bb      	str	r3, [r7, #24]
 80155f6:	e01e      	b.n	8015636 <ip4_input+0x11a>
    } else {
      netif = NULL;
 80155f8:	2300      	movs	r3, #0
 80155fa:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80155fc:	4b69      	ldr	r3, [pc, #420]	; (80157a4 <ip4_input+0x288>)
 80155fe:	695b      	ldr	r3, [r3, #20]
 8015600:	b2db      	uxtb	r3, r3
 8015602:	2b7f      	cmp	r3, #127	; 0x7f
 8015604:	d017      	beq.n	8015636 <ip4_input+0x11a>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015606:	4b68      	ldr	r3, [pc, #416]	; (80157a8 <ip4_input+0x28c>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	61bb      	str	r3, [r7, #24]
 801560c:	e00e      	b.n	801562c <ip4_input+0x110>
          if (netif == inp) {
 801560e:	69ba      	ldr	r2, [r7, #24]
 8015610:	683b      	ldr	r3, [r7, #0]
 8015612:	429a      	cmp	r2, r3
 8015614:	d006      	beq.n	8015624 <ip4_input+0x108>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015616:	69b8      	ldr	r0, [r7, #24]
 8015618:	f7ff ff56 	bl	80154c8 <ip4_input_accept>
 801561c:	4603      	mov	r3, r0
 801561e:	2b00      	cmp	r3, #0
 8015620:	d108      	bne.n	8015634 <ip4_input+0x118>
 8015622:	e000      	b.n	8015626 <ip4_input+0x10a>
            continue;
 8015624:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015626:	69bb      	ldr	r3, [r7, #24]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	61bb      	str	r3, [r7, #24]
 801562c:	69bb      	ldr	r3, [r7, #24]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d1ed      	bne.n	801560e <ip4_input+0xf2>
 8015632:	e000      	b.n	8015636 <ip4_input+0x11a>
            break;
 8015634:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015636:	69bb      	ldr	r3, [r7, #24]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d111      	bne.n	8015660 <ip4_input+0x144>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801563c:	69fb      	ldr	r3, [r7, #28]
 801563e:	7a5b      	ldrb	r3, [r3, #9]
 8015640:	2b11      	cmp	r3, #17
 8015642:	d10d      	bne.n	8015660 <ip4_input+0x144>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015644:	8a7b      	ldrh	r3, [r7, #18]
 8015646:	69fa      	ldr	r2, [r7, #28]
 8015648:	4413      	add	r3, r2
 801564a:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	885b      	ldrh	r3, [r3, #2]
 8015650:	b29b      	uxth	r3, r3
 8015652:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015656:	d103      	bne.n	8015660 <ip4_input+0x144>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801565c:	2300      	movs	r3, #0
 801565e:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d017      	beq.n	8015696 <ip4_input+0x17a>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015666:	4b4f      	ldr	r3, [pc, #316]	; (80157a4 <ip4_input+0x288>)
 8015668:	691b      	ldr	r3, [r3, #16]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d013      	beq.n	8015696 <ip4_input+0x17a>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801566e:	4b4d      	ldr	r3, [pc, #308]	; (80157a4 <ip4_input+0x288>)
 8015670:	691b      	ldr	r3, [r3, #16]
 8015672:	6839      	ldr	r1, [r7, #0]
 8015674:	4618      	mov	r0, r3
 8015676:	f000 f982 	bl	801597e <ip4_addr_isbroadcast_u32>
 801567a:	4603      	mov	r3, r0
 801567c:	2b00      	cmp	r3, #0
 801567e:	d105      	bne.n	801568c <ip4_input+0x170>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015680:	4b48      	ldr	r3, [pc, #288]	; (80157a4 <ip4_input+0x288>)
 8015682:	691b      	ldr	r3, [r3, #16]
 8015684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015688:	2be0      	cmp	r3, #224	; 0xe0
 801568a:	d104      	bne.n	8015696 <ip4_input+0x17a>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f7f5 fda1 	bl	800b1d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015692:	2300      	movs	r3, #0
 8015694:	e081      	b.n	801579a <ip4_input+0x27e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015696:	69bb      	ldr	r3, [r7, #24]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d104      	bne.n	80156a6 <ip4_input+0x18a>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7f5 fd99 	bl	800b1d4 <pbuf_free>
    return ERR_OK;
 80156a2:	2300      	movs	r3, #0
 80156a4:	e079      	b.n	801579a <ip4_input+0x27e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	88db      	ldrh	r3, [r3, #6]
 80156aa:	b29b      	uxth	r3, r3
 80156ac:	461a      	mov	r2, r3
 80156ae:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80156b2:	4013      	ands	r3, r2
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d00b      	beq.n	80156d0 <ip4_input+0x1b4>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	f000 fca5 	bl	8016008 <ip4_reass>
 80156be:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d101      	bne.n	80156ca <ip4_input+0x1ae>
      return ERR_OK;
 80156c6:	2300      	movs	r3, #0
 80156c8:	e067      	b.n	801579a <ip4_input+0x27e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	61fb      	str	r3, [r7, #28]
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
 80156d0:	6878      	ldr	r0, [r7, #4]
 80156d2:	f000 f947 	bl	8015964 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80156d6:	4a33      	ldr	r2, [pc, #204]	; (80157a4 <ip4_input+0x288>)
 80156d8:	69bb      	ldr	r3, [r7, #24]
 80156da:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80156dc:	4a31      	ldr	r2, [pc, #196]	; (80157a4 <ip4_input+0x288>)
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80156e2:	4a30      	ldr	r2, [pc, #192]	; (80157a4 <ip4_input+0x288>)
 80156e4:	69fb      	ldr	r3, [r7, #28]
 80156e6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80156e8:	69fb      	ldr	r3, [r7, #28]
 80156ea:	781b      	ldrb	r3, [r3, #0]
 80156ec:	f003 030f 	and.w	r3, r3, #15
 80156f0:	b2db      	uxtb	r3, r3
 80156f2:	009b      	lsls	r3, r3, #2
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	b29a      	uxth	r2, r3
 80156f8:	4b2a      	ldr	r3, [pc, #168]	; (80157a4 <ip4_input+0x288>)
 80156fa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80156fc:	8a7b      	ldrh	r3, [r7, #18]
 80156fe:	4619      	mov	r1, r3
 8015700:	6878      	ldr	r0, [r7, #4]
 8015702:	f7f5 fce1 	bl	800b0c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	7a5b      	ldrb	r3, [r3, #9]
 801570a:	2b11      	cmp	r3, #17
 801570c:	d006      	beq.n	801571c <ip4_input+0x200>
 801570e:	2b11      	cmp	r3, #17
 8015710:	dc13      	bgt.n	801573a <ip4_input+0x21e>
 8015712:	2b01      	cmp	r3, #1
 8015714:	d00c      	beq.n	8015730 <ip4_input+0x214>
 8015716:	2b06      	cmp	r3, #6
 8015718:	d005      	beq.n	8015726 <ip4_input+0x20a>
 801571a:	e00e      	b.n	801573a <ip4_input+0x21e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801571c:	6839      	ldr	r1, [r7, #0]
 801571e:	6878      	ldr	r0, [r7, #4]
 8015720:	f7fc fb12 	bl	8011d48 <udp_input>
        break;
 8015724:	e026      	b.n	8015774 <ip4_input+0x258>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015726:	6839      	ldr	r1, [r7, #0]
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f7f7 fec9 	bl	800d4c0 <tcp_input>
        break;
 801572e:	e021      	b.n	8015774 <ip4_input+0x258>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015730:	6839      	ldr	r1, [r7, #0]
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f7ff fcca 	bl	80150cc <icmp_input>
        break;
 8015738:	e01c      	b.n	8015774 <ip4_input+0x258>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801573a:	4b1a      	ldr	r3, [pc, #104]	; (80157a4 <ip4_input+0x288>)
 801573c:	695b      	ldr	r3, [r3, #20]
 801573e:	69b9      	ldr	r1, [r7, #24]
 8015740:	4618      	mov	r0, r3
 8015742:	f000 f91c 	bl	801597e <ip4_addr_isbroadcast_u32>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	d10f      	bne.n	801576c <ip4_input+0x250>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801574c:	4b15      	ldr	r3, [pc, #84]	; (80157a4 <ip4_input+0x288>)
 801574e:	695b      	ldr	r3, [r3, #20]
 8015750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015754:	2be0      	cmp	r3, #224	; 0xe0
 8015756:	d009      	beq.n	801576c <ip4_input+0x250>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015758:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801575c:	4619      	mov	r1, r3
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f7f5 fd25 	bl	800b1ae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015764:	2102      	movs	r1, #2
 8015766:	6878      	ldr	r0, [r7, #4]
 8015768:	f7ff fdb4 	bl	80152d4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f7f5 fd31 	bl	800b1d4 <pbuf_free>
        break;
 8015772:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015774:	4b0b      	ldr	r3, [pc, #44]	; (80157a4 <ip4_input+0x288>)
 8015776:	2200      	movs	r2, #0
 8015778:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801577a:	4b0a      	ldr	r3, [pc, #40]	; (80157a4 <ip4_input+0x288>)
 801577c:	2200      	movs	r2, #0
 801577e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015780:	4b08      	ldr	r3, [pc, #32]	; (80157a4 <ip4_input+0x288>)
 8015782:	2200      	movs	r2, #0
 8015784:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015786:	4b07      	ldr	r3, [pc, #28]	; (80157a4 <ip4_input+0x288>)
 8015788:	2200      	movs	r2, #0
 801578a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801578c:	4b05      	ldr	r3, [pc, #20]	; (80157a4 <ip4_input+0x288>)
 801578e:	2200      	movs	r2, #0
 8015790:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015792:	4b04      	ldr	r3, [pc, #16]	; (80157a4 <ip4_input+0x288>)
 8015794:	2200      	movs	r2, #0
 8015796:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015798:	2300      	movs	r3, #0
}
 801579a:	4618      	mov	r0, r3
 801579c:	3720      	adds	r7, #32
 801579e:	46bd      	mov	sp, r7
 80157a0:	bd80      	pop	{r7, pc}
 80157a2:	bf00      	nop
 80157a4:	20009d08 	.word	0x20009d08
 80157a8:	2000d628 	.word	0x2000d628

080157ac <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b08a      	sub	sp, #40	; 0x28
 80157b0:	af04      	add	r7, sp, #16
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
 80157b8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d009      	beq.n	80157d8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80157c4:	68bb      	ldr	r3, [r7, #8]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d003      	beq.n	80157d2 <ip4_output_if+0x26>
 80157ca:	68bb      	ldr	r3, [r7, #8]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d102      	bne.n	80157d8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80157d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d4:	3304      	adds	r3, #4
 80157d6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80157d8:	78fa      	ldrb	r2, [r7, #3]
 80157da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157dc:	9302      	str	r3, [sp, #8]
 80157de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80157e2:	9301      	str	r3, [sp, #4]
 80157e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80157e8:	9300      	str	r3, [sp, #0]
 80157ea:	4613      	mov	r3, r2
 80157ec:	687a      	ldr	r2, [r7, #4]
 80157ee:	6979      	ldr	r1, [r7, #20]
 80157f0:	68f8      	ldr	r0, [r7, #12]
 80157f2:	f000 f805 	bl	8015800 <ip4_output_if_src>
 80157f6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	3718      	adds	r7, #24
 80157fc:	46bd      	mov	sp, r7
 80157fe:	bd80      	pop	{r7, pc}

08015800 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b088      	sub	sp, #32
 8015804:	af00      	add	r7, sp, #0
 8015806:	60f8      	str	r0, [r7, #12]
 8015808:	60b9      	str	r1, [r7, #8]
 801580a:	607a      	str	r2, [r7, #4]
 801580c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	7b9b      	ldrb	r3, [r3, #14]
 8015812:	2b01      	cmp	r3, #1
 8015814:	d006      	beq.n	8015824 <ip4_output_if_src+0x24>
 8015816:	4b4d      	ldr	r3, [pc, #308]	; (801594c <ip4_output_if_src+0x14c>)
 8015818:	f44f 7255 	mov.w	r2, #852	; 0x354
 801581c:	494c      	ldr	r1, [pc, #304]	; (8015950 <ip4_output_if_src+0x150>)
 801581e:	484d      	ldr	r0, [pc, #308]	; (8015954 <ip4_output_if_src+0x154>)
 8015820:	f001 fcd0 	bl	80171c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d060      	beq.n	80158ec <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801582a:	2314      	movs	r3, #20
 801582c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801582e:	2114      	movs	r1, #20
 8015830:	68f8      	ldr	r0, [r7, #12]
 8015832:	f7f5 fc39 	bl	800b0a8 <pbuf_add_header>
 8015836:	4603      	mov	r3, r0
 8015838:	2b00      	cmp	r3, #0
 801583a:	d002      	beq.n	8015842 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801583c:	f06f 0301 	mvn.w	r3, #1
 8015840:	e07f      	b.n	8015942 <ip4_output_if_src+0x142>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	685b      	ldr	r3, [r3, #4]
 8015846:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	895b      	ldrh	r3, [r3, #10]
 801584c:	2b13      	cmp	r3, #19
 801584e:	d806      	bhi.n	801585e <ip4_output_if_src+0x5e>
 8015850:	4b3e      	ldr	r3, [pc, #248]	; (801594c <ip4_output_if_src+0x14c>)
 8015852:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015856:	4940      	ldr	r1, [pc, #256]	; (8015958 <ip4_output_if_src+0x158>)
 8015858:	483e      	ldr	r0, [pc, #248]	; (8015954 <ip4_output_if_src+0x154>)
 801585a:	f001 fcb3 	bl	80171c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801585e:	69fb      	ldr	r3, [r7, #28]
 8015860:	78fa      	ldrb	r2, [r7, #3]
 8015862:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015864:	69fb      	ldr	r3, [r7, #28]
 8015866:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801586a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681a      	ldr	r2, [r3, #0]
 8015870:	69fb      	ldr	r3, [r7, #28]
 8015872:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015874:	8b7b      	ldrh	r3, [r7, #26]
 8015876:	089b      	lsrs	r3, r3, #2
 8015878:	b29b      	uxth	r3, r3
 801587a:	b2db      	uxtb	r3, r3
 801587c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015880:	b2da      	uxtb	r2, r3
 8015882:	69fb      	ldr	r3, [r7, #28]
 8015884:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801588c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	891b      	ldrh	r3, [r3, #8]
 8015892:	4618      	mov	r0, r3
 8015894:	f7f4 f904 	bl	8009aa0 <lwip_htons>
 8015898:	4603      	mov	r3, r0
 801589a:	461a      	mov	r2, r3
 801589c:	69fb      	ldr	r3, [r7, #28]
 801589e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80158a0:	69fb      	ldr	r3, [r7, #28]
 80158a2:	2200      	movs	r2, #0
 80158a4:	719a      	strb	r2, [r3, #6]
 80158a6:	2200      	movs	r2, #0
 80158a8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80158aa:	4b2c      	ldr	r3, [pc, #176]	; (801595c <ip4_output_if_src+0x15c>)
 80158ac:	881b      	ldrh	r3, [r3, #0]
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7f4 f8f6 	bl	8009aa0 <lwip_htons>
 80158b4:	4603      	mov	r3, r0
 80158b6:	461a      	mov	r2, r3
 80158b8:	69fb      	ldr	r3, [r7, #28]
 80158ba:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80158bc:	4b27      	ldr	r3, [pc, #156]	; (801595c <ip4_output_if_src+0x15c>)
 80158be:	881b      	ldrh	r3, [r3, #0]
 80158c0:	3301      	adds	r3, #1
 80158c2:	b29a      	uxth	r2, r3
 80158c4:	4b25      	ldr	r3, [pc, #148]	; (801595c <ip4_output_if_src+0x15c>)
 80158c6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d104      	bne.n	80158d8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80158ce:	4b24      	ldr	r3, [pc, #144]	; (8015960 <ip4_output_if_src+0x160>)
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	69fb      	ldr	r3, [r7, #28]
 80158d4:	60da      	str	r2, [r3, #12]
 80158d6:	e003      	b.n	80158e0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	681a      	ldr	r2, [r3, #0]
 80158dc:	69fb      	ldr	r3, [r7, #28]
 80158de:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80158e0:	69fb      	ldr	r3, [r7, #28]
 80158e2:	2200      	movs	r2, #0
 80158e4:	729a      	strb	r2, [r3, #10]
 80158e6:	2200      	movs	r2, #0
 80158e8:	72da      	strb	r2, [r3, #11]
 80158ea:	e00f      	b.n	801590c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	895b      	ldrh	r3, [r3, #10]
 80158f0:	2b13      	cmp	r3, #19
 80158f2:	d802      	bhi.n	80158fa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80158f4:	f06f 0301 	mvn.w	r3, #1
 80158f8:	e023      	b.n	8015942 <ip4_output_if_src+0x142>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015900:	69fb      	ldr	r3, [r7, #28]
 8015902:	691b      	ldr	r3, [r3, #16]
 8015904:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015906:	f107 0314 	add.w	r3, r7, #20
 801590a:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);
 801590c:	68f8      	ldr	r0, [r7, #12]
 801590e:	f000 f829 	bl	8015964 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015916:	2b00      	cmp	r3, #0
 8015918:	d00c      	beq.n	8015934 <ip4_output_if_src+0x134>
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	891a      	ldrh	r2, [r3, #8]
 801591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015922:	429a      	cmp	r2, r3
 8015924:	d906      	bls.n	8015934 <ip4_output_if_src+0x134>
    return ip4_frag(p, netif, dest);
 8015926:	687a      	ldr	r2, [r7, #4]
 8015928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801592a:	68f8      	ldr	r0, [r7, #12]
 801592c:	f000 fd5a 	bl	80163e4 <ip4_frag>
 8015930:	4603      	mov	r3, r0
 8015932:	e006      	b.n	8015942 <ip4_output_if_src+0x142>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015936:	695b      	ldr	r3, [r3, #20]
 8015938:	687a      	ldr	r2, [r7, #4]
 801593a:	68f9      	ldr	r1, [r7, #12]
 801593c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801593e:	4798      	blx	r3
 8015940:	4603      	mov	r3, r0
}
 8015942:	4618      	mov	r0, r3
 8015944:	3720      	adds	r7, #32
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}
 801594a:	bf00      	nop
 801594c:	0801efa4 	.word	0x0801efa4
 8015950:	0801efd8 	.word	0x0801efd8
 8015954:	0801efe4 	.word	0x0801efe4
 8015958:	0801f00c 	.word	0x0801f00c
 801595c:	20001352 	.word	0x20001352
 8015960:	0803233c 	.word	0x0803233c

08015964 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 8015964:	b480      	push	{r7}
 8015966:	b085      	sub	sp, #20
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	685b      	ldr	r3, [r3, #4]
 8015970:	60fb      	str	r3, [r7, #12]
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
}
 8015972:	bf00      	nop
 8015974:	3714      	adds	r7, #20
 8015976:	46bd      	mov	sp, r7
 8015978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597c:	4770      	bx	lr

0801597e <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801597e:	b480      	push	{r7}
 8015980:	b085      	sub	sp, #20
 8015982:	af00      	add	r7, sp, #0
 8015984:	6078      	str	r0, [r7, #4]
 8015986:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015992:	d002      	beq.n	801599a <ip4_addr_isbroadcast_u32+0x1c>
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d101      	bne.n	801599e <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801599a:	2301      	movs	r3, #1
 801599c:	e02a      	b.n	80159f4 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80159a4:	f003 0302 	and.w	r3, r3, #2
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d101      	bne.n	80159b0 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80159ac:	2300      	movs	r3, #0
 80159ae:	e021      	b.n	80159f4 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	3304      	adds	r3, #4
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	687a      	ldr	r2, [r7, #4]
 80159b8:	429a      	cmp	r2, r3
 80159ba:	d101      	bne.n	80159c0 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80159bc:	2300      	movs	r3, #0
 80159be:	e019      	b.n	80159f4 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80159c0:	68fa      	ldr	r2, [r7, #12]
 80159c2:	683b      	ldr	r3, [r7, #0]
 80159c4:	3304      	adds	r3, #4
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	405a      	eors	r2, r3
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	3308      	adds	r3, #8
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	4013      	ands	r3, r2
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d10d      	bne.n	80159f2 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	3308      	adds	r3, #8
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	43da      	mvns	r2, r3
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80159e2:	683b      	ldr	r3, [r7, #0]
 80159e4:	3308      	adds	r3, #8
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d101      	bne.n	80159f2 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80159ee:	2301      	movs	r3, #1
 80159f0:	e000      	b.n	80159f4 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80159f2:	2300      	movs	r3, #0
  }
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	3714      	adds	r7, #20
 80159f8:	46bd      	mov	sp, r7
 80159fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fe:	4770      	bx	lr

08015a00 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b084      	sub	sp, #16
 8015a04:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015a06:	2300      	movs	r3, #0
 8015a08:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015a0a:	4b12      	ldr	r3, [pc, #72]	; (8015a54 <ip_reass_tmr+0x54>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015a10:	e018      	b.n	8015a44 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	7fdb      	ldrb	r3, [r3, #31]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d00b      	beq.n	8015a32 <ip_reass_tmr+0x32>
      r->timer--;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	7fdb      	ldrb	r3, [r3, #31]
 8015a1e:	3b01      	subs	r3, #1
 8015a20:	b2da      	uxtb	r2, r3
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	60fb      	str	r3, [r7, #12]
 8015a30:	e008      	b.n	8015a44 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015a3c:	68b9      	ldr	r1, [r7, #8]
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	f000 f80a 	bl	8015a58 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d1e3      	bne.n	8015a12 <ip_reass_tmr+0x12>
    }
  }
}
 8015a4a:	bf00      	nop
 8015a4c:	bf00      	nop
 8015a4e:	3710      	adds	r7, #16
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}
 8015a54:	20001354 	.word	0x20001354

08015a58 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b088      	sub	sp, #32
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015a62:	2300      	movs	r3, #0
 8015a64:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015a66:	683a      	ldr	r2, [r7, #0]
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d105      	bne.n	8015a7a <ip_reass_free_complete_datagram+0x22>
 8015a6e:	4b45      	ldr	r3, [pc, #276]	; (8015b84 <ip_reass_free_complete_datagram+0x12c>)
 8015a70:	22ab      	movs	r2, #171	; 0xab
 8015a72:	4945      	ldr	r1, [pc, #276]	; (8015b88 <ip_reass_free_complete_datagram+0x130>)
 8015a74:	4845      	ldr	r0, [pc, #276]	; (8015b8c <ip_reass_free_complete_datagram+0x134>)
 8015a76:	f001 fba5 	bl	80171c4 <iprintf>
  if (prev != NULL) {
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d00a      	beq.n	8015a96 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	429a      	cmp	r2, r3
 8015a88:	d005      	beq.n	8015a96 <ip_reass_free_complete_datagram+0x3e>
 8015a8a:	4b3e      	ldr	r3, [pc, #248]	; (8015b84 <ip_reass_free_complete_datagram+0x12c>)
 8015a8c:	22ad      	movs	r2, #173	; 0xad
 8015a8e:	4940      	ldr	r1, [pc, #256]	; (8015b90 <ip_reass_free_complete_datagram+0x138>)
 8015a90:	483e      	ldr	r0, [pc, #248]	; (8015b8c <ip_reass_free_complete_datagram+0x134>)
 8015a92:	f001 fb97 	bl	80171c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	685b      	ldr	r3, [r3, #4]
 8015a9c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015a9e:	697b      	ldr	r3, [r7, #20]
 8015aa0:	889b      	ldrh	r3, [r3, #4]
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d12a      	bne.n	8015afe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	685b      	ldr	r3, [r3, #4]
 8015aac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015ab6:	69bb      	ldr	r3, [r7, #24]
 8015ab8:	6858      	ldr	r0, [r3, #4]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	3308      	adds	r3, #8
 8015abe:	2214      	movs	r2, #20
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	f000 fee5 	bl	8016890 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015ac6:	2101      	movs	r1, #1
 8015ac8:	69b8      	ldr	r0, [r7, #24]
 8015aca:	f7ff fc13 	bl	80152f4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015ace:	69b8      	ldr	r0, [r7, #24]
 8015ad0:	f7f5 fc08 	bl	800b2e4 <pbuf_clen>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015ad8:	8bfa      	ldrh	r2, [r7, #30]
 8015ada:	8a7b      	ldrh	r3, [r7, #18]
 8015adc:	4413      	add	r3, r2
 8015ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ae2:	db05      	blt.n	8015af0 <ip_reass_free_complete_datagram+0x98>
 8015ae4:	4b27      	ldr	r3, [pc, #156]	; (8015b84 <ip_reass_free_complete_datagram+0x12c>)
 8015ae6:	22bc      	movs	r2, #188	; 0xbc
 8015ae8:	492a      	ldr	r1, [pc, #168]	; (8015b94 <ip_reass_free_complete_datagram+0x13c>)
 8015aea:	4828      	ldr	r0, [pc, #160]	; (8015b8c <ip_reass_free_complete_datagram+0x134>)
 8015aec:	f001 fb6a 	bl	80171c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015af0:	8bfa      	ldrh	r2, [r7, #30]
 8015af2:	8a7b      	ldrh	r3, [r7, #18]
 8015af4:	4413      	add	r3, r2
 8015af6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015af8:	69b8      	ldr	r0, [r7, #24]
 8015afa:	f7f5 fb6b 	bl	800b1d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015b04:	e01f      	b.n	8015b46 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015b06:	69bb      	ldr	r3, [r7, #24]
 8015b08:	685b      	ldr	r3, [r3, #4]
 8015b0a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015b0c:	69bb      	ldr	r3, [r7, #24]
 8015b0e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015b10:	697b      	ldr	r3, [r7, #20]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015b16:	68f8      	ldr	r0, [r7, #12]
 8015b18:	f7f5 fbe4 	bl	800b2e4 <pbuf_clen>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015b20:	8bfa      	ldrh	r2, [r7, #30]
 8015b22:	8a7b      	ldrh	r3, [r7, #18]
 8015b24:	4413      	add	r3, r2
 8015b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b2a:	db05      	blt.n	8015b38 <ip_reass_free_complete_datagram+0xe0>
 8015b2c:	4b15      	ldr	r3, [pc, #84]	; (8015b84 <ip_reass_free_complete_datagram+0x12c>)
 8015b2e:	22cc      	movs	r2, #204	; 0xcc
 8015b30:	4918      	ldr	r1, [pc, #96]	; (8015b94 <ip_reass_free_complete_datagram+0x13c>)
 8015b32:	4816      	ldr	r0, [pc, #88]	; (8015b8c <ip_reass_free_complete_datagram+0x134>)
 8015b34:	f001 fb46 	bl	80171c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015b38:	8bfa      	ldrh	r2, [r7, #30]
 8015b3a:	8a7b      	ldrh	r3, [r7, #18]
 8015b3c:	4413      	add	r3, r2
 8015b3e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015b40:	68f8      	ldr	r0, [r7, #12]
 8015b42:	f7f5 fb47 	bl	800b1d4 <pbuf_free>
  while (p != NULL) {
 8015b46:	69bb      	ldr	r3, [r7, #24]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d1dc      	bne.n	8015b06 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015b4c:	6839      	ldr	r1, [r7, #0]
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f000 f8c2 	bl	8015cd8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015b54:	4b10      	ldr	r3, [pc, #64]	; (8015b98 <ip_reass_free_complete_datagram+0x140>)
 8015b56:	881b      	ldrh	r3, [r3, #0]
 8015b58:	8bfa      	ldrh	r2, [r7, #30]
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	d905      	bls.n	8015b6a <ip_reass_free_complete_datagram+0x112>
 8015b5e:	4b09      	ldr	r3, [pc, #36]	; (8015b84 <ip_reass_free_complete_datagram+0x12c>)
 8015b60:	22d2      	movs	r2, #210	; 0xd2
 8015b62:	490e      	ldr	r1, [pc, #56]	; (8015b9c <ip_reass_free_complete_datagram+0x144>)
 8015b64:	4809      	ldr	r0, [pc, #36]	; (8015b8c <ip_reass_free_complete_datagram+0x134>)
 8015b66:	f001 fb2d 	bl	80171c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015b6a:	4b0b      	ldr	r3, [pc, #44]	; (8015b98 <ip_reass_free_complete_datagram+0x140>)
 8015b6c:	881a      	ldrh	r2, [r3, #0]
 8015b6e:	8bfb      	ldrh	r3, [r7, #30]
 8015b70:	1ad3      	subs	r3, r2, r3
 8015b72:	b29a      	uxth	r2, r3
 8015b74:	4b08      	ldr	r3, [pc, #32]	; (8015b98 <ip_reass_free_complete_datagram+0x140>)
 8015b76:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015b78:	8bfb      	ldrh	r3, [r7, #30]
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3720      	adds	r7, #32
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	0801f03c 	.word	0x0801f03c
 8015b88:	0801f078 	.word	0x0801f078
 8015b8c:	0801f084 	.word	0x0801f084
 8015b90:	0801f0ac 	.word	0x0801f0ac
 8015b94:	0801f0c0 	.word	0x0801f0c0
 8015b98:	20001358 	.word	0x20001358
 8015b9c:	0801f0e0 	.word	0x0801f0e0

08015ba0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b08a      	sub	sp, #40	; 0x28
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015baa:	2300      	movs	r3, #0
 8015bac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015bbe:	4b28      	ldr	r3, [pc, #160]	; (8015c60 <ip_reass_remove_oldest_datagram+0xc0>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015bc4:	e030      	b.n	8015c28 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bc8:	695a      	ldr	r2, [r3, #20]
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	68db      	ldr	r3, [r3, #12]
 8015bce:	429a      	cmp	r2, r3
 8015bd0:	d10c      	bne.n	8015bec <ip_reass_remove_oldest_datagram+0x4c>
 8015bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd4:	699a      	ldr	r2, [r3, #24]
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	691b      	ldr	r3, [r3, #16]
 8015bda:	429a      	cmp	r2, r3
 8015bdc:	d106      	bne.n	8015bec <ip_reass_remove_oldest_datagram+0x4c>
 8015bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be0:	899a      	ldrh	r2, [r3, #12]
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	889b      	ldrh	r3, [r3, #4]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d014      	beq.n	8015c16 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	3301      	adds	r3, #1
 8015bf0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015bf2:	6a3b      	ldr	r3, [r7, #32]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d104      	bne.n	8015c02 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bfa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015bfc:	69fb      	ldr	r3, [r7, #28]
 8015bfe:	61bb      	str	r3, [r7, #24]
 8015c00:	e009      	b.n	8015c16 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c04:	7fda      	ldrb	r2, [r3, #31]
 8015c06:	6a3b      	ldr	r3, [r7, #32]
 8015c08:	7fdb      	ldrb	r3, [r3, #31]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d803      	bhi.n	8015c16 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c10:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d001      	beq.n	8015c22 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c20:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d1cb      	bne.n	8015bc6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015c2e:	6a3b      	ldr	r3, [r7, #32]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d008      	beq.n	8015c46 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015c34:	69b9      	ldr	r1, [r7, #24]
 8015c36:	6a38      	ldr	r0, [r7, #32]
 8015c38:	f7ff ff0e 	bl	8015a58 <ip_reass_free_complete_datagram>
 8015c3c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015c3e:	697a      	ldr	r2, [r7, #20]
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	4413      	add	r3, r2
 8015c44:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015c46:	697a      	ldr	r2, [r7, #20]
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	da02      	bge.n	8015c54 <ip_reass_remove_oldest_datagram+0xb4>
 8015c4e:	693b      	ldr	r3, [r7, #16]
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	dcac      	bgt.n	8015bae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015c54:	697b      	ldr	r3, [r7, #20]
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3728      	adds	r7, #40	; 0x28
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	20001354 	.word	0x20001354

08015c64 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b084      	sub	sp, #16
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015c6e:	2004      	movs	r0, #4
 8015c70:	f7f4 fc4a 	bl	800a508 <memp_malloc>
 8015c74:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d110      	bne.n	8015c9e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015c7c:	6839      	ldr	r1, [r7, #0]
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f7ff ff8e 	bl	8015ba0 <ip_reass_remove_oldest_datagram>
 8015c84:	4602      	mov	r2, r0
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	4293      	cmp	r3, r2
 8015c8a:	dc03      	bgt.n	8015c94 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015c8c:	2004      	movs	r0, #4
 8015c8e:	f7f4 fc3b 	bl	800a508 <memp_malloc>
 8015c92:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d101      	bne.n	8015c9e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	e016      	b.n	8015ccc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015c9e:	2220      	movs	r2, #32
 8015ca0:	2100      	movs	r1, #0
 8015ca2:	68f8      	ldr	r0, [r7, #12]
 8015ca4:	f000 fe1c 	bl	80168e0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	220f      	movs	r2, #15
 8015cac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015cae:	4b09      	ldr	r3, [pc, #36]	; (8015cd4 <ip_reass_enqueue_new_datagram+0x70>)
 8015cb0:	681a      	ldr	r2, [r3, #0]
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015cb6:	4a07      	ldr	r2, [pc, #28]	; (8015cd4 <ip_reass_enqueue_new_datagram+0x70>)
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	3308      	adds	r3, #8
 8015cc0:	2214      	movs	r2, #20
 8015cc2:	6879      	ldr	r1, [r7, #4]
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f000 fde3 	bl	8016890 <memcpy>
  return ipr;
 8015cca:	68fb      	ldr	r3, [r7, #12]
}
 8015ccc:	4618      	mov	r0, r3
 8015cce:	3710      	adds	r7, #16
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	bd80      	pop	{r7, pc}
 8015cd4:	20001354 	.word	0x20001354

08015cd8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b082      	sub	sp, #8
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015ce2:	4b10      	ldr	r3, [pc, #64]	; (8015d24 <ip_reass_dequeue_datagram+0x4c>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	687a      	ldr	r2, [r7, #4]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d104      	bne.n	8015cf6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	4a0c      	ldr	r2, [pc, #48]	; (8015d24 <ip_reass_dequeue_datagram+0x4c>)
 8015cf2:	6013      	str	r3, [r2, #0]
 8015cf4:	e00d      	b.n	8015d12 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d106      	bne.n	8015d0a <ip_reass_dequeue_datagram+0x32>
 8015cfc:	4b0a      	ldr	r3, [pc, #40]	; (8015d28 <ip_reass_dequeue_datagram+0x50>)
 8015cfe:	f240 1245 	movw	r2, #325	; 0x145
 8015d02:	490a      	ldr	r1, [pc, #40]	; (8015d2c <ip_reass_dequeue_datagram+0x54>)
 8015d04:	480a      	ldr	r0, [pc, #40]	; (8015d30 <ip_reass_dequeue_datagram+0x58>)
 8015d06:	f001 fa5d 	bl	80171c4 <iprintf>
    prev->next = ipr->next;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	681a      	ldr	r2, [r3, #0]
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015d12:	6879      	ldr	r1, [r7, #4]
 8015d14:	2004      	movs	r0, #4
 8015d16:	f7f4 fc43 	bl	800a5a0 <memp_free>
}
 8015d1a:	bf00      	nop
 8015d1c:	3708      	adds	r7, #8
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
 8015d22:	bf00      	nop
 8015d24:	20001354 	.word	0x20001354
 8015d28:	0801f03c 	.word	0x0801f03c
 8015d2c:	0801f104 	.word	0x0801f104
 8015d30:	0801f084 	.word	0x0801f084

08015d34 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b08c      	sub	sp, #48	; 0x30
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	60f8      	str	r0, [r7, #12]
 8015d3c:	60b9      	str	r1, [r7, #8]
 8015d3e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015d40:	2300      	movs	r3, #0
 8015d42:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015d44:	2301      	movs	r3, #1
 8015d46:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015d4e:	69fb      	ldr	r3, [r7, #28]
 8015d50:	885b      	ldrh	r3, [r3, #2]
 8015d52:	b29b      	uxth	r3, r3
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7f3 fea3 	bl	8009aa0 <lwip_htons>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015d5e:	69fb      	ldr	r3, [r7, #28]
 8015d60:	781b      	ldrb	r3, [r3, #0]
 8015d62:	f003 030f 	and.w	r3, r3, #15
 8015d66:	b2db      	uxtb	r3, r3
 8015d68:	009b      	lsls	r3, r3, #2
 8015d6a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015d6c:	7e7b      	ldrb	r3, [r7, #25]
 8015d6e:	b29b      	uxth	r3, r3
 8015d70:	8b7a      	ldrh	r2, [r7, #26]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d202      	bcs.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d7a:	e135      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015d7c:	7e7b      	ldrb	r3, [r7, #25]
 8015d7e:	b29b      	uxth	r3, r3
 8015d80:	8b7a      	ldrh	r2, [r7, #26]
 8015d82:	1ad3      	subs	r3, r2, r3
 8015d84:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015d86:	69fb      	ldr	r3, [r7, #28]
 8015d88:	88db      	ldrh	r3, [r3, #6]
 8015d8a:	b29b      	uxth	r3, r3
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7f3 fe87 	bl	8009aa0 <lwip_htons>
 8015d92:	4603      	mov	r3, r0
 8015d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	00db      	lsls	r3, r3, #3
 8015d9c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015da6:	2200      	movs	r2, #0
 8015da8:	701a      	strb	r2, [r3, #0]
 8015daa:	2200      	movs	r2, #0
 8015dac:	705a      	strb	r2, [r3, #1]
 8015dae:	2200      	movs	r2, #0
 8015db0:	709a      	strb	r2, [r3, #2]
 8015db2:	2200      	movs	r2, #0
 8015db4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db8:	8afa      	ldrh	r2, [r7, #22]
 8015dba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015dbc:	8afa      	ldrh	r2, [r7, #22]
 8015dbe:	8b7b      	ldrh	r3, [r7, #26]
 8015dc0:	4413      	add	r3, r2
 8015dc2:	b29a      	uxth	r2, r3
 8015dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dca:	88db      	ldrh	r3, [r3, #6]
 8015dcc:	b29b      	uxth	r3, r3
 8015dce:	8afa      	ldrh	r2, [r7, #22]
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d902      	bls.n	8015dda <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015dd8:	e106      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	627b      	str	r3, [r7, #36]	; 0x24
 8015de0:	e068      	b.n	8015eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de4:	685b      	ldr	r3, [r3, #4]
 8015de6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dea:	889b      	ldrh	r3, [r3, #4]
 8015dec:	b29a      	uxth	r2, r3
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	889b      	ldrh	r3, [r3, #4]
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d235      	bcs.n	8015e64 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dfc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d020      	beq.n	8015e46 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e06:	889b      	ldrh	r3, [r3, #4]
 8015e08:	b29a      	uxth	r2, r3
 8015e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0c:	88db      	ldrh	r3, [r3, #6]
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d307      	bcc.n	8015e24 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e16:	88db      	ldrh	r3, [r3, #6]
 8015e18:	b29a      	uxth	r2, r3
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	889b      	ldrh	r3, [r3, #4]
 8015e1e:	b29b      	uxth	r3, r3
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d902      	bls.n	8015e2a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e28:	e0de      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e2c:	68ba      	ldr	r2, [r7, #8]
 8015e2e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e32:	88db      	ldrh	r3, [r3, #6]
 8015e34:	b29a      	uxth	r2, r3
 8015e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e38:	889b      	ldrh	r3, [r3, #4]
 8015e3a:	b29b      	uxth	r3, r3
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d03d      	beq.n	8015ebc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015e40:	2300      	movs	r3, #0
 8015e42:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015e44:	e03a      	b.n	8015ebc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e48:	88db      	ldrh	r3, [r3, #6]
 8015e4a:	b29a      	uxth	r2, r3
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	889b      	ldrh	r3, [r3, #4]
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	429a      	cmp	r2, r3
 8015e54:	d902      	bls.n	8015e5c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e5a:	e0c5      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	68ba      	ldr	r2, [r7, #8]
 8015e60:	605a      	str	r2, [r3, #4]
      break;
 8015e62:	e02b      	b.n	8015ebc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e66:	889b      	ldrh	r3, [r3, #4]
 8015e68:	b29a      	uxth	r2, r3
 8015e6a:	693b      	ldr	r3, [r7, #16]
 8015e6c:	889b      	ldrh	r3, [r3, #4]
 8015e6e:	b29b      	uxth	r3, r3
 8015e70:	429a      	cmp	r2, r3
 8015e72:	d102      	bne.n	8015e7a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e78:	e0b6      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e7c:	889b      	ldrh	r3, [r3, #4]
 8015e7e:	b29a      	uxth	r2, r3
 8015e80:	693b      	ldr	r3, [r7, #16]
 8015e82:	88db      	ldrh	r3, [r3, #6]
 8015e84:	b29b      	uxth	r3, r3
 8015e86:	429a      	cmp	r2, r3
 8015e88:	d202      	bcs.n	8015e90 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e8e:	e0ab      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d009      	beq.n	8015eaa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e98:	88db      	ldrh	r3, [r3, #6]
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	889b      	ldrh	r3, [r3, #4]
 8015ea0:	b29b      	uxth	r3, r3
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d001      	beq.n	8015eaa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015eaa:	693b      	ldr	r3, [r7, #16]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015eb0:	693b      	ldr	r3, [r7, #16]
 8015eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d193      	bne.n	8015de2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015eba:	e000      	b.n	8015ebe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015ebc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d12d      	bne.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d01c      	beq.n	8015f04 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ecc:	88db      	ldrh	r3, [r3, #6]
 8015ece:	b29a      	uxth	r2, r3
 8015ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed2:	889b      	ldrh	r3, [r3, #4]
 8015ed4:	b29b      	uxth	r3, r3
 8015ed6:	429a      	cmp	r2, r3
 8015ed8:	d906      	bls.n	8015ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015eda:	4b45      	ldr	r3, [pc, #276]	; (8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015edc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015ee0:	4944      	ldr	r1, [pc, #272]	; (8015ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015ee2:	4845      	ldr	r0, [pc, #276]	; (8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ee4:	f001 f96e 	bl	80171c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eea:	68ba      	ldr	r2, [r7, #8]
 8015eec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef0:	88db      	ldrh	r3, [r3, #6]
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef6:	889b      	ldrh	r3, [r3, #4]
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	429a      	cmp	r2, r3
 8015efc:	d010      	beq.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015efe:	2300      	movs	r3, #0
 8015f00:	623b      	str	r3, [r7, #32]
 8015f02:	e00d      	b.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	685b      	ldr	r3, [r3, #4]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d006      	beq.n	8015f1a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015f0c:	4b38      	ldr	r3, [pc, #224]	; (8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f0e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015f12:	493a      	ldr	r1, [pc, #232]	; (8015ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015f14:	4838      	ldr	r0, [pc, #224]	; (8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f16:	f001 f955 	bl	80171c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	68ba      	ldr	r2, [r7, #8]
 8015f1e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d105      	bne.n	8015f32 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	7f9b      	ldrb	r3, [r3, #30]
 8015f2a:	f003 0301 	and.w	r3, r3, #1
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d059      	beq.n	8015fe6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015f32:	6a3b      	ldr	r3, [r7, #32]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d04f      	beq.n	8015fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d006      	beq.n	8015f4e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	685b      	ldr	r3, [r3, #4]
 8015f44:	685b      	ldr	r3, [r3, #4]
 8015f46:	889b      	ldrh	r3, [r3, #4]
 8015f48:	b29b      	uxth	r3, r3
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d002      	beq.n	8015f54 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	623b      	str	r3, [r7, #32]
 8015f52:	e041      	b.n	8015fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f56:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015f5e:	e012      	b.n	8015f86 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f68:	88db      	ldrh	r3, [r3, #6]
 8015f6a:	b29a      	uxth	r2, r3
 8015f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f6e:	889b      	ldrh	r3, [r3, #4]
 8015f70:	b29b      	uxth	r3, r3
 8015f72:	429a      	cmp	r2, r3
 8015f74:	d002      	beq.n	8015f7c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015f76:	2300      	movs	r3, #0
 8015f78:	623b      	str	r3, [r7, #32]
            break;
 8015f7a:	e007      	b.n	8015f8c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d1e9      	bne.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015f8c:	6a3b      	ldr	r3, [r7, #32]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d022      	beq.n	8015fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d106      	bne.n	8015fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015f9a:	4b15      	ldr	r3, [pc, #84]	; (8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f9c:	f240 12df 	movw	r2, #479	; 0x1df
 8015fa0:	4917      	ldr	r1, [pc, #92]	; (8016000 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015fa2:	4815      	ldr	r0, [pc, #84]	; (8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015fa4:	f001 f90e 	bl	80171c4 <iprintf>
          LWIP_ASSERT("sanity check",
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	685b      	ldr	r3, [r3, #4]
 8015fac:	685b      	ldr	r3, [r3, #4]
 8015fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d106      	bne.n	8015fc2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015fb4:	4b0e      	ldr	r3, [pc, #56]	; (8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015fb6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015fba:	4911      	ldr	r1, [pc, #68]	; (8016000 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015fbc:	480e      	ldr	r0, [pc, #56]	; (8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015fbe:	f001 f901 	bl	80171c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d006      	beq.n	8015fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015fca:	4b09      	ldr	r3, [pc, #36]	; (8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015fcc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015fd0:	490c      	ldr	r1, [pc, #48]	; (8016004 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015fd2:	4809      	ldr	r0, [pc, #36]	; (8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015fd4:	f001 f8f6 	bl	80171c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015fd8:	6a3b      	ldr	r3, [r7, #32]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	bf14      	ite	ne
 8015fde:	2301      	movne	r3, #1
 8015fe0:	2300      	moveq	r3, #0
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	e000      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015fe6:	2300      	movs	r3, #0
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3730      	adds	r7, #48	; 0x30
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	0801f03c 	.word	0x0801f03c
 8015ff4:	0801f120 	.word	0x0801f120
 8015ff8:	0801f084 	.word	0x0801f084
 8015ffc:	0801f140 	.word	0x0801f140
 8016000:	0801f178 	.word	0x0801f178
 8016004:	0801f188 	.word	0x0801f188

08016008 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b08e      	sub	sp, #56	; 0x38
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	685b      	ldr	r3, [r3, #4]
 8016014:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016018:	781b      	ldrb	r3, [r3, #0]
 801601a:	f003 030f 	and.w	r3, r3, #15
 801601e:	b2db      	uxtb	r3, r3
 8016020:	009b      	lsls	r3, r3, #2
 8016022:	b2db      	uxtb	r3, r3
 8016024:	2b14      	cmp	r3, #20
 8016026:	f040 8167 	bne.w	80162f8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602c:	88db      	ldrh	r3, [r3, #6]
 801602e:	b29b      	uxth	r3, r3
 8016030:	4618      	mov	r0, r3
 8016032:	f7f3 fd35 	bl	8009aa0 <lwip_htons>
 8016036:	4603      	mov	r3, r0
 8016038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801603c:	b29b      	uxth	r3, r3
 801603e:	00db      	lsls	r3, r3, #3
 8016040:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016044:	885b      	ldrh	r3, [r3, #2]
 8016046:	b29b      	uxth	r3, r3
 8016048:	4618      	mov	r0, r3
 801604a:	f7f3 fd29 	bl	8009aa0 <lwip_htons>
 801604e:	4603      	mov	r3, r0
 8016050:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016054:	781b      	ldrb	r3, [r3, #0]
 8016056:	f003 030f 	and.w	r3, r3, #15
 801605a:	b2db      	uxtb	r3, r3
 801605c:	009b      	lsls	r3, r3, #2
 801605e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016066:	b29b      	uxth	r3, r3
 8016068:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801606a:	429a      	cmp	r2, r3
 801606c:	f0c0 8146 	bcc.w	80162fc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016074:	b29b      	uxth	r3, r3
 8016076:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016078:	1ad3      	subs	r3, r2, r3
 801607a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f7f5 f931 	bl	800b2e4 <pbuf_clen>
 8016082:	4603      	mov	r3, r0
 8016084:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016086:	4b9f      	ldr	r3, [pc, #636]	; (8016304 <ip4_reass+0x2fc>)
 8016088:	881b      	ldrh	r3, [r3, #0]
 801608a:	461a      	mov	r2, r3
 801608c:	8c3b      	ldrh	r3, [r7, #32]
 801608e:	4413      	add	r3, r2
 8016090:	2b0a      	cmp	r3, #10
 8016092:	dd10      	ble.n	80160b6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016094:	8c3b      	ldrh	r3, [r7, #32]
 8016096:	4619      	mov	r1, r3
 8016098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801609a:	f7ff fd81 	bl	8015ba0 <ip_reass_remove_oldest_datagram>
 801609e:	4603      	mov	r3, r0
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	f000 812d 	beq.w	8016300 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80160a6:	4b97      	ldr	r3, [pc, #604]	; (8016304 <ip4_reass+0x2fc>)
 80160a8:	881b      	ldrh	r3, [r3, #0]
 80160aa:	461a      	mov	r2, r3
 80160ac:	8c3b      	ldrh	r3, [r7, #32]
 80160ae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80160b0:	2b0a      	cmp	r3, #10
 80160b2:	f300 8125 	bgt.w	8016300 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80160b6:	4b94      	ldr	r3, [pc, #592]	; (8016308 <ip4_reass+0x300>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	633b      	str	r3, [r7, #48]	; 0x30
 80160bc:	e015      	b.n	80160ea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80160be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160c0:	695a      	ldr	r2, [r3, #20]
 80160c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160c4:	68db      	ldr	r3, [r3, #12]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d10c      	bne.n	80160e4 <ip4_reass+0xdc>
 80160ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160cc:	699a      	ldr	r2, [r3, #24]
 80160ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d0:	691b      	ldr	r3, [r3, #16]
 80160d2:	429a      	cmp	r2, r3
 80160d4:	d106      	bne.n	80160e4 <ip4_reass+0xdc>
 80160d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d8:	899a      	ldrh	r2, [r3, #12]
 80160da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160dc:	889b      	ldrh	r3, [r3, #4]
 80160de:	b29b      	uxth	r3, r3
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d006      	beq.n	80160f2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80160e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	633b      	str	r3, [r7, #48]	; 0x30
 80160ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d1e6      	bne.n	80160be <ip4_reass+0xb6>
 80160f0:	e000      	b.n	80160f4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80160f2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80160f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d109      	bne.n	801610e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80160fa:	8c3b      	ldrh	r3, [r7, #32]
 80160fc:	4619      	mov	r1, r3
 80160fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016100:	f7ff fdb0 	bl	8015c64 <ip_reass_enqueue_new_datagram>
 8016104:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016108:	2b00      	cmp	r3, #0
 801610a:	d11c      	bne.n	8016146 <ip4_reass+0x13e>
      goto nullreturn;
 801610c:	e109      	b.n	8016322 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016110:	88db      	ldrh	r3, [r3, #6]
 8016112:	b29b      	uxth	r3, r3
 8016114:	4618      	mov	r0, r3
 8016116:	f7f3 fcc3 	bl	8009aa0 <lwip_htons>
 801611a:	4603      	mov	r3, r0
 801611c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016120:	2b00      	cmp	r3, #0
 8016122:	d110      	bne.n	8016146 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016126:	89db      	ldrh	r3, [r3, #14]
 8016128:	4618      	mov	r0, r3
 801612a:	f7f3 fcb9 	bl	8009aa0 <lwip_htons>
 801612e:	4603      	mov	r3, r0
 8016130:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016134:	2b00      	cmp	r3, #0
 8016136:	d006      	beq.n	8016146 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801613a:	3308      	adds	r3, #8
 801613c:	2214      	movs	r2, #20
 801613e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016140:	4618      	mov	r0, r3
 8016142:	f000 fba5 	bl	8016890 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016148:	88db      	ldrh	r3, [r3, #6]
 801614a:	b29b      	uxth	r3, r3
 801614c:	f003 0320 	and.w	r3, r3, #32
 8016150:	2b00      	cmp	r3, #0
 8016152:	bf0c      	ite	eq
 8016154:	2301      	moveq	r3, #1
 8016156:	2300      	movne	r3, #0
 8016158:	b2db      	uxtb	r3, r3
 801615a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d00e      	beq.n	8016180 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016162:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016166:	4413      	add	r3, r2
 8016168:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801616a:	8b7a      	ldrh	r2, [r7, #26]
 801616c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801616e:	429a      	cmp	r2, r3
 8016170:	f0c0 80a0 	bcc.w	80162b4 <ip4_reass+0x2ac>
 8016174:	8b7b      	ldrh	r3, [r7, #26]
 8016176:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801617a:	4293      	cmp	r3, r2
 801617c:	f200 809a 	bhi.w	80162b4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016180:	69fa      	ldr	r2, [r7, #28]
 8016182:	6879      	ldr	r1, [r7, #4]
 8016184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016186:	f7ff fdd5 	bl	8015d34 <ip_reass_chain_frag_into_datagram_and_validate>
 801618a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801618c:	697b      	ldr	r3, [r7, #20]
 801618e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016192:	f000 8091 	beq.w	80162b8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016196:	4b5b      	ldr	r3, [pc, #364]	; (8016304 <ip4_reass+0x2fc>)
 8016198:	881a      	ldrh	r2, [r3, #0]
 801619a:	8c3b      	ldrh	r3, [r7, #32]
 801619c:	4413      	add	r3, r2
 801619e:	b29a      	uxth	r2, r3
 80161a0:	4b58      	ldr	r3, [pc, #352]	; (8016304 <ip4_reass+0x2fc>)
 80161a2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80161a4:	69fb      	ldr	r3, [r7, #28]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d00d      	beq.n	80161c6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80161aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80161ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161ae:	4413      	add	r3, r2
 80161b0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80161b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b4:	8a7a      	ldrh	r2, [r7, #18]
 80161b6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80161b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ba:	7f9b      	ldrb	r3, [r3, #30]
 80161bc:	f043 0301 	orr.w	r3, r3, #1
 80161c0:	b2da      	uxtb	r2, r3
 80161c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80161c6:	697b      	ldr	r3, [r7, #20]
 80161c8:	2b01      	cmp	r3, #1
 80161ca:	d171      	bne.n	80162b0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80161cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ce:	8b9b      	ldrh	r3, [r3, #28]
 80161d0:	3314      	adds	r3, #20
 80161d2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80161d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d6:	685b      	ldr	r3, [r3, #4]
 80161d8:	685b      	ldr	r3, [r3, #4]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80161de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	685b      	ldr	r3, [r3, #4]
 80161e4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80161e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e8:	3308      	adds	r3, #8
 80161ea:	2214      	movs	r2, #20
 80161ec:	4619      	mov	r1, r3
 80161ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161f0:	f000 fb4e 	bl	8016890 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80161f4:	8a3b      	ldrh	r3, [r7, #16]
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7f3 fc52 	bl	8009aa0 <lwip_htons>
 80161fc:	4603      	mov	r3, r0
 80161fe:	461a      	mov	r2, r3
 8016200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016202:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016206:	2200      	movs	r2, #0
 8016208:	719a      	strb	r2, [r3, #6]
 801620a:	2200      	movs	r2, #0
 801620c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016210:	2200      	movs	r2, #0
 8016212:	729a      	strb	r2, [r3, #10]
 8016214:	2200      	movs	r2, #0
 8016216:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621a:	685b      	ldr	r3, [r3, #4]
 801621c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801621e:	e00d      	b.n	801623c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016222:	685b      	ldr	r3, [r3, #4]
 8016224:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016226:	2114      	movs	r1, #20
 8016228:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801622a:	f7f4 ff4d 	bl	800b0c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801622e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f7f5 f891 	bl	800b358 <pbuf_cat>
      r = iprh->next_pbuf;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801623e:	2b00      	cmp	r3, #0
 8016240:	d1ee      	bne.n	8016220 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016242:	4b31      	ldr	r3, [pc, #196]	; (8016308 <ip4_reass+0x300>)
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016248:	429a      	cmp	r2, r3
 801624a:	d102      	bne.n	8016252 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801624c:	2300      	movs	r3, #0
 801624e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016250:	e010      	b.n	8016274 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016252:	4b2d      	ldr	r3, [pc, #180]	; (8016308 <ip4_reass+0x300>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016258:	e007      	b.n	801626a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016260:	429a      	cmp	r2, r3
 8016262:	d006      	beq.n	8016272 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	62fb      	str	r3, [r7, #44]	; 0x2c
 801626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626c:	2b00      	cmp	r3, #0
 801626e:	d1f4      	bne.n	801625a <ip4_reass+0x252>
 8016270:	e000      	b.n	8016274 <ip4_reass+0x26c>
          break;
 8016272:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016278:	f7ff fd2e 	bl	8015cd8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f7f5 f831 	bl	800b2e4 <pbuf_clen>
 8016282:	4603      	mov	r3, r0
 8016284:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016286:	4b1f      	ldr	r3, [pc, #124]	; (8016304 <ip4_reass+0x2fc>)
 8016288:	881b      	ldrh	r3, [r3, #0]
 801628a:	8c3a      	ldrh	r2, [r7, #32]
 801628c:	429a      	cmp	r2, r3
 801628e:	d906      	bls.n	801629e <ip4_reass+0x296>
 8016290:	4b1e      	ldr	r3, [pc, #120]	; (801630c <ip4_reass+0x304>)
 8016292:	f240 229b 	movw	r2, #667	; 0x29b
 8016296:	491e      	ldr	r1, [pc, #120]	; (8016310 <ip4_reass+0x308>)
 8016298:	481e      	ldr	r0, [pc, #120]	; (8016314 <ip4_reass+0x30c>)
 801629a:	f000 ff93 	bl	80171c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801629e:	4b19      	ldr	r3, [pc, #100]	; (8016304 <ip4_reass+0x2fc>)
 80162a0:	881a      	ldrh	r2, [r3, #0]
 80162a2:	8c3b      	ldrh	r3, [r7, #32]
 80162a4:	1ad3      	subs	r3, r2, r3
 80162a6:	b29a      	uxth	r2, r3
 80162a8:	4b16      	ldr	r3, [pc, #88]	; (8016304 <ip4_reass+0x2fc>)
 80162aa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	e03c      	b.n	801632a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80162b0:	2300      	movs	r3, #0
 80162b2:	e03a      	b.n	801632a <ip4_reass+0x322>
      goto nullreturn_ipr;
 80162b4:	bf00      	nop
 80162b6:	e000      	b.n	80162ba <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80162b8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80162ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d106      	bne.n	80162ce <ip4_reass+0x2c6>
 80162c0:	4b12      	ldr	r3, [pc, #72]	; (801630c <ip4_reass+0x304>)
 80162c2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80162c6:	4914      	ldr	r1, [pc, #80]	; (8016318 <ip4_reass+0x310>)
 80162c8:	4812      	ldr	r0, [pc, #72]	; (8016314 <ip4_reass+0x30c>)
 80162ca:	f000 ff7b 	bl	80171c4 <iprintf>
  if (ipr->p == NULL) {
 80162ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d0:	685b      	ldr	r3, [r3, #4]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d124      	bne.n	8016320 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80162d6:	4b0c      	ldr	r3, [pc, #48]	; (8016308 <ip4_reass+0x300>)
 80162d8:	681b      	ldr	r3, [r3, #0]
 80162da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162dc:	429a      	cmp	r2, r3
 80162de:	d006      	beq.n	80162ee <ip4_reass+0x2e6>
 80162e0:	4b0a      	ldr	r3, [pc, #40]	; (801630c <ip4_reass+0x304>)
 80162e2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80162e6:	490d      	ldr	r1, [pc, #52]	; (801631c <ip4_reass+0x314>)
 80162e8:	480a      	ldr	r0, [pc, #40]	; (8016314 <ip4_reass+0x30c>)
 80162ea:	f000 ff6b 	bl	80171c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80162ee:	2100      	movs	r1, #0
 80162f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162f2:	f7ff fcf1 	bl	8015cd8 <ip_reass_dequeue_datagram>
 80162f6:	e014      	b.n	8016322 <ip4_reass+0x31a>
    goto nullreturn;
 80162f8:	bf00      	nop
 80162fa:	e012      	b.n	8016322 <ip4_reass+0x31a>
    goto nullreturn;
 80162fc:	bf00      	nop
 80162fe:	e010      	b.n	8016322 <ip4_reass+0x31a>
      goto nullreturn;
 8016300:	bf00      	nop
 8016302:	e00e      	b.n	8016322 <ip4_reass+0x31a>
 8016304:	20001358 	.word	0x20001358
 8016308:	20001354 	.word	0x20001354
 801630c:	0801f03c 	.word	0x0801f03c
 8016310:	0801f1ac 	.word	0x0801f1ac
 8016314:	0801f084 	.word	0x0801f084
 8016318:	0801f1c8 	.word	0x0801f1c8
 801631c:	0801f1d4 	.word	0x0801f1d4
  }

nullreturn:
 8016320:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016322:	6878      	ldr	r0, [r7, #4]
 8016324:	f7f4 ff56 	bl	800b1d4 <pbuf_free>
  return NULL;
 8016328:	2300      	movs	r3, #0
}
 801632a:	4618      	mov	r0, r3
 801632c:	3738      	adds	r7, #56	; 0x38
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}
 8016332:	bf00      	nop

08016334 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016338:	2005      	movs	r0, #5
 801633a:	f7f4 f8e5 	bl	800a508 <memp_malloc>
 801633e:	4603      	mov	r3, r0
}
 8016340:	4618      	mov	r0, r3
 8016342:	bd80      	pop	{r7, pc}

08016344 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b082      	sub	sp, #8
 8016348:	af00      	add	r7, sp, #0
 801634a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d106      	bne.n	8016360 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016352:	4b07      	ldr	r3, [pc, #28]	; (8016370 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016354:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016358:	4906      	ldr	r1, [pc, #24]	; (8016374 <ip_frag_free_pbuf_custom_ref+0x30>)
 801635a:	4807      	ldr	r0, [pc, #28]	; (8016378 <ip_frag_free_pbuf_custom_ref+0x34>)
 801635c:	f000 ff32 	bl	80171c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016360:	6879      	ldr	r1, [r7, #4]
 8016362:	2005      	movs	r0, #5
 8016364:	f7f4 f91c 	bl	800a5a0 <memp_free>
}
 8016368:	bf00      	nop
 801636a:	3708      	adds	r7, #8
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}
 8016370:	0801f03c 	.word	0x0801f03c
 8016374:	0801f1f4 	.word	0x0801f1f4
 8016378:	0801f084 	.word	0x0801f084

0801637c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b084      	sub	sp, #16
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d106      	bne.n	801639c <ipfrag_free_pbuf_custom+0x20>
 801638e:	4b11      	ldr	r3, [pc, #68]	; (80163d4 <ipfrag_free_pbuf_custom+0x58>)
 8016390:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016394:	4910      	ldr	r1, [pc, #64]	; (80163d8 <ipfrag_free_pbuf_custom+0x5c>)
 8016396:	4811      	ldr	r0, [pc, #68]	; (80163dc <ipfrag_free_pbuf_custom+0x60>)
 8016398:	f000 ff14 	bl	80171c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801639c:	68fa      	ldr	r2, [r7, #12]
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	429a      	cmp	r2, r3
 80163a2:	d006      	beq.n	80163b2 <ipfrag_free_pbuf_custom+0x36>
 80163a4:	4b0b      	ldr	r3, [pc, #44]	; (80163d4 <ipfrag_free_pbuf_custom+0x58>)
 80163a6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80163aa:	490d      	ldr	r1, [pc, #52]	; (80163e0 <ipfrag_free_pbuf_custom+0x64>)
 80163ac:	480b      	ldr	r0, [pc, #44]	; (80163dc <ipfrag_free_pbuf_custom+0x60>)
 80163ae:	f000 ff09 	bl	80171c4 <iprintf>
  if (pcr->original != NULL) {
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	695b      	ldr	r3, [r3, #20]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d004      	beq.n	80163c4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	695b      	ldr	r3, [r3, #20]
 80163be:	4618      	mov	r0, r3
 80163c0:	f7f4 ff08 	bl	800b1d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80163c4:	68f8      	ldr	r0, [r7, #12]
 80163c6:	f7ff ffbd 	bl	8016344 <ip_frag_free_pbuf_custom_ref>
}
 80163ca:	bf00      	nop
 80163cc:	3710      	adds	r7, #16
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	0801f03c 	.word	0x0801f03c
 80163d8:	0801f200 	.word	0x0801f200
 80163dc:	0801f084 	.word	0x0801f084
 80163e0:	0801f20c 	.word	0x0801f20c

080163e4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80163e4:	b580      	push	{r7, lr}
 80163e6:	b094      	sub	sp, #80	; 0x50
 80163e8:	af02      	add	r7, sp, #8
 80163ea:	60f8      	str	r0, [r7, #12]
 80163ec:	60b9      	str	r1, [r7, #8]
 80163ee:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80163f0:	2300      	movs	r3, #0
 80163f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80163f6:	68bb      	ldr	r3, [r7, #8]
 80163f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80163fa:	3b14      	subs	r3, #20
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	da00      	bge.n	8016402 <ip4_frag+0x1e>
 8016400:	3307      	adds	r3, #7
 8016402:	10db      	asrs	r3, r3, #3
 8016404:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016406:	2314      	movs	r3, #20
 8016408:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	685b      	ldr	r3, [r3, #4]
 801640e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016412:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	f003 030f 	and.w	r3, r3, #15
 801641c:	b2db      	uxtb	r3, r3
 801641e:	009b      	lsls	r3, r3, #2
 8016420:	b2db      	uxtb	r3, r3
 8016422:	2b14      	cmp	r3, #20
 8016424:	d002      	beq.n	801642c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016426:	f06f 0305 	mvn.w	r3, #5
 801642a:	e110      	b.n	801664e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	895b      	ldrh	r3, [r3, #10]
 8016430:	2b13      	cmp	r3, #19
 8016432:	d809      	bhi.n	8016448 <ip4_frag+0x64>
 8016434:	4b88      	ldr	r3, [pc, #544]	; (8016658 <ip4_frag+0x274>)
 8016436:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801643a:	4988      	ldr	r1, [pc, #544]	; (801665c <ip4_frag+0x278>)
 801643c:	4888      	ldr	r0, [pc, #544]	; (8016660 <ip4_frag+0x27c>)
 801643e:	f000 fec1 	bl	80171c4 <iprintf>
 8016442:	f06f 0305 	mvn.w	r3, #5
 8016446:	e102      	b.n	801664e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644a:	88db      	ldrh	r3, [r3, #6]
 801644c:	b29b      	uxth	r3, r3
 801644e:	4618      	mov	r0, r3
 8016450:	f7f3 fb26 	bl	8009aa0 <lwip_htons>
 8016454:	4603      	mov	r3, r0
 8016456:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016458:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801645a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801645e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016462:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016468:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	891b      	ldrh	r3, [r3, #8]
 801646e:	3b14      	subs	r3, #20
 8016470:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016474:	e0e1      	b.n	801663a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016476:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016478:	00db      	lsls	r3, r3, #3
 801647a:	b29b      	uxth	r3, r3
 801647c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016480:	4293      	cmp	r3, r2
 8016482:	bf28      	it	cs
 8016484:	4613      	movcs	r3, r2
 8016486:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016488:	f44f 7220 	mov.w	r2, #640	; 0x280
 801648c:	2114      	movs	r1, #20
 801648e:	200e      	movs	r0, #14
 8016490:	f7f4 fbbc 	bl	800ac0c <pbuf_alloc>
 8016494:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016498:	2b00      	cmp	r3, #0
 801649a:	f000 80d5 	beq.w	8016648 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a0:	895b      	ldrh	r3, [r3, #10]
 80164a2:	2b13      	cmp	r3, #19
 80164a4:	d806      	bhi.n	80164b4 <ip4_frag+0xd0>
 80164a6:	4b6c      	ldr	r3, [pc, #432]	; (8016658 <ip4_frag+0x274>)
 80164a8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80164ac:	496d      	ldr	r1, [pc, #436]	; (8016664 <ip4_frag+0x280>)
 80164ae:	486c      	ldr	r0, [pc, #432]	; (8016660 <ip4_frag+0x27c>)
 80164b0:	f000 fe88 	bl	80171c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80164b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b6:	685b      	ldr	r3, [r3, #4]
 80164b8:	2214      	movs	r2, #20
 80164ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80164bc:	4618      	mov	r0, r3
 80164be:	f000 f9e7 	bl	8016890 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80164c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80164c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80164ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80164ce:	e064      	b.n	801659a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	895a      	ldrh	r2, [r3, #10]
 80164d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164d6:	1ad3      	subs	r3, r2, r3
 80164d8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	895b      	ldrh	r3, [r3, #10]
 80164de:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d906      	bls.n	80164f2 <ip4_frag+0x10e>
 80164e4:	4b5c      	ldr	r3, [pc, #368]	; (8016658 <ip4_frag+0x274>)
 80164e6:	f240 322d 	movw	r2, #813	; 0x32d
 80164ea:	495f      	ldr	r1, [pc, #380]	; (8016668 <ip4_frag+0x284>)
 80164ec:	485c      	ldr	r0, [pc, #368]	; (8016660 <ip4_frag+0x27c>)
 80164ee:	f000 fe69 	bl	80171c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80164f2:	8bfa      	ldrh	r2, [r7, #30]
 80164f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80164f8:	4293      	cmp	r3, r2
 80164fa:	bf28      	it	cs
 80164fc:	4613      	movcs	r3, r2
 80164fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016502:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016506:	2b00      	cmp	r3, #0
 8016508:	d105      	bne.n	8016516 <ip4_frag+0x132>
        poff = 0;
 801650a:	2300      	movs	r3, #0
 801650c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	60fb      	str	r3, [r7, #12]
        continue;
 8016514:	e041      	b.n	801659a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016516:	f7ff ff0d 	bl	8016334 <ip_frag_alloc_pbuf_custom_ref>
 801651a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801651c:	69bb      	ldr	r3, [r7, #24]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d103      	bne.n	801652a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016522:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016524:	f7f4 fe56 	bl	800b1d4 <pbuf_free>
        goto memerr;
 8016528:	e08f      	b.n	801664a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801652a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016530:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016532:	4413      	add	r3, r2
 8016534:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016538:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801653c:	9201      	str	r2, [sp, #4]
 801653e:	9300      	str	r3, [sp, #0]
 8016540:	4603      	mov	r3, r0
 8016542:	2241      	movs	r2, #65	; 0x41
 8016544:	2000      	movs	r0, #0
 8016546:	f7f4 fc8b 	bl	800ae60 <pbuf_alloced_custom>
 801654a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801654c:	697b      	ldr	r3, [r7, #20]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d106      	bne.n	8016560 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016552:	69b8      	ldr	r0, [r7, #24]
 8016554:	f7ff fef6 	bl	8016344 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801655a:	f7f4 fe3b 	bl	800b1d4 <pbuf_free>
        goto memerr;
 801655e:	e074      	b.n	801664a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016560:	68f8      	ldr	r0, [r7, #12]
 8016562:	f7f4 fed7 	bl	800b314 <pbuf_ref>
      pcr->original = p;
 8016566:	69bb      	ldr	r3, [r7, #24]
 8016568:	68fa      	ldr	r2, [r7, #12]
 801656a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801656c:	69bb      	ldr	r3, [r7, #24]
 801656e:	4a3f      	ldr	r2, [pc, #252]	; (801666c <ip4_frag+0x288>)
 8016570:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016572:	6979      	ldr	r1, [r7, #20]
 8016574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016576:	f7f4 feef 	bl	800b358 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801657a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801657e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016582:	1ad3      	subs	r3, r2, r3
 8016584:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016588:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801658c:	2b00      	cmp	r3, #0
 801658e:	d004      	beq.n	801659a <ip4_frag+0x1b6>
        poff = 0;
 8016590:	2300      	movs	r3, #0
 8016592:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801659a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d196      	bne.n	80164d0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80165a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80165a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80165a8:	4413      	add	r3, r2
 80165aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80165ac:	68bb      	ldr	r3, [r7, #8]
 80165ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165b0:	f1a3 0213 	sub.w	r2, r3, #19
 80165b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80165b8:	429a      	cmp	r2, r3
 80165ba:	bfcc      	ite	gt
 80165bc:	2301      	movgt	r3, #1
 80165be:	2300      	movle	r3, #0
 80165c0:	b2db      	uxtb	r3, r3
 80165c2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80165c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80165c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80165cc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80165ce:	6a3b      	ldr	r3, [r7, #32]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d002      	beq.n	80165da <ip4_frag+0x1f6>
 80165d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d003      	beq.n	80165e2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80165da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80165e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80165e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7f3 fa5b 	bl	8009aa0 <lwip_htons>
 80165ea:	4603      	mov	r3, r0
 80165ec:	461a      	mov	r2, r3
 80165ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80165f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80165f4:	3314      	adds	r3, #20
 80165f6:	b29b      	uxth	r3, r3
 80165f8:	4618      	mov	r0, r3
 80165fa:	f7f3 fa51 	bl	8009aa0 <lwip_htons>
 80165fe:	4603      	mov	r3, r0
 8016600:	461a      	mov	r2, r3
 8016602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016604:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016608:	2200      	movs	r2, #0
 801660a:	729a      	strb	r2, [r3, #10]
 801660c:	2200      	movs	r2, #0
 801660e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	695b      	ldr	r3, [r3, #20]
 8016614:	687a      	ldr	r2, [r7, #4]
 8016616:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016618:	68b8      	ldr	r0, [r7, #8]
 801661a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801661c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801661e:	f7f4 fdd9 	bl	800b1d4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016622:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016626:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016628:	1ad3      	subs	r3, r2, r3
 801662a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801662e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016632:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016634:	4413      	add	r3, r2
 8016636:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801663a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801663e:	2b00      	cmp	r3, #0
 8016640:	f47f af19 	bne.w	8016476 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016644:	2300      	movs	r3, #0
 8016646:	e002      	b.n	801664e <ip4_frag+0x26a>
      goto memerr;
 8016648:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801664a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801664e:	4618      	mov	r0, r3
 8016650:	3748      	adds	r7, #72	; 0x48
 8016652:	46bd      	mov	sp, r7
 8016654:	bd80      	pop	{r7, pc}
 8016656:	bf00      	nop
 8016658:	0801f03c 	.word	0x0801f03c
 801665c:	0801f218 	.word	0x0801f218
 8016660:	0801f084 	.word	0x0801f084
 8016664:	0801f234 	.word	0x0801f234
 8016668:	0801f254 	.word	0x0801f254
 801666c:	0801637d 	.word	0x0801637d

08016670 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b086      	sub	sp, #24
 8016674:	af00      	add	r7, sp, #0
 8016676:	6078      	str	r0, [r7, #4]
 8016678:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801667a:	230e      	movs	r3, #14
 801667c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	895b      	ldrh	r3, [r3, #10]
 8016682:	2b0e      	cmp	r3, #14
 8016684:	d96e      	bls.n	8016764 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	7bdb      	ldrb	r3, [r3, #15]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d106      	bne.n	801669c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801668e:	683b      	ldr	r3, [r7, #0]
 8016690:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016694:	3301      	adds	r3, #1
 8016696:	b2da      	uxtb	r2, r3
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	685b      	ldr	r3, [r3, #4]
 80166a0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80166a2:	693b      	ldr	r3, [r7, #16]
 80166a4:	7b1a      	ldrb	r2, [r3, #12]
 80166a6:	7b5b      	ldrb	r3, [r3, #13]
 80166a8:	021b      	lsls	r3, r3, #8
 80166aa:	4313      	orrs	r3, r2
 80166ac:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80166ae:	693b      	ldr	r3, [r7, #16]
 80166b0:	781b      	ldrb	r3, [r3, #0]
 80166b2:	f003 0301 	and.w	r3, r3, #1
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d023      	beq.n	8016702 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80166ba:	693b      	ldr	r3, [r7, #16]
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	2b01      	cmp	r3, #1
 80166c0:	d10f      	bne.n	80166e2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80166c2:	693b      	ldr	r3, [r7, #16]
 80166c4:	785b      	ldrb	r3, [r3, #1]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d11b      	bne.n	8016702 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80166ca:	693b      	ldr	r3, [r7, #16]
 80166cc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80166ce:	2b5e      	cmp	r3, #94	; 0x5e
 80166d0:	d117      	bne.n	8016702 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	7b5b      	ldrb	r3, [r3, #13]
 80166d6:	f043 0310 	orr.w	r3, r3, #16
 80166da:	b2da      	uxtb	r2, r3
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	735a      	strb	r2, [r3, #13]
 80166e0:	e00f      	b.n	8016702 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	2206      	movs	r2, #6
 80166e6:	4928      	ldr	r1, [pc, #160]	; (8016788 <ethernet_input+0x118>)
 80166e8:	4618      	mov	r0, r3
 80166ea:	f000 f8c3 	bl	8016874 <memcmp>
 80166ee:	4603      	mov	r3, r0
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d106      	bne.n	8016702 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	7b5b      	ldrb	r3, [r3, #13]
 80166f8:	f043 0308 	orr.w	r3, r3, #8
 80166fc:	b2da      	uxtb	r2, r3
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016702:	89fb      	ldrh	r3, [r7, #14]
 8016704:	2b08      	cmp	r3, #8
 8016706:	d003      	beq.n	8016710 <ethernet_input+0xa0>
 8016708:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801670c:	d014      	beq.n	8016738 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801670e:	e032      	b.n	8016776 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016716:	f003 0308 	and.w	r3, r3, #8
 801671a:	2b00      	cmp	r3, #0
 801671c:	d024      	beq.n	8016768 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801671e:	8afb      	ldrh	r3, [r7, #22]
 8016720:	4619      	mov	r1, r3
 8016722:	6878      	ldr	r0, [r7, #4]
 8016724:	f7f4 fcd0 	bl	800b0c8 <pbuf_remove_header>
 8016728:	4603      	mov	r3, r0
 801672a:	2b00      	cmp	r3, #0
 801672c:	d11e      	bne.n	801676c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801672e:	6839      	ldr	r1, [r7, #0]
 8016730:	6878      	ldr	r0, [r7, #4]
 8016732:	f7fe fef3 	bl	801551c <ip4_input>
      break;
 8016736:	e013      	b.n	8016760 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016738:	683b      	ldr	r3, [r7, #0]
 801673a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801673e:	f003 0308 	and.w	r3, r3, #8
 8016742:	2b00      	cmp	r3, #0
 8016744:	d014      	beq.n	8016770 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016746:	8afb      	ldrh	r3, [r7, #22]
 8016748:	4619      	mov	r1, r3
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f7f4 fcbc 	bl	800b0c8 <pbuf_remove_header>
 8016750:	4603      	mov	r3, r0
 8016752:	2b00      	cmp	r3, #0
 8016754:	d10e      	bne.n	8016774 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016756:	6839      	ldr	r1, [r7, #0]
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7fe f88f 	bl	801487c <etharp_input>
      break;
 801675e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016760:	2300      	movs	r3, #0
 8016762:	e00c      	b.n	801677e <ethernet_input+0x10e>
    goto free_and_return;
 8016764:	bf00      	nop
 8016766:	e006      	b.n	8016776 <ethernet_input+0x106>
        goto free_and_return;
 8016768:	bf00      	nop
 801676a:	e004      	b.n	8016776 <ethernet_input+0x106>
        goto free_and_return;
 801676c:	bf00      	nop
 801676e:	e002      	b.n	8016776 <ethernet_input+0x106>
        goto free_and_return;
 8016770:	bf00      	nop
 8016772:	e000      	b.n	8016776 <ethernet_input+0x106>
        goto free_and_return;
 8016774:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016776:	6878      	ldr	r0, [r7, #4]
 8016778:	f7f4 fd2c 	bl	800b1d4 <pbuf_free>
  return ERR_OK;
 801677c:	2300      	movs	r3, #0
}
 801677e:	4618      	mov	r0, r3
 8016780:	3718      	adds	r7, #24
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	08032344 	.word	0x08032344

0801678c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801678c:	b580      	push	{r7, lr}
 801678e:	b086      	sub	sp, #24
 8016790:	af00      	add	r7, sp, #0
 8016792:	60f8      	str	r0, [r7, #12]
 8016794:	60b9      	str	r1, [r7, #8]
 8016796:	607a      	str	r2, [r7, #4]
 8016798:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801679a:	8c3b      	ldrh	r3, [r7, #32]
 801679c:	4618      	mov	r0, r3
 801679e:	f7f3 f97f 	bl	8009aa0 <lwip_htons>
 80167a2:	4603      	mov	r3, r0
 80167a4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80167a6:	210e      	movs	r1, #14
 80167a8:	68b8      	ldr	r0, [r7, #8]
 80167aa:	f7f4 fc7d 	bl	800b0a8 <pbuf_add_header>
 80167ae:	4603      	mov	r3, r0
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d125      	bne.n	8016800 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80167b4:	68bb      	ldr	r3, [r7, #8]
 80167b6:	685b      	ldr	r3, [r3, #4]
 80167b8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80167ba:	693b      	ldr	r3, [r7, #16]
 80167bc:	8afa      	ldrh	r2, [r7, #22]
 80167be:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	2206      	movs	r2, #6
 80167c4:	6839      	ldr	r1, [r7, #0]
 80167c6:	4618      	mov	r0, r3
 80167c8:	f000 f862 	bl	8016890 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	3306      	adds	r3, #6
 80167d0:	2206      	movs	r2, #6
 80167d2:	6879      	ldr	r1, [r7, #4]
 80167d4:	4618      	mov	r0, r3
 80167d6:	f000 f85b 	bl	8016890 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80167e0:	2b06      	cmp	r3, #6
 80167e2:	d006      	beq.n	80167f2 <ethernet_output+0x66>
 80167e4:	4b0a      	ldr	r3, [pc, #40]	; (8016810 <ethernet_output+0x84>)
 80167e6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80167ea:	490a      	ldr	r1, [pc, #40]	; (8016814 <ethernet_output+0x88>)
 80167ec:	480a      	ldr	r0, [pc, #40]	; (8016818 <ethernet_output+0x8c>)
 80167ee:	f000 fce9 	bl	80171c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	699b      	ldr	r3, [r3, #24]
 80167f6:	68b9      	ldr	r1, [r7, #8]
 80167f8:	68f8      	ldr	r0, [r7, #12]
 80167fa:	4798      	blx	r3
 80167fc:	4603      	mov	r3, r0
 80167fe:	e002      	b.n	8016806 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016800:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016802:	f06f 0301 	mvn.w	r3, #1
}
 8016806:	4618      	mov	r0, r3
 8016808:	3718      	adds	r7, #24
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}
 801680e:	bf00      	nop
 8016810:	0801f264 	.word	0x0801f264
 8016814:	0801f29c 	.word	0x0801f29c
 8016818:	0801f2d0 	.word	0x0801f2d0

0801681c <atof>:
 801681c:	2100      	movs	r1, #0
 801681e:	f001 bc79 	b.w	8018114 <strtod>

08016822 <atoi>:
 8016822:	220a      	movs	r2, #10
 8016824:	2100      	movs	r1, #0
 8016826:	f001 bd65 	b.w	80182f4 <strtol>
	...

0801682c <__libc_init_array>:
 801682c:	b570      	push	{r4, r5, r6, lr}
 801682e:	4d0d      	ldr	r5, [pc, #52]	; (8016864 <__libc_init_array+0x38>)
 8016830:	4c0d      	ldr	r4, [pc, #52]	; (8016868 <__libc_init_array+0x3c>)
 8016832:	1b64      	subs	r4, r4, r5
 8016834:	10a4      	asrs	r4, r4, #2
 8016836:	2600      	movs	r6, #0
 8016838:	42a6      	cmp	r6, r4
 801683a:	d109      	bne.n	8016850 <__libc_init_array+0x24>
 801683c:	4d0b      	ldr	r5, [pc, #44]	; (801686c <__libc_init_array+0x40>)
 801683e:	4c0c      	ldr	r4, [pc, #48]	; (8016870 <__libc_init_array+0x44>)
 8016840:	f004 fc00 	bl	801b044 <_init>
 8016844:	1b64      	subs	r4, r4, r5
 8016846:	10a4      	asrs	r4, r4, #2
 8016848:	2600      	movs	r6, #0
 801684a:	42a6      	cmp	r6, r4
 801684c:	d105      	bne.n	801685a <__libc_init_array+0x2e>
 801684e:	bd70      	pop	{r4, r5, r6, pc}
 8016850:	f855 3b04 	ldr.w	r3, [r5], #4
 8016854:	4798      	blx	r3
 8016856:	3601      	adds	r6, #1
 8016858:	e7ee      	b.n	8016838 <__libc_init_array+0xc>
 801685a:	f855 3b04 	ldr.w	r3, [r5], #4
 801685e:	4798      	blx	r3
 8016860:	3601      	adds	r6, #1
 8016862:	e7f2      	b.n	801684a <__libc_init_array+0x1e>
 8016864:	080328d0 	.word	0x080328d0
 8016868:	080328d0 	.word	0x080328d0
 801686c:	080328d0 	.word	0x080328d0
 8016870:	080328d4 	.word	0x080328d4

08016874 <memcmp>:
 8016874:	b530      	push	{r4, r5, lr}
 8016876:	3901      	subs	r1, #1
 8016878:	2400      	movs	r4, #0
 801687a:	42a2      	cmp	r2, r4
 801687c:	d101      	bne.n	8016882 <memcmp+0xe>
 801687e:	2000      	movs	r0, #0
 8016880:	e005      	b.n	801688e <memcmp+0x1a>
 8016882:	5d03      	ldrb	r3, [r0, r4]
 8016884:	3401      	adds	r4, #1
 8016886:	5d0d      	ldrb	r5, [r1, r4]
 8016888:	42ab      	cmp	r3, r5
 801688a:	d0f6      	beq.n	801687a <memcmp+0x6>
 801688c:	1b58      	subs	r0, r3, r5
 801688e:	bd30      	pop	{r4, r5, pc}

08016890 <memcpy>:
 8016890:	440a      	add	r2, r1
 8016892:	4291      	cmp	r1, r2
 8016894:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016898:	d100      	bne.n	801689c <memcpy+0xc>
 801689a:	4770      	bx	lr
 801689c:	b510      	push	{r4, lr}
 801689e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80168a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80168a6:	4291      	cmp	r1, r2
 80168a8:	d1f9      	bne.n	801689e <memcpy+0xe>
 80168aa:	bd10      	pop	{r4, pc}

080168ac <memmove>:
 80168ac:	4288      	cmp	r0, r1
 80168ae:	b510      	push	{r4, lr}
 80168b0:	eb01 0402 	add.w	r4, r1, r2
 80168b4:	d902      	bls.n	80168bc <memmove+0x10>
 80168b6:	4284      	cmp	r4, r0
 80168b8:	4623      	mov	r3, r4
 80168ba:	d807      	bhi.n	80168cc <memmove+0x20>
 80168bc:	1e43      	subs	r3, r0, #1
 80168be:	42a1      	cmp	r1, r4
 80168c0:	d008      	beq.n	80168d4 <memmove+0x28>
 80168c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80168c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80168ca:	e7f8      	b.n	80168be <memmove+0x12>
 80168cc:	4402      	add	r2, r0
 80168ce:	4601      	mov	r1, r0
 80168d0:	428a      	cmp	r2, r1
 80168d2:	d100      	bne.n	80168d6 <memmove+0x2a>
 80168d4:	bd10      	pop	{r4, pc}
 80168d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80168da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80168de:	e7f7      	b.n	80168d0 <memmove+0x24>

080168e0 <memset>:
 80168e0:	4402      	add	r2, r0
 80168e2:	4603      	mov	r3, r0
 80168e4:	4293      	cmp	r3, r2
 80168e6:	d100      	bne.n	80168ea <memset+0xa>
 80168e8:	4770      	bx	lr
 80168ea:	f803 1b01 	strb.w	r1, [r3], #1
 80168ee:	e7f9      	b.n	80168e4 <memset+0x4>

080168f0 <__cvt>:
 80168f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80168f4:	ec55 4b10 	vmov	r4, r5, d0
 80168f8:	2d00      	cmp	r5, #0
 80168fa:	460e      	mov	r6, r1
 80168fc:	4619      	mov	r1, r3
 80168fe:	462b      	mov	r3, r5
 8016900:	bfbb      	ittet	lt
 8016902:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016906:	461d      	movlt	r5, r3
 8016908:	2300      	movge	r3, #0
 801690a:	232d      	movlt	r3, #45	; 0x2d
 801690c:	700b      	strb	r3, [r1, #0]
 801690e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016910:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016914:	4691      	mov	r9, r2
 8016916:	f023 0820 	bic.w	r8, r3, #32
 801691a:	bfbc      	itt	lt
 801691c:	4622      	movlt	r2, r4
 801691e:	4614      	movlt	r4, r2
 8016920:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016924:	d005      	beq.n	8016932 <__cvt+0x42>
 8016926:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801692a:	d100      	bne.n	801692e <__cvt+0x3e>
 801692c:	3601      	adds	r6, #1
 801692e:	2102      	movs	r1, #2
 8016930:	e000      	b.n	8016934 <__cvt+0x44>
 8016932:	2103      	movs	r1, #3
 8016934:	ab03      	add	r3, sp, #12
 8016936:	9301      	str	r3, [sp, #4]
 8016938:	ab02      	add	r3, sp, #8
 801693a:	9300      	str	r3, [sp, #0]
 801693c:	ec45 4b10 	vmov	d0, r4, r5
 8016940:	4653      	mov	r3, sl
 8016942:	4632      	mov	r2, r6
 8016944:	f001 fe4c 	bl	80185e0 <_dtoa_r>
 8016948:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801694c:	4607      	mov	r7, r0
 801694e:	d102      	bne.n	8016956 <__cvt+0x66>
 8016950:	f019 0f01 	tst.w	r9, #1
 8016954:	d022      	beq.n	801699c <__cvt+0xac>
 8016956:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801695a:	eb07 0906 	add.w	r9, r7, r6
 801695e:	d110      	bne.n	8016982 <__cvt+0x92>
 8016960:	783b      	ldrb	r3, [r7, #0]
 8016962:	2b30      	cmp	r3, #48	; 0x30
 8016964:	d10a      	bne.n	801697c <__cvt+0x8c>
 8016966:	2200      	movs	r2, #0
 8016968:	2300      	movs	r3, #0
 801696a:	4620      	mov	r0, r4
 801696c:	4629      	mov	r1, r5
 801696e:	f7ea f8bb 	bl	8000ae8 <__aeabi_dcmpeq>
 8016972:	b918      	cbnz	r0, 801697c <__cvt+0x8c>
 8016974:	f1c6 0601 	rsb	r6, r6, #1
 8016978:	f8ca 6000 	str.w	r6, [sl]
 801697c:	f8da 3000 	ldr.w	r3, [sl]
 8016980:	4499      	add	r9, r3
 8016982:	2200      	movs	r2, #0
 8016984:	2300      	movs	r3, #0
 8016986:	4620      	mov	r0, r4
 8016988:	4629      	mov	r1, r5
 801698a:	f7ea f8ad 	bl	8000ae8 <__aeabi_dcmpeq>
 801698e:	b108      	cbz	r0, 8016994 <__cvt+0xa4>
 8016990:	f8cd 900c 	str.w	r9, [sp, #12]
 8016994:	2230      	movs	r2, #48	; 0x30
 8016996:	9b03      	ldr	r3, [sp, #12]
 8016998:	454b      	cmp	r3, r9
 801699a:	d307      	bcc.n	80169ac <__cvt+0xbc>
 801699c:	9b03      	ldr	r3, [sp, #12]
 801699e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80169a0:	1bdb      	subs	r3, r3, r7
 80169a2:	4638      	mov	r0, r7
 80169a4:	6013      	str	r3, [r2, #0]
 80169a6:	b004      	add	sp, #16
 80169a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169ac:	1c59      	adds	r1, r3, #1
 80169ae:	9103      	str	r1, [sp, #12]
 80169b0:	701a      	strb	r2, [r3, #0]
 80169b2:	e7f0      	b.n	8016996 <__cvt+0xa6>

080169b4 <__exponent>:
 80169b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80169b6:	4603      	mov	r3, r0
 80169b8:	2900      	cmp	r1, #0
 80169ba:	bfb8      	it	lt
 80169bc:	4249      	neglt	r1, r1
 80169be:	f803 2b02 	strb.w	r2, [r3], #2
 80169c2:	bfb4      	ite	lt
 80169c4:	222d      	movlt	r2, #45	; 0x2d
 80169c6:	222b      	movge	r2, #43	; 0x2b
 80169c8:	2909      	cmp	r1, #9
 80169ca:	7042      	strb	r2, [r0, #1]
 80169cc:	dd2a      	ble.n	8016a24 <__exponent+0x70>
 80169ce:	f10d 0407 	add.w	r4, sp, #7
 80169d2:	46a4      	mov	ip, r4
 80169d4:	270a      	movs	r7, #10
 80169d6:	46a6      	mov	lr, r4
 80169d8:	460a      	mov	r2, r1
 80169da:	fb91 f6f7 	sdiv	r6, r1, r7
 80169de:	fb07 1516 	mls	r5, r7, r6, r1
 80169e2:	3530      	adds	r5, #48	; 0x30
 80169e4:	2a63      	cmp	r2, #99	; 0x63
 80169e6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80169ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80169ee:	4631      	mov	r1, r6
 80169f0:	dcf1      	bgt.n	80169d6 <__exponent+0x22>
 80169f2:	3130      	adds	r1, #48	; 0x30
 80169f4:	f1ae 0502 	sub.w	r5, lr, #2
 80169f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80169fc:	1c44      	adds	r4, r0, #1
 80169fe:	4629      	mov	r1, r5
 8016a00:	4561      	cmp	r1, ip
 8016a02:	d30a      	bcc.n	8016a1a <__exponent+0x66>
 8016a04:	f10d 0209 	add.w	r2, sp, #9
 8016a08:	eba2 020e 	sub.w	r2, r2, lr
 8016a0c:	4565      	cmp	r5, ip
 8016a0e:	bf88      	it	hi
 8016a10:	2200      	movhi	r2, #0
 8016a12:	4413      	add	r3, r2
 8016a14:	1a18      	subs	r0, r3, r0
 8016a16:	b003      	add	sp, #12
 8016a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016a22:	e7ed      	b.n	8016a00 <__exponent+0x4c>
 8016a24:	2330      	movs	r3, #48	; 0x30
 8016a26:	3130      	adds	r1, #48	; 0x30
 8016a28:	7083      	strb	r3, [r0, #2]
 8016a2a:	70c1      	strb	r1, [r0, #3]
 8016a2c:	1d03      	adds	r3, r0, #4
 8016a2e:	e7f1      	b.n	8016a14 <__exponent+0x60>

08016a30 <_printf_float>:
 8016a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a34:	ed2d 8b02 	vpush	{d8}
 8016a38:	b08d      	sub	sp, #52	; 0x34
 8016a3a:	460c      	mov	r4, r1
 8016a3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016a40:	4616      	mov	r6, r2
 8016a42:	461f      	mov	r7, r3
 8016a44:	4605      	mov	r5, r0
 8016a46:	f003 f8f5 	bl	8019c34 <_localeconv_r>
 8016a4a:	f8d0 a000 	ldr.w	sl, [r0]
 8016a4e:	4650      	mov	r0, sl
 8016a50:	f7e9 fbc8 	bl	80001e4 <strlen>
 8016a54:	2300      	movs	r3, #0
 8016a56:	930a      	str	r3, [sp, #40]	; 0x28
 8016a58:	6823      	ldr	r3, [r4, #0]
 8016a5a:	9305      	str	r3, [sp, #20]
 8016a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8016a60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016a64:	3307      	adds	r3, #7
 8016a66:	f023 0307 	bic.w	r3, r3, #7
 8016a6a:	f103 0208 	add.w	r2, r3, #8
 8016a6e:	f8c8 2000 	str.w	r2, [r8]
 8016a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016a7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016a7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016a82:	9307      	str	r3, [sp, #28]
 8016a84:	f8cd 8018 	str.w	r8, [sp, #24]
 8016a88:	ee08 0a10 	vmov	s16, r0
 8016a8c:	4b9f      	ldr	r3, [pc, #636]	; (8016d0c <_printf_float+0x2dc>)
 8016a8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a96:	f7ea f859 	bl	8000b4c <__aeabi_dcmpun>
 8016a9a:	bb88      	cbnz	r0, 8016b00 <_printf_float+0xd0>
 8016a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016aa0:	4b9a      	ldr	r3, [pc, #616]	; (8016d0c <_printf_float+0x2dc>)
 8016aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016aa6:	f7ea f833 	bl	8000b10 <__aeabi_dcmple>
 8016aaa:	bb48      	cbnz	r0, 8016b00 <_printf_float+0xd0>
 8016aac:	2200      	movs	r2, #0
 8016aae:	2300      	movs	r3, #0
 8016ab0:	4640      	mov	r0, r8
 8016ab2:	4649      	mov	r1, r9
 8016ab4:	f7ea f822 	bl	8000afc <__aeabi_dcmplt>
 8016ab8:	b110      	cbz	r0, 8016ac0 <_printf_float+0x90>
 8016aba:	232d      	movs	r3, #45	; 0x2d
 8016abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016ac0:	4b93      	ldr	r3, [pc, #588]	; (8016d10 <_printf_float+0x2e0>)
 8016ac2:	4894      	ldr	r0, [pc, #592]	; (8016d14 <_printf_float+0x2e4>)
 8016ac4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016ac8:	bf94      	ite	ls
 8016aca:	4698      	movls	r8, r3
 8016acc:	4680      	movhi	r8, r0
 8016ace:	2303      	movs	r3, #3
 8016ad0:	6123      	str	r3, [r4, #16]
 8016ad2:	9b05      	ldr	r3, [sp, #20]
 8016ad4:	f023 0204 	bic.w	r2, r3, #4
 8016ad8:	6022      	str	r2, [r4, #0]
 8016ada:	f04f 0900 	mov.w	r9, #0
 8016ade:	9700      	str	r7, [sp, #0]
 8016ae0:	4633      	mov	r3, r6
 8016ae2:	aa0b      	add	r2, sp, #44	; 0x2c
 8016ae4:	4621      	mov	r1, r4
 8016ae6:	4628      	mov	r0, r5
 8016ae8:	f000 f9d8 	bl	8016e9c <_printf_common>
 8016aec:	3001      	adds	r0, #1
 8016aee:	f040 8090 	bne.w	8016c12 <_printf_float+0x1e2>
 8016af2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016af6:	b00d      	add	sp, #52	; 0x34
 8016af8:	ecbd 8b02 	vpop	{d8}
 8016afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b00:	4642      	mov	r2, r8
 8016b02:	464b      	mov	r3, r9
 8016b04:	4640      	mov	r0, r8
 8016b06:	4649      	mov	r1, r9
 8016b08:	f7ea f820 	bl	8000b4c <__aeabi_dcmpun>
 8016b0c:	b140      	cbz	r0, 8016b20 <_printf_float+0xf0>
 8016b0e:	464b      	mov	r3, r9
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	bfbc      	itt	lt
 8016b14:	232d      	movlt	r3, #45	; 0x2d
 8016b16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016b1a:	487f      	ldr	r0, [pc, #508]	; (8016d18 <_printf_float+0x2e8>)
 8016b1c:	4b7f      	ldr	r3, [pc, #508]	; (8016d1c <_printf_float+0x2ec>)
 8016b1e:	e7d1      	b.n	8016ac4 <_printf_float+0x94>
 8016b20:	6863      	ldr	r3, [r4, #4]
 8016b22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016b26:	9206      	str	r2, [sp, #24]
 8016b28:	1c5a      	adds	r2, r3, #1
 8016b2a:	d13f      	bne.n	8016bac <_printf_float+0x17c>
 8016b2c:	2306      	movs	r3, #6
 8016b2e:	6063      	str	r3, [r4, #4]
 8016b30:	9b05      	ldr	r3, [sp, #20]
 8016b32:	6861      	ldr	r1, [r4, #4]
 8016b34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016b38:	2300      	movs	r3, #0
 8016b3a:	9303      	str	r3, [sp, #12]
 8016b3c:	ab0a      	add	r3, sp, #40	; 0x28
 8016b3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016b42:	ab09      	add	r3, sp, #36	; 0x24
 8016b44:	ec49 8b10 	vmov	d0, r8, r9
 8016b48:	9300      	str	r3, [sp, #0]
 8016b4a:	6022      	str	r2, [r4, #0]
 8016b4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016b50:	4628      	mov	r0, r5
 8016b52:	f7ff fecd 	bl	80168f0 <__cvt>
 8016b56:	9b06      	ldr	r3, [sp, #24]
 8016b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016b5a:	2b47      	cmp	r3, #71	; 0x47
 8016b5c:	4680      	mov	r8, r0
 8016b5e:	d108      	bne.n	8016b72 <_printf_float+0x142>
 8016b60:	1cc8      	adds	r0, r1, #3
 8016b62:	db02      	blt.n	8016b6a <_printf_float+0x13a>
 8016b64:	6863      	ldr	r3, [r4, #4]
 8016b66:	4299      	cmp	r1, r3
 8016b68:	dd41      	ble.n	8016bee <_printf_float+0x1be>
 8016b6a:	f1ab 0b02 	sub.w	fp, fp, #2
 8016b6e:	fa5f fb8b 	uxtb.w	fp, fp
 8016b72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016b76:	d820      	bhi.n	8016bba <_printf_float+0x18a>
 8016b78:	3901      	subs	r1, #1
 8016b7a:	465a      	mov	r2, fp
 8016b7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016b80:	9109      	str	r1, [sp, #36]	; 0x24
 8016b82:	f7ff ff17 	bl	80169b4 <__exponent>
 8016b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016b88:	1813      	adds	r3, r2, r0
 8016b8a:	2a01      	cmp	r2, #1
 8016b8c:	4681      	mov	r9, r0
 8016b8e:	6123      	str	r3, [r4, #16]
 8016b90:	dc02      	bgt.n	8016b98 <_printf_float+0x168>
 8016b92:	6822      	ldr	r2, [r4, #0]
 8016b94:	07d2      	lsls	r2, r2, #31
 8016b96:	d501      	bpl.n	8016b9c <_printf_float+0x16c>
 8016b98:	3301      	adds	r3, #1
 8016b9a:	6123      	str	r3, [r4, #16]
 8016b9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d09c      	beq.n	8016ade <_printf_float+0xae>
 8016ba4:	232d      	movs	r3, #45	; 0x2d
 8016ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016baa:	e798      	b.n	8016ade <_printf_float+0xae>
 8016bac:	9a06      	ldr	r2, [sp, #24]
 8016bae:	2a47      	cmp	r2, #71	; 0x47
 8016bb0:	d1be      	bne.n	8016b30 <_printf_float+0x100>
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d1bc      	bne.n	8016b30 <_printf_float+0x100>
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	e7b9      	b.n	8016b2e <_printf_float+0xfe>
 8016bba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016bbe:	d118      	bne.n	8016bf2 <_printf_float+0x1c2>
 8016bc0:	2900      	cmp	r1, #0
 8016bc2:	6863      	ldr	r3, [r4, #4]
 8016bc4:	dd0b      	ble.n	8016bde <_printf_float+0x1ae>
 8016bc6:	6121      	str	r1, [r4, #16]
 8016bc8:	b913      	cbnz	r3, 8016bd0 <_printf_float+0x1a0>
 8016bca:	6822      	ldr	r2, [r4, #0]
 8016bcc:	07d0      	lsls	r0, r2, #31
 8016bce:	d502      	bpl.n	8016bd6 <_printf_float+0x1a6>
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	440b      	add	r3, r1
 8016bd4:	6123      	str	r3, [r4, #16]
 8016bd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8016bd8:	f04f 0900 	mov.w	r9, #0
 8016bdc:	e7de      	b.n	8016b9c <_printf_float+0x16c>
 8016bde:	b913      	cbnz	r3, 8016be6 <_printf_float+0x1b6>
 8016be0:	6822      	ldr	r2, [r4, #0]
 8016be2:	07d2      	lsls	r2, r2, #31
 8016be4:	d501      	bpl.n	8016bea <_printf_float+0x1ba>
 8016be6:	3302      	adds	r3, #2
 8016be8:	e7f4      	b.n	8016bd4 <_printf_float+0x1a4>
 8016bea:	2301      	movs	r3, #1
 8016bec:	e7f2      	b.n	8016bd4 <_printf_float+0x1a4>
 8016bee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bf4:	4299      	cmp	r1, r3
 8016bf6:	db05      	blt.n	8016c04 <_printf_float+0x1d4>
 8016bf8:	6823      	ldr	r3, [r4, #0]
 8016bfa:	6121      	str	r1, [r4, #16]
 8016bfc:	07d8      	lsls	r0, r3, #31
 8016bfe:	d5ea      	bpl.n	8016bd6 <_printf_float+0x1a6>
 8016c00:	1c4b      	adds	r3, r1, #1
 8016c02:	e7e7      	b.n	8016bd4 <_printf_float+0x1a4>
 8016c04:	2900      	cmp	r1, #0
 8016c06:	bfd4      	ite	le
 8016c08:	f1c1 0202 	rsble	r2, r1, #2
 8016c0c:	2201      	movgt	r2, #1
 8016c0e:	4413      	add	r3, r2
 8016c10:	e7e0      	b.n	8016bd4 <_printf_float+0x1a4>
 8016c12:	6823      	ldr	r3, [r4, #0]
 8016c14:	055a      	lsls	r2, r3, #21
 8016c16:	d407      	bmi.n	8016c28 <_printf_float+0x1f8>
 8016c18:	6923      	ldr	r3, [r4, #16]
 8016c1a:	4642      	mov	r2, r8
 8016c1c:	4631      	mov	r1, r6
 8016c1e:	4628      	mov	r0, r5
 8016c20:	47b8      	blx	r7
 8016c22:	3001      	adds	r0, #1
 8016c24:	d12c      	bne.n	8016c80 <_printf_float+0x250>
 8016c26:	e764      	b.n	8016af2 <_printf_float+0xc2>
 8016c28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016c2c:	f240 80e0 	bls.w	8016df0 <_printf_float+0x3c0>
 8016c30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016c34:	2200      	movs	r2, #0
 8016c36:	2300      	movs	r3, #0
 8016c38:	f7e9 ff56 	bl	8000ae8 <__aeabi_dcmpeq>
 8016c3c:	2800      	cmp	r0, #0
 8016c3e:	d034      	beq.n	8016caa <_printf_float+0x27a>
 8016c40:	4a37      	ldr	r2, [pc, #220]	; (8016d20 <_printf_float+0x2f0>)
 8016c42:	2301      	movs	r3, #1
 8016c44:	4631      	mov	r1, r6
 8016c46:	4628      	mov	r0, r5
 8016c48:	47b8      	blx	r7
 8016c4a:	3001      	adds	r0, #1
 8016c4c:	f43f af51 	beq.w	8016af2 <_printf_float+0xc2>
 8016c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016c54:	429a      	cmp	r2, r3
 8016c56:	db02      	blt.n	8016c5e <_printf_float+0x22e>
 8016c58:	6823      	ldr	r3, [r4, #0]
 8016c5a:	07d8      	lsls	r0, r3, #31
 8016c5c:	d510      	bpl.n	8016c80 <_printf_float+0x250>
 8016c5e:	ee18 3a10 	vmov	r3, s16
 8016c62:	4652      	mov	r2, sl
 8016c64:	4631      	mov	r1, r6
 8016c66:	4628      	mov	r0, r5
 8016c68:	47b8      	blx	r7
 8016c6a:	3001      	adds	r0, #1
 8016c6c:	f43f af41 	beq.w	8016af2 <_printf_float+0xc2>
 8016c70:	f04f 0800 	mov.w	r8, #0
 8016c74:	f104 091a 	add.w	r9, r4, #26
 8016c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c7a:	3b01      	subs	r3, #1
 8016c7c:	4543      	cmp	r3, r8
 8016c7e:	dc09      	bgt.n	8016c94 <_printf_float+0x264>
 8016c80:	6823      	ldr	r3, [r4, #0]
 8016c82:	079b      	lsls	r3, r3, #30
 8016c84:	f100 8105 	bmi.w	8016e92 <_printf_float+0x462>
 8016c88:	68e0      	ldr	r0, [r4, #12]
 8016c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c8c:	4298      	cmp	r0, r3
 8016c8e:	bfb8      	it	lt
 8016c90:	4618      	movlt	r0, r3
 8016c92:	e730      	b.n	8016af6 <_printf_float+0xc6>
 8016c94:	2301      	movs	r3, #1
 8016c96:	464a      	mov	r2, r9
 8016c98:	4631      	mov	r1, r6
 8016c9a:	4628      	mov	r0, r5
 8016c9c:	47b8      	blx	r7
 8016c9e:	3001      	adds	r0, #1
 8016ca0:	f43f af27 	beq.w	8016af2 <_printf_float+0xc2>
 8016ca4:	f108 0801 	add.w	r8, r8, #1
 8016ca8:	e7e6      	b.n	8016c78 <_printf_float+0x248>
 8016caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	dc39      	bgt.n	8016d24 <_printf_float+0x2f4>
 8016cb0:	4a1b      	ldr	r2, [pc, #108]	; (8016d20 <_printf_float+0x2f0>)
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	4631      	mov	r1, r6
 8016cb6:	4628      	mov	r0, r5
 8016cb8:	47b8      	blx	r7
 8016cba:	3001      	adds	r0, #1
 8016cbc:	f43f af19 	beq.w	8016af2 <_printf_float+0xc2>
 8016cc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016cc4:	4313      	orrs	r3, r2
 8016cc6:	d102      	bne.n	8016cce <_printf_float+0x29e>
 8016cc8:	6823      	ldr	r3, [r4, #0]
 8016cca:	07d9      	lsls	r1, r3, #31
 8016ccc:	d5d8      	bpl.n	8016c80 <_printf_float+0x250>
 8016cce:	ee18 3a10 	vmov	r3, s16
 8016cd2:	4652      	mov	r2, sl
 8016cd4:	4631      	mov	r1, r6
 8016cd6:	4628      	mov	r0, r5
 8016cd8:	47b8      	blx	r7
 8016cda:	3001      	adds	r0, #1
 8016cdc:	f43f af09 	beq.w	8016af2 <_printf_float+0xc2>
 8016ce0:	f04f 0900 	mov.w	r9, #0
 8016ce4:	f104 0a1a 	add.w	sl, r4, #26
 8016ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cea:	425b      	negs	r3, r3
 8016cec:	454b      	cmp	r3, r9
 8016cee:	dc01      	bgt.n	8016cf4 <_printf_float+0x2c4>
 8016cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cf2:	e792      	b.n	8016c1a <_printf_float+0x1ea>
 8016cf4:	2301      	movs	r3, #1
 8016cf6:	4652      	mov	r2, sl
 8016cf8:	4631      	mov	r1, r6
 8016cfa:	4628      	mov	r0, r5
 8016cfc:	47b8      	blx	r7
 8016cfe:	3001      	adds	r0, #1
 8016d00:	f43f aef7 	beq.w	8016af2 <_printf_float+0xc2>
 8016d04:	f109 0901 	add.w	r9, r9, #1
 8016d08:	e7ee      	b.n	8016ce8 <_printf_float+0x2b8>
 8016d0a:	bf00      	nop
 8016d0c:	7fefffff 	.word	0x7fefffff
 8016d10:	08032458 	.word	0x08032458
 8016d14:	0803245c 	.word	0x0803245c
 8016d18:	08032464 	.word	0x08032464
 8016d1c:	08032460 	.word	0x08032460
 8016d20:	08032468 	.word	0x08032468
 8016d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016d28:	429a      	cmp	r2, r3
 8016d2a:	bfa8      	it	ge
 8016d2c:	461a      	movge	r2, r3
 8016d2e:	2a00      	cmp	r2, #0
 8016d30:	4691      	mov	r9, r2
 8016d32:	dc37      	bgt.n	8016da4 <_printf_float+0x374>
 8016d34:	f04f 0b00 	mov.w	fp, #0
 8016d38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016d3c:	f104 021a 	add.w	r2, r4, #26
 8016d40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016d42:	9305      	str	r3, [sp, #20]
 8016d44:	eba3 0309 	sub.w	r3, r3, r9
 8016d48:	455b      	cmp	r3, fp
 8016d4a:	dc33      	bgt.n	8016db4 <_printf_float+0x384>
 8016d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016d50:	429a      	cmp	r2, r3
 8016d52:	db3b      	blt.n	8016dcc <_printf_float+0x39c>
 8016d54:	6823      	ldr	r3, [r4, #0]
 8016d56:	07da      	lsls	r2, r3, #31
 8016d58:	d438      	bmi.n	8016dcc <_printf_float+0x39c>
 8016d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d5c:	9b05      	ldr	r3, [sp, #20]
 8016d5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016d60:	1ad3      	subs	r3, r2, r3
 8016d62:	eba2 0901 	sub.w	r9, r2, r1
 8016d66:	4599      	cmp	r9, r3
 8016d68:	bfa8      	it	ge
 8016d6a:	4699      	movge	r9, r3
 8016d6c:	f1b9 0f00 	cmp.w	r9, #0
 8016d70:	dc35      	bgt.n	8016dde <_printf_float+0x3ae>
 8016d72:	f04f 0800 	mov.w	r8, #0
 8016d76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016d7a:	f104 0a1a 	add.w	sl, r4, #26
 8016d7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016d82:	1a9b      	subs	r3, r3, r2
 8016d84:	eba3 0309 	sub.w	r3, r3, r9
 8016d88:	4543      	cmp	r3, r8
 8016d8a:	f77f af79 	ble.w	8016c80 <_printf_float+0x250>
 8016d8e:	2301      	movs	r3, #1
 8016d90:	4652      	mov	r2, sl
 8016d92:	4631      	mov	r1, r6
 8016d94:	4628      	mov	r0, r5
 8016d96:	47b8      	blx	r7
 8016d98:	3001      	adds	r0, #1
 8016d9a:	f43f aeaa 	beq.w	8016af2 <_printf_float+0xc2>
 8016d9e:	f108 0801 	add.w	r8, r8, #1
 8016da2:	e7ec      	b.n	8016d7e <_printf_float+0x34e>
 8016da4:	4613      	mov	r3, r2
 8016da6:	4631      	mov	r1, r6
 8016da8:	4642      	mov	r2, r8
 8016daa:	4628      	mov	r0, r5
 8016dac:	47b8      	blx	r7
 8016dae:	3001      	adds	r0, #1
 8016db0:	d1c0      	bne.n	8016d34 <_printf_float+0x304>
 8016db2:	e69e      	b.n	8016af2 <_printf_float+0xc2>
 8016db4:	2301      	movs	r3, #1
 8016db6:	4631      	mov	r1, r6
 8016db8:	4628      	mov	r0, r5
 8016dba:	9205      	str	r2, [sp, #20]
 8016dbc:	47b8      	blx	r7
 8016dbe:	3001      	adds	r0, #1
 8016dc0:	f43f ae97 	beq.w	8016af2 <_printf_float+0xc2>
 8016dc4:	9a05      	ldr	r2, [sp, #20]
 8016dc6:	f10b 0b01 	add.w	fp, fp, #1
 8016dca:	e7b9      	b.n	8016d40 <_printf_float+0x310>
 8016dcc:	ee18 3a10 	vmov	r3, s16
 8016dd0:	4652      	mov	r2, sl
 8016dd2:	4631      	mov	r1, r6
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	47b8      	blx	r7
 8016dd8:	3001      	adds	r0, #1
 8016dda:	d1be      	bne.n	8016d5a <_printf_float+0x32a>
 8016ddc:	e689      	b.n	8016af2 <_printf_float+0xc2>
 8016dde:	9a05      	ldr	r2, [sp, #20]
 8016de0:	464b      	mov	r3, r9
 8016de2:	4442      	add	r2, r8
 8016de4:	4631      	mov	r1, r6
 8016de6:	4628      	mov	r0, r5
 8016de8:	47b8      	blx	r7
 8016dea:	3001      	adds	r0, #1
 8016dec:	d1c1      	bne.n	8016d72 <_printf_float+0x342>
 8016dee:	e680      	b.n	8016af2 <_printf_float+0xc2>
 8016df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016df2:	2a01      	cmp	r2, #1
 8016df4:	dc01      	bgt.n	8016dfa <_printf_float+0x3ca>
 8016df6:	07db      	lsls	r3, r3, #31
 8016df8:	d538      	bpl.n	8016e6c <_printf_float+0x43c>
 8016dfa:	2301      	movs	r3, #1
 8016dfc:	4642      	mov	r2, r8
 8016dfe:	4631      	mov	r1, r6
 8016e00:	4628      	mov	r0, r5
 8016e02:	47b8      	blx	r7
 8016e04:	3001      	adds	r0, #1
 8016e06:	f43f ae74 	beq.w	8016af2 <_printf_float+0xc2>
 8016e0a:	ee18 3a10 	vmov	r3, s16
 8016e0e:	4652      	mov	r2, sl
 8016e10:	4631      	mov	r1, r6
 8016e12:	4628      	mov	r0, r5
 8016e14:	47b8      	blx	r7
 8016e16:	3001      	adds	r0, #1
 8016e18:	f43f ae6b 	beq.w	8016af2 <_printf_float+0xc2>
 8016e1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016e20:	2200      	movs	r2, #0
 8016e22:	2300      	movs	r3, #0
 8016e24:	f7e9 fe60 	bl	8000ae8 <__aeabi_dcmpeq>
 8016e28:	b9d8      	cbnz	r0, 8016e62 <_printf_float+0x432>
 8016e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e2c:	f108 0201 	add.w	r2, r8, #1
 8016e30:	3b01      	subs	r3, #1
 8016e32:	4631      	mov	r1, r6
 8016e34:	4628      	mov	r0, r5
 8016e36:	47b8      	blx	r7
 8016e38:	3001      	adds	r0, #1
 8016e3a:	d10e      	bne.n	8016e5a <_printf_float+0x42a>
 8016e3c:	e659      	b.n	8016af2 <_printf_float+0xc2>
 8016e3e:	2301      	movs	r3, #1
 8016e40:	4652      	mov	r2, sl
 8016e42:	4631      	mov	r1, r6
 8016e44:	4628      	mov	r0, r5
 8016e46:	47b8      	blx	r7
 8016e48:	3001      	adds	r0, #1
 8016e4a:	f43f ae52 	beq.w	8016af2 <_printf_float+0xc2>
 8016e4e:	f108 0801 	add.w	r8, r8, #1
 8016e52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e54:	3b01      	subs	r3, #1
 8016e56:	4543      	cmp	r3, r8
 8016e58:	dcf1      	bgt.n	8016e3e <_printf_float+0x40e>
 8016e5a:	464b      	mov	r3, r9
 8016e5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016e60:	e6dc      	b.n	8016c1c <_printf_float+0x1ec>
 8016e62:	f04f 0800 	mov.w	r8, #0
 8016e66:	f104 0a1a 	add.w	sl, r4, #26
 8016e6a:	e7f2      	b.n	8016e52 <_printf_float+0x422>
 8016e6c:	2301      	movs	r3, #1
 8016e6e:	4642      	mov	r2, r8
 8016e70:	e7df      	b.n	8016e32 <_printf_float+0x402>
 8016e72:	2301      	movs	r3, #1
 8016e74:	464a      	mov	r2, r9
 8016e76:	4631      	mov	r1, r6
 8016e78:	4628      	mov	r0, r5
 8016e7a:	47b8      	blx	r7
 8016e7c:	3001      	adds	r0, #1
 8016e7e:	f43f ae38 	beq.w	8016af2 <_printf_float+0xc2>
 8016e82:	f108 0801 	add.w	r8, r8, #1
 8016e86:	68e3      	ldr	r3, [r4, #12]
 8016e88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e8a:	1a5b      	subs	r3, r3, r1
 8016e8c:	4543      	cmp	r3, r8
 8016e8e:	dcf0      	bgt.n	8016e72 <_printf_float+0x442>
 8016e90:	e6fa      	b.n	8016c88 <_printf_float+0x258>
 8016e92:	f04f 0800 	mov.w	r8, #0
 8016e96:	f104 0919 	add.w	r9, r4, #25
 8016e9a:	e7f4      	b.n	8016e86 <_printf_float+0x456>

08016e9c <_printf_common>:
 8016e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ea0:	4616      	mov	r6, r2
 8016ea2:	4699      	mov	r9, r3
 8016ea4:	688a      	ldr	r2, [r1, #8]
 8016ea6:	690b      	ldr	r3, [r1, #16]
 8016ea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016eac:	4293      	cmp	r3, r2
 8016eae:	bfb8      	it	lt
 8016eb0:	4613      	movlt	r3, r2
 8016eb2:	6033      	str	r3, [r6, #0]
 8016eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016eb8:	4607      	mov	r7, r0
 8016eba:	460c      	mov	r4, r1
 8016ebc:	b10a      	cbz	r2, 8016ec2 <_printf_common+0x26>
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	6033      	str	r3, [r6, #0]
 8016ec2:	6823      	ldr	r3, [r4, #0]
 8016ec4:	0699      	lsls	r1, r3, #26
 8016ec6:	bf42      	ittt	mi
 8016ec8:	6833      	ldrmi	r3, [r6, #0]
 8016eca:	3302      	addmi	r3, #2
 8016ecc:	6033      	strmi	r3, [r6, #0]
 8016ece:	6825      	ldr	r5, [r4, #0]
 8016ed0:	f015 0506 	ands.w	r5, r5, #6
 8016ed4:	d106      	bne.n	8016ee4 <_printf_common+0x48>
 8016ed6:	f104 0a19 	add.w	sl, r4, #25
 8016eda:	68e3      	ldr	r3, [r4, #12]
 8016edc:	6832      	ldr	r2, [r6, #0]
 8016ede:	1a9b      	subs	r3, r3, r2
 8016ee0:	42ab      	cmp	r3, r5
 8016ee2:	dc26      	bgt.n	8016f32 <_printf_common+0x96>
 8016ee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016ee8:	1e13      	subs	r3, r2, #0
 8016eea:	6822      	ldr	r2, [r4, #0]
 8016eec:	bf18      	it	ne
 8016eee:	2301      	movne	r3, #1
 8016ef0:	0692      	lsls	r2, r2, #26
 8016ef2:	d42b      	bmi.n	8016f4c <_printf_common+0xb0>
 8016ef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016ef8:	4649      	mov	r1, r9
 8016efa:	4638      	mov	r0, r7
 8016efc:	47c0      	blx	r8
 8016efe:	3001      	adds	r0, #1
 8016f00:	d01e      	beq.n	8016f40 <_printf_common+0xa4>
 8016f02:	6823      	ldr	r3, [r4, #0]
 8016f04:	68e5      	ldr	r5, [r4, #12]
 8016f06:	6832      	ldr	r2, [r6, #0]
 8016f08:	f003 0306 	and.w	r3, r3, #6
 8016f0c:	2b04      	cmp	r3, #4
 8016f0e:	bf08      	it	eq
 8016f10:	1aad      	subeq	r5, r5, r2
 8016f12:	68a3      	ldr	r3, [r4, #8]
 8016f14:	6922      	ldr	r2, [r4, #16]
 8016f16:	bf0c      	ite	eq
 8016f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016f1c:	2500      	movne	r5, #0
 8016f1e:	4293      	cmp	r3, r2
 8016f20:	bfc4      	itt	gt
 8016f22:	1a9b      	subgt	r3, r3, r2
 8016f24:	18ed      	addgt	r5, r5, r3
 8016f26:	2600      	movs	r6, #0
 8016f28:	341a      	adds	r4, #26
 8016f2a:	42b5      	cmp	r5, r6
 8016f2c:	d11a      	bne.n	8016f64 <_printf_common+0xc8>
 8016f2e:	2000      	movs	r0, #0
 8016f30:	e008      	b.n	8016f44 <_printf_common+0xa8>
 8016f32:	2301      	movs	r3, #1
 8016f34:	4652      	mov	r2, sl
 8016f36:	4649      	mov	r1, r9
 8016f38:	4638      	mov	r0, r7
 8016f3a:	47c0      	blx	r8
 8016f3c:	3001      	adds	r0, #1
 8016f3e:	d103      	bne.n	8016f48 <_printf_common+0xac>
 8016f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f48:	3501      	adds	r5, #1
 8016f4a:	e7c6      	b.n	8016eda <_printf_common+0x3e>
 8016f4c:	18e1      	adds	r1, r4, r3
 8016f4e:	1c5a      	adds	r2, r3, #1
 8016f50:	2030      	movs	r0, #48	; 0x30
 8016f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016f56:	4422      	add	r2, r4
 8016f58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016f5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016f60:	3302      	adds	r3, #2
 8016f62:	e7c7      	b.n	8016ef4 <_printf_common+0x58>
 8016f64:	2301      	movs	r3, #1
 8016f66:	4622      	mov	r2, r4
 8016f68:	4649      	mov	r1, r9
 8016f6a:	4638      	mov	r0, r7
 8016f6c:	47c0      	blx	r8
 8016f6e:	3001      	adds	r0, #1
 8016f70:	d0e6      	beq.n	8016f40 <_printf_common+0xa4>
 8016f72:	3601      	adds	r6, #1
 8016f74:	e7d9      	b.n	8016f2a <_printf_common+0x8e>
	...

08016f78 <_printf_i>:
 8016f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016f7c:	460c      	mov	r4, r1
 8016f7e:	4691      	mov	r9, r2
 8016f80:	7e27      	ldrb	r7, [r4, #24]
 8016f82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016f84:	2f78      	cmp	r7, #120	; 0x78
 8016f86:	4680      	mov	r8, r0
 8016f88:	469a      	mov	sl, r3
 8016f8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016f8e:	d807      	bhi.n	8016fa0 <_printf_i+0x28>
 8016f90:	2f62      	cmp	r7, #98	; 0x62
 8016f92:	d80a      	bhi.n	8016faa <_printf_i+0x32>
 8016f94:	2f00      	cmp	r7, #0
 8016f96:	f000 80d8 	beq.w	801714a <_printf_i+0x1d2>
 8016f9a:	2f58      	cmp	r7, #88	; 0x58
 8016f9c:	f000 80a3 	beq.w	80170e6 <_printf_i+0x16e>
 8016fa0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016fa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016fa8:	e03a      	b.n	8017020 <_printf_i+0xa8>
 8016faa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016fae:	2b15      	cmp	r3, #21
 8016fb0:	d8f6      	bhi.n	8016fa0 <_printf_i+0x28>
 8016fb2:	a001      	add	r0, pc, #4	; (adr r0, 8016fb8 <_printf_i+0x40>)
 8016fb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016fb8:	08017011 	.word	0x08017011
 8016fbc:	08017025 	.word	0x08017025
 8016fc0:	08016fa1 	.word	0x08016fa1
 8016fc4:	08016fa1 	.word	0x08016fa1
 8016fc8:	08016fa1 	.word	0x08016fa1
 8016fcc:	08016fa1 	.word	0x08016fa1
 8016fd0:	08017025 	.word	0x08017025
 8016fd4:	08016fa1 	.word	0x08016fa1
 8016fd8:	08016fa1 	.word	0x08016fa1
 8016fdc:	08016fa1 	.word	0x08016fa1
 8016fe0:	08016fa1 	.word	0x08016fa1
 8016fe4:	08017131 	.word	0x08017131
 8016fe8:	08017055 	.word	0x08017055
 8016fec:	08017113 	.word	0x08017113
 8016ff0:	08016fa1 	.word	0x08016fa1
 8016ff4:	08016fa1 	.word	0x08016fa1
 8016ff8:	08017153 	.word	0x08017153
 8016ffc:	08016fa1 	.word	0x08016fa1
 8017000:	08017055 	.word	0x08017055
 8017004:	08016fa1 	.word	0x08016fa1
 8017008:	08016fa1 	.word	0x08016fa1
 801700c:	0801711b 	.word	0x0801711b
 8017010:	680b      	ldr	r3, [r1, #0]
 8017012:	1d1a      	adds	r2, r3, #4
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	600a      	str	r2, [r1, #0]
 8017018:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801701c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017020:	2301      	movs	r3, #1
 8017022:	e0a3      	b.n	801716c <_printf_i+0x1f4>
 8017024:	6825      	ldr	r5, [r4, #0]
 8017026:	6808      	ldr	r0, [r1, #0]
 8017028:	062e      	lsls	r6, r5, #24
 801702a:	f100 0304 	add.w	r3, r0, #4
 801702e:	d50a      	bpl.n	8017046 <_printf_i+0xce>
 8017030:	6805      	ldr	r5, [r0, #0]
 8017032:	600b      	str	r3, [r1, #0]
 8017034:	2d00      	cmp	r5, #0
 8017036:	da03      	bge.n	8017040 <_printf_i+0xc8>
 8017038:	232d      	movs	r3, #45	; 0x2d
 801703a:	426d      	negs	r5, r5
 801703c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017040:	485e      	ldr	r0, [pc, #376]	; (80171bc <_printf_i+0x244>)
 8017042:	230a      	movs	r3, #10
 8017044:	e019      	b.n	801707a <_printf_i+0x102>
 8017046:	f015 0f40 	tst.w	r5, #64	; 0x40
 801704a:	6805      	ldr	r5, [r0, #0]
 801704c:	600b      	str	r3, [r1, #0]
 801704e:	bf18      	it	ne
 8017050:	b22d      	sxthne	r5, r5
 8017052:	e7ef      	b.n	8017034 <_printf_i+0xbc>
 8017054:	680b      	ldr	r3, [r1, #0]
 8017056:	6825      	ldr	r5, [r4, #0]
 8017058:	1d18      	adds	r0, r3, #4
 801705a:	6008      	str	r0, [r1, #0]
 801705c:	0628      	lsls	r0, r5, #24
 801705e:	d501      	bpl.n	8017064 <_printf_i+0xec>
 8017060:	681d      	ldr	r5, [r3, #0]
 8017062:	e002      	b.n	801706a <_printf_i+0xf2>
 8017064:	0669      	lsls	r1, r5, #25
 8017066:	d5fb      	bpl.n	8017060 <_printf_i+0xe8>
 8017068:	881d      	ldrh	r5, [r3, #0]
 801706a:	4854      	ldr	r0, [pc, #336]	; (80171bc <_printf_i+0x244>)
 801706c:	2f6f      	cmp	r7, #111	; 0x6f
 801706e:	bf0c      	ite	eq
 8017070:	2308      	moveq	r3, #8
 8017072:	230a      	movne	r3, #10
 8017074:	2100      	movs	r1, #0
 8017076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801707a:	6866      	ldr	r6, [r4, #4]
 801707c:	60a6      	str	r6, [r4, #8]
 801707e:	2e00      	cmp	r6, #0
 8017080:	bfa2      	ittt	ge
 8017082:	6821      	ldrge	r1, [r4, #0]
 8017084:	f021 0104 	bicge.w	r1, r1, #4
 8017088:	6021      	strge	r1, [r4, #0]
 801708a:	b90d      	cbnz	r5, 8017090 <_printf_i+0x118>
 801708c:	2e00      	cmp	r6, #0
 801708e:	d04d      	beq.n	801712c <_printf_i+0x1b4>
 8017090:	4616      	mov	r6, r2
 8017092:	fbb5 f1f3 	udiv	r1, r5, r3
 8017096:	fb03 5711 	mls	r7, r3, r1, r5
 801709a:	5dc7      	ldrb	r7, [r0, r7]
 801709c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80170a0:	462f      	mov	r7, r5
 80170a2:	42bb      	cmp	r3, r7
 80170a4:	460d      	mov	r5, r1
 80170a6:	d9f4      	bls.n	8017092 <_printf_i+0x11a>
 80170a8:	2b08      	cmp	r3, #8
 80170aa:	d10b      	bne.n	80170c4 <_printf_i+0x14c>
 80170ac:	6823      	ldr	r3, [r4, #0]
 80170ae:	07df      	lsls	r7, r3, #31
 80170b0:	d508      	bpl.n	80170c4 <_printf_i+0x14c>
 80170b2:	6923      	ldr	r3, [r4, #16]
 80170b4:	6861      	ldr	r1, [r4, #4]
 80170b6:	4299      	cmp	r1, r3
 80170b8:	bfde      	ittt	le
 80170ba:	2330      	movle	r3, #48	; 0x30
 80170bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80170c0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80170c4:	1b92      	subs	r2, r2, r6
 80170c6:	6122      	str	r2, [r4, #16]
 80170c8:	f8cd a000 	str.w	sl, [sp]
 80170cc:	464b      	mov	r3, r9
 80170ce:	aa03      	add	r2, sp, #12
 80170d0:	4621      	mov	r1, r4
 80170d2:	4640      	mov	r0, r8
 80170d4:	f7ff fee2 	bl	8016e9c <_printf_common>
 80170d8:	3001      	adds	r0, #1
 80170da:	d14c      	bne.n	8017176 <_printf_i+0x1fe>
 80170dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80170e0:	b004      	add	sp, #16
 80170e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170e6:	4835      	ldr	r0, [pc, #212]	; (80171bc <_printf_i+0x244>)
 80170e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80170ec:	6823      	ldr	r3, [r4, #0]
 80170ee:	680e      	ldr	r6, [r1, #0]
 80170f0:	061f      	lsls	r7, r3, #24
 80170f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80170f6:	600e      	str	r6, [r1, #0]
 80170f8:	d514      	bpl.n	8017124 <_printf_i+0x1ac>
 80170fa:	07d9      	lsls	r1, r3, #31
 80170fc:	bf44      	itt	mi
 80170fe:	f043 0320 	orrmi.w	r3, r3, #32
 8017102:	6023      	strmi	r3, [r4, #0]
 8017104:	b91d      	cbnz	r5, 801710e <_printf_i+0x196>
 8017106:	6823      	ldr	r3, [r4, #0]
 8017108:	f023 0320 	bic.w	r3, r3, #32
 801710c:	6023      	str	r3, [r4, #0]
 801710e:	2310      	movs	r3, #16
 8017110:	e7b0      	b.n	8017074 <_printf_i+0xfc>
 8017112:	6823      	ldr	r3, [r4, #0]
 8017114:	f043 0320 	orr.w	r3, r3, #32
 8017118:	6023      	str	r3, [r4, #0]
 801711a:	2378      	movs	r3, #120	; 0x78
 801711c:	4828      	ldr	r0, [pc, #160]	; (80171c0 <_printf_i+0x248>)
 801711e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017122:	e7e3      	b.n	80170ec <_printf_i+0x174>
 8017124:	065e      	lsls	r6, r3, #25
 8017126:	bf48      	it	mi
 8017128:	b2ad      	uxthmi	r5, r5
 801712a:	e7e6      	b.n	80170fa <_printf_i+0x182>
 801712c:	4616      	mov	r6, r2
 801712e:	e7bb      	b.n	80170a8 <_printf_i+0x130>
 8017130:	680b      	ldr	r3, [r1, #0]
 8017132:	6826      	ldr	r6, [r4, #0]
 8017134:	6960      	ldr	r0, [r4, #20]
 8017136:	1d1d      	adds	r5, r3, #4
 8017138:	600d      	str	r5, [r1, #0]
 801713a:	0635      	lsls	r5, r6, #24
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	d501      	bpl.n	8017144 <_printf_i+0x1cc>
 8017140:	6018      	str	r0, [r3, #0]
 8017142:	e002      	b.n	801714a <_printf_i+0x1d2>
 8017144:	0671      	lsls	r1, r6, #25
 8017146:	d5fb      	bpl.n	8017140 <_printf_i+0x1c8>
 8017148:	8018      	strh	r0, [r3, #0]
 801714a:	2300      	movs	r3, #0
 801714c:	6123      	str	r3, [r4, #16]
 801714e:	4616      	mov	r6, r2
 8017150:	e7ba      	b.n	80170c8 <_printf_i+0x150>
 8017152:	680b      	ldr	r3, [r1, #0]
 8017154:	1d1a      	adds	r2, r3, #4
 8017156:	600a      	str	r2, [r1, #0]
 8017158:	681e      	ldr	r6, [r3, #0]
 801715a:	6862      	ldr	r2, [r4, #4]
 801715c:	2100      	movs	r1, #0
 801715e:	4630      	mov	r0, r6
 8017160:	f7e9 f84e 	bl	8000200 <memchr>
 8017164:	b108      	cbz	r0, 801716a <_printf_i+0x1f2>
 8017166:	1b80      	subs	r0, r0, r6
 8017168:	6060      	str	r0, [r4, #4]
 801716a:	6863      	ldr	r3, [r4, #4]
 801716c:	6123      	str	r3, [r4, #16]
 801716e:	2300      	movs	r3, #0
 8017170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017174:	e7a8      	b.n	80170c8 <_printf_i+0x150>
 8017176:	6923      	ldr	r3, [r4, #16]
 8017178:	4632      	mov	r2, r6
 801717a:	4649      	mov	r1, r9
 801717c:	4640      	mov	r0, r8
 801717e:	47d0      	blx	sl
 8017180:	3001      	adds	r0, #1
 8017182:	d0ab      	beq.n	80170dc <_printf_i+0x164>
 8017184:	6823      	ldr	r3, [r4, #0]
 8017186:	079b      	lsls	r3, r3, #30
 8017188:	d413      	bmi.n	80171b2 <_printf_i+0x23a>
 801718a:	68e0      	ldr	r0, [r4, #12]
 801718c:	9b03      	ldr	r3, [sp, #12]
 801718e:	4298      	cmp	r0, r3
 8017190:	bfb8      	it	lt
 8017192:	4618      	movlt	r0, r3
 8017194:	e7a4      	b.n	80170e0 <_printf_i+0x168>
 8017196:	2301      	movs	r3, #1
 8017198:	4632      	mov	r2, r6
 801719a:	4649      	mov	r1, r9
 801719c:	4640      	mov	r0, r8
 801719e:	47d0      	blx	sl
 80171a0:	3001      	adds	r0, #1
 80171a2:	d09b      	beq.n	80170dc <_printf_i+0x164>
 80171a4:	3501      	adds	r5, #1
 80171a6:	68e3      	ldr	r3, [r4, #12]
 80171a8:	9903      	ldr	r1, [sp, #12]
 80171aa:	1a5b      	subs	r3, r3, r1
 80171ac:	42ab      	cmp	r3, r5
 80171ae:	dcf2      	bgt.n	8017196 <_printf_i+0x21e>
 80171b0:	e7eb      	b.n	801718a <_printf_i+0x212>
 80171b2:	2500      	movs	r5, #0
 80171b4:	f104 0619 	add.w	r6, r4, #25
 80171b8:	e7f5      	b.n	80171a6 <_printf_i+0x22e>
 80171ba:	bf00      	nop
 80171bc:	0803246a 	.word	0x0803246a
 80171c0:	0803247b 	.word	0x0803247b

080171c4 <iprintf>:
 80171c4:	b40f      	push	{r0, r1, r2, r3}
 80171c6:	4b0a      	ldr	r3, [pc, #40]	; (80171f0 <iprintf+0x2c>)
 80171c8:	b513      	push	{r0, r1, r4, lr}
 80171ca:	681c      	ldr	r4, [r3, #0]
 80171cc:	b124      	cbz	r4, 80171d8 <iprintf+0x14>
 80171ce:	69a3      	ldr	r3, [r4, #24]
 80171d0:	b913      	cbnz	r3, 80171d8 <iprintf+0x14>
 80171d2:	4620      	mov	r0, r4
 80171d4:	f002 f910 	bl	80193f8 <__sinit>
 80171d8:	ab05      	add	r3, sp, #20
 80171da:	9a04      	ldr	r2, [sp, #16]
 80171dc:	68a1      	ldr	r1, [r4, #8]
 80171de:	9301      	str	r3, [sp, #4]
 80171e0:	4620      	mov	r0, r4
 80171e2:	f003 fca7 	bl	801ab34 <_vfiprintf_r>
 80171e6:	b002      	add	sp, #8
 80171e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171ec:	b004      	add	sp, #16
 80171ee:	4770      	bx	lr
 80171f0:	200005c8 	.word	0x200005c8

080171f4 <_puts_r>:
 80171f4:	b570      	push	{r4, r5, r6, lr}
 80171f6:	460e      	mov	r6, r1
 80171f8:	4605      	mov	r5, r0
 80171fa:	b118      	cbz	r0, 8017204 <_puts_r+0x10>
 80171fc:	6983      	ldr	r3, [r0, #24]
 80171fe:	b90b      	cbnz	r3, 8017204 <_puts_r+0x10>
 8017200:	f002 f8fa 	bl	80193f8 <__sinit>
 8017204:	69ab      	ldr	r3, [r5, #24]
 8017206:	68ac      	ldr	r4, [r5, #8]
 8017208:	b913      	cbnz	r3, 8017210 <_puts_r+0x1c>
 801720a:	4628      	mov	r0, r5
 801720c:	f002 f8f4 	bl	80193f8 <__sinit>
 8017210:	4b2c      	ldr	r3, [pc, #176]	; (80172c4 <_puts_r+0xd0>)
 8017212:	429c      	cmp	r4, r3
 8017214:	d120      	bne.n	8017258 <_puts_r+0x64>
 8017216:	686c      	ldr	r4, [r5, #4]
 8017218:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801721a:	07db      	lsls	r3, r3, #31
 801721c:	d405      	bmi.n	801722a <_puts_r+0x36>
 801721e:	89a3      	ldrh	r3, [r4, #12]
 8017220:	0598      	lsls	r0, r3, #22
 8017222:	d402      	bmi.n	801722a <_puts_r+0x36>
 8017224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017226:	f002 fd0a 	bl	8019c3e <__retarget_lock_acquire_recursive>
 801722a:	89a3      	ldrh	r3, [r4, #12]
 801722c:	0719      	lsls	r1, r3, #28
 801722e:	d51d      	bpl.n	801726c <_puts_r+0x78>
 8017230:	6923      	ldr	r3, [r4, #16]
 8017232:	b1db      	cbz	r3, 801726c <_puts_r+0x78>
 8017234:	3e01      	subs	r6, #1
 8017236:	68a3      	ldr	r3, [r4, #8]
 8017238:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801723c:	3b01      	subs	r3, #1
 801723e:	60a3      	str	r3, [r4, #8]
 8017240:	bb39      	cbnz	r1, 8017292 <_puts_r+0x9e>
 8017242:	2b00      	cmp	r3, #0
 8017244:	da38      	bge.n	80172b8 <_puts_r+0xc4>
 8017246:	4622      	mov	r2, r4
 8017248:	210a      	movs	r1, #10
 801724a:	4628      	mov	r0, r5
 801724c:	f001 f85c 	bl	8018308 <__swbuf_r>
 8017250:	3001      	adds	r0, #1
 8017252:	d011      	beq.n	8017278 <_puts_r+0x84>
 8017254:	250a      	movs	r5, #10
 8017256:	e011      	b.n	801727c <_puts_r+0x88>
 8017258:	4b1b      	ldr	r3, [pc, #108]	; (80172c8 <_puts_r+0xd4>)
 801725a:	429c      	cmp	r4, r3
 801725c:	d101      	bne.n	8017262 <_puts_r+0x6e>
 801725e:	68ac      	ldr	r4, [r5, #8]
 8017260:	e7da      	b.n	8017218 <_puts_r+0x24>
 8017262:	4b1a      	ldr	r3, [pc, #104]	; (80172cc <_puts_r+0xd8>)
 8017264:	429c      	cmp	r4, r3
 8017266:	bf08      	it	eq
 8017268:	68ec      	ldreq	r4, [r5, #12]
 801726a:	e7d5      	b.n	8017218 <_puts_r+0x24>
 801726c:	4621      	mov	r1, r4
 801726e:	4628      	mov	r0, r5
 8017270:	f001 f89c 	bl	80183ac <__swsetup_r>
 8017274:	2800      	cmp	r0, #0
 8017276:	d0dd      	beq.n	8017234 <_puts_r+0x40>
 8017278:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801727c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801727e:	07da      	lsls	r2, r3, #31
 8017280:	d405      	bmi.n	801728e <_puts_r+0x9a>
 8017282:	89a3      	ldrh	r3, [r4, #12]
 8017284:	059b      	lsls	r3, r3, #22
 8017286:	d402      	bmi.n	801728e <_puts_r+0x9a>
 8017288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801728a:	f002 fcd9 	bl	8019c40 <__retarget_lock_release_recursive>
 801728e:	4628      	mov	r0, r5
 8017290:	bd70      	pop	{r4, r5, r6, pc}
 8017292:	2b00      	cmp	r3, #0
 8017294:	da04      	bge.n	80172a0 <_puts_r+0xac>
 8017296:	69a2      	ldr	r2, [r4, #24]
 8017298:	429a      	cmp	r2, r3
 801729a:	dc06      	bgt.n	80172aa <_puts_r+0xb6>
 801729c:	290a      	cmp	r1, #10
 801729e:	d004      	beq.n	80172aa <_puts_r+0xb6>
 80172a0:	6823      	ldr	r3, [r4, #0]
 80172a2:	1c5a      	adds	r2, r3, #1
 80172a4:	6022      	str	r2, [r4, #0]
 80172a6:	7019      	strb	r1, [r3, #0]
 80172a8:	e7c5      	b.n	8017236 <_puts_r+0x42>
 80172aa:	4622      	mov	r2, r4
 80172ac:	4628      	mov	r0, r5
 80172ae:	f001 f82b 	bl	8018308 <__swbuf_r>
 80172b2:	3001      	adds	r0, #1
 80172b4:	d1bf      	bne.n	8017236 <_puts_r+0x42>
 80172b6:	e7df      	b.n	8017278 <_puts_r+0x84>
 80172b8:	6823      	ldr	r3, [r4, #0]
 80172ba:	250a      	movs	r5, #10
 80172bc:	1c5a      	adds	r2, r3, #1
 80172be:	6022      	str	r2, [r4, #0]
 80172c0:	701d      	strb	r5, [r3, #0]
 80172c2:	e7db      	b.n	801727c <_puts_r+0x88>
 80172c4:	08032694 	.word	0x08032694
 80172c8:	080326b4 	.word	0x080326b4
 80172cc:	08032674 	.word	0x08032674

080172d0 <puts>:
 80172d0:	4b02      	ldr	r3, [pc, #8]	; (80172dc <puts+0xc>)
 80172d2:	4601      	mov	r1, r0
 80172d4:	6818      	ldr	r0, [r3, #0]
 80172d6:	f7ff bf8d 	b.w	80171f4 <_puts_r>
 80172da:	bf00      	nop
 80172dc:	200005c8 	.word	0x200005c8

080172e0 <rand>:
 80172e0:	4b17      	ldr	r3, [pc, #92]	; (8017340 <rand+0x60>)
 80172e2:	b510      	push	{r4, lr}
 80172e4:	681c      	ldr	r4, [r3, #0]
 80172e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80172e8:	b9b3      	cbnz	r3, 8017318 <rand+0x38>
 80172ea:	2018      	movs	r0, #24
 80172ec:	f002 fd0e 	bl	8019d0c <malloc>
 80172f0:	63a0      	str	r0, [r4, #56]	; 0x38
 80172f2:	b928      	cbnz	r0, 8017300 <rand+0x20>
 80172f4:	4602      	mov	r2, r0
 80172f6:	4b13      	ldr	r3, [pc, #76]	; (8017344 <rand+0x64>)
 80172f8:	4813      	ldr	r0, [pc, #76]	; (8017348 <rand+0x68>)
 80172fa:	214e      	movs	r1, #78	; 0x4e
 80172fc:	f001 f8c4 	bl	8018488 <__assert_func>
 8017300:	4a12      	ldr	r2, [pc, #72]	; (801734c <rand+0x6c>)
 8017302:	4b13      	ldr	r3, [pc, #76]	; (8017350 <rand+0x70>)
 8017304:	e9c0 2300 	strd	r2, r3, [r0]
 8017308:	4b12      	ldr	r3, [pc, #72]	; (8017354 <rand+0x74>)
 801730a:	6083      	str	r3, [r0, #8]
 801730c:	230b      	movs	r3, #11
 801730e:	8183      	strh	r3, [r0, #12]
 8017310:	2201      	movs	r2, #1
 8017312:	2300      	movs	r3, #0
 8017314:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017318:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801731a:	480f      	ldr	r0, [pc, #60]	; (8017358 <rand+0x78>)
 801731c:	690a      	ldr	r2, [r1, #16]
 801731e:	694b      	ldr	r3, [r1, #20]
 8017320:	4c0e      	ldr	r4, [pc, #56]	; (801735c <rand+0x7c>)
 8017322:	4350      	muls	r0, r2
 8017324:	fb04 0003 	mla	r0, r4, r3, r0
 8017328:	fba2 3404 	umull	r3, r4, r2, r4
 801732c:	1c5a      	adds	r2, r3, #1
 801732e:	4404      	add	r4, r0
 8017330:	f144 0000 	adc.w	r0, r4, #0
 8017334:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017338:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801733c:	bd10      	pop	{r4, pc}
 801733e:	bf00      	nop
 8017340:	200005c8 	.word	0x200005c8
 8017344:	0803248c 	.word	0x0803248c
 8017348:	080324a3 	.word	0x080324a3
 801734c:	abcd330e 	.word	0xabcd330e
 8017350:	e66d1234 	.word	0xe66d1234
 8017354:	0005deec 	.word	0x0005deec
 8017358:	5851f42d 	.word	0x5851f42d
 801735c:	4c957f2d 	.word	0x4c957f2d

08017360 <sniprintf>:
 8017360:	b40c      	push	{r2, r3}
 8017362:	b530      	push	{r4, r5, lr}
 8017364:	4b17      	ldr	r3, [pc, #92]	; (80173c4 <sniprintf+0x64>)
 8017366:	1e0c      	subs	r4, r1, #0
 8017368:	681d      	ldr	r5, [r3, #0]
 801736a:	b09d      	sub	sp, #116	; 0x74
 801736c:	da08      	bge.n	8017380 <sniprintf+0x20>
 801736e:	238b      	movs	r3, #139	; 0x8b
 8017370:	602b      	str	r3, [r5, #0]
 8017372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017376:	b01d      	add	sp, #116	; 0x74
 8017378:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801737c:	b002      	add	sp, #8
 801737e:	4770      	bx	lr
 8017380:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017384:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017388:	bf14      	ite	ne
 801738a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801738e:	4623      	moveq	r3, r4
 8017390:	9304      	str	r3, [sp, #16]
 8017392:	9307      	str	r3, [sp, #28]
 8017394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017398:	9002      	str	r0, [sp, #8]
 801739a:	9006      	str	r0, [sp, #24]
 801739c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80173a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80173a2:	ab21      	add	r3, sp, #132	; 0x84
 80173a4:	a902      	add	r1, sp, #8
 80173a6:	4628      	mov	r0, r5
 80173a8:	9301      	str	r3, [sp, #4]
 80173aa:	f003 fa99 	bl	801a8e0 <_svfiprintf_r>
 80173ae:	1c43      	adds	r3, r0, #1
 80173b0:	bfbc      	itt	lt
 80173b2:	238b      	movlt	r3, #139	; 0x8b
 80173b4:	602b      	strlt	r3, [r5, #0]
 80173b6:	2c00      	cmp	r4, #0
 80173b8:	d0dd      	beq.n	8017376 <sniprintf+0x16>
 80173ba:	9b02      	ldr	r3, [sp, #8]
 80173bc:	2200      	movs	r2, #0
 80173be:	701a      	strb	r2, [r3, #0]
 80173c0:	e7d9      	b.n	8017376 <sniprintf+0x16>
 80173c2:	bf00      	nop
 80173c4:	200005c8 	.word	0x200005c8

080173c8 <siprintf>:
 80173c8:	b40e      	push	{r1, r2, r3}
 80173ca:	b500      	push	{lr}
 80173cc:	b09c      	sub	sp, #112	; 0x70
 80173ce:	ab1d      	add	r3, sp, #116	; 0x74
 80173d0:	9002      	str	r0, [sp, #8]
 80173d2:	9006      	str	r0, [sp, #24]
 80173d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80173d8:	4809      	ldr	r0, [pc, #36]	; (8017400 <siprintf+0x38>)
 80173da:	9107      	str	r1, [sp, #28]
 80173dc:	9104      	str	r1, [sp, #16]
 80173de:	4909      	ldr	r1, [pc, #36]	; (8017404 <siprintf+0x3c>)
 80173e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80173e4:	9105      	str	r1, [sp, #20]
 80173e6:	6800      	ldr	r0, [r0, #0]
 80173e8:	9301      	str	r3, [sp, #4]
 80173ea:	a902      	add	r1, sp, #8
 80173ec:	f003 fa78 	bl	801a8e0 <_svfiprintf_r>
 80173f0:	9b02      	ldr	r3, [sp, #8]
 80173f2:	2200      	movs	r2, #0
 80173f4:	701a      	strb	r2, [r3, #0]
 80173f6:	b01c      	add	sp, #112	; 0x70
 80173f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80173fc:	b003      	add	sp, #12
 80173fe:	4770      	bx	lr
 8017400:	200005c8 	.word	0x200005c8
 8017404:	ffff0208 	.word	0xffff0208

08017408 <strcat>:
 8017408:	b510      	push	{r4, lr}
 801740a:	4602      	mov	r2, r0
 801740c:	7814      	ldrb	r4, [r2, #0]
 801740e:	4613      	mov	r3, r2
 8017410:	3201      	adds	r2, #1
 8017412:	2c00      	cmp	r4, #0
 8017414:	d1fa      	bne.n	801740c <strcat+0x4>
 8017416:	3b01      	subs	r3, #1
 8017418:	f811 2b01 	ldrb.w	r2, [r1], #1
 801741c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017420:	2a00      	cmp	r2, #0
 8017422:	d1f9      	bne.n	8017418 <strcat+0x10>
 8017424:	bd10      	pop	{r4, pc}

08017426 <strchr>:
 8017426:	b2c9      	uxtb	r1, r1
 8017428:	4603      	mov	r3, r0
 801742a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801742e:	b11a      	cbz	r2, 8017438 <strchr+0x12>
 8017430:	428a      	cmp	r2, r1
 8017432:	d1f9      	bne.n	8017428 <strchr+0x2>
 8017434:	4618      	mov	r0, r3
 8017436:	4770      	bx	lr
 8017438:	2900      	cmp	r1, #0
 801743a:	bf18      	it	ne
 801743c:	2300      	movne	r3, #0
 801743e:	e7f9      	b.n	8017434 <strchr+0xe>

08017440 <strcpy>:
 8017440:	4603      	mov	r3, r0
 8017442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017446:	f803 2b01 	strb.w	r2, [r3], #1
 801744a:	2a00      	cmp	r2, #0
 801744c:	d1f9      	bne.n	8017442 <strcpy+0x2>
 801744e:	4770      	bx	lr

08017450 <strncmp>:
 8017450:	b510      	push	{r4, lr}
 8017452:	b16a      	cbz	r2, 8017470 <strncmp+0x20>
 8017454:	3901      	subs	r1, #1
 8017456:	1884      	adds	r4, r0, r2
 8017458:	f810 3b01 	ldrb.w	r3, [r0], #1
 801745c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017460:	4293      	cmp	r3, r2
 8017462:	d103      	bne.n	801746c <strncmp+0x1c>
 8017464:	42a0      	cmp	r0, r4
 8017466:	d001      	beq.n	801746c <strncmp+0x1c>
 8017468:	2b00      	cmp	r3, #0
 801746a:	d1f5      	bne.n	8017458 <strncmp+0x8>
 801746c:	1a98      	subs	r0, r3, r2
 801746e:	bd10      	pop	{r4, pc}
 8017470:	4610      	mov	r0, r2
 8017472:	e7fc      	b.n	801746e <strncmp+0x1e>

08017474 <strncpy>:
 8017474:	b510      	push	{r4, lr}
 8017476:	3901      	subs	r1, #1
 8017478:	4603      	mov	r3, r0
 801747a:	b132      	cbz	r2, 801748a <strncpy+0x16>
 801747c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017480:	f803 4b01 	strb.w	r4, [r3], #1
 8017484:	3a01      	subs	r2, #1
 8017486:	2c00      	cmp	r4, #0
 8017488:	d1f7      	bne.n	801747a <strncpy+0x6>
 801748a:	441a      	add	r2, r3
 801748c:	2100      	movs	r1, #0
 801748e:	4293      	cmp	r3, r2
 8017490:	d100      	bne.n	8017494 <strncpy+0x20>
 8017492:	bd10      	pop	{r4, pc}
 8017494:	f803 1b01 	strb.w	r1, [r3], #1
 8017498:	e7f9      	b.n	801748e <strncpy+0x1a>

0801749a <strstr>:
 801749a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801749c:	780c      	ldrb	r4, [r1, #0]
 801749e:	b164      	cbz	r4, 80174ba <strstr+0x20>
 80174a0:	4603      	mov	r3, r0
 80174a2:	781a      	ldrb	r2, [r3, #0]
 80174a4:	4618      	mov	r0, r3
 80174a6:	1c5e      	adds	r6, r3, #1
 80174a8:	b90a      	cbnz	r2, 80174ae <strstr+0x14>
 80174aa:	4610      	mov	r0, r2
 80174ac:	e005      	b.n	80174ba <strstr+0x20>
 80174ae:	4294      	cmp	r4, r2
 80174b0:	d108      	bne.n	80174c4 <strstr+0x2a>
 80174b2:	460d      	mov	r5, r1
 80174b4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80174b8:	b902      	cbnz	r2, 80174bc <strstr+0x22>
 80174ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174bc:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80174c0:	4297      	cmp	r7, r2
 80174c2:	d0f7      	beq.n	80174b4 <strstr+0x1a>
 80174c4:	4633      	mov	r3, r6
 80174c6:	e7ec      	b.n	80174a2 <strstr+0x8>

080174c8 <sulp>:
 80174c8:	b570      	push	{r4, r5, r6, lr}
 80174ca:	4604      	mov	r4, r0
 80174cc:	460d      	mov	r5, r1
 80174ce:	ec45 4b10 	vmov	d0, r4, r5
 80174d2:	4616      	mov	r6, r2
 80174d4:	f002 ffa0 	bl	801a418 <__ulp>
 80174d8:	ec51 0b10 	vmov	r0, r1, d0
 80174dc:	b17e      	cbz	r6, 80174fe <sulp+0x36>
 80174de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80174e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	dd09      	ble.n	80174fe <sulp+0x36>
 80174ea:	051b      	lsls	r3, r3, #20
 80174ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80174f0:	2400      	movs	r4, #0
 80174f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80174f6:	4622      	mov	r2, r4
 80174f8:	462b      	mov	r3, r5
 80174fa:	f7e9 f88d 	bl	8000618 <__aeabi_dmul>
 80174fe:	bd70      	pop	{r4, r5, r6, pc}

08017500 <_strtod_l>:
 8017500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017504:	b0a3      	sub	sp, #140	; 0x8c
 8017506:	461f      	mov	r7, r3
 8017508:	2300      	movs	r3, #0
 801750a:	931e      	str	r3, [sp, #120]	; 0x78
 801750c:	4ba4      	ldr	r3, [pc, #656]	; (80177a0 <_strtod_l+0x2a0>)
 801750e:	9219      	str	r2, [sp, #100]	; 0x64
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	9307      	str	r3, [sp, #28]
 8017514:	4604      	mov	r4, r0
 8017516:	4618      	mov	r0, r3
 8017518:	4688      	mov	r8, r1
 801751a:	f7e8 fe63 	bl	80001e4 <strlen>
 801751e:	f04f 0a00 	mov.w	sl, #0
 8017522:	4605      	mov	r5, r0
 8017524:	f04f 0b00 	mov.w	fp, #0
 8017528:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801752c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801752e:	781a      	ldrb	r2, [r3, #0]
 8017530:	2a2b      	cmp	r2, #43	; 0x2b
 8017532:	d04c      	beq.n	80175ce <_strtod_l+0xce>
 8017534:	d839      	bhi.n	80175aa <_strtod_l+0xaa>
 8017536:	2a0d      	cmp	r2, #13
 8017538:	d832      	bhi.n	80175a0 <_strtod_l+0xa0>
 801753a:	2a08      	cmp	r2, #8
 801753c:	d832      	bhi.n	80175a4 <_strtod_l+0xa4>
 801753e:	2a00      	cmp	r2, #0
 8017540:	d03c      	beq.n	80175bc <_strtod_l+0xbc>
 8017542:	2300      	movs	r3, #0
 8017544:	930e      	str	r3, [sp, #56]	; 0x38
 8017546:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8017548:	7833      	ldrb	r3, [r6, #0]
 801754a:	2b30      	cmp	r3, #48	; 0x30
 801754c:	f040 80b4 	bne.w	80176b8 <_strtod_l+0x1b8>
 8017550:	7873      	ldrb	r3, [r6, #1]
 8017552:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017556:	2b58      	cmp	r3, #88	; 0x58
 8017558:	d16c      	bne.n	8017634 <_strtod_l+0x134>
 801755a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801755c:	9301      	str	r3, [sp, #4]
 801755e:	ab1e      	add	r3, sp, #120	; 0x78
 8017560:	9702      	str	r7, [sp, #8]
 8017562:	9300      	str	r3, [sp, #0]
 8017564:	4a8f      	ldr	r2, [pc, #572]	; (80177a4 <_strtod_l+0x2a4>)
 8017566:	ab1f      	add	r3, sp, #124	; 0x7c
 8017568:	a91d      	add	r1, sp, #116	; 0x74
 801756a:	4620      	mov	r0, r4
 801756c:	f002 f85a 	bl	8019624 <__gethex>
 8017570:	f010 0707 	ands.w	r7, r0, #7
 8017574:	4605      	mov	r5, r0
 8017576:	d005      	beq.n	8017584 <_strtod_l+0x84>
 8017578:	2f06      	cmp	r7, #6
 801757a:	d12a      	bne.n	80175d2 <_strtod_l+0xd2>
 801757c:	3601      	adds	r6, #1
 801757e:	2300      	movs	r3, #0
 8017580:	961d      	str	r6, [sp, #116]	; 0x74
 8017582:	930e      	str	r3, [sp, #56]	; 0x38
 8017584:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017586:	2b00      	cmp	r3, #0
 8017588:	f040 8596 	bne.w	80180b8 <_strtod_l+0xbb8>
 801758c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801758e:	b1db      	cbz	r3, 80175c8 <_strtod_l+0xc8>
 8017590:	4652      	mov	r2, sl
 8017592:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017596:	ec43 2b10 	vmov	d0, r2, r3
 801759a:	b023      	add	sp, #140	; 0x8c
 801759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175a0:	2a20      	cmp	r2, #32
 80175a2:	d1ce      	bne.n	8017542 <_strtod_l+0x42>
 80175a4:	3301      	adds	r3, #1
 80175a6:	931d      	str	r3, [sp, #116]	; 0x74
 80175a8:	e7c0      	b.n	801752c <_strtod_l+0x2c>
 80175aa:	2a2d      	cmp	r2, #45	; 0x2d
 80175ac:	d1c9      	bne.n	8017542 <_strtod_l+0x42>
 80175ae:	2201      	movs	r2, #1
 80175b0:	920e      	str	r2, [sp, #56]	; 0x38
 80175b2:	1c5a      	adds	r2, r3, #1
 80175b4:	921d      	str	r2, [sp, #116]	; 0x74
 80175b6:	785b      	ldrb	r3, [r3, #1]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d1c4      	bne.n	8017546 <_strtod_l+0x46>
 80175bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80175be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	f040 8576 	bne.w	80180b4 <_strtod_l+0xbb4>
 80175c8:	4652      	mov	r2, sl
 80175ca:	465b      	mov	r3, fp
 80175cc:	e7e3      	b.n	8017596 <_strtod_l+0x96>
 80175ce:	2200      	movs	r2, #0
 80175d0:	e7ee      	b.n	80175b0 <_strtod_l+0xb0>
 80175d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80175d4:	b13a      	cbz	r2, 80175e6 <_strtod_l+0xe6>
 80175d6:	2135      	movs	r1, #53	; 0x35
 80175d8:	a820      	add	r0, sp, #128	; 0x80
 80175da:	f003 f828 	bl	801a62e <__copybits>
 80175de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80175e0:	4620      	mov	r0, r4
 80175e2:	f002 fbed 	bl	8019dc0 <_Bfree>
 80175e6:	3f01      	subs	r7, #1
 80175e8:	2f05      	cmp	r7, #5
 80175ea:	d807      	bhi.n	80175fc <_strtod_l+0xfc>
 80175ec:	e8df f007 	tbb	[pc, r7]
 80175f0:	1d180b0e 	.word	0x1d180b0e
 80175f4:	030e      	.short	0x030e
 80175f6:	f04f 0b00 	mov.w	fp, #0
 80175fa:	46da      	mov	sl, fp
 80175fc:	0728      	lsls	r0, r5, #28
 80175fe:	d5c1      	bpl.n	8017584 <_strtod_l+0x84>
 8017600:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8017604:	e7be      	b.n	8017584 <_strtod_l+0x84>
 8017606:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801760a:	e7f7      	b.n	80175fc <_strtod_l+0xfc>
 801760c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8017610:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017612:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017616:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801761a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801761e:	e7ed      	b.n	80175fc <_strtod_l+0xfc>
 8017620:	f8df b184 	ldr.w	fp, [pc, #388]	; 80177a8 <_strtod_l+0x2a8>
 8017624:	f04f 0a00 	mov.w	sl, #0
 8017628:	e7e8      	b.n	80175fc <_strtod_l+0xfc>
 801762a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801762e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8017632:	e7e3      	b.n	80175fc <_strtod_l+0xfc>
 8017634:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017636:	1c5a      	adds	r2, r3, #1
 8017638:	921d      	str	r2, [sp, #116]	; 0x74
 801763a:	785b      	ldrb	r3, [r3, #1]
 801763c:	2b30      	cmp	r3, #48	; 0x30
 801763e:	d0f9      	beq.n	8017634 <_strtod_l+0x134>
 8017640:	2b00      	cmp	r3, #0
 8017642:	d09f      	beq.n	8017584 <_strtod_l+0x84>
 8017644:	2301      	movs	r3, #1
 8017646:	f04f 0900 	mov.w	r9, #0
 801764a:	9304      	str	r3, [sp, #16]
 801764c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801764e:	930a      	str	r3, [sp, #40]	; 0x28
 8017650:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017654:	464f      	mov	r7, r9
 8017656:	220a      	movs	r2, #10
 8017658:	981d      	ldr	r0, [sp, #116]	; 0x74
 801765a:	7806      	ldrb	r6, [r0, #0]
 801765c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8017660:	b2d9      	uxtb	r1, r3
 8017662:	2909      	cmp	r1, #9
 8017664:	d92a      	bls.n	80176bc <_strtod_l+0x1bc>
 8017666:	9907      	ldr	r1, [sp, #28]
 8017668:	462a      	mov	r2, r5
 801766a:	f7ff fef1 	bl	8017450 <strncmp>
 801766e:	b398      	cbz	r0, 80176d8 <_strtod_l+0x1d8>
 8017670:	2000      	movs	r0, #0
 8017672:	4633      	mov	r3, r6
 8017674:	463d      	mov	r5, r7
 8017676:	9007      	str	r0, [sp, #28]
 8017678:	4602      	mov	r2, r0
 801767a:	2b65      	cmp	r3, #101	; 0x65
 801767c:	d001      	beq.n	8017682 <_strtod_l+0x182>
 801767e:	2b45      	cmp	r3, #69	; 0x45
 8017680:	d118      	bne.n	80176b4 <_strtod_l+0x1b4>
 8017682:	b91d      	cbnz	r5, 801768c <_strtod_l+0x18c>
 8017684:	9b04      	ldr	r3, [sp, #16]
 8017686:	4303      	orrs	r3, r0
 8017688:	d098      	beq.n	80175bc <_strtod_l+0xbc>
 801768a:	2500      	movs	r5, #0
 801768c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8017690:	f108 0301 	add.w	r3, r8, #1
 8017694:	931d      	str	r3, [sp, #116]	; 0x74
 8017696:	f898 3001 	ldrb.w	r3, [r8, #1]
 801769a:	2b2b      	cmp	r3, #43	; 0x2b
 801769c:	d075      	beq.n	801778a <_strtod_l+0x28a>
 801769e:	2b2d      	cmp	r3, #45	; 0x2d
 80176a0:	d07b      	beq.n	801779a <_strtod_l+0x29a>
 80176a2:	f04f 0c00 	mov.w	ip, #0
 80176a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80176aa:	2909      	cmp	r1, #9
 80176ac:	f240 8082 	bls.w	80177b4 <_strtod_l+0x2b4>
 80176b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80176b4:	2600      	movs	r6, #0
 80176b6:	e09d      	b.n	80177f4 <_strtod_l+0x2f4>
 80176b8:	2300      	movs	r3, #0
 80176ba:	e7c4      	b.n	8017646 <_strtod_l+0x146>
 80176bc:	2f08      	cmp	r7, #8
 80176be:	bfd8      	it	le
 80176c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80176c2:	f100 0001 	add.w	r0, r0, #1
 80176c6:	bfda      	itte	le
 80176c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80176cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80176ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80176d2:	3701      	adds	r7, #1
 80176d4:	901d      	str	r0, [sp, #116]	; 0x74
 80176d6:	e7bf      	b.n	8017658 <_strtod_l+0x158>
 80176d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80176da:	195a      	adds	r2, r3, r5
 80176dc:	921d      	str	r2, [sp, #116]	; 0x74
 80176de:	5d5b      	ldrb	r3, [r3, r5]
 80176e0:	2f00      	cmp	r7, #0
 80176e2:	d037      	beq.n	8017754 <_strtod_l+0x254>
 80176e4:	9007      	str	r0, [sp, #28]
 80176e6:	463d      	mov	r5, r7
 80176e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80176ec:	2a09      	cmp	r2, #9
 80176ee:	d912      	bls.n	8017716 <_strtod_l+0x216>
 80176f0:	2201      	movs	r2, #1
 80176f2:	e7c2      	b.n	801767a <_strtod_l+0x17a>
 80176f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80176f6:	1c5a      	adds	r2, r3, #1
 80176f8:	921d      	str	r2, [sp, #116]	; 0x74
 80176fa:	785b      	ldrb	r3, [r3, #1]
 80176fc:	3001      	adds	r0, #1
 80176fe:	2b30      	cmp	r3, #48	; 0x30
 8017700:	d0f8      	beq.n	80176f4 <_strtod_l+0x1f4>
 8017702:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8017706:	2a08      	cmp	r2, #8
 8017708:	f200 84db 	bhi.w	80180c2 <_strtod_l+0xbc2>
 801770c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801770e:	9007      	str	r0, [sp, #28]
 8017710:	2000      	movs	r0, #0
 8017712:	920a      	str	r2, [sp, #40]	; 0x28
 8017714:	4605      	mov	r5, r0
 8017716:	3b30      	subs	r3, #48	; 0x30
 8017718:	f100 0201 	add.w	r2, r0, #1
 801771c:	d014      	beq.n	8017748 <_strtod_l+0x248>
 801771e:	9907      	ldr	r1, [sp, #28]
 8017720:	4411      	add	r1, r2
 8017722:	9107      	str	r1, [sp, #28]
 8017724:	462a      	mov	r2, r5
 8017726:	eb00 0e05 	add.w	lr, r0, r5
 801772a:	210a      	movs	r1, #10
 801772c:	4572      	cmp	r2, lr
 801772e:	d113      	bne.n	8017758 <_strtod_l+0x258>
 8017730:	182a      	adds	r2, r5, r0
 8017732:	2a08      	cmp	r2, #8
 8017734:	f105 0501 	add.w	r5, r5, #1
 8017738:	4405      	add	r5, r0
 801773a:	dc1c      	bgt.n	8017776 <_strtod_l+0x276>
 801773c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801773e:	220a      	movs	r2, #10
 8017740:	fb02 3301 	mla	r3, r2, r1, r3
 8017744:	9309      	str	r3, [sp, #36]	; 0x24
 8017746:	2200      	movs	r2, #0
 8017748:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801774a:	1c59      	adds	r1, r3, #1
 801774c:	911d      	str	r1, [sp, #116]	; 0x74
 801774e:	785b      	ldrb	r3, [r3, #1]
 8017750:	4610      	mov	r0, r2
 8017752:	e7c9      	b.n	80176e8 <_strtod_l+0x1e8>
 8017754:	4638      	mov	r0, r7
 8017756:	e7d2      	b.n	80176fe <_strtod_l+0x1fe>
 8017758:	2a08      	cmp	r2, #8
 801775a:	dc04      	bgt.n	8017766 <_strtod_l+0x266>
 801775c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801775e:	434e      	muls	r6, r1
 8017760:	9609      	str	r6, [sp, #36]	; 0x24
 8017762:	3201      	adds	r2, #1
 8017764:	e7e2      	b.n	801772c <_strtod_l+0x22c>
 8017766:	f102 0c01 	add.w	ip, r2, #1
 801776a:	f1bc 0f10 	cmp.w	ip, #16
 801776e:	bfd8      	it	le
 8017770:	fb01 f909 	mulle.w	r9, r1, r9
 8017774:	e7f5      	b.n	8017762 <_strtod_l+0x262>
 8017776:	2d10      	cmp	r5, #16
 8017778:	bfdc      	itt	le
 801777a:	220a      	movle	r2, #10
 801777c:	fb02 3909 	mlale	r9, r2, r9, r3
 8017780:	e7e1      	b.n	8017746 <_strtod_l+0x246>
 8017782:	2300      	movs	r3, #0
 8017784:	9307      	str	r3, [sp, #28]
 8017786:	2201      	movs	r2, #1
 8017788:	e77c      	b.n	8017684 <_strtod_l+0x184>
 801778a:	f04f 0c00 	mov.w	ip, #0
 801778e:	f108 0302 	add.w	r3, r8, #2
 8017792:	931d      	str	r3, [sp, #116]	; 0x74
 8017794:	f898 3002 	ldrb.w	r3, [r8, #2]
 8017798:	e785      	b.n	80176a6 <_strtod_l+0x1a6>
 801779a:	f04f 0c01 	mov.w	ip, #1
 801779e:	e7f6      	b.n	801778e <_strtod_l+0x28e>
 80177a0:	08032740 	.word	0x08032740
 80177a4:	08032504 	.word	0x08032504
 80177a8:	7ff00000 	.word	0x7ff00000
 80177ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80177ae:	1c59      	adds	r1, r3, #1
 80177b0:	911d      	str	r1, [sp, #116]	; 0x74
 80177b2:	785b      	ldrb	r3, [r3, #1]
 80177b4:	2b30      	cmp	r3, #48	; 0x30
 80177b6:	d0f9      	beq.n	80177ac <_strtod_l+0x2ac>
 80177b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80177bc:	2908      	cmp	r1, #8
 80177be:	f63f af79 	bhi.w	80176b4 <_strtod_l+0x1b4>
 80177c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80177c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80177c8:	9308      	str	r3, [sp, #32]
 80177ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80177cc:	1c59      	adds	r1, r3, #1
 80177ce:	911d      	str	r1, [sp, #116]	; 0x74
 80177d0:	785b      	ldrb	r3, [r3, #1]
 80177d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80177d6:	2e09      	cmp	r6, #9
 80177d8:	d937      	bls.n	801784a <_strtod_l+0x34a>
 80177da:	9e08      	ldr	r6, [sp, #32]
 80177dc:	1b89      	subs	r1, r1, r6
 80177de:	2908      	cmp	r1, #8
 80177e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80177e4:	dc02      	bgt.n	80177ec <_strtod_l+0x2ec>
 80177e6:	4576      	cmp	r6, lr
 80177e8:	bfa8      	it	ge
 80177ea:	4676      	movge	r6, lr
 80177ec:	f1bc 0f00 	cmp.w	ip, #0
 80177f0:	d000      	beq.n	80177f4 <_strtod_l+0x2f4>
 80177f2:	4276      	negs	r6, r6
 80177f4:	2d00      	cmp	r5, #0
 80177f6:	d14f      	bne.n	8017898 <_strtod_l+0x398>
 80177f8:	9904      	ldr	r1, [sp, #16]
 80177fa:	4301      	orrs	r1, r0
 80177fc:	f47f aec2 	bne.w	8017584 <_strtod_l+0x84>
 8017800:	2a00      	cmp	r2, #0
 8017802:	f47f aedb 	bne.w	80175bc <_strtod_l+0xbc>
 8017806:	2b69      	cmp	r3, #105	; 0x69
 8017808:	d027      	beq.n	801785a <_strtod_l+0x35a>
 801780a:	dc24      	bgt.n	8017856 <_strtod_l+0x356>
 801780c:	2b49      	cmp	r3, #73	; 0x49
 801780e:	d024      	beq.n	801785a <_strtod_l+0x35a>
 8017810:	2b4e      	cmp	r3, #78	; 0x4e
 8017812:	f47f aed3 	bne.w	80175bc <_strtod_l+0xbc>
 8017816:	499e      	ldr	r1, [pc, #632]	; (8017a90 <_strtod_l+0x590>)
 8017818:	a81d      	add	r0, sp, #116	; 0x74
 801781a:	f002 f95b 	bl	8019ad4 <__match>
 801781e:	2800      	cmp	r0, #0
 8017820:	f43f aecc 	beq.w	80175bc <_strtod_l+0xbc>
 8017824:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017826:	781b      	ldrb	r3, [r3, #0]
 8017828:	2b28      	cmp	r3, #40	; 0x28
 801782a:	d12d      	bne.n	8017888 <_strtod_l+0x388>
 801782c:	4999      	ldr	r1, [pc, #612]	; (8017a94 <_strtod_l+0x594>)
 801782e:	aa20      	add	r2, sp, #128	; 0x80
 8017830:	a81d      	add	r0, sp, #116	; 0x74
 8017832:	f002 f963 	bl	8019afc <__hexnan>
 8017836:	2805      	cmp	r0, #5
 8017838:	d126      	bne.n	8017888 <_strtod_l+0x388>
 801783a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801783c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8017840:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8017844:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8017848:	e69c      	b.n	8017584 <_strtod_l+0x84>
 801784a:	210a      	movs	r1, #10
 801784c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8017850:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8017854:	e7b9      	b.n	80177ca <_strtod_l+0x2ca>
 8017856:	2b6e      	cmp	r3, #110	; 0x6e
 8017858:	e7db      	b.n	8017812 <_strtod_l+0x312>
 801785a:	498f      	ldr	r1, [pc, #572]	; (8017a98 <_strtod_l+0x598>)
 801785c:	a81d      	add	r0, sp, #116	; 0x74
 801785e:	f002 f939 	bl	8019ad4 <__match>
 8017862:	2800      	cmp	r0, #0
 8017864:	f43f aeaa 	beq.w	80175bc <_strtod_l+0xbc>
 8017868:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801786a:	498c      	ldr	r1, [pc, #560]	; (8017a9c <_strtod_l+0x59c>)
 801786c:	3b01      	subs	r3, #1
 801786e:	a81d      	add	r0, sp, #116	; 0x74
 8017870:	931d      	str	r3, [sp, #116]	; 0x74
 8017872:	f002 f92f 	bl	8019ad4 <__match>
 8017876:	b910      	cbnz	r0, 801787e <_strtod_l+0x37e>
 8017878:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801787a:	3301      	adds	r3, #1
 801787c:	931d      	str	r3, [sp, #116]	; 0x74
 801787e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8017aac <_strtod_l+0x5ac>
 8017882:	f04f 0a00 	mov.w	sl, #0
 8017886:	e67d      	b.n	8017584 <_strtod_l+0x84>
 8017888:	4885      	ldr	r0, [pc, #532]	; (8017aa0 <_strtod_l+0x5a0>)
 801788a:	f003 fa85 	bl	801ad98 <nan>
 801788e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8017892:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8017896:	e675      	b.n	8017584 <_strtod_l+0x84>
 8017898:	9b07      	ldr	r3, [sp, #28]
 801789a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801789c:	1af3      	subs	r3, r6, r3
 801789e:	2f00      	cmp	r7, #0
 80178a0:	bf08      	it	eq
 80178a2:	462f      	moveq	r7, r5
 80178a4:	2d10      	cmp	r5, #16
 80178a6:	9308      	str	r3, [sp, #32]
 80178a8:	46a8      	mov	r8, r5
 80178aa:	bfa8      	it	ge
 80178ac:	f04f 0810 	movge.w	r8, #16
 80178b0:	f7e8 fe38 	bl	8000524 <__aeabi_ui2d>
 80178b4:	2d09      	cmp	r5, #9
 80178b6:	4682      	mov	sl, r0
 80178b8:	468b      	mov	fp, r1
 80178ba:	dd13      	ble.n	80178e4 <_strtod_l+0x3e4>
 80178bc:	4b79      	ldr	r3, [pc, #484]	; (8017aa4 <_strtod_l+0x5a4>)
 80178be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80178c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80178c6:	f7e8 fea7 	bl	8000618 <__aeabi_dmul>
 80178ca:	4682      	mov	sl, r0
 80178cc:	4648      	mov	r0, r9
 80178ce:	468b      	mov	fp, r1
 80178d0:	f7e8 fe28 	bl	8000524 <__aeabi_ui2d>
 80178d4:	4602      	mov	r2, r0
 80178d6:	460b      	mov	r3, r1
 80178d8:	4650      	mov	r0, sl
 80178da:	4659      	mov	r1, fp
 80178dc:	f7e8 fce6 	bl	80002ac <__adddf3>
 80178e0:	4682      	mov	sl, r0
 80178e2:	468b      	mov	fp, r1
 80178e4:	2d0f      	cmp	r5, #15
 80178e6:	dc38      	bgt.n	801795a <_strtod_l+0x45a>
 80178e8:	9b08      	ldr	r3, [sp, #32]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	f43f ae4a 	beq.w	8017584 <_strtod_l+0x84>
 80178f0:	dd24      	ble.n	801793c <_strtod_l+0x43c>
 80178f2:	2b16      	cmp	r3, #22
 80178f4:	dc0b      	bgt.n	801790e <_strtod_l+0x40e>
 80178f6:	4d6b      	ldr	r5, [pc, #428]	; (8017aa4 <_strtod_l+0x5a4>)
 80178f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80178fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8017900:	4652      	mov	r2, sl
 8017902:	465b      	mov	r3, fp
 8017904:	f7e8 fe88 	bl	8000618 <__aeabi_dmul>
 8017908:	4682      	mov	sl, r0
 801790a:	468b      	mov	fp, r1
 801790c:	e63a      	b.n	8017584 <_strtod_l+0x84>
 801790e:	9a08      	ldr	r2, [sp, #32]
 8017910:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8017914:	4293      	cmp	r3, r2
 8017916:	db20      	blt.n	801795a <_strtod_l+0x45a>
 8017918:	4c62      	ldr	r4, [pc, #392]	; (8017aa4 <_strtod_l+0x5a4>)
 801791a:	f1c5 050f 	rsb	r5, r5, #15
 801791e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8017922:	4652      	mov	r2, sl
 8017924:	465b      	mov	r3, fp
 8017926:	e9d1 0100 	ldrd	r0, r1, [r1]
 801792a:	f7e8 fe75 	bl	8000618 <__aeabi_dmul>
 801792e:	9b08      	ldr	r3, [sp, #32]
 8017930:	1b5d      	subs	r5, r3, r5
 8017932:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8017936:	e9d4 2300 	ldrd	r2, r3, [r4]
 801793a:	e7e3      	b.n	8017904 <_strtod_l+0x404>
 801793c:	9b08      	ldr	r3, [sp, #32]
 801793e:	3316      	adds	r3, #22
 8017940:	db0b      	blt.n	801795a <_strtod_l+0x45a>
 8017942:	9b07      	ldr	r3, [sp, #28]
 8017944:	4a57      	ldr	r2, [pc, #348]	; (8017aa4 <_strtod_l+0x5a4>)
 8017946:	1b9e      	subs	r6, r3, r6
 8017948:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801794c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017950:	4650      	mov	r0, sl
 8017952:	4659      	mov	r1, fp
 8017954:	f7e8 ff8a 	bl	800086c <__aeabi_ddiv>
 8017958:	e7d6      	b.n	8017908 <_strtod_l+0x408>
 801795a:	9b08      	ldr	r3, [sp, #32]
 801795c:	eba5 0808 	sub.w	r8, r5, r8
 8017960:	4498      	add	r8, r3
 8017962:	f1b8 0f00 	cmp.w	r8, #0
 8017966:	dd71      	ble.n	8017a4c <_strtod_l+0x54c>
 8017968:	f018 030f 	ands.w	r3, r8, #15
 801796c:	d00a      	beq.n	8017984 <_strtod_l+0x484>
 801796e:	494d      	ldr	r1, [pc, #308]	; (8017aa4 <_strtod_l+0x5a4>)
 8017970:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017974:	4652      	mov	r2, sl
 8017976:	465b      	mov	r3, fp
 8017978:	e9d1 0100 	ldrd	r0, r1, [r1]
 801797c:	f7e8 fe4c 	bl	8000618 <__aeabi_dmul>
 8017980:	4682      	mov	sl, r0
 8017982:	468b      	mov	fp, r1
 8017984:	f038 080f 	bics.w	r8, r8, #15
 8017988:	d04d      	beq.n	8017a26 <_strtod_l+0x526>
 801798a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801798e:	dd22      	ble.n	80179d6 <_strtod_l+0x4d6>
 8017990:	2500      	movs	r5, #0
 8017992:	462e      	mov	r6, r5
 8017994:	9509      	str	r5, [sp, #36]	; 0x24
 8017996:	9507      	str	r5, [sp, #28]
 8017998:	2322      	movs	r3, #34	; 0x22
 801799a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8017aac <_strtod_l+0x5ac>
 801799e:	6023      	str	r3, [r4, #0]
 80179a0:	f04f 0a00 	mov.w	sl, #0
 80179a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	f43f adec 	beq.w	8017584 <_strtod_l+0x84>
 80179ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80179ae:	4620      	mov	r0, r4
 80179b0:	f002 fa06 	bl	8019dc0 <_Bfree>
 80179b4:	9907      	ldr	r1, [sp, #28]
 80179b6:	4620      	mov	r0, r4
 80179b8:	f002 fa02 	bl	8019dc0 <_Bfree>
 80179bc:	4631      	mov	r1, r6
 80179be:	4620      	mov	r0, r4
 80179c0:	f002 f9fe 	bl	8019dc0 <_Bfree>
 80179c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80179c6:	4620      	mov	r0, r4
 80179c8:	f002 f9fa 	bl	8019dc0 <_Bfree>
 80179cc:	4629      	mov	r1, r5
 80179ce:	4620      	mov	r0, r4
 80179d0:	f002 f9f6 	bl	8019dc0 <_Bfree>
 80179d4:	e5d6      	b.n	8017584 <_strtod_l+0x84>
 80179d6:	2300      	movs	r3, #0
 80179d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80179dc:	4650      	mov	r0, sl
 80179de:	4659      	mov	r1, fp
 80179e0:	4699      	mov	r9, r3
 80179e2:	f1b8 0f01 	cmp.w	r8, #1
 80179e6:	dc21      	bgt.n	8017a2c <_strtod_l+0x52c>
 80179e8:	b10b      	cbz	r3, 80179ee <_strtod_l+0x4ee>
 80179ea:	4682      	mov	sl, r0
 80179ec:	468b      	mov	fp, r1
 80179ee:	4b2e      	ldr	r3, [pc, #184]	; (8017aa8 <_strtod_l+0x5a8>)
 80179f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80179f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80179f8:	4652      	mov	r2, sl
 80179fa:	465b      	mov	r3, fp
 80179fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8017a00:	f7e8 fe0a 	bl	8000618 <__aeabi_dmul>
 8017a04:	4b29      	ldr	r3, [pc, #164]	; (8017aac <_strtod_l+0x5ac>)
 8017a06:	460a      	mov	r2, r1
 8017a08:	400b      	ands	r3, r1
 8017a0a:	4929      	ldr	r1, [pc, #164]	; (8017ab0 <_strtod_l+0x5b0>)
 8017a0c:	428b      	cmp	r3, r1
 8017a0e:	4682      	mov	sl, r0
 8017a10:	d8be      	bhi.n	8017990 <_strtod_l+0x490>
 8017a12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8017a16:	428b      	cmp	r3, r1
 8017a18:	bf86      	itte	hi
 8017a1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8017ab4 <_strtod_l+0x5b4>
 8017a1e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8017a22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8017a26:	2300      	movs	r3, #0
 8017a28:	9304      	str	r3, [sp, #16]
 8017a2a:	e081      	b.n	8017b30 <_strtod_l+0x630>
 8017a2c:	f018 0f01 	tst.w	r8, #1
 8017a30:	d007      	beq.n	8017a42 <_strtod_l+0x542>
 8017a32:	4b1d      	ldr	r3, [pc, #116]	; (8017aa8 <_strtod_l+0x5a8>)
 8017a34:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8017a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a3c:	f7e8 fdec 	bl	8000618 <__aeabi_dmul>
 8017a40:	2301      	movs	r3, #1
 8017a42:	f109 0901 	add.w	r9, r9, #1
 8017a46:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017a4a:	e7ca      	b.n	80179e2 <_strtod_l+0x4e2>
 8017a4c:	d0eb      	beq.n	8017a26 <_strtod_l+0x526>
 8017a4e:	f1c8 0800 	rsb	r8, r8, #0
 8017a52:	f018 020f 	ands.w	r2, r8, #15
 8017a56:	d00a      	beq.n	8017a6e <_strtod_l+0x56e>
 8017a58:	4b12      	ldr	r3, [pc, #72]	; (8017aa4 <_strtod_l+0x5a4>)
 8017a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a5e:	4650      	mov	r0, sl
 8017a60:	4659      	mov	r1, fp
 8017a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a66:	f7e8 ff01 	bl	800086c <__aeabi_ddiv>
 8017a6a:	4682      	mov	sl, r0
 8017a6c:	468b      	mov	fp, r1
 8017a6e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8017a72:	d0d8      	beq.n	8017a26 <_strtod_l+0x526>
 8017a74:	f1b8 0f1f 	cmp.w	r8, #31
 8017a78:	dd1e      	ble.n	8017ab8 <_strtod_l+0x5b8>
 8017a7a:	2500      	movs	r5, #0
 8017a7c:	462e      	mov	r6, r5
 8017a7e:	9509      	str	r5, [sp, #36]	; 0x24
 8017a80:	9507      	str	r5, [sp, #28]
 8017a82:	2322      	movs	r3, #34	; 0x22
 8017a84:	f04f 0a00 	mov.w	sl, #0
 8017a88:	f04f 0b00 	mov.w	fp, #0
 8017a8c:	6023      	str	r3, [r4, #0]
 8017a8e:	e789      	b.n	80179a4 <_strtod_l+0x4a4>
 8017a90:	08032465 	.word	0x08032465
 8017a94:	08032518 	.word	0x08032518
 8017a98:	0803245d 	.word	0x0803245d
 8017a9c:	080325f8 	.word	0x080325f8
 8017aa0:	080325f4 	.word	0x080325f4
 8017aa4:	080327e0 	.word	0x080327e0
 8017aa8:	080327b8 	.word	0x080327b8
 8017aac:	7ff00000 	.word	0x7ff00000
 8017ab0:	7ca00000 	.word	0x7ca00000
 8017ab4:	7fefffff 	.word	0x7fefffff
 8017ab8:	f018 0310 	ands.w	r3, r8, #16
 8017abc:	bf18      	it	ne
 8017abe:	236a      	movne	r3, #106	; 0x6a
 8017ac0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8017e78 <_strtod_l+0x978>
 8017ac4:	9304      	str	r3, [sp, #16]
 8017ac6:	4650      	mov	r0, sl
 8017ac8:	4659      	mov	r1, fp
 8017aca:	2300      	movs	r3, #0
 8017acc:	f018 0f01 	tst.w	r8, #1
 8017ad0:	d004      	beq.n	8017adc <_strtod_l+0x5dc>
 8017ad2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017ad6:	f7e8 fd9f 	bl	8000618 <__aeabi_dmul>
 8017ada:	2301      	movs	r3, #1
 8017adc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8017ae0:	f109 0908 	add.w	r9, r9, #8
 8017ae4:	d1f2      	bne.n	8017acc <_strtod_l+0x5cc>
 8017ae6:	b10b      	cbz	r3, 8017aec <_strtod_l+0x5ec>
 8017ae8:	4682      	mov	sl, r0
 8017aea:	468b      	mov	fp, r1
 8017aec:	9b04      	ldr	r3, [sp, #16]
 8017aee:	b1bb      	cbz	r3, 8017b20 <_strtod_l+0x620>
 8017af0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8017af4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	4659      	mov	r1, fp
 8017afc:	dd10      	ble.n	8017b20 <_strtod_l+0x620>
 8017afe:	2b1f      	cmp	r3, #31
 8017b00:	f340 8128 	ble.w	8017d54 <_strtod_l+0x854>
 8017b04:	2b34      	cmp	r3, #52	; 0x34
 8017b06:	bfde      	ittt	le
 8017b08:	3b20      	suble	r3, #32
 8017b0a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8017b0e:	fa02 f303 	lslle.w	r3, r2, r3
 8017b12:	f04f 0a00 	mov.w	sl, #0
 8017b16:	bfcc      	ite	gt
 8017b18:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8017b1c:	ea03 0b01 	andle.w	fp, r3, r1
 8017b20:	2200      	movs	r2, #0
 8017b22:	2300      	movs	r3, #0
 8017b24:	4650      	mov	r0, sl
 8017b26:	4659      	mov	r1, fp
 8017b28:	f7e8 ffde 	bl	8000ae8 <__aeabi_dcmpeq>
 8017b2c:	2800      	cmp	r0, #0
 8017b2e:	d1a4      	bne.n	8017a7a <_strtod_l+0x57a>
 8017b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b32:	9300      	str	r3, [sp, #0]
 8017b34:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017b36:	462b      	mov	r3, r5
 8017b38:	463a      	mov	r2, r7
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	f002 f9ac 	bl	8019e98 <__s2b>
 8017b40:	9009      	str	r0, [sp, #36]	; 0x24
 8017b42:	2800      	cmp	r0, #0
 8017b44:	f43f af24 	beq.w	8017990 <_strtod_l+0x490>
 8017b48:	9b07      	ldr	r3, [sp, #28]
 8017b4a:	1b9e      	subs	r6, r3, r6
 8017b4c:	9b08      	ldr	r3, [sp, #32]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	bfb4      	ite	lt
 8017b52:	4633      	movlt	r3, r6
 8017b54:	2300      	movge	r3, #0
 8017b56:	9310      	str	r3, [sp, #64]	; 0x40
 8017b58:	9b08      	ldr	r3, [sp, #32]
 8017b5a:	2500      	movs	r5, #0
 8017b5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b60:	9318      	str	r3, [sp, #96]	; 0x60
 8017b62:	462e      	mov	r6, r5
 8017b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b66:	4620      	mov	r0, r4
 8017b68:	6859      	ldr	r1, [r3, #4]
 8017b6a:	f002 f8e9 	bl	8019d40 <_Balloc>
 8017b6e:	9007      	str	r0, [sp, #28]
 8017b70:	2800      	cmp	r0, #0
 8017b72:	f43f af11 	beq.w	8017998 <_strtod_l+0x498>
 8017b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b78:	691a      	ldr	r2, [r3, #16]
 8017b7a:	3202      	adds	r2, #2
 8017b7c:	f103 010c 	add.w	r1, r3, #12
 8017b80:	0092      	lsls	r2, r2, #2
 8017b82:	300c      	adds	r0, #12
 8017b84:	f7fe fe84 	bl	8016890 <memcpy>
 8017b88:	ec4b ab10 	vmov	d0, sl, fp
 8017b8c:	aa20      	add	r2, sp, #128	; 0x80
 8017b8e:	a91f      	add	r1, sp, #124	; 0x7c
 8017b90:	4620      	mov	r0, r4
 8017b92:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8017b96:	f002 fcbb 	bl	801a510 <__d2b>
 8017b9a:	901e      	str	r0, [sp, #120]	; 0x78
 8017b9c:	2800      	cmp	r0, #0
 8017b9e:	f43f aefb 	beq.w	8017998 <_strtod_l+0x498>
 8017ba2:	2101      	movs	r1, #1
 8017ba4:	4620      	mov	r0, r4
 8017ba6:	f002 fa11 	bl	8019fcc <__i2b>
 8017baa:	4606      	mov	r6, r0
 8017bac:	2800      	cmp	r0, #0
 8017bae:	f43f aef3 	beq.w	8017998 <_strtod_l+0x498>
 8017bb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8017bb4:	9904      	ldr	r1, [sp, #16]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	bfab      	itete	ge
 8017bba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8017bbc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8017bbe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8017bc0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8017bc4:	bfac      	ite	ge
 8017bc6:	eb03 0902 	addge.w	r9, r3, r2
 8017bca:	1ad7      	sublt	r7, r2, r3
 8017bcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017bce:	eba3 0801 	sub.w	r8, r3, r1
 8017bd2:	4490      	add	r8, r2
 8017bd4:	4ba3      	ldr	r3, [pc, #652]	; (8017e64 <_strtod_l+0x964>)
 8017bd6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8017bda:	4598      	cmp	r8, r3
 8017bdc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8017be0:	f280 80cc 	bge.w	8017d7c <_strtod_l+0x87c>
 8017be4:	eba3 0308 	sub.w	r3, r3, r8
 8017be8:	2b1f      	cmp	r3, #31
 8017bea:	eba2 0203 	sub.w	r2, r2, r3
 8017bee:	f04f 0101 	mov.w	r1, #1
 8017bf2:	f300 80b6 	bgt.w	8017d62 <_strtod_l+0x862>
 8017bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8017bfa:	9311      	str	r3, [sp, #68]	; 0x44
 8017bfc:	2300      	movs	r3, #0
 8017bfe:	930c      	str	r3, [sp, #48]	; 0x30
 8017c00:	eb09 0802 	add.w	r8, r9, r2
 8017c04:	9b04      	ldr	r3, [sp, #16]
 8017c06:	45c1      	cmp	r9, r8
 8017c08:	4417      	add	r7, r2
 8017c0a:	441f      	add	r7, r3
 8017c0c:	464b      	mov	r3, r9
 8017c0e:	bfa8      	it	ge
 8017c10:	4643      	movge	r3, r8
 8017c12:	42bb      	cmp	r3, r7
 8017c14:	bfa8      	it	ge
 8017c16:	463b      	movge	r3, r7
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	bfc2      	ittt	gt
 8017c1c:	eba8 0803 	subgt.w	r8, r8, r3
 8017c20:	1aff      	subgt	r7, r7, r3
 8017c22:	eba9 0903 	subgt.w	r9, r9, r3
 8017c26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	dd17      	ble.n	8017c5c <_strtod_l+0x75c>
 8017c2c:	4631      	mov	r1, r6
 8017c2e:	461a      	mov	r2, r3
 8017c30:	4620      	mov	r0, r4
 8017c32:	f002 fa87 	bl	801a144 <__pow5mult>
 8017c36:	4606      	mov	r6, r0
 8017c38:	2800      	cmp	r0, #0
 8017c3a:	f43f aead 	beq.w	8017998 <_strtod_l+0x498>
 8017c3e:	4601      	mov	r1, r0
 8017c40:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017c42:	4620      	mov	r0, r4
 8017c44:	f002 f9d8 	bl	8019ff8 <__multiply>
 8017c48:	900f      	str	r0, [sp, #60]	; 0x3c
 8017c4a:	2800      	cmp	r0, #0
 8017c4c:	f43f aea4 	beq.w	8017998 <_strtod_l+0x498>
 8017c50:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017c52:	4620      	mov	r0, r4
 8017c54:	f002 f8b4 	bl	8019dc0 <_Bfree>
 8017c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c5a:	931e      	str	r3, [sp, #120]	; 0x78
 8017c5c:	f1b8 0f00 	cmp.w	r8, #0
 8017c60:	f300 8091 	bgt.w	8017d86 <_strtod_l+0x886>
 8017c64:	9b08      	ldr	r3, [sp, #32]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	dd08      	ble.n	8017c7c <_strtod_l+0x77c>
 8017c6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017c6c:	9907      	ldr	r1, [sp, #28]
 8017c6e:	4620      	mov	r0, r4
 8017c70:	f002 fa68 	bl	801a144 <__pow5mult>
 8017c74:	9007      	str	r0, [sp, #28]
 8017c76:	2800      	cmp	r0, #0
 8017c78:	f43f ae8e 	beq.w	8017998 <_strtod_l+0x498>
 8017c7c:	2f00      	cmp	r7, #0
 8017c7e:	dd08      	ble.n	8017c92 <_strtod_l+0x792>
 8017c80:	9907      	ldr	r1, [sp, #28]
 8017c82:	463a      	mov	r2, r7
 8017c84:	4620      	mov	r0, r4
 8017c86:	f002 fab7 	bl	801a1f8 <__lshift>
 8017c8a:	9007      	str	r0, [sp, #28]
 8017c8c:	2800      	cmp	r0, #0
 8017c8e:	f43f ae83 	beq.w	8017998 <_strtod_l+0x498>
 8017c92:	f1b9 0f00 	cmp.w	r9, #0
 8017c96:	dd08      	ble.n	8017caa <_strtod_l+0x7aa>
 8017c98:	4631      	mov	r1, r6
 8017c9a:	464a      	mov	r2, r9
 8017c9c:	4620      	mov	r0, r4
 8017c9e:	f002 faab 	bl	801a1f8 <__lshift>
 8017ca2:	4606      	mov	r6, r0
 8017ca4:	2800      	cmp	r0, #0
 8017ca6:	f43f ae77 	beq.w	8017998 <_strtod_l+0x498>
 8017caa:	9a07      	ldr	r2, [sp, #28]
 8017cac:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017cae:	4620      	mov	r0, r4
 8017cb0:	f002 fb2a 	bl	801a308 <__mdiff>
 8017cb4:	4605      	mov	r5, r0
 8017cb6:	2800      	cmp	r0, #0
 8017cb8:	f43f ae6e 	beq.w	8017998 <_strtod_l+0x498>
 8017cbc:	68c3      	ldr	r3, [r0, #12]
 8017cbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	60c3      	str	r3, [r0, #12]
 8017cc4:	4631      	mov	r1, r6
 8017cc6:	f002 fb03 	bl	801a2d0 <__mcmp>
 8017cca:	2800      	cmp	r0, #0
 8017ccc:	da65      	bge.n	8017d9a <_strtod_l+0x89a>
 8017cce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017cd0:	ea53 030a 	orrs.w	r3, r3, sl
 8017cd4:	f040 8087 	bne.w	8017de6 <_strtod_l+0x8e6>
 8017cd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	f040 8082 	bne.w	8017de6 <_strtod_l+0x8e6>
 8017ce2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017ce6:	0d1b      	lsrs	r3, r3, #20
 8017ce8:	051b      	lsls	r3, r3, #20
 8017cea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017cee:	d97a      	bls.n	8017de6 <_strtod_l+0x8e6>
 8017cf0:	696b      	ldr	r3, [r5, #20]
 8017cf2:	b913      	cbnz	r3, 8017cfa <_strtod_l+0x7fa>
 8017cf4:	692b      	ldr	r3, [r5, #16]
 8017cf6:	2b01      	cmp	r3, #1
 8017cf8:	dd75      	ble.n	8017de6 <_strtod_l+0x8e6>
 8017cfa:	4629      	mov	r1, r5
 8017cfc:	2201      	movs	r2, #1
 8017cfe:	4620      	mov	r0, r4
 8017d00:	f002 fa7a 	bl	801a1f8 <__lshift>
 8017d04:	4631      	mov	r1, r6
 8017d06:	4605      	mov	r5, r0
 8017d08:	f002 fae2 	bl	801a2d0 <__mcmp>
 8017d0c:	2800      	cmp	r0, #0
 8017d0e:	dd6a      	ble.n	8017de6 <_strtod_l+0x8e6>
 8017d10:	9904      	ldr	r1, [sp, #16]
 8017d12:	4a55      	ldr	r2, [pc, #340]	; (8017e68 <_strtod_l+0x968>)
 8017d14:	465b      	mov	r3, fp
 8017d16:	2900      	cmp	r1, #0
 8017d18:	f000 8085 	beq.w	8017e26 <_strtod_l+0x926>
 8017d1c:	ea02 010b 	and.w	r1, r2, fp
 8017d20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017d24:	dc7f      	bgt.n	8017e26 <_strtod_l+0x926>
 8017d26:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8017d2a:	f77f aeaa 	ble.w	8017a82 <_strtod_l+0x582>
 8017d2e:	4a4f      	ldr	r2, [pc, #316]	; (8017e6c <_strtod_l+0x96c>)
 8017d30:	2300      	movs	r3, #0
 8017d32:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8017d36:	4650      	mov	r0, sl
 8017d38:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8017d3c:	4659      	mov	r1, fp
 8017d3e:	f7e8 fc6b 	bl	8000618 <__aeabi_dmul>
 8017d42:	460b      	mov	r3, r1
 8017d44:	4303      	orrs	r3, r0
 8017d46:	bf08      	it	eq
 8017d48:	2322      	moveq	r3, #34	; 0x22
 8017d4a:	4682      	mov	sl, r0
 8017d4c:	468b      	mov	fp, r1
 8017d4e:	bf08      	it	eq
 8017d50:	6023      	streq	r3, [r4, #0]
 8017d52:	e62b      	b.n	80179ac <_strtod_l+0x4ac>
 8017d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017d58:	fa02 f303 	lsl.w	r3, r2, r3
 8017d5c:	ea03 0a0a 	and.w	sl, r3, sl
 8017d60:	e6de      	b.n	8017b20 <_strtod_l+0x620>
 8017d62:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8017d66:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8017d6a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8017d6e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8017d72:	fa01 f308 	lsl.w	r3, r1, r8
 8017d76:	930c      	str	r3, [sp, #48]	; 0x30
 8017d78:	9111      	str	r1, [sp, #68]	; 0x44
 8017d7a:	e741      	b.n	8017c00 <_strtod_l+0x700>
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	930c      	str	r3, [sp, #48]	; 0x30
 8017d80:	2301      	movs	r3, #1
 8017d82:	9311      	str	r3, [sp, #68]	; 0x44
 8017d84:	e73c      	b.n	8017c00 <_strtod_l+0x700>
 8017d86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017d88:	4642      	mov	r2, r8
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	f002 fa34 	bl	801a1f8 <__lshift>
 8017d90:	901e      	str	r0, [sp, #120]	; 0x78
 8017d92:	2800      	cmp	r0, #0
 8017d94:	f47f af66 	bne.w	8017c64 <_strtod_l+0x764>
 8017d98:	e5fe      	b.n	8017998 <_strtod_l+0x498>
 8017d9a:	465f      	mov	r7, fp
 8017d9c:	d16e      	bne.n	8017e7c <_strtod_l+0x97c>
 8017d9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017da0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017da4:	b342      	cbz	r2, 8017df8 <_strtod_l+0x8f8>
 8017da6:	4a32      	ldr	r2, [pc, #200]	; (8017e70 <_strtod_l+0x970>)
 8017da8:	4293      	cmp	r3, r2
 8017daa:	d128      	bne.n	8017dfe <_strtod_l+0x8fe>
 8017dac:	9b04      	ldr	r3, [sp, #16]
 8017dae:	4650      	mov	r0, sl
 8017db0:	b1eb      	cbz	r3, 8017dee <_strtod_l+0x8ee>
 8017db2:	4a2d      	ldr	r2, [pc, #180]	; (8017e68 <_strtod_l+0x968>)
 8017db4:	403a      	ands	r2, r7
 8017db6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8017dba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017dbe:	d819      	bhi.n	8017df4 <_strtod_l+0x8f4>
 8017dc0:	0d12      	lsrs	r2, r2, #20
 8017dc2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8017dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8017dca:	4298      	cmp	r0, r3
 8017dcc:	d117      	bne.n	8017dfe <_strtod_l+0x8fe>
 8017dce:	4b29      	ldr	r3, [pc, #164]	; (8017e74 <_strtod_l+0x974>)
 8017dd0:	429f      	cmp	r7, r3
 8017dd2:	d102      	bne.n	8017dda <_strtod_l+0x8da>
 8017dd4:	3001      	adds	r0, #1
 8017dd6:	f43f addf 	beq.w	8017998 <_strtod_l+0x498>
 8017dda:	4b23      	ldr	r3, [pc, #140]	; (8017e68 <_strtod_l+0x968>)
 8017ddc:	403b      	ands	r3, r7
 8017dde:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8017de2:	f04f 0a00 	mov.w	sl, #0
 8017de6:	9b04      	ldr	r3, [sp, #16]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d1a0      	bne.n	8017d2e <_strtod_l+0x82e>
 8017dec:	e5de      	b.n	80179ac <_strtod_l+0x4ac>
 8017dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017df2:	e7ea      	b.n	8017dca <_strtod_l+0x8ca>
 8017df4:	460b      	mov	r3, r1
 8017df6:	e7e8      	b.n	8017dca <_strtod_l+0x8ca>
 8017df8:	ea53 030a 	orrs.w	r3, r3, sl
 8017dfc:	d088      	beq.n	8017d10 <_strtod_l+0x810>
 8017dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e00:	b1db      	cbz	r3, 8017e3a <_strtod_l+0x93a>
 8017e02:	423b      	tst	r3, r7
 8017e04:	d0ef      	beq.n	8017de6 <_strtod_l+0x8e6>
 8017e06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e08:	9a04      	ldr	r2, [sp, #16]
 8017e0a:	4650      	mov	r0, sl
 8017e0c:	4659      	mov	r1, fp
 8017e0e:	b1c3      	cbz	r3, 8017e42 <_strtod_l+0x942>
 8017e10:	f7ff fb5a 	bl	80174c8 <sulp>
 8017e14:	4602      	mov	r2, r0
 8017e16:	460b      	mov	r3, r1
 8017e18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e1c:	f7e8 fa46 	bl	80002ac <__adddf3>
 8017e20:	4682      	mov	sl, r0
 8017e22:	468b      	mov	fp, r1
 8017e24:	e7df      	b.n	8017de6 <_strtod_l+0x8e6>
 8017e26:	4013      	ands	r3, r2
 8017e28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8017e2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017e30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017e34:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8017e38:	e7d5      	b.n	8017de6 <_strtod_l+0x8e6>
 8017e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017e3c:	ea13 0f0a 	tst.w	r3, sl
 8017e40:	e7e0      	b.n	8017e04 <_strtod_l+0x904>
 8017e42:	f7ff fb41 	bl	80174c8 <sulp>
 8017e46:	4602      	mov	r2, r0
 8017e48:	460b      	mov	r3, r1
 8017e4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e4e:	f7e8 fa2b 	bl	80002a8 <__aeabi_dsub>
 8017e52:	2200      	movs	r2, #0
 8017e54:	2300      	movs	r3, #0
 8017e56:	4682      	mov	sl, r0
 8017e58:	468b      	mov	fp, r1
 8017e5a:	f7e8 fe45 	bl	8000ae8 <__aeabi_dcmpeq>
 8017e5e:	2800      	cmp	r0, #0
 8017e60:	d0c1      	beq.n	8017de6 <_strtod_l+0x8e6>
 8017e62:	e60e      	b.n	8017a82 <_strtod_l+0x582>
 8017e64:	fffffc02 	.word	0xfffffc02
 8017e68:	7ff00000 	.word	0x7ff00000
 8017e6c:	39500000 	.word	0x39500000
 8017e70:	000fffff 	.word	0x000fffff
 8017e74:	7fefffff 	.word	0x7fefffff
 8017e78:	08032530 	.word	0x08032530
 8017e7c:	4631      	mov	r1, r6
 8017e7e:	4628      	mov	r0, r5
 8017e80:	f002 fba2 	bl	801a5c8 <__ratio>
 8017e84:	ec59 8b10 	vmov	r8, r9, d0
 8017e88:	ee10 0a10 	vmov	r0, s0
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017e92:	4649      	mov	r1, r9
 8017e94:	f7e8 fe3c 	bl	8000b10 <__aeabi_dcmple>
 8017e98:	2800      	cmp	r0, #0
 8017e9a:	d07c      	beq.n	8017f96 <_strtod_l+0xa96>
 8017e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d04c      	beq.n	8017f3c <_strtod_l+0xa3c>
 8017ea2:	4b95      	ldr	r3, [pc, #596]	; (80180f8 <_strtod_l+0xbf8>)
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017eaa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80180f8 <_strtod_l+0xbf8>
 8017eae:	f04f 0800 	mov.w	r8, #0
 8017eb2:	4b92      	ldr	r3, [pc, #584]	; (80180fc <_strtod_l+0xbfc>)
 8017eb4:	403b      	ands	r3, r7
 8017eb6:	9311      	str	r3, [sp, #68]	; 0x44
 8017eb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017eba:	4b91      	ldr	r3, [pc, #580]	; (8018100 <_strtod_l+0xc00>)
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	f040 80b2 	bne.w	8018026 <_strtod_l+0xb26>
 8017ec2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017ec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017eca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8017ece:	ec4b ab10 	vmov	d0, sl, fp
 8017ed2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8017ed6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017eda:	f002 fa9d 	bl	801a418 <__ulp>
 8017ede:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017ee2:	ec53 2b10 	vmov	r2, r3, d0
 8017ee6:	f7e8 fb97 	bl	8000618 <__aeabi_dmul>
 8017eea:	4652      	mov	r2, sl
 8017eec:	465b      	mov	r3, fp
 8017eee:	f7e8 f9dd 	bl	80002ac <__adddf3>
 8017ef2:	460b      	mov	r3, r1
 8017ef4:	4981      	ldr	r1, [pc, #516]	; (80180fc <_strtod_l+0xbfc>)
 8017ef6:	4a83      	ldr	r2, [pc, #524]	; (8018104 <_strtod_l+0xc04>)
 8017ef8:	4019      	ands	r1, r3
 8017efa:	4291      	cmp	r1, r2
 8017efc:	4682      	mov	sl, r0
 8017efe:	d95e      	bls.n	8017fbe <_strtod_l+0xabe>
 8017f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017f02:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017f06:	4293      	cmp	r3, r2
 8017f08:	d103      	bne.n	8017f12 <_strtod_l+0xa12>
 8017f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	f43f ad43 	beq.w	8017998 <_strtod_l+0x498>
 8017f12:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8018110 <_strtod_l+0xc10>
 8017f16:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8017f1a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	f001 ff4f 	bl	8019dc0 <_Bfree>
 8017f22:	9907      	ldr	r1, [sp, #28]
 8017f24:	4620      	mov	r0, r4
 8017f26:	f001 ff4b 	bl	8019dc0 <_Bfree>
 8017f2a:	4631      	mov	r1, r6
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	f001 ff47 	bl	8019dc0 <_Bfree>
 8017f32:	4629      	mov	r1, r5
 8017f34:	4620      	mov	r0, r4
 8017f36:	f001 ff43 	bl	8019dc0 <_Bfree>
 8017f3a:	e613      	b.n	8017b64 <_strtod_l+0x664>
 8017f3c:	f1ba 0f00 	cmp.w	sl, #0
 8017f40:	d11b      	bne.n	8017f7a <_strtod_l+0xa7a>
 8017f42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017f46:	b9f3      	cbnz	r3, 8017f86 <_strtod_l+0xa86>
 8017f48:	4b6b      	ldr	r3, [pc, #428]	; (80180f8 <_strtod_l+0xbf8>)
 8017f4a:	2200      	movs	r2, #0
 8017f4c:	4640      	mov	r0, r8
 8017f4e:	4649      	mov	r1, r9
 8017f50:	f7e8 fdd4 	bl	8000afc <__aeabi_dcmplt>
 8017f54:	b9d0      	cbnz	r0, 8017f8c <_strtod_l+0xa8c>
 8017f56:	4640      	mov	r0, r8
 8017f58:	4649      	mov	r1, r9
 8017f5a:	4b6b      	ldr	r3, [pc, #428]	; (8018108 <_strtod_l+0xc08>)
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	f7e8 fb5b 	bl	8000618 <__aeabi_dmul>
 8017f62:	4680      	mov	r8, r0
 8017f64:	4689      	mov	r9, r1
 8017f66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017f6a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8017f6e:	931b      	str	r3, [sp, #108]	; 0x6c
 8017f70:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8017f74:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8017f78:	e79b      	b.n	8017eb2 <_strtod_l+0x9b2>
 8017f7a:	f1ba 0f01 	cmp.w	sl, #1
 8017f7e:	d102      	bne.n	8017f86 <_strtod_l+0xa86>
 8017f80:	2f00      	cmp	r7, #0
 8017f82:	f43f ad7e 	beq.w	8017a82 <_strtod_l+0x582>
 8017f86:	4b61      	ldr	r3, [pc, #388]	; (801810c <_strtod_l+0xc0c>)
 8017f88:	2200      	movs	r2, #0
 8017f8a:	e78c      	b.n	8017ea6 <_strtod_l+0x9a6>
 8017f8c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8018108 <_strtod_l+0xc08>
 8017f90:	f04f 0800 	mov.w	r8, #0
 8017f94:	e7e7      	b.n	8017f66 <_strtod_l+0xa66>
 8017f96:	4b5c      	ldr	r3, [pc, #368]	; (8018108 <_strtod_l+0xc08>)
 8017f98:	4640      	mov	r0, r8
 8017f9a:	4649      	mov	r1, r9
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	f7e8 fb3b 	bl	8000618 <__aeabi_dmul>
 8017fa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017fa4:	4680      	mov	r8, r0
 8017fa6:	4689      	mov	r9, r1
 8017fa8:	b933      	cbnz	r3, 8017fb8 <_strtod_l+0xab8>
 8017faa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017fae:	9012      	str	r0, [sp, #72]	; 0x48
 8017fb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8017fb2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017fb6:	e7dd      	b.n	8017f74 <_strtod_l+0xa74>
 8017fb8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8017fbc:	e7f9      	b.n	8017fb2 <_strtod_l+0xab2>
 8017fbe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017fc2:	9b04      	ldr	r3, [sp, #16]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d1a8      	bne.n	8017f1a <_strtod_l+0xa1a>
 8017fc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017fcc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017fce:	0d1b      	lsrs	r3, r3, #20
 8017fd0:	051b      	lsls	r3, r3, #20
 8017fd2:	429a      	cmp	r2, r3
 8017fd4:	d1a1      	bne.n	8017f1a <_strtod_l+0xa1a>
 8017fd6:	4640      	mov	r0, r8
 8017fd8:	4649      	mov	r1, r9
 8017fda:	f7e8 fe2d 	bl	8000c38 <__aeabi_d2lz>
 8017fde:	f7e8 faed 	bl	80005bc <__aeabi_l2d>
 8017fe2:	4602      	mov	r2, r0
 8017fe4:	460b      	mov	r3, r1
 8017fe6:	4640      	mov	r0, r8
 8017fe8:	4649      	mov	r1, r9
 8017fea:	f7e8 f95d 	bl	80002a8 <__aeabi_dsub>
 8017fee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ff0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017ff4:	ea43 030a 	orr.w	r3, r3, sl
 8017ff8:	4313      	orrs	r3, r2
 8017ffa:	4680      	mov	r8, r0
 8017ffc:	4689      	mov	r9, r1
 8017ffe:	d053      	beq.n	80180a8 <_strtod_l+0xba8>
 8018000:	a335      	add	r3, pc, #212	; (adr r3, 80180d8 <_strtod_l+0xbd8>)
 8018002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018006:	f7e8 fd79 	bl	8000afc <__aeabi_dcmplt>
 801800a:	2800      	cmp	r0, #0
 801800c:	f47f acce 	bne.w	80179ac <_strtod_l+0x4ac>
 8018010:	a333      	add	r3, pc, #204	; (adr r3, 80180e0 <_strtod_l+0xbe0>)
 8018012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018016:	4640      	mov	r0, r8
 8018018:	4649      	mov	r1, r9
 801801a:	f7e8 fd8d 	bl	8000b38 <__aeabi_dcmpgt>
 801801e:	2800      	cmp	r0, #0
 8018020:	f43f af7b 	beq.w	8017f1a <_strtod_l+0xa1a>
 8018024:	e4c2      	b.n	80179ac <_strtod_l+0x4ac>
 8018026:	9b04      	ldr	r3, [sp, #16]
 8018028:	b333      	cbz	r3, 8018078 <_strtod_l+0xb78>
 801802a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801802c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8018030:	d822      	bhi.n	8018078 <_strtod_l+0xb78>
 8018032:	a32d      	add	r3, pc, #180	; (adr r3, 80180e8 <_strtod_l+0xbe8>)
 8018034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018038:	4640      	mov	r0, r8
 801803a:	4649      	mov	r1, r9
 801803c:	f7e8 fd68 	bl	8000b10 <__aeabi_dcmple>
 8018040:	b1a0      	cbz	r0, 801806c <_strtod_l+0xb6c>
 8018042:	4649      	mov	r1, r9
 8018044:	4640      	mov	r0, r8
 8018046:	f7e8 fdbf 	bl	8000bc8 <__aeabi_d2uiz>
 801804a:	2801      	cmp	r0, #1
 801804c:	bf38      	it	cc
 801804e:	2001      	movcc	r0, #1
 8018050:	f7e8 fa68 	bl	8000524 <__aeabi_ui2d>
 8018054:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018056:	4680      	mov	r8, r0
 8018058:	4689      	mov	r9, r1
 801805a:	bb13      	cbnz	r3, 80180a2 <_strtod_l+0xba2>
 801805c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018060:	9014      	str	r0, [sp, #80]	; 0x50
 8018062:	9315      	str	r3, [sp, #84]	; 0x54
 8018064:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8018068:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801806c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801806e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018070:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8018074:	1a9b      	subs	r3, r3, r2
 8018076:	930d      	str	r3, [sp, #52]	; 0x34
 8018078:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801807c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018080:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8018084:	f002 f9c8 	bl	801a418 <__ulp>
 8018088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801808c:	ec53 2b10 	vmov	r2, r3, d0
 8018090:	f7e8 fac2 	bl	8000618 <__aeabi_dmul>
 8018094:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018098:	f7e8 f908 	bl	80002ac <__adddf3>
 801809c:	4682      	mov	sl, r0
 801809e:	468b      	mov	fp, r1
 80180a0:	e78f      	b.n	8017fc2 <_strtod_l+0xac2>
 80180a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80180a6:	e7dd      	b.n	8018064 <_strtod_l+0xb64>
 80180a8:	a311      	add	r3, pc, #68	; (adr r3, 80180f0 <_strtod_l+0xbf0>)
 80180aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ae:	f7e8 fd25 	bl	8000afc <__aeabi_dcmplt>
 80180b2:	e7b4      	b.n	801801e <_strtod_l+0xb1e>
 80180b4:	2300      	movs	r3, #0
 80180b6:	930e      	str	r3, [sp, #56]	; 0x38
 80180b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80180ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80180bc:	6013      	str	r3, [r2, #0]
 80180be:	f7ff ba65 	b.w	801758c <_strtod_l+0x8c>
 80180c2:	2b65      	cmp	r3, #101	; 0x65
 80180c4:	f43f ab5d 	beq.w	8017782 <_strtod_l+0x282>
 80180c8:	2b45      	cmp	r3, #69	; 0x45
 80180ca:	f43f ab5a 	beq.w	8017782 <_strtod_l+0x282>
 80180ce:	2201      	movs	r2, #1
 80180d0:	f7ff bb92 	b.w	80177f8 <_strtod_l+0x2f8>
 80180d4:	f3af 8000 	nop.w
 80180d8:	94a03595 	.word	0x94a03595
 80180dc:	3fdfffff 	.word	0x3fdfffff
 80180e0:	35afe535 	.word	0x35afe535
 80180e4:	3fe00000 	.word	0x3fe00000
 80180e8:	ffc00000 	.word	0xffc00000
 80180ec:	41dfffff 	.word	0x41dfffff
 80180f0:	94a03595 	.word	0x94a03595
 80180f4:	3fcfffff 	.word	0x3fcfffff
 80180f8:	3ff00000 	.word	0x3ff00000
 80180fc:	7ff00000 	.word	0x7ff00000
 8018100:	7fe00000 	.word	0x7fe00000
 8018104:	7c9fffff 	.word	0x7c9fffff
 8018108:	3fe00000 	.word	0x3fe00000
 801810c:	bff00000 	.word	0xbff00000
 8018110:	7fefffff 	.word	0x7fefffff

08018114 <strtod>:
 8018114:	460a      	mov	r2, r1
 8018116:	4601      	mov	r1, r0
 8018118:	4802      	ldr	r0, [pc, #8]	; (8018124 <strtod+0x10>)
 801811a:	4b03      	ldr	r3, [pc, #12]	; (8018128 <strtod+0x14>)
 801811c:	6800      	ldr	r0, [r0, #0]
 801811e:	f7ff b9ef 	b.w	8017500 <_strtod_l>
 8018122:	bf00      	nop
 8018124:	200005c8 	.word	0x200005c8
 8018128:	20000630 	.word	0x20000630

0801812c <strtok>:
 801812c:	4b16      	ldr	r3, [pc, #88]	; (8018188 <strtok+0x5c>)
 801812e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018130:	681e      	ldr	r6, [r3, #0]
 8018132:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8018134:	4605      	mov	r5, r0
 8018136:	b9fc      	cbnz	r4, 8018178 <strtok+0x4c>
 8018138:	2050      	movs	r0, #80	; 0x50
 801813a:	9101      	str	r1, [sp, #4]
 801813c:	f001 fde6 	bl	8019d0c <malloc>
 8018140:	9901      	ldr	r1, [sp, #4]
 8018142:	65b0      	str	r0, [r6, #88]	; 0x58
 8018144:	4602      	mov	r2, r0
 8018146:	b920      	cbnz	r0, 8018152 <strtok+0x26>
 8018148:	4b10      	ldr	r3, [pc, #64]	; (801818c <strtok+0x60>)
 801814a:	4811      	ldr	r0, [pc, #68]	; (8018190 <strtok+0x64>)
 801814c:	2157      	movs	r1, #87	; 0x57
 801814e:	f000 f99b 	bl	8018488 <__assert_func>
 8018152:	e9c0 4400 	strd	r4, r4, [r0]
 8018156:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801815a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801815e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8018162:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8018166:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801816a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801816e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8018172:	6184      	str	r4, [r0, #24]
 8018174:	7704      	strb	r4, [r0, #28]
 8018176:	6244      	str	r4, [r0, #36]	; 0x24
 8018178:	6db2      	ldr	r2, [r6, #88]	; 0x58
 801817a:	2301      	movs	r3, #1
 801817c:	4628      	mov	r0, r5
 801817e:	b002      	add	sp, #8
 8018180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018184:	f000 b806 	b.w	8018194 <__strtok_r>
 8018188:	200005c8 	.word	0x200005c8
 801818c:	0803248c 	.word	0x0803248c
 8018190:	08032558 	.word	0x08032558

08018194 <__strtok_r>:
 8018194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018196:	b908      	cbnz	r0, 801819c <__strtok_r+0x8>
 8018198:	6810      	ldr	r0, [r2, #0]
 801819a:	b188      	cbz	r0, 80181c0 <__strtok_r+0x2c>
 801819c:	4604      	mov	r4, r0
 801819e:	4620      	mov	r0, r4
 80181a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80181a4:	460f      	mov	r7, r1
 80181a6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80181aa:	b91e      	cbnz	r6, 80181b4 <__strtok_r+0x20>
 80181ac:	b965      	cbnz	r5, 80181c8 <__strtok_r+0x34>
 80181ae:	6015      	str	r5, [r2, #0]
 80181b0:	4628      	mov	r0, r5
 80181b2:	e005      	b.n	80181c0 <__strtok_r+0x2c>
 80181b4:	42b5      	cmp	r5, r6
 80181b6:	d1f6      	bne.n	80181a6 <__strtok_r+0x12>
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d1f0      	bne.n	801819e <__strtok_r+0xa>
 80181bc:	6014      	str	r4, [r2, #0]
 80181be:	7003      	strb	r3, [r0, #0]
 80181c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181c2:	461c      	mov	r4, r3
 80181c4:	e00c      	b.n	80181e0 <__strtok_r+0x4c>
 80181c6:	b915      	cbnz	r5, 80181ce <__strtok_r+0x3a>
 80181c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80181cc:	460e      	mov	r6, r1
 80181ce:	f816 5b01 	ldrb.w	r5, [r6], #1
 80181d2:	42ab      	cmp	r3, r5
 80181d4:	d1f7      	bne.n	80181c6 <__strtok_r+0x32>
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d0f3      	beq.n	80181c2 <__strtok_r+0x2e>
 80181da:	2300      	movs	r3, #0
 80181dc:	f804 3c01 	strb.w	r3, [r4, #-1]
 80181e0:	6014      	str	r4, [r2, #0]
 80181e2:	e7ed      	b.n	80181c0 <__strtok_r+0x2c>

080181e4 <strtok_r>:
 80181e4:	2301      	movs	r3, #1
 80181e6:	f7ff bfd5 	b.w	8018194 <__strtok_r>
	...

080181ec <_strtol_l.isra.0>:
 80181ec:	2b01      	cmp	r3, #1
 80181ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181f2:	d001      	beq.n	80181f8 <_strtol_l.isra.0+0xc>
 80181f4:	2b24      	cmp	r3, #36	; 0x24
 80181f6:	d906      	bls.n	8018206 <_strtol_l.isra.0+0x1a>
 80181f8:	f000 ffde 	bl	80191b8 <__errno>
 80181fc:	2316      	movs	r3, #22
 80181fe:	6003      	str	r3, [r0, #0]
 8018200:	2000      	movs	r0, #0
 8018202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018206:	4f3a      	ldr	r7, [pc, #232]	; (80182f0 <_strtol_l.isra.0+0x104>)
 8018208:	468e      	mov	lr, r1
 801820a:	4676      	mov	r6, lr
 801820c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018210:	5de5      	ldrb	r5, [r4, r7]
 8018212:	f015 0508 	ands.w	r5, r5, #8
 8018216:	d1f8      	bne.n	801820a <_strtol_l.isra.0+0x1e>
 8018218:	2c2d      	cmp	r4, #45	; 0x2d
 801821a:	d134      	bne.n	8018286 <_strtol_l.isra.0+0x9a>
 801821c:	f89e 4000 	ldrb.w	r4, [lr]
 8018220:	f04f 0801 	mov.w	r8, #1
 8018224:	f106 0e02 	add.w	lr, r6, #2
 8018228:	2b00      	cmp	r3, #0
 801822a:	d05c      	beq.n	80182e6 <_strtol_l.isra.0+0xfa>
 801822c:	2b10      	cmp	r3, #16
 801822e:	d10c      	bne.n	801824a <_strtol_l.isra.0+0x5e>
 8018230:	2c30      	cmp	r4, #48	; 0x30
 8018232:	d10a      	bne.n	801824a <_strtol_l.isra.0+0x5e>
 8018234:	f89e 4000 	ldrb.w	r4, [lr]
 8018238:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801823c:	2c58      	cmp	r4, #88	; 0x58
 801823e:	d14d      	bne.n	80182dc <_strtol_l.isra.0+0xf0>
 8018240:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018244:	2310      	movs	r3, #16
 8018246:	f10e 0e02 	add.w	lr, lr, #2
 801824a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801824e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8018252:	2600      	movs	r6, #0
 8018254:	fbbc f9f3 	udiv	r9, ip, r3
 8018258:	4635      	mov	r5, r6
 801825a:	fb03 ca19 	mls	sl, r3, r9, ip
 801825e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018262:	2f09      	cmp	r7, #9
 8018264:	d818      	bhi.n	8018298 <_strtol_l.isra.0+0xac>
 8018266:	463c      	mov	r4, r7
 8018268:	42a3      	cmp	r3, r4
 801826a:	dd24      	ble.n	80182b6 <_strtol_l.isra.0+0xca>
 801826c:	2e00      	cmp	r6, #0
 801826e:	db1f      	blt.n	80182b0 <_strtol_l.isra.0+0xc4>
 8018270:	45a9      	cmp	r9, r5
 8018272:	d31d      	bcc.n	80182b0 <_strtol_l.isra.0+0xc4>
 8018274:	d101      	bne.n	801827a <_strtol_l.isra.0+0x8e>
 8018276:	45a2      	cmp	sl, r4
 8018278:	db1a      	blt.n	80182b0 <_strtol_l.isra.0+0xc4>
 801827a:	fb05 4503 	mla	r5, r5, r3, r4
 801827e:	2601      	movs	r6, #1
 8018280:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018284:	e7eb      	b.n	801825e <_strtol_l.isra.0+0x72>
 8018286:	2c2b      	cmp	r4, #43	; 0x2b
 8018288:	bf08      	it	eq
 801828a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801828e:	46a8      	mov	r8, r5
 8018290:	bf08      	it	eq
 8018292:	f106 0e02 	addeq.w	lr, r6, #2
 8018296:	e7c7      	b.n	8018228 <_strtol_l.isra.0+0x3c>
 8018298:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801829c:	2f19      	cmp	r7, #25
 801829e:	d801      	bhi.n	80182a4 <_strtol_l.isra.0+0xb8>
 80182a0:	3c37      	subs	r4, #55	; 0x37
 80182a2:	e7e1      	b.n	8018268 <_strtol_l.isra.0+0x7c>
 80182a4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80182a8:	2f19      	cmp	r7, #25
 80182aa:	d804      	bhi.n	80182b6 <_strtol_l.isra.0+0xca>
 80182ac:	3c57      	subs	r4, #87	; 0x57
 80182ae:	e7db      	b.n	8018268 <_strtol_l.isra.0+0x7c>
 80182b0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80182b4:	e7e4      	b.n	8018280 <_strtol_l.isra.0+0x94>
 80182b6:	2e00      	cmp	r6, #0
 80182b8:	da05      	bge.n	80182c6 <_strtol_l.isra.0+0xda>
 80182ba:	2322      	movs	r3, #34	; 0x22
 80182bc:	6003      	str	r3, [r0, #0]
 80182be:	4665      	mov	r5, ip
 80182c0:	b942      	cbnz	r2, 80182d4 <_strtol_l.isra.0+0xe8>
 80182c2:	4628      	mov	r0, r5
 80182c4:	e79d      	b.n	8018202 <_strtol_l.isra.0+0x16>
 80182c6:	f1b8 0f00 	cmp.w	r8, #0
 80182ca:	d000      	beq.n	80182ce <_strtol_l.isra.0+0xe2>
 80182cc:	426d      	negs	r5, r5
 80182ce:	2a00      	cmp	r2, #0
 80182d0:	d0f7      	beq.n	80182c2 <_strtol_l.isra.0+0xd6>
 80182d2:	b10e      	cbz	r6, 80182d8 <_strtol_l.isra.0+0xec>
 80182d4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80182d8:	6011      	str	r1, [r2, #0]
 80182da:	e7f2      	b.n	80182c2 <_strtol_l.isra.0+0xd6>
 80182dc:	2430      	movs	r4, #48	; 0x30
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d1b3      	bne.n	801824a <_strtol_l.isra.0+0x5e>
 80182e2:	2308      	movs	r3, #8
 80182e4:	e7b1      	b.n	801824a <_strtol_l.isra.0+0x5e>
 80182e6:	2c30      	cmp	r4, #48	; 0x30
 80182e8:	d0a4      	beq.n	8018234 <_strtol_l.isra.0+0x48>
 80182ea:	230a      	movs	r3, #10
 80182ec:	e7ad      	b.n	801824a <_strtol_l.isra.0+0x5e>
 80182ee:	bf00      	nop
 80182f0:	08032353 	.word	0x08032353

080182f4 <strtol>:
 80182f4:	4613      	mov	r3, r2
 80182f6:	460a      	mov	r2, r1
 80182f8:	4601      	mov	r1, r0
 80182fa:	4802      	ldr	r0, [pc, #8]	; (8018304 <strtol+0x10>)
 80182fc:	6800      	ldr	r0, [r0, #0]
 80182fe:	f7ff bf75 	b.w	80181ec <_strtol_l.isra.0>
 8018302:	bf00      	nop
 8018304:	200005c8 	.word	0x200005c8

08018308 <__swbuf_r>:
 8018308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801830a:	460e      	mov	r6, r1
 801830c:	4614      	mov	r4, r2
 801830e:	4605      	mov	r5, r0
 8018310:	b118      	cbz	r0, 801831a <__swbuf_r+0x12>
 8018312:	6983      	ldr	r3, [r0, #24]
 8018314:	b90b      	cbnz	r3, 801831a <__swbuf_r+0x12>
 8018316:	f001 f86f 	bl	80193f8 <__sinit>
 801831a:	4b21      	ldr	r3, [pc, #132]	; (80183a0 <__swbuf_r+0x98>)
 801831c:	429c      	cmp	r4, r3
 801831e:	d12b      	bne.n	8018378 <__swbuf_r+0x70>
 8018320:	686c      	ldr	r4, [r5, #4]
 8018322:	69a3      	ldr	r3, [r4, #24]
 8018324:	60a3      	str	r3, [r4, #8]
 8018326:	89a3      	ldrh	r3, [r4, #12]
 8018328:	071a      	lsls	r2, r3, #28
 801832a:	d52f      	bpl.n	801838c <__swbuf_r+0x84>
 801832c:	6923      	ldr	r3, [r4, #16]
 801832e:	b36b      	cbz	r3, 801838c <__swbuf_r+0x84>
 8018330:	6923      	ldr	r3, [r4, #16]
 8018332:	6820      	ldr	r0, [r4, #0]
 8018334:	1ac0      	subs	r0, r0, r3
 8018336:	6963      	ldr	r3, [r4, #20]
 8018338:	b2f6      	uxtb	r6, r6
 801833a:	4283      	cmp	r3, r0
 801833c:	4637      	mov	r7, r6
 801833e:	dc04      	bgt.n	801834a <__swbuf_r+0x42>
 8018340:	4621      	mov	r1, r4
 8018342:	4628      	mov	r0, r5
 8018344:	f000 ffc4 	bl	80192d0 <_fflush_r>
 8018348:	bb30      	cbnz	r0, 8018398 <__swbuf_r+0x90>
 801834a:	68a3      	ldr	r3, [r4, #8]
 801834c:	3b01      	subs	r3, #1
 801834e:	60a3      	str	r3, [r4, #8]
 8018350:	6823      	ldr	r3, [r4, #0]
 8018352:	1c5a      	adds	r2, r3, #1
 8018354:	6022      	str	r2, [r4, #0]
 8018356:	701e      	strb	r6, [r3, #0]
 8018358:	6963      	ldr	r3, [r4, #20]
 801835a:	3001      	adds	r0, #1
 801835c:	4283      	cmp	r3, r0
 801835e:	d004      	beq.n	801836a <__swbuf_r+0x62>
 8018360:	89a3      	ldrh	r3, [r4, #12]
 8018362:	07db      	lsls	r3, r3, #31
 8018364:	d506      	bpl.n	8018374 <__swbuf_r+0x6c>
 8018366:	2e0a      	cmp	r6, #10
 8018368:	d104      	bne.n	8018374 <__swbuf_r+0x6c>
 801836a:	4621      	mov	r1, r4
 801836c:	4628      	mov	r0, r5
 801836e:	f000 ffaf 	bl	80192d0 <_fflush_r>
 8018372:	b988      	cbnz	r0, 8018398 <__swbuf_r+0x90>
 8018374:	4638      	mov	r0, r7
 8018376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018378:	4b0a      	ldr	r3, [pc, #40]	; (80183a4 <__swbuf_r+0x9c>)
 801837a:	429c      	cmp	r4, r3
 801837c:	d101      	bne.n	8018382 <__swbuf_r+0x7a>
 801837e:	68ac      	ldr	r4, [r5, #8]
 8018380:	e7cf      	b.n	8018322 <__swbuf_r+0x1a>
 8018382:	4b09      	ldr	r3, [pc, #36]	; (80183a8 <__swbuf_r+0xa0>)
 8018384:	429c      	cmp	r4, r3
 8018386:	bf08      	it	eq
 8018388:	68ec      	ldreq	r4, [r5, #12]
 801838a:	e7ca      	b.n	8018322 <__swbuf_r+0x1a>
 801838c:	4621      	mov	r1, r4
 801838e:	4628      	mov	r0, r5
 8018390:	f000 f80c 	bl	80183ac <__swsetup_r>
 8018394:	2800      	cmp	r0, #0
 8018396:	d0cb      	beq.n	8018330 <__swbuf_r+0x28>
 8018398:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801839c:	e7ea      	b.n	8018374 <__swbuf_r+0x6c>
 801839e:	bf00      	nop
 80183a0:	08032694 	.word	0x08032694
 80183a4:	080326b4 	.word	0x080326b4
 80183a8:	08032674 	.word	0x08032674

080183ac <__swsetup_r>:
 80183ac:	4b32      	ldr	r3, [pc, #200]	; (8018478 <__swsetup_r+0xcc>)
 80183ae:	b570      	push	{r4, r5, r6, lr}
 80183b0:	681d      	ldr	r5, [r3, #0]
 80183b2:	4606      	mov	r6, r0
 80183b4:	460c      	mov	r4, r1
 80183b6:	b125      	cbz	r5, 80183c2 <__swsetup_r+0x16>
 80183b8:	69ab      	ldr	r3, [r5, #24]
 80183ba:	b913      	cbnz	r3, 80183c2 <__swsetup_r+0x16>
 80183bc:	4628      	mov	r0, r5
 80183be:	f001 f81b 	bl	80193f8 <__sinit>
 80183c2:	4b2e      	ldr	r3, [pc, #184]	; (801847c <__swsetup_r+0xd0>)
 80183c4:	429c      	cmp	r4, r3
 80183c6:	d10f      	bne.n	80183e8 <__swsetup_r+0x3c>
 80183c8:	686c      	ldr	r4, [r5, #4]
 80183ca:	89a3      	ldrh	r3, [r4, #12]
 80183cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80183d0:	0719      	lsls	r1, r3, #28
 80183d2:	d42c      	bmi.n	801842e <__swsetup_r+0x82>
 80183d4:	06dd      	lsls	r5, r3, #27
 80183d6:	d411      	bmi.n	80183fc <__swsetup_r+0x50>
 80183d8:	2309      	movs	r3, #9
 80183da:	6033      	str	r3, [r6, #0]
 80183dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80183e0:	81a3      	strh	r3, [r4, #12]
 80183e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80183e6:	e03e      	b.n	8018466 <__swsetup_r+0xba>
 80183e8:	4b25      	ldr	r3, [pc, #148]	; (8018480 <__swsetup_r+0xd4>)
 80183ea:	429c      	cmp	r4, r3
 80183ec:	d101      	bne.n	80183f2 <__swsetup_r+0x46>
 80183ee:	68ac      	ldr	r4, [r5, #8]
 80183f0:	e7eb      	b.n	80183ca <__swsetup_r+0x1e>
 80183f2:	4b24      	ldr	r3, [pc, #144]	; (8018484 <__swsetup_r+0xd8>)
 80183f4:	429c      	cmp	r4, r3
 80183f6:	bf08      	it	eq
 80183f8:	68ec      	ldreq	r4, [r5, #12]
 80183fa:	e7e6      	b.n	80183ca <__swsetup_r+0x1e>
 80183fc:	0758      	lsls	r0, r3, #29
 80183fe:	d512      	bpl.n	8018426 <__swsetup_r+0x7a>
 8018400:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018402:	b141      	cbz	r1, 8018416 <__swsetup_r+0x6a>
 8018404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018408:	4299      	cmp	r1, r3
 801840a:	d002      	beq.n	8018412 <__swsetup_r+0x66>
 801840c:	4630      	mov	r0, r6
 801840e:	f002 f961 	bl	801a6d4 <_free_r>
 8018412:	2300      	movs	r3, #0
 8018414:	6363      	str	r3, [r4, #52]	; 0x34
 8018416:	89a3      	ldrh	r3, [r4, #12]
 8018418:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801841c:	81a3      	strh	r3, [r4, #12]
 801841e:	2300      	movs	r3, #0
 8018420:	6063      	str	r3, [r4, #4]
 8018422:	6923      	ldr	r3, [r4, #16]
 8018424:	6023      	str	r3, [r4, #0]
 8018426:	89a3      	ldrh	r3, [r4, #12]
 8018428:	f043 0308 	orr.w	r3, r3, #8
 801842c:	81a3      	strh	r3, [r4, #12]
 801842e:	6923      	ldr	r3, [r4, #16]
 8018430:	b94b      	cbnz	r3, 8018446 <__swsetup_r+0x9a>
 8018432:	89a3      	ldrh	r3, [r4, #12]
 8018434:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801843c:	d003      	beq.n	8018446 <__swsetup_r+0x9a>
 801843e:	4621      	mov	r1, r4
 8018440:	4630      	mov	r0, r6
 8018442:	f001 fc23 	bl	8019c8c <__smakebuf_r>
 8018446:	89a0      	ldrh	r0, [r4, #12]
 8018448:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801844c:	f010 0301 	ands.w	r3, r0, #1
 8018450:	d00a      	beq.n	8018468 <__swsetup_r+0xbc>
 8018452:	2300      	movs	r3, #0
 8018454:	60a3      	str	r3, [r4, #8]
 8018456:	6963      	ldr	r3, [r4, #20]
 8018458:	425b      	negs	r3, r3
 801845a:	61a3      	str	r3, [r4, #24]
 801845c:	6923      	ldr	r3, [r4, #16]
 801845e:	b943      	cbnz	r3, 8018472 <__swsetup_r+0xc6>
 8018460:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018464:	d1ba      	bne.n	80183dc <__swsetup_r+0x30>
 8018466:	bd70      	pop	{r4, r5, r6, pc}
 8018468:	0781      	lsls	r1, r0, #30
 801846a:	bf58      	it	pl
 801846c:	6963      	ldrpl	r3, [r4, #20]
 801846e:	60a3      	str	r3, [r4, #8]
 8018470:	e7f4      	b.n	801845c <__swsetup_r+0xb0>
 8018472:	2000      	movs	r0, #0
 8018474:	e7f7      	b.n	8018466 <__swsetup_r+0xba>
 8018476:	bf00      	nop
 8018478:	200005c8 	.word	0x200005c8
 801847c:	08032694 	.word	0x08032694
 8018480:	080326b4 	.word	0x080326b4
 8018484:	08032674 	.word	0x08032674

08018488 <__assert_func>:
 8018488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801848a:	4614      	mov	r4, r2
 801848c:	461a      	mov	r2, r3
 801848e:	4b09      	ldr	r3, [pc, #36]	; (80184b4 <__assert_func+0x2c>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	4605      	mov	r5, r0
 8018494:	68d8      	ldr	r0, [r3, #12]
 8018496:	b14c      	cbz	r4, 80184ac <__assert_func+0x24>
 8018498:	4b07      	ldr	r3, [pc, #28]	; (80184b8 <__assert_func+0x30>)
 801849a:	9100      	str	r1, [sp, #0]
 801849c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80184a0:	4906      	ldr	r1, [pc, #24]	; (80184bc <__assert_func+0x34>)
 80184a2:	462b      	mov	r3, r5
 80184a4:	f001 f826 	bl	80194f4 <fiprintf>
 80184a8:	f002 fcf0 	bl	801ae8c <abort>
 80184ac:	4b04      	ldr	r3, [pc, #16]	; (80184c0 <__assert_func+0x38>)
 80184ae:	461c      	mov	r4, r3
 80184b0:	e7f3      	b.n	801849a <__assert_func+0x12>
 80184b2:	bf00      	nop
 80184b4:	200005c8 	.word	0x200005c8
 80184b8:	080325b9 	.word	0x080325b9
 80184bc:	080325c6 	.word	0x080325c6
 80184c0:	080325f4 	.word	0x080325f4

080184c4 <quorem>:
 80184c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184c8:	6903      	ldr	r3, [r0, #16]
 80184ca:	690c      	ldr	r4, [r1, #16]
 80184cc:	42a3      	cmp	r3, r4
 80184ce:	4607      	mov	r7, r0
 80184d0:	f2c0 8081 	blt.w	80185d6 <quorem+0x112>
 80184d4:	3c01      	subs	r4, #1
 80184d6:	f101 0814 	add.w	r8, r1, #20
 80184da:	f100 0514 	add.w	r5, r0, #20
 80184de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80184e2:	9301      	str	r3, [sp, #4]
 80184e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80184e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80184ec:	3301      	adds	r3, #1
 80184ee:	429a      	cmp	r2, r3
 80184f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80184f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80184f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80184fc:	d331      	bcc.n	8018562 <quorem+0x9e>
 80184fe:	f04f 0e00 	mov.w	lr, #0
 8018502:	4640      	mov	r0, r8
 8018504:	46ac      	mov	ip, r5
 8018506:	46f2      	mov	sl, lr
 8018508:	f850 2b04 	ldr.w	r2, [r0], #4
 801850c:	b293      	uxth	r3, r2
 801850e:	fb06 e303 	mla	r3, r6, r3, lr
 8018512:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018516:	b29b      	uxth	r3, r3
 8018518:	ebaa 0303 	sub.w	r3, sl, r3
 801851c:	0c12      	lsrs	r2, r2, #16
 801851e:	f8dc a000 	ldr.w	sl, [ip]
 8018522:	fb06 e202 	mla	r2, r6, r2, lr
 8018526:	fa13 f38a 	uxtah	r3, r3, sl
 801852a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801852e:	fa1f fa82 	uxth.w	sl, r2
 8018532:	f8dc 2000 	ldr.w	r2, [ip]
 8018536:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801853a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801853e:	b29b      	uxth	r3, r3
 8018540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018544:	4581      	cmp	r9, r0
 8018546:	f84c 3b04 	str.w	r3, [ip], #4
 801854a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801854e:	d2db      	bcs.n	8018508 <quorem+0x44>
 8018550:	f855 300b 	ldr.w	r3, [r5, fp]
 8018554:	b92b      	cbnz	r3, 8018562 <quorem+0x9e>
 8018556:	9b01      	ldr	r3, [sp, #4]
 8018558:	3b04      	subs	r3, #4
 801855a:	429d      	cmp	r5, r3
 801855c:	461a      	mov	r2, r3
 801855e:	d32e      	bcc.n	80185be <quorem+0xfa>
 8018560:	613c      	str	r4, [r7, #16]
 8018562:	4638      	mov	r0, r7
 8018564:	f001 feb4 	bl	801a2d0 <__mcmp>
 8018568:	2800      	cmp	r0, #0
 801856a:	db24      	blt.n	80185b6 <quorem+0xf2>
 801856c:	3601      	adds	r6, #1
 801856e:	4628      	mov	r0, r5
 8018570:	f04f 0c00 	mov.w	ip, #0
 8018574:	f858 2b04 	ldr.w	r2, [r8], #4
 8018578:	f8d0 e000 	ldr.w	lr, [r0]
 801857c:	b293      	uxth	r3, r2
 801857e:	ebac 0303 	sub.w	r3, ip, r3
 8018582:	0c12      	lsrs	r2, r2, #16
 8018584:	fa13 f38e 	uxtah	r3, r3, lr
 8018588:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801858c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018590:	b29b      	uxth	r3, r3
 8018592:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018596:	45c1      	cmp	r9, r8
 8018598:	f840 3b04 	str.w	r3, [r0], #4
 801859c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80185a0:	d2e8      	bcs.n	8018574 <quorem+0xb0>
 80185a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80185a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80185aa:	b922      	cbnz	r2, 80185b6 <quorem+0xf2>
 80185ac:	3b04      	subs	r3, #4
 80185ae:	429d      	cmp	r5, r3
 80185b0:	461a      	mov	r2, r3
 80185b2:	d30a      	bcc.n	80185ca <quorem+0x106>
 80185b4:	613c      	str	r4, [r7, #16]
 80185b6:	4630      	mov	r0, r6
 80185b8:	b003      	add	sp, #12
 80185ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185be:	6812      	ldr	r2, [r2, #0]
 80185c0:	3b04      	subs	r3, #4
 80185c2:	2a00      	cmp	r2, #0
 80185c4:	d1cc      	bne.n	8018560 <quorem+0x9c>
 80185c6:	3c01      	subs	r4, #1
 80185c8:	e7c7      	b.n	801855a <quorem+0x96>
 80185ca:	6812      	ldr	r2, [r2, #0]
 80185cc:	3b04      	subs	r3, #4
 80185ce:	2a00      	cmp	r2, #0
 80185d0:	d1f0      	bne.n	80185b4 <quorem+0xf0>
 80185d2:	3c01      	subs	r4, #1
 80185d4:	e7eb      	b.n	80185ae <quorem+0xea>
 80185d6:	2000      	movs	r0, #0
 80185d8:	e7ee      	b.n	80185b8 <quorem+0xf4>
 80185da:	0000      	movs	r0, r0
 80185dc:	0000      	movs	r0, r0
	...

080185e0 <_dtoa_r>:
 80185e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185e4:	ed2d 8b02 	vpush	{d8}
 80185e8:	ec57 6b10 	vmov	r6, r7, d0
 80185ec:	b095      	sub	sp, #84	; 0x54
 80185ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80185f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80185f4:	9105      	str	r1, [sp, #20]
 80185f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80185fa:	4604      	mov	r4, r0
 80185fc:	9209      	str	r2, [sp, #36]	; 0x24
 80185fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8018600:	b975      	cbnz	r5, 8018620 <_dtoa_r+0x40>
 8018602:	2010      	movs	r0, #16
 8018604:	f001 fb82 	bl	8019d0c <malloc>
 8018608:	4602      	mov	r2, r0
 801860a:	6260      	str	r0, [r4, #36]	; 0x24
 801860c:	b920      	cbnz	r0, 8018618 <_dtoa_r+0x38>
 801860e:	4bb2      	ldr	r3, [pc, #712]	; (80188d8 <_dtoa_r+0x2f8>)
 8018610:	21ea      	movs	r1, #234	; 0xea
 8018612:	48b2      	ldr	r0, [pc, #712]	; (80188dc <_dtoa_r+0x2fc>)
 8018614:	f7ff ff38 	bl	8018488 <__assert_func>
 8018618:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801861c:	6005      	str	r5, [r0, #0]
 801861e:	60c5      	str	r5, [r0, #12]
 8018620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018622:	6819      	ldr	r1, [r3, #0]
 8018624:	b151      	cbz	r1, 801863c <_dtoa_r+0x5c>
 8018626:	685a      	ldr	r2, [r3, #4]
 8018628:	604a      	str	r2, [r1, #4]
 801862a:	2301      	movs	r3, #1
 801862c:	4093      	lsls	r3, r2
 801862e:	608b      	str	r3, [r1, #8]
 8018630:	4620      	mov	r0, r4
 8018632:	f001 fbc5 	bl	8019dc0 <_Bfree>
 8018636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018638:	2200      	movs	r2, #0
 801863a:	601a      	str	r2, [r3, #0]
 801863c:	1e3b      	subs	r3, r7, #0
 801863e:	bfb9      	ittee	lt
 8018640:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018644:	9303      	strlt	r3, [sp, #12]
 8018646:	2300      	movge	r3, #0
 8018648:	f8c8 3000 	strge.w	r3, [r8]
 801864c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018650:	4ba3      	ldr	r3, [pc, #652]	; (80188e0 <_dtoa_r+0x300>)
 8018652:	bfbc      	itt	lt
 8018654:	2201      	movlt	r2, #1
 8018656:	f8c8 2000 	strlt.w	r2, [r8]
 801865a:	ea33 0309 	bics.w	r3, r3, r9
 801865e:	d11b      	bne.n	8018698 <_dtoa_r+0xb8>
 8018660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018662:	f242 730f 	movw	r3, #9999	; 0x270f
 8018666:	6013      	str	r3, [r2, #0]
 8018668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801866c:	4333      	orrs	r3, r6
 801866e:	f000 857a 	beq.w	8019166 <_dtoa_r+0xb86>
 8018672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018674:	b963      	cbnz	r3, 8018690 <_dtoa_r+0xb0>
 8018676:	4b9b      	ldr	r3, [pc, #620]	; (80188e4 <_dtoa_r+0x304>)
 8018678:	e024      	b.n	80186c4 <_dtoa_r+0xe4>
 801867a:	4b9b      	ldr	r3, [pc, #620]	; (80188e8 <_dtoa_r+0x308>)
 801867c:	9300      	str	r3, [sp, #0]
 801867e:	3308      	adds	r3, #8
 8018680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018682:	6013      	str	r3, [r2, #0]
 8018684:	9800      	ldr	r0, [sp, #0]
 8018686:	b015      	add	sp, #84	; 0x54
 8018688:	ecbd 8b02 	vpop	{d8}
 801868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018690:	4b94      	ldr	r3, [pc, #592]	; (80188e4 <_dtoa_r+0x304>)
 8018692:	9300      	str	r3, [sp, #0]
 8018694:	3303      	adds	r3, #3
 8018696:	e7f3      	b.n	8018680 <_dtoa_r+0xa0>
 8018698:	ed9d 7b02 	vldr	d7, [sp, #8]
 801869c:	2200      	movs	r2, #0
 801869e:	ec51 0b17 	vmov	r0, r1, d7
 80186a2:	2300      	movs	r3, #0
 80186a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80186a8:	f7e8 fa1e 	bl	8000ae8 <__aeabi_dcmpeq>
 80186ac:	4680      	mov	r8, r0
 80186ae:	b158      	cbz	r0, 80186c8 <_dtoa_r+0xe8>
 80186b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80186b2:	2301      	movs	r3, #1
 80186b4:	6013      	str	r3, [r2, #0]
 80186b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	f000 8551 	beq.w	8019160 <_dtoa_r+0xb80>
 80186be:	488b      	ldr	r0, [pc, #556]	; (80188ec <_dtoa_r+0x30c>)
 80186c0:	6018      	str	r0, [r3, #0]
 80186c2:	1e43      	subs	r3, r0, #1
 80186c4:	9300      	str	r3, [sp, #0]
 80186c6:	e7dd      	b.n	8018684 <_dtoa_r+0xa4>
 80186c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80186cc:	aa12      	add	r2, sp, #72	; 0x48
 80186ce:	a913      	add	r1, sp, #76	; 0x4c
 80186d0:	4620      	mov	r0, r4
 80186d2:	f001 ff1d 	bl	801a510 <__d2b>
 80186d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80186da:	4683      	mov	fp, r0
 80186dc:	2d00      	cmp	r5, #0
 80186de:	d07c      	beq.n	80187da <_dtoa_r+0x1fa>
 80186e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80186e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80186ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80186ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80186f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80186f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80186fa:	4b7d      	ldr	r3, [pc, #500]	; (80188f0 <_dtoa_r+0x310>)
 80186fc:	2200      	movs	r2, #0
 80186fe:	4630      	mov	r0, r6
 8018700:	4639      	mov	r1, r7
 8018702:	f7e7 fdd1 	bl	80002a8 <__aeabi_dsub>
 8018706:	a36e      	add	r3, pc, #440	; (adr r3, 80188c0 <_dtoa_r+0x2e0>)
 8018708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801870c:	f7e7 ff84 	bl	8000618 <__aeabi_dmul>
 8018710:	a36d      	add	r3, pc, #436	; (adr r3, 80188c8 <_dtoa_r+0x2e8>)
 8018712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018716:	f7e7 fdc9 	bl	80002ac <__adddf3>
 801871a:	4606      	mov	r6, r0
 801871c:	4628      	mov	r0, r5
 801871e:	460f      	mov	r7, r1
 8018720:	f7e7 ff10 	bl	8000544 <__aeabi_i2d>
 8018724:	a36a      	add	r3, pc, #424	; (adr r3, 80188d0 <_dtoa_r+0x2f0>)
 8018726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801872a:	f7e7 ff75 	bl	8000618 <__aeabi_dmul>
 801872e:	4602      	mov	r2, r0
 8018730:	460b      	mov	r3, r1
 8018732:	4630      	mov	r0, r6
 8018734:	4639      	mov	r1, r7
 8018736:	f7e7 fdb9 	bl	80002ac <__adddf3>
 801873a:	4606      	mov	r6, r0
 801873c:	460f      	mov	r7, r1
 801873e:	f7e8 fa1b 	bl	8000b78 <__aeabi_d2iz>
 8018742:	2200      	movs	r2, #0
 8018744:	4682      	mov	sl, r0
 8018746:	2300      	movs	r3, #0
 8018748:	4630      	mov	r0, r6
 801874a:	4639      	mov	r1, r7
 801874c:	f7e8 f9d6 	bl	8000afc <__aeabi_dcmplt>
 8018750:	b148      	cbz	r0, 8018766 <_dtoa_r+0x186>
 8018752:	4650      	mov	r0, sl
 8018754:	f7e7 fef6 	bl	8000544 <__aeabi_i2d>
 8018758:	4632      	mov	r2, r6
 801875a:	463b      	mov	r3, r7
 801875c:	f7e8 f9c4 	bl	8000ae8 <__aeabi_dcmpeq>
 8018760:	b908      	cbnz	r0, 8018766 <_dtoa_r+0x186>
 8018762:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018766:	f1ba 0f16 	cmp.w	sl, #22
 801876a:	d854      	bhi.n	8018816 <_dtoa_r+0x236>
 801876c:	4b61      	ldr	r3, [pc, #388]	; (80188f4 <_dtoa_r+0x314>)
 801876e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801877a:	f7e8 f9bf 	bl	8000afc <__aeabi_dcmplt>
 801877e:	2800      	cmp	r0, #0
 8018780:	d04b      	beq.n	801881a <_dtoa_r+0x23a>
 8018782:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018786:	2300      	movs	r3, #0
 8018788:	930e      	str	r3, [sp, #56]	; 0x38
 801878a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801878c:	1b5d      	subs	r5, r3, r5
 801878e:	1e6b      	subs	r3, r5, #1
 8018790:	9304      	str	r3, [sp, #16]
 8018792:	bf43      	ittte	mi
 8018794:	2300      	movmi	r3, #0
 8018796:	f1c5 0801 	rsbmi	r8, r5, #1
 801879a:	9304      	strmi	r3, [sp, #16]
 801879c:	f04f 0800 	movpl.w	r8, #0
 80187a0:	f1ba 0f00 	cmp.w	sl, #0
 80187a4:	db3b      	blt.n	801881e <_dtoa_r+0x23e>
 80187a6:	9b04      	ldr	r3, [sp, #16]
 80187a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80187ac:	4453      	add	r3, sl
 80187ae:	9304      	str	r3, [sp, #16]
 80187b0:	2300      	movs	r3, #0
 80187b2:	9306      	str	r3, [sp, #24]
 80187b4:	9b05      	ldr	r3, [sp, #20]
 80187b6:	2b09      	cmp	r3, #9
 80187b8:	d869      	bhi.n	801888e <_dtoa_r+0x2ae>
 80187ba:	2b05      	cmp	r3, #5
 80187bc:	bfc4      	itt	gt
 80187be:	3b04      	subgt	r3, #4
 80187c0:	9305      	strgt	r3, [sp, #20]
 80187c2:	9b05      	ldr	r3, [sp, #20]
 80187c4:	f1a3 0302 	sub.w	r3, r3, #2
 80187c8:	bfcc      	ite	gt
 80187ca:	2500      	movgt	r5, #0
 80187cc:	2501      	movle	r5, #1
 80187ce:	2b03      	cmp	r3, #3
 80187d0:	d869      	bhi.n	80188a6 <_dtoa_r+0x2c6>
 80187d2:	e8df f003 	tbb	[pc, r3]
 80187d6:	4e2c      	.short	0x4e2c
 80187d8:	5a4c      	.short	0x5a4c
 80187da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80187de:	441d      	add	r5, r3
 80187e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80187e4:	2b20      	cmp	r3, #32
 80187e6:	bfc1      	itttt	gt
 80187e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80187ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80187f0:	fa09 f303 	lslgt.w	r3, r9, r3
 80187f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80187f8:	bfda      	itte	le
 80187fa:	f1c3 0320 	rsble	r3, r3, #32
 80187fe:	fa06 f003 	lslle.w	r0, r6, r3
 8018802:	4318      	orrgt	r0, r3
 8018804:	f7e7 fe8e 	bl	8000524 <__aeabi_ui2d>
 8018808:	2301      	movs	r3, #1
 801880a:	4606      	mov	r6, r0
 801880c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018810:	3d01      	subs	r5, #1
 8018812:	9310      	str	r3, [sp, #64]	; 0x40
 8018814:	e771      	b.n	80186fa <_dtoa_r+0x11a>
 8018816:	2301      	movs	r3, #1
 8018818:	e7b6      	b.n	8018788 <_dtoa_r+0x1a8>
 801881a:	900e      	str	r0, [sp, #56]	; 0x38
 801881c:	e7b5      	b.n	801878a <_dtoa_r+0x1aa>
 801881e:	f1ca 0300 	rsb	r3, sl, #0
 8018822:	9306      	str	r3, [sp, #24]
 8018824:	2300      	movs	r3, #0
 8018826:	eba8 080a 	sub.w	r8, r8, sl
 801882a:	930d      	str	r3, [sp, #52]	; 0x34
 801882c:	e7c2      	b.n	80187b4 <_dtoa_r+0x1d4>
 801882e:	2300      	movs	r3, #0
 8018830:	9308      	str	r3, [sp, #32]
 8018832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018834:	2b00      	cmp	r3, #0
 8018836:	dc39      	bgt.n	80188ac <_dtoa_r+0x2cc>
 8018838:	f04f 0901 	mov.w	r9, #1
 801883c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018840:	464b      	mov	r3, r9
 8018842:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018846:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018848:	2200      	movs	r2, #0
 801884a:	6042      	str	r2, [r0, #4]
 801884c:	2204      	movs	r2, #4
 801884e:	f102 0614 	add.w	r6, r2, #20
 8018852:	429e      	cmp	r6, r3
 8018854:	6841      	ldr	r1, [r0, #4]
 8018856:	d92f      	bls.n	80188b8 <_dtoa_r+0x2d8>
 8018858:	4620      	mov	r0, r4
 801885a:	f001 fa71 	bl	8019d40 <_Balloc>
 801885e:	9000      	str	r0, [sp, #0]
 8018860:	2800      	cmp	r0, #0
 8018862:	d14b      	bne.n	80188fc <_dtoa_r+0x31c>
 8018864:	4b24      	ldr	r3, [pc, #144]	; (80188f8 <_dtoa_r+0x318>)
 8018866:	4602      	mov	r2, r0
 8018868:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801886c:	e6d1      	b.n	8018612 <_dtoa_r+0x32>
 801886e:	2301      	movs	r3, #1
 8018870:	e7de      	b.n	8018830 <_dtoa_r+0x250>
 8018872:	2300      	movs	r3, #0
 8018874:	9308      	str	r3, [sp, #32]
 8018876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018878:	eb0a 0903 	add.w	r9, sl, r3
 801887c:	f109 0301 	add.w	r3, r9, #1
 8018880:	2b01      	cmp	r3, #1
 8018882:	9301      	str	r3, [sp, #4]
 8018884:	bfb8      	it	lt
 8018886:	2301      	movlt	r3, #1
 8018888:	e7dd      	b.n	8018846 <_dtoa_r+0x266>
 801888a:	2301      	movs	r3, #1
 801888c:	e7f2      	b.n	8018874 <_dtoa_r+0x294>
 801888e:	2501      	movs	r5, #1
 8018890:	2300      	movs	r3, #0
 8018892:	9305      	str	r3, [sp, #20]
 8018894:	9508      	str	r5, [sp, #32]
 8018896:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801889a:	2200      	movs	r2, #0
 801889c:	f8cd 9004 	str.w	r9, [sp, #4]
 80188a0:	2312      	movs	r3, #18
 80188a2:	9209      	str	r2, [sp, #36]	; 0x24
 80188a4:	e7cf      	b.n	8018846 <_dtoa_r+0x266>
 80188a6:	2301      	movs	r3, #1
 80188a8:	9308      	str	r3, [sp, #32]
 80188aa:	e7f4      	b.n	8018896 <_dtoa_r+0x2b6>
 80188ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80188b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80188b4:	464b      	mov	r3, r9
 80188b6:	e7c6      	b.n	8018846 <_dtoa_r+0x266>
 80188b8:	3101      	adds	r1, #1
 80188ba:	6041      	str	r1, [r0, #4]
 80188bc:	0052      	lsls	r2, r2, #1
 80188be:	e7c6      	b.n	801884e <_dtoa_r+0x26e>
 80188c0:	636f4361 	.word	0x636f4361
 80188c4:	3fd287a7 	.word	0x3fd287a7
 80188c8:	8b60c8b3 	.word	0x8b60c8b3
 80188cc:	3fc68a28 	.word	0x3fc68a28
 80188d0:	509f79fb 	.word	0x509f79fb
 80188d4:	3fd34413 	.word	0x3fd34413
 80188d8:	0803248c 	.word	0x0803248c
 80188dc:	08032602 	.word	0x08032602
 80188e0:	7ff00000 	.word	0x7ff00000
 80188e4:	080325fe 	.word	0x080325fe
 80188e8:	080325f5 	.word	0x080325f5
 80188ec:	08032469 	.word	0x08032469
 80188f0:	3ff80000 	.word	0x3ff80000
 80188f4:	080327e0 	.word	0x080327e0
 80188f8:	08032661 	.word	0x08032661
 80188fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80188fe:	9a00      	ldr	r2, [sp, #0]
 8018900:	601a      	str	r2, [r3, #0]
 8018902:	9b01      	ldr	r3, [sp, #4]
 8018904:	2b0e      	cmp	r3, #14
 8018906:	f200 80ad 	bhi.w	8018a64 <_dtoa_r+0x484>
 801890a:	2d00      	cmp	r5, #0
 801890c:	f000 80aa 	beq.w	8018a64 <_dtoa_r+0x484>
 8018910:	f1ba 0f00 	cmp.w	sl, #0
 8018914:	dd36      	ble.n	8018984 <_dtoa_r+0x3a4>
 8018916:	4ac3      	ldr	r2, [pc, #780]	; (8018c24 <_dtoa_r+0x644>)
 8018918:	f00a 030f 	and.w	r3, sl, #15
 801891c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018920:	ed93 7b00 	vldr	d7, [r3]
 8018924:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018928:	ea4f 172a 	mov.w	r7, sl, asr #4
 801892c:	eeb0 8a47 	vmov.f32	s16, s14
 8018930:	eef0 8a67 	vmov.f32	s17, s15
 8018934:	d016      	beq.n	8018964 <_dtoa_r+0x384>
 8018936:	4bbc      	ldr	r3, [pc, #752]	; (8018c28 <_dtoa_r+0x648>)
 8018938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801893c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018940:	f7e7 ff94 	bl	800086c <__aeabi_ddiv>
 8018944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018948:	f007 070f 	and.w	r7, r7, #15
 801894c:	2503      	movs	r5, #3
 801894e:	4eb6      	ldr	r6, [pc, #728]	; (8018c28 <_dtoa_r+0x648>)
 8018950:	b957      	cbnz	r7, 8018968 <_dtoa_r+0x388>
 8018952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018956:	ec53 2b18 	vmov	r2, r3, d8
 801895a:	f7e7 ff87 	bl	800086c <__aeabi_ddiv>
 801895e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018962:	e029      	b.n	80189b8 <_dtoa_r+0x3d8>
 8018964:	2502      	movs	r5, #2
 8018966:	e7f2      	b.n	801894e <_dtoa_r+0x36e>
 8018968:	07f9      	lsls	r1, r7, #31
 801896a:	d508      	bpl.n	801897e <_dtoa_r+0x39e>
 801896c:	ec51 0b18 	vmov	r0, r1, d8
 8018970:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018974:	f7e7 fe50 	bl	8000618 <__aeabi_dmul>
 8018978:	ec41 0b18 	vmov	d8, r0, r1
 801897c:	3501      	adds	r5, #1
 801897e:	107f      	asrs	r7, r7, #1
 8018980:	3608      	adds	r6, #8
 8018982:	e7e5      	b.n	8018950 <_dtoa_r+0x370>
 8018984:	f000 80a6 	beq.w	8018ad4 <_dtoa_r+0x4f4>
 8018988:	f1ca 0600 	rsb	r6, sl, #0
 801898c:	4ba5      	ldr	r3, [pc, #660]	; (8018c24 <_dtoa_r+0x644>)
 801898e:	4fa6      	ldr	r7, [pc, #664]	; (8018c28 <_dtoa_r+0x648>)
 8018990:	f006 020f 	and.w	r2, r6, #15
 8018994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801899c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80189a0:	f7e7 fe3a 	bl	8000618 <__aeabi_dmul>
 80189a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189a8:	1136      	asrs	r6, r6, #4
 80189aa:	2300      	movs	r3, #0
 80189ac:	2502      	movs	r5, #2
 80189ae:	2e00      	cmp	r6, #0
 80189b0:	f040 8085 	bne.w	8018abe <_dtoa_r+0x4de>
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d1d2      	bne.n	801895e <_dtoa_r+0x37e>
 80189b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	f000 808c 	beq.w	8018ad8 <_dtoa_r+0x4f8>
 80189c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80189c4:	4b99      	ldr	r3, [pc, #612]	; (8018c2c <_dtoa_r+0x64c>)
 80189c6:	2200      	movs	r2, #0
 80189c8:	4630      	mov	r0, r6
 80189ca:	4639      	mov	r1, r7
 80189cc:	f7e8 f896 	bl	8000afc <__aeabi_dcmplt>
 80189d0:	2800      	cmp	r0, #0
 80189d2:	f000 8081 	beq.w	8018ad8 <_dtoa_r+0x4f8>
 80189d6:	9b01      	ldr	r3, [sp, #4]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d07d      	beq.n	8018ad8 <_dtoa_r+0x4f8>
 80189dc:	f1b9 0f00 	cmp.w	r9, #0
 80189e0:	dd3c      	ble.n	8018a5c <_dtoa_r+0x47c>
 80189e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80189e6:	9307      	str	r3, [sp, #28]
 80189e8:	2200      	movs	r2, #0
 80189ea:	4b91      	ldr	r3, [pc, #580]	; (8018c30 <_dtoa_r+0x650>)
 80189ec:	4630      	mov	r0, r6
 80189ee:	4639      	mov	r1, r7
 80189f0:	f7e7 fe12 	bl	8000618 <__aeabi_dmul>
 80189f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80189f8:	3501      	adds	r5, #1
 80189fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80189fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018a02:	4628      	mov	r0, r5
 8018a04:	f7e7 fd9e 	bl	8000544 <__aeabi_i2d>
 8018a08:	4632      	mov	r2, r6
 8018a0a:	463b      	mov	r3, r7
 8018a0c:	f7e7 fe04 	bl	8000618 <__aeabi_dmul>
 8018a10:	4b88      	ldr	r3, [pc, #544]	; (8018c34 <_dtoa_r+0x654>)
 8018a12:	2200      	movs	r2, #0
 8018a14:	f7e7 fc4a 	bl	80002ac <__adddf3>
 8018a18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a20:	9303      	str	r3, [sp, #12]
 8018a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d15c      	bne.n	8018ae2 <_dtoa_r+0x502>
 8018a28:	4b83      	ldr	r3, [pc, #524]	; (8018c38 <_dtoa_r+0x658>)
 8018a2a:	2200      	movs	r2, #0
 8018a2c:	4630      	mov	r0, r6
 8018a2e:	4639      	mov	r1, r7
 8018a30:	f7e7 fc3a 	bl	80002a8 <__aeabi_dsub>
 8018a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018a38:	4606      	mov	r6, r0
 8018a3a:	460f      	mov	r7, r1
 8018a3c:	f7e8 f87c 	bl	8000b38 <__aeabi_dcmpgt>
 8018a40:	2800      	cmp	r0, #0
 8018a42:	f040 8296 	bne.w	8018f72 <_dtoa_r+0x992>
 8018a46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018a4a:	4630      	mov	r0, r6
 8018a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a50:	4639      	mov	r1, r7
 8018a52:	f7e8 f853 	bl	8000afc <__aeabi_dcmplt>
 8018a56:	2800      	cmp	r0, #0
 8018a58:	f040 8288 	bne.w	8018f6c <_dtoa_r+0x98c>
 8018a5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018a60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018a64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	f2c0 8158 	blt.w	8018d1c <_dtoa_r+0x73c>
 8018a6c:	f1ba 0f0e 	cmp.w	sl, #14
 8018a70:	f300 8154 	bgt.w	8018d1c <_dtoa_r+0x73c>
 8018a74:	4b6b      	ldr	r3, [pc, #428]	; (8018c24 <_dtoa_r+0x644>)
 8018a76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018a7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	f280 80e3 	bge.w	8018c4c <_dtoa_r+0x66c>
 8018a86:	9b01      	ldr	r3, [sp, #4]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	f300 80df 	bgt.w	8018c4c <_dtoa_r+0x66c>
 8018a8e:	f040 826d 	bne.w	8018f6c <_dtoa_r+0x98c>
 8018a92:	4b69      	ldr	r3, [pc, #420]	; (8018c38 <_dtoa_r+0x658>)
 8018a94:	2200      	movs	r2, #0
 8018a96:	4640      	mov	r0, r8
 8018a98:	4649      	mov	r1, r9
 8018a9a:	f7e7 fdbd 	bl	8000618 <__aeabi_dmul>
 8018a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018aa2:	f7e8 f83f 	bl	8000b24 <__aeabi_dcmpge>
 8018aa6:	9e01      	ldr	r6, [sp, #4]
 8018aa8:	4637      	mov	r7, r6
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	f040 8243 	bne.w	8018f36 <_dtoa_r+0x956>
 8018ab0:	9d00      	ldr	r5, [sp, #0]
 8018ab2:	2331      	movs	r3, #49	; 0x31
 8018ab4:	f805 3b01 	strb.w	r3, [r5], #1
 8018ab8:	f10a 0a01 	add.w	sl, sl, #1
 8018abc:	e23f      	b.n	8018f3e <_dtoa_r+0x95e>
 8018abe:	07f2      	lsls	r2, r6, #31
 8018ac0:	d505      	bpl.n	8018ace <_dtoa_r+0x4ee>
 8018ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018ac6:	f7e7 fda7 	bl	8000618 <__aeabi_dmul>
 8018aca:	3501      	adds	r5, #1
 8018acc:	2301      	movs	r3, #1
 8018ace:	1076      	asrs	r6, r6, #1
 8018ad0:	3708      	adds	r7, #8
 8018ad2:	e76c      	b.n	80189ae <_dtoa_r+0x3ce>
 8018ad4:	2502      	movs	r5, #2
 8018ad6:	e76f      	b.n	80189b8 <_dtoa_r+0x3d8>
 8018ad8:	9b01      	ldr	r3, [sp, #4]
 8018ada:	f8cd a01c 	str.w	sl, [sp, #28]
 8018ade:	930c      	str	r3, [sp, #48]	; 0x30
 8018ae0:	e78d      	b.n	80189fe <_dtoa_r+0x41e>
 8018ae2:	9900      	ldr	r1, [sp, #0]
 8018ae4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018ae8:	4b4e      	ldr	r3, [pc, #312]	; (8018c24 <_dtoa_r+0x644>)
 8018aea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018aee:	4401      	add	r1, r0
 8018af0:	9102      	str	r1, [sp, #8]
 8018af2:	9908      	ldr	r1, [sp, #32]
 8018af4:	eeb0 8a47 	vmov.f32	s16, s14
 8018af8:	eef0 8a67 	vmov.f32	s17, s15
 8018afc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018b00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018b04:	2900      	cmp	r1, #0
 8018b06:	d045      	beq.n	8018b94 <_dtoa_r+0x5b4>
 8018b08:	494c      	ldr	r1, [pc, #304]	; (8018c3c <_dtoa_r+0x65c>)
 8018b0a:	2000      	movs	r0, #0
 8018b0c:	f7e7 feae 	bl	800086c <__aeabi_ddiv>
 8018b10:	ec53 2b18 	vmov	r2, r3, d8
 8018b14:	f7e7 fbc8 	bl	80002a8 <__aeabi_dsub>
 8018b18:	9d00      	ldr	r5, [sp, #0]
 8018b1a:	ec41 0b18 	vmov	d8, r0, r1
 8018b1e:	4639      	mov	r1, r7
 8018b20:	4630      	mov	r0, r6
 8018b22:	f7e8 f829 	bl	8000b78 <__aeabi_d2iz>
 8018b26:	900c      	str	r0, [sp, #48]	; 0x30
 8018b28:	f7e7 fd0c 	bl	8000544 <__aeabi_i2d>
 8018b2c:	4602      	mov	r2, r0
 8018b2e:	460b      	mov	r3, r1
 8018b30:	4630      	mov	r0, r6
 8018b32:	4639      	mov	r1, r7
 8018b34:	f7e7 fbb8 	bl	80002a8 <__aeabi_dsub>
 8018b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018b3a:	3330      	adds	r3, #48	; 0x30
 8018b3c:	f805 3b01 	strb.w	r3, [r5], #1
 8018b40:	ec53 2b18 	vmov	r2, r3, d8
 8018b44:	4606      	mov	r6, r0
 8018b46:	460f      	mov	r7, r1
 8018b48:	f7e7 ffd8 	bl	8000afc <__aeabi_dcmplt>
 8018b4c:	2800      	cmp	r0, #0
 8018b4e:	d165      	bne.n	8018c1c <_dtoa_r+0x63c>
 8018b50:	4632      	mov	r2, r6
 8018b52:	463b      	mov	r3, r7
 8018b54:	4935      	ldr	r1, [pc, #212]	; (8018c2c <_dtoa_r+0x64c>)
 8018b56:	2000      	movs	r0, #0
 8018b58:	f7e7 fba6 	bl	80002a8 <__aeabi_dsub>
 8018b5c:	ec53 2b18 	vmov	r2, r3, d8
 8018b60:	f7e7 ffcc 	bl	8000afc <__aeabi_dcmplt>
 8018b64:	2800      	cmp	r0, #0
 8018b66:	f040 80b9 	bne.w	8018cdc <_dtoa_r+0x6fc>
 8018b6a:	9b02      	ldr	r3, [sp, #8]
 8018b6c:	429d      	cmp	r5, r3
 8018b6e:	f43f af75 	beq.w	8018a5c <_dtoa_r+0x47c>
 8018b72:	4b2f      	ldr	r3, [pc, #188]	; (8018c30 <_dtoa_r+0x650>)
 8018b74:	ec51 0b18 	vmov	r0, r1, d8
 8018b78:	2200      	movs	r2, #0
 8018b7a:	f7e7 fd4d 	bl	8000618 <__aeabi_dmul>
 8018b7e:	4b2c      	ldr	r3, [pc, #176]	; (8018c30 <_dtoa_r+0x650>)
 8018b80:	ec41 0b18 	vmov	d8, r0, r1
 8018b84:	2200      	movs	r2, #0
 8018b86:	4630      	mov	r0, r6
 8018b88:	4639      	mov	r1, r7
 8018b8a:	f7e7 fd45 	bl	8000618 <__aeabi_dmul>
 8018b8e:	4606      	mov	r6, r0
 8018b90:	460f      	mov	r7, r1
 8018b92:	e7c4      	b.n	8018b1e <_dtoa_r+0x53e>
 8018b94:	ec51 0b17 	vmov	r0, r1, d7
 8018b98:	f7e7 fd3e 	bl	8000618 <__aeabi_dmul>
 8018b9c:	9b02      	ldr	r3, [sp, #8]
 8018b9e:	9d00      	ldr	r5, [sp, #0]
 8018ba0:	930c      	str	r3, [sp, #48]	; 0x30
 8018ba2:	ec41 0b18 	vmov	d8, r0, r1
 8018ba6:	4639      	mov	r1, r7
 8018ba8:	4630      	mov	r0, r6
 8018baa:	f7e7 ffe5 	bl	8000b78 <__aeabi_d2iz>
 8018bae:	9011      	str	r0, [sp, #68]	; 0x44
 8018bb0:	f7e7 fcc8 	bl	8000544 <__aeabi_i2d>
 8018bb4:	4602      	mov	r2, r0
 8018bb6:	460b      	mov	r3, r1
 8018bb8:	4630      	mov	r0, r6
 8018bba:	4639      	mov	r1, r7
 8018bbc:	f7e7 fb74 	bl	80002a8 <__aeabi_dsub>
 8018bc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018bc2:	3330      	adds	r3, #48	; 0x30
 8018bc4:	f805 3b01 	strb.w	r3, [r5], #1
 8018bc8:	9b02      	ldr	r3, [sp, #8]
 8018bca:	429d      	cmp	r5, r3
 8018bcc:	4606      	mov	r6, r0
 8018bce:	460f      	mov	r7, r1
 8018bd0:	f04f 0200 	mov.w	r2, #0
 8018bd4:	d134      	bne.n	8018c40 <_dtoa_r+0x660>
 8018bd6:	4b19      	ldr	r3, [pc, #100]	; (8018c3c <_dtoa_r+0x65c>)
 8018bd8:	ec51 0b18 	vmov	r0, r1, d8
 8018bdc:	f7e7 fb66 	bl	80002ac <__adddf3>
 8018be0:	4602      	mov	r2, r0
 8018be2:	460b      	mov	r3, r1
 8018be4:	4630      	mov	r0, r6
 8018be6:	4639      	mov	r1, r7
 8018be8:	f7e7 ffa6 	bl	8000b38 <__aeabi_dcmpgt>
 8018bec:	2800      	cmp	r0, #0
 8018bee:	d175      	bne.n	8018cdc <_dtoa_r+0x6fc>
 8018bf0:	ec53 2b18 	vmov	r2, r3, d8
 8018bf4:	4911      	ldr	r1, [pc, #68]	; (8018c3c <_dtoa_r+0x65c>)
 8018bf6:	2000      	movs	r0, #0
 8018bf8:	f7e7 fb56 	bl	80002a8 <__aeabi_dsub>
 8018bfc:	4602      	mov	r2, r0
 8018bfe:	460b      	mov	r3, r1
 8018c00:	4630      	mov	r0, r6
 8018c02:	4639      	mov	r1, r7
 8018c04:	f7e7 ff7a 	bl	8000afc <__aeabi_dcmplt>
 8018c08:	2800      	cmp	r0, #0
 8018c0a:	f43f af27 	beq.w	8018a5c <_dtoa_r+0x47c>
 8018c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018c10:	1e6b      	subs	r3, r5, #1
 8018c12:	930c      	str	r3, [sp, #48]	; 0x30
 8018c14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018c18:	2b30      	cmp	r3, #48	; 0x30
 8018c1a:	d0f8      	beq.n	8018c0e <_dtoa_r+0x62e>
 8018c1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018c20:	e04a      	b.n	8018cb8 <_dtoa_r+0x6d8>
 8018c22:	bf00      	nop
 8018c24:	080327e0 	.word	0x080327e0
 8018c28:	080327b8 	.word	0x080327b8
 8018c2c:	3ff00000 	.word	0x3ff00000
 8018c30:	40240000 	.word	0x40240000
 8018c34:	401c0000 	.word	0x401c0000
 8018c38:	40140000 	.word	0x40140000
 8018c3c:	3fe00000 	.word	0x3fe00000
 8018c40:	4baf      	ldr	r3, [pc, #700]	; (8018f00 <_dtoa_r+0x920>)
 8018c42:	f7e7 fce9 	bl	8000618 <__aeabi_dmul>
 8018c46:	4606      	mov	r6, r0
 8018c48:	460f      	mov	r7, r1
 8018c4a:	e7ac      	b.n	8018ba6 <_dtoa_r+0x5c6>
 8018c4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018c50:	9d00      	ldr	r5, [sp, #0]
 8018c52:	4642      	mov	r2, r8
 8018c54:	464b      	mov	r3, r9
 8018c56:	4630      	mov	r0, r6
 8018c58:	4639      	mov	r1, r7
 8018c5a:	f7e7 fe07 	bl	800086c <__aeabi_ddiv>
 8018c5e:	f7e7 ff8b 	bl	8000b78 <__aeabi_d2iz>
 8018c62:	9002      	str	r0, [sp, #8]
 8018c64:	f7e7 fc6e 	bl	8000544 <__aeabi_i2d>
 8018c68:	4642      	mov	r2, r8
 8018c6a:	464b      	mov	r3, r9
 8018c6c:	f7e7 fcd4 	bl	8000618 <__aeabi_dmul>
 8018c70:	4602      	mov	r2, r0
 8018c72:	460b      	mov	r3, r1
 8018c74:	4630      	mov	r0, r6
 8018c76:	4639      	mov	r1, r7
 8018c78:	f7e7 fb16 	bl	80002a8 <__aeabi_dsub>
 8018c7c:	9e02      	ldr	r6, [sp, #8]
 8018c7e:	9f01      	ldr	r7, [sp, #4]
 8018c80:	3630      	adds	r6, #48	; 0x30
 8018c82:	f805 6b01 	strb.w	r6, [r5], #1
 8018c86:	9e00      	ldr	r6, [sp, #0]
 8018c88:	1bae      	subs	r6, r5, r6
 8018c8a:	42b7      	cmp	r7, r6
 8018c8c:	4602      	mov	r2, r0
 8018c8e:	460b      	mov	r3, r1
 8018c90:	d137      	bne.n	8018d02 <_dtoa_r+0x722>
 8018c92:	f7e7 fb0b 	bl	80002ac <__adddf3>
 8018c96:	4642      	mov	r2, r8
 8018c98:	464b      	mov	r3, r9
 8018c9a:	4606      	mov	r6, r0
 8018c9c:	460f      	mov	r7, r1
 8018c9e:	f7e7 ff4b 	bl	8000b38 <__aeabi_dcmpgt>
 8018ca2:	b9c8      	cbnz	r0, 8018cd8 <_dtoa_r+0x6f8>
 8018ca4:	4642      	mov	r2, r8
 8018ca6:	464b      	mov	r3, r9
 8018ca8:	4630      	mov	r0, r6
 8018caa:	4639      	mov	r1, r7
 8018cac:	f7e7 ff1c 	bl	8000ae8 <__aeabi_dcmpeq>
 8018cb0:	b110      	cbz	r0, 8018cb8 <_dtoa_r+0x6d8>
 8018cb2:	9b02      	ldr	r3, [sp, #8]
 8018cb4:	07d9      	lsls	r1, r3, #31
 8018cb6:	d40f      	bmi.n	8018cd8 <_dtoa_r+0x6f8>
 8018cb8:	4620      	mov	r0, r4
 8018cba:	4659      	mov	r1, fp
 8018cbc:	f001 f880 	bl	8019dc0 <_Bfree>
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	702b      	strb	r3, [r5, #0]
 8018cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cc6:	f10a 0001 	add.w	r0, sl, #1
 8018cca:	6018      	str	r0, [r3, #0]
 8018ccc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	f43f acd8 	beq.w	8018684 <_dtoa_r+0xa4>
 8018cd4:	601d      	str	r5, [r3, #0]
 8018cd6:	e4d5      	b.n	8018684 <_dtoa_r+0xa4>
 8018cd8:	f8cd a01c 	str.w	sl, [sp, #28]
 8018cdc:	462b      	mov	r3, r5
 8018cde:	461d      	mov	r5, r3
 8018ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018ce4:	2a39      	cmp	r2, #57	; 0x39
 8018ce6:	d108      	bne.n	8018cfa <_dtoa_r+0x71a>
 8018ce8:	9a00      	ldr	r2, [sp, #0]
 8018cea:	429a      	cmp	r2, r3
 8018cec:	d1f7      	bne.n	8018cde <_dtoa_r+0x6fe>
 8018cee:	9a07      	ldr	r2, [sp, #28]
 8018cf0:	9900      	ldr	r1, [sp, #0]
 8018cf2:	3201      	adds	r2, #1
 8018cf4:	9207      	str	r2, [sp, #28]
 8018cf6:	2230      	movs	r2, #48	; 0x30
 8018cf8:	700a      	strb	r2, [r1, #0]
 8018cfa:	781a      	ldrb	r2, [r3, #0]
 8018cfc:	3201      	adds	r2, #1
 8018cfe:	701a      	strb	r2, [r3, #0]
 8018d00:	e78c      	b.n	8018c1c <_dtoa_r+0x63c>
 8018d02:	4b7f      	ldr	r3, [pc, #508]	; (8018f00 <_dtoa_r+0x920>)
 8018d04:	2200      	movs	r2, #0
 8018d06:	f7e7 fc87 	bl	8000618 <__aeabi_dmul>
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	2300      	movs	r3, #0
 8018d0e:	4606      	mov	r6, r0
 8018d10:	460f      	mov	r7, r1
 8018d12:	f7e7 fee9 	bl	8000ae8 <__aeabi_dcmpeq>
 8018d16:	2800      	cmp	r0, #0
 8018d18:	d09b      	beq.n	8018c52 <_dtoa_r+0x672>
 8018d1a:	e7cd      	b.n	8018cb8 <_dtoa_r+0x6d8>
 8018d1c:	9a08      	ldr	r2, [sp, #32]
 8018d1e:	2a00      	cmp	r2, #0
 8018d20:	f000 80c4 	beq.w	8018eac <_dtoa_r+0x8cc>
 8018d24:	9a05      	ldr	r2, [sp, #20]
 8018d26:	2a01      	cmp	r2, #1
 8018d28:	f300 80a8 	bgt.w	8018e7c <_dtoa_r+0x89c>
 8018d2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018d2e:	2a00      	cmp	r2, #0
 8018d30:	f000 80a0 	beq.w	8018e74 <_dtoa_r+0x894>
 8018d34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018d38:	9e06      	ldr	r6, [sp, #24]
 8018d3a:	4645      	mov	r5, r8
 8018d3c:	9a04      	ldr	r2, [sp, #16]
 8018d3e:	2101      	movs	r1, #1
 8018d40:	441a      	add	r2, r3
 8018d42:	4620      	mov	r0, r4
 8018d44:	4498      	add	r8, r3
 8018d46:	9204      	str	r2, [sp, #16]
 8018d48:	f001 f940 	bl	8019fcc <__i2b>
 8018d4c:	4607      	mov	r7, r0
 8018d4e:	2d00      	cmp	r5, #0
 8018d50:	dd0b      	ble.n	8018d6a <_dtoa_r+0x78a>
 8018d52:	9b04      	ldr	r3, [sp, #16]
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	dd08      	ble.n	8018d6a <_dtoa_r+0x78a>
 8018d58:	42ab      	cmp	r3, r5
 8018d5a:	9a04      	ldr	r2, [sp, #16]
 8018d5c:	bfa8      	it	ge
 8018d5e:	462b      	movge	r3, r5
 8018d60:	eba8 0803 	sub.w	r8, r8, r3
 8018d64:	1aed      	subs	r5, r5, r3
 8018d66:	1ad3      	subs	r3, r2, r3
 8018d68:	9304      	str	r3, [sp, #16]
 8018d6a:	9b06      	ldr	r3, [sp, #24]
 8018d6c:	b1fb      	cbz	r3, 8018dae <_dtoa_r+0x7ce>
 8018d6e:	9b08      	ldr	r3, [sp, #32]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	f000 809f 	beq.w	8018eb4 <_dtoa_r+0x8d4>
 8018d76:	2e00      	cmp	r6, #0
 8018d78:	dd11      	ble.n	8018d9e <_dtoa_r+0x7be>
 8018d7a:	4639      	mov	r1, r7
 8018d7c:	4632      	mov	r2, r6
 8018d7e:	4620      	mov	r0, r4
 8018d80:	f001 f9e0 	bl	801a144 <__pow5mult>
 8018d84:	465a      	mov	r2, fp
 8018d86:	4601      	mov	r1, r0
 8018d88:	4607      	mov	r7, r0
 8018d8a:	4620      	mov	r0, r4
 8018d8c:	f001 f934 	bl	8019ff8 <__multiply>
 8018d90:	4659      	mov	r1, fp
 8018d92:	9007      	str	r0, [sp, #28]
 8018d94:	4620      	mov	r0, r4
 8018d96:	f001 f813 	bl	8019dc0 <_Bfree>
 8018d9a:	9b07      	ldr	r3, [sp, #28]
 8018d9c:	469b      	mov	fp, r3
 8018d9e:	9b06      	ldr	r3, [sp, #24]
 8018da0:	1b9a      	subs	r2, r3, r6
 8018da2:	d004      	beq.n	8018dae <_dtoa_r+0x7ce>
 8018da4:	4659      	mov	r1, fp
 8018da6:	4620      	mov	r0, r4
 8018da8:	f001 f9cc 	bl	801a144 <__pow5mult>
 8018dac:	4683      	mov	fp, r0
 8018dae:	2101      	movs	r1, #1
 8018db0:	4620      	mov	r0, r4
 8018db2:	f001 f90b 	bl	8019fcc <__i2b>
 8018db6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	4606      	mov	r6, r0
 8018dbc:	dd7c      	ble.n	8018eb8 <_dtoa_r+0x8d8>
 8018dbe:	461a      	mov	r2, r3
 8018dc0:	4601      	mov	r1, r0
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	f001 f9be 	bl	801a144 <__pow5mult>
 8018dc8:	9b05      	ldr	r3, [sp, #20]
 8018dca:	2b01      	cmp	r3, #1
 8018dcc:	4606      	mov	r6, r0
 8018dce:	dd76      	ble.n	8018ebe <_dtoa_r+0x8de>
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	9306      	str	r3, [sp, #24]
 8018dd4:	6933      	ldr	r3, [r6, #16]
 8018dd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018dda:	6918      	ldr	r0, [r3, #16]
 8018ddc:	f001 f8a6 	bl	8019f2c <__hi0bits>
 8018de0:	f1c0 0020 	rsb	r0, r0, #32
 8018de4:	9b04      	ldr	r3, [sp, #16]
 8018de6:	4418      	add	r0, r3
 8018de8:	f010 001f 	ands.w	r0, r0, #31
 8018dec:	f000 8086 	beq.w	8018efc <_dtoa_r+0x91c>
 8018df0:	f1c0 0320 	rsb	r3, r0, #32
 8018df4:	2b04      	cmp	r3, #4
 8018df6:	dd7f      	ble.n	8018ef8 <_dtoa_r+0x918>
 8018df8:	f1c0 001c 	rsb	r0, r0, #28
 8018dfc:	9b04      	ldr	r3, [sp, #16]
 8018dfe:	4403      	add	r3, r0
 8018e00:	4480      	add	r8, r0
 8018e02:	4405      	add	r5, r0
 8018e04:	9304      	str	r3, [sp, #16]
 8018e06:	f1b8 0f00 	cmp.w	r8, #0
 8018e0a:	dd05      	ble.n	8018e18 <_dtoa_r+0x838>
 8018e0c:	4659      	mov	r1, fp
 8018e0e:	4642      	mov	r2, r8
 8018e10:	4620      	mov	r0, r4
 8018e12:	f001 f9f1 	bl	801a1f8 <__lshift>
 8018e16:	4683      	mov	fp, r0
 8018e18:	9b04      	ldr	r3, [sp, #16]
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	dd05      	ble.n	8018e2a <_dtoa_r+0x84a>
 8018e1e:	4631      	mov	r1, r6
 8018e20:	461a      	mov	r2, r3
 8018e22:	4620      	mov	r0, r4
 8018e24:	f001 f9e8 	bl	801a1f8 <__lshift>
 8018e28:	4606      	mov	r6, r0
 8018e2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d069      	beq.n	8018f04 <_dtoa_r+0x924>
 8018e30:	4631      	mov	r1, r6
 8018e32:	4658      	mov	r0, fp
 8018e34:	f001 fa4c 	bl	801a2d0 <__mcmp>
 8018e38:	2800      	cmp	r0, #0
 8018e3a:	da63      	bge.n	8018f04 <_dtoa_r+0x924>
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	4659      	mov	r1, fp
 8018e40:	220a      	movs	r2, #10
 8018e42:	4620      	mov	r0, r4
 8018e44:	f000 ffde 	bl	8019e04 <__multadd>
 8018e48:	9b08      	ldr	r3, [sp, #32]
 8018e4a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018e4e:	4683      	mov	fp, r0
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	f000 818f 	beq.w	8019174 <_dtoa_r+0xb94>
 8018e56:	4639      	mov	r1, r7
 8018e58:	2300      	movs	r3, #0
 8018e5a:	220a      	movs	r2, #10
 8018e5c:	4620      	mov	r0, r4
 8018e5e:	f000 ffd1 	bl	8019e04 <__multadd>
 8018e62:	f1b9 0f00 	cmp.w	r9, #0
 8018e66:	4607      	mov	r7, r0
 8018e68:	f300 808e 	bgt.w	8018f88 <_dtoa_r+0x9a8>
 8018e6c:	9b05      	ldr	r3, [sp, #20]
 8018e6e:	2b02      	cmp	r3, #2
 8018e70:	dc50      	bgt.n	8018f14 <_dtoa_r+0x934>
 8018e72:	e089      	b.n	8018f88 <_dtoa_r+0x9a8>
 8018e74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018e7a:	e75d      	b.n	8018d38 <_dtoa_r+0x758>
 8018e7c:	9b01      	ldr	r3, [sp, #4]
 8018e7e:	1e5e      	subs	r6, r3, #1
 8018e80:	9b06      	ldr	r3, [sp, #24]
 8018e82:	42b3      	cmp	r3, r6
 8018e84:	bfbf      	itttt	lt
 8018e86:	9b06      	ldrlt	r3, [sp, #24]
 8018e88:	9606      	strlt	r6, [sp, #24]
 8018e8a:	1af2      	sublt	r2, r6, r3
 8018e8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018e8e:	bfb6      	itet	lt
 8018e90:	189b      	addlt	r3, r3, r2
 8018e92:	1b9e      	subge	r6, r3, r6
 8018e94:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018e96:	9b01      	ldr	r3, [sp, #4]
 8018e98:	bfb8      	it	lt
 8018e9a:	2600      	movlt	r6, #0
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	bfb5      	itete	lt
 8018ea0:	eba8 0503 	sublt.w	r5, r8, r3
 8018ea4:	9b01      	ldrge	r3, [sp, #4]
 8018ea6:	2300      	movlt	r3, #0
 8018ea8:	4645      	movge	r5, r8
 8018eaa:	e747      	b.n	8018d3c <_dtoa_r+0x75c>
 8018eac:	9e06      	ldr	r6, [sp, #24]
 8018eae:	9f08      	ldr	r7, [sp, #32]
 8018eb0:	4645      	mov	r5, r8
 8018eb2:	e74c      	b.n	8018d4e <_dtoa_r+0x76e>
 8018eb4:	9a06      	ldr	r2, [sp, #24]
 8018eb6:	e775      	b.n	8018da4 <_dtoa_r+0x7c4>
 8018eb8:	9b05      	ldr	r3, [sp, #20]
 8018eba:	2b01      	cmp	r3, #1
 8018ebc:	dc18      	bgt.n	8018ef0 <_dtoa_r+0x910>
 8018ebe:	9b02      	ldr	r3, [sp, #8]
 8018ec0:	b9b3      	cbnz	r3, 8018ef0 <_dtoa_r+0x910>
 8018ec2:	9b03      	ldr	r3, [sp, #12]
 8018ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018ec8:	b9a3      	cbnz	r3, 8018ef4 <_dtoa_r+0x914>
 8018eca:	9b03      	ldr	r3, [sp, #12]
 8018ecc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018ed0:	0d1b      	lsrs	r3, r3, #20
 8018ed2:	051b      	lsls	r3, r3, #20
 8018ed4:	b12b      	cbz	r3, 8018ee2 <_dtoa_r+0x902>
 8018ed6:	9b04      	ldr	r3, [sp, #16]
 8018ed8:	3301      	adds	r3, #1
 8018eda:	9304      	str	r3, [sp, #16]
 8018edc:	f108 0801 	add.w	r8, r8, #1
 8018ee0:	2301      	movs	r3, #1
 8018ee2:	9306      	str	r3, [sp, #24]
 8018ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	f47f af74 	bne.w	8018dd4 <_dtoa_r+0x7f4>
 8018eec:	2001      	movs	r0, #1
 8018eee:	e779      	b.n	8018de4 <_dtoa_r+0x804>
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	e7f6      	b.n	8018ee2 <_dtoa_r+0x902>
 8018ef4:	9b02      	ldr	r3, [sp, #8]
 8018ef6:	e7f4      	b.n	8018ee2 <_dtoa_r+0x902>
 8018ef8:	d085      	beq.n	8018e06 <_dtoa_r+0x826>
 8018efa:	4618      	mov	r0, r3
 8018efc:	301c      	adds	r0, #28
 8018efe:	e77d      	b.n	8018dfc <_dtoa_r+0x81c>
 8018f00:	40240000 	.word	0x40240000
 8018f04:	9b01      	ldr	r3, [sp, #4]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	dc38      	bgt.n	8018f7c <_dtoa_r+0x99c>
 8018f0a:	9b05      	ldr	r3, [sp, #20]
 8018f0c:	2b02      	cmp	r3, #2
 8018f0e:	dd35      	ble.n	8018f7c <_dtoa_r+0x99c>
 8018f10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f14:	f1b9 0f00 	cmp.w	r9, #0
 8018f18:	d10d      	bne.n	8018f36 <_dtoa_r+0x956>
 8018f1a:	4631      	mov	r1, r6
 8018f1c:	464b      	mov	r3, r9
 8018f1e:	2205      	movs	r2, #5
 8018f20:	4620      	mov	r0, r4
 8018f22:	f000 ff6f 	bl	8019e04 <__multadd>
 8018f26:	4601      	mov	r1, r0
 8018f28:	4606      	mov	r6, r0
 8018f2a:	4658      	mov	r0, fp
 8018f2c:	f001 f9d0 	bl	801a2d0 <__mcmp>
 8018f30:	2800      	cmp	r0, #0
 8018f32:	f73f adbd 	bgt.w	8018ab0 <_dtoa_r+0x4d0>
 8018f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f38:	9d00      	ldr	r5, [sp, #0]
 8018f3a:	ea6f 0a03 	mvn.w	sl, r3
 8018f3e:	f04f 0800 	mov.w	r8, #0
 8018f42:	4631      	mov	r1, r6
 8018f44:	4620      	mov	r0, r4
 8018f46:	f000 ff3b 	bl	8019dc0 <_Bfree>
 8018f4a:	2f00      	cmp	r7, #0
 8018f4c:	f43f aeb4 	beq.w	8018cb8 <_dtoa_r+0x6d8>
 8018f50:	f1b8 0f00 	cmp.w	r8, #0
 8018f54:	d005      	beq.n	8018f62 <_dtoa_r+0x982>
 8018f56:	45b8      	cmp	r8, r7
 8018f58:	d003      	beq.n	8018f62 <_dtoa_r+0x982>
 8018f5a:	4641      	mov	r1, r8
 8018f5c:	4620      	mov	r0, r4
 8018f5e:	f000 ff2f 	bl	8019dc0 <_Bfree>
 8018f62:	4639      	mov	r1, r7
 8018f64:	4620      	mov	r0, r4
 8018f66:	f000 ff2b 	bl	8019dc0 <_Bfree>
 8018f6a:	e6a5      	b.n	8018cb8 <_dtoa_r+0x6d8>
 8018f6c:	2600      	movs	r6, #0
 8018f6e:	4637      	mov	r7, r6
 8018f70:	e7e1      	b.n	8018f36 <_dtoa_r+0x956>
 8018f72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018f74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018f78:	4637      	mov	r7, r6
 8018f7a:	e599      	b.n	8018ab0 <_dtoa_r+0x4d0>
 8018f7c:	9b08      	ldr	r3, [sp, #32]
 8018f7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	f000 80fd 	beq.w	8019182 <_dtoa_r+0xba2>
 8018f88:	2d00      	cmp	r5, #0
 8018f8a:	dd05      	ble.n	8018f98 <_dtoa_r+0x9b8>
 8018f8c:	4639      	mov	r1, r7
 8018f8e:	462a      	mov	r2, r5
 8018f90:	4620      	mov	r0, r4
 8018f92:	f001 f931 	bl	801a1f8 <__lshift>
 8018f96:	4607      	mov	r7, r0
 8018f98:	9b06      	ldr	r3, [sp, #24]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d05c      	beq.n	8019058 <_dtoa_r+0xa78>
 8018f9e:	6879      	ldr	r1, [r7, #4]
 8018fa0:	4620      	mov	r0, r4
 8018fa2:	f000 fecd 	bl	8019d40 <_Balloc>
 8018fa6:	4605      	mov	r5, r0
 8018fa8:	b928      	cbnz	r0, 8018fb6 <_dtoa_r+0x9d6>
 8018faa:	4b80      	ldr	r3, [pc, #512]	; (80191ac <_dtoa_r+0xbcc>)
 8018fac:	4602      	mov	r2, r0
 8018fae:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018fb2:	f7ff bb2e 	b.w	8018612 <_dtoa_r+0x32>
 8018fb6:	693a      	ldr	r2, [r7, #16]
 8018fb8:	3202      	adds	r2, #2
 8018fba:	0092      	lsls	r2, r2, #2
 8018fbc:	f107 010c 	add.w	r1, r7, #12
 8018fc0:	300c      	adds	r0, #12
 8018fc2:	f7fd fc65 	bl	8016890 <memcpy>
 8018fc6:	2201      	movs	r2, #1
 8018fc8:	4629      	mov	r1, r5
 8018fca:	4620      	mov	r0, r4
 8018fcc:	f001 f914 	bl	801a1f8 <__lshift>
 8018fd0:	9b00      	ldr	r3, [sp, #0]
 8018fd2:	3301      	adds	r3, #1
 8018fd4:	9301      	str	r3, [sp, #4]
 8018fd6:	9b00      	ldr	r3, [sp, #0]
 8018fd8:	444b      	add	r3, r9
 8018fda:	9307      	str	r3, [sp, #28]
 8018fdc:	9b02      	ldr	r3, [sp, #8]
 8018fde:	f003 0301 	and.w	r3, r3, #1
 8018fe2:	46b8      	mov	r8, r7
 8018fe4:	9306      	str	r3, [sp, #24]
 8018fe6:	4607      	mov	r7, r0
 8018fe8:	9b01      	ldr	r3, [sp, #4]
 8018fea:	4631      	mov	r1, r6
 8018fec:	3b01      	subs	r3, #1
 8018fee:	4658      	mov	r0, fp
 8018ff0:	9302      	str	r3, [sp, #8]
 8018ff2:	f7ff fa67 	bl	80184c4 <quorem>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	3330      	adds	r3, #48	; 0x30
 8018ffa:	9004      	str	r0, [sp, #16]
 8018ffc:	4641      	mov	r1, r8
 8018ffe:	4658      	mov	r0, fp
 8019000:	9308      	str	r3, [sp, #32]
 8019002:	f001 f965 	bl	801a2d0 <__mcmp>
 8019006:	463a      	mov	r2, r7
 8019008:	4681      	mov	r9, r0
 801900a:	4631      	mov	r1, r6
 801900c:	4620      	mov	r0, r4
 801900e:	f001 f97b 	bl	801a308 <__mdiff>
 8019012:	68c2      	ldr	r2, [r0, #12]
 8019014:	9b08      	ldr	r3, [sp, #32]
 8019016:	4605      	mov	r5, r0
 8019018:	bb02      	cbnz	r2, 801905c <_dtoa_r+0xa7c>
 801901a:	4601      	mov	r1, r0
 801901c:	4658      	mov	r0, fp
 801901e:	f001 f957 	bl	801a2d0 <__mcmp>
 8019022:	9b08      	ldr	r3, [sp, #32]
 8019024:	4602      	mov	r2, r0
 8019026:	4629      	mov	r1, r5
 8019028:	4620      	mov	r0, r4
 801902a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801902e:	f000 fec7 	bl	8019dc0 <_Bfree>
 8019032:	9b05      	ldr	r3, [sp, #20]
 8019034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019036:	9d01      	ldr	r5, [sp, #4]
 8019038:	ea43 0102 	orr.w	r1, r3, r2
 801903c:	9b06      	ldr	r3, [sp, #24]
 801903e:	430b      	orrs	r3, r1
 8019040:	9b08      	ldr	r3, [sp, #32]
 8019042:	d10d      	bne.n	8019060 <_dtoa_r+0xa80>
 8019044:	2b39      	cmp	r3, #57	; 0x39
 8019046:	d029      	beq.n	801909c <_dtoa_r+0xabc>
 8019048:	f1b9 0f00 	cmp.w	r9, #0
 801904c:	dd01      	ble.n	8019052 <_dtoa_r+0xa72>
 801904e:	9b04      	ldr	r3, [sp, #16]
 8019050:	3331      	adds	r3, #49	; 0x31
 8019052:	9a02      	ldr	r2, [sp, #8]
 8019054:	7013      	strb	r3, [r2, #0]
 8019056:	e774      	b.n	8018f42 <_dtoa_r+0x962>
 8019058:	4638      	mov	r0, r7
 801905a:	e7b9      	b.n	8018fd0 <_dtoa_r+0x9f0>
 801905c:	2201      	movs	r2, #1
 801905e:	e7e2      	b.n	8019026 <_dtoa_r+0xa46>
 8019060:	f1b9 0f00 	cmp.w	r9, #0
 8019064:	db06      	blt.n	8019074 <_dtoa_r+0xa94>
 8019066:	9905      	ldr	r1, [sp, #20]
 8019068:	ea41 0909 	orr.w	r9, r1, r9
 801906c:	9906      	ldr	r1, [sp, #24]
 801906e:	ea59 0101 	orrs.w	r1, r9, r1
 8019072:	d120      	bne.n	80190b6 <_dtoa_r+0xad6>
 8019074:	2a00      	cmp	r2, #0
 8019076:	ddec      	ble.n	8019052 <_dtoa_r+0xa72>
 8019078:	4659      	mov	r1, fp
 801907a:	2201      	movs	r2, #1
 801907c:	4620      	mov	r0, r4
 801907e:	9301      	str	r3, [sp, #4]
 8019080:	f001 f8ba 	bl	801a1f8 <__lshift>
 8019084:	4631      	mov	r1, r6
 8019086:	4683      	mov	fp, r0
 8019088:	f001 f922 	bl	801a2d0 <__mcmp>
 801908c:	2800      	cmp	r0, #0
 801908e:	9b01      	ldr	r3, [sp, #4]
 8019090:	dc02      	bgt.n	8019098 <_dtoa_r+0xab8>
 8019092:	d1de      	bne.n	8019052 <_dtoa_r+0xa72>
 8019094:	07da      	lsls	r2, r3, #31
 8019096:	d5dc      	bpl.n	8019052 <_dtoa_r+0xa72>
 8019098:	2b39      	cmp	r3, #57	; 0x39
 801909a:	d1d8      	bne.n	801904e <_dtoa_r+0xa6e>
 801909c:	9a02      	ldr	r2, [sp, #8]
 801909e:	2339      	movs	r3, #57	; 0x39
 80190a0:	7013      	strb	r3, [r2, #0]
 80190a2:	462b      	mov	r3, r5
 80190a4:	461d      	mov	r5, r3
 80190a6:	3b01      	subs	r3, #1
 80190a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80190ac:	2a39      	cmp	r2, #57	; 0x39
 80190ae:	d050      	beq.n	8019152 <_dtoa_r+0xb72>
 80190b0:	3201      	adds	r2, #1
 80190b2:	701a      	strb	r2, [r3, #0]
 80190b4:	e745      	b.n	8018f42 <_dtoa_r+0x962>
 80190b6:	2a00      	cmp	r2, #0
 80190b8:	dd03      	ble.n	80190c2 <_dtoa_r+0xae2>
 80190ba:	2b39      	cmp	r3, #57	; 0x39
 80190bc:	d0ee      	beq.n	801909c <_dtoa_r+0xabc>
 80190be:	3301      	adds	r3, #1
 80190c0:	e7c7      	b.n	8019052 <_dtoa_r+0xa72>
 80190c2:	9a01      	ldr	r2, [sp, #4]
 80190c4:	9907      	ldr	r1, [sp, #28]
 80190c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80190ca:	428a      	cmp	r2, r1
 80190cc:	d02a      	beq.n	8019124 <_dtoa_r+0xb44>
 80190ce:	4659      	mov	r1, fp
 80190d0:	2300      	movs	r3, #0
 80190d2:	220a      	movs	r2, #10
 80190d4:	4620      	mov	r0, r4
 80190d6:	f000 fe95 	bl	8019e04 <__multadd>
 80190da:	45b8      	cmp	r8, r7
 80190dc:	4683      	mov	fp, r0
 80190de:	f04f 0300 	mov.w	r3, #0
 80190e2:	f04f 020a 	mov.w	r2, #10
 80190e6:	4641      	mov	r1, r8
 80190e8:	4620      	mov	r0, r4
 80190ea:	d107      	bne.n	80190fc <_dtoa_r+0xb1c>
 80190ec:	f000 fe8a 	bl	8019e04 <__multadd>
 80190f0:	4680      	mov	r8, r0
 80190f2:	4607      	mov	r7, r0
 80190f4:	9b01      	ldr	r3, [sp, #4]
 80190f6:	3301      	adds	r3, #1
 80190f8:	9301      	str	r3, [sp, #4]
 80190fa:	e775      	b.n	8018fe8 <_dtoa_r+0xa08>
 80190fc:	f000 fe82 	bl	8019e04 <__multadd>
 8019100:	4639      	mov	r1, r7
 8019102:	4680      	mov	r8, r0
 8019104:	2300      	movs	r3, #0
 8019106:	220a      	movs	r2, #10
 8019108:	4620      	mov	r0, r4
 801910a:	f000 fe7b 	bl	8019e04 <__multadd>
 801910e:	4607      	mov	r7, r0
 8019110:	e7f0      	b.n	80190f4 <_dtoa_r+0xb14>
 8019112:	f1b9 0f00 	cmp.w	r9, #0
 8019116:	9a00      	ldr	r2, [sp, #0]
 8019118:	bfcc      	ite	gt
 801911a:	464d      	movgt	r5, r9
 801911c:	2501      	movle	r5, #1
 801911e:	4415      	add	r5, r2
 8019120:	f04f 0800 	mov.w	r8, #0
 8019124:	4659      	mov	r1, fp
 8019126:	2201      	movs	r2, #1
 8019128:	4620      	mov	r0, r4
 801912a:	9301      	str	r3, [sp, #4]
 801912c:	f001 f864 	bl	801a1f8 <__lshift>
 8019130:	4631      	mov	r1, r6
 8019132:	4683      	mov	fp, r0
 8019134:	f001 f8cc 	bl	801a2d0 <__mcmp>
 8019138:	2800      	cmp	r0, #0
 801913a:	dcb2      	bgt.n	80190a2 <_dtoa_r+0xac2>
 801913c:	d102      	bne.n	8019144 <_dtoa_r+0xb64>
 801913e:	9b01      	ldr	r3, [sp, #4]
 8019140:	07db      	lsls	r3, r3, #31
 8019142:	d4ae      	bmi.n	80190a2 <_dtoa_r+0xac2>
 8019144:	462b      	mov	r3, r5
 8019146:	461d      	mov	r5, r3
 8019148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801914c:	2a30      	cmp	r2, #48	; 0x30
 801914e:	d0fa      	beq.n	8019146 <_dtoa_r+0xb66>
 8019150:	e6f7      	b.n	8018f42 <_dtoa_r+0x962>
 8019152:	9a00      	ldr	r2, [sp, #0]
 8019154:	429a      	cmp	r2, r3
 8019156:	d1a5      	bne.n	80190a4 <_dtoa_r+0xac4>
 8019158:	f10a 0a01 	add.w	sl, sl, #1
 801915c:	2331      	movs	r3, #49	; 0x31
 801915e:	e779      	b.n	8019054 <_dtoa_r+0xa74>
 8019160:	4b13      	ldr	r3, [pc, #76]	; (80191b0 <_dtoa_r+0xbd0>)
 8019162:	f7ff baaf 	b.w	80186c4 <_dtoa_r+0xe4>
 8019166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019168:	2b00      	cmp	r3, #0
 801916a:	f47f aa86 	bne.w	801867a <_dtoa_r+0x9a>
 801916e:	4b11      	ldr	r3, [pc, #68]	; (80191b4 <_dtoa_r+0xbd4>)
 8019170:	f7ff baa8 	b.w	80186c4 <_dtoa_r+0xe4>
 8019174:	f1b9 0f00 	cmp.w	r9, #0
 8019178:	dc03      	bgt.n	8019182 <_dtoa_r+0xba2>
 801917a:	9b05      	ldr	r3, [sp, #20]
 801917c:	2b02      	cmp	r3, #2
 801917e:	f73f aec9 	bgt.w	8018f14 <_dtoa_r+0x934>
 8019182:	9d00      	ldr	r5, [sp, #0]
 8019184:	4631      	mov	r1, r6
 8019186:	4658      	mov	r0, fp
 8019188:	f7ff f99c 	bl	80184c4 <quorem>
 801918c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019190:	f805 3b01 	strb.w	r3, [r5], #1
 8019194:	9a00      	ldr	r2, [sp, #0]
 8019196:	1aaa      	subs	r2, r5, r2
 8019198:	4591      	cmp	r9, r2
 801919a:	ddba      	ble.n	8019112 <_dtoa_r+0xb32>
 801919c:	4659      	mov	r1, fp
 801919e:	2300      	movs	r3, #0
 80191a0:	220a      	movs	r2, #10
 80191a2:	4620      	mov	r0, r4
 80191a4:	f000 fe2e 	bl	8019e04 <__multadd>
 80191a8:	4683      	mov	fp, r0
 80191aa:	e7eb      	b.n	8019184 <_dtoa_r+0xba4>
 80191ac:	08032661 	.word	0x08032661
 80191b0:	08032468 	.word	0x08032468
 80191b4:	080325f5 	.word	0x080325f5

080191b8 <__errno>:
 80191b8:	4b01      	ldr	r3, [pc, #4]	; (80191c0 <__errno+0x8>)
 80191ba:	6818      	ldr	r0, [r3, #0]
 80191bc:	4770      	bx	lr
 80191be:	bf00      	nop
 80191c0:	200005c8 	.word	0x200005c8

080191c4 <__sflush_r>:
 80191c4:	898a      	ldrh	r2, [r1, #12]
 80191c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191ca:	4605      	mov	r5, r0
 80191cc:	0710      	lsls	r0, r2, #28
 80191ce:	460c      	mov	r4, r1
 80191d0:	d458      	bmi.n	8019284 <__sflush_r+0xc0>
 80191d2:	684b      	ldr	r3, [r1, #4]
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	dc05      	bgt.n	80191e4 <__sflush_r+0x20>
 80191d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80191da:	2b00      	cmp	r3, #0
 80191dc:	dc02      	bgt.n	80191e4 <__sflush_r+0x20>
 80191de:	2000      	movs	r0, #0
 80191e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80191e6:	2e00      	cmp	r6, #0
 80191e8:	d0f9      	beq.n	80191de <__sflush_r+0x1a>
 80191ea:	2300      	movs	r3, #0
 80191ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80191f0:	682f      	ldr	r7, [r5, #0]
 80191f2:	602b      	str	r3, [r5, #0]
 80191f4:	d032      	beq.n	801925c <__sflush_r+0x98>
 80191f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80191f8:	89a3      	ldrh	r3, [r4, #12]
 80191fa:	075a      	lsls	r2, r3, #29
 80191fc:	d505      	bpl.n	801920a <__sflush_r+0x46>
 80191fe:	6863      	ldr	r3, [r4, #4]
 8019200:	1ac0      	subs	r0, r0, r3
 8019202:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019204:	b10b      	cbz	r3, 801920a <__sflush_r+0x46>
 8019206:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019208:	1ac0      	subs	r0, r0, r3
 801920a:	2300      	movs	r3, #0
 801920c:	4602      	mov	r2, r0
 801920e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019210:	6a21      	ldr	r1, [r4, #32]
 8019212:	4628      	mov	r0, r5
 8019214:	47b0      	blx	r6
 8019216:	1c43      	adds	r3, r0, #1
 8019218:	89a3      	ldrh	r3, [r4, #12]
 801921a:	d106      	bne.n	801922a <__sflush_r+0x66>
 801921c:	6829      	ldr	r1, [r5, #0]
 801921e:	291d      	cmp	r1, #29
 8019220:	d82c      	bhi.n	801927c <__sflush_r+0xb8>
 8019222:	4a2a      	ldr	r2, [pc, #168]	; (80192cc <__sflush_r+0x108>)
 8019224:	40ca      	lsrs	r2, r1
 8019226:	07d6      	lsls	r6, r2, #31
 8019228:	d528      	bpl.n	801927c <__sflush_r+0xb8>
 801922a:	2200      	movs	r2, #0
 801922c:	6062      	str	r2, [r4, #4]
 801922e:	04d9      	lsls	r1, r3, #19
 8019230:	6922      	ldr	r2, [r4, #16]
 8019232:	6022      	str	r2, [r4, #0]
 8019234:	d504      	bpl.n	8019240 <__sflush_r+0x7c>
 8019236:	1c42      	adds	r2, r0, #1
 8019238:	d101      	bne.n	801923e <__sflush_r+0x7a>
 801923a:	682b      	ldr	r3, [r5, #0]
 801923c:	b903      	cbnz	r3, 8019240 <__sflush_r+0x7c>
 801923e:	6560      	str	r0, [r4, #84]	; 0x54
 8019240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019242:	602f      	str	r7, [r5, #0]
 8019244:	2900      	cmp	r1, #0
 8019246:	d0ca      	beq.n	80191de <__sflush_r+0x1a>
 8019248:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801924c:	4299      	cmp	r1, r3
 801924e:	d002      	beq.n	8019256 <__sflush_r+0x92>
 8019250:	4628      	mov	r0, r5
 8019252:	f001 fa3f 	bl	801a6d4 <_free_r>
 8019256:	2000      	movs	r0, #0
 8019258:	6360      	str	r0, [r4, #52]	; 0x34
 801925a:	e7c1      	b.n	80191e0 <__sflush_r+0x1c>
 801925c:	6a21      	ldr	r1, [r4, #32]
 801925e:	2301      	movs	r3, #1
 8019260:	4628      	mov	r0, r5
 8019262:	47b0      	blx	r6
 8019264:	1c41      	adds	r1, r0, #1
 8019266:	d1c7      	bne.n	80191f8 <__sflush_r+0x34>
 8019268:	682b      	ldr	r3, [r5, #0]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d0c4      	beq.n	80191f8 <__sflush_r+0x34>
 801926e:	2b1d      	cmp	r3, #29
 8019270:	d001      	beq.n	8019276 <__sflush_r+0xb2>
 8019272:	2b16      	cmp	r3, #22
 8019274:	d101      	bne.n	801927a <__sflush_r+0xb6>
 8019276:	602f      	str	r7, [r5, #0]
 8019278:	e7b1      	b.n	80191de <__sflush_r+0x1a>
 801927a:	89a3      	ldrh	r3, [r4, #12]
 801927c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019280:	81a3      	strh	r3, [r4, #12]
 8019282:	e7ad      	b.n	80191e0 <__sflush_r+0x1c>
 8019284:	690f      	ldr	r7, [r1, #16]
 8019286:	2f00      	cmp	r7, #0
 8019288:	d0a9      	beq.n	80191de <__sflush_r+0x1a>
 801928a:	0793      	lsls	r3, r2, #30
 801928c:	680e      	ldr	r6, [r1, #0]
 801928e:	bf08      	it	eq
 8019290:	694b      	ldreq	r3, [r1, #20]
 8019292:	600f      	str	r7, [r1, #0]
 8019294:	bf18      	it	ne
 8019296:	2300      	movne	r3, #0
 8019298:	eba6 0807 	sub.w	r8, r6, r7
 801929c:	608b      	str	r3, [r1, #8]
 801929e:	f1b8 0f00 	cmp.w	r8, #0
 80192a2:	dd9c      	ble.n	80191de <__sflush_r+0x1a>
 80192a4:	6a21      	ldr	r1, [r4, #32]
 80192a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80192a8:	4643      	mov	r3, r8
 80192aa:	463a      	mov	r2, r7
 80192ac:	4628      	mov	r0, r5
 80192ae:	47b0      	blx	r6
 80192b0:	2800      	cmp	r0, #0
 80192b2:	dc06      	bgt.n	80192c2 <__sflush_r+0xfe>
 80192b4:	89a3      	ldrh	r3, [r4, #12]
 80192b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192ba:	81a3      	strh	r3, [r4, #12]
 80192bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192c0:	e78e      	b.n	80191e0 <__sflush_r+0x1c>
 80192c2:	4407      	add	r7, r0
 80192c4:	eba8 0800 	sub.w	r8, r8, r0
 80192c8:	e7e9      	b.n	801929e <__sflush_r+0xda>
 80192ca:	bf00      	nop
 80192cc:	20400001 	.word	0x20400001

080192d0 <_fflush_r>:
 80192d0:	b538      	push	{r3, r4, r5, lr}
 80192d2:	690b      	ldr	r3, [r1, #16]
 80192d4:	4605      	mov	r5, r0
 80192d6:	460c      	mov	r4, r1
 80192d8:	b913      	cbnz	r3, 80192e0 <_fflush_r+0x10>
 80192da:	2500      	movs	r5, #0
 80192dc:	4628      	mov	r0, r5
 80192de:	bd38      	pop	{r3, r4, r5, pc}
 80192e0:	b118      	cbz	r0, 80192ea <_fflush_r+0x1a>
 80192e2:	6983      	ldr	r3, [r0, #24]
 80192e4:	b90b      	cbnz	r3, 80192ea <_fflush_r+0x1a>
 80192e6:	f000 f887 	bl	80193f8 <__sinit>
 80192ea:	4b14      	ldr	r3, [pc, #80]	; (801933c <_fflush_r+0x6c>)
 80192ec:	429c      	cmp	r4, r3
 80192ee:	d11b      	bne.n	8019328 <_fflush_r+0x58>
 80192f0:	686c      	ldr	r4, [r5, #4]
 80192f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d0ef      	beq.n	80192da <_fflush_r+0xa>
 80192fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80192fc:	07d0      	lsls	r0, r2, #31
 80192fe:	d404      	bmi.n	801930a <_fflush_r+0x3a>
 8019300:	0599      	lsls	r1, r3, #22
 8019302:	d402      	bmi.n	801930a <_fflush_r+0x3a>
 8019304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019306:	f000 fc9a 	bl	8019c3e <__retarget_lock_acquire_recursive>
 801930a:	4628      	mov	r0, r5
 801930c:	4621      	mov	r1, r4
 801930e:	f7ff ff59 	bl	80191c4 <__sflush_r>
 8019312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019314:	07da      	lsls	r2, r3, #31
 8019316:	4605      	mov	r5, r0
 8019318:	d4e0      	bmi.n	80192dc <_fflush_r+0xc>
 801931a:	89a3      	ldrh	r3, [r4, #12]
 801931c:	059b      	lsls	r3, r3, #22
 801931e:	d4dd      	bmi.n	80192dc <_fflush_r+0xc>
 8019320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019322:	f000 fc8d 	bl	8019c40 <__retarget_lock_release_recursive>
 8019326:	e7d9      	b.n	80192dc <_fflush_r+0xc>
 8019328:	4b05      	ldr	r3, [pc, #20]	; (8019340 <_fflush_r+0x70>)
 801932a:	429c      	cmp	r4, r3
 801932c:	d101      	bne.n	8019332 <_fflush_r+0x62>
 801932e:	68ac      	ldr	r4, [r5, #8]
 8019330:	e7df      	b.n	80192f2 <_fflush_r+0x22>
 8019332:	4b04      	ldr	r3, [pc, #16]	; (8019344 <_fflush_r+0x74>)
 8019334:	429c      	cmp	r4, r3
 8019336:	bf08      	it	eq
 8019338:	68ec      	ldreq	r4, [r5, #12]
 801933a:	e7da      	b.n	80192f2 <_fflush_r+0x22>
 801933c:	08032694 	.word	0x08032694
 8019340:	080326b4 	.word	0x080326b4
 8019344:	08032674 	.word	0x08032674

08019348 <std>:
 8019348:	2300      	movs	r3, #0
 801934a:	b510      	push	{r4, lr}
 801934c:	4604      	mov	r4, r0
 801934e:	e9c0 3300 	strd	r3, r3, [r0]
 8019352:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019356:	6083      	str	r3, [r0, #8]
 8019358:	8181      	strh	r1, [r0, #12]
 801935a:	6643      	str	r3, [r0, #100]	; 0x64
 801935c:	81c2      	strh	r2, [r0, #14]
 801935e:	6183      	str	r3, [r0, #24]
 8019360:	4619      	mov	r1, r3
 8019362:	2208      	movs	r2, #8
 8019364:	305c      	adds	r0, #92	; 0x5c
 8019366:	f7fd fabb 	bl	80168e0 <memset>
 801936a:	4b05      	ldr	r3, [pc, #20]	; (8019380 <std+0x38>)
 801936c:	6263      	str	r3, [r4, #36]	; 0x24
 801936e:	4b05      	ldr	r3, [pc, #20]	; (8019384 <std+0x3c>)
 8019370:	62a3      	str	r3, [r4, #40]	; 0x28
 8019372:	4b05      	ldr	r3, [pc, #20]	; (8019388 <std+0x40>)
 8019374:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019376:	4b05      	ldr	r3, [pc, #20]	; (801938c <std+0x44>)
 8019378:	6224      	str	r4, [r4, #32]
 801937a:	6323      	str	r3, [r4, #48]	; 0x30
 801937c:	bd10      	pop	{r4, pc}
 801937e:	bf00      	nop
 8019380:	0801adc9 	.word	0x0801adc9
 8019384:	0801adeb 	.word	0x0801adeb
 8019388:	0801ae23 	.word	0x0801ae23
 801938c:	0801ae47 	.word	0x0801ae47

08019390 <_cleanup_r>:
 8019390:	4901      	ldr	r1, [pc, #4]	; (8019398 <_cleanup_r+0x8>)
 8019392:	f000 b8c1 	b.w	8019518 <_fwalk_reent>
 8019396:	bf00      	nop
 8019398:	080192d1 	.word	0x080192d1

0801939c <__sfmoreglue>:
 801939c:	b570      	push	{r4, r5, r6, lr}
 801939e:	1e4a      	subs	r2, r1, #1
 80193a0:	2568      	movs	r5, #104	; 0x68
 80193a2:	4355      	muls	r5, r2
 80193a4:	460e      	mov	r6, r1
 80193a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80193aa:	f001 f9e3 	bl	801a774 <_malloc_r>
 80193ae:	4604      	mov	r4, r0
 80193b0:	b140      	cbz	r0, 80193c4 <__sfmoreglue+0x28>
 80193b2:	2100      	movs	r1, #0
 80193b4:	e9c0 1600 	strd	r1, r6, [r0]
 80193b8:	300c      	adds	r0, #12
 80193ba:	60a0      	str	r0, [r4, #8]
 80193bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80193c0:	f7fd fa8e 	bl	80168e0 <memset>
 80193c4:	4620      	mov	r0, r4
 80193c6:	bd70      	pop	{r4, r5, r6, pc}

080193c8 <__sfp_lock_acquire>:
 80193c8:	4801      	ldr	r0, [pc, #4]	; (80193d0 <__sfp_lock_acquire+0x8>)
 80193ca:	f000 bc38 	b.w	8019c3e <__retarget_lock_acquire_recursive>
 80193ce:	bf00      	nop
 80193d0:	2000d688 	.word	0x2000d688

080193d4 <__sfp_lock_release>:
 80193d4:	4801      	ldr	r0, [pc, #4]	; (80193dc <__sfp_lock_release+0x8>)
 80193d6:	f000 bc33 	b.w	8019c40 <__retarget_lock_release_recursive>
 80193da:	bf00      	nop
 80193dc:	2000d688 	.word	0x2000d688

080193e0 <__sinit_lock_acquire>:
 80193e0:	4801      	ldr	r0, [pc, #4]	; (80193e8 <__sinit_lock_acquire+0x8>)
 80193e2:	f000 bc2c 	b.w	8019c3e <__retarget_lock_acquire_recursive>
 80193e6:	bf00      	nop
 80193e8:	2000d683 	.word	0x2000d683

080193ec <__sinit_lock_release>:
 80193ec:	4801      	ldr	r0, [pc, #4]	; (80193f4 <__sinit_lock_release+0x8>)
 80193ee:	f000 bc27 	b.w	8019c40 <__retarget_lock_release_recursive>
 80193f2:	bf00      	nop
 80193f4:	2000d683 	.word	0x2000d683

080193f8 <__sinit>:
 80193f8:	b510      	push	{r4, lr}
 80193fa:	4604      	mov	r4, r0
 80193fc:	f7ff fff0 	bl	80193e0 <__sinit_lock_acquire>
 8019400:	69a3      	ldr	r3, [r4, #24]
 8019402:	b11b      	cbz	r3, 801940c <__sinit+0x14>
 8019404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019408:	f7ff bff0 	b.w	80193ec <__sinit_lock_release>
 801940c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019410:	6523      	str	r3, [r4, #80]	; 0x50
 8019412:	4b13      	ldr	r3, [pc, #76]	; (8019460 <__sinit+0x68>)
 8019414:	4a13      	ldr	r2, [pc, #76]	; (8019464 <__sinit+0x6c>)
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	62a2      	str	r2, [r4, #40]	; 0x28
 801941a:	42a3      	cmp	r3, r4
 801941c:	bf04      	itt	eq
 801941e:	2301      	moveq	r3, #1
 8019420:	61a3      	streq	r3, [r4, #24]
 8019422:	4620      	mov	r0, r4
 8019424:	f000 f820 	bl	8019468 <__sfp>
 8019428:	6060      	str	r0, [r4, #4]
 801942a:	4620      	mov	r0, r4
 801942c:	f000 f81c 	bl	8019468 <__sfp>
 8019430:	60a0      	str	r0, [r4, #8]
 8019432:	4620      	mov	r0, r4
 8019434:	f000 f818 	bl	8019468 <__sfp>
 8019438:	2200      	movs	r2, #0
 801943a:	60e0      	str	r0, [r4, #12]
 801943c:	2104      	movs	r1, #4
 801943e:	6860      	ldr	r0, [r4, #4]
 8019440:	f7ff ff82 	bl	8019348 <std>
 8019444:	68a0      	ldr	r0, [r4, #8]
 8019446:	2201      	movs	r2, #1
 8019448:	2109      	movs	r1, #9
 801944a:	f7ff ff7d 	bl	8019348 <std>
 801944e:	68e0      	ldr	r0, [r4, #12]
 8019450:	2202      	movs	r2, #2
 8019452:	2112      	movs	r1, #18
 8019454:	f7ff ff78 	bl	8019348 <std>
 8019458:	2301      	movs	r3, #1
 801945a:	61a3      	str	r3, [r4, #24]
 801945c:	e7d2      	b.n	8019404 <__sinit+0xc>
 801945e:	bf00      	nop
 8019460:	08032454 	.word	0x08032454
 8019464:	08019391 	.word	0x08019391

08019468 <__sfp>:
 8019468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801946a:	4607      	mov	r7, r0
 801946c:	f7ff ffac 	bl	80193c8 <__sfp_lock_acquire>
 8019470:	4b1e      	ldr	r3, [pc, #120]	; (80194ec <__sfp+0x84>)
 8019472:	681e      	ldr	r6, [r3, #0]
 8019474:	69b3      	ldr	r3, [r6, #24]
 8019476:	b913      	cbnz	r3, 801947e <__sfp+0x16>
 8019478:	4630      	mov	r0, r6
 801947a:	f7ff ffbd 	bl	80193f8 <__sinit>
 801947e:	3648      	adds	r6, #72	; 0x48
 8019480:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019484:	3b01      	subs	r3, #1
 8019486:	d503      	bpl.n	8019490 <__sfp+0x28>
 8019488:	6833      	ldr	r3, [r6, #0]
 801948a:	b30b      	cbz	r3, 80194d0 <__sfp+0x68>
 801948c:	6836      	ldr	r6, [r6, #0]
 801948e:	e7f7      	b.n	8019480 <__sfp+0x18>
 8019490:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019494:	b9d5      	cbnz	r5, 80194cc <__sfp+0x64>
 8019496:	4b16      	ldr	r3, [pc, #88]	; (80194f0 <__sfp+0x88>)
 8019498:	60e3      	str	r3, [r4, #12]
 801949a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801949e:	6665      	str	r5, [r4, #100]	; 0x64
 80194a0:	f000 fbcc 	bl	8019c3c <__retarget_lock_init_recursive>
 80194a4:	f7ff ff96 	bl	80193d4 <__sfp_lock_release>
 80194a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80194ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80194b0:	6025      	str	r5, [r4, #0]
 80194b2:	61a5      	str	r5, [r4, #24]
 80194b4:	2208      	movs	r2, #8
 80194b6:	4629      	mov	r1, r5
 80194b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80194bc:	f7fd fa10 	bl	80168e0 <memset>
 80194c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80194c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80194c8:	4620      	mov	r0, r4
 80194ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194cc:	3468      	adds	r4, #104	; 0x68
 80194ce:	e7d9      	b.n	8019484 <__sfp+0x1c>
 80194d0:	2104      	movs	r1, #4
 80194d2:	4638      	mov	r0, r7
 80194d4:	f7ff ff62 	bl	801939c <__sfmoreglue>
 80194d8:	4604      	mov	r4, r0
 80194da:	6030      	str	r0, [r6, #0]
 80194dc:	2800      	cmp	r0, #0
 80194de:	d1d5      	bne.n	801948c <__sfp+0x24>
 80194e0:	f7ff ff78 	bl	80193d4 <__sfp_lock_release>
 80194e4:	230c      	movs	r3, #12
 80194e6:	603b      	str	r3, [r7, #0]
 80194e8:	e7ee      	b.n	80194c8 <__sfp+0x60>
 80194ea:	bf00      	nop
 80194ec:	08032454 	.word	0x08032454
 80194f0:	ffff0001 	.word	0xffff0001

080194f4 <fiprintf>:
 80194f4:	b40e      	push	{r1, r2, r3}
 80194f6:	b503      	push	{r0, r1, lr}
 80194f8:	4601      	mov	r1, r0
 80194fa:	ab03      	add	r3, sp, #12
 80194fc:	4805      	ldr	r0, [pc, #20]	; (8019514 <fiprintf+0x20>)
 80194fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019502:	6800      	ldr	r0, [r0, #0]
 8019504:	9301      	str	r3, [sp, #4]
 8019506:	f001 fb15 	bl	801ab34 <_vfiprintf_r>
 801950a:	b002      	add	sp, #8
 801950c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019510:	b003      	add	sp, #12
 8019512:	4770      	bx	lr
 8019514:	200005c8 	.word	0x200005c8

08019518 <_fwalk_reent>:
 8019518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801951c:	4606      	mov	r6, r0
 801951e:	4688      	mov	r8, r1
 8019520:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019524:	2700      	movs	r7, #0
 8019526:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801952a:	f1b9 0901 	subs.w	r9, r9, #1
 801952e:	d505      	bpl.n	801953c <_fwalk_reent+0x24>
 8019530:	6824      	ldr	r4, [r4, #0]
 8019532:	2c00      	cmp	r4, #0
 8019534:	d1f7      	bne.n	8019526 <_fwalk_reent+0xe>
 8019536:	4638      	mov	r0, r7
 8019538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801953c:	89ab      	ldrh	r3, [r5, #12]
 801953e:	2b01      	cmp	r3, #1
 8019540:	d907      	bls.n	8019552 <_fwalk_reent+0x3a>
 8019542:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019546:	3301      	adds	r3, #1
 8019548:	d003      	beq.n	8019552 <_fwalk_reent+0x3a>
 801954a:	4629      	mov	r1, r5
 801954c:	4630      	mov	r0, r6
 801954e:	47c0      	blx	r8
 8019550:	4307      	orrs	r7, r0
 8019552:	3568      	adds	r5, #104	; 0x68
 8019554:	e7e9      	b.n	801952a <_fwalk_reent+0x12>

08019556 <rshift>:
 8019556:	6903      	ldr	r3, [r0, #16]
 8019558:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801955c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019560:	ea4f 1261 	mov.w	r2, r1, asr #5
 8019564:	f100 0414 	add.w	r4, r0, #20
 8019568:	dd45      	ble.n	80195f6 <rshift+0xa0>
 801956a:	f011 011f 	ands.w	r1, r1, #31
 801956e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8019572:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8019576:	d10c      	bne.n	8019592 <rshift+0x3c>
 8019578:	f100 0710 	add.w	r7, r0, #16
 801957c:	4629      	mov	r1, r5
 801957e:	42b1      	cmp	r1, r6
 8019580:	d334      	bcc.n	80195ec <rshift+0x96>
 8019582:	1a9b      	subs	r3, r3, r2
 8019584:	009b      	lsls	r3, r3, #2
 8019586:	1eea      	subs	r2, r5, #3
 8019588:	4296      	cmp	r6, r2
 801958a:	bf38      	it	cc
 801958c:	2300      	movcc	r3, #0
 801958e:	4423      	add	r3, r4
 8019590:	e015      	b.n	80195be <rshift+0x68>
 8019592:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8019596:	f1c1 0820 	rsb	r8, r1, #32
 801959a:	40cf      	lsrs	r7, r1
 801959c:	f105 0e04 	add.w	lr, r5, #4
 80195a0:	46a1      	mov	r9, r4
 80195a2:	4576      	cmp	r6, lr
 80195a4:	46f4      	mov	ip, lr
 80195a6:	d815      	bhi.n	80195d4 <rshift+0x7e>
 80195a8:	1a9b      	subs	r3, r3, r2
 80195aa:	009a      	lsls	r2, r3, #2
 80195ac:	3a04      	subs	r2, #4
 80195ae:	3501      	adds	r5, #1
 80195b0:	42ae      	cmp	r6, r5
 80195b2:	bf38      	it	cc
 80195b4:	2200      	movcc	r2, #0
 80195b6:	18a3      	adds	r3, r4, r2
 80195b8:	50a7      	str	r7, [r4, r2]
 80195ba:	b107      	cbz	r7, 80195be <rshift+0x68>
 80195bc:	3304      	adds	r3, #4
 80195be:	1b1a      	subs	r2, r3, r4
 80195c0:	42a3      	cmp	r3, r4
 80195c2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80195c6:	bf08      	it	eq
 80195c8:	2300      	moveq	r3, #0
 80195ca:	6102      	str	r2, [r0, #16]
 80195cc:	bf08      	it	eq
 80195ce:	6143      	streq	r3, [r0, #20]
 80195d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195d4:	f8dc c000 	ldr.w	ip, [ip]
 80195d8:	fa0c fc08 	lsl.w	ip, ip, r8
 80195dc:	ea4c 0707 	orr.w	r7, ip, r7
 80195e0:	f849 7b04 	str.w	r7, [r9], #4
 80195e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80195e8:	40cf      	lsrs	r7, r1
 80195ea:	e7da      	b.n	80195a2 <rshift+0x4c>
 80195ec:	f851 cb04 	ldr.w	ip, [r1], #4
 80195f0:	f847 cf04 	str.w	ip, [r7, #4]!
 80195f4:	e7c3      	b.n	801957e <rshift+0x28>
 80195f6:	4623      	mov	r3, r4
 80195f8:	e7e1      	b.n	80195be <rshift+0x68>

080195fa <__hexdig_fun>:
 80195fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80195fe:	2b09      	cmp	r3, #9
 8019600:	d802      	bhi.n	8019608 <__hexdig_fun+0xe>
 8019602:	3820      	subs	r0, #32
 8019604:	b2c0      	uxtb	r0, r0
 8019606:	4770      	bx	lr
 8019608:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801960c:	2b05      	cmp	r3, #5
 801960e:	d801      	bhi.n	8019614 <__hexdig_fun+0x1a>
 8019610:	3847      	subs	r0, #71	; 0x47
 8019612:	e7f7      	b.n	8019604 <__hexdig_fun+0xa>
 8019614:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8019618:	2b05      	cmp	r3, #5
 801961a:	d801      	bhi.n	8019620 <__hexdig_fun+0x26>
 801961c:	3827      	subs	r0, #39	; 0x27
 801961e:	e7f1      	b.n	8019604 <__hexdig_fun+0xa>
 8019620:	2000      	movs	r0, #0
 8019622:	4770      	bx	lr

08019624 <__gethex>:
 8019624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019628:	ed2d 8b02 	vpush	{d8}
 801962c:	b089      	sub	sp, #36	; 0x24
 801962e:	ee08 0a10 	vmov	s16, r0
 8019632:	9304      	str	r3, [sp, #16]
 8019634:	4bbc      	ldr	r3, [pc, #752]	; (8019928 <__gethex+0x304>)
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	9301      	str	r3, [sp, #4]
 801963a:	4618      	mov	r0, r3
 801963c:	468b      	mov	fp, r1
 801963e:	4690      	mov	r8, r2
 8019640:	f7e6 fdd0 	bl	80001e4 <strlen>
 8019644:	9b01      	ldr	r3, [sp, #4]
 8019646:	f8db 2000 	ldr.w	r2, [fp]
 801964a:	4403      	add	r3, r0
 801964c:	4682      	mov	sl, r0
 801964e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8019652:	9305      	str	r3, [sp, #20]
 8019654:	1c93      	adds	r3, r2, #2
 8019656:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801965a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801965e:	32fe      	adds	r2, #254	; 0xfe
 8019660:	18d1      	adds	r1, r2, r3
 8019662:	461f      	mov	r7, r3
 8019664:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019668:	9100      	str	r1, [sp, #0]
 801966a:	2830      	cmp	r0, #48	; 0x30
 801966c:	d0f8      	beq.n	8019660 <__gethex+0x3c>
 801966e:	f7ff ffc4 	bl	80195fa <__hexdig_fun>
 8019672:	4604      	mov	r4, r0
 8019674:	2800      	cmp	r0, #0
 8019676:	d13a      	bne.n	80196ee <__gethex+0xca>
 8019678:	9901      	ldr	r1, [sp, #4]
 801967a:	4652      	mov	r2, sl
 801967c:	4638      	mov	r0, r7
 801967e:	f7fd fee7 	bl	8017450 <strncmp>
 8019682:	4605      	mov	r5, r0
 8019684:	2800      	cmp	r0, #0
 8019686:	d168      	bne.n	801975a <__gethex+0x136>
 8019688:	f817 000a 	ldrb.w	r0, [r7, sl]
 801968c:	eb07 060a 	add.w	r6, r7, sl
 8019690:	f7ff ffb3 	bl	80195fa <__hexdig_fun>
 8019694:	2800      	cmp	r0, #0
 8019696:	d062      	beq.n	801975e <__gethex+0x13a>
 8019698:	4633      	mov	r3, r6
 801969a:	7818      	ldrb	r0, [r3, #0]
 801969c:	2830      	cmp	r0, #48	; 0x30
 801969e:	461f      	mov	r7, r3
 80196a0:	f103 0301 	add.w	r3, r3, #1
 80196a4:	d0f9      	beq.n	801969a <__gethex+0x76>
 80196a6:	f7ff ffa8 	bl	80195fa <__hexdig_fun>
 80196aa:	2301      	movs	r3, #1
 80196ac:	fab0 f480 	clz	r4, r0
 80196b0:	0964      	lsrs	r4, r4, #5
 80196b2:	4635      	mov	r5, r6
 80196b4:	9300      	str	r3, [sp, #0]
 80196b6:	463a      	mov	r2, r7
 80196b8:	4616      	mov	r6, r2
 80196ba:	3201      	adds	r2, #1
 80196bc:	7830      	ldrb	r0, [r6, #0]
 80196be:	f7ff ff9c 	bl	80195fa <__hexdig_fun>
 80196c2:	2800      	cmp	r0, #0
 80196c4:	d1f8      	bne.n	80196b8 <__gethex+0x94>
 80196c6:	9901      	ldr	r1, [sp, #4]
 80196c8:	4652      	mov	r2, sl
 80196ca:	4630      	mov	r0, r6
 80196cc:	f7fd fec0 	bl	8017450 <strncmp>
 80196d0:	b980      	cbnz	r0, 80196f4 <__gethex+0xd0>
 80196d2:	b94d      	cbnz	r5, 80196e8 <__gethex+0xc4>
 80196d4:	eb06 050a 	add.w	r5, r6, sl
 80196d8:	462a      	mov	r2, r5
 80196da:	4616      	mov	r6, r2
 80196dc:	3201      	adds	r2, #1
 80196de:	7830      	ldrb	r0, [r6, #0]
 80196e0:	f7ff ff8b 	bl	80195fa <__hexdig_fun>
 80196e4:	2800      	cmp	r0, #0
 80196e6:	d1f8      	bne.n	80196da <__gethex+0xb6>
 80196e8:	1bad      	subs	r5, r5, r6
 80196ea:	00ad      	lsls	r5, r5, #2
 80196ec:	e004      	b.n	80196f8 <__gethex+0xd4>
 80196ee:	2400      	movs	r4, #0
 80196f0:	4625      	mov	r5, r4
 80196f2:	e7e0      	b.n	80196b6 <__gethex+0x92>
 80196f4:	2d00      	cmp	r5, #0
 80196f6:	d1f7      	bne.n	80196e8 <__gethex+0xc4>
 80196f8:	7833      	ldrb	r3, [r6, #0]
 80196fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80196fe:	2b50      	cmp	r3, #80	; 0x50
 8019700:	d13b      	bne.n	801977a <__gethex+0x156>
 8019702:	7873      	ldrb	r3, [r6, #1]
 8019704:	2b2b      	cmp	r3, #43	; 0x2b
 8019706:	d02c      	beq.n	8019762 <__gethex+0x13e>
 8019708:	2b2d      	cmp	r3, #45	; 0x2d
 801970a:	d02e      	beq.n	801976a <__gethex+0x146>
 801970c:	1c71      	adds	r1, r6, #1
 801970e:	f04f 0900 	mov.w	r9, #0
 8019712:	7808      	ldrb	r0, [r1, #0]
 8019714:	f7ff ff71 	bl	80195fa <__hexdig_fun>
 8019718:	1e43      	subs	r3, r0, #1
 801971a:	b2db      	uxtb	r3, r3
 801971c:	2b18      	cmp	r3, #24
 801971e:	d82c      	bhi.n	801977a <__gethex+0x156>
 8019720:	f1a0 0210 	sub.w	r2, r0, #16
 8019724:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8019728:	f7ff ff67 	bl	80195fa <__hexdig_fun>
 801972c:	1e43      	subs	r3, r0, #1
 801972e:	b2db      	uxtb	r3, r3
 8019730:	2b18      	cmp	r3, #24
 8019732:	d91d      	bls.n	8019770 <__gethex+0x14c>
 8019734:	f1b9 0f00 	cmp.w	r9, #0
 8019738:	d000      	beq.n	801973c <__gethex+0x118>
 801973a:	4252      	negs	r2, r2
 801973c:	4415      	add	r5, r2
 801973e:	f8cb 1000 	str.w	r1, [fp]
 8019742:	b1e4      	cbz	r4, 801977e <__gethex+0x15a>
 8019744:	9b00      	ldr	r3, [sp, #0]
 8019746:	2b00      	cmp	r3, #0
 8019748:	bf14      	ite	ne
 801974a:	2700      	movne	r7, #0
 801974c:	2706      	moveq	r7, #6
 801974e:	4638      	mov	r0, r7
 8019750:	b009      	add	sp, #36	; 0x24
 8019752:	ecbd 8b02 	vpop	{d8}
 8019756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801975a:	463e      	mov	r6, r7
 801975c:	4625      	mov	r5, r4
 801975e:	2401      	movs	r4, #1
 8019760:	e7ca      	b.n	80196f8 <__gethex+0xd4>
 8019762:	f04f 0900 	mov.w	r9, #0
 8019766:	1cb1      	adds	r1, r6, #2
 8019768:	e7d3      	b.n	8019712 <__gethex+0xee>
 801976a:	f04f 0901 	mov.w	r9, #1
 801976e:	e7fa      	b.n	8019766 <__gethex+0x142>
 8019770:	230a      	movs	r3, #10
 8019772:	fb03 0202 	mla	r2, r3, r2, r0
 8019776:	3a10      	subs	r2, #16
 8019778:	e7d4      	b.n	8019724 <__gethex+0x100>
 801977a:	4631      	mov	r1, r6
 801977c:	e7df      	b.n	801973e <__gethex+0x11a>
 801977e:	1bf3      	subs	r3, r6, r7
 8019780:	3b01      	subs	r3, #1
 8019782:	4621      	mov	r1, r4
 8019784:	2b07      	cmp	r3, #7
 8019786:	dc0b      	bgt.n	80197a0 <__gethex+0x17c>
 8019788:	ee18 0a10 	vmov	r0, s16
 801978c:	f000 fad8 	bl	8019d40 <_Balloc>
 8019790:	4604      	mov	r4, r0
 8019792:	b940      	cbnz	r0, 80197a6 <__gethex+0x182>
 8019794:	4b65      	ldr	r3, [pc, #404]	; (801992c <__gethex+0x308>)
 8019796:	4602      	mov	r2, r0
 8019798:	21de      	movs	r1, #222	; 0xde
 801979a:	4865      	ldr	r0, [pc, #404]	; (8019930 <__gethex+0x30c>)
 801979c:	f7fe fe74 	bl	8018488 <__assert_func>
 80197a0:	3101      	adds	r1, #1
 80197a2:	105b      	asrs	r3, r3, #1
 80197a4:	e7ee      	b.n	8019784 <__gethex+0x160>
 80197a6:	f100 0914 	add.w	r9, r0, #20
 80197aa:	f04f 0b00 	mov.w	fp, #0
 80197ae:	f1ca 0301 	rsb	r3, sl, #1
 80197b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80197b6:	f8cd b000 	str.w	fp, [sp]
 80197ba:	9306      	str	r3, [sp, #24]
 80197bc:	42b7      	cmp	r7, r6
 80197be:	d340      	bcc.n	8019842 <__gethex+0x21e>
 80197c0:	9802      	ldr	r0, [sp, #8]
 80197c2:	9b00      	ldr	r3, [sp, #0]
 80197c4:	f840 3b04 	str.w	r3, [r0], #4
 80197c8:	eba0 0009 	sub.w	r0, r0, r9
 80197cc:	1080      	asrs	r0, r0, #2
 80197ce:	0146      	lsls	r6, r0, #5
 80197d0:	6120      	str	r0, [r4, #16]
 80197d2:	4618      	mov	r0, r3
 80197d4:	f000 fbaa 	bl	8019f2c <__hi0bits>
 80197d8:	1a30      	subs	r0, r6, r0
 80197da:	f8d8 6000 	ldr.w	r6, [r8]
 80197de:	42b0      	cmp	r0, r6
 80197e0:	dd63      	ble.n	80198aa <__gethex+0x286>
 80197e2:	1b87      	subs	r7, r0, r6
 80197e4:	4639      	mov	r1, r7
 80197e6:	4620      	mov	r0, r4
 80197e8:	f000 ff44 	bl	801a674 <__any_on>
 80197ec:	4682      	mov	sl, r0
 80197ee:	b1a8      	cbz	r0, 801981c <__gethex+0x1f8>
 80197f0:	1e7b      	subs	r3, r7, #1
 80197f2:	1159      	asrs	r1, r3, #5
 80197f4:	f003 021f 	and.w	r2, r3, #31
 80197f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80197fc:	f04f 0a01 	mov.w	sl, #1
 8019800:	fa0a f202 	lsl.w	r2, sl, r2
 8019804:	420a      	tst	r2, r1
 8019806:	d009      	beq.n	801981c <__gethex+0x1f8>
 8019808:	4553      	cmp	r3, sl
 801980a:	dd05      	ble.n	8019818 <__gethex+0x1f4>
 801980c:	1eb9      	subs	r1, r7, #2
 801980e:	4620      	mov	r0, r4
 8019810:	f000 ff30 	bl	801a674 <__any_on>
 8019814:	2800      	cmp	r0, #0
 8019816:	d145      	bne.n	80198a4 <__gethex+0x280>
 8019818:	f04f 0a02 	mov.w	sl, #2
 801981c:	4639      	mov	r1, r7
 801981e:	4620      	mov	r0, r4
 8019820:	f7ff fe99 	bl	8019556 <rshift>
 8019824:	443d      	add	r5, r7
 8019826:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801982a:	42ab      	cmp	r3, r5
 801982c:	da4c      	bge.n	80198c8 <__gethex+0x2a4>
 801982e:	ee18 0a10 	vmov	r0, s16
 8019832:	4621      	mov	r1, r4
 8019834:	f000 fac4 	bl	8019dc0 <_Bfree>
 8019838:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801983a:	2300      	movs	r3, #0
 801983c:	6013      	str	r3, [r2, #0]
 801983e:	27a3      	movs	r7, #163	; 0xa3
 8019840:	e785      	b.n	801974e <__gethex+0x12a>
 8019842:	1e73      	subs	r3, r6, #1
 8019844:	9a05      	ldr	r2, [sp, #20]
 8019846:	9303      	str	r3, [sp, #12]
 8019848:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801984c:	4293      	cmp	r3, r2
 801984e:	d019      	beq.n	8019884 <__gethex+0x260>
 8019850:	f1bb 0f20 	cmp.w	fp, #32
 8019854:	d107      	bne.n	8019866 <__gethex+0x242>
 8019856:	9b02      	ldr	r3, [sp, #8]
 8019858:	9a00      	ldr	r2, [sp, #0]
 801985a:	f843 2b04 	str.w	r2, [r3], #4
 801985e:	9302      	str	r3, [sp, #8]
 8019860:	2300      	movs	r3, #0
 8019862:	9300      	str	r3, [sp, #0]
 8019864:	469b      	mov	fp, r3
 8019866:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801986a:	f7ff fec6 	bl	80195fa <__hexdig_fun>
 801986e:	9b00      	ldr	r3, [sp, #0]
 8019870:	f000 000f 	and.w	r0, r0, #15
 8019874:	fa00 f00b 	lsl.w	r0, r0, fp
 8019878:	4303      	orrs	r3, r0
 801987a:	9300      	str	r3, [sp, #0]
 801987c:	f10b 0b04 	add.w	fp, fp, #4
 8019880:	9b03      	ldr	r3, [sp, #12]
 8019882:	e00d      	b.n	80198a0 <__gethex+0x27c>
 8019884:	9b03      	ldr	r3, [sp, #12]
 8019886:	9a06      	ldr	r2, [sp, #24]
 8019888:	4413      	add	r3, r2
 801988a:	42bb      	cmp	r3, r7
 801988c:	d3e0      	bcc.n	8019850 <__gethex+0x22c>
 801988e:	4618      	mov	r0, r3
 8019890:	9901      	ldr	r1, [sp, #4]
 8019892:	9307      	str	r3, [sp, #28]
 8019894:	4652      	mov	r2, sl
 8019896:	f7fd fddb 	bl	8017450 <strncmp>
 801989a:	9b07      	ldr	r3, [sp, #28]
 801989c:	2800      	cmp	r0, #0
 801989e:	d1d7      	bne.n	8019850 <__gethex+0x22c>
 80198a0:	461e      	mov	r6, r3
 80198a2:	e78b      	b.n	80197bc <__gethex+0x198>
 80198a4:	f04f 0a03 	mov.w	sl, #3
 80198a8:	e7b8      	b.n	801981c <__gethex+0x1f8>
 80198aa:	da0a      	bge.n	80198c2 <__gethex+0x29e>
 80198ac:	1a37      	subs	r7, r6, r0
 80198ae:	4621      	mov	r1, r4
 80198b0:	ee18 0a10 	vmov	r0, s16
 80198b4:	463a      	mov	r2, r7
 80198b6:	f000 fc9f 	bl	801a1f8 <__lshift>
 80198ba:	1bed      	subs	r5, r5, r7
 80198bc:	4604      	mov	r4, r0
 80198be:	f100 0914 	add.w	r9, r0, #20
 80198c2:	f04f 0a00 	mov.w	sl, #0
 80198c6:	e7ae      	b.n	8019826 <__gethex+0x202>
 80198c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80198cc:	42a8      	cmp	r0, r5
 80198ce:	dd72      	ble.n	80199b6 <__gethex+0x392>
 80198d0:	1b45      	subs	r5, r0, r5
 80198d2:	42ae      	cmp	r6, r5
 80198d4:	dc36      	bgt.n	8019944 <__gethex+0x320>
 80198d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80198da:	2b02      	cmp	r3, #2
 80198dc:	d02a      	beq.n	8019934 <__gethex+0x310>
 80198de:	2b03      	cmp	r3, #3
 80198e0:	d02c      	beq.n	801993c <__gethex+0x318>
 80198e2:	2b01      	cmp	r3, #1
 80198e4:	d115      	bne.n	8019912 <__gethex+0x2ee>
 80198e6:	42ae      	cmp	r6, r5
 80198e8:	d113      	bne.n	8019912 <__gethex+0x2ee>
 80198ea:	2e01      	cmp	r6, #1
 80198ec:	d10b      	bne.n	8019906 <__gethex+0x2e2>
 80198ee:	9a04      	ldr	r2, [sp, #16]
 80198f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80198f4:	6013      	str	r3, [r2, #0]
 80198f6:	2301      	movs	r3, #1
 80198f8:	6123      	str	r3, [r4, #16]
 80198fa:	f8c9 3000 	str.w	r3, [r9]
 80198fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019900:	2762      	movs	r7, #98	; 0x62
 8019902:	601c      	str	r4, [r3, #0]
 8019904:	e723      	b.n	801974e <__gethex+0x12a>
 8019906:	1e71      	subs	r1, r6, #1
 8019908:	4620      	mov	r0, r4
 801990a:	f000 feb3 	bl	801a674 <__any_on>
 801990e:	2800      	cmp	r0, #0
 8019910:	d1ed      	bne.n	80198ee <__gethex+0x2ca>
 8019912:	ee18 0a10 	vmov	r0, s16
 8019916:	4621      	mov	r1, r4
 8019918:	f000 fa52 	bl	8019dc0 <_Bfree>
 801991c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801991e:	2300      	movs	r3, #0
 8019920:	6013      	str	r3, [r2, #0]
 8019922:	2750      	movs	r7, #80	; 0x50
 8019924:	e713      	b.n	801974e <__gethex+0x12a>
 8019926:	bf00      	nop
 8019928:	08032740 	.word	0x08032740
 801992c:	08032661 	.word	0x08032661
 8019930:	080326d4 	.word	0x080326d4
 8019934:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019936:	2b00      	cmp	r3, #0
 8019938:	d1eb      	bne.n	8019912 <__gethex+0x2ee>
 801993a:	e7d8      	b.n	80198ee <__gethex+0x2ca>
 801993c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801993e:	2b00      	cmp	r3, #0
 8019940:	d1d5      	bne.n	80198ee <__gethex+0x2ca>
 8019942:	e7e6      	b.n	8019912 <__gethex+0x2ee>
 8019944:	1e6f      	subs	r7, r5, #1
 8019946:	f1ba 0f00 	cmp.w	sl, #0
 801994a:	d131      	bne.n	80199b0 <__gethex+0x38c>
 801994c:	b127      	cbz	r7, 8019958 <__gethex+0x334>
 801994e:	4639      	mov	r1, r7
 8019950:	4620      	mov	r0, r4
 8019952:	f000 fe8f 	bl	801a674 <__any_on>
 8019956:	4682      	mov	sl, r0
 8019958:	117b      	asrs	r3, r7, #5
 801995a:	2101      	movs	r1, #1
 801995c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8019960:	f007 071f 	and.w	r7, r7, #31
 8019964:	fa01 f707 	lsl.w	r7, r1, r7
 8019968:	421f      	tst	r7, r3
 801996a:	4629      	mov	r1, r5
 801996c:	4620      	mov	r0, r4
 801996e:	bf18      	it	ne
 8019970:	f04a 0a02 	orrne.w	sl, sl, #2
 8019974:	1b76      	subs	r6, r6, r5
 8019976:	f7ff fdee 	bl	8019556 <rshift>
 801997a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801997e:	2702      	movs	r7, #2
 8019980:	f1ba 0f00 	cmp.w	sl, #0
 8019984:	d048      	beq.n	8019a18 <__gethex+0x3f4>
 8019986:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801998a:	2b02      	cmp	r3, #2
 801998c:	d015      	beq.n	80199ba <__gethex+0x396>
 801998e:	2b03      	cmp	r3, #3
 8019990:	d017      	beq.n	80199c2 <__gethex+0x39e>
 8019992:	2b01      	cmp	r3, #1
 8019994:	d109      	bne.n	80199aa <__gethex+0x386>
 8019996:	f01a 0f02 	tst.w	sl, #2
 801999a:	d006      	beq.n	80199aa <__gethex+0x386>
 801999c:	f8d9 0000 	ldr.w	r0, [r9]
 80199a0:	ea4a 0a00 	orr.w	sl, sl, r0
 80199a4:	f01a 0f01 	tst.w	sl, #1
 80199a8:	d10e      	bne.n	80199c8 <__gethex+0x3a4>
 80199aa:	f047 0710 	orr.w	r7, r7, #16
 80199ae:	e033      	b.n	8019a18 <__gethex+0x3f4>
 80199b0:	f04f 0a01 	mov.w	sl, #1
 80199b4:	e7d0      	b.n	8019958 <__gethex+0x334>
 80199b6:	2701      	movs	r7, #1
 80199b8:	e7e2      	b.n	8019980 <__gethex+0x35c>
 80199ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80199bc:	f1c3 0301 	rsb	r3, r3, #1
 80199c0:	9315      	str	r3, [sp, #84]	; 0x54
 80199c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d0f0      	beq.n	80199aa <__gethex+0x386>
 80199c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80199cc:	f104 0314 	add.w	r3, r4, #20
 80199d0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80199d4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80199d8:	f04f 0c00 	mov.w	ip, #0
 80199dc:	4618      	mov	r0, r3
 80199de:	f853 2b04 	ldr.w	r2, [r3], #4
 80199e2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80199e6:	d01c      	beq.n	8019a22 <__gethex+0x3fe>
 80199e8:	3201      	adds	r2, #1
 80199ea:	6002      	str	r2, [r0, #0]
 80199ec:	2f02      	cmp	r7, #2
 80199ee:	f104 0314 	add.w	r3, r4, #20
 80199f2:	d13f      	bne.n	8019a74 <__gethex+0x450>
 80199f4:	f8d8 2000 	ldr.w	r2, [r8]
 80199f8:	3a01      	subs	r2, #1
 80199fa:	42b2      	cmp	r2, r6
 80199fc:	d10a      	bne.n	8019a14 <__gethex+0x3f0>
 80199fe:	1171      	asrs	r1, r6, #5
 8019a00:	2201      	movs	r2, #1
 8019a02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019a06:	f006 061f 	and.w	r6, r6, #31
 8019a0a:	fa02 f606 	lsl.w	r6, r2, r6
 8019a0e:	421e      	tst	r6, r3
 8019a10:	bf18      	it	ne
 8019a12:	4617      	movne	r7, r2
 8019a14:	f047 0720 	orr.w	r7, r7, #32
 8019a18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8019a1a:	601c      	str	r4, [r3, #0]
 8019a1c:	9b04      	ldr	r3, [sp, #16]
 8019a1e:	601d      	str	r5, [r3, #0]
 8019a20:	e695      	b.n	801974e <__gethex+0x12a>
 8019a22:	4299      	cmp	r1, r3
 8019a24:	f843 cc04 	str.w	ip, [r3, #-4]
 8019a28:	d8d8      	bhi.n	80199dc <__gethex+0x3b8>
 8019a2a:	68a3      	ldr	r3, [r4, #8]
 8019a2c:	459b      	cmp	fp, r3
 8019a2e:	db19      	blt.n	8019a64 <__gethex+0x440>
 8019a30:	6861      	ldr	r1, [r4, #4]
 8019a32:	ee18 0a10 	vmov	r0, s16
 8019a36:	3101      	adds	r1, #1
 8019a38:	f000 f982 	bl	8019d40 <_Balloc>
 8019a3c:	4681      	mov	r9, r0
 8019a3e:	b918      	cbnz	r0, 8019a48 <__gethex+0x424>
 8019a40:	4b1a      	ldr	r3, [pc, #104]	; (8019aac <__gethex+0x488>)
 8019a42:	4602      	mov	r2, r0
 8019a44:	2184      	movs	r1, #132	; 0x84
 8019a46:	e6a8      	b.n	801979a <__gethex+0x176>
 8019a48:	6922      	ldr	r2, [r4, #16]
 8019a4a:	3202      	adds	r2, #2
 8019a4c:	f104 010c 	add.w	r1, r4, #12
 8019a50:	0092      	lsls	r2, r2, #2
 8019a52:	300c      	adds	r0, #12
 8019a54:	f7fc ff1c 	bl	8016890 <memcpy>
 8019a58:	4621      	mov	r1, r4
 8019a5a:	ee18 0a10 	vmov	r0, s16
 8019a5e:	f000 f9af 	bl	8019dc0 <_Bfree>
 8019a62:	464c      	mov	r4, r9
 8019a64:	6923      	ldr	r3, [r4, #16]
 8019a66:	1c5a      	adds	r2, r3, #1
 8019a68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019a6c:	6122      	str	r2, [r4, #16]
 8019a6e:	2201      	movs	r2, #1
 8019a70:	615a      	str	r2, [r3, #20]
 8019a72:	e7bb      	b.n	80199ec <__gethex+0x3c8>
 8019a74:	6922      	ldr	r2, [r4, #16]
 8019a76:	455a      	cmp	r2, fp
 8019a78:	dd0b      	ble.n	8019a92 <__gethex+0x46e>
 8019a7a:	2101      	movs	r1, #1
 8019a7c:	4620      	mov	r0, r4
 8019a7e:	f7ff fd6a 	bl	8019556 <rshift>
 8019a82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8019a86:	3501      	adds	r5, #1
 8019a88:	42ab      	cmp	r3, r5
 8019a8a:	f6ff aed0 	blt.w	801982e <__gethex+0x20a>
 8019a8e:	2701      	movs	r7, #1
 8019a90:	e7c0      	b.n	8019a14 <__gethex+0x3f0>
 8019a92:	f016 061f 	ands.w	r6, r6, #31
 8019a96:	d0fa      	beq.n	8019a8e <__gethex+0x46a>
 8019a98:	449a      	add	sl, r3
 8019a9a:	f1c6 0620 	rsb	r6, r6, #32
 8019a9e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8019aa2:	f000 fa43 	bl	8019f2c <__hi0bits>
 8019aa6:	42b0      	cmp	r0, r6
 8019aa8:	dbe7      	blt.n	8019a7a <__gethex+0x456>
 8019aaa:	e7f0      	b.n	8019a8e <__gethex+0x46a>
 8019aac:	08032661 	.word	0x08032661

08019ab0 <L_shift>:
 8019ab0:	f1c2 0208 	rsb	r2, r2, #8
 8019ab4:	0092      	lsls	r2, r2, #2
 8019ab6:	b570      	push	{r4, r5, r6, lr}
 8019ab8:	f1c2 0620 	rsb	r6, r2, #32
 8019abc:	6843      	ldr	r3, [r0, #4]
 8019abe:	6804      	ldr	r4, [r0, #0]
 8019ac0:	fa03 f506 	lsl.w	r5, r3, r6
 8019ac4:	432c      	orrs	r4, r5
 8019ac6:	40d3      	lsrs	r3, r2
 8019ac8:	6004      	str	r4, [r0, #0]
 8019aca:	f840 3f04 	str.w	r3, [r0, #4]!
 8019ace:	4288      	cmp	r0, r1
 8019ad0:	d3f4      	bcc.n	8019abc <L_shift+0xc>
 8019ad2:	bd70      	pop	{r4, r5, r6, pc}

08019ad4 <__match>:
 8019ad4:	b530      	push	{r4, r5, lr}
 8019ad6:	6803      	ldr	r3, [r0, #0]
 8019ad8:	3301      	adds	r3, #1
 8019ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ade:	b914      	cbnz	r4, 8019ae6 <__match+0x12>
 8019ae0:	6003      	str	r3, [r0, #0]
 8019ae2:	2001      	movs	r0, #1
 8019ae4:	bd30      	pop	{r4, r5, pc}
 8019ae6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019aea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8019aee:	2d19      	cmp	r5, #25
 8019af0:	bf98      	it	ls
 8019af2:	3220      	addls	r2, #32
 8019af4:	42a2      	cmp	r2, r4
 8019af6:	d0f0      	beq.n	8019ada <__match+0x6>
 8019af8:	2000      	movs	r0, #0
 8019afa:	e7f3      	b.n	8019ae4 <__match+0x10>

08019afc <__hexnan>:
 8019afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b00:	680b      	ldr	r3, [r1, #0]
 8019b02:	6801      	ldr	r1, [r0, #0]
 8019b04:	115e      	asrs	r6, r3, #5
 8019b06:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8019b0a:	f013 031f 	ands.w	r3, r3, #31
 8019b0e:	b087      	sub	sp, #28
 8019b10:	bf18      	it	ne
 8019b12:	3604      	addne	r6, #4
 8019b14:	2500      	movs	r5, #0
 8019b16:	1f37      	subs	r7, r6, #4
 8019b18:	4682      	mov	sl, r0
 8019b1a:	4690      	mov	r8, r2
 8019b1c:	9301      	str	r3, [sp, #4]
 8019b1e:	f846 5c04 	str.w	r5, [r6, #-4]
 8019b22:	46b9      	mov	r9, r7
 8019b24:	463c      	mov	r4, r7
 8019b26:	9502      	str	r5, [sp, #8]
 8019b28:	46ab      	mov	fp, r5
 8019b2a:	784a      	ldrb	r2, [r1, #1]
 8019b2c:	1c4b      	adds	r3, r1, #1
 8019b2e:	9303      	str	r3, [sp, #12]
 8019b30:	b342      	cbz	r2, 8019b84 <__hexnan+0x88>
 8019b32:	4610      	mov	r0, r2
 8019b34:	9105      	str	r1, [sp, #20]
 8019b36:	9204      	str	r2, [sp, #16]
 8019b38:	f7ff fd5f 	bl	80195fa <__hexdig_fun>
 8019b3c:	2800      	cmp	r0, #0
 8019b3e:	d14f      	bne.n	8019be0 <__hexnan+0xe4>
 8019b40:	9a04      	ldr	r2, [sp, #16]
 8019b42:	9905      	ldr	r1, [sp, #20]
 8019b44:	2a20      	cmp	r2, #32
 8019b46:	d818      	bhi.n	8019b7a <__hexnan+0x7e>
 8019b48:	9b02      	ldr	r3, [sp, #8]
 8019b4a:	459b      	cmp	fp, r3
 8019b4c:	dd13      	ble.n	8019b76 <__hexnan+0x7a>
 8019b4e:	454c      	cmp	r4, r9
 8019b50:	d206      	bcs.n	8019b60 <__hexnan+0x64>
 8019b52:	2d07      	cmp	r5, #7
 8019b54:	dc04      	bgt.n	8019b60 <__hexnan+0x64>
 8019b56:	462a      	mov	r2, r5
 8019b58:	4649      	mov	r1, r9
 8019b5a:	4620      	mov	r0, r4
 8019b5c:	f7ff ffa8 	bl	8019ab0 <L_shift>
 8019b60:	4544      	cmp	r4, r8
 8019b62:	d950      	bls.n	8019c06 <__hexnan+0x10a>
 8019b64:	2300      	movs	r3, #0
 8019b66:	f1a4 0904 	sub.w	r9, r4, #4
 8019b6a:	f844 3c04 	str.w	r3, [r4, #-4]
 8019b6e:	f8cd b008 	str.w	fp, [sp, #8]
 8019b72:	464c      	mov	r4, r9
 8019b74:	461d      	mov	r5, r3
 8019b76:	9903      	ldr	r1, [sp, #12]
 8019b78:	e7d7      	b.n	8019b2a <__hexnan+0x2e>
 8019b7a:	2a29      	cmp	r2, #41	; 0x29
 8019b7c:	d156      	bne.n	8019c2c <__hexnan+0x130>
 8019b7e:	3102      	adds	r1, #2
 8019b80:	f8ca 1000 	str.w	r1, [sl]
 8019b84:	f1bb 0f00 	cmp.w	fp, #0
 8019b88:	d050      	beq.n	8019c2c <__hexnan+0x130>
 8019b8a:	454c      	cmp	r4, r9
 8019b8c:	d206      	bcs.n	8019b9c <__hexnan+0xa0>
 8019b8e:	2d07      	cmp	r5, #7
 8019b90:	dc04      	bgt.n	8019b9c <__hexnan+0xa0>
 8019b92:	462a      	mov	r2, r5
 8019b94:	4649      	mov	r1, r9
 8019b96:	4620      	mov	r0, r4
 8019b98:	f7ff ff8a 	bl	8019ab0 <L_shift>
 8019b9c:	4544      	cmp	r4, r8
 8019b9e:	d934      	bls.n	8019c0a <__hexnan+0x10e>
 8019ba0:	f1a8 0204 	sub.w	r2, r8, #4
 8019ba4:	4623      	mov	r3, r4
 8019ba6:	f853 1b04 	ldr.w	r1, [r3], #4
 8019baa:	f842 1f04 	str.w	r1, [r2, #4]!
 8019bae:	429f      	cmp	r7, r3
 8019bb0:	d2f9      	bcs.n	8019ba6 <__hexnan+0xaa>
 8019bb2:	1b3b      	subs	r3, r7, r4
 8019bb4:	f023 0303 	bic.w	r3, r3, #3
 8019bb8:	3304      	adds	r3, #4
 8019bba:	3401      	adds	r4, #1
 8019bbc:	3e03      	subs	r6, #3
 8019bbe:	42b4      	cmp	r4, r6
 8019bc0:	bf88      	it	hi
 8019bc2:	2304      	movhi	r3, #4
 8019bc4:	4443      	add	r3, r8
 8019bc6:	2200      	movs	r2, #0
 8019bc8:	f843 2b04 	str.w	r2, [r3], #4
 8019bcc:	429f      	cmp	r7, r3
 8019bce:	d2fb      	bcs.n	8019bc8 <__hexnan+0xcc>
 8019bd0:	683b      	ldr	r3, [r7, #0]
 8019bd2:	b91b      	cbnz	r3, 8019bdc <__hexnan+0xe0>
 8019bd4:	4547      	cmp	r7, r8
 8019bd6:	d127      	bne.n	8019c28 <__hexnan+0x12c>
 8019bd8:	2301      	movs	r3, #1
 8019bda:	603b      	str	r3, [r7, #0]
 8019bdc:	2005      	movs	r0, #5
 8019bde:	e026      	b.n	8019c2e <__hexnan+0x132>
 8019be0:	3501      	adds	r5, #1
 8019be2:	2d08      	cmp	r5, #8
 8019be4:	f10b 0b01 	add.w	fp, fp, #1
 8019be8:	dd06      	ble.n	8019bf8 <__hexnan+0xfc>
 8019bea:	4544      	cmp	r4, r8
 8019bec:	d9c3      	bls.n	8019b76 <__hexnan+0x7a>
 8019bee:	2300      	movs	r3, #0
 8019bf0:	f844 3c04 	str.w	r3, [r4, #-4]
 8019bf4:	2501      	movs	r5, #1
 8019bf6:	3c04      	subs	r4, #4
 8019bf8:	6822      	ldr	r2, [r4, #0]
 8019bfa:	f000 000f 	and.w	r0, r0, #15
 8019bfe:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8019c02:	6022      	str	r2, [r4, #0]
 8019c04:	e7b7      	b.n	8019b76 <__hexnan+0x7a>
 8019c06:	2508      	movs	r5, #8
 8019c08:	e7b5      	b.n	8019b76 <__hexnan+0x7a>
 8019c0a:	9b01      	ldr	r3, [sp, #4]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d0df      	beq.n	8019bd0 <__hexnan+0xd4>
 8019c10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019c14:	f1c3 0320 	rsb	r3, r3, #32
 8019c18:	fa22 f303 	lsr.w	r3, r2, r3
 8019c1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019c20:	401a      	ands	r2, r3
 8019c22:	f846 2c04 	str.w	r2, [r6, #-4]
 8019c26:	e7d3      	b.n	8019bd0 <__hexnan+0xd4>
 8019c28:	3f04      	subs	r7, #4
 8019c2a:	e7d1      	b.n	8019bd0 <__hexnan+0xd4>
 8019c2c:	2004      	movs	r0, #4
 8019c2e:	b007      	add	sp, #28
 8019c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019c34 <_localeconv_r>:
 8019c34:	4800      	ldr	r0, [pc, #0]	; (8019c38 <_localeconv_r+0x4>)
 8019c36:	4770      	bx	lr
 8019c38:	20000720 	.word	0x20000720

08019c3c <__retarget_lock_init_recursive>:
 8019c3c:	4770      	bx	lr

08019c3e <__retarget_lock_acquire_recursive>:
 8019c3e:	4770      	bx	lr

08019c40 <__retarget_lock_release_recursive>:
 8019c40:	4770      	bx	lr

08019c42 <__swhatbuf_r>:
 8019c42:	b570      	push	{r4, r5, r6, lr}
 8019c44:	460e      	mov	r6, r1
 8019c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c4a:	2900      	cmp	r1, #0
 8019c4c:	b096      	sub	sp, #88	; 0x58
 8019c4e:	4614      	mov	r4, r2
 8019c50:	461d      	mov	r5, r3
 8019c52:	da07      	bge.n	8019c64 <__swhatbuf_r+0x22>
 8019c54:	2300      	movs	r3, #0
 8019c56:	602b      	str	r3, [r5, #0]
 8019c58:	89b3      	ldrh	r3, [r6, #12]
 8019c5a:	061a      	lsls	r2, r3, #24
 8019c5c:	d410      	bmi.n	8019c80 <__swhatbuf_r+0x3e>
 8019c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c62:	e00e      	b.n	8019c82 <__swhatbuf_r+0x40>
 8019c64:	466a      	mov	r2, sp
 8019c66:	f001 f929 	bl	801aebc <_fstat_r>
 8019c6a:	2800      	cmp	r0, #0
 8019c6c:	dbf2      	blt.n	8019c54 <__swhatbuf_r+0x12>
 8019c6e:	9a01      	ldr	r2, [sp, #4]
 8019c70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019c74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019c78:	425a      	negs	r2, r3
 8019c7a:	415a      	adcs	r2, r3
 8019c7c:	602a      	str	r2, [r5, #0]
 8019c7e:	e7ee      	b.n	8019c5e <__swhatbuf_r+0x1c>
 8019c80:	2340      	movs	r3, #64	; 0x40
 8019c82:	2000      	movs	r0, #0
 8019c84:	6023      	str	r3, [r4, #0]
 8019c86:	b016      	add	sp, #88	; 0x58
 8019c88:	bd70      	pop	{r4, r5, r6, pc}
	...

08019c8c <__smakebuf_r>:
 8019c8c:	898b      	ldrh	r3, [r1, #12]
 8019c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c90:	079d      	lsls	r5, r3, #30
 8019c92:	4606      	mov	r6, r0
 8019c94:	460c      	mov	r4, r1
 8019c96:	d507      	bpl.n	8019ca8 <__smakebuf_r+0x1c>
 8019c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019c9c:	6023      	str	r3, [r4, #0]
 8019c9e:	6123      	str	r3, [r4, #16]
 8019ca0:	2301      	movs	r3, #1
 8019ca2:	6163      	str	r3, [r4, #20]
 8019ca4:	b002      	add	sp, #8
 8019ca6:	bd70      	pop	{r4, r5, r6, pc}
 8019ca8:	ab01      	add	r3, sp, #4
 8019caa:	466a      	mov	r2, sp
 8019cac:	f7ff ffc9 	bl	8019c42 <__swhatbuf_r>
 8019cb0:	9900      	ldr	r1, [sp, #0]
 8019cb2:	4605      	mov	r5, r0
 8019cb4:	4630      	mov	r0, r6
 8019cb6:	f000 fd5d 	bl	801a774 <_malloc_r>
 8019cba:	b948      	cbnz	r0, 8019cd0 <__smakebuf_r+0x44>
 8019cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019cc0:	059a      	lsls	r2, r3, #22
 8019cc2:	d4ef      	bmi.n	8019ca4 <__smakebuf_r+0x18>
 8019cc4:	f023 0303 	bic.w	r3, r3, #3
 8019cc8:	f043 0302 	orr.w	r3, r3, #2
 8019ccc:	81a3      	strh	r3, [r4, #12]
 8019cce:	e7e3      	b.n	8019c98 <__smakebuf_r+0xc>
 8019cd0:	4b0d      	ldr	r3, [pc, #52]	; (8019d08 <__smakebuf_r+0x7c>)
 8019cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8019cd4:	89a3      	ldrh	r3, [r4, #12]
 8019cd6:	6020      	str	r0, [r4, #0]
 8019cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019cdc:	81a3      	strh	r3, [r4, #12]
 8019cde:	9b00      	ldr	r3, [sp, #0]
 8019ce0:	6163      	str	r3, [r4, #20]
 8019ce2:	9b01      	ldr	r3, [sp, #4]
 8019ce4:	6120      	str	r0, [r4, #16]
 8019ce6:	b15b      	cbz	r3, 8019d00 <__smakebuf_r+0x74>
 8019ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cec:	4630      	mov	r0, r6
 8019cee:	f001 f8f7 	bl	801aee0 <_isatty_r>
 8019cf2:	b128      	cbz	r0, 8019d00 <__smakebuf_r+0x74>
 8019cf4:	89a3      	ldrh	r3, [r4, #12]
 8019cf6:	f023 0303 	bic.w	r3, r3, #3
 8019cfa:	f043 0301 	orr.w	r3, r3, #1
 8019cfe:	81a3      	strh	r3, [r4, #12]
 8019d00:	89a0      	ldrh	r0, [r4, #12]
 8019d02:	4305      	orrs	r5, r0
 8019d04:	81a5      	strh	r5, [r4, #12]
 8019d06:	e7cd      	b.n	8019ca4 <__smakebuf_r+0x18>
 8019d08:	08019391 	.word	0x08019391

08019d0c <malloc>:
 8019d0c:	4b02      	ldr	r3, [pc, #8]	; (8019d18 <malloc+0xc>)
 8019d0e:	4601      	mov	r1, r0
 8019d10:	6818      	ldr	r0, [r3, #0]
 8019d12:	f000 bd2f 	b.w	801a774 <_malloc_r>
 8019d16:	bf00      	nop
 8019d18:	200005c8 	.word	0x200005c8

08019d1c <__ascii_mbtowc>:
 8019d1c:	b082      	sub	sp, #8
 8019d1e:	b901      	cbnz	r1, 8019d22 <__ascii_mbtowc+0x6>
 8019d20:	a901      	add	r1, sp, #4
 8019d22:	b142      	cbz	r2, 8019d36 <__ascii_mbtowc+0x1a>
 8019d24:	b14b      	cbz	r3, 8019d3a <__ascii_mbtowc+0x1e>
 8019d26:	7813      	ldrb	r3, [r2, #0]
 8019d28:	600b      	str	r3, [r1, #0]
 8019d2a:	7812      	ldrb	r2, [r2, #0]
 8019d2c:	1e10      	subs	r0, r2, #0
 8019d2e:	bf18      	it	ne
 8019d30:	2001      	movne	r0, #1
 8019d32:	b002      	add	sp, #8
 8019d34:	4770      	bx	lr
 8019d36:	4610      	mov	r0, r2
 8019d38:	e7fb      	b.n	8019d32 <__ascii_mbtowc+0x16>
 8019d3a:	f06f 0001 	mvn.w	r0, #1
 8019d3e:	e7f8      	b.n	8019d32 <__ascii_mbtowc+0x16>

08019d40 <_Balloc>:
 8019d40:	b570      	push	{r4, r5, r6, lr}
 8019d42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019d44:	4604      	mov	r4, r0
 8019d46:	460d      	mov	r5, r1
 8019d48:	b976      	cbnz	r6, 8019d68 <_Balloc+0x28>
 8019d4a:	2010      	movs	r0, #16
 8019d4c:	f7ff ffde 	bl	8019d0c <malloc>
 8019d50:	4602      	mov	r2, r0
 8019d52:	6260      	str	r0, [r4, #36]	; 0x24
 8019d54:	b920      	cbnz	r0, 8019d60 <_Balloc+0x20>
 8019d56:	4b18      	ldr	r3, [pc, #96]	; (8019db8 <_Balloc+0x78>)
 8019d58:	4818      	ldr	r0, [pc, #96]	; (8019dbc <_Balloc+0x7c>)
 8019d5a:	2166      	movs	r1, #102	; 0x66
 8019d5c:	f7fe fb94 	bl	8018488 <__assert_func>
 8019d60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019d64:	6006      	str	r6, [r0, #0]
 8019d66:	60c6      	str	r6, [r0, #12]
 8019d68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019d6a:	68f3      	ldr	r3, [r6, #12]
 8019d6c:	b183      	cbz	r3, 8019d90 <_Balloc+0x50>
 8019d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019d70:	68db      	ldr	r3, [r3, #12]
 8019d72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019d76:	b9b8      	cbnz	r0, 8019da8 <_Balloc+0x68>
 8019d78:	2101      	movs	r1, #1
 8019d7a:	fa01 f605 	lsl.w	r6, r1, r5
 8019d7e:	1d72      	adds	r2, r6, #5
 8019d80:	0092      	lsls	r2, r2, #2
 8019d82:	4620      	mov	r0, r4
 8019d84:	f000 fc97 	bl	801a6b6 <_calloc_r>
 8019d88:	b160      	cbz	r0, 8019da4 <_Balloc+0x64>
 8019d8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019d8e:	e00e      	b.n	8019dae <_Balloc+0x6e>
 8019d90:	2221      	movs	r2, #33	; 0x21
 8019d92:	2104      	movs	r1, #4
 8019d94:	4620      	mov	r0, r4
 8019d96:	f000 fc8e 	bl	801a6b6 <_calloc_r>
 8019d9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019d9c:	60f0      	str	r0, [r6, #12]
 8019d9e:	68db      	ldr	r3, [r3, #12]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d1e4      	bne.n	8019d6e <_Balloc+0x2e>
 8019da4:	2000      	movs	r0, #0
 8019da6:	bd70      	pop	{r4, r5, r6, pc}
 8019da8:	6802      	ldr	r2, [r0, #0]
 8019daa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019dae:	2300      	movs	r3, #0
 8019db0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019db4:	e7f7      	b.n	8019da6 <_Balloc+0x66>
 8019db6:	bf00      	nop
 8019db8:	0803248c 	.word	0x0803248c
 8019dbc:	08032754 	.word	0x08032754

08019dc0 <_Bfree>:
 8019dc0:	b570      	push	{r4, r5, r6, lr}
 8019dc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019dc4:	4605      	mov	r5, r0
 8019dc6:	460c      	mov	r4, r1
 8019dc8:	b976      	cbnz	r6, 8019de8 <_Bfree+0x28>
 8019dca:	2010      	movs	r0, #16
 8019dcc:	f7ff ff9e 	bl	8019d0c <malloc>
 8019dd0:	4602      	mov	r2, r0
 8019dd2:	6268      	str	r0, [r5, #36]	; 0x24
 8019dd4:	b920      	cbnz	r0, 8019de0 <_Bfree+0x20>
 8019dd6:	4b09      	ldr	r3, [pc, #36]	; (8019dfc <_Bfree+0x3c>)
 8019dd8:	4809      	ldr	r0, [pc, #36]	; (8019e00 <_Bfree+0x40>)
 8019dda:	218a      	movs	r1, #138	; 0x8a
 8019ddc:	f7fe fb54 	bl	8018488 <__assert_func>
 8019de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019de4:	6006      	str	r6, [r0, #0]
 8019de6:	60c6      	str	r6, [r0, #12]
 8019de8:	b13c      	cbz	r4, 8019dfa <_Bfree+0x3a>
 8019dea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019dec:	6862      	ldr	r2, [r4, #4]
 8019dee:	68db      	ldr	r3, [r3, #12]
 8019df0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019df4:	6021      	str	r1, [r4, #0]
 8019df6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019dfa:	bd70      	pop	{r4, r5, r6, pc}
 8019dfc:	0803248c 	.word	0x0803248c
 8019e00:	08032754 	.word	0x08032754

08019e04 <__multadd>:
 8019e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e08:	690e      	ldr	r6, [r1, #16]
 8019e0a:	4607      	mov	r7, r0
 8019e0c:	4698      	mov	r8, r3
 8019e0e:	460c      	mov	r4, r1
 8019e10:	f101 0014 	add.w	r0, r1, #20
 8019e14:	2300      	movs	r3, #0
 8019e16:	6805      	ldr	r5, [r0, #0]
 8019e18:	b2a9      	uxth	r1, r5
 8019e1a:	fb02 8101 	mla	r1, r2, r1, r8
 8019e1e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019e22:	0c2d      	lsrs	r5, r5, #16
 8019e24:	fb02 c505 	mla	r5, r2, r5, ip
 8019e28:	b289      	uxth	r1, r1
 8019e2a:	3301      	adds	r3, #1
 8019e2c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019e30:	429e      	cmp	r6, r3
 8019e32:	f840 1b04 	str.w	r1, [r0], #4
 8019e36:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019e3a:	dcec      	bgt.n	8019e16 <__multadd+0x12>
 8019e3c:	f1b8 0f00 	cmp.w	r8, #0
 8019e40:	d022      	beq.n	8019e88 <__multadd+0x84>
 8019e42:	68a3      	ldr	r3, [r4, #8]
 8019e44:	42b3      	cmp	r3, r6
 8019e46:	dc19      	bgt.n	8019e7c <__multadd+0x78>
 8019e48:	6861      	ldr	r1, [r4, #4]
 8019e4a:	4638      	mov	r0, r7
 8019e4c:	3101      	adds	r1, #1
 8019e4e:	f7ff ff77 	bl	8019d40 <_Balloc>
 8019e52:	4605      	mov	r5, r0
 8019e54:	b928      	cbnz	r0, 8019e62 <__multadd+0x5e>
 8019e56:	4602      	mov	r2, r0
 8019e58:	4b0d      	ldr	r3, [pc, #52]	; (8019e90 <__multadd+0x8c>)
 8019e5a:	480e      	ldr	r0, [pc, #56]	; (8019e94 <__multadd+0x90>)
 8019e5c:	21b5      	movs	r1, #181	; 0xb5
 8019e5e:	f7fe fb13 	bl	8018488 <__assert_func>
 8019e62:	6922      	ldr	r2, [r4, #16]
 8019e64:	3202      	adds	r2, #2
 8019e66:	f104 010c 	add.w	r1, r4, #12
 8019e6a:	0092      	lsls	r2, r2, #2
 8019e6c:	300c      	adds	r0, #12
 8019e6e:	f7fc fd0f 	bl	8016890 <memcpy>
 8019e72:	4621      	mov	r1, r4
 8019e74:	4638      	mov	r0, r7
 8019e76:	f7ff ffa3 	bl	8019dc0 <_Bfree>
 8019e7a:	462c      	mov	r4, r5
 8019e7c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019e80:	3601      	adds	r6, #1
 8019e82:	f8c3 8014 	str.w	r8, [r3, #20]
 8019e86:	6126      	str	r6, [r4, #16]
 8019e88:	4620      	mov	r0, r4
 8019e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e8e:	bf00      	nop
 8019e90:	08032661 	.word	0x08032661
 8019e94:	08032754 	.word	0x08032754

08019e98 <__s2b>:
 8019e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e9c:	460c      	mov	r4, r1
 8019e9e:	4615      	mov	r5, r2
 8019ea0:	461f      	mov	r7, r3
 8019ea2:	2209      	movs	r2, #9
 8019ea4:	3308      	adds	r3, #8
 8019ea6:	4606      	mov	r6, r0
 8019ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8019eac:	2100      	movs	r1, #0
 8019eae:	2201      	movs	r2, #1
 8019eb0:	429a      	cmp	r2, r3
 8019eb2:	db09      	blt.n	8019ec8 <__s2b+0x30>
 8019eb4:	4630      	mov	r0, r6
 8019eb6:	f7ff ff43 	bl	8019d40 <_Balloc>
 8019eba:	b940      	cbnz	r0, 8019ece <__s2b+0x36>
 8019ebc:	4602      	mov	r2, r0
 8019ebe:	4b19      	ldr	r3, [pc, #100]	; (8019f24 <__s2b+0x8c>)
 8019ec0:	4819      	ldr	r0, [pc, #100]	; (8019f28 <__s2b+0x90>)
 8019ec2:	21ce      	movs	r1, #206	; 0xce
 8019ec4:	f7fe fae0 	bl	8018488 <__assert_func>
 8019ec8:	0052      	lsls	r2, r2, #1
 8019eca:	3101      	adds	r1, #1
 8019ecc:	e7f0      	b.n	8019eb0 <__s2b+0x18>
 8019ece:	9b08      	ldr	r3, [sp, #32]
 8019ed0:	6143      	str	r3, [r0, #20]
 8019ed2:	2d09      	cmp	r5, #9
 8019ed4:	f04f 0301 	mov.w	r3, #1
 8019ed8:	6103      	str	r3, [r0, #16]
 8019eda:	dd16      	ble.n	8019f0a <__s2b+0x72>
 8019edc:	f104 0909 	add.w	r9, r4, #9
 8019ee0:	46c8      	mov	r8, r9
 8019ee2:	442c      	add	r4, r5
 8019ee4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019ee8:	4601      	mov	r1, r0
 8019eea:	3b30      	subs	r3, #48	; 0x30
 8019eec:	220a      	movs	r2, #10
 8019eee:	4630      	mov	r0, r6
 8019ef0:	f7ff ff88 	bl	8019e04 <__multadd>
 8019ef4:	45a0      	cmp	r8, r4
 8019ef6:	d1f5      	bne.n	8019ee4 <__s2b+0x4c>
 8019ef8:	f1a5 0408 	sub.w	r4, r5, #8
 8019efc:	444c      	add	r4, r9
 8019efe:	1b2d      	subs	r5, r5, r4
 8019f00:	1963      	adds	r3, r4, r5
 8019f02:	42bb      	cmp	r3, r7
 8019f04:	db04      	blt.n	8019f10 <__s2b+0x78>
 8019f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f0a:	340a      	adds	r4, #10
 8019f0c:	2509      	movs	r5, #9
 8019f0e:	e7f6      	b.n	8019efe <__s2b+0x66>
 8019f10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019f14:	4601      	mov	r1, r0
 8019f16:	3b30      	subs	r3, #48	; 0x30
 8019f18:	220a      	movs	r2, #10
 8019f1a:	4630      	mov	r0, r6
 8019f1c:	f7ff ff72 	bl	8019e04 <__multadd>
 8019f20:	e7ee      	b.n	8019f00 <__s2b+0x68>
 8019f22:	bf00      	nop
 8019f24:	08032661 	.word	0x08032661
 8019f28:	08032754 	.word	0x08032754

08019f2c <__hi0bits>:
 8019f2c:	0c03      	lsrs	r3, r0, #16
 8019f2e:	041b      	lsls	r3, r3, #16
 8019f30:	b9d3      	cbnz	r3, 8019f68 <__hi0bits+0x3c>
 8019f32:	0400      	lsls	r0, r0, #16
 8019f34:	2310      	movs	r3, #16
 8019f36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019f3a:	bf04      	itt	eq
 8019f3c:	0200      	lsleq	r0, r0, #8
 8019f3e:	3308      	addeq	r3, #8
 8019f40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019f44:	bf04      	itt	eq
 8019f46:	0100      	lsleq	r0, r0, #4
 8019f48:	3304      	addeq	r3, #4
 8019f4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019f4e:	bf04      	itt	eq
 8019f50:	0080      	lsleq	r0, r0, #2
 8019f52:	3302      	addeq	r3, #2
 8019f54:	2800      	cmp	r0, #0
 8019f56:	db05      	blt.n	8019f64 <__hi0bits+0x38>
 8019f58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019f5c:	f103 0301 	add.w	r3, r3, #1
 8019f60:	bf08      	it	eq
 8019f62:	2320      	moveq	r3, #32
 8019f64:	4618      	mov	r0, r3
 8019f66:	4770      	bx	lr
 8019f68:	2300      	movs	r3, #0
 8019f6a:	e7e4      	b.n	8019f36 <__hi0bits+0xa>

08019f6c <__lo0bits>:
 8019f6c:	6803      	ldr	r3, [r0, #0]
 8019f6e:	f013 0207 	ands.w	r2, r3, #7
 8019f72:	4601      	mov	r1, r0
 8019f74:	d00b      	beq.n	8019f8e <__lo0bits+0x22>
 8019f76:	07da      	lsls	r2, r3, #31
 8019f78:	d424      	bmi.n	8019fc4 <__lo0bits+0x58>
 8019f7a:	0798      	lsls	r0, r3, #30
 8019f7c:	bf49      	itett	mi
 8019f7e:	085b      	lsrmi	r3, r3, #1
 8019f80:	089b      	lsrpl	r3, r3, #2
 8019f82:	2001      	movmi	r0, #1
 8019f84:	600b      	strmi	r3, [r1, #0]
 8019f86:	bf5c      	itt	pl
 8019f88:	600b      	strpl	r3, [r1, #0]
 8019f8a:	2002      	movpl	r0, #2
 8019f8c:	4770      	bx	lr
 8019f8e:	b298      	uxth	r0, r3
 8019f90:	b9b0      	cbnz	r0, 8019fc0 <__lo0bits+0x54>
 8019f92:	0c1b      	lsrs	r3, r3, #16
 8019f94:	2010      	movs	r0, #16
 8019f96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019f9a:	bf04      	itt	eq
 8019f9c:	0a1b      	lsreq	r3, r3, #8
 8019f9e:	3008      	addeq	r0, #8
 8019fa0:	071a      	lsls	r2, r3, #28
 8019fa2:	bf04      	itt	eq
 8019fa4:	091b      	lsreq	r3, r3, #4
 8019fa6:	3004      	addeq	r0, #4
 8019fa8:	079a      	lsls	r2, r3, #30
 8019faa:	bf04      	itt	eq
 8019fac:	089b      	lsreq	r3, r3, #2
 8019fae:	3002      	addeq	r0, #2
 8019fb0:	07da      	lsls	r2, r3, #31
 8019fb2:	d403      	bmi.n	8019fbc <__lo0bits+0x50>
 8019fb4:	085b      	lsrs	r3, r3, #1
 8019fb6:	f100 0001 	add.w	r0, r0, #1
 8019fba:	d005      	beq.n	8019fc8 <__lo0bits+0x5c>
 8019fbc:	600b      	str	r3, [r1, #0]
 8019fbe:	4770      	bx	lr
 8019fc0:	4610      	mov	r0, r2
 8019fc2:	e7e8      	b.n	8019f96 <__lo0bits+0x2a>
 8019fc4:	2000      	movs	r0, #0
 8019fc6:	4770      	bx	lr
 8019fc8:	2020      	movs	r0, #32
 8019fca:	4770      	bx	lr

08019fcc <__i2b>:
 8019fcc:	b510      	push	{r4, lr}
 8019fce:	460c      	mov	r4, r1
 8019fd0:	2101      	movs	r1, #1
 8019fd2:	f7ff feb5 	bl	8019d40 <_Balloc>
 8019fd6:	4602      	mov	r2, r0
 8019fd8:	b928      	cbnz	r0, 8019fe6 <__i2b+0x1a>
 8019fda:	4b05      	ldr	r3, [pc, #20]	; (8019ff0 <__i2b+0x24>)
 8019fdc:	4805      	ldr	r0, [pc, #20]	; (8019ff4 <__i2b+0x28>)
 8019fde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019fe2:	f7fe fa51 	bl	8018488 <__assert_func>
 8019fe6:	2301      	movs	r3, #1
 8019fe8:	6144      	str	r4, [r0, #20]
 8019fea:	6103      	str	r3, [r0, #16]
 8019fec:	bd10      	pop	{r4, pc}
 8019fee:	bf00      	nop
 8019ff0:	08032661 	.word	0x08032661
 8019ff4:	08032754 	.word	0x08032754

08019ff8 <__multiply>:
 8019ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ffc:	4614      	mov	r4, r2
 8019ffe:	690a      	ldr	r2, [r1, #16]
 801a000:	6923      	ldr	r3, [r4, #16]
 801a002:	429a      	cmp	r2, r3
 801a004:	bfb8      	it	lt
 801a006:	460b      	movlt	r3, r1
 801a008:	460d      	mov	r5, r1
 801a00a:	bfbc      	itt	lt
 801a00c:	4625      	movlt	r5, r4
 801a00e:	461c      	movlt	r4, r3
 801a010:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a014:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a018:	68ab      	ldr	r3, [r5, #8]
 801a01a:	6869      	ldr	r1, [r5, #4]
 801a01c:	eb0a 0709 	add.w	r7, sl, r9
 801a020:	42bb      	cmp	r3, r7
 801a022:	b085      	sub	sp, #20
 801a024:	bfb8      	it	lt
 801a026:	3101      	addlt	r1, #1
 801a028:	f7ff fe8a 	bl	8019d40 <_Balloc>
 801a02c:	b930      	cbnz	r0, 801a03c <__multiply+0x44>
 801a02e:	4602      	mov	r2, r0
 801a030:	4b42      	ldr	r3, [pc, #264]	; (801a13c <__multiply+0x144>)
 801a032:	4843      	ldr	r0, [pc, #268]	; (801a140 <__multiply+0x148>)
 801a034:	f240 115d 	movw	r1, #349	; 0x15d
 801a038:	f7fe fa26 	bl	8018488 <__assert_func>
 801a03c:	f100 0614 	add.w	r6, r0, #20
 801a040:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801a044:	4633      	mov	r3, r6
 801a046:	2200      	movs	r2, #0
 801a048:	4543      	cmp	r3, r8
 801a04a:	d31e      	bcc.n	801a08a <__multiply+0x92>
 801a04c:	f105 0c14 	add.w	ip, r5, #20
 801a050:	f104 0314 	add.w	r3, r4, #20
 801a054:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801a058:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801a05c:	9202      	str	r2, [sp, #8]
 801a05e:	ebac 0205 	sub.w	r2, ip, r5
 801a062:	3a15      	subs	r2, #21
 801a064:	f022 0203 	bic.w	r2, r2, #3
 801a068:	3204      	adds	r2, #4
 801a06a:	f105 0115 	add.w	r1, r5, #21
 801a06e:	458c      	cmp	ip, r1
 801a070:	bf38      	it	cc
 801a072:	2204      	movcc	r2, #4
 801a074:	9201      	str	r2, [sp, #4]
 801a076:	9a02      	ldr	r2, [sp, #8]
 801a078:	9303      	str	r3, [sp, #12]
 801a07a:	429a      	cmp	r2, r3
 801a07c:	d808      	bhi.n	801a090 <__multiply+0x98>
 801a07e:	2f00      	cmp	r7, #0
 801a080:	dc55      	bgt.n	801a12e <__multiply+0x136>
 801a082:	6107      	str	r7, [r0, #16]
 801a084:	b005      	add	sp, #20
 801a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a08a:	f843 2b04 	str.w	r2, [r3], #4
 801a08e:	e7db      	b.n	801a048 <__multiply+0x50>
 801a090:	f8b3 a000 	ldrh.w	sl, [r3]
 801a094:	f1ba 0f00 	cmp.w	sl, #0
 801a098:	d020      	beq.n	801a0dc <__multiply+0xe4>
 801a09a:	f105 0e14 	add.w	lr, r5, #20
 801a09e:	46b1      	mov	r9, r6
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	f85e 4b04 	ldr.w	r4, [lr], #4
 801a0a6:	f8d9 b000 	ldr.w	fp, [r9]
 801a0aa:	b2a1      	uxth	r1, r4
 801a0ac:	fa1f fb8b 	uxth.w	fp, fp
 801a0b0:	fb0a b101 	mla	r1, sl, r1, fp
 801a0b4:	4411      	add	r1, r2
 801a0b6:	f8d9 2000 	ldr.w	r2, [r9]
 801a0ba:	0c24      	lsrs	r4, r4, #16
 801a0bc:	0c12      	lsrs	r2, r2, #16
 801a0be:	fb0a 2404 	mla	r4, sl, r4, r2
 801a0c2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801a0c6:	b289      	uxth	r1, r1
 801a0c8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801a0cc:	45f4      	cmp	ip, lr
 801a0ce:	f849 1b04 	str.w	r1, [r9], #4
 801a0d2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801a0d6:	d8e4      	bhi.n	801a0a2 <__multiply+0xaa>
 801a0d8:	9901      	ldr	r1, [sp, #4]
 801a0da:	5072      	str	r2, [r6, r1]
 801a0dc:	9a03      	ldr	r2, [sp, #12]
 801a0de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801a0e2:	3304      	adds	r3, #4
 801a0e4:	f1b9 0f00 	cmp.w	r9, #0
 801a0e8:	d01f      	beq.n	801a12a <__multiply+0x132>
 801a0ea:	6834      	ldr	r4, [r6, #0]
 801a0ec:	f105 0114 	add.w	r1, r5, #20
 801a0f0:	46b6      	mov	lr, r6
 801a0f2:	f04f 0a00 	mov.w	sl, #0
 801a0f6:	880a      	ldrh	r2, [r1, #0]
 801a0f8:	f8be b002 	ldrh.w	fp, [lr, #2]
 801a0fc:	fb09 b202 	mla	r2, r9, r2, fp
 801a100:	4492      	add	sl, r2
 801a102:	b2a4      	uxth	r4, r4
 801a104:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801a108:	f84e 4b04 	str.w	r4, [lr], #4
 801a10c:	f851 4b04 	ldr.w	r4, [r1], #4
 801a110:	f8be 2000 	ldrh.w	r2, [lr]
 801a114:	0c24      	lsrs	r4, r4, #16
 801a116:	fb09 2404 	mla	r4, r9, r4, r2
 801a11a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801a11e:	458c      	cmp	ip, r1
 801a120:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801a124:	d8e7      	bhi.n	801a0f6 <__multiply+0xfe>
 801a126:	9a01      	ldr	r2, [sp, #4]
 801a128:	50b4      	str	r4, [r6, r2]
 801a12a:	3604      	adds	r6, #4
 801a12c:	e7a3      	b.n	801a076 <__multiply+0x7e>
 801a12e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801a132:	2b00      	cmp	r3, #0
 801a134:	d1a5      	bne.n	801a082 <__multiply+0x8a>
 801a136:	3f01      	subs	r7, #1
 801a138:	e7a1      	b.n	801a07e <__multiply+0x86>
 801a13a:	bf00      	nop
 801a13c:	08032661 	.word	0x08032661
 801a140:	08032754 	.word	0x08032754

0801a144 <__pow5mult>:
 801a144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a148:	4615      	mov	r5, r2
 801a14a:	f012 0203 	ands.w	r2, r2, #3
 801a14e:	4606      	mov	r6, r0
 801a150:	460f      	mov	r7, r1
 801a152:	d007      	beq.n	801a164 <__pow5mult+0x20>
 801a154:	4c25      	ldr	r4, [pc, #148]	; (801a1ec <__pow5mult+0xa8>)
 801a156:	3a01      	subs	r2, #1
 801a158:	2300      	movs	r3, #0
 801a15a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a15e:	f7ff fe51 	bl	8019e04 <__multadd>
 801a162:	4607      	mov	r7, r0
 801a164:	10ad      	asrs	r5, r5, #2
 801a166:	d03d      	beq.n	801a1e4 <__pow5mult+0xa0>
 801a168:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801a16a:	b97c      	cbnz	r4, 801a18c <__pow5mult+0x48>
 801a16c:	2010      	movs	r0, #16
 801a16e:	f7ff fdcd 	bl	8019d0c <malloc>
 801a172:	4602      	mov	r2, r0
 801a174:	6270      	str	r0, [r6, #36]	; 0x24
 801a176:	b928      	cbnz	r0, 801a184 <__pow5mult+0x40>
 801a178:	4b1d      	ldr	r3, [pc, #116]	; (801a1f0 <__pow5mult+0xac>)
 801a17a:	481e      	ldr	r0, [pc, #120]	; (801a1f4 <__pow5mult+0xb0>)
 801a17c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801a180:	f7fe f982 	bl	8018488 <__assert_func>
 801a184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801a188:	6004      	str	r4, [r0, #0]
 801a18a:	60c4      	str	r4, [r0, #12]
 801a18c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801a190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801a194:	b94c      	cbnz	r4, 801a1aa <__pow5mult+0x66>
 801a196:	f240 2171 	movw	r1, #625	; 0x271
 801a19a:	4630      	mov	r0, r6
 801a19c:	f7ff ff16 	bl	8019fcc <__i2b>
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	f8c8 0008 	str.w	r0, [r8, #8]
 801a1a6:	4604      	mov	r4, r0
 801a1a8:	6003      	str	r3, [r0, #0]
 801a1aa:	f04f 0900 	mov.w	r9, #0
 801a1ae:	07eb      	lsls	r3, r5, #31
 801a1b0:	d50a      	bpl.n	801a1c8 <__pow5mult+0x84>
 801a1b2:	4639      	mov	r1, r7
 801a1b4:	4622      	mov	r2, r4
 801a1b6:	4630      	mov	r0, r6
 801a1b8:	f7ff ff1e 	bl	8019ff8 <__multiply>
 801a1bc:	4639      	mov	r1, r7
 801a1be:	4680      	mov	r8, r0
 801a1c0:	4630      	mov	r0, r6
 801a1c2:	f7ff fdfd 	bl	8019dc0 <_Bfree>
 801a1c6:	4647      	mov	r7, r8
 801a1c8:	106d      	asrs	r5, r5, #1
 801a1ca:	d00b      	beq.n	801a1e4 <__pow5mult+0xa0>
 801a1cc:	6820      	ldr	r0, [r4, #0]
 801a1ce:	b938      	cbnz	r0, 801a1e0 <__pow5mult+0x9c>
 801a1d0:	4622      	mov	r2, r4
 801a1d2:	4621      	mov	r1, r4
 801a1d4:	4630      	mov	r0, r6
 801a1d6:	f7ff ff0f 	bl	8019ff8 <__multiply>
 801a1da:	6020      	str	r0, [r4, #0]
 801a1dc:	f8c0 9000 	str.w	r9, [r0]
 801a1e0:	4604      	mov	r4, r0
 801a1e2:	e7e4      	b.n	801a1ae <__pow5mult+0x6a>
 801a1e4:	4638      	mov	r0, r7
 801a1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1ea:	bf00      	nop
 801a1ec:	080328a8 	.word	0x080328a8
 801a1f0:	0803248c 	.word	0x0803248c
 801a1f4:	08032754 	.word	0x08032754

0801a1f8 <__lshift>:
 801a1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1fc:	460c      	mov	r4, r1
 801a1fe:	6849      	ldr	r1, [r1, #4]
 801a200:	6923      	ldr	r3, [r4, #16]
 801a202:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a206:	68a3      	ldr	r3, [r4, #8]
 801a208:	4607      	mov	r7, r0
 801a20a:	4691      	mov	r9, r2
 801a20c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a210:	f108 0601 	add.w	r6, r8, #1
 801a214:	42b3      	cmp	r3, r6
 801a216:	db0b      	blt.n	801a230 <__lshift+0x38>
 801a218:	4638      	mov	r0, r7
 801a21a:	f7ff fd91 	bl	8019d40 <_Balloc>
 801a21e:	4605      	mov	r5, r0
 801a220:	b948      	cbnz	r0, 801a236 <__lshift+0x3e>
 801a222:	4602      	mov	r2, r0
 801a224:	4b28      	ldr	r3, [pc, #160]	; (801a2c8 <__lshift+0xd0>)
 801a226:	4829      	ldr	r0, [pc, #164]	; (801a2cc <__lshift+0xd4>)
 801a228:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a22c:	f7fe f92c 	bl	8018488 <__assert_func>
 801a230:	3101      	adds	r1, #1
 801a232:	005b      	lsls	r3, r3, #1
 801a234:	e7ee      	b.n	801a214 <__lshift+0x1c>
 801a236:	2300      	movs	r3, #0
 801a238:	f100 0114 	add.w	r1, r0, #20
 801a23c:	f100 0210 	add.w	r2, r0, #16
 801a240:	4618      	mov	r0, r3
 801a242:	4553      	cmp	r3, sl
 801a244:	db33      	blt.n	801a2ae <__lshift+0xb6>
 801a246:	6920      	ldr	r0, [r4, #16]
 801a248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a24c:	f104 0314 	add.w	r3, r4, #20
 801a250:	f019 091f 	ands.w	r9, r9, #31
 801a254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a258:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a25c:	d02b      	beq.n	801a2b6 <__lshift+0xbe>
 801a25e:	f1c9 0e20 	rsb	lr, r9, #32
 801a262:	468a      	mov	sl, r1
 801a264:	2200      	movs	r2, #0
 801a266:	6818      	ldr	r0, [r3, #0]
 801a268:	fa00 f009 	lsl.w	r0, r0, r9
 801a26c:	4302      	orrs	r2, r0
 801a26e:	f84a 2b04 	str.w	r2, [sl], #4
 801a272:	f853 2b04 	ldr.w	r2, [r3], #4
 801a276:	459c      	cmp	ip, r3
 801a278:	fa22 f20e 	lsr.w	r2, r2, lr
 801a27c:	d8f3      	bhi.n	801a266 <__lshift+0x6e>
 801a27e:	ebac 0304 	sub.w	r3, ip, r4
 801a282:	3b15      	subs	r3, #21
 801a284:	f023 0303 	bic.w	r3, r3, #3
 801a288:	3304      	adds	r3, #4
 801a28a:	f104 0015 	add.w	r0, r4, #21
 801a28e:	4584      	cmp	ip, r0
 801a290:	bf38      	it	cc
 801a292:	2304      	movcc	r3, #4
 801a294:	50ca      	str	r2, [r1, r3]
 801a296:	b10a      	cbz	r2, 801a29c <__lshift+0xa4>
 801a298:	f108 0602 	add.w	r6, r8, #2
 801a29c:	3e01      	subs	r6, #1
 801a29e:	4638      	mov	r0, r7
 801a2a0:	612e      	str	r6, [r5, #16]
 801a2a2:	4621      	mov	r1, r4
 801a2a4:	f7ff fd8c 	bl	8019dc0 <_Bfree>
 801a2a8:	4628      	mov	r0, r5
 801a2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2ae:	f842 0f04 	str.w	r0, [r2, #4]!
 801a2b2:	3301      	adds	r3, #1
 801a2b4:	e7c5      	b.n	801a242 <__lshift+0x4a>
 801a2b6:	3904      	subs	r1, #4
 801a2b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a2bc:	f841 2f04 	str.w	r2, [r1, #4]!
 801a2c0:	459c      	cmp	ip, r3
 801a2c2:	d8f9      	bhi.n	801a2b8 <__lshift+0xc0>
 801a2c4:	e7ea      	b.n	801a29c <__lshift+0xa4>
 801a2c6:	bf00      	nop
 801a2c8:	08032661 	.word	0x08032661
 801a2cc:	08032754 	.word	0x08032754

0801a2d0 <__mcmp>:
 801a2d0:	b530      	push	{r4, r5, lr}
 801a2d2:	6902      	ldr	r2, [r0, #16]
 801a2d4:	690c      	ldr	r4, [r1, #16]
 801a2d6:	1b12      	subs	r2, r2, r4
 801a2d8:	d10e      	bne.n	801a2f8 <__mcmp+0x28>
 801a2da:	f100 0314 	add.w	r3, r0, #20
 801a2de:	3114      	adds	r1, #20
 801a2e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a2e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a2e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a2ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a2f0:	42a5      	cmp	r5, r4
 801a2f2:	d003      	beq.n	801a2fc <__mcmp+0x2c>
 801a2f4:	d305      	bcc.n	801a302 <__mcmp+0x32>
 801a2f6:	2201      	movs	r2, #1
 801a2f8:	4610      	mov	r0, r2
 801a2fa:	bd30      	pop	{r4, r5, pc}
 801a2fc:	4283      	cmp	r3, r0
 801a2fe:	d3f3      	bcc.n	801a2e8 <__mcmp+0x18>
 801a300:	e7fa      	b.n	801a2f8 <__mcmp+0x28>
 801a302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a306:	e7f7      	b.n	801a2f8 <__mcmp+0x28>

0801a308 <__mdiff>:
 801a308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a30c:	460c      	mov	r4, r1
 801a30e:	4606      	mov	r6, r0
 801a310:	4611      	mov	r1, r2
 801a312:	4620      	mov	r0, r4
 801a314:	4617      	mov	r7, r2
 801a316:	f7ff ffdb 	bl	801a2d0 <__mcmp>
 801a31a:	1e05      	subs	r5, r0, #0
 801a31c:	d110      	bne.n	801a340 <__mdiff+0x38>
 801a31e:	4629      	mov	r1, r5
 801a320:	4630      	mov	r0, r6
 801a322:	f7ff fd0d 	bl	8019d40 <_Balloc>
 801a326:	b930      	cbnz	r0, 801a336 <__mdiff+0x2e>
 801a328:	4b39      	ldr	r3, [pc, #228]	; (801a410 <__mdiff+0x108>)
 801a32a:	4602      	mov	r2, r0
 801a32c:	f240 2132 	movw	r1, #562	; 0x232
 801a330:	4838      	ldr	r0, [pc, #224]	; (801a414 <__mdiff+0x10c>)
 801a332:	f7fe f8a9 	bl	8018488 <__assert_func>
 801a336:	2301      	movs	r3, #1
 801a338:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a33c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a340:	bfa4      	itt	ge
 801a342:	463b      	movge	r3, r7
 801a344:	4627      	movge	r7, r4
 801a346:	4630      	mov	r0, r6
 801a348:	6879      	ldr	r1, [r7, #4]
 801a34a:	bfa6      	itte	ge
 801a34c:	461c      	movge	r4, r3
 801a34e:	2500      	movge	r5, #0
 801a350:	2501      	movlt	r5, #1
 801a352:	f7ff fcf5 	bl	8019d40 <_Balloc>
 801a356:	b920      	cbnz	r0, 801a362 <__mdiff+0x5a>
 801a358:	4b2d      	ldr	r3, [pc, #180]	; (801a410 <__mdiff+0x108>)
 801a35a:	4602      	mov	r2, r0
 801a35c:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a360:	e7e6      	b.n	801a330 <__mdiff+0x28>
 801a362:	693e      	ldr	r6, [r7, #16]
 801a364:	60c5      	str	r5, [r0, #12]
 801a366:	6925      	ldr	r5, [r4, #16]
 801a368:	f107 0114 	add.w	r1, r7, #20
 801a36c:	f104 0914 	add.w	r9, r4, #20
 801a370:	f100 0e14 	add.w	lr, r0, #20
 801a374:	f107 0210 	add.w	r2, r7, #16
 801a378:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a37c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a380:	46f2      	mov	sl, lr
 801a382:	2700      	movs	r7, #0
 801a384:	f859 3b04 	ldr.w	r3, [r9], #4
 801a388:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a38c:	fa1f f883 	uxth.w	r8, r3
 801a390:	fa17 f78b 	uxtah	r7, r7, fp
 801a394:	0c1b      	lsrs	r3, r3, #16
 801a396:	eba7 0808 	sub.w	r8, r7, r8
 801a39a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a39e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a3a2:	fa1f f888 	uxth.w	r8, r8
 801a3a6:	141f      	asrs	r7, r3, #16
 801a3a8:	454d      	cmp	r5, r9
 801a3aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a3ae:	f84a 3b04 	str.w	r3, [sl], #4
 801a3b2:	d8e7      	bhi.n	801a384 <__mdiff+0x7c>
 801a3b4:	1b2b      	subs	r3, r5, r4
 801a3b6:	3b15      	subs	r3, #21
 801a3b8:	f023 0303 	bic.w	r3, r3, #3
 801a3bc:	3304      	adds	r3, #4
 801a3be:	3415      	adds	r4, #21
 801a3c0:	42a5      	cmp	r5, r4
 801a3c2:	bf38      	it	cc
 801a3c4:	2304      	movcc	r3, #4
 801a3c6:	4419      	add	r1, r3
 801a3c8:	4473      	add	r3, lr
 801a3ca:	469e      	mov	lr, r3
 801a3cc:	460d      	mov	r5, r1
 801a3ce:	4565      	cmp	r5, ip
 801a3d0:	d30e      	bcc.n	801a3f0 <__mdiff+0xe8>
 801a3d2:	f10c 0203 	add.w	r2, ip, #3
 801a3d6:	1a52      	subs	r2, r2, r1
 801a3d8:	f022 0203 	bic.w	r2, r2, #3
 801a3dc:	3903      	subs	r1, #3
 801a3de:	458c      	cmp	ip, r1
 801a3e0:	bf38      	it	cc
 801a3e2:	2200      	movcc	r2, #0
 801a3e4:	441a      	add	r2, r3
 801a3e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a3ea:	b17b      	cbz	r3, 801a40c <__mdiff+0x104>
 801a3ec:	6106      	str	r6, [r0, #16]
 801a3ee:	e7a5      	b.n	801a33c <__mdiff+0x34>
 801a3f0:	f855 8b04 	ldr.w	r8, [r5], #4
 801a3f4:	fa17 f488 	uxtah	r4, r7, r8
 801a3f8:	1422      	asrs	r2, r4, #16
 801a3fa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a3fe:	b2a4      	uxth	r4, r4
 801a400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a404:	f84e 4b04 	str.w	r4, [lr], #4
 801a408:	1417      	asrs	r7, r2, #16
 801a40a:	e7e0      	b.n	801a3ce <__mdiff+0xc6>
 801a40c:	3e01      	subs	r6, #1
 801a40e:	e7ea      	b.n	801a3e6 <__mdiff+0xde>
 801a410:	08032661 	.word	0x08032661
 801a414:	08032754 	.word	0x08032754

0801a418 <__ulp>:
 801a418:	b082      	sub	sp, #8
 801a41a:	ed8d 0b00 	vstr	d0, [sp]
 801a41e:	9b01      	ldr	r3, [sp, #4]
 801a420:	4912      	ldr	r1, [pc, #72]	; (801a46c <__ulp+0x54>)
 801a422:	4019      	ands	r1, r3
 801a424:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801a428:	2900      	cmp	r1, #0
 801a42a:	dd05      	ble.n	801a438 <__ulp+0x20>
 801a42c:	2200      	movs	r2, #0
 801a42e:	460b      	mov	r3, r1
 801a430:	ec43 2b10 	vmov	d0, r2, r3
 801a434:	b002      	add	sp, #8
 801a436:	4770      	bx	lr
 801a438:	4249      	negs	r1, r1
 801a43a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801a43e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801a442:	f04f 0200 	mov.w	r2, #0
 801a446:	f04f 0300 	mov.w	r3, #0
 801a44a:	da04      	bge.n	801a456 <__ulp+0x3e>
 801a44c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801a450:	fa41 f300 	asr.w	r3, r1, r0
 801a454:	e7ec      	b.n	801a430 <__ulp+0x18>
 801a456:	f1a0 0114 	sub.w	r1, r0, #20
 801a45a:	291e      	cmp	r1, #30
 801a45c:	bfda      	itte	le
 801a45e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801a462:	fa20 f101 	lsrle.w	r1, r0, r1
 801a466:	2101      	movgt	r1, #1
 801a468:	460a      	mov	r2, r1
 801a46a:	e7e1      	b.n	801a430 <__ulp+0x18>
 801a46c:	7ff00000 	.word	0x7ff00000

0801a470 <__b2d>:
 801a470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a472:	6905      	ldr	r5, [r0, #16]
 801a474:	f100 0714 	add.w	r7, r0, #20
 801a478:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801a47c:	1f2e      	subs	r6, r5, #4
 801a47e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801a482:	4620      	mov	r0, r4
 801a484:	f7ff fd52 	bl	8019f2c <__hi0bits>
 801a488:	f1c0 0320 	rsb	r3, r0, #32
 801a48c:	280a      	cmp	r0, #10
 801a48e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801a50c <__b2d+0x9c>
 801a492:	600b      	str	r3, [r1, #0]
 801a494:	dc14      	bgt.n	801a4c0 <__b2d+0x50>
 801a496:	f1c0 0e0b 	rsb	lr, r0, #11
 801a49a:	fa24 f10e 	lsr.w	r1, r4, lr
 801a49e:	42b7      	cmp	r7, r6
 801a4a0:	ea41 030c 	orr.w	r3, r1, ip
 801a4a4:	bf34      	ite	cc
 801a4a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a4aa:	2100      	movcs	r1, #0
 801a4ac:	3015      	adds	r0, #21
 801a4ae:	fa04 f000 	lsl.w	r0, r4, r0
 801a4b2:	fa21 f10e 	lsr.w	r1, r1, lr
 801a4b6:	ea40 0201 	orr.w	r2, r0, r1
 801a4ba:	ec43 2b10 	vmov	d0, r2, r3
 801a4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4c0:	42b7      	cmp	r7, r6
 801a4c2:	bf3a      	itte	cc
 801a4c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801a4c8:	f1a5 0608 	subcc.w	r6, r5, #8
 801a4cc:	2100      	movcs	r1, #0
 801a4ce:	380b      	subs	r0, #11
 801a4d0:	d017      	beq.n	801a502 <__b2d+0x92>
 801a4d2:	f1c0 0c20 	rsb	ip, r0, #32
 801a4d6:	fa04 f500 	lsl.w	r5, r4, r0
 801a4da:	42be      	cmp	r6, r7
 801a4dc:	fa21 f40c 	lsr.w	r4, r1, ip
 801a4e0:	ea45 0504 	orr.w	r5, r5, r4
 801a4e4:	bf8c      	ite	hi
 801a4e6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801a4ea:	2400      	movls	r4, #0
 801a4ec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801a4f0:	fa01 f000 	lsl.w	r0, r1, r0
 801a4f4:	fa24 f40c 	lsr.w	r4, r4, ip
 801a4f8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801a4fc:	ea40 0204 	orr.w	r2, r0, r4
 801a500:	e7db      	b.n	801a4ba <__b2d+0x4a>
 801a502:	ea44 030c 	orr.w	r3, r4, ip
 801a506:	460a      	mov	r2, r1
 801a508:	e7d7      	b.n	801a4ba <__b2d+0x4a>
 801a50a:	bf00      	nop
 801a50c:	3ff00000 	.word	0x3ff00000

0801a510 <__d2b>:
 801a510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a514:	4689      	mov	r9, r1
 801a516:	2101      	movs	r1, #1
 801a518:	ec57 6b10 	vmov	r6, r7, d0
 801a51c:	4690      	mov	r8, r2
 801a51e:	f7ff fc0f 	bl	8019d40 <_Balloc>
 801a522:	4604      	mov	r4, r0
 801a524:	b930      	cbnz	r0, 801a534 <__d2b+0x24>
 801a526:	4602      	mov	r2, r0
 801a528:	4b25      	ldr	r3, [pc, #148]	; (801a5c0 <__d2b+0xb0>)
 801a52a:	4826      	ldr	r0, [pc, #152]	; (801a5c4 <__d2b+0xb4>)
 801a52c:	f240 310a 	movw	r1, #778	; 0x30a
 801a530:	f7fd ffaa 	bl	8018488 <__assert_func>
 801a534:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a53c:	bb35      	cbnz	r5, 801a58c <__d2b+0x7c>
 801a53e:	2e00      	cmp	r6, #0
 801a540:	9301      	str	r3, [sp, #4]
 801a542:	d028      	beq.n	801a596 <__d2b+0x86>
 801a544:	4668      	mov	r0, sp
 801a546:	9600      	str	r6, [sp, #0]
 801a548:	f7ff fd10 	bl	8019f6c <__lo0bits>
 801a54c:	9900      	ldr	r1, [sp, #0]
 801a54e:	b300      	cbz	r0, 801a592 <__d2b+0x82>
 801a550:	9a01      	ldr	r2, [sp, #4]
 801a552:	f1c0 0320 	rsb	r3, r0, #32
 801a556:	fa02 f303 	lsl.w	r3, r2, r3
 801a55a:	430b      	orrs	r3, r1
 801a55c:	40c2      	lsrs	r2, r0
 801a55e:	6163      	str	r3, [r4, #20]
 801a560:	9201      	str	r2, [sp, #4]
 801a562:	9b01      	ldr	r3, [sp, #4]
 801a564:	61a3      	str	r3, [r4, #24]
 801a566:	2b00      	cmp	r3, #0
 801a568:	bf14      	ite	ne
 801a56a:	2202      	movne	r2, #2
 801a56c:	2201      	moveq	r2, #1
 801a56e:	6122      	str	r2, [r4, #16]
 801a570:	b1d5      	cbz	r5, 801a5a8 <__d2b+0x98>
 801a572:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a576:	4405      	add	r5, r0
 801a578:	f8c9 5000 	str.w	r5, [r9]
 801a57c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a580:	f8c8 0000 	str.w	r0, [r8]
 801a584:	4620      	mov	r0, r4
 801a586:	b003      	add	sp, #12
 801a588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a58c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a590:	e7d5      	b.n	801a53e <__d2b+0x2e>
 801a592:	6161      	str	r1, [r4, #20]
 801a594:	e7e5      	b.n	801a562 <__d2b+0x52>
 801a596:	a801      	add	r0, sp, #4
 801a598:	f7ff fce8 	bl	8019f6c <__lo0bits>
 801a59c:	9b01      	ldr	r3, [sp, #4]
 801a59e:	6163      	str	r3, [r4, #20]
 801a5a0:	2201      	movs	r2, #1
 801a5a2:	6122      	str	r2, [r4, #16]
 801a5a4:	3020      	adds	r0, #32
 801a5a6:	e7e3      	b.n	801a570 <__d2b+0x60>
 801a5a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a5ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a5b0:	f8c9 0000 	str.w	r0, [r9]
 801a5b4:	6918      	ldr	r0, [r3, #16]
 801a5b6:	f7ff fcb9 	bl	8019f2c <__hi0bits>
 801a5ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a5be:	e7df      	b.n	801a580 <__d2b+0x70>
 801a5c0:	08032661 	.word	0x08032661
 801a5c4:	08032754 	.word	0x08032754

0801a5c8 <__ratio>:
 801a5c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5cc:	4688      	mov	r8, r1
 801a5ce:	4669      	mov	r1, sp
 801a5d0:	4681      	mov	r9, r0
 801a5d2:	f7ff ff4d 	bl	801a470 <__b2d>
 801a5d6:	a901      	add	r1, sp, #4
 801a5d8:	4640      	mov	r0, r8
 801a5da:	ec55 4b10 	vmov	r4, r5, d0
 801a5de:	f7ff ff47 	bl	801a470 <__b2d>
 801a5e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a5e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a5ea:	eba3 0c02 	sub.w	ip, r3, r2
 801a5ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a5f2:	1a9b      	subs	r3, r3, r2
 801a5f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801a5f8:	ec51 0b10 	vmov	r0, r1, d0
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	bfd6      	itet	le
 801a600:	460a      	movle	r2, r1
 801a602:	462a      	movgt	r2, r5
 801a604:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801a608:	468b      	mov	fp, r1
 801a60a:	462f      	mov	r7, r5
 801a60c:	bfd4      	ite	le
 801a60e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801a612:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801a616:	4620      	mov	r0, r4
 801a618:	ee10 2a10 	vmov	r2, s0
 801a61c:	465b      	mov	r3, fp
 801a61e:	4639      	mov	r1, r7
 801a620:	f7e6 f924 	bl	800086c <__aeabi_ddiv>
 801a624:	ec41 0b10 	vmov	d0, r0, r1
 801a628:	b003      	add	sp, #12
 801a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a62e <__copybits>:
 801a62e:	3901      	subs	r1, #1
 801a630:	b570      	push	{r4, r5, r6, lr}
 801a632:	1149      	asrs	r1, r1, #5
 801a634:	6914      	ldr	r4, [r2, #16]
 801a636:	3101      	adds	r1, #1
 801a638:	f102 0314 	add.w	r3, r2, #20
 801a63c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801a640:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801a644:	1f05      	subs	r5, r0, #4
 801a646:	42a3      	cmp	r3, r4
 801a648:	d30c      	bcc.n	801a664 <__copybits+0x36>
 801a64a:	1aa3      	subs	r3, r4, r2
 801a64c:	3b11      	subs	r3, #17
 801a64e:	f023 0303 	bic.w	r3, r3, #3
 801a652:	3211      	adds	r2, #17
 801a654:	42a2      	cmp	r2, r4
 801a656:	bf88      	it	hi
 801a658:	2300      	movhi	r3, #0
 801a65a:	4418      	add	r0, r3
 801a65c:	2300      	movs	r3, #0
 801a65e:	4288      	cmp	r0, r1
 801a660:	d305      	bcc.n	801a66e <__copybits+0x40>
 801a662:	bd70      	pop	{r4, r5, r6, pc}
 801a664:	f853 6b04 	ldr.w	r6, [r3], #4
 801a668:	f845 6f04 	str.w	r6, [r5, #4]!
 801a66c:	e7eb      	b.n	801a646 <__copybits+0x18>
 801a66e:	f840 3b04 	str.w	r3, [r0], #4
 801a672:	e7f4      	b.n	801a65e <__copybits+0x30>

0801a674 <__any_on>:
 801a674:	f100 0214 	add.w	r2, r0, #20
 801a678:	6900      	ldr	r0, [r0, #16]
 801a67a:	114b      	asrs	r3, r1, #5
 801a67c:	4298      	cmp	r0, r3
 801a67e:	b510      	push	{r4, lr}
 801a680:	db11      	blt.n	801a6a6 <__any_on+0x32>
 801a682:	dd0a      	ble.n	801a69a <__any_on+0x26>
 801a684:	f011 011f 	ands.w	r1, r1, #31
 801a688:	d007      	beq.n	801a69a <__any_on+0x26>
 801a68a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801a68e:	fa24 f001 	lsr.w	r0, r4, r1
 801a692:	fa00 f101 	lsl.w	r1, r0, r1
 801a696:	428c      	cmp	r4, r1
 801a698:	d10b      	bne.n	801a6b2 <__any_on+0x3e>
 801a69a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a69e:	4293      	cmp	r3, r2
 801a6a0:	d803      	bhi.n	801a6aa <__any_on+0x36>
 801a6a2:	2000      	movs	r0, #0
 801a6a4:	bd10      	pop	{r4, pc}
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	e7f7      	b.n	801a69a <__any_on+0x26>
 801a6aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801a6ae:	2900      	cmp	r1, #0
 801a6b0:	d0f5      	beq.n	801a69e <__any_on+0x2a>
 801a6b2:	2001      	movs	r0, #1
 801a6b4:	e7f6      	b.n	801a6a4 <__any_on+0x30>

0801a6b6 <_calloc_r>:
 801a6b6:	b513      	push	{r0, r1, r4, lr}
 801a6b8:	434a      	muls	r2, r1
 801a6ba:	4611      	mov	r1, r2
 801a6bc:	9201      	str	r2, [sp, #4]
 801a6be:	f000 f859 	bl	801a774 <_malloc_r>
 801a6c2:	4604      	mov	r4, r0
 801a6c4:	b118      	cbz	r0, 801a6ce <_calloc_r+0x18>
 801a6c6:	9a01      	ldr	r2, [sp, #4]
 801a6c8:	2100      	movs	r1, #0
 801a6ca:	f7fc f909 	bl	80168e0 <memset>
 801a6ce:	4620      	mov	r0, r4
 801a6d0:	b002      	add	sp, #8
 801a6d2:	bd10      	pop	{r4, pc}

0801a6d4 <_free_r>:
 801a6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a6d6:	2900      	cmp	r1, #0
 801a6d8:	d048      	beq.n	801a76c <_free_r+0x98>
 801a6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6de:	9001      	str	r0, [sp, #4]
 801a6e0:	2b00      	cmp	r3, #0
 801a6e2:	f1a1 0404 	sub.w	r4, r1, #4
 801a6e6:	bfb8      	it	lt
 801a6e8:	18e4      	addlt	r4, r4, r3
 801a6ea:	f000 fc1b 	bl	801af24 <__malloc_lock>
 801a6ee:	4a20      	ldr	r2, [pc, #128]	; (801a770 <_free_r+0x9c>)
 801a6f0:	9801      	ldr	r0, [sp, #4]
 801a6f2:	6813      	ldr	r3, [r2, #0]
 801a6f4:	4615      	mov	r5, r2
 801a6f6:	b933      	cbnz	r3, 801a706 <_free_r+0x32>
 801a6f8:	6063      	str	r3, [r4, #4]
 801a6fa:	6014      	str	r4, [r2, #0]
 801a6fc:	b003      	add	sp, #12
 801a6fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a702:	f000 bc15 	b.w	801af30 <__malloc_unlock>
 801a706:	42a3      	cmp	r3, r4
 801a708:	d90b      	bls.n	801a722 <_free_r+0x4e>
 801a70a:	6821      	ldr	r1, [r4, #0]
 801a70c:	1862      	adds	r2, r4, r1
 801a70e:	4293      	cmp	r3, r2
 801a710:	bf04      	itt	eq
 801a712:	681a      	ldreq	r2, [r3, #0]
 801a714:	685b      	ldreq	r3, [r3, #4]
 801a716:	6063      	str	r3, [r4, #4]
 801a718:	bf04      	itt	eq
 801a71a:	1852      	addeq	r2, r2, r1
 801a71c:	6022      	streq	r2, [r4, #0]
 801a71e:	602c      	str	r4, [r5, #0]
 801a720:	e7ec      	b.n	801a6fc <_free_r+0x28>
 801a722:	461a      	mov	r2, r3
 801a724:	685b      	ldr	r3, [r3, #4]
 801a726:	b10b      	cbz	r3, 801a72c <_free_r+0x58>
 801a728:	42a3      	cmp	r3, r4
 801a72a:	d9fa      	bls.n	801a722 <_free_r+0x4e>
 801a72c:	6811      	ldr	r1, [r2, #0]
 801a72e:	1855      	adds	r5, r2, r1
 801a730:	42a5      	cmp	r5, r4
 801a732:	d10b      	bne.n	801a74c <_free_r+0x78>
 801a734:	6824      	ldr	r4, [r4, #0]
 801a736:	4421      	add	r1, r4
 801a738:	1854      	adds	r4, r2, r1
 801a73a:	42a3      	cmp	r3, r4
 801a73c:	6011      	str	r1, [r2, #0]
 801a73e:	d1dd      	bne.n	801a6fc <_free_r+0x28>
 801a740:	681c      	ldr	r4, [r3, #0]
 801a742:	685b      	ldr	r3, [r3, #4]
 801a744:	6053      	str	r3, [r2, #4]
 801a746:	4421      	add	r1, r4
 801a748:	6011      	str	r1, [r2, #0]
 801a74a:	e7d7      	b.n	801a6fc <_free_r+0x28>
 801a74c:	d902      	bls.n	801a754 <_free_r+0x80>
 801a74e:	230c      	movs	r3, #12
 801a750:	6003      	str	r3, [r0, #0]
 801a752:	e7d3      	b.n	801a6fc <_free_r+0x28>
 801a754:	6825      	ldr	r5, [r4, #0]
 801a756:	1961      	adds	r1, r4, r5
 801a758:	428b      	cmp	r3, r1
 801a75a:	bf04      	itt	eq
 801a75c:	6819      	ldreq	r1, [r3, #0]
 801a75e:	685b      	ldreq	r3, [r3, #4]
 801a760:	6063      	str	r3, [r4, #4]
 801a762:	bf04      	itt	eq
 801a764:	1949      	addeq	r1, r1, r5
 801a766:	6021      	streq	r1, [r4, #0]
 801a768:	6054      	str	r4, [r2, #4]
 801a76a:	e7c7      	b.n	801a6fc <_free_r+0x28>
 801a76c:	b003      	add	sp, #12
 801a76e:	bd30      	pop	{r4, r5, pc}
 801a770:	2000135c 	.word	0x2000135c

0801a774 <_malloc_r>:
 801a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a776:	1ccd      	adds	r5, r1, #3
 801a778:	f025 0503 	bic.w	r5, r5, #3
 801a77c:	3508      	adds	r5, #8
 801a77e:	2d0c      	cmp	r5, #12
 801a780:	bf38      	it	cc
 801a782:	250c      	movcc	r5, #12
 801a784:	2d00      	cmp	r5, #0
 801a786:	4606      	mov	r6, r0
 801a788:	db01      	blt.n	801a78e <_malloc_r+0x1a>
 801a78a:	42a9      	cmp	r1, r5
 801a78c:	d903      	bls.n	801a796 <_malloc_r+0x22>
 801a78e:	230c      	movs	r3, #12
 801a790:	6033      	str	r3, [r6, #0]
 801a792:	2000      	movs	r0, #0
 801a794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a796:	f000 fbc5 	bl	801af24 <__malloc_lock>
 801a79a:	4921      	ldr	r1, [pc, #132]	; (801a820 <_malloc_r+0xac>)
 801a79c:	680a      	ldr	r2, [r1, #0]
 801a79e:	4614      	mov	r4, r2
 801a7a0:	b99c      	cbnz	r4, 801a7ca <_malloc_r+0x56>
 801a7a2:	4f20      	ldr	r7, [pc, #128]	; (801a824 <_malloc_r+0xb0>)
 801a7a4:	683b      	ldr	r3, [r7, #0]
 801a7a6:	b923      	cbnz	r3, 801a7b2 <_malloc_r+0x3e>
 801a7a8:	4621      	mov	r1, r4
 801a7aa:	4630      	mov	r0, r6
 801a7ac:	f000 fafc 	bl	801ada8 <_sbrk_r>
 801a7b0:	6038      	str	r0, [r7, #0]
 801a7b2:	4629      	mov	r1, r5
 801a7b4:	4630      	mov	r0, r6
 801a7b6:	f000 faf7 	bl	801ada8 <_sbrk_r>
 801a7ba:	1c43      	adds	r3, r0, #1
 801a7bc:	d123      	bne.n	801a806 <_malloc_r+0x92>
 801a7be:	230c      	movs	r3, #12
 801a7c0:	6033      	str	r3, [r6, #0]
 801a7c2:	4630      	mov	r0, r6
 801a7c4:	f000 fbb4 	bl	801af30 <__malloc_unlock>
 801a7c8:	e7e3      	b.n	801a792 <_malloc_r+0x1e>
 801a7ca:	6823      	ldr	r3, [r4, #0]
 801a7cc:	1b5b      	subs	r3, r3, r5
 801a7ce:	d417      	bmi.n	801a800 <_malloc_r+0x8c>
 801a7d0:	2b0b      	cmp	r3, #11
 801a7d2:	d903      	bls.n	801a7dc <_malloc_r+0x68>
 801a7d4:	6023      	str	r3, [r4, #0]
 801a7d6:	441c      	add	r4, r3
 801a7d8:	6025      	str	r5, [r4, #0]
 801a7da:	e004      	b.n	801a7e6 <_malloc_r+0x72>
 801a7dc:	6863      	ldr	r3, [r4, #4]
 801a7de:	42a2      	cmp	r2, r4
 801a7e0:	bf0c      	ite	eq
 801a7e2:	600b      	streq	r3, [r1, #0]
 801a7e4:	6053      	strne	r3, [r2, #4]
 801a7e6:	4630      	mov	r0, r6
 801a7e8:	f000 fba2 	bl	801af30 <__malloc_unlock>
 801a7ec:	f104 000b 	add.w	r0, r4, #11
 801a7f0:	1d23      	adds	r3, r4, #4
 801a7f2:	f020 0007 	bic.w	r0, r0, #7
 801a7f6:	1ac2      	subs	r2, r0, r3
 801a7f8:	d0cc      	beq.n	801a794 <_malloc_r+0x20>
 801a7fa:	1a1b      	subs	r3, r3, r0
 801a7fc:	50a3      	str	r3, [r4, r2]
 801a7fe:	e7c9      	b.n	801a794 <_malloc_r+0x20>
 801a800:	4622      	mov	r2, r4
 801a802:	6864      	ldr	r4, [r4, #4]
 801a804:	e7cc      	b.n	801a7a0 <_malloc_r+0x2c>
 801a806:	1cc4      	adds	r4, r0, #3
 801a808:	f024 0403 	bic.w	r4, r4, #3
 801a80c:	42a0      	cmp	r0, r4
 801a80e:	d0e3      	beq.n	801a7d8 <_malloc_r+0x64>
 801a810:	1a21      	subs	r1, r4, r0
 801a812:	4630      	mov	r0, r6
 801a814:	f000 fac8 	bl	801ada8 <_sbrk_r>
 801a818:	3001      	adds	r0, #1
 801a81a:	d1dd      	bne.n	801a7d8 <_malloc_r+0x64>
 801a81c:	e7cf      	b.n	801a7be <_malloc_r+0x4a>
 801a81e:	bf00      	nop
 801a820:	2000135c 	.word	0x2000135c
 801a824:	20001360 	.word	0x20001360

0801a828 <__ssputs_r>:
 801a828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a82c:	688e      	ldr	r6, [r1, #8]
 801a82e:	429e      	cmp	r6, r3
 801a830:	4682      	mov	sl, r0
 801a832:	460c      	mov	r4, r1
 801a834:	4690      	mov	r8, r2
 801a836:	461f      	mov	r7, r3
 801a838:	d838      	bhi.n	801a8ac <__ssputs_r+0x84>
 801a83a:	898a      	ldrh	r2, [r1, #12]
 801a83c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a840:	d032      	beq.n	801a8a8 <__ssputs_r+0x80>
 801a842:	6825      	ldr	r5, [r4, #0]
 801a844:	6909      	ldr	r1, [r1, #16]
 801a846:	eba5 0901 	sub.w	r9, r5, r1
 801a84a:	6965      	ldr	r5, [r4, #20]
 801a84c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a850:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a854:	3301      	adds	r3, #1
 801a856:	444b      	add	r3, r9
 801a858:	106d      	asrs	r5, r5, #1
 801a85a:	429d      	cmp	r5, r3
 801a85c:	bf38      	it	cc
 801a85e:	461d      	movcc	r5, r3
 801a860:	0553      	lsls	r3, r2, #21
 801a862:	d531      	bpl.n	801a8c8 <__ssputs_r+0xa0>
 801a864:	4629      	mov	r1, r5
 801a866:	f7ff ff85 	bl	801a774 <_malloc_r>
 801a86a:	4606      	mov	r6, r0
 801a86c:	b950      	cbnz	r0, 801a884 <__ssputs_r+0x5c>
 801a86e:	230c      	movs	r3, #12
 801a870:	f8ca 3000 	str.w	r3, [sl]
 801a874:	89a3      	ldrh	r3, [r4, #12]
 801a876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a87a:	81a3      	strh	r3, [r4, #12]
 801a87c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a884:	6921      	ldr	r1, [r4, #16]
 801a886:	464a      	mov	r2, r9
 801a888:	f7fc f802 	bl	8016890 <memcpy>
 801a88c:	89a3      	ldrh	r3, [r4, #12]
 801a88e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a896:	81a3      	strh	r3, [r4, #12]
 801a898:	6126      	str	r6, [r4, #16]
 801a89a:	6165      	str	r5, [r4, #20]
 801a89c:	444e      	add	r6, r9
 801a89e:	eba5 0509 	sub.w	r5, r5, r9
 801a8a2:	6026      	str	r6, [r4, #0]
 801a8a4:	60a5      	str	r5, [r4, #8]
 801a8a6:	463e      	mov	r6, r7
 801a8a8:	42be      	cmp	r6, r7
 801a8aa:	d900      	bls.n	801a8ae <__ssputs_r+0x86>
 801a8ac:	463e      	mov	r6, r7
 801a8ae:	4632      	mov	r2, r6
 801a8b0:	6820      	ldr	r0, [r4, #0]
 801a8b2:	4641      	mov	r1, r8
 801a8b4:	f7fb fffa 	bl	80168ac <memmove>
 801a8b8:	68a3      	ldr	r3, [r4, #8]
 801a8ba:	6822      	ldr	r2, [r4, #0]
 801a8bc:	1b9b      	subs	r3, r3, r6
 801a8be:	4432      	add	r2, r6
 801a8c0:	60a3      	str	r3, [r4, #8]
 801a8c2:	6022      	str	r2, [r4, #0]
 801a8c4:	2000      	movs	r0, #0
 801a8c6:	e7db      	b.n	801a880 <__ssputs_r+0x58>
 801a8c8:	462a      	mov	r2, r5
 801a8ca:	f000 fb37 	bl	801af3c <_realloc_r>
 801a8ce:	4606      	mov	r6, r0
 801a8d0:	2800      	cmp	r0, #0
 801a8d2:	d1e1      	bne.n	801a898 <__ssputs_r+0x70>
 801a8d4:	6921      	ldr	r1, [r4, #16]
 801a8d6:	4650      	mov	r0, sl
 801a8d8:	f7ff fefc 	bl	801a6d4 <_free_r>
 801a8dc:	e7c7      	b.n	801a86e <__ssputs_r+0x46>
	...

0801a8e0 <_svfiprintf_r>:
 801a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8e4:	4698      	mov	r8, r3
 801a8e6:	898b      	ldrh	r3, [r1, #12]
 801a8e8:	061b      	lsls	r3, r3, #24
 801a8ea:	b09d      	sub	sp, #116	; 0x74
 801a8ec:	4607      	mov	r7, r0
 801a8ee:	460d      	mov	r5, r1
 801a8f0:	4614      	mov	r4, r2
 801a8f2:	d50e      	bpl.n	801a912 <_svfiprintf_r+0x32>
 801a8f4:	690b      	ldr	r3, [r1, #16]
 801a8f6:	b963      	cbnz	r3, 801a912 <_svfiprintf_r+0x32>
 801a8f8:	2140      	movs	r1, #64	; 0x40
 801a8fa:	f7ff ff3b 	bl	801a774 <_malloc_r>
 801a8fe:	6028      	str	r0, [r5, #0]
 801a900:	6128      	str	r0, [r5, #16]
 801a902:	b920      	cbnz	r0, 801a90e <_svfiprintf_r+0x2e>
 801a904:	230c      	movs	r3, #12
 801a906:	603b      	str	r3, [r7, #0]
 801a908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a90c:	e0d1      	b.n	801aab2 <_svfiprintf_r+0x1d2>
 801a90e:	2340      	movs	r3, #64	; 0x40
 801a910:	616b      	str	r3, [r5, #20]
 801a912:	2300      	movs	r3, #0
 801a914:	9309      	str	r3, [sp, #36]	; 0x24
 801a916:	2320      	movs	r3, #32
 801a918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a91c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a920:	2330      	movs	r3, #48	; 0x30
 801a922:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801aacc <_svfiprintf_r+0x1ec>
 801a926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a92a:	f04f 0901 	mov.w	r9, #1
 801a92e:	4623      	mov	r3, r4
 801a930:	469a      	mov	sl, r3
 801a932:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a936:	b10a      	cbz	r2, 801a93c <_svfiprintf_r+0x5c>
 801a938:	2a25      	cmp	r2, #37	; 0x25
 801a93a:	d1f9      	bne.n	801a930 <_svfiprintf_r+0x50>
 801a93c:	ebba 0b04 	subs.w	fp, sl, r4
 801a940:	d00b      	beq.n	801a95a <_svfiprintf_r+0x7a>
 801a942:	465b      	mov	r3, fp
 801a944:	4622      	mov	r2, r4
 801a946:	4629      	mov	r1, r5
 801a948:	4638      	mov	r0, r7
 801a94a:	f7ff ff6d 	bl	801a828 <__ssputs_r>
 801a94e:	3001      	adds	r0, #1
 801a950:	f000 80aa 	beq.w	801aaa8 <_svfiprintf_r+0x1c8>
 801a954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a956:	445a      	add	r2, fp
 801a958:	9209      	str	r2, [sp, #36]	; 0x24
 801a95a:	f89a 3000 	ldrb.w	r3, [sl]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	f000 80a2 	beq.w	801aaa8 <_svfiprintf_r+0x1c8>
 801a964:	2300      	movs	r3, #0
 801a966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a96a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a96e:	f10a 0a01 	add.w	sl, sl, #1
 801a972:	9304      	str	r3, [sp, #16]
 801a974:	9307      	str	r3, [sp, #28]
 801a976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a97a:	931a      	str	r3, [sp, #104]	; 0x68
 801a97c:	4654      	mov	r4, sl
 801a97e:	2205      	movs	r2, #5
 801a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a984:	4851      	ldr	r0, [pc, #324]	; (801aacc <_svfiprintf_r+0x1ec>)
 801a986:	f7e5 fc3b 	bl	8000200 <memchr>
 801a98a:	9a04      	ldr	r2, [sp, #16]
 801a98c:	b9d8      	cbnz	r0, 801a9c6 <_svfiprintf_r+0xe6>
 801a98e:	06d0      	lsls	r0, r2, #27
 801a990:	bf44      	itt	mi
 801a992:	2320      	movmi	r3, #32
 801a994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a998:	0711      	lsls	r1, r2, #28
 801a99a:	bf44      	itt	mi
 801a99c:	232b      	movmi	r3, #43	; 0x2b
 801a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9a2:	f89a 3000 	ldrb.w	r3, [sl]
 801a9a6:	2b2a      	cmp	r3, #42	; 0x2a
 801a9a8:	d015      	beq.n	801a9d6 <_svfiprintf_r+0xf6>
 801a9aa:	9a07      	ldr	r2, [sp, #28]
 801a9ac:	4654      	mov	r4, sl
 801a9ae:	2000      	movs	r0, #0
 801a9b0:	f04f 0c0a 	mov.w	ip, #10
 801a9b4:	4621      	mov	r1, r4
 801a9b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9ba:	3b30      	subs	r3, #48	; 0x30
 801a9bc:	2b09      	cmp	r3, #9
 801a9be:	d94e      	bls.n	801aa5e <_svfiprintf_r+0x17e>
 801a9c0:	b1b0      	cbz	r0, 801a9f0 <_svfiprintf_r+0x110>
 801a9c2:	9207      	str	r2, [sp, #28]
 801a9c4:	e014      	b.n	801a9f0 <_svfiprintf_r+0x110>
 801a9c6:	eba0 0308 	sub.w	r3, r0, r8
 801a9ca:	fa09 f303 	lsl.w	r3, r9, r3
 801a9ce:	4313      	orrs	r3, r2
 801a9d0:	9304      	str	r3, [sp, #16]
 801a9d2:	46a2      	mov	sl, r4
 801a9d4:	e7d2      	b.n	801a97c <_svfiprintf_r+0x9c>
 801a9d6:	9b03      	ldr	r3, [sp, #12]
 801a9d8:	1d19      	adds	r1, r3, #4
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	9103      	str	r1, [sp, #12]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	bfbb      	ittet	lt
 801a9e2:	425b      	neglt	r3, r3
 801a9e4:	f042 0202 	orrlt.w	r2, r2, #2
 801a9e8:	9307      	strge	r3, [sp, #28]
 801a9ea:	9307      	strlt	r3, [sp, #28]
 801a9ec:	bfb8      	it	lt
 801a9ee:	9204      	strlt	r2, [sp, #16]
 801a9f0:	7823      	ldrb	r3, [r4, #0]
 801a9f2:	2b2e      	cmp	r3, #46	; 0x2e
 801a9f4:	d10c      	bne.n	801aa10 <_svfiprintf_r+0x130>
 801a9f6:	7863      	ldrb	r3, [r4, #1]
 801a9f8:	2b2a      	cmp	r3, #42	; 0x2a
 801a9fa:	d135      	bne.n	801aa68 <_svfiprintf_r+0x188>
 801a9fc:	9b03      	ldr	r3, [sp, #12]
 801a9fe:	1d1a      	adds	r2, r3, #4
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	9203      	str	r2, [sp, #12]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	bfb8      	it	lt
 801aa08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801aa0c:	3402      	adds	r4, #2
 801aa0e:	9305      	str	r3, [sp, #20]
 801aa10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aadc <_svfiprintf_r+0x1fc>
 801aa14:	7821      	ldrb	r1, [r4, #0]
 801aa16:	2203      	movs	r2, #3
 801aa18:	4650      	mov	r0, sl
 801aa1a:	f7e5 fbf1 	bl	8000200 <memchr>
 801aa1e:	b140      	cbz	r0, 801aa32 <_svfiprintf_r+0x152>
 801aa20:	2340      	movs	r3, #64	; 0x40
 801aa22:	eba0 000a 	sub.w	r0, r0, sl
 801aa26:	fa03 f000 	lsl.w	r0, r3, r0
 801aa2a:	9b04      	ldr	r3, [sp, #16]
 801aa2c:	4303      	orrs	r3, r0
 801aa2e:	3401      	adds	r4, #1
 801aa30:	9304      	str	r3, [sp, #16]
 801aa32:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa36:	4826      	ldr	r0, [pc, #152]	; (801aad0 <_svfiprintf_r+0x1f0>)
 801aa38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa3c:	2206      	movs	r2, #6
 801aa3e:	f7e5 fbdf 	bl	8000200 <memchr>
 801aa42:	2800      	cmp	r0, #0
 801aa44:	d038      	beq.n	801aab8 <_svfiprintf_r+0x1d8>
 801aa46:	4b23      	ldr	r3, [pc, #140]	; (801aad4 <_svfiprintf_r+0x1f4>)
 801aa48:	bb1b      	cbnz	r3, 801aa92 <_svfiprintf_r+0x1b2>
 801aa4a:	9b03      	ldr	r3, [sp, #12]
 801aa4c:	3307      	adds	r3, #7
 801aa4e:	f023 0307 	bic.w	r3, r3, #7
 801aa52:	3308      	adds	r3, #8
 801aa54:	9303      	str	r3, [sp, #12]
 801aa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa58:	4433      	add	r3, r6
 801aa5a:	9309      	str	r3, [sp, #36]	; 0x24
 801aa5c:	e767      	b.n	801a92e <_svfiprintf_r+0x4e>
 801aa5e:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa62:	460c      	mov	r4, r1
 801aa64:	2001      	movs	r0, #1
 801aa66:	e7a5      	b.n	801a9b4 <_svfiprintf_r+0xd4>
 801aa68:	2300      	movs	r3, #0
 801aa6a:	3401      	adds	r4, #1
 801aa6c:	9305      	str	r3, [sp, #20]
 801aa6e:	4619      	mov	r1, r3
 801aa70:	f04f 0c0a 	mov.w	ip, #10
 801aa74:	4620      	mov	r0, r4
 801aa76:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa7a:	3a30      	subs	r2, #48	; 0x30
 801aa7c:	2a09      	cmp	r2, #9
 801aa7e:	d903      	bls.n	801aa88 <_svfiprintf_r+0x1a8>
 801aa80:	2b00      	cmp	r3, #0
 801aa82:	d0c5      	beq.n	801aa10 <_svfiprintf_r+0x130>
 801aa84:	9105      	str	r1, [sp, #20]
 801aa86:	e7c3      	b.n	801aa10 <_svfiprintf_r+0x130>
 801aa88:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa8c:	4604      	mov	r4, r0
 801aa8e:	2301      	movs	r3, #1
 801aa90:	e7f0      	b.n	801aa74 <_svfiprintf_r+0x194>
 801aa92:	ab03      	add	r3, sp, #12
 801aa94:	9300      	str	r3, [sp, #0]
 801aa96:	462a      	mov	r2, r5
 801aa98:	4b0f      	ldr	r3, [pc, #60]	; (801aad8 <_svfiprintf_r+0x1f8>)
 801aa9a:	a904      	add	r1, sp, #16
 801aa9c:	4638      	mov	r0, r7
 801aa9e:	f7fb ffc7 	bl	8016a30 <_printf_float>
 801aaa2:	1c42      	adds	r2, r0, #1
 801aaa4:	4606      	mov	r6, r0
 801aaa6:	d1d6      	bne.n	801aa56 <_svfiprintf_r+0x176>
 801aaa8:	89ab      	ldrh	r3, [r5, #12]
 801aaaa:	065b      	lsls	r3, r3, #25
 801aaac:	f53f af2c 	bmi.w	801a908 <_svfiprintf_r+0x28>
 801aab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aab2:	b01d      	add	sp, #116	; 0x74
 801aab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aab8:	ab03      	add	r3, sp, #12
 801aaba:	9300      	str	r3, [sp, #0]
 801aabc:	462a      	mov	r2, r5
 801aabe:	4b06      	ldr	r3, [pc, #24]	; (801aad8 <_svfiprintf_r+0x1f8>)
 801aac0:	a904      	add	r1, sp, #16
 801aac2:	4638      	mov	r0, r7
 801aac4:	f7fc fa58 	bl	8016f78 <_printf_i>
 801aac8:	e7eb      	b.n	801aaa2 <_svfiprintf_r+0x1c2>
 801aaca:	bf00      	nop
 801aacc:	080328b4 	.word	0x080328b4
 801aad0:	080328be 	.word	0x080328be
 801aad4:	08016a31 	.word	0x08016a31
 801aad8:	0801a829 	.word	0x0801a829
 801aadc:	080328ba 	.word	0x080328ba

0801aae0 <__sfputc_r>:
 801aae0:	6893      	ldr	r3, [r2, #8]
 801aae2:	3b01      	subs	r3, #1
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	b410      	push	{r4}
 801aae8:	6093      	str	r3, [r2, #8]
 801aaea:	da08      	bge.n	801aafe <__sfputc_r+0x1e>
 801aaec:	6994      	ldr	r4, [r2, #24]
 801aaee:	42a3      	cmp	r3, r4
 801aaf0:	db01      	blt.n	801aaf6 <__sfputc_r+0x16>
 801aaf2:	290a      	cmp	r1, #10
 801aaf4:	d103      	bne.n	801aafe <__sfputc_r+0x1e>
 801aaf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aafa:	f7fd bc05 	b.w	8018308 <__swbuf_r>
 801aafe:	6813      	ldr	r3, [r2, #0]
 801ab00:	1c58      	adds	r0, r3, #1
 801ab02:	6010      	str	r0, [r2, #0]
 801ab04:	7019      	strb	r1, [r3, #0]
 801ab06:	4608      	mov	r0, r1
 801ab08:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab0c:	4770      	bx	lr

0801ab0e <__sfputs_r>:
 801ab0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab10:	4606      	mov	r6, r0
 801ab12:	460f      	mov	r7, r1
 801ab14:	4614      	mov	r4, r2
 801ab16:	18d5      	adds	r5, r2, r3
 801ab18:	42ac      	cmp	r4, r5
 801ab1a:	d101      	bne.n	801ab20 <__sfputs_r+0x12>
 801ab1c:	2000      	movs	r0, #0
 801ab1e:	e007      	b.n	801ab30 <__sfputs_r+0x22>
 801ab20:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab24:	463a      	mov	r2, r7
 801ab26:	4630      	mov	r0, r6
 801ab28:	f7ff ffda 	bl	801aae0 <__sfputc_r>
 801ab2c:	1c43      	adds	r3, r0, #1
 801ab2e:	d1f3      	bne.n	801ab18 <__sfputs_r+0xa>
 801ab30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ab34 <_vfiprintf_r>:
 801ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab38:	460d      	mov	r5, r1
 801ab3a:	b09d      	sub	sp, #116	; 0x74
 801ab3c:	4614      	mov	r4, r2
 801ab3e:	4698      	mov	r8, r3
 801ab40:	4606      	mov	r6, r0
 801ab42:	b118      	cbz	r0, 801ab4c <_vfiprintf_r+0x18>
 801ab44:	6983      	ldr	r3, [r0, #24]
 801ab46:	b90b      	cbnz	r3, 801ab4c <_vfiprintf_r+0x18>
 801ab48:	f7fe fc56 	bl	80193f8 <__sinit>
 801ab4c:	4b89      	ldr	r3, [pc, #548]	; (801ad74 <_vfiprintf_r+0x240>)
 801ab4e:	429d      	cmp	r5, r3
 801ab50:	d11b      	bne.n	801ab8a <_vfiprintf_r+0x56>
 801ab52:	6875      	ldr	r5, [r6, #4]
 801ab54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab56:	07d9      	lsls	r1, r3, #31
 801ab58:	d405      	bmi.n	801ab66 <_vfiprintf_r+0x32>
 801ab5a:	89ab      	ldrh	r3, [r5, #12]
 801ab5c:	059a      	lsls	r2, r3, #22
 801ab5e:	d402      	bmi.n	801ab66 <_vfiprintf_r+0x32>
 801ab60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ab62:	f7ff f86c 	bl	8019c3e <__retarget_lock_acquire_recursive>
 801ab66:	89ab      	ldrh	r3, [r5, #12]
 801ab68:	071b      	lsls	r3, r3, #28
 801ab6a:	d501      	bpl.n	801ab70 <_vfiprintf_r+0x3c>
 801ab6c:	692b      	ldr	r3, [r5, #16]
 801ab6e:	b9eb      	cbnz	r3, 801abac <_vfiprintf_r+0x78>
 801ab70:	4629      	mov	r1, r5
 801ab72:	4630      	mov	r0, r6
 801ab74:	f7fd fc1a 	bl	80183ac <__swsetup_r>
 801ab78:	b1c0      	cbz	r0, 801abac <_vfiprintf_r+0x78>
 801ab7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab7c:	07dc      	lsls	r4, r3, #31
 801ab7e:	d50e      	bpl.n	801ab9e <_vfiprintf_r+0x6a>
 801ab80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ab84:	b01d      	add	sp, #116	; 0x74
 801ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab8a:	4b7b      	ldr	r3, [pc, #492]	; (801ad78 <_vfiprintf_r+0x244>)
 801ab8c:	429d      	cmp	r5, r3
 801ab8e:	d101      	bne.n	801ab94 <_vfiprintf_r+0x60>
 801ab90:	68b5      	ldr	r5, [r6, #8]
 801ab92:	e7df      	b.n	801ab54 <_vfiprintf_r+0x20>
 801ab94:	4b79      	ldr	r3, [pc, #484]	; (801ad7c <_vfiprintf_r+0x248>)
 801ab96:	429d      	cmp	r5, r3
 801ab98:	bf08      	it	eq
 801ab9a:	68f5      	ldreq	r5, [r6, #12]
 801ab9c:	e7da      	b.n	801ab54 <_vfiprintf_r+0x20>
 801ab9e:	89ab      	ldrh	r3, [r5, #12]
 801aba0:	0598      	lsls	r0, r3, #22
 801aba2:	d4ed      	bmi.n	801ab80 <_vfiprintf_r+0x4c>
 801aba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aba6:	f7ff f84b 	bl	8019c40 <__retarget_lock_release_recursive>
 801abaa:	e7e9      	b.n	801ab80 <_vfiprintf_r+0x4c>
 801abac:	2300      	movs	r3, #0
 801abae:	9309      	str	r3, [sp, #36]	; 0x24
 801abb0:	2320      	movs	r3, #32
 801abb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801abb6:	f8cd 800c 	str.w	r8, [sp, #12]
 801abba:	2330      	movs	r3, #48	; 0x30
 801abbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ad80 <_vfiprintf_r+0x24c>
 801abc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801abc4:	f04f 0901 	mov.w	r9, #1
 801abc8:	4623      	mov	r3, r4
 801abca:	469a      	mov	sl, r3
 801abcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abd0:	b10a      	cbz	r2, 801abd6 <_vfiprintf_r+0xa2>
 801abd2:	2a25      	cmp	r2, #37	; 0x25
 801abd4:	d1f9      	bne.n	801abca <_vfiprintf_r+0x96>
 801abd6:	ebba 0b04 	subs.w	fp, sl, r4
 801abda:	d00b      	beq.n	801abf4 <_vfiprintf_r+0xc0>
 801abdc:	465b      	mov	r3, fp
 801abde:	4622      	mov	r2, r4
 801abe0:	4629      	mov	r1, r5
 801abe2:	4630      	mov	r0, r6
 801abe4:	f7ff ff93 	bl	801ab0e <__sfputs_r>
 801abe8:	3001      	adds	r0, #1
 801abea:	f000 80aa 	beq.w	801ad42 <_vfiprintf_r+0x20e>
 801abee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801abf0:	445a      	add	r2, fp
 801abf2:	9209      	str	r2, [sp, #36]	; 0x24
 801abf4:	f89a 3000 	ldrb.w	r3, [sl]
 801abf8:	2b00      	cmp	r3, #0
 801abfa:	f000 80a2 	beq.w	801ad42 <_vfiprintf_r+0x20e>
 801abfe:	2300      	movs	r3, #0
 801ac00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ac04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac08:	f10a 0a01 	add.w	sl, sl, #1
 801ac0c:	9304      	str	r3, [sp, #16]
 801ac0e:	9307      	str	r3, [sp, #28]
 801ac10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ac14:	931a      	str	r3, [sp, #104]	; 0x68
 801ac16:	4654      	mov	r4, sl
 801ac18:	2205      	movs	r2, #5
 801ac1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac1e:	4858      	ldr	r0, [pc, #352]	; (801ad80 <_vfiprintf_r+0x24c>)
 801ac20:	f7e5 faee 	bl	8000200 <memchr>
 801ac24:	9a04      	ldr	r2, [sp, #16]
 801ac26:	b9d8      	cbnz	r0, 801ac60 <_vfiprintf_r+0x12c>
 801ac28:	06d1      	lsls	r1, r2, #27
 801ac2a:	bf44      	itt	mi
 801ac2c:	2320      	movmi	r3, #32
 801ac2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac32:	0713      	lsls	r3, r2, #28
 801ac34:	bf44      	itt	mi
 801ac36:	232b      	movmi	r3, #43	; 0x2b
 801ac38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac3c:	f89a 3000 	ldrb.w	r3, [sl]
 801ac40:	2b2a      	cmp	r3, #42	; 0x2a
 801ac42:	d015      	beq.n	801ac70 <_vfiprintf_r+0x13c>
 801ac44:	9a07      	ldr	r2, [sp, #28]
 801ac46:	4654      	mov	r4, sl
 801ac48:	2000      	movs	r0, #0
 801ac4a:	f04f 0c0a 	mov.w	ip, #10
 801ac4e:	4621      	mov	r1, r4
 801ac50:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac54:	3b30      	subs	r3, #48	; 0x30
 801ac56:	2b09      	cmp	r3, #9
 801ac58:	d94e      	bls.n	801acf8 <_vfiprintf_r+0x1c4>
 801ac5a:	b1b0      	cbz	r0, 801ac8a <_vfiprintf_r+0x156>
 801ac5c:	9207      	str	r2, [sp, #28]
 801ac5e:	e014      	b.n	801ac8a <_vfiprintf_r+0x156>
 801ac60:	eba0 0308 	sub.w	r3, r0, r8
 801ac64:	fa09 f303 	lsl.w	r3, r9, r3
 801ac68:	4313      	orrs	r3, r2
 801ac6a:	9304      	str	r3, [sp, #16]
 801ac6c:	46a2      	mov	sl, r4
 801ac6e:	e7d2      	b.n	801ac16 <_vfiprintf_r+0xe2>
 801ac70:	9b03      	ldr	r3, [sp, #12]
 801ac72:	1d19      	adds	r1, r3, #4
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	9103      	str	r1, [sp, #12]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	bfbb      	ittet	lt
 801ac7c:	425b      	neglt	r3, r3
 801ac7e:	f042 0202 	orrlt.w	r2, r2, #2
 801ac82:	9307      	strge	r3, [sp, #28]
 801ac84:	9307      	strlt	r3, [sp, #28]
 801ac86:	bfb8      	it	lt
 801ac88:	9204      	strlt	r2, [sp, #16]
 801ac8a:	7823      	ldrb	r3, [r4, #0]
 801ac8c:	2b2e      	cmp	r3, #46	; 0x2e
 801ac8e:	d10c      	bne.n	801acaa <_vfiprintf_r+0x176>
 801ac90:	7863      	ldrb	r3, [r4, #1]
 801ac92:	2b2a      	cmp	r3, #42	; 0x2a
 801ac94:	d135      	bne.n	801ad02 <_vfiprintf_r+0x1ce>
 801ac96:	9b03      	ldr	r3, [sp, #12]
 801ac98:	1d1a      	adds	r2, r3, #4
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	9203      	str	r2, [sp, #12]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	bfb8      	it	lt
 801aca2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801aca6:	3402      	adds	r4, #2
 801aca8:	9305      	str	r3, [sp, #20]
 801acaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ad90 <_vfiprintf_r+0x25c>
 801acae:	7821      	ldrb	r1, [r4, #0]
 801acb0:	2203      	movs	r2, #3
 801acb2:	4650      	mov	r0, sl
 801acb4:	f7e5 faa4 	bl	8000200 <memchr>
 801acb8:	b140      	cbz	r0, 801accc <_vfiprintf_r+0x198>
 801acba:	2340      	movs	r3, #64	; 0x40
 801acbc:	eba0 000a 	sub.w	r0, r0, sl
 801acc0:	fa03 f000 	lsl.w	r0, r3, r0
 801acc4:	9b04      	ldr	r3, [sp, #16]
 801acc6:	4303      	orrs	r3, r0
 801acc8:	3401      	adds	r4, #1
 801acca:	9304      	str	r3, [sp, #16]
 801accc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acd0:	482c      	ldr	r0, [pc, #176]	; (801ad84 <_vfiprintf_r+0x250>)
 801acd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801acd6:	2206      	movs	r2, #6
 801acd8:	f7e5 fa92 	bl	8000200 <memchr>
 801acdc:	2800      	cmp	r0, #0
 801acde:	d03f      	beq.n	801ad60 <_vfiprintf_r+0x22c>
 801ace0:	4b29      	ldr	r3, [pc, #164]	; (801ad88 <_vfiprintf_r+0x254>)
 801ace2:	bb1b      	cbnz	r3, 801ad2c <_vfiprintf_r+0x1f8>
 801ace4:	9b03      	ldr	r3, [sp, #12]
 801ace6:	3307      	adds	r3, #7
 801ace8:	f023 0307 	bic.w	r3, r3, #7
 801acec:	3308      	adds	r3, #8
 801acee:	9303      	str	r3, [sp, #12]
 801acf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acf2:	443b      	add	r3, r7
 801acf4:	9309      	str	r3, [sp, #36]	; 0x24
 801acf6:	e767      	b.n	801abc8 <_vfiprintf_r+0x94>
 801acf8:	fb0c 3202 	mla	r2, ip, r2, r3
 801acfc:	460c      	mov	r4, r1
 801acfe:	2001      	movs	r0, #1
 801ad00:	e7a5      	b.n	801ac4e <_vfiprintf_r+0x11a>
 801ad02:	2300      	movs	r3, #0
 801ad04:	3401      	adds	r4, #1
 801ad06:	9305      	str	r3, [sp, #20]
 801ad08:	4619      	mov	r1, r3
 801ad0a:	f04f 0c0a 	mov.w	ip, #10
 801ad0e:	4620      	mov	r0, r4
 801ad10:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad14:	3a30      	subs	r2, #48	; 0x30
 801ad16:	2a09      	cmp	r2, #9
 801ad18:	d903      	bls.n	801ad22 <_vfiprintf_r+0x1ee>
 801ad1a:	2b00      	cmp	r3, #0
 801ad1c:	d0c5      	beq.n	801acaa <_vfiprintf_r+0x176>
 801ad1e:	9105      	str	r1, [sp, #20]
 801ad20:	e7c3      	b.n	801acaa <_vfiprintf_r+0x176>
 801ad22:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad26:	4604      	mov	r4, r0
 801ad28:	2301      	movs	r3, #1
 801ad2a:	e7f0      	b.n	801ad0e <_vfiprintf_r+0x1da>
 801ad2c:	ab03      	add	r3, sp, #12
 801ad2e:	9300      	str	r3, [sp, #0]
 801ad30:	462a      	mov	r2, r5
 801ad32:	4b16      	ldr	r3, [pc, #88]	; (801ad8c <_vfiprintf_r+0x258>)
 801ad34:	a904      	add	r1, sp, #16
 801ad36:	4630      	mov	r0, r6
 801ad38:	f7fb fe7a 	bl	8016a30 <_printf_float>
 801ad3c:	4607      	mov	r7, r0
 801ad3e:	1c78      	adds	r0, r7, #1
 801ad40:	d1d6      	bne.n	801acf0 <_vfiprintf_r+0x1bc>
 801ad42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad44:	07d9      	lsls	r1, r3, #31
 801ad46:	d405      	bmi.n	801ad54 <_vfiprintf_r+0x220>
 801ad48:	89ab      	ldrh	r3, [r5, #12]
 801ad4a:	059a      	lsls	r2, r3, #22
 801ad4c:	d402      	bmi.n	801ad54 <_vfiprintf_r+0x220>
 801ad4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad50:	f7fe ff76 	bl	8019c40 <__retarget_lock_release_recursive>
 801ad54:	89ab      	ldrh	r3, [r5, #12]
 801ad56:	065b      	lsls	r3, r3, #25
 801ad58:	f53f af12 	bmi.w	801ab80 <_vfiprintf_r+0x4c>
 801ad5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ad5e:	e711      	b.n	801ab84 <_vfiprintf_r+0x50>
 801ad60:	ab03      	add	r3, sp, #12
 801ad62:	9300      	str	r3, [sp, #0]
 801ad64:	462a      	mov	r2, r5
 801ad66:	4b09      	ldr	r3, [pc, #36]	; (801ad8c <_vfiprintf_r+0x258>)
 801ad68:	a904      	add	r1, sp, #16
 801ad6a:	4630      	mov	r0, r6
 801ad6c:	f7fc f904 	bl	8016f78 <_printf_i>
 801ad70:	e7e4      	b.n	801ad3c <_vfiprintf_r+0x208>
 801ad72:	bf00      	nop
 801ad74:	08032694 	.word	0x08032694
 801ad78:	080326b4 	.word	0x080326b4
 801ad7c:	08032674 	.word	0x08032674
 801ad80:	080328b4 	.word	0x080328b4
 801ad84:	080328be 	.word	0x080328be
 801ad88:	08016a31 	.word	0x08016a31
 801ad8c:	0801ab0f 	.word	0x0801ab0f
 801ad90:	080328ba 	.word	0x080328ba
 801ad94:	00000000 	.word	0x00000000

0801ad98 <nan>:
 801ad98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ada0 <nan+0x8>
 801ad9c:	4770      	bx	lr
 801ad9e:	bf00      	nop
 801ada0:	00000000 	.word	0x00000000
 801ada4:	7ff80000 	.word	0x7ff80000

0801ada8 <_sbrk_r>:
 801ada8:	b538      	push	{r3, r4, r5, lr}
 801adaa:	4d06      	ldr	r5, [pc, #24]	; (801adc4 <_sbrk_r+0x1c>)
 801adac:	2300      	movs	r3, #0
 801adae:	4604      	mov	r4, r0
 801adb0:	4608      	mov	r0, r1
 801adb2:	602b      	str	r3, [r5, #0]
 801adb4:	f7e9 fb06 	bl	80043c4 <_sbrk>
 801adb8:	1c43      	adds	r3, r0, #1
 801adba:	d102      	bne.n	801adc2 <_sbrk_r+0x1a>
 801adbc:	682b      	ldr	r3, [r5, #0]
 801adbe:	b103      	cbz	r3, 801adc2 <_sbrk_r+0x1a>
 801adc0:	6023      	str	r3, [r4, #0]
 801adc2:	bd38      	pop	{r3, r4, r5, pc}
 801adc4:	2000d67c 	.word	0x2000d67c

0801adc8 <__sread>:
 801adc8:	b510      	push	{r4, lr}
 801adca:	460c      	mov	r4, r1
 801adcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801add0:	f000 f8da 	bl	801af88 <_read_r>
 801add4:	2800      	cmp	r0, #0
 801add6:	bfab      	itete	ge
 801add8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801adda:	89a3      	ldrhlt	r3, [r4, #12]
 801addc:	181b      	addge	r3, r3, r0
 801adde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ade2:	bfac      	ite	ge
 801ade4:	6563      	strge	r3, [r4, #84]	; 0x54
 801ade6:	81a3      	strhlt	r3, [r4, #12]
 801ade8:	bd10      	pop	{r4, pc}

0801adea <__swrite>:
 801adea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801adee:	461f      	mov	r7, r3
 801adf0:	898b      	ldrh	r3, [r1, #12]
 801adf2:	05db      	lsls	r3, r3, #23
 801adf4:	4605      	mov	r5, r0
 801adf6:	460c      	mov	r4, r1
 801adf8:	4616      	mov	r6, r2
 801adfa:	d505      	bpl.n	801ae08 <__swrite+0x1e>
 801adfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae00:	2302      	movs	r3, #2
 801ae02:	2200      	movs	r2, #0
 801ae04:	f000 f87c 	bl	801af00 <_lseek_r>
 801ae08:	89a3      	ldrh	r3, [r4, #12]
 801ae0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ae12:	81a3      	strh	r3, [r4, #12]
 801ae14:	4632      	mov	r2, r6
 801ae16:	463b      	mov	r3, r7
 801ae18:	4628      	mov	r0, r5
 801ae1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae1e:	f000 b823 	b.w	801ae68 <_write_r>

0801ae22 <__sseek>:
 801ae22:	b510      	push	{r4, lr}
 801ae24:	460c      	mov	r4, r1
 801ae26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae2a:	f000 f869 	bl	801af00 <_lseek_r>
 801ae2e:	1c43      	adds	r3, r0, #1
 801ae30:	89a3      	ldrh	r3, [r4, #12]
 801ae32:	bf15      	itete	ne
 801ae34:	6560      	strne	r0, [r4, #84]	; 0x54
 801ae36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ae3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ae3e:	81a3      	strheq	r3, [r4, #12]
 801ae40:	bf18      	it	ne
 801ae42:	81a3      	strhne	r3, [r4, #12]
 801ae44:	bd10      	pop	{r4, pc}

0801ae46 <__sclose>:
 801ae46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae4a:	f000 b827 	b.w	801ae9c <_close_r>

0801ae4e <__ascii_wctomb>:
 801ae4e:	b149      	cbz	r1, 801ae64 <__ascii_wctomb+0x16>
 801ae50:	2aff      	cmp	r2, #255	; 0xff
 801ae52:	bf85      	ittet	hi
 801ae54:	238a      	movhi	r3, #138	; 0x8a
 801ae56:	6003      	strhi	r3, [r0, #0]
 801ae58:	700a      	strbls	r2, [r1, #0]
 801ae5a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801ae5e:	bf98      	it	ls
 801ae60:	2001      	movls	r0, #1
 801ae62:	4770      	bx	lr
 801ae64:	4608      	mov	r0, r1
 801ae66:	4770      	bx	lr

0801ae68 <_write_r>:
 801ae68:	b538      	push	{r3, r4, r5, lr}
 801ae6a:	4d07      	ldr	r5, [pc, #28]	; (801ae88 <_write_r+0x20>)
 801ae6c:	4604      	mov	r4, r0
 801ae6e:	4608      	mov	r0, r1
 801ae70:	4611      	mov	r1, r2
 801ae72:	2200      	movs	r2, #0
 801ae74:	602a      	str	r2, [r5, #0]
 801ae76:	461a      	mov	r2, r3
 801ae78:	f7e8 fffc 	bl	8003e74 <_write>
 801ae7c:	1c43      	adds	r3, r0, #1
 801ae7e:	d102      	bne.n	801ae86 <_write_r+0x1e>
 801ae80:	682b      	ldr	r3, [r5, #0]
 801ae82:	b103      	cbz	r3, 801ae86 <_write_r+0x1e>
 801ae84:	6023      	str	r3, [r4, #0]
 801ae86:	bd38      	pop	{r3, r4, r5, pc}
 801ae88:	2000d67c 	.word	0x2000d67c

0801ae8c <abort>:
 801ae8c:	b508      	push	{r3, lr}
 801ae8e:	2006      	movs	r0, #6
 801ae90:	f000 f8b4 	bl	801affc <raise>
 801ae94:	2001      	movs	r0, #1
 801ae96:	f7e9 fa39 	bl	800430c <_exit>
	...

0801ae9c <_close_r>:
 801ae9c:	b538      	push	{r3, r4, r5, lr}
 801ae9e:	4d06      	ldr	r5, [pc, #24]	; (801aeb8 <_close_r+0x1c>)
 801aea0:	2300      	movs	r3, #0
 801aea2:	4604      	mov	r4, r0
 801aea4:	4608      	mov	r0, r1
 801aea6:	602b      	str	r3, [r5, #0]
 801aea8:	f7e9 fa57 	bl	800435a <_close>
 801aeac:	1c43      	adds	r3, r0, #1
 801aeae:	d102      	bne.n	801aeb6 <_close_r+0x1a>
 801aeb0:	682b      	ldr	r3, [r5, #0]
 801aeb2:	b103      	cbz	r3, 801aeb6 <_close_r+0x1a>
 801aeb4:	6023      	str	r3, [r4, #0]
 801aeb6:	bd38      	pop	{r3, r4, r5, pc}
 801aeb8:	2000d67c 	.word	0x2000d67c

0801aebc <_fstat_r>:
 801aebc:	b538      	push	{r3, r4, r5, lr}
 801aebe:	4d07      	ldr	r5, [pc, #28]	; (801aedc <_fstat_r+0x20>)
 801aec0:	2300      	movs	r3, #0
 801aec2:	4604      	mov	r4, r0
 801aec4:	4608      	mov	r0, r1
 801aec6:	4611      	mov	r1, r2
 801aec8:	602b      	str	r3, [r5, #0]
 801aeca:	f7e9 fa52 	bl	8004372 <_fstat>
 801aece:	1c43      	adds	r3, r0, #1
 801aed0:	d102      	bne.n	801aed8 <_fstat_r+0x1c>
 801aed2:	682b      	ldr	r3, [r5, #0]
 801aed4:	b103      	cbz	r3, 801aed8 <_fstat_r+0x1c>
 801aed6:	6023      	str	r3, [r4, #0]
 801aed8:	bd38      	pop	{r3, r4, r5, pc}
 801aeda:	bf00      	nop
 801aedc:	2000d67c 	.word	0x2000d67c

0801aee0 <_isatty_r>:
 801aee0:	b538      	push	{r3, r4, r5, lr}
 801aee2:	4d06      	ldr	r5, [pc, #24]	; (801aefc <_isatty_r+0x1c>)
 801aee4:	2300      	movs	r3, #0
 801aee6:	4604      	mov	r4, r0
 801aee8:	4608      	mov	r0, r1
 801aeea:	602b      	str	r3, [r5, #0]
 801aeec:	f7e9 fa51 	bl	8004392 <_isatty>
 801aef0:	1c43      	adds	r3, r0, #1
 801aef2:	d102      	bne.n	801aefa <_isatty_r+0x1a>
 801aef4:	682b      	ldr	r3, [r5, #0]
 801aef6:	b103      	cbz	r3, 801aefa <_isatty_r+0x1a>
 801aef8:	6023      	str	r3, [r4, #0]
 801aefa:	bd38      	pop	{r3, r4, r5, pc}
 801aefc:	2000d67c 	.word	0x2000d67c

0801af00 <_lseek_r>:
 801af00:	b538      	push	{r3, r4, r5, lr}
 801af02:	4d07      	ldr	r5, [pc, #28]	; (801af20 <_lseek_r+0x20>)
 801af04:	4604      	mov	r4, r0
 801af06:	4608      	mov	r0, r1
 801af08:	4611      	mov	r1, r2
 801af0a:	2200      	movs	r2, #0
 801af0c:	602a      	str	r2, [r5, #0]
 801af0e:	461a      	mov	r2, r3
 801af10:	f7e9 fa4a 	bl	80043a8 <_lseek>
 801af14:	1c43      	adds	r3, r0, #1
 801af16:	d102      	bne.n	801af1e <_lseek_r+0x1e>
 801af18:	682b      	ldr	r3, [r5, #0]
 801af1a:	b103      	cbz	r3, 801af1e <_lseek_r+0x1e>
 801af1c:	6023      	str	r3, [r4, #0]
 801af1e:	bd38      	pop	{r3, r4, r5, pc}
 801af20:	2000d67c 	.word	0x2000d67c

0801af24 <__malloc_lock>:
 801af24:	4801      	ldr	r0, [pc, #4]	; (801af2c <__malloc_lock+0x8>)
 801af26:	f7fe be8a 	b.w	8019c3e <__retarget_lock_acquire_recursive>
 801af2a:	bf00      	nop
 801af2c:	2000d684 	.word	0x2000d684

0801af30 <__malloc_unlock>:
 801af30:	4801      	ldr	r0, [pc, #4]	; (801af38 <__malloc_unlock+0x8>)
 801af32:	f7fe be85 	b.w	8019c40 <__retarget_lock_release_recursive>
 801af36:	bf00      	nop
 801af38:	2000d684 	.word	0x2000d684

0801af3c <_realloc_r>:
 801af3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af3e:	4607      	mov	r7, r0
 801af40:	4614      	mov	r4, r2
 801af42:	460e      	mov	r6, r1
 801af44:	b921      	cbnz	r1, 801af50 <_realloc_r+0x14>
 801af46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801af4a:	4611      	mov	r1, r2
 801af4c:	f7ff bc12 	b.w	801a774 <_malloc_r>
 801af50:	b922      	cbnz	r2, 801af5c <_realloc_r+0x20>
 801af52:	f7ff fbbf 	bl	801a6d4 <_free_r>
 801af56:	4625      	mov	r5, r4
 801af58:	4628      	mov	r0, r5
 801af5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af5c:	f000 f86a 	bl	801b034 <_malloc_usable_size_r>
 801af60:	42a0      	cmp	r0, r4
 801af62:	d20f      	bcs.n	801af84 <_realloc_r+0x48>
 801af64:	4621      	mov	r1, r4
 801af66:	4638      	mov	r0, r7
 801af68:	f7ff fc04 	bl	801a774 <_malloc_r>
 801af6c:	4605      	mov	r5, r0
 801af6e:	2800      	cmp	r0, #0
 801af70:	d0f2      	beq.n	801af58 <_realloc_r+0x1c>
 801af72:	4631      	mov	r1, r6
 801af74:	4622      	mov	r2, r4
 801af76:	f7fb fc8b 	bl	8016890 <memcpy>
 801af7a:	4631      	mov	r1, r6
 801af7c:	4638      	mov	r0, r7
 801af7e:	f7ff fba9 	bl	801a6d4 <_free_r>
 801af82:	e7e9      	b.n	801af58 <_realloc_r+0x1c>
 801af84:	4635      	mov	r5, r6
 801af86:	e7e7      	b.n	801af58 <_realloc_r+0x1c>

0801af88 <_read_r>:
 801af88:	b538      	push	{r3, r4, r5, lr}
 801af8a:	4d07      	ldr	r5, [pc, #28]	; (801afa8 <_read_r+0x20>)
 801af8c:	4604      	mov	r4, r0
 801af8e:	4608      	mov	r0, r1
 801af90:	4611      	mov	r1, r2
 801af92:	2200      	movs	r2, #0
 801af94:	602a      	str	r2, [r5, #0]
 801af96:	461a      	mov	r2, r3
 801af98:	f7e9 f9c2 	bl	8004320 <_read>
 801af9c:	1c43      	adds	r3, r0, #1
 801af9e:	d102      	bne.n	801afa6 <_read_r+0x1e>
 801afa0:	682b      	ldr	r3, [r5, #0]
 801afa2:	b103      	cbz	r3, 801afa6 <_read_r+0x1e>
 801afa4:	6023      	str	r3, [r4, #0]
 801afa6:	bd38      	pop	{r3, r4, r5, pc}
 801afa8:	2000d67c 	.word	0x2000d67c

0801afac <_raise_r>:
 801afac:	291f      	cmp	r1, #31
 801afae:	b538      	push	{r3, r4, r5, lr}
 801afb0:	4604      	mov	r4, r0
 801afb2:	460d      	mov	r5, r1
 801afb4:	d904      	bls.n	801afc0 <_raise_r+0x14>
 801afb6:	2316      	movs	r3, #22
 801afb8:	6003      	str	r3, [r0, #0]
 801afba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801afbe:	bd38      	pop	{r3, r4, r5, pc}
 801afc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801afc2:	b112      	cbz	r2, 801afca <_raise_r+0x1e>
 801afc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801afc8:	b94b      	cbnz	r3, 801afde <_raise_r+0x32>
 801afca:	4620      	mov	r0, r4
 801afcc:	f000 f830 	bl	801b030 <_getpid_r>
 801afd0:	462a      	mov	r2, r5
 801afd2:	4601      	mov	r1, r0
 801afd4:	4620      	mov	r0, r4
 801afd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afda:	f000 b817 	b.w	801b00c <_kill_r>
 801afde:	2b01      	cmp	r3, #1
 801afe0:	d00a      	beq.n	801aff8 <_raise_r+0x4c>
 801afe2:	1c59      	adds	r1, r3, #1
 801afe4:	d103      	bne.n	801afee <_raise_r+0x42>
 801afe6:	2316      	movs	r3, #22
 801afe8:	6003      	str	r3, [r0, #0]
 801afea:	2001      	movs	r0, #1
 801afec:	e7e7      	b.n	801afbe <_raise_r+0x12>
 801afee:	2400      	movs	r4, #0
 801aff0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801aff4:	4628      	mov	r0, r5
 801aff6:	4798      	blx	r3
 801aff8:	2000      	movs	r0, #0
 801affa:	e7e0      	b.n	801afbe <_raise_r+0x12>

0801affc <raise>:
 801affc:	4b02      	ldr	r3, [pc, #8]	; (801b008 <raise+0xc>)
 801affe:	4601      	mov	r1, r0
 801b000:	6818      	ldr	r0, [r3, #0]
 801b002:	f7ff bfd3 	b.w	801afac <_raise_r>
 801b006:	bf00      	nop
 801b008:	200005c8 	.word	0x200005c8

0801b00c <_kill_r>:
 801b00c:	b538      	push	{r3, r4, r5, lr}
 801b00e:	4d07      	ldr	r5, [pc, #28]	; (801b02c <_kill_r+0x20>)
 801b010:	2300      	movs	r3, #0
 801b012:	4604      	mov	r4, r0
 801b014:	4608      	mov	r0, r1
 801b016:	4611      	mov	r1, r2
 801b018:	602b      	str	r3, [r5, #0]
 801b01a:	f7e9 f965 	bl	80042e8 <_kill>
 801b01e:	1c43      	adds	r3, r0, #1
 801b020:	d102      	bne.n	801b028 <_kill_r+0x1c>
 801b022:	682b      	ldr	r3, [r5, #0]
 801b024:	b103      	cbz	r3, 801b028 <_kill_r+0x1c>
 801b026:	6023      	str	r3, [r4, #0]
 801b028:	bd38      	pop	{r3, r4, r5, pc}
 801b02a:	bf00      	nop
 801b02c:	2000d67c 	.word	0x2000d67c

0801b030 <_getpid_r>:
 801b030:	f7e9 b952 	b.w	80042d8 <_getpid>

0801b034 <_malloc_usable_size_r>:
 801b034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b038:	1f18      	subs	r0, r3, #4
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	bfbc      	itt	lt
 801b03e:	580b      	ldrlt	r3, [r1, r0]
 801b040:	18c0      	addlt	r0, r0, r3
 801b042:	4770      	bx	lr

0801b044 <_init>:
 801b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b046:	bf00      	nop
 801b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b04a:	bc08      	pop	{r3}
 801b04c:	469e      	mov	lr, r3
 801b04e:	4770      	bx	lr

0801b050 <_fini>:
 801b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b052:	bf00      	nop
 801b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b056:	bc08      	pop	{r3}
 801b058:	469e      	mov	lr, r3
 801b05a:	4770      	bx	lr
